formal framework uml modelling timed constraints application railway control systems rafael samuel colin georges mariano national institute transport safety research rue france colin mariano fr 
context railway signalling systems time related features play relevant role validation process specialists confronted necessity applying formal methods mean preventing software faults 
uml offers standard notation high quality systems modelling current lack formal semantics explains existence tools supporting analysis verification 
propose formal support uml model verification time extended specifications 
main goal enable consistency checking uml diagrams existing tools level crossing control system developed order illustrate approach 
keywords uml formal analysis real time requirements engineering 
software engineering industry devoted relevant effort development standardized design languages methods uml far dedicated attention integration design technologies verification validation techniques formal methods 
effort spent develop new languages provide methodological guidance existing ones 
uml notation offers standard language high quality systems modelling 
current lack formal semantics uml explains existence tools supporting analysis verification real time embedded systems particularly context railway applications 
specialists train control systems domain confronted necessity applying formal methods familiar formal specification techniques 
consequently formal methods non standard practice safety critical applications 
propose approach aiming extension uml analysis process model verification formal method 
integration semi formal notations formal methods motivated complementary strengths 
combining uml formal methods dual benefit uml notation lacks mathematical foundations provided formal methods 
analysis consistency checking uml models allowed mathematical techniques automated proof tools 
notational complexity method stronger advantages 
providing uml support notation significantly facilitate specification process contributing decrease explication problem 
propose manipulate parallel uml ocl model associated specification automatically generated 
main goal enable verification validation simulation uml ocl model system way done specification 
complete formal method supporting specification refinement implementation steps life cycle unified notation 
allows complete implementation software system ada code 
significant industrial projects commercial case tools available 
consider extended version language allowing temporal properties specification 
carried previous combining uml consistency checking 
related transformation uml diagrams formal specifications 
authors propose templates derive specifications uml diagrams 
translation rules mapping uml diagrams specifications uml metamodel 
objective works facilitate construction formal specification main purpose enable analysis verification uml 
works take account ocl annotations time related constraints 
structured follows 
describe proposed process section 
section railway level crossing control system described uml modelling 
formalize uml class state diagrams ocl constraints formal specifications section 
section consider time constraints specification 
analysis verification steps discussed section 
proposed process aim project design completely new specification notation method integrate existing ones uml ocl integration basis process composed main steps shown fig requirements elicitation 
step software system begins clarified 
global properties interactions environment sketched 
order guarantee correction requirements consistency completeness important able put information distributed different documents written 
translate uml diagrams sequence diagrams defined order describe typical behaviour second state diagrams describe global interaction system environment 
kinds diagrams annotated ocl constraints 
formal specification 
objective step translate mathematics facts hypothesis needs described uml model 
classes associations translated machines 
ocl constraints requirements analysis proof obligations proof process 
requirements elicitation uml ocl specification 
formal specification pos generation 
analysis verification unproven pos fig 

proposed process transformation machines errors detection define invariants pre post conditions operations machines 
state diagrams allow operations completed 
analysis verification 
main feature specification allow generation proof obligations pos 
pos proven automatically existing proof tools 
pos may reveal inconsistencies system model wrong invariants erroneous pre post conditions 
pos useful mean perform model analysis specification level 
po interpreted order find possible mistakes operations preserve invariant 
sequence diagrams define test scenarios associated operations 
illustrate steps developing railway level crossing system 
requirements uml models explication problem creation valid description required system properties decisive activity order ensure correctness system 
consistency system relies developer ability capture key safety properties 
knowledge related domain plays important role requirements elicitation activity 
approach requirement analysis static dynamic properties taken account different uml diagrams 
comprehension static properties obtained describing involved entities invariant 
object constraint language express properties expressed diagrammatic notation hypotheses facts subsystems classes attributes associations 
safety conditions described step ocl 
comprehension dynamic behaviour system obtained description manner actors interact 
steps necessary uml sequence diagrams defined order describe usual failure scenarios 
second complete expected behaviour system described set ocl pre post conditions operations 
putting operations uml state diagrams defined describe global interaction system actor environment 
specification rlc system complete description traffic control system considered 
description includes domain knowledge basis formal specification 
problem specification radio railway level crossing rlc application developed german 
distributed subsystems train borne control system board system level crossing control system operations centre 
level crossing situated single track railway line road crossing level 
intersection area road railway line called danger zone trains road traffic enter time 
note main safety constraint taken account description system 
uml modelling system composed subsystems communicate 
study begins adopting centric approach regarding level crossing control subsystem called lcc 
view point control system tc operation centre oc actors cooperating making lcc 
status sensor barrier state close open light state state state mode safe unsafe lc rear lc lcc oc controller oc lcc train fig 

class diagram rlc system oc train oc state train receiveack train stage main entities interest modelled regarding possible failure conditions lcc system identified 
main cause failures malfunctioning sensors actuators 
defects may occur main physical structures control systems may fail 
case study limited number failures regarded failures yellow red traffic light regarded separately barriers vehicle sensor delay loss radio network 
consequently consider objects interacting lcc system shown fig lights barriers vehicle sensors control system operations centre 
consider side railway line level crossing order readable specification system 
alc barrier light light 
sec 
sec receiveack arriving state state state state opened status closed sec safe status closed sec unsafe fig 

sequence diagram scenario train approaching traffic lights barriers level crossing controlled lcc system 
lcc system activated train approaching level crossing 
activated mode sequence actions performed lcc specific timing order safely close crossing ensure danger zone free road traffic 
traffic lights switched show yellow light seconds switched red 
seconds barriers started lowered 
lcc system signals safe state level crossing barriers completely lowered maximum time seconds allowing train pass level crossing fig 
level crossing may opened road traffic train completely passed crossing area llc system switches back deactivated mode 
detection train approaching level crossing continuous self localisation train radio communication train lcc system 
triggering vehicle sensor rear level crossing allow barriers opened traffic lights switched 
activated mode lcc system may substates fig showing yellow light closing barrier retaining barrier closed opening barrier 
note time expirations occurring activation lcc denoted events timeout seconds timeout seconds timeout timeout seconds timeout 
failure deactivated repair failure deactivate yellow opening barrier activated timeout closed status opened unsafe status closed safe fig 

state diagram lcc system timeout red timeout closing barrier train approaching level crossing sets braking curve speed supervision making train potential danger point failure situation 
lcc system acknowledges receipt activation order train 
receipt tc system waits appropriate time level crossing closed sends status request lcc system 
level crossing safe state reported train 
allow train cancel braking curve safely pass level crossing 
scenario illustrated sequence diagram fig 
sequence diagrams include ocl constraints define pre conditions operations define time properties 
adding ocl constraints standard formal language constraint specification important step formalising complex models particularly context safety critical systems 
purpose ocl object constraint language allow constraints objects system formally specified preserving comprehensibility readability uml models 
facilitates express properties invariants objects pre post conditions operations 
ocl provides navigation mechanism allowing attributes operations associations referenced context class object class variable 
includes query operators permitting select modify set elements 
ocl expression specific type belongs specific context 
context ocl expression determines scope 
visible elements context expression referenced means navigation expressions 
alc alc mode safe alc status safe alc status closed sec implies alc mode safe alc status opened sec implies alc mode unsafe fig 

sequence diagram scenario train crossing safety properties included invariant system order ensure preservation specification implementation 
main property lcc system preserve road traffic trains enter danger zone time high level abstraction sufficient model crossing area barrier train may cross level crossing time 
case study notion train passing crossing area connection activation railway level crossing 
accordingly front train detected accomplishing task 
rear train 
assume train detected direct way introducing vehicle sensors 
detection barrier state performed introducing barrier sensor 
main safety property lcc system class fig expressed ocl constraints 
red light switched barrier closed yellow light switched barrier closing 
yellow red lights switched barrier opened context lcc system inv self state closed implies self state self state closing implies self state self state self state implies self state opened 
train danger zone level crossing activated state 
activated state composed substates closing closed opening context lcc system inv self train isempty implies self state activated set activated set union closing union closed union opening 
lcc system activated state barrier opened level crossing unsafe mode context lcc system inv self state activated self state opened implies self mode unsafe 
registered state barrier closed triggering sensor indicates opened level crossing unsafe mode 
case barrier closing state lcc remains unsafe barrier completely closed context lcc system inv self state opened self state closed implies self mode unsafe operations lcc class specified ocl pre post conditions 
ocl additionally sequence diagrams complete preconditions invariants operations fig 
state diagrams derive specification operation describing state transition ocl constraints needed add supplementary information retrieved state diagrams 
consider closing barrier raised event timeout 
precondition operation verify yellow light switched sending closing order barrier 
verify barrier closed 
postcondition ensures state yellow light state red light state barrier closed 
operation specified follows context lcc system pre self state self state opened post self state self state self state closed precondition operation activated event verifies barrier closed lcc system safe mode 
postcondition ensures barrier opened state context lcc system pre self state closed self mode safe post self state opened time constraints uml ocl latest ocl proposal apart ocl messages concept ocl specify temporal constraints expressed types uml diagrams state diagrams appear labelling transitions sequence diagrams temporal constraints duration observations temporal observations 
timing diagrams introduced way focusing timing constraints sequence actions model 
unfortunately type diagram add additional expressiveness temporal properties model regard sequence diagrams 
diagrams temporal constraints meaning expressiveness 
lack formal semantics ocl introduces imprecision need translating ocl specifications formalisms help validation corresponding model 
approach table mentions approaches aimed giving ocl miscellaneous formal semantics 
describe translation uml class state diagrams propose transformation rules translating ocl constraints expressions discuss approaches include time constraints model specification 
uml models specifications basis approach transformation uml model formal specification 
major asset combining uml give semantics object models enable automated verification validation tools 
order specify precisely structure behaviour entities composing system prove rigorously satisfy desired structural behavioural properties 
promise increased reliability software systems potential automating software development process 
formalisation class state diagrams initial specification called specification obtained uml diagrams check inconsistencies 
machine associated class 
subsequently notation detail component behaviour class operations global invariants 
approach specification composed levels hierarchy machines regarding inclusion 
level root machine represents system 
machine specifies structure system introduces associations classes 
global properties constraints formalizing inheritance aggregation added 
second level specification introduce machine representing class 
machine linked root machine includes link 
fig shows structure specification railway level crossing system fig 
simple approach easier define modify specification 
resulting specification contains machines hierarchical structure complex problem knowing attach new class hierarchy 
proof obligations ops concerning internal properties class generated independently relationships 
system vehicle sensor barrier lcc system barrier sensor fig 

structure specification light uses includes operations centre classes 
consider class barrier specification fig 
class includes static behavioural properties set objects natural model machine 
resulting machine barrier describes deferred set barrier possible instances class barrier 
set existing instances modelled variable barrier constrained subset barrier 
attribute represented variable defined invariant clause total function set barrier associated type 
operation machine parameter obj representing object operation called 
may list typed arguments args completed translation state diagrams ocl constraints 
machine barrier sets barrier opened closed variables barrier invariant barrier barrier barrier operations obj pre obj barrier obj closed obj opened obj pre obj barrier obj opened obj closed getstate obj args pre obj barrier args type args 
st obj 
fig 

formalisation classes machine barrier associations 
associations classes represent couples instances expressed binary relations existing instances classes 
associations expressed precisely values role multiplicities 
done constraining binary relation function partial function injection bijection additional properties domain range 
association lcc class barrier class lcc barrier formalized variable lcc barrier 
class diagram fig establishes barrier associated lcc system typing predicate defining function set level crossings variable lcc set barriers variable barrier added invariant lcc system machine lcc barrier lcc barrier 
fig 
shows translation associations 
machine lcc system includes barrier yellow light red light variables barrier invariant lcc barrier lcc barrier lcc sensor lcc lcc train lcc train lcc red light lcc yellow light 
operations barrier obj obj pre obj lcc obj barrier lcc barrier lcc barrier obj obj barrier obj obj pre obj lcc obj barrier obj obj lcc barrier lcc barrier lcc barrier obj obj fig 

formalisation classes machine lcc system formalisation state diagrams state diagrams introduce behavioural properties specification 
set possible states class formalised set defined respective machine 
variable current state class objects 
defined total function domain set instances range set possible states 
transition states formalised operation name name incoming event 
precondition operation deduced guard transition postcondition describes transition new state 
consider state diagram lcc system class fig 
transition state state activated event timeout formalized shown fig 
note included information obtained ocl definition operation operation activated event timeout describe translation ocl 
event may activate different transitions depending guard condition transitions formalized operation machine 
select close describe transition illustrated fig formalisation event timeout 
machine lcc system 
operations timeout obj pre obj lcc state obj lcc sensor obj opened lcc barrier obj opened red obj yellow obj state obj yellow obj red obj timeout obj pre obj lcc state obj red obj yellow obj state obj lcc barrier obj timeout obj pre obj lcc state obj lcc barrier obj closed red obj yellow obj select lcc sensor obj closed state obj mode obj safe lcc sensor obj opened state obj failure skip fig 

formalisation state diagrams class state diagrams translated integrated initial specification ocl constraints complete invariants operations machines 
formalisation ocl constraints semi formal nature ocl definition restricts appropriate utilization safety critical applications leading users ambiguous interpretations uml models 
difficulty increased lack tools supporting analysis proof ocl expressions uml models 
related tools checking uml design 
proposes approach validation uml models simulation 
second proposes analyzer object models alloy carried previous formalizing ocl translation rules syntaxes languages 
take account types ocl constraints 
type constraint specifies invariant class 
second type constraint specifies precondition postcondition operation 
case translation ocl constraint consists conjunction new predicate invariant related machine second case consists completion operation machine 
illustrate formalisation ocl invariant lcc system fig 
machine lcc system properties activated state activated invariant obj obj lcc lcc barrier obj closed red obj obj obj lcc lcc barrier obj closing red obj obj obj lcc yellow obj red obj lcc barrier obj opened obj obj lcc obj dom lcc train state obj activated obj obj lcc state obj activated lcc sensor obj opened mode obj unsafe obj obj lcc lcc sensor obj opened lcc barrier obj closed mode obj unsafe fig 

formalisation ocl invariants ocl pre postconditions complete operations machines 
fig precondition operation timeout constraints lcc system state generated state diagram red light switched barrier closed translation ocl predicate self state self state opened postcondition operation initially includes substitution state obj setting new state lcc instance obj 
completed translation ocl postcondition self state self state self state closed generates parallel substitutions lcc barrier obj yellow obj red obj time constraints specification paragraphs different possible approaches specify time constraints uml model verify embedded obtained machines 
ground approach low expressiveness temporal constraints specified uml diagrams see instance possible solution translate temporal constraints checking approach described roughly described mechanisms specify validate temporal constraints 
achieved specifying clock machine defining variables holding times interested 
help variables specify simple temporal constraints properties different operations 
illustrate translating temporal constraints adding model corresponding diagrams 
instance left part represents different means clock variable specify operation takes time operation triggered certain interval time 
detail means specifies amount time time units required barrier close 
timeout shows closing barrier takes place time units 
models precise delay exactly time units 
take safe bet 
timeout shows dynamical behaviour depending past events time took barrier successfully closed time units system safe state 
remember specified closing barrier took time units 
verification step ensure delay compatible time units model 
obj pre obj barrier obj opened obj closed time time timeout obj pre obj lcc state obj red obj yellow obj time time state obj lcc barrier obj time timeout obj pre obj lcc state obj lcc barrier obj closed red obj yellow obj select lcc sensor obj closed time state obj mode obj safe lcc sensor obj opened time state obj failure skip fig 

operations including time constraints seen addition temporal constraints straightforward depending dynamic appear select substitutions preconditions 
instance static requirement appear precondition operation need 
subtlety way specifying timed constraints apply immediately concurrent way substitution operations time variable clock modified sides forbidden method 
simple solution modified substitution semantics retain values modified variable take 
instance operation timeout time advanced operations yellow red ina non deterministic way 
verification step ensure possible new values time verify specified time constraints 
see temporal constraints uml model easily expressed terms constraints substitutions 
method compatible classical method simplifies addition temporal requirements semantics ocl formulas 
advantage drawback strong update ocl specifications better temporal expressiveness lead side 
far method quickly adaptable uml model similar complexity level crossing model 
extended temporal logic describe approach extend duration calculus interval temporal logic 
going detail approach allows label operations temporal formulas checked 
formula representing temporal properties operation generated help operation expected formula known valid operation evaluated general postcondition 
check deduce temporal constraint operation temporal properties 
uml model approach natural focus different changes state system durations showing better approach timing diagrams introduced 
sketch approach dealing static dynamic constraints embedded model dynamic constraints timeout clock keep track certain points time 
static constraints facilitate defining operations durations states instance holding time units constraints timeout operation specify operation containing calls arrival train time red light set 
see technical details 
remarks related approach uml model modelling process thought order include timing diagram perspective model focused durations different states ambiguities sequence diagram relieved instance dead delays return operation result operation call undetermined delays needn taken account question instance answered section dead delays appear final machines 
semantical choices possible 
event timed automata approach allowing deal temporal properties models described model associated timed automata describing evolution states model 
approach integrate state diagram modelling uml tools diagrams annotated time constraints 
approach focuses possible refinement model conjunction automata giving possibility give refinement semantics event uml ocl 
doesn deal semantic changes required uml models translated event machines interested reader encouraged read 
discussion approaches approaches remarks complexity timed properties expressed addressed simplest approach section easily allow expression complex timed properties liveness fairness 
implementation easiest achieve intervene translation uml models machines state real time properties level crossing model approach section fits uml model 
closer timing diagram see discussion sec 

apart details translation extended underlying logic duration calculus allows express complex time properties including course liveness fairness properties 
approach refinement temporal properties constraints uml model mirrored adequately machines described detail approach sec 
sufficient express properties model nice property allowing easy refinement uml model maps timed automata refinement easily reflected 
temporal properties checked depend logic state verify respect timed automata 
general logics ctl sufficient express liveness fairness properties 
verification model order automate formalization process implemented prototype tool performing derivation uml ocl models specifications 
part project aims providing automated tool support method 
translation composed main steps fig 
uml xml 
step uml model encoded xml schema 
design level chosen poseidon modelling tool order draw uml model generate associated xmi model model xmi 
transformation schema xmi uml written xslt language allowing xmi file translated xml file model xml 

xml uml parsed models 
resulting xml file contains information uml model elements 
model elements parsed ocaml types uml syntax tree definition uml ml 
done processor 
resulting file model ml generate specification 

uml models specifications 
uml module implements translation rules uml class state diagrams ocl constraints specifications 
translation rules implemented ocaml mappings uml syntax uml ml syntax ml 
uml ocl model model xmi parsed specification xslt xmi uml types ast ml translation uml xml processor uml parsed model model ml model xml uml types ast uml ml fig 

automated translation uml models specifications formal specification generated uml ocl model type checked verified proof process 
result performing type check specification detection syntax type errors uml ocl models 
theorem prover automatically generate proof proof obligations ops 
ops guarantee conformance operations machine invariant 
operation raises proof obligations related precondition substitution parts 
non proven ops detect https gna org projects www com inconsistencies invariant preconditions incompleteness postcondition 
fig 
shows extract proof obligation timeout operation 
lcc state state deactivated failure mode mode safe unsafe activated state activated lcc system invariant barrier barrier barrier barrier 
additional sets invariants included machines lcc sensor obj closed state obj mode obj safe lcc system invariant lcc sensor obj opened state obj failure lcc system invariant lcc sensor obj closed lcc sensor obj opened skip lcc system invariant fig 

proof obligation timeout operation proof obligation proven theorem prover developer required review related ocl invariant operation necessary modifications 
approach way approach translate uml ocl way round 
type checker prover finds error specification user able understand specification search uml ocl model error 
note quite simple developer find uml element associated expression 
order facilitate task possible create maintain concrete links uml ocl specifications elements development process names roughly ocl expression translated simple expression 
part major project aiming combining formal semi formal methods particularly context railway control systems 
effort put complementary strengths uml notation time extended version formal method 
resulting approach promises increased reliability software systems potential automating software development process 
puts particular emphasis formalisation uml class state sequence diagrams ocl constraints 
far implemented prototype tool automating translation class state diagrams ocl annotations specifications 
translation sequence diagrams implemented 
approaches deal real time constraints uml model section transformation mechanics include 
saw approaches allow give expressiveness specification checked 
lack semantics realtime constraints uml ocl leaves indecision preventing choosing semantics adequate version uml ocl including real time semantics 

object management group omg 
unified modeling language superstructure version 
final adopted specification omg document ptc august 

en 
railway applications software railway control protection systems 


abrial 
book assigning programs meanings 
cambridge university press 

levy 
formal specifications analysis verification uml ocl models 
workshop consistency problems uml software development 
th international conference unified modeling language dresden germany september 

levy 
transformation rules ocl constraints formal expressions 
workshop critical systems development uml 
th international conference unified modeling language dresden germany september 

eric meyer res 
systematic approach transform omt diagrams specification 
jeannette wing jim woodcock jim davies editors fm formal methods number lecture notes computer science springer verlag pages 
springer verlag september 


overview method support tool generating specifications uml notations 
proceedings ase th international conference automated software engineering grenoble france september 

object management group omg 
object constraint language version 
final adopted specification omg document ptc october 

levy res 
requirements formal specification uml nd international conference computer systems technologies comp sofia bulgaria june 

jansen 
traffic control system case study problem description note domain software specification 
technical report 


stand 

stephen flake 
temporal ocl extensions specification real time constraints 
workshop specification validation uml models real time embedded systems san francisco ca usa october 
uml 

richters gogolla 
validating uml models ocl constraints 
proceedings uml 

jackson daniel schechter ian ilya 
alcoa alloy analyzer 
international conference software engineering limerick ireland june 

helen steve schneider 
capturing timing requirements formally amn 
technical report csd tr royal holloway department computer science egham surrey tw ex england june 

jean paul sar munoz 
formalization method coq pvs 
fm users group meeting applying industrial context tools lessons techniques pages 

samuel colin georges mariano vincent 
duration calculus real time semantic international colloquium theoretical aspects computing 
unu iist september 
china 

jacques 
expression en des syt mes temps el 
pages 

fm users group meeting applying industrial context tools lessons techniques 
springer verlag 

irisa 
dans assistance au de irisa rennes france january 
irisa 
