higher order combinators join patterns stm join patterns provide higher level concurrent programming construct explicit threads locks typically implemented special syntax run time support 
presents strikingly simple design small number higher order combinators composed realize powerful set join patterns library existing language 
higher order combinators enjoy lock free implementation uses software transactional memory stm 
allows joins patterns implemented simply library provides transformational semantics join patterns 

join patterns provide way write concurrent programs provide programming model higher level direct invocation threads explicit locks specific order 
programming model heart notion atomically consuming messages group channels executing code consumed message values 
join patterns easily encode related concurrency idioms actors active objects shown benton 
join patterns typically occur language level constructs special syntax sophisticated implementation state machine governs atomic consumption messages 
contribution show join patterns modeled small powerful collection higher order combinations implemented lock free style software transactional memory 
combinators higher order take functions programs arguments return functions programs result glue input programs form resulting composite program allows domain specific language join patterns 
achieved library existing language requiring special syntax run time code 
complete implementation appears 
join patterns emerged desire find higher level concurrency communication constructs locks threads concurrent distributed programs 
example fournet gonthier join calculus provides process calculi amenable direct implementation distributed setting 
related jocaml funnel similar ideas functional setting 
adaptation object oriented setting singh microsoft microsoft way redmond wa usa microsoft com research microsoft com previously known polyphonic similar extensions reported java 
concurrent programming join patterns promises provide useful higher level abstractions compared asynchronous message passing programs directly manipulate ports 
adds new language features implement join patterns 
adding concurrency features language extensions advantages including allowing compiler analyze optimize programs detect problems compile time 
presents method introducing flexible collection join operations implemented solely library 
assume availability software transactional memories stm may implemented syntactic language extensions introduced just library 
lazy functional programming language haskell host language join patterns implemented terms stm robust implementation provides composable memory transactions exploits type system statically forbid side effecting operations inside stm 
haskell stm functionality available regular library 
extensive composable nature haskell stm implementation help define join pattern elements possess properties 
reasons haskell include support lightweight threads allows experiment join pattern programs vastly threads practical language threads implemented directly operating system threads 
remainder briefly presents salient features stm haskell goes show join patterns added library stm 
contains listings complete haskell programs reader encouraged compile execute programs 

join patterns polyphonic extensions comprise just new concepts asynchronous methods return control caller immediately execute body method concurrently ii chords known synchronization patterns join patterns methods execution predicated prior invocation null bodied asynchronous methods 
asynchronous methods code complete program demonstrates asynchronous method 
system public class public class public async sumarray int int sum foreach int value sum value console sum sum static void main summer new summer sumarray new int summer sumarray new int console main method done introduces async keyword identify asynchronous method 
calls asynchronous method return immediately asynchronous methods return type behave return type void 
sumarray asynchronous method captures array caller body run concurrently respect caller context 
compiler may choose variety schemes implementing concurrency 
example separate thread created body asynchronous method item created thread pool multi processor multi core machine body may execute parallel calling context 
second call sumarray need wait body sumarray method finishes executing call sumarray 
program calls sumarray method summer object behave body sumarray forked separate thread control returns immediately main program 
program compiled run general write results summations main method done text arbitrary orders 
compiler downloaded research microsoft com chords code complete program demonstrates chord buffer 
system public class public class buffer public async put int value public int get put int value return value static void main buf new buffer buf put buf put console buf get buf get operator groups methods form join pattern 
join pattern contains asynchronous methods concurrently execute body constituent methods called 
join pattern may synchronous method identified return type async 
body synchronous join pattern fires constituent methods including synchronous method called 
body executed caller context thread 
join pattern behaves join operation collection ports jocaml methods role similar ports 
calls put method similar spirit performing asynchronous message send post port 
case port identified method name put 
asynchronous posts put port occur series main body values arrive put port arbitrary order 
consequently program shown non deterministic output writing 

stm concurrent haskell software transactional memory stm mechanism coordinating concurrent threads 
believe stm offers higher level abstraction traditional combination locks condition variables claim substantiate 
material section largely borrowed directly 
briefly review stm idea especially realization concurrent haskell interested reader consult background details 
concurrent haskell extension haskell pure lazy functional programming language 
provides threads abstractions communicating 
constructs naturally involve side effects lazy evaluation strategy necessary able control exactly occur 
big breakthrough came mechanism called monads key idea value type io action performed may input output yielding value type example functions putchar getchar types putchar char io getchar io char putchar takes char delivers action performed prints string standard output getchar action performed reads character console delivers result action 
complete program define action called main executing program means performing action 
example main io main putchar actions glued monadic bind combinator 
normally syntactic sugar allowing syntax 
example complete program reads character prints twice main getchar putchar putchar threads haskell communicate reading writing transactional variables 
operations follows data tvar stm tvar tvar stm tvar stm operations stm monad supports carefully designed set transactional operations including allocating reading writing transactional variables 
operations return stm actions haskell allows 
syntax compose stm actions actions 
stm actions remain tentative execution order expose stm action rest system passed new function atomically type atomically stm io takes memory transaction type stm delivers action performed runs transaction atomically respect memory transactions 
example say main atomically 
operationally atomically takes tentative updates applies involved making effects visible transactions 
atomically function stm typed operations built software transactional memory 
deals maintaining thread transaction log records tentative accesses 
atomically invoked stm checks logged accesses valid concurrent transaction committed conflicting updates 
log valid stm commits atomically heap 
memory transaction fresh log 
splitting world stm actions actions provides valuable guarantees stm actions pure computation performed inside memory transaction particular actions ii stm actions performed outside transaction programmer accidentally read write tvar protection atomically 
course write atomically read tvar trivial transaction call atomically omitted 
example procedure atomically increments tvar tvar int io atomically implementation guarantees body call atomically runs atomically respect thread example possibility thread read 
transaction block retry retry stm semantics retry abort current atomic transaction re run transactional variables updated 
example procedure decrements tvar blocks variable zero tvar int io atomically retry function examines predicate text see true executes monadic calculation retry 
orelse function allows transactions tried sequence orelse transaction attempts calls retry tried retries entire call orelse retries 
example procedure decrement zero case decrement 
zero thread block tvar int tvar int io atomically orelse addition stm code needs modifications robust exceptions 
semantics atomically exception raised inside transaction globally visible state change whatsoever 
example concurrent data structure java jsr collection written stm haskell appears 

implementing joins stm channels help join patterns stm mechanism haskell shall existing library provides channels data stm stm stm new channel created call 
value read channel value written 
tentative operations occur inside stm monad part stm expression subject call atomically order execute commit 
synchronous join patterns step trying approach join pattern feature try capture notion synchronous join pattern 
choose model methods channels haskell 
model join pattern atomically reading multiple channels 
feature trivially implemented stm shown definition join 
module main import control concurrent import control concurrent stm join io join atomically return int int io chan chan join chan chan putstrln got show main atomically atomically atomically atomically assuming program saved file called join hs compiled commands shown 
glasgow haskell compiler downloaded www haskell org ghc ghc exts join hs join exe chasing modules join hs compiling main join hs join linking 
join exe got program join function takes channels returns pair values read channel 
channels empty stm aborts retries 
definition join full chord piece notion synchronizing arrival data channels code execute synchronization fires 
done function 
implementation join mechanism languages involve creating state machine monitors arrival messages ports decides handler run 
complexity implementation proportional number ports joined 
exploiting stm mechanism haskell gives join style synchronization free cost implementation depends size values beings joined values copied transaction log 
asynchronous join patterns code example synchronous join pattern runs context caller 
program recurring asynchronous join recursive call module main import control concurrent import control concurrent stm join io join atomically return chan chan handler forkio chan chan handler chan chan handler join chan chan forkio handler chan chan handler int int io putstrln got show int int io putstrln got show main atomically atomically atomically atomically atomically atomically atomically different join important respects 
intention join automatically re issue 
done recursively calling 
second version concurrently executes body handler join synchronization occurs corresponds case chord contains asynchronous methods 
example spawns threads compete values shared channel 
thread captures values join pattern forks handler thread deal values immediately starts compete values ports watching 
sample execution program main got got higher order join combinators haskell allows definition infix symbols help join patterns easier read 
section presents type classes conjunction infix symbols provide convenient syntax join patterns 
synchronous join pattern represented infix operator identify channels joined operator apply handler 
infix operators declared left associative binding strengths 
purpose combinator compose elements join pattern identify join fire case identifies channels 
purpose synchronous combinator take join pattern execute handler fires 
result handler expression result join pattern 
lambda expression bind names results join pattern named function 
sample join pattern shown definition function example 
module main import control concurrent import control concurrent stm infixl infixl stm chan chan chan chan return stm io io handler results atomically handler results example chan chan chan chan putstrln show main chan atomically chan atomically atomically chan atomically chan wombat example chan chan program writes wombat 
define operator performing replicated asynchronous joins similar way shown 
stm io io joins cont forkio joins cont return discard thread id handler results atomically forkio handler results handler example chan chan chan chan putstrln show main chan atomically chan atomically atomically chan atomically chan wombat atomically chan atomically chan example chan chan continuation associated joins chan chan run time join pattern fires 
sample output wombat asynchronous pattern runs indefinitely main program ends brings threads 
write variant join pattern gets notified indefinitely blocked exception 
exception caught terminate 
choose avoid asynchronous 
haskell multi parameter type class mechanism overload definition allow channels joined 
define type class called joinable allows overload definition 
instances case arguments channels case second argument stm expression resulting join pattern case left argument stm expression 
fourth instance case arguments stm expressions omitted straight forward define 
class joinable stm instance joinable join instance joinable stm join instance joinable stm join return join stm stm join chan stm chan stm return example chan chan chan chan chan chan putstrln show main chan atomically chan atomically chan atomically atomically chan atomically chan atomically chan example chan chan chan problem formulation operator associative 
defined left associated infix operator means different shapes tuples returned join pattern depending join pattern bracketed 
example example chan chan chan chan chan chan putstrln show example chan chan chan chan chan chan putstrln show desirable nested applications operator return flat structure 
address problem various ways 
approach type classes provide overloaded definitions fix return type flat tuple 
method brittle requires type instance declarations map nested tuple pattern flat tuple type 
approaches exploit haskell dynamic types template facility program splicing define meta program rewrites nested tuples flat tuples 
go details technicalities clarity exposition stick nested tuples remainder 
joins lists channels joining list channels easily accomplished mapping channel reading operation element list 
demonstrated line definition 
stm mapm example channels chan channels chan putstrln show main chan atomically chan atomically chan atomically atomically chan atomically chan atomically chan example chan chan chan program writes 
define join arrays ports similar way 
greater generality define type class introduce method mapping type isomorphic type performing operations channel 
look ways overloading operate directly lists arrays applying function shown interacts expression join pattern 
choice biased choice combinator allows expression choice join patterns 
choice biased prefer join pattern fire 
alternative represented pair contains join pattern action executed join pattern fires 
stm io stm io io action action io atomically return action orelse return action io orelse combinator help compose alternatives 
combinator tries execute join pattern succeeds value bound variable input io action called action 
join pattern fire argument orelse performs retry second alternative attempted pattern 
succeed value emitted pattern supplied action fail stm express perform retry 
fairer choice pseudo random variable dynamically construct orelse expression bias 
option keep alternating roles variable record join pattern checked 
dynamic joins join patterns occur declarations static construct 
wants dynamically construct join pattern depending information available run time 
argues join patterns occurring expressions statements declarations 
formulation join patterns just expressions get dynamic joins free 
simple example example chan chan chan chan chan putstrln show chan chan chan putstrln show example value variable determine join pattern executed 
elaborate example join pattern values read dynamically construct new join pattern handler function 
example join pattern returns channels dynamically construct join pattern handler function 
statically defined joins enjoy opportunities efficient compilation analysis dynamically constructed joins 
conditional joins desirable predicate join pattern fire guard conditions met values read join pattern satisfy certain criteria 
avoid complexities implementing conditional join patterns tricky concurrent programming language extension exploiting stm library interface haskell 
define guards predicate consumption value channel 
bool stm 
chan predicate predicate chan retry example cond chan chan chan cond chan putstrln show guards expressed boolean expressions written dynamically constructed join pattern guard 
implementation exploits retry function haskell stm interface abort channel read predicate satisfied 
useful kind conditional join want access shared state system help formulate condition 
shared state stm programs accessed stm monad introduce overloaded version takes condition stm monad 
stm bool stm 
chan predicate cond predicate cond chan retry predicate supplied variables predicate consumption value channel 
conditions update shared state 
guards try update shared state time stm mechanism ensure consistent updates allowed 
definition allows quite powerful conditional expressions written depend values read channels join pattern 
condition stm predicate supplied channels join pattern variables help form predicate 
allows quite dynamic forms join performing join pattern channels chan chan performing join pattern channels chan chan depending value read chan 
special case stm predicate version conditional join tests see value read satisfies predicate 
code defines function 
takes predicate function arguments 
example shows join pattern fire value read chan greater 
bool stm 
chan predicate value chan predicate value return value retry example chan chan chan 
chan putstrln show conditional join pattern implemented returning value port satisfy predicate 
threads read port return values read possibility port values returned different order 
furthermore threads judgments state port value read returned 
conditional formulations atomically remove values port predicate satisfied suffer problems 
non blocking variants non blocking variants may composing blocking versions join patterns orelse alternative returns negative status information 
demonstrated definition returns value wrapped type constructors just positive result negative result 
stm stm pattern result pattern return just result orelse return exceptions understanding exceptions behave join pattern scheme amounts understanding exceptions behave haskell stm interface 
exceptions thrown caught described 
encoding join patterns gives default backward error recovery scheme implementation join pattern firing mechanism error occurs handler code transaction restarted consumed values returned ports read 
handler code execute stm monad may raise exception 
exception require forward error recovery may involve returning values channels code executed consumption values channels committed 

related join pattern library called ccr announced underlying model quite different 
model exposes arbiters govern messages consumed returned ports 
arbiters fundamental building blocks encode variety communication synchronization constructs including variant join patterns 
significant difference lack synchronous join handler code join patterns asynchronously executed worker thread 
requires programmer explicitly code continuation passing style iterator mechanism exploited ccr effectively get compiler continuation passing transform automatically user style clu 
imagine extending haskell jocaml style join patterns special language feature special syntax 
example composite join pattern jocaml manual def apple 
pie 
print string apple pie 
pie 
print string pie ports defined apple pie 
composite join pattern defines synchronization pattern contains alternatives eligible fire values available ports apple pie values available pie 
message pie system internal choice spawn apple pie pie alternatively system equally responded apple pie 
expressing patterns haskell stm encoding join patterns similar approach require special syntax language extensions 
making join patterns concrete language facilitate compiler analysis optimization 

main contribution realization haskell stm join combinators model join patterns exist languages 
embedding style join patterns haskell exploiting library gives small powerful interface stm mechanism affords great deal expressive power 
furthermore embedding implemented solely library need extend language modify compiler 
entire source embedding compact appear forms examples 
reasons conspire aid embedding join patterns 
composable nature stm haskell means separately define behavior elements join patterns compose powerful higher order combinators 
stm actions glued executed atomically allows separation concerns particular channel interaction channels 
behavior exception mechanism composes pleasant way 
type safety haskell provides ensure operations occur inside stm operation greatly aids production robust programs 
ability define symbolic infix operators exploit type class system systematic overloading help produce join patterns concise 
benefit representing join patterns expressions declarations 
stm mechanism proves effective allowing describe conditional join patterns 
quite complicated define terms lower level concurrency primitives 
able give short clear definitions types conditional join patterns 
ability perform dynamic joins composite data structures contain ports lists conditional joins library expressive currently implemented 
furthermore certain situations optimistic concurrency stm implementation may yield advantages pessimistic lock implementation finite state machine join patterns 
approach realizing join patterns lock free manner involve implementing state machine heart join machinery languages stm explicit locks 
stm representation join patterns choice implementer think transformational semantics provide join patterns useful model programmer 
join patterns shown written directly stm monad 
think synchronization appropriately expressible join pattern preferable reasons including need programmer intent giving compiler opportunity compile join patterns specialized mechanism stm 
interesting avenue suggested anonymous reviewers consider reverse experiment optimistic implementation join calculus primitives conjunction monitors condition variables try implement haskell stm mechanism 
intuition approach complicated implement 
believe value experiment design efficient join pattern library show stm may viable idiom capturing various domain specific concurrency abstractions 
haskell implementation enjoy widespread adoption believe model provides useful workbench exploring join patterns encoded library higher order combinators lock free implementation 
higher order combinators encoded extent conventional languages constructs delegates prototype implementations stm available mainstream languages join java translating examples haskell stm world languages rely heavyweight operating system threads may need introduce extra machinery required haskell support large number lightweight threads 
agha actors model concurrent computations distributed systems 
mit press cambridge mass 
harris marlow peyton jones singh lock free data structures stm haskell 
eigth international symposium functional logic programing flops 
april appear 
appel compiling continuations 
cambridge university press 
benton cardelli fournet modern concurrency abstractions acm transactions programming languages systems toplas vol 
issue 
birrell programming threads 
research report dec 
chaki rajamani rehof types models model checking message passing programs 
proceedings th annual acm sigplan sigact symposium principles programming languages 
acm 
singh asynchronous messaging library 
synchronization concurrency object oriented languages 
october 
le jocaml mobile agents objective caml 
international symposium agent systems applications 
asa third international symposium agents ma 
ieee computer society 
iii haskell tutorial 

available www isi edu www haskell org 
fournet gonthier reflexive chemical machine join calculus 
proceedings rd acm sigact symposium principles programming languages 
acm 
fournet gonthier join calculus language distributed mobile programming 
proceedings applied semantics summer school sept barthe dybjer pinto eds 
lecture notes computer science vol 

springer verlag 
guerraoui herlihy polymorphic contention management 
proceedings th international symposium distributed computing disc poland september 
harris marlow jones herlihy composable memory transactions 
ppopp 
hewitt viewing control structures patterns passing messages 
journal artificial intelligence 

igarashi kobayashi resource usage analysis 
acm transactions programming languages systems toplas volume issue 
kearney join java alternative concurrency semantics java 
tech 
rep university south australia 
liskov history clu 
acm sigplan notices 
lea java util concurrent synchronizer framework 
podc workshop 

ousterhout threads bad idea purposes 
presentation usenix technical conference 

odersky functional nets 
proceedings european symposium programming 
lecture notes computer science vol 

springer verlag 
peyton jones gordon finne concurrent haskell 
rd acm symposium principles programming languages popl pp 

peyton jones wadler imperative functional programming 
th acm symposium principles programming languages popl pp 

