efficient skyline query processing peer peer networks wang beng chin ooi anthony tung southeast university china national university singapore yahoo com cn comp nus edu sg edu cn skyline query gaining interest database research communities years 
existing studies focus mainly centralized systems resolving problem distributed environment peer peer network emerging topic 
desiderata efficient skyline querying environment include progressive returning answers low processing cost terms number peers accessed search messages balanced query loads peers 
propose solution satisfies desiderata 
solution balanced tree structured network 
partitioning skyline search space adaptively query accessing patterns able alleviate problem hot spots skyline query processing 
able estimate peer nodes query subspaces able control amount query forwarding limiting number peers involved amount messages transmitted network 
load balancing achieved query load conscious data space splitting merging joining departure nodes dynamic load migration 
experiments real synthetic datasets confirm effectiveness scalability algorithm networks 

peer peer systems popular medium distributed information sharing searching gaining increasing interest years 
provide users efficient information exchange rich query functions existing studies focused extensively exact query range query information retrieval :10.1.1.102.473:10.1.1.118.5966:10.1.1.140.3129:10.1.1.116.7128:10.1.1.131.6291
skyline queries studied centralized systems 
skyline query returns set data points dom done author intern national university singapore points data set 
point dominates point worse concerning dimensions better dimension 
examples searching hotels cheap price close beach querying best players nba seasons 
little concentrated efficient skyline query processing context 
problem straightforward efficient adopt centralized algorithm build centralized index compute 
attempt progressive processing skyline queries network 
proposal controls query propagation partial order zones 
unfortunately focuses constrained skyline queries consequently load balancing approach designed solve workload imbalance caused skewed query ranges 
platform supports structured unstructured overlays 
propose solution called skyline space partitioning ssp structured network called baton provide efficient processing unconstrained skyline queries search skyline points data space 
desiderata deemed essential efficient processing small number involved nodes 
small number search messages 
query load balancing 
exact range constrained skyline queries access data part space data access unconstrained skyline query skewed portion space contain skyline 
hot spots relieved avoid imbalance query loads network 
solution satisfies desiderata folds 
organize multi dimensional data regions balanced baton tree 
assign region ordered region number bit encodes data space split detail kept region split history 
way route query computing target region number local split histories 
second define skyline search space limit number involved nodes partition search space subspaces adaptively hop parallelize processing control number search messages 
third balance query loads load balanced partitioning data space joining leaving nodes 
furthermore dynamically sample load linked random nodes migrate data case load imbalance 
main contributions propose novel approach called ssp partitions numbers data space peer nodes target subspace region number derived accuracy order control peers accessed search messages skyline query processing 
formally prove necessity completeness visiting non dominated nodes delimited skyline search space 
balance query loads peers load balanced data space partition dynamic load migration 
propose novel load sampling mechanism attends quality sampled load distribution efficiency sampling process combining direct random sampling 
conduct extensive experimental study evaluate effectiveness scalability algorithm 
organization section reviews related 
section describes space partitioning strategy 
section presents skyline query algorithm 
section discusses query load balancing followed experiments validation section 
section concludes 

related motivated previous studies skyline query processing multi dimensional indexing reviewed section 

skyline query processing skyline computing introduced database field block nested loops bnl divide conquer tree algorithms 
improved bnl 
proposed progressive bitmap index algorithms 
subsequently studies employing tree index compute skyline faster external algorithm compute maximal vectors 
works investigate semantics skyline subspace analysis processing skyline data streams high dimensional spaces 
distributed skyline query addressed web information systems mobile devices 
visiting nodes retrieve skyline answers approaches dedicated small scale distributed systems efficient applied networks 
skyline query processing search enforcing partial order query propagation 
emphasizes constrained skyline queries posed query range consequently skyline search method zone replication approach designed constrained skyline queries aim solve skyline queries efficiently global range faced serious query load imbalance portion skyline 

multi dimensional indexing multi dimensional indexing supporting efficient search structured networks hot research topic 
maan uses locality preserving hashing map data values chord identifier space 
mercury attempts support multi attribute range queries placing values attribute contiguously separate routing hub performing explicit load balancing non uniform data distribution 
separate attributes structure maan mercury effective processing skyline queries implicitly specify constraints attributes 
works closer murk 
murk indexes multi dimensional data partitions kd tree 
murk stores partition information binary tree splits data partitions quad tree manner 
balance data loads partition deal query load balancing problem skyline query processing 

space partitioning section problem definition 
map multi dimensional data space existing network called baton briefly introduced section 
numbering data region recording split history estimate target region number supporting efficient search 
regions maintained balanced query loads node join departure part query load balancing solution 

problem definition loss generality assume data values dimension range 
dimensional data space distributed network nodes node maintains non overlapping dimensional data region data points falling inside region 
data region constructed hyper rectangles confined bottom left point lower bound top right point upper bound 
process skyline query form sq qd qi max min max min indicates larger smaller preference dimensionality examples network shown node identified region number physical node id attached parentheses 
example sq min min discussion skyline querying 

background baton baton balanced tree overlay network binary balanced tree structure node tree maintained peer 
position node defined level number pair level starts root number starts leftmost node level 
tree node stores links parent children adjacent nodes selected nodes distance power left right side level left right routing tables 
baton maintains tree structure balanced forcing node left right routing tables full child node crucial effective routing 
takes logn cost joining leaving nodes exact search 

region mechanism search employ curve method mapping multidimensional data space dimensional baton 
number data region order position region space split 
search mechanism relies relationships regions operations region numbers 
describes mapping data regions 
see tree node maintains data region order traversal tree corresponds sequential visit data regions order 
shown right part keep routing table structure ba ton add adjacent nodes routing table entry facilitate data space merge check 
node maintains information region owns region number string identifies region consistent order region bit values certain bit locations indicates region lower upper part corresponding space split 
data range pairs lower bound lowerbound bottom left point upper bound upperbound top right point 
split history list entries split value dimension 
partition dimension node region lowerbound upperbound 
equal load partitions node routing tables snippet entry format position node region number left child right child left adjacent right adjacent lower bound upper bound load left routing table null right routing table 
partitions mapping baton bit indicating split dimension 
example region information node 
note region represent data partition held node refer region superset search range target falls inside 
region region number length number bits 
define relationships regions operations region numbers 
definition region succeed succeed orm min length length precede relationship argued way 
definition region cover cover superset orm length length length 
covered relationship defined way 
route query node delimits region searched target computing region number local split history passes query linked node region covered nearest delimited region 
algorithm describes process computing target region number 
estimation mean compute region number superset target region 
accuracy depends times algorithm estimate num node target bit region region length break 
routing process searched point falls range local region history split line 
computation terminates falls history range current node line 
suppose node wants locate point node shown node computes region number lower part space split axis node routes query nearest left neighbor node region delimited target region covers 
process executed node node subsequently query routed target node illustrated 
maximum number routing hops approximately number bits accurate region number searched target 
uniformly distributed loads corresponding equal space partitions average routing path length logn 

query load balanced partition section presents part query load balancing solution 
split load equally data space partitions select better candidates share load node join departure 
observe allocating relatively smaller space hot regions facilitate load balancing 
partition data space dividing hyper rectangular region equally loaded hyper rectangular regions 
accordingly combine buddy regions region regions adjacent nodes data space merge 
example partitions demonstrated 
node join 
seek better query load balance node join selecting node heavier load known candidates level directly joining qualifying node children full routing tables 
candidates join 
node join leave 
node departure picked neighbors routing tables 
example node receives joining request new node arrows show finds qualifying neighbors node node 
assume load node heavier load node 
node decision pass new node node 
process candidate selection adds constant terms cost total cost node join logn 
node departure 
node leaves requests adjacent node take region 
empty position caused leaving incur tree imbalance regions combined bringing heavy load action needs taken 
procedure search leaf node replacement called adjacent nodes lower level 
replacement choose leaf node lighter load region better combined region adjacent node list known leaf node neighbors level 
example node leaves find replacement level node 
node neighbor nodes node lighter load best candidate replacing node region merge region adjacent node 
cost replacement search logn constant cost addition choosing candidate 

skyline query processing efficient skyline query processing networks demands quick response small number involved nodes search messages 
obviously simple approaches sequential scanning order region number query flooding linked nodes satisfactory 
effective strategies needed taken key problems parallelized search irrelevant nodes pruning reduction duplicate query forwarding 
propose solution called skyline search space partitioning ssp section 
delimits skyline search space solve second problem adaptively partitions search space solve third problems 
pmd 
skyline search space 
skyline search space definition start search node local results guaranteed final skyline 
denote node sq starter 
located searching dominating boundary point dominates points data space point node 
formalize skyline search space 
practically compute local skyline results sq starter select dominating point largest dominating region 
point pmd ad 
avoid waste network bandwidth pmd pruning irrelevant nodes refining search space intermediate skyline results 
define skyline search space follows 
definition skyline search space set data points dominated pmd 
union hyper rectangle search ranges sr boundary limited coordinate pmd axis ai 
example query sq shadowed part indicates skyline search space composed sr sr 
definition node dominated pruned single ideal data point best value dimension ranges denoted dominated pmd 
prove find correct answers visiting non dominated unpruned nodes inside skyline search space 
lemma nodes outside skyline search space dominated nodes 
proof data space outside skyline search space ad worse values dimensions pmd node space dominated pmd 
node space dominated pmd 
lemma dominated node contain skyline points 
proof dominated node data points inferior attribute value compared 
dominated pmd data point node dominated pmd skyline point 
lemma final skyline points dominated points dominated nodes 
proof sake brevity see sq min min 
suppose skyline point ps dominated point pd certain dominated node 
definition pd dominated pmd meaning ps dominated pmd appear final skyline point 
contradicts fact ps dominated pd lemmas draw theorem non dominated unpruned nodes skyline search space return complete skyline set skyline set 

optimizing skyline search space skyline search space constructed hyperrectangle search ranges sr definition divide separate search subspaces subranges subsr parallel query forwarding paths 
nodes subsr forward query node region covered nearest unsolved part subsr 
node rarely revisited routing subsr directly reach covered node 
computing region number search target partition sr history ranges stored local split history 
assigning subsr region number compare position regions linked nodes decide outward query forwarding 
algorithm depicts procedure partitioning search space computing region number partitioned subspaces 
similar algorithm scan split history sequentially line compute unknown bit region number sr line partition sr history split position exceeding sr line 
computing stops current node partition sr 
happens updated sr falls certain history range current node line 
search space sq subtracting range sq starter shown refine left part sr single sr estimated falls outside history range region second time split 
algorithm partition node range sr define disjoint sub search range set sr sr length length sr sr lower part upperbound sr lowerbound sr add sr buddy subsr sr break right part sr partitioned parts time history split overlapping region region assigned estimated region number overlapping region estimated 
consider sr boundary limited coordinate pmd dimension number bits region number farthest region sq overlaps sr number split history entries dimension 
number partitioned subsr known number bits region number subsr decreases time subsr falls history range sq starter 
maximum number hops solve subsr number bits region number maximum number hops process sr arithmetic progression asymptotically 
uniform load distribution query range partitioned halves cost processing subsr reduces halves 
average routing path length locate farthest region subsr overlaps logn average number steps pro cessing sr logn logn logn 

skyline query algorithm logn logn skyline query algorithm algorithm local processing hop sq starter defines skyline search space 
subsr forwarded non dominated neighbor child adjacent node region covered subsr line algorithm 
node subsr forwarded farthest neighbor case succeeds precedes rightmost leftmost neighbor line just passed adjacent node line 
skyline search hops line parallelized 
algorithm search skyline node query sq search range sr define rrt right routing table node define right child node define right adjacent define disjoint search range set sq define dominated node dominated pmd range sr compute local skyline dominated pmd report sq starter sr range sr range partition sr sub range subsr lowerbound subsr upperbound region subsr rrt exist dominated processed subsr region subsr region exist dominated processed subsr region subsr region exist dominated region region map subsr similar process executes left subsr search skyline sq subsr answer sq step promote subsr estimated node fully resolve pass subsr covering right neighbor node line send subsr rightmost neighbor node forwarding line 
second step shown node refines subsr subsr local data line partition line promotes left adjacent node fully resolve passes subsr right adjacent node line 
illustrates skyline search space local processing node 
remaining subsr forwarded covering right neighbor node line solves part sends updated subsr left adjacent node 
see node pmd pmd step step pmd pmd step step 
skyline query solving process 
skyline query hop processing subsr 
demonstrate process search space refining query forwarding respectively 
theorem ssp answers skyline query logn steps uniform load distribution steps worst case 
proof proof straightforward routing hops locating sq starter processing sr locating sq starter takes logn hops uniform load distribution worst case processing sr requires logn steps uniform load distribution steps worst case 
adding costs get logn uniform load distribution worst case 

query load balancing balance query load steps undertaken 
data space partitioned query load node join departure redesigned balancing load 
second novel mechanism proposed sampling dynamically balancing load query processing 
step section shall describe second step section 
start definition query load 
definition query load node sum number skyline retrieving local data records number messages routed node lead local query 
load balancing process query processing works follows 
node checks imbalance 
data migration process established balance load 
query loads periodically gathered node neighbor nodes routing tables adjacent nodes query load changing notification nodes 
imbalance determined difference local load sampled query load 
larger predefined threshold imbalance detected load sampled linked nodes may reflect global load distribution 
compensate start random sampling step detect imbalance local load heavier average gathered loads 
random sampling strategy similar 
number logn nodes linked sampled sending probes attached small length limit routing hops logn existing link randomly hop 
hop probe terminates sends back load load data gathered directly 
balance query load leaf node finds lightly loaded leaf node drop forces rejoin children 
non leaf node attempts share load adjacent nodes 

experiment evaluation evaluate skyline search approach ssp comparing distributed skyline query algorithm dsl terms network size dimensionality cardinality query load balance 
performance measures number involved nodes number skyline search messages query load distribution 
conduct simulation experiments linux box intel xeon ghz processor gb ram 
response time tested real deployment cluster consisting nodes intel xeon ghz processor gb ram 
kinds datasets real dataset nba players season statistics containing records downloaded resembles correlated data distribution synthetic independent synthetic anti correlated datasets maximal data size 
synthetic datasets show set results cases exhibit similar performance 
imbalance ratio computed table 
experimental settings parameter domain default number peers dimensionality cardinality avg 
involved nodes avg 
search msgs ssp dsl involved nodes comparison network size ssp dsl involved nodes message comparison network size search cost 
effects network size independent dataset experimental settings summarized table 
experiment repeated times average taken 
test issues skyline queries average cost taken 
query prefers smaller larger value randomly interested dimension 
starts random node asks answers data space 

effects network size study effects network size independent anti correlated datasets 
illustrates results independent dataset 
number peers increases number involved nodes search messages ssp go slowly outperforming dsl increasing order magnitude 
anti correlated dataset demonstrates costs ssp dsl follow approximately linear curve involved nodes ssp half involved nodes dsl search messages ssp quarter half messages dsl 
reduced number involved nodes search messages ssp due approaches delimiting skyline search space forwarding query partitioned search subspaces 
avg 
involved nodes avg 
search msgs ssp dsl involved nodes comparison network size ssp dsl involved nodes message comparison network size search cost 
effects network size dataset 
effects dimensionality investigate effects dimensionality fixing number peers cardinality varying dimensionality 
figures dsl presents drastic increase number involved nodes 
visits quarters nodes dimensionality larger incurs messages dimensions 
recall routing path length reduces increasing dimensionality space dsl benefit larger dimensions 
contrast performance ssp remains steady far better dsl larger dimensions owing effective controlling partitioning skyline search space 

effects data size experiment study effects data size 
fix parameters change total cardinality case average data size node increases 
witnesses ssp dsl sensitive data size ssp stable dsl terms involved nodes search messages 
see costs taken ssp decline larger data size 
average load node distributed uniformly increasing data size changing number queries case possible get skyline answers visiting fewer nodes 

real data results test methods real dataset distributed small network peers 
dataset avg 
involved nodes avg 
search msgs ssp dsl involved nodes comparison dimensionality ssp dsl involved nodes message comparison dimensionality search cost 
effects dimensionality dataset avg 
involved nodes avg 
search msgs ssp dsl ssp dsl involved nodes comparison total cardinality involved nodes message comparison total cardinality search cost 
effects anti correlated data size identify attributes gained points assists conditions skyline queries set real meanings attributes 
comparison results summarized table bandwidth measured number points transmitted query definition 
ssp costs dsl average bandwidth node transmit pmd pruning skyline points 
large portion involved nodes due large dimensionality specified skyline query frequent invocation query load balancing process aims high load skew caused large amounts skyline queries 
table 
real data results metrics ssp dsl avg 
involved nodes avg 
search msgs avg 
bandwidth node load count load count ssp dlb query load ssp different solution var load avg load dsl load average variance ssp dlb ssp dsl sorted load distribution nodes network load distribution 
effects load balancing independent dataset 
query load balancing evaluate different effects load balanced partitioning dynamic balancing discussed section compare ssp mechanisms enabled ssp dlb ssp dynamic balancing disabled dsl default settings 
demonstrate results independent dataset query load easier balanced anti correlated dataset 
shows query load dsl larger variance ssp ssp dlb 
nodes hold small number data points query visiting suggests data partitioning implicitly assumes uniform data distribution appropriate load balance 
advantage dynamic balancing process clearly shown sorted load distribution changed ssp especially heavier load side 

response time evaluate response time algorithm distributing independent data points real deployment 
presents returning time dimensional skyline query includes skyline points 
results reported seconds answers returned seconds sec seconds sec dimensions response time number returned skyline points real ssp deploy response time dimensionality time average variance 
response time independent dataset seconds 
shows total response time varying dimensionality response time generally increases size skyline 
answer twodimensional skyline query time short seconds dimensional skyline query results seconds 

addressed efficient processing traditional centralized skyline querying networks 
tree structured network baton proposed skyline processing algorithm partition skyline space adaptively control query forwarding behavior effectively 
consequently able significantly reduce number visited nodes search messages 
devised approaches effective query load balancing 
correctness effectiveness proposed algorithm formally proved validated experiments 
research investigate efficient approximate algorithm high dimensional data querying settings 
balke zheng 
efficient distributed web information systems 
edbt pages 
bharambe agrawal seshan 
mercury supporting scalable multi attribute range queries 
sigcomm pages 
nyi kossmann 
skyline operator 
icde pages 
cai frank chen szekely 
maan multi attribute addressable network grid information services 
grid pages 
chan jagadish 
tan tung zhang 
high dimensional 
edbt pages 
chomicki godfrey liang 
skyline 
icde pages 
ganesan bawa garcia molina 
online balancing range partitioned data applications peer peer systems 
vldb pages 
ganesan yang garcia molina 
torus rule multidimensional queries systems 
webdb pages 
godfrey 
maximal vector computation large data sets 
vldb pages 
com 
huang jensen lu ooi 
skyline queries mobile lightweight devices manets 
icde 
jagadish ooi vu 
baton balanced tree structure peer peer networks 
vldb pages 
kossmann rost 
shooting stars sky online algorithm skyline queries 
vldb pages 
lin yuan wang lu 
stabbing sky efficient skyline computation sliding windows 
icde pages 
ng ooi 
tan 
peer peer system 
icde page 
papadias tao fu seeger 
optimal progressive algorithm skyline queries 
sigmod conference pages 
pei jin ester tao 
catching best views skyline semantic approach decisive subspaces 
vldb pages 
ratnasamy francis handley karp shenker 
scalable content addressable network 
sig comm pages 
shu tan zhou 
adapting content native space load balanced indexing 
pages 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
sigcomm pages 
tan eng ooi 
efficient progressive skyline computation 
vldb pages 
tang xu mahalingam 
psearch information retrieval structured overlays 
computer communication review 
wu zhang feng zhao agrawal abbadi 
parallelizing skyline queries scalable distribution 
edbt pages 
yuan lin liu wang yu zhang 
efficient computation skyline cube 
vldb pages 
zhang krishnamurthy wang 
scalable peer peer index service high dimensional data 
technical report princeton university 
