tableau calculi answer set programming martin torsten schaub institut informatik universit potsdam postfach potsdam 
introduce formal proof system tableau methods analyzing computations answer set programming asp 
approach furnishes declarative fine grained instruments characterizing operations strategies asp solvers 
detailed capture variety propagation choice operations algorithms asp includes sat approaches 
second general encompass various strategies pursued existing asp solvers 
provides uniform framework identifying comparing fundamental properties algorithms 
third approach allows investigate proof complexity algorithms asp depending choice operations 
show exponentially different best case computations obtained different asp solvers 
approach flexible integrate new inference patterns study relation existing ones 
result obtain novel approach unfounded set handling loops applicable non sat solvers 
furthermore identify backward propagation operations unfounded sets 
answer set programming asp appealing tool knowledge representation reasoning 
attractiveness supported availability efficient shelf asp solvers allow computing answer sets logic programs 
contrast related area satisfiability checking sat asp lacks formal framework describing inferences conducted asp solvers resolution proof theory sat solving 
deficiency led great heterogeneity description algorithms asp ranging procedural fixpoint operational characterizations 
hand complicates identifying fundamental properties algorithms soundness completeness 
hand disables formal comparisons 
address deficiency introducing family tableau calculi asp 
allows view answer set computations derivations inference system branch tableau corresponds successful unsuccessful computation answer set entire tableau represents traversal search space 
approach furnishes declarative fine grained instruments characterizing operations strategies asp solvers 
fact relate approaches dlv smodels appropriate tableau calculi sense computations aforementioned solver comply tableau proofs corresponding calculus 
provides uniform proof theoretic framework analyzing comparing different algorithms kind asp 
proof theoretic concepts able derive general results apply classes algorithms specific asp solvers 
particular investigate proof complexity different approaches depending choice operations 
turns regarding time complexity exponentially different computations obtained different asp solvers 
furthermore framework allows describe study novel inference patterns going implemented systems 
result obtain loop approach unfounded set handling restricted sat solvers 
identify backward propagation operations unfounded sets 
motivated desire converge various heterogeneous characterizations current asp solvers basis canonical specification principles underlying respective algorithms 
classic example dpll widely algorithm sat resolution proof theory 
developing proof theoretic foundations asp abstracting implementation details want enhance understanding solving approaches 
proof theoretic perspective allows state results general way solver specific study inferences admissibility implementation point view 
inspired niemel tableau methods investigating boolean circuit satisfiability checking context symbolic model checking 
target different approaches aspects common 
tableau methods characterizing dpll type techniques 
second cut rules characterizing dpll type split operations key idea analyzing proof complexity different inference strategies 
general investigations propositional proof complexity particular satisfiability checking sat 
perspective tableau systems dpll similar propositional version ke tableau calculus closely related weak connection tableau atomic cut pointed 
tableau characterizations logic programming elaborated 
pearce de guzm provide tableau calculus automated theorem proving equilibrium logic valued semantics 
tableau approaches nonmonotonic logics summarized 
describes resolution method skeptical answer set programming 
operator characterizations propagation choice operations asp 
answer set programming alphabet normal logic program finite set rules form 
pm pm 
pn pi atom 
literal atom negation rule head head body 
pm pm 
pn body body 
pm body pm 
pn 
set atoms occurring program atom 
set bodies body body 
regrouping rule bodies head body body head 
program positive body 
cn denotes smallest set atoms closed positive program 
reduct relative set atoms defined head body body 
set atoms answer set logic program cn example consider program answer sets 
assignment partial mapping objects program indicating member domain dom true false respectively 
order capture spectrum asp solving techniques fix dom atom body sequel 
define dom dom 
denote assignment set signed objects 
instance assignment mapping body rule atom represented atoms bodies remain undefined 
notation call assignment empty leaves objects undefined 
define set atoms unfounded set program wrt partial assignment rule head body body body 
greatest unfounded set wrt denoted gus union unfounded sets wrt loops sets atoms circularly depend program positive atom dependency graph 
analogy external support loops define external bodies loop eb body head body 
denote set loops loop 
tableau calculi describe calculi construction answer sets logic programs 
constructions associated binary trees called tableaux 
nodes trees mainly signed propositions propositions preceded indicating assumed truth value proposition 
tableau logic program initial assignment binary tree root node tree consists rules members nodes tree entries form dom generated extending tableau rules standard way tableau rule branch tableau prerequisites rule hold branch tableau extended adding new entries branch specified rule 
rule cut rule entries added left right child branch 
rules consequent rule added branch 
convenience application tableau rules conjugation functions literal define tl fl rule applications subject provisos 
stipulates 
bm constitute bodies rules head 
requires belongs greatest unfounded set induced rules bodies 
bm 
sure 
ln tl 

ln 
li 
ln tl 
tli tli 
forward true body backward false body 
ln 
ln fli 
ln 
ln forward true atom fta backward false atom bfa 
li 
ln fli 
li 
ln 
li 
ln forward false body ffb backward true body btb 
bm tli 
bi bi 
bm bi forward false atom ffa backward true atom bta 
bm 
bi bi 
bm bi founded negation founded justification 
bm 
bi bi 
bm bi forward loop fl backward loop bl cut cut body 
bm 
bm body gus body 
bm loop eb 
bm fig 

tableau rules answer set programming 
cut atom fig 

tableau empty assignment 
belongs loop external bodies 
bm 
guides application cut rule restricting cut objects members different tableau calculi obtained different rule sets 
needed precise enumerating tableau rules 
tableau calculi particular interest tcomp cut atom body cut atom cut body cut atom body exemplary tableau rule applications indicated letters rule names cut atom 
branches comprise total assignment atom body left represents answer set right gives answer set 
branch tableau contradictory contains entries dom 
branch complete contradictory branch contains entry dom closed rules calculus cut rule 
instance branches non contradictory complete 
dom say entry deduced set tableau rules branch entry generated nodes branch applying rules 
note branch corresponds pair consisting program assignment vice versa draw relationship identifying branches sequel 
accordingly dr denote set entries deducible rule set branch 
represents set entries smallest branch extending closed dealing tableau calculi slightly abuse notation write dt dt corresponds fitting operator 
ing cut 
mention cut rule may principle introduce general entries necessitate additional decomposition rules leading extended tableau calculi 
branch tableau initial assignment similarly detail subsequent sections propagation program completion propagation founded semantics coincides unit amounts captures smodels propagation founded semantics enhanced backward propagation 
note deterministic rules answer set preserving applies cut rule considering resulting branches 
tableau complete branches complete 
complete tableau program empty assignment branches contradictory called refutation program means program answer set shown smodels type tableaux 
theorem 
logic program denote empty assignment 
holds tableau calculus 
answer set iff complete tableau refutation 

answer set complete tableau unique non contradictory branch atom 

tableau non contradictory complete branch atom answer set 
results obtained tableau calculi sound complete asp 
characterizing existing asp solvers section discuss relation tableau rules wellknown asp solvers 
turns tableau rules suited describing approaches wide variety asp solvers 
particular cover leading approaches answer set computation normal logic programs 
start solvers go atom solvers smodels dlv turn hybrid solvers working atoms bodies 
sat solvers 
basic idea sat solvers sat solver model generator check generated model contains unfounded loop 
lin zhao show answer sets logic program coincide models completion set loop formulas 
respective propositional logic translation comp lf comp lf bk bk atom body 
bm loop eb 
bm translation constitutes backbone sat solvers 
loop formulas lf require exponential space worst case 
adds loop formulas lf incrementally comp note negative default literal translated model comp corresponding answer set generated underlying sat solver 
approach avoids storing loop formulas exploiting sat solver inner backtracking learning scheme 
despite differences uniformly characterize model generation verification steps 
describe tableaux capturing proceeding underlying sat solver go unfounded set checks 
analogy theorem models comp correspond tableaux tcomp 
theorem 
logic program 
model comp iff complete tableau tcomp unique non contradictory branch atom 
intuitively tableau rules describe unit propagation program completion represented cnf required sat solvers 
note introduce propositional variables bodies order obtain polynomially sized set clauses equivalent program completion 
due fact atoms bodies represented propositional variables allowing branching variables tcomp cut atom body cf 
sense 
model comp generated underlying sat solver apply unfounded set check deciding model answer set 
fails unfounded loops atoms true called terminating loops determined 
loop formulas eliminate generated model 
unfounded set checks performed captured tableau rules ffb fl follows 
theorem 
logic program model comp atom 
answer set iff fl ffb 
sat approaches sophisticated unfounded set checks able detect unfounded loops applied non contradictory complete branches tableaux tcomp 
unfortunately programs may yield exponentially loops 
lead exponentially models program completion turn answer sets 
view theorem means exponentially branches may completed final unfounded set checks 
atom solvers 
describe relation smodels dlv side tableau rules side 
concentrate characterizing smodels sketch characterization applies dlv 
literals explicitly represented smodels assignments truth falsity bodies determined implicitly consider rewriting tableau rules literals restricting domain assignments atoms 
instance tableau rule ffa turn fl 
flm head body 
lm note answer set model comp vice versa 
observe reformulation refers bodies determining values proviso associated inference rule 
reformulating tableau rules literals complicates provisos substantially facilitate description 
additional variables bodies rule program explicitly introduced comparing smodels dpll 
propagation atom solvers consider truth status rules bodies saving computation answer sets limiting branching atoms expressed cut atom cf 

propagation smodels accomplished functions called atleast atmost 
computes deterministic consequences applying forward backward propagation falsifies greatest unfounded sets 
result captures propagation atleast terms tcomp 
theorem 
logic program assignment af atom 
atleast 
tcomp afs att aft result shows derived atleast derived tcomp cut 
fact atleast detects inconsistency af tcomp derive af 
tcomp derive atleast 
subsumption originate different domains assignments atoms atleast bodies tcomp 
redundant representation rules bodies smodels inhibits possible derivations obtained tcomp 
see consider rules assignment contains leaves atoms undefined 
atleast determine rule applied recognize rule sharing body inapplicable 
rule head atom underlying program tcomp contrast atleast derive ffa 
correspondence atleast tcomp derived atoms obtained distinguishing different occurrences body 
derivation atleast corresponding tcomp 
propagation done atleast described tcomp 
function atmost returns maximal set potentially true atoms atom gus program assignment atoms complement atmost greatest unfounded set gus augmented false 
described tableau rules ffb 
theorem 
logic program assignment atom 
atom atmost ffb restricting domain assignments atoms disable analysis different cut variants section 
atleast atmost taken defined signed propositions literals 
note smodels adds literals atom atmost assignment leads inconsistency ffb 
seen smodels propagation functions atleast atmost described tableau rules 
adding cut atom get tableau calculus cf 

note lookahead described means cut atom smodels lookahead derives literal tl respective branch extended cut applied atom involved containing fl contradictory closing 
smodels propagation detects inconsistency tl created cut fl tl contradictory closing consideration complete 
having discussed smodels briefly turn dlv contrast smodels atmost greatest unfounded set detection restricted strongly connected components programs atom dependency graphs 
tableau rule adjusted components 
aspects propagation dlv normal logic programs similar smodels atleast 
tableau calculus characterizes dlv closely 
hybrid solvers 
discuss similarities differences atom asp solvers smodels dlv hybrid solvers working bodies addition atoms 
mention sat solvers sense hybrid cnf representation program completion contains variables bodies 
underlying sat solvers branch atoms bodies cut atom body tcomp 
genuine asp solver know explicitly assigning truth values bodies addition atoms 
propagation rules applied described terms operators forward propagation backward propagation falsifying greatest unfounded sets lookahead 
similar tableau rules operators apply atoms bodies 
show direct correspondences tableau rules similar smodels lookahead derivations described means cut atom body 
replacing cut atom cut atom body obtain tableau calculus cf 

section show subtle difference observed sat solvers may great impact proof complexity 
proof complexity seen genuine asp solvers largely coincide propagation rules differ primarily usage cut 
section analyze relative efficiency tableau calculi different cut rules 
take account tableau rules applying cut rule atom body cf 

calculi particular interest hand describe strategies asp solvers shown previous section hand represent different paradigms atom rule hybrid 
considering iterated application variant leads result 
complementing atom solvers system rule cf 

particular calculi obtain results hand practical relevance hand apply different approaches general 
comparing different tableau calculi known concepts proof complexity 
accordingly measure complexity unsatisfiable logic programs programs answer sets terms minimal refutations 
size tableau determined standard way number nodes 
tableau calculus polynomially simulated tableau calculus infinite witnessing family unsatisfiable logic programs minimal refutations asymptotically exponential size minimal refutations 
tableau calculus exponentially stronger tableau calculus polynomially simulates vice versa 
tableau calculi efficiency incomparable polynomially simulates 
note proof complexity says difficult find minimal refutation 
provides lower bound run time proof finding algorithms context asp solvers independent heuristic influences 
follows provide families unsatisfiable logic programs witnessing polynomially simulates vice versa 
means certain instances restricting cut rule atoms bodies leads exponentially greater minimal run times atom rule solvers comparison counterparts matter heuristic applied 
lemma 
infinite family logic programs 
size minimal refutations linear 
size minimal refutations exponential lemma 
infinite family logic programs 
size minimal refutations linear 
size minimal refutations exponential family witnesses lemma witnesses lemma bn 
cn 
cn cn bn bn bn result follows immediately lemma 
theorem 
efficiency incomparable 
refutations refutations polynomially simulates 
immediate consequence theorem 
corollary 
exponentially stronger 
major implication corollary certain logic programs priori restricting cut rule atoms bodies necessitates traversal exponentially greater search space unrestricted cut 
note phenomenon exponentially worse proof complexity comparison depending program family apply 
families combined exponentially worse 
certain logic programs unrestricted cut rule way chance finding short refutation 
empirical evidence exponentially different behavior 
note proof complexity results robust 
apply possible asp solver proceeding described corresponding tableaux 
instance computation smodels associated tableau cf 
section 
computation smodels requires time proportional size corresponding tableau particular magnitude minimal tableau constitutes lower bound run time smodels 
correlation independent assignment contains atoms bodies program size branch containing duplicate entries tightly bound size logic program 
exponential growth minimal refutations polynomially growing program families ones exclusively caused increase necessary cut applications introducing exponential number branches 
unfounded sets analyzed propagation techniques proof complexity existing approaches asp solving 
seen approaches exploit propagation techniques amounting inferences program completion 
particular sat genuine asp solvers differ treatment unfounded sets apply loop detecting unfounded set checks total assignments incorporate greatest unfounded set falsification propagation 
tableau rule currently applied genuine asp solvers peculiarities partly redundant overlaps completion tableau rule ffa falsifies atoms belonging singleton unfounded sets 
deals greatest unfounded sets exhaustive 
asymmetrically applied solvers apply backward counterpart 
follows propose discuss alternative approaches unfounded set handling motivated sat solvers results 
start briefly introduce vocabulary 
sets tableau rules say effective branch 
say effective effective vice versa 
effective vice versa equally effective 
orthogonal equally effective effective 
correspondence rule sets means correspondence holds takes auxiliary rules account 
start analyzing relation ffa falsifying unfounded atoms forward direction 
role ffb falsify bodies positively rely falsified atoms 
intuitively allows capturing iterated applications ffa respectively ffb behaves neutrally 
item result 
proposition 
set rules ffb effective ffa ffb 
tells ffa redundant presence genuine asp solvers apply ffa sort local negation atleast smodels operator separately global negation atmost smodels operator 
certainly applying ffa reasonable applicability easy determine 
sat solvers apply ffa ffa hand proposition tells greatest unfounded sets unfocused describe sort unfounded sets truly require dedicated treatment respective tableau rule subsumes simpler ffa 
characterization effect built greatest unfounded sets obtained putting results context partial assignments 
theorem 
sets rules ffb ffa fl ffb equally effective 
may safely substitute ffa fl atoms false due lack non circular support 
ffa concentrates single atoms fl unfounded loops 
tableau rules different scopes overlap complement 
proposition 
sets rules ffa ffb fl ffb orthogonal 
sat approaches provide explanation concentrating cyclic structures loops single atoms sufficient falsity unfounded atoms follow program completion ffa loop external bodies false 
loop called terminating loop subset greatest unfounded set 
view item loop oriented approaches allow focusing unfounded set computations intrinsically necessary parts 
fact sophisticated unfounded set techniques applied genuine asp solvers aim circular structures induced loops 
smodels approach source pointers dlv approach strongly connected components programs atom dependency graphs seen restrictions structures induced loops 
takes loops account 
having considered forward propagation unfounded sets come backward propagation bta bl 
genuine asp solver currently integrates propagation techniques corresponding bl mentioned item rules answer set preserving 
proposition 
logic program assignment 
body bl respectively 
branch fl respectively contradictory 
bl ensure falsifying body lead inconsistency due applying forward counterparts 
fact bl fl respectively way simpler rule bta ffa 
particularity supporting true atoms backward propagation global rule effective local ones bta bl 
adding tableau rule btb enabling iterated application backward rules setting bodies true compensate global character proposition 
set rules btb effective bta bl btb 
conclude discussing different approaches unfounded set handling 
sat genuine asp solvers apply tableau rules ffa bta focusing single atoms 
addition genuine asp solvers apply falsify complex unfounded sets 
gives overestimation parts unfounded sets need dedicated treatment sat approaches show concentrating loops fl sufficient 
apply loop detecting unfounded set checks total assignments loop formulas recorded reaction previously failed unfounded set checks 
recorded loop formula exploited propagation sat solvers forward backward direction amounts applying fl bl 
similar kind backward propagation bl exploited genuine asp solvers unfounded set treatment asymmetric 
believe bridging gap sat genuine asp solvers possible putting concept loops context partial assignments 
instance loop oriented unfounded set algorithm described 
discussion contrast area sat proof theoretic foundations sat solvers understood literature asp solvers generally specific terms algorithms solvers existing characterizations heterogeneous lack 
address deficiency proposing tableau proof system provides formal framework analyzing computations asp solvers 
knowledge approach uniform proof theoretic account computational techniques asp 
tableau framework allows away implementation details identify valid inferences soundness completeness results easily obtained 
accomplished associating specific tableau calculi approaches asp solvers solving algorithms 
explicit integration bodies assignments benefits 
allows capture completion hybrid approaches closer fashion 
second allows reveal exponentially different proof complexities asp solvers 
inferences atom systems smodels dlv twofold insofar take program rules account propagation cf 
section 
feature simulated framework corresponding bodies 
simulation sufficient establishing formal results worth noting dealing rules bears redundancy dealing bodies 
related seen rule wise consideration bodies instance done smodels atleast derivations easily obtained non duplicated bodies cf 
paragraph theorem 
tableau rules underlying atom hybrid systems reveal major difference lies selection program objects branch 
branching rule cut major influence proof complexity 
wellknown uncontrolled application cut prone inefficiency 
restriction applying cut sub formulae occurring input showed effective way tame cut 
followed investigating cut applications atoms bodies occurring program 
proof complexity results section tell minimal number required cut applications may vary exponentially restricting cut atoms bodies 
priori degrading asp solving approach cut rule restricted atoms bodies 
note results hold asp solver algorithm proceeding described tableaux corresponding calculus cf 
section 
regarding relation sat genuine asp solvers seen section unfounded set handling constitutes major difference 
approaches practiced solvers appear quite different aims effects underlying tableau rules similar 
expect observation lead convergence sat genuine asp solvers sense generation genuine asp solvers directly incorporate powerful reasoning strategies exploited area sat 
acknowledgments 
supported dfg scha 
grateful christian anger philippe besnard martin brain anonymous referees helpful suggestions 

baral knowledge representation reasoning declarative problem solving 
cambridge university press 
mitchell sat solver primer 
bulletin european association theoretical computer science 
lin zhao computing answer sets logic program sat solvers 
artificial intelligence 
giunchiglia sat polynomial space algorithm answer set programming 
delgrande schaub eds proceedings tenth international workshop non monotonic reasoning 

simons niemel soininen extending implementing stable model semantics 
artificial intelligence 
faber enhancing efficiency expressiveness answer set programming systems 
dissertation technische universit wien 
anger neumann schaub approach answer set solving 
sutcliffe voronkov eds proceedings twelfth international conference logic programming artificial intelligence reasoning 
springer 
agostino gabbay posegga eds handbook tableau methods 
kluwer academic 
leone faber pfeifer eiter gottlob koch scarcello dlv system knowledge representation reasoning 
acm transactions computational logic appear 

davis putnam computing procedure quantification theory 
journal acm 
davis logemann loveland machine program theorem proving 
communications acm 
niemel unrestricted vs restricted cut tableau method boolean circuits 
annals mathematics artificial intelligence 
niemel efficient tableau method boolean circuit satisfiability checking 
lloyd eds proceedings international conference computational logic 
springer 
beame propositional proof complexity past 
bulletin european association theoretical computer science 
tableaux related methods 
robinson voronkov eds handbook automated reasoning 
elsevier mit press 
fitting tableaux logic programming 
automated reasoning 
pearce de guzm tableau calculus equilibrium entailment 
dyckhoff ed proceedings ninth international conference automated reasoning analytic tableaux related methods 
springer 
olivetti tableaux nonmonotonic logics 

resolution skeptical stable model semantics 
automated reasoning 
faber leone pfeifer pruning operators answer set programming systems 
technical report infsys rr technische universit wien 
van gelder ross schlipf founded semantics general logic programs 
journal acm 
lee model theoretic counterpart loop formulas 
kaelbling eds proceedings nineteenth international joint conference artificial intelligence professional book center 
fitting fixpoint semantics logic programming survey 
theoretical computer science 
clark negation failure 
gallaire minker eds logic data bases 
plenum press 
apt blair walker theory declarative knowledge 
minker ed 
deductive databases logic programming 
morgan kaufmann 
lifschitz razborov loop formulas 
acm transactions computational logic appear 

fages consistency clark completion existence stable models 
journal methods logic computer science 
lifschitz computing answer sets program completion 
draft 
giunchiglia relation answer set sat procedures smodels 
gupta eds proceedings international conference logic programming 
springer 
schaub graphs colorings answer set programming 
theory practice logic programming 
anger schaub head body 
brewka ed proceedings seventeenth european conference artificial intelligence ios press appear 

simons extending implementing stable model semantics 
dissertation helsinki university technology 
anger schaub approaching core unfounded sets 
dix hunter eds proceedings eleventh international workshop non monotonic reasoning 
appear 
