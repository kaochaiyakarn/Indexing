integrating programming languages databases problem 
william cook ali ibrahim department computer sciences university texas austin cs utexas edu 
problem integrating databases programming languages open nearly years 
time progress exploring specialized database programming languages orthogonal persistence object oriented databases transaction models data access libraries embedded queries object relational mapping 
new solutions proposed year proven fully satisfactory 
explanation situation problem sufficiently defined partial solutions continue proposed evaluated incomplete metrics making directed progress difficult 
attempt clarify problem propose new solution 
review issues arise boundary programming languages databases including typing optimization reuse 
develop specific criteria evaluating solutions apply solution approaches mentioned 
analysis shows progress key problem meeting criteria simultaneously remains open 
updated 
solution easy stays put corner takes notice 

soldiers posts 
speak 
word 
won difficult plenty material self 
clos exit jean paul programs databases critical part information infrastructure 
systems generally programming languages general purpose computation databases control concurrent access data search large amounts data update data reliably securely 
systems increasingly developed procedural object oriented languages relational databases 
scalability reliability multiple application servers typically communicate shared replicated database server 
material supported national science foundation 
procedural languages database query languages different semantic foundations optimization strategies 
differences known informally impedance mismatch imperative programs versus declarative queries compiler optimization versus query optimization algorithms data structures versus relations indexes threads versus transactions null pointers versus nulls missing data different approaches modularity information hiding 
databases programming languages perform tasks developers difficult architectural decisions organize partition system functionality 
distributed execution requires efficient structuring management specialized communication patterns 
result applications access databases awkward design develop 
programming languages facilitate effective databases attaining performance usually requires careful optimization expert knowledge programs difficult maintain evolve 
primary contribution better understanding impedance mismatch problem integrating databases programming languages 
examine issues affect boundary programming languages databases create list criteria evaluating solutions 
criteria fall main categories typing optimization reuse 
selecting criteria rely experience developing commercial data oriented applications applying theory programming languages databases 
selection process inherently subjective measure criteria ability useful distinctions different solution approaches 
apply criteria range specific solutions impedance mismatch including object oriented databases object relational mappers data access apis orthogonally persistent programming languages embedded query languages 
consider approaches involve modifications programming language database side interface 
criteria measures programming language database issues solution provides clean programming model database style optimizations counted successful solution impedance mismatch 
summarizing findings identify areas significant progress point specific areas required 
proposed criteria provide useful basis understanding decisions architects selecting solutions integrating programming languages databases guide research 
believe key complexity impedance mismatch difficulty meeting criteria simultaneously 
related section reviews papers focused clarifying problems involved integrating languages databases 
specific integration solutions discussed body 
atkinson buneman reviewed early integrating programming languages databases focus creating clean uniform programming model persistent data provided framework research 
david maier stated key requirement solving impedance mismatch database programming model allow complex operations picked programs execution storage manager forcing record time interface bloom zdonik identified cultural technical differences including handling consistency triggers optimization data scaling 
object oriented database system manifesto include requirements oodbs interface programming languages list performance top level requirement 
years carey dewitt predicted demise persistent programming languages object oriented databases ultimate success object relational databases 
identified integration databases programming languages called client integration key research challenges 
atkinson reviewed difficulty experimental validation new approach persistence 
jordan compares persistence frameworks java platform 
jordan defines implementation oo benchmark java program manipulating memory java objects 
benchmark standard qualitative quantitative comparison 
unfortunately oo benchmark models single user critical issue concurrency control addressed 
jordan assumes data fit memory 
oo benchmark representative common operations typical transactional enterprise applications focused extensive traversals hierarchical structures 
oo created test kind specialized applications object oriented databases designed 
jordan provides performance numbers summarize qualitative analysis 
survey provide performance numbers 
assume programming languages enable access database optimizations provide qualitative analysis effective providing access 
typing difficulty aligning types programming languages databases traditionally viewed key cause impedance mismatch 
programming languages databases support primitive types data structures 
details mapping different representations data cause annoying problems conceptual level model data database programming language compatible 
surprising universality techniques structuring data 
data types compatible significant issues static typing queries composite programs 
class employee class department string name string name float salary set employee employees department department employee manager data mapping fig 

example database schema defined classes primitive types programming language typically correspond types database usually primitive types differ databases 
example sql define absolute precision numeric types 
operations may inconsistent common example international string comparisons 
techniques mapping classes relational databases subject extensive research development 
summary common approach define mappings entity relationship er model object oriented class model 
er model provides logical view structure relational database 
er model attributes represent primitive data values strings integers 
mapped object instance members object oriented model 
relationships er model mapped objects 
multi valued relationship collection 
subtyping object oriented model represented er model 
cases ways mapping performed resulting design decisions typically performance issues 
example simple model employees departments defined pair java classes 
database terms department employees fields represent relationship departments employees 
persistence methods considering mapping objects databases researchers proposed methods object stored persistently addition object state 
research focused allowing threads user interface controls network connections persistent 
integration state behavior key concepts object oriented programming argued persistence mapping store behavior methods violates basic principles object oriented programming 
hand separation data behavior proven quite useful design evolution data intensive applications 
question unresolved survey propose criteria evaluating utility persistence methods 
interpretation null values nulls sql behave differently nulls procedural object oriented languages 
sql null represents unknown primitive operations addition conjunction return null operand null 
example null returns null null 
hand aggregate sql functions sum ignore nulls 
object oriented programming languages typically allow object null primitive types integer null 
relational joins treat null unknown dereferencing null pointer object oriented language typically throws exception 
languages allow definitions user defined data types match database semantics place builtin programming language types 
programming languages able seamlessly integrate foreign types way 
static typing static typing common tool increase reliability performance programming languages databases 
programming languages static typing check programs run ensure valid operations applied data runtime 
static typing improve performance checks omitted runtime 
aids modular development clients servers written checked defined interfaces 
database query typically checked type errors query compiled 
static typing different kind criteria mapping data interpretation null values 
static typing property data property system manages data way interprets programs queries 
static typing meta issue applies criteria 
example data mapping may performed runtime may statically checked 
evaluation static typing additional dimension evaluation criteria single criteria 
interface styles solution space integrating programming languages databases characterized extremes orthogonal persistence explicit query execution 
specific solutions examined section combination approaches 
orthogonal persistence pure approach persistence mechanisms persistence existence underlying database largely hidden programmers 
explicit query execution pragmatic approach allows existing languages explicitly invoke database operations 
void string prefix employee db name prefix salary manager salary print name print salary print department name orthogonal persistence fig 

printing employee information orthogonal persistence natural extension traditional concept variable lifetime allow objects values persist single program execution 
pure form persistent values exist long referenced transitively persistent root explicit operations deletion explored 
persistence orthogonal persistence behavior value independent programming considerations including type value created 
programs manipulate persistent data look ordinary programs 
assuming db persistent root contains collection employees finds employees name begins prefix salary greater manager salary 
prints employee name salary department name 
examples orthogonal persistence systems include pjama thor opj 
pure orthogonal persistence systems implement storage manager relying existing database technology 
view orthogonality binary property useful view spectrum 
view measure degree uniformity treatment persistent non persistent data 
view reasonable operations related transactions meaningful persistent data degree non orthogonality essential 
object oriented databases oodb implement degree orthogonal persistence values persistent restricted objects 

rarely purely orthogonal special operations querying provided persistent data 
object relational mapping tools provide degree orthogonal persistence 
examples include jdo ejb 
explicit query execution primary alternative historical predecessor orthogonal persistence execution queries written specialized query language 
main advantage explicit query execution allows programmer directly interact database engine 
string select name salary name employee inner join department id department inner join employee id manager name salary salary connection conn stmt con stmt prefix rs stmt rs print rs name print rs salary print rs fig 

explicit query execution jdbc embedded queries explicit queries may embedded programming language handled preprocessor 
examples include 
embedded sql provides statically typed approach explicit query execution 
significant drawback embedding support dynamic queries discussed section 
problem change syntax programming language typically break tools including refactoring tools ides case tools 
call level interfaces dominant mechanism explicit query execution call level interface cli allows programming language access database engine standardized api 
key characteristic cli ability execute database queries commands represented strings runtime data structures 
illustrates sql query performed jdbc 
orthogonal persistence systems support explicit queries 
object oriented databases support explicit queries 
mapping tools support explicit queries addition orthogonal persistence 
explicit queries added address performance problems example ejb include queries ejb 
systems including jdo sophisticated query languages 
strings queries may represented runtime data structures 
allows queries represented criteria objects 
systems field names represented strings 
call level interfaces number significant problems 
syntax types database programs checked statically errors detected runtime 
constructing reusing queries runtime requires complex error prone string manipulation 
query results represented dynamically typed objects accessed string names 
possible type check embedded queries situations 
gould su devanbu apply static analysis check programs call level interfaces 
analysis currently cover query parameters result types produce incorrect results components compiled separately 
primary advantage apply existing programs 
despite problems commercial software development projects call level interfaces leverage database query optimizers reduce communication latency order improve system performance 
optimization data intensive applications handle large amounts data 
important application optimize data access 
appropriate query strategy may orders magnitude faster naive query strategy 
examples section common database optimizations programming language viewpoint 
order provide fine grained analysis existing solutions separate concepts search navigation 
correspond roughly select clauses sql search concerned selecting subset objects interest navigation process output search 
distinction important solutions support 
optimizing search problem optimization search 
straightforward program takes time proportional number employees may match prefix 
traditional database optimization techniques applied improve algorithm index 
effectively reduce running time proportional number matching employees 
explicit indexes common technique invert order suboperations iteration testing 
query optimizer may index compute set identifiers records match condition find corresponding data looking identifiers second index 
aspect plan illustrated includes optimization original java code 
prefix test implemented searching index match method returns iterator index matches 
efficient index record ids record values find employee data 
code efficient linear search long names start prefix 
explicit programming indexes supported exodus ontos 
programmer productivity significantly reduced optimizations coded hand slight change original unoptimized void string prefix match employee index lookup id salary index lookup salary print name print salary department index lookup print name fig 

optimized printing employee information code adding condition statement may require significant rewrite optimized form 
criteria shipping databases manage indexes automatically perform query optimization detailed knowledge structure content location data 
database query optimizer build plan complete operation performed 
query optimization takes account details operation performed current context executed 
context includes statistical properties actual data stored amount memory available load processor frequency different kinds queries kinds optimizations require specialized knowledge data relationships information typically available compilers general purpose languages 
explicit query execution pragmatic approach search optimization reduces number round trips database gives query optimizer scope optimization 
course requires programmers manually create appropriate queries 
possible define programming constructs allow search criteria defined standard boolean expression syntax executed query database 
extension uses technique collect queries sent database 
new iteration construct similar sql select statement added indicate criteria remotely executed 
standard iteration constructs allow search criteria specified relative object model remote application 
resulting search criteria passed remote application efficient execution 
existing syntax express queries 
safe query objects ordinary boolean method define query 
executing standard byte code queries converted database queries appropriate wrapper code call database cli 
queries type checked conversion cli calls cause type errors 
optimizing navigation addition optimizing search objects important optimize navigation related objects 
problem typically significant latency loading objects persistent store 
prefetching related objects original code traverses department relationship print name employee department 
persistent object system traversal load appropriate department object loaded 
persistence connected relational database department may loaded separate query significantly reducing performance 
existing object persistence runtimes optimize navigation techniques improving performance prefetching explored 
issue interaction modularity discussed section 
call level interfaces require programmer specify data produced query programmer responsible navigation optimization 
object relational mapping tools support limited navigation optimization 
ejb jdo specify automatic loading related objects currently global property specific query 
flexible support navigation optimization adding appropriate loading hints cumbersome mechanisms fully general 
example supports loading level multi valued sub attributes 
optimization navigation goal solution impedance mismatch 
multilevel iteration particularly difficult case navigation multiple levels interaction multi valued relationships 
pattern awkward express current sql 
example multi level iteration levels multi valued relationships included results query 
illustrates pattern 
collections related items loaded query query needed load employees department projects employee 
departments austin average employees department austin nm queries executed 
possible load required data queries load departments austin load employees department austin load projects employees departments austin 
condition top loop replicated queries 
sorting orders carefully nested results returned right order 
client associate items table corresponding subsets nested tables 
note single query possible department employee names replicated 
common idiom expressed sql possible oql 
revising sql attention placed kinds queries department db sorted size city austin print name employee employees sorted name print name project projects sorted date print name fig 

pseudo code multi level iteration needed support object relational mapping 
development risc processors analogy sql viewed form assembly language design clean human readable interface effective measure common patterns generated client programs design optimized interface 
research detecting multi level iteration improving performance prefetching commercial system implemented type prefetching 
bulk data manipulation searches inherently involve objects updates frequently performed time leaving little room kinds optimizations described previous sections 
typically cases application bulk data manipulation required 
data manipulation operations include inserts deletes updates data 
simplified example employee db department name equals sales salary salary optimizations described previous section apply case 
easy explicit query execution run custom sql statement perform bulk operation 
update employee set salary salary employee inner join department id department name sales object relational mapping tools java persistent programming languages allow bulk update operations efficiently executed relational databases 
allowed update operations executed remotely 
dbpl language successor tycoon explored optimization search bulk operations framework orthogonal persistence 
tycoon proposed integrating compiler optimization database query optimization final results published 
queries cross modular boundaries optimized runtime dynamic compilation 
performance evaluations published dbpl tycoon published metrics cover lines code implementation 
caching caching strategies independent design interface language database far programmer interface concerned 
implementor data access infrastructure databases clearly pay attention 
focus design issues affect user data access infrastructure implementors 
reuse previous section discussed issues local optimization 
addition issues relating composition decomposition operations 
parameterized queries parameterized dynamic queries arise queries extracted program remote execution database 
example prefix query parameter moving orthogonally persistent code explicit execution sql query 
explicit query execution query parameters awkward specify types parameters checked runtime 
dynamic queries dynamic queries query strings constructed runtime 
dynamic queries terrible idea quite common dismissed hand 
dynamic queries handled partial evaluation query relative values affect query depend database 
example search form user interface allows set optional search criteria specified resulting query partially evaluated relative choice criteria include 
detailed explanation 
dynamic queries arise implementing fine grained authorization rules apply individually user 
conjecture lack support dynamic queries primary reason abandonment forms embedded sql 
dynamic queries needed create ad hoc joins reporting applications supporting online analytical processing olap 
applications outside focus 
modular queries general purpose programming languages support modular decomposition functional data abstraction corresponding persistent languages capabilities 
wellknown modularity interfere optimization problem may worse relation database access 
search navigation optimization depend knowing conditions data involved access persistent data 
query optimization works best large units sent database individual operations 
reduces number round trips gives query optimizer scope optimization 
worth noting relational algebra supports modular composition query relation practice quite difficult combine effect sql queries syntactic level 
solution integration languages databases support modularity composition reuse data intensive program structures 
concurrency concurrency databases different focus kind concurrency supported typical programming languages 
programming languages typically threads synchronization define concurrent processes cooperate achieve goal periodically communicating requesting shared resources 
database concurrency viewed competitive multiple transactions compete access shared resources 
individual operations may interleaved long transactions serializable 
point transaction manager abort roll back transaction 
databases provide guarantees behavior system programming languages typically 
concurrency causes significant problems pure form orthogonal persistence 
insist complete orthogonality research focus providing semantically meaningful transaction recovery behavior programming languages 
search optimization benefits transactions operation touches objects updates touched objects create large footprint interfere transactions 
search optimization reduces number objects touched transaction 
long running transactions block transactions aborted 
evaluation summarizes results qualitative evaluation different existing solutions impedance mismatch 
evaluations optimization maintenance sections grades grade support feature 
second grade specifies static typing applies feature 
systems designed relational databases mapping relational database certainly possible 
pjama opj pure orthogonally persistent variants java 
systems don support true concurrent database transactions notion checkpointing globally consistent state store 
goal pure orthogonal persistence prevents explicit queries open question java compiler criteria shipping navigation exodus pjama ontos jdo odbc opj ejb ejb jdbc nq types 
mapping 
nulls interface 

persistence 
explicit query exec 
optimization 
explicit indexes 
criteria shipping 
navigation prefetch 
multilevel iteration 
bulk data manip 
reuse explicit queries 
query parameters 
dynamic queries 
modular queries concurrency 
transactions feature supported statically typed feature supported statically typed feature supported feature supported partially supported supported applicable fig 

summary qualitative evaluation solutions impedance mismatch prefetch part compilation strategy 
possible include true model concurrent acid transactions systems reduce degree orthogonality persistent data 
exodus ontos object oriented databases storage manager 
programmers explicit indexes optimize search 
exodus index key statically typed data objects loaded index 
ejb object relational mapper resembles interface 
ejb support explicit queries allowed finder methods form explicit index 
objectstore object oriented databases storage manager 
support criteria shipping criteria objects 
statically checked fields named strings 
jdo ejb object relational mapping tools java 
provide high degree orthogonal persistence 
criteria shipping supported 
navigation optimization partially supported specified global property relationship individual queries 
object relational mapping java degree orthogonal persistence 
specialized language criteria shipping 
query languages support criteria shipping navigation prefetch prefetch specifications fully general 
provide partial solutions multilevel iteration 
odbc jdbc standard call level interfaces 
provide full functionality static typing 
optimization multilevel iteration difficult interfaces 
form embedded sql java 
provides high degree static typing support dynamic modular queries 
safe native queries nq proposals 
safe queries build top object relational mapping tool jdo provide static typing queries represented standard java classes 
extension define statically typed queries relational data sources 
embedded sql approaches support dynamic queries 
supports form multi level iteration uses single join return data values enclosing iterations repeated item returned nested iteration 
allows form prefetch objects returned records instances mapped classes 
note evaluation preliminary 
complete solution problem impedance mismatch provide clean programming model high performance 
issues mapping data databases programming languages largely resolved significant issues remain 
interface leverage best capabilities databases programming languages optimization static typing modular development 
aspects solution 
problem impedance mismatch meeting goals simultaneously 
proposed qualitative criteria evaluating proposed solutions evaluated range existing solutions criteria 

scott ambler 
mapping objects relational databases 


apple computer language guide 
addison wesley 

atkinson morrison 
orthogonally persistent object systems 
vldb journal 

malcolm atkinson david dewitt david maier francois bancilhon klaus dittrich stanley zdonik 
object oriented database system manifesto 
pages 

malcolm atkinson 
persistence java balancing act 
proceedings international symposium objects databases pages london uk 
springer verlag 

malcolm atkinson peter buneman 
types persistence database programming languages 
acm comput 
surv 

malcolm atkinson laurent mick jordan tony susan spence 
orthogonally persistent java 
sigmod record 

julie basu 
overview embedded sql java 
oracle open world 

philip bernstein shankar pal david 
context prefetch implementing objects relations 
vldb journal pages 

gavin bierman erik meijer wolfram schulte 
essence data access 
european conference object oriented programming 

stephen blackburn john 
concurrency fly 
pos pages 

toby bloom stanley zdonik 
issues design object oriented database programming languages 
proc 
acm conf 
object oriented programming systems languages applications pages 
acm press 

carey dewitt graefe richardson schuh shekita 
exodus extensible dbms project overview 
maier zdonik editor readings object oriented database sys 
morgan kaufmann san mateo ca 

michael carey david dewitt 
objects databases decade 
proceedings th international conference large data bases pages 
morgan kaufmann publishers 

michael carey david dewitt kant jeffrey naughton 
status report oo oodbms benchmarking effort 
proc 
acm conf 
object oriented programming systems languages applications pages 
acm press 

cattell douglas barry mark jeff eastman david jordan craig russell olaf torsten fernando velez editors 
object data standard odmg 
morgan kaufmann january 

william cook siddhartha rai 
safe query objects statically typed objects remotely executable queries 
icse proceedings th international conference software engineering pages new york ny usa 
acm press 

microsoft 
project 
msdn microsoft com 

laurent 
extensible transaction management pjava 
proceedings international workshop persistence java 

jacques antoine dub rick peter 
oracle application server application developers guide 
oracle 

michael franklin bj rn th nsson donald kossmann 
performance tradeoffs client server query processing 
proceedings acm sig mod international conference management data pages 
acm press 

matthes 
integrating query program optimization persistent cps representations 
atkinson ray editors fully integrated data environments esprit basic research series pages 
springer verlag 

gould su devanbu 
static checking dynamically generated queries database applications 
proceedings th international conference software engineering icse 
ieee press 

graham hamilton rick cattell 
jdbc tm java sql api 
sun microsystems 

shin han yang sae moon young whang 
capturing navigational access patterns prefetching client server objectoriented object relational dbmss 
information sciences 

documentation 
www org docs en html may 

iso iec 
information technology database languages sql part host language bindings sql bindings 
technical report iso iec 

iso iec 
information technology database languages sql part call level interface sql cli 
technical report iso iec 

mick jordan 
comparative study persistence mechanisms java platform 
technical report tr sun microsystems september 

mick jordan malcolm atkinson 
orthogonal persistence java platform specification rationale 
technical report tr sun microsystems september 

liskov adya castro ghemawat gruber maheshwari myers day shrira 
safe efficient sharing persistent objects thor 
proceedings acm sigmod international conference management data pages 
acm press 

david maier 
representing database programs objects 
fran ois bancilhon peter buneman editors advances database programming languages papers dbpl pages 
acm press addison wesley 

alonso stephen blackburn gavin mercer john 
implementing orthogonally persistent java 
proceedings workshop persistent object systems pos 


enterprise java beans specification 
sun microsystems 

matthes schroder schmidt 
tycoon scalable interoperable persistent system environment 
atkinson editor fully integrated data environments 
springer verlag 

rizvi alberto mendelzon sudarshan roy 
extending query rewriting techniques fine grained access control 
sigmod proceedings acm sigmod international conference management data pages 
acm press 

russell 
java data objects jdo specification jsr 
sun microsystems 

joachim schmidt florian matthes 
dbpl project advances modular database programming 
inf 
syst 

schmidt matthes valduriez 
building persistent application systems fully integrated data environments modularization abstraction interoperability 
proceedings euro arch congress 
springer verlag october 


overview commercial object oriented database management systems ontos objectstore 
sigmod record acm special interest group management data 

jeffrey ullman hector garcia molina jennifer widom 
database systems complete book 
prentice hall ptr upper saddle river nj usa 

zhang norbert ritter 
real benefits object relational object oriented software development 
read editor proc 
th british national conference databases advances databases pages 
springer verlag 
