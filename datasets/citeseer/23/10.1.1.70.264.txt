unusual effectiveness logic computer science lambda joseph robert neil kolaitis moshe victor vianu lambda lambda january overview wigner joint winner nobel prize physics published titled un reasonable effectiveness mathematics natural sciences wig 
construed examination affirmation galileo tenet book nature written language mathe 
effect wigner large number examples demonstrate effectiveness mathematics accurately describing physical phenomena 
wigner viewed examples called empirical law epistemology asserts mathematical formulation laws nature appropriate accurate mathematics correct language laws nature 
time wigner pointed reasons success mathematics natural sciences completely understood fact went far asserting 
enormous usefulness mathematics natural sciences bordering mysterious rational explanation hamming winner acm turing award computer science published follow article titled unreasonable effectiveness mathematics ham 
article examples manifesting effectiveness mathematics natural sciences 
attempted answer implied question wigner article mathematics 
hamming offered partial explanations concluded balance question remains essentially unanswered time publication wigner article computer science undergone rapid far reaching development 
just natural sciences mathematics highly computer science 
particular areas mathematics including linear algebra number theory probability theory graph theory combinatorics instrumental development 
natural sciences computer science benefitted extensive continuous interaction logic 
matter fact logic turned significantly computer science mathematics 
quite remarkable especially impetus development logic past years came mathematics 
lambda summarizes symposium title held meeting american association advancement science 
authors wrote section kolaitis section immerman section vianu section harper section halpern section vardi 
university 
partially supported nsf iri 
mellon university partially supported nsf ccr darpa contract 
massachusetts amherst 
partially supported nsf ccr 
university california santa cruz 
partially supported nsf ccr 
university 
partially supported nsf ccr ccr iis ccr 
lambda lambda university california san diego 
partially supported nsf iis 
recall large extent mathematical logic developed attempt confront foundations mathematics emerged turn th century 
development hilbert program main aim formalize establish mathematics complete decidable 
informally completeness means true mathematical statements proved decidability means determine mathematical statement true false 
hilbert firmly believed ambitious goals achieved 
hilbert program dealt devastating blows 
standard order axioms arithmetic shown incomplete odel celebrated od 
furthermore turing church tarski demonstrated order logic 
specifically set valid order sentences shown undecidable chu tur set order sentences true arithmetic highly undecidable tar 
today mathematical logic mature highly sophisticated research area deep results anumber applications certain areas mathematics 
fair say interaction logic mathematics limited 
particular mathematical logic mainstream area mathematics typical mathematician usually knows little logic 
lines hamming judgment ham uncommon albeit severe 
intense study called foundations mathematics 
interesting field main results mathematics contrast logic computer science past years mathematics past years 
concepts logic occupy central place computer science logic called calculus computer science mw 
goal article illustrate effectiveness logic focusing just areas computer science logic definite lasting impact 
specifically connections logic computational complexity high section successful order logic database query language illustrated section influence type theory programming language research addressed section epistemic logic reason knowledge multi agent systems covered section connections logic automated design verification section 
descriptive complexity fundamental issue theoretical computer science computational complexity problems 
time memory space needed solve particular problem 
dtime set problems solved algorithms perform steps inputs size complexity class polynomial time set problems time polynomial formally dtime 
important computational problems appear require polynomial time 
problems contained nondeterministic polynomial time np 
nondeterministic computation may arbitrary choices works 
choices lead accept state say input accepted 
colorability problem testing undirected graph vertices colored colors adjacent vertices color hundreds known combinatorial problems np complete 
see gj survey 
means np hardest problems np problems np reducible polynomial time np complete problem 
fastest known algorithm exponential 
efficient algorithm problems translate efficient algorithm 
np question asks np coincide example inability determine computed certain amount computational resource time space parallel time complexity theory typically considers problems 
examination difficulty computing particular bit desired output 
problems properties input 
set inputs answer property question 
asking complexity checking certain input property descriptive complexity ask hard express logic 
plausible properties harder check harder express surprising closely logic mimics computation descriptive complexity exactly captures important complexity classes descriptive complexity view inputs finite logical structures graph logical structure ag hf ng egi universe set vertices binary edge relation proviso assume stated total ordering relation universe avail able 
order logic express simple properties input structures 
example exactly edges leaving vertex 
yz second order logic variables xi range relations universe 
may quantified 
second order existential formula begins second order followed order formula 
example second order existential sentence says graph question colorable 
asserting red yellow blue defined universe vertices 
goes say vertex color adjacent vertices color 
ji descriptive complexity began theorem fagin 
observe fagin complexity class np purely logic mention machines time theorem fag set structures np iff exists second order existential formula phi fa phi formally np 
define cram set properties checkable concurrent read concurrent write access machines polynomially processors parallel time 
fo set order expressible properties exactly captures complexity class cram constant parallel time 
possible increase power fo allowing longer descriptions longer inputs 
fo properties describable block restricted quantifiers may iterated times inputs theorem imm constructible fo cram 
constructible means function 
computed space 
bizarre functions constructible 
proviso theorem log order formulas may access addition multiplication relations element universe 
parallel time corresponds exactly order iteration quantifier depth 
quantifiers natural way increase power order logic allowing inductive definitions 
formalized fixed point operator lfp example reflexive transitive closure 
edge relation defined definition 
equivalently expressed fixed point operator 
exciting natural descriptive class fo lfp order logic extended power new relations induction precisely captures polynomial time 
theorem imm imm var problem polynomial time iff describable addition fixed point operator 
equivalent expressible firstorder formula iterated polynomially times 
formally fo lfp fo 
theorems cast np question different light 
equal np np closed complementation 
follow second order formula equivalent second order existential 
corollary equal np iff second order expressible property finite ordered structures ready expressible order logic inductive definitions 
symbols np fo lfp 
theorem considers arbitrary iteration order formulas exponentially general monotone iteration order formulas 
iteration defines partial fixed point operator 
theorem shows allows description properties computable polynomial amount space 
theorem imm imm var problem polynomial space iff describable addition partial fixed point operator 
equivalent expressible order formula iterated exponentially 
formally pspace fo pfp fo 
refinement theorem shows precise amount space characterized thenumber distinct variables relevant order formula number descriptive variables captures space dspace nk var imm combinatorial games due ehrenfeucht fra iss prove results 
bounds provide useful insights separate relevant complexity classes proved ordering relation ehr fra imm 
lower bounds known separating classes corresponding pspace 
abiteboul vianu showed fundamental relationship logic complexity 
fo wo means order logic ordering relation 
theorem av conditions equivalent 
fo wo lfp fo wo pfp 
fo lfp fo pfp 
pspace descriptive complexity reveals simple elegant view computation 
natural complexity measures polynomial time nondeterministic polynomial time parallel time space natural descriptive characterizations 
logic effective tool answering complexity 
logic database query language database area important area computer science concerned storing querying amounts data 
logic databases intimately connected birth database systems early 
relationship unqualified success story 
order logic fo lies core modern database systems standard query languages structured query language sql query example qbe syntactic variants fo 
powerful extensions fo recursion reminiscent known fixpoint queries studied finite model theory see section 
impact logic databases examples effectiveness logic computer science 
section discusses question fo turned successful query language focus main reasons ffl fo syntactic variants easy 
basic building blocks sql qbe 
ffl fo efficiently implemented relational algebra provides set simple relations expressing fo queries 
relational algebra context databases introduced ted codd cod 
related tarski cylindric algebras hmt 
turns yield crucial advantage large amounts data concerned 
realization codd algebra efficiently implement fo queries gave birth relational database systems 
ffl fo queries potential perfect scaling large databases 
massive parallelism avail able fo queries principle evaluated constant time independent database size 
relational database viewed finite relational structure 
signature signature minor difference relations coordinates names 
name coordinate called attribute set attributes relation denoted att 
example beer database consist relations king joe serves bar bass king bass main database query data find frequent bars 
turns query expressible fo broken sequence simple subqueries 
section part article imm 
see books ef imm information descriptive complexity codd received acm turing award leading development relational systems 
subquery produces intermediate result may subsequent subqueries 
subquery form lk li literal input left hand side previous subquery inthe sequence input occur previously sequence 
meaning subquery assign result fo query lk structure resulting previous subqueries sequence 
subqueries provide appealing building blocks fo queries 
illustrated language qbe query formulated just described 
forexample consider query beer database find frequent bar serving bass 
expressed single query form answer serves bass qbe query formulated visually appealing way follows answer bar serves bar bass similar building blocks sql standard query language relational database systems consider query 
naive implementation check bar serves bass holds 
number checks number number bars database roughly sizeof database 
turns infeasible large databases 
better approach practice relational algebra 
discussing works informally algebra operators 
set operators union gamma difference 
selection operator denoted extracts tuples satisfying condition cond involving equalities constants 
example bass serves produces tuples serves bass 
projection operator denoted projects tuples relation subset 
join operator denoted consists tuples att att unary operator allows rename attribute relation contents 
expressions constructed relational algebra operators called relational algebra queries 
expressed relational algebra follows bass serves result crucial importance fo relational algebra express precisely queries key efficient implementation relational algebra queries twofold 
individual algebra operations efficiently implemented data structures called indexes providing fast access data simple example structure binary search tree allows locating tuples attribute value time log number tuples 
second algebra queries set rewriting rules 
query rewritten equivalent efficient form bass serves indexes rewriting rules allows evaluate query cost roughly log database better 
large databases infeasibility feasibility 
fo queries turn extremely behaved respect scaling 
sufficient resources response time principle kept constant database larger 
key remarkable property parallel processing 
admittedly lot processors needed achieve ideal behaviour polynomial size database 
feasible practice time soon 
key point fo query evaluation admits linear scaling speed proportional numberof parallel processors 
relational algebra plays crucial role parallel implementation fo 
operations set oriented highlight intrinsic parallelism fo queries 
example consider projection 
key observation project tuples 
processor tuple projection computed constant time independent number tuples 
second example consider join joining pairs tuples independently 
processor pair join computed constant time independent number tuples algebra operation evaluated constant parallel time algebra query evaluated constant time 
constant depends query independent size 
course processors needed database grows 
practice massive parallelism required achieve perfect scaling available 
algorithms take optimal advantage set processors 
worth noting processors implementing algebra need powerful required perform simple operations tuples 
fact sufficient processors implement basic boolean circuit operations 
fact formalized result due immerman imm stating fois included ac class problems solvable circuits constant depth polynomial size fan 
logic proven spectacularly effective tool database area 
fo provides standard query languages ease efficient implementation relational algebra 
fo achieve linear scaling parallel processing resources 
full potential remains realized 
database area may sks ull provides depth presentation 
text database theory mai followed ahv 
text described database query languages fo including fixpoint logics 
relational database theory provided kan 
relationship finite model theory databases discussed 
type theory programming language research study programming languages revolutionized remarkable ideas mathematical philosophical logic theoretical computer science 
type theory emerged unifying conceptual framework design analysis implementation programming languages type theory helps clarify subtle concepts data abstraction polymorphism inheritance 
provides foundation developing logics program behavior essential reasoning 
suggests new techniques implementing compilers improve efficiency integrity generated code type theory study type systems 
reynolds defines type system syntactic discipline enforcing levels abstraction rey 
type system form context sensitive grammar restrictions formation programs ensure large class errors arise misinterpretation values occur 
examples errors applying function boolean argument treating integer pointer data structure region executable code types int bool expressions ffi true false values true false fun operator ffi ranges arithmetic operations gamma theta variable ranges numerals natural numbers 
variables bound expression fun syntax gamma gamma gamma int gamma int gamma int gamma ffi int gamma true bool gamma false bool gamma int gamma int gamma bool gamma bool gamma gamma gamma gamma gamma fun gamma gamma gamma type system writing program memory regard purpose validity violating assumptions calling arguments arguments wrong type 
type system typically defined inductive definition typing judgement form gamma expression type gamma assigns types global variables may occur typing judgement defined place relation closed collection typing rules determine expression typed syntax illustrative fragment ml language 
type system 
note language constructs grouped type 
expressions denote values operations manipulating values computation rules governing function type constructor exhibit intriguing similarity elimination rules implication gentzen system natural deduction 
similarity accidental propositions types principle cf chs isomorphism propositions types property natural deduction proofs proposition correspond associated type 
principle extends full range logical connectives quantifiers including second higher order logic operational semantics defines execute programs 
useful define operational semantics language transition relation states machine certain states 
ffi 
ffi 
ffi 
ffi ffi ffi 





ae true false 



fun 
notation stands result substitution free occurrences expression operational semantics designated final states 
illustrative language states machine expressions final states fully evaluated expressions 
transition relation plotkin technique structured operational semantics plo 
rules constitute definition call value evaluation strategy function arguments evaluated prior application function expressions fully evaluated role type system preclude execution errors arising misinterpretation values 
theorem type soundness fully evaluated exists 

type error expression value 

errors correspond illegal instructions memory faults type soundness theorem ensures typed programs incur errors 
structure realistic programming languages described similar techniques type theoretic viewpoint programming language features correspond types 
chart summarizes main correspondences concept type values bool true false int integer numerals integer arithmetic floating point float numerals theta ordered pairs component union tagged values case procedure definition procedure types heap pointers templates generics abstraction packages modules opening storage ref storage cells update tagged values dynamic dispatch organizing programming languages type structure number benefits 
mention salient ones 
language concepts modularly avoiding confusion conflation distinct concepts 
traditional concepts call parameter passing emerge take values type 
second type structure exploited reason program behavior 
example technique logical relations interprets types relations values may characterize interchangeability program fragments 
third possible outlined give precise statement proof safety properties programming language 
thetype annotations programs form certificate safety checked prior execution program 
fourth types may exploited compiler improve run time efficiency provide self check integrity compiler tmc 
reasoning knowledge formal study epistemic logic initiated led hintikka seminal book belief hin 
saw interest area philosophy community 
reasoning knowledge shown play key role diverse fields game theory ai 
key concern connection knowledge action 
robot need know order open safe 
processes need know processes inorder coordinate action 
agents need know agents carry conversation 
formal model philosophers provide basis appropriate analysis questions briefly review model just show 
syntax straightforward 
start set phi primitive propositions primitive proposition phi represents basic fact raining spain set ng agents 
close conjunction propositional logic modal operators kn ki read agent knows read knows read common knowledge 
says agent knows agent knows agent know knows knows 
colloquially know know don know know know 
semantics logic modal logics possible worlds 
idea current information agent may able tell number possible worlds describes actual state affairs 
say agent knows fact true worlds possible 
formalize intuition kripke structures 
kripke structure tuple kn ss set possible worlds ki binary relation thatis set pairs theta ss associates world truth assignment ss ftrue falseg primitive proposition phi world intuitively ki world agent considers world possible define read true world structure induction structure primitive proposition phi iff ss true iff iff ki iff ki iff ki kripke structures named saul kripke introduced current form kri idea possible worlds air philosophy community 
iff ek ek defined inductively ek eek 
note semantics ki captures intuition agent knows exactly true considers possible 
clearly true iff ki true agent true knows knows knows appropriate structure analyzing complicated multi agent system 
turns natural model multi agent systems viewed kripke structure 
phrase system interpreted loosely 
players poker game agents conducting bargaining session robots interacting clean house processes computing system viewed multi agent systems 
assume times agents system viewed local state 
intuitively local state encapsulates relevant information agent access addition environment state encodes relevant aspects system part agents local states 
example modeling robot navigates office building encode robot sensor input part robot local state 
robot uncertain position encode position environment state 
global state system tuple form se sn se state environment si agent system static entity changes time 
run complete description happens time possible execution system 
definiteness take time range 
formally run function natural numbers global states 
run describes initial global state system describes global state 
pair consisting run time point 
se sn define ri si ri agent local state point points system viewed states kripke structure 
define natural relation ki agent thinks possible ri agent local state points 
intuitively local state encodes agent remembers run 
interpreted system consists pair ss system ss associates truth assignment primitive propositions appropriately chosen set phi 
define truth epistemic formulas point interpreted system just kripke structure 
interpreted system viewed set possible worlds withthe points acting worlds particular ki ri 
example framework analyzing distributed protocols consider attack problem distributed systems folklore gra 
abstracts problem data recovery management arises standard protocols database management called 
presentation taken hm divisions army overlooking common valley 
awaits enemy 
clear divisions attack enemy simultaneously win battle division attacks defeated 
generals plans launching attack enemy commanding general division wishes coordinate simultaneous attack time day 
decide attack sure attack 
generals interpreted system deal temporal formulas talk happens point unnecessary issues discussed section 
see section discussion temporal logic 
communicate means messenger 
normally takes messenger hour 
possible get lost dark worse captured enemy 
fortunately particular night 
long take coordinate attack 
suppose messenger sent general general message saying dawn 
general attack 
course general know got message may attack 
general sends messenger back acknowledgment 
suppose 
general attack 
general know general message general thinks general may think didn get original message 
sends messenger back acknowledgment 
course terms knowledge time messenger transit depth generals knowledge increases 
suppose primitive proposition stand message saying dawn sent general 
general gets message holds 
gets holds 
acknowledgment brings 
keep increasing depth knowledge hard show protocol generals attain common knowledge attack held dawn happens generals different protocol 
help 
long possibility messenger may get captured lost common knowledge attained fact deliver messages 
take far afield completely formalize results see hm details give rough description 
say system message delays roughly speaking run process message time run identical time process receives messages time process receives message times mand 
theorem hm run system displays unbounded message delays knowledge message delivered 
says matter messages arrive attain common knowledge 
coordinated attack 
fact generals initial plans attack means absence message delivery attack 
common knowledge message delivered message delivery prerequisite attack hard show common knowledge generals 
precisely attack primitive proposition true precisely points generals attack 
corollary run system displays unbounded message delays generals attacking attack holds 
dealt original problem 
connection attack coordinated attack 
theorem shows quite deep 
common knowledge prerequisite coordination system coordinated attack system thatis set runs protocol coordinated attack 
theorem hm system coordinated attack generals attack common knowl edge generals attacking 
interpreted system coordinated attack point attack attack putting corollary theorem get corollary 
corollary system coordinated attack displays unbounded message delays attack 
negative result shows power approach means understanding essence coor 
positive results showing approach verify analyze reason distributed protocols 
course brief discussion scratched surface topic 
details interested reader consult fagin halpern moses vardi book 
automated verification semiconductor designs growth computer power connectivity changed face science engineering changing way business conducted 
revolution driven advances semiconductor manufacturing technology 
semiconductor community faces chip designers finding increasingly difficult keep advances semiconductor manufacturing 
result unable exploit enormous capacity technology provides international technology roadmap semiconductors suggests semiconductor industry require productivity gains greater historical year keep increasing semiconductor designs 
referred design productivity crisis 
designs grow complex easier introduce flaws design 
designers various validation verify correctness design 
unfortunately techniques grow expensive difficult design complexity 
validation process begun consume half resources semiconductor industry begun refer problem validation crisis 
formal verification process mathematical techniques guarantee design respect specified behavior 
algorithmic formal verification tools modelchecking technology ces lp qs vw enjoyed substantial growing years showing ability discover subtle flaws result extremely improbable events 
tools viewed academic interest routinely resulting decreased time market increased product integrity kur 
step formal verification come formal specification design description desired behavior 
widely specification languages designs temporal logic pnu 
linear temporal logics time treated moment time 
linear temporal formulas interpreted linear sequences regard describing behavior single computation system linear temporal logic ltl formulas constructed set rop atomic propositions usingthe usual boolean connectives unary temporal connective eventually binary temporal connective 
example ltl formula request refers atomic propositions request true computation precisely state computation request holds followed state holds 
ltl formula request 
request true computation precisely holds state computation holds state holds reached 
ltl interpreted computations viewed infinite sequences truth atomic propositions computation function ss rop assigns truth values rop time instant natural number 
computation ss point notation ss indicates formula holds point computation ss 
example ss iff public net files sia roadmap home htm ss ss iff ss ss 
say ss satisfies formula denoted ss iff ss 
connectives canbe defined terms connective defined true defined designs described variety formal description formalisms 
regardless formalism finite state design abstractly viewed labeled transition system structure finite set states system setof initial states system transition relation indicates allowable state transitions ofthe system rop assigns truth values atomic propositions state system labeled transition system essentially kripke structure 
path starts behavior system starting infinite sequence states ui ui sequence computation starts sequence truth assignments visited path language denoted consists computations start state 
note viewed language alphabet rop 
viewed description system describing traces 
say satisfies ltl formula computations satisfy models major approaches automated verification automata theoretic approach underlies model checkers spin hol cadence smv 
key idea underlying automata theoretic approach ltl formula possible construct finite state automaton infinite words accepts precisely computations satisfy vw 
type finite au infinite words consider defined uchi uc 
uchi automaton tuple sigma ae sigma finite alphabet finite set states set initial states ae theta sigma nondeterministic transition function set accepting states 
infinite word delta delta delta sequence delta delta delta si ae si gamma ai forall 
run accepting accepting state repeats infinitely forsome infinitely si infinite word accepted run language infinite words accepted denoted 
establishes correspondence ltl uchi automata ltl formula uchi automaton sigma ae sigma rop jsj set computations satisfying formula vw correspondence reduces verification problem automata theoretic problem follows vw 
suppose system ltl formula 
check models follows construct automaton corresponds negation formula take cross product system automaton obtain automaton am am check language am nonempty am accepts input 
design correct 
design accepted input incorrect computation 
incorrect computation user finite trace possibly followed cycle 
automaton constructed tion task reduced automata theoretic problems intersecting automata testing emptiness automata highly efficient solutions var 
furthermore data structures representation large state space possible verify designs significant complexity bcm linear time framework limited ltl specification language 
prefer automata infinite words specification formalism vw fact cospan kur 
approach design represented finite transition system property represented uchi related variant automaton design correct www cad eecs berkeley edu smv computations accepted 
approach called language containment approach 
verify respect construct automaton complements take product system automaton obtain automaton am automaton am nonempty 
design correct iff am empty 
task reduced automata theoretic problems intersecting complementing automata testing emptiness automata years automated formal verification tools model checkers shown ability provide thorough analysis reasonably complex designs goe 
companies cadence fujitsu hp ibm intel motorola nec sgi siemens sun model checkers increasingly designs reduce time market ensure product quality 
concluding remarks clear ones single effectiveness logic 
fact back davis wrote essay influences logic computer science dav begins stating student logicians living outer space 
today connections logic computers matter engineering practice level computer organization 
davis proceeds examine fundamental concepts logic crucial uses computer science 
particular davis connections boolean logic digital circuits discusses influence logic onthe design programming languages comments relationship logic programming automated theorem proving 
davis wrote book titled universal computer dav presents fundamental connection logic computation tracing lives contributions leibniz boole frege cantor hilbert odel turing effectiveness logic computer science means limited areas mentioned 
matter fact spans wide spectrum areas artificial intelligence 
logic provides computer science unifying foundational framework powerful tool modeling reasoning aspects computation 
computer science phenomena usually described synthetic part human creation phenomena studied natural sciences 
difference computer natural sciences provide explanation logic computer science appropriate successful 
effectiveness logic computer science unreasonable quite remarkable unusual 
acknowledgments 
grateful susan landau suggesting topic article 
ahv abiteboul hull vianu 
foundations databases 
addison wesley reading massachusetts 
av abiteboul vianu 
generic computation complexity 
proc 
rd acm symp theory computing pages 
bcm burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation june 
uc uchi 
decision method restricted second order arithmetic 
proc 
internat congr 
logic method 
philos 
sci 
pages stanford 
stanford university press 
ces clarke emerson sistla 
automatic verification finite state temporal logic specifications 
acm transactions programming languages systems january 
cf curry feys 
combinatory logic 
north holland 
chs curry hindley seldin 
combinatory logic volume 
north holland 
chu church 
note entscheidungsproblem 
symbolic logic 
cod codd 
relational model data large shared data banks 
communications 
dav davis 
influences mathematical logic computer science 
editor turing machine half century survey pages 
oxford university press 
dav davis 
universal computer 
norton 
ef ebbinghaus flum 
finite model theory 
perspectives mathematical logic springer verlag 
ehr ehrenfeucht 
application games completeness problem formalized theories fund 
math 
fag fagin 
generalized order spectra polynomial time recognizable sets 
karp editor complexity computation siam ams proceedings vol 
pages 
fagin halpern moses vardi 
reasoning knowledge 
mit press cambridge mass 
fra fra iss 
sur quelques classifications des syst emes de relations 
publ 
sci 
univ 
er 
gj garey johnson 
computers intractability guide theory np completeness 
freeman san francisco 
glt 
girard lafont taylor 
proofs types volume cambridge tracts computer science 
cambridge university press cambridge england 
od odel 
uber formal der principia mathematica und sys ur mathematik und physik 
goe 
model checking expands verification scope 
electronic engineering today february 
gra gray 
notes database operating systems 
bayer graham editors operating systems advanced course lecture notes computer science vol 

springer verlag berlin new york 
appears ibm research report rj 
ham hamming 
unreasonable effectiveness mathematics 
american 
hin hintikka 
knowledge belief 
cornell university press ithaca 
hm halpern moses 
knowledge common knowledge distributed environment journal acm 
hmt henkin monk tarski 
cylindric algebras part north holland 
part ii north holland 
hol holzmann 
model checker spin 
ieee trans 
software engineering may 
special issue formal methods software practice 
william howard 
formulas types notion construction 
seldin hindley editors curry essays combinatory logic lambda calculus formalism pages 
academic press 
imm immerman 
number quantifiers better number tape cells 
journal system sciences 
imm immerman 
upper lower bounds order expressibility 
journal computer sciences 
imm immerman 
relational queries computable polynomial time 
information control 
imm immerman 
languages capture complexity classes 
siam computing 
imm immerman 
nondeterministic space closed complement 
siam journal com puting 
imm immerman 
dspace nk var 
proc 
th ieee symp 
structure pages 
imm immerman 
descriptive complexity logician approach computation 
notices mathematical society 
imm immerman 
descriptive complexity 
springer verlag 
jac jacobs 
categorical logic type theory volume studies logic mathematics 
elsevier amsterdam 
kan kanellakis 
elements relational database theory 
van leeuwen editor theoretical computer science pages 
elsevier 
kri kripke 
semantical analysis modal logic normal modal propositional calculi zeitschrift ur mathematische logik und grundlagen der mathematik 
announced journal symbolic logic 
kur kurshan 
computer aided verification coordinating processes 
princeton univ press 
kur kurshan 
formal verification commercial setting 
verification times 
lp lichtenstein pnueli 
checking finite state concurrent programs satisfy 
proc 
th acm symp 
principles programming languages pages 
mai maier 
theory relational databases 
computer science press 
mit mitchell 
foundations programming languages 
foundations computing 

ml martin 
intuitionistic type theory 
studies proof theory 
bibliopolis italy 
mw manna waldinger 
logical basis computer programming 
addison wesley 
plo plotkin 
structural approach operational semantics 
technical report daimi fn computer science department aarhus university 
pnu pnueli 
temporal logic programs 
proc 
th ieee symp 
foundation science pages 
qs sifakis 
specification verification concurrent systems cesar 
inproc 
th international symp 
programming volume lecture notes computer science pages 
springer verlag 
rey john reynolds 
approaches type structure 
tapsoft 
springer verlag 
rey john reynolds 
theories programming languages 
cambridge university press 
sks silberschatz korth sudarshan 
database system concepts 
mcgraw hill 
tar tarski 
der den sprachen 
studia philosophica 
tmc david tarditi greg morrisett perry cheng chris stone robert harper peter lee 
til type directed optimizing compiler ml 
acm sigplan conference programming language design implementation pages philadelphia pa may 
tur turing 
computable numbers application entscheidungsproblem 
proc 
ofthe london math 
soc 
ser 

ull ullman 
principles database knowledge base systems 
computer science press 
var vardi 
complexity relational query languages 
proc 
th acm symp 
computing pages san francisco 
var vardi 
automata theoretic approach linear temporal logic 
moller andg 
birtwistle editors logics concurrency structure versus automata volume lecture notes computer science pages 
springer verlag berlin 
vianu 
databases finite model theory 
descriptive complexity finite models 
vw vardi wolper 
automata theoretic approach automatic program verification proc 
st symp 
logic computer science pages cambridge june 
vw vardi wolper 
reasoning infinite computations 
information computa tion 
wig wigner 
unreasonable effectiveness mathematics natural sciences 
comm 
applied math 

