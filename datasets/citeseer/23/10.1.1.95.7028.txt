generation workflow code dsms stephan florian bernhard bauer programming distributed systems lab university augsburg germany bauer ds lab org 
process models documentation purposes execution workflow engines models need seamlessly transformed executable workflow code 
practice existing model code generations show number limitations different process engines require different workflow code domain specific models need complex graph transformation algorithms come graphbased block structure 
describe issues detail develop model code generation framework fosters workflow code generation domain specific models 
model driven software development embodies software engineering approaches focusing creating models program code 
uses models raise level abstraction developers create evolve software reduces complexity software artifacts separating concerns aspects system development 
omg model driven architecture mda specific approach suggests apply models levels abstraction 
multiple model transformations developed transforming integrating knowledge captured various models 
overhead prevents projects increasing productivity 
software factory microsoft focuses domain specific languages dsls customized development processes 
software factory schemas describe assets software development dsls patterns frameworks tools 
generic modeling environment gme configurable toolkit creating domain specific modelling program synthesis environments 
metaedit allows dsls customized diagram types 
code generators written improve productivity generating code directly higher level models 
project agile business processes developed modelling language modelling tool model code generation framework allow definition dsls process oriented application domains generation executable workflow code 
techniques generation framework 
main achievements generation framework provide component design fosters reuse composition parts generation solutions decouple domain aspects computational aspects code generation 
generation framework aims enable people little experience code generation workflow technology generate workflow code higher level models reasonable time 
context decade erp domain agile processes got important 
order improve existing products customize needs user changes need www isis vanderbilt edu projects gme www com www eu done flow services offered services 
results changes jurisdiction new products standards requirements customers 
organisations need loosely coupled components 
service oriented architecture soa web service technology implementation soa way achieving 
tool suite process integration framework soa 
allows user model business processes preview execute process engine 
core solution domain specific model dsm conforms dsl process modelling contains predefined model elements applications services particular domain 
modelling tool provides possibility define multiple concrete syntaxes example especially suits erp domain 
modelling tool offers views dsm business view technical view 
business view abstracts technical details web services invoked data mapping different applications works 
part technical view expert specify relevant data execution process predefined dsm 
model code generation framework generate executable workflow code 
metamodel graph business process languages rests uml metamodel activity diagrams 
extends information responsibilities functions aris data events similar bpmn 
henceforth tries combine best practices currently existing process modelling languages 
enable domainspecific modelling erp crm financial service applications metamodel modelling tool allows define model templates 
model templates contain predefined elements information application domain syntactical information 
example data types applications specific execution information icons erp domain 
predefined elements automatically part modeller modelling palette complete metamodel specific dsl 
dsls executed current process engines directly needs transform executable language 
ws bpel quasi standard orchestrating web services supported process engines illustration purposes rest 
fig 

create offer process modelled light modeller shows create offer process modelled light modeler 
complete process model comprises processing steps input output data applications execute processing steps roles perform processing steps 
create offer process processing step create offer offer header input data produces offer output 
create offer performed sales assistant offer management system execution 
offer value greater equal head sales department check offer 
offer added portal sales assistant 
shown process diagram additional information predefined elements complete dsl 
create offer process example attributes data types information integration framework java adapters called applications eu fw fe intf offer management 
additional information code generation directly generate executable bpel code 
challenges code generation develop code generation generates executable workflow code directly higher level process descriptions deal variety challenges 
process graph transformation important challenge translation higher level processes constructs provided target process execution language 
bpel example called language 
language elements represent control flow composed cycle free tree structure goto statements 
describe approaches translate process graphs block structured bpel code 
process graph analyzed order map graph bpel elements 
approaches identification single entry single exit sese components control flow 
identify algorithms compiler theory token flow algorithm :10.1.1.31.5126
result implement quite complex graph transformation algorithms realize bpel workflow generation higher level process graphs 
certainly possible implemented transformations examples nearly model model model code transformation approach 
model model model code transformation approaches qualify lot better describing elements implementing generation patterns implementing complex graph transformation algorithms 
realize preprocessing graph transformation algorithms common programming languages java better suited :10.1.1.31.5126
usage process execution environments engines process execution languages defined syntax semantics different process execution programs achieve external behaviour effects process execution engine 
code generations templates adjusted way process engines implement particular execution patterns 
code generation templates encode domain knowledge specific data types 
examples illustrate different ways bpel execute invocation service 
example represents code generation process models semantics similar bpel code second example demonstrates code generation higher level process models 
second example demonstrates quite range realistic application scenarios sophisticated execution invocation patterns encoded code generations 
example bpel generation developed spl project ff action semantics uml 
similar bpel code generations described example 
listing depicts bpel code generated invoke service gets input provides offer output see section 
listing 
bpel code generated spl invoke name prov porttype operation offer invoke example usage jboss workflow engine project multiple bpel instructions necessary obtain computational result example 
listing depicts sample code necessary invoke service depicted 
important issue recognize process execution engine execution context information process execution transiently stored 
variables containers execution context consist attributes parts 
correlation jboss engine 
contain information data object integration framework 
code listing generated follows 
processing step started input data copied execution context 
done assign invoke input data line 

lines execution processing step started 

receive statement line waits completion processing step human interaction input 
line stops task execution process engine 

result data offer line fetched process execution context 
listing 
bpel code generated assign name set copy part variable part variable copy copy expression string part variable copy copy expression string id part variable copy copy expression string part variable copy assign invoke name porttype agi operation correlations correlation pattern set correlations invoke assign name 
assign invoke name porttype agi operation correlations correlation pattern set correlations invoke receive porttype atm frontend atm operation variable correlations correlation set correlations receive assign name 
assign invoke name porttype agi operation correlations correlation pattern set correlations invoke assign name get offer 
assign invoke name offer porttype agi operation correlations correlation pattern set correlations invoke challenges summary people organisations aiming develop model code transformations want concerned parts solution really specific usage scenario 
want able reuse parts existing solutions compose minimal effort 
described previous sections arise variety challenges people want derive executable process descriptions code models higher level process models 
section model code generation framework allows far possible address various challenges separately 
list summarizes requirements framework 
exists hugh diversity modelling languages projects providing means model processes uml activities pim soa ff framework shall allow decouple code generation format input models 
necessary apply complex graph transformation algorithms translate higher level process models workflow executable code bpel xpdl 
depending process execution environment code generation encode complex invocation patterns include knowledge respective workflow execution engine 
framework provide means easily describe maintain reuse generation patterns independent information necessary code generation 
technological background czarnecki majority currently available tools support template model text generation jet 
template usually consists target text containing slices access information source perform code selection iterative expansion 
template approaches usually offer user defined scheduling internal form calling template template 
case application scenario templates choice implement complex invocation patterns respective workflow language platform 
templates close structure code generated perfectly suitable iterative development easily derived examples 
template approaches best choice generated output code generation depends structure additional information model 
application scenario control flow process 
workflow code generation generated code fix sequence processing steps example bpel depends control flow described process 
problems addressed visitor code generation approaches examples see metaedit 
approaches provide visitor mechanism traverse internal representation model triggers code generation 
solution needs solve problem complex graph analysis transformation 
done preprocessing step real code generation 
graph transformation algorithms implemented programming languages java internal model representation 
graph analysis transformation seen model model transformation realizes direct manipulation approach 
model code generation framework deal challenges described section applied separation concerns paradigm model code generation framework 
solutions described challenges integrated framework separate components overlap little possible 
allows flexible reuse combination components model code generation framework 
observation solutions described challenges highly depend application domain modelling context execution environment independent application domain 
introduced common process modelling format divided framework domain specific domain independent part compiler theory intermediate language allow language independent code optimization 
totally correct identify front back compiler construction front adapter dsl model code generator generation templates iv depend dsl specific process format independent 
depicts structural view generation framework 
process transformer optimizer ii process visitor iii domain independent 
address general graph transformation problems graph traversing independent concrete process modelling languages 
components access process descriptions represented common process modelling format 
framework sourceforge net projects fig 

model code generation framework process modelling format derived standard workflow models 
graphs provides common process modelling format bpel 
components framework adapter dsl process models code model generation templates iv directly access process modelling format dsl modelling input model 
adapters generation templates combination dsl specific process format 
model code generation framework allows plug components common interfaces provides workflow composes components 
framework configured components registered plugged user provide input model start generation workflow framework 
shows generation workflow 
depicts states workflow execution transitions 
fig 

code generation state workflow comprises input process model represented format specific dsl modelling input process 
second state reached applying adapter input model 
adapter creates representation input process common process modelling format 
ensure traceability processing steps process models links processing steps common representation format processing steps input model 
process transformer restructures optimizes process represented common process modelling format 
example generates block structured graph 
state control flow process representations differs processing steps linked respective processing steps representation format 
transition model code generation ends final state framework workflow 
process visitor traverses process state represented common process modelling format 
code model generation templates called notification mechanism provided framework 
see workflow terminates state code new model generated 
main power model code generation framework lies process transformer optimizer ii combination visitor template code generation approach iii iv 
ii identifies process descriptions 
basis graph transformations allow generated block structured bpel code 
test soundness process control flow reasonable time 
iii iv combine advantages template code generation approaches 
process visitor traverses process flow input model calls templates workflow code generation 
visitor allows generate workflow code sequence process control flow 
especially important sequences bpel process steps performed order bpel text file 
template mechanism advantage generation templates easily derived examples 
framework allows graph transformation flexible higher level process descriptions constructs provided target process execution language supports users easily implement code generation process execution complex invocation patterns 
case study workflow code generation section presents case study illustrates code generation create offer process introduced section 
configuration generation framework generate bpel code generation framework configured 
process transformer transforms arbitrary processes bpel process process common block structured process models registered framework 
process provided framework token analysis component process transformer 
adapter models respective bpel code generation templates jboss workflow engine registered framework 
workflow generation framework executed shown 
framework implements notification mechanism publish subscribe pattern 
sourceforge net projects creation common process model step framework workflow adapter process models generates representation input process common process modelling format 
resulting process depicted uml concrete syntax common process modelling format concrete syntax representation 
adapter connects respective processing steps process representations 
fig 

create offer process common process model transformation common process graph process transformer transforms process generated block structured process 
depicts block structured process 
see alternative block generated decision merge gateways 
fig 

block structured create offer process standard process model uml syntax generating bpel code step block structured process traversed bpel code generation templates applied 
code excerpts generated code generation create offer process 
process visitor starts information variables generated bpel process 
initial invocations process engine 
visitor starts traverse block structured process description 
processing step scope generated gets name step contains processing instructions necessary step 
process step visitor accesses create offer step 
step bpel workflow code depicted listing section generated scope element 
context executable bpel workflow code exist variety solutions provide hardly concrete syntax graphical textual bpel cp 
uml profile bpel oracle bpel process manager designer 
solutions narrow gap higher level process descriptions workflow execution 
tool chains allow model driven development generation bpel code ibm tool suite restrictions prevent process models fully transformed 
approaches require manual model refinement multiple abstraction levels 
describes generic mapping approach business process models process oriented representations means xpdl 
experience generation xpdl higher level process models deal challenges generation bpel sequence model elements xpdl model determine process control flow xpdl require block structured processes 
developed model code generation framework fosters generation executable workflow code 
generation framework separates tasks occur workflow code generation separate reusable components 
main contribution decouple components depend domain execution environment components deal computational aspects control flow analysis transformation 
allows better reuse knowledge encoded adapters graph transformation algorithms code generation templates 
bpel code version shall generated model respective code generation templates adjusted 
framework combines advantages visitor approaches template approaches graph transformation techniques 
visitor allows generate workflow code sequence process control flow templates derived examples 
components realize process transformer optimizer free choice implementation technology 
generation framework applied dsl concerned process description 
dsms respective adapter implemented 
adapters dsms parse xmi files access modelling apis 
generation framework applied source model contain necessary information generate executable workflow code 
case generation templates replaced code constructs refined model 
example generate bpel uml profile model manually refined 
implemented workflow code generations various projects 
spl project see example section effort man month specify implement bpel code generation extend language 
input models transformation constrained block structured process models 
second implementation done prototype project see example section 
jet templates combined java code 
solution able deal limited set cycles control flow 
effort approximately man month time spent constraining transforming control flow input models 
parts implementation lend reuse graph transformation code generation combined 
experiences developed generation framework graph transformation component effort man month person experience code generation workflows implemented code generation www ibm com software websphere implementation part workflow generation framework project sourceforge net projects wf codegen days generation framework 
person simply copy process graph input model adapter derive generation templates examples 
time saving generation framework contrast approaches depend complexity input graphs cycles experience generation developer 
model code generation framework possible people little experience code generation graph transformation produce workflow code reasonable time 

aho sethi ullman 
compilers principles techniques tools 
addison wesley 

gardner griffin iyengar 
draft uml profile automated business processes mapping bpel version 
ibm developerworks 



www org 

bauer 
modellierung simulation und ausf hrung prozesse 
objekt spektrum 

bpel ws 
business process execution language web services version 

czarnecki 
feature survey model transformation approaches 
ibm systems journal 

gamma helm johnson 
design patterns 
elements reusable object oriented software 
addison wesley longman 

tz bauer 
token analysis transform graph oriented process models bpel 


short cook kent 
software factories assembling applications patterns models frameworks tools 
wiley publishing 

tarr 
model driven development bad ugly 
ibm systems journal 

jet 
java emitter templates jet 
www eclipse org modeling 

johnson pearson pingali 
program structure tree computing control regions linear time 
conference programming language design implementation pages 
acm press 

jung 
meta modelling support general process modelling tool 
th oopsla workshop domain specific modeling 

kiepuszewski ter hofstede van der aalst 
fundamentals control flow workflows 
acta informatica 

maurer 
active endpoints soa world magazine pages 

mendling lassen zdun 
transformation strategies block oriented graph oriented process modelling languages 
wirtschaftsinformatik volume pages 
verlag 



www org 

omg 
mda guide version 
omg 

omg 
business process modeling notation specification final adopted specification 
dtc 

omg 
uml profile metamodel services heterogeneous architectures ha 
ad 

oracle 
oracle bpel process manager developer guide 

dumas ter hofstede van der aalst 
pattern translation bpmn process models bpel web services 
international journal web services research 


scheer 
aris vom gesch zum 
springer verlag 

leymann 
faster focused control flow analysis business process models sese decomposition 
th conference lncs pages 
springer 

prevost scher 
business process management modeling monitoring websphere products 
ibm 

wfmc 
process definition interface xml process definition language 
wfmc tc 
