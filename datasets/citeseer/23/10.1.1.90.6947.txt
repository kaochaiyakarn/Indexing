appeared science computer programming vol 
issue july profiles strict metamodeling framework colin atkinson thomas hne ag component engineering university kaiserslautern kaiserslautern germany atkinson informatik uni kl de uml continue meet expectations growing user community essential offer simple coherent mechanism users tailor language specific needs 
current uml extension approaches unnecessarily limited capabilities provide break fundamental tenets meta modeling multi level framework 
particular assumption instantiation form mechanism users apply predefined model elements applications 
identify problems associated limitation explain inheritance important allowing users apply predefined model elements 
point fundamental differences relationships instantiation inheritance defining uml profiles provide guidelines mechanism circumstances 
conclude describing mechanisms utilized definition uml profiles context strict linear metamodeling frameworks 
keywords metamodeling strictness profiles uml inheritance classification success uml wide range application domains important view standard family languages sharing common core single language supporting minimal context specific extensions 
current plans uml evolution envisage significant shrinkage uml core coupled definition enhanced extension mechanism support addition domain user specific modeling concepts 
different extension mechanisms proposed prominent profile mechanism described white omg analysis design platform task force subsequently elaborated versions uml 
description language purpose uml define coherent useful set concepts users apply 
object oriented languages uml offer user definable classes basic ways achieving 
concepts defined core language lines traditional non object oriented languages defined classes predefined standard libraries 
approaches put full object oriented languages smalltalk java relatively small core language definitions comparatively large supporting libraries 
difference classes standard libraries classes added user predefined alongside language definition part technology standard 
adjective predefined refer concept defined language standard case uml standard working environment particular user 
note notion predefined relative user 
uml user working specific predefined modeling concepts uml standard plus profile mandated profile 
currently proposed uml tailoring mechanisms differ details take view definition predefined model elements matter meta level omg standard layer modeling architecture users apply predefined model elements instantiating 
argue assumption predefined model elements reside meta level flawed inheritance regular model level important mechanism applying predefined model elements 
words possible predefine model elements model level inheritance meta level instantiation 
example demonstrate specific purposes inheritance enables modeling elements properties natural way instantiating elements meta level 
establishing guidelines mechanism apply principles determine profile mechanism fit strict metamodeling architecture envisaged improved uml infrastructure 
profiles standard modeling architecture uml modeling takes place context standard level omg model architecture depicted fig 

fig 

omg view profiles top level scheme called meta metamodel meta object facility mof defines basic concepts specific metamodels created meta level 
includes uml metamodel data representation standards cwm illustrated fig 
regarded instances mof residing level 
normal user models created concepts uml cwm regarded residing level run time data regarded residing level 
defining level model architecture uml specification states model instance metamodel metamodel instance metametamodel 
clear basic relationship layers intended instance relationship 
definition leaves questions unanswered particular 
precise nature instance relationship 

instance relationship models mean terms relationships model elements models 
answers questions critical bearing semantics practical properties profile mechanism 
discuss subsections 
instance relationship instance relationship exists model elements element instantiated said instance establishing instance relationship understood terms set membership mechanism deriving model element 
set theory perspective instance relationship precisely referred member 
instance definition known intension concept defines properties instances concept satisfy 
set instances members concept known extension 
mechanism deriving model element instantiation understood creation activity uses template stamp instance 
interpretation instance relationship precisely referred created 
element created attributes slots appropriate values associations involving links involving means properties defined model element affect instances instances instances 
words pass information instantiation step 
alternative form deep instantiation properties propagated instance relationship described 
rely traditional shallow semantics instantiation date assumed uml metamodeling architecture 
extensions classes system mutually disjoint interpretations instance relationship equivalent way element member extension class created 
extensions classes allowed overlap subsets extensions defined distinction interpretations subtle 
subsets extensions created subtyping specialization known uml 
subtype extension subset extension class member member related idea polymorphism object oriented systems instanceof viewed instance fact instance superclasses 
important conventions contemporary object development approaches govern relationship views instantiation mentioned presence subtyping 
object created class 
uml terms object classifier 
contrast object member multiple classes addition created 
convention object member class created class creates subtype case said direct instance second said indirect instance 
strategies establishing conformance objects exist described approach statically typed object oriented languages uml 
basic goal meta modeling approach described extend conventional semantics level object oriented modeling multi level framework 
assume metamodeling approach faithful basic tenets object oriented development object classifier participate direct instance relationship object member class classifier indirect instanceof class supertype classifier 
instance relationship levels nature instance relationship entities clarified question relates model levels multi level model hierarchy 
basic schools thought issue characterized strict versus loose metamodeling 
strict metamodeling strict metamodeling tenet model instance model element instance element words interprets instance relationship granularity individual model elements 
captured form class diagram illustrated fig 

doctrine strict metamodeling holds instance relationship instance relationship crosses metalevel boundaries instance relationship cross exactly metalevel boundary immediately adjacent level 
captured concisely rule strict metamodeling level modeling architecture element level model instance exactly element level model relationship instance relationship elements implies level level 
definition deliberately rules top level hierarchy levels common approach terminate hierarchy model top level elements viewed instance elements level 
terms model level instance relationship described model instance 
fig 

strict metamodeling essence strict metamodeling approach simply seeks extend class object distinction instantiation semantics classic objectoriented development levels multi level modeling architecture 
diagrammatic representation strict metamodeling due cris 
loose metamodeling loose metamodeling essentially encompasses approaches claim model instance model strict requirements instance relationship individual model elements hold defined 
practice means location model elements determined place instance hierarchy criteria 
words loose metamodeling hierarchy simple places model elements model finds need mention 
initial definition metamodels easier gives rise subtle significant problems 
problem blurring level boundaries arises contents models chosen solely utilitarian perspective 
immediate consequence blurring kinds relationships cross boundary including inheritance relationships associations links 
turn impacts integrity model levels effectively playing role packages serve group elements subgroups purpose 
bad thing value grouping related model elements packages long established 
wrapping essentially amounts application packages baggage meta modeling confusing directly misleading 
characterize relationship model levels instance relationship loose metamodeling employed instance relationship common form relationship levels 
second significant problem need deviate wellestablished mechanism instantiation object oriented approaches loose metamodeling 
example exemplifies problem problem defining prototypical concept prototypical class instance object serves convey entities basic property object 
call prototypical concept problem 
approach specification uml loose metamodeling define prototypical concept level class instantiated 
model elements class object appear metamodel related unnamed association 
requires 
modeling element level instance element 

modeling element level direct instance classes known ambiguous classification problem 
clear resort double direct instance relationships attempting fully characterize relationships modeling elements context loose metamodeling 
profiles predefined model elements instance relationship elaborated claimed criterion identifying model levels uml standard fact different unstated principle 
implicit principle predefined concepts uml standard automatically reside meta level user defined automatically resides model level 
chosen metalevel predefined naturally location instance hierarchy 
see case necessary examine current profile mechanism detail 
current version uml profile viewed package constitutes definition uml extension 
contains collection stereotypes constraints comments standard 
words represents set applications built uml extension mechanisms collectively provide coherent set new modeling concepts specific domain application 
semantics profile derived semantics primitive extension mechanism stereotypes tagged values constraints 
stereotype concept fundamental terms creating new modeling concepts 
stereotypes introduced uml way users logically extend metamodel tools having physically change metamodel 
stereotype concept provides way branding marking elements behave respects instances new virtual metamodel construct 
reinforced idea stereotypes behave classifiers stereotyped elements 
model elements classified particular stereotypes receive values constraints 
tagged value constraint mechanisms provide way introducing new modeling concepts define additional properties existing newly introduced constructs 
tagged values simply provide shorthand way defining new meta attributes assigning values constraints simply define additional rules model elements utilized 
apart extending metamodel stereotypes represent mechanism defining new model elements separately part profile 
current approach definition uml standard place core fundamental model elements meta level add additional predefined profiles specialized domains 
note concept predefined stereotypes original motivation stereotypes provide simple user extension mechanism 
definition predefined model elements defined individual users 
currently predefined standard profiles uml profile software development processes uml profile business modeling 
explicitly stated uml standard message predefined elements reside logically meta level may physically represented 
fig 
adaptation omg diagram profile concept clearly indicates tailoring uml specific applications expected take place level 
assumption true proposed uml extension mechanisms 
uml preoccupation meta level modeling way provide predefined set concepts users base somewhat surprising mentioned previously object technology established successful mechanism providing predefined building blocks inheritance mechanism 
object oriented programming languages smalltalk eiffel java feature hierarchy predefined classes rooted class called object classes explicitly implicitly inherit 
note predefined object class meta concept residing level purposely provided level 
believe current problems uml standard proposed profiling mechanisms stem failure recognize importance level inheritance mechanism providing predefined modeling elements 
discussing proper utilization mechanism aid clean definition profile mechanism investigate section difference inheritance instantiation 
inheritance versus instantiation order compare instantiation inheritance mechanism applying predefined modeling elements known observer pattern 
uml generally accepted notation depict class level class metaclass class instantiated stereotype notation understanding form normally intended indicating instantiation user defined modeling elements 
subject role observer pattern identifies subject role task notify set attached observers subject state changes 
observers turn query subject state order synchronize state rendered view subject contents 
fig 
shows subject role may attach detach multiple observers 
subject state changes call notify method causing update message sent attached observer instance 
fig 
shows subject observer roles performed concrete subclasses 
concrete observers association concrete subject exploit particular interface inquire subject state getstate 
pattern common predefined class libraries common object oriented languages 
example java package java util defines interfaces observer observable methods similar corresponding classes fig 

question wish address best support roles uml 
example inheritance level plays important role extension mechanism continue 
inheritance level lack thereof issue 
suppose wanted apply observer pattern visualization say data table object displaying multiple diagram types data 
explained previous sections inheritance derive user specific version subject predefined definition fig 
possible instantiation 
getstate subject observers attach detach notify subject observes update update observer fig 

structure observer pattern note goal necessarily best realization observer pattern attempt find optimal representation uml 
goal compare mechanisms instantiation inheritance deriving user specific model elements predefined ones 
subject predefined element instantiation derive concrete subject class predefined version logically appear level 
stereotypes achieved introducing stereotype named subject mark classes intended play role concrete subjects see fig 
stereotype equip class applied attributes class table explicitly define observers notify method addition internal state cells inquiry methods getstate 
subject table observers cells attach detach notify getstate fig 

subject modeled stereotype recall stereotype applied class level defines virtual metaclass level 
fact concrete subjects table explicitly define attributes operations fundamental consequence properties instantiation choice support stereotypes 
attributes operations defined level class slots class level operations instances effect objects created instantiation step 
subject predefined element illustrated fig 
inheritance mechanism allows concrete subjects table defined having explicitly list subject related features 
features automatically attained normal semantics objectoriented inheritance 
consequently approach typically published definitions patterns 
subject observers attach detach notify cells table getstate fig 

subject modeled inheritance subject role modeled class level table class may inherit receiving features 
note subject class defines features class table receives constraints obligation implement features 
class subject defines concrete attributes methods class table able fulfill subject role providing specific getstate method 
rest predefined class subject 
comparing mechanisms variants see fig 
fig 
table classified subject 
classification fig 
structure table instances influenced directly predefined description subject 
specified resorting definition constraints ocl class related information author version information 
class table subject means virtual metaclass subject derived metaclass class table instantiated see fig 

attributes specified subject class level attributes table 
inheritance class subject resides level see fig 
straightforwardly predefine features associations invariants class subject received class table 
effect jump metalevel border performed class subject allowing predefine properties table modeling level 
interestingly approaches instantiation inheritance derivation reverse order derives subject instantiates table second instantiates subject derives table 
class class subject subject table cells observers notifyall instanceof subject observers notifyall cells fig 

instantiation versus inheritance table instanceof apparent difference case link classes table subject established denote inheritance 
fact table provide subject related features just consequence link 
observation suggest elements certain extent interchangeably element level inheritance 
clearly practical effects mechanisms different instantiation affect structure new elements 
optimally express non code related information project relevant information capture implementation details effect stereotyped classes classes marker interfaces serializable signal property classes implement serialization 
inheritance may shape new element predefined constraints interfaces features obviates need writing constraints stereotypes check instantiated level elements obey certain structure provide certain attribute 
inheritance attribute association class corresponding methods directly specified 
general observation inheriting level elements considerably reduce need constraints 
example stereotype subject contain constraint checking stereotyped element features observers attribute 
property contrast guaranteed construction inheritance classification subjects 
unifying notation different orders instantiation inheritance observed suggests name compartment classes benefit suitably defined notation highlights phenomenon allows quick recognition situation hand 
notation commonly express subtyping symbol 
denoting instantiation usual obtains table subject class table stereotyped subject table subject class table inheriting subject line reads metaclass subject derived metaclass class class table instantiated second line reads class subject instantiated class class class table derived 
difference captured graphically fig 

uses variant venn diagram notation inheritance represented form sub circle level instantiation represented form raised sub circle 
vertical level circle represents location instantiation hierarchy bottom level corresponding second level top level fig 
inheritance level versus inheritance level stereotype syntax denote instantiation stereotypes prefix elements lines subject class table abbreviates subject table table class subject abbreviates table subject version nicely enclose elements level gray parts fig 
dark gray parts fig 

evolution may write subject table table subject sake conformance existing stereotype notation write subject table 
note operator subject table points right direction 
denoting instantiation inheritance reads class subject table abbreviates subject table class subject table abbreviates subject table respective distance new element table subject terms nicely depicted levels new subtype notation level 
particular abbreviated forms right usual name compartment class icon readily seen table instance metaclass line derived class second line 
clearly graphical means express element derived generalization arrow 
redundancy precedent uml 
example ways express instantiation uml 
names separated colon 

dependency arrow stereotyped instance 

stereotype notation 
strictly speaking redundant notations variant intended application context communicates particular variation instantiation 
likewise believe proposed notation deriving elements specifically communicate inheritance obtain predefined modeling properties graphical notation typically employed express generalization relationship elements domain 
strict profiles having discussed subtle differences introducing new modeling concepts level instantiation level specialization position describe believe uml profiles defined context strict metamodeling framework 
fig 
gives faithful rendering comparison fig 
profiles located layer metamodeling architecture 
mechanism modeling environment believe profile general contain elements levels 
words profiles conceptually span modeling levels confined modeling level currently case 
fig 
give organized impression fig 
simply result doctrine strict metamodeling seriously elements constitute important part profile definition 
fig 
gives detailed view contents profiles depicted gray rectangle labeled distributed 
note boxes depict individual classes fig 
depict profiles 
view clearly emphasizes levels layer metamodeling architecture provided fig 

corresponding shades gray belong profile 
predefined meta basic goal profile define set modeling elements users specific domain apply application 
perspective individual user uml profile defines set predefined modeling elements basis modeling 
fig 

profiles containing elements includes called root profile labeled fig 
defines standard set predefined elements part uml core specification 
key difference new way defining profiles proposed approach described existing literature profile longer restricted just level metamodeling hierarchy 
contrary profiles including root profile typically consist elements levels 
principle possible profile contain predefined elements level 
example constant objects smalltalk integers characters boolean values viewed special predefined objects level 
expect common practical uml modeling scenarios 
arbitrarily allocate model elements levels predefined user defined model elements profile allocated logical place instance hierarchy 
reflects fundamental observation definition time predefined level occupancy particular metalevel completely different concerns 
nutshell predefined meta 
illustrated fig 
profiles generally cut model levels layer metamodeling architecture profile corresponds particular shade gray 
example root profile defines uml core consists regular metamodel elements level model elements level 
typical users uml core add classes level instances predefined elements specializations predefined level elements 
advanced users wish define new profile add new elements levels specializations existing modeling elements levels 
way possible build hierarchy profiles adding set predefined modeling elements previously defined profiles specialization levels 
prototypical concept problem fig 

naming modeling layers model profiles depicted fig 
illustrates predefined meta principle helps solve prototypical concept problem outlined way consistent principles strict metamodeling 
forcing prototypical concepts class object class link reside level classes allowed reside level represents natural location far instance hierarchy concerned 
defining object level defining user level classes specializations object directly indirectly inheriting existing element removes ambiguous classification problem mentioned section profiles standard modeling architecture 
note entity direct instance entity turn instance entity class indirect instance object 
entity directly indirectly specializes object instance level entity regarded indirect object instance 
way level entities receive properties object requiring direct instance entities time 
fig 
single level class uml core profile correspond prototypical class object 
note established approach object oriented language models smalltalk eiffel java classes common object class root ancestor 
profile rt profile profile uml core rt profile instanceof instanceof uml core instanceof edoc profile edoc profile fig 

predefined entities levels approach advantage class object natural place multi level metamodeling architecture avoiding problems arise rules strict metamodeling allows instances user defined classes automatically endowed predefined set attributes methods 
envisaged shrinkage uml core growing emphasis user quality flexibility profile extension mechanism play increasingly critical role uml success 
reflected level interest uml extensibility growing set proposals version uml extension mechanism 
pointed current set proposals implicit fundamentally flawed assumption tailoring uml matter uml metamodel level 
assumption invalid explained odds long established principles object modeling 
strict metamodeling offers best opportunity place versions language specification sound footing envisaged current plans uml evolution 
definition profiling mechanism consistent rules strict metamodeling called strict profile requires model elements allocated natural location instance hierarchy predefined perspective user 
result approach uml extension uses regular level inheritance instantiation enable users build predefined set building blocks 
predefined building blocks distributed multiple levels metamodeling architecture concentrated specific level metamodeling hierarchy 
distributing elements multiple levels way avoids semantic distortions necessary support predefined meta principle implicit current approaches facilitates natural allocation properties user classes objects mechanisms discussed 
directly shaping structure elements level inheritance need constraint language order check desired structure avoided places 
strict profiling principles outlined essentially independent notation define instantiate specialize individual modeling elements 
example approaches described cook souza compatible embody notion strict profiles 
practical application approach greatly benefit appropriate notational support applies concepts instantiation specialization level independent way 
uml currently supports main notations instantiation levels regular class instantiation levels 
provides suggestions unifying approaches shorthand notation inheritance 
supported appropriate notation believe notion strict profile outlined help form basis infrastructure version uml 
extending unified modeling language 
home net evans sammut mml metamodel architecture workshop transformations uml associated etaps genova italy atkinson supporting applying uml conceptual framework proc 
uml atkinson hne essence multi level metamodeling proc 
uml cook kleppe mitchell rumpe warmer wills defining uml family members proc 
tools ieee souza sane class extensibility uml packaging profiles stereotypes patterns proc 
uml gamma helm johnson vlissides design patterns elements reusable object oriented software 
addison wesley uml standardization odyssey 
communications acm omg unified modeling language specification version 
omg document ad omg white profile mechanism omg document ad 
