transactional locking ii dave dice ori shalev nir shavit sun microsystems laboratories network drive burlington ma dice sun com tel aviv university tel aviv israel post tau ac il 
transactional memory programming paradigm gaining momentum approach choice replacing locks concurrent programming 
introduces transactional locking ii tl algorithm software transactional memory stm algorithm combination commit time locking novel global version clock validation technique 
tl improves state art stms ways stms fits seamlessly systems memory life cycle including malloc free lock stms efficiently avoids periods unsafe execution novel version clock validation user code guaranteed operate consistent memory states sequence high performance benchmarks providing new properties delivered performance comparable cases better stm algorithms lock non blocking 
importantly various benchmarks tl delivers performance competitive best hand crafted fine grained concurrent structures 
specifically fold faster single lock 
believe characteristics tl viable candidate deployment transactional memory today long hardware transactional support available 
goal current multiprocessor software design introduce parallelism software applications allowing operations conflict accessing memory proceed concurrently 
key tool designing concurrent data structures locks 
coarse grained locking easy program unfortunately provides poor performance limited parallelism 
fine grained lock concurrent data structures perform exceptionally designing long recognized difficult task better left experts 
concurrent programming ubiquitous researchers agree alternative approaches simplify code design verification developed 
interested mechanical methods transforming sequential code coarse grained lock code concurrent code 
mechanical mean transformation done hand preprocessor compiler require program specific information programmer understanding data flow relationships 
wish focus techniques deployed deliver reasonable performance wide range systems today combine easily specialized hardware support available 
transactional programming transactional memory programming paradigm herlihy moss gaining momentum approach choice replacing locks concurrent programming 
combining sequences concurrent operations atomic transactions promise great reduction complexity programming verification making parts code appear sequential need program fine grained locks 
transactions hopefully remove programmer burden figuring interaction concurrent operations happen conflict 
non conflicting transactions run uninterrupted parallel aborted retried programmer having worry issues deadlock 
currently proposals hardware implementations transactional memory htm purely software ones software transactional memories stm hybrid schemes combine hardware software 
dominant trend transactional memory designs transactions provided programmer hardware software large scale unbounded dynamic 
unbounded means limit number locations accessed transaction 
dynamic opposed static means set locations accessed transaction known advance determined execution 
providing large scale transactions hardware tends introduce large degrees complexity design 
providing efficiently software difficult task numerous design parameters approaches literature 
requirements combine hardware transactions available 
lock software transactional memory stm design come long way stm algorithm shavit provided non blocking implementation static transactions see 
suggested modern operating systems deadlock prevention compelling reason making transactions non blocking reason provide transactions user level 
second claim noting mechanisms exist threads yield quanta threads solaris allows threads transiently defer preemption holding locks 
broad survey prior art 
proposed software lock implementation software transactional memory object approach :10.1.1.5.9270
idea run transaction possibly operating inconsistent memory state acquiring write locks locations written encountered writing new values place having pointers undo set shared threads 
locks eliminates need indirection shared transaction records non blocking stms requires closed memory system 
deadlocks livelocks dealt timeouts ability transactions request transactions abort 
saha uses version algorithm run time system 
scheme described saha acquires locks encountered keeps shared undo sets allow transactions actively abort 
workshop presentation authors shows lock stms tend outperform non blocking ones due simpler algorithms result lower overheads 
limitations remain limitations overcome stms commercially deployed closed memory systems memory non vice versa 
relatively easy garbage collected languages supported languages standard malloc free operations 
unfortunately non blocking stm designs require closed memory systems lock stms closed systems require specialized malloc free operations 
specialized managed runtime environments current efficient stms require special environments capable containing irregular effects order avoid unsafe behavior resulting operating inconsistent states 
tl algorithm stm overcomes limitations works open memory system essentially type malloc free runs user code consistent states eliminating need specialized managed runtime environments vulnerabilities stms explain vulnerabilities detail 
current efficient stm implementations require closed memory systems managed runtime environments capable containing irregular effects 
closed systems managed environments necessary efficient execution 
environments allow execution zombies transactions observed inconsistent read set abort 
reliance accumulated read set valid snapshot shared memory tl algorithm precursor tl works open memory system runs inconsistent states 
locations accessed cause unexpected behavior infinite loops illegal memory accesses run time misbehavior 
specialized runtime environment absorbs traps converting transaction retries 
handling infinite loops zombies usually done validating transactions progress 
validating read set transactional load guarantee safety significantly impact performance 
option perform periodic validations example number transactional loads looping user code 
attempts detect infinite loops having th transactional object open operation validate part accumulated read set 
unfortunately policy admits infinite loops possible transaction read inconsistent memory locations cause thread enter infinite loop containing subsequent transactional loads 
general infinite loop detection mechanisms require extending compiler translator insert validation checks potential loops 
second issue existing stm implementations need closed memory allocation system 
type safe garbage collected managed runtime environments java programming language collector assures accessed memory released remain object 
object may freed depart transactional space concurrently executing threads continue access 
object associated lock properly offer way problem allowing memory recycled standard malloc free style operations 
recycled locations read concurrent transaction written 
new results introduces transactional locking ii tl algorithm 
tl overcomes drawbacks state art lock algorithms including earlier tl algorithm 
new idea new tl algorithm counter intuitively global version clock incremented transaction writes memory read transactions 
show shared clock constructed shortest transactions effects contention minimal 
note technique time stamping transactions known database community 
global clock stm proposed 
global clock algorithm differs database tailored highly efficient required small stm transactions opposed large database ones 
differs snapshot isolation algorithm tl lock simple non blocking costly uses time stamps choose multiple concurrent copies transaction associated execution intervals 
tl memory locations augmented lock contains version number 
transactions start reading global version clock validating location read clock 
prove allows guarantee low cost consistent memory views read 
writing transactions need collect read set read ones 
read write sets collected transactions acquire locks locations written increment global version clock attempt commit validating read set 
committed transactions update memory locations new global version clock value release associated locks 
believe tl revolutionary overcomes safety performance issues plagued high performance lock stm implementations lock stms efficiently avoids vulnerabilities related reading inconsistent memory states mention fact lock stms compiler assist manual programmer intervention perform validity tests user code try avoid zombie behaviors possible 
need overcome safety vulnerabilities major factor going experimental algorithms actual production quality stms 
saha explain validation introduced limit effects safety issues significant impact stm performance 
stm tl allows transactional memory recycled non transactional memory back malloc free style operations 
done seamlessly added complexity 
show section concurrent red black trees derived mechanical fashion sequential code tl algorithm providing software engineering benefits tend perform prior algorithms exhibiting performance comparable hand crafted fine grained lock algorithms 
tl order magnitude faster sequential code concurrent single lock 
summary tl superior performance fact combines seamlessly hardware transactions system memory life cycle ideal candidate multi language deployment today long hardware transactional support commonly available 
transactional locking ii tl algorithm describe global version clock variant transactional locking algorithm dice shavit tl 
explain global versioning approach contrast prior local versioning approaches able eliminate key safety issues lock stm systems simplify process mechanical code transformation 
addition global versioning hopefully improve performance read transactions 
tl algorithm phase locking scheme employs lock acquisition mode tl algorithm differing encounter time algorithms saha 
implemented transactional system application data structure shared global version clock variable 
describe implementation counter incremented increment implemented compare swap cas operation 
alternative implementation exist offer improved performance 
global read incremented writing transaction read read transaction 
associate special versioned write lock memory location 
simplest form versioned write lock single word spinlock uses cas operation acquire lock store release 
needs single bit indicate lock taken rest lock word hold version number 
number advanced successful lock release 
tl algorithm saha tl new value written versioned write lock location property provide performance correctness benefits 
implement data structure allocate collection versioned write locks 
various schemes associating locks shared data object po lock assigned shared object stripe ps allocate separate large array locks memory striped partitioned hash function map location stripe 
mappings transactional shared variables locks possible 
po scheme requires manual compiler assisted automatic insertion lock fields ps unmodified data structures 
po implemented instance leveraging header words objects java programming language 
single ps stripe lock array may shared different tl data structures single address space 
instance application distinct tl red black trees tl hash tables single ps array tl locks 
default mapping chose array entries bit lock words mapping function masking variable address adding base address lock array derive lock address 
describe ps version tl algorithm details carry verbatim po 
maintain thread local read write sets linked lists 
read set entries contains address lock covers variable read algorithms need contain observed version number lock 
write set entries contain address variable value written variable address associated lock 
cases lock location address related need keep read set 
write set kept chronological order avoid write write hazards 
basic tl algorithm describe tl executes sequential code fragment placed tl transaction 
explain tl require traps insertion validation tests user code mode require type stable garbage collection working seamlessly memory life cycle languages 
write transactions sequence operations performed writing transaction performs writes shared memory 
assume transaction writing transaction 
read transaction denoted programmer determined compile time heuristically runtime 

sample global version clock load current value global version clock store thread local variable called read version number rv 
value detection changes data fields comparing version fields versioned write locks 

run speculative execution execute transaction code load store instructions mechanically augmented replaced speculative execution change shared memory state term speculative 
locally maintain read set addresses loaded write set address value pairs stored 
logging functionality implemented augmenting loads instructions record read address replacing stores code recording address value written 
transactional load checks bloom filter see load address appears write set 
transactional load returns value written address 
provides illusion processor consistency avoids read write hazards 
load instruction sampling associated lock inserted original load followed post validation code checking location versioned write lock free changed 
additionally sure lock version field rv lock bit clear 
greater rv suggests memory location modified current thread performed step transaction aborted 

lock write set acquire locks convenient order bounded spinning avoid indefinite deadlock 
case locks successfully acquired transaction fails 

increment global version clock successful completion lock acquisition locks write set perform increment fetch cas operation example global version clock recording returned value local write version number variable wv 

validate read set validate location read set version number associated versioned write lock rv 
verify memory locations locked threads 
case validation fails transaction aborted 
re validating read set guarantee memory locations modified steps executed 
special case rv wv necessary validate read set guaranteed concurrently executing transaction modified 

commit release locks location write set store location new value write set release locations lock setting version value write version wv clearing write lock bit done simple store 
things note 
write locks held brief time attempting commit transaction 
helps improve performance high contention 
bloom filter allows determine value write set need searched reading single filter word 
locks acquired ascending address order avoid deadlock sorting addresses write set worth effort 
low cost read transactions goals proposed methodology design efficient execution read transactions dominate usage patterns applications 
execute read transaction 
sample global version clock load current value global version clock store local variable called read version rv 

run speculative execution execute transaction code 
load instruction post validated checking location versioned write lock free making sure lock version field rv 
greater rv transaction aborted commits 
seen read implementation highly efficient construct validate read set 
detection read behavior done level specific transaction site method atomic block 
done compile time simply running methods read detecting transactional write abort set flag indicate method henceforth executed write mode 
low contention global version clock implementation various ways implement global version clock algorithm 
key difficulty global clock implementation may introduce increased contention costly cache coherent sharing 
approach reducing overhead splitting global variable includes version number thread id split thread need change version number different version number wrote 
case need write version number memory location 
lead reduction factor number version clock increments 

version number include thread id thread modified 

thread performing load cas increment global checks load see global version clock differs thread previous wv note fails cas retries load cas knows number changed 
differs thread perform cas writes version number loaded id locations modifies 
global version number changed thread cas new global version number greater id global version location 

read thread loads global version clock location version number rv rv having id different transaction changed global version cause transaction failure 
potential cut number cas operations global version clock linear factor 
introduce possibility false positive failures 
simple global version clock incremented read location saw say value fail things new scheme threads perform non modifying increments changing id part leaving value unchanged reader reads version clock regular scheme 
fail account writes regular scheme seen values 
mixed transactional non transactional memory management current implementation tl views memory clearly divided transactional non transactional heap space mixed mode transactional non transactional accesses 
long memory location accessed transactional load store operations accessible non transactional load store operations vice versa 
wish allow memory recycled space reusable 
type safe garbage collected managed runtime environments java programming language tl lock mapping policies ps po provide property gc assures memory released remain object 
languages provide programmer explicit memory management operations malloc free take care free objects accessible 
pitfalls finding solution languages explained detail 
simple solution stripe ps variation tl earlier tl scheme works malloc free similar style pair operations 
transactional space thread executing transaction reach object sequence included transaction read set 
validating transaction writing locations sure read set consistent guaranteeing object accessible reclaimed 
memory locations modified transaction validated associated locks released 
leaves short period objects transaction write set freed 
prevent objects freed period threads objects freeing 
mean letting activity transactional locations complete making sure locks object associated memory locations released owners 
object freed 
scheme works transaction may acquire lock reach disconnected location fail read set validation 
unfortunately efficient scheme po mode tl locks reside inside object header act acquiring lock guaranteed take place object alive 
seen performance section benchmarks machine tested penalty ps mode po 
stms encounter time lock acquisition undo logs significantly harder protect objects modified reclaimed memory locations modified time replacing old values new values written transaction 
protect illegal memory modifications repeatedly validate entire transaction updating location write set 
repeated validation inefficient simplest form complex possible attempts compiler eliminate unnecessary validations 
mechanical transformation sequential code discussed earlier algorithm describe added code mechanical fashion understanding code works program 
benchmarks performed transformation hand 
believe may feasible automate process allow compiler perform transformation simple limitations code structure transaction 
note hand crafted data structures advantage tl tl way knowing prior loads executed transaction longer bearing results produced transaction 
software hardware interoperability described tl software scheme inter operable htm systems 
machine supporting dynamic hardware transactions transactions need verify location read written associated versioned write lock free 
need hardware transaction store intermediate locked state lock word 
write need update version number associated lock completion 
suffices provide interoperability hardware software transactions 
software read detect concurrent modifications locations hardware writes version number associated lock changed 
hardware transaction fail concurrent software transaction holding lock write 
software transactions attempting write fail acquiring lock location lock acquisition done atomic hardware synchronization operation cas single location transaction fail version number location modified hardware transaction 
empirical performance evaluation set microbenchmarks standard community comparing sequential red black tree concurrent various algorithms representing state art non blocking lock stms 
lack space red black tree data structure performance graphs 
sequential red black tree concurrent transactional locking algorithm derived java util treemap implementation java programming language jdk 
implementation written doug lea josh bloch 
turn parts java treemap derived cormen 
preferred exact fraser harris red black tree code written specific transactional interface readily converted simple form 
sequential red black tree implementation exposes key value pair interface put delete get operations 
put operation installs key value pair 
key data structure put insert new element describing key value pair 
key data structure put simply update value associated existing key 
get operation queries value key returning indication key data structure 
delete removes key data structure returning indication key data structure 
benchmark harness calls put get delete operate underlying data structure 
harness allows proportion put get delete operations varied way command line arguments number threads trial duration initial number key value pairs installed data structure key range 
key range describes maximum possible size capacity data structure 
experiments processor sun fire tm cache coherent multiprocessor ghz ultrasparc iv processors running solaris tm 
claimed modern operating systems handle locking number threads larger number cpus 
benchmarks stms solaris mechanism allow threads request short term preemption deferral storing thread specific location read kernel level scheduler 
preemption deferral advisory kernel try avoid preempting thread requested deferral 
note unfortunately introduce preemption deferral hand crafted lock hanke code lock stm code described stm fraser 
affected relative performance threads range threads 
benchmarked algorithms included mutex solaris posix threads library mutex coarse grained locking mechanism 
stm fraser state art non blocking stm harris fraser 
name originally program authors 
special record object pointer transaction record 
transformation sequential transactional code mechanical programmer specifies objects opened closed improve performance 
stm lock encounter time object stm algorithm taken provided 
note includes original fraser harris lib package 
uses lock object non mechanical object interface 
access code saha algorithm believe algorithm representative class algorithms possible benefit structures written non mechanical object interface saha write set shared threads 
tl po version algorithm global version clock collects read write sets validates read set acquiring locks memory locations 
tl requires safe running environment 
bring object locking variation tl algorithm 
hanke hand crafted lock concurrent relaxed red black tree implementation hanke coded fraser 
idea relaxed balancing re balancing updating order speed update operations allow high degree concurrency 
tl new transactional locking algorithm 
notation tl po tl ps denote object stripe variations 
po variation consistently performed better ps ps compatible open memory systems 
red black tree benchmarks performed different key ranges set operation distributions 
key range generates small size tree range creates larger tree imposing larger transaction size set operations 
different operation distributions represent type workloads dominated reads puts deletes gets puts deletes gets dominated writes 
ops sec ops sec mutex tl po cmt tl po cmt tl ps cmt tl ps cmt stm stm fraser hanke mutex tl po cmt tl po cmt tl ps cmt tl ps cmt stm stm fraser hanke small red black tree threads large red black tree threads ops sec ops sec mutex tl po cmt tl po cmt tl ps cmt tl ps cmt stm stm fraser hanke mutex tl po cmt tl po cmt tl ps cmt tl ps cmt stm stm fraser hanke small red black tree threads large red black tree threads fig 
throughput red black tree puts deletes puts deletes graphs algorithms scale quite processors exception mutual exclusion 
algorithm performs badly contended write dominated benchmark apparently suffering frequent transaction collisions occur encounter time locking solutions 
threads hanke algorithms deteriorate introduce mechanism allow threads request short term preemption deferral 
interesting note fraser harris stm continues perform threads mechanism non blocking 
expected object algorithms po better stripe ps ones improved locality accessing locks data 
performance stm implementations usually differs constant factor associate overheads algorithmic mechanisms employed seen single thread performance 
hand crafted algorithm hanke provides highest throughput cases single thread performance measure overhead superior stm algorithms 
smaller data structures tl po tl ps performs better tl po respectively tl ps lower overheads part associated invalidation traffic caused updates version clock traffic caused cas operations shared location 
due fact location updated 
reversed tl superior data structure large read set larger readonly transactions incur overhead tl 
tl tl algorithms cases superior stm fraser harris stm 
benchmarks order magnitude faster single lock mutex implementation 
tl algorithm provides safe easy integrate stm implementation reasonable performance providing programming environment similar attained global locks fold improvement performance 
tl easily combine hardware transactional mechanisms available 
provides strong indication continue devise lock stms 
done improve tl performance 
lot improvements may require hardware support example implementing global version clock speeding collection read set 
full tl code publicly available shortly 

herlihy moss transactional memory architectural support lock free data structures 
proceedings twentieth annual international symposium computer architecture 

herlihy lai virtualizing transactional memory 
isca proceedings nd annual international symposium computer architecture washington dc usa ieee computer society 
leiserson lie unbounded transactional memory 
hpca proceedings th international symposium high performance computer architecture washington dc usa ieee computer society 
hammond wong chen davis hertzberg prabhu olukotun transactional memory coherence consistency 
isca proceedings st annual international symposium computer architecture washington dc usa ieee computer society 
software transactional memory obstruction free 
www cambridge intel research net pdf 
harris fraser concurrent programming locks 
www cl cam ac uk research srg papers submission pdf 
herlihy software package 
www cs brown edu mph readme doc 
herlihy moir scherer software transactional memory dynamic data structures 
proceedings nd annual acm symposium principles distributed computing 

marathe scherer iii scott adaptive software transactional memory 
proceedings th international symposium distributed computing poland 
moir integrating hardware software transactional memory 
technical report sun microsystems research 
saha adl tabatabai hudson minh hertzberg high performance software transactional memory system multi core runtime 
appear ppopp 

shavit software transactional memory 
distributed computing 
jagannathan hosking transactional monitors concurrent objects 
proceedings european conference object oriented programming 
volume lecture notes computer science springer verlag 
rinard efficient software transactions object oriented languages 
proceedings synchronization concurrency object oriented languages acm 
marathe scherer scott design tradeoffs modern software transactional memory systems 
lcr proceedings th workshop workshop languages compilers run time support scalable systems new york ny usa acm press 
hill transactional memory online 
www cs wisc edu trans memory 
harris fraser language support lightweight transactions 
sigplan 

dice shavit really transactions fast 
transact acm workshop 

afek attiya dolev gafni merritt shavit atomic snapshots shared memory 
acm 
concurrency control methods performance analysis 
acm comput 
surv 

felber fetzer lazy snapshot algorithm eager validation 
th international symposium distributed computing disc 

agesen detlefs ramakrishna white efficient meta lock implementing ubiquitous synchronization 
acm sigplan notices 
dice implementing fast java monitors relaxed locks 
java virtual machine research technology symposium usenix 
bloom space time trade offs hash coding allowable errors 
commun 
acm 
herlihy moir scherer iii software transactional memory dynamic sized data structures 
proceedings second annual symposium principles distributed computing acm press 
cormen leiserson charles rivest algorithms 
mit press cor th ex 

hanke performance concurrent red black tree algorithms 
lecture notes computer science 
