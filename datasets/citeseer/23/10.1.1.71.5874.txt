approach uml profile software development process modeling ralf wilhelm hasselbring und informatik und systeme department safety critical systems oldenburg germany email de university oldenburg software engineering group department computing science oldenburg germany email hasselbring informatik uni oldenburg de 
status current uml profile express software engineering process models 
discuss requirements profile introduce identified syntactical semantical implications 
concluding application scenario 
nowadays various development process models exist efficient development software 
range agile processes extreme programming xp set best practices customizable frameworks rational unified process rup detailed process descriptions model 
common process specifications expressed informally 
leads different interpretations obviously problem automatic process execution 
informal description development processes leads problem understood coordinated expressed software development process extent software development process specified exist lot formal software process modeling languages allow avoid ambiguities interpreting process specifications 
unfortunately achieved status standard notation software process modeling 
approaches define syntax semantics implies proprietary data formats 
furthermore limited express fixed set certain aspects process software model time research supported german department education research bmbf research project isa 
data concurrency possible extend easily new modeling constructs cover new research topics knowledge management different semantics finite automata petri net variants 
hand unified modeling language uml object modeling group omg achieved status industrial standard modeling object oriented systems resulted considerable tool support 
uml provides easy extension mechanisms stereotypes tagged values constraints called uml profiles 
unfortunately uml provide formal semantics 
different approaches published trying solve issue compare section 
common focus aspects uml diagram conglomerate 
reasons uml approach support software development process modeling execution 
remainder structured follows 
section briefly introduce informal basic definitions motivate approach 
section give brief overview accomplished 
section concludes elaborates research 
fundamentals discuss software dimension software development processes includes software related elements process artifacts tools 
aim automating software elements possible 
start discussion requirements sketching big picture 
discuss briefly implications definitions respect modeling static dynamic concerns inside uml profile 
requirements software development process modeling 
software development process consists disjunctive sets activities actors products tools apt 

ready ready describes example availability actor 
resource times ready meaning products available 

activity set inputs outputs refer subset defined 

referred input ready input enabled 

activity possibly executed input enabled 

step subset possibly executed activities executed concurrently 
especially concurrent execution equal activities possible regarding coding activity persons code time 

activity executed corresponding input disabled referred set ready 

activity completes output enabled 

output enabled referred ready 

apt set attributes store data states actor name product state 

apts may relations product related exactly 

tools able change states products defined set functions map set products certain states set products certain states 

actors persons interacting tools just tools 

actors interact tools way certain functions executed 

application functions referred activity execution consume resources 

resources time cost space tries initial syntactical mapping identified requirements uml diagrams obvious need able model static dynamic aspects process 
kind static aspects need express covered uml class diagrams design choice 
lot diagrams dealing behavioral aspects state charts activity charts message sequence charts 
assume static instances actors products tools described class diagrams activity charts offer adequate syntax meet required inputs outputs requirement 
regarding possible semantics main characteristic process dynamics sketched far resource driven 
means required resources available ready activity executed 
including uml specifications version omg proposes derive behavior activity machines state machines 
consistent requirements possible multiple active states state chart 
fortunately actual uml proposals omg changing behavioral activity machines petri net semantics match identified requirements 
petri net pn tuple ib finite ordered set 
places finite ordered set 
transitions forward matrix backward matrix ib edge function defined ifi ifx pi tj ibi ifx tj pi state space petri net mapping called state marking net 
exist exactly initial state 
call transition enabled ifp 
fires ib 
shows simple example petri net execution frame activity charts 
sub activity chart sub corresponding petri net 
note necessary activity reached fire twice standard petri net token game semantics 
petri nets widely accepted area business process simple activity chart simple petri net fig 

example illustrating semantical petri net execution frame activity charts models regarding execution called workflow specifications called workflow management systems 
workflows differ point view software process models reflects petri net token game semantics describe behavior workflows 
characteristic petri nets generally describe closed systems 
assumption appropriate process model simulated realistic assumption want accompany real software development processes possibly deal variations time regarding resources 
need support semantics allows specify called reactive systems 
furthermore main characteristic workflow management systems allow modify controlled artifacts 
exactly important feature automating software development processes 
exist lot approaches express software engineering process models uml uml profiles 
informal semantics outside scope aim allowing computer supported software process execution 
regarding formal semantics classify approaches regarding level uml coverage 
people defined semantics single uml diagrams state machines collaboration diagrams class diagrams cases activity diagrams just give formal foundations action language 
restriction single diagram problematic main advantage uml possibility different diagrams model building process describe system 
diagrams related formal semantics interfaces connect approaches order complete picture 
example interfaces approach concerns tool dimension software development process 
software development processes common tools required support activities 
due fact process models usually specify activities accomplished tools determine activities accomplished various levels automation 
similar relationships artifacts process models resp 
tools exist 
relevance mutual dependencies proportional related amount activities producing artifacts supported tools 
tools able serve bridges process models actual processes 
amount possible automation steadily increasing especially domain system development tools able support efficient development systems continuously increasing complexity 
relationship process models tools relevant directions 
hand process models impact tools hand tools impact process models 
main concern direction fact software development processes similar software aspects expressible software 
deal question software environment development process integrated process modeling language 
section going introduce design choices results far 
status developed mapping regarding syntactical constraints established development process model order see required elements process specification expressed 
expressed process model chosen uml subset 
extended models additional activities products concerning domain specific standards area safety critical systems arp area avionics introduced model development extensions life sequence charts able verify systems early process 
example mapping model widespread domain safety critical systems property detailed general 
furthermore process model mandatory software suppliers working german government organizations 
activities model context steps development process results execution described exactly 
activities may consist set sub activities long sub activities results defined interim results gd einf activity objects processed called products 
products developed described method independently detail specification serves contract customer contractor 
model comprises submodules project management pm configuration management cm quality assurance qa system development sd 
concentrate elaborated part sd 
insisting particular languages products model detail specifies product shall describe recommends specific methods languages notations flow charts gives general product templates particular situations 
product template example specifies requirement unique identification number 
furthermore method level method interfaces specified explain methods relate 
order illustrate mapping model specification elements uml profile elements sketch examples subsections 
activity related specification elements model main specification elements cover execution activities methods model model activity diagrams product flows 
model activity diagrams sketch grain granular picture relationships set activities products example see 
activities depicted rectangles products ellipses 
control data flows displayed arrows data flows product source 
pictures common specifications deeper levels data flows specified 
mentioned lower specification elements provide detailed picture development activities 
activity called product flow describes input output products 
describes products involved activity sd interface description 
sub product column referred activity described state column activity column entered 
activity influence state product state product exist fig 

example activity sd system design model spec 
marked table dash 
input products activity identified manner columns activity state filled columns activity state marked dash 
output products entries applicable 
columns activity state filled 
cases product entries modified corresponding activity 
output products activity states proc planned states model 
order able distinguish better visually input output products state substituted 
interpreted planned cases 
furthermore noted sub product activity product results column activity product passed column 
activities sub product illustrated table dash 
sub products product created different sub activities see activity qa definition assessment environment necessary assemble product integrating sub products 
realized activity generated sub product product created 
product flow represented referring main activities column activity 
products updated state fig 

example product flow sd interface description model spec 
state submitted 
example shown means user requirements system architecture come activities sd sd represent input products 
products state accepted 
product interface description newly created 
product leaves activity having state proc input product activities sd sd sd sw cm 
shows aggregated activity diagram relevant part 
fig 

sd uml activity diagram activity diagrams resources products actors tools objects 
furthermore diagram objects state corresponds product flow model 
activity level specified model methods 
lot information describe example method limits recommendations method application sketch interfaces methods 
assignment methods activities done allocation set methods activity 
shows assignment methods class object modeling com subsystem modeling ssm formal specification fs design verification fig 

se method assignment analysis covered channels acc state machine modeling interaction modeling iam activity sd interface description 
assumed methods just activities specified activity flow exceed limits process model description example model specifies methods 
useful descriptions especially parts inherently dynamic process runs 
depicts possible flow methods 
fig 

se methods uml activity diagram input products super activity se instantiated objects system architecture sa ur user requirements product flow table activity 
products split required sub products modified method application system architecture cases sa uc system architecture class object model sa com state system architecture state modeling sa state 
methods class object modeling state modeling executed sequentially infinitely till produced objects sa com state sa state 
changed states denote diagram object change 
changed exactly specified 
shows corresponding underlying petri net semantics 
able activity diagrams software fig 

se methods underlying petri net semantics process modeling 
show static aspects data expressed 
assumed objects created specify 
defined requirements assume tools exist able create modify und possibly destruct products 
product related specification elements model product related specification elements model 
includes example general product information name identification document version person charge product information example user requirements activity related product information user requirements describe actual status existing old system partly incorporated new activity sd recording actual status analysis 
relationships methods specified example interface design verification formal specification requires formally specified detailed specification verified formally specified starting specification 
specifications written specification language mapped specifications uml class models 
syntactical boundaries able express product relationships multiplicities denote product relationship products example state chart exactly class diagram 
product instances describe inheritable product attributes example products inherits general product requirements 
product hierarchies describe product affiliations example product system architecture consists class diagrams state charts design verification proof 
depicts method results activity se 
interface description product sub products class object model state model 
class names show talk classes product templates model context 
furthermore sub products class interface description inherits attributes type unique id uid string informs purpose interface 
relation ensures class exactly state chart 
fig 

se method products comprising able express specification elements syntactically clear separable product flows method assignments method interfaces inside uml profile consists syntactically mainly activity machines class diagrams 
express large text elements pure natural language directly possible interpretation range impractically wide 
case referred diagrams unique specification id assume possible express elements inside chosen uml set 
introduced models user conference model called october 
application scenario process model monitoring unfortunately diagrams provide grain granular picture development activities done complete 
regarding main activities flow incomplete unclear product flow control flow 
regarding activity level dynamic aspect method level example unclear products locked obvious qs states express relevant product changes 
regarding method level model authors specified just set methods executed 
discussions user forum meetings industrial partners turned exactly major problems model applied 
process models lot experience needed ensure process executed right way due project project changing context factors process targets time budget quality resources people software evolving methods techniques 
believe possible sharpen pictures process appropriate tool support 
shows big picture regarding process model monitoring 
process model monitoring means tracking certain set process information comparing actual process model find development works 
exist approaches area problem tracking manual suffers drawbacks incompleteness certain detail level tracked 
cost time extra personal needed track development activities results 
disturbance normal development activities 
faults mapping chosen pml 
inconsistencies development tracks especially different trackers involved 
snapshot character captures tracking done twice life cycle product 
reasons try develop techniques able sketch development activities automatically tool perspective 
step direction depicted 
arrows denote information flows 
mentioned uml diagrams model complete 
diagrams provide base structure development 
reason information inform process mediator possible process steps executed 
process uses mediator inform artifacts developed 
modified created artifacts analyzed static analysis javacc parser see changes artifacts example number methods java program 
furthermore mapped grammar files uml class diagrams describe modell templates software artefact analysis development tools multiple process instances products activities mediator static fig 

process monitoring artefact storage cvs db static structure artifacts process model context 
able draw detailed versions model templates modified created artifacts 
provide post mortem analysis executed process store artifacts cvs db server 
process runs captured influence templates 
formal kernel semantics step formalize chosen uml subset defined called kernel semantics deal element syntax provides necessary semantics low level 
done developed semantics easier handle necessary add additional constructs integrate necessary interfaces semantics needed 
bases semantics activity diagram semantics introduced thesis erik kernel language state machine semantics developed damm 
activity machine semantics chosen developed called reactive petri nets able deal events 
semantics include aspects activity machines offer action language object flows triggered operation calls 
state machine semantics chosen base kernel semantics deal aspect state machines order complete big picture 
section give short overview developed semantics order sketch ones differences activity machine state machine semantics deal 
krtuml model sig consists void ib set basic types comprising booleans natural numbers 
set typed predefined primitive functions 
sig finite set signals 
instance signal called signal event event brevity 
sig sig generalization relation signals transitive closure irreflexive ev ev denotes ev generalization ev 
denote reflexive transitive closure 
finite non empty set classes 
class consists isactive attr ops sm act isactive predicate 
class called active iff isactive true 
attr finite set typed attributes may type void 
ops finite set typed triggered operations 
sm state machine terms actions expressions 
act activity machine terms actions expressions 
class root object serving specify system initialization 
subset active classes called actors denote external objects part environment 
definition element class action expression guard typed consisting defined basic types 
activity machine class tc tuple act qx tr finite set activities 
initial activity 
qx set termination activities qx 
tr guard action transition relation tr tr qx class called reactive transition tr form ev expr op expr ev sig op ops 
manage objects called object configurations assume exist object 
object configurations store status dormant idle executing suspended dying dead attribute configuration values attributes configuration state machine active state activity machine similar marking petri net event queue object 
system configuration set object configurations 
called pending request tables store triggered operation calls 
triggered operation call consists destination call status operation unused pending busy completed result operation parameters operation 
main differences objects state machine objects activity machine ones grouped inside component objects active certain point time 
rest objects executed example dormant dead suspended due pending operation calls objects 
contrast activity machine objects active resource driven token switching 
example impact destination attribute pending request table 
destination call state machine object destination field contains object component 
destination field contains transition object activity machine 
semantics krtuml defined terms symbolic transition system proposed name synchronous transition system 
system variables mapping values domains called snapshots 
symbolic transition system sts consists finite set typed system variables order predicate variables characterizing initial states transition predicate order predicate referring primed unprimed versions system variables current states 
sts induces transition system set interpretations variables follows 
st set types variables semantic domain snapshot type consistent interpretation assigning variable value domain 
denotes set snapshots snapshot inductively defines value expr order predicates expr value expr order predicates expr provides interpretation unprimed interpretation primed variables expr 
snapshot called initial iff true 
snapshots snapshot called successor iff true 
computation run infinite sequence snapshots 
satisfying requirements initiation initial 

set computations denoted runs 
elaborated semantics way snapshots evolve defining possible cases transition predicate 
defined predicate characterizing initial snapshots collect pieces transition relation full predicative definition transition relation leading definition symbolic transition system associated krtuml model 
example interface state activity machines process monitoring objects needed express various process related information kinds artifacts persons software 
objects created live destroyed 
general system wide scope possible put local scopes activity 
furthermore additional attributes methods example support product locks write access 
events needed possible distinguish product state example imagine refactoring activities model timers timing events 
contrast objects events live exactly step send fixpoint semantics related certain element object transition 
central discussion software process modeling objects way treated inside activity diagrams 
depicted approach sketch artifacts activity consumes produces 
picture complete tracking purposes long don want monitor software development processes 
want monitor software development process able react certain set objects developed execution activity integrate objects picture 
set objects specified initially process executed don know objects certain point time 
additionally required tools able modify object set 
tools don behave base petri net execution semantics 
react state chart semantics 
need discuss possible combination activity charts state charts relation diagrams able exchange 
mentioned need objects permanent things events temporally restricted ones single step 
regarding object modeling design choices 
exist object places objects 
lock unlocked 
am scope activities 

object places connected activities produce consume objects 

exist additional places object object token sources drains 

time creation object oi executed token put object token source 

time destruction object oi executed token removed object token place designated token removal 

tokens inside scope activity tokens moved designated places activities 
shows simple petri net invoking tool bases activity diagram activity tool invoked expressed activity diagram object stereotype tool 
fig 

simple petri net semantics including tool difference compared object state space subset cartesian product defined design choices 
furthermore depicts token sources drains connection activity state machines illustrated transition source place destination place 
possible determine object changes object states events inform activity machine ongoing process 
regarding events design choices 
exist event places events received 

event starts live step send fix point semantics 

event lives exactly step 
shows petri net distributing event 
informing event source event occurred token source puts token event distribution place ed 
event consumers ec 
ec fire 
fig 

event distribution distributing event necessary remove unused event tokens step distribution place 
done transition example 
notice assumptions regarding firing transitions compared place transition petri nets 
maximality constraint says step set fired transitions include enabled ones possible 
second steps choosing set enabled transitions fire 
includes transitions ones sink destinations 
second includes transitions 
third event consuming transitions allowed fire step 
model diagrams mainly reasons 
uml tool know allows express activity machines elaborated way example rational rose support object flows 
second reason offers wide range possible xmi variants order exchange models 
unfortunately exports version compliant omg meta models possible develop mapping 
changes able parse models development mof repository 
order summarize results far developed syntactical mapping process model snapshot uml language kernel semantics execution activity machines relation state machines architecture including prototype implementation framework track execution software development processes 
research status defining approach uml profile software development process modeling 
started motivation profile defined general requirements 
briefly discussed previous uml formalization match explained approach shortly 
research activities focus definition precompilation phase implementation software process monitoring framework 
precompilation phase describes unfolding diagram elements specified kernel model language 
language extended direction able express software development process templates 
template deal example question universal existential elements 
time plan extend prototype implementation stable easy software system order get real world process descriptions 
extending capabilities kernel language respect specification process templates deal question framework requirement 
going integrate mediator component directly development tools directly informed objects created modified destroyed 

object management group 
www omg org 
visited may 

alvarez clark evans sammut 
action semantics uml 
proc 
uml 
www cs york ac uk pdf 

workflow management systems 
albany edu publications reports pdf 
visited may 

der des software der www de alle ea pdf 
visited may 

beck 
extreme programming explained embrace change 
addison wesley professional boston 

rger 
asm semantics uml activity diagrams 
rus editor proc 
amast volume lncs pages 
springer verlag 

rger 
modeling dynamics uml state machines 
gurevich ph kutter odersky thiele editors state machines theory applications international workshop asm proceedings volume lncs pages 
springer verlag 
dblp dblp uni trier de 

ralf wilhelm hasselbring 
advantage symbiotic relationship tools processes support executable process models 
ban ani mun editors proceedings international conference software engineering research practice volume pages las vegas nevada usa june 
csrea press 

damm harel 
breathing life message sequence charts 
ifip tc wg 
third international conference formal methods open object distributed systems 

damm pnueli 
understanding uml formal semantics concurrency communication real time uml 
frank de boer susanne graf willem de roever editors formal methods components objects international symposium leiden netherlands november revised lectures number lncs 
springer verlag 

werner damm moshe cohen 
advanced validation techniques meet complexity embedded software development 
embedded systems journal 

engels heckel sauer 
dynamic meta modeling graphical approach operational semantics behavioral diagrams uml 
proceed 
international conference uml october 

evans france lano rumpe 
uml formal modeling notation 
modeling language international workshop june 
springer verlag 

hightower 
java tools extreme programming mastering open source tools including ant junit cactus 
jon wiley sons indianapolis 

dirk hong 
eliciting formal models software engineering processes 
proceedings conference centre advanced studies collaborative research page 
ibm press 

hussmann 
loose semantics uml ocl 
proceedings th world conference integrated design process technology 
society design process science june 

www modell de 
das modell systeme des 
visited 

keane sa 
software process concurrent framework 
ieee international conference systems man cybernetics beijing china 
ieee computer society press january 
isbn 

maria letizia gian pietro picco patricia 
eliciting software process models language 
acm trans 
softw 
eng 
methodol 

javacc 
www dev java net 
visited 


rational unified process 
addison wesley professional boston 

kwon 
rewrite rules operational semantics model checking uml 
proceed 
international conference uml university york october 

manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag new york 

mof meta object facility complete specification 
www omg org cgi bin doc formal 
visited 

object management group 
uml action semantics final adopted specification ptc january 
available www kc com site home html 

object management group 
unified modeling language superstructure final adopted specification ptc august 
available www omg org cgi bin doc ptc 

und informatik und systeme www de 
visited may 


formal approach cases relationships 
uml 

rational rose software 
www ibm com software rational 
visited may 

building expressive flexible process models uml approach 
software process technology th european workshop pages 

rik 
semantics verification uml activity diagrams workflow modelling 
phd thesis 

rational unified process whitepapers process workbench 
www rational com products rup index jsp visited 

society automotive engineers sae 
www sae org 
visited 

software process engineering metamodel complete specification 
www omg org cgi bin doc formal 
visited 

st 
describing process patterns uml position 
software process technology th european workshop pages 

control center 
www borland com 
visited may 

uml unified modeling language complete specification 
www omg org cgi bin doc formal 
visited may 




das modell der praxis grundlagen 
verlag heidelberg 

xmi xml metadata interchange specification complete specification 
www omg org cgi bin doc formal 
visited may 

