cavit consistency maintenance framework transformation contracts pieter van gorp dirk janssens formal techniques software engineering universiteit antwerpen pieter dirk janssens ua ac 
model driven engineering software engineering methodology aims manage complexity frameworks relying models transformations 
unfortunately poorly understood new methodology differs traditional methodologies 
formalizes contract model transformation extends existing design contract theory 
key extension transformation contracts maintained automatically mapping consistency invariants postconditions transformation rules 
invariant violated corresponding transformation rule called provided precondition satisfied 
presents contract aware visual transformation cavit framework implementation declarative middleware contract model transformation 
illustrate cavit integrate uml visual model transformations ocl transformation contracts 
integrating packages applications written variety languages major challenge software engineering community 
luckily programming languages associated libraries gone long way 
modern integration platforms ee example connect mainstream erp packages sap legacy applications written cobol reasoning engine written prolog 
unfortunately flexibility comes cost high complexity 
managing entities processes scattered applications problematic lack documentation applications relate requirements 
documentation place unfeasible update sources documentation affected particular business change advanced tool support 
formalizes mechanics model driven engineering tools defining languages program tools relate object oriented design contract controlled graph rewriting describing architecture 
section introduces reader design contract model driven engineering section presents domain specific models sample application section explains models kept consistent new contract aware visual model transformation approach section describes architecture tool validates approach 
section relates contribution related section concludes 

supporting technologies supporting technologies section describes methodologies succesfully applied tackle complexity large scale software development design contract dbc model driven engineering mde 
context mde describe contract model transformation new application design contract foundations maintaining consistency related models 
sections covers model driven architecture mda visual model transformation 
design contract dbc software correctness methodology procedural object oriented software 
relies logical assertions detect implementation mistakes run time prove absence thereof compile time 
fundamentals dbc developed floyd hoare late sixties 
formalizing effect programming language constructs state variables axioms inference rules hoare illustrated feasibility proving program correctness 
proposed proof systems state assertions logical expressions values program variables 
state assertions state program ensure state assertion called postcondition provided state assertion called precondition holds right executed 
correctness proof consists deductive sequence state assertions axioms inference rules precondition postcondition 
early seventies hoare wirth published proof system programming language pascal 
condition generators backward substitution built automatically derive proof obligations 
finding rules form shortest path precondition postcondition remains creative activity theorem help discharging proof obligations library required axioms inference rules 
today rely strength proof assistants inference rules object oriented languages 
dbc way incomplete verification methods 
context precondition postcondition checked test execution time 
purpose meyer included support expressing assertions eiffel programming language kramer built icontract extracting assertions java comments 
advantage testing approach applicable complete coverage unfeasible 
hand deviations contracts implementation may find way production environment due incomplete set test cases 
model driven engineering mde methodology proposes tackle complexity software development treating models transformations class software artifacts 
terminology collecting mainstream definitions core mde concepts section mde terminology adopted 

supporting technologies definition 
model simplified representation part world named system 
studies human computer distinguish conceptual mental models 
refer representations teacher designer explain system user maintainer 
mental model hand system representation user maintainer applies mind working system 
mde proposes map models conceptual sense source code means transformations 
mde relevant methodology cases source code far mental models designers maintainers software 
allows stakeholders communicate models match minds closely 
kleppe define transformation automatic generation target model source model transformation definition 
generalize definition order support transformations carried manually definition 
transformation construction set target models set source models 
transformation automatic applied mechanically transformation definition 
model transformation heart soul mde restricted particular modeling languages compilers execution platforms 
enforcing language cognitive modeling uml embraces variety languages libraries need reconciled heterogenous software architectures 
fundamental difference rapid application development rad transformation definitions created optimized software architects 
model transformation intended manipulate set models call metaprogram 
structure input output modeling languages represented called metamodels transformation definition consists set models data transformation rules behavior 
favre observations metamodels define definition 
metamodel structural model language 
consists type system classes attributes associations cardinalities syntax elements formedness rules capture syntactic validity constraints covered 
type system modeling done uml class diagrams entity relationship diagrams fundamentally tends rely graph models attributed nodes edges 
graph transformation community type system modeling language encoded type graph 
type graphs enforce example name class unique package 
wellformedness rules need enforced additional graph constraints represented visually 
context object oriented metamodeling correspond invariants metaclasses 
kleppe define transformation definition set transformation rules describe model target language constructed model 
supporting technologies source language 
generalize definition considering transformation definitions manage non zero number models 
restrict model output exclusively definition 
transformation definition contains set models conforming metamodels set transformation rules describe models constructed 
defining model transformations general purpose programming language java lies quite far conceptual task model graph transformation 
reflective mde defines model transformations means models 
transformation models complexities evolution model management frameworks metadata repository mdr eclipse modeling framework emf 
section illustrate transformation models expressed visual modeling language uml graph transformation appear match people mental models domain 
definition 
transformation rule description constructs model constructed constructs model 
definition kleppe 
note authors promote represent transformation rules objects 
enables store source target relationships transformation object state rule created target source 
propose represent transformation definitions objects 
design choice motivated intention represent models transformations ordinary object oriented data structures 
mde applications need reason explicitly source target relationships called traceability links models model elements created 
definition allows describe information stored definition 
traceability model consists relations models model elements generated model transformations 
contract model transformation contract model transformation new application design contract foundations targeted maintaining consistency related models 
definition 
transformation contract pair constraints called pre postcondition describe effect transformation rule set models contained transformation definition 
postcondition describes model consistency states rule establish provided precondition satisfied 
postcondition transformation rule corresponds invariant transformation definition contained 
notion transformation contracts formalize notion incremental consistency maintenance 
supporting technologies definition 
transformation contract rule maintained automatically calling rule soon invariant corresponding postcondition violated provided precondition satisfied 
note model inconsistency states preconditions rule satisfied transformation engines allowed call rules arbitrary order 
model inconsistency states resolved automatically 
states satisfy precondition transformation rule postcondition describes consistent model state 
simple contracts automatically generate satisfying transformation rules 
hand complex cases require manual development transformation rules 
example context case study considered constraints asserted particular match source model element target model shares particular properties elements source model 
simple violation scenario rule precondition case developed initial version source model target model generated 
transformation engine automatically instantiate target model populate model element satisfies constraint 
contract aware transformation engines support creation traceability links model elements created 
links accessible model transformation language integrates constraint checking language 
enables manual development model transformations violations occurring models previously generated 
generating transformation rules evolution conflicts stateof art today transformation engines unfeasible lot ways reconcile existing models automatically expert knowledge required decide manual external changes models preserved 
noted kleppe proposed include traceability models inside transformation rules describe traceability information model reconciliation 
visual model transformation writing transformations manually facilitated specialized transformation languages yatl hide algorithmic details navigating manipulating object graphs representing models 
yatl textual transformation language succesfully applied number mde case studies 
relatively young compared languages developed domain graph rewriting 
domain general consensus representing transformations visually understandable humans 
visual model transformation applies foundations graph rewriting model driven engineering interpreting models graphs metamodels type graphs 
fundamental research topics raised new application domain transformation contracts see definition traceability models see definition 
model driven architecture model driven architecture mda omg initiative develop set standards integrating mde tools 
order enable 
supporting technologies stakeholders exchange models language matches mental modeling language acceptable degree uml extended range new syntax constructs 
mda standard mde concern modeling language 
defines language called mof responsible defining modeling languages 
extension uml class diagrams see fig 
ocl see fig 

model structure metamodel encode formedness rules 
uml tools data warehousing tools provide mof interface repository message java jmi standard document xml xmi standard 
model transformations implemented languages omg recognized need dedicated mof transformation language 
ocl transformation contracts fully comply omg request declarative transformation language 
mof framework allow integrate model transformations written manually imperative transformation languages yatl enable transformation writers compensate limitations today ocl transformation engines 
top context behavior state modelelement statemachine source outgoing target incoming guard expression guard transition fig 

mof diagram displaying excerpt statemachine part uml 
statemachine model element represents behavior context model element 
statemachine contains exactly top state connected states transitions incoming outgoing contain guard 
context self outgoing size 
models meeting scheduler fig 

ocl formedness rule uml metamodel stating final state outgoing transitions 
models meeting scheduler give realistic idea models need kept consistent section presents domain specific models sample application 
application meeting scheduler problem statement proposed van lamsweerde benchmark requirements elicitation software specification techniques 
problem statement benchmark published deliberately imprecise incomplete 
part problem statement reads follows meetings typically arranged way 
meeting initiator asks potential meeting attendees information personal agenda set dates attend meeting referred exclusion set set dates prefer meeting take place referred preference set 
meeting date defined pair calendar date time period 
exclusion preference sets contained time interval prescribed meeting initiator referred date range 
initiator asks active participants provide special equipment requirements meeting location overhead projector workstation network connection telephones 
may ask important participants state preferences meeting location 
sections illustrative conceptual robustness physical data models 
fragments merely illustrate realistic dependencies models different languages regarded complete stable specification meeting scheduler 
conceptual models fig 
displays part conceptual model stating application distinguishes personal professional meetings 
types meetings planned different rules 
define taxonomy meeting schedules concept view inheritance 
concrete type schedule professional schedule personal schedule determined dynamically value type attribute called discriminator schedule class 
view inheritance allows conceptual modelers define taxonomies multiple dimensions 
models meeting scheduler having define artificial classes apply multiple inheritance possible combinations subclasses different taxonomies restricting number inheritance lattices strategy pattern encoding dimensions 
schedule type schedule type int int plan professional schedule plan view discriminator type value professional view value personal discriminator type personal schedule plan enumeration schedule type personal professional time interval day conventional hours time fig 

data structure representing planning dimension view 
fig 
diagram modeling schedules set meeting attendees related particular user type person 
persons meeting locations address 
attendees especially give presentation required equipment bag indicate equipment meeting location 
planning algorithm association meeting location equipment copy check locations provide required equipment 
schedule equipment catalogue attendee person user equipment type participation bag required equipment planning algorithm minimize traveling distance preferred location available address meeting location provided equipment equipment copy place fig 

data structure representing location preferences meeting attendees 

models meeting scheduler fig 
displays attendee specify time intervals attend time intervals prefer attend flexibility priority 
allowing association classes flexibility allows conceptual modeler represent relationship date preferences directly major participants attendee time interval putting focus auxiliary flexibility class 
attributes class schedule serve deadline mechanisms algorithm proposing optimal meeting location date 
schedule type schedule type int int exclusion attendee time interval moment preference participation flexibility level int user person fig 

data structure representing date preferences meeting attendees 
robustness models second example domain specific models demonstrative robustness diagram meeting scheduler 
notation applied fig 
extension uml proposed rosenberg scott promotes clear separation user interface controllers services persistent data entities 
entity robustness model corresponds class conceptual model 
diagram fig 
describes flow events confirm meeting case logging meeting initiator click confirm meeting button main screen application 
triggers call service managing status meeting 
status service component updates meeting status schedule entity arranges reservation required meeting location 
meeting attendees notified mail 
physical data models fig 
shows physical data model corresponding conceptual model fig 

model conforms profile physical data modeling 
metamodels model transformations initiator attendee login form main screen confirm meeting mail account service status service entity person entity schedule entity meeting location fig 

robustness diagram confirm meeting case 
actors shown left followed interfaces services middle entities right 
ambler 
mapping classes associations association classes tables associative tables keys foreign keys corresponds mapping entity sets relations attributes relational schemas covered introductory database course books 
class logical data model mapped table 
attributes included columns extra columns realizing associations classes 
physical data model contains explicit nodes keys foreign keys relations defined precisely 
associative table attendee timeinterval maps association class flexibility 
table maps outgoing associations 
mapping problem illustrate consistency relation conceptual models physical data models demanding class maps table vice versa 
gogolla described flattened structure constructed model association classes rules need plugged framework constraints checked permanently 
example database administrator migrates data timeinterval table range table constraint fail table dropped 
violation resolved modifying constraint updating traceability model 
metamodels model transformations meta information domain specific models previous section defined meta level see application models meeting scheduler 
language profile technique decorating model elements special flags called stereotypes properties called tagged values 
method contract model transformation implementation cavit table person email char name char key person key columns email foreign key attendee fk columns user table attendee id int user char key attendee key columns id constr auto generated 
metamodels model transformations foreign key attendee timeinterval fk columns idref associative table attendee timeinterval flexibility level int idref int moment moment foreign key attendee timeinterval fk columns key attendee timeinterval key columns flexibility level idref fig 

physical data model date preferences information 
table timeinterval moment moment key timeinterval key columns restricted language profile technique 
reader supposed master details technique 
overview section may useful understanding running example completely 
section shows uml profiles example 
section presents definition illustrative model transformation 
language profiles definition 
stereotype model element models represents simplified manner subtype existing metaclass called base class base class part metamodel type system fixed 
fixing type system language metamodel needed models expressed language need exchanged standard api data structure 
domain specific models represented naturally uml editors benefit portability models uml tools cost complexity introduced metamodeling language profiling technique 
type system modeling language fixed extra meta information needs expressed language 
context object oriented metamodeling stereotype model element instance metaclass name attribute instantiated example associated metaclass part metamodel conceptually metaclass subclasses impossible create instances repositories types state model element instance type conforms adding set bs associated example stereotypes fig 
table foreign key key associative table 
object oriented metamodeling environment model elements corresponding instances uml metaclass stereotype corresponding 
stereotypes defined uml metaclass classifier corresponding metamodel uml corresponding 
table foreign key key associative table conceptually subclass classifier technically associated classifier base class attribute uml metaclass stereotype 
fig 
elaborates design profiles uml metamodel 
definition stereotypes 
metamodels model transformations physical data modeling profile visualized fig 

fig 
table applied model element person corresponding 
definition 
tagged value model element models attribute stereotype 
example tagged values fig 
columns constr defined fig 

stereotypes tagged values distributed packages called profiles included libraries applications 
stereotypes tagged values model elements right formalized metamodel modeling language 
modeled sample meeting scheduler uml fig 
displays part mof metamodel uml responsible defining applying profiles 
model element zero stereotypes associated 
right side diagram shows stereotype number contained tag definitions 
enables composition left side diagram populated model element tagged values associated 
tagged value string instantiated conforms exactly tag definition association populated 
tag associate model element multiple values columns tag timeinterval key fig 
depending multiplicity property tag definition 
language profile technique implemented java tagged values called annotations 
modelelement name name string stereotype type stereotype icon geometry name owner name multiplicity multiplicity fig 

mof diagram uml metamodel support profiles 
working uml profiles formedness rules expressed ocl context stereotype modeling level omg metalevel architecture 
contrast mof approach metamodeling ocl metamodel defined context metaclasses types omg metalevel architecture 
practically difference means profile validated generic mof transformation tools 
consequently profile conformance ensured additional constraint checker uml 
today ocl validators support ocl checks uml models ocl checks mof models 
metamodel definitions 
metamodels model transformations models section conform uml metamodel apply profiles obtain domain specific semantics 
figures uml specification 
refer reader consult learning models packages classes attributes uml concepts represented mof 
section briefly definition domain specific uml profile applied meeting scheduler 
fig 
shows part content package defining physical data modeling profile 
physical data model stereotype indicate uml model describes relational database implementation application 
table associative table foreign key key stereotypes applied fig 

note tags defined context stereotype 
type columns tag foreign key key stereotypes nonempty list attribute 
metaclass uml metamodel 
type origin tag stereotype key key origin enumeration type contained profile definition package 
imagine arbitrary number formedness rules language profile 
possible rule state classifier marked foreign key stereotype outgoing dependency link classifier marked key stereotype 
stereotype foreign key classifier tags delete policy integrity policy update policy integrity policy columns metaclass attribute stereotype physical data model model stereotype table classifier stereotype key classifier tags origin key origin constr key construction kind key kind columns metaclass attribute stereotype view classifier tags type view kind stereotype associative table classifier fig 

part uml profile physical data modeling 
transformation definition enumeration integrity policy cascade reject set null enumeration key construction auto generated constructed manually giving overview transformations required maintain consistency conceptual physical robustness models section provides depth description transformation definition 
example covers transformation classes conceptual model entities robustness model 
rationale conceptual model put behavior operations closely data attributes possible robustness model add entities number service facades flow control application screens called interfaces actors 
note similarly 
metamodels model transformations build reverse transformations support methodology entities created manually discovery case refinement robustness modeling copied classes conceptual model 
focus lies presenting powerful understandable framework automating repetitive model management tasks introducing new software engineering process 
transformation rule implemented method contained class cm rm 
fig 
shows cm es attributes denotes uml model containing applications conforming profiles section denotes uml model containing definitions profiles section denotes name application package contains models need transformed 
running example meeting scheduler value attribute 
rule parameters amodel corresponds cm es attribute pmodel corresponds aname corresponds 
mapping specified part transformation contract section 
traces trace node node role string superclass types metamodel transformed models content modelelement transitive classifier model string 
cm es amodel model pmodel model aname string boolean 
fig 

structural model conceptual model robustness model transformation related traceability data 
method maintains transformation contract specified section implemented visual model transformation language explained section 
transformation contract consistency relation conceptual models robustness models ensured combination transformation contracts 
note case multiple contracts postcondition preconditions mutually exclusive ensure rule called particular model inconsistency scenario 
precondition contract describes situation robustness model generated 
postcondition states classes conceptual model correspond entities associated robustness model 
precondition precondition formalized follows 
metamodels model transformations context cm es pim psm amodel model pmodel model aname string boolean pre package amodel size traces select trace trace refers conceptual model application package node content includes conceptual model trace refers robustness model application package node content includes robustness model isempty precondition helper operation looks package representing application name uml model context cm es operations container model string set package container select app namespace app name package hand calls helper computes transitive closure association context cm es operations set namespace set namespace asset union asset endif precondition calls helper easily defined uml metaclass modelelement 
operation expected return stereotype name applied model element 
invariant sample invariant expresses package representing particular application contained conceptual model trace contained robustness model 
classes contained conceptual model trace class contained robustness model 
classes entity stereotype applied 
context cm es inv package traces includes node includes select conceptual model node includes select robustness model conceptual model forall cc class robustness model exists rc class traces includes node includes content cc node includes content rc cc name rc name rc entity 
metamodels model transformations postcondition soon cm rm transformation definition loaded contract transformation middleware cavit invariants need ensured 
fig 
shows postcondition mapped sample invariant 
model model string transformation definition cm es amodel model pmodel model aname string boolean postcondition amodel pmodel aname invariant fig 

declarative configuration cavit framework managing cm es transformation definition 
visual model transformations section applies uml profile story driven modeling sdm implement transformation rule conforming contract previous section 
story diagrams minimal extension plain uml object orientation implement method bodies visual specifications controlled graph rewriting 
language formalized implemented fujaba model open source case tool 
transformation models section input mof compliant re implementation part fujaba code generator story diagrams 
fig 
displays transformation flow describing general behavior transformation rule 
transformation looks stereotypes conceptual modeling robustness modeling profiles 
stereotype error occurs state transformation ends reporting failure returning false name final state 
indicated transitions failure stereotype 
exceptions occur transformation goes states ends reporting 
behavior transformation state specified lookup stereotypes primitive shown fig 

pattern starts samples node represents uml model passed argument transformation 
pattern navigates contained profiles package binds stereotypes conceptual modeling profile entity service modeling robustness modeling profile 

metamodels model transformations model management lookup stereotypes profiles success copy deep copy classes success change name es model success loop mark es class entity failure failure failure failure success user feedback report failure report success fig 

flow sample transformation process 
cm profile constraint name equals conceptual modeling stereotype constraint name equals conceptual model bound pmodel model ownedelement constraint name equals profiles ownedelement ownedelement rm profile constraint name equals entity service modeling ownedelement ownedelement stereotype constraint name equals entity service model stereotype constraint name equals entity ownedelement fig 

specification transformation primitive 

architecture cavit framework second transformation primitive responsible copying classes conceptual model entities robustness model 
fig 
shows specification copy story 
copy story visual language construct responsible copying subgraphs 
match node copied node 
additionally nodes links specified composition path starting node copied 
implicitly attributes copied node copied 
links connect copied nodes part specified composition path copied labeling stereotype 
primitive shown fig 
uses transitive closure construct find meeting scheduler package packages recursively contained model 
looks node type model conceptual model stereotype applied 
node labeled source copy operation 
outgoing composition path indicates contained classes attributes copied 
pattern extended copy type attribute nodes 
copying subgraph node added meeting scheduler package entity service model stereotype attached 
shown fig 
third story consists straightforward attribute assignment node representing robustness model 
name needs changed created previous story name conceptual model 
story shown fig 
classes copied entity stereotype 
architecture cavit framework section briefly illustrates cavit related existing model management software 
fig 
shows cavit acts middleware ocl consistency checker yatl mdr sdm model transformer discussed 
cavit configured declarative transformation contract specifications associate violations ocl consistency constraint execution sdm transformation rules 
example cavit model fig 
mapped invariant section transformation section 
yatl mdr access model repository mdr file xmi object interface jmi interface 
cavit lets eliminate expensive serialization calls 
extended yatl mdr violation reporter interface observer design pattern 
interface cavit defined signature sdm transformation rules 
parameters transformation rules contain objects representing elements inconsistent models 
scenes objects implement jmi interfaces 
bound stereotype stereotype type umlclass attribute attribute feature model ownedelement ownedelement constraint name equals aname bound amodel model 
architecture cavit framework closure ownedelement create model ownedelement create stereotype bound stereotype fig 

specification transformation primitive 

architecture cavit framework bound model name string rm fig 

specification transformation primitive 
bound model ownedelement closure umlclass stereotype create bound stereotype fig 

specification transformation primitive 
mdr sdm xmi jmi jmi yatl mdr ocl invariants violation reporter cavit contract bindings fig 

architectural diagram cavit 
related 
related cavit framework bridges technological spaces 
object oriented metamodeling define structure contracts transformation definitions 
behavior transformation rules modeled controlled graph rewriting rules 
controlled graph rewriting known concept graph transformation technological space 
formalizing technology bridge mainstream design contract concepts related technological spaces 
object oriented metamodeling technological space promoted omg mda initiative ocl specify contract refactorings specific kind model transformation 
pre postcondition refactoring contract contains constraint describes set code smells 
refactoring contracts applied composing primitive refactorings verifying preservation behavioral properties automatically removing code smells 
investigated source target models represented contracts general model transformations represented superfluous extensions standard ocl 
authors approaches succeed define types transformations inplace implementations translations horizontal vertical informal extension ocl 
proposed model transformation definitions mathematical relations 
relation maps metaclass defined domain range specification states instances source target metaclass mapped set theoretical properties bijective functional total relation specific constraints consist mainly equations attributes related elements 
constraint types modeled invariants relation class 
second class constraints available automatically relations means inheritance relation class described appendices 
cavit consistency constraints modeled invariants classes compatible framework contract model transformation set theory 
reasoning source target model special case cavit approach transformation definitions hold attribute models 
apart added value cavit lies definition behavior constraint violations cavit delegate model transformation rule postcondition mapped failed invariant 
reasoning invariants preand postconditions build established foundations design contract 
cavit sdm provides uml syntax describe behavior transformation rules 
natural extension relational approach implemented bodies transformation rules java due precise uml action semantics 
possibility 
related extension ocl side effect free constraint query language transformation language 
initial experiments conducted build consistent model elements automatically architectural models 
case studies required assess readability expressiveness sdm ocl action language practice 
especially lack publications transformation rules reconcile inconsistent models 
noted object oriented metamodeling space builds results logic knowledge bases 
area balzer pioneers proposed decouple definition declarative consistency contracts imperative repair actions 
recognized importance temporarily tolerating consistency violations role manual reconciliation assisted automatic inconsistency notification 
finkelstein executable temporal logic implement transformation rules maintaining consistency software models different viewpoints 
graph transformation roots technological space developed early seventies 
foundations controlled graph rewriting described sch rr handbook graph transformation 
interestingly describe pre postconditions transformation rules graph transformation space 
concepts tools analyze rule break formedness rules modeling language 
tom mens mapped prolog reuse contracts graph transformation space illustrate applicability graph transformation evolution object oriented software 
reuse contracts model transformation rules defined manage evolution class hierarchies collaborations 
defining set primitive reuse contracts graph rewrite rules mens able derive conflict matrix 
idea elaborated collaboration runge 
note algorithms computing conflict matrices designed control structures copy operator sdm mind 
definition transformation contract particular constraint language ocl cavit consistency maintenance approach applicable visual specifications pre postconditions 
complements previous pre postconditions graph transformation space investigated inconsistency prohibited tolerated temporarily 
mens extended support controlled graph rewriting compute possibly undesired sideeffects executing transformation rule cavit indicated fix model inconsistency 
running example modeled meeting scheduler system uml profiles defined transformations different models 
promoted language profiles prototyping domain specific languages today case tools allow tune general purpose editors domain specific ones easily 
look forward applying results advances 
editor technology promise simple decoupling syntax models concrete syntax models 
significantly simplify transformation contracts rules defined dedicated syntax model 
interestingly exactly development configurable editors proposed contract model transformation approach defines mapping syntax graph grammars 
main theoretical contribution relates new developments model transformation technology existing paradigms 
specifically notions transformation definitions transformation rules mapped back classes methods models accessible transformation definition storing model elements attributes transformation class notion consistency contracts mapped back class invariants defined pre postconditions methods relate class invariants automating consistency management behavior transformation methods modeled executable uml diagrams controlled graph rewriting 
additionally illustrated traceability modeled elegantly objectoriented fashion transformation class associated set traceability classes 
set model elements related particular traceability relation 
proposed theory validated implementation contract aware visual transformation cavit framework 
cavit regarded model transformation middleware integrates model management frameworks developed separately yatl mdr evaluate model consistency contracts specified ocl execute visual transformation models 
combining strengths object oriented metamodeling graph rewriting cavit enables development complex transformations exploration new research topics metamodel transformation evolution 
authors hans olaf contributions 
hans provided valuable feedback uml profiles related cavit readable possible 

sponsored belgian national fund scientific research fwo foundations software evolution formal foundation software refactoring formal support transformation software models 
sponsoring provided european research training network syntactic semantic integration visual modeling techniques 

carlo ghezzi gian pietro picco 
outlook software engineering modern distributed systems 
proceedings monterey workshop radical approaches software engineering venice italy 

sun microsystems 
java platform enterprise edition specification july 

sap 
erp 
www sap com solutions business suite erp 

floyd 
assigning meanings programs 
schwartz editor proc 
symposium mathematical aspects computer science volume pages 
american mathematical society 

hoare 
axiomatic basis computer programming 
communications acm 

hoare wirth 
axiomatic definition programming language pascal 
acta informatica 

shigeru igarashi ralph london david luckham 
automatic program verification logical basis implementation 
acta informatica 

david crocker 
safe object oriented software verified design contract paradigm 
anderson editors proceedings twelfth safety critical systems symposium pages 
springer verlag 

bertrand meyer 
eiffel language 
prentice hall 

kramer 
java design contract tool 
technology object oriented languages systems th international conference exhibition 

jean zivin olivier 
precise definition omg mda framework 
proc 
th int conf 
automated software engineering page 
ieee computer society november 


models mean 
ieee software sept oct 

donald norman 
mental models chapter observations mental models pages 
lea 

kleppe jos warmer wim bast 
mda explained model driven architecture practice promise 
object technology series 
addison wesley 


model transformation heart soul software development 
ieee software special issue model driven software development 

object management group 
unified modeling language uml march 
version 
document id formal 

james martin 
rapid application development 
macmillan publishing 

jean marie favre 
foundations meta pyramids languages vs metamodels episode ii story baboon 
jean heckel editors language engineering model driven software development number dagstuhl seminar proceedings 
internationales und forschungszentrum informatik schloss dagstuhl germany 

peter pin shan chen 
entity relationship model unified view data 
acm transactions database systems 


jean zivin nicolas jean marc quel damien 
reflective model driven engineering 
stevens jon whittle grady booch editors proc 
uml unified modeling language 
model languages applications 
th international conference san francisco ca usa volume lncs pages 
springer october 

sun microsystems 
metadata repository 
mdr org 

bill moore david dean anna gerber gunnar philippe 
eclipse development graphical editing framework eclipse modeling framework 
ibm 
international business machines january 

hans pieter van gorp dirk janssens 
leveraging uml profiles generate plugins visual model transformations 
software evolution transformations 
satellite nd intl 
conference graph transformation 

pieter van gorp dirk janssens tracy gardner 
write deploy performance oriented mda case study 
enterprise distributed object computing conference edoc pages 


yatl transformation language 
proceedings st european mda workshop mda ia pages 
university twente january 

grzegorz rozenberg editor 
handbook graph grammars computing graph transformation volume foundations 
world scientific publishing 

object management group 
model driven architecture mda july 

conrad bock 
uml activity action models 
journal object technology 

magic 

www com 


poseidon uml version 
www com 

daniel chang 
cwm enablement showcase warehouse metadata interchange easy cwm 
data warehousing works 

java community process 
java metadata interface jmi specification jsr june 

object management group 
xml metadata interchange xmi 
formal 

object management group 
mof query views transformations rfp ad october 

lamsweerde darimont massonet 
meeting scheduler system problem statement 
technical report universit catholique de louvain partement ing informatique louvain la neuve belgium 

feather fickas finkelstein van lamsweerde 
requirements specification exemplars 
automated software engineering 

bertrand meyer 
object oriented software construction chapter multiple criteria view inheritance 
prentice hall nd edition 
archive eiffel com doc manuals technology section html hdr 

erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software chapter strategy pages 
professional computing series 
addison wesley 

doug rosenberg kendall scott 
case driven object modeling uml practical approach 
addison wesley longman publishing boston ma usa 

pieter van gorp 
uml profile data modeling 
www ua ac research 

scott ambler 
uml profile data modeling 
www org essays html 


jeffrey ullman jennifer widom 
course database systems chapter pages 
prentice hall 

fabian martin gogolla 
realizing uml metamodel transformations agg 
heckel editor proc 
etaps workshop graph transformation visual modeling techniques gt vmt entcs 
elsevier 

object management group 
meta object facility mof specification 
object management group 
version 
available download url cgi omg org doc formal 

birgit 
dresden ocl toolkit role information systems development 
th international conference information systems development methods tools theory practice 

dan 
ocl specification 
proceedings th international conference uml modeling languages concepts tools number lecture notes computer science toronto canada 
springer verlag 

lars geiger albert niels van pieter van gorp daniel 
model driven software development volume ii research practice software engineering chapter graph transformation practical model driven software engineering 
springer verlag 

albert 
rigorous object oriented software development 
phd thesis university paderborn 

fischer 
story diagrams new graph rewrite language unified modeling language 
engels rozenberg editors proc 
th international workshop theory application graph transformation paderborn germany lncs 
springer verlag 

olaf hans pieter van gorp 
model driven template model transformer 
sourceforge net 

remco 
yatl mdr model transformation engine ocl checker meta data repository 

pieter van gorp hans tom mens serge demeyer 
automating uml refactorings 
proceedings uml unified modeling language 
springer verlag 

eric lionel laurence 
ocl specification model transformation contracts 
editor ocl model driven engineering uml conference workshop october lisbon portugal pages 
university kent 

tom mens krzysztof czarnecki pieter van gorp 
discussion taxonomy model transformations online 
jean heckel editors language engineering model driven software development number dagstuhl seminar proceedings 
internationales und forschungszentrum schloss dagstuhl germany 
extended version submitted 

david stuart kent 
relational approach defining implementing transformations metamodels 
software systems modeling december 

david 
model translation uml specification technique active implementation approach 
phd thesis december 
unknown variable note 

steen ter 
supporting viewpoint oriented enterprise architecture 
enterprise distributed object computing conference edoc pages 

robert balzer 
tolerating inconsistency 
icse proceedings th international conference software engineering pages los alamitos ca usa 
ieee computer society press 


ben moszkowski 
executing temporal logic programs 
cambridge university press new york ny usa 

anthony finkelstein dov gabbay anthony hunter jeff kramer nuseibeh 
inconsistency handling multi perspective specifications 
esec proceedings th european software engineering conference software engineering pages london uk 
springer verlag 

ehrig michael hans rgen schneider 
graph grammars algebraic approach 
focs pages 

heckel annika wagner 
ensuring consistency conditional graph rewriting constructive approach 
electronic notes computer science 
joint workshop graph rewriting computation 

olga runge 
agg attributed graph grammar system development environment attributed graph transformation systems 
tfs cs de agg 

tom mens 
formal foundation object oriented software evolution 
phd thesis department computer science vrije universiteit brussel 

tom mens gabriele taentzer olga runge 
detecting structural refactoring conflicts critical pair analysis 
electronic notes theoretical computer science april 

bowman derrick 
manual model checker stochastic automata 
technical report university kent canterbury 


visual environment visual languages 
science computer programming august 

