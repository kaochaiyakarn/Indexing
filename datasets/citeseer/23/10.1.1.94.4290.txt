meta orb highly configurable adaptable reflective middleware platform bio moreira costa fmc inf br instituto de inform tica universidade federal de imf campus ii nia go middleware platforms filled important gap distributed application development enable high level abstraction masking complexities distributed systems programming 
technology developments areas multimedia systems networking mobile computing feasible new categories applications properly supported conventional middleware 
common applications pose important requirements regarding platform configurability adaptability black box nature conventional middleware suitable 
context reflection meta level architectures represent concrete solution offering principled way open design implementation platform enabling internal structure behaviour dynamically inspected adapted 
way new application requirements environmental changes accommodated platform configuration evolution 
presents approach reflective middleware combines meta information management meta object protocols offering common basis platform configurability adaptability 
describes concrete implementation approach 
keywords middleware reflection meta information management reflective middleware 
advent middleware platforms greatly contributed widespread development distributed systems applications 
technologies corba java rmi dcom ee net gained considerable space part software development scenario 
technologies offer software layer sits operating systems provides standard interfaces services top applications developed 
enables distributed environment problems originated distribution hidden away programmer 
typical non functional concerns location services resources language operating system interoperability replication transparent leaving programmer free deal functional concerns applications 
middleware technologies enabled notion open systems extended realm distributed systems 
applications built middleware typically rely platform standard interfaces provide common distributed systems services way interoperable portable different operating systems languages 
conventional approach openness partial current practice middleware standards requires interfaces open details platform implementation left vendors decide 
usually leads rigid monolithic platforms tailored particular needs different applications 
firstly applications services built platform resulting memory footprints larger needed 
addition applications may need specialised services provided mainstream middleware case multimedia applications 
secondly application requirements may evolve runtime demanding adaptations platform implementation set services provided remain appropriate instance changes execution environment 
leads conclude middleware platforms built flexible architectures open implementation approach 
way programmers configure customised versions platform change internals runtime need arises 
reflection meta level architectures represent principled way open internal implementation platform dynamic inspection modification 
complement meta information management offers basis middleware configuration allowing specify build customised instances platform 
presents architecture reflective middleware called meta orb exploits combined techniques order provide flexible middleware architecture support distributed multimedia applications 
structured follows 
section reviews basic concepts reflection meta level architectures section discusses principles meta information management 
section considers application reflection area middleware emphasis requirements reflective middleware 
section presents specific approach adopted research describes meta orb reflective middleware architecture followed section discusses implementation platform 
section reviews important related section presents relevant considerations 
reflection meta level architectures fundamentals reflective computing systems introduced smith summarised reflection hypothesis argues system manipulate representations way manipulates representations application domain 
system said self representation encompass aspects implementation 
addition relationship causal connection self representation actual system meaning changes corresponding effects system said reflective 
inspection adaptation system internals 
architecture reflective system known meta level architecture usually structured levels bottom level known base level deals computation domain application levels known meta levels perform computation system 
precisely meta level concerned representation manipulation level relative base level giving rise notion reflective tower meta levels illustrated 
shown act meta level exposing internals relative base level known reification 
corresponds establishment explicit representation baselevel system internal implementation terms programming entities manipulated runtime 
modifications self representation result corresponding changes reified elements base level process known reflection absorption 
particular base level entity set meta level entities reifying know entity meta space 
object oriented paradigm provides clean way structure meta level 
general object orientation allows distribution reflection mechanisms interfaces multiple distinct meta level entities 
regarding terminology object oriented reflection entities populate meta level called meta objects entities base level known base level objects 
interfaces base level objects provide object protocol access application functionality interfaces meta objects provide meta object protocol mop allows reflective access implementation system 
importantly object model employed base meta level meaning reflection re applied meta level 
design reflective systems usually follows distinction structural behavioural reflection initially conceived context programming languages 
structural reflection defined ability language platform provide complete reification program currently executing data types part program 
hand behavioural reflection ability language platform provide complete representation semantics terms internal aspects runtime environment 
structural reflection usually deals functional properties system behavioural reflection typically concerned nonfunctional properties 
meta information management basic concepts meta metalevel reification absorption reification meta level base level absorption reification reflection meta level architecture 
reflective techniques inherently deal meta information order build base level entities 
meta information kept reified aspects system explicit implicit form part state meta objects 
reflection imply consistent framework modelling maintaining metainformation especially considering issues sharing distribution 
provision framework precisely goal meta information management presence important overlooked requirement reflective middleware 
purposes meta information defined information system application domain system 
structured meta information typically concepts model meta model 
models represent meta information runtime entities compose system may provide detail enable instantiation system introspection internals 
hand meta models comprise higher level meta information targetted representation models 
meta model describes constructs available modelling entities system application 
mainly concerned management meta information level models 
addition models meta models effective architecture management meta information provide facilities assist meta information definition language defined syntax semantics conforming meta model tools compilers validate translate textual meta information machine readable form alternatively interactive tools gui purpose meta information maintenance distributed persistent repository features creating deleting managing manipulating meta information definition storage evaluation relationships compatibility substitutability different entities meta information meta information interchange mappings tools transfer meta information different repositories possibly different meta models 
known example general purpose meta information management architecture omg meta object facility mof provides framework defining managing models meta models meta information comprise 
example restricted corba meta model interface repository defined part corba specification 
meta information management middleware demand principled approach meta information middleware comes basic needs type management configuration management 
refers management type related meta information describing externally visible features runtime entities relationships 
especially useful open services environment supported middleware new services dynamically introduced evolved service users dynamically bind service providers 
context availability runtime meta information describing types servers clients vital dynamic discovery services type checking bridging service types binding 
configuration management turn refers activities building system smaller parts structured way 
involves creation allocation binding primitive components order form complex composite components 
explicit meta information describe internal configuration components system terms templates detail allow instantiation 
templates serve runtime documentation configuration system components providing basis reconfiguration 
meta information management techniques templates defined managed terms meta model 
enables association templates typing meta information turn permits type relationships search compare configurations validate interconnections elements configuration 
important recognise role meta information management principled basis definition instantiation management customised middleware platforms 
promising scenario widespread existence libraries template type meta information describing alternative aspects middleware selected combined extended order produce platforms tailored particular 
important uniform meta information management architecture mof types templates consistently defined unambiguously interpreted kind heterogeneous environment typically supported middleware 
reflective middleware approach motivation rationale reflective middleware comes need open platform implementation order allow customisation runtime adaptation required dynamic applications 
existing middleware technologies recognised need address problem tackling different approach adding flexible features top core architectures example portable interceptor feature added corba 
despite usefulness features degree support customisation adaptation partial covering aspects design different phases platform lifecycle 
due inherent blackbox nature technologies limits extent elements design opened exposed programmer 
reflection meta level architectures hand offer truly generic solution problem enabling principled approach design middleware way naturally renders openness 
addition reflection enables different aspects platform manipulated adapted ways anticipated design 
general terms reflective middleware refers causally connected support inspection adaptation middleware system 
reflection techniques traditional areas programming languages apply middleware 
providing usual middleware services standard interfaces defined corba specification reflective middleware platform provides meta interfaces allow programmer inspect manipulate internals platform 
design issues reflective middleware design reflective middleware usually observe requirements typical kinds reflective systems safety reflection performance impact uniform reflection model 
requirements particular importance context middleware form basis approach see complete list requirements 
modular platform infrastructure 
essential order facilitate clear identification runtime entities implement specific features platform 
enables entities manipulated reflection independently 

language system independence 
order enable portability applications reflection functionality important mop reflective middleware defined language neutral level 
reflection capabilities specific languages operating systems discouraged 

pervasiveness reflection 
issue refers range aspects middleware platform marshalling synchronisation communications protocols distributed systems services reified reflection mechanisms 
ideally aspects interest context amenable manipulation reflection 

unified approach configurability re configurability 
essentially facilities static configuration enable initial selection middleware components required particular scenario integrated mechanisms dynamic reconfiguration 
particular unified terminology consistent set meta level constructs 

management meta level complexity 
meta levels middleware platforms tend highly complex due large number aspects need represented interactions 
addition need handle aspects distributed environment adds complexity 
requires appropriate meta level abstractions order reflective programming manageable task 
meta orb architecture architecture meta orb platform combination metainformation management reflection techniques 
basis platform configurability provides infrastructure interfaces dynamic adaptability 
section aspects architecture examined separate describing specific approaches adopted 
platform configurability meta orb meta model design meta orb centred explicit meta model described mof 
meta model defines kinds entities construction instances platform meta information structures describe entities 
meta information specify instantiate customised platform configurations qualifies meta orb highly configurable framework middleware 
meta orb meta model extension corba meta model way allows backward compatibility standard 
influenced computational model open distributed systems described 
class constructs meta model described exemplified section 
interfaces represent access points services provided component 
styles interfaces provided operational client server interaction stream continuous media interaction signal primitive way interaction 
component objects simply components represent units functionality platform 
components multiple interfaces defined hierarchical way composing finer grained components 
binding objects equivalent distributed components internal components dispersed network 
binding objects central concept meta model provide structured configurable support interaction remotely located application middleware components 
corresponding meta model elements meta types represent type template aspects constructs meaning meta model provides basis functions type configuration management 
instances meta types simply referred types 
meta model includes elements define auxiliary types correspond class entities platform essential description 
examples include media types constructed types primitive types 
addition meta model includes related meta model elements 
elements correspond scope defining constructs type system module auxiliary constructs definition class meta types operation flow signal qos annotation 
complete description meta orb meta model 
defining platform configurations complete definition meta model describing features available platform configuration scope 
section presents representative examples provide idea basic meta model constructs building customised platform instances 
textual notation meta orb odl object definition language 
typically platform designer provides set specifications odl define particular middleware configuration 
definitions stored meta information objects repository retrieved instantiate parts middleware configuration 
additionally meta information stored repository re part newly defined configurations 
module example primitive component interfaces audio interf primitive component implementation interfaces video interf interface stream primitive component implementation interfaces audio interf video interf av interf component internal components audio comp video comp mixer comp object graph audio comp audio interf mixer comp audio interf video comp video interf mixer comp video interf interfaces av mixer comp av interf example component configuration specification 
example shown odl definitions composite component 
note auxiliary definitions omitted lack space notably interfaces multimedia extension omg idl 
definition specifies component audio video processing composed primitive components defined example 
configuration composite component specified terms set internal components object graph representing way internal components connected adjacent components linked means interfaces interfaces component presents users 
example illustrates arbitrarily complex units functionality modelled configured terms structured component composition primitive components encapsulate binary implementations composite components 
example similarly shows distributed configurations specified binding construct 
shows specification complex binding object aimed connecting interfaces audio video components kind defined 
binding built components binding objects definitions omitted brevity implement different elements middleware functionality stubs protocol filters transport protocols 
binding definition terms type binding control interface exposes functionality control operation binding pause resume operation type internal binding objects configuration roles implemented binding endpoints 
particular case single role defined binding endpoints meant connect interfaces type 
definition binding role similar composite component definition cardinality part specifies maximum number endpoints conforming role created binding instance means multipoint bindings supported 
addition definition configuration binding role object graph specify connection points binding roles order connect binding 
module example binding control interfaces ctrl ctrl interf internal bindings audio binding video binding role components stub audio filter video filter target interface stub av interf cardinality configuration stub audio interf audio filter audio interf stub video interf audio filter video interf audio filter forward interf audio binding audio role video filter forward interf video binding video role example binding configuration specification 
way definitions provided stored managed implementation specific issue see section 
essential requirement definitions public form typically repository accessed platform configuration tools designers looking pre defined configurations re part complex configurations reflection mechanisms seen 
dynamic adaptation principles structure meta level seen entities constitute platform configurations structure fully described meta information elements 
dynamic reconfiguration requires means manipulate meta information runtime way causally connected respective instances platform configuration 
role reflective meta level completes architecture meta orb contributes fulfilling requirements identified section 
reflection meta orb dynamic inspection adaptation context platform application elements 
architecture conceptually divided base level actual functionality platform applications defined meta level reflection capabilities defined 
design meta level follows principles open orb reflective middleware architecture discussed 
fundamental principle meta level object oriented reflection means entities populate meta level uniquely identifiable objects 
definition object meta orb refers structural constructs defined metamodel components binding objects interfaces typically component objects interfaces constitution meta level 
meta object protocol mop realised terms interfaces components play role meta objects 
addition object oriented reflection assumes baselevel similarly structured terms objects meaning meta objects reify components binding objects interfaces 
importantly meta orb approach state meta objects direct correspondence meta information elements describe respective base level objects 
practice meta information reification process basis initialising state meta objects 
important principle design meta level known multi model reflection framework introduced language 
approach consists applying separation concerns design meta level meta space object partitioned number distinct aspects realised different meta object 
important reduce complexity metalevel especially considering multitude features managed meta level middleware 
separate aspect meta level defined terms meta space model represents structure functionality reification base level object aspect 
illustrates concept distinct meta objects corresponding different meta space model reify base level object 
currently meta space models specified defined design semantics 
meta space models categorised usual distinction behavioural structural reflection discussed section 
behavioural part meta space consists meta space models resources interception 
responsible reifying managing resources storage processing base level objects deals manipulation implicit behaviour associated interfaces components pre post processing affect non functional properties interactions interface 
typical operations provided behavioural meta object protocols include addition removal interceptors interface re definition properties resources allocated object amount memory scheduling parameters 
interface base meta link architecture interface discovery baselevel object structural reflection hand represented distinct meta space models interface discovery reifies set interfaces supported component binding object interface reifies constitution particular interface terms operations flows signals provides architecture reifies internal configuration component binding object terms object graph representing internal components way connected 
dynamic adaptation platform structure interception resources reifying base level object multiple meta space models 
meta level base level current version meta orb focused structural reflection interface discovery interface architecture meta space models 
meant adaptation meant inspection discover services provided component terms interfaces operations 
adaptation architecture meta space model achieved manipulation object graph represents configuration platform element 
meta object protocol associated meta space model offers operations inspecting structure configuration changing adding removing replacing components 
instance binding configuration described available bandwidth underlying network suffers drop may impossible sustain previously agreed quality service 
rigid middleware infrastructures conventional middleware typically cause binding torn 
hand meta orb reflective middleware architecture meta object may help overcome problem satisfactory way 
solution involve selection alternative video encoding method lower bandwidth requirements component type defined meta information repository implements 
architecture meta object replace current video filter components binding endpoints components selected type disrupting service user experience downgrading video output quality 
code implementing reconfiguration python prototype see section shown 
import obtain architecture meta object 
arch get arch bind ctrl get binding name obtain type new component type repository 
new video type lookup name dk binding pause binding reconfiguration performed breaking 
bind ctrl pause invoke appropriate operation architecture mop replace occurrences video filter component endpoints conforming role components instantiated new component type 
arch role replace component video filter new video filter type resume normal operation binding bind ctrl resume reconfiguration example python prototype 
examples dynamic adaptation called applications applications need continous non availability 
cases architecture meta object protocol represents natural way adapt application underlying platform user requirements business rules change having reconfigure re start 
bottom line reflection way convenience making runtime structural changes application underlying platform 
addition smoothing change process preserving continuous availability adapted service approach enables simplification process system evolution changes localised way affecting system 
problems need solved order approach completely feasible 
problem transfer state replacing stateful component 
current approach require stateful components support control interface operations handle copy state replaced component new 
related problem adaptation binding object involves manipulation components lie data path 
cases performing adaptation cause flow data binding shortly interrupted may cause loss inconsistency information transferred 
current design approach twofold 
mechanism provided allows meta level programmer pause operation binding starting adaptations resume adaptations completed seen 
second design encourages efficient implementations mop instance adaptations fit interval successive packet arrivals 
sophisticated solutions problem adaptation required subject 
impact meta information management seen important requirement self representation maintained meta object consistent type base level object 
result adaptation configuration base level object self representation different specified type 
solve apparent contradiction meta orb adopts approach type evolution means type object changed version original type object subject adaptation 
new type published repository base level object stable adaptations envisaged meta object explicitly asked private copy type kept meta object 
interesting consequence approach enables new component binding types derived result reflective adaptations 
new types published create objects contain scratch results previous adaptation efforts 
implementation prototype implementation meta orb architecture developed goal demonstrating feasibility applicability 
focus functionality qualities architecture performance 
reflected chosen implementation environment python programming language favours rapid prototyping 
despite experiments shown performance prototype appropriate simple multimedia applications 
addition implementing prototype purely python portability variety operating systems guaranteed factor choosing language 
implementation structured main modules design discussed section 
modules briefly described 
platform core module implements core features necessary support meta orb programming model 
specifically contains basic distribution infrastructure naming capsule management services primitive constructs support meta model interface local bindings links interfaces locally connected 
addition module defines runtime representation class constructs programming model interfaces components binding objects 
particular regarding implementation encourages general inter orb protocol giop basis communication components binding objects 
way providing interoperability corba needed interface compatible ior standard 
higher level services defined module notably component binding factories entities responsible instantiation components binding objects specified type meta information 
type repository module implements meta information management framework meta orb providing support platform core meta level 
logical structure extension corba interface repository order comprise new meta types introduced meta orb meta model addition native corba 
implementation replication repository order increase performance accessing type definitions 
persistence type definitions achieved simple serialisation storage local file system repository replica database system considered development 
creation new type definitions turn performed master slave repository replicas master replica receives processes type creation request propagating new type definition slave replicas 
type versions created similar way centralised manager responsible generating unique version numbers 
module introduces tools facilitate definition manipulation meta information gui browser specify edit publish search type definitions 
meta level module corresponds mechanisms facilities structural reflection provided platform 
follows framework described section design defined terms constructs programming model 
meta objects components created managed services provided platform core type repository modules 
approach provide default design implementation meta object types offer representative meta object protocol 
design extended new meta object types static type definition reflection meta meta objects type evolution 
precise meta object protocols currently implemented described 
implementation interface interface discovery meta objects straightforward simply provide convenient way access type meta information base level objects 
preferred direct access respective types repository provide date type meta information considering previous adaptations evolution type 
architecture meta objects hand complex implementation provide adaptation 
means causal connection explicitly maintained achieved allowing meta objects directly manipulate runtime representation respective base level objects perform absorption reflective computation see 
related developed part open orb project lancaster university 
project offers generic architecture approach reflective middleware meta orb derived 
different realisations architecture proposed focusing aspects efficiency resource management software architectures 
meta orb turn realisation architecture focusing complementing comprehensive consistent approach managing meta information reflection mechanisms 
outside scope open orb projects adopted reflection principled way build flexible middleware platforms different approaches 
opencorba instance reflective implementation corba metaclass approach idea modifying behaviour middleware service replacing meta class class defining service 
mainly dynamically adapt behaviour remote invocations applying idea classes stubs skeletons 
meta classes consequence making adaptations reflect instances class 
contrast meta orb reflection object meta objects enabling isolate effects reflection objects affected reflection alter particular object 
reflective middleware desirable property components middleware system tend fairly independent class 
dynamictao representative reflective middleware architecture 
extension tao orb concept architectural awareness making explicit architectural structure system causally connected way 
middleware configurations defined terms prerequisite specifications represent components platform dependencies 
specifications automatic configuration service instantiate platform components components depend 
runtime prerequisites managed component charge keeping consistency dependencies new components added removed system 
approach similar architectural reflection meta orb added value dependency management 
dynamictao restricts reflection coarse grained components limiting applicability control detailed structures platform 
regarding management meta information reflective middleware architectures ones discussed deal meta information way treatment typically ad hoc 
hand isolated metainformation management middleware notably type management purposes proposed literature 
knowledge meta orb middleware architecture integrate comprehensive pervasive framework metainformation management principled reflective meta level 
benefit unifying meta information system preventing different meta object implementations different meta level representations providing basis closely integrate configuration adaptation features platform 
considerations meta orb reflective middleware platform combination meta level architecture meta information management framework 
aim research propose approach permits integration configuration reconfiguration facilities highly flexible middleware architecture 
foundation concepts research surveyed motivation middleware considered 
discussed implementation major features platform 
design meta orb guided requirements section framework evaluate proposed approach 
firstly components basic building blocks middleware emphasises modular platform architectures naturally eases identification entities need adapted 
second architecture meta orb defined way tied specific facilities programming language system 
enables implementation consequent interoperability different programming environments 
third fact reflection mechanisms built operate basic building blocks architecture means aspects middleware platform subject reflection 
fourth integration meta information management reflection provides natural basis unify facilities configuration dynamic reconfiguration contributing preserve consistency mechanisms design run time 
multi model reflection framework principle structure meta level important contribution lower complexity meta level programming 
way reflection performed particular meta space model largely ignoring details aspects managed meta space models 
approach proven feasible support distributed multimedia applications 
particular dynamic adaptation features enable underlying platform structure continuously match requirements application evolve time 
enhancements meta orb architecture possible order fully explore possibilities proposed approach 
particular author currently investigating feasibility approach mobile wireless environments 
context configuration adaptation features decisively contribute definition custom middleware platforms suit statically dynamically limited variable resource availability typical environments 
feasible required order define lightweight implementations reflection meta information mechanisms platform 
area consists implementation behavioural reflection part multi model reflection framework 
particular resources meta space model required order take full advantage adaptability means control quality service 
requires investigation extend current approach order meaningfully represent manage behavioural meta information repository framework 
scope research exploit meta information management approach 
particular meta meta information meta model level current design deals meta information level models offers promising new approach platform extensibility interoperability 
specifically meta meta information interpret structure semantics model elements help bridging platforms different meta models 
addition enabling explicit manipulation meta models possible dynamically extend platform new kinds constructs introduce new styles communication 
security safety issues involving reflection addressed enabling access control mop preventing reflective adaptations may result inconsistent platform configurations 
enhancements envisaged versions platform 
research developed lancaster university part author ph thesis sponsorship cnpq 
author members open orb team lancaster useful contributions particular gordon blair geoff coulson katia rui moreira nikos hector duran tom fitzpatrick 
omg common object request broker architecture specification revision object management group 
needham ma usa 
sun 
java remote method invocation rmi sun microsystems 
java sun com se docs guide rmi index html 
microsoft 
microsoft com technologies dcom microsoft 
www microsoft com com dcom asp 
sun 
java platform enterprise edition page sun microsystems 
java sun com ee docs html 
microsoft 
net development microsoft 
msdn microsoft com net 
kiczales black box open implementation 
ieee software 
smith reflection semantics procedural language 
ph thesis mit laboratory computer science mit technical report massachusetts institute technology 
maes concepts experiments computational reflection 
proc 
acm conference object oriented programming systems languages applications oopsla 
orlando fl usa 
foote object oriented reflective metalevel architectures panacea 
ecoop oopsla workshop reflection metalevel architectures 
ottawa canada 
kiczales des rivieres bobrow art metaobject protocol 
mit 
malenfant jacques demers 
tutorial behavioural reflection implementation 
proc 
reflection 
san francisco ca usa 
mili metamodelling oo oopsla workshop summary 
addendum proceedings th annual conference object oriented programming systems languages applications oopsla 
austin tx usa 
meta information management 
proc 
nd ifip international conference formal methods open object distributed systems 
canterbury united kingdom 
omg meta object facility mof specification version omg document formal object management group 
needham ma usa 
management application federations 
proc 
international ifip workshop distributed applications interoperable systems 
cottbus germany 
crane configuration management distributed software services 
proc 
ifip ieee international symposium integrated network management 
santa barbara usa 
omg interceptors published draft corba core chapters portable interceptors specification 
omg document ptc ed object management group 
needham ma usa 
blair papathomas 
case reflective middleware 
proc 
rd 
workshop 
rennes france 
coulson reflective middleware 
distributed systems online journal ieee computer society 
boole computer org middleware htm 
chiba ledoux reflection meta level architectures state art trends object oriented technology ecoop workshop reader malenfant moreira editors 
springer heidelberg germany 
costa combining meta information management reflection architecture configurable reconfigurable middleware 
ph thesis computing department university lancaster 
www comp lancs ac uk computing users fmc pubs thesis pdf 
blair 
stefani open distributed processing multimedia 
addison wesley 
blair design implementation open orb version 
ieee distributed systems online journal 
okamura ishikawa tokoro 
distributed programming system multi model reflection framework 
proc 
international workshop new models software architecture imsa 
tokyo japan 
costa blair 
integrating reflection meta information management middleware 
proc 
international symposium distributed objects applications doa 
antwerp belgium 
costa meta orb integrating reflection meta information management middleware lancaster university 
www comp lancs ac uk computing users fmc orb 
van python documentation version python labs 
www python org doc 
ledoux opencorba reflective open broker 
proc 
nd international conference reflection meta level architectures reflection 
st malo france 
kon monitoring security dynamic configuration dynamictao reflective orb 
proc 
ifip international conference distributed systems platforms open distributed processing middleware 
new york usa 
schmidt levine design tao real time object request broker 
computer communications 
brookes types management open distributed systems 
distributed systems engineering 
