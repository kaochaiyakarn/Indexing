certify thesis prepared entitled purdue university graduate school thesis acceptance network covert channels design analysis detection elimination complies university regulations meets standards graduate school originality quality degree final examining committee members spafford chair brodley clifton doctor philosophy approved major professor chair approved head graduate program spafford chair brodley balakrishnan date graduate program head approval network covert channels design analysis detection elimination submitted faculty purdue university partial fulfillment requirements degree doctor philosophy december purdue university west lafayette indiana dedicated sema love support 
ii table contents iii page list tables 
vi list figures 
vii abbreviations 
ix 
xi 
research objectives contributions 
designing network covert channels 
countering network covert channels 
designing hidden network covert channels 
countering hidden network covert channels 
significance 
dissertation outline 
background related 
confinement information flow 
covert communication channels 
channel definition types 
channel identification 
channel analysis 
elimination limiting 
auditing detection 
simple network covert channels 
covert channel creation 
channel design 
channel implementation 
iv page covert channel analysis 
channel accuracy 
channel bandwidth 
empirical evaluation 
storage timing 
noiseless channel detection 
measures detection 
empirical evaluation 
noisy channel detection 
empirical evaluation noiseless measures 
measures detection 
empirical evaluation 
limitations 
chapter summary 
time replay network covert channels 
covert channel definition 
covert channel creation 
channel design 
comparison limitations 
covert channel analysis 
channel accuracy 
channel bandwidth 
empirical evaluation 
covert channel detection 
detecting emc type channels 
detecting bmc type channels 
freshness input sequence 
covert channel prevention elimination 
page preventing time replay channels 
eliminating emc type channels 
eliminating bmc type channels 
chapter summary 
directions 
directions 
list 
ip scc scenarios 
vita 
list tables table page similarity scores storage ip sccs various 
ip scc detection efficacy similarity compressibility 
noisy ip scc detection efficacy similarity compressibility 
vi list figures page inter arrival times different traffic types 
storage ip simple covert channel 
timing ip simple covert channel 
components example ip scc frame 
alice execution flow diagram storage ip scc 
eve execution flow diagram storage ip scc 
alice execution flow diagram timing ip scc 
eve execution flow diagram timing ip scc 
zero insertion zero deletion example storage ip scc 
timing interval versus accuracy storage ip scc 
inter arrival times different traffic types 
inter arrival times actual run storage ip scc 
similarity scores various types covert legitimate channels 
compressibility scores various types covert legitimate channels 
similarity scores noisy ip scc 
compressibility scores noisy ip scc 
comparison compressibility walk walk 
example showing walk superior compressibility walk 
compressibility walk examples different parameters 
ip time replay covert channel 
character accuracy results bmc error correction 
character accuracy results bmc hamming error correction 
bit accuracy results bmc 
ii time sequences yield high character accuracy bmc 
vii page ii time sequences yield low character accuracy bmc 
factors affect output sequence sout time replay channel 
viii ack acknowledgment abbreviations aodv ad hoc demand distance vector ascii american standard code information exchange bmc binary matching channel cc common criteria cdm compression distance measure cft covert flow trees cpu central processing unit ddos distributed denial service eal evaluation assurance level ecc error correcting code emc exact matching channel fn false negative fp false positive ftp file transfer protocol hyper text transfer protocol ia inter arrival icmp internet control message protocol id identification idi index dispersion intervals ip internet protocol ipsec secure internet protocol isn initial sequence number kvm kernel virtual machine ix lan local area network mac media access control mls multi level secure msc message sequence chart ncsc national computer security center nrl naval research laboratory new zealand internet exchange osi open system interconnection pll phased locked loop rmc rule matching channel rtt round trip time scc simple covert channel smc small message criterion sof start frame srm shared resource methodology ssh secure socket shell svm support vector machines tcp transmission control protocol trusted computer system evaluation criteria time replay covert channels udp user datagram protocol wand waikato applied network dynamics group www world wide web ph purdue university december 
network covert channels design analysis detection elimination 
major professors carla brodley eugene spafford 
indirect communication channels effectively employed communi cations world bypass mechanisms permit direct communication unauthorized parties 
covert channels emerge threat information sensitive systems leakage unauthorized parties may unacceptable military systems 
dissertation show traffic analysis counter traditional event covert channels employ additional scheme cate channel 
channels introduce effective noiseless noisy covert channel detection mechanisms capture anomalous traffic pat terns 
motivated user potentially hide channel introduce new family covert channels produce anomaly 
ip time replay covert channels transmit covert messages adjusting packet timings consistent inter arrival time sequences extracts recorded normal sequences 
certain assumptions lowered data rates channels generate output sequences equal distribution normal sequences allow ing pass traffic anomaly detection schemes distribution analysis 
additionally illustrate channels potentially survive chan nel elimination schemes network data pumps lowered data rates 
discuss types transformations packet inter arrival times increase efficacy existing elimination schemes 
xi 
consider multi level secure mls system malicious user alice wishes leak sensitive information eve sending legitimate message user bob 
additionally suppose alice bob high security eve low security clearance 
systems security policy physically separates alice eve resources leakage possible resulting system called total isolation system 
alternative impractical utilization resources 
common approach allow re source sharing users different security levels restrict access shared resources access control schemes 
research assume bell lapadula access control scheme active system high low security levels 
scheme controls direct access shared resources enables alice eve establish indirect communication channels known covert channels 
covert channel communication channel violates security policy shared resources ways initially designed 
different type channel subliminal channel described simmons prisoner problem assumes direct channel alice eve inherently allowed mls system 
covert channels arise systems direct access disallowed policy 
covert channels related different information hiding construct compared information hiding techniques cryptography steganography 
traditionally covert channels characterized types storage timing channels 
storage covert channel involves direct indirect writing storage location process direct indirect reading storage location process 
timing covert channel involves sender process signals information modulating system resources cpu time way manipulation affects real response time observed second process 
covert channels classified depending type system 
network covert channel covert channel shared medium network environment transmission lines firewalls routers 
accordingly single system covert channel uses shared resources single computer files hardware resources operating system components 
crucial step covert channel design find exploit shared resource communication medium design 
principle obvious shared resource stealthy covert channel 
example 
file lock covert channel exploits systems shared file systems file description tables indicate file locked unlocked status shared resource 

disk arm covert channel exploits kvm systems security kernel shared read disk drive position disk arm shared resource 

bus contention covert channel exploits multi processor systems running single shared bus busy idle status bus shared resource 
little emphasis methods hiding traffic generated covert channels secrecy covert channel relies secrecy knowing shared resource 
additional techniques place hide channel better argue shared resource identified traffic generated event covert channel distinguished traffic generated legitimate channels system 
see suppose alice eve shared resource communicate covert channel 
signal bit information eve alice generates event alters state shared variable 
example events alter file description table file lock channel lock file unlock file 
transmit series signals eve alice subsequently generates corresponding events separated timing interval constant storage channel picked small set repetitively timing channel 
resulting sequence event sequence composed tuples event point time 
part tation argue event sequences generated event covert channel distinguished event sequences generated legitimate channels shows regular pattern caused encoding scheme generates repeating inter event times 
shared resource covert channel uses identified channel detected examining event traffic generates 
second part dissertation illustrate ways hide chan nel replaying event sequences generated legitimate channels create network covert channels virtually undetectable traffic distribution analysis 
counter channels detection schemes fail ways eliminate rate limit 
research objectives contributions research addresses event network covert channels arise dis tributed tcp ip mls systems transmission lines network nodes controlled 
dissertation show traffic analysis counter traditional event covert channels employ additional scheme obfuscate channel rate limited complex channels indistinguishable normal channels traffic distribution analysis 
prove statement provide answers questions design network covert channels tcp ip protocol leak information alice eve 
system detect eliminate leakage 
particular 
implement ip covert channel prototype novel design ip packet timings transmit covert information network effectively 

introduce novel detection measures effectively detect noiseless noisy ip covert channels event covert channels general traffic analysis force malicious users design complex channels rate limit channel avoid detection 

introduce time replay covert channels covert channel family hides event channels argue virtually undetectable distribution analysis certain assumptions 

discuss prevention elimination techniques time replay covert chan nels aid current elimination schemes stopping channels 
additionally provide simple accuracy bandwidth analysis un hidden hidden ip covert channels investigate efficacy detection elimination techniques experimental study 
detail bution 
designing network covert channels research initially focused designing event storage timing covert channels call ip simple covert channels scc 
design ip sccs packet arrival event employ inter arrival times ip packets convey information distributed mls systems 
simple concept proved non obvious issues creating channel designing software 
subtle issue synchronization alice eve event clocks guarantee channel accuracy 
ip packets offer guarantees time packet deliveries employ additional schemes preserve synchronization resynchronize channel needed 
presence factors intro duce noise covert channel assess efficacy ip sccs terms bit character accuracy number bits characters transmitted correctly divided total number bits characters channel bandwidth 
form basic accuracy bandwidth analysis noiseless noisy ip sccs 
show factors affect channel efficacy contention noise amount non covert traffic eve observes covert channel potentially reduce channel accuracy clock skew amount jitter network potentially result loss synchronization alice eve event clocks 
countering network covert channels counter channels investigate ip scc detection elimination rate limiting techniques introduce methods detect noiseless noisy ip sccs 
analysis behavior ip sccs illustrates storage timing channels show type regularity packet inter arrival times 
expected behavior storage channels fixed timing interval send send packets 
contrast timing channels constant timing intervals 
straightforward implementation symbol sent limited number timing intervals intervals repeat time 
packet inter arrival times storage timing ip sccs repetitive 
example inter arrival times storage covert channel illustrate regularity compared sample www trace taken ii dataset regularity deduced 
legitimate channels user network affects potentially observed traffic pattern longer window 
claim cases streaming traffic legitimate traffic patterns repetitive ip scc traffic 
inter arrival time sec packet number packet number fig 

inter arrival times different traffic types 
simulated ip storage scc secs clock skew 
example www traffic 
inter arrival time sec detect type regularity introduce measures online real time detection evaluate capabilities experimental study covert channel software real world scenario 
show detection measures fail noisy covert channels noise levels higher 
counter deficiency investigate effective computationally expensive search mechanisms locate hidden covert channels locally global measures fail 
important observation regularity characteristic limited solely channels designed event covert channels 
detection measures employed ip sccs channel event timings 
designing hidden network covert channels despite characteristic regularity ip sccs event channel channels general sophisticated schemes better hide channel devised 
second part research introduce time replay covert channels specifically designed hide covert traffic adjusting packet timings con sistent inter arrival time sequences extracts recorded normal sequences similar network conditions 
time replay channels rep resent family covert channels particular channel channel type 
detail channel model ip network packet timings transmit data hide covert channel legitimate ip traffic 
illustrate simple ip channel called binary matching channel alice eve exchange messages effectively network high accuracy secrecy 
investigate channel efficacy ip assess terms bit character accuracy number bits characters transmitted correctly divided total number bits characters channel bandwidth 
observe addition contention noise clock skew ip sccs third factor sequence selection sequence time replay covert channel uses plays major role channel accuracy bandwidth 
countering hidden network covert channels counter ip investigate covert channel detection elimination prevention techniques 
investigate online real time detection elim schemes applicable ip time replay covert channels con ditions schemes effective 
ip replays inter arrival sequences extracted legitimate sources traffic pattern shows regularity case ip sccs regularity detection measures apply channels 
show sophisticated attacker potentially devise utilize covert time sequences equal distribution normal sequences generated legitimate channels 
creating re play covert channels undetectable analyzing localized distribution inter arrival times 
deal channels provide discussion existing covert channel elimination schemes need revised eliminate new class covert channels introduce 
focus covert channel elimi nation schemes jamming network pump provide discussion effectiveness ip 
show binary matching channel may sur elimination schemes slightly lowered data rate 
actual amount data rate reduced depends amount added average delay packets 
argue eliminate channels elimination schemes need transform packet timings intelligently remove associations timing values symbols 
significance handling covert channels identifying analyzing limiting eliminating channels particularly important multi level secure mls systems processes may leak information processes lower classification level shared resources 
original obsolete evaluation criteria trusted computer systems orange book included requirements analyze covert channels terms bandwidth develop policies monitor maintain bandwidth maximum acceptable levels 
required storage channel analysis system complete analysis higher assurance level systems 
requirements carried new version evaluation criteria common criteria cc 
cc requires covert channel analysis eal assurance level systematic search covert channels eal higher assurance levels 
despite importance secure systems auditing detecting covert channels received attention compared covert channel handling techniques 
furthermore covert channel detection remains novel area confused covert channel identification 
identification problem discover potential covert channels realized analyzed system 
contrast covert channel detection mechanisms similar intrusion detection systems 
replaced common criteria cc 
essential task covert channel detection detect anomalous traffic patterns potentially signal covert channel 
addition ideal detection scheme identifies communicating parties information transferred channel capacity 
network covert channels particularly important receiver di rect channel bob system sender alice access controlled 
channels pose threat distributed sys tems sensitive information stored 
attacker eve implants back door systems steal information leaking covert channel established back door program 
presence back door eve monitor traffic alice bob gather information alice leaking 
channels scenario possible direct access untrusted parties nodes outside trusted network including eve controlled policy 
detection common practice secure systems monitor malicious activ ity 
detecting covert channels desirable reasons 
detection provides mechanism discourage channels may deterrent 

covert channel identification systems need input system analysts specify shared resources 
result human error number covert channels may remain unidentified 
detection help record activity channels 

covert channel elimination costly high performance systems 
case allowing channels exist monitoring activity crucial 
type systems potentially benefit covert channel detection elimination techniques high assurance systems covert channel elimination schemes usually neg ative performance impact system 
high assurance systems real time systems schemes practical 
allowing channels exist monitoring activity desirable deter usage channels detect actively running ones system 
military systems military system identifying users processes important limiting 
spy networks potentially dangerous identifying users enable authorities take actions users 
way potential actions users may prevented 
final note applications detection mechanisms potentially run front elimination protocols 
way elimination schemes may activated suspicious activity network 
architecture helps reduce negative performance impact elimination schemes addition enabling authorities identify users covert channel 
dissertation outline dissertation provide complete background covert channel research chapter 
chapter introduce ip simple covert channel trivial covert channel implementation uses packet timings convey secret information 
chapter investigate detection schemes counter channels report results experimental study detection efficacy 
chapter introduce novel covert channel family time replay covert channels hide covert channel replays legitimate traffic traces 
channels resilient detection methods introduce chapter counter discuss prevention elimination techniques specifically adapted disrupt channel activity chapter 
chapter provide insight directions take continuation 

background related computer resources scarce dedicating resources individ ual entities common practice wide area systems cost utilization resources 
today general trend maximize tion resources single systems technologies tion grid computing 
result systems resources utilized entities different sensitivity levels 
sharing resources creates potential unauthorized communication channels entities covert communication channels 
covert channel finds indi rect ways exploit shared resources establish stealth communication channels 
channels leak sensitive information unauthorized parties 
limit channels secure systems resource sharing different security levels needs defined controlled 
resulting secure system controlled resource sharing called multi level secure mls system 
precisely mls system computer environment number users different security levels share computer resources 
access resources importantly read write permission controlled access control mechanisms 
chapter give brief confinement problem complete background covert channels mls systems 
lampson cation covert storage channels research area focused creating identifying analyzing eliminating limiting auditing detecting channels 
step covert channel handling search potential covert channels identify 
channels identified capabilities assess risk pose system 
typically assessment calculates channel capacity 
analysis particularly important closing covert channels costly need focus merely high capacity channels 
af ter potentially dangerous channels identified eliminating limiting channels considered 
easy way eliminate covert channels move total isolation system disallow sharing resources different security levels 
scenario practical elimination methods mimic idea provide means isolation 
attention paid auditing detecting covert channels 
literature detection problem confused identification problem 
identification problem discover potential covert channels realized environment detection problem detect actively running covert channel 
provide details confinement problem covert communication channels 
confinement information flow design access control schemes mls systems goal confine users security levels regulate interactions users resources possible 
problem called confinement problem identified lampson 
defined problem prevent service leaking information owner serving customer 
lampson illustrates examples leak information identifies legitimate storage covert channels 
argues lampson storage legitimate channels closed access control mechanisms closing covert channel costly dedicating cpu user 
dedicating separate resources user proposed solution confinement problem virtually separate users 
way implementing virtual machines 
virtual machine simulator program mimics physical computer see provides virtual separation system resources available user 
example kvm system 
security kernel provides virtual machines users virtual machine security clearance user 
direct communication allowed different machines belong different security levels 
solution confinement problem sand boxing confine process actions information flow models control flow information users 
shown traditional techniques com pletely counter covert channel threat 
example access control schemes virtual machines provide sense separation different security levels re direct access levels thought mimicking total isolation system 
model secure indirect com munication methods covert channels 
suggests lampson storage channels eliminated access control schemes 
resource system needs carefully evaluated determine communication medium 
research assume system secured direct access access control mechanisms protect system policies 
bell lapadula model known example combines mandatory discretionary access controls 
model users seen subjects subject security clearance 
resource object security classification 
loss generality assume system high low clearance classification levels subjects objects respectively 
model works principles low clearance subject read high classified object read high clearance subject write low classified object write 
scenario covert channel sender alice receiver eve subjects high low security respectively 
shared resource ob ject high security classification 
eve read resource directly disallowed policy 
receiver may automated process back door leaking information master trojan horse program performs back door activity steal information 
programs usually arrive user environment legitimate channels mail installation usually violate system policies read write needed 
covert communication channels channel definition types covert channel general term define mechanism violate security policy allowing sensitive information leak unauthorized party 
bypass access control schemes mls systems covert channels shared resources ways intended design 
examples covert channels identified part confinement problem 
examples servicing process sender leaks information shared customer service service owner receiver modifying file access processor usage 
classic examples file lock disk arm bus contention covert channels 
example file lock channel implemented sender process locking shared file send releasing send zero 
receiver process tries access file 
records access file zero 
example disk arm channel identified kvm security kernel systems shared read disk drive 
channel receiver process uses direction disk head observe sender process actions 
send sender process seeks inner cylinders disk send zero seeks outer cylinders 
receiver process issues reads inner cylinder outer 
depending read completes receiver decides highly controlled environments communication channels monitored alice may want leak information covertly avoid detection 
sender issued zero 
disk arm channel example showing virtually separating processes kvm sufficient total isolation 
hu introduced bus contention channel exploits systems multi processors running single bus 
send sender process issues cpu calls saturating bus 
send zero stays idle 
receiver process continuously generates cpu calls records zero responses faster pre specified threshold 
covert channels characterized variety different ways depending type shared resource storage timing noise level noiseless noisy type system single distributed participation source active passive 
storage versus timing covert channels covert storage channel involves direct indirect writing storage lo cation process direct indirect reading storage location process 
timing covert channel involves sender process signals information modulating system resources cpu time way manipulation affects real response time observed second process 
terminology lampson 
classification covert channels storage timing clear cut different definitions exist literature 
reality classification useful channel capacity calculated 
capacity analysis need distinction storage timing channels 
storage channels time send symbol constant timing channels time varies time symbol sent see section 
alternative covert channel definition kemmerer list conditions storage timing channels 
covert channel storage channel conditions met 
sending receiving processes able access common tribute shared resource 

sender able force shared attribute change 

receiver able recognize change 

sender receiver able initiate conversation lower bandwidth channel 
criteria disk arm channel discussed storage channel 
example receiver sender processes share common attribute cylinder head shared resource hard drive sender force attribute change moving head receiver recognize change examining read finish time 
additionally processes need negotiate start time accomplished low bandwidth channel 
similarly file lock channel storage channel 
similar criteria timing channels 
sending receiving processes access common attribute shared resource 

sender receiver share clock 

sender able modulate receiver response time detecting change attribute 

sender receiver able initiate conversation lower bandwidth channel 
bus contention channel timing channel 
timing channels require access clock shared sender receiver 
systems system clock shared different security levels serve clock 
global clock available receiver monitor number instructions generated cpu measure progress time 
assuming parties share clock bus contention channel sender receiver access shared resource system bus sender process modulate receiver response time bus staying idle 
lastly parties need negotiate start time low bandwidth channel 
observe criteria disk arm channel discussed may classified timing channel 
sender modulates response time receiver process positioning disk head different cylinder positions 
exactly condition required third kemmerer criterion timing channels 
property disk arm channel referred timing channel storage exploitation 
true bus contention channel uses logical shared resource busy idle status bus 
disk arm channel example shows criteria channel classi fication kemmerer ambiguous 
ambiguity eliminated defining covert hybrid channels shared resources timing storage characteristics 
non ambiguous definition moskowitz storage channel defined channel output alphabet consist different responses time transmitted 
timing channel channel output alphabet different time values corresponding response 
definition disk arm bus contention channels timing channels 
file lock channel storage channel 
research moskowitz definition classify covert channels 
terminology 
channels referred mix channels 
final note need emphasize channel definitions explicitly specify long receiving process needs observe channel bit information 
example send bit stream file lock chan nel sender process needs release release lock file order 
specifying timing interval possible receiving process observe consecutive zeros 
similarly receiver distinguish consecutive ones 
problem storage channels timing channels timing events defined implicitly 
true stor age channels repeating symbols send information 
storage channels sender uses events locking file output output symbols 
symbols belong alphabet encoding messages 
encoding chosen symbol repeats consecutively pre specified interval receiver process observes ex ample records ones file remains locked intervals 
alternative solution reduces message space substantially 
example alphabet consisting different symbols messages length number different messages limited suggests storage channels th criterion 
special encoding chosen avoid consecutive symbols sender receiver able pre negotiate timing interval receiving process observe change channel 
framework file lock channel receiver observes file duration timing interval decide bit high sender intended send 
decides file locked records rest interval restarts observing file interval 
records zero rest case 
variations covert channels introduced literature 
covert sorting channel puts emphasis ordering events observed timing interval 
sorting channels covert information transmitted order set events 
example receiver monitoring events timing interval occurrence events particular order transmits message message space size 
variation covert counting channel transmits information number occurrences single set events 
noisy versus noiseless covert channels shared resource covert channel parties legitimate users resulting channel noisy communication channel 
specifically noisy covert channel channel normal covert traffic ob served 
contrast noiseless covert channel shared resource solely parties involved covert communication 
channel noise described signal noise contention noise caused contention shared resources 
noise degrading factor covert channel accuracy 
example file lock channel shared file may locked legitimate processes 
deteriorates channel accuracy low process longer mon high process activity 
effects noise covert channels analyzed estimate channel capacity 
introducing noise covert channels illustrated way limiting covert channel bandwidth 
techniques section 
network covert channels network covert channel covert channel shared medium network environment transmission lines firewalls routers 
file lock disk arm bus contention channels single system covert channels 
resources shared channels belong central computer environment 
initial research covert channels focused single systems 
results easily extended include network channels 
network covert channels attackers communicate com promised hosts zombies particularly distributed denial service ddos attacks 
tools exist setting network covert channels variety protocols including tcp ip icmp aodv mac protocols 
common practice examples encapsulate covert channels legitimate protocols bypass firewalls content filters 
data section packets easiest place convey covert information large size relatively unstructured compared headers 
modifying packet payload steganography hide data outside scope research 
unused header fields designed protocol improvements general go unchecked firewalls network intrusion detection devices may convey information form covert channel 
covert channels illustrated tcp ip protocols packet header fields 
illustrates examples covert storage channels 
encodes messages identification field id ip header 
second embeds messages initial sequence number isn field tcp header 
third uses tcp ack sequence number field 
improved version tcp isn covert channel 
main difference tcp isn channel encrypts tcp isn field look random number better obscure channel 
smart attacker devise means header fields fall scrutiny ip checksum field 
illustrates sender send message hash collision checksum field 
sorting covert channels devised tcp ip protocol ordering packets transmits covert information receiver side 
channel receiver needs know correct ordering packets 
channels require ipsec protocol provides original order packets sent 
murdoch argue previous efforts hide covert channels packet header fields alters behavior fields 
claim change detected introduce covert channel uses tcp isn field tries mirror isn generation process avoid detection 
tcp ip protocols covert channel exploitation 
re verse www shell covert shell uses request parameters leak formation 
channel sender issues get command specified parameters bypasses firewall leaks information receiver side 
covert channel illustrated bauer privacy purposes 
channel sender wants remain unlinkable redirects communication client browser 
author shows possible redirects cookies active content icmp packets host covert shells 
loki covert shell runs icmp uses data portions icmp echo packet send command remote receiver 
receiver back door executes command victim computer re turns result embedded data portion icmp packet 
list similar covert shells developed black hat community 
interesting examples covert channels illustrated osi protocol stack lan networks ad hoc wireless networks 
lan networks destination id packet length time successive sions number collisions resolution period mac protocol 
ad hoc networks li identify covert channels aodv routing protocol 
authors consider timing route requests source sequence number lifetime field destination id point need emphasize channel examples referred network covert channels literature rely information hiding principles 
channels resources packet headers directly accessible communicating parties covert channels mls systems 
network channels introduce covert channels assume direct access packets transmitted network 
active versus passive covert channels literature covert channels usually referred communication chan nels active sender receiver 
sender channel usually malicious software component actively leaking information 
source communication channel need active covert channel exist low receiver gain bits information high source actively leak information 
distinction active passive sources 
active source covert channel source actively leaking information 
passive source covert channel exists partic source 
covert channels described literature usually active source channels 
may lead false implication system free ma software free covert channels 
fact popular practice password observe running time password checking algorithms extract information 
resulting communication channel sender algorithm receiver cracker passive source covert timing channel 
research focus information hiding techniques 
subliminal channel introduced solution prisoner prob lem 
simmons describes problem follows prisoners placed far cells want coordinate escape plan 
exchanging messages allowed messages open guardian 
guardian may introduce fraud messages deceive 
need authenticate messages 
channel prisoners establish deceive guardian called subliminal channel 
channels considered special type covert channels protocols implement 
different lampson definition covert channels mls systems direct access shared resource allowed 
second steganographic techniques illustrated hide information di rectly accessible resource picture ways prevent detection unde human eye 
detection concealed messages received significant attention see 
similar subliminal channels proto cols information hiding principles different lampson definition covert channels mls systems 
channel identification methods proposed identifying covert channels mls systems 
early examples denning lattice models iden tify storage channels determining insecure information flows subjects 
particularly focus identifying implicit flows obvious analyzing direct explicit flows 
techniques identify im plicit flows resource attributes primitive operations different data structures resource matrices flow trees messaging charts 
resource matrix data structure visually identify covert stor age channels 
shared resource methodology srm attributes operations rows columns matrix respectively 
relation attributes operations represented matrix cells 
implicit flows identified form transitive closure matrix 
kemmerer argue timing channels represented ma trix including system time attribute 
methodology mainly designed storage channels extending include timing channels guarantee identification timing channels system 
efficient effective data structure covert flow tree cft 
cft data struc ture goal directed deductive reasoning 
porras goal oriented approach goals covert storage channel attribute create cft trees goal 
traversing tree tells goal achievable 
comparison srm methodology cft trees provide natural efficient technique analyze storage channels multiple resource exploitation 
srm cft methods initially designed single systems extended network channels 
natural way represent interactions network channels message sequence charts msc 
illustrate mscs identify storage channels requirements level software development cycle provide analysis mscs detect implicit flows multiple attributes leak information 
tsai argue methods high level analysis techniques covert channels identified levels requirements level may represent channels occur source level 
authors provide detailed method applied source level includes identification implicit flows analyzing direct indirect visibility attributes 
srm cft generic methods restricted high level requirement level analysis methods source level analysis may inefficient especially cft 
lastly technique similar srm 
method covert channels sender receiver aggregated 
particularly useful communicating parties medium communicate covertly attempt create seemingly unimportant low bandwidth channels 
srm methodology methods focus timing channels 
additionally techniques depend system analyst input identification algorithm 
techniques methods require manually identifying attributes shared resources system 
covert channels exploit attribute resource initially thought communication medium disk cylinder head 
possible attributes overlooked covert channel established exploiting attribute 
channel analysis second step covert channel handling analysis identified chan nel assess threat level covert channel 
essentially amount information leaks channels needs calculated identify high capacity channels closure rate limitation 
tsai analyze covert storage channel bandwidth markov models applied noiseless noisy channels 
bandwidth cases closed form 
assump tions required markov model realistic real systems 
general approach covert channel analysis treat channels legitimate communi cation channels apply results information theory shannon notion channel capacity 
idea millen inspired rigorous analysis 
covert channel analysis guide published national computer security center ncsc analysis tsai markov model millen maximum information rate compared 
results comparable guide favors millen analysis defines realistic scenario covert channel 
information theory capacity channel defined maximum formation rate 
noiseless channels capacity defined similar notation lim log number possible messages take time 
millen uses definition calculate capacity noiseless channels finite state diagrams 
moskowitz prove theorem provides solution asymptotic definition capacity simple timing channels general 
illustrated way define capacity mutual information 
letx random variables representing channel input output characteristics respectively 
amount mutual information shared parties denoted 
noisy channels calculated terms entropy follows 
denotes entropy 
denotes conditional entropy equiv 
sender receiver said non interfering 
channel noiseless 
timing channels mutual information tick tick unit measure time expected value time symbol transmitted 
storage channels timing interval 
noiseless channels capacity channel simply maximum value maximized distributions max asymptotic mutual information analysis noiseless channel capacity equivalent 
mutual information analysis easily extendable noisy channels 
mutual information calculate capacity noisy storage channel exists phase commit protocol mls transaction database systems see 
channel high sender passes information low receiver aborting send zero send 
channel noisy channel parties participate commit abort decision affect output observed receiver channel sender inputs zero output zero inde pendent users inputs 
contrast input certain probability receiver process observe 
resulting communication channel called channel 
channel type noisy communication channel symbols transmitted perfectly independent noise zero symbol phase commit protocol 
capacity particular channel calculated equations 
detailed analysis channels 
son analyze covert channels mls database systems applying mutual information principles calculate covert channel capacity secure phase locking database systems added requirement real time processing 
mutual information calculate capacity noisy timing channels 
major assumption analysis contention resources output signal modeled arrive exponentially distributed parameter 
capacity expressed wherep probability user sending zero 
shannon techniques calculating capacity works finite state commu nication channels 
infinite state covert channels analyzed information theoretic results 
presents examples storage channels belong category proposes encoding technique determine capacity infinite state channels 
covert channel guidelines give threshold acceptable covert communi cation bits second ncsc guideline 
threshold really depends system question depending importance transaction committed participating parties commit individually 
aborted party aborts timeouts 
data 
capacity measure identify importance channel 
capacity asymptotic measure may misleading 
example moskowitz illustrate zero capacity covert channel send short important message 
deal types channels authors introduce small message criterion smc conjunction channel capacity 
smc focuses short messages gives guidelines level covert transmission tolerated 
dissertation goal provide full analysis channel capacity evaluate efficacy ip covert channels introduce 
know information alice leak eve channel setup improve improving channel design 
employ capacity analysis techniques provide simple bandwidth analysis ip covert channels 
elimination limiting step eliminate rate limit high capacity covert channels 
covert channel capacity limited adjusting parameters appear capacity formula 
example phase commit channel capacity inversely proportional number participants andthe probability aborting 
capacity reduced increasing value parameter 
similarly parameter adjustments done covert channels analyzed 
adjustments system performance 
example moskowitz argue adjusting limit phase commit channel substantially degrades sys tem performance 
conjecture eliminating covert channels high assurance systems easy sophisticated elimination schemes needed 
different approaches limiting covert channels illustrated 
possible way introduce contention noise channel separate sender receiver system clock 
hu describes approach fuzzy time 
scheme random interrupts generate random clock shifts disrupt system clock different security levels 
result sender receiver covert channel longer share clock establish channel system clock shared resource 
improve scheme separating processes different security levels 
gray analyzes channel capacity fuzzy time standard definition discrete memo channels 
gray presents technique called probabilistic partitioning limiting covert timing channels 
technique allows processes share accurate clocks close bus contention channel completely 
scheme bus controller program randomly switches secure mode bus partitioned different security levels insecure mode covert channels exist 
lastly giles discuss jamming devices disrupt timing events system 
additionally provide game theoretic analysis channels calculate channel capacity efficacy 
way rate limit covert channels assure certain level system performance data pump 
data pump called nrl pump store forward buffer controls data exchange different security levels 
pump stores message sent low process acks low process receipt message forwards message high process waits ack response high process 
high process ack rate slower low message input rate covert channel established data pump follows low process sends back back messages pump longer receives ack messages 
low process blocks pump 
send high removes queued messages pump 
send zero stays idle 
low process constantly monitors timing interval 
receives ack time records 
records zero 
channel exist high ack rate faster low message input rate scenario low fill buffer create channel 
solution covert channel add probabilistic delay slow low reduce low message rate high ack rate 
implementation data pump called event driven pump 
network version nrl pump introduced 
different basic pump network pump serves multiple network users provides additional features 
feature fairness scheme provide fair load cuts network load needs cut pump system limitations 
dissertation illustrate type channels introduce potentially survive channel elimination schemes network pumps lowered data rates 
discuss types transformations packet inter arrival times increase efficacy elimination schemes 
effective way eliminate tcp ip covert shells information hiding channels packet headers traffic modify incoming outgoing packets standardizing fields unused redundant optional 
covert shells different schemes covert channels dissertation techniques apply ip covert channels channels packet headers payload transmit information 
auditing detection auditing detecting covert channels received attention compared covert channel handling techniques 
methods common practices secure systems monitor malicious activity applicable covert channels reasons 
methods provide mechanism discourage channels may deterrent 

identification systems need input system analysts specify shared resources 
human error number covert channels may remain undetected 
auditing detection help record activity channels 

covert channel elimination costly high performance systems 
case allowing channels exist monitoring activity crucial 
additionally auditing detection exist channel elimination limiting methods 
context auditing detection identify users participating covert channel 
auditing required activity secure systems 
shown audit practices described requirements sufficient covert storage channel auditing 
problems auditing schemes 
determination shared resource covert channel 

distinguishing covert channel senders receivers 

determination primitive alters views shared resource 

covert channel audit 
discuss problems occur view alter operations allowed primitives primitive access shared resources covert channels primitives access shared resource covert channel 
propose audit scheme identifies shared resource covert channel employs audit vectors unambiguously record alters views shared resource order 
trace covert channel identified bandwidth determined 
actual information leaked channel may recovered sender encrypt message 
detection covert channels closely related problem 
detection problem classified online offline detection 
online methods focus speed detection algorithm implement real time fly detection schemes 
contrast offline detection mechanisms run batch process 
online detectors little data fast detection offline detectors perform complex data analysis data needed 
online offline schemes rely quality data logs generated audit schemes 
unusual traffic patterns may lead discovery storage covert shells 
exam ple multiple ping requests small time interval may indicate storage shell icmp protocol loki 
addition storage shells detected observing variations unused packet header fields 
sohn illustrate offline detection scheme uses support vector ma chines svm detect icmp payload tcp ip header ip id tcp isn covert shells 
murdoch argue tcp ip specifications exhibit cient structure define normal learning methods svm overkill 
suite tests detect ip id tcp isn generating processes compliance specifications 

simple network covert channels chapter introduce simple network channels exploit timing ip net packets leak information alice eve 
describe implemen tation ip covert channel storage timing channel discuss subtle issues arose design 
report results channel efficacy terms accuracy bandwidth section 
section show regularity noiseless ip simple covert channel differentiate legitimate channels efficient online detection measures provide detection rates 
section repeat similar analysis noisy ip covert channels legitimate covert traffic mixed attempt hide covert channel 
show online detection measures fail identify covert channel noise levels higher 
channels investigate effective computationally expensive search mechanisms suitable offline detection locate hidden covert channels locally global measures fail 
covert channel creation distributed mls system properly follows policy observer low security level may able observe presence high network traffic having access encrypted contents 
assuming alice high sender bob high receiver communicating alice eve low observer information shared alice eve timing packets traveling alice bob 
ip simple covert channels scc chapter timing information covertly transmit secret message alice eve adjusting transmission intervals network packets alice sends bob 
section detail covert channel operation implementation storage timing ip sccs 
channel design ip sccs transmit covert message alice eve bit bit covert channel symbol set composed zeros 
packet arrival controlled alice observed eve 
send bits eve alice generates sequence packets separated timing interval inter arrival time 
depending timing interval chosen storage timing channel devised 
alice uses single timing interval denote inter arrival times packets covert commu nication resulting channel storage ip scc 
alternatively alice uses set timing intervals purpose resulting channel timing ip scc 
underlying operation similar show channel protocol easier implement robust presence timing synchronization errors 
storage ip scc operates follows alice eve agree priori constant timing interval starting protocol particular time response network event packet sent 
send zero alice maintains silence interval send packets bob 
send transmits single packet bob middle 
receiving covert channel eve monitors transmission line alice bob 
records zero packets observed interval aone 
observing consecutively eve records entire binary string transmitted covert channel 
illustrates running example storage ip scc 
timing ip scc operates follows alice eve agree set timing intervals set associations timing interval zero starting protocol 
simplicity assume agree message shall spend large expense time loves 
henceforth scotland honour named 
planted newly time calling home friends abroad 
encoder 
delay alice eve timing interval 
decoder message shall spend large expense time loves 
henceforth scotland honour named 
planted newly time calling home friends abroad 
fig 

ip storage scc 
example text encoded coding scheme sent bit bit receiving 
message rebuilt decoding bit stream 
timing intervals associations zero 
send zero alice sleeps units time sends packet interval 
send sends packet sleeping units time 
receiving covert channel eve monitors transmission line alice bob 
network packet eve records inter arrival time compares records zero depending previous comparison 
observing consecutive inter arrival times eve records entire binary string transmitted covert channel 
illustrates running example timing ip scc 
observations assumptions designing types ip sccs 
alice eve single covert channel communicate research address multiple channels aggregate packet traffic leak information 
message shall spend large expense time loves 
henceforth scotland honour named 
planted newly time calling home friends abroad 
encoder 
delay alice eve 
decoder message shall spend large expense time loves 
henceforth scotland honour named 
planted newly time calling home friends abroad 
fig 

ip timing scc 
example text encoded coding scheme sent bit bit receiving 
message rebuilt decoding bit stream 

alice ready supply network packets send bob time channel protocol allows arbitrary sends alice sends get requests arbitrary content bob web server high content 

research address cases bob suspicious result amount network traffic generated alice 

original payloads network packets transmitted direct channel alice bob legitimate violate mls policies 
covert message sent indirect channel independent original packet payloads 

raw data flows covert channel binary actual interpretation binary string alice eve 
start frame sof message data bits depends coding scheme error correcting parity bits depends error correcting scheme fig 

components example ip scc frame data error correcting synchronization bits 

additional bits may included transmission reasons additional parity bits may appended data add redundancy error correction caused transmission errors errors arising packet lost delayed additional bits may added purposes maintaining synchronization alice eve event clocks covert data may encrypted add layer privacy obfuscation 
implementation employ error correcting codes encryption 

covert message transmission subdivided smaller blocks binary data referred frames 
example frame consists data bits synchronization bits error correcting bits 
shows repre sentation frame 
frames equal length actual length interval frames influenced parameters en coding scheme network 
implementation frames composed bit ascii encoding character start frame sof bit storage ip sccs discuss section optional bits error correction hamming codes 
explain sof bit detail hamming codes section 
assume unidirectional communication model covert channel 
indirect covert channel assumed unidirectional direct channel bidirectional tcp ip packets acked 
assuming unidirectional channel means eve communicate alice covert channel 
restricting channel unidirectional increases difficulty implementing error free channel 
detail eve acknowledge correct receipt covert bits rate limit alice indicate resynchronize 
channel implementation implemented covert channels berkeley socket library communication protocol python version encode decode data trans channel wrapper called library functions 
software developed ran red hat linux kernel version 
simplicity ip scc prototype transmits packets alice eve directly 
scenario apparently violates policy direct communication allowed mls system 
argue traffic pattern generated channel packet traffic generated scenario described appendix channel traffic pattern shaped covert message timing interval direction communication alice shapes traffic eve effect 
argue terms channel bandwidth ip scc prototype provides upper limit 
scenario eve eavesdropping eve lose information caused error observation 
traffic pattern remains detection schemes introduce sections monitor channel anomalous traffic patterns unaffected 
sleep sleep message 
send sof message 
frame 
zero frame 
sleep send sleep sleep int fig 

alice execution flow diagram storage ip scc 
channel implementation differs slightly storage timing ip sccs 
storage ip scc software uses blocking non blocking berkeley sockets alternates transmit covert message eve 
detail eve uses blocking socket wait sof packet arrive frame 
packet observed switches non blocking socket record remaining bits frame reverts back blocking socket wait sof packet frame 
illustrate execution flow alice eve storage ip scc figures 
encoded message alice sends packet middle timing interval sof received time interval passed 
wait listen message 
packet received frame 
record sleep time interval passed 
blocking non bloc ki fig 

eve execution flow diagram storage ip scc 
record zero silent zero 
sending data bits frame alice sends sof denoting frame 
eve receives sof bit blocking socket resolved eve switches non blocking mode 
non blocking mode eve receiver program continues execution checks packet arrives timing interval 
eve receives packet interval recorded 
zero recorded eve advances interval zero tau tau eep en mes ag 
fig 

alice execution flow diagram timing ip scc 
send packet necessary number bits frame received 
frame completed eve switches back blocking mode listens sof 
blocking socket pauses waits sof frames implementation provides inherent synchronization 
scheme entirely solve synchronization problem network congestion jitter discuss various solutions synchronization problems section 
contrast timing ip scc software simpler 
main difference storage channel timing channels events packet arrivals tied symbols bits storage channels events tied intervals 
advantage scheme longer need non blocking sockets wait silent intervals event explicitly signaled packet arrival 
timing ip sccs single blocking socket record packet arrival times employ sof bit 
implementation timing ip sccs straightforward prone timing packet received time belongs 
zero bin listen record zero blocking bin record message 
message 
fig 

eve execution flow diagram timing ip scc 
synchronization errors discuss section 
illustrate execution flow alice eve timing ip scc figures 
ip sccs configured run application port 
traffic pattern expected vary application choice protocol hide channels affect detection ability 
example show experimentally section udp traffic generates patterns regular covert channel traffic caused best effort nature 
running covert channel software udp port hide channel better running example telnet port 
covert channel analysis assess efficacy ip sccs terms bit character accuracy number bits characters transmitted correctly divided total number bits characters channel bandwidth 
factors affect channel accuracy bandwidth 
contention noise amount non covert traffic eve observes covert channel potentially reduce channel accuracy 

clock skew amount jitter network potentially result loss synchronization alice eve event clocks 
section investigate effects factors channel accuracy bandwidth results empirical study different choices timing intervals 
channel accuracy evaluate channel efficacy provide upper bound character accuracy investigate noiseless ip sccs 
assume ip sccs free contention noise eve capable isolating network packets generated alice destined bob ones originating destined users network 
scenario clock skew factor affects channel accuracy 
ip sccs leak information timings packets generated alice observed eve 
distributed systems may delay time packet generated observed 
delay constant eve simply adjust packet clock compensate delay 
delay varying time packet travels alice eve inter arrival times observed eve longer exactly ones generated alice 
effect called clock skew 
clock skew network caused varying network conditions result slight increase decreases latency 

delay alice eve 


alice eve fig 

zero insertion zero deletion example storage ip scc 
alice eve known network jitter 
potentially affect timing network packets traveling alice bob eve reduce channel efficacy 
channel synchronization 
important problem ip sccs related clock skew synchronization alice eve packet clocks 
example clock skew cause eve record packets arriving time interval intended 
storage ip scc skew result individual bit flip zero insertion zero deletion illustrate 
individual bit flips corrected error correcting codes insertion deletion errors potentially cause entire series transmission shifted 
insertions deletions possible ip sccs 
insertion deletion errors apply storage ip sccs 
timing ip sccs network packet correspondence single bit information storage ip scc packet delay cause additional zeros inserted 
timing ip sccs bit errors independent carried bit delay 

storage case insertion potentially shift entire bit string 
advantage storage ip channels timing channel suitable bit error correction discuss 
way remedy clock skew error correcting codes ecc correct individual bit errors 
add additional bits message detect correct errors transmission 
code rate ecc defined ratio length original message word length codeword 
drawback increase number bits transmitted 
study employed hamming codes computationally simple encode decode capable correcting error codeword 
increase accuracy employ sophisticated reed solomon codes turbo codes 
scheme storage channels employ coding schemes take advantage lack insertions deletions 
additional scheme employed prevent synchronization errors storage ip sccs sof bit frame switch blocking socket time frame completely transmitted 
scheme isolates transmission errors individual frames propagation errors frames aligning alice eve timing windows time sof bit transmitted 
enhanced sof scheme introducing silent intervals frames 
silent interval packet transfer occurs alice eve channel recovers errors occurred period 
assume parties previously determined length silent interval 
interval default value covert channel initially send value actual data transfer starts 
alice enter silent state time transmission 
way knowing eve received covert bits correctly covert channel unidirectional 
alice observe changing network conditions decision pause transmission 
example sudden change round trip time rtt alice eve signal alice enter silent state 
receiving eve simply waits arrival sof packet packet arrives string possibly erroneous zeros takes action 
simpler option enter silent state periodically clear channel 
method increases channel accuracy expense transmission rate 
slow transmission introducing silent periods transfer occurs channel adapt changes gradually network conditions change 
interval adjusting scheme eve closely monitors time packet arrives compares projected ideal case expected arrival time packet current timing interval 
comparing computed deviation ideal actual times positive negative depending packet arrived early late 
eve simply adds value timing interval adjusts clock arriving packet 
scheme useful incremental change network conditions persists longer lifetime single packet 
lead errors change network delay greater timing interval adjust incorrect timing interval 
precaution restrict maximum adjustment consecutive intervals 
advanced solutions combating synchronization errors caused clock skew self synchronizing codes phase locked loops pll 
method employs encoding schemes specifically designed detect loss synchro recover state resynchronization 
method closed loop feedback circuit designed track synchronize output signal input signal frequency phase 
methods proved effective communications applied channels achieve better accuracy 
channel bandwidth ideally shortest timing intervals possible yields highest data rate 
rate limited factors 
alice packet generator bottleneck generate packets higher rate generator rate 
limiting factor alice side precision packet 
shorter timing intervals routine may fail sleep precisely required amount time 
constraints apply eve observer routine 

networks jitter negative impact clock skew channel accuracy increases shorter timing intervals 
short timing intervals small variation interval may alter symbol association place different partition variation may negligible long intervals 

timing intervals yield high data rates may anomalous comparison normal traffic network 
empirical evaluation assess efficacy covert channel experimentally implemen tation storage ip scc 
covert channel ran purdue georgetown university networks subject changing network conditions 
mal network conditions route communicating parties twelve hops average rtt msec 
bit error correction hamming codes computationally simple encode decode 
calculate bit character accuracy implementation levenshtein distance edit distance 
ip sccs capable sending binary text data ascii encoding 
cases software divided accuracy timing interval vs accuracy timing interval sec fig 

timing interval versus accuracy different values silent interval synchronization scheme 
resulting bit string bit codewords expanded bits hamming error correction 
effect timing interval size investigated potential data rate channel decreasing timing interval accuracy drops 
mark point threshold thought boundary lossless lossy communication calculate corresponding channel bit character rate 
experiment employed storage ip scc channel periodic silent intervals synchronization scheme described section denoting frequency synchronization scheme goes silent period timing intervals 
character coding bit ascii error correction 
report trade timing interval channel accuracy 
channel provided nearly lossless communication larger intervals cost lower transmission bandwidth 
results show threshold value timing interval seconds intervals greater guarantee nearly character accuracy values equivalent bit transfer rate bits second bps 
ascii encoding sof bit taken account calculate character transfer rate characters second 
expected channel accuracy remains high larger timing intervals 
remains slightly higher transmissions periodically paused resynchronization 
effect network conditions additionally investigated case network congestion effects performance covert channel 
ran covert channel congested network highly varying rtt alice eve mean rtt msec 
normal rtt values channel showed steady behavior mean rtt msec 
evaluations showed congestion results lower accuracy rate 
example timing interval set observed average character accuracy normal conditions accuracy dropped congested network 
clearly interval increased retain accuracy periods high congestion 
storage timing 
designing ip sccs investigated storage timing channels separately noted subtle differences 
despite differences storage timing ip sccs related constructs example storage channel provide reduction show equivalent timing channel constructed vice versa 
see consider timing ip scc single state response packet observed timing intervals 
channel construct storage ip scc states packet packet absent derived single state packet arrival 
similarly storage ip scc timing interval construct timing ip scc 
additionally claim detect storage ip scc transmits bit string network detect timing equivalent channel 
sections detection methods measures capture regularity packet inter arrival times generated channels 
consider storage ip scc timing interval generates different inter arrival time values equal number different number zeros ones codeword set 
contrast timing equivalent ip scc uses timing intervals generates clusters inter arrival times generating regular inter arrival time pattern 
concentrate storage ip sccs covert channel detection conjecture detection measures channels timing ip sccs 
noiseless channel detection storage ip scc pre specified timing interval con network packets sent alice observed eve 
similarly timing ip scc pre specified timing intervals 
behavior implies regular ity terms packet inter arrival times comparison packet inter arrival times generated legitimate process argue packet traffic generated ip sccs highly regular anomalous comparison traffic generated legitimate processes compared www traffic 
show example plot inter arrival times generated channels sending sample text alice bob eve 
storage ip scc observe human beings born free equal rights 
endowed reason conscience act spirit eol inter arrival time sec packet number inter arrival time sec packet number inter arrival time sec packet number fig 

inter arrival times different traffic types 
simulated ip storage scc secs clock skew 
simulated ip timing scc secs sec clock skew 
example ii www traffic 
packet inter arrival times grouped clusters 
similarly inter arrival times timing ip scc grouped clusters 
shows clustering obvious sample www traffic taken ii dataset 
identify type covert channel requires able capture reg 
section introduce measures empirically evaluate efficacy terms type false positive fp type ii false negative fn error rates 
inter arrival time sec packet number relative difference inter arrival time sec packet number packet number fig 

inter arrival times actual run storage ip scc secs 
actual values 
sorted values 
relative differences 
measures detection capture type regularity described introduce detection measures similarity compressibility 
similarity derive similarity measure sort inter arrival times collected ip sccs 
sorted list compute relative difference pair consecutive points 
example relative difference pi pi computed pi pi illustrate process compilation pi inter arrival times collected implementation storage ip scc ran purdue georgetown universities 
result network jitter created clock skew inter arrival times longer create perfect clusters 
sorted inter arrival times compute efficient measure similarity call similarity computing percentage relative dif ferences constant number 
claim noiseless ip sccs majority pairwise differences sorted inter arrival time list small 
large jumps step function 
similarity scores ip sccs high 
claim ip scc similarity scores comparably higher legitimate channel scores 
compressibility kolmogorov complexity string defined shortest universal computer program produces string see 
denoted notion provides lower bound representation string computes maximum available compression producing shortest possible compressed string arbitrary string kolmogorov complexity computable shelf compression algorithms approximation 
derive second similarity measure string want compress shelf compressor alphabet symbols string drawn length resulting compressed string define compressibility compression rate obtain dividing length length formally compressor gzip compressibility length operator 
claim compressibility inter arrival packet times generated noiseless ip scc higher ones generated legitimate channels 
inter arrival times numerical values compression works strings 
section detail convert numbers strings pre processing step compression 
discussion approaches additionally investigated approaches fruitful obvious statistical point view 
indexes dispersion point process tool network characterization 
index dispersion intervals idi qualitatively compare inter arrival times point process poisson pro cess serving basis idi unity 
idi provides finer measure defining variability process second order moment analysis 
defines variability burstiness network traffic changes variance sum consecutive inter arrivals 
measure appears promising requires number assumptions including stationarity need correct interpretation results 
study impose assumptions distributions covert legitimate traffic 
avenue examined statistical non parametric tests similar network traffic analysis 
applications tests mainly concentrated network traffic characterization modeling 
goal determine streams come empirical distribution example non parametric goodness fit test kolmogorov smirnov test 
research seeking model legitimate covert network traffic 
goal define measures differentiate covert legitimate traffic methods directly applicable detection ip sccs 
empirical evaluation section empirically show similarity compressibility measures able detect ip sccs compressibility performs better similarity 
experiments applied measures legitimate channels ip sccs 
legitimate traces extracted second version datasets ii collection tcp www ftp data ssh udp traces collected wand research group 
different traces legitimate traffic type trace contained sufficient number packets run covert channel running packets 
collect inter arrival times covert channel ran storage ip sccs set secs transmitted sample text purdue georgetown universities 
trace eliminated values larger second eliminate large inter arrival time values data occur packet transfer 
allows deal short values concentrate network effects inter arrival times user effects time gaps requests 
goal model identify traffic distribution determine accurately detect covert channel short window line detection 
experiments report results windows size 
ran ip scc real network purdue georgetown legitimate traffic recorded inter arrival times datasets 
drawback network conditions number hops jitter excluding case jitter impact results 
measures look absolute inter arrival time values compute measures regularity terms relative differences values 
similarity score similarity ii epsilon ssh scc udp ftp data www fig 

similarity scores various types covert legitimate channels 
similarity results report results measure table 
axis shows different arbitrarily chosen values axis shows mean similarity score averaged traces traffic type percentage pairs sorted inter arrival time values difference 
anticipated results show striking difference ip scc ii scores 
example similarity score ip scc ftp data 
average sorted ip scc inter arrival times relatively differ ftp data differ 
result observe table higher storage channel get better accuracy higher similarity scores 
implies accurate channels easier distinguish normal traffic easier detect 
compressibility results table similarity scores storage ip sccs various 
applying compressibility measure needed convert numerical dataset set strings compression works strings 
smoothed dataset significant digits rounding third digit added letter depending number zeros decimal point 
example transformed way identify values repeating zeros create compressible datasets added pre processing phase performed experiments gzip compressor 
report mean compressibility score traffic type averaged traces legitimate channels 
results show compressibility scores ssh www ftp data datasets lower ip scc compressibility scores 
example compressibility score storage ip scc www average 
addition observe increase timing interval ip scc compressible 
example compressibility score ip scc 
conjecture accurate covert channel compressible dataset 
compress better effect evenly distributed datasets repeating zeros favor datasets data points small magnitudes 
compressibility score compressibility ii scc scc scc udp www fig 

compressibility scores various types covert legitimate channels 
automatic detection assess efficacy channel detection experimentally evaluated efficacy measures terms fn fp rates 
procedure worked follows legitimate traffic type www ftp data udp randomly chose traces training 
reserved remaining independent traces testing 
training phase calculated similarity compressibility scores training trace computed mean standard deviation determine thresholds 
main difference similarity compressibility calculated different learned thresholds values chosen arbitrarily 
compressibility calculated threshold 
classify test trace legitimate covert calculated similarity value compressibility score compared learned threshold 
dataset classified covert combined score learned threshold legitimate 
similarity combined score determined omit ssh results ii contain ssh traces training testing 
table ip scc detection efficacy similarity compressibility thresholds 
threshold application fp fn fn fn similarity www ftp data udp www ftp data udp compressibility www ftp data udp www ftp data udp majority vote different values 
example classified trace covert scores values threshold 
compressibility combined score simply compressibility score 
results report averages runs procedure 
run different partition legitimate traces training testing 
report average fp fn rates similarity compressibility measures table 
list observations follows 
results suggest distinguish ip scc traces www ftp data traces fn low false alarm rates similarity compressibility measures thresholds respectively 

udp results high fn rates suggest distinguish ip scc traces udp traces reasonable false alarm rate 
udp best effort protocol packets sent soon ready flow control 
udp inter arrival times tend regular stable network conditions generate higher similarity compressibility scores compared tcp inter arrival times 

compressibility measure fares better similarity measure terms fn rates comparable fp rates 
compressibility uses measurement similarity requires majority vote mea 
conjecture compressibility superior measure 

claimed ip sccs higher yield higher detection rates 
higher timing intervals yields accurate channels generate regular inter arrival times result 

claim fp rates measures potentially lowered increasing number datasets training phase 
datasets training experimental short coming limited available legitimate data 
real detection environment hundreds traces train classifier 
noisy channel detection noisy ip scc network covert channel observe legitimate covert traffic 
channel may arise cases eve isolate net packets originating alice result shared transmission line tapped 
addition introducing noise channel artificially shown effective jamming covert channel limiting band width 
study assume alice injects noise transmission line intentionally increase irregularity packet inter arrival times thwart regularity detection schemes 
section empirically show channel noise reaches certain level regularity detection measures fail identify covert channel alice potentially hide covert channel mixing legitimate traffic 
observation argue detect hidden ip sccs need localized measures focus suspicious segments dataset 
employ compression similarity measures accompanied sliding window algorithm search covert channels mix datasets 
conclude section empirical study evaluate efficacy performance methods 
empirical evaluation noiseless measures section show regularity measures fail detect noisy ip sccs reasonable false alarm rates noise levels higher 
apply similarity compressibility measures mix datasets formed mixing packet inter arrival times extracted www ftp data udp datasets ones generated ip sccs 
example create ftp data mix dataset data points picked consecutive data points ftp data dataset inserted block data points selected ip scc dataset randomly selected location 
scheme resembles cases apply measures larger window duration covert communication 
mix data points matter detection measures measure pays attention relative ordering individual data points 
measures rearrange data points pre processing step similarity measure sorts data points 
experiments setup datasets section 
report average scores similarity measure mix dataset noise similarity score 


scc www ftp ata ud www similarity mix ftp ata ud www ftp ata ud www ftp ata ud fig 

similarity scores noisy ip scc different traffic types noise levels set 
levels 
similarity scores mix datasets comparably lower ones calculated section 
exam ple mean similarity score pure ip scc ftp data mix dataset generates score 
average scores compressibility measure show similar trend illustrate 
compressibility scores mix datasets tially lower ones calculated pure covert channels section 
example mean compressibility score pure ip scc secs ftp data mix dataset generates score 
determine automatic detection measures fare pres ence noise repeated automatic detection study section compute fn rates 
chose training traces legitimate datasets compute mean standard deviation determine thresholds similarity compressibility 
reserved remaining independent traces testing 
averaged results runs time compressibility score scc www compressibility mix ftp www ftp www ftp www ud fig 

compressibility scores noisy ip scc different traffic types noise levels set 
different partition legitimate traces training testing 
report results table list observations follows 
results suggest measures detect www ftp data mix datasets noise level 
conclude measures low noise levels 

compressibility detects www ftp data mix datasets noise level similarity measure completely fails 
conclude compressibility robust measure detecting noisy ip sccs 

measure detect mix datasets reasonable false alarm rate regardless mix type udp mix datasets regardless noise level 
table noisy ip scc detection efficacy similarity compressibility thresholds similarity compressibility 
application noise fn fn fn similarity www ftp data udp compressibility www ftp data udp measures detection previous section suggests regularity detection measures fail detect presence ip sccs reasonable detection rates mix dataset 
detect noisy ip sccs take approach identifying elimi noise mix dataset finding measure robust presence noise 
need localized methodology fo suspicious segments dataset individually relation 
employ sliding window methodology traverses mix dataset windows size strides size idea collect local information window individually relation 
collect individual relative information window introduce compressibility walk walk methods respectively 
identify mixed dataset windows suspected generated covert channel eliminate windows apply mea sures suspicious window 
regularity measures effectively low noise levels local approach potentially generate higher detection rates compared cases apply measures globally 
compressibility walk compressibility walk traverses mixed dataset strides size computes compressibility score window size windows allowed overlap cases wand investigate cases larger covert channel window noisy covert channel 
claim compressibility scores datasets generated ip sccs higher ones generated legitimate channels windows contain covert channels reveal peaks plotted graph 
alternative devise similarity walk methodology omit approach showed section compressibility superior measure compared similarity particularly presence noise 
walk section evaluate sliding window approach empirically show examining individual windows sufficient 
need investigate relation consecutive windows need metric measures similarity 
compression similarity metric approximation conditional kolmogorov complexity 
strings conditional kolmogorov complexity defined shortest representation intuitively information share shorter representation compression similarity metrics various research areas 
compressor approximates kolmogorov complexity 
conditional compression approximated compression distance measure cdm defined cdm concatenation operator 
cdm dissimilarity measure 
authors show metric performs better cdm defined combining metric sliding window approach walk traverses mixed dataset similar fashion compressibility walk time computing scores consecutive windows 
allow windows overlap 
claim time similarity measure score window data points generated legitimate channel generated covert channel lower score windows contain data points generated legitimate channel 
empirical evaluation section empirically show compressibility walk walk successful identifying hidden covert channels mix datasets yielded superior performance able identity covert channel cases 
experiments setup datasets section 
demonstrate sliding window approach ran compressibility walk www dataset data points set 
dashed lines top graphs illustrate cases dataset purely generated www channel 
solid line graph illustrates results www mix dataset 
clearly peaks upper graphs show location hidden covert channel 
conclude ip sccs reveal peaks long compressibility legitimate covert channels distinguishable 
similarly ran conditional compressibility method walk datasets set 
dashed lines bottom graphs show results procedure run pure www datasets 
solid line graph illustrates results www mix dataset 
metric shaped curve bottom graph suggests existence covert channel 
expected locations channels consistent compressibility graphs 
show walk superior compressibility walk methods tra versed example udp mix dataset 
left illustrate unsuccessful attempt compressibility walk locate covert channel 
curve graph appears flat suggesting covert channel exists covert channel hidden middle section 
contrast walk compressibility compressibility walk type www number windows walk type www number windows compressibility compressibility walk type www number windows walk type www number windows fig 

top row compressibility walk results dashed pure www channel solid www mix channel 
bottom row walk results dashed pure www channel solid www mix channel 
compressibility compressibility walk type udp number windows walk type udp number windows fig 

left compressibility walk fails identify hidden channel udp mix dataset 
right walk identifies hidden channel 
compressibility compressibility walk number windows compressibility compressibility walk number windows fig 

left compressibility walk identifies channels 
right compressibility walk identifies channel 
performs covert channel identified signa ture shape illustrate right graph 
phenomenon occurs compressibility scores udp datasets high ip scc scores causes compressibility walk fail 
compressibility walk works compressibility score covert channel significantly higher channels scores 
contrast walk relative measure individual compression scores matter 
limitations conclude section discussion limitations measures detecting noisy ip sccs 
experiments window stride sizes gave best results 
reality search methods sensitive choice parameters choosing window size larger covert channel size may reveal channel 
illustrate example compressibility walk 
left graph covert channels identified setting right covert channel visible setting 
size covert channel known time detection methods need run different sets parameters identify hidden covert channels 
time complexity methods function data points window size slide size running time compression algorithm 
compressibility walk performs compression window walk performs 
running time algorithms 
practically compression expensive operation implementation search algorithms compress window independently 
performance improved compression information carried current window previous window windows overlapping 
lastly create mix dataset reveal covert channel hidden inside 
example scattered approach hide short bursts covert channel communication dataset create balanced windows balanced terms compression scores similarity 
type noisy ip scc difficult identify resulting covert channel rate limited 
example alice uses mix dataset avoid detection reality means covert channel bandwidth halved 
additionally forcing alice short bursts covert channel traffic avoid continuous covert channel alice eve alice needs switch covert legitimate channels parties need know packets belong covert channel times 
chapter summary crucial step covert channel design find exploit shared resource communication medium design 
emphasis hiding traffic generated channels secrecy covert channel relies secrecy knowing shared resource 
chapter argued shared resource identified covert traffic distinguished legitimate traffic cases way event covert channels adjust timing events signal information 
described implementation ip covert channel discussed subtle issues arose design discussion efficacy 
showed regularity noiseless ip covert channel differentiate legitimate channels efficient online detection measures provided detection rates 
repeated similar analysis noisy ip covert channels legitimate covert traffic mixed obfuscate covert traffic 
showed online detection measures failed identify covert channel reasonable false alarm rate noise levels higher 
channels investigated effective search mechanisms find regions traffic appear covert channels 
local methods computationally expensive best deployed offline 

time replay network covert channels time replay channels hide channel traffic normal traffic patterns replaying previously recorded specifically engineered sequence timing intervals 
certain cases event sequence generated time replay covert channel equal distribution sequences generated legitimate channels system creating channels undetectable analyzing localized distribution inter arrival times 
formally time replay covert channel event covert channel timing intervals events inter event times taken sequence values associated symbol rule 
time replay covert channels represent family event covert channels particular channel channel type 
time replay covert channel categorized storage timing hybrid channel depending number different events timing intervals uses 
chapter detail time replay covert channel definition design operation sections 
provide discussion channel efficacy list factors af fect channel accuracy bandwidth section 
section discuss detection schemes applicable time replay covert channels general investigate conditions schemes potentially 
sec tion investigate efficacy existing channel prevention elimination techniques applied channels provide discussion existing elimination techniques improved 
covert channel definition time replay covert channels replay previously recorded event activity sim ple effective fold strategy obtain pre recorded event sequence input divide sequence partitions alphabet associate partition symbol set thresholds rules send symbol delaying amount time indicated timing value corresponding partition generating event 
example suppose malicious user alice wishes leak code eavesdropper eve time replay covert channel 
suppose composed types symbols zero binary code 
send alice chooses timing value partition input sequence generates event idling time 
send uses partition 
timing value partition 
receiving side eve monitors events 
observing event eve calculates inter event time current event determines partition belongs records depending decision step 
time replay covert channel alice sending routine takes code sequence inputs generates sequence events es message encoded inter event times event sequence 
alice uses rules divide partitions 
rule applies interval timing values associated symbol ti tj ti tj timing values ti tj ands symbol 
example composed zeros ones rule zero divides partitions partition associated zero tmax associated 
rule single timing interval setting ti tj 
applying sending routine generates sequence events transmitted eve 
receiving covert channel eve observing routine takes observed event sequence es input computes reversing alice sending routine operations 
channel alice eve able pre negotiate rules event types encoding scheme 
alternative informa tion hard coded covert channel software pre negotiation needed parties 
second alternative covert channel implementation storage scc exchange necessary information fly 
case eve receiving routine need know original time sequence need know rule set covert channel creation distributed mls system properly follows policy observer low security level may able observe presence high network traffic having access encrypted contents 
assuming alice high sender bob high receiver communicating alice eve low observer information shared alice eve timing packets traveling alice bob 
ip time replay covert channels section timing information covertly transmit secret message alice eve adjusting transmission intervals network packets alice sends bob assumptions 
alice eve single covert channel communicate research address multiple channels aggregate packet traffic leak information 

alice ready supply network packets send bob time channel protocol allows arbitrary sends alice sends get requests arbitrary content bob web server high content 

research address cases bob suspicious result amount network traffic generated alice 

original payloads network packets transmitted direct channel alice bob legitimate violate mls policies 

raw data flows covert channel binary actual interpretation binary string alice eve 

additional bits may included transmission reasons additional parity bits may appended data add redundancy error correction caused transmission errors errors arising packet lost delayed additional bits may added purposes maintaining synchronization alice eve event clocks covert data may encrypted add layer privacy obfuscation 
implementation employ error correcting codes encryption 

covert message transmission subdivided smaller blocks binary data referred frames 
example frame consists data bits synchronization bits error correcting bits 
frames equal length actual length interval frames influenced parameters encoding scheme network 
implementation frames composed bit ascii encoding character optional bits error correction hamming codes 

assume unidirectional communication model covert channel 
indirect covert channel assumed unidirectional direct channel bidirectional tcp ip packets acked 
assuming unidirectional channel means eve communicate alice covert channel 
restricting channel unidirectional increases difficulty implementing error free channel 
detail eve acknowledge correct receipt covert bits rate limit alice indicate resynchronize 
channel design ip transmit covert message alice eve bit bit replay channel symbol set composed zeros ones 
lone event system packet arrival controlled alice observed eve 
leak consecutive bits eve alice generates sequence packets encodes covert message adjusting timing packets inter arrival times 
impersonate legitimate behavior avoid generating regular anomalous packet sequences ip adjust packet timings pre recorded normal sequence 
ip choice inter arrival sequence directly impacts secrecy channels better input inter arrival sequence normal behavior covert channel 
illustrate covert channel operation 
alternative ip designs differ channel symbols associated inter arrival times binary matching channel bmc inter arrival time sequence suppose alice eve capable negotiating single cutoff value cutoff example median sorted inter arrival time sequence calculated alice 
binary matching channel bmc parties share rule partition sequence cutoff cutoff max 
inter arrival times shorter cutoff associated zero inter arrival times longer associated 
alternatively buffered cutoff value cutoff increase channel accuracy 
case alice maintains fig 

ip time replay covert channel 
example text encoded coding scheme sent bit bit receiving 
message rebuilt decoding bit string 
bins timing value partition 
receiving eve need know exact inter arrival times cutoff value cutoff 
bmc operates follows send zero alice randomly chooses timing value zero zero bin sends packet bob eve idling zero time 
send uses bin selection 
timing value 
receiving side eve monitors transmission line alice bob 
detecting presence packet traveling alice bob eve calculates inter arrival time observed currently observed packet compares observed cutoff records zero observed cutoff observed cutoff 
rule matching channel rmc arranging inter arrival times bmc may lead detection similar timing intervals associated symbol short values zero long values 
alternative channels designed complex rules hide channel structure better 
rule matching channel rmc rules divide inter arrival time values partitions 
example sample rule set zero zero partitions inter arrival space mutually exclusive blocks 
rule partition associated symbol randomly relation exists partitions 
rmc operates follows send zero alice randomly chooses timing value zero zero bins sends packet bob eve idling zero time 
send uses bins selection 
receiving side eve monitors transmission line alice bob 
detecting presence packet traveling alice bob eve calculates inter arrival time observed currently observed packet compares observed complete set rules records zero observed belongs rule partition zero association 
exact matching channel emc alternative ip designed uses independent rule timing interval call exact matching channel emc 
emc rule set composed tuples zero zero scheme correspondence rules timing values 
rmc rule associated symbol randomly relation exists timing intervals 
emc operation identical rmc time rules timing intervals 
comparison limitations bmc emc special cases rmc ork rules divide sequence partitions length input sequence 
rest chapter mainly concentrate bmc type ip refer emc sake comparison 
bmc type channels design advantages list rule negotiation initiate covert channel alice eve need pre negotiate rule bmc rules rmc 
rule comparison observing packet arrival eve needs rule comparisons bmc comparisons rmc comparisons emc decide observed symbol 
correctness correct operation channel rmc emc need timing values associated symbols bmc requires timing values equal cutoff value associated symbol 
example emc occurs value needs associated symbol design cutoff value 
accuracy accurate operation channel rmc emc need similar timing values associated symbols guaranteed bmc design 
stability emc rmc unstable channels extremely vulnerable perturbations individual inter arrival time values caused channel noise intentionally bmc stable channel affected small changes inter arrival value 
observations concentrate bmc type channels section discuss efficacy ip 
sections include emc discussion compare terms channel detection elimination 
covert channel analysis assess efficacy ip terms bit character accuracy number bits characters transmitted correctly divided total number bits characters channel bandwidth 
factors affect channel efficacy 
contention noise amount non covert traffic eve observes covert channel potentially reduce channel accuracy 

clock skew amount jitter network potentially result loss synchronization alice eve event clocks 

sequence selection choice inter arrival sequence potentially affect channel accuracy 
section investigate effects factors channel accuracy bandwidth results empirical study different choices inter arrival time sequences 
channel accuracy evaluate channel efficacy provide upper bound character accuracy assume ip free contention noise 
eve capable isolating network packets generated alice destined bob ones originating destined users network 
scenario clock skew sequence selection factors affect channel accuracy 
clock skew network caused varying network conditions result slight increase decrease latency alice eve network jitter 
factor potential affect timing network packets traveling alice bob eve reduce channel accuracy 
example temporary congestion network delay packet change symbol association receiving side 
sequence selection plays important role determining damage clock skew cause choice sequence affects channel accuracy 
ideally sequence timing intervals associated different symbols need distinct possible 
example bmc eve needs able differentiate timing values belong zero partition ones belong partition 
depends sequence selection individual timing intervals associated partition 
section illustrate effects sequence selection channel accuracy empirically 
effective way remedy clock skew sequence selection deficiencies error correcting codes ecc 
add additional bits codeword detect correct errors transmission 
code rate ecc defined ratio length original codeword length codeword added error correcting bits 
drawback increase amount information transmitted channel 
study hamming codes bit error correction 
channel bandwidth ideally sequences shortest inter arrival times possible yields highest data rate 
rate limited factors 
alice packet generator bottleneck generate packets higher rate generator rate 
limiting factor alice side precision packet 
shorter inter arrival times routine may fail sleep precisely required amount time 
constraints apply eve observer routine 

networks jitter negative impact clock skew channel accuracy increases shorter timing intervals 
short timing intervals small variation interval may alter symbol association place different partition variation may negligible long intervals 

sequences yield high data rates may anomalous comparison normal sequences network 
empirical evaluation assess efficacy covert channel experimentally implemented bmc prototype berkeley socket library python 
bit error correction hamming codes computationally simple encode decode 
calculate bit character accuracy implementation levenshtein distance edit distance 
experiments bmc replayed www ftp data udp ssh inter arrival time sequences extracted ii dataset sequence contained data points eliminated inter arrival times longer seconds avoid long delays packets 
bmc capable sending binary text data ascii encoding 
cases bmc divided resulting bit string bit codewords expanded bits hamming error correction 
accuracy analysis get upper bound channel accuracy ran bmc machines lan send ascii encoding sample text listed chap collection real world ip traces captured wand research group 
sequence number character accuracy ecc character accuracy www fig 

character accuracy results bmc replaying ii sequences error correction 
ter 
report character accuracy results error correction ii inter arrival time sequences figures histograms 
observe error correction sequences yielded character accuracy sequences yielded accuracy cer tain sequence properties explained section 
error correction sequences yielded character accuracy rates yielded accuracy 
average error correction yielded percent increase character accuracy observed specific advantage type traffic type sequences traffic type gave mixture bad results 
exception ssh sequences fared slightly better sequences yielded accuracy error correction 
sequence number character accuracy ecc character accuracy www fig 

character accuracy results bmc replaying ii sequences hamming error correction 
bit accuracy results followed similar trend illustrate 
results show sequences yielded better accuracy rates rates remaining sequences uniformly distributed interval 
observed sequence bit accuracy yielded character accuracy error correction 
additionally expected bit accuracy rates error correction similar 
final note accuracy rate necessary depends application type 
accuracy rate may sufficient eve decode reasonably understandable message accuracy absolutely necessary covert channel transmitting binary encrypted file 
cases accuracy required streaming traffic covert sequence number binary accuracy binary accuracy www fig 

bit accuracy results bmc replaying ii sequences 
channel employ sequences yield higher data rates expense lowered accuracy 
sequence analysis figures illustrate example ii inter arrival time se quences experiments 
sorted inter arrival times different precision graph axis focus intersection point cutoff value sequence 
graph solid line represents cutoff value cutoff median dashed line packet generator minimum processing time pgen secs python 
appear lie axis resolution 
example sequences provided character accuracy error correction inter arrival time inter arrival time sec packet number inter arrival time sec packet number fig 

example ii www ftp inter arrival time sequences yield high character accuracy bit error correction 
solid line cutoff dashed line pgen 
packet number packet number fig 

example ii ftp udp inter arrival time sequences yield low character accuracy bit error correction 
solid line cutoff dashed line pgen 
inter arrival time sec error correction 
results graph result factors generalized bmc sequences sequence provides sepa ration short long inter arrival times cutoff value intersects sequence point pgen cutoff 
contrast example sequences provided character accuracy error correction error correction 
sequences graph violate conditions particularly third packet generator keep desired packet rate dictated input inter arrival time sequence 
experimental deficiency design faster packet generator allow sequences short timing values 
alice devise accurate channel specifically engineering suitable sequence original sequence 
alternative avoid timing values neighborhood cutoff flat lines 
choosing big value create anomalous output sequences potentially lead detection 
second alternative sequence ignore timing values neighborhood cutoff associate symbol timing value falls interval 
scheme alice sends packets inter arrival times carry information bits 
observing inter arrival time value falls category eve updates arrival time record bits 
resulting channel rate limited difficult detect compared alternative 
final note specifically engineer ideal sequence follows conditions listed bmc channel 
doing resulting sequence deviate normal sequences avoid creating anomalous traffic patterns 
covert channel detection detection common practice secure systems monitor malicious activ ity 
section discuss detection emc bmc type ip represent extreme cases generalized rmc type channels 
investi gate cases channels detectable undetectable analyzing localized distribution inter arrival times 
ip leak covert message alice eve replaying pre recorded inter arrival time sequence 
sin sequence want transmit message text generate sin utilizing pre recorded sequence generated legitimate channel producing sample legitimate distribution previous sequence accessible 
case line defense devise methods determine certain inter arrival times exact ones observed 
covert channel window size known time detection scheme need employ costly search mechanisms similar ones chapter 
alice perturb timing values deterministically adding constant timing values known eve randomly bmc expense lowered channel accuracy pass schemes 
section focus schemes analyze localized distribution inter arrival times sequences detect time replay covert channels 
suppose inter arrival time sequence sin covert message rule set generate output sequence sout alice encodes bit string ascii encoding chooses timing values sin detailed section illustrate 
protocol channel generates sout permutation timing values sin chosen particular way embed assume sout sin 
sin fig 

factors affect output sequence sout time replay channel input sequence sin input message encoder input bit string rule set setup sin equal distribution normal sequence construc tion investigate sout equal distribution 
alice generate sout way true channel virtually undetectable traffic distribution analysis 
sequence generated distinguish distribution sout detection scheme devised detect anomalous activity 
section investigate cases alice devise indistinguishable cases possible 
alice generate output sequence sout depends various factors input sequence sin message encoder rule set input sequence replay previously recorded sequence alice control sin 
devise generation scheme choosing different rule sets message encoders 
terms time replay channels alice employ types channels bmc rmc emc different rule sets 
additionally show adjusting encoding scheme alice ensure sout generated uniformly sampling sin potentially preserve distribution certain distribution types uniform distribution 
detecting emc type channels examine case alice uses emc type ip create covert channel virtually undetectable distribution analysis sout certain conditions 
emc type ip uses rules divide inter arrival sequence partitions size input sequence 
alice arranges channel rule set symbol transmitted zero probability selecting timing value equally remaining timing values 
setup argue alice ensure uniform sampling timing values sin regardless transmitted message sout potentially equal distribution sin depending distribution type 
trivial example uniform distribution uniform sampling produces output uniformly distributed 
example poisson distribution 
shown randomly tagging poisson distributed sequence produces sub sequences poisson distributed see 
parametric test reject null hypothesis sin distributed reject hypothesis sout 
furthermore cases sin follow certain distribution retain rigid structure timing value followed certain value uniform sampling potentially preserve structure sequence 
series numbers assumed distribution uniform sampling equivalent non parametric comparison 
uniform sampling reduces sample size potentially preserve structure 
sout generated uniformly sampling sin non parametric test kolmogorov smirnov test comparing reject null hypothesis sin sout drawn underlying population 
way ensure uniform sampling emc type channels sure bit string transmitted uniformly distributed 
determines values selected sin 
alice control message choose appropriate en coding message transformation message encoding 
finding appropriate encoding ensure uniform distribution ones inb hard problem alice need take character frequencies account 
simpler solution find appropriate transformation produce uniformly distributed output bt input bit string transformation bit bit encryption 
alice employ probabilistic encryptor transformed encrypted bit string bt guaranteed indistinguishable random bit string 
cases uniform sampling preserves distribution alice devise emc prototype virtually undetectable distribution analysis protocol 
run covert channel application port inter arrival times characteristically divided clusters telnet streaming 

emc type channel recorded normal input sequence sin rule set probability selecting timing value uniform 

exchange session encryption key eve publicly known bit string key 

encode encrypt bit bit bit secure probabilistic en session key 
send bit bit covert channel 
uniform sampling guarantee preserving distribution input sequence distribution type 
example input sequence bursty uniform sampling fail spot windows characteristic property observed 
distribution types accurate output sample represents input sample depends sampling rate 
conjecture emc type covert channel undetectable distribution analysis cases sout sample distribution sin preserved 
detecting bmc type channels discussed section implementing emc type channels finding put sequences sin characteristically divided clusters infeasible 
comparison bmc type channels easy implement channels resilient factors decrease channel accuracy 
section examine case alice uses bmc type ip generate output se quences sout indistinguishable normal sequences 
bmc type channels rule divide sin partitions 
alice arranges tim ing values symbol transmitted zero probability selecting timing value equally timing values associated symbol 
alice ensure uniform sampling timing values sin regardless transmitted message sout potentially equal distribution sin depending distribution type 
creating uniform sampling scheme bmc type channels trivial emc case 
emc bmc rule set determin divides sin partitions cutoff value cutoff timing value associated symbol randomly 
difference major effect structure transformed sequence sout 
example illustrate effect assume sin poisson distributed sequence easy show deterministically tagging sample points bmc case creates sub samples poisson distributed see 
fore detection scheme parametric test determine output sequence sout poisson distributed 
cases input sequences particular distribution suffer deterministic tagging 
example consider case sin composed group short inter arrival time values followed group long values 
case alice applies uniform sampling emc case assuming normal sequences poisson distributed assumption example 
output sequence sout show behavior sin mixture short long values detected anomalous behavior detection scheme 
avoid alice choose appropriate transformation sout output sequence look sin 
example alice redundant bits increase consecutive zeros consecutive short long inter arrival time values 
eve needs know transformation apply inverse receiving 
case output sequence sout shows similar structure sin depends alice find implement appropriate sampler trans formation sout 
depends distribution type parametric case rigid structure input sequence non parametric case 
alice access sin check generated sout resembles input sequence 
apply various transformations determine yields closest match sin 
freshness input sequence previous sections assumed alice access inter arrival time sequence sin equal distribution normal sequence construction recorded normal sequence 
assumption valid systems normal behavior change long period time 
distributed systems network conditions change time sin may come outdated conditions change may longer indistinguishable sequences generated new conditions 
cases sin longer represent normal behavior output sequence sout permutation values sin anomalous 
distribution analysis scheme comparing distribution sout normal sequence may detect anomalous behavior covert channel 
case alice needs refresh sin reflect current conditions 
example record new sequence current network conditions input sequence time replay covert channel 
case eve needs sequence information able decode message correctly 
bmc type channel alice needs exchange new cutoff value transmitted eve channel 
receiving new cutoff value eve simply adjusts packet monitor decides symbol 
emc type channel entire sequence needs transmitted eve symbol associations 
covert channel prevention elimination eliminating high capacity covert channels crucial requirement trusted systems 
previous section showed time replay channels po hidden detection schemes perform distribution analysis certain conditions 
counter channels needs ensure certain prevention elimination schemes place 
section systems time replay channels prevented design 
investi gate covert channel elimination schemes jamming network pump provide methods aid schemes stopping time replay channels 
preventing time replay channels time replay covert channels applicable system 
example consider case alice runs ip application port normally transmit streaming traffic 
case hide covert channel alice uses recorded sequence previously streaming commu nication 
easy see covert channels employ sequences extremely error prone 
inter arrival times generated streaming application show uniform behavior time 
inter arrival times grouped separated partitions short long clusters required time replay covert channel 
say time replay covert channel inherently prevented setups normal traffic suitable covert communication 
empirical evaluation efficacy ip section showed certain sequences suitable covert communication provided extremely low character accuracy rates 
sequences suffered fact values grouped cutoff value clear separation short long values ensure eve determine timing value belongs partition see figures 
sequence selection plays important role covert channel accuracy 
normal sequences belong set sequences time replay covert channels fail system inherently protected channels type 
argue utilize characteristic strategy design systems explicitly prevent time replay covert channels event covert channels general 
time replay channels differences event timings medium leak information 
time packets packet inter arrival times uniformly distributed time replay channels prevented completely 
main difficulty approach packets generated transmitted protocol responsive changes environment network conditions 
solution problem allow packets transmitted protocol employ certain constructs data pump transmission line transform inter arrival times uniform 
sections discuss existing channel elimination schemes network pump adjust packet timings disrupt channel similar way 
eliminating emc type channels discussed section emc type time replay channels unstable chan nels extremely vulnerable perturbations individual inter arrival time values 
result eliminate channels easily adding small tions packets traveling channel 
data pumps effectively emc type channels modification schemes add probabilistic delay packet disrupting association symbols inter arrival times 
eliminating bmc type channels emc bmc type channels affected perturbation packet ar rival times 
bmc symbol tightly associated timing value emc associated interval cutoff zero cutoff max toone 
small perturbations timing values necessarily change timing value symbol association 
example added packet delays low variance regardless mean eliminate bmc type channels eve observes relative timing values packet inter arrival times actual arrival time 
effect especially visible chan nels sequences separation inter arrival times short long values 
channels data pumps may fail eliminate covert activity completely scheme policy observes timing values perturbed 
result bmc type channels may survive elimination schemes slightly lowered data rate 
actual amount data rate reduced depends amount added average delay packets 
eliminate bmc type channels emc elimination schemes need transform packet timings intelligently remove associations timing values symbols 
bmc type channels important timing values perturbed significantly symbol association disrupted 
method random transformation high variance results sequences different symbol associations compared original sequence 
transformation partially eliminate channel timing values ones distant cutoff potentially retain original association 
effective way mimic systems channels prevented design transform sequences way separation short long values possible resulting sequence create sequences uniform inter arrival times 
transformation time replay channels completely eliminated transformation additionally disrupts shape output sequence way time replay channel deployed 
schemes introduce additional control packet timings usually expense performance 
needs investigate effects transformations system performance guarantee fair scheduling packets example 
chapter summary chapter introduced ip time replay covert channels 
new covert channel family hides channel traffic replaying previously recorded specifically engineered sequence timing intervals 
different types ip utilized different rule set associate time values symbols encoded message zero binary message 
analysis showed binary matching channel bmc rule partition timing value space advantages alternatives rule matching channel rmc exact matching channel emc 
accuracy analysis bmc prototype implementation replayed example sequences extracted ii dataset yielded high data rates sequences low rates 
concluded traffic inter arrival sequences suitable time replay covert channels simply provide separation inter arrival time values 
counter time replay channels investigated detection prevention elimi nation techniques 
analysis showed emc type channels motivated user adjust message encoder devise channel poten tially undetectable distribution analysis 
argued searching transformation difficult bmc type channel way rule set deterministically partitions timing value set 
conjectured time replay covert channel detectable distribution analysis depends alice find implement suitable sampling scheme preserves distribution input sequence 
analysis showed certain systems inherently avoid time replay covert channels uniformity inter arrival times generate streaming traffic 
argued mimic behavior avoid time replay channels creating systems transform event sequences uniform ones 
lastly investigated efficacy existing channel eliminating schemes network pump applied emc bmc type channels 
argued emc type channels easily eliminated current schemes sensitive changes packet timing 
bmc type channels needs transform packet timings intelligently remove associations timing values symbols 

directions crucial step covert channel design find exploit shared resource communication medium design 
little attention methods hiding traffic generated channels secrecy covert channel relies secrecy knowing shared resource 
dissertation showed traffic analysis counter traditional event covert channels employ additional scheme obfuscate channel rate limited complex channels indistinguishable normal channels traffic distribution analysis 
prove statement argued shared resource identified covert traffic distinguished legitimate traffic way event covert channels adjust timing events signal information 
described implementation ip covert channel prototype discussed subtle issues arose design discussion efficacy 
showed regularity noiseless ip covert channel differentiate legitimate channels efficient online detection measures provided detection rates 
repeated analysis noisy ip covert channels legitimate covert traffic mixed obfuscate covert traffic 
showed online detection measures failed identify covert channel reasonable false alarm rate noise levels higher 
channels investigated effective search mechanisms locate regions traffic appear covert channels 
local methods computationally expensive best deployed offline 
second part dissertation introduced ip time replay covert channels new covert channel family hide channel traffic replaying previously recorded specifically engineered sequence timing intervals 
different types ip utilized different rule set associate time values symbols encoded message zero binary message 
analysis showed binary matching channel bmc rule partition timing value space advantages alternatives rule matching channel rmc exact matching channel emc 
accuracy analysis bmc prototype implementation replayed example sequences extracted ii dataset yielded high data rates sequences low rates 
concluded traffic inter arrival sequences suitable time replay covert channels simply provide separation inter arrival time values 
counter time replay channels investigated detection prevention elimi nation techniques 
analysis showed emc type channels motivated user adjust message encoder devise channel potentially undetectable distribution analysis 
argued searching transformation difficult bmc type channel way rule set deterministically partitions timing value set 
conjectured time replay covert channel detectable distribution analysis depends alice find implement suitable sampling scheme preserves distribution input sequence 
analysis additionally showed certain systems inherently avoid time replay covert channels uniformity inter arrival times generate streaming traffic 
argued mimic behavior avoid time replay channels creating systems transform event sequences uniform ones 
lastly investigated efficacy existing channel eliminating schemes network pump applied emc bmc type channels 
argued emc type channels easily eliminated current schemes sensitive changes packet timing 
bmc type channels needs transform packet timings intelligently remove associations timing values symbols 
summary contributions dissertation 
implementation ip covert channel prototype effec tively transmits covert information network ip packet timings 

introduced novel detection measures effectively detect noiseless noisy ip covert channels event covert channels general traffic analysis force malicious users design complex channels rate limit channel avoid detection 

introduced time replay covert channels covert channel family hides event channels argued virtually undetectable distribution analysis certain assumptions 

discussed prevention elimination techniques time replay covert chan nels aid current elimination schemes stopping channels 
additionally provided simple bandwidth analysis hid den ip covert channels investigated efficacy detection elimination techniques experimental study 
directions directions take extend grouped cat egories designing effective covert channels increasing efficacy coun channels 
design better simple time replay covert channels alternative employ better synchronization techniques po positive impact channel accuracy 
example employ advanced solutions combating synchronization errors caused clock skew self synchronizing codes phase locked loops pll 
method employs encoding schemes specifically designed detect loss synchro recover state resynchronization 
method closed loop feedback circuit designed track synchronize output signal input signal frequency phase 
methods proved effective communications applied channels achieve better accuracy 
implement faster packet generators allow sender inter arrival time sequences shorter timing intervals 
additionally extend applying channel design principles implement examples event covert channels different events transmit information 
example inter arrival times cpu requests design simple time replay covert channel investigate efficacy channel techniques similar ones dissertation 
improve countermeasures time replay covert channels provide analysis detection prevention elimination schemes 
inter direction take investigate cases alice devise scheme hide binary matching channel completely cases possible 
depends alice find way imitate input sequence output sequence shows similar behavior regardless mes sage transmitted 
direction investigate schemes help prevent time replay covert channels completely 
need introduce techniques transform inter event sequences way longer possi ble leak information differences timing values making uniform 
needs investigate effects transformations system performance guarantee fair scheduling events example 
list list lampson note confinement problem communications acm vol 
pp 
october 
bell lapadula secure computer system unified exposition multics interpretation tech 
rep belmont ma march 
simmons prisoner problem subliminal channel proceedings crypto advances cryptography 
defense trusted computer system evaluation criteria dod std washington gpo 
patrick gallagher guide understanding covert channel analysis trusted systems national computer security centre ncsc tg library 

schaefer gold linde program confinement kvm proceedings acm annual conference seattle wa pp 
october 
karger wray storage channels disk arm optimization proceedings ieee computer society symposium research security privacy oakland ca pp 
may 

hu reducing timing channels fuzzy time journal computer security vol 
pp 

moskowitz variable noise effects simple timing channel proceedings ieee symposium security privacy pp 

group ii trace archive data available pma nlanr net traces long html giles hajek information theoretic game theoretic study timing channels ieee transaction information theory vol 
pp 
september 
kang moskowitz lee network pump ieee transactions software engineering vol 
pp 

mchugh covert channel analysis tech 
rep december 
cc common criteria 
national institute standards technology 
bishop computer security art science 
addison wesley professional 
covert channels detection protocols scenarios proceedings workshop security protocols verification 
moskowitz kang covert channels stay proceedings ninth annual conference computer assurance gaithersburg md pp 
national institute standards technology 
fraser hand harris ho pratt warfield barham neugebauer xen art virtualization proceedings acm symposium operating systems principles october 
comment confinement problem proceedings fifth acm symposium operating systems principles austin tx pp 
acm press 
operating systems 
reading ma addison wesley revised st ed 
gold linde kvm retrospect proceedings ieee symposium security privacy 
foley model secure information flow ieee symposium security privacy pp 

kemmerer shared resource methodology approach identifying storage timing channels acm transactions computer systems vol 
pp 
august 
wray analysis covert timing channels proceedings ieee computer society symposium research security privacy may 
millen years covert channel modeling analysis proceedings ieee symposium security privacy pp 

covert channel analysis data hiding tcp ip master thesis university toronto 
practical data hiding tcp ip proceedings workshop multimedia security acm multimedia december 
iii countermeasures tradeoffs class covert timing channel tech 
rep 
eggers characterizing network covert storage channels proceedings fourth aerospace computer security applications conference pp 
december 
henry covert channels provided hackers opportunity means current distributed denial service attacks 
ip checksum covert channels selected hash collision tech 
rep 
bauer new covert channels adding web browsers anonymity sets proceedings acm workshop privacy electronic society washington dc pp 
acm press 
li ephremides network layer covert channel ad hoc wireless networks proceedings annual ieee communications society conference sensor ad hoc communications networks pp 
october 
daemon project loki phrack magazine vol 
august 
daemon loki implementation phrack magazine vol 
september 
castro covert channel tunneling tool 
smith covert shells sans institute information security reading room november 
covert channels lans ieee transactions software engineering vol 
se february 
hauser placing backdoors firewalls com may 
murdoch lewis embedding covert channels tcp ip proceedings information hiding workshop may covert messaging tcp timestamps workshop privacy enhancing technologies vol 
pp 
april 
handel hiding data osi network model proceedings international workshop information hiding may 
rutkowska implementation passive covert channels linux kernel chaos communication congress december 
covert channels tcp ip protocol suite monday peer reviewed journal internet vol 

ephremides covert information transmission standard collision resolution algorithms proceedings third international workshop ih pp 

simmons subliminal channels past european transaction telecommunications vol 
pp 

simmons history subliminal channels proceedings international workshop information hiding pp 
springer verlag 
petitcolas anderson kuhn information hiding survey proceedings ieee vol 
pp 
july 
denning lattice model secure information flow commun 
acm vol 
pp 

porras kemmerer covert flow trees technique identifying analyzing covert storage channels may 

tsai gligor formal method identification covert storage channels secure proceedings ieee symposium security privacy april 
wang ju searching covert channels identifying malicious subjects time domain proceedings fifth annual ieee smc information assurance workshop may 

tsai gligor bandwidth computation model covert storage channels applications proceedings ieee symposium security privacy pp 

shannon weaver mathematical theory communication 
urbana il university illinois press 
millen finite state noiseless covert channels proceedings computer security foundations workshop pp 

moskowitz miller simple timing channels proceedings ieee symposium security privacy pp 
may 
moskowitz analysis storage channel twophase commit protocol proceedings fourth ieee computer security foundations workshop csfw pp 
june 
moskowitz miller channel capacity certain noisy timing channel ieee transactions information theory vol 
pp 

son david integrating security real time requirements covert channel capacity ieee trans 
knowl 
data eng vol 
pp 

bernstein hadzilacos goodman concurrency control recovery database systems 
reading ma addison wesley 
golomb limiting behavior channel ieee transactions information theory may 
moskowitz greenwald kang analysis timed proceedings ieee symposium security privacy washington dc ieee computer society 

estimating measuring covert channel bandwidth multilevel secure operating systems inf 
sci 
eng vol 
pp 

modelling fuzzy time system journal computer security vol 
pp 

iii introducing noise bus contention channel proceedings ieee symposium security privacy pp 
ieee press 
iii analyzing bus contention channel fuzzy time proceedings computer security foundations workshop csfw pp 

kang moskowitz pump rapid reliable secure communication proceedings acm conference computer communications security fairfax va pp 
acm press 
kang moskowitz data pump communication tech 
rep washington dc 
kang moore moskowitz design assurance strategy nrl pump ieee computer vol 
pp 

kang implementation pump event driven pump tech 
rep may 
kang moskowitz lee network version pump proceedings ieee symposium security privacy washington dc ieee computer society 
fisk fisk papadopoulos neil eliminating steganography internet traffic active proceedings fifth international workshop information hiding vol 
pp 
october 
handley paxson network intrusion detection evasion traffic normalization protocol semantics proceedings th usenix security symposium august 

gligor auditing covert storage channels secure systems proceedings ieee symposium security privacy pp 

sohn moon lee lee lim covert channel detection icmp payload support vector machine pp 

sohn 
seo moon study covert channel detection tcp ip header support vector machine pp 

berrou glavieux near shannon limit errorcorrecting coding decoding turbo codes proc 
ieee int 
conf 
comm pp 

hamming error detecting correcting codes bell system technical journal vol 
pp 

best phase locked loops design simulation applications 
mcgraw hill professional th ed 
wagner fischer string string correction problem journal acm vol 
pp 
january 
un universal declaration human rights vol 

li lampson kolmogorov complexity application 
springer nd ed 
li chen li ma vitanyi similarity metric proceedings th annual acm siam symposium discrete algorithms pp 
society industrial applied mathematics 
characterizing variability arrival processes indexes dispersion ieee journal selected areas communications vol 
pp 
february 
rosenberg new approach traffic characterisation atm networks iee proceedings communications vol 
pp 
april 
cox lewis statistical analysis series events 
chapman hall 
paxson floyd wide area traffic failure poisson modeling ieee acm transactions networking vol 
pp 

balakrishnan stemm seshan katz analyzing stability wide area network performance measurement modeling computer systems pp 

claffy polyzos 
braun application sampling methodologies network traffic characterization sigcomm conference proceedings communications architectures protocols applications new york ny usa pp 
acm press 
gnu gnu zip available online www gzip org brodley compression machine learning new perspective feature space vectors appear data compression conference dcc 
keogh lonardi parameter free data mining proceedings acm sigkdd international conference knowledge discovery data mining seattle wa pp 

vitanyi wolf algorithmic clustering music string compression comp 
music journal vol 
pp 

vitanyi clustering compression ieee trans 
information theory vol 

wehner analyzing network traffic worms compression 
hirsh yianilos noordewier dna sequence classification compression induction tech 
rep april 
papoulis probability random variables stochastic processes 
mcgraw hill 
goldwasser micali probabilistic encryption journal computer systems sciences vol 
pp 

appendices ip scc scenarios scenario observe packet presence eve monitor shared communication line mac level see packet collision 
collision deduce alice issued packet 
scenario ii option monitor shared communication line alice bob physical level observe signal 
high signal eve deduce alice issued packet 
scenario iii relatively different scenario tcp ip acknowledgment ack packets mls systems allow alice notify successful receipt packet sent eve alice write 
case timing ack packets create covert channel 
vita vita born turkey june 
earned lor degree computer engineering university istanbul turkey 
enrolled electrical engineering department pur due university started research guidance dr carla brodley dr eugene spafford 
awarded fulbright scholarship academic years earned ph degree electrical computer engineering purdue university 

