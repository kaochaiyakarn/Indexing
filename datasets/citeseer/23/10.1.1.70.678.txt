configurable software verification convergence model checking program analysis dirk beyer thomas henzinger gory th simon fraser university canada epfl switzerland 
automatic software verification observed theoretical convergence model checking program analysis 
practice model checkers concerned precision removal spurious counterexamples purpose build refine reachability trees 
lattice program analyzers hand primarily concerned efficiency 
designed algorithm built tool configured perform purely tree purely lattice analysis offers intermediate settings evaluated 
algorithm tool take interpreters predicate abstraction shape analysis configure execution interaction parameters 
experiments show customization may lead dramatic improvements precision efficiency spectrum 
automatic program verification requires choice precision efficiency 
precise method fewer false positives produce expensive applicable fewer programs 
historically trade reflected major approaches static verification program analysis model checking 
principle approaches viewed subcase theoretical relationships little impact practice verification 
program analyzers large target efficient computation simple facts large programs model checkers contrast focus removal false alarms refined analyses relatively small programs 
emphasizing efficiency static program analyzers usually path insensitive efficient domains lose precision join points program paths 
emphasizing precision software model checkers hand usually join domain elements predicates explore reachability tree keeps different program paths separate 
order experiment trade offs order able set dial extreme points extended software model checker blast permit customized program analyses 
traditionally customization research supported part sfu prg swiss national science foundation 
damm hermanns eds cav lncs pp 

springer verlag berlin heidelberg configurable software verification meant choose particular interpreter domain transfer functions widening operator combination interpreters 
go step configure execution engine chosen interpreters 
extreme typical program analyzers execution engine propagates domain elements edges control flow graph program fixpoint reached 
extreme typical model checkers execution engine control flow graph reachability tree tree nodes domain elements node covered node explored 
order customize execution program analysis define implement meta engine needs configured providing addition interpreters merge operator termination check 
merge operator indicates nodes reachability tree merged explored separately classical program analysis nodes merged refer control location program classical model checking nodes merged 
termination check indicates exploration path reachability tree stopped node classical program analysis corresponding state represent new unexplored concrete states fixpoint reached classical model checking corresponding state represents subset concrete states represented node 
motivation practical theoretical theoretically possible redefine interpreter capture different merge operators termination checks single execution engine wish reuse interpreters building blocks experimenting different merge operators termination checks 
particularly useful interpreters combined 
case meta engine configured defining composite merge operator component merge operators composite termination check component termination checks composite transfer function component transfer functions 
combining advantages different execution engines different interpreters yield dramatic results shown predicated lattices 
combined predicate abstraction data flow domain data flow analysis precise distinguishing different paths predicates time efficiency lattice analysis preserved facts difficult track predicates 
configuration predicated lattices just possibility combining reachability trees predicate domain join analysis data flow domain 
example lazy shape analysis combined predicate abstraction shape analysis 
hard wired particular combination merging nodes termination checking coverage individual nodes cartesian product transfer functions 
new configurable implementation permits systematic experimentation variations results 
show different configurations lead large example dependent differences precision performance 
particular useful non cartesian transfer functions information flows multiple interpreters predicate state shape state lattice state vice versa 
choosing suitable interpreters configuring beyer henzinger th meta engine compare effectiveness efficiency symbolic versus explicit representations values different pointer alias analyses software model checking 
years observed convergence historically distinct program verification techniques 
difficult say configurable verifier model checker blast program analyzer configured choosing set interpreters parameters executing combining 
believe distinction longer practically meaningful theoretically meaningful time signals new phase automatic software verification tools 
formalism algorithm restrict presentation simple imperative programming language operations assignments assume operations variables range integers 
program represented control flow automaton cfa consists set control locations models program counter pc initial location pc models program entry set ops control flow edges models operation executed control flows location 
concrete state program variable assignment assigns variable pc value 
set concrete states program denoted edge defines labeled transition relation complete transition relation union edges 
concrete state cn reachable region denoted cn reach exists sequence concrete states cn wehave ci ci 
configurable program analysis configurable program analysis merge consists domain transfer relation merge operator merge termination check explained 
components configure algorithm influence precision cost program analysis 

domain defined set concrete states semi lattice concretization function 
semi lattice consists possibly infinite set elements top element bottom element preorder total function join operator 
lattice elements states 
concretization function assigns state meaning set concrete states represents 
domain determines objective analysis 

transfer relation assigns state possible new states successors transfer labeled control flow edge write ande exists implementation blast allow programs inputs transform intermediate language cil 
interprocedural analysis supported 
configurable software verification soundness progress program analysis domain corresponding transfer relation fulfill requirements join operator precise approximates transfer relation total transfer relation approximates operations 

merge operator merge combines information states 
guarantee soundness analysis require merge result second parameter 
dependent element result merge operator weakens second parameter depending parameter 
furthermore composite analysis merge operator join components dependent 
note operator merge commutative join operator lattice merge 
merge operators merge sep merge join 
termination check checks state parameter covered set states second parameter 
require soundness termination check true implies 
termination check example go elements set second parameter search single element subsumes parameter powerset domain join elements check subsumes parameter 
note termination check preorder lattice 
termination checks second requires powerset domain sep join 
note domain determine precision analysis configurable components domain transfer relation merge operator termination check independently influences precision cost 
program analyses experiments location analysis 
configurable program analysis dl tracks reachability cfa locations components domain dl flat lattice set cfa locations transfer relation ll exists edge op andl syntactical successor cfa considering semantics operation op merge operator merge merge sep termination check sep predicate abstraction 
program analysis cartesian predicate abstraction defined ball 
framework expressed configurable program powerset domain domain 
beyer henzinger th algorithm 
cpa input configurable program analysis merge initial state lete denote set elements semi lattice output set reachable states variables elements elements reached pop reached combine existing state 
merge reached reached reached reached reached return reached analysis domain transfer relation choosing merge operator termination check shape analysis 
shape analysis static analysis uses finite structures shape graphs represent instances heap stored data structures 
express framework sagiv configurable program analysis powerset domain transfer relation choosing merge operator merges termination check stops execution algorithm reachability algorithm cpa computes configurable program analysis initial state set reachable states approximation set reachable concrete states 
configurable program analysis domain transfer relation input program merge operator merge termination check 
algorithm keeps updating sets states set reached store states reachable set store states processed frontier 
state exploration starts initial state 
current state algorithm considers successor obtained transfer relation 
operator merge successor state combined existing state reached 
operator merge added information new state old state subsumed old state configurable software verification replaced new 
merge step resulting new state covered set reached added set reached 
theorem soundness 
configurable program analysis initial state algorithm cpa computes set states set reachable concrete states reach 
cpa show model checking data flow analysis instances configurable program analysis 
data flow analysis 
data flow analysis problem assigning controlflow location lattice element approximates set possible concrete states program location 
solution smallest approximation computing fixpoint iteratively applying transfer relation states joining resulting state state assigned location previous iteration 
decision fixpoint reached usually working list data flow facts newly added 
configurable program analysis data flow setting realized choosing merge operator merge join termination check join note configurable program analysis model improvements precision efficiency existing data flow analysis redesigning domain existing data flow analysis 
example new data flow analysis uses subset powerset domain represented configurable program analysis reusing domain operators appropriate new merge operator different merge join static analyzers astr delayed joins path partitioning improve precision efficiency analysis 
model techniques framework changing merge operator 
model checking 
typical model checking algorithm explores reachable state space program unfolding cfa results reachability tree 
state successor state computed added successor node tree 
branches cfa corresponding branches reachability tree paths meet join operator applied 
tree data structure supports required path analysis cegar frameworks reporting counterexample bug 
decision fixpoint reached usually implemented coverage check algorithm checks time new node added tree state node subsumed node 
blast model checking algorithm implementation operator merge implemented way operates directly reached set 
set reached stored sorted data structure need iterate full set reachable states states need combined 
implementation termination check done additionally merge process 
speeds cases termination check cheaper merge 
beyer henzinger th configurable program analysis choosing merge operator merge sep termination check sep combinations model checking program analysis 
due fact modelchecking algorithm uses join operator analysis automatically 
contrast path sensitivity data flow analysis requires precise data flow lattice distinguishes states different paths 
hand due join operations data flow analysis reach fixpoint faster cases 
different interpreters exhibit significant differences precision cost depending choice merge operator termination check 
need mechanism combine best choices operators different interpreters composing resulting program analyses 
composite program analyses configurable program analysis composed configurable program analyses 
composite program analysis merge consists configurable program analyses composite transfer relation composite merge operator merge composite termination check composites merge expressions components merge ei operators defined 
composite operators manipulate lattice elements components directly result composition access tuple elements states redefine merge 
way additional information operators 
strengthening operator computes stronger element lattice set information lattice element meet requirement strengthening operator define composite transfer relation stronger pure product relation 
example combine predicate abstraction shape analysis strengthening operator sharpen field predicates shape graphs considering predicate region 
furthermore allow definitions composite operators compare relation compare elements different lattices 
composite program analysis merge construct configurable program analysis merge product domain defined direct product 
product lattice iff 
product concretization function 
literature agrees direct product sharp 
improvements direct product reduced product logical product solve problem completely 
configurable program analysis specify desired degree sharpness composite operators merge 
product domain definition extend notation finite number di 
configurable software verification composite operators determines precision resulting configurable program analysis 
previous approaches redefinition basic operations necessary configurable program analysis reuse existing interpreters 
example blast domain 
program analysis implemented tool blast expressed configurable program analysis derives composite program analysis merge components configurable program analysis locations configurable program analysis predicate abstraction 
construct composite transfer relation iff ll pr choose composite merge operator merge composite termination check example blast domain shape analysis 
combination predicate abstraction shape analysis expressed composite program analysis merge components location analysis predicate abstraction shape analysis previous configuration corresponds composite merge operator merge composite termination check new tool allows define composite operators merge different ways report results experiments sect 

example blast domain pointer analysis 
fischer particular combination called predicated lattices predicate abstraction data flow analysis pointers express composite program analysis merge pointer analysis 
transfer relation iff ll pr ad configure algorithm fischer choosing composite termination check composite merge operator joins third elements agree merge merge 
location domain 
traditional data flow analyses consider location domain separate domain assume locations explicitly analyzed 
contrast leave completely interpreter 
find interesting consider program counter just program variable define location domain program counter explicit composed domains 
releases domains defining location handling parameters composite program analysis need set 
keeps different concerns separate 
usually program counter variable modeled explicitly variables represented symbolically predicates shapes 
freedom treat program variable explicitly program counter may useful loop indices 
conversely treat program counter symbolically variables span reachability tree 
beyer henzinger th experiments evaluated new approach combinations interpreters different configurations 
implemented configurable program analysis extension model checker blast order able reuse components necessary analysis tool focus 
blast supports recursive function calls pointers recursive data structures heap 
representing shape analysis domain parts tvla implementation 
pointer alias analysis implementation comes cil 
configuration fischer compare predicated lattices 
configuring model checking shape analysis set experiments consider combination predicate abstraction shape analysis 
demonstrate impact various configurations performance precision ran algorithm set example programs extended programs explore scalability 
examples divided categories examples require unary binary shape predicates proved safe list simple examples require addition nullary predicates alternating flag example requires information nullary predicates compute new value unary binary predicates list flag 
verification times table different configurations 
blast fails prove program safe configuration false alarm fp reported 
predicated lattice merge pred join sep 
configuration traditional model checking approach join predicate abstraction predicated join approach shape analysis 
corresponds composite operators 
iff ll pr ss 
merge merges 
sep transfer relation cartesian successors different components computed independently cf 

merge operator joins shape graphs regions agree location predicate region 
predicate regions joined 
termination checked coverage single state 
configuration corresponds fischer predicated lattice 
example 
illustrate difference various configurations program fig 

program constructs lists contains data values depending value ends single 
illustrate example abstractions 
predicate abstraction keep track nullary predicate flag 
shape analysis consider shape graphs list typedef struct node int struct node list void foo int flag list list malloc null exit list random flag list malloc null exit example program configurable software verification example shape graphs fig 

example program list representations pointed program field predicates assertions 
abstractions automatically discovered blast refinement procedure subject 
shows shape graphs encountered analysis 
nodes shape graph correspond memory cells 
summary nodes double circles represent nodes 
shape graphs defined valuation predicates nodes valued logic 
predicates unary points predicate field predicates andh binary predicate 
understand composite program analysis works example consider states location component value program exit point 
merge operator states agree location predicates joined 
consequently shape graphs corresponding lists different lengths collected single state 
analysis find state location predicate valuation flag flag 
experimental results 
precision shape analysis powerset domain join negative effect precision analysis 
performance idea join data flow analysis keep number states small efficiency progress reasons typical data flow analysis join operations efficient 
state contains set shape graphs analysis effect opposite join operations add extra larger sets shape graphs need manipulated 
addition algorithm computes successors joined set may done subset repeated 
results unnecessarily highly expensive operations 
precise model checking merge sep sep 
want avoid merge operator causes join overhead analysis computing successor states 
easy achieve composite program analysis replace composite merge operator merge merge operator merge sep new compos beyer henzinger th ite program analysis joins predicate regions shape regions corresponds lazy shape analysis 
example 
composite program analysis joining elements reached state set shape graphs size larger previous configuration 
maintain distinct states 
particular exit location set reached states contains states flag flag flag flag flag flag flag flag set states represents exactly set concrete states result previous analysis configuration 
experimental results 
examples experiments smaller run times configuration precision experiments change compared configuration precision shape analysis powerset domain joins precise 
precision predicated lattice precision variant joins 
performance number explored states slightly higher configuration improves performance analysis 
size lattice elements average number shape graphs state considerably smaller predicated lattice configuration 
achieve better performance operations particular successor computations small sets shape graphs efficient large sets 
precision improved transfer relation merge sep sep 
second configuration improve performance analysis 
show precision analysis improved 
replace cartesian transfer relation new version compute successors completely independently different sub domains iff ll pr ss strengthening operator improves precision transfer relation predicate region sharpen shape information 
example 
example strengthening operator effect nullary predicate flag relation predicates shape graph 
strengthening operator prove useful example shape graphs addition unary field predicate indicating node value program predicate abstraction nullary predicate 
consider operation line 
successor shape graph applying strengthening operator update unary field predicate value unary field predicate set value node pointed supposing holds predicate region successor strengthening operator updates field predicate value 
experimental results 
configuration results improvement precision published results hard wired configuration cost 
precision configurable software verification cause strengthening operator successors precise cartesian transfer relation 
analysis precise 
performance cost strengthening operator small compared cost shape successor computation 
performance severely impacted compared cartesian transfer relation 
precise model checking improved termination check merge sep join 
try achieve improvement configuration replace termination check checks state join reached states agree locations predicates previous termination check going set reached states checking state coverage 
alternatively states agree predicate abstraction summarized single state termination check 
sound shape analysis domain powerset domain 
example 
illustrate new termination check example consider set reached states contains intermediate step states flag flag flag flag want apply termination check state flag set reached states check set shape graphs subset join shape graphs location valuation predicates set 
check positive point termination check experimental results 
performance impact slightly negative 
precision configuration change precision examples 
performance expected improved performance avoiding single coverage checks summary state fewer successor computations may recognize earlier fixpoint reached 
performance impact examples negligible small portion time spent termination checks gain negated overhead due joins 
join meet points data flow analysis merge join join 
compare classical data flow analysis choose configuration dataflow elements joined control flow meets independently predicate region 
merge operator joins previously computed shape graphs program location state merge merges example 
composite program analysis encounters example state flag contains shape graphs lists contain despite fact flag value true 
note loss precision compared predicated lattice approach configuration beyer henzinger th table 
time different configurations false alarm fp program pred join merge sep merge sep merge sep merge join merge join sep sep sep join join join transfer new join preds simple simple list list list list alternating fp fp list flag fp fp list flag fp fp fp fp fp table 
time examples run predicated lattice program cfa nodes loc orig 
join precision join cause precise merge operator looses correlation value nullary predicate flag shape graphs 
experimental results 
analysis able prove examples successfully verified previous configurations 
precision shape analysis component lost path sensitivity resulting shape graphs similar classical fixpoint algorithm data flow analysis yield 
analysis precise 
performance run time similar configuration predicate abstraction join merge join preds 
evaluate composite program analysis similar classical data flow analysis predicates shapes joined states agree program location 
consider merge operator merges merge merge weakest conjunction predicates implies composite program analysis corresponds exactly data flow analysis direct product lattices set reached states contains state location merge operator joins states location 
example 
location state true 
experimental results 
configuration prove example programs configuration run times similar configuration precision composite program analysis precise set configurations merge operator joins predicates shape graphs independently location 
join suitable data flow analyses predicate abstraction imprecise predicate regions joined configurable software verification possible express disjunctions predicates means separate states location 
performance compared configuration number states smaller location shape graphs size 
configuration precise efficient 
summary 
set examples experiments shown configuration best choice provided justifications results 
conclude configuration preferred configuration combination interpreters provide evidence subsection 
configuring model checking pointer analysis experimental setting subsection show certain kind interpreter join better algorithms join show prohibitive performance terminate 
consider combination blast predicate domain pointer analysis domain described sect 

table report performance results different algorithms configuration predicated lattice described fischer configuration algorithm join merge operator merge sep experiments give evidence number states explodes blows computational overhead gained precision necessary proving example programs correct 
goal difficult automatic software verification imperative bring bear insights optimizations matter originated model checking program analysis automated theorem proving heavily blast transfer functions perform termination checks 
modified blast tree software model checker tool configured different lattice interpreters composite transfer functions merge operators termination checks 
specifically configured extensions blast analysis implemented predicated lattices lazy shape analysis 
side effect express algorithmic settings papers simple systematic way different configurations perform better 

ball podelski rajamani boolean cartesian abstractions model checking programs 
margaria yi 
eds 
etaps tacas 
lncs vol 
pp 

springer heidelberg 
beyer henzinger th lazy shape analysis 
ball jones 
eds 
cav 
lncs vol 
pp 

springer heidelberg predicated join join model checking join precise transfer relation join termination check join normal join shapes data flow analysis join predicate abstraction 
experiments run ghz intel xeon processor 
beyer henzinger th 
blanchet cousot cousot feret min rival design implementation special purpose static program analyzer real time embedded software 
mogensen schmidt 
eds 
essence computation 
lncs vol 
pp 

springer heidelberg 
codish bruynooghe de la banda hermenegildo improving interpretations combining domains 
proc 
pepm pp 

acm press new york 
cousot cousot interpretation unified lattice model static analysis programs construction approximation fixpoints 
proc 
popl pp 

acm press new york 
cousot cousot systematic design program analysis frameworks 
proc 
popl pp 

acm press new york 
cousot cousot compositional inductive semantic definitions fixpoint equational constraint closure condition rule game theoretic form 
wolper 
ed 
cav 
lncs vol 
pp 

springer heidelberg 
dwyer clarke flexible architecture building data flow analyzers 
proc 
icse pp 

ieee computer society press los alamitos 
fischer majumdar joining data flow predicates 
proc 
esec fse pp 

acm press new york 
tiwari combining interpreters 
proc 
pldi pp 

acm press new york 
henzinger majumdar lazy abstraction 
proc 
popl pp 

acm press new york 
lerner grove chambers composing data flow analyses transformations 
proc 
popl pp 

acm press new york 
lev ami sagiv tvla system implementing static analyses 
palsberg 
ed 
sas 
lncs vol 
pp 

springer heidelberg 
martin pag efficient program analyzer generator 

rival trace partitioning interpretation static analyzers 
sagiv 
ed 
esop 
lncs vol 
pp 

springer heidelberg 
necula rahul weimer cil intermediate language tools analysis transformation programs 
horspool 
ed 
cc etaps 
lncs vol 
pp 

springer heidelberg 
sagiv reps wilhelm parametric shape analysis valued logic 
acm toplas 
schmidt data flow analysis model checking interpretations 
proc 
popl pp 

acm press new york 
steffen data flow analysis model checking 
proc 
tacs pp 

hennessy sharlit tool building optimizers 
proc 
pldi pp 

acm press new york 
