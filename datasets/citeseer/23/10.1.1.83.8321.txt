bea streaming xquery processor daniela florescu chris donald kossmann paul lucas fabio riccardi till michael carey arvind agrawal bea systems san jose ca usa www bea com describe design implementation performance characteristics complete industrial strength xquery engine bea streaming xquery processor 
engine designed provide high performance message processing applications transforming xml data streams central component release bea weblogic integration wli product 
xquery engine fully compliant august draft xml query language specification 
goal describe efficient fully compliant xquery engine built relatively simple components understood technologies 
technical university munich munich germany www tum de years development xquery starting gain significant traction language querying transforming xml data 
xquery specification attained recommendation status definition language entirely stabilized appear variety products 
examples date include xml database systems xml document repositories xml data integration offerings 
addition course xpath xquery superset various products including web browsers 
focus new commercial incarnation xquery language enterprise application integration system 
particular provide detailed overview new xquery permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings th vldb conference berlin germany stanford university palo alto ca usa www cs stanford edu processing engine designed specifically meet requirements application integration 
xquery language tradition prior query languages sql oql closed declarative strongly typed language 
contrast traditional query languages xquery designed start querying structured data purchase orders unstructured data web pages 
xquery powerful query language native support handling built data types powerful constructs bulk data processing expressing joins aggregation support text manipulation notion document ordering provides foundation variety interesting document oriented queries cas 
added power extensibility support provided definition xquery functions 
language compatible standards xml namespaces xml schema 
language user friendly particularly prior xpath users xquery expressions provide implicit existential quantification schema validation type casting order relieve programmers having invoke operations explicitly 
wide range applications xquery intended powerful semantics type system language myth emerged complete xquery language going difficult implement may impossible achieve performance scalability implementing language 
existing xquery implementations tackled subset xquery number simplifying assumptions 
key goals show myth xquery just myth quite possible implement entire xquery language specification types 
covers design implementation performance characteristics bea streaming xquery engine embedded bea weblogic integration product 
en bea streaming xquery engine known pronounced squirrel engine developed implements entirety august specification xquery 
describe unique requirements drove design engine particularly area streaming xml data handling discuss ways engine architecture influenced requirements 
remainder organized follows section lists requirements drove design bea streaming xquery engine 
section gives overview bea wli product engine central component 
section gives overview architecture engine 
section defines internal representation xml data token streams 
section describes implementation xquery type system engine 
section contains details compiler optimizer 
section presents runtime system 
section shows java interface engine 
section presents results performance experiments 
section discusses related 
section contains avenues 
requirements bea standards focused 
result outset bea streaming xquery engine major requirement fully standards compliant implement entire xquery recommendation 
performance major requirement engine particular engine designed provide high performance message processing applications streaming xml data 
major needs message processing xquery applications efficient internal representation xml data ii streaming execution pipelining extent possible iii efficient implementation xquery transformations involve node constructors 
completeness high performance top major design goals bea streaming xquery engine number additional requirements influenced design implementation limited resources initial version engine developed team engineers months 
productivity possible java vs programming language implementation 
integration bea products engine designed embedded component bea products particular wli 
mandated java required development powerful java xquery interface referred interface section 
usability components engine designed usable third party parsers schema validators persistent xml stores start called engine operate properly clustered environment multi processor machines 
xquery specification stable definitely unstable time bea streaming xquery engine developed affordable adapt engine road incorporate changes xquery language specification 
xquery weblogic integration mentioned application drove design bea streaming xquery engine bea weblogic integration wli bea enterprise application integration product 
wli portion bea platform suite provides tools enable companies rapidly develop deploy integration applications communicate business partners automate enterprise business processes orchestrate existing web services packaged legacy applications receive transform send bits data applications enterprise 
wli major new release wli focuses heavily web services xml data handling manipulation 
xquery language plays central role wli 
xquery specifying data transformations messages workflow variables transforming data purchase orders flows system 
xquery specify data driven process flow logic looping branching wli workflows 
main features required application integration platform strong support data transformations design time runtime 
important role xquery engine wli 
bea making significant bet xquery right technology task 
provide experience wli provides built tool enables integration developers create xquery data transformations coding having remember syntax xquery 
shows map view screen shot taken beta version wli 
example shown tool create xml xml transformation converts xml purchase order format xml purchase order different format source target formats specified xml schemas shown source target trees user interface 
time screen shot workflow developer putting finishing touches handling addresses complex structures input format simple atomic values output format 
map view wli automatically generates corresponding xquery query 
query desired 
wli data transformation editor supports limited way editing xquery queries 
xml xml transformations common form data transformations expected wli supports broader range transformations data mapping tool bea streaming xquery engine 
addition single document cases mapper supports graphical construction queries accept multiple input arguments purchase order customer profile 
supports design transformations java objects binary data formats just documents instances xml schemas 
cases mapper shows transformation input output types trees design model consistent wide range potential data types 
case java objects wli infers default xml schema corresponding java class interest 
case binary data wli relies wli component called allows developers separately specify test persist set parsing rules convert binary record format structurally isomorphic xml schema 
cases data transformation input output format non xml transformation step xml occurs prior central xquery transformation 
cases efficiency actual internal data representation format described section 
major xquery bea wli involves workflow process logic 
specifically typical wli workflow include number xquery expressions serve define flow logic workflow 
expressions conditional nodes decision nodes workflow control branch flow processed 
iteration graphical view xml data transformation loops loop nodes workflow drive workflow piece line item purchase order 
uses xquery tool terms specified developer 
case special editor helps developer edit xpath expressions conditions branches workflow 
xquery engine overview overview bea streaming xquery engine 
java applications submit xquery queries consume query results interface referred name derived jdbc 
query parsed optimized query compiler 
compiler generates query plan tree operators consume data cascading fashion 
plan interpreted runtime system consists implementations functions operators xquery library xquery core sorts joins 
furthermore runtime system contains xml parser xml schema validator required external xml data processed part query 
wli incoming xml messages parsed schema validated stored special format xquery queries paying high cost parsing schema validation query invocation 
messages bound free variables queries variable bindings carried means interface 
overview bea streaming xquery engine xml data represented stream tokens roughly equivalent sax events semantics depth unfolding xml tree 
token stream minimizes memory requirements engine 
addition token stream allows lazy evaluation queries 
runtime runtime operator consumes input token time input data required simply discarded 
token stream matches xquery data model 
furthermore bea engine provides tools applications developers order serialize token stream construct dom representation stream tokens shown 
query engine implemented entirely library embeddable application need manipulate xml data 
input output query engine supported xml token streams parser translates form xml token stream format 
toolkit utility classes provided allow instantiation parsers adaptors efficiently couple xquery engine xml processing applications 
token stream defined java interface order allow different implementations default implementation uses simple java objects 
compile time issues xquery strongly typed language fairly complex type system important subtasks compiler verify type consistency query respect input sources derive type query result deriving partial types subexpression type inference rules 
type information important compiler query optimization phase see 
fact type system xquery consists mixture named structural typing task interesting 
structural typing limited types input parameters return values functions operators xquery simple complex xml types named type inference query optimization phases complex type operations performed infer result types type derivation construction determine particular type acceptable input function operator type subsumption 
structural typing functional languages ml haskell considered algorithmically challenging general case accurate type inference costly type subsumption operation exponential complexity 
studied patterns utilization different type related algorithms specific context xquery intelligently caching type comparison results able improve performance type system implementation orders magnitude respect classical algorithms 
say section 
run time issues xquery world queries compiled executed execution contexts contain type definitions xml schemas function libraries variable definitions 
bea streaming xquery engine execution contexts persistent survive query execution immutable objects logical point view 
contexts xquery world stacked new context increasing overriding content previous context 
xquery operator instance defines new context query introducing new variable overriding previous variable declarations name outer contexts 
main design goal runtime system performance 
order achieve performance runtime system works stream dataflow way avoids materialization intermediate results possible 
furthermore runtime system provides generic implementations functions operators time possible exploit knowledge available compile time particular typing information 
xml token stream section briefly describe structure xml token stream order represent xml data 
straightforward describe means small example 
consider element declaration judgement index judgement parser translates element token stream serialized notation textual actual tokens course binary compact 
element judgement www bea com example www org xmlschema attribute index www org xmlschema attribute text element example shows element token name judgement type xs 
element token followed attribute token name index type xs 
follows value attribute represented token 
attribute token closes attribute declaration note value attribute list values 
text token represents content element element token closes element declaration 
previous data validated xml schema snippet sch xsd complextype name vote xsd xsd extension base xsd float xsd attribute name index type xsd int xsd extension xsd xsd complextype xsd element name judgement type vote result doing slightly different token stream element judgement www bea com example vote www bea com example attribute index int www org xmlschema int attribute text float element type token vote attribute xs int 
value attribute binary int value enriched binary float representation 
note xquery standard mandates original lexical representation elements preserved untyped typed values kept token stream 
xml token stream mainly designed processor internal data representation turns convenient xml format application interchange 
token stream allows xml fragments managed easily easy serialize network disk 
fact wli uses serialized token stream format needs persist values xml workflow variables uses xquery principal means xml processing intermediate results best kept format directly amenable efficient xquery processing 
type system xquery rich complicated type system sem compatible xml schema sch 
addition types conventional programming languages integer string user defined structures xquery type system allows new types created sequences integer followed string alternation integer string shuffle product integer string order occurrences zero zero 
types xquery determine xml data required form type 
determine questions xquery processor needs able answer 
types equal 

type subtype 

types intersect 
xquery type xs integer xs string represented regular expression 
regular expressions xquery types naturally represented trees 
trees represent types allows constructed easily compiler parsing xquery example 
representing types trees natural trees don allow questions mentioned answered easily 
reason different trees represent non trivial type 
regular expressions xquery types represented extension finite state automata fsa xquery type corresponds language accepted fsa 
simple xquery types xs integer xs string symbols comprising alphabet language 
traditional fsas transitions fsas labeled fsas providing recursive composition fsas recursive types 
result recursive variants algorithms operate fsas required bea streaming xquery engine 
shown appropriate fsa representation minimized deterministic fsa possible answer mentioned questions algebraic operations fsas union intersection complement 
unfortunately space restrictions allow go details operations 
forthcoming publication describe detail 
section try give feeling type system challenges encountered implementing 
answer question types equal exploit observation type equal type subtype subtype type easily mapped subtyping 
deal subtyping exploit observation type subtype type intersection complement empty 
fsa intersection operation extremely expensive laws order compute intersection type intersects type complement union complements empty 
due recursions fsa algebra operations expensive 
shown computational complexity grows exponentially complexity fsa 
alleviate problem engine aggressively caches results type system 
types compared times compilation query expensive fsa computation carried 
caching effective total number types involved query limited 
query compilation optimization step query processing query compilation 
complexity component main goal designing compiler effective extensible flexible simple 
described consistently principles avoiding hard coded information algorithms declarative approach possible order keep compiler simple extensible 
xquery compiler composed managers expression manager context manager operation manager 
furthermore functional components query parser query optimizer code generator 
expression manager expression manager holds internal representation kinds xquery expressions constants variables order expressions instance conditionals 
expressions equivalent functionality algebraic query representation relational query engines 
internal representation expressions borrows ideas functional programming compilation relational query compilation object oriented query compilation adapted xquery course 
simplest xquery expressions constants variables 
support types variables count external variables 
order expressions boolean operators comparisons arithmetics union intersection user defined functions share single internal representation 
different traditional relational query internal representation essential keeping code simple extensible 
kind second order expression flwr expressions quantifiers separate internal representation 
xquery formally defined terms small core set algebra operators full language mapped sem 
internal representation redundant sense models core non core expressions 
example representation expressions complex flwr expressions 
internal representation path expressions normalized immediately parsing 
characteristic worth mentioning distinction logical algebra physical algebra traditional relational query processing 
distinction sense kinds xquery expressions conditionals instance order expressions 
operations multiple possible physical implementations available node constructors joins choice optimizer expressed expression annotations 
expression manager implements various functionalities required query optimization variable substitution management type derivation semantic properties derivation copying subexpression cut paste operation manager second manager operation manager holds information order functions operators available query engine 
information includes operator names signatures semantic properties see pointers class implementing operator java code type derivation polymorphic operators 
semantic information includes property preserving introducing document order result property preserving creating duplicate free results commutativity operator property operator create new nodes result operator map function operator real function returns result input semantic information exploited optimization phase equivalent expression rewriting 
information loaded bootstrapping xquery engine declarative description 
context manager third manager compilation context manager 
phase query processing parsing type checking optimization execution done certain context contexts hold variety environmental properties 
examples current managers perform various tasks compilation execution type manager schema manager manager scope variables schema validation context scope definitions namespace functions types schemas current default specifications element name namespace function namespace strip whitespace parameter 
context passed query processing phases expressions iterators exist certain context 
context composed hierarchy local contexts 
searching information translates searching xquery operators document property 
local context recursively parent information root reached 
root hierarchy base context holds xquery engine default parameters 
base context bootstrapped declarative specification 
parser addition managers mentioned xquery compiler functional components parser optimizer code generator 
parser translates xquery string corresponding expression internal representation 
parsing current parsing context augmented certain information new namespace definitions new function definitions normalization performed parsing particular path expressions eliminated time 
main source complexity xquery parser comes necessity keeping language free reserved words 
requirement parser keep multiple lexical states perform complex state transitions parsing 
environment big challenge facing provide users high quality debugging error information 
antlr parser generator proved satisfactory needs 
optimizer important phase query compilation query optimization 
optimizer task translation expression generated parser equivalent expression cheaper evaluate 
address expression equivalence problem 
expressions equivalent type possible input context produce value output produce error 
definition idealistic unfortunately building real query optimizer realized relax important ways 
example optimizer translate expression expression expression inferred type preserving errors restrictive 
xquery operations result errors predictable compile time 
result operation reordering change potential result event error 
rewriting methodology guarantees new errors introduced result query rewriting possible original expression returns error rewritten expression 
prominent example happen query boolean expression subexpressions returns false returns error 
expression produce output inferred type 
heart query optimizer library rewriting rules 
rewriting rule takes expression returns equivalent expression rule applicable null rule applicable 
optimizer built successive application rewriting rules heuristics 
rewriting rules composed optimizer strategy specified declaratively 
rewriting rules normalization rules purpose put expression normal form reducing cost cost reduction rewriting rules supposed translate expression expensive expression 
examples normalization rules putting predicates conjunctive normal form dispatching general comparisons type specific operators dispatching arithmetics operations inlining non recursive xquery functions transforming expressions cascade conditionals unnesting flwr expressions clauses 
cost reduction rewriting rules classified categories 
remove unnecessary operations possible 
prominent example unnecessary operations sort duplicate elimination operations defined implicitly query due semantics xpath expressions 
examples redundant self operators concatenate operators single input expressions expressions iterate single item computation effective boolean value casts function parameter results casts defined implicit xquery semantics 

rewrite constant common subexpressions 
example subexpressions executed part loop sort quantifier depend loop variable factored loop 
subexpressions appear multiple times query factored variable introduced 
subexpressions computed statically results small computed statically replaced value 

enable streaming possible 
important example rewriting expressions backward navigation expressions forward navigation possible 

exploit schema information 
important rule class translates operator sequence children operators schema information introducing operators cardinality information obtained schemas 

carry operation reordering beneficial 
notably variables reordered unordered directive dependent joins 
similarly variables quantifier freely reordered absence interdependency 

transform nested loop non dependent joins hash ones possible 
absence data statistics decision heuristics 
current optimizer cost model uses heuristics 
reasons 
difficult get maintain statistics internet world 
obtaining statistics particularly difficult streaming xml data message processing bea engine designed 
statistics cost optimization essentially meaningless 
second presence statistics defining effective cost model xquery engine difficult probably developing initial engine 
third optimizations require costing important xquery say sql 
instance expressions dual relational joins reordered xquery certain circumstances 
obviously cost optimization important xquery application scenarios think xquery optimizer needs heuristics compensate problems described cost optimization simply important particular target application 
query rewriting extensive semantic information associated operators described types inferred expressions 
cost reduction rewriting rules applied absence information 
important task query optimizer detect minimize need data materialization 
designed entire xquery engine main goal stream data query engine minimizing data footprint eliminating blocking points execution 
queries require data materialization blocking 
addition traditional causes sort duplicate elimination aggregates value variable materialized cases variable multiple times query variable inside loop sort quantifiers variable input recursive function 
cause materialization backward navigation transformed forward navigation 
execution operators requires materialization certain circumstances see section 
noticeable absence bea engine choice physical operators joins selections 
current version simple scan selections supported 
joins nested loops hashing supported 
decisions regard particular application domain processing xml message range kilobytes megabyte bea streaming xquery engine designed 
applications particular large scale xml databases methods supported optimizer extended accordingly 
code generation expression produced query optimizer input phase code generation 
goal phase translate expression executable plan 
executable plan represented tree token iterators 
mapping expressions token iterators task quite simple token iterator tree built traversing expression tree bottom 
recursive functions require special attention 
naively generating code results infinite token iterator trees 
order avoid situation delay code generation recursive functions executed token iterator tree corresponding new iteration unfolded runtime iteration 
recursion require extra materialization blocking operator pipeline 
runtime system task runtime system interpret query execution plan modeled tree token iterators 
runtime system composed library iterators containing implementations functions operators xquery standard functions xquery core map sem 
iterator model sql engines bea streaming xquery engine iterator model gra 
reasons choice relational world modularity low main memory requirements avoidance cpu costs materialize intermediate results 
furthermore iterator model allows lazy evaluation expressions particularly important xquery 
small fraction result sub expression computed frequent example existential quantification 
iterator model bea engine function operator implemented iterator consumes zero multiple token streams produced input iterators returns single stream tokens 
traditional iterator model iterators operate phases open prepare produce results 
produce token result stream return null order indicate stream 
close release allocated resources clean 
addition iterators provide method method 
function returns token consuming 
function convenient implementation certain xquery functions need look ahead inputs 
function carries fast forward item sequence 
function functions look tip iceberg count 
implemented generic way iterators additional method increase complexity code base 
beneficial performance reasons provide specific implementation certain functions example carried particularly fast data materialized 
specific feature bea iterator model error handling mechanism 
call method iterator result failure 
semantics xquery failures ignored failures propagated application terminate execution query 
order implement error handling java exception handling mechanism 
furthermore able implement error handling generic way specific xquery error handling rules implemented iterator individually 
example iterators mentioned section function operator xquery library core sem implemented iterators 
expensive functions node constructors joins different implementations exist best implementation chosen depending characteristics query 
runtime system contains implementation iterators 
order get impression kind iterators system examples listed constant simplest iterators constant iterator evaluate constant expressions 
iterator xquery literals feb 
literals constant iterator produces stream single token 
constant iterator constant expressions foo boo foo 
example result element constructor materialized compile time constant iterator return materialized result execution time 
casts semantics xquery involve great deal implicit casts 
casts expensive 
casts require transformations strings numeric values 
casts involve extraction typed values element attribute 
casts call function called que takes sequence input returns simple value 
mentioned section compiler tries determine types expressions statically precisely possible casts avoided specific cast iterator 
cast iterators runtime system organized hierarchy general cast iterator expensive static type inferred static type specific cheaper casts information deduced statically expression simple type 
materialization bea streaming xquery engine tries stream data possible situations materialization intermediate results necessary 
important situation materialization necessary query uses results common subexpression times re computation subexpression expensive 
queries implemented iterator factory 
factory takes token stream produced common sub expression input allows dynamic generation iterators consume input 
factory consumes tokens input stream demand driven fastest consumer 
factory buffers input stream releases buffered tokens slowest consumer done 
node id generation xquery data model assigns unique id node xml document 
id node comparisons duplicate elimination sorting document order functions defined 
bea xquery engine ids nodes incoming xml messages generated fly non blocking specialized iterators 
id generation expensive operation memory requirements ids prohibitive 
different types ids iterators depending requirements query 
queries processed simple light weight ids pre order numbering nodes ids duplicate elimination sorting document order implemented 
queries processed light weight ids queries instance involve backward traversals xpath parent axes special node comparisons 
evaluate queries queries heavy ids pre order post order numbering materialization parent child relationships generated 
furthermore certain queries necessary generate ids root nodes nodes certain level special version iterator order improve performance queries 
decision version ids iterator compile time depending characteristics query 
fact possible ids necessary evaluate query case compiler generate iterator 
xpath steps projections implemented xquery xpath steps typically child descendant self axes 
order exploit optimizations type inference compile time runtime system provides different iterators axes 
example special version child stops early known schema child matches known sub elements relevant soon sub element particular type 
furthermore runtime system implements special algorithm order execute descendant self 
algorithm starts optimistically assumes schema recursion 
case algorithm fully stream intermediate results need materialized 
bad cases algorithm adapts materializes data behaves just traditional algorithm order compute descendants recursively 
interface java binding xquery engine called 
designed look behave jdbc 
apis similar features ability statements repeated execution facilities binding execution variables statement ability maintain separate execution contexts 
similarities jdbc widely known understood interface basic set classes appropriate method names 
currently initiative standardize java interface xml data called 
standard interface materialized plan interface upwardly compatible 
connections statements entry point jdbc connection 
connection obtained static method get connection class 
connection maintains execution context internally keeping track declared namespaces types xquery functions things 
current implementation xquery engine run jvm 
despite name connection networking involved type driver manage 
revisions introduce concept remote services 
connection applications create types xquery statement objects statement prepared statement 
jdbc differs simple statement chiefly ability xquery statement execute multiple times optionally assigning different values unbound variables parameters xquery statement execution 
parameterized queries object associates required variable bindings various settype methods 
different settype methods various xquery primitive types 
particular importance allows binding variable iterator potentially result separate query execution 
way chaining xquery queries supported 
possible specify type token stream returned iterator method 
ability bind re bind external variables xquery statement bea specific extension xquery language 
extended variable rules xquery longer required variables mentioned statement assigned values 
statements compile bea implementation 
attempting execute statement binding unbound external variables result exception 
methods determining set unbound variables discovered query compilation 
execution queries external variables bound prepared statement executed 
method returns token iterator representing token stream resulting statement execution 
provide utility classes doing basic manipulations token iterators serializing unicode binary format 
offers features specialized purposes method creating duplicate rebound re executed different thread 
performance experiments results section presents results performance experiments assess running time bea streaming xquery engine xml transformations cases bea customers xmark benchmark swk 
experiments carried pc ghz pentium processor gb main memory 
java virtual machine sun jdk 
experiments reported order implement expressions joins group hash algorithms beneficial particular experiments 
xml transformations experiment studies performance bea streaming xquery engine typical cases customers weblogic integration product transformations engine designed 
alternative xslt stylesheets xsl implement cases xslt stable recommendation xslt today commonly description xquery xslt speedup straight element mapping element mapping different names element combination element explosion element attribute mapping attribute element mapping attr 
attr 
mapping straight copy attr 
attr 
mapping name mapping repeating group repeating group static fields rep grp 
rep grp 
re grouping key fields decreasing loop nesting incr 
loop nesting incr 
loop nesting input key conditional repeating group transf 
string functions aggregation data aggregation data parameterized queries parameterized transformations union docs schema union docs different schemas joining multiple docs joining substitution repeated key value lookup query kb mb table time ms xalan xslt vs bea engine xquery table time ms xmark benchmark practice order implement kinds transformations 
cases test different kinds xml transformations different kinds xml messages 
xslt stylesheets executed xalan version xj 
xquery queries course executed bea streaming xquery engine 
cases best possible formulation chosen transformation expressed different ways 
furthermore measured running times transformations xml input parsed net cost xml transformations relevant metric bea weblogic integration product xml message typically parsed transformed processed times 
table shows results 
cases executing xquery expression bea engine faster executing equivalent xslt stylesheet xalan 
best case speed factor 
particular pattern transformation type speed especially high reasons speedup 
believe important reasons xquery easier optimize xslt token streams bea engine processed efficiently document table model xalan 
note document table model replaced dom representation xalan version purpose better performance 
plan publish queries data web page 
xmark benchmark table shows running times bea engine xmark benchmark swk 
xmark benchmark designed test performance xml database systems traditional database workloads selections large collections data transformations 
benchmark includes suite benchmark queries test large variety features xquery language 
furthermore xmark benchmark specifies xml data generated provides scaling factor order produce databases different sizes 
table shows running times queries databases size kb mb 
running times bea engine parsed xml input reported 
baseline parsing kb xml database cost milliseconds parsing mb xml database cost milliseconds xerces parser xj 
purpose experiments stress test bea engine 
workload size databases representative cases implementation bea engine tuned 
queries executed milliseconds kb xml database 
words executing xmark queries cheaper parsing document 
results confirm bea engine capable processing xml messages sizes couple kb regardless type queries need processed 
mb xml database running times range milliseconds seconds 
bea engine robust cases running times improved 
mb larger implementation engine tuned 
engine extensible order scale scenarios doing product requirement far 
related efforts xquery language specification reached recommendation status significant efforts industry academia implement xquery different application scenarios 
virtually major database vendors currently working extending database products establishing new products xquery 
order extend relational databases sql standard emerging em 
furthermore vendors native xml database systems software ag naturally xquery query interface product 
addition number start ups open source initiatives working xquery implementations 
list public xquery implementations links web demos home page xquery working group www org xml query 
research community various related aspects xquery addressed 
name just latest results lmp describes implementation subset xquery transducers shows information filters defined xpath expressions subset xquery implemented fsas 
gs pc papers implementing xquery streaming xml data 
time completed copies available 
described design implementation performance characteristics bea streaming xquery engine 
xquery implementations engine fully compliant august xquery specification 
central component bea weblogic integration wli product 
tuned provide high performance xml message processing 
experiments customer cases confirmed performance applications fact better performance xalan popular xslt processor development years tuned sorts applications 
cas xml query cases 
www org xml query august 
carey nagy 
integration web services style 
ieee data engineering bulletin special issue web services december 
franklin zhang fischer 
path sharing predicate evaluation highperformance xml filtering 
submitted publication 
em eisenberg melton 
sql xml making progress 
acm sigmod record september 
xquery xpath functions operations version 
www org tr xquery operators august 
gra graefe 
query evaluation techniques large databases 
acm computing surveys 
gs gupta suciu 
stream processing xpath queries 
sigmod sig 
lmp lud scher mukhopadhyay papakonstantinou 
transducer xml query processor 
vldb pages 
xquery xpath data model 
www org tr query datamodel august 
pc peng chawathe 
xpath queries streaming data 
sigmod sig 
que xml query www org xml query august 
sch xml schema www org xml schema may 
sem xquery formal semantics 
www org tr query semantics august 
sig proc 
acm sigmod conf 
management data san diego usa june 
swk schmidt waas kersten carey manolescu busse 
benchmark xml data management 
vldb pages 
proc 
conf 
large data bases vldb hong kong china august 
xj xerces xml apache org xerces 
xj xalan xml apache org xalan 
xsl extensible stylesheet language xslt 
www org style xsl january 
