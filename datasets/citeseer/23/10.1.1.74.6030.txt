dimensions data consistency marc shapiro inria rocquencourt france lip paris france krishna courant institute mathematical sciences new york university new york usa replication consistency essential features distributed system studied extensively systematic comparison lacking 
developed action constraint framework captures semantics replicated data behaviour replication algorithm 
enables decompose problem ensuring consistency simpler easily understandable subproblems 
sub problems largely orthogonal sub solutions mixed matched 
unified framework enables systematic exploration pessimistic vs optimistic protocols full vs partial replication strong vs weak consistency replicating shared data improves availability performance raises consistency issues 
different replication protocols differ subtle confusing ways 
complications come interaction object semantics optimistic techniques partial replication caching 
difficult understand behaviour protocols compare properties reason correctness 
address problem action constraint framework acf 
formalism en performed microsoft research cambridge uk journ es sur la coh rence des donn es en univers parti cnam paris france nov ables describe unified way semantics shared data applications user intents replication protocols 
possible prove consistency properties presence optimistic replication partial replication 
acf represents information replicated system replicated graph called 
nodes operations actions connected kinds edges called constraints reify concurrency invariants maintained 
maintaining consistency divided simple problems sub graphs conflict breaking agreement serialisation respectively 
conquer approach clarifies problem space spectrum solutions trade offs 
analysis serve understand existing protocols guide design new protocols actions constraints framework basic definitions distributed system contains computers sites 
replicate unspecified data 
client site submits actions 
operating shared data related constraints reify semantic relations 
constraints posed users data types applications protocols 
sites communicate sending actions constraints know 
messages asynchronous eventually delivered reliably 
simplicity assume epidemic communication style essential 
collection actions constraints known site time mi ki ambiguity abbreviate just set actions known far sets constraints explained shortly non shrinking time 
site independently executes actions knows far serial schedule si abbreviated 
schedule sound meaning starts special action init initial state action appears zero obeys constraints set sound schedules site time mi abbreviated 
actions commute executing order results equivalent state state equivalence defined application non commuting noted schedules equivalent differ swapping adjacent commuting actions 
combining constraints different ways able capture concurrency semantics number interesting applications shared calendars replicated file system shared document editor 
claim particular choice constraint language means unique complete sufficiently expressive applications protocols looked 
shall see enables decomposition consistency protocols relatively independent subproblems 
acf model non deterministic protocols optimistic protocols 
course acf model pessimistic system init known action execute roll back 
similarly acf model deterministic system constraints ensure modulo schedule equivalence 
significant subsets useful system eventually irrevocable scheduling decisions 
guaranteed actions execute schedule 
guar smallest set satisfying init guar 
guar guar 
space reasons omit formal definition subsets pose complication 
dead actions dead execute schedule 
action serialised serialised ordered respect non commuting actions execute 
action decided dead guaranteed serialised decided def dead guar serialised 
action guaranteed suffices add constraint init 
similarly adding suffices action dead 
consistency site view conceptually executes schedules independently 
system consistent iff satisfies liveness eventual decision action eventually decided sites safety union combination local viewed time guar dead 
generalisation known serialisability condition 
proved equivalent eventual consistency clients submitting new actions replicas eventual reach state presence sufficiently strong liveness conditions 
dimensions consistency consistent replication ensured distributed algorithm ensures eventual decision 
difficulty satisfying different sites run instances algorithm asynchronously parallel differing views 
propose decomposition consistency problem simpler sub problems 
propose sub algorithm right properties different concrete implementations 
output sub algorithm composes results 
input graph graph graph serialisation graph output graph example graph decomposition 
note causal dependence conflict atomicity 
graphs shows example input graph corresponding derived graphs different stages output graph nodes graph represent actions edges types solid arrows mixed dashed arrows short dashes edges 
graphs initialised graph evolve described 
action colour grey black white 
output terminates black nodes correspond dead actions white nodes guaranteed actions 
black resp 
white action remains black resp 
white node graphs eventually appears black colour changes new edges created serialisation transmitted graphs replicas asynchronous reliable messages 
conflict breaking eventual decision action dead guaranteed 
simplify exposition assume input graph change execution protocol 
initially nodes grey white black 
application may add new grey nodes protocol execute nodes initially mixture white grey black 
actions cycle guaranteed 
conflict breaking ensures cycle action dead 
conflict breaking algorithm initialise graph edges nodes connected edges graph 
repeatedly choose grey node mark black delete black node edges graph 
terminate graph acyclic 
caveat serialisation algorithms create new cycles 
range concrete implementations satisfy specification different cost quality trade offs 
long node cycle choice somewhat arbitrary 
choices better instance breaks cycles break 
possible implementation call orders nodes timestamps id id 
alternatively node highest degree cycle uses optimisation algorithm minimise number nodes 
algorithm higher quality fewer actions 
agreement agreement algorithm initialise graph edges nodes connected edges graph 
node black successors 
repeat terminate conflict breaking terminated black marks propagate 
conflict breaking node graph agreement propagates black mark graph 
agreement terminate conflict breaking terminated 
serialisation eventual decision requires execution order chosen pair non commuting actions dead 
job serialisation algorithm 
operates graph contains directed edges undirected edges 
serialisation algorithm initialise graph graph copying directed edges undirected edges nodes connected edges 
repeatedly choose black node delete node associated edges 
choose undirected edge insert directed edge direction nodes add new edge graphs 
choose nodes connected directed undirected edge delete undirected edge 
terminate graph contains undirected edges 
concrete implementations include conservative standard databases replaces undirected edge pair directed edges directions 
new cycle broken conflict breaking 
chooses direction inserted edge deterministically totally ordered unique identifiers 
serialisation add new cycles graph general case conflict breaking terminate serialisation terminated 
difficult trade 
new cycles causes dead actions strictly necessary 
designed serialisation algorithm completely avoids cost added synchronisation 
space restrictions preclude full description 
output output graph scheduling graph 
nodes input black white 
white nodes partially ordered edges combining original input added serialisation 
output algorithm initialise nodes directed edges graph 
serialisation adds directed edge add conflict breaking agreement serialisation terminated black node dead adding whiten remaining grey node guaranteed adding init 
terminate 
discussion lamport happens relation connects events distributed system 
distinguish happens semantic causality note 
separating constraints easier decompose systems basic components 
primitives similar acta formalism describing transaction systems 
acta wires database concepts transactions focuses advanced transaction models goal understand replication principles result consider finer granularity 
similarities formalism ability theory replication presence faults reactive model 
converging theories area research 
acf provides simple formal language reasoning replicated data systems 
eventual decision constitute universal correctness conditions consistency 
framework enables break protocols easily understood subproblems solved sub algorithms admits number concrete implementations 
exposes dimensions replication algorithms vary conflict breaking serialisation output 
variation fourth subproblem agreement 
approach easier understand compare existing protocols design superior new protocols 
lack space precludes justification claim algorithms remain correct multiple instances execute parallel asynchronously presence partial replication 
safety maintained presence non byzantine failures 
algorithms extend naturally case action constraint graph changes dynamically 
modelling consistency properties distributed system constraint graph provides effective explanatory tool understanding designing consistency algorithms 
enables decomposition consistency sub problems solved relatively independently 
claim decomposition necessary superior approach 
clearly sub optimal terms quality sub algorithm operates partial information claim simplifies reasoning 
previously designed optimal scheduler decomposed full information necessary optimality centralised order avoid consensus 
plan continue gain fuller understanding replication 
implicit connection kind constraints posed applications consistency protocol needed formalise connection 
focused mainly correctness needed explore real world performance trade offs 
believe greatly eased decompositional approach 
panos chrysanthis ramamritham 
acta framework specifying reasoning transaction structure behavior 
proc 
int 
conf 
mgt 
data pages atlantic city nj usa may 
alan fekete david gupta victor nancy lynch alex shvartsman 
eventually serializable data services 
theoretical computer science 
fr lund rachid guerraoui 
ability theory replication 
symp 
principles dist comp 
podc portland oregon usa july 
acm sigact sigops 
anne marie kermarrec antony rowstron marc shapiro peter druschel 
approach reconciliation divergent replicas 
th symp 
principles dist comp 
podc newport ri usa august 
leslie lamport 
time clocks ordering events distributed system 
communications acm july 
james brien marc shapiro 
application agnostic replication system ubiquitous computing 
technical report msr tr microsoft research cambridge july 
nuno marc shapiro caroline matheson 
efficient semantics aware reconciliation optimistic write sharing 
technical report msr tr microsoft research cambridge uk may 
nuno marc shapiro caroline matheson 
semantics reconciliation collaborative mobile environments 
proc 
tenth int 
conf 
coop 
info 
sys 
coopis catania italy november 
marc shapiro 
actions constraints approach replication definitions proofs 
technical report msr tr microsoft research march 
marc shapiro krishna 
constraint formalism consistency replicated systems 
proc 
th int 
conf 
principles dist sys 
grenoble france december 
marc shapiro nuno james brien 
mobile data sharing generic 
conf 
mobile data management berkeley ca usa january 
douglas terry marvin theimer karin petersen alan demers mike spreitzer carl hauser 
managing update conflicts bayou weakly connected replicated storage system 
proc 
th acm symposium operating systems principles copper mountain usa december 
acm sigops 
