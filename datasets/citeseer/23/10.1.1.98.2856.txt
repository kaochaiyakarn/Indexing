add readonly java john boyland june examine reasons readonly style qualifiers proposed java principles rules new qualifiers 
find mismatch motivating problems proposed solutions 
urge java designers proceed caution adopting solution sets problems 
proposals readonly java purpose having qualifiers readonly types programming language programmers enlist compiler loader enforcing rules proper data 
part program may willing access data part program guaranteed part mutate data 
proposals add enforceable readonly qualifiers java programs jac system java access control universes ller poetzsch heffter system alias dependency control 
mode system read java 
javari ernst system java immutability updated oopsla preprint publicly available 
section compare proposals emphasis broad similarities 
compare const earlier capabilities 
motivating example section demonstrates short readonly concept particular observational exposure explained criticized section 
basic rules basic idea systems type may readonly annotation 
formally class readonly represents super type words permitted implicit coerce type readonly widening conversion reverse coercion requires explicit cast 
rule carries obvious way parameters return values local variables fields 
receiver method may typed readonly call method read method 
main restriction value read type change field 
quick example consider artificial class fig 

ignoring supported part nasa ames high dependability computing program ncc university wisconsin milwaukee usa boyland cs edu class readonly mutable mutable readonly readonly method readonly new 
writes field readonly null 
return return method readonly 
field needs read write ref 
return 
result needs read write ref 
artificial class illustrating read rules 
mutable annotation example illustrates rule 
method receiver readonly indicated directly body type readonly legal write field 
free read fields return type read type return contents field error 
second method method declared normally readonly doesn restriction follow types fields write fails read inappropriate value store field explicit cast needed 
write succeeds read write parameter implicitly coerced read stored 
write require coercion 
example shows difference readonly applies stored field protecting fields object referred java existing final annotation refers field making non updatable method 
distinction pointer const object data members written const data member pointer pointer mutation 
keyword albeit somewhat confusingly pointers explicitly typed 
java final annotation protects field updated regardless method read 
jac javari include mutable annotation borrowed opposite effect field updatable regardless method read 
see method permitted update field despite read aside behavior mutable effect see method return contents field read write needed 
mutable direct opposite final transitivity explained section 
transitivity data members pointer type object type 
const object object data member const 
words pointer const object get object stored data member const const object 
transitivity entirely reasonable second object stored 
hand object pointer third object fetch pointer restriction mutating object 
lack transitivity reasonable consider state object consist solely stored inside 
object state extends objects stored heap 
instance map object includes pointers nodes red black tree 
changing nodes conceptually changes map 
map protect nodes voluntarily propagate maintain desired invariants 
java possibility storing object inside language level subsidiary objects referred implicit pointers 
question transitivity apply 
right answer depend referred object part object 
conceptually part object representation transitivity applies 
rule flexible alias protection 
unfortunately proposals described universes distinguishes representation fields fields 
proposals decide safe approach assume read write fields object refer representation 
heuristic reasonable classes notably container classes elements container part container 
reason low level capability system readonly specifically transitive 
systems mutable transitive 
final mutable applies field annotated object stored field field declared readonly 
systems transitivity illustrated method permitted fetch read write field 
readonly annotation receiver carries value fetched field 
write getter function returns read receiver read 
universes method illegal exposes representation object 
jac allows rule non read return type read method understood linked actual receiver mode 
annotation context return type indicates situation 
solution overload method programmer writes methods identical short bodies possible signatures 
javari permits solution supports genericity mode parameter method extension java generics 
dynamic casts programmer cast away accordance general principles language favoring flexibility safety 
java safety important cast perform narrowing conversion run time object null tested see desired class exception thrown 
called dynamic casts require run time type information saved 
java objects virtual methods comes little cost 
case readonly cost non negligible involve keeping extra bit pointer similar done capabilities 
potential cost safe solution cited reason jac permit read cast away 
supports analogous dynamic cast test statically readonly pointer really read write read method may test receiver perform different actions depending receiver read 
potentially surprising behavior weakens meaning readonly necessitates forced read conversions 
javari casts peculiar practical semantics 
dynamically casting readonly mutable away succeeds pointer marked read subsequently mutation exception thrown 
analogy statically unsafe type universes severely restricts non representation read write object may possess 
rule permits arrays implicitly coerced array super type 
array store inappropriate exception raised 
cases dynamic check uses protects dangers permitted type unsafe coercion 
rule practical permits code readonly safely exist legacy code lacks proper annotations 
unfortunately rule goes spirit dynamic cast supposed check means code may raise unexpected exceptions far erroneous cast occurs 
java seen language required permissive type rule 
unfortunate adding readonly required check 
furthermore implementing cast way requires pointers include extra bit 
advantage javari rule readonly iron method takes readonly receiver parameter absolutely modify state actual receiver parameter read write property compares favorably readonly universes seen 
universes semantics cast 
system distinguishes representation objects objects similar ownership type systems 
object owner 
read cast read write owner 
run time dynamic cast compares owner object current context succeeds 
cost borne object 
surprising implication read really read simply externally mutation 
summary systems reviewed share rules readonly adds layer type system 
assume require read write class part representation enforce transitivity read dynamic casts varying semantics supported additional run time cost object pointer representation 
example desire readonly qualifier motivated considerations software constructions 
section uses illustrative examples java lack readonly qualifiers exposes module misuse defensive programming 
examples chiefly come read proposal javari 
cases argue underlying issue fit idea readonly pointer 
case readonly illustrates number situations programmer may wish compiler enforce usage 

intersect method comment promises change mutate parameter 
commitment expressible signature method compiler called enforce signature 
javari proposals minor notational changes signature written void intersect readonly intset set compiler enforce parameter fact mutated 

declaration interest constructor 
accepts array integers uses array representation 
method exposes representation client class represents set integers 
public class intset integers set duplications 
private int ints removes elements set modifying set 
public void intersect intset set 
intset initialized int 
throws duplicate elements argument ints 
public intset int ints ints throw new ints ints number distinct elements 
public int size return ints length public int return ints partial implementation set integers 
ernst practical type system language immutability public class extends private final intset model construct view integer set 
set changes client call 
public intset set 
class view integer sets 
client retain pointer array instance set elements zero breaking representation invariant 
client may unaware problem assuming constructor copy array 
ernst explain array parameter annotated readonly compiler notice illegal initialization field parameter flag error 

caller size method expecting method perform side effect 
particular possible call method readonly integer set instance 
reason ernst suggest readonly qualifier implicit receiver 

turning method see case representation exposure 
signature prevent client breaking invariant changing values array 
ernst observe return value designated readonly compiler enforced designation client unable modify array elements upset invariants 
method java collection framework supposed return separate mutable array 
readonly clear set conform framework useful result 

consider class maintains graphical view integer set seen 
example come earlier 
class intended modify set expected view modifications performed 
readonly annotation set ensure view behaves expected regard 
summary readonly qualifier enforced compiler aid preventing dangerous exposure enable informal guarantees comments non mutation formal checkable 
shortcomings read go examples discuss ways read captures intended properties 

regarding intersect method additional property method users expect method retain parameter set method returns 
suppose parameter saved order intersection operation 
danger changes set invalidate memo cache 
retention may cause space leak 
readonly annotation prevent retention 

constructor takes array 
different reasonable designs constructor form client expected release array control adt 
words parameter represents transfer unique pointer array intended immutable changed adt client 
array intended copied adt retained 
situations fully expressed readonly annotation 
case array intended mutable protected readonly second case insufficient prevent client mutating array 
third case non retention explicated expressed 

size method caller assume receiver retained 

readonly qualify result prevents representation exposure exposing adt representation mutation external agents result permit observational exposure adt representation visible outside reads 
long set doesn change little problem way array visible 
array recycled different set client notice surprising changes 
equivalent situation occurs regard iterators vectors usually implemented pointers directly array 
case permitted retain iterator vector changes 
requirement expressed language const keyword 
java collections classes similar requirement case iterators expose implementation internals 
hand case graphical view find retention expected set assumed immutable 
example shows case semantics readonly type qualifier fits design intent 
seen final example readonly qualifier correctly expresses intent frequently insufficient job expressing intent encouraging software practice 
issues retention observational exposure particular seen examples motivate addition readonly qualifier 
section pointed problems retention 
section argue observational exposure negative effect software 
glass walls software practice requires true privacy just lack external change 
problem representation exposure known changing internal representation data type object available agents outside implementation context 
known problems observational exposure outside agents permitted read data 
representation exposure representation exposure deleterious modularity permits external agent mutate representation state data type object 
implementation may require certain object invariants correct functioning 
ensuring invariants maintained difficult changes occur outside implementation module 
section gave example integer set uses array integers invariant integers array distinct 
array exposed easily break invariant aware 
leino argues invariant need checked scope known 
novice programmer may appear sufficient representation fields object declared private visibility names sufficient prevent accessibility data 
aliasing piece data accessed different names may subvert protection provided naming 
order protect representation exposure necessary check piece privileged code assigns pointer representation accesses pointer representation 
aliasing useful property intimately connected idea object identity matters object refers just object contents 
don wish language needs controlled 
situations aliasing entirely benign effects state pointed immutable changed changed various uses conflict may unaware assuming automatic deallocation memory 
way control aliasing mutable state proposed ownership types instance clarke boyapati 
objects just fields representation indicated protected type system permit access representation objects outside owner 
ownership type systems access controlled distinction reads writes 
similar proposals universes note external agent break invariant read access permit readonly representation state 
relative safety readonly pointers representation motivates readonly proposals include ownership system 
read access granted argue 
observational exposure observational exposure read access granted mutable internal representation objects bad consequences inner workings data type part interface adt may observed invalid state concurrency errors may develop closely related points expanded remainder section 
argue hide representation completely glass walls permit observation protecting integrity insufficient 
observational exposure increases coupling 
inner workings data type seen outsiders longer inner workings part interface 
observing intended useful states observed properly specified 
putting information interface difficult evolve adt changes resisted clients 
developer hand may simply refuse give specification data observed 
case clients guess api unwarranted assumptions 
problem developer adt may claim bad software structure function software system 
observational exposure seen dual classic representation exposure case part system confused properties data observing change unexpectedly agent mutating data 
words problem due write access side supposed abstraction barrier interfering read access side 
observational exposure may expose data invalid states 
way describing problem exposure entire representation exposed abstraction barrier case modification outside expected maintain invariants aspects representation hidden 
case observer representation sees incomplete picture may appear invalid 
part exposed valid time exposure exposed retained state refers may invalid 
instance suppose intset kept separate field number elements array 
client asks array field equal length array array resized fit size set 
client doesn observe extra behavior 
say element set removed implementation may decide continue array regard element part array 
client retained array may see duplicate element array 
array appear invalid 
observational exposure may lead concurrency errors 
object may changed multiple threads important mutable state protected mutual exclusion locks 
lea describes problem solutions detail 
greenhouse describes design needed java code checked formally declared design 
recommendations summarized 
similar rules checking proposed boyapati rinard 
logically piece state protected single lock object 
lock object fields state lock completely different object 
instance adt may single private lock object synchronize accesses fields internal objects 
adt may multiple locks protect different groups objects 
threads synchronize protecting lock accessing data 
requirement applies writes reads may observe data invalid state 
invalid state may due transitory conditions mutation memory system effects local caching multiprocessor 
example suppose method integer set adt allocates new array initializes elements assigns array ints field 
thread properly synchronize may see field change point new array elements array initialized 
furthermore multiple locks involved actions adt require accessing essential locks acquired fixed order deadlock easily ensue threads access locks contrary orders 
adt permits observational exposure client may know locks protect state order acquire locks 
synchronizing lock synchronizing wrong lock results obtained meaningless synchronization wrong order may lead deadlock 
observation exposure safe details objects protect state revealed required synchronization order detailed 
interface may limit adt implementation flexibility 
observational exposure dangerous adt representation exposure yields improperly structured software 
fact viewed vantage program problems symmetric 
submit accept proposal solve problem ignoring 
abstraction walls opaque 
related noble vitek potter flexible alias protection noted problem read cause dependency problems value mutated cause read return new values 
coined term argument dependence refer kind coupling 
researchers showed importance distinguishing representation object external objects earlier alias control systems islands balloons 
idea designating representation developed clarke 
clarke showed ownership system encapsulate effects 
systems ownership system prevent exposure representation little need readonly clarke shown way integrate ownership uniqueness aldrich 
sch rli define encapsulation policies dynamically typed languages support different encapsulation policies different users 
read abilities defined restricting access methods change state generalization special read interfaces 
earlier techniques rely static typing policy attached dynamically way capability includes rights object pointer 
early reynolds defines interference piece mutable state accessed supposedly separate parts program part performing write 
hearn revisited mixture linear non linear logics 
approach changed inferred effects statements checked allowable accesses 
write access indicated linear part type read access non linear part 
similarly walker define capability language cl linear non capabilities indicate unique mutable state capabilities indicate shared immutable state 
permission separate pointers point state alias types connect 
nonlinearity read access permit write capability cl temporarily duplicated returned write status limited situations 
fractional permissions solved problem preserving linearity read permissions split copied 
shown idea fractions hearn reynolds separation logic idea extended handle counting splitting permissions extended model ownership adoption 
reviews readonly proposed added java 
argue transitivity rule restrictive read insufficient prevent deleterious observational exposure 
combined ownership system sort permissions problems overcome mechanisms worked fully 
adding readonly java current proposals set stone overly restrictive type rule 
recommend action taken add readonly java 
acknowledgments bill scherlis edwin chan aaron greenhouse tim fluid project cmu collaboration conversations 
bill scott tian zhao anonymous referees comments drafts 
jonathan aldrich valentin craig chambers 
alias annotations program understanding 
oopsla conference proceedings object oriented programming systems languages applications seattle washington usa november acm sigplan notices november 
paulo sergio almeida 
balloon types controlling sharing state data types 
mehmet ak sit satoshi matsuoka editors ecoop object oriented programming th european conference jyv skyl finland june volume lecture notes computer science pages 
springer berlin heidelberg new york 
adrian michael ernst 
practical type system language immutability 
oopsla conference proceedings object oriented programming systems languages applications vancouver british columbia canada october acm sig plan notices october 
richard cristiano peter hearn matthew parkinson 
permission accounting separation logic 
conference record popl nd acm sigact sigplan symposium principles programming languages long beach california usa january 
acm press new york 
appear 
chandrasekhar boyapati martin rinard 
parameterized type system race free java programs 
oopsla conference proceedings object oriented programming systems languages applications tampa florida usa november acm sigplan notices november 
chandrasekhar boyapati alexandru william martin rinard 
ownership types safe region memory management real time java 
proceedings acm sigplan conference programming language design implementation san diego california june acm sigplan notices may 
john boyland 
checking interference fractional permissions 
cousot editor static analysis th international symposium san diego california usa june volume lecture notes computer science pages 
springer berlin heidelberg new york 
john boyland james noble william 
capabilities sharing generalization uniqueness read 
rgen knudsen editor ecoop object oriented programming th european conference budapest hungary june volume lecture notes computer science pages 
springer berlin heidelberg new york 
john boyland william 
connecting effects uniqueness adoption 
conference record popl nd acm sigact sigplan symposium principles programming languages long beach california usa january 
acm press new york 
dave clarke sophia drossopoulou 
ownership encapsulation disjointness type effect 
oopsla conference proceedings object oriented programming systems languages applications seattle washington usa november acm sigplan notices november 
david clarke 
object ownership containment 
phd thesis university new south wales sydney australia 
david clarke tobias 
external uniqueness 
benjamin pierce editor informal proceedings international workshop foundations object oriented languages fool 
january 
david clarke james noble john potter 
simple ownership types object containment 
rgen knudsen editor ecoop object oriented programming th european conference budapest hungary june volume lecture notes computer science pages 
springer berlin heidelberg new york 
david clarke john potter james noble 
ownership types flexible alias protection 
oopsla conference proceedings object oriented programming systems languages applications vancouver canada october acm sigplan notices october 
manuel hndrich robert deline 
adoption focus linear types imperative programming 
proceedings acm sigplan conference programming language design implementation berlin germany june acm sigplan notices may 
aaron greenhouse 
programmer oriented approach safe concurrency 
phd thesis school computer science carnegie mellon university pittsburgh pennsylvania usa 
aaron greenhouse william scherlis 
assuring evolving concurrent programs annotations policy 
proceedings ieee international conference software engineering icse orlando florida usa may pages 
acm press new york may 
john hogg 
islands aliasing protection object oriented languages 
oopsla conference proceedings object oriented programming systems languages applications phoenix arizona usa october acm sigplan notices november 
peter hearn 
bi assertion language mutable data structures 
conference record eighth annual acm sigact sigplan symposium principles programming languages london uk january pages 
acm press new york 
nter dirk 
jac access right encapsulation java 
software practice experience may 
doug lea 
concurrent programming java 
java series 
addison wesley reading massachussetts usa second edition 
rustan leino nelson 
data abstraction information hiding 
acm transactions programming languages systems september 
peter ller arnd poetzsch heffter 
type system controlling representation exposure java 
sophia susan eisenbach bart jacobs gary leavens peter ller arnd poetzsch heffter editors nd ecoop workshop formal techniques java programs nice france june 

james noble jan vitek john potter 
flexible alias protection 
eric jul editor ecoop object oriented programming th european conference brussels belgium july volume lecture notes computer science 
springer berlin heidelberg new york 
hearn yang reynolds 
separation information hiding 
conference record popl st acm sigact sigplan symposium principles programming languages venice italy january pages 
acm press new york 
peter hearn makoto john power robert tennent 
syntactic control interference revisited 
mfps xi conference mathematical foundations program semantics volume 
elsevier 
john reynolds 
separation logic logic shared mutable data structures 
logic computer science pages 
ieee computer society los alamitos california july 
john reynolds 
syntactic control interference 
conference record fifth acm symposium principles programming languages tucson arizona usa pages 
acm press new york january 
sch rli andrew black st phane ducasse 
object oriented encapsulation dynamically typed languages 
oopsla conference proceedings object oriented programming systems languages applications vancouver british columbia canada october acm sigplan notices october 
sch rli st phane ducasse oscar nierstrasz wuyts 
composable encapsulation policies 
martin odersky editor ecoop object oriented programming th european conference oslo norway june volume lecture notes computer science pages 
springer berlin heidelberg new york 
mats tobias 
mode system readonly 
ecoop workshop formal techniques java programs budapest hungary june 

bjarne stroustrup 
programming language 
addison wesley reading massachussetts usa third edition 
david walker karl crary greg morrisett 
typed memory management static capabilities 
acm transactions programming languages systems 

