measuring similarity large software systems source code correspondence yamamoto makoto matsushita inoue college information science engineering university japan phone fax cs ac jp graduate school information science technology osaka university osaka japan phone fax ist osaka ac jp inoue ist osaka ac jp presto japan science technology agency 
current address graduate school information science technology osaka university osaka japan phone fax ist osaka ac jp 
important intriguing issue know quantitative similarity large software systems 
similarity metric sets source code files correspondence source code lines proposed 
software similarity measurement tool developed applied various versions operating system bsd unix 
resulting similarity valuations clearly revealed evolutionary history characteristics bsd unix operating system 
long lived software systems evolve multiple modifications 
different versions created delivered 
evolution simple straightforward 
common original system creates distinct successor branches evolution 
distinct versions may unified merged version 
manage versions correctly efficiently important know objectively relationships 
various kinds research software evolution focused changes metric values size quality delivery time process closely related software systems usually identified product lines development management product lines actively discussed 
knowing development relations architectural similarity systems key efficient development new systems organized maintenance existing systems 
interested measuring similarity large software systems 
motivated scientific curiosity quantitative similarity software systems 
quantify similarity solid objective measure 
quantitative measure similarity important vehicle observe evolution software systems done bioinformatics field 
bioinformatics distance metrics alignment dna sequences 
phylogenetic trees distance built illustrate relations species 
huge numbers software systems developed world possible identify evolution history software assets manner done bioinformatics 
various research finding software similarities performed focused detecting program plagiarism 
usual approach extracts metric values attributes characterizing target programs compares values 
research identifying similarity large collections plain text html documents :10.1.1.24.779:10.1.1.106.2691
works sampled information keyword sequences fingerprints 
similarity determined comparing sampled information 
interested comparing files 
important software similarity metric sampled information attribute value fingerprint reflect system characteristics 
afraid sampled information may lose important information 
collection source code files build system contains essential information system 
analyze compare source code files system 
approach requires computation power memory space sampled information current computing hardware environment allows source code comparison approach 
similarity metric called sline defined ratio shared source code lines total source code lines software systems evaluated 
sline requires computing matches source code lines systems boundaries files directories 
naive approach compare source file pairs systems file matching program diff comparison file pairs scale impractical apply large systems thousands files 
approach proposed improves efficiency precision 
fast code clone duplicated code portion detection algorithm applied files systems diff applied file pairs code clones 
concept similarity metric evaluation tool called software similarity measurement tool developed applied various software system targets 
evaluated similarity various versions bsd unix performed cluster analysis similarity values create dendrogram correctly shows evolution history bsd unix 
section presents formal definition similarity metric sline 
section describes practical method computing sline shows implementation tool 
section shows applications versions bsd unix 
results comparison related research section 
concluding remarks section 
software system software system correspondence rs pm fig 

correspondence elements rs similarity software systems definitions give general definition software system similarity concrete similarity metric 
software system composed elements pm represented set pm 
way software system denoted qn 
choose type elements files lines definitions similarity metrics described 
suppose able determine matching pi qj call correspondence rs set matched pair pi qj rs see 
similarity respect rs defined follows 
pi pi qj rs qj pi qj rs definition means similarity ratio total number elements composing rs total number elements numerator total number pi qi possibly related rs denominator total number pi qi 
rs smaller decrease rs 
exactly systems pi qi rs 
similarity metrics definition similarity leaves room implementing different concrete similarity metrics choosing element types correspondences 
show concrete operational similarity metric sline equivalent line matching 
element software system single line source file composing system 
example software system consists source code files source code file xi lines xi xi 
pair xij lines xij system system correspondence xij qn match equivalent lines 
determined duplicated code detection method file comparison method discussed detail 
lines minor distinction space comment modification identifier rename recognized equivalent 
sline affected file renaming path changes 
modification small part large file give great impact resulting value 
hand finding equivalent lines generally time consuming process 
practical approach section 
possible consider definitions similarity metrics 
comparison approaches section 
measuring sline approach key problem sline computation correspondence 
straightforward approach consider construct appended files concatenation source files systems respectively 
extract longest common subsequence lcs tool say diff implements lcs finding algorithm 
extracted lcs correspondence 
method fragile due change file concatenation order caused internal files diff follow line block movement different positions files 
example systems lcs diff case subsequence detected common sequence 
approach try greedily apply diff combination files systems 
approach scalability issue 
performance applied huge systems thousands files doubtful 
approach proposed effectively uses diff clone detection tool named 
tool detect duplicated code blocks called clones source code written java cobol 
effectively performs lexical analysis transformation tokens computing duplicated token sequences suffix tree algorithm reports results 
clone detection normalization parameterization location white spaces lines breaks ignored comments removed distinction identifier names disregarded 
normalization parameterization code blocks minor modification effectively detected clones 
applying sets files finds possible clone pairs bx bx code block 
bx identical considering difference line breaks white spaces comments user defined identifiers constant values 
process performed simply specifying sets file names directory names containing 
reports clone pairs files 
clone pairs members correspondence 
software system software system file file fig 

find correspondence file file file file code clones non gapped ones 
closely similar code blocks gap block detected larger clone identified smaller clones 
lengths threshold usually tokens reports clones 
reclaim small similar blocks similar directives undetected diff applied pairs files xi yj detects clone pair bx bx xi yj respectively 
result diff longest common subsequences considered members correspondence 
combined results diff increase sline compared 
example measurement simple example computing sline diff 
consider software system extended system shown 
composed source code files composed files evolved versions newly created file 
applied detect clones file sets 
finds clones assume clones detected combination files 
line clones files put correspondence 
diff applied file pairs lines resulting common subsequences diff added correspondence threshold determined experiences 
analyses experiences practical threshold 
set lower number say lot accidentally similar substrings clone detected clones precision resulting similarity value degraded 
step preprocessing sline step step execution step construction correspondence step sline fig 

similarity measuring process execution diff obtained clone detection 
correspondence obtain includes clones common subsequences diff 
approach benefits computation complexity precision results 
need perform diff file pair combinations 
chase movement lines inside outside files detected diff 
approach developed similarity evaluation tool effectively computes sline systems 
detailed process system 
overview illustrated 
inputs file paths systems represents subdirectory containing source code 
outputs sline sline 
step preprocessing comments white spaces empty lines removed affect execution programs 
step helps improve precision steps especially step 
step execution execute file sets option minimum number tokens clones detected default set 
step execution diff execute diff file pair xi yj respectively clone detected xi yj 
step construction correspondence lines appearing clones detected step common subsequences step merged determine correspondence step calculating sline sline calculated definition ratio lines correspondence systems 
note number lines step comments white spaces removed 
works source code files written java cobol 
systems files lines worst case time complexity follows requires mn log mn 
diff requires log single file pair perform execution diff file pairs 
total log worst case time complexity 
practice execution diff performed file pairs 
cases code clones detected file pairs file pairs 
practically execution performance fairly efficient grows super linearly 
example took seconds compute sline line source code files total pentium iii ghz cpu system bytes memory seconds line files 
hand case diff file pairs took hours compute sline line files 
applications bsd unix evolution target systems explore applicability sline versions open source bsd unix operating systems bsd lite bsd lite freebsd netbsd openbsd evolution histories versions shown shown bsd lite origination versions 
new versions freebsd netbsd openbsd currently developed open source development style 
major release versions listed chosen computing sline pair combinations 
evaluation performed source code files related os kernels written files 
results table shows number files total source code lines version preprocessing step 
table shows part resulting values sline pairs version 
note table symmetric values main diagonal line nature similarity 
www freebsd org www netbsd org www openbsd org www org img bsd family tree gif freebsd freebsd freebsd freebsd freebsd freebsd bsd lite netbsd netbsd netbsd netbsd netbsd netbsd fig 

bsd unix history bsd lite openbsd openbsd openbsd openbsd openbsd openbsd openbsd openbsd openbsd table 
number files loc bsd unix freebsd version 
files loc netbsd version 
files loc openbsd version 
files loc bsd version lite lite 
files loc table 
part sline values bsd unix kernel files lite lite freebsd freebsd freebsd freebsd freebsd freebsd bsd lite bsd lite netbsd netbsd netbsd netbsd means freebsd lite means bsd lite means netbsd 
general tendency sline values version immediate ancestor descendant version higher values non immediate ancestor descendant versions 
shows sline evolution freebsd freebsd versions 
values monotonically decline increasing version distance 
indicates similarity metric sline properly captures ordinary characteristics software systems evolution 
shows sline version freebsd netbsd 
version streams origin bsd lite naturally assumed older versions streams higher sline values younger versions lot independently added codes 
assumption true freebsd 
freebsd youngest version netbsd higher values netbsd versions 
freebsd netbsd imported lot code base bsd lite shown 
clearly spotted irregular nature evolution 
cluster analysis classifications os versions cluster analysis technique respect sline values shown 
cluster analysis need define distance os versions 
defined sline 
cluster non empty collection os versions distance clusters average pairwise distances numbers cluster 
construct dendrogram start clusters having exactly version merge nearest clusters cluster 
merging process repeated get cluster 
dendrogram cluster analysis shown 
horizontal axis represents distance 
os versions categorized left hand side closer ones high similarity values 
dendrogram reflects evolution history bsd unix versions depicted previously 
shown freebsd versions contained cluster openbsd cluster ii 
freebsd openbsd fig 

sline freebsd versions fig 

sline freebsd netbsd freebsd freebsd freebsd freebsd freebsd freebsd bsd lite bsd lite netbsd netbsd netbsd openbsd openbsd openbsd openbsd openbsd openbsd openbsd openbsd openbsd netbsd netbsd netbsd iii iv fig 

dendrogram bsd unix distinct genealogical systems diverged early stage evolution shown 
dendrogram sline objectively discloses 
see classification netbsd openbsd 
versions openbsd cluster iii cluster combined netbsd cluster iv openbsd 
suggests openbsd versions derived netbsd 
confirmed evolution history 
discussion related previous sections similarity definition similarity metric sline similarity measurement tool worked fine various software systems 
metric sline correspondence determines sline matching source lines located files directories 
reasons matching trace movement source code block files directories possible obtain ratio succeeded revised codes codes 
possible matching correspondence characterizes similarity metric naively duplicated source code 
assume system composed file new system composed files copies 
definition matching similarity matching gives matches matching similarity 
think matching reflect development efforts properly 
ii reason matching performance 
approach needs mechanism choose best matching pair possibilities generally simple straightforward process 
metric sline showed high correlation release durations freebsd 
release durations calculated difference os release dates 
pearson correlation coefficient sline values release durations freebsd versions 
hand increases size release durations highly correlated 
pearson correlation coefficient size increases table release durations 
think sline reasonable measures release durations case 
worked efficiently large software systems 
compute sline execution diff possible file pairs simple approach 
execution speed unacceptably slow mentioned 
combining diff boosted performance 
mentioned movement modification source code lines traced better effectively detects clones different white spaces comments identifier names 
matching computation diff chase changes 
lot researches clone detection tools developed tools 
related lot finding plagiarism programs 
ottenstein halstead metric valuations target program files comparison 
approaches set metric values characterize source programs 
structural information employed increase precision comparison 
order improve precision efficiency abstracted text sequences token sequences employed comparison 
source code texts translated token sequences representing programs structures longest common subsequence algorithm applied obtain matching 
systems aimed mainly finding similar software code education environment 
similarity metric values computed comparison metrics values show ratio similar codes non similar codes 
scalability evaluation methods large software system bsd unix known 
reverse engineering field research measuring similarity components restructuring modules software system improve maintainability understandability 
similarity measures metric values shared identifier names function invocation relations 
approaches involve important views similarity objectives identify components modules inside single system applied directly inter system similarity measurement 
literatures detection code clones patterns 
proposed metrics clones extended similarity large software systems 
study similarity documents broder :10.1.1.24.779
approach set fixed length token sequences extracted documents 
sets obtained document compute intersection 
similarity defined 
approach suitable efficiently computing resemblance large collection documents world wide web documents 
choosing token sequences greatly affects resulting values 
tokens minor modification detected 
probably inappropriate approach computing subjective similarity metric source code files 
manber developed tool identify similar files large systems :10.1.1.106.2691
tool uses set keywords extracts subsequences starting keywords fingerprints 
fingerprint set target file encoded compared fingerprint set query file 
similarity defined 
approach works efficiently source program files document files fit exploration similar files large system 
fragile selection keywords 
sensitive minor modifications source program files identifier changes comment insertions 
broder manber methods quite different developed perform comparison raw text sequences sampled text sequences 
sampling approaches get high performance resulting similarity values significant text comparison approach 
proposed definition similarity software systems respect correspondence source code lines formulated similarity metric called sline 
sline evaluation tool developed applied various software systems 
results showed sline useful identifying origin systems characterize evolution 
applications various software systems product lines investigate evolution 
macro level analysis viewpoint categorization taxonomy software systems analogous molecular phylogeny intriguing issue pursue 
micro level analysis view point chasing specific code blocks system evolution interesting perform 

antoniol merlo analyzing cloning evolution linux kernel 
information software technology 
basili briand condon kim melo understanding predicting process software maintenance release 
th international conference software engineering berlin 
cook ji harrison dynamic static views software evolution 
ieee international conference software maintenance icsm florence italy 
kemerer slaughter empirical approach studying software evolution 
ieee transactions software engineering 
software product line conference software product line conference www sei cmu edu plp conf html denver colorado 
clements software product lines practices patterns 
addison wesley 
eds 
bioinformatics nd edition 
john wiley sons england 
wilkerson aiken winnowing local algorithms document fingerprinting 
proceedings acm sigmod international conference management data 

prechelt philippsen finding set programs 
technical report fakultat fur informatik universitat karlsruhe germany 
wise yap improved detection similarities computer program texts 
sigcse bulletin acm special interest group computer science education 
broder resemblance containment documents 
proceedings compression complexity sequences 

manber finding similar files large file system 
proceedings usenix winter technical conference san fransisco ca usa 
hunt mcilroy algorithm differential file comparison 
technical report computing science bell laboratories murray hill new jersey 
miller myers file comparison program 
software practice experience 
myers nd difference algorithm variations 
algorithmica 
ukkonen algorithms approximate string matching 
information computation information control 
inoue token code clone detection system large scale source code 
ieee transactions software engineering 
gusfield algorithms strings trees sequences 
computer science computational biology 
cambridge university press 
mckusick bostic karels quarterman design implementation bsd unix operating system 
addison wesley 
everitt cluster analysis 
edward arnold rd edition london 
baker finding duplication near duplication large software systems 
second working conference reverse engineering toronto canada 
baxter moura anna bier clone detection syntax trees 
proceedings international conference software maintenance bethesda maryland 
ducasse rieger demeyer language independent approach detecting duplicated code 
proceedings international conference software maintenance oxford england uk 
johnson identifying redundancy source code fingerprints 
proceedings cascon toronto ontario 
johnson substring matching clone detection change tracking 
proceedings international conference software maintenance victoria british columbia 
kontogiannis evaluation experiments detection programming patterns software metrics 
proceedings fourth working conference reverse engineering amsterdam netherlands 
leblanc merlo experiment automatic detection function clones software system metrics 
proceedings international conference software maintenance monterey california 
halstead elements software science 
elsevier new york 
ottenstein algorithmic approach detection prevention plagiarism 
acm sigcse bulletin 
measurements program similarity identical task environments 
acm sigplan notices 
donaldson lancaster plagiarism detection system 
acm sigcse bulletin proc 
th technical symp 

tool detects plagiarism pascal programs 
acm sigcse bulletin proc 
th technical symp 

detecting plagiarism student pascal programs 
computer journal 
wise software detecting suspected plagiarism comparing structure attribute counting systems 
rosenberg ed proc 
st conference computer science education sydney australia 
whale identification program similarity large populations 
computer journal 
choi scacchi extracting restructuring design large systems 
ieee software 
intelligent re engineering software modularity 
proceedings conference software engineering austin texas usa 
cross features 
proceedings nd international workshop software configuration management 

