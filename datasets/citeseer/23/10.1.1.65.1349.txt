screening parameters affecting heuristic performance research screens tuning parameters combinatorial optimization heuristic 
specifically presents design experiments doe approach uses fractional factorial design screen tuning parameters ant colony system acs travelling salesperson problem 
screening preliminary step building response surface model rsm 
identifies parameters need included response surface model reducing complexity expense rsm design 
algorithm parameters problem characteristics considered 
open questions effect parameters performance answered 
ant placement choice ant pheromone update effect 
choice parallel sequential solution construction influence performance 
parameter assumed important shown effect performance 
new problem characteristic effects performance identified 
importance measuring solution time highlighted helping identify prohibitive cost non integer parameters parameters exponents acs algorithm computations 
results obtained publicly available algorithm problem generator 
technical report full version accepted genetic evolutionary computation conference gecco july london england 
track ant colony optimization swarm intelligence artificial immune systems categories subject descriptors performance systems design studies general terms performance keywords ridge daniel kudenko department computer science university york yo dd england cs york ac uk kudenko cs york ac uk design experiments fractional factorial design parameter screening ant colony optimization travelling salesperson problem 
motivation key strength meta heuristics versatility 
single framework provides ability solve problem instances related problem types 
versatility cost 
deployment meta heuristic usually involves setting values large number parameters 
typical metaheuristic parameters resulting large parameter space designer explore 
known parameter tuning problem 
parameter tuning problem exacerbated possible interaction parameters characteristics problem instance 
example parameter length candidate list ant colony optimisation may need increased increasing problem size 
practical meta heuristic designer simultaneously examine responses measure solution quality measure time solution 
important challenges meta heuristic researcher designer determine algorithm parameters effect responses determine order importance parameters 
determine problem characteristics effect responses determine order importance characteristics 
model relationship important algorithm parameters problem characteristics responses 
optimize responses relationship recommending parameter settings lead best responses certain problem characteristics 
current attempts address challenge rarely methodical design experiments doe approach 
case parameter settings chosen ad hoc manner quoted literature examination suitability current context 
best suitability examined called factor time approach 
approach sequentially tunes parameter individually holding fixed 
welcome improvement ad hoc approach remains unsatisfactory fails detect interactions parameters 
furthermore approach permits simultaneous optimization conflicting responses 
despite heuristic field core aim producing algorithms satisfy conflicting goals higher quality solution lower time 
na alternative approach requires factorial design 
design crosses levels factors 
permits detection parameter interactions exploration entire parameter space 
tuning problem parameters problem characteristics tested minimum levels full factorial crossing require prohibitive design points 
fractional factorial designs ffd offer manageable alternative 
introduces fractional factorial designs screening tuning parameters meta heuristic 
techniques applied ant colony system acs travelling salesperson problem algorithm ant colony optimization aco metaheuristic family 
research produces important results 
open questions relative importance acs parameters problem characteristics answered 
parameters previously thought important shown little effect algorithm performance 
acs parameters methodically investigated included 
results achieved methodical design experiments techniques 
experiments conducted publicly available algorithm code problem generators 
section gives brief background fractional factorial designs algorithm problem domain 
section describes methodology 
sections screening results methodical verification results respectively 
section presents comments factor levels interest 
related discussed section finishes directions 

background fractional factorial designs fractional factorial design uses subset full factorial design runs 
subset chosen main effects factors lower order interactions factors determined higher order interactions aliased 
terms aliased discern effect due term 
assumption fractional factorial design higher order interactions little consequence aliasing safely ignored 
order aliasing appears term factor doe sense input allowed vary expectation affects response measure 
factor covers algorithm tuning parameters problem instance characteristics 
fractional factorial design termed resolution 
purposes interested resolution iv higher designs 
resolution iv designs main effects determined factor interactions aliased 
factor example see resolution iv design estimate main second order interactions design points impressive general factorial runs 
aside savings number experimental runs main advantage incorporated sequential experimental strategy 
strategy begins smaller simpler designs augmenting additional design points experimenter learns process investigated 
existing data reused augmented design resulting efficient experimental resources 
sequential experimentation iterative process 
problem domain algorithm fractional factorial designs screen tuning parameters ant colony system traveling salesperson problem tsp 
tsp popular abstraction discrete combinatorial optimization problem 
informally described problem visiting set cities incurring lowest cost possible subject constraint city visited 
problem typically represented graph structure graph nodes representing cities graph edges representing measure cost moving cities 
characteristics influence difficulty tsp instance heuristic 
obviously problem size important 
large instances nodes difficult small instances 
shown standard deviation edge costs graph affects problem difficulty tsp algorithms 
verified ant colony optimisation 
ant colony system algorithm ant colony optimization meta heuristics family 
meta heuristics foraging behavior real ants 
broadly aco algorithms placing set artificial ants tsp nodes 
ants build tsp solutions moving nodes graph edges 
movements probabilistic influenced heuristic function edge length levels real valued marker called pheromone 
ants attracted graph edges high pheromone levels similar way natural ants chemical pheromones coordinate foraging 
ant movement decisions favor nodes part candidate list list costly cities node 
pheromone ants traverse edge 
ants completed tour graph algorithm iteration single ant chosen deposit pheromone edges tour just completed iterated activities artificial ants lead combinations edges reinforced pheromone 
eventually ants converge solution 
acs algorithm illustrated schematically 
detailed description literature 
common practice aco algorithms lo schematic acs algorithm cal search procedures 
study focuses acs constructive heuristic omits procedures 
acs tuned parameters 

alpha 
exponent distance heuristic term probabilistic decision function 

beta 
exponent pheromone term probabilistic decision function 

percentage ants 
number ants expressed percentage problem size 

candidate list length 
length ordered list nearest cities city 
expressed percentage problem size 

exploration threshold 
threshold ant choose city probabilistic decision mechanism candidate list 

rho 
scales pheromone deposit iteration 

rho local 
scales pheromone decays ant moves edge 

solution construction 
parallel construction ant move associated pheromone decay processing moves ant 
sequential construction involves single ant making complete tour associated pheromone decays processing moves ant 

ant placement 
determines ants initially placed tsp graph 
approaches random scatter graph placement ants randomly chosen city 

pheromone update 
determines choice ant perform pheromone deposits iteration 
choices 
uses best ant iteration just completed 
bestsofar uses best ant iterations far 
note number ants applied problem candidate list length ants usually expressed absolute value 
open question parameters influence acs 
parameter alpha normally fixed acs allowed vary research 
rho rho local usually set equal 
research examined separate values 

method algorithm implementation algorithm implementation java port publicly available code 
java port informally verified reproduce exact behavior original code stopping criterion common aco field heuristics general halt experiments combinatorial count 
count typically algorithm operation cost function evaluation algorithm iteration 
regard reproducibility certainly preferable time stopping criterion 
johnson goes far label time stopping criteria 
hard iteration stopping criterion risks biasing results 
fixed number iterations solve difficult problem easier problem 
particular importance vary problem characteristics hypothesized affect performance 
research takes practical view algorithm longer producing improved results regularly better halt execution better employ computational resources 
leads stagnation stopping criterion stagnation number iterations solution improvement observed 
offers reproducibility combinatorial count softer stagnation avoids likelihood bias 
research uses stagnation threshold iterations 
responses heuristic performance measures reflect conflicting goals high solution quality low time solution 
response reflects time solution cpu time algorithm run time algorithm halted 
measure time best solution reflects experimenter benefit hindsight 
cpu times iridia ulb ac aco aco code public software html include time write output time calculate output data essential algorithm functioning 
choices response reflect solution quality matter debate community appropriate 
research uses common response relative error 
relative error solution difference algorithm solution optimal solution expressed percentage optimal solution 
researchers introduced measure error called adjusted differential approximation ada 
ada defined algorithm solution optimal solution expected value random solution 
record measure relative error difference investigated 
quality responses optimal solution value calculated concorde solver 
ada expected random solution value estimated averaging solutions obtained random permutations tsp nodes 
note record error best solution run 
birattari dorigo criticize best solution number runs advocated 
counter reasoning real world scenario best runs 
firstly leads measuring performance random restart version algorithm 
secondly random restart version trivial repeated run algorithm improvement input previous run sound restart strategy anyway 
problem instances research includes problem size standard deviation cost factors need method produce instances controllable values characteristics 
unfortunately available benchmark libraries breadth provide instances 
resort problem generator 
reproducibility java implementation dimacs problem generator 
informally verified produce instances dimacs code 
generator modified draw edge costs log normal distribution standard deviation resulting edge costs controlled mean fixed 
log normal distribution properties inspired previous investigations effect cost matrix standard deviation problem difficulty exact tsp algorithm 
histograms normalized cost matrix real instances tsplib demonstrate log normal shape 
experiment design reported research resolution fractional fac iv design replicates centre points requiring total runs 
table lists experiment factors table experiment factors factor levels 
denotes numeric factor factor 
factor type low high alpha beta ants rho solution construc 
parallel sequential ant placement random pheromone update best far best iteration problem size problem stdev high low levels 
note screening experiment requires levels factor high low 
experiment aim determine factor influence response 
experiment accurately model factor influence response require advance response surface model design 
factors acs algorithm tuning parameters problem characteristics investigated section 
note problem characteristics size standard deviation included factors design 
relationship established algorithm tuning parameters instance characteristics 
factor levels factors chosen encompass values typically seen literature 
levels factor problem size largest computational resources permit 
levels factor standard deviation chosen shapes histograms distributions edge lengths 
high low levels factors coded respectively statistical analysis 
design sufficient resolution main ef iv aliased third order interactions 
second order interactions aliased second order interaction 
assuming third order interactions negligible design allow detect main effects second order effects 
sufficient screening experiment 
crossings factors required problem instances including centre points 
instance occurrence size standard deviation combination 
experiments conducted similar machines necessary randomize run order 
standard doe technique dealing unknown uncontrollable nuisance factors 
factors include hardware differences operating system differences impact cpu time response 

results analysis table ranked contributions main effects 
statistically significant effects bold 
ada time alpha beta ants rho data time relative error ada checked usual diagnostic tools box cox plot recommended log transform responses 
outliers data removed 
transformed data passed diagnostics satisfactorily 
table summarizes ranks percentage contribution main effects responses 
effects statistically significant level bold 
important points note effects problem size quality responses ada complete agreement 
interestingly problem size effect ada 
may ada conceived results invariant transformations leave problem equivalent 
may case problem generator instances significantly difficult sizes 
alpha significant effect quality solution 
confirms common recommendation setting alpha effectively making redundant 
course alpha value heuristic information included ants decision making 
values ruled computational cost exponentiation values greater unnecessary 
rho statistically significant effect main responses 
ant placement pheromone update mechanism effect solution quality significant time difference alternative levels factors 
open questions literature 
solution construction significant effect main responses 
open question literature 
normal plot internally residuals residuals versus predicted residuals versus run predicted versus actual externally residuals versus actual leverage distance versus run 
interaction ants time relative error ada second order interactions statistically significant level respectively 
means second order interactions ignored tuning acs algorithm emphasising advantage tuning 
shows significant second order interaction number ants exploration threshold relative error response 
plot shows higher number ants produces lower relative error error lower exploration threshold high 
results suggest factors effect algorithm performance 
alpha rho ant placement pheromone update 
model recommend levels important factors confirm accuracy model 

confirmation analysis choice factor levels minimum possible sufficient screening restricts model linear interpolation responses high low values factors 
responses fact exhibit curvature augmented design levels factors required predictions centre design space 
simple test presence curvature run experiments centre design space check points differ hypothesized planar surface 
case centre points confirmed presence curvature 
invalidate screening experiment recommendations factors importance 
sufficient screening examine extremes factor values 
consequently performance predictions restricted edges design space 
generated new problem instances combination problem instance characteristics size cost matrix standard deviation 
randomly chose algorithm parameter values restricted lie extremes parameter ranges original design table 
generated points new points building model run new instances encountered algorithm 
actual responses randomly generated runs compared model predictions runs 
repeated times problem instance 
shows representative plot predicted actual values relative error randomly generated runs new instance size standard deviation 
see predictions close actual values 
importantly tuning perspective predicted values follow trend actual values 
confirms model accurate predictor responses resulting high low values factors 
recommend plot predicted relative error confidence intervals actual relative error problem size standard deviation 
table anova recommended factor levels responses considered isolation 
denote high low recommendation respectively denotes don care ada time alpha beta ants rho region interest parameter space region solution quality high time solution low 

factor levels interest critically important deal multiple conflicting responses heart meta heuristic research question fast 
example look quality response isolation model recommends higher percentage ants lower relative error 
expected higher number ants better explore problem space 
look time response model recommends low number ants 
obviously fewer ants take shorter time process 
recommendations response model factor summarized table 
summaries tell potential factor levels interest treat recommendations caution 
screening design linear model determined actual response surface exhibits curvature section 
recommendations factor levels optimize performance require sophisticated experiment design response surface model 
conflicting recommendations highlight importance measuring cpu time advocated johnson 
measurement table parameter values bonabeau 
parameter values oliver alpha beta rho global rho local combinatorial count number iterations fail detect important cost increasing number ants 
furthermore measuring cpu time reveal important inefficiencies algorithm 
recall alpha beta exponents ant heuristic function 
exponent integer exponentiation extremely expensive operation 
implementation informal profiling showed cpu time spent calculating exponents alpha beta non integer values 
important information gleaned examining cpu time alpha value say produce little difference quality produce dramatic differences solution time 
acknowledge expense exponentiation ameliorated techniques look tables 
tweaking performance algorithm implementation scope research 

related cheeseman investigated effect cost matrix standard deviation difficulty travelling salesperson problems exact algorithm 
problem sizes instances generated instance mean cost varying standard deviation cost 
varying standard deviation followed log normal distribution 
computational effort exact algorithm shown affected standard deviation cost matrix 
differs cheeseman uses larger problem sizes heuristic algorithm exact algorithm 
algorithm parameters examined time problem characteristics 
confirms cost matrix standard deviation affects problem difficulty acs 
bonabeau investigated simple genetic algorithm tune parameters modified version ant colony system algorithm city city problem 
trail parameter rho local global pheromone updates original acs separated local global pheromone update equations respectively 
approach taken research 
extra parameters introduced change pheromone equation global pheromone update 
acs implementation augmented opt local search 
candidate list length fixed 
evolved parameter settings summarized table 
application acs implementation limited new parameters removal candidate list local search procedure 
small problem instances tested 
approach efficient saves investigating parameters effect performance 
attempt tune acs addressed parameters 
argued sufficient fix alpha vary beta 
shown argument correct benefit empirical analysis 
authors claimed number ants reasonably set number cities problem 
shown unsupported claim incorrect 
authors partitioned parameter ranges values respectively 
reasoning granularity partitioning number partitions varied parameters 
shows levels parameter sufficient 
treatment run times iteration optimum stopping criterion single city instance oliver 
single city problem prevents examination problem characteristics size small trivial algorithm 
resulted experiments 
approach inefficient requiring times runs tune quarter parameters 
birattari uses algorithms derived machine learning technique known racing incrementally tune parameters metaheuristics 
algorithms tune iterated local search quadratic assignment problem max min ant system travelling salesperson problem 
tuning achieved fixed time constraint goal find best configuration time 
dual problem finding threshold quality short time possible acknowledged author pursue idea bi objective optimisation time quality 
approach user wishes impose time constraint model predictions expressed constraint numerical optimisation desirability function 
general growing awareness need doe techniques heuristics field 
knowledge application techniques experiment designs screening tuning aco algorithm 

contributions answers important open questions aco literature confirms common recommendations parameter settings acs algorithm 
distinction rho rho local 
worthwhile distinguish rho rho local 
rho local stronger influence performance rho 
solution construction affect performance 
solution construction significant effect performance 
answers open question literature pheromone update method affect performance 
pheromone update mechanism significant effect solution time 
matter algorithm uses best ant far best ant current iteration 
despite statistically significant effect time practical difference methods require calculating best ant current iteration 
ant placement affect performance 
ant placement significant effect time 
matter place ants randomly single city scatter randomly graph 
practical difference times methods 
recommendations parameters affect acs performance 
alpha important acs 
alpha usually set acs 
supports choice 
beta important acs 
beta restricted integer values avoid expensive exponentiation calculations 
rho rho local important 
rho reach statistical significance responses advise screening rho important tuning parameter 
furthermore poses answers new questions regarding acs algorithm 
effect cost matrix standard deviation problem difficulty 
demonstrates cost matrix standard deviation strong effect acs performance 
confirms similar results literature algorithms section 
result may surprise reader wish stress importance aco field 
experiments acs probably aco algorithms include standard deviation factor 
studies compare algorithm performance problems different sizes confounding effect size hidden effect standard deviation 
relative error adjusted differential approximation ada 
results regardless quality response 
agree ada advantage incorporating comparison random algorithm solution 
purposes screening tuning matter response 
second order interactions important 
statistical analyses demonstrated second order interactions statistically significant responses 
confirms insufficient analyse affects acs tuning parameters factor time approach 
research considered template methodical way screen heuristic parameters particularly aco algorithms 
experiment designs analyses generated commercial software packages 
enhances reproducibility reliant custom tools developed academic context smaller user base 
measuring number ants candidate list length relation problem size improves generalization 
research dramatically illustrated importance time measurement response seldom literature concerns reproducibility 
measurement time uncovered prohibitive cost non integer values alpha beta 
furthermore measurement time way reflect performance cost parameters exploration threshold exploration expensive operation offset resulting gains quality 
experience strongly urge researchers measure report times 

immediate line build response surface model reduced parameter set reduced parameter ranges possible 
rsm permits prediction optimization responses design space allowing curvature response surface mentioned section 
achieved acs needs extended aco algorithms 
ultimately see screening methodology subsequent rsm optimization applied suitable meta heuristics 
methodically overcome parameter tuning problem improve reproducibility meta heuristic application papers 
grateful double blind reviewers gecco professor john clark university york constructive comments improved technical report associated conference 

applegate bixby cook 
implementing dantzig fulkerson johnson algorithm large traveling salesman problems 
mathematical programming series 

experimental research evolutionary computation 
new 
springer 
birattari 
problem tuning metaheuristics 
phd universit libre de bruxelles 
birattari dorigo 
assess report performance stochastic algorithm benchmark problem mean best result number runs 
optimization letters 
bonabeau 
evolving ant colony optimization 
advances complex systems 
cheeseman kanefsky taylor 
really hard problems 
proceedings twelfth international conference artificial intelligence volume pages 
morgan kaufmann publishers usa 

factor time versus designed experiments 
american statistician 
dorigo gambardella 
ant colony system cooperative learning approach traveling salesman problem 
ieee transactions evolutionary computation 
dorigo st tzle 
ant colony optimization 
mit press massachusetts usa 
eiben jelasity 
critical note experimental research methodology ec 
proceedings ieee congress evolutionary computation pages 
ieee 
clark 
optimal parameters ant colony optimization algorithms 
proceedings international conference artificial intelligence volume pages 

johnson 
theoretician guide experimental analysis algorithms 
proceedings fifth sixth dimacs implementation challenges pages 
american mathematical society 
montgomery 
design analysis experiments 
john wiley sons 
myers montgomery 
response surface methodology 
process product optimization designed experiments 
john wiley sons 

statistics research 
iowa state university press nd edition 
paquete 
proceedings workshop empirical methods analysis algorithms 
international conference parallel problem solving nature iceland 
reinelt 
tsplib traveling salesman problem library 
orsa journal computing 
ridge kudenko 
sequential experiment designs screening tuning parameters stochastic heuristics 
paquete editors workshop empirical methods analysis algorithms ninth international conference parallel problem solving nature pages 

ridge kudenko 
analysis problem difficulty class optimisation heuristics 
editors proceedings seventh european conference evolutionary computation combinatorial optimisation volume lncs pages 
springer verlag 
ridge kudenko 
analyzing heuristic performance response surface models prediction optimization robustness 
proceedings genetic evolutionary computation conference 
acm 
dorigo 
model search combinatorial optimization comparative study 
proceedings seventh international conference parallel problem solving nature volume pages 
springer verlag 
