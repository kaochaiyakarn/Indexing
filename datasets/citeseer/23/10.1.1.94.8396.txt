taint enhanced policy enforcement practical approach defeat range attacks wei xu sandeep sekar department computer sciences stony brook university stony brook ny sekar cs sunysb edu policy confinement employed specification intrusion detection systems popular approach defending exploitation vulnerabilities benign software 
effective approach requires development accurate application specific security policies difficult task 
sufficient resources expertise expended policy development conventional access control policies employed approaches inherently limited detect attacks involve resource accesses legitimately needed victim application 
detect attacks hijack legitimate access privileges granted program attack ftp server download password file 
note ftp server normally need access password file performing authentication 
common attack types reported today sql injection cross site scripting involve subversion legitimate access privileges buffer overflows format string attacks easily adapted evade policy detection 
develop new approach addresses weaknesses augmenting traditional security policies information origin byte data security sensitive operations 
information security policies distinguish accesses application accord accesses behalf untrusted users 
distinction turns crucial accurate detection attacks including buffer overflows format string vulnerabilities integer overflows sql injection cross site scripting command injection directory traversal 
attack types account rd vulnerabilities reported cve 
simple application independent policies sufficient detecting attacks 
detection overheads server applications 
information flow analysis taint analysis studied context confidentiality integrity properties decades :10.1.1.10.3979
spite foundational role played line research computer security techniques weren really arsenal techniques detecting vulnerability exploits contemporary software 
insightful works showed information flow analysis defeat exploits 
tracking source program data granularity bytes techniques detect attacks overwrite pointers untrusted attacker provided data 
essential step buffer overflow related attacks benign uses programs involve outsiders supplying pointer values techniques detect attacks high level confidence 
build idea finegrained taint analysis attack detection 
specifically develop source source transformation programs efficiently track information flows runtime 
combine information security policies reason source data security critical operations 
combination turns powerful attack detection offers advantages previous techniques practicality 
techniques rely hardware level support taint tracking applied today systems 
addresses drawback applicable arbitrary cots binaries 
due difficulties static analysis transformation binaries techniques runtime instruction emulation frequently slows programs factor 
contrast program transformation technique slows popular server programs average factor acceptable 
leveraging low level nature language implementation correctly accurately logic errors input validation dos config errors directory traversal cross site scripting memory errors format string sql injection command injection breakdown cve security vulnerabilities face memory errors type casts aliasing 
exploit highlevel nature compared binary code perform optimizations instrumental efficiency widespread writing systems software interpreters develop implementation works box common servers web applications written scripting languages php bash 
range attacks detected 
techniques mentioned applied detect attacks involve forging pointers buffer overflow attacks 
contrast show combining fine grained taint information expressive security policies detect wider range attacks including sql injection cross site scripting command shell code injection directory traversal addition memory corruption format string attacks 
policies disrupt essential step involved attacks ensuring high degree accuracy 
detecting wide range attacks needed generalize fine grained taint analysis handle forms implicit information flows information flow takes place means assignments 
challenges development techniques reason implicit flows producing false alarms practice 
successfully applied technique medium large programs php interpreter kloc glibc gnu standard library loc 
shows distribution cots software vulnerabilities reported cve 
mentioned attack types account rd cve vulnerabilities detected approach 
remaining vulnerabilities correspond configuration logic errors effect permitting accesses denied general addressed detailed application specific knowledge cve vulnerabilities classified input validation errors exploited cause crashes infinite loops usually detectable policy attack detection techniques 
attack detection ability approach contrasts previous approaches tackled individual subclasses buffer overflows format strings command injection attacks key steps approach outlined 
fine grained taint analysis 
step approach source source transformation perform fine grained tracking taint information runtime 
taint originates input functions need externally specified analyzer 
typically functions read recv system calls servers read untrusted input network connection 
transformed program tracks taint information level bytes memory 
specifically memory location associated bit taint information 
logically view taint information bit array 
taint information associated data memory location fact unclear vulnerabilities addressed general purpose vulnerability remediation technique 

data propagates memory associated taint information propagated 
taint information associated memory locations variables technique correctly handle aliasing buffer overflows 
policy enforcement 
step driven security policies associated security critical functions 
typically small number functions system calls open execve library functions functions access external modules sql database 
security policy associated function checks arguments unsafe content 
general policies different functions different practice small number application independent policies sufficient protect common attack types 
protection attacks improved stricter application specific taint enhanced policies 
organization 
motivating attack examples section 
section describes source code transformation fine grained taint tracking 
policy language sample policies described section 
implementation approach described section followed experimental evaluation section 
section discusses related 
concluding remarks appear section 
taint enhanced policies motivation benefits section motivating attack examples 
conclude section summarizing common features attacks pointing importance fine grained taint information need flexible policies detect attacks 
sql injection common vulnerability web applications 
server side applications communicate web browser client collect data subsequently construct sql query sent back database 
consider statement written php constructing sql query look price item specified variable name 
cmd select price products name name value name assigned html form field provided untrusted user sql injection possible 
particular attacker provide value name 
xyz update products set price name value name cmd take value select 
name xyz update products set price name note semicolons separate sql commands 
query constructed program retrieve price item called xyz set price item called zero 
attack enables attacker purchase item cost 
fine grained taint analysis mark character query box tainted 
policy precludes tainted control characters semicolons quotes commands update sql query defeat attack 
refined policy described section 
memory error exploits 
different types memory error exploits heap overflows integer overflows 
share basic characteristics exploit bounds checking errors overwrite security critical data code pointer data 
fine grained taint analysis mark overwritten pointer tainted 
policy disallows control transfers tainted pointer values defeat attack 
format string vulnerabilities 
formatted printing programs achieved printf family functions 
functions take format string parameter followed zero parameters format string 
common misuse functions occurs untrusted data provided format string statement printf contains alphanumeric string won cause problem attacker inserts format directives control behavior printf 
worst case attacker format directive overwrite return address attacker provided data execute injected binary code 
fine grained taint analysis analysis mark format directives tainted 
simple taint enhanced policy disallows tainted characters second argument series functions prevent attack 
restrictive policy may prevent tainted format characters risks false positives cases 
attacks hijack resource access privileges section consider attacks attempt evade detection staying bounds resource access privileges normally needed application 
attacks illustrate unique power afforded combining security policies taint information 
suppose web browser contains vulnerability allows attack embedded web page upload arbitrary file owned browser user malicious web site user consent 
browser needs access user files access raise suspicion 
easily detect attacks combing taint information policies particular policy states filename derived untrusted inputs access limited small possibly empty set files 
hand filename originated trusted sources program text trusted browser popup policy allow access files 
policy prevent type attack normal browser 
example fits context applications 
variant problem leads directory traversal attacks attacker attempts access files outside authorized directory document root case web server 
typically done including characters filenames ascend document root 
case victim application incorporates checks characters attacker may attempt evade check replacing hexadecimal unicode representation various escape sequences 
easily handled simple taint enhanced policy prevents access filenames outside document root filename access tainted 
restrictive policy precludes access cases filename contains tainted characters 
final example class attacks consider ftp server normally needs access password file user authentication 
attacker may able exploit vulnerabilities server download password file possibly offline dictionary attack 
key point attacks discussed section conventional access control policies detect 
attacks access resources normally accessed victim policies configured permit accesses 
taint analysis provides way infer intended resource access 
incorporating inferred intent granting access requests taint enhanced policies provide way distinguish attacks legitimate uses privileges granted victim application 
discussion 
examples discussed bring important points importance fine grained taint information 
coarser granularity taint tracking marking program variable tainted untainted able detect attacks described 
instance case sql injection example variable cmd containing sql query marked tainted derives part value untrusted variable name 
result distinguish legitimate uses web application name contains alphanumeric string attack name contains characters semicolon sql commands 
similar analysis case stack smashing format string attacks scripting directory traversal 
need taint enhanced policies 
possible prevent attacks enforcing conventional access control policies 
instance sql injection example policy uniformly prevents semicolons sql commands cmd policy preclude database cause web application fail 
similarly memory error example working program control transfers pointers prevented 
examples section specifically chosen illustrate need enforcing different policies resource accesses source filename data resource access 
point regard attacks aren characterized simply presence absence tainted information arguments security critical operations 
necessary develop policies govern manner tainted data arguments 
important feature taint enhanced policy enforcement disrupts essential steps attacks mentioned restricting legitimate operation protected application 
provides high confidence accuracy attack detection 
transformation fine grained taint tracking main steps taint enhanced policy enforcement marking identifying external inputs program untrusted marked tainted ii tracking flow taint program iii checking inputs security sensitive operations taint enhanced policies 
section discusses tracking implemented source source transformation programs 
steps described section 
runtime representation taint information technique tracks taint information level bytes memory 
necessary ensure accurate taint tracking type unsafe languages approach correctly deal situations bounds array write overwrites adjacent data 
bit taint tag byte memory representing absence taint representing presence taint 
bit array stores taint information 
taint bit associated byte address 
principle viewed statically allocated array undesirable effect locking th total address space 
avoid allocate array demand technique likened user level page fault handling 
initially initialized fixed location memory memory allocated 
accessed corresponding memory hasn allocated raise signal related memory fault 
transformed program intercept signal query os determine address involved fault 
address belongs allocate chunk memory say kb mmap return signal handler 
memory fault due different address signal forwarded program signal handler 
basic transformation source code transformation described section designed track explicit information flows take place assignments arithmetic bit operations 
implicit flows take place comparisons conditionals addressed section 
high level explicit flow simple understand result arithmetic bit expression tainted variables expression tainted variable tainted assignment tainted 
specifically shows expression computes taint information associated expression shows type statement corresponding transformed version rans definition 
transformation rules shown table part explain rules transformation functions 
logically instance format directives aren restricted originated program text 
similarly web application arbitrary sql commands including originated application program text 
comment constants untainted tag tag refers bits sizeof starting address untainted tag sizeof cast type casts don change taint 
op arithmetic bit op op arithmetic bit op definition taint expressions rans tag sizeof rans rans rans rans rans return return ta tag sizeof ta rans tag sizeof tag sizeof transformation statements taint information function parameter provided additional parameter ta 
function body value ta copied tag bits associated step necessary actual parameter passing actions pushing values stack happen lower level aren visible level source language 
similar mechanism needed copy tag bits associated return value caller 
implementation don additional parameters introduces additional complexity dealing untransformed libraries 
separate stack pass taint arguments 
optimizations basic transformation described effective introduces high overheads slowing programs factor 
improve performance developed optimization techniques summarize 
optimizations reduced overheads cpu intensive programs common server programs 
system level optimizations 
bit taint values 
implementation accessing taint bits requires bit masking operations degrades performance significantly 
observed bit taint values taint value integer variables contained single byte eliminating need masking operations 
approach increase memory requirements hand opens possibility tracking richer taint information 
demand allocation allocation original approach global variable implement 
initialization huge array gb took place program start incurred significant overheads 
note tag initialization warranted static data initialized program start 
experimented mmap allocate array dynamically limiting initialization small fraction array 
reduced startup overheads mere address space tie os resources page table entries significantly increased times forking 
programs shells fork frequently overhead significant switched demand allocation explained earlier 
intra procedural optimizations 
local taint tag variables possible 
reduce overheads accessing implemented optimization uses local variables maintain taint tags 
approach sound absence aliasing local variables 
applied functions explicitly compute addresses local variables 
local variables typically frequently global variables optimization yields significant performance improvement practice 
intra procedural dependency analysis 
improve performance perform local dependency analysis determine local variable tainted 
note local variable tainted involved assignment global variable procedure parameter local variable possibly tainted 
optimizations 
considering optimizations ongoing improve performance 
concerns generation versions function accepts tainted arguments accepts untainted arguments 
easily generalized produce multiple versions corresponding different subset tainted arguments 
approach needs coupled inter intra procedural static analysis determine version function invoked program point 
static analysis drive function versions generate 
avoid code explosion techniques need developed control number versions generated 
support implicit information flow implicit information flow occurs values certain variables related virtue program logic assignments 
classic example code snippet assignments involving values 
need tracking implicit flows long recognized 
formalized implicit flows notion noninterference 
research efforts developed techniques concept :10.1.1.2.1684
noninterference powerful property capture bit correlation sensitive data data 
instance code error true error bin ls execve implicit flow error policy forbids tainted data execve argument violated code leading noninterference taint analysis lead excessive false alarms application 
context kinds attacks addressing clear attackers need control value minimal relationship exists code 
appropriate track explicit flows 
important case occurs frequently web applications requires handling implicit flows 
data supplied web application encoded needs decoded application 
decoded data depends input marked tainted 
approach support implicit flows value variable determines value variable 
selection criteria achieve balanced trade tracking necessary data value propagation minimizing harmful taint information dissemination 
currently support kinds implicit flows 
translation tables 
decoding implemented table look translation tab translation tab array byte input 
case value determines value direct assignment handle case modify basic transformation result array access marked tainted subscript tainted 
successfully handles translation tables php interpreter 
decoding switch 
decoding implemented statement form code url decoding 
clearly value determined entirely value generally switch statements translate multiple characters 
transformation handles way series statements pattern applied constant valued add assignment tag tag 
experiment support types implicit flows necessary detecting attacks encode attacking requests character encoding formats url encoding 
fact attacking strings character encoding common technique attackers evade input validation checks applications input filter intrusion detections 
support implicit flows able correctly track taint information untrusted input data propagates input data decoded original encoding formats 
consequently tainted enhanced policy checking won fooled attacks 
specifying marking specification security policies marking trusted untrusted inputs marking actions needed data coming external sources 
code including libraries transformed marking needs specified system calls return inputs environment variables command line arguments 
libraries aren transformed marking specifications may needed untransformed library functions perform inputs 
note treat command line arguments environment variables arguments call main 
marking specifications case associated function call 
marking actions specified bmsl behavior monitoring specification language event language designed support specification security policies behaviors 
bmsl specifications consist rules form event pattern action 
bmsl simplified way particular event pattern form event condition event identifies function 
function returns optional condition holds action executed 
event corresponding function take additional argument captures return value function 
condition action external functions written 
action include arithmetic logical operations 
consider example read fd buf size rv fd buf rv buf rv rule states read function returns buf argument tainted read network determined external function 
actual tainting done support functions 
bytes buffer returned read marked 
note input action needs associated marking rule 
reduce burden writing rules provide default rules system calls data returned system call 
specific rules override default rules rule supplied user 
specifying security policies detect generalized injection attacks arguments security sensitive operations checked security policies refer data values taint information 
security policies written bmsl rules rules slightly different marking rules 
security policy rules condition component specifies security checks examined immediately event function invoked 
simplify policy specification events defined represent set functions share security policy 
definition condition extended support regular expression pattern matching keyword matches 
data values taint information define regular expression pattern 
example represents attack type policy comment control flow jmp addr tainted values hijack addr matches 
term target control transfer format string fmt format specifiers fmt matches 

reject tainted directory file function path path contain directory traversal path open path path traversal strings file function path real path path go path matches 

outside base directory path path reject cross site html print function str tainted script tags script scripting str matches 
object output html reject sql injection sql query function query sql query string query matches 
contain tainted meta chars reject shell command shell command function cmd cmd argument system injection cmd matches 
shouldn contain tainted meta chars reject security policies attack detection single character unspecified taint value defines tainted character parentheses regular expression patterns group characters 
meta character matches single character meta character matches sub pattern zero times 
similar regular languages regular expression pattern definition defined regular expression patterns 
instance sample policy rules simply regular expression pattern matches string identifier numeric value 
shows examples simple effective policies detect various attacks 
control flow hijack policy detect stack smashing memory error exploits special keyword jmp place function name need special way capture low level control flow transfers aren exposed directly language 
format string attacks define policy common function internally implement printf family functions 
support functions action term terminates program execution reject denies request returns error 
depending applications policies refined 
example sql injection policy shown detect sql injection attacks sql keywords meta characters 
refined policy sql query checks ensure tokens appear tainted substring 
policy assumption consecutive parameters sql query parameter followed keyword come user 
manner tokenizer policy detect shell command injection attacks taint command components string argument passed shell 
implementation implemented program transformation technique described section 
transformer consists lines objective caml code uses cil toolkit front manipulate constructs 
implementation currently handles glibc containing loc medium large applications 
complexity size glibc demonstrated implementation handle real world code 
summarize key issues involved implementation 
string defined character tainted character tainted depending strictly want enforce taint enhanced policies 
coping untransformed libraries ideally libraries application transformed technique enable accurate taint tracking 
practice source code may available libraries rare cases functions library may implemented assembly 
option libraries 
implementation designed case clearly ability track information flow untransformed functions lost 
overcome problem implementation offers features 
produces warnings certain function transformed 
ensures inaccuracies won introduced taint tracking explicit knowledge user 
user sees warning may decide function question performs largely read operations handle tainted data warning safely ignored 
implementation supports summarization functions specify taint information propagated function 
instance summarization function memcpy defined assembly code 
summarization functions specified bmsl support functions copy taint tag information 
summarization function function invoked transformed code returns 
memcpy dest src copy buffer dest src far write summarization functions glibc functions written assembly copy data memcpy memset 
addition gcc replaces calls frequently library functions strcpy code 
handle write additional summarization functions 
injecting marking checking summarization code transformed programs current implementation marking specifications security policies summarization code associated function injected transformed program simply inlining explicitly calling relevant code call anticipate specifications decoupled transformation able operate binaries techniques library interposition 
enable site administrator alter refine customize notions trustworthy input dangerous arguments having access source code 
extension simplified bmsl language provides runtime environments hook processes different techniques library interposition system call interposition 
naturally extension policies operate function level jmp policy 
anticipate overwhelming majority policies expressed functions limitation problem practice 
experimental evaluation primary goal evaluation determine effectiveness approach stopping generalized injection attacks section performance section 
policies explicitly designed avoid false positives occur carry extensive experiments analyze note observed evaluation 
due space limitations discussion false positives negatives isn provided main appendix 
attack detection table shows attacks experiments 
attacks chosen cover wide range attack categories discussed span multiple programming languages 
possible selected attacks widely applications obvious security vulnerabilities fixed applications detecting sophisticated attacks 
terms marking inputs read network read recv recvfrom marked tainted 
php interpreter configured module apache technique works php cve program language attack type attack description samba stack smashing buffer overflow call trans open function cve wu ftpd format string site exec command pico server directory traversal command execution url multiple leading characters php sql injection topic id parameter php directory traversal delete arbitrary file sequences parameter php cross site scripting insert script mailbox parameter read body php php command injection meta character field php xml rpc php command injection eval injection cve test cgi bash shell meta character query string expansion attacks effectiveness evaluation applications 
network data tainted read apache information propagates php interpreter effect php application 
policies attack examples discussed section 
bash marking policy checking bit different discussed separately 
test technique downloaded software packages shown 
downloaded exploit code attacks verified worked expected 
verification step transformed programs interpreters policies disabled 
enabled policies verified attacks prevented policies 
verified policies cause false alarms normal operation 
network servers studied network servers wu ftpd versions lower format string vulnerability site exec command allows arbitrary code execution 
attack stopped policy format specifier format string tainted 
samba versions lower stack smashing vulnerability processing type request called transaction open attack violates policy targets control transfer untainted data attack stopped 
pico server versions lower directory traversal vulnerability 
web server include checks presence file name allows long doesn go outside cgi bin directory 
determine scans filename left decrementing count occurrence incrementing occurrence character 
counter goes zero access disallowed 
unfortunately filename cgi bin bin sh satisfies check effect going outside cgi bin directory 
attack stopped directory traversal policy shown section 
web applications php 
sql injection popular electronic bulletin board application sql injection vulnerability version allows attacker steal md password hash user 
vulnerable code sql select post id 

topic id topic id 
normally user supplied value variable topic id number case query works expected 
suppose attacker provides value union select ord substring user password users userid converts sql query union select statements comments remaining part original query 
select returns empty set topic id set 
result query result equals value select statement injected attacker returns th byte md hash bulletin board user userid 
repeating attack different values second parameter substring attacker obtain entire md password hash user 
technique detects attack sql injection policy described section 
cross site scripting popular web email client 
version contains multiple cross site scripting vulnerabilities read body php directly outputs values variables mailbox generating response html pages 
attack stopped cross site scripting policy section 
command injection version constructs command encrypting email statement function encrypt plugin 
command send list variable send list contain recipient name field extracted function rfc header object 
due bug function malformed entries field returned checking proper email format 
particular entering recipient cmd field attacker execute arbitrary command cmd privilege web server 
applying policy prohibits tainted shell argument function attack stopped technique 
directory traversal vulnerability exists gallery avatar feature enabled allows remote attackers delete arbitrary files directory traversal 
vulnerability exploited step attack 
step attacker saves file name contains characters sql database 
second step file name retrieved database command 
detect attack necessary record taint information data stored database quite involved 
took shortcut marked data retrieved database tainted 
alternatively marked fields updated user tainted 
enabled attack detected directory traversal policy 
command injection package written php support implementation php clients servers communicate xml rpc protocol 
uses xml parser processing xml 
versions earlier remote command injection vulnerability 
command injection policy stops vulnerability 
bash cgi application 
test cgi cgi script included default apache web server versions earlier 
prints values environment variables available cgi script 
uses code echo query string query string print value query string sent 
query string contains bash apply file name expansion enabling attacker list directory web server 
attack stopped policy restricted tainted argument shell glob filename function bash file name expansion 
terms marking cgi interface defines exact set environment variables inputs provided cgi application marked tainted 
false positives false positives arise due overly restrictive policies stronger usual trust conservative nature taint tracking 
discussion policies section seen policies aren server programs workload overhead apache webstone clients connected mbps network wu ftpd download mb file times 
download scp mb file times 
postfix send kb emails performance overheads servers 
apache server performance measured terms latency throughput degradation 
programs measured terms overhead client response time 
program workload overhead overhead bc find factorial 
convert mb text file postscript file 
bison parse bison file grammar 
gzip compress mb file 
avg 
overhead performance overheads cpu intensive programs 
performance measured terms cpu time 
overhead corresponds security policy checking disabled enabled respectively 
unusually restrictive expect false alarms practice 
expected experience false alarms experiments 
application places higher degree trust user policies needs refined reflect trust 
strength approach ease changing policies operators applications quickly remedy false alarms 
third reason false alarm conservative nature taint tracking 
particular arithmetic bit operations combine tainted values possibly untainted values result may little relationship original input 
type applications studied experiments relatively rare 
applications tend interpret user input data stored parameters applications 
cases tainted values typically copied arithmetic operations rare 
false negatives false negatives arise due overly permissive policies subtle implicit information flows untransformed libraries adequate summarization functions 
believe policies described section permit types attacks described 
implicit information flows problem protected application written attacker case implicit flows explicit assignments fool taint tracking 
implicit flows typically provide degree control behavior victim application 
external libraries best approach transform need summarization eliminated 
done transformation identify external functions application errors omission avoided 
summarization function incorrect lead false negatives false positives 
performance shows performance overheads approach 
original transformed programs compiled gcc executed ghz mb pc running red hat linux 
execution times median runs 
apache ran webstone minutes clients fetching kb files mbps network 
programs transformed glibc execution 
server programs overhead approach low 
intensive transformation adds overheads code performs significant amount copying cpu intensive operations 
cpu intensive programs overhead moderate average 
effect optimizations 
optimizations discussed section effective reducing overheads reasonably low programs 
comment effectiveness cpu intensive shown 
bit taint tags reduced overheads base running time runtime untransformed program 
programs operate integers gain due optimization operating strings 
mmap reduced overheads 
local taint variables reduced performance overheads 
compilers gcc performing code optimizations common subexpression elimination copy propagation dead variable elimination local variables 
contrast tag variables global arrays optimizations aren typically possible may sound due possible aliasing result local taint variable opposed global array compiler able eliminate taint tracking variables 
programs access local variables frequently global variables optimization dramatic impact 
intraprocedural analysis optimization reduces overhead upto 
gains modest gcc optimizations eliminated local tag variables previous step 
combined optimizations reduce overhead factor 
explanation final performance numbers 
transformation introduces taint tag assignment original assignment program accesses generally complex involving multiple bit masking operations optimized expect overheads higher 
reasons overheads low 
server applications mainly bound 
read data source buffer simply write buffer different file descriptor performing memory copies 
optimizations particularly effective eliminating taint tracking local variables performance overheads low programs mainly access local variables 
instrumented applications shown tables accesses local variables 
instance bc accesses local variables 
gzip exception accesses going global variables performance overhead 
related memory error exploit detection buffer overflows related memory errors received lot attention efficient techniques developed address 
early approaches stackguard focused just single class attacks 
general techniques randomization developed promise capture memory errors 
due nature language methods detect certain types attacks overflow array structure adjacent variable 
fine grained taint analysis capture attacks corrupted data argument sensitive operation 
usually case goal attacker corrupting data perform security sensitive operation 
overheads generally higher techniques mentioned believe compensated increase attack coverage 
fine grained taint analysis 
key distinctions previous fine grained taint analysis techniques discussed limit discussion technical points 
mentioned earlier rely hardware support taint tracking 
closer techniques techniques 
advantage operate arbitrary cots binaries require access source code 
avoids problems handwritten assembly code allows deal memory errors low level structures invisible high level code global offset table got dynamic linking 
main drawback performance application apache provide performance numbers overheads times higher 
rely valgrind introduces times overhead compared technique constrained having binary code benefit static analyses optimizations gone technical differences 
instance track bits taint information byte data enables correlate attacks inputs useful deriving attack signatures filters 
increases memory overheads 
important difference support implicit flows aren handled 
dynamic taint techniques detecting attacks web applications 
independently parallel proposed idea fine grained taint analysis detect injection attacks web applications 
implementations similar hand transformation php interpreter track taint data 
provides detailed formulation discussion problem focus 
explain injection attacks result ad hoc serialization complex data sql queries shell commands develop detection technique called context sensitive string evaluation involves checking tainted data strings 
improves theirs ways 
working level language able handle applications server programs written programs written interpreted languages php bash 
second formulation problem policy enforcement general applied stealthy attacks discussed section don involve serialization problems attacks involving arbitrary types data limited strings 
third approach relies simple transformation shown section implemented kloc code approach relies manual transformation large piece software kloc 
technical contributions include development simple policy language concise specification taint enhanced polices support implicit flows allow handle encodings translations 
manual approaches correcting input validation errors 
taint analysis targets vulnerabilities arise due missing incorrect input validation code 
manually review code try add necessary input validation checks 
may try add validation code notion validity determined manner input 
trace forward program identify possible uses input security sensitive operations time consuming error prone task 
try perform validation check point face problem notion validity depends data source 
instance perfectly reasonable sql query contain semicolons originated program text came external input 
trace back security sensitive operations identify arguments constructed having manually examine large number program paths 
leads situations validation checks left paths possibly duplicated 
validation checks notoriously hard programmers code correctly frequently source vulnerabilities 
information flow 
information flow analysis researched long time :10.1.1.10.3979
early research focused multi level security fine grained analysis deemed necessary 
focused tracking information flow variable level 
discussed section granularity insufficient detecting vast majority attacks discussed 
referring analyses optimizations optimizations implemented gcc compiler compile transformed programs 
static analysis 
static taint analysis techniques proposed finding security vulnerabilities including input validation errors web applications user kernel pointer bugs format string bugs bugs placement authorization hooks 
main advantage static analysis compared runtime techniques potential vulnerabilities statically drawback relative lack accuracy 
particular techniques typically detect dependencies vulnerabilities 
instance produce warning untrusted data manner sql query 
may useful dependency integral part application logic 
solve problem concept endorsement indicate safe dependencies 
typically done performing appropriate validation checks piece untrusted data indicate safe longer tainted 
programmers responsible determining safe discussed easy way programmers 
techniques 
defeats sql injection randomizing textual representation sql commands 
drawback approach requires manual changes program uses modified representation sql commands generated program 
approach inspired effect achieved distinguishing commands generated application provided untrusted users 
approach achieves effect programmer effort 
amnesia interesting approach detecting sql injection attacks 
uses static analysis java programs compute finite state machine model captures lexical structure sql queries issued program 
sql injection attacks cause sql queries issued program deviate model detected 
key benefit approach static analysis avoid runtime taint tracking efficient approach 
drawback works sql injection approach works broader range attacks 
perl taint mode tracks taint information coarse granularity variables 
perl explicitly data security sensitive context 
usually done performing appropriate validations 
approach explicit unnecessary far 
user explicitly wants trust input primitive easily added support 
unified approach detecting stopping wide range commonly reported attacks exploit software implementation errors 
approach fully automatic efficient taint analysis technique track flow untrusted data program granularity bytes 
availability fine grained taint information enables simple accurate policies developed reliably classes attacks 
experiments showed technique applied different types applications written multiple programming languages effective detecting attacks producing false positives 
believe number software vulnerabilities arise due fact security checks interspersed program difficult check correct set checks performed program path especially complex programs control flows functions 
decoupling policies application logic approach provide higher degree assurance correctness policies 
flexibility approach allows site administrators third parties quickly develop policies prevent new classes attacks having wait vendor patches 

www research ibm com trl projects security ssp 
amnesia analysis monitoring sql injection 
william alessandro 
ieee acm international conference automated software engineering ase 
bell lapadula 
secure computer systems mathematical foundations 
technical report mtr vol 
mitre bedford ma 
sandeep daniel sekar 
address obfuscation efficient approach combat broad range memory error exploits 
usenix security symposium 
bowen chee segal sekar 
building survivable systems integrated approach intrusion detection damage containment 
discex 
stephen boyd angelos keromytis 
preventing sql injection attacks 
international conference applied cryptography network security pages 
chen xu iyer 
defeating memory corruption attacks pointer taintedness detection 
ieee international conference dependable systems networks dsn 
crispin cowan matt barringer steve beattie greg hartman 
automatic protection printf format string vulnerabilities 
usenix security symposium 
crispin cowan calton pu dave maier jonathan walpole peat steve beattie aaron perry wagle qian zhang heather hinton 
automatic detection prevention buffer overflow attacks 
usenix security symposium january 
denning denning 
certification programs secure information flow 
communications acm july 
fenton 
memoryless subsystems 
computing journal may 
goguen meseguer 
security policies security models 
ieee symposium security privacy 
yao wen huang fang yu christian hang chung hung tsai lee sy yen kuo 
securing web application code static analysis runtime protection 
proceedings international www conference new york usa 
rob johnson david wagner 
finding user kernel pointer bugs type inference 
usenix security symposium 
gaurav kc angelos keromytis vassilis 
countering code injection attacks instruction set randomization 
acm conference computer communication security ccs 
benjamin livshits monica lam 
finding security vulnerabilities java applications static analysis 
usenix security symposium 
mclean 
general theory composition trace sets closed selective interleaving functions 
ieee symposium security privacy pages may 
scott george necula rahul weimer 
cil intermediate language tools program analysis transformation 
conference compiler construction pages 
myers 
jflow practical static information flow control 
acm symposium principles programming languages popl pages january 
myers liskov 
complete safe information flow decentralized labels 
ieee symposium security privacy pages may 
james newsome dawn song 
dynamic taint analysis automatic detection analysis signature generation exploits commodity software 
network distributed system security symposium ndss 
anh nguyen salvatore doug greene jeff shirley david evans 
automatically hardening web applications precise tainting 
th ifip international information security conference 
chris vanden berghe 
defending injection attacks contextsensitive string evaluation 
advances intrusion detection raid 
sabelfeld myers 
language information flow security 
ieee journal selected areas communications january 
sabelfeld myers 
language information flow security 
ieee selected areas communications january 
umesh shankar talwar jeffrey foster david wagner 
detecting format string vulnerabilities type qualifiers 
usenix security symposium 
edward suh jae lee david zhang srinivas devadas 
secure program execution dynamic information flow tracking 
international conference architectural support programming languages operating systems pages boston ma usa 
prem sekar 
experiences specification intrusion detection 
proceedings advances intrusion detection conference october 
volpano smith irvine 
sound type system secure flow analysis 
journal computer security 
wall christiansen schwartz 
programming perl 
reilly 
zhang edwards jaeger 
static analysis authorization hook placement 
usenix security symposium 

