applying layered decision model design language security systems safeguarding practices networked systems involves decisions areas identification welldefined security policies selection cost effective defense strategies implementation real time defense tactics 
practices apply language defense mechanism software system subset networked security system 
research conducted develop language defense mechanisms improve security software systems comprehensive requirement enforcement security policies control mechanism 
security enforcement easily achieved comprehensive decision model integrates decisions security policies cost effective defense strategies real time defense tactics single efficient framework guide security experts designing developing deploying language defense mechanisms software system 
address problems reviews progress language security defense layered decision modeling ldm technique 
explores apply ldm design cost effective language defense mechanisms software systems sample analysis 
keywords language security layered decision model cost benefit analysis case study 

safeguard networked system need set defined security policies regulating system protects sensitive critical system resources design deploy cost effective defense strategies making different defense techniques design invoke cost effective real time defense tactics countering immediate threats 
subset networked system software system support principles building language security defense 
researchers language security system developed wei jim alves foss department computer science university idaho wei edu defense mechanisms improving system security :10.1.1.10.3979:10.1.1.123.8253:10.1.1.126.9884
defense mechanisms include monitors line monitors type safe certifying compilation stack inspection security policy enforcement language termination transactional rollback :10.1.1.10.3979
security policy enforcement considered important mechanism building secure language system 
basic principle ensure security policies enforced step information flow executing software system includes data reading writing processing propagating 
traditional security enforcement mechanisms lack explicit description security policies defense strategies defense tactics integrated 
addition clear way determine particular combinations defense decisions result cost effective solution 
security enforcement easily achieved comprehensive decision model integrates decisions security policies costeffective defense strategies real time defense tactics single efficient framework guides security experts designing developing deploying language defense mechanisms 
address similar problems earlier proposed layered decision model ldm design cost effective network defense general network safeguarding integrates interrelated decisions security policies defense strategies defense tactics decision layers consistent uniform framework layer zero determining security policies layer defense strategies layer real time defense tactics 
ldm allows tracking costs security policy enforcement information layers security managers balance costs security investment monitor enforcement security policies decision layer 
ldm developed combining risk assessment business cost modeling cost benefit analysis techniques 
subset networked system software system possible avenue applying ldm 
explore possibility provides case study applying ldm design costeffective language security mechanism governmental software system 

language security software systems play crucial roles managing system resources processing jobs handling requests information 
play big role computer security managing access control memory protection ensuring data confidentiality integrity 
traditional safeguarding mechanisms treat software systems black boxes focus standard defense mechanisms firewalls intrusion detection systems ids encryption 
security breaches successfully occurred security holes software systems causing violations information confidentiality integrity availability cia 
software system may weakest security links networked system necessary explore potential vulnerabilities software systems design deploy cost effective defense mechanisms remedy security holes language approaches 
major threats violate data confidentiality integrity availability 
example untrusted mobile codes may overrun buffer leak memory causes denial service dos computation system may intentionally accidentally calculate incorrect data customer accounts bank 
counter threats defense mechanisms developed deployed 
typical language defense mechanisms include line monitors type system certifying compilation stack inspection informational flow analysis security policy enforcement termination transactional rollback :10.1.1.10.3979
language defense mechanisms applied clear costeffective defense mechanisms combined defense strategy deployed defense mechanisms fulfill security policies business goals organization 
address problems apply ldm design costeffective language defense system 

applying ldm software system ldm describe detail includes decision layers define decision parameters establish explicit relationships decision types support record decisions 
security policies defined layer zero defense strategies layer defense tactics layer 
model components variously inputs internal states needed decision include risk assessment known threat profiles estimating cost associated threat related defense mechanisms 
cost benefit analysis return investment roi analysis selects cost effective defense 
applied ldm design language security sample web management software system local government agency 
software system developed vb net java scripts applets sql server database 
main business agency managing regulating health care providers 
includes maintaining patients confidential medical records establishing policies disease prevention control issuing birth death certificates regulating environmental health protection coordinating government agencies 
business goals system include collecting processing storing information networks 
agency handles administration medical health services security policies defense strategies comply federal health insurance portability accountability act 
dictates strict guidelines protecting data confidentiality integrity 
critical data included records birth death social security numbers ssns protected health information phi patients stipulated law 
data privacy risk data storage transit 
system security plans contain protection protocols cover areas exposure 
addition phi protection agency protect information critical business continuity users need query data statistic analysis daily basis 
system availability critical 
risk assessment threat identification major threats fall categories denial service dos attack dos attacks try take system overwhelming system resources memory stack system files cause services resources unavailable cause memory leakage 
confidential information dci confidential information includes personal id financial account numbers ssns medical records malicious code may divulge confidential information implicit information leaking execution program expose data lower agents execution 
root access attack ra exploiting software system security holes attackers obtain root access operating system os install tools view track modify steal customers information change system files modify account data 
unauthorized access attack ua malicious codes bypass authentication obtain unauthorized access data may cause data high agents disclosed low trust level agents 
quantitatively assess threats security managers employed risk assessment cost modeling estimate business impact type threat 
assessment helped rank severity kind threat 
security managers estimated sle threat extrapolated sle estimate ale threat 
treated ale threat index ti indicating critical threat table 
challenging tasks risk assessment roi analysis include estimating cost values effectiveness specific defense techniques countering specific threats annual attacking frequency threats 
butler research adopted range effectiveness fixed value assessing defense technique applied estimates variables 
possible approach estimate costs effectiveness annual attacking frequency confidence level indicates estimate security managers experience knowledge 
simplify decision making process fixed values estimates 
research conducted investigate simulation approach generate input scenarios test model performance 
design security policies layer zero security policies focus protecting data privacy restricting online access data monitoring auditing resource access prevent dos attacks unauthorized access attacks 
table lists security policies fulfilled software system 
defining security policies design defense mechanisms observe basic principles 
principle privilege participant assigned minimum access necessary accomplish task 
principle minimal trusted computing base security mechanism small simple 
design defense strategies layer layer designed defense strategies compared 
table lists defense techniques table lists defense techniques defense strategy includes line monitor irm type system ts certified compilation cp major defense techniques 
cost defense technique includes labor cost developing deploying mechanism material cost hardware software facility cost training maintenance costs 
additional cost resource overhead reflects extra resources time needed execute invoke security mechanism 
irm works program rewriting prevent reads writes branches memory locations outside predefined memory regions 
security event normal event attack happens irm check security state stores information earlier security events determine security event allowed proceed 
program fragments executed respond security events update security state take necessary responsive actions signaling security violations notifying security managers blocking terminating execution program rolling back previous system points 
ts check typing security properties statically compilation time dynamically runtime 
need invest time development stage ensure program developed type safe features program operations applied appropriate values ensure memory safety program access appropriate memory locations control safety program transfer control appropriate program points 
example enforce security policy reducing dos attacks due memory overrun 
cp guarantees code satisfying security policy certificate machine checkable evidence 
speed checking security enforcement reduce trusted computing base tcb program 
monitor system resources program execution statically dynamically protect memory spaces 
disadvantage overhead cost irm big cp reduce cost extent 
integration irm cp ts effective countering threats 
defense strategy includes strong typing st bytecode verification bv stack inspection si 
si generic feature net java 
si implemented run time systems java virtual machine jvm net environment accommodate components diverse levels trust 
si supports dynamic authorization mechanisms complex subtle semantics 
threats bv verify untrusted complied code ensure table threat rankings estimated annual frequency single loss expectancy sle annual loss expectancy ale ranking confidential information dci root access attack ra attack denial service dos attack unauthorized access ua attack table security policies pt coverage security policies coverage web server substantially slower normal security manager may need restart switch service backup server 
improper communication servers recognized blocked 
access system resources actively monitored audited 
software may installed workstation authorization security managers 
mail internet access allowed critical database servers 
online access data controlled 
noninterference policy variation high confidential input cause variation low confidential public output 
table defense strategy defense techniques purpose line monitor irm access control security policy enforcement major threats certified compilation cp check code legitimate major threats type system ts security policy enforcement major threats table defense strategy defense techniques purpose stack inspection si security policy enforcement major threats strong typing st security policy enforcement major threats bytecode verification bv security policy enforcement major threats cost table cost benefit analysis defense strategies threat effectiveness benefit effectiveness benefit confidential information dci benefit dci benefit dci root access attack ra attack denial service dos attack unauthorized access ua attack benefit ra benefit ra benefit dos benefit dos benefit ua benefit ua investment cost defense strategy expected benefit cost saving roi cost code type safe running 
strong typing st feature programming languages enforces basic correctness properties program manipulates data 
enforced dynamically statically 
dynamic enforcement halt program execution ill typed static enforcement reject ill typed program compile time 
defense strategy higher effectiveness countering threats cost large 
hand defense strategy low cost 
table lists cost data analysis results defense strategies 
roi ratio cost saving security investment 
results see strategy slightly higher cost effectiveness strategy 
design defense tactics layer attack going system detect respond specific defense tactics rt 
define defense tactic course operational actions detecting attacks course responsive actions mitigating attacks 
table cost benefit analysis defense tactics damage cost sle defense tactics response cost operational cost effectiveness roi threat confidential information dci te te te rb rb rb nf nf nf root access ra attack te te te rb rb rb nf nf nf denial service dos attack 
te te te rb rb rb nf nf nf unauthorized access ua attack te te te rb rb rb nf nf nf cost defense tactic includes operational cost response cost 
operational actions include static check dynamic check combination 
combining static check dynamic check may cost effectiveness may higher 
respond attack invoke specific responsive actions include terminate execution program rollback previous program points notify security managers cost associated responsive actions called response cost depends responsive action 
closely estimate cost impossible estimates relative costs 
addition estimate effectiveness defense tactic 
benefit saving damage cost attack unsuccessful 
table lists combinations operational actions responsive actions defense strategy costs benefits 
represent dynamic check represent static check represent combination static check dynamic check 
te represent terminate execution program rb represent rollback previous program points nf represent notify security managers 
result shows combining static check dynamic check terminate execution program te best defense tactic root access attack 
combining static check terminate execution program te best defense tactic rest threats summary sample case study provided concrete examples apply ldm guiding security managers designing cost effective defense language systems 
challenging job estimating item costs annual frequencies threats effectiveness defense techniques 
received fairly responses participated case study questions utility model imprecise data available 

safeguard software systems approach research applied uniform layered decision model ldm design cost effective mechanisms software systems 
ldm supports consistently connected decisions decision layers layer zero determining security policies layer defense strategies layer real time defense tactics 
addition ldm supports analytical framework allows traceability costs security policy enforcement information decision layers conducts cost benefit analyses selecting cost effective defense plans monitors security enforcement 
furthermore ldm encourages iterative traversing decision process decision layers 
demonstrate ldm software system security conducted sample case study applied ldm design cost effective language defense mechanism government agency software system 
case study provided concrete example model 

butler security attribute evaluation method cost benefit approach international conference software engineering pp 

schneider sasi enforcement security policies retrospective new security paradigms workshop pp 

schneider irm enforcement java stack inspection ieee symposium security privacy pp 

fournet gordon stack inspection theory variants acm symposium principles programming languages popl pp 

klein strecker verified bytecode verification type certifying compilation journal logic programming pp 

lee fan miller stolfo zadok cost sensitive modeling intrusion detection response computer security pp 
necula lee design implementation certifying compiler acm sigplan conference programming language design implementation pldi pp 

wallach termination language systems acm transactions information system security pp 

sabelfeld myers language information flow security ieee journal selected areas communication special issue formal methods security pp 

schneider morrisett harper language approach security informatics years back years ahead pp 

tse zdancewic run time principals information flow type systems ieee symposium security privacy pp 

walker type system expressive security policies acm sigplan symposium principles programming languages pp 

wei carter ritter analysis network intrusion detection systems csi th annual computer security conference 
wei risk assessment costeffective business modeling network security th world multi conference systemics cybernetics informatics sci 
wei alves foss soule layered decision model cost effective network defense ieee international conference information reuse integration pp 

