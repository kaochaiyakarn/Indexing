mfps arrows monads monoids chris bart jacobs institute computing information sciences university nijmegen netherlands email jacobs cs ru nl monads established programming construct functional languages 
notion arrow introduced hughes extension type parameters 
arrows may look somewhat arbitrary 
show categorically fairly showing correspond monoids suitable subcategories bifunctors op shows suitable level abstraction arrows monads monoids categories functors freyd categories introduced power robinson model computational effects hughes arrows appeared 
claimed informally arrows simply freyd categories 
shall claim precise showing monoids categories bifunctors exactly correspond freyd categories 
key words arrow bifunctor monad monoid freyd category 
main result article expressed sentence hughes arrows monoids categories bifunctors op fact entire just explanation line summary 
reasons result appeal 
arrows introduced hughes context functional programming applied fitting certain parsers general interface see applications 
notion comes motivation looks somewhat arbitrary 
reassuring surprising notion appears natural completely different categorical setting 
part time technical university eindhoven netherlands 
electronically published electronic notes theoretical computer science url www elsevier nl locate entcs jacobs arrows meant extensions monads established functional programming 
monad mapping known instance arrow 
intended analogy monads arrows substantiated 
standard category theory textbook result vii monad example monoid category category endofunctors category see details 
main observation arrows monoids category functors form op minor change considering monoids categories bifunctors op sets sets codomain establish correspondence freyd categories 
monoid description gives different view subject emphasis lies fact arrow mapping input output types type computations suitable composition operations 
perspective freyd categories puts emphasis slightly tricky premonoidal aspects involved 
introducing arrows section structure analysed categorically section 
turns elaboration main result require 
technical part construction suitable monoidal tensor infrastructure categories functors op described subsection 
gives rise model arrows monoids section 
start gradual various notions involved 
doing assume basic level familiarity categorical notions techniques 
recall monad construct functional programming languages corresponds directly strong monad category theory 
fix notation shortly recall monad category consists endofunctor unit natural transformation multiplication natural transformation satisfying familiar equations 
usually monoid described set associative binary operation unit category theory provides framework different universes 
basic illustration abstraction notion monoid formulated arbitrary category suitable structure instance monoid category cartesian products object morphisms certain diagrams commute corresponding monoid equations 
unit equations instance id jacobs id formulation leads monoids universes instance topological spaces dcpo carrier suitable structure preserved operations 
stronger need cartesian products formulation monoidal structure tensors suffices don need productions diagonals 
section vii lists examples familiar notions groups rings appear way monoid category 
example monad category category endofunctors functors natural transformations carries trivial monoidal structure functor composition identity functor obvious unit 
monad described pair maps satisfying precisely monoid equations 
strong monad precisely monoid category strong functors natural transformations commute strength 
likewise argue monoids suitable subcategories bifunctors cop model arrows 
technical part construction tensor category exponentiation unit 
doing shall give simplification arrow operations introduced hughes see proposition 
arrows studied categorically freyd categories models arrows 
shall elaborate relation section 
occurrence name freyd appropriate setting encounter issues dinaturality small completeness worked 
view arrows monoids provides approach freyd categories 
section concludes proving models monoids freyd categories coincide relevant case 
arrows functional languages section introduces arrows functional programming languages 
briefly consider monads construction category theory historically paved way arrows 
monads jacobs major reason initial reluctance adoption functional programming languages need pass state data explicitly functions 
monadic programming provides answer inconvenience 
monad encapsulate changes state data side effects explicitly carrying states 
monads efficiently structure functional programs improving genericity 
mechanism deemed important incorporated haskell syntax 
monad haskell defined type class class monad return ensure desired behaviour programmer prove certain monad laws operations return 
boil axioms strong monad categorical sense 
effect monads functional combinators 
enable combination functions generally assumptions precise functions combine 
restrictions strict exclude certain classes libraries implementation monadic interface notably efficient parser combinators 
arrows arrows general functional combinators seen generalisation monads see example 
arrow haskell type constructor class form class arrow arr analogous monads arrow furthermore satisfy arrow laws proof programmer arr arr arr arr id arr id arr arr arr id arr id arr arr arr arr id equations jacobs familiar product maps fst snd assoc 
arr id written second arr second arr arr known swap map 
article arrows functions types possible 
arrow laws appear arbitrary derive systematically 
shall show quite natural suitable categorical perspective 
turns arrow interface general allow known libraries incompatible monadic interface 
applications website example aforementioned parser combinators reactive programming user interfaces 
example pure functions example arrows comes mind naturally ordinary functions 
haskell written follows 
instance arrow arr id sees glance satisfies arrow laws 
distinguish normal functions functions arrows call pure functions 
example kleisli arrows monads category theory monad construct kleisli category free algebras 
likewise monad functional programming language cast arrow 
standard example arrow 
newtype kleisli instance monad arrow kleisli arr return 
return arrow laws follow readily monad laws 
intuitively think kleisli arrow computation allows monadic behaviour codomain output 
jacobs examples arrows appear section categorical language 
analysing arrows section shall formulate results underlying categorical structure arrows haskell explicit 
provide alternative operations terms call internal strength proposition 
main outcome section reformulation arrow monoid 
fix category types objects terms morphisms example category haskell types functions 
assume cartesian closed carries binary operation objects types satisfies arrow laws collections maps arr 
shall identify categorical structure involved series results 
lemma operation extends functor op action maps defn arr arr 
functor strong second argument st 
arr second cost 
arr 
proof 
easy check preserves identities composition strength maps natural 
maps furthermore satisfy equations come useful id st id st id st st cost id id cost id cost cost familiar canonical isomorphism 
notice just st id st satisfies similar equations st id 
jacobs lemma maps arr form natural transformation exponents arrows 
similarly maps natural may formulated yields natural transformation functor 
proof 
follows easy calculations maps arr arr arr arr arr arr arr id id id id arr id arr id arr arr arr arr 
lemma maps natural dinatural means see ix map diagram commutes 
id id id id proof 
shall dinaturality id id id arr id id id 
intuitively dinaturality signifies middle parameter really important just long jacobs second argument factor argument second 
suggests really seen operation tensor product 
elaborated section 
operation prove maps satisfying simplified maps called ist internal strength 
proposition maps satisfying equations correspond internal strength maps ist natural dinatural satisfy ist arr arr id ist arr ist ist ist arr arr id ist ist ist arr id 
alternative formulation terms internal strength ist result convenient parameters di naturality clearly described 
proof equivalence ist involves basic calculations cases 
proof 
maps satisfying define internal strength ist arr id id checks naturality dinaturality 
di naturality equations formulated ist arr id ist arr arr ist ist arr arr id 
illustration check equation ist arr arr arr arr arr arr arr id conversely internal strength ist satisfying define ist arr arr id jacobs id yields natural operation sense arr id arr id 
shall prove equation detail leave rest interested reader 
ist arr arr id ist arr arr id ist arr ist arr id arr arr id id arr id ist arr ist arr arr id arr id ist arr arr id 
monoidal structure recall describing arrow arr monoid category bifunctors op requires monoidal structure bifunctors arrow appears monoid form arr naturality arr observed lemma suggests take exponentiation unit intended monoidal structure 
big question 
sketch main idea category types terms 
composition collection maps combined coproduct left hand side coproduct objects types size aspects relevant 
coproducts sums taken polymorphic type theories time simply proceed postpone issues size section 
jacobs big coproduct natural take dinaturality observed lemma account 
done suitable coequaliser form required tensor composition map appears map construction 
maps capture dinaturality composites st id ev cost ev id 
strength play crucial role 
sure exponentiation unit tensor 
concentrate required isomorphism obtained pair objects composite injection coproduct 
inverse obtained maps id ev st 
check inverses 
check monoid equations hold span arr shall equations id arr jacobs id arr id arr id 
commutation diagram amounts arrow law states arr id likewise associativity isomorphism associativity coproduct 
required coherence properties id id proven arrow laws notably 
strength en internal strength inherited coproduct equaliser 
summarising type theoretic setting sketched arrow thing monoid category bifunctors op strength internal strength 
arrows categorically previous section reformulated arrow haskell monoid category bifunctors acting types terms 
complicated ingredient tensor product 
constructed tensor product profunctors distributors generalising relation composition see 
complication involves size 
big coproduct previous section uses objects category indices 
requires small complete 
stage important recall basic result freyd chapter exercise categories small complete preorders see 
small complete internal categories exist models polymorphic type theory 
working universe similar working polymorphic type theory done previous section 
natural consider general setting bifunctors op enriched size issues separated 
far considered cartesian closed enriched 
obvious case take sets small 
situation reduces profunctors monoidal structure wellknown see section section 
remainder shall focus situation take categorical formalisation notion arrow originally formulated language haskell 
definition small category 
arrow monoid category profunctors op sets usual monoidal structure carry internal strength 
jacobs restriction small categories bit strong 
needed construct usual tensor big coproduct objects category sets previous section 
formulate composition operation arrow collections maps natural dinatural satisfy equations 
manner relax restriction locally small categories 
remainder section shall sketch understand earlier examples setting extend bit 
therefor fix locally small category hom bifunctor op sets homc obvious example arrow pure functions example 
strong monad mapping homc arrow kleisli arrow described example 
kleisli arrows monadic behaviour codomain leads consider arrows behaving domain 
functional language kleisli arrows take care bookkeeping output build arrows take care bookkeeping input 
arrow op sets contravariant domain start monad op comonad obtain arrow homc nx 
generally try build arrows behaving domain codomain 
strong monad comonad distributive law nm mn obtain arrow homc nx 
unit monoid readily defined units internal strength ist homc nx homc nx easily ist st counit distributive law needed give multiplication composition homc nx homc ny mz nx na arrows freyd categories mb mz 
question approach arrows previous sections oft heard statement arrows freyd categories freyd categories claimed provide categorical semantics arrows 
claim remained informal 
think approach closer original functional intuitions underlying arrows haskell description arrows bifunctors emphasises binary operations types jacobs precise formulation premonoidal structure freyd categories delicate essence structure arrows structure corresponds 
interestingly alternative formalisation arrows monoids possible give precise mathematical meaning statement arrows freyd categories 
aim current section 
shall compare result situation monads recall freyd category therefor need notion premonoidal category intuitively think monoidal category tensor need bifunctor functorial variable separately 
definition category category object functors write morphism called central id id id id id id id id 
central sense write composites 
definition symmetric premonoidal category category object natural isomorphisms central components obey familiar coherence properties monoidal categories 
non reflects order side effects think category computations 
include category values arrive notion freyd category 
definition freyd category consists symmetric premonoidal category category finite products identity functor preserves structure freyd category called locally small category locally small 
comparison monoids freyd categories begins known easily seen fact correspondence monoids category functors monads identity objects functors right adjoint suggested john power 
jacobs functor arises kleisli construction gives monad induced adjunction 
generalised equivalence 
theorem locally small category finite products correspondence arrows cf 
definition monoids category profunctors op set internally strong 
ii locally small freyd categories proof 
suppose monoid op set arr ist satisfying familiar properties arrow 
put ca kleisli category objects morphisms symmetric premonoidal defining premonoidal tensor extends functor morphisms virtue provided ist equivalently see proposition second morphism yields implication ii completed defining act identity objects arr morphisms 
conversely suppose freyd category define op set homd 
monoid category profunctors op set unit arr homc homd multiplication composition furthermore define id id 
naturality ist obvious dinaturality boils fact diagram homd homd homd homd homd homd commutes morphism crux need commute morphisms morphisms form cf 
equations central 
readily checks see ii implies 
similar equivalence comes mind reason calling ca kleisli category 
jacobs monoids category strong functors natural transformations commuting strength strong monads freyd categories right adjoint 
meaningful arrow analogue correspondence arrows automatically strong cf 
lemma 
contains reformulations notion arrow introduced context functional programming hughes minor major 
minor reformulation concerns easier alternative operation 
major reformulation description arrow monoid category bifunctors 
reformulation justify informal claim arrows freyd categories 
sets semantics freyd categories internally strong monoids coincide 
monoid approach generalises different direction freyd category approach 
minor topic left open monoidal structure category bifunctors op relates monoidal structure category functors question comes help functional programmers way 
stage claim 
notice variations extensions arrows appearing need recursion schemes need foundation monads arrows 
categorical reformulation monoids give guidance proper formulation variations 
indebted anonymous reviewers comments suggestions john power pushing connection monoids freyd categories explicit 
smetsers van van eekelen plasmeijer back arrows invertible programming proceedings acm sigplan workshop haskell pp 
isbn 
bainbridge freyd scedrov scott functorial polymorphism theoretical computer science pp 
corrigendum theor 
comp 
sci 

jacobs benton hyland traced premonoidal categories theoretical informatics applications pp 

borceux handbook categorical algebra encyclopedia mathematics applications cambridge university press 
cockett seely wood modules theory applications categories pp 

courtney modeling user interfaces functional language ph thesis yale university 
erk launchbury recursive haskell haskell workshop pp 

freyd abelian categories theory functor harper row new york 
freyd structural polymorphism theoretical computer science pp 

haskell org www haskell org arrows 
hughes generalising monads arrows science computer programming pp 

hyland small complete category annals pure applied logic pp 

jacobs categorical logic type theory north holland amsterdam 
jansson jeuring polytypic data conversion programs science computer programming pp 

jeuring jones editors arrows robots functional reactive programming lect 
notes comp 
sci 
springer 
lawvere metric spaces generalized logic closed categories 
di milano pp 
reprint available www tac mta ca tac reprints 
mac lane categories working mathematician springer 
moggi computational lambda calculus monads logic computer science 
paterson new notation arrows international conference functional programming pp 

paterson arrows computation gibbons de moor editors fun programming pp 
www soi city ac uk ross papers fop html 
jacobs peyton jones hughes report programming language haskell non strict purely functional programming language technical report www haskell org 
basic category theory abramsky gabbay maibaum editors handbook logic computer science background mathematical structures volume clarendon press oxford pp 

power robinson premonoidal categories notions computation mathematical structures computer science 
power robinson modularity dyads mathematical foundations programming semantics xv pp 

power thielecke environments continuation semantics indexed categories abadi ito editors theoretical aspects computer software number lect 
notes comp 
sci 
pp 

power thielecke closed freyd categories van emde boas nielsen editors international colloquium automata languages programming number lect 
notes comp 
sci 
pp 

swierstra duponcheel deterministic error correcting combinator parsers launchbury meijer sheard editors advanced functional programming lect 
notes comp 
sci 
pp 

uustalu vene signals comonads journ 
universal comp 
sci 
pp 

uustalu vene essence dataflow programming revised lectures central european functional programming school budapest appear www cs ee papers 
wadler monads functional programming program design calculi proceedings marktoberdorf international summer school 

