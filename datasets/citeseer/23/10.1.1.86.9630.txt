cluster computing springer science business media manufactured united states 
distributed file system virtualization techniques supporting demand virtual machine environments grid computing ming zhao jian zhang renato figueiredo advanced computing information systems laboratory electrical computer engineering university florida gainesville florida usa 
presents data management solution allows fast virtual machine vm instantiation efficient run time execution support vms execution environments grid computing 
novel distributed file system virtualization techniques unique provides demand cross domain access vm state unmodified vm monitors enables private file system channels vm instantiation secure tunneling session key authentication supports user level write back disk caches application caching policies middleware driven consistency models leverages application specific meta data associated files expedite data transfers 
reports performance wide area setups vmware vms 
results show solution delivers performance better native nfs warm caches bring application perceived overheads compared local disk setup 
solution allows vm gb virtual disk mb virtual memory cloned seconds clone seconds subsequent clones 
keywords distributed file system virtual machine grid computing 
fundamental goal computational grids allow flexible secure sharing resources distributed different administrative domains 
realize vision key challenge addressed grid middleware provisioning execution environments flexible customizable configurations allow secure execution untrusted code grid users 
environments delivered architectures combine classic virtual machines vms middleware dynamic instantiation vm instances user basis 
efficient instantiation vms distributed resources requires middleware support transfer large vm state files memory disk poses challenges data management infrastructures 
shows solution efficient secure transfer vm state domains implemented means extensions user level distributed file system virtualization layer 
mechanisms existing middleware utilized support functionality treating vm computing sessions processes scheduled vm monitors data transferred vm state 
order fully exploit benefits vm model grid computing data management key middleware support transfer vm state computation tied resources copy user vm support transfer application data computation tied resources local access user files 
appropriate data management support components grid vm computing session distributed different logical entities state server stores vm state compute server provides capability instantiating vms data server stores user data 
proposed vm state provisioning solution constructed user level distributed file system virtualization layer leverages nfs de facto distributed file system standard provides basis establishing dynamic grid virtual file system gvfs sessions 
gvfs extends virtualization infrastructure user level support demand secure highperformance access grid vm state 
leverages ssh tunneling session key cross domain authentication provide private file system channels addresses performance limitations associated typical nfs setups wide area environments buffer caches limited storage capacity write policies allowing user level disk caching 
supports application driven meta data file system level allow data requests satisfied partial full file transfer selectively efficiently handle vm state files 
mechanisms implemented transparently kernels applications support unmodified vm technologies vmware uml xen file system store vm state 
reports performance approach experiments conducted vmware vms instantiated wide area environments 
experimental results show significantly improves execution time applications grid vms compared native nfs speedup experiences relatively small overhead compared vms locally stored state warm proxy caches 
results show demand transfer disk caching meta data information allows fast instantiation large vm clone zhao zhang figueiredo 
middleware supported data management virtual machine state user data allows application tailored vm instantiations vm vm vm grid resources compute servers state servers data servers 
seconds clone seconds subsequent clones substantially outperforms cloning native data access minutes scp file transfer minutes 
rest organized follows 
section presents gvfs 
sections describe proposed gvfs extensions cross domain authentication data encryption caching meta data handling respectively 
section discusses integration gvfs grid vms 
section presents results quantitative performance analyses 
section examines related section concludes 

background current grid data management solutions typically employ file staging techniques transfer files user accounts absence common file system 
file staging approaches require user explicitly specify files need transferred gridftp transfer entire files time opened gass may lead unnecessary data transfer 
data management solutions supporting demand transfer grids investigated related discussed section 
solutions require customized application libraries file servers 
previous shown data management model supporting cross domain demand data transfers requiring dynamically linked libraries changes applications native file system clients servers achieved way mechanisms logical user accounts distributed virtual file system 
distributed virtual file system built virtualization layer top nfs de facto lan distributed file system standard allowing data transferred demand grid storage compute servers duration computing session 
resulting virtual file system utilizes user level proxies dynamically forward data requests map short lived user identities allocated middleware behalf user 
current deployment virtual file system session leverages single user native nfs proxy design supports connections proxies series native nfs client server 
design may introduce overhead processing forwarding rpc calls important design goals lead consideration additional functionality extensions protocol implemented proxies modifications native nfs clients servers applications 
example private file system channels realized inter proxy session key authentication encrypted data tunneling explained details section 
possible functionality extension inter proxy cooperation fine grained cache coherence consistency models 
improved performance addition proxy client side enables caching file system data improve access latency requests exhibit locality 
example section describes level caches additional kernel level memory buffers enabled proxy controlled disk caching 
possible extensions include inter proxy high speed data transfer protocols large files gridftp 
illustrates multi proxy gvfs setup proxies native nfs server client cooperatively 
server side proxy deployed vm state server authenticates forwards data accesses shadow account shadow compute server state directory home vm vm file account vm maps credentials shadow vm inside rpc message 
requests come client side distributed file system virtualization techniques supporting 
proxy extensions vm state transfers 
compute server vm monitor vmm issues system calls processed kernel nfs client 
requests may hit kernel level memory buffer cache processed user level proxy 
proxy requests hit block disk cache file disk cache matching stored meta data satisfied locally proxy misses forwarded ssh tunneled rpc calls remote proxy fetches data directly vm memory state kernel nfs server vm disk state 
proxy directly server side proxy export directory shadow example connections forwarded ssh tunneling directory exported shadow localhost 
hand clientside proxy authenticates forwards data access shadow localhost server side proxy importantly implements extensions enable functionality better performance 
extensions discussed details sections including private file system channels section client side proxy disk caching section application specific meta data handling section 

private file system channels 
secure data tunneling security major concern data provisioning wide area environments 
context rpc applications security communication provided outside rpc protocol 
key advantage approach lies fact existing rpc clients servers reused modifications approach taken gvfs 
secure rpc connections established tcp ip tunneling 
tunnel allows encapsulation encryption datagrams client side corresponding decryption de remote site 
supports private communication channels manner 
application transparent property tunneling key advantage technique wide applications virtual private networks secure remote windows sessions 
tunneling rpc connections achieved mechanisms ssl ssh 
defacto standard secure logins provides strong authentication data privacy integrity remote login sessions tunneling arbitrary tcp connections 
gvfs leverages functionality ssh create authenticated encrypted tunnels client side server side proxies 
tunneled gvfs connections tcp 
prevent gvfs supporting udp kernel clients servers 
client side proxy receive rpc calls udp localhost forward server side proxy tcp server side proxy receive rpc calls tcp tunnel forward localhost udp 
ssh tunnel nfs traffic pursued related efforts secure nfs 
key differentiator gvfs previous approaches private file system sessions established dynamically middleware basis statically system administrator groups users 
key difference gvfs support user identity mappings network domains 
user tunnels user mappings key establishing dynamic file system sessions grid oriented environment users belong different administrative domains 
secure tunnel multiplexed users faces limitations cross domain authentication nfs rpc security authenticate users tunnel 
secure connection user file system channels task authenticating users independently carried private file system channel task guaranteeing privacy integrity leveraged secure connection 

security model gvfs private file system channels rely existing services client file system mounting server file system exporting user level middleware controlled proxies client server ssh tunnels established 
deployment gvfs involves setup appropriate trust relationships client server middleware 
zhao zhang figueiredo gvfs security model assumed data management middleware supports logical user accounts authenticate server side file account clientside shadow account described 
data server administrator needs trust grid middleware extent allows access exported directory tree brokered proxies home vm vm server 
essence server administrator delegates access control exported directories grid middleware 
trust relationship similar grid data deployments gridftp 
architecture gvfs allows kernel export definitions implemented local system administrators simple manner kernel server exports localhost directories accessible gvfs 
users outside localhost directly mount file systems kernel server side proxies 
typical scenario base home directory grid users exported gvfs requires single entry exports definition file 
server side proxies responsible authenticating accesses file systems exported gvfs 
accomplished means mechanisms 
authentication mechanism independent proxy consists client machine able appropriate credentials ssh key certificate gsi enabled ssh server machine establish tunnel 
second tunnel established necessary server side proxy authenticate requests received 
typically nfs servers authenticate client requests checking origin nfs calls allowing come privileged ports trusted ips proceed 
gvfs setup originator requests sent proxy server tunnel point 
proxy receives requests localhost ports authenticate client trusted ip port information 
necessary implement alternative approach inter proxy authentication tunnel points 
approach consists dynamic creation random session key middleware time server side proxy started transmission separate private channel client side proxy 
client side proxy appends key nfs procedure call server side proxy authenticates coming request originated localhost session key matches server side proxy key 
session keys completely transparent kernel clients servers requires changes implementations applies inter proxy authentication tunnel points 
session keys authentication similarly encryption purposes 
implementation session key randomly generated bit string encapsulated original nfs rpc messages replacing unused credential field run time overhead supporting method small consisting encapsulation session key simple comparison key values 
server side proxy needs trust grid middleware security infrastructure authenticate user credentials establish encrypted tunnel create random session key provide key client side proxy separate private channel 
mechanisms provided existing grid security infrastructure globus gsi 
client administrator needs trust grid middleware extent needs allow nfs mount operations initiated grid middleware possibly restricted set allowed base directories home vm vm 
current gvfs setups implemented sudo entries commands 

client side proxy disk caching 
designs caching classic successful technique improve performance computer systems exploiting temporal spatial locality providing high bandwidth low latency access cached data 
nfs protocol allows results various nfs requests cached nfs client 
memory caching generally implemented nfs clients disk caching typical 
disk caching especially important context wide area distributed file system overhead network transaction high compared local access 
large storage capacity disks implies great reduction capacity conflict misses 
complementing memory file system buffer disk cache form effective cache hierarchy memory small fast level cache disk works relatively slower greater second level cache 
disk caching gvfs implemented file system proxy 
virtual file system established chain proxies native client side proxy establish manage disk caches illustrated 
gvfs disk caching operates granularity nfs rpc calls 
cache generally structured way similar traditional block hardware designs disk cache contains file banks hold frames data blocks cache tags stored 
cache banks created local disk proxy demand 
indexing banks frames hash requested nfs file handle offset allows associative lookups 
hashing function designed exploit spatial locality mapping consecutive blocks file consecutive sets cache bank 
gvfs proxy disk caching supports different policies write operations read write write back configured middleware specific user application file system session 
write back caching important feature wide area environments hide long write latencies 
furthermore write back disk caching avoid transfer temporary files 
performing computing user data scheduler remove temporary files distributed file system virtualization techniques supporting working directory automatically triggers proxy invalidate cached dirty data files 
dirty cache contents written back server useful data submitted bandwidth time effectively saved 
distributed file systems exploit advantages disk caching example afs transfers caches entire files client disk supports disk caching nfs blocks 
designs require kernel support able employ user application caching policies 
contrast gvfs unique support customization user application basis 
instance cache size write policy configured user requirements priorities optimized knowledge grid application 
concrete example enabling heterogeneous disk caching meta data handling application tailored knowledge employed support block caching vm disk state file caching vm memory state section 

deployment disk caching beneficial vm technologies including vmware uml xen vm state virtual disk memory stored regular files filesystems 
gvfs sessions dynamically setup middleware disk caches dynamically created managed proxies session basis 
gvfs session starts proxy initializes cache middleware configured parameters including cache path size associativity policies 
session parameters including cache write consistency policies reconfigured 
session finishes policies implemented grid middleware drive proxy flush write back preserve cached contents 
typically kernel level nfs clients geared local area environment implement write policy support staging writes limited time kernel memory buffers 
kernel extensions support aggressive solutions long term high capacity write back buffers undertaken nfs clients aware existence potential sharing clients maintaining consistency scenario difficult 
write back proxy cache described leverages middleware support implement session consistency model higher abstraction layer supports signals writing back flushing cache contents 
middleware driven consistency sufficient support grid applications tasks known independent scheduler high throughput computing 
model assumed vm management system vmware vm persistent state dedicated single user aggressive read write caching write delay vm non persistent state read shared users user independent redo logs read caching state files write back caching redo logs employed 
furthermore possible achieve fine grained cache coherence consistency models implementing call back inter proxy coordination mechanisms subjects going investigations 
caches different proxies normally independently configured managed allows share read cached data improving cache utilization hit rates 
hand series proxies independent caches different capacities cascaded client server supporting scalability multi level cache hierarchy 
example level hierarchy gbytes capacity node local disk exploit locality data accesses node capacity available lan disk array server exploit locality data accesses nodes lan 

application specific meta data handling extension gvfs handling meta data information 
main motivation middleware information generate meta data certain categories files knowledge grid applications 
gvfs proxy take advantage meta data improve data transfer 
meta data contains data characteristics file associated defines sequence actions taken file accessed action described command script 
proxy receives nfs request file meta data associated processes meta data executes required actions file accordingly 
current implementation meta data file stored directory file associated special filename easily looked 
example resuming vmware vm requires reading entire memory state file typically hundreds mbytes 
transferring entire contents file time consuming application tailored knowledge preprocessed generate meta data file specifying blocks memory state zeros 
memory state file requested client side proxy processing meta data service requests zero filled blocks locally ask non zero blocks server reconstruct entire memory state vm monitor 
normally memory state contains zero filled blocks filtered technique traffic wire greatly reduced instantiating vm 
instance resuming mb ram red hat vm suspended boot client issues nfs reads filtered technique 
example gvfs meta data handling capability help transfer large files enable file disk caching 
inherited underlying nfs protocol data transfer gvfs demand block block zhao zhang figueiredo typically kbytes block allows partial transfer files 
applications benefit property especially working set accessed files considerably smaller original sizes files 
example accesses vm disk state typically restricted working set smaller large disk state files 
large files completely required application remotely stored memory state file requested vmware resume vm data transfer inefficient 
grid middleware speculate advance files entirely required knowledge application generate meta data gvfs proxy expedite data transfer 
actions described metadata compress remotely copy uncompress read locally means referred file accessed client fetching file block block server proxy compress file server gzip remotely copy compressed file client gsi enabled scp uncompress file cache gunzip generate results request locally cached file 
file cached requests file satisfied locally 
proxy effectively establishes demand fast file data channel secure employing ssh tunneling data transfer addition traditional block nfs data channel file cache complements block cache gvfs form heterogeneous disk cache 
key success technique proper speculation application behavior 
grid middleware able accumulate knowledge applications past behaviors intelligent decisions knowledge 
instance vmware entire memory state file required state server vm resumed compute server highly compressible technique applied efficiently expedite transfer 

integration vm grid computing vms deployed grid different kinds scenarios pose different requirements data management distributed virtual file system 
scenario grid user allocated dedicated vm persistent virtual disk state server 
suspended current state user leaves resumed user comes user may may start computing sessions server 
session starts vm efficiently instantiated compute server session finishes modifications vm state user executions efficiently reflected state server 
extended gvfs support scenario meta data handling quickly restore vm checkpointed state demand block access pattern virtual disk avoid large overhead incurred downloading uploading entire virtual disk proxy disk caches exploit locality virtual disk provide high bandwidth low latency accesses cached file blocks write back caching effectively hide latencies write operations perceived user typically large wide area environment submit modifications user line session idle 
scenario state server stores number non persistent vms purpose cloning 
generic vms application tailored hardware software configurations vm requested compute server state server searched requirements desired vm 
best match returned golden vm cloned compute server 
cloning process entails copying golden vm restoring checkpointed state setting clone customized configurations 
new clone comes life computing start vm modifications original state stored form redo logs 
data management scenario requires efficient transfer vm state state server compute server efficient writes redo logs checkpointing 
similar scenario extended gvfs quickly instantiate vm clone meta data handling memory state file demand block access disk state files 
copying entire virtual disk symbolic links disk state files compute server 
computation starts proxy disk cache help speedup access virtual disk cache warm write back help save user time writes redo logs 
differentiation scenario small set golden vms instantiate clones concurrent execution high throughput task 
proxy disk caches exploit temporal locality cloned instances accelerate cloning process 
compute server cached data memory disk state files previous clones greatly expedite new golden vms 
second level proxy cache setup lan server explained section exploit locality golden vms cloned computer servers local network 

performance evaluation 
experimental setup prototype approach discussed built implementation middleware controlled userlevel file system proxies 
core proxy code described extended support private file system channels client side disk caching meta data handling 
section evaluates performance proposed techniques distributed file system virtualization techniques supporting supporting vms grid analyzing data experiments group typical benchmarks 
experiments conducted local area widearea environments 
lan state server dual processor ghz pentium iii cluster node gb ram gb disk storage 
wan state server ghz pentium iii cluster node gb ram gb disk 
sections compute server ghz pentium iii cluster node gb ram gb scsi disk section compute servers cluster nodes ghz hyper threaded xeon processors gb ram gb disk 
compute servers run vmware gsx server support vms 
compute servers connected lan state server mbit ethernet university florida connected wan state server abilene northwestern university university florida 
rtt computer servers lan state server msec wan state server msec measured 
experiments gvfs proxy caching cache configured gbyte capacity file banks way associativity 
proxy cache prototype currently supports nfs version limits maximum size wire nfs read write operation kb 
nfs version kb block size gvfs proxy caching enabled 
experiments native nfs nfs version kb block size 
furthermore experiments initially setup cold caches kernel buffer cache possibly enabled proxy disk cache un mounting re mounting gvfs partition flushing proxy cache 
private file system channels employed gvfs experiments 

performance private file system channels evaluation gvfs support grid vms necessary understand performance gvfs compared local area nfs local disk file system 
previous shown proxy distributed virtual file system performs comparison native nfs local area setup 
investigation focuses perfor mance private file system channels enabled gvfs performance gvfs wide area environments 
experimental results shown subsection consider performance measured elapsed execution times benchmarks benchmark spec high performance group 
consists phases phase generates large trace file disk phase involves intensive seismic processing computations 
benchmark tested sequential mode small dataset 
models scientific application intensive compute intensive 
latex benchmark designed model interactive document processing session 
generation pdf portable document file version page document edited latex 
runs latex bibtex programs sequence iterates times time different version latex input files 
benchmarks executed compute servers various environments working directories stored local disks mounted remote lan wan state servers 
investigate overhead incurred private file system channels lan environment performance native nfs lan compared gvfs lan proxy caches 
experiments conducted wan environment gvfs ensure data privacy passing firewalls performance gvfs proxy caches wan caches wan gc measured performance local disk local investigate overhead gvfs performance improvement achieved proxy caches 
experiment results summarized table 
consider execution latex benchmark 
lan scenarios overhead private file system channels lan vs lan large substantially reduced kernel buffer cache holds working dataset 
overhead gvfs consists overhead incurred ssh tunneling proxy processing rpc calls relatively fast server considerably small 
results show kernel buffer cache sufficient lower wan execution time latex benchmark table gvfs overheads latex benchmarks 
overhead data calculated comparing execution times benchmarks different scenarios local disk local lan nfs lan lan gvfs lan wan gvfs proxy caches wan proxy caches wan gc 
latex benchmark comparisons execution time iteration average execution time second twentieth iterations total execution time listed 
benchmark comparisons execution time phase fourth phase total listed 
benchmarks wan gc scenario write back cached data submitted server executions time summed total execution time 
latex overhead st run nd th run total phase phase total lan vs lan wan vs local wan gc vs local zhao zhang figueiredo wan proxy cache remarkably reduce overhead wan gc compared local 
factors allow combination kernel buffer proxy caches outperform solution kernel buffer 
larger storage capacity second implementation write back policy allows write hits complete contacting server 
execution benchmark compute intensive phase phase expected achieves close performance scenarios performance intensive phase phase differentiates 
reasonable see overhead private file system channels larger network communication requires time ssh tunneling 
overhead especially large wan due higher network latency widearea environment wan gc proxy cache effectively hides latency significantly reduces overhead relative local 
write back caching helps improve performance avoiding transfer temporary data server 
fact benchmark generates hundreds mbytes data working directory calculations tens mbytes required results 
dirty cache contents written back server execution time summed total execution time wan gc tenth wan performance gvfs private file system sessions close nfs lan benchmarks help proxy caches overhead wan latex benchmark benchmark relative local disk file system 
observations subsections focus performance gvfs support vms grid environments 

performance application execution vms subsection employs benchmarks introduced previous subsection 
latex benchmark study scenario users interact vm customize execution environment application cloned users execution 
environment important interactive sessions vm setup show response times grid users 
study performance application exhibits mix compute intensive intensive phases 
addition third benchmark evaluate performance applications executing gvfs mounted vm environments kernel compilation benchmark represents file system usage software development environment similar andrew benchmark 
kernel linux default configurations red hat workstation deployment compilation consists major steps dep modules modules install involve substantial reads writes large number files 

benchmark execution times 
results show runtimes execution phase various scenarios 
execution times benchmarks vm mb ram gb disk vmware plain disk mode installed linux red hat benchmark applications data sets measured different scenarios local vm state files stored local disk file system 
lan vm state files stored directory mounted lan state server gvfs proxy caches 
wan vm state files stored directory mounted wan state server gvfs proxy caches 
wan gc vm state files stored directory mounted wan state server gvfs proxy caches 
shows execution times phases benchmark 
performance part phase range scenarios 
results intensive part phase shows large difference wan wan gc scenarios faster factor 
benefit write back policy evident phase large file input phases created 
proxy cache brings total execution time percent wide area environment 
latex benchmark results show wide area environment interactive users experience start latency seconds wan seconds wan gc 
overhead substantial compared local lan execute iteration seconds 
start overhead scenarios smaller experience entire vm state downloaded state server session seconds 
subsequent iterations kernel buffer help reduce average response time wan seconds 
proxy disk cache improve wan gc close local slower lan slower faster wan time needed submit cached dirty blocks distributed file system virtualization techniques supporting 
latex benchmark execution times various scenarios 
runtimes run average runtimes runs total runtimes listed 

kernel compilation benchmark execution times various scenarios 
results show runtimes different phases consecutive runs benchmark 
seconds shorter uploading time seconds entire vm state 
experimental results kernel compilation benchmark illustrated 
run benchmark wan gc scenario begins cold caches shows overhead compared local scenario 
second run warm caches help bring overhead 
compared second run lan scenario slower 
availability proxy cache allows wan gc outperform wan percent 
latex case data show overhead experienced environment program binaries datasets partially reused iterations application development environments response times wan mounted virtual file system acceptable 

performance vm cloning benchmark designed investigate performance vm cloning gvfs 
cloning scheme discussed section includes copying configuration file copying memory state file building symbolic links disk state files configuring clone resuming new vm 
execution time benchmark measured different scenarios local vm state files stored local disk file system 
wan vm state files stored directory mounted wan state server gvfs 
experiment single vm cloned times compute server sequentially 
supported gvfs extensions including private file system channel proxy disk caching meta data handling 
designed evaluate performance temporal locality 
wan setup wan different vms cloned computer server sequentially 
designed evaluate performance locality 
wan setup wan lan server provides second level proxy disk cache compute server 
different vms cloned new compute server pre cached lan server due previous clones computer servers lan 
setup designed model scenario temporal locality vms cloned compute servers lan 
wan vm state files stored directory mounted gvfs wan state server computer servers nodes cluster 
experiment vms cloned compute servers parallel 
shows cloning times sequence vms mb virtual memory gb virtual disk 
comparison range gvfs cloning times shown vm cloned scp full file copying takes approximately minutes transfer entire state 
vm state copied read native nfs mounted directory cloning takes 
times sequence vm 
cloned vm mb virtual memory gb virtual disk 
results show vm cloning times different scenarios 
zhao zhang figueiredo table total time cloning vms wan wan caches kernel buffer cache proxy block cache proxy file cache cold warm 
total time total time caches cold caches warm wan seconds seconds wan seconds seconds half hour block transfer memory state file slow 
enhanced gvfs proxy disk caches meta data support compress gzip transfer scp vm memory state greatly speed cloning process seconds 
furthermore temporal locality access memory disk state files clones proposed solution allows cloning performed seconds data cached local disks seconds data cached lan server 
table compares sequential cloning parallel cloning 
experiment wan compute servers share single state server server side gvfs proxy 
start parallel client side gvfs proxy spawns file data channel fetch memory state file demand 
speedup parallel cloning versus sequential cloning caches cold caches warm 
compared average time clone single vm sequential case total time cloning vms parallel longer cold caches longer warm caches implies gvfs support vm cloning scale parallel cloning large number vms 
scenarios support gvfs demand transparent user vm monitor 
demonstrated section vm instantiation cloning gvfs improve run time performance substantially 

related data management solutions gridftp gass provide apis applications programmed access data grid 
legion employs modified nfs server provide access remote file system 
condor system kangaroo implement system call interception means static dynamic library linking allow remote nest grid storage appliance supports restricted subset anonymous accesses nfs protocol integrate unmodified nfs clients 
contrast approaches solution allows unmodified applications access grid data conventional operating system clients servers supports legacy applications binary level 
previous effort ufo parrot file system leverage system call tracing allow applications access remote files require low level process tracing capabilities complex implement highly depen dent support non posix compliant operations setuid 
self certifying file system sfs example file system uses proxies forward nfs protocol calls implement cross domain authentication encryption 
approach differs sfs employs dynamically created user file system proxies allowing middleware controlled caching policies writeback vs write user basis setup multiple levels proxy caching 
contrast sfs employs single proxy server multiple users 
gvfs uses ssh gsi ssh creation encrypted tunnels customized algorithm 
implementations ssh nfs tunnels pursued secure nfs project 
tunnels created statically system administrators multiplexed users gvfs capable establishing dynamic private file system channels user basis 
related kernel level dfs solutions exploit advantages disk caching aggressive caching 
example afs transfers caches entire files client disk supports disk caching nfs blocks nfs protocol includes provisions aggressive caching 
designs require kernel support able employ user application caching policies widely deployed grid setups 
contrast gvfs supports user application customization caching leverages implementations nfs conveniently available wide variety platforms 
related project investigated optimizations migration vms possibly low bandwidth links proposes system delivers virtual desktops personal computer users cache system management model 
common approaches mechanisms supporting demand block transfers vmm tailored disk caches 
introduces techniques low overhead live migration vms lan environments 
contrast approaches data management solution supports efficient instantiation vms cross domain wide area environments techniques applicable vm technology uses file systems store vm state 

grid computing classic virtual machines promises capability provisioning secure highly flexible computing environment users 
achieve goal important grid middleware provides efficient data management service vms vm state user data 
shows user level techniques build top de facto distributed file system implementations provide efficient framework purpose 
techniques applied vms different kinds long vm monitor allows vm state stored file systems mounted nfs 
distributed file system virtualization techniques supporting gvfs provides private file system channels vm instantiation leverages proxy disk caching improve performance 
experimental results show warm caches overhead running applications inside vms instantiated wan gvfs relatively small compared vms stored local disk file system 
results show demand transfers meta data information allows instantiation mb ram linux vm clone seconds clone seconds subsequent clones considerably outperforming cloning transfer entire vm state native nfs state access 
acknowledgments effort sponsored national science foundation eia aci eec nsf middleware initiative nmi ani sci 
authors acknowledge gift vmware sur ibm 
opinions findings recommendations expressed material authors necessarily reflect views nsf ibm vmware 
authors peter dinda northwestern university providing access resources 
foster kesselman tuecke anatomy grid enabling scalable virtual organizations international journal supercomputer applications 
butt kapadia figueiredo fortes portals security issues journal parallel distributed computing 
goldberg survey virtual machine research ieee computer magazine 
figueiredo dinda fortes case grid computing virtual machines proc 
international conference distributed computing systems may 
figueiredo kapadia fortes seamless access decentralized storage services computational grids virtual file system cluster computing journal 
pawlowski smith hitz nfs version design implementation proc 
usenix summer technical conference 

lim virtualizing devices vmware workstation hosted virtual machine monitor proc 
usenix annual technical conference june 
dike user mode port linux kernel proc 
th annual linux showcase conference usenix association atlanta ga october 
barham fraser hand harris ho neugebauer pratt warfield xen art virtualization proc 
acm symposium operating systems principles october 
allcock chervenak foster kesselman tuecke secure efficient data transport replica management high performance data intensive computing proc 
ieee mass storage conference 
foster kesselman tuecke gass data movement access service wide area computing systems proc 
th workshop parallel distributed systems may 
kapadia figueiredo fortes enhancing scalability usability computational grids logical user accounts virtual file systems proc 
heterogeneous computing workshop international parallel distributed processing symposium april 
figueiredo fortes single sign vigo role access delegation mechanisms short lived user identities proc 
international parallel distributed processing symposium april 
chawla figueiredo fortes zhang zhao zhu zhu virtualized resources virtual computing grids vigo system generation computing systems special issue complex problem solving environments grid computing vol pp 

bowman secure nfs ssh tunnel www math 
ualberta ca imaging callaghan nfs illustrated addison wesley 
hennessy patterson computer architecture quantitative approach rd edition morgan kaufmann 
morris satyanarayanan conner howard rosenthal smith andrew distributed personal computing environment communications acm march 
zhao figueiredo supporting grid file system sessions services proc 
th ieee international symposium high performance distributed computing july 
ganguly zhang fortes figueiredo providing managing virtual machine execution environments grid computing proc 
acm ieee conference supercomputing july 
vmware vmware user manual www 
vmware com pdf vc users manual pdf th apr 
chandra pfaff chow lam rosenblum optimizing migration virtual computers proc 
th symposium operating systems design implementation 
wang jamin measuring path minimum rtt confidence ieee workshop ip operations management 
howard kazar menees nichols satyanarayanan sidebotham west scale performance distributed file system acm transactions computer systems 
vmware gsx server user manual www 
vmware com pdf gsx vm manual pdf 
white grimshaw nguyen grid file access legion model proc 
th ieee international symposium high performance distributed computing aug pp 

litzkow livny mutka condor hunter idle workstations proc 
th international conference distributed computing systems june pp 

thain 
son livny kangaroo approach data movement grid proc 
th ieee international symposium high performance distributed computing aug pp 

bent leroy roy stanley arpaci dusseau arpaci dusseau livny flexibility manageability performance grid storage appliance proc 
eleventh ieee symposium high performance distributed computing edinburgh scotland july 
alexandrov schauser ufo personal global file system user level extensions operating system acm transactions computer systems aug pp 

thain livny parrot transparent user level middleware data intensive computing proc 
workshop adaptive grid middleware new orleans louisiana september 
zhao zhang figueiredo mazieres kaminsky kaashoek witchel separating key management file system security proc 
th acm symposium operating system principles dec 
pawlowski beame callaghan robinson nfs version protocol proc 
nd international system administration networking conference may 
chandra lam collective cache system management architecture proc 
nd symposium networked systems design implementation may pp 

clark fraser hand hansen jul pratt warfield live migration virtual machines proc 
nd symposium networked systems design implementation may 
ming zhao phd candidate department electrical computer engineering member advance computing information systems laboratory university florida 
received degrees tsinghua university 
research interests areas computer architecture operating systems distributed computing 
mail ming acis ufl edu jian zhang phd student department electrical computer engineering university florida member advance computing information systems laboratory acis 
research interest virtual machines grid computing 
member ieee acm 
mail ufl edu renato figueiredo received degrees electrical engineering universidade de campinas respectively ph degree electrical computer engineering purdue university 
faculty school electrical computer engineering northwestern university evanston illinois 
joined department electrical computer engineering university florida assistant professor 
research interests areas computer architecture operating systems distributed systems 
mail renato acis ufl edu 
