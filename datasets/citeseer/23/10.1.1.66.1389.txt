embedding covert channels tcp ip steven murdoch stephen lewis university cambridge computer laboratory jj thomson avenue cambridge cb fd united kingdom www cl cam ac uk users sjm srl 
commonly believed steganography tcp ip easily achieved embedding data header fields seemingly filled random data ip identifier tcp initial sequence number isn significant bit tcp timestamp 
show case fields naturally exhibit sufficient structure non uniformity efficiently reliably differentiated unmodified ciphertext 
previous tcp ip steganography take account examining tcp ip specifications open source implementations developed tests detect na embedding 
describe reversible transforms map block cipher output tcp isns indistinguishable generated linux openbsd 
techniques extended operating systems 
message hidden attacker demonstrate existence knowing secret key 
steganographic covert channels modification network protocol header values best understood considering scenario actors keeping existing literature shall call alice bob walter 
alice arbitrary modifications network packets originating machine walter network 
wants leak message bob monitor packets egress points network 
alice aims hide message walter see modify packet leaving network 
analogous passive warden threat model introduced 
practical instantiation problem alice bob may person 
consider machine attacker unrestricted access short amount time lies closely monitored network 
attacker installs machine wishes leak passwords way owner network observe happening 
attacker want watermark transmissions particular machine steganography described purpose 
alice choose layer protocol stack wishes hide message 
layer characteristics indicate scenarios best 
potential embedding layers osi model discussed 
draft information hiding workshop proceedings revision july steven murdoch stephen lewis bottom stack physical data link layers ethernet opportunity embedding data 
requires lowlevel control hardware alice may find difficult obtain 
chooses signal bob layer messages stripped reach device connects networks higher layer ip router 
requires bob lan 
example steganography system relies embedding physical layer described 
alice choose embed data presentation application layers network stack telnet ftp traffic 
brief access machine leaking data needs anticipate applications modify carry messages traffic generate 
similarly format files sent ftp jpeg pdf may viewed protocols steganographic data embedded 
provide alice high bandwidth channel confident able modify files suspicion 
remaining layers consider osi model network transport session 
tcp ip specified fall layers common vast majority internet applications 
message embedded protocols advantage survive unchanged journey walter network 
consider ipv embedding ipv covert channels discussed 
study number previously proposed schemes embedding data tcp ip protocol headers creating steganographic covert channel 
show schemes easily detected passive warden 
algorithms generation tcp ip header fields looked detail alternative method embedding data proposed 
show passive warden detect method knowledge secret key subject realistic constraints 
results relevant field operating system physical device fingerprinting 
threat model far assumed steganography prevented detection attempting remove hidden information 
known passive warden threat model 
active warden modify traffic regardless suspicion 
shown active warden remove tcp ip level steganography lower layer steganography removed routing 
difficulty removing steganography higher layers jpeg images damaging carrier 
scenarios may infeasible warden active kind filtering necessary remove tcp ip steganography increase network latency require filtering router store large amounts embedding covert channels tcp ip state 
warden may wish avoid users aware steganography suspected 
assume alice operates environment passive warden unreliable network permitting packet loss duplication reordering requires tcp ip covert channel giving indistinguishability walter passive warden unable detect presence data hidden packets leaving alice machine reliability desires indication messages bob arrived retransmit necessary 
overview tcp ip steganography common failing existing proposals production output different distribution generated unmodified tcp ip implementations 
cases outside relevant specifications 
reason design steganographic techniques detect necessary familiar applicable standards details implementation 
section gives overview tcp ip standards related steganographic encoding perspective 
basic tcp ip protocol suite specified 
extensions tcp extensions high performance specify additional header options give scope steganographic coding 
ip aim provide reliability guarantees allows client protocols host transport blocks data datagrams source destination specified fixed length addresses 
noteworthy feature ip purposes allows fragmentation reassembly long datagrams requiring certain extra header fields 
tcp hand aim provide reliable channel clients 
stream oriented interface keeps reliability properties networks exhibiting packet loss reordering duplication 
features implementing reliability flow control give scope steganographic coding 
tcp ip header serve carrier steganographic covert channel header field take set values appears plausible passive warden 
warden able distinguish header generated unmodified tcp ip stack steganographic encoding mechanism 
section examine header fields plausible value look amount entropy available steganographic coding scheme 
tcp ip steganography exploits fact headers altered transit 
mentioned ip packets fragmented hiding data fragmentation related headers information lost 
time field ip header decremented time packet passes router initial values ip stacks known field gives little scope steganography 
steven murdoch stephen lewis illustrates base tcp ip headers 
fields shown italics may embed steganographic data 
consider fields turn assessing potential steganographic carriers 
ip tcp version type service total length identification flags fragment offset time live protocol source address destination address header checksum options padding source port destination port sequence number number offset reserved flags window checksum urgent pointer options including timestamp padding fig 

basic tcp ip header structure type service type service tos bits ip header indicate quality service parameters routers packet path 
rarely original semantics defined reused example implementation diffserv 
potential bits field steganographic carrier described networks 
easily detected warden threat model field set zero default operating system configurations 
ip identification described ip identification field ip id identifying value assigned sender aid assembling fragments datagram allocated bits ip header 
ip id distinguish fragments making packet fragments making constraints value uniqueness length time fragments packet reasonably remain network unpredictability 
ip ids unique time window necessary ensure fragments different packets reassembled packet receiving host 
unpredictability prevents idle scanning attacker host sending packet directly 
scheme embedding data field described 
uses pseudorandom sequence generated automorphism system ensure modified field random 
detected ip id fields random shown section 
embedding covert channels tcp ip ip flags ip packets include flags fragment df indicating packet discarded sent fragmentation fragments mf packet contains fragment packet fragmented 
df bit steganographic signalling proposed 
packets smaller maximum segment size df flag effect packets behaviour 
normal state df predicted packet context warden threat model detect technique 
ip fragment offset ip packets fragmented individual fragments contain offset field allows receiving host reconstruct fragments correct positions receive buffers 
information transmitted covertly modulating size fragments originated host fragment offsets 
ip identification tos fields method steganographic encoding easily detected 
environments path mtu discovery routinely fragmented packets unusual 
ip options ip packets rarely contain options steganographic potential limited 
ip timestamp option described confused tcp timestamp discussed section addition easily detectable packets option travel hops little open internet 
tcp sequence number tcp sequence numbers support reliability features provided tcp extent flow control features 
octet data transmitted tcp stream assigned sequence number 
tcp connection defined pair sockets reused host able detect segment current previous incarnation connection 
connection established hosts choose initial sequence number isn 
careful design algorithm generating initial sequence numbers ensures overlap sequence number space different incarnations connection prevented 
properties required algorithm initial sequence number generation 
connection isns hard guess involved connection 
allow connection time wait state restarted sequence numbers socket pair monotonically increasing 
prototype implementation steganography tcp isns ip id covert tcp described 
simply replaces chosen field data sent detected observing field meet required overlap uniqueness constraints comparing data observed statistical patterns suspected plaintext 
passive warden support vector machine svm 
designed detect covert tcp ip id tcp isn 
steven murdoch stephen lewis svm machine learning technique suitable automatically identifying features understood 
case ip ids isns algorithm generating understood precisely described source code necessary machine learning technique 
svm identify simple features detect complex structure fields interdependencies 
design implementation improvement covert tcp linux described 
uses tcp isns encoding information encrypts outgoing isns hide steganography may detected 
firstly output exhibit structure tcp isns expected linux 
secondly flaw des encryption allows recovery statistical information plaintext 
techniques discussed section 
tcp timestamp tcp timestamp option allows host accurately measure round trip time path mitigates problems associated sequence number wrap networks large bandwidth delay products 
purposes necessary understand constraints values tcp timestamps details features 
timestamp option consists bit fields ts value ts echo reply 
ts value field set timestamp clock sender field hidden data embedded 
constraints timestamp clock tick frequency hz khz strictly monotonic 
covert channel modulating significant bit tcp timestamps transmitted host described 
scheme works incrementing timestamp associated packet delaying accordingly order transmit bit ciphertext 
tcp timestamps universal deployed standard newer versions linux unix operating systems observation timestamps operating system support suspicious 
described section distribution values timestamp field modified expected detectable manner covert channel 
packet order addition content packet ordering packets carry information described 
relies ipsec network recover original order limiting applicability 
packets seldom reordered transmitting host warden close alice undoubtedly notice unusually large amount re ordering 
ip id tcp isn implementations passive warden considered knowledge tcp ip standards particular implementations 
check values embedding covert channels tcp ip observes generated unmodified operating system operating system knows installed originating host 
fields commonly embed steganographic data ip id tcp isn 
sufficiently precise description generation public literature details implementation included 
due construction fields contain structure mentioned section partially unpredictable 
achieved having randomly generated host secrets cryptographic functions 
assume warden aware implementation access secrets able exploit vulnerabilities cryptographic primitives 
linux linux isn generator shown rfc 
uses sha hash block bit words words set source destination ip address port remaining words filled cryptographically secure random secret initialised boot 
values defined sha standard initial state words block 
obtain isn second word hash selected current time microseconds added 
achieves goals rfc calculation sha hash slow algorithm causes significant delay tcp connection establishment process 
sha src ip dst ip state time block sequence number port port random data fig 

linux isn generator algorithm linux shown left modified reduce time needed calculate isn 
sha reduced block size variant md reads bit blocks iteration original reduces steps round 
similar way sha linux steven murdoch stephen lewis linux early linux late linux linux port port port ip ip ip ip ip bits state ip md md block block time linux early linux rekey counter late linux state time port isn ip id random data different ip id isn random data identical ip id isn initial ip id linux sequence number fig 

linux isn generator linux ip id generator limits reuse random data 
full size md algorithm known insecure random data seconds minutes limit impact secret compromise 
avoid resulting repeated isns hash calculated significant byte replaced counter incremented rekeying initialised current time divided 
linux time microseconds added 
early versions linux contained isn generator linux 
hashing step different secret initialise destination counters ip ids packets may fragmented 
global counter previously vulnerable idle scanning 
versions linux linux algorithm changed slightly shown right mainly improve performance multiprocessor systems 
difference detection perspective rekey counter initialised zero boot 
md changed secret isn ip id generation exploiting detection require finding vulnerability md 
packets fragmented due df bit set assigned predictable ip id tcp socket counter initialised sequence number xored timer udp socket counter initialised timer protocols zero 
openbsd algorithm isn generation openbsd introduced december shows operation 
initialised keying block cipher bits random data setting significant bit gener bits random data key embedding covert channels tcp ip rekey counter mod bits counter block cipher bits rc pseudorandom bits fig 

openbsd isn generator sequence number ated isns zero 
hours connections whichever sooner 
rekeying msb generated isns toggled prevents collisions isns generated adjacent rekey intervals 
new tcp connection isn generated follows msb set depending operating system odd rekey interval 
bits set output custom block cipher run counter mode counter updated time isn generated 
bit zero 
final bits generated rc pseudorandom number generator 
result running block cipher counter mode different pseudorandom sequence defined rekey interval 
bit values sequence inserted isns followed zero bit ensures isns rekey interval closer octets 
scheme satisfies constraints described section apart socket pair monotonicity 
ip id algorithm openbsd uses linear congruential generator described minutes ids generated whichever sooner 
uses msb toggling mechanism sequence number generator prevent collisions rekey intervals 
detection tcp ip steganography described operating system exhibits defined characteristics generated tcp ip fields 
identify anomalies may indicate steganography 
defined suite tests may applied network traces identify results consistent known operating systems particular operating system believed installed source host 
intended acceptance tests proposed steganographic schemes 
steven murdoch stephen lewis ip id characteristics 
sequential global ip id operating systems particularly older ones linux global counter ip id connections different hosts sequentially increasing ip ids strategy 

sequential host ip id linux host counter packets may fragmented 
warden test connections different hosts apparently unrelated ip ids connections host sequentially increasing ip id 
ip id msb toggle 
openbsd toggles significant bit ip id rekey interval minutes ip ids msb examined check matches pattern 

ip id permutation 
rekey interval openbsd ip id presence duplicates eliminates possibility strategy 
tcp isn characteristics 
rekey timer 
linux early significant byte isn initialised current time epoch divided 
system time microseconds added 
rekey timer recovered subtracting host time microseconds isn verifying top byte increases minutes 
requires clock synchronised seconds accuracy reasonable assumption systems ntp synchronisation 
host time queried directly example daytime service indirectly observing patterns isns 

rekey counter 
linux late msb isn set time system startup seconds divided 
system time microseconds added rekey counter recovered method test 
zero bit 
isns generated openbsd bit cleared 

isn msb toggle 
ip id openbsd toggles msb generated isn rekey interval hours ip ids 

isn permutation 
bits openbsd isns non repeating rekey interval 

full tcp collisions 
linux rfc inspired systems hash isn generation socket pair collisions may encountered 
linux rekeying bits identical subject clock skew subtracting time 
test estimate clock skew alice warden identify physical device tcp timestamps 

partial tcp collisions 
linux expected collisions rekey period significant bits subject clock skew subtracting time 
explicit steganography detection embedding covert channels tcp ip 
cryptography covered section encrypts data including isn field 
result distribution normally generated linux detected tcp tests 
due flaw way encryption exhibits characteristics may exploited 
encryption operates des encrypting iv source port destination port source ip address destination ip address shared key xoring bits resulting keystream hidden data 
iv collisions occur isns xored remove key stream result xor plaintexts 
plaintexts case data sent result zero cases redundancy encoding apparent 

tcp timestamp scheme described detected methods outlined 
low bandwidth tcp connection leak information randomness test applied significant bits timestamps tcp packets 
randomness detected deduced steganographic covert channel 
high bandwidth tcp connection segment transmission rate timestamp update rate warden merely calculate ratio number distinct timestamp values seen difference start timestamp values 
covert channel described ratio close close 

anomalies features indicate steganography include unusual flags df expected tos set excessive fragmentation ip options non zero padding unexpected tcp options timestamps operating systems generate excessive re ordering 
accuracy table shows tests detect operating systems steganographic techniques 
tests test directly original implementations assumptions probabilistic effects 
suffer false negatives 
false positives possible section consider number packets required avoid 
ip id test reach error probability packets test packets directed host rekey interval 
due prevalence path mtu discovery packets rare test effective normal case sockets send packets due socket ip id counters tcp udp 
probability error test halves packet observed 
birthday paradox packets collision expected match test 
steven murdoch stephen lewis table 
expected results tests unmodified operating systems tcp ip steganography systems 
matching test indicated 
columns tests presence steganography test absence 
written early linux assumed share characteristics fields explicitly modified 
covert tcp creates fields 
improved tcp ip steganography scheme described section software tests linux linux early linux late linux openbsd covert tcp linux openbsd tcp isn 
test needs packet achieve error probability test needs packets get 
test halves error probability syn packet test packet 
equivalent ip id check test needs syn packets rekey interval 
tests depend randomness source port selection heavily loaded machine experiments show collisions occur approximately syn packets fixed destination port 
steganography 
test depends port selection randomness experiments show collisions syn packets random destination ports 
test relies observation consecutive tcp timestamps timestamps seen discontinuity probability scheme accuracy test depends steganography na implementations packet needed 
detection resistant tcp steganography schemes aim section develop robust scheme tcp isns generated openbsd linux steganographic carrier 
achieve implementation real isn generators openbsd linux discussed separate cases 
discussion considers content steganographic channel protected timing attacks care taken ensure generation algorithms response time original implementations 
embedding covert channels tcp ip permutation code base output symbols 
index mod base base output output symbols index output symbols output symbols output symbols index base base permutation decode base input symbols 
input symbol symbol decipher symbol symbol symbol mod seen symbol skip index symbol input symbols input symbols input symbols symbol base base base return fig 

openbsd permutation coding decoding functions openbsd msb output exactly mimic output real openbsd tcp stack toggle hours connections 
bits extracted turn isn generated rekey interval resemble pseudorandom sequence 
functions encode decode integer permutation sequence 
times redundancy bob needs receive isns transmitted alice 
order remove patterns permutation alice choose key rekey interval transmit bob example significant bits isn 
functions allow encode isn 
th bit zero encode data remaining bits block cipher 
output cipher analogous genuine implementation 
xor hash header fields input data give freshness 
yields value skip packet 
steven murdoch stephen lewis linux simply encoding data significant bits isn detected warden detect absence uniform distribution subtraction time 
generated isn needs carry top byte set correctly 
add top byte generated isn value place bottom bits encrypted data strictly significant bits time 
ensure reliability alice check receives ack isn resend standard reliability protocol example reassemble data 
data differentiated random numbers encrypted 
achieve freshness allowing packet decrypted independently plaintext xored hash header fields including ip id derived isn encrypted variable length block cipher 
half space plaintexts reserved specifically avoid duplications space ciphertext data sent hash header fields dummy values encoded transmitted 
due rfc design alice encounters packet source destination ip address port rekey interval skipped 
provided overview opportunities tcp ip header fields carrier steganographic covert channel 
detailed description isn ip id generation schemes linux openbsd number previously proposed schemes tcp ip steganography described 
shown passive warden detect schemes modified headers produce easily distinguished generated genuine tcp ip stack 
outlined schemes encoding data isns generated openbsd linux 
schemes generate isns indistinguishable generated genuine tcp stack knowledge shared secret key exploit vulnerabilities underlying cryptography original isn generation algorithms 
particular linux case assume warden tell adjacent sequence numbers generated instance md partial input 
openbsd similar assumption counter mode output block cipher rc 
due joanna rutkowska george danezis richard clayton markus kuhn helpful contributions 
embedding covert channels tcp ip 
simmons prisoners problem subliminal channel 
chaum ed crypto 
advances cryptography plenum press 
handel hiding data osi network model 
anderson ed information hiding 
volume lecture notes computer science springer verlag 
hidden communication system corrupted networks 
international multi conference advanced computer systems 
tele pw edu pl pdf acs pdf 

postel std transmission control protocol 
ietf 
postel std internet protocol 
ietf 
lucena chapin covert channels ipv 
th privacy enhancing technologies workshop 

fisk fisk papadopoulos neil eliminating steganography internet traffic active 
petitcolas ed information hiding 
volume lecture notes computer science springer verlag 
handley paxson network intrusion detection evasion traffic normalization protocol semantics 
th usenix security symposium 

jacobson braden borman rfc tcp extensions high performance 
ietf 
idle scanning related ipid games www insecure org nmap html 

practical data hiding tcp ip 
acm workshop multimedia security 
ee tamu edu pdf acm pdf 

mogul deering rfc path mtu discovery 
ietf 
bellovin security problems tcp ip protocol suite 
computer communication review 
covert channels tcp ip protocol suite 
monday www firstmonday org issues issue 

sohn seo moon study covert channel detection tcp ip header support vector machine 
qing gollmann zhou eds information communications security 
volume lecture notes computer science springer verlag 
rutkowska implementation passive covert channels linux kernel 
chaos communication congress chaos computer club 
www ccc de congress event en html 

covert messaging tcp 
dingledine syverson eds privacy enhancing technologies 
volume lecture notes computer science springer verlag 
bellovin rfc defending sequence number attacks 
ietf 
de grabowski keromytis cryptography openbsd overview 
usenix annual technical conference freenix track 

claffy remote physical device fingerprinting 
ieee symposium security privacy oakland california ieee cs 
covert channels tcp ip headers 
presentation nu projects cc 
