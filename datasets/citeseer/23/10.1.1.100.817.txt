flexibility clinical guideline modelling languages maja wil van der aalst mor peleg eindhoven university technology gpo box nl mb eindhoven netherlands aalst tue nl department information systems university haifa mount carmel israel mis haifa ac il 
analysis clinical computer interpretable guideline cig modelling languages perspective control flow patterns revealed limited capabilities languages provide flexibility encoding executing clinical guidelines 
concept flexibility major importance medical care domain guarantee predicting state patients point care 
illustrate flexibility cig modelling languages improved describing clinical guidelines declarative approach 
propose cigdec language modelling enacting clinical guidelines 
keywords clinical guidelines computer interpretable guidelines flexibility modelling languages declarative model specification temporal logic 
clinical practice guidelines systematically developed statements assist practitioner decisions appropriate health actions specific clinical circumstances main intent clinical guidelines improve quality patient care reduce costs 
provide patient specific advice point care medical community taken initial steps computerization clinical knowledge contained clinical guidelines 
computer interpretable guidelines extensively developing decision support systems 
creating computer interpretable representations clinical knowledge contained clinical guidelines crucial developing systems provide patient specific advice point care 
types systems shown affect clinicians behavior guidelines 
unfortunately due absence single standard developing cig modelling languages functionality decision support systems employing modelling languages perspective control flow differs great extent 
analyzed suitability modelling languages asbru eon expressing control flow patterns revealed languages offer control flow flexibility process modelling languages employed workflow management systems wfms 
remarkable expect cig modelling languages offer dedicated constructs allowing flexibility 
accommodating flexibility guidelines means cig sensitive characteristics specific patients specific health care organizations 
modelling languages analyzed explicitly model care process specifying steps order steps executed 
process languages allow flexibility means modelling alternative paths taken depending priori available data incapable handling exceptional unpredicted situations 
exceptional situations modelled explicitly 
modelling possible scenarios results complex models feasible exceptional situations emergencies may arise point time 
difficult impossible oversee activity performed 
overcome problems reduce complexity models allow flexibility selecting execution path propose cigdec declarative language modelling clinical guidelines 
imperative languages declarative languages specify task performed determining perform 
cigdec specifies means constraints rules adhered user process execution leaving lot freedom user selecting tasks defining order executed 
cigdec considered variant 
reminder organized follows 
section introduce cig modelling languages eon patient diagnosis scenario 
briefly describe similarities differences considered languages perspective control flow patterns 
section introduce cigdec illustrate cigdec model patient diagnosis scenario 
discuss drawbacks advantages proposed language section 
related section 
section concludes 
computer interpretable guidelines section describes main concepts known cig modelling languages asbru eon 
evaluated control flow perspective workflow patterns 
introduce main concepts languages modelling patient diagnosis scenario tools protege eon respectively 
patient registered hospital consulted doctor 
doctor directs patient pass blood test urine test 
results tests available doctor sets diagnosis defines treatment strategy 
specifying behavior scenario immediately reflect possibilities deviate scenario necessary example emergency case 
particular indicate possible skip patient registration step immediately start diagnosis possible perform multiple tests kind perform possible perform consultancy doctor performing tests 
describing models patient diagnosis scenario indicate degree support control flow patterns analyzed modelling languages 
ta ble summarizes comparison cig modelling languages perspective control flow patterns 
complete description patterns supported analyzed languages 
basic control flow new patterns 
sequence 
structured loop 
parallel split 
recursion 
synchronization 
transient trigger 
exclusive choice 
persistent trigger 
simple merge 
cancel region advanced branching synchronization 
cancel multiple instance activity 
multi choice 
complete multiple instance activity 
structured synchronizing merge 
blocking discriminator 
multi merge 
cancelling discriminator 
structured discriminator 
structured join structural patterns 
blocking join 
arbitrary cycles 
cancelling join 
implicit termination 
generalized join multiple instances patterns 
static join mis 
mi synchronization 
static join mis cancellation 
mi priori design time knowledge 
dynamic join mis 
mi priori run time knowledge 
acyclic synchronizing merge 
mi priori run time knowledge 
general synchronizing merge state patterns 
critical section 
deferred choice 
interleaved routing 
interleaved parallel routing 
thread merge 
milestone 
thread split cancellation patterns 
explicit termination 
cancel activity 
cancel case table 
support control flow patterns asbru eon presents scenario modelled markup tool developed support authoring guidelines asbru 
process model asbru represented means time oriented skeletal plan 
root plan marked plan composed set plans 
plans represented dimensional objects width represents time axis depth represents plans level decomposition performed parallel height represents decomposition plans sub plans 
parent plans considered completed mandatory sub plans completed 
enabling completion resumption abortion conditions specified plan necessary 
time axe shows plans register patient consult doctor test phase define treatment executed sequentially 
test phase plan parallel plan consisting activities ask urine test ask blood test 
parallel plan fig 

patient diagnosis scenario modelled requires enclosed activities completed order pass flow control plan 
model types plans sequential root plan parallel plan test phase plan 
allows visualize order plan unordered plan cyclical plan plan types actions ask variable assignment 
deviations modelled scenario possible plans structured order strictly defined 
possible adjust model implicitly incorporate required execution paths 
particular cyclical plan order iterate execution certain task 
order relax parallel order blood urine tests tasks order plan 
behavior model deterministic allow flexibility 
asbru concept plan activation mode 
allows conditions aborting suspending resuming plan 
relevant case registering patient having needed data initially plan suspended resumed 
pattern analysis showed asbru able support control flow patterns 
asbru uniquely supports recursive calls interleaved parallel routing features directly supported analyzed languages 
eon model patient diagnosis scenario created protege environment illustrated 
protege ontology editor knowledge base framework cf protege stanford edu 
main modelling entities eon scenarios action steps branching decisions synchronization 
scenario characterize state patient 
types decision steps eon case step select precisely branch choice step select branch 
action step specify set action specifications sub guideline carried 
branch synchronization steps specify parallel execution 
steps tests parallel 
features offered eon order model patient diagnosis scenario flexible 
scenario model different branch step synchronization step fig 

patient diagnosis scenario modelled eon protege entry points model 
allows jump middle model start execution point 
feature useful emergency cases example registration step skipped immediate treatment procedure started 
unfortunately eon offers flexibility respect synchronization multiple branches allows define treatment task executed single branches executed 
incapable predicting branches selected performing partial synchronization selected branches executed 
analyzed modelling languages eon supports lowest number control flow patterns 
specification method structured representation guidelines 
create model ontology schema graph widget loaded protege environment 
visualizes model basic patient diagnosis scenario 
main modelling entities process modelling action step branch step decision step patient state step synchronization step 
action step block specify set tasks performed constraints set execution order 
allows including sub guidelines model 
decision steps conditional unconditional routing flow multiple steps 
branch synchronization steps modelling concurrent steps 
patient state step guideline step describing patient state specifying entry point guideline 
order allow behavior basic patient diagnosis scenario deviate possible explicitly modelled 
represents scenario register patient step done parallel step exactly complete process desired iteration condition register patient step added resembles loop patient data entered repeat register patient 
scenario decision taken order tests proceed treatment tests 
treatment ordering tests done consulting doctor 
tests ordered proceeding treatment 
shows complex model introduced deviations basic scenario 
specification needs model graphically possible paths execution scalable 
fig 

patient diagnosis scenario modelled protege similar eon allows multiple entry points model specified means patient state step 
allows execution start point patient enters scenario model skipping tasks predecessors 
offers variants synchronizing parallel branches synchronize tasks completed 
incapable synchronizing branches conditions unknown branches chosen 
explains number control flow patterns supported bigger eon smaller asbru 
formal knowledge representation language authoring publishing executing clinical guidelines 
deliberately supports minimal set modelling constructs actions compound plans decisions enquiries tasks task network 
addition keystone may denote generic task task network 
tasks share attributes describing goals control flow preconditions postconditions 
model basic patient diagnosis scenario created shown 
note control flow behavior captured modelling constructs combination scheduling constraints 
scheduling constraints visualized arrows connecting tasks meaning task tail arrow may enabled task head arrow completed 
deviate basic scenario scheduling constraints removed shown 
action enquiry plan decision keystone fig 

patient diagnosis scenario modelled contrast examined languages allows late modelling clear advance steps exactly performed steps modelled means substituted desired type task model deployed 
furthermore means triggers possible specify task performed task preconditions satisfied 
allows flexibility synchronization multiple paths able predict paths available ones selected merge completed 
furthermore scheduling constraints obligatory 
means stand tasks may activated fulfillment pre condition 
tasks depend imperatively specified flow activities 
highest degree pattern support analyzed languages supports patterns 
table shows terms cig modelling languages preferred terms 
terns remainder 
terms asbru eon process model plan guideline guideline plan task activity plan action action action enquiry parallel branching plan type branch branch action synchronization synchronization enquiry exclusive branching plan precondition decision decision decision plan type enquiry scheduling constraints table 
terms asbru eon medical community emphasized impossible workflow formalisms specific requirements flexibility 
examined guideline modelling languages didn find flexibility todays workflow bpm products 
analysis cig modelling languages showed languages similar bpm languages 
large variety process modelling languages nowadays sense develop complicated language support control flow patterns 
take completely new approach propose cigdec language encoding clinical guidelines 
declarative description clinical guidelines section cigdec declarative language show benefits applying modeling clinical guidelines 
modelers traditional cig modelling languages represent possible scenarios normal exceptional occur execution 
model include possible scenarios occur execution 
means cig modelers predict detail possible execution paths advance guideline modelling 
model tends complex strictly relationships steps guideline 
model prescribes users contains detailed specification 
traditional cig modelling languages imperative nature 
cigdec declarative language models specify leave user decide depending case 
cigdec models require possible scenarios predicted advance 
contrary model consists set tasks dependencies relationships tasks 
dependencies tasks seen general rules hold guideline 
task model performed user specified rules violated 
extreme example cigdec model consists set tasks dependencies represent completely free guideline user execute task desired order 
rules model possibilities deviate certain execution order user 
rules constrain model 
refer dependencies tasks rules constraints 
cig model consists set tasks relationships specifying exact order tasks 
typically traditional languages predefined set constructs define relations tasks sequence choice parallelism iteration 
constructs define exact controlflow order tasks guideline 
cigdec set constructs unlimited constructs added changed removed depending requirements application domain users refer constructs defining possible types dependencies tasks cigdec constraint templates 
template semantics formally represented linear temporal logic ltl formula 
semantics computerized enactment guideline 
ltl logic extended special temporal operators eventually time 
logic extensively field model checking target model verified properties specified ltl 
computerized enactment cigdec model algorithms translating ltl expressions automata developed model checking field 
ltl formulas complex hard understand template unique graphical representation users 
way ensure cigdec users ltl experts order models 
set templates open propose starting collection templates section 
cigdec templates looking traditional cig model usually tries find starting point follows control flow point reached 
applied cigdec models 
constructs lines necessarily describe order tasks various dependencies 
starting set constraint templates distinguish types templates existence unary templates binary templates represent relation negative relation 

shows examples templates 
existence templates unary templates involve task 
generally define cardinality possible number executions task 
top examples unary existence templates 
existence times template specifies upper upper lower bounds numbers executions task cardinality type 
example task announce death executed 
existence exactly times template specifies exact number executions task cardinality 
example task close file executed exactly process 
existence times template specifies times task task executed 
example task register data executed 
conditional template specifies task performed associated task condition fulfilled 
example shows ray performed pregnancy false 
binary templates involving tasks listed responded existence template specifies task performed task performed task 
example specifies surgery performed family informed operation 
response template considers order activities specifying task executed task completed 
example shows surgery report filled surgery 
note examples possible arbitrary execution tasks related tasks 
example execution sequence surgery inform family fill operation report fulfills constraints responded existence response 
choice template specifies tasks performed 
example shows prostate check possible 
obligatory perform performed performed anymore 
possible execute selected task multiple times 
inform family operation visit frequency determined antibiotics treatment cause determined ray announce death operation report filled point file closed exactly multiple prostate checks possible fig 

examples cigdec constraints 
data registered anti drugs concurrently blood analysis blood pressure performed order 
ray pregnant response template specifies task executed task completed 
example shows infection treated antibiotics multiple times visit frequency determined 
mutual exclusion template tasks prevents execute concurrently 
example depicts anti drugs simultaneously potassium 
precedence template 
shown precedence relation tasks ray cause cough cause cough determined ray 
existence template tasks specifies happens happens vice versa specifying order 
example blood pressure analysis blood patient performed concurrently order 
table appendix shows cigdec templates corresponding ltl formulas 
cigdec model diagnosis scenario depicts cigdec model patient diagnosis scenario 
consists tasks 
extreme case possible model consisting tasks constraints 
unrestricted model allowing maximum flexibility tasks executed arbitrary number times order 
model infinite number execution possibilities different process instances 
develop model provides guidance add constraints derived constraint templates 
fig 

cigdec model diagnosis scenario 
unary involving task constraint created template existence constraint cardinality task register patient 
constraint specifies task register patient executed process guideline enactment 
second constraints created template precedence shown tasks consult doctor blood test tasks consult doctor urine test 
precedence binary template defines dependency tasks 
precedence tasks means task executed task executed 
possible tasks executed want execute task blood test executed task consult doctor 
note tasks model executed consult doctor blood test 
task test urine precedence relation task consult doctor executed task consult doctor 
similarly tasks 
doctor may consulted multiple times doing tests 
third binary template response create constraints tasks blood test treatment tasks urine test treatment 
template response tasks defines execution task task executed possible tasks executed blood test treatment follow model executed 
holds tasks urine test treatment 
possibilities user execution model depicted defined combination constraints model 
looking models designed means analyzed language asbru execution start task register patient 
may cause problems cases emergency time registration requiring procedure doctor task consult doctor start immediately 
eon allow multiple entry points scenario entrance steps modelled explicitly 
task modelled scheduling constraints allows task executed moment 
note cig languages assume task executed model execution iteratively specified number times 
cigdec model patient registration step performed moment cigdec process 
furthermore cigdec model allows perform register patient multiple times case required data available time 
look traditional models figures mode eon task consult doctor executed exactly 
cigdec model allows task executed allows executed multiple times 
example patients medication periodically 
treatment task performed register patient executed 
hand complex cases task consult doctor performed various points cigdec execution 
necessary doctor order blood test times cigdec process 
constraint precedence task consult doctor sure blood test done patient seen doctor 
note holds blood test 
results unexpected doctor order different type blood test having see patient 
blood test task treatment performed 
possible treatment medication prescribed due test results 
possible wait perform blood tests order decision task treatment performed 
task urine test relationships task blood test precedence consult doctor response treatment variants execution paths hold task blood test 
note tasks blood test urine test execute executed times executed times 
table shows examples cases possible usages cigdec model 
case periodical medication prescribed chronic patient register patient treatment tasks executed 
case urgent vist starts directly consult doctor task register patient executed 
urine test necessary 
results blood test unclear treatment executed results second blood test available additional consult doctor task 
case situation urgent task register patient performed task consult doctor 
urine test blood test performed 
due alarming results urine test immediate treatment executed prescribe appropriate medication 
results blood test arrived additional treatment task executed handle blood test results 
case case case register patient consult doctor register patient treatment blood test consult doctor register patient urine test blood test treatment consult doctor blood test treatment treatment table 
examples possible cigdec model execution users guided follow constraints model 
point time constraint fulfilled temporarily violated permanently violated 
state constraints indicated worklist tool different colors green fulfilled orange temporarily violated red permanently violated 
example temporarily violated constraint response constraint blood test treatment moment task blood test executed task treatment executed temporarily violated fulfilled soon task treatment executed 
constraints model mandatory followed enactment system sure reach state permanently violated 
cigdec constraints optional 
optional constraints showed dashed lines warning system users permanently violate 
cigdec developed warning system optional constraints 
assume possible execute urine test previous consult doctor task allowed permanently violate constraint precedence tasks 
user violate constraint warned system 
case set constraint optional 
order generate informed warning optional constraint specify group policy belongs priority level context related message 
shows policies defined system level 
shows full warning user violate constraint 
discussion groups constraints violation warning fig 

specification optional constraints 
shown cigdec define degree flexibility user process execution 
indicated degree absolute flexibility reached leaving constraints resulting freedom user select task execute tasks desired order 
degree flexibility controlled context medical care order adhere strict desirable recommendations mandatory optional constraints specified modelled guideline 
control adherence specified constraints execution engine cigdec prohibits violation mandatory constraints allowing optional constraints neglected 
user steps result violation constraints communicated user means warnings 
advantages proposed cigdec approach analyzed modelling languages employ imperative approach follows cigdec enables flexibility selection meaning user executing model specified cigdec gets freedom choosing execution sequence requiring sequence thought advance explicitly modelled design time 
cigdec enables late binding meaning allows choose appropriate task point care 
feature particular important modelling cig possible predict steps need executed task selection case dependent 
cigdec ensures absence change meaning prohibits choices users violate mandatory constraints 
cigdec allows allows new ltl formulas introduced applicability cigdec tailored specific situation 
disadvantages cigdec follows process modelled strict allow flexibility cigdec may result complex model 
cigdec aims modelling small processes description large processes containing approximately thousands tasks difficult understand 
imperative declarative languages disadvantages order improve flexibility cig modelling languages recommend augment cig languages features offered cigdec 
related workflow patterns initiative taken empirical approach identifying common control constructs inherent modelling languages adopted workflow systems 
particular broad survey modelling languages resulted workflow patterns identified 
collection patterns originally limited control flow perspective data organizational application perspectives missing 
addition set control flow patterns complete patterns gathered non systematically obtained result empirical analysis modelling facilities offered selected workflow systems 
shortcoming addressed means systematic analysis data resource perspectives resulted extension collection controlflow patterns data patterns resource patterns 
issue incompleteness control flow patterns resolved means systematic analysis classical control flow patterns workflow pattern specification language 
furthermore revised current set control flow patterns extended new patterns 
revised set control flow patterns evaluate cis modelling languages 
workflow systems standards xpdl uml bpel xlang wsfl bpml wsci evaluated perspective control flow patterns summary available 
attempts enrich flexibility workflow process management systems 
case handling systems systems offer focusing case process instance individual tasks 
example system flower users move process opening re doing tasks just executing tasks 
users major influence execution flower actions seen going backwards forward traditional process model 
unwanted side effects 
example user wishes execute re earlier task execute re tasks followed 
flower deviations seen exception cigdec normal behavior process instance unfolds choices users 
flexibility process enactment tools greatly increased adaptivity 
adept example os adaptive system users change process model enactment 
adept powerful tool enables users insert move delete tasks form process instance currently working 
user process modelling expert order change model 
medical domain cases may differences adaptations frequent time consuming 
cigdec see deviations changes model designed cigdec model cover wide variety cases 
promising ways introduce flexibility replace imperative declarative 
various declarative languages describe dependency relationships tasks procedurally describing sequences action 
generally declarative languages propose modeling constraints drive model enactment 
constraints describe dependencies model elements 
constraints specified pre post conditions target task dependencies states tasks enabled active ready various model related concepts 
proposed declarative approach applied overcome problems experienced imperative languages modelling clinical guidelines 
particular shown means applying cigdec language flexibility selection achieved considered cig modelling languages offer 
furthermore showed model declared cigdec enacted 
addition discussed differences proposed declarative analyzed imperative languages advantages disadvantages proposition combine features imperative declarative approaches order increase applicability usability 
cigdec constraint templates template type ltl formula unary completed completed exactly unary completed completed completed unary completed absence unary completed responded existence binary completed completed response binary completed completed choice binary completed completed completed completed response binary completed completed mutual exclusion binary started started started completed canceled started started started completed canceled precedence binary completed completed completed table 
examples possible cigdec model 

www ifs tuwien ac asbru tools html 

van der aalst ter hofstede kiepuszewski barros 
workflow patterns home page 
www com 

van der aalst ter hofstede kiepuszewski barros 
workflow patterns 
distributed parallel databases 

van der aalst 
specifying discovering monitoring service flows making web services process aware 
bpm center report bpm bpm center org 
tm tue nl staff reports bpm pdf 

peleg tu zeng wang representation format sharable computer interpretable clinical guidelines 
biomedical informatics 

dourish holmes maclean 
mediating representation action workflow systems 
cscw proceedings acm conference computer supported cooperative pages new york ny usa 
acm press 

field 
guidelines clinical practice development 
institute medicine washington national academy press 

fox johns 
disseminating medical knowledge approach 
artificial intelligence medicine 

giannakopoulou havelund 
automata verification temporal properties running programs 
ase proceedings th ieee international conference automated software engineering page washington dc usa 
ieee computer society 

holzmann 
spin model checker primer manual 
addison wesley boston massachusetts usa 

clarke jr grumberg peled 
model checking 
mit press cambridge massachusetts london uk 

kiepuszewski 
expressiveness suitability languages control flow modelling workflows 
phd thesis queensland university technology brisbane australia 
available www com 


building workflow models flexible processes 
adc proceedings th australasian database conference pages australia australia 
australian computer society 
van der aalst ter hofstede russell 
critical analysis classical workflow control flow patterns 
technical report center report bpm org 

van der aalst institution center report bpm org year tm tue nl staff reports bpm pdf peleg title pattern analysis clinical computer interpretable guideline modelling languages 
technical report 

pallas athena 
flower user manual 
pallas athena bv netherlands 

peleg 
chapter guideline workflow models 
editor medical decision support computer approaches improving healthcare quality safety 
elsevier 

van der aalst 
declarative approach flexible business processes management 
business process management workshops pages 

van der aalst 
declarative approach flexible business processes management 
business process management workshops pages 

reichert dadam 
supporting dynamic changes workflow loosing control 
journal intelligent information systems 

van der aalst 
case handling case 
international journal cooperative information systems 

russell van der aalst ter hofstede edmond 
workflow resource patterns identification representation tool support 
pastor falcao cunha editors proceedings th conference advanced information systems engineering caise volume lecture notes computer science pages 
springer verlag berlin 

russell ter hofstede van der aalst 
workflow control flow patterns revised view draft version request comments bpm center report bpm org 

russell ter hofstede edmond van der aalst 
workflow data patterns 
qut technical report fit tr queensland university technology brisbane 


manual version 
technical report vienna university technology institute soft ware technology vienna 
report tr 

shahar johnson 
project task specific framework application critiquing time oriented clinical guidelines 
artif intell med 

tu 
eon guideline model 
technical report smi stanford edu projects eon doc 

tu musen 
flexible approach guideline modeling 
proc amia symp pages 

tu musen 
guideline modeling guideline execution defining guideline decision support services 
proc amia annu symp pages 

wainer de lima 
groupware design implementation volume chapter constraint flexible workflows pages 
springer berlin heidelberg 

wald murphy 
requirements development patient computing system 
proc 
amia symp pages 

