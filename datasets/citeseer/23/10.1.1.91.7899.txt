experimental analysis fast intersection algorithm sorted sequences ricardo baeza yates alejandro center web research department computer science university chile blanco santiago chile 

presents experimental comparison intersection algorithms sorted sequences including algorithm baeza yates 
algorithm performs average comparisons total number elements inputs respectively 
find applications algorithm query processing web search engines large intersections differences performed fast 
concentrate studying behavior algorithm practice experiments test data close actual conditions applications 
compare efficiency algorithm intersection algorithm study different optimizations showing algorithm efficient alternatives cases especially sequences larger 
study different algorithms compute intersection sorted sequences 
problem particular case generic problem called multiple searching see research problem page consists element data multiset drawn ordered universe search element element query multiset drawn universe 
elements form exactly intersection multisets 
sorted sequences intersection problem finds motivation web search engines inverted indices different word list positions documents appears 
generally lists ordered criterion position global precomputed ranking frequency occurrence document compute result query cases need intersect lists 
practice lists hundreds millions elements useful algorithm fast efficient average 
case sets multisets ordered multiple search solved merging sets 
optimal possible cases 
fact small say log better binary searches obtaining log algorithm complexity metric number comparisons pair elements 
baeza yates algorithm matches complexities depending value average performs comparisons sets ordered pessimistic assumptions 
focuses experimental study algorithm different optimizations 
experiments consisted measuring running time original algorithms optimizations sequences ordered random integer numbers comparing algorithm merging adaptive algorithm proposed demaine practice 
results show baeza yates algorithm slightly better adaptive better merge length sequences differ considerably 
section related 
section presents motivation problem practical issues 
section presents algorithms comparison including algorithm baeza yates proposed optimization 
section presents experimental results obtained 
logarithms base explicitly stated 
related order solve problem determining elements set elements equal require log comparisons worst case see 
lower bound apply multiple search problem equivalently set intersection problem 
conversely lower bounds search problem apply element uniqueness problem 
idea exploited demaine define adaptive multiple set intersection algorithm finds common elements searching unbounded domain 
define difficulty problem instance refined 
ordered case lower bounds set intersection lower bounds merging sets 
converse true set intersection need find actual position element union sets just element set 
lot minimum comparison merging worst case research done average case difference 
true multiple search set intersection 
algorithm baeza yates adapts input values 
best case algorithm performs log log comparisons log 
worst case number comparisons performed algorithm log log small algorithm log 
case ratio algorithm merging log asymptotically 
worst case worse merging having maximum times slower merging 
worst case algorithm matches complexity merging multiple binary search approaches adapting nicely size average case pessimistic assumptions number comparisons ln ln log ratio algorithm merging ln ln 
details algorithm section 
motivation query processing inverted indices inverted indices text retrieval systems 
logically vocabulary set unique words text list word occurrences typically document identifier list word positions document 
simple systems boolean model lists sorted document identifier ranking notion relevance document 
setting intersection algorithm applies directly compute boolean operations document identifiers union equivalent merging intersection operation study keep repeated elements subtraction implies deleting repeated elements similar intersection 
practice long lists stored sequentially blocks 
blocks large set operations performed block block basis 
complex systems ranking 
ranking typically word statistics number word occurrences document inverse number documents having 
values precomputed lists stored decreasing intra document word frequency order relevant documents 
lists processed decreasing inverse extra document word frequency order process shorter lists obtain relevant documents 
case document identifier mapping lists sorted order 
partially ordered identifier documents equal word frequency 
previous scheme initially web web grew ranking deteriorated word statistics represent content quality web page repeating adding invisible words 
page brin described search engine starting point google links rate quality page scheme called pagerank 
called global ranking popularity independent query posed 
scope explain pagerank models random web surfer ranking page probability web surfer visiting 
probability induces total order document identifier 
pure link search engine intersection algorithm 
nowadays hybrid ranking schemes combine link word evidence 
spite link mapping gives results approximates true ranking corrected computed 
important type query sentence search 
case word position know word follows precedes word 
usually sentences small find web pages process words find adjacent pairs third word 
compute particular intersection finding repeated elements try find correlative elements intersection algorithm word positions sorted 
true proximity search 
case range possible valid positions different ranking weight depending proximity 
context web adaptive algorithm practice faster uniform distribution assumption pessimistic 
web distribution word occurrences quite biased 
true query frequencies 
distributions follow power law generalized zipf distribution 
correlation distributions high low 
implies average length lists involved query biased 
means average lengths lists sampled satisfy uniform power law 
cases algorithm improvement 
algorithms suppose sorted 
case obviously small faster search element binary search 
sorted set intersection solved merging 
worst average case straight merging requires comparisons 
better set intersection 
describe different algorithms compared 
include merging algorithm known 
adaptive algorithm works follows take sets choose element call elim 
search elim set making exponential jumps looking positions 
overshoot element position larger elim binary search elim positions find add result 
efficient words shorter lists get largest list intersection non empty 
classical result bentley yao searching element un bounded set log 
remember position elim position know position backwards processed set 
chose elim smallest element set greater elim exchange roles making jumps position signals processed part set 
finish element greater searching 
baeza yates baeza yates algorithm double binary search improving average pessimistic assumptions 
algorithm introduced seen balanced version hwang lin algorithm adapted problem 
algorithm works follows 
binary search median middle element add element result 
divided problem searching elements smaller median left position position element elements bigger median right position 
solve recursively parts left sides right sides algorithm 
case size subset considered larger subset exchange roles note set intersection symmetric sense 
subsets empty 
simple way improve algorithm apply original algorithm complete sets subset sets overlap really find elements part intersection 
start comparing smallest element largest largest smallest sets overlap intersection empty 
search smallest largest element find overlap just log time 
apply previous algorithm just subsets overlaps 
improves worst average case 
dual case valid finding overlap log small optimization mentioned effectiveness studied 
experimental results compared efficiency algorithm call intersect section intersection algorithm merging adaptation adaptive algorithm intersection sequences 
addition show results obtained optimizations algorithm 
sequences integer random numbers uniformly distributed range 
varied length lists step 
lengths intersected sequences sequences different lengths 
random instances case runs eliminate variations due operating system small resulting times 
programs implemented gcc compiler linux platform running intel xeon tm cpu ghz kb cache gb ram 
shows comparison intersect merge 
see intersect better merge increases time increases larger values intersect merge intersect merge intersect merge intersect merge intersect merge fig 

experimental results intersect merge different values shows comparison times intersect adaptive 
see times algorithms follow tendency intersect better adaptive 
shows results obtained intersect algorithm optimization described section 
comparison added computation overlap sequences merge 
see big difference original optimized algorithm original algorithm bit faster optimized 
reason optimization result improvement uniform distribution test data 
random numbers uniformly distributed cases overlap sets covers big part optimization produce improvement results time overhead due overlap search 
intersect adaptive intersect adaptive intersect adaptive intersect adaptive intersect adaptive fig 

experimental results intersect adaptive different values intersect merge intersect merge intersect optimized intersect merge fig 

experimental results intersect optimized intersect merge different values 
hybrid algorithms see experimental results obtained section values merge better intersect 
natural idea combine algorithms hybrid algorithm runs convenient 
order know cutting point algorithm measured value time algorithms different values identified value merge faster intersect 
values form straight line function observe fig 

straight line approximated correlation 
hybrid algorithm works running merge running intersect 
condition evaluated step recursion 
modify algorithm cutting point changes 
find optimal hybrid algorithm 
idea straight line defines values merge better hybrid algorithm 
straight line approximated 
define algorithm hybrid runs merge runs intersect 
combined hybrids creating third version cutting line merge intersect average lines hybrids 
resulting straight line 
shows cutting line original algorithm merge results obtained hybrid algorithms 
optimal algorithm theory hybrid tends infinity looking fixed point algorithm 
observe hybrid algorithms registered lower times original algorithm section slower merge 
section original algorithm faster hybrids due fact practice evaluate cutting point step recursion 
hybrid algorithms see slightly faster second faster third 
idea reduce time section original algorithm faster hybrids create new hybrid algorithm runs merge convenient runs original algorithm evaluating relation order run merge 
algorithm shows times intersect section better merge combining advantages algorithms best way 
show results obtained new hybrid algorithm 
sequence lengths zipf distribution said applications algorithm search web documents number documents word appears follows zipf distribution 
value merge starts faster intersect intersect merge hybrid hybrid hybrid intersect merge hybrids intersect merge hybrid hybrid intersect merge hybrid hybrid intersect merge hybrid hybrid intersect merge hybrids intersect merge hybrid hybrid hybrid fig 

left value merge faster intersect 
right comparison original algorithm merge hybrids 
comparison intersect merge hybrids 
plot right zoom left 
interesting study behavior intersect algorithm depending ratio lengths sequences lengths follow zipf distribution correlation sets zero ideal case 
experiment took random numbers uniformly distributed 
numbers computed lengths sequences respectively typical value word occurrence distribution english making sure measurements different sequences repeating times run 
shows times obtained algorithms function normal scale logarithmic scale 
see times intersect lower times merge greater decrease ratio intersect merge hybrid intersect merge hybrid hybrid fig 

experimental results intersect merge hybrids different values 
clear anymore algorithms faster 
cases times merge better 
experimentally studied simple sorted set intersection algorithm performs quite average inspect elements involved 
experiments showed baeza yates algorithm faster merge sequences larger 
improvement evident increases 
addition baeza yates algorithm surpasses adaptive relation sizes sequences 
hybrid algorithm combines merge baeza yates algorithm information obtained takes advantage algorithms efficient 
practice need compute complete result intersection lists people look result pages 
computing complete result costly words occur millions times happens web search engines intersection query default 
lazy evaluation strategies results completed user request 
straight classical merging algorithm naturally obtains relevant web pages 
true adaptive algorithm 
baeza yates algorithm simple process left side recursive problem web pages obtained intersect merge intersect merge zipf intersect merge zipf log intersect merge intersect merge intersect merge zipf intersect merge intersect merge zipf log fig 

times intersect merge function ratio lengths sequences follow zipf distribution 
plot right zoom left 
times intersect merge logarithmic scale 
plot right zoom left 
necessarily appear correct order 
simple solution process smaller set left right doing binary search larger set 
variant efficient small achieving complexity log comparisons 
optimistic variant prediction number pages result intermediate adaptive scheme divides smaller sets non symmetric parts bias left side 
interesting study best way compute partial results efficiently 
correlation sets practice depending web text zipf distribution queries zipf distribution lower value example extend experimental results case 
saw extremes correlation algorithm study competitive 

baeza yates 
fast set intersection algorithm sorted sequences 
proceedings th annual symposium combinatorial pattern matching cpm springer lncs pp istanbul turkey july 

baeza yates 
efficient text 
phd thesis dept computer science university waterloo may 
research report cs 

ricardo baeza yates phillip bradford joseph culberson gregory rawlins 
complexity multiple searching unpublished manuscript 

baeza yates ribeiro neto modern information retrieval acm press addison wesley england pages 

baeza yates felipe jean 
level search engine index bases query log distribution 
spire springer lncs brazil october 

ricardo baeza yates 
query usage mining search engines 
web mining applications techniques anthony editor 
idea group 

ricardo baeza yates carlos marcelo georges 
modeling user search behavior la web ieee cs press october 

claire 
adaptive intersection threshold problems 
proceedings th annual acm siam symposium discrete algorithms pp 
san francisco ca january 

brin page 
anatomy large scale hypertextual web search engine 
th www conference brisbane australia april 

erik demaine alejandro pez ortiz ian munro 
adaptive set intersections unions differences 
proceedings th annual acm siam symposium discrete algorithms pages san francisco california january 

erik demaine alejandro pez ortiz ian munro 
experiments adaptive set intersections text retrieval systems 
proceedings rd workshop algorithm engineering experiments lncs springer washington dc january 

dietz paul mehlhorn kurt raman rajeev uhrig christian lower bounds set intersection queries proceedings th annual symposium discrete algorithms 

dobkin david lipton richard complexity computations varying sets primitives journal computer systems sciences 

hwang lin 
simple algorithm merging disjoint linearly ordered lists siam computing pp 


rawlins gregory compared analysis algorithms computer science press freeman 
