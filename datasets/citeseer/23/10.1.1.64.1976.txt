modular representation architectural aspects alessandro garcia christina chavez claudio anna rashid carlos lucena computing department lancaster university united kingdom garcia lancaster ac uk comp lancs ac uk computer science department federal university brazil flach dcc br computer science department federal university rio grande brazil br computer science department catholic university rio de janeiro brazil les inf puc rio br les inf puc rio br lucena inf puc rio br 
architectural aspect concern cuts architecture modularity units effectively modularized abstractions conventional architecture description languages adls 
dealing crosscutting concerns trivial task affect base architectural decomposition multiple heterogeneous ways 
lack adl support modularly representing aspectual heterogeneous influences leads number architectural breakdowns increased maintenance overhead reduced reuse capability architectural erosion lifetime system 
hand software architects burdened plethora new adl abstractions directly derived aspect oriented implementation techniques 
aspect oriented adls rely heavyweight approach mirrors programming languages concepts architectural level 
addition naturally support heterogeneous architectural aspects proper resolution aspect interactions 
presents simple seamless extension acme adl support modular representation architectural aspects multiple composition forms 
promotes natural blending aspects architectural abstractions employing special kind architectural connector called aspectual connector encapsulate aspect component connection details 
evaluated applicability scalability features context case studies different application domains 
keywords architecture description languages aspect oriented software development architectural connection 

aspect oriented software development aosd emerging promising technique promote enhanced modularization composition crosscutting concerns software lifecycle 
architectural level aspects provide new abstraction represent concerns naturally cut modularity units architectural description interfaces layers 
representation architectural aspects straightforward task usually require explicit representation mechanisms address heterogeneous manifestation widely scoped properties error handling strategies transaction policies security protocols 
heterogeneous manifestation widely scoped properties simply heterogeneous crosscutting mean properties impact multiple points software system behavior provided points different 
architectural crosscutting concerns may interact affected modules plethora different ways 
aspects may interact defined points architectural description 
imperative provide software architects effective means enabling modular representation aspectual compositions 
software architecture description languages adls playing central role early systematic reasoning system component compositions defining explicit connection abstractions interfaces connectors configurations 
aspect oriented architecture description languages ao adls proposed extensions existing adls developed scratch employing ao abstractions commonly adopted programming frameworks languages aspects join points pointcuts advice inter type declarations 
ao adls provide interesting contributions viewpoints field little consensus aosd adls integrated especially respect interplay aspects architectural connection abstractions 
addition existing proposals typically provide heavyweight solutions making difficult adoption exploitation available tools supporting adls 
importantly provided mechanisms support proper modularization heterogeneous architectural aspects compositions 
general purpose aspect oriented adl enhances acme adl order support improved composability heterogeneous architectural aspects 
composition model centered concept aspectual connector takes advantage traditional architectural connection abstractions connectors configuration extends lightweight fashion support definition composition facilities heterogeneous crosscutting interfaces connector level ii minimum set aspect interaction declarations attachment level iii quantification mechanism attachment descriptions 
proposal create new aspect abstraction strictly enriching composition semantics supported architectural connectors introducing elements elevate programming language concepts architecture level 
discusses applicability scalability proposed adl enhancements context case studies different domains traceability models detailed aspect oriented design models 
remainder organized follows 
section introduces case study illustrates problems associated lack explicit support heterogeneous architectural aspects interactions 
section presents 
section describes evaluation approach 
section compares proposal related 
section presents concluding remarks directions 

health watcher case study section basic concepts acme adl section discuss architecture design case study going running example section emphasis heterogeneous crosscutting nature architectural concerns section interactions section 
acme nutshell acme general purpose adl proposed architectural interchange language 
architectural structure described acme components connectors systems attachments ports roles representations 
components potentially composite computational encapsulations support multiple interfaces known ports 
ports bound ports components class intermediaries called connectors support called roles attach directly ports 
systems abstractions represent configurations components connectors 
system includes set components set connectors set attachments describe topology system 
attachments define set port role associations 
representations alternative decompositions element component connector port role describe greater detail 
properties interest name type value triples attached acme elements annotations 
properties mechanism annotating designs design elements detailed generally non structural information 
architectural styles define sets types components connectors properties sets rules specify elements types may legally composed reusable architectural domain 
acme type system provides additional dimension flexibility allowing type extensions extended construct 
acme concepts illustrated 
health watcher architecture hw system web information system developed software productivity research group federal university 
supports registration complaints health public system 
illustrates partial simplified acme textual graphical representation hw architectural description combines client server style layered style 
composed main architectural concerns gui graphical user interface component provides web interface system ii distribution component system services server side support distribution clients iii business component defines business elements rules iv data components address persistency concern storing information manipulated system component charge supporting forward error recovery exception handling 
illustrates set provided required ports connectors explicit interactions architectural components 
required port gui component example linked provided port distribution component means connector 
despite interactions architectural components appropriately represented port connector abstractions possible common adl abstractions represent crosscutting relationships component services 
consider example provided port transaction manager component 
affects execution provided port business component delimiting occurrence business transaction operations rollback transaction execution operation invoked port 
existing abstraction current adls explicitly captures crosscutting semantic architectural component services 
lack support represent kinds crosscutting interactions components alternatively models defining required port 
description explicit existence crosscutting relationships components 
heterogeneous architectural crosscutting exception handling considered widely scoped influencing concern hw architectural specification realized error handling component 
component consists system exception handlers provides services charge determining runtime proper handler exceptions exposed system components distribution persistence 
fact shows error handling component crosscutting impact hw architecture affects interfaces components layered decomposition 
architectural interfaces need expose erroneous conditions turn need handled error handling strategy 
gives examples exceptional interfaces component ports 
broadly scoped effect component denotes crosscutting nature modular architecture structure hw system 
transaction manager gui distribution backward recovery business persistence data termination handler search termination save info save info error handling attachments distribution target handler business termination target termination handler termination target termination handler business target action 
error handling hw architecture heterogeneous crosscutting concern influence crosscutting concern exactly affected hw component crosscuts set interfaces heterogeneous ways depending way exception handled target component 
hw system forms interaction faulty component error handling component termination protocol termination connector retry protocol connector 
heterogeneous crosscutting composition affected architectural modules expressed modular way 
instance connector termination needs replicated number affected interfaces separated connectors expressing collaboration protocols need created 
simplification contains examples connectors situation worse complete description hw architecture interfaces expose exceptions 
attachment section contains number replicated similar attachments created sake combining replicated error handling connectors 
provided interface needs connected provided interfaces containing exceptional events allowed conventional adls 
aspect interaction addition architectural breakdowns conventional adls define interactions crosscutting concerns 
example architectural aspect crosscuts elements business layer order determine interfaces execute transactional operations 
affected interfaces connected error handling connectors section 
illustrates situation interface 
problem impossible express important architectural information valid architectural configurations involving interaction aspects 
example attachments section allows architect identify aspects architectural elements possible declare aspect precedence affecting interfaces backward forward recovery strategies 

section presents description 
acme extension support modeling crosscutting interactions section definition quantification mechanism section 
section ends discussion support modeling heterogeneous architectural aspects section aspect interaction section 
aspectual connector software architecture descriptions rely connector express interactions components equivalent abstraction express crosscutting interactions 
define aspectual component component represents crosscutting concern crosscutting interaction 
traditional connector model crosscutting interaction way aspectual component composes regular component slightly different composition regular components 
crosscutting concern represented provided services aspectual component affect provided required services components turn regarded structural join points architectural level 
discussed sections adl valid configurations connect provided required services impossible represent connection provided service aspectual component provided service extensions traditional notion architectural connections 
acme support syntactic distinction provided required ports distinction expressed properties declaring port types 
order express crosscutting interaction define aspectual connector ac architectural connection element connector element new kind interface 
purpose new interface twofold distinction elements playing different roles crosscutting interaction affected base components aspectual components capture way categories components interconnected 
ac interface contains base roles ii crosscutting roles iii glue clause 
depicts high level description traditional connector fig 
aspectual connector fig 

connector role role glue regular connector acme aspectual connector 
regular aspectual connectors base role may connected port component provided required crosscutting role may connected port aspectual component 
distinction base crosscutting roles addresses constraint typically imposed adls valid configurations provided required ports 
aspectual connector base role crosscutting role 
composition components aspectual components expressed glue clause 
aspectual glue specifies way aspectual component affects regular components 
types aspectual glue 
semantics similar advice composition aspectj 
glue 
heterogeneous aspectual connector 
glue clause simply declaration glue type block multiple declarations relates crosscutting role base role specific glue type 
description heterogeneous aspectual interactions section requires elaborated glue clauses 
idea aspectual connector derived traditional connector modeled subtype traditional connector aspectual connector connection provided ports 
result invalid configuration ill formed connection traditional connector subtypes 
contains graphical notation propose represent aspectual connectors 
aspectual connector defines crosscutting heterogeneous interaction involving aspectual component component component 
aspectual aspectual component component key key quantification mechanism cr br component cr br component provided port required port crosscutting role base role 
graphical notation aspectual connector base role aspectual connector may bound ports possibly different components 
ports represent structural join points may affected aspectual components 
express bindings attachments defined binds base role instance different component port 
propose extension attachments part acme configuration allow patterns 
wildcards attachments concisely describe sets ports attached base role 
system example component port glue attachments prefix 
acme description composition attachment prefix specifies binding ports set component ports port name begins prefix 
avoiding explicit enumeration ports definition multiple attachments extension promotes economy expression improves architectural configurations 
heterogeneous architectural aspects simple aspectual connector homogeneous crosscutting impact architectural decomposition 
shows supports heterogeneous crosscutting 
multiple base crosscutting roles define different ways crosscutting concern affect component interfaces 
different similar glue types definition pairs base crosscutting roles 
example heterogeneous aspectual connector error handling concern discussed section 
note ways interacting component termination modularized single architectural element 
addition quantification mechanisms attachments specification describe single statements component ports affected crosscutting roles specified connector 
termination glue termination example heterogeneous aspectual connector attachments service termination distribution continued specification join points quantification mechanisms 
supporting heterogeneous crosscutting presents graphical notation hw example defined heterogeneous aspectual connector 
yellow vertical rectangle indicates heterogeneous aspectual connector 
transaction manager gui distribution backward backward recovery recovery business persistence data termination 
example aspectual connector forward recovery error handling aspect interaction allows specification aspectual architecture level interaction aspectual connectors join points common 
interactions declared configuration description attachments part place join points identified 
adl supports basic kinds composition operators precedence xor 
architect specify precedence valid architecture specific join points 
illustrates situations general connector precedence termination connector join points common ii port tried forward recovery termination error handling second backward recovery abort case exception successfully handled 
precedence relation connectors execution depends satisfaction condition associated architect explicitly document condition statement glue illustrates xor join point forward recovery termination non deterministically chosen 
important highlight elements participating precedence xor clause components connectors means relationship applies connectors involving components see section 
target glue target target target example aspectual connector attachments continued business target distribution precedence termination termination xor resumption termination specification aspectual interactions 
supporting aspect interaction declarations 
evaluation section presents evaluation case studies respect usefulness proposed composition enhancements 
evaluated applicability scalability notion aspectual connectors section extensions provided sections context case studies system section context sensitive tourist information guide tig system multi agent system framework 
indicated table tig architecture encompassed manifestation heterogeneous architectural aspects replication security performance 
architecture included main heterogeneous architectural aspects autonomy adaptation learning code mobility interaction 
choice case studies driven heterogeneity aspects different ways affect dominant architectural decomposition 
approach scaled case studies mainly fact follows symmetric approach explicit distinction regular components aspectual components 
modularization crosscutting interaction connectors facilitated example reuse persistence component description second case study 
persistence crosscutting concern architecture 
applied aspectual connector tig architectural specification 
definition quantification mechanisms section attachments shown right decision choice improves reusability connectors 
reason easier determine multiple interacting aspects affect looking single place architectural description attachments specification 
case study heterogeneous aspect interactions aspects total examples health watcher error handling transaction management distribution tig replication performance precedence error handling transaction manag 
xor resumption forward recovery termination precedence security performance security xor replication passive replication active autonomy adaptation precedence interaction autonomy adaptation learning code mobility precedence autonomy execution interaction autonomy xor mobility collaboration table 
examples heterogeneous architectural aspects interactions table presents summary case studies capture certain heterogeneous architectural aspects 
describes aspectual interactions explicitly captured studies followed examples precedence xor interactions 
evaluation noticed crosscutting roles heterogeneous aspectual connector naturally linked join point component port 
proposed aspect interaction mechanisms section define relationships 
example table shows xor relationship hw architecture involving crosscutting roles connector 
interesting possibilities explored case studies declaring connectors error handling aspect precedence connectors transaction management hw system 
observed explicit definition aspectual relationships architectural stage enhances documentation design choices need observed design applications variation points certain product line design 

related diversity viewpoints aspects generally concerns modeled adls 
far ao concepts adls experimental researchers trying incorporate mainstream aop concepts adls 
contrast argue existing adls abstractions model crosscutting concerns 
purpose just necessary define new configuration element traditional connector concept 
ao adls different introduce lot concepts model ao abstractions aspects joinpoints advices adl 
proposal introduce aspect modeling architecture design phase 
aspects facilitate architecture evolution allowing easily modularize crosscutting concerns incorporate new requirements system architecture 
composition architectural components aspects exogenous control driven ordination model 
incorporation authors model existing adls acme investigation 
propose ao adl define set requirements current adls need address allow management crosscutting concerns architectural connection abstractions 
requirements definition primitives specify joinpoints functional components ii definition aspect abstraction special kind component iii specification connectors joinpoints aspects 
authors suggest existing coordination models specify connectors functional components aspects 
differently lightweight approach suggest definition ao specific adl constructs 
furthermore mention proposal need supporting important ao properties quantification interaction aspects heterogeneous aspects 
adl defines components aspects order elements 
aspects affect components interfaces means evaluated interface defines messages aspects able intercept ii target events interface responsible describing events aspects capture 
composition components aspects supported set aspect evaluation rules 
define aspect behavior executed 
include number rules concerning interaction aspects 
regards precedence aspects evaluated ways sequentially concurrently 
addition aspects share information list input output global properties 
adl provide mechanisms support quantification attachment level explicit modularization heterogeneous architectural aspects 
similarly proposal defines unified approach aspects components introduce specialized aspect construct 
provides concept gate interface exposes internal implementation functionality component offers access point interactions components 
similar way proposal concentrates composition model special type connector extends regular connectors including constructs specify behaviour gate crosscuts behaviour gate 
differently compositional model works conjunction component traditional interface defines gate interface exposes internal implementation details component 
provides explicit support defining interaction aspects heterogeneous aspects 
allows quantification gate methods 
addition notion configuration 
includes definition connection inside connector 
contrasts traditional way adls works declares connector binds connectors instances configuration section 
defines fractal aspect component fac general model mixing components aspects 
aim promote integration aspectoriented programming aop component software engineering cbse paradigms 
fac model proposes new abstractions aspect components modularize crosscutting concern implementing service regular component piece advice ii aspect bindings define bindings regular aspectual components iii aspect domains represents reification regular components affected aspect components 
fac model implemented fractal extensible modular component model respective adl 
similarities aspect component fac model aspectual connector 
specify crosscutting concerns existing system architecture 
aspect bindings fac define link regular aspect component 
modify extend behavior affecting exposed join points 
approach addressed definition base crosscutting roles allow specifying binding components ii glue clause define semantic crosscutting composition 

addressed current issues related aspect oriented architecture modeling design 
analysis heavyweight solutions provided ao adls yielded design general purpose aspect oriented adl supports improved composability heterogeneous architectural aspects 
composition model centered concept aspectual connector takes advantage traditional architectural connection abstractions connectors configuration provides lightweight support definition composition facilities heterogeneous crosscutting interfaces connector level ii minimum set aspect interaction declarations attachment level iii quantification mechanism attachment descriptions 
way encompasses reduced set minor extensions avoiding additional complexity architectural descriptions 
discussed applicability scalability proposed adl enhancements context case studies different domains 
approach scaled case studies mainly fact follows symmetric approach explicit distinction regular components aspectual components 
observed explicit aspect interaction declarations architectural stage enhances documentation design choices need observed design applications 
plan elaborate issues related expressiveness language traceability issues 
architectural descriptions mapped aspect oriented design languages support aspect oriented modeling detailed design level theme uml 
tools need developed support creation descriptions transformation design level descriptions 
tools available designers may fully exploit benefits aspect oriented adl explicitly design aspectual connectors 
acknowledgments partially supported cnpq brazil christina 
alessandro supported european commission part ist european network excellence aspect oriented software development aosd europe 
partially supported cnpq brazil cl 
authors supported project 

chavez garcia anna rashid reflections architectural connection issues aspects adls 
workshop early aspects icse pages may shanghai china 

stefani 
open component model support java 
proc 
intl symposium component software engineering edinburgh scotland may 

anna figueiredo garcia lucena composing design patterns scalability study aspect oriented programming 
proc 
th intl 
conference aspect oriented software development aosd bonn germany march 

chavez model driven approach aspect oriented design 
phd thesis cia universidade cat lica rio de janeiro april 

chavez garcia anna lucena taming heterogeneous aspects crosscutting interfaces 
journal brazilian computer society vol june 

survey analysis design approaches 
aosd europe report may 

clarke walker generic aspect oriented design theme uml 
pages 

filman clarke mehmet aksit editors 
aspect oriented software development 
addison wesley boston 

garcia rashid anna driving managing architectural decisions aspects 
proc 
shark workshop turin june 

garcia lucena multi agent systems architecture implementation 
software engineering multi agent systems iii springer verlag lncs december pp 


garcia lucena taming heterogeneous agent architectures aspects 
communications acm march 
accepted 
garcia lucena cowan agents object oriented software engineering 
software practice experience elsevier volume issue april pp 


garcia anna figueiredo lucena design patterns aspects quantitative study 
transactions aspect oriented software development springer lncs pp 
vol 
february 

garlan acme architecture description interchange language proc 
cascon nov 

garcia chavez integrated aspect oriented modeling approach software architecture design 
th workshop aspect oriented modelling aosd bonn germany 

medvidovic taylor classification comparison framework software architecture description languages 
ieee trans 
soft 
eng jan 

mehta medvidovic taxonomy software connectors 
proc 
nd intl conf 
software engineering icse limerick ireland pp 


aspect oriented software architecture structural perspective 
workshop early aspects aosd april 

rez aspect modelling architecture design 
pp 
lncs pisa italy 

rez prisma quality aspect oriented dynamic software architectures 
proc 
rd ieee intl conf 
quality software dallas texas usa november 

model developing component aspect oriented systems 
th international symposium software composition sc vienna austria march 

pinto dynamic component aspect platform computer journal 

architectural aspects architectural aspects 
proc 
european workshop software architecture pisa italy june lncs 

rashid persistence aspect 
proc 
nd intl 
conf 
aspect oriented software development aosd usa march 

rashid garcia moreira aspect oriented software development programming 
proc 
icse tutorial notes may shanghai china 

de 
architectural description language unifying aspects components 
software engineering properties languages aspect technologies workshop aosd 

spg software productivity group 
cin br bin view spg 

soares 
implementing distribution persistence aspects aspectj 
proc 
oopsla seattle wa usa november 
acm press 

aspectj team 
aspectj programming guide 
eclipse org aspectj 
quantifying effects aspect oriented programming maintenance study 
proc 
intl conf 
software maintenance icsm philadelphia usa september 

alves garcia lucena improving extensibility object oriented frameworks aspect oriented programming 
proc 
th intl conf 
software reuse turin italy june 
