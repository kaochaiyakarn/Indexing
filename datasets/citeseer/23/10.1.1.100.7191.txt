evolution grid david de roure mark baker nicholas jennings nigel shadbolt university southampton uk university uk correspondence david de roure department electronics computer science university southampton southampton bj uk tel email ecs soton ac uk describe evolution grid systems identifying generations generation systems grid recognise today second generation systems focus middleware support large scale data computation third generation systems emphasis shifts distributed global collaboration service oriented approach information layer issues 
particular discuss relationship grid world wide web suggest evolving web technologies provide basis generation grid 
aspect define semantic grid explored companion 

decade seen substantial change way perceive computing resources services 
decade ago normal expect ones computing needs serviced localised computing platforms infrastructures 
situation changed change caused factors take commodity computer network components result faster capable hardware increasingly sophisticated software 
consequence changes capability effective efficient utilization widely distributed resources fulfil range application needs 
soon computers interconnected communicating distributed system issues designing building deploying distributed computer systems explored years 
increasing number research groups working field wide area distributed computing 
groups implemented middleware libraries tools allow cooperative geographically distributed resources unified act single powerful platform execution range parallel distributed applications 
approach computing known names metacomputing scalable computing global computing internet computing lately grid computing 
shift emphasis 
foster grid problem defined flexible secure coordinated resource sharing dynamic collections individuals institutions resources :10.1.1.129.8850
view emphasizes importance information aspects essential resource discovery interoperability 
current grid projects take information knowledge 
aspects grid related evolution web technologies standards xml support machine machine communication resource description framework rdf represent interchangeable metadata 
sections identify stages grid evolution generation systems grid computing recognise today second generation systems focus middleware support large scale data computation current third generation systems emphasis shifts distributed global collaboration service oriented approach information layer issues 
course evolution continuous process distinctions clear cut characterising evolution helps identify issues suggests beginnings grid roadmap 
section draw parallels evolution world wide web introduce notion semantic grid semantic web technologies provide infrastructure grid applications 
research agenda evolution discussed companion :10.1.1.63.9093

evolution grid generation early grid efforts started projects link supercomputing sites time approach known metacomputing 
origin term believed casa project gigabit testbeds 
larry ncsa director generally accredited term catlett 
early mid mark emergence early metacomputing grid environments 
typically objective early metacomputing projects provide computational resources range high performance applications 
representative projects type technology way foster 
projects differ ways overcome number similar hurdles including communications resource management manipulation remote data able efficiently effectively 
projects attempted provide metacomputing resources opposite ends computing spectrum 
capable running workstation mbytes memory way means unifying resources large supercomputing centres 
rsa public key encryption algorithm invented rivest mit laboratory computer science rivest widely example secure sockets layer ssl 
security rsa premise difficult factor extremely large numbers particular hundreds digits 
keep state art factoring rsa data security initiated rsa factoring challenge march 
factoring challenge provides test bed factoring implementations provides largest collections factoring results different experts worldwide 
factoring computationally expensive 
reason parallel factoring algorithms developed factoring distributed 
algorithms trivially parallel require communications initial setup 
setup possible contributors provide small part larger factoring effort 
early efforts relied electronic mail distribute receive factoring code information 
consortium led bellcore labs syracuse university operating systems started project factoring web known factoring network enabled recursion 
set factor rsa new numerical technique called number field sieve nfs factoring method computational web servers 
consortium produced web interface nfs 
contributor web form invoke server side cgi common gateway interface scripts written perl 
contributors set web pages access wide range support services sieving step factorisation nfs software distribution project documentation anonymous user registration dissemination sieving tasks collection relations relation archival services real time sieving status reports 
cgi scripts produced supported cluster management directing individual sieving workstations appropriate day night sleep cycles minimize impact owners 
contributors loaded built sieving software daemon 
web client protocol get values post resulting results back cgi script web server 
factors combined approach successful nfs implementation allowed workstations mbytes memory perform useful small bounds small sieve 
supported anonymous registration users contribute hardware resources sieving effort revealing identity local server administrator 
consortium sites recruited run cgi script package locally forming hierarchical network rsa web servers reduced potential administration bottleneck allowed sieving proceed clock minimal human intervention 
project won award challenge supercomputing sc san diego 
paved way wave web metacomputing projects 
way information wide area year way experimental high performance network linking high performance computers advanced visualization environments 
way project conceived early idea build network integrate existing high bandwidth networks 
virtual environments datasets computers resided seventeen different sites connected networks varying bandwidths protocols different routing switching technologies 
network atm technology time emerging standard 
network provided wide area backbone various experimental activities sc supporting tcp ip atm direct atm oriented protocols 
help standardize way software interface management key sites installed point presence pop servers act gateways way 
pop servers unix workstations configured uniformly possessing standard software environment called soft 
soft attempted overcome issues concerning heterogeneity scalability performance security 
site participating way ran pop server 
pop server mechanisms allowed uniform way authentication resource reservation process creation communication functions 
pop server accessible internet operated site firewall 
atm interface allowed monitoring potential management site atm switch 
way project developed resource scheduler known computational resource broker crb 
crb consisted user crb crb local scheduler protocols 
actual crb implementation structured terms single central scheduler multiple local scheduler daemons pop server 
central scheduler maintained queues jobs tables representing state local machines allocating jobs machine maintaining state information afs file system distributed filesystem enables cooperating hosts share resources local area wide area networks andrew file system originally developed carnegie mellon university 
pop security handled telnet client modified kerberos authentication encryption 
addition crb acted authentication proxy performing subsequent authentication way resources user behalf 
regards filesystems way afs provide shared repository software scheduler information 
afs cell set accessible pops 
move data machines afs unavailable version remote copy adapted way 
support user level tools low level communications library nexus foster adapted execute way environment 
nexus supported automatic configuration mechanisms enabled choose appropriate configuration depending technology example communications tcp ip aal atm adaptation layer framed traffic internet atm 
mpich library portable implementation mpi message passing standard networking cave virtual reality system extended nexus 
way project application driven defined types applications supercomputing access remote resources virtual reality video web gii windows 
way project successfully demonstrated sc san diego 
pop servers shown simplify configuration usage management type wide area computational testbed 
soft success terms applications ran time 
importantly experiences software developed part way project fed globus project discuss section 
summary early experiences way attempted produce metacomputing environments integrating resources opposite ends computing spectrum 
ubiquitous system worked platform web server 
typically clients low computers way unified resources multiple supercomputing centres 
projects differed types applications utilise environments 
tailored particular factoring application trivially parallel dependent fast interconnect 
way hand designed cope range diverse high performance applications typically needed fast interconnect powerful resources 
projects way lacked scalability 
example dependent lot human intervention distribute collect sieving results way limited design components pop soft 
lacked number features considered obvious 
example client compile link run daemon order contribute factoring exercise 
really means task farming large number fine grain computations 
individual computational tasks unable communicate parent web server 
likewise way embodied number features today inappropriate 
installation pop platform easier set way services uniform manner meant site needed specially set participate way 
addition pop platform server created single points failure design way 
reported problem failure pop mean site drop way environment 
notwithstanding aforementioned features way highly innovative successful 
project metacomputing helped pave way succeeding second generation grid projects 
likes seti home seti distributed net net way globus foster legion grimshaw 

evolution grid second generation emphasis early efforts grid computing part driven need link number national supercomputing centres 
way project see section successfully achieved goal 
today grid infrastructure capable binding just specialised supercomputing centres 
number key enablers helped grid ubiquitous including take high bandwidth network technologies adoption standards allowing grid viewed viable distributed infrastructure global scale support diverse applications requiring large scale computation data 
vision grid foster regard second generation typified today grid applications 
main issues confronted heterogeneity grid involves multiplicity resources heterogeneous nature span numerous administrative domains potentially global 
cluster manager knows truly homogeneous cluster 
scalability grid grow resources millions 
raises problem potential performance degradation size grid increases 
consequently applications require large number geographically located resources designed latency tolerant exploit locality accessed resources 
furthermore increasing scale involves crossing increasing number organisational boundaries emphasises heterogeneity need address authentication trust issues 
larger scale applications may result composition applications increases intellectual complexity systems 
adaptability grid resource failure rule exception 
fact resources grid probability resource failing naturally high 
resource managers applications tailor behaviour dynamically extract maximum performance available resources services 
middleware generally considered layer software operating system applications providing variety services required application function correctly 
middleware re emerged means integrating software applications running distributed heterogeneous environments 
grid middleware hide heterogeneous nature provide users applications homogeneous seamless environment providing set standardised interfaces variety services 
setting standards key tackling heterogeneity 
systems varying standards system apis resulting need port services applications plethora computer systems grid environment 
general principle agreed interchange formats help reduce complexity converters needed enable components interoperate standard opposed converters interoperate 
section consider second generation requirements followed representatives key second generation grid technologies core technologies distributed object systems resource brokers schedulers complete integrated systems peer peer systems 
requirements data computation infrastructure data infrastructure consist manner networked resources ranging computers mass storage devices databases special scientific instruments 
additionally computational resources supercomputers clusters 
traditionally huge scale data computation characterises grid applications 
main design features required data computational fabric grid administrative hierarchy administrative hierarchy way grid environment divides cope potentially global extent 
administrative hierarchy example determines administrative information flows grid 
communication services communication needs applications grid environment diverse ranging reliable point point unreliable multicast 
communications infrastructure needs support protocols transport streaming data group communications distributed objects 
network services provide grid important qos parameters latency bandwidth reliability fault tolerance jitter control 
information services grid dynamic environment location type services available constantly changing 
major goal resources accessible process system regard relative location resource user 
necessary provide mechanisms enable rich environment information grid reliably easily obtained services requesting information 
grid information registration directory services provide mechanisms registering obtaining information structure resources services status nature environment 
naming services grid distributed system names refer wide variety objects computers services data 
naming service provides uniform name space complete distributed environment 
typical naming services provided international naming scheme dns internet scheme 
distributed file systems caching distributed applications require access files distributed servers 
distributed file system key component distributed system 
applications point view important distributed file system provide uniform global namespace support range file protocols require little program modification provide means enable performance optimisations implemented usage caches 
security authorisation distributed system involves aspects security confidentiality integrity authentication accountability 
security grid environment complex issue requiring diverse resources autonomously administered interact manner impact usability resources introduce security holes lapses individual systems environments 
security infrastructure key success failure grid environment 
system status fault tolerance provide reliable robust environment important means monitoring resources applications provided 
accomplish tools monitor resources applications need deployed 
resource management scheduling management processor time memory network storage components grid clearly important 
aim efficient effective scheduling applications need utilise available resources distributed environment 
user point view resource management scheduling transparent interaction confined application submission 
important grid resource management scheduling service interact may installed locally 
user administrative gui interfaces services resources available intuitive easy heterogeneous nature 
typically user administrative access grid applications services web interfaces 
second generation core technologies growing numbers grid related projects dealing areas infrastructure key services collaborations specific applications domain portals 
identify significant date 
globus globus foster provides software infrastructure enables applications handle distributed heterogeneous computing resources single virtual machine 
globus project multi institutional research effort seeks enable construction computational grids 
computational grid context hardware software infrastructure provides dependable consistent pervasive access high computational capabilities despite geographical distribution resources users 
central element globus system globus toolkit defines basic services capabilities required construct computational grid 
toolkit consists set components implement basic services security resource location resource management communications 
necessary computational grids support wide variety applications programming paradigms 
consequently providing uniform programming model object oriented model globus toolkit provides bag services developers specific tools applications meet particular needs 
methodology possible services distinct defined interfaces apis incorporated applications tools incremental fashion 
globus constructed layered architecture high level global services built essential low level core local services 
globus toolkit modular application exploit globus features resource management information infrastructure globus communication libraries 
globus toolkit currently consists precise set depends globus version globus toolkit resource allocation manager gram protocol allocation computational resources monitoring control computation resources 
extended version file transfer protocol gridftp data access extensions include connectivity layer security protocols partial file access management parallelism high speed transfers 
authentication related security services gsi grid security infrastructure distributed access structure state information lightweight directory access protocol ldap 
service define standard resource information protocol associated information model 
remote access data sequential parallel interfaces gass global access secondary storage including interface gridftp 
construction caching location executables gem globus executable management 
resource reservation allocation gara globus advanced reservation allocation 
globus evolved original generation incarnation way version gt version gt 
protocols services globus provided changed evolved 
emphasis globus moved away supporting just high performance applications pervasive services support virtual organisations 
evolution globus continuing open grid service architecture ogsa foster grid architecture web services globus see section details :10.1.1.114.2815:10.1.1.114.2815
legion legion grimshaw object developed university virginia 
legion provided software infrastructure system heterogeneous geographically distributed high performance machines interact seamlessly 
legion attempted provide users workstations single integrated infrastructure regardless scale physical location language underlying operating system 
legion differed globus approach providing grid environment encapsulated components objects 
methodology normal advantages object oriented approach data abstraction encapsulation inheritance polymorphism 
legion defined apis set core objects support basic services needed 
legion system set core object types classes metaclasses classes considered managers policy makers 
metaclasses classes classes 
host objects host objects abstractions processing resources may represent single processor multiple hosts processors 
vault objects vault objects represent persistent storage purpose maintaining state object persistent representation 
implementation objects caches implementation objects hide details storage object implementations thought equivalent executable unix 
binding agents binding agent maps object ids physical addressees 
context objects context spaces context objects map context names legion object ids allowing users name objects arbitrary length string names 
legion released november 
components legion continued evolve 
august applied metacomputing established exploit legion commercially 
june applied metacomputing avaki avaki 
distributed object systems common object request broker architecture corba open distributed infrastructure standardised object management group omg omg 
corba automates common network programming tasks object registration location activation request de multiplexing framing error handling parameter marshalling de marshalling operation dispatching 
corba provides rich set services contain grid level allocation scheduling services globus see section possible integrate corba grid 
omg quick demonstrate role corba grid infrastructure software services grid workshop held 
apart providing wellestablished set technologies applied science corba candidate higher level conceptual model 
language neutral targeted provide benefits enterprise scale closely associated unified modelling language uml 
concerns corba reflected evidence intranet internet deployment indicating difficulty crossing organisational boundaries operation firewalls 
furthermore real time multimedia support part original design 
corba provides higher layer model standards deal heterogeneity java provides single implementation framework realising distributed object systems 
certain extent java virtual machine jvm java applications services overcoming problems associated heterogeneous systems providing portable programs distributed object model remote method invocation rmi 
legacy code needs integrated wrapped java code 
java drawbacks main computational speed 
problems associated java numerics concurrency addressed likes java grande forum grande application application scientific industrial requires large number computing resources internet solve problems 
java chosen see section 
lost computational speed gained terms software development maintenance times broader view engineering grid applications 
jini rmi jini jini designed provide software infrastructure form distributed computing environment offers network plug play 
collection jini enabled processes constitutes jini community collection clients services communicating jini protocols 
jini applications normally written java communicate java remote method invocation rmi mechanism 
jini written pure java jini clients services constrained pure java 
may include java wrappers non java code written language altogether 
enables jini community extend normal java framework link services clients variety sources 
fundamentally jini primarily concerned communications devices devices 
abstraction service interface defines service 
actual implementation service hardware software 
services jini community mutually aware size community generally considered workgroup 
community lookup service lus exported communities providing interaction isolated communities 
jini device software service connected network announce presence 
clients wish service locate call perform tasks 
jini built rmi introduces constraints 
furthermore jini distributed operating system operating system provides services file access processor scheduling user logins 
key concepts jini lookup search service download code needed access discovery spontaneously find community join leasing time bounded access service remote events service notifies service state change 
lookup notify services new service transactions ensure system distributed state stays consistent 
common component architecture forum common component architecture forum armstrong attempting define minimal set standard features high performance component framework need provide expect order able components developed different frameworks 
corba supports component programming distinguished component programming approaches emphasis supporting abstractions necessary high performance programming 
core technologies described previous section globus legion implement services component framework 
idea component frameworks deal complexity developing interdisciplinary high performance computing applications increasingly popular 
systems enable programmers accelerate project development introducing higherlevel abstractions allowing code reusability 
provide clearly defined component interfaces facilitate task team interaction standard promote interoperability components developed different teams different institutions 
potential benefits encouraged research groups number laboratories universities develop experiment prototype systems 
need interoperability standards avoid fragmentation 
grid resource brokers schedulers batch scheduling systems systems available primary focus batching resource scheduling 
noted packages listed started life systems managing jobs tasks locally distributed computing platforms 
fuller list available software baker jones 
condor condor software package executing batch jobs variety unix platforms particular idle 
major features condor automatic resource location job allocation check pointing migration processes 
features implemented modification underlying unix kernel 
necessary user link source code condor libraries 
condor monitors activity participating computing resources machines determined available placed resource pool 
machines allocated pool execution jobs 
pool dynamic entity workstations enter idle leave get busy 
portable batch system pbs pbs batch queuing workload management system originally developed nasa 
operates variety unix platforms clusters supercomputers 
pbs job scheduler allows sites establish scheduling policies running jobs time space 
pbs adaptable wide variety administrative policies provides extensible authentication security model 
pbs provides gui job submission tracking administrative purposes 
sun grid engine sge sge software developed known grm 
sge jobs wait holding area queues located servers provide services jobs 
user submits job sge declares requirements profile job 
queue ready new job sge determines suitable jobs queue dispatches job highest priority longest waiting time try start new jobs suitable loaded queue 
load sharing facility lsf commercial system platform computing platform 
lsf evolved utopia system developed university toronto zhou currently widely commercial job management system 
lsf comprises distributed load sharing batch queuing software manages monitors analyses resources workloads network heterogeneous computers fault tolerance capabilities 
storage resource broker storage resource broker srb rajasekar developed san diego supercomputer centre sdsc provide uniform access distributed storage range storage devices defined api 
srb supports file replication occur offline fly 
interaction srb gui 
srb servers federated 
srb managed administrator authority create user groups 
key feature srb supports metadata associated distributed file system location size creation date information 
supports notion application level domain dependent metadata specific content generalised data sets 
contrast traditional network file systems srb attractive grid applications deals large volumes data transcend individual storage devices deals metadata takes advantage file replication 
nimrod resource broker grace nimrod grid broker performs resource management scheduling parameter sweep task farming applications buyya abramson :10.1.1.42.8707:10.1.1.111.8497
consists components task farming engine scheduler dispatcher resource agents 
nimrod task farming engine allows user defined schedulers customised applications problem solving environments abramson plugged place default components 
dispatcher uses globus deploying nimrod agents remote resources order manage execution assigned jobs 
nimrod scheduler ability lease grid resources services depending capability cost availability 
scheduler supports resource discovery selection scheduling execution user jobs remote resources 
users set deadline time results needed nimrod broker tries find best resources available grid meet user deadline attempt minimize costs execution task 
nimrod supports user defined deadline budget constraints scheduling optimisations manages supply demand resources grid set resource trading services called grace grid architecture computational economy buyya :10.1.1.34.281
scheduling algorithms nimrod abramson cost optimisation uses cheapest resources ensure deadline met computational cost minimized 
time optimisation uses affordable resources process jobs parallel early possible 
cost time optimisation similar cost optimisation multiple resources cost applies time optimisation strategy scheduling jobs 
conservative time strategy similar time optimisation guarantees unprocessed job minimum budget job 
nimrod broker scheduling strategies solving large scale data intensive computing applications simulation chamber calibration abramson molecular modelling drug design buyya :10.1.1.42.8707
grid portals web portal allows application scientists researchers access resources specific particular domain interest web interface 
typical web subject portals grid portal may provide access grid resources 
example grid portal may authenticate users permit access remote resources help decisions scheduling jobs allow users access manipulate resource information obtained stored remote database 
grid portal access personalised profiles created stored portal user 
attributes grid portals appropriate means grid application users access grid resources 
npaci npaci user portal designed single point computer resources simplify access resources distributed member organisations allows viewed integrated grid system individual machines 
key services provided information resource access management services 
information services designed increase effectiveness users 
provides links user documentation navigation news items current interest training consulting information data platforms software applications information resources user allocations accounts 
characteristic web portals 
interactive web service offers secure transactions accessing resources allows user perform tasks command execution compilation running programs 
key service offered provides status resources supports easy mechanism submitting jobs resources 
status information includes cpu load percent usage processor node maps queue usage summaries current queue information participating platforms 
sdsc grid port toolkit sdsc grid port toolkit reusable portal toolkit uses infrastructure 
key components web portal services application apis 
web portal module runs web server provides secure authenticated connectivity grid 
application apis provide web interface helps users develop customised portals having know underlying portal infrastructure 
designed allow execution portal services client applications separate web servers 
toolkit modules develop science portals applications areas modelling molecular modelling cardiac physiology tomography 
grid portal development kit grid portal collaboration alliance ncsa sdsc nasa ipg nlanr 
purpose collaboration support common set components utilities portal development easier allow various portals interoperate core infrastructure grid security infrastructure gsi globus 
example portal capabilities include running simulations interactively submitted batch queue 
file transfer including file upload file download third party file transfers migrating files various storage systems 
querying databases resource job specific information 
maintaining user profiles contain information past jobs submitted resources results information user preferences 
portal architecture tier model client browser securely communicates web server secure sockets https connection 
web server capable accessing various grid services globus infrastructure 
globus toolkit provides mechanisms securely submitting jobs globus gatekeeper querying hardware software information ldap secure pki infrastructure gsi 
portals discussion sub section highlights characteristics capabilities required grid environments 
integrated systems second generation grid components emerged number international groups started projects integrated components coherent systems 
projects dedicated number exemplar high performance wide area applications 
section discusses representative set projects 
cactus cactus allen open source problem solving environment designed scientists engineers 
cactus modular structure enables execution parallel applications range architectures collaborative code development distributed groups 
cactus originated academic research community developed large international collaboration physicists computational scientists black hole simulations 
cactus provides front core backend services provided example globus hdf parallel file hdf general purpose library file format storing scientific data petsc scientific library suite data structures routines parallel solution scientific applications modelled partial differential equations mpi advanced visualisation tools 
portal contains options compile deploy applications distributed resources 
datagrid european datagrid project datagrid led cern funded european union aim setting computational data intensive grid resources analysis data coming scientific exploration hoschek 
primary driving application datagrid project large collider lhc operate cern represents leap forward particle beam energy density collision frequency 
leap necessary order produce examples previously undiscovered particles higgs super symmetric 
lhc number challenges terms computing 
project designing developing scalable software solutions testbeds order handle bytes distributed data tens thousands computing resources processors disks thousands simultaneous users multiple research institutions 
main challenge facing project providing means share huge amounts distributed data current network infrastructure 
datagrid relies emerging grid technologies expected enable deployment large scale computational environment consisting distributed collections files databases computers scientific instruments devices 
objectives datagrid project implement middleware fabric grid management including evaluation test integration existing middleware research development new software appropriate 
deploy large scale testbed 
provide production quality demonstrations 
datagrid project divided twelve packages distributed working groups testbed infrastructure applications computational datagrid middleware management dissemination 
emphasizes enabling distributed processing data intensive applications area high energy physics earth observation bio informatics 
datagrid build top globus includes components job description language script describe job parameters 
user interface ui sends job rb receives results 
resource broker rb locates selects target computing element ce 
job submission service jss submits job target ce 
logging book keeping records job status information 
grid information service gis information index state grid fabric 
replica catalogue list data sets duplicates held storage elements se 
datagrid testbed currently available high energy physics experiments applications biology earth observation 
final version datagrid software scheduled release uniform interface computer resources project funded german ministry education research 
design goals include uniform easy gui open architecture concept job consistent security architecture minimal interference local administrative procedures exploitation existing emerging technologies standard java web technologies 
provides interface job preparation secure submission distributed supercomputer resources 
distributed applications defined multi part applications different parts may run different computer systems asynchronously sequentially synchronized 
job contains multi part application augmented information destination systems resource requirements dependencies different parts 
structural viewpoint job recursive object containing job groups tasks 
jobs job groups carry information destination system included tasks 
task unit boils batch job destination system 
main components job preparation agent jpa job monitor controller jmc https server called gateway network job supervisor java applet gui online help assistance facility 
client enables user create submit control jobs workstation pc internet 
client connects gateway authenticates client user contacting servers turn manage submitted jobs 
tasks destined local hosts executed native batch sub system 
tasks run remote site transferred peer gateways 
necessary data transfers synchronisations performed servers 
servers retain status information job output passing client user request 
protocol components defined terms java objects 
low level layer called protocol layer handles authentication ssl secure socket layer communication transfer data lined byte streams high level layer job object class library contains classes define jobs tasks resource requests 
third party components globus integrated framework extend functionality 
extensively developed project 
project funded european commission 
aims demonstrate grids selected scientific industrial communities address specific requirements communities highlight areas biology meteorology computer aided engineering 
objectives project include support software infrastructure development software components demonstrations distributed simulation codes different application areas biomolecular simulations weather prediction coupled cae simulations structural analysis real time data processing 
haupt computational extension web model act framework wide area distributed computing 
main design goal build seamless framework publishing reusing computational modules web users web browser engage composing distributed applications modules visual components editors visual authoring tools 
tier java architecture considered visual dataflow system 
front uses applets authoring visualization control environment 
uses servlet middleware layer manage interact backend modules legacy codes databases high performance simulations 
analogous web web pages compared modules hyperlinks connect web pages inter modular dataflow channels 
content developers built published modules attaching web servers 
application integrators visual tools link outputs source modules inputs destination modules forming distributed computational graphs compute webs publishing composite modules 
user activated compute webs clicking suitable hyperlinks customizing computation terms available parameters employing high level commodity tools visual graph authoring 
backend implemented globus toolkit particular mds gram gass 
mesh java enhanced web servers apache running servlets managed coordinated distributed computation 
management infrastructure implemented servlets session manager module manager connection manager 
servlets urls offer dynamic information services current state 
management servlet communicate sockets 
servlets persistent application independent 
various implementations developed version corba base distributed object model 
evolved gateway computational web portal pierce mississippi computational web portal haupt 
peer peer computing plausible approach address concerns scalability described simple solution 
traditional client server model performance bottleneck single point failure prevalent brings challenges 
peer peer computing clark implemented example napster napster gnutella gnutella freenet clarke jxta jxta internet computing implemented example seti home seti entropia systems entropia examples general computational structures advantage globally distributed resources 
computing machines share data resources spare computing cycles storage capacity internet private networks 
machines communicate directly manage computing tasks central servers 
permits computing scale effectively traditional client server systems expand server infrastructure order grow clients servers attractive respect scalability fault tolerance reasons discussed 
obstacles computing pcs workstations complex applications require computing power carry communications security overhead servers handle 
security issue applications give computers access machines resources memory hard drives 
downloading files computers systems vulnerable viruses 
example gnutella users exposed virus 
issue ability authenticate identity machines peers 
systems cope heterogeneous resources computers variety operating systems networking components 
technologies java xml help overcome interoperability problems 
biggest challenges computing enabling devices find computing paradigm lacks central point control 
computing needs ability find resources services potentially huge number globally decentralised peers 
number storage systems developed research community 
grid context raise important issues security anonymity federated available reliable storage incompletely trusted environment farsite serverless distributed file system bolosky 
oceanstore global persistent data store aims provide consistent durable storage utility atop infrastructure comprised untrusted servers scale large numbers users 
kubiatowicz zhuang self certifying file system sfs network file system aims provide strong security untrusted networks significant performance costs fu 
past large scale peer peer storage utility aims provide high availability scalability anonymity 
documents immutable identities content owners readers storage providers protected 
druschel see fox discussion grid context :10.1.1.1.1674
jxta april sun microsystems announced creation project jxta open source development community infrastructure applications 
jxta describes network system layers device bottom layer means electronic pulse desktop pcs laptops palm tops set tops game consoles cellular telephones pagers embedded controllers network enabled operating environment consists jvm java virtual machine provides tcp ip services resources participate network 
platform functions allow peers identify peering peer groups know particular peer available presence resources discovery offer communicate 
services provide basic building blocks applications storage resource aggregation security indexing searching 
application accommodates likes napster groove aim seti home 
jxta corresponds top layers leaving jvm handle basic device network needs 
describes suite protocols governing discovery organization monitoring intra peer communication 
common xml messaging layer binds protocols appropriate underlying network transports 
jxta specification software 
concepts specification separated implementation set java class libraries 
apart core jxta components project provides rudimentary applications including jxta shell provides view jxta environment unix command line interface filesharing chat gui interface content management system 
summary experiences second generation second generation core software grid evolved provided early offerings globus gt legion dedicated provision proprietary services large computationally intensive high performance applications generic open deployment globus gt avaki 
alongside core software second generation saw development range accompanying tools utilities developed provide higher level services users applications spans resource schedulers brokers domain specific users interfaces portals 
peer peer techniques emerged period 

evolution grid third generation second generation provided interoperability essential achieve large scale computation 
grid solutions explored aspects engineering grid apparent 
order build new grid applications desirable able reuse existing components information resources assemble components flexible manner 
solutions involved increasing adoption service oriented model increasing attention metadata key characteristics third generation systems 
fact service oriented approach implications information fabric flexible assembly grid resources grid application requires information functionality availability interfaces various components information agreed interpretation processed machine 
discussion service oriented approach see companion semantic grid 
grid traditionally described terms large scale data computation shift focus third generation apparent new descriptions 
particular terms distributed collaboration virtual organisation adopted anatomy foster :10.1.1.129.8850
third generation holistic view grid computing said address infrastructure science term reminds requirements doing new science scientist enabling technology 
fox notes fox anticipated massively parallel computing facilities part picture emerged lot users loosely coupled distributed computing dominated deployment massively parallel machines 
strong sense automation third generation systems example humans longer deal scale heterogeneity delegate processes scripting leads autonomy systems 
implies need coordination turn needs specified programmatically various levels including process descriptions 
similarly increased likelihood failure implies need automatic recovery configuration repair remain manual tasks 
requirements resemble self organising healing properties biological systems termed autonomic autonomic nervous system 
definition autonomic autonomic system properties 
needs detailed knowledge components status 
configure reconfigure dynamically 
seeks optimise behaviour achieve goal 
able recover malfunction 
protect attack 
aware environment 
implement open standards 
optimised resources third generation grid systems development exhibit features 
section consider service oriented approach looking web services agent computing information layer issues 
service oriented architectures number grid architectures apparent variety projects 
example anatomy proposed layered model information power grid project ipg featured extensive set services arranged layers 
time web services model gaining popularity promising standards support approach 
fact research community agent computing undertaken extensive area software agents seen producers consumers brokers services 
altogether apparent service oriented paradigm provided flexibility required third generation grid 
depicts technologies 
web services view science technologies creation web services standards industry led initiative emerging standards various states progress world wide web consortium 
established standards include soap xml protocol 
soap provides envelope encapsulates xml data transfer web infrastructure caches proxies convention remote procedure calls rpcs serialisation mechanism xml schema datatypes 
soap developed cooperation internet engineering task force ietf 
web services description language wsdl 
describes service xml xml schema mapping resource description framework rdf 
ways wsdl similar interface definition language idl 
wsdl available note wsdl 
universal description discovery integration uddi 
specification distributed registries web services similar yellow white pages services 
uddi supports publish find bind service provider describes publishes service details directory service requestors requests registry find providers service services bind technical details provided uddi 
builds xml soap uddi 
web service standards attracting interest process level 
example web services flow language wsfl wsfl ibm proposal defines workflows combinations web services enables workflows appear services xlang xlang microsoft supports complex transactions may involve multiple web services 
combined proposal anticipated 
proposals standards address various aspects web services 
addition necessary machinery web services important efforts address design web services systems 
example web services modelling framework wsmf provides conceptual model developing describing web services principles maximal decoupling scalable mediation service wsmf 
web services closely aligned third generation grid requirements support service oriented approach adopt standards facilitate information aspects service description 
fact wsdl describes interface service functionality service 
required service descriptions activity daml daml 
open grid services architecture ogsa framework open grid services architecture ogsa framework globus ibm vision convergence web services grid computing global grid forum ggf meeting held toronto february 
ogsa described physiology foster :10.1.1.114.2815:10.1.1.114.2815
ggf set open grid services working group review refine grid services architecture documents form technical specification 
ogsa supports creation maintenance application ensembles services maintained virtual organizations vos 
service defined network enabled entity provides capability computational resources storage resources networks programs databases 
tailors web services approach meet requirements 
example standard interfaces defined ogsa discovery clients require mechanisms discovering available services determining characteristics services configure requests services appropriately 
dynamic service creation standard interface factory semantics service creation service provide 
lifetime management system incorporates transient stateful service instances mechanisms provided reclaiming services state associated failed operations 
notification collection dynamic distributed services able notify asynchronously interesting changes state 
manageability operations relevant management monitoring large numbers grid service instances provided 
simple hosting environment simple execution environment set resources located single administrative domain supporting native facilities service management example ee application server microsoft net system linux cluster 
parts globus impacted ogsa grid resource allocation management gram protocol 
information infrastructure meta directory service mds information discovery registration data modelling local registry 
grid security infrastructure gsi supports single sign restricted delegation credential mapping 
expected implementation globus toolkit ogsa architecture 
core services implement interfaces behaviour described grid service specification 
base services core services implement existing globus capabilities resource management data transfer information services new capabilities resource reservation monitoring 
range higher level services core base services provide data management workload management diagnostics services 
agents web services provide means interoperability key grid computing ogsa important innovation adapts web services grid quite probably anticipates needs applications 
web services provide new solution challenges large scale distributed systems provide new techniques engineering systems 
valuable look models 
ogsa activity sits side triangle suggest agent computing jennings important input inform service oriented grid vision 
agent computing paradigm provides perspective software systems entities typically properties known weak agency wooldridge :10.1.1.119.2204
note close relationship characteristics autonomic computing listed 

autonomy agents operate intervention control actions internal state 
social ability agents interact agents agent communication language 
reactivity agents perceive respond environment 
pro activeness agents exhibit goal directed behaviour 
agent computing particularly suited dynamically changing environment autonomy agents enables computation adapt changing circumstances 
important property third generation grid 
techniques achieving fly negotiation agents significant body research negotiation techniques jennings 
market approaches particular provide important approach computational economies required grid applications 
view grid number interacting components information conveyed interactions falls number categories 
domain specific content processed 
additional types include information components functionalities domain information communication components information workflow individual flows 
tied standard way promote interoperability components agreed common vocabularies 
agent communication languages acls address exactly issues 
particular foundation intelligent physical agents fipa activity fipa provides approaches establishing semantics information interoperable manner 
fipa produces software standards heterogeneous interacting agents agent systems including extensive specifications 
fipa architecture agents communicate exchanging messages represent speech acts encoded agent communication language 
services provide support agents including directory services message 
services may implemented agents software accessed method invocation programming interfaces java idl 
identify agent agent information exchange directory entries information formats required infrastructure machinery 
information aspects relationship world wide web section focus firstly web 
web information handling capabilities clearly important component science infrastructure web infrastructure interest example distributed system achieved global deployment 
second aspect addressed section support collaboration key third generation grid 
show web infrastructure lacks support synchronous collaboration users discuss technologies provide support 
interesting consider rapid uptake web inform design grid similar aspirations terms scale deployment 
principle clearly simplicity little new html facilitated massive deployment 
aware dramatic contrast web grid despite large scale internet number hosts involved typical web transaction small significantly lower envisaged grid applications 
web grid information infrastructure web originally created distribution information science context cern 
obvious question ask information distribution architecture described section meet grid requirements 
number concerns arise version control 
popular publishing paradigm web involves continually updating pages version control 
web infrastructure explicitly support versioning 
quality service 
links embedded hardwired global fragile rendered useless changing server location name content destination document 
expectations link consistency low science may demand higher quality service 
provenance 
standard mechanism provide legally significant evidence document published web particular time haber 
digital rights management 
science demands particular functionality respect management digital content including example copy protection intellectual property management 
curation 
web infrastructure focuses machinery delivery information creation management content 
grid infrastructure designers need address metadata support outset 
address issues look communities 
example multimedia industry demands support digital rights management 
mpeg aims define multimedia framework enable transparent augmented multimedia resources wide range networks devices different communities mpeg addressing multimedia content delivery chain 
elements include declaration identification content handling intellectual property management protection 
authoring major concern especially collaborative authoring 
webbased distributed authoring versioning webdav activity webdav define extensions necessary enable distributed web authoring tools broadly interoperable supporting user needs 
summary web provides effective layer information transport provide comprehensive information infrastructure science 
expressing content meta content web infrastructure distributed applications information exchanged programs human reader 
information exchange facilitated xml extensible markup language family recommendations 
xml designed mark documents fixed tag vocabulary tags defined application document type definition dtd xml schema 
formed xml document labelled tree 
note dtd schema addresses syntactic conventions address semantics 
xml schema valid xml expressions 
new formats expressed xml smil synchronised multimedia integration language 
rdf resource description framework standard way expressing metadata specifically resources web fact represent structured data general 
triples triple expresses fact object attribute value written 
object value enabling triples chained fact rdf statement object attribute called reification permits nesting 
rdf schema rdf xml schema xml permit definition vocabulary 
essentially rdf schema provides basic type system rdf class subclassof subpropertyof 
rdf schema valid rdf expressions 
xml rdf xml rdf schema enable standard expression content 
additionally set tools emerged formats example parsers increasing support tools 
provides infrastructure information aspects third generation grid 
ran metadata activity addressed technologies including rdf succeeded semantic web activity 
activity statement semweb describes semantic web follows semantic web extension current web information welldefined meaning better enabling computers people cooperation 
idea having data web defined linked way effective discovery automation integration reuse various applications 
web reach full potential place data shared processed automated tools people vision familiar shares grid vision 
scientific american provides motivation scenario uses agents 
nutshell semantic web intended knowledge representation web hypertext 
discuss relationship section 
darpa agent markup language program daml hendler began brings semantic web technologies bear agent communication discussed previous section 
daml extends xml rdf ontologies powerful way describing objects relationships 
ontology interchange language oil brought daml form daml oil 
created web ontology working group focusing development language daml oil 
live information systems third generation emphasises distributed collaboration 
collaborative aspects builds idea collaboratory defined nsf study cerf centre walls nation researchers perform research regard geographical location interacting colleagues accessing instrumentation sharing data computational resource accessing information digital libraries view accommodates information appliances laboratory setting example include electronic portable devices 
collaboration information dissemination mechanism web involved users sinks information published major servers 
practice part web phenomenon widespread publishing users 
powerful effect creating online communities 
paradigm interaction essentially publishing things reinforced email newsgroups supports asynchronous collaboration 
despite underlying internet infrastructure entirely capable supporting live real time information services synchronous collaboration 
example live data experimental equipment live video feeds unicast multicast mbone video conferencing coupled applications sip internet relay chat instant messaging systems muds chat rooms collaborative virtual environments 
role supporting science directly supporting people scenes processes infrastructure 
particular support extension science new communities transcend current organisational geographical boundaries 
histories technologies web interoperate web build web infrastructure technologies adoption appropriate standards 
example messages expressed xml urls routinely exchanged 
particular web metadata infrastructure role data experimental equipment expressed ontology enabling processed programs way static data library catalogues 
application computer systems augment capability humans working groups long history origins doug 
context emphasis facilitating distributed collaboration wish embrace increasingly smart workplaces scientist including meeting rooms laboratories 
considerable volume smart space area note particular smart rooms pentland pentland coen intelligent room coen 
research area falls advanced collaborative environments working group global grid forum ace grid addresses collaboration environments ubiquitous computing 
access grid access grid accessgrid collection resources support human collaboration grid including large scale distributed meetings training 
resources include multimedia display interaction notably room videoconferencing group group interfaces grid middleware visualisation environments 
access grid nodes dedicated facilities explicitly contain high quality audio video technology necessary provide effective user experience 
current access grid infrastructure ip multicast 
isdn videoconferencing world evolved alongside shift products supporting lan video conferencing 
protocol multicast data transfer remote camera control application sharing 
ietf developed session initiation protocol sip signalling protocol establishing real time calls conferences internet 
resembles uses session description protocol sdp media description 
meeting live exchange information brings information layer aspects fore 
example events space communicated spaces facilitate meeting 
simplest level slide transitions remote camera control 
provide metadata generated automatically software devices enrich conference stored 
new forms information may need exchanged handle large scale meetings distributed polling voting 
source live information notes taken members meeting annotations existing documents 
shared stored enrich meeting 
feature current collaboration technologies sub discussions created easily provide enriched content 
live video audio feeds provide presence remote participants especially typical access grid installation displays multiple views 
possible remote participants establish forms presence avatars collaborative virtual environment may awareness remote participants physical meeting space 
combination semantic web technologies live information flows highly relevant grid computing emerging area activity page 
metadata streams may generated people equipment programs annotation device settings data processed real time 
live metadata combination multimedia streams multicast video raises quality service qos demands network raises questions metadata embedded respect multimedia metadata standards relevant 
scenario knowledge technologies applied enhance collaboration described buck 

summary discussion identified generations grid generation systems involved proprietary solutions sharing high performance computing resources second generation systems introduced middleware cope scale heterogeneity focus large scale computational power large volumes data third generation systems adopting service oriented approach adopt holistic view science infrastructure metadata enabled may exhibit autonomic features 
evolution grid continuous process generations rigidly defined best distinguished philosophies technologies 
suggest book foster marks transition second generation anatomy foster physiology foster papers mark transition second third generation philosophy :10.1.1.129.8850:10.1.1.114.2815
seen third generation grid early semantic web technologies provide infrastructure grid applications 
section explore relationship web grid order suggest evolution 
comparing web grid state play grid today reminiscent web years ago limited deployment largely driven scientific community emerging standards degree commercial uptake 
said semantic web 
web seen shift machine human communications html machine machine xml precisely infrastructure needed grid 
related web services paradigm appears provide appropriate infrastructure grid grid requirements extending model 
appealing infer similarities grid deployment follow exponential model web growth 
typical grid application involve large numbers processes interacting coordinated fashion typical web transaction today involves small number hosts server cache browser 
achieving desired behaviour large scale distributed system involves technical challenges web address web services take similar world 
web provides infrastructure grid 
conversely ask grid offers web 
web application raises certain challenges motivate evolution web technologies enhancements web services ogsa may transcend grid applications 
provides high performance infrastructure various aspects web applications example search data mining translation multimedia information retrieval 
semantic grid visions grid semantic web common distinguished difference emphasis grid traditionally focused computation ambitions semantic web take inference proof trust 
grid building third generation heading term semantic grid semantic web web semantic grid grid 
depicted 
term von ggf comprehensive report semantic grid written authors uk science programme july 
particular representation semantic grid due norman paton university manchester uk 
richer semantics semantic web web semantic grid grid greater computation semantic grid semantic grid achievable simple powerful form ontologically principled 
third generation grid addressing way information represented stored accessed shared maintained information understood data equipped meaning 
anticipate generation concerned way knowledge acquired retrieved published maintained assist scientists achieve particular goals objectives knowledge understood information applied achieve goal solve problem enact decision 
semantic grid involves conceptual layers grid knowledge information computation data 
complementary layers ultimately provide rich seamless pervasive access globally distributed heterogeneous resources 
research issues general view grid layered system computation data information knowledge layers 
computation data layer grid layer mature terms time experience software available directly useable lacks essential aspects allow provision seamless pervasive secures system resources 
certain number aspects addressed information knowledge layers grid evolve 
generic areas seen ones require information services mechanisms hold information resources grid need provide extendable fast reliable secure scalable services 
resource information manner grid information necessary enable grid correctly 
information range security data application requirements resource naming data user profiles 
vital information understood interpreted services require 
resource discovery resource unique name characteristics need mechanisms locate resource globally distributed system 
services resources 
resources may persist may transitory may created demand 
synchronisation coordination orchestrate complex sequence computations variety resources inherent properties loosely tightly coupled distributed systems 
may involve process description require event infrastructure 
involves scheduling various levels including meta scheduling workflow 
fault tolerance dependability environments need cope failure software hardware components access issues general accommodating exception handling necessary dynamic multiuser multi organisation system 
security authentication authorisation assurance accounting mechanisms need set place need function context increasing scale automation 
example user may delegate privileges processes acting behalf may turn need propagate privileges 
concurrency consistency need maintain appropriate level data consistency concurrent heterogeneous environment 
weaker consistency may sufficient applications 
performance need able cope non local access resources caching duplication 
moving code service data scripts mobile agents attractive brings set challenges 
heterogeneity need multitude hardware software information resources multiple organisations different administrative structures 
scalability systems need able scale number size services applications scaling need manual intervention 
requires automation ideally self organisation 
information layer technologies available today limited form number topics require research 
include issues relating science content types 
caching new content produced 
web infrastructure respond different access patterns resulting automated access information sources 
issues curation science content 
digital rights management science context compared multimedia commerce example 
provenance 
provenance stored facilitate reuse information repeat experiments provide evidence certain information existed certain time 
creation management metadata provision tools metadata support 
service descriptions tools working 
best describe service architecture 
workflow description enaction tools working descriptions 
adaptation personalisation 
system metadata enabled knowledge acquired 
collaborative infrastructures larger community including interaction scientists science content visualisations linking smart laboratories spaces 
metadata collaborative events especially live metadata establishing metadata schema support collaboration meetings laboratories 
capture presentation information new forms device scientists working field 
representation information underlying grid fabric required applications resource scheduling monitoring 
semantic grid place data equipped rich context turned information 
information shared processed virtual organisations order achieve specific aims objectives 
actionable information constitutes knowledge 
knowledge layer key stage evolution grid fully fledged semantic grid 
research agenda create semantic grid subject companion semantic grid science infrastructure 
abramson abramson giddy high performance parametric modeling nimrod killer application global grid :10.1.1.42.8707
international parallel distributed processing symposium ipdps ieee computer society press 
abramson abramson roe super computing spreadsheets 
high performance computing symposium hpc advanced simulation technologies conference april 
abramson abramson giddy high performance parametric modeling nimrod killer application global grid :10.1.1.42.8707
international parallel distributed processing symposium ipdps ieee computer society press 
accessgrid access grid www accessgrid org fox haupt high level programming environment visual authoring toolkit high performance distributed computing sc high performance networking computing orlando florida 
allen allen thomas ian foster nick karonis ripeanu ed seidel brian 
supporting efficient execution heterogeneous distributed computing environments cactus globus 
winning gordon bell prize special category supercomputing revised version august uniform access supercomputing element electronic commerce generation computer systems nh elsevier 
armstrong armstrong gannon geist keahey kohn parker 
common component architecture high performance scientific computing 
proceedings th high performance distributed computing hpdc 
autonomic ibm autonomic computing www research ibm com autonomic avaki avaki www avaki com baker baker fox yau review cluster management software review volume may 
www org cms berners lee hendler lassila semantic web scientific american may 
bolosky bolosky douceur ely theimer feasibility serverless distributed file system deployed existing set desktop pcs proc 
international conference measurement modeling computer systems sigmetrics pp 

acm press 
buck buckingham shum de roure eisenstadt shadbolt tate 
collaborative advanced knowledge technologies grid 
proceedings second workshop advanced collaborative environments eleventh ieee int 
symposium high performance distributed computing hpdc july edinburgh scotland 
buyya buyya abramson giddy nimrod architecture resource management scheduling system global computational grid th international conference high performance computing asia pacific region hpc asia beijing china :10.1.1.111.8497
buyya buyya giddy abramson evaluation economy resource trading scheduling computational power grids parameter sweep applications second workshop active middleware services ams conjunction hpdc august pittsburgh usa kluwer academic press :10.1.1.34.281
buyya buyya virtual laboratory project molecular modeling drug design grid ieee distributed systems online vol 

www buyya com catlett catlett metacomputing communications acm june pp 

cerf cerf national applying information technologies scientific research national academy press washington 
clark clark face face peer peer networking computer vol 
january pp 
clarke clarke sandberg wiley hong freenet distributed anonymous information storage retrieval system icsi workshop design issues anonymity unobservability 
coen coen prototype intelligent environment cooperative buildings integrating information organisation architecture streitz burkhardt eds lncs springer verlag 
condor condor www cs wisc edu condor daml daml services coalition mark burstein jerry hobbs ora lassila david martin drew mcdermott sheila mcilraith srini narayanan massimo paolucci terry payne katia sycara daml web service description semantic web international semantic web conference iswc june pp 
datagrid datagrid project eu datagrid web cern ch de roure jennings shadbolt semantic grid science infrastructure volume :10.1.1.63.9093
druschel druschel rowstron past large scale persistent peer peer storage utility hotos viii germany may :10.1.1.1.1674
augmenting human intellect conceptual framework afosr oct 
sloan stanford edu html entropia entropia entropia com www org www npac syr edu factoring html fensel fensel bussler 
web service modeling framework wsmf fipa foundation physical agents www fipa org foster foster kesselman tuecke nexus approach integrating multithreading communication parallel distributed computing 
foster foster geisler smith tuecke software infrastructure way high performance distributed computing experiment proc 
th ieee symposium high performance distributed computing 
pp 

foster foster kesselman globus metacomputing infrastructure toolkit international journal supercomputer applications 
foster ian foster carl kesselman eds grid blueprint new computing infrastructure morgan kaufmann july 
isbn 
foster foster kesselman tuecke anatomy grid enabling scalable virtual organizations international journal supercomputer applications high performance computing :10.1.1.129.8850
foster foster kesselman nick tuecke physiology grid open grid services architecture distributed systems integration ggf feb www globus og research papers ogsa pdf fox fox computational science integration science computer science ronald elias houstis eds computational science mathematics software purdue university press west lafayette indiana isbn :10.1.1.114.2815
pages july 
fox geoffrey fox dennis gannon sung ko lee pierce qiu xi rao uyar wang wu 
peer peer grids 
book chapter published 
fu kevin fu frans kaashoek david mazi res fast secure distributed readonly file system proceedings th usenix symposium operating systems design implementation osdi san diego california october 
ggf global grid forum www org gnutella gnutella www gnutella uk sdsc toolkit npaci edu grimshaw grimshaw wulf legion vision worldwide virtual computer 
communications acm vol 
january 
haber haber stornetta ws time stamp digital document journal cryptography vol pp 
haupt haupt fox web metacomputing special issue metacomputing generation computer systems north holland 
haupt haupt bangalore mississippi computational web portal 
accepted publication concurrency computation practice experience 
hendler hendler mcguinness darpa agent markup language ieee intelligent systems vol 
nov dec pp 

hoschek hoschek martinez samar stockinger stockinger data management international data grid project proceedings st ieee acm international workshop grid computing grid bangalore india dec springer verlag press germany 
https npaci edu ipg nasa information power grid www ipg nasa gov java grande www org jennings jennings agent approach building complex software systems 
acm 
jennings jennings faratin parsons sierra wooldridge automated negotiation prospects methods challenges 
journal group decision negotiation 
jini jini www jini org jones jones nas requirements checklist job queuing scheduling software nas technical report nas april www nas nasa gov research reports techreports nas html jxta jxta www jxta org kubiatowicz john kubiatowicz david bindel yan chen steven czerwinski patrick eaton dennis geels ramakrishna gummadi sean rhea hakim weatherspoon weimer chris wells ben zhao 
oceanstore architecture global scale persistent storage proceedings ninth international conference architectural support programming languages operating systems asplos november 
www erc edu haupt welcome html mpeg iso iec jtc sc wg coding moving picture audio mpeg overview document 
napster napster www napster com net distributed net www distributed net nlanr nlanr grid portal development kit dast nlanr net features omg omg www omg org page kevin page don david de roure 
time link streams continuous metadata 
proc twelfth acm conference hypertext hypermedia hypertext 

www com pbs portable batch system www org pentland pentland smart rooms scientific american pp april 
pierce pierce fox gateway computational web portal 
accepted publication concurrency computation practice experience 
platform platform computing www platform com rajasekar rajasekar reagan moore data metadata collections scientific applications european high performance computing conference amsterdam holland june 
rivest rivest shamir digital signatures public key cryptosystems mit laboratory computer science technical memorandum april 
semweb semantic web activity statement www org sw activity seti seti home ssl berkeley edu sge sun grid engine www sun com software uddi www uddi org webdav web distributed authoring versioning www webdav org wooldridge wooldridge jennings intelligent agents theory practice :10.1.1.119.2204
knowledge engineering review volume june 
wsdl web services description language wsdl 
note march www org tr wsdl wsfl web services flow language wsfl version www ibm com software solutions webservices pdf wsfl pdf wsmf web services modelling framework www cs vu nl dieter xlang web services business process design www com team xml xlang default htm zhou zhou zheng wang delisle utopia load sharing facility large heterogeneous distributed computer systems software practice experience december 
zhuang shelley zhuang ben zhao anthony joseph randy katz john kubiatowicz 
bayeux architecture scalable fault tolerant wide area data dissemination proceedings eleventh international workshop network operating system support digital audio video nossdav june 

