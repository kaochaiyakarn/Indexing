linear programming linear time dimension fixed nimrod megiddo tel aviv universit tel aviv israel 
demonstrated linear programming problem variables constraints solved time fixed 
bound follows multidimensional search technique applicable quadratic programming 
developed algorithm polynomial provided bounded certain slowly growing function categories subject descriptors analysis algorithms problem complexity numerical algorithms problems computations matrices analysis algorithms problem complexity algorithms problems geometrical problems computations sort ing searching mathematics computing optimization linear programming general terms algorithms theory additional key words phrases genuinely polynomial time multidimensional search quadratic programming smallest ball problem linear time algorithms 
computational complexity linear questions attracted researchers invention simplex algorithm 
major theoretical development field algorithm proved problem solved time polynomial sum logarithms integral coefficients 
notion polynomiality alto gether satisfactory see lo expected algorithm prove practical simplex method 
result left open question existence algorithm requires number arithmetic operations polynomial terms size nd underlying matrix number variables number constraints 
call algorithm genuinely polynomial 
question closely related interesting open questions theory convex polytopes concerning diameter height polytopes 
obviously results advanced knowledge problems 
central question open interesting investigate special classes linear programming problems 
systems linear inequalities variables inequality shown author genuinely polynomial algorithm 
fixed simplex algorithm supported part national science foundation ecs ecs 
author address computer science department stanford university stanford ca 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm journal association computing machinery vol 

january pp 

linear programming dimension fixed course genuinely polynomial algorithm 
crude bound nd assuming means matter slowly dimension grows superpolynomial bound 
refined bound nc see help respect 
develop algorithm genuinely polynomial grows slowly study complexity linear programming fixed space 
words considering linear programming problems constraints rd study asymptotic time complexity respect fixed value surprisingly turns linear coefficient proportionality rapidly growing worst case version simplex algorithm requires time pivot quadratic terms dimensional case 
result implies genuinely polynomial bound classes linear programs dimension grows slowly log 
results rely novel multidimensional search technique developed 
version may described roughly follows search relative objects space solve recursively problems objects space problem reduced objects space 
confused bentley multidimensional divide conquer problem reduced solving problems problem 
note results interesting theoretical point view general case practical small number dimensions 
previous cases described classical problems shown suc method solution 
essentially common single facility location problems relative euclidean rectilinear metric solvable technique 
current computational experience looks successful 
direct applications linear programming dimension normally small linear separability 
points rd organized disjoint sets find hyperplane separates sets 
problem useful statistics pattern recognition 
chebyshev 
points 
rd 
wish find linear function minimize max 

related problems see 
note results extended solve zation convex quadratic programming problems 
details extension quadratic programming related problems solvable similar techniques reader referred 
problem finding smallest ball enclosing points rd solved time fixed start overview method section 
section describe closely related methods multidimensional techniques oracle decide correct side hyperplane relative point looking 
applications search techniques linear programming described section discuss linear programming oracle 
final estimations time efforts section 
nimrod megiddo 
overview interested solving dimensional linear programming problem constraints minimize cjx 

known usually relatively constraints tight optimal solution identify active constraints solve problem solving set equations 
fundamental idea algorithm repeatedly reduce set constraints problem solved directly 
idea successful need drop relatively constraints simultaneously 
fortunately way drop fixed fraction set constraints regardless size set 
convenience presentation transform problem form minimize xd ii transformation possible 
set xj eliminate xd rename xd 
words problem minimize xd xd maxi sox ill xd min bi max bi 
noted transformation convenience presentation 
merely reflects consideration behavior constraints subspace orthogonal gradient objective function 
repeated transfor mations cause difficulties point view numerical analysis 
algorithm programmed transformations 
consider pair inequalities indices set 
example suppose ii consider constraints xd jxj 
relationship constraints summarized follows 

constraints redundant readily dropped 


equation linear programming dimension fixed describes hyperplane divides space domains domination side hyperplane bl 
bz side reverse inequality prevails 
tell side hyperplane optimal solution lies drop constraints 
general task finding side hyperplane solution lies easy certainly going test hyperplane merely dropping constraint 
test relatively hyperplanes particular method selecting hyperplanes enables drop relatively con straints 
paradoxical carefully choosing hyperplanes know outcomes tests relative hyperplanes performing tests 
summarize characteristics method general terms follows 
inequalities variables test constant number hyperplanes number independent depend dimension position relative optimal solution 
single test amounts solving dimensional linear programs constraints 
results tests pairs inequalities constant independent dependent tell member pair may dropped affecting optimal solution 
point problem reduced dimensional linear programming problem constraints proceed recursively 
complete description algorithm need specify things 
need explain mean testing hyperplane design algorithm single test 
design organization tests establish complete linear programming algorithm 
issues discussed separately sections 
section discuss multidimensional search problem believe may applicable problems linear programming 
implementation linear pro gramming discussed section 
multidimensional search problem problem 
consider familiar dimensional search problem 
suppose exists real number known exists oracle tell real number 
suppose numbers xi 
wish know position relative 
question queries need address oracle computational effort order tell position relative 
obviously may sort numbers time perform binary search locating sorted set 
amounts queries 
asymptotically better performance obtained employ linear time median finding algorithm 
find median xi inquire position relative drop approximately half set xi proceed recursively 
query appropriate point suffices telling outcome respect half set 
yields performance time median finding sets cardinalities 
plus logn queries 
important note practical version idea follows 
pick random xi test 
drop elements wrong side pick element uniform distribution remaining set 
approach leads expected nimrod megiddo number queries comparisons 
analysis essentially thing appears 
efficient idea select median random sample 
generalize dimensional problem higher dimensions 
suppose exists point known oracle tell rd real number atx atx atx words oracle tell position relative hyperplane rd suppose hyperplanes wish know position relative 
question queries need address oracle computational effort involved finding position relative hyperplanes 
general situation course extremely complicated dimensional case 
major difference higher dimensions natural linear order exists dimensional case 
quite surprising result dimensional case generalizes higher dimensions way 
show dimension exists constant independent logn queries suffice determining position relative hyperplanes 
naturally additional computational effort involved turns proportional linear time coefficient proportionality depending 
solution 
procedure develop described recursively 
underlying idea follows 
show dimension exist constants positive integer independent queries suffice determining position relative bn hyperplanes ones rd additional computational effort linear terms possible drop bn hyperplanes proceed recursively 
round queries reduces number remaining hyperplanes factor approximately rounds know position relative hyperplanes 
total number queries 
computational effort amounts cn linear terms constants derived recursively respect dimension 
know inquire drop half set hyperplanes 
may define 
henceforth assume 
atx 
hyperplanes 
bi real number 

note convenient description procedure transform coordinate system 
course transform unknown point transform hyperplane back original system asking oracle position hyperplane 
precisely vector rd represented nonsingular matrix hyperplane atx represented atm may vectors wa 
need inquire hyperplane look atx art choose coordinate system hyperplane intersects subspace line intersection empty equal entire subspace 
finite number hyperplanes linear programming dimension fi possible achieve situation applying nonsingular transformation 
specifically 

possible find time basis observation 
orthogonal values oft 
observation successively select basic vectors orthogonal 
alternatively just arguing linear time bound correct order avoid repeated transformation kind say simply ignore hyperplanes simply select variables xl trouble arises pair entire situation extremely simple constraints positive 
hyperplane intersects xl subspace straight line xl 
define slope hi slope straight line 
precisely slope equals 
half hyperplanes nonnegative slope half nonpositive slope 
achieved linear transformation subspace 
particular may find median set slopes apply linear transformation take median slope zero 
transformation takes linear time fact needed simplicity presentation 
algorithm programmed manipulations applied original data 
assume simplicity presentation original coefficients satisfy requirement 
step procedure form disjoint pairs hyperplanes pair member nonnegative slope member nonpositive slope 
consider relationship members typical pair 
suppose example nonnegative slope hh nonpositive slope matched hk 
assume defining equations ha linearly independent 
denote hyperplane defined equation ah lb 
equation obtained subtracting times equation hk akl times equation 
intersection hk dimensional 
coefficient xl hj zero 
property essential recursive handling hyperplanes form hi takes place lower dimensional setting 
analogously hj denote hyperplane defined ak bk 
hyperplane hj characteristics similar 
understand significance hi hi note know position relative hyperplanes readily tell position relative hi hl 
illustrated note intersection hyperplanes dimensional relative positions fully characterized intersection xl xz subspace 
fact hk slopes opposite signs essential 
example known lie left hi hj definitely know lies northwest 
nimrod megiddo precise argument true suppose example hi positive slope 
cases handled similarly 
suppose relations tell lies certain sides 
multiplying ail ail yields adding cgl zf bi depending sign 
ak ail 
words example side hi known 
hi hk linearly dependent claim ail akl 
follows fact hi hk slope nonnegative nonpositive 
case hi defined hyperplane parallel hi hk lies middle 
formally real number aij 

equation defines hi obviously hi zero coefficient xl case 
position relative known readily know position relative hk see 
step consider hyperplanes hi pairs formed 
zero coefficients may perceived hyperplanes dimensional subspace 
xd 
precisely linear programming dimension fixed may apply collection hyperplanes search procedure recursively known hyperplanes rd 
oracle rd may oracle projection 
xd 
specifically hi zero coefficient xi follows projection xz 
xd lies certain side projection hi space lies corresponding side hi grand space 
different approaches applying recursion see approach may inquire times obtain information position relative hyperplanes form 
pair formed 
turn hyperplanes form consider pairs position known relative hi 
analogously inquire times obtain information hyperplanes 
point pairs hyperplanes hi hk pair know position relative member pair 
follows times obtained information fraction hyperplanes 
may define solution recursive equations simple 
implies logn queries additional effort find position relative hyper planes 
coefficients order 
approach ii 
suppose recursively find position relative hyperplanes hi hi pair formed 
denote number queries required hyperplanes hnd denote additional effort pairing hyperplanes median finding problem 
solving dimensional problems hyperplanes collection collection know outcome relative half hyperplanes 
obviously write recurrence nimrod megiddo boundary conditions 
easier solve ql ql ql boundary condi tions relation min ql 
note necessarily equal min ql example ql 
integer may consider recurrence form boundary conditions 
solution see interesting solution method follows 
fixed surprisingly favorable constant 
programming dimension fixed effort involved preparations queries satisfies consider recurrence fl nd 
ld boundary conditions 
surprisingly turns linear fixed constants satisfy 

appears second approach may practical provided extremely large relative different approaches multidimensional search give rise different algorithms linear pro gramming problem 
algorithms discussed provide details oracle linear programming 

linear programming section specify mean testing hyperplane 
define require procedure linear programming 
variable linear programming problem minimize xj bi 
require procedure provide optimal solution report problem unbounded case problem infeasible provide vector xl 
xj minimizes function 
xd max bi 

note requirement case problem infeasible unusual needed recursive purposes 
procedure developed far solves extended notion linear programming problem provided suitable oracle 
specifically hyperplane xj ajx need know hyperplane contains final outcome optimal solution hyperplane problem unbounded hyperplane hyperplane contains minimizer function final outcome certain side hyperplane 
case expect know nature final outcome problem feasible bounded 
clarify approach valid linear programming problem multiple optima 
follows convexity set optimal solutions 
hyperplane contain optimal point point may interpreted optimal points lie side hyperplane oracle respond way possible choices optimal set 
show oracle recursive application master problem extended linear programming problem discussed earlier section lower dimensional space 
nimrod megiddo linear programming problem hyperplane consider problem hyperplane additional constraint 
variable problem constraints eliminate variable equivalent variable problem constraints 
simplicity presentation may assume hyperplane simply 
apply affine transformation takes hyperplane 
dimensional problem obtained dropping variable assume course case easy hyperplane single point 
problem feasible unbounded confined xd done 
obtain recursively optimal solution xt 
optimality relative xd vector xi 
xll minimizes function xd 
need determine final outcome alternatively side xd searched 
distinguish cases case consider case obtain optimal solution 
know exists vector yl 
yd yd cj cjx yj 

convexity feasible domain linearity objective function imply vector satisfies requirements vector ty 
sufficient look neighborhood 
specifically consider dimensional problem minimize xj xjk 
impose constraints tight set xd 
interested local behavior neighborhood wish determine existence direction improvement 
easy see dimensional problem solution negative objective function value direction property moving direction half space xd remain feasible domain move sufficiently small positive objective function decreases 
problem infeasible turn optimal value nonnegative look halfspace 
case consider half space solving problem minimize 
analogously half space xd contains solutions better problem solution negative objective function value 
note relative optimum follows auxiliary problems solution negative objective function value 
solutions negative values global optimum done original problem 
linear programming dimension fixed case ii 
second case problem infeasible hyperplane xd 
obtain vector 
minimizes function xl 
xd defined xd 
note function convex sufficient look neighborhood order know half space may contain feasible point 
formally 

interested questions qi 
yl yd 

vector zl 
zd zd 
note answer ql affirmative proceed half space xd answer affirmative proceed xd answers negative conclude original problem infeasible global minimum function answer questions somewhat tricky way 
consider dimensional problem minimize aid 
problem feasible vector yd cgl aij yj 
claim case answer negative 
follows fact vector zd cj zj vector xd suitable convex combination contradicts assumption minimizes function similarly vector cj zf aid answer negative 
procedure case summarized follows 
consider sets inequalities variables feasible infeasible conclude global minimum function original problem infeasible 
precisely feasible proceed half space corresponding feasible proceed xd feasible proceed xd 
completes description oracle 
note oracle may need solve dimensional problems possibly constraints 
number constraints usually nimrod megiddo smaller problems 
precisely cardinality sets greater assume 
problems oracle needs solve easy 

approach multidimensional search solving problems order reduce problem order problem order id total effort lp approach satisfies pl id nd 
proved induction exists constant lp 
seen 
implies iq 
interesting compare result epilogue questions raised regard average complexity simplex algorithm number variables tends infinity number constraints fixed 
answer highly sensitive probabilistic model adopted 
smale shown certain model average number pivot steps nf number constraints fixed 
approach reduce problem order order solving 
problems order incurring additional effort 
resulting total effort satisfies lp lp 

proved fixed lp logn unusual constant dz 
argument worst case complexity linear relies heavily fact find median linear time 
linear time median finding algorithms altogether practical 
practice simply select random element set critical values median 
appears best practical selection median random sample sample 
repeated independently times achieve expected linear time performance expectation relative random choices 
analysis close algorithm find see 
approach employ probabilistic selection algorithm required exact median 
hybrid multidimensional search picking recur better approaches search called may improve bounds 
acknowledgments 
fruitful discussions zvi galil gratefully edged 
author referees constructive comments 
note 
cited text 

aho hopcroft ullman design computer algorithms 
addison wesley reading mass 

bentley multidimensional divide conquer 
commun 
acm apr 
linear programming dimension fixed 
linear programming extensions 
princeton university press princeton 

duda hart pattern classification scene analysis 
wiley interscience new york 

floyd rivest expected time bounds selection 
commun 
acm mar 

convex polytopes 
wiley new york 

polynomial algorithm linear programming 
soviet math 
dokl 


klee simplex algorithm 
inequalities vol 

academic press new york pp 


knuth mathematical analysis algorithms 
information processing 
elsevier north holland new york pp 


binary encoding appropriate problem language relationship 
theor 
comput 
sci 

solving linear programming dimension fixed 
dept statistics tel aviv university april 

megiddo linear time algorithms linear programming related problems 
siam comput 
nov 

megiddo genuinely polynomial algorithm linear programming 
siam comput 
may 

computer pattern recognition 
academic press new york 

solutions multidimensional divide conquer recurrences 
algorithms 

rice approximation functions 
vol 
linear theory 
addison wesley reading mass 

paterson pippenger finding median 
comput 
syst 
sci 


shamos computational geometry 
ph dissertation dept computer science yale univ new haven conn 

smale average speed simplex method linear programming 
appear math 
program 
journal association computing machinery vol 

january 
