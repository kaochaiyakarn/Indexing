appears annual workshop duplicating deconstructing june 
deconstructing transactional semantics subtleties atomicity colin christopher lewis milo martin department computer information science university pennsylvania philadelphia pennsylvania usa lewis cis upenn edu researchers proposed software hardware support transactions replacement traditional lock synchronization common multithreaded programs 
transactions allow programmer specify region program appear execute atomically hardware runtime system optimistically execute transactions concurrently obtain high performance 
transactional abstraction promising approach creating faster simpler multithreaded programs 
transactions great potential simplifying multithreaded programming due strong atomicity guarantees shows guarantees unexpected potentially serious negative effects programs written assuming weaker synchronization primitives 
contributions show direct translation statically dynamically lock critical sections transactions introduce deadlocks correct programs define atomicity model transactions introduce terms strong weak atomicity show decision enforce strong atomicity opposed weak atomicity result deadlock 
results invalidate intuitive idea transactions strictly safer lock critical sections strong atomicity strictly safer weak atomicity 
assert research community confront subtle issues transactional semantics exploring design space deciding appropriate semantics transactional systems 
synchronization order impact correctness performance multithreaded programs locks currently prevailing synchronization mechanism 
locks guard regions code called critical sections preventing concurrent access shared data structures 
unfortunately effective programming lock synchronization delicate balancing act achieving high performance maintaining correctness 
coarse grained locking lock entire binary tree data structure gives rise simple programming paradigms 
resulting lock contention significantly limit scalability performance 
fine grained locking lock node binary tree reduce lock contention adds programming complexity increasing potential deadlock subtle data race bugs 
furthermore fine grained locks may increase overhead due frequent acquire release operations slow modern processors 
complicate matters programmers choose various lock implementations simple spin locks locks queue locks thread reentrant locks reader writer locks 
response performance complexity challenges locks researchers proposed hardware support synchronization transactions segments code atomic respect 
lock critical sections transactions mechanism mutual exclusion transactions simpler specifying atomicity naming lock efficiently implemented optimistically executing concurrently rolling back dynamically detected inter transaction conflicts 
combination intuitive interface efficient implementation potential solve lock related problems 
returning binary tree example encapsulating entire binary tree operation transaction simplicity implementation uses coarse grained locking scalable performance implementation uses fine grained locking efficiency avoiding fine grained locking overheads 
addition efficient implementations transactions potential replace various types locks spin locks queue locks reader write locks single powerful primitive 
transactions provide simpler approach creating wait free non blocking data structures 
elaborate various transactional proposals section 
transactions great potential un appears annual workshop duplicating deconstructing june 
covers subtle issues common misconceptions semantics 
particular investigate implications different forms atomicity 
show circumstances correct programs created assuming form atomicity lock critical sections deadlock run system supporting stronger form atomicity transactions 
main contributions show direct translation statically dynamically lock critical sections transactions introduce deadlock correct program 
unsafe simply transaction lock acquisition lock release 
proposal advocates direct conversion lock programs transaction programs 
section example show transformation safe general 
define atomicity models transactional systems 
researchers implemented differing policies handling interactions transactional non transactional code current definitions transactional semantics explicitly express differences 
define strong atomicity transactional semantics guarantees atomicity transactions non transactional code define weak atomicity transactional semantics guarantees atomicity transactions 
assert transactional system specify atomicity model explicitly shared memory multiprocessor specifies memory consistency model define memory ordering 
section discuss atomicity models 
show program correct weak atomicity model may deadlock strong atomicity model 
intuitive view stronger atomicity model correctly execute superset code correct weaker atomicity model false 
section show example strong atomicity negatively affect program correctness 
invalidates intuitive commonly held view transactions strictly safer lock critical sections strong atomicity strictly safer weak atomicity 
stronger atomicity restricts set legal program interleavings help programmer removing potentially buggy interleavings 
programmers may intentionally unintentionally exploit non atomicity critical sections guarded different locks non atomicity transactions non transactional statements producing programs require concurrent execution regions avoid deadlock 
background transactions transactions efficient synchronization primitive approach optimistic execution lock critical sections 
synchronization primitives researchers proposed hardware software support transactions transaction synchronization primitives 
proposals distinguished aspects policy mediating conflicts transactions non transactional code exactly execution semantics maximum size transaction programmer access memory differently transaction outside 
survey hardware software transactional systems focusing aspects 
supporting transactions hardware 
herlihy moss propose transactional memory means supporting lock free data structures 
inspired database transactions define transaction sequence instructions atomic serializable respect transactions transactions see changes atomically serial commit order observed processors 
system transactions execute speculatively roll back detecting conflict inter transaction data race 
speculative transactional state buffered caches conflict detection implemented extension standard multiprocessor cache coherence protocols 
general implementation strategy followed subsequent hardware proposals 
herlihy moss prescribe semantics conflicts transaction non transactional code 
notable aspect programmatic interface transactions semantics system causes transactions abort conflicts programmer responsible detecting abort retrying transaction 
maximum size transaction implementation specific fixed size hardware caches buffer speculative memory updates transactions committed 
major limitation herlihy moss original proposal transactional state buffered caches programmers aware cache size application cache behavior constructing transactions 
resent addressed limitation 
unbounded transactional memory utm supports transactions large virtual memory persist interrupts system requires substantial changes processor memory system 
propose large transactional memory ltm supports transactions large physical memory survive interrupts appears annual workshop duplicating deconstructing june 
ltm requires minor changes existing cache designs coherence protocols 
interestingly utm allows transactions interleave arbitrarily non transactional code ltm forces transaction abort conflict non transactional code 
virtual transactional memory thread level transactional memory go step locate memory resident speculative state buffers application virtual address space tying transactions threads applications processors 
hardware operating system requirements systems far modest 
stanford transactional coherence consistency tcc transaction basic unit parallel communication memory coherence memory consistency 
systems code reside transaction 
furthermore leverage cache coherence protocol tcc defines transaction grained coherence synchronization protocol 
tcc supports transactions unbounded size spilling overflowed hardware buffers memory overflowing transaction acquires permission commit completed permission longer needs buffer 
technique allows appear transactions 
unique aspect tcc programming model allows programmer explicitly specify ordering transactions supporting form thread level speculative style parallelization 
supporting transactions software 
researchers initially investigated transactional support software purpose building lock free non blocking data structures 
purpose shavit propose software transactional memory stm 
stm supports transactions data sets statically known 
herlihy propose dynamic software transactional memory dstm supports transactions access dynamic sets memory locations 
dstm programmer access object transaction explicitly opening transactional version object 
contrast proposals harris fraser propose stm support general purpose atomic construct similar spirit transactions 
programmer ordinary memory atomic region exactly semantics 
unfortunately performance overheads appear high compared hardware proposals 
complementary line research flanagan propose type systems statically verify atomicity lock critical sections 
type systems potentially reduce transactional memory system dynamically guarantee atomicity 
optimistic execution critical sections transactions may basis improving implementation lock critical sections 
transac tional lock removal tlr system increases performance dynamically converting lock critical sections transactions 
tlr extension speculative lock elision dynamically lock acquires executing critical sections speculatively buffering results hardware acquiring locks conflicts 
goal tlr avoid lock acquisition conflicts 
tlr uses timestamps provide ordering resolve conflicts acquiring locks 
tlr explicit policy mediating conflicts transactions non transactional code designers suggest extensions transactions atomic respect non transactional code 
tlr tries avoid acquiring lock revert acquiring lock buffer resources exhausted transaction exceeds scheduling quantum 
similar spirit define transactional monitors java 
name somewhat misnomer transactional monitors semantics ordinary java monitors difference execute speculatively buffered software roll back conflicts critical sections guarded monitor 
monitor conflict detection behavior important difference proposals tlr converts critical sections transactions atomic respect transactions 
critical sections transactions transactions promising replacement lock critical sections transactional proposals extended benefits transactional systems legacy lock programs directly converting critical sections transactions replacing lock acquires releases transaction operations respectively 
conversion changes program semantics critical section previously atomic respect critical sections guarded lock atomic respect critical sections 
section show semantic change cause correct lock programs deadlock 
result direct conversations may acceptable architectural studies system indiscriminately applies direct conversion backward compatible legacy programs 
assumption lock critical section transparently translated transactions natural conversion simply disallows previously legal interleavings contain concurrent execution critical sections guarded different locks introduce new interleavings 
disallowed interleavings unintuitive programmer 
example may produce data races due incorrect locking case conversion remove appears annual workshop duplicating deconstructing june 
bool false false mutex proc proc acquire acquire true true release release proc proc bool false false proc proc trans trans true true trans trans proc proc 
program benign data races executes correctly locking deadlocks directly converted transactions 
bugs 
correct program require disallowed interleavings progress 
program deadlock direct conversion indicating conversion safe 
presents short admittedly contrived program property 
code programmer intends proc proc reach lines marked reach line effecting barrier locks guard different shared variable accessed line proc proc respectively 
unprotected give rise benign data races may choose protect variables locks 
case programs operate intended protected different locks execution interleaved assuming pre emptive thread scheduling 
suppose directly convert critical sections transactions shown 
transactions inproc execute atomically respect meaning transaction appear execute 
restriction allows update proc observe proc update 
result program deadlock transactions unable progress loop 
example shows direct method converting lock programs transactions may result deadlock legal lock programs disallowing interleaving necessary progress 
observation impacts previous proposals 
example propose tool simply replace locks transactions tool convert lock programs evaluation ltm example shows tool unsound general 
contrast tlr policy system reverts acquiring lock transaction exceeds scheduling quantum 
fall back case result correct execution example believe general transactional deadlock eventually cause system revert lock execution 
emphasize intent exhibit real necessarily realistic program direct conversion unsafe show theoretically possible conversion cause deadlock 
practice conversion may safe 
system translates lock critical sections transactions assume translation safe determine lock critical regions conversion safe fallback method tlr 
determining direct translation safely applied open research issue 
interesting question direct translation correct program preserves partial correctness translated program property give correct answer gives answer 
true researchers focus detecting preventing deadlock livelock situations 
strong versus weak atomicity transactions clearly atomic respect relationship non transactional code clear 
ambiguity appear merely implementation detail expect shared data contained transactions 
legal programs may contain unprotected refer appears annual workshop duplicating deconstructing june 
bool false false mutex ma mb proc proc acquire acquire true acquire ma acquire ma true release ma release ma true break acquire mb release ma release mb break acquire mb true release mb release mb release release proc proc 
race free equivalent code 
ences shared variables outside transactions creating malignant data races transactional non transactional code refer data 
account cases atomicity models 
define strong atomicity transaction semantics transactions execute atomically respect transactions non transactional code define weak atomicity semantics transactions atomic respect transactions execution may interleaved non transactional code 
atomicity model transactional system analogous memory consistency model traditional shared memory multiprocessor 
memory consistency model defines observable orderings memory operations threads 
strong memory consistency model limits observable reordering memory operations easiest reason programmers difficult implement efficiently 
contrast weak relaxed memory consistency model allows counter intuitive reordering memory operations complex programmers reason requires explicitly insert memory barriers enforce ordering 
weak ordering models easier implement efficiently 
similarly strong atomicity provides simple intuitive view transactional atomicity may difficult implement efficiently especially software transactional systems 
contrast weak atomicity provides intuitive model transactions may appear atomic interleaved non transactional code may easier implement efficiently 
interestingly transactional systems shared memory systems systems define transactional atomicity model memory consistency model previously interactions 
just early shared memory multiprocessors explicitly address memory consistency issues current transactional memory explicitly consider distinction implications strong weak atomicity 
model specified seemingly arbitrarily published description utm ltm believe utm provides weak atomicity ltm provides strong atomicity tlr provides strong atomicity lock critical sections interleave arbitrarily code lock form atomicity left unspecified herlihy moss original definition transactional memory semantics fully specify resolves interactions transactional non transactional code 
tcc avoids issue altogether code contained transaction 
code assuming weak atomicity break strong atomicity common implicit assumption program executes correctly weak atomicity execute correctly strong atomicity 
assumption true programs correct weak atomicity deadlock strong atomicity 
program executing weak atomicity interleave non transactional code arbitrarily transactional code interleavings may necessary program progress 
system provides strong atomicity interleavings allowed program may deadlock result 
example consider concurrently executing procedures 
programmer intends threads proceed coordinated way shared effecting barrier 
weak atomicity program execute correctly threads reads writes interleave arbitrarily threads proceed programmer intended 
consider occurs program executing strong atomicity 
loop labeled inproc terminate transaction proc propagates update transaction commits transaction proc commit update labeled executes loop labeled 
resulting circular dependency causes program deadlock strong atomicity despite correctly executing weak atomicity 
appears annual workshop duplicating deconstructing june 
bool false proc proc trans 
true true 
trans proc proc 
program executes correctly weak atomicity deadlocks strong atomicity 
example illustrates need transactional memory systems specify strongly atomic weakly atomic implement semantics precisely 
example consider program deadlock ltm execute correctly utm designers claim systems similar semantics tlr fallback mechanism reverting lock acquires transaction exceeds scheduling quantum save deadlock lock programs similar example 
programmer believes transactional system strongly atomic weakly atomic programmer may write buggy program due race conditions transaction non transactional code program locks transactions 
conversely program written assumption transactional system weakly atomic fact implements strong atomicity program may deadlock relies transactions non atomic respect non transactional code 
model serve safe common denominator target programmers 
open questions main contribution counter intuitive observation programs execute correctly certain guarantees atomicity break executing stronger guarantees 
transactions consider observation proposing transparent strengthening atomicity policies 
illustrated situation showing ways phenomenon occur 
transactions strictly subsume lock guarded critical sections sense program works correctly locks correctly directly converted transactions 
stronger guarantees trans actions provide result different requirements correct execution locks enforce atomicity segments code guarded lock transactions enforce atomicity concurrent transactions 
program depends non atomicity critical sections guarded different locks may break converted transactions 
second introducing atomicity non transactional transactional code break program correctly executes non transactional code interleave transactions 
system specify policy atomicity transactions non transactional code part transactional semantics 
introduced definitions transactional atomicity models 
define strong atomicity transactional semantics gives guarantee atomicity transactions code weak atomicity transactional semantics guarantee 
assert designers transactional memory systems state explicitly implementing strong atomicity weak atomicity 
subtleties atomicity suggest important implications 
users transactions programmers automatic conversion tools aware exact semantics supported system 
lead incorrect programs 
second exist standard semantics transactions threatens utility synchronization mechanism 
different systems provide different transactional semantics programs portable programmers resort portable primitives locks 
raises questions 
theoretical program examples give rise problems describe types codes arise practice 
possible build tools determine statically dynamically safe convert lock critical section transaction 
benefits drawbacks strong atomicity weak atomicity 
single transactional semantics appropriate applications implementations 
different semantics necessary 
hope researchers investigate questions 
presents additional challenges designers transactional systems continue believe transactional systems promising approach addressing difficulties programming tightly coupled multiprocessor multithreaded systems 
hope critical treatments practical aspects transactions contribute successful implementation evaluation abandonment 
appears annual workshop duplicating deconstructing june 
acknowledgments 
authors mark hill christos ravi craig zilles anonymous reviews helpful comments drafts particular mark hill raised question direct conversion locks transactions maintains partial correctness 
funded part nsf award gifts intel 
lewis supported nsf career award 
sarita adve kourosh gharachorloo 
shared memory consistency models tutorial 
ieee computer december 
scott bradley charles leiserson sean lie 
unbounded transactional memory 
international symposium high performance computer architecture pages 
cormac flanagan stephen freund marina 
type inference atomicity 
types language design implementation pages 
cormac flanagan qadeer 
type effect system atomicity 
programming language design implementation pages 
cormac flanagan qadeer 
types atomicity 
types language design implementation pages 
lance hammond brian wong ben hertzberg mike chen christos olukotun 
programming transactional coherence consistency tcc 
international conference architectural support programming languages operating systems pages 
lance hammond wong mike chen brian john davis ben hertzberg prabhu christos olukotun 
transactional memory coherence consistency 
international symposium computer architecture pages 
tim harris fraser 
language support lightweight transactions 
object oriented pro gramming systems languages applications pages 
maurice herlihy victor mark moir william scherer iii 
software transactional memory dynamic sized data structures 
principles distributed computing pages 
maurice herlihy eliot moss 
transactional memory architectural support lock free data structures 
international symposium computer architecture pages 
mark hill 
multiprocessors support simple memory consistency models 
ieee computer august 
kevin moore mark hill david wood 
thread level transactional memory 
technical report department computer sciences university wisconsin march 
ravi james goodman 
speculative lock elision enabling highly concurrent multithreaded execution 
international symposium microarchitecture pages 
ravi james goodman 
transactional lock free execution lock programs 
international conference architectural support programming languages operating systems pages 
ravi maurice herlihy konrad lai 
virtualizing transactional memory 
international symposium computer architecture 
nir shavit dan 
software transactional memory 
principles distributed computing pages 
adam suresh jagannathan antony hosking 
transactional monitors concurrent objects 
european conference object oriented programming pages 
craig zilles david flint 
challenges providing performance isolation transactional memories 
annual workshop duplicating deconstructing june 
