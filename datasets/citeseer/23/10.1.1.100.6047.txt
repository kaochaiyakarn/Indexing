exokernel operating system architecture application level resource management dawson engler frans kaashoek james toole jr laboratory computer science cambridge ma describe operating system architecture securely multiplexes machine resources permitting unprecedented degree application specific customization traditional operating system abstractions 
abstracting physical hardware resources traditional operating systems significantly limited performance flexibility functionality applications 
exokernel architecture removes limitations allowing untrusted software implement traditional operating system abstractions entirely application level 
implemented prototype exokernel system includes aegis exokernel exos untrusted application level operating system 
aegis defines low level interface machine resources 
applications allocate machine resources efficiently handle events participate resource revocation 
measurements show primitive aegis operations times faster ultrix mature monolithic unix operating system 
exos implements processes virtual memory inter process communication abstractions entirely library 
measurements show exos application level virtual memory ipc primitives times faster ultrix primitives 
results demonstrate exokernel operating system design practical offers excellent combination performance flexibility 
operating systems define interface applications physical resources 
unfortunately interface significantly limit performance implementation freedom applications 
problem arises operating system abstracts details hardware resources provide portable full featured interface directly implemented hardware 
result full featured interface approach resource supported part advanced research projects agency contracts nsf national young investigator award 
march engler kaashoek james lcs mit edu management strongly centralized 
centralized management conflict application needs limiting performance flexibility 
believe problems solved distributed application level resource management 
designed kernel securely multiplexes machine resources permits traditional operation system abstractions implemented efficiently application level easily extended specialized replaced 
traditionally operating systems hide information machine resources high level core abstractions choosing particular implementations abstractions processes file system storage address spaces inter process communication exception handling core abstractions define virtual machine applications execute implementation replaced untrusted applications 
believe fixing implementations traditional operating system abstractions unacceptable denies applications advantages domainspecific optimizations 
important restricts flexibility application builders adding new resource abstractions operating system resort emulating new abstraction top high level core abstractions 
substantial evidence exists applications benefit greatly having control machine resources implement higher level abstractions 
appel reported high cost general purpose virtual memory primitives reduces performance persistent stores garbage collectors distributed shared memory systems :10.1.1.12.2903:10.1.1.12.2903
cao demonstrated application level control file caching reduce number operations :10.1.1.117.6702
cheriton krueger showed application specific virtual memory policies increase application performance :10.1.1.128.442:10.1.1.100.6047
stonebraker demonstrated inappropriate file system implementation decisions dramatic impact performance databases 
thekkath showed deferring signal handling applications cost exceptions reduced order magnitude 
designed new operating system architecture traditional operating system abstractions imple mented entirely application level untrusted software 
architecture exokernel securely multiplexes available hardware resources 
exokernel applications securely bind machine resources efficiently handle events participate resource revocation protocol 
exokernel interface low level implemented extremely efficiently 
library operating systems working exokernel interface implement higher level abstractions define special purpose implementations best meet performance functionality goals applications 
implemented prototype exokernel system includes exokernel aegis untrusted library operating system exos 
system demonstrates important properties exokernel architecture low level secure multiplexing hardware resources implemented efficiently 
traditional core abstractions implemented efficiently application level 
applications create special purpose implementations core abstractions 
practice implementation provides applications greater flexibility better performance monolithic system 
aegis low level interface allows applicationlevel software exos manipulate resources efficiently 
aegis protected control transfer times faster best reported implementation :10.1.1.158.4191
aegis exception forwarding control transfers close times faster ultrix mature monolithic system identical hardware 
efficiency exos able implement virtual memory entirely application level 
aegis permits exos application level software flexibility available microkernel systems 
aegis efficient protected control transfer allows applications trade wide array ipc semantics differ performance factor 
contrast microkernel systems amoeba chorus mach allow untrusted application software define specialized ipc primitive virtual memory message passing services implemented kernel trusted servers :10.1.1.35.4167:10.1.1.131.2105:10.1.1.121.2679
similarly microkernel abstractions page table structures process abstractions fixed 
hardware resources microkernel systems network screen disk encapsulated heavy weight servers bypassed tailored application specific needs 
focus exokernel architecture designed implemented securely efficiently 
remaining sections provide detailed case section discuss issues arise design section implementation draft copy distribute cite 
summarize performance measurements aegis exos sections discuss global optimizations section summarize related section report section 
motivation traditionally operating systems centralized resource management set core abstractions specialized extended replaced 
provided kernel trusted user level servers core abstractions implemented privileged software applications changed untrusted software 
typically core abstractions defined operating system include processes file storage address spaces inter process communication 
section argue fixing implementation high level abstractions reduce performance increase complexity limit functionality application programs 
give argument exokernel architecture discuss role applicationlevel library operating systems 
cost core abstractions application performance suffers single way physical resources implement core abstraction best applications 
implementing core abstraction operating system forced trade offs support sparse dense address spaces read intensive write intensive workloads trade penalizes applications applications suffer behavior predictable 
relational databases garbage collectors predictable data access patterns performance suffers general purpose page replacement strategy lru imposed operating system 
high level core abstractions hide information application level untrusted software 
example current systems low level exceptions timer interrupts raw device directly available applications 
unfortunately hiding information difficult impossible applications implement resource management abstractions 
example database implementations struggle emulate random access record storage top file systems 
implementing light weight threads top heavy weight processes usually requires compromises correctness performance operating system hides page faults timer interrupts :10.1.1.13.9310
cases complexity applications increases difficulty getting performance high level core abstractions 
core abstractions limit functionality applications available interface applications hardware resources 
applications share core abstractions changes core abstractions occur rarely 
ideas decade operating systems research adopted widespread 
operating systems support scheduler activations multiple protection domains single address space efficient ipc efficient flexible virtual memory primitives :10.1.1.128.442:10.1.1.158.4191:10.1.1.13.9310:10.1.1.12.2903
argument essential observation core abstractions traditional operating systems overly general 
traditional operating systems attempt provide features needed applications 
previously noted lampson anderson massalin general purpose implementations core abstractions force applications need feature pay substantial overhead costs :10.1.1.13.9310
longstanding problem important explosive improvements raw hardware performance enormous growth diversity application software base 
familiar argument applies low level operating system software low level communications protocols :10.1.1.35.4167
applications know better operating systems goal resource management decisions control possible decisions 
proposed solution new operating system architecture traditional abstractions implemented entirely application level 
provide maximum application level resource management exokernel architecture consists thin exokernel veneer multiplexes physical resources securely library server operating systems implement system objects policies see 
structure allows extension specialization replacement abstractions 
example page table structures vary different applications 
best knowledge secure operating system architecture gives applications useful freedom 
expect exokernel structure effective way address problems listed section 
efficient implementation basic abstractions application level solves conflicts application needs available abstractions resolved intervention kernel architects 
furthermore kernel multiplexes resources implementation simple 
secure multiplexing require complex algorithms requires tables keep track ownership 
simple kernel improves reliability ease maintenance consumes resources enables quick adaptation new requirements gigabit networking 
furthermore true risc architectures simplicity exokernel operations allows implemented efficiently 
draft copy distribute cite 
application application library operating system application library operating system library operating system exokernel hardware example exokernel system consisting thin exokernel veneer multiplexes physical resources library operating systems linked application 
library operating system implements system objects policies 
library operating systems addition providing flexibility efficiency exokernel system number potential implementation performance advantages 
library operating systems need multiplex resource competing applications widely different demands implementation specialized simpler corresponding kernel level implementations 
addition libraries trusted exokernel free trust application 
example application passes wrong arguments library application affected 
number kernel transitions exokernel system smaller operating system running address space application 
unprecedented implementation freedom available applications exokernel system may create portability compatibility problems 
software uses exokernel interface directly portable interface include hardware specific information 
library operating systems low level machinedependent layer hide hardware details implement industry standard posix interfaces 
short library operating systems provide portability desirable applications 
operating systems application running exokernel freely replace library operating systems needing special privileges simplifies development new standards features anticipated kernel architects 
library software provides applications higher level operating system services considerably simplified modular design 
possible objectoriented programming methods overloading inheritance provide useful operating system service imple easily specialized extended anderson vm library :10.1.1.100.6047
control space libraries support shared libraries dynamic linking essential part complete exokernel system 
backward compatibility provided microkernel systems 
viable solutions exist binary emulation operating system programs porting operating system implementing hardware abstraction layer top exokernel re implementing operating system core abstractions top exokernel 
approaches exokernel system 
exokernel design order allow applications extend specialize replace traditional operating system abstractions exokernel architecture designed untrusted software efficiently implement basic operating system services application level 
exokernel design philosophy encourages distributed control traditional operating systems tend centralize resource control core abstractions exokernel strives give resource control applications 
enable untrusted application level software implement higher level abstractions efficiently exokernel interface secure permit direct efficient control hardware resources 
exporting resources exokernel responsibility important tasks tracking ownership resources performing access control guarding usage binding points ensure security violated revoking access resources 
section explore design general giving overview main tasks performed exokernel principles guided approach 
discuss detail central issues exokernel design secure multiplexing resource revocation 
design principles central tenet exokernel kernel manage resources required protection 
instance exokernel designer strives safely export privileged instructions hardware dma capabilities machine resources 
resources exported provided underlying hardware physical memory cpu disk memory translation look aside buffer addressing context identifiers interrupt trap events 
exokernel specify details interface applications claim release machine resources 
principles guided efforts design exokernel interface provides applications maximum degree control expose hardware permit complete fine grained draft copy distribute cite 
allocation hardware resources privileged hardware operations 
expose names define enumerable resource namespaces allocate specific physical resources 
expose events provide visible resource revocation protocol allows behaved applications respond scarcity controls rogue applications 
exokernel allow applications allocate resources physical memory processor hardware devices 
resources finely subdivided multiple applications particular pieces resource 
resources subdivided time subdivided typically tracking ownership expensive infeasible 
example mips processor general purpose registers best allocated entirely single application time subdividing registers inconvenient 
sparc processor useful allocate register windows individually 
number format current set tlb mappings visible replaceable applications privileged processor state 
exokernel export privileged instructions applications enable implement traditional operating system abstractions processes address spaces 
exported operation encapsulated system call checks ownership resources involved 
hardware resources named physical names 
physical names easy implement kernel perform translation 
furthermore physical names encode useful resource attributes 
instance system direct mapped caches name physical page page number determines pages conflicts 
applications request specific physical pages reduce cache conflicts pages working set 
hardware namespaces enumerable applications applications tailor requests available resources 
resource revocation visible applications support lightweight application level resource management 
example allows physical names easily permits applications respond rapidly loss physical resources 
secure resource multiplexing primary tasks exokernel multiplex resources securely meaning mutually applications access resources 
resources physical memory cpu tlbs addressing context identifiers traps multiplexed simple access control mechanisms 
exokernel enforce security checking access privileges time resource 
providing low level protection checking exokernel enables mutually applications access resources directly 
exokernel know ownership access privileges high level objects files directories windows network connections 
complex semantics associated resources determined application level software 
secure binding control access protected hardware resources 
secure binding decouples application level access authorization decisions low level protection checking 
application binds resource complex access control calculations may required need performed exokernel 
securely binding resource means gaining controlled access resource operations efficiently checked recourse high level authorization information 
example file server buffer data memory pages access authorized applications providing capabilities physical pages 
exokernel enforce capability checking needing information file system access control mechanisms 
discuss idea applies secure multiplexing memory frame buffers network devices 
multiplexing physical memory secure bindings physical memory implemented self authenticating capabilities address translation hardware 
application allocates physical memory page exokernel creates secure binding page recording owner read write capabilities specified application 
owner page power change capability deallocate 
ensure protection exokernel guards access physical memory page requiring capability application requesting access 
capability insufficient request denied 
typically processor contains translation look aside buffer tlb exokernel check memory capabilities application attempts enter new virtual physical mapping 
underlying hardware defines page table interface exokernel guard page table tlb 
details implement secure memory vary depending details address translation hardware basic principle straightforward 
privileged machine operations tlb loads dma guarded exokernel 
capabilities secure resource access enables applications access rights applications kernel intervention 
applications known capabilities share resources easily 
overhead capabilities fairly small 
example bit capabilities kilobyte page space overhead 
break secure binding exokernel change draft copy distribute cite 
associated capabilities mark resource free 
case physical memory exokernel flush tlb mappings queued dma requests 
practice operations deferred resource reallocated cost tlb flush operations amortized 
multiplexing frame buffer device multiplexing presents problems organic nature complex device interfaces assigning ownership pieces device difficult detailed knowledge device 
devices disk drives partitioned capability method similar physical memory 
value centralized scheduling policy may desirable assign ownership entire device single application 
device hardware contains low level protection mechanism implement secure binding efficiently 
example silicon graphics frame buffer hardware associates ownership tag pixel 
mechanism window manager set binding application portion frame buffer 
application access frame buffer hardware directly hardware checks ownership tag takes place 
similarly label feature xerox alto disk device exokernel cheaply implement secure bindings individual disk blocks 
multiplexing network hardware capability support efficiently multiplex device secure bindings implemented exokernel 
seen exokernel maintain software capabilities physical memory page check capabilities tlb operations attempted 
network devices offer greater challenge protocol specific knowledge normally required identify packet ownership 
cases network hardware may offer uniform way demultiplex incoming data stream 
example atm cells contain virtual circuit identifier uniquely identify application receive data 
general protocol specific knowledge interpret contents incoming messages identify intended recipient 
packet filters simple security precautions distribute incoming messages applications incorporating protocol specific knowledge exokernel :10.1.1.36.8755
sharing network interface relatively easier 
transmission buffers allocated shared protected exokernel just easily physical memory pages 
applications map message transmission buffers address space suggested druschel revocation exokernel pushes resource management application level 
resources allocated applications way reclaim 
revocation invisible visible applications 
traditionally operating systems performed revocation invisibly deallocating resources application involvement 
example exception external pagers operating systems deallocate allocate physical memory informing applications 
form revocation lower latency visible revocation requires application involvement 
disadvantage applications control deallocation knowledge resources scarce 
exokernel uses visible revocation resources 
processor explicitly revoked time slice application react saving required processor state 
example application avoid saving floating point state registers live 
situations invisible revocation performs better revocations occur frequently 
processor addressing context identifiers stateless resource may revoked frequently best handled invisible revocation 
revocation physical naming behaved applications expected give resources requested exokernel call interaction revocation access relinquished resources prevented exokernel 
revocation interesting trade offs applications physical names refer resources 
main constraint physical names places exokernel revocation revealed application 
application notified properly manage loss resource 
example application relinquishes physical page update page tables refer page 
easy application chooses deallocate resource reaction exokernel revocation request 
view revocation process dialogue exokernel application 
applications library operating systems responsible organizing resource lists resources deallocated quickly 
example application simple vector physical pages owns kernel indicates page deallocated pages writes disk frees 
revocation protocol allow application exokernel aware faith operations writing page disk preparation deallocation 
draft copy distribute cite 
abort protocol exokernel able take resources applications fail respond satisfactorily revocation requests 
exokernel define second stage revocation protocol revocation request please return memory page imperative return page micro seconds 
application fails respond quickly emergency action taken 
rejected idea simply killing application fails respond quickly revocation requests believe programmers great difficulty reasoning hard real time bounds 
expect rule unnecessarily strict 
application fails comply revocation protocol abort protocol defines action exokernel take 
exokernel take resources away force inform application 
record forced loss resource vector 
exokernel takes resource application fact registered vector application receives exception update mappings resource 
resources state exokernel write state memory disk resource 
preparation application pre load vector list resources purpose 
example provide names capabilities disk blocks backing store physical memory pages 
complication exokernel arbitrarily choose resource example application uses physical memory store vital bootstrap exception handlers page tables 
simplest way deal guarantee application small number resources physical memory pages 
resources emergency exception tells application submit swap server required 
summary discussed design guidelines 
main task exokernel securely expose machine resources applications 
exokernel employs access control secure bindings achieve goal safely 
allow effective application level resource management exokernel uses physical names visible resource revocation 
abort protocol protect uncooperative applications 
aegis exokernel section section describe software systems follow principle exposing hardware functionality aegis prototype exokernel exos prototype exos 
emacs doom aegis draft copy distribute cite 
vm dos aegis securely multiplexes hardware resources exported library operating systems 
exos library operating system implements processes virtual memory user level exceptions various interprocess abstractions 
library operating system see fig 

prototype exokernel built experimental shared memory multiprocessor supporting parallel operating system library 
differs aegis details implement fewer hardware resources share basic exokernel design 
key difference exos supports multiple page tables inverted shared memory hierarchical local memory 
focus aegis exos 
outline section follows discuss experimental environment 
discuss aegis implementation 
included discussion experiments test efficacy exokernel approach 
addition compare performance aegis performance ultrix mature monolithic unix operating system 
important note aegis offer level functionality ultrix disk support rudimentary software 
expect additions cause large fluctuations measurements emphasize widely robust implementation entire user community moment people 
performance results aegis test hypothesis low level multiplexing expensive 
experiments indicate cost flexibility exokernel system negligible easily 
fact low level nature exokernel allows basic operations implemented order magnitude efficiently ultrix 
section describes exos presents results supporting hypotheses 
experimental configuration run experiments decstation mips family machine configurations shown 
machine configurations get tentative measure scalability exokernel 
times measured wall clock clock machine specint mips memory dec mhz mb dec mhz mb experimental platforms unix implementations micro second counter exokernel 
exokernel time quantum set milliseconds 
benchmarks compiled identical compiler flags gcc version optimization flags 
benchmarks floating point instructions save floating point state 
systems run single user mode 
experiments measured performing large number trials dividing number get base cost single operation 
measurements consider cold start misses cache tlb represent best case 
ultrix larger cache virtual memory footprint aegis making form measurement favorable exokernel 
additionally experiments loop unrolling minimize looping overhead 
overhead equivalent systems performance gains system obtains ultrix 
believe difference performance systems conservative 
closing note ultrix despite poor performance relative aegis poorly tuned system 
mature monolithic system performs quite comparison research operating systems 
example performs times better mach set benchmarks :10.1.1.158.4191
virtual memory performance approximately twice mach times mach :10.1.1.12.2903:10.1.1.12.2903
benchmarks extremely sensitive instruction cache conflicts 
cases effects amounted factor performance penalty 
changing order exos object files linked sufficient remove conflicts 
happy side effect application level libraries object code rearrangement extremely straightforward makefile edit 
furthermore instruction cache tools conflicts application library operating system code removed automatically option available applications traditional operating systems 
believe large impact instruction cache conflicts due fact aegis operations performed near hardware speed result minor conflicts noticeable 
aegis overview table lists subset aegis interface 
discuss implementation system calls section 
addition system calls listed table aegis supports set primitive operations encapsulate privileged instructions see examples 
primitive operations viewed pseudo system call description yield yield processor synchronous protected control transfer asynchronous protected control transfer alloc allocation resources page deallocation resources dma dma calls discussed clock calls related clock subset aegis system call interface 
instructions similar alpha 
subsection examine aegis protects time slices environments resources protected described previous section 
processor time slices cpu representation unique deserves brief discussion 
aegis treats cpu space multiplexed device represented linear vector element corresponds time slice 
time slices partitioned clock granularity allocated manner similar physical memory 
scheduling done round robin cycling vector time slices 
crucial property representation position encodes ordering approximate upper bound time slice run 
position meet deadlines trade latency throughput 
example long running scientific application allocate contiguous time slices order minimize overhead context switching interactive application allocate equidistant time slices order maximize responsiveness 
timer interrupts denote delivered manner similar exceptions register saved interrupt save area exception program counter loaded aegis jumps user specified interrupt handling code interrupts re enabled 
application handlers responsible general purpose context switching saving restoring live registers releasing locks flexibility framework provides allows number optimizations 
example code implement efficient uni processor synchronization moving pc program counter critical sections context switching time 
fairness provided bounding time application takes save context subsequent timer interrupt primitive operations description insert mapping tlb enable disable fpu install context identifier delete virtual address tlb sample aegis primitive operations 
draft copy distribute cite 
recorded threshold exceeded environment destroyed 
mature implementation kernel simply context switch application hand time slice selected run record checked value non zero count decremented time slice skipped value zero time slice initiated 
simple scheduler support wide range higherlevel scheduling policies 
example server enforce proportional sharing lottery scheduling collection sub processes allocating number time slices time slice initiated server determines sub process run enables performing yield system call chosen process :10.1.1.129.159
exokernel efficient implementation allows high level schedulers perform operations minimal overhead 
processor environments aegis processor environment structure stores information needed deliver events applications 
resource consumption associated environment aegis deliver events associated resource designated owner 
kinds events delivered aegis exception interrupt protected control transfer address translation 
processor environments contain contexts required support events exception context includes starting program counter addresses pointer physical memory saving registers exceptions 
interrupt context includes interrupt vector program counter values register save regions dispatching interrupts 
timer interrupts interrupt context specifies separate program counters start time slice timeslice cases status register values control coprocessor interrupt enable flags 
protected entry context specifies legal program counter values synchronous asynchronous protected control transfers applications 
aegis allows processor environment transfer control access control managed application 
addressing context consists set guaranteed address translations application relies page tables exception handling code exception stacks address space identifier status register tag hash aegis software tlb see section 
switch environment aegis install values 
event handling contexts required define process 
context depends validity example addressing context sense exception context define action take exception interrupt occurs 
machine os procedure call syscall getpid dec ultrix dec aegis dec ultrix dec aegis null procedure system call 
aegis paths stack stack 
times micro seconds basic costs base cost null procedure system calls shown 
null procedure call sanity check minimal operating system requirements operating systems 
shows aegis scheduling flexibility add overhead base operations 
aegis system call paths system calls require stack 
exception protected control transfers efficiency aegis system calls vectored paths 
ultrix approximately order magnitude slower aegis slowest system call path suggests base cost demultiplexing system calls noticeably higher ultrix 
part reason ultrix efficient basic operation performs expensive demultiplexing operation 
example mips kernel tlb faults vectored fault handler system calls 
ultrix take great care disturb registers required patch interrupted tlb aegis map data structures page tables avoid intricacies 
expect common case quite small require paging kernel text code 
exceptions aegis forwards applications hardware exceptions save system calls interrupts techniques similar described thekkath 
forward exception aegis performs actions 
saves scratch registers agreed save area 
avoid tlb exceptions aegis operation physical addresses 

loads exception program counter virtual address failed valid translation cause exception 

uses exception cause perform indirect jump application counter value execution resumes appropriate permissions set user mode enabled 
draft copy distribute cite 
machine os overflow prot dec ultrix 
dec aegis dec ultrix 

dec aegis trap benchmarks times micro seconds processing exception applications immediately resume execution entering kernel 
ensuring applications return exceptions kernel intervention requires exception state available user reconstruction 
means registers saved user accessible memory locations fast exceptions enable number intriguing applications :10.1.1.12.2903
example efficient page protection traps applications distributed shared memory systems persistent object stores garbage collectors :10.1.1.12.2903
general operations done inserting explicit checks code hardware page protection emulated checking load store 
obvious advantage exceptions explicit checks efficiency 
subtle advantage explicit checks requires compiler support 
writing tuned correct compiler portable generates efficient code difficult problem eliminating requirement aids efficient simple implementation operations 
currently aegis dispatches exceptions instructions 
low level nature aegis allows extremely efficient implementation exception forwarding requires times fewer instructions highly tuned implementation literature 
part reason improvement aegis mapped data structures carefully separate kernel tlb misses general class exceptions exception demultiplexing routine 
test aegis overhead exceptions unaligned pointer accesses arithmetic overflow overflow attempted floating point coprocessor disabled access protected pages prot 
times available ultrix kernel attempts fix unaligned access writes error message standard error 
additionally ultrix allow applications disable processors utilize exception 
times 
careful tuning exception path aided minimal kernel functionality aegis provides allows traps dispatched approximately orders magnitude faster ultrix 
address translations look problems supporting application level virtual memory avm bootstrapping efficiency 
exokernel provide support bootstrapping virtual naming system supporting application page tables exception code 
aegis provides simple bootstrapping mechanism small number guaranteed mappings 
application virtual address space partitioned segments 
segment holds normal application data code 
second segment hold exception handling code page tables exokernel allows mappings second segment pinned guaranteed mappings 
guaranteed mapping handled automatically aegis 
frees application dealing intricacies boot strapping tlb exception handlers take tlb misses 
tlb actions occur 
aegis checks segment virtual address resides 
standard user segment exception forwarded directly application 
second region aegis checks see guaranteed mapping installs tlb entry continues forwards application 

application looks virtual address structure access allowed raises appropriate exception segmentation fault 
mapping valid application constructs appropriate tlb entry associated capability invokes appropriate exokernel system routine 

aegis checks capability corresponds access rights requested application 
mapping installed tlb control returned application 
error returned 

application performs cleanup resumes execution 
obvious challenge supporting avm making fast 
primary bottleneck overcome cost tlb 
overlaying hardware tlb large software tlb absorb capacity misses 
tlb aegis checks see required mapping aegis installs resumes execution 
forwarded application 
aegis currently uses unified 
improve hashing coverage decrease number tlb flushes occur context identifiers recycled process associated bit tag field field constant environment life time recycled infrequently 
tag compute hash function xoring virtual addresses lookup decrease likelihood worst case hashing collisions tag selected randomly collection tags 
contains entries bytes direct mapped resides unmapped physical memory hit replaces desired mapping instructions 
looking base system call draft copy distribute cite 
machine os matrix dec ultrix dec aegis dec ultrix dec aegis matrix multiplication time seconds cost see replacing tlb mapping microseconds approximately factor expensive doing application level upcall system call 
compared single level page table supported mach requires additional load order check virtual address space tag 
load resides cache line mapping add additional cache overhead 
avoid worst case behavior direct mapped move way set associative structure implementation matures pa risc operating systems 
dictated exokernel principle exposing kernel book keeping structures mapped wellknown capability allowing applications efficiently probe entries overhead application level memory measured performing matrix multiplication 
naive version matrix multiply special abilities exos aegis page coloring reduce cache conflicts expect perform equivalently operating systems 
times give tentative indication application level virtual memory add noticeable overhead operations large virtual memory footprints 
course hardly conclusive proof see section discussion exos virtual memory system 
protected control transfers aegis provides protected control transfer mechanism substrate implementing efficient ipc mechanisms :10.1.1.158.4191
operationally protected control transfer changes program counter agreed value callee current time slice callee processor environment installs required elements callee processor context addressing context identifier address space tag processor status word 
aegis provides forms protected control transfers synchronous asynchronous 
difference happens processor time slice 
asynchronous calls donate remainder current time slice callee 
synchronous calls current time slice period instantiations callee return time slice synchronous control transfer call back original caller 
forms os machine transfer aegis dec mhz mhz normalized aegis dec mhz mhz normalized protected control transfer overhead times micro seconds control transfer guarantee important properties applications protected control transfer atomic aegis overwrite application visible register allowing large register set modern processors temporary message buffer 
currently synchronous protected control transfer operation costs instructions 
roughly instructions required order distinguish system call exception hardware exceptions mips architecture 
remaining instructions benefit additional optimizations 
aegis implements minimum required control transfer mechanism applications introduce additional protection checks required 
example control transfers clients trusted servers optimized server save restore registers uses requiring client save restore entire register state call 
appears provide similar ipc semantics :10.1.1.158.4191
measure bare bones overhead protected control transfer mechanism 
times micro seconds derived dividing time perform call reply measure time perform uni directional control transfer 
measured trusted control transfer callee saves restores registers uses 
measurements include overhead cost incrementing counter performing branch due measurement code 
performance aegis shown orders magnitude faster similar operation available ultrix fact order magnitude efficient getpid 
attempt crude comparison protected control transfer operation rpc mechanism 
implementation fastest published result runs intel :10.1.1.158.4191
scaled published results mips rating decstation 
aegis trusted control transfer mechanism performs times faster trusted rpc mechanism 
tuned aegis protected control transfer implementation aggressively architectural characteristics mips main determinants better performance relative 
example pays heavy draft copy distribute cite 
penalty enter leave kernel cycles respectively 
base cost high aegis code deal required operations demultiplexing system call exception setting status processor address tag registers 
exos extensible os unusual aspect exos manages fundamental operating system abstractions virtual memory process mechanisms application level completely address space application 
best knowledge exos cache kernel general purpose library operating systems implemented multiprogramming environment 
cache kernel supports library operating systems primarily kernel simplification performance extensibility 
goal sections demonstrate basic system abstractions implemented application level direct manner specialization extensibility abstractions result substantial performance improvements 
due space constraints focus ipc virtual memory 
fast ipc abstractions fast inter process communication crucial building efficient decoupled systems :10.1.1.158.4191
described section aegis protected control transfer mechanism efficient substrate implementing fast ipc mechanisms 
measure efficiency ipc primitives constructed exos top aegis primitive 
pipe measures time needed send word sized message process pipes 
measured ping counter processes 
implementation uses standard unix pipe implementation 
exos pipe implementation uses shared memory circular buffer 
writes full buffers reads empty ones cause current time slice yielded current process reader writer buffer respectively 
implementation application level library kernel primitives system call primitives required construct application level virtual memory 
pipe implementations naive implementation second exploits fact library exists application space simply inlining read write calls 
exos unoptimized pipe implementation order magnitude efficient equivalent operation ultrix 
performance due efficient implementation aegis 
experiment measures time processes ping pong shared counter 
exokernel implementation uses aegis yield system call yield current time slice partners 
ultrix provide yield primitive acceptable efficiency draft copy distribute cite 
machine os pipe pipe opt lrpc dec ultrix 
dec aegis dec ultrix 
dec aegis achieved pipes emulate required functionality 
ipc tests difference exos ultrix large test exos times faster ultrix 
lrpc experiment measures time rpc address space increment counter return value 
exos lrpc built top exokernel protected control transfer mechanism 
implementations 
saves restores stack pointer called processor environment trusted server restore registers uses 
lrpc saves general purpose callee saved registers 
ultrix rpc mechanism emulated rpc server process waited known pipe client sends index server calls appropriate function returns result pipe 
implementations assume single function interest uses rpc number index table check permissions 
implementations single threaded 
exos untrusted lrpc ranges times faster ultrix trusted version ranges times faster order magnitude differential 
important reason difference efficiency control transfer mechanism 
summary aegis efficient protected control transfer yield mechanisms allow efficient ipc primitives constructed application level 
furthermore doing profitable exploiting application specific requirements rpc clients trusted servers characteristics application level simple inlining gives marked performance improvements 
application level virtual memory exos provides rudimentary virtual memory system size approximately lines heavily commented code 
main limitations handle swapping page tables implemented linear vector address translations looked structure binary search 
barring implementation constraints interface richer virtual memory systems know provides flexible support aliasing sharing disabling enabling caching page basis specific page allocation dma compare aegis exos ultrix virtual memory experiments appel ipc benchmarks times micro seconds li dirty measures time query page dirty :10.1.1.12.2903:10.1.1.12.2903:10.1.1.12.2903
require examination tlb measurement test base cost looking virtual address exos page table structure 
operation provided ultrix 
un prot measures time required change page protection single page 
prot measures time required read protect pages 
measures time required remove pages 
trap time take page protection trap 
appel time access random protected page fault handler protect page faulting page benchmark prot trap appel :10.1.1.12.2903:10.1.1.12.2903
appel time protect pages access page random sequence faulting page benchmark trap appel :10.1.1.12.2903:10.1.1.12.2903
note appel requires time appel appel protect different pages fault handler 
dirty measures average time parse page table random entry 
compare time required dirty time required perform un prot see half time spent un prot due overhead parsing page table :10.1.1.12.2903
overhead directly eliminated data structure tuned efficient lookup hash table 
penalty system performs operations close times faster ultrix 
reason difference shown aegis dispatches system calls order magnitude efficiently ultrix 
general exokernel system performs set benchmarks 
sole exceptions prot 
ultrix extremely efficient protecting contiguous ranges virtual addresses performs efficiently aegis operations 
reason difference immaturity implementation changing page draft copy distribute cite 
machine os dirty un prot prot trap appel appel dec ultrix :10.1.1.12.2903




dec aegis 

dec ultrix 




dec aegis 



virtual memory benchmarks times micro seconds protections exos requires access data structures aegis exos page table 
anticipate times improve tune system 
poor performance operations benchmark uses operation appel close order magnitude efficient exos ultrix 
trap area exokernel system performs extremely times faster ultrix 
performance differential achieved trap benchmark aegis implemented unix signal semantics example caller saved registers saved 
semantics violated exos performance difference larger 
higher level benchmarks appel appel show impressive speedup order magnitude cases factor 
speedups achieved virtual memory management performed application level 
application level virtual memory support expected add large overhead basic memory operations protected nature exokernel interface frequent user kernel crossings 
benchmarks show case 
fact expect improvements performance sophisticated structures hand coded assembly language operations 
high level language currently wastes time saving restoring registers handling exceptions 
summary shown inter process communication virtual memory implemented efficiently directly application level 
frequently performance differential exos ultrix order magnitude 
shown specialization provide significant performance improvements example trusted lrpc close factor faster untrusted counter part 
discussion focus exokernel architecture designed implemented securely efficiently 
section touch exokernel architecture deal policy conflicts competing applications global system optimizations realized 
impact distributed resource management issues determined policy requires information feedback system 
exokernel implementation policy challenging 
example proportional sharing require detailed feedback system 
enforcing proportional sharing resources exokernel implemented manner analogous traditional operating system exokernel control allocation revocation 
shown sections allocation revocation inexpensive operations expect exokernel systems behave high load traditional operating systems 
modern operating systems expect applications lie resources need 
systems unix give applications resources request reach quota application may resources requests 
assumption policies require feedback easily realized exokernel architecture 
example working sets approximated monitoring tlb insertions dma operations 
applications information decide giving page improve system performance application need physical memory 
traditional operating systems indiscriminate resource requests discouraged suspending swapping application requests scarce resource 
example consider disk arm latency crucial bottleneck disk system 
effective global policy attempts ensure disk arm need move frequently 
done reordering reads writes file caching allocating migrating frequently accessed blocks narrow band lowers seek time requested blocks 
disk operation reordering done exokernel system security exokernel controls reads writes disk performed 
difference file caching exokernel system applications manage caches done proxy servers directly little concern 
application controlled file caching explored cao directly exokernel architecture :10.1.1.117.6702
exokernel protects guards applications expects example application allocate quota physical memory needs couple pages 
problem guarding malicious applications badly written applications hard difficult distinguish application needs resources abusing available resources 
systems exokernel architecture described relies social mechanisms users refuse run application deal malicious applications 
think degree trust acceptable computer systems acceptable unix systems internet 
lower levels trust fault isolation accepted single user operating systems dos macos 
interesting research question distributed control extended environment malicious applications plan investigate question research 
related early os papers discussed need extendible flexible kernels 
lampson description cal tss brinch hansen microkernel classic rationales 
hydra ambitious system separation kernel policy mechanism central tenets :10.1.1.121.2679
modern microkernels argued kernel extensibility :10.1.1.121.2679
important difference previous approaches explicit view kernel provide high level core abstractions 
systems effective operating system interface higher level page tables implemented kernel 
current extensible os projects include scout bridge vino 
techniques systems type safe languages software fault isolation applicable :10.1.1.142.4909:10.1.1.36.8755
systems just constructed difficult determine relationship general aegis particular 
current extensible os project spin project investigates adaptable kernels allow applications policy decisions 
spin system encapsulates policies spindles dynamically loaded kernel 
ensure safety spindles written pointer safe language translated trusted compiler 
view spin project complementary exokernel design hope results optimize applicationlevel library operating systems 
interface provided vm os similar provided ideal os raw hardware :10.1.1.21.1584
important difference vm provides interface virtualizing entire draft copy distribute cite 
base machine 
machine quite complicated expensive emulate faithfully virtualization result complex inefficient os 
contrast approach exports hardware resources emulating allowing efficient fast implementation 
furthermore central tenet virtual machine movement vm particular application able detect executing native hardware 
supporting illusion precludes application resources management application supposed see vm unable communicate issues explicit allocation revocation naming sharing sharing particularly difficult virtual machines :10.1.1.24.8879:10.1.1.128.442
approaches view similar exokernel philosophy space kernel open operating system anderson argument applicationspecific operating systems cache kernel 
space kernel provides lowlevel kernel abstractions defined trap architecture interface 
close coupling architecture similar ways exokernel able detailed comparisons design methodology performance published 
open operating system single user machine rationale similar exokernel 
approach taken extensibility different designed single user machine 
protection issue open operating system secure multiplexing main task exokernel 
addition exokernel attempts define core abstractions open operating systems file system communications standardized 
anderson clear argument applicationspecific library operating systems proposed kernel concentrate solely hardware resources 
exokernel design addresses provide secure multiplexing physical resources system moves kernel interface lower level abstraction 
addition aegis exos demonstrate low level secure multiplexing library operating systems offer excellent performance 
aegis cache kernel provides low level kernel support multiple application level operating systems 
difference cache kernel aegis mainly high level philosophy cache kernel focuses primarily reliability securely exporting hardware resources applications 
example cache kernel attempts eliminate dynamic memory allocation similar popek data secure unix 
unsurprisingly single constraint lowers kernel interface compared traditional operating systems 
application flexibility extensibility telling cache kernel biased server system structure example supports application level kernels concurrently 
spite differences believe straightforward changes cache kernel fit definition exokernel 
argued benefits distributed applicationspecific resource management compelling entire operating system structure organized maximize 
defined new os architecture exokernel accomplish goal provided set principles guide exokernel design 
tested prototype systems built ideas aegis prototype exokernel exos prototype library operating system 
interesting features systems virtual memory management occurs application level basic operations performed orders magnitude faster mature monolithic structure 
acknowledgments bob gruber sandeep gupta wilson hsieh butler lampson massimiliano poletto raymie stata wallach insightful discussions careful reading earlier versions 
accetta baron bolosky golub rashid tevanian young 
mach new kernel foundation unix development 
proc 
summer usenix conference pages july 
anderson 
case application specific operating systems 
third workshop workstation operating systems pages 
anderson bershad lazowska levy :10.1.1.13.9310
scheduler activations effective kernel support user level management parallelism 
proc 
thirteenth symposium operating system principles pages october 
appel li :10.1.1.12.2903:10.1.1.12.2903
virtual memory primitives user programs 
proceedings fourth international conference asplos pages santa clara ca april 
bala kaashoek weihl :10.1.1.12.2903
software prefetching caching translation lookaside buffers 
proceedings symposium osdi pages november 
draft copy distribute cite 
bershad 
high performance cross address space communication 
technical report phd thesis university washington june 
bershad chambers eggers maeda mcnamee pardyak savage sirer 
spin extensible microkernel application specific operating system services 
tr univ washington february 
bershad redell ellis 
fast mutual exclusion uniprocessors 
proc 
conf 
architectural support programming languages operating systems pages october 
pei cao edward felten kai li :10.1.1.117.6702
implementation performance application controlled file caching 
proceedings symposium osdi pages november 
jeffrey chase henry levy michel baker harvey edward lazowska 
bit virtual address space 
technical report tr university washington 
cheriton duda 
caching model operating system kernel functionality 
proceedings symposium operating systems design implementation november 
cheriton 
experiment registers fast message interprocess communication 
operating systems review 
cheriton 
kernel software base distributed systems 
ieee software april 
:10.1.1.21.1584
origin vm time sharing system 
ibm research development september 
custer 
inside windows nt 
microsoft press redmond wa 
deutsch 
flexible measurement tool software systems 
information processing 
richard draves 
private communication december 
peter druschel larry peterson bruce davie 
experiences high speed network adaptor software perspective 
sigcomm pages 
brinch hansen 
nucleus multiprogramming system 
acm april 
hartman david mosberger malley peterson proebsting 
scout communication oriented operating system 
technical report tr university arizona tucson az june 
cheriton :10.1.1.128.442
application controlled physical memory external page cache management 
proceedings fifth international conference asplos pages october 
hsieh kaashoek weihl 
persistent relevance ipc performance new techniques reducing ipc penalty 
fourth workshop workstation operating systems pages october 
huck hays 
architectural support translation table management large address space machines 
proceedings th computer architecture 
sparc international 
sparc architecture manual 
prentice hall englewood cliffs new jersey 
keith krueger david amin vahdat thomas anderson :10.1.1.100.6047
tools development application specific virtual memory management 
proceedings oopsla pages october 
lampson :10.1.1.24.8879:10.1.1.128.442
hints computer system design 
proceedings eighth acm symposium operating systems principles pages december 
lampson 
reliable extendable operating systems 
state art report 
lampson sproull 
open operating system single user machine 
proceedings seventh acm symposium operating systems principles pages 
jochen liedtke :10.1.1.158.4191
improving ipc kernel design 
proceedings fourteenth acm symposium operating systems principles pages 
steven lucco 
high performance microkernel systems 
proc 
symp 
osdi november 
massalin 
synthesis efficient implementation fundamental operating system services 
phd thesis columbia university 
mogul rashid accetta :10.1.1.36.8755
packet filter efficient mechanism user level network code 
proceedings th sosp pages austin tx november 
draft copy distribute cite 
david nagle richard uhlig tim stanley stuart trevor mudge richard brown :10.1.1.158.4191
design tradeoffs software managed tlbs 
th annual international symposium computer architecture pages 
popek ucla data secure unix 
proc 
national computer conference pages 
bruno 
space new approach operating system abstraction 

rashid robertson 
accent communication oriented network operating system kernel 
proceedings eighth acm symposium operating systems principles pages december 
redell dalal lauer lynch mcjones murray purcell :10.1.1.36.8755
pilot operating system personal computer 
communications acm february 
theodore romer dennis lee brian bershad bradley chen 
dynamic page mapping policies cache conflict resolution standard hardware 
proceedings symposium osdi pages november 
rozier armand herrmann kaiser leonard :10.1.1.131.2105
chorus distributed operating system 
computing systems 
saltzer reed clark :10.1.1.35.4167
arguments system design 
trans 
computer systems november 
margo seltzer architecture vino kernel november 
sites 
alpha axp architecture 
comm 
acm february 
stonebraker 
operating system support database management 
cacm july 
tanenbaum van renesse van staveren sharp mullender jansen van rossum :10.1.1.35.4167:10.1.1.121.2679
experiences amoeba distributed operating system 
communications acm december 
thekkath henry levy 
hardware software support efficient exception handling 
sixth international conference architectural support programming languages operating systems asplos vi 
wahbe lucco anderson graham 
efficient software fault isolation 
proceedings fourteenth acm symposium operating systems principles pages 
carl waldspurger william weihl :10.1.1.129.159
lottery scheduling flexible proportional share resource management 
proceedings symposium operating systems design implementation pages 
wulf cohen jones levin pierson pollack :10.1.1.121.2679
hydra kernel multiprocessing operating system 
communications acm july 
draft copy distribute cite 

