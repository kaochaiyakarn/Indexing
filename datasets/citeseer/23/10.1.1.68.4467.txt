gigascope stream database network applications chuck cranor theodore johnson oliver labs research chuck research att com developed gigascope stream database network applications including traffic analysis intrusion detection router configuration analysis network research network monitoring performance monitoring debugging 
gigascope undergoing installation sites network including oc routers detailed monitoring 
describe motivation constraints developing gigascope gigascope architecture query language performance issues 
conclude discussion stream database research problems application 

managing large data communications network requires constant network monitoring 
ip networks difficult manage side effect decentralized nature protocols services complex mpls multimedia network attacks common 
network analysis done ad hoc tools network trace dumps resulting severe data management problems 
high speed gigabit higher network monitoring tools available inflexible types reports generate 
goal designing gigascope develop network data analysis tool speed flexibility network analysts require provides structured querying environment complex analysis tractable 
wanted gigascope primary data analysis engine settings traffic analysis performance monitoring debugging protocol analysis development router configuration bgp monitoring network attack intrusion detection monitoring distributed denial service attacks various ad hoc analyses 
person database community need structured query environment self evident 
clear need high performance flexibility 
network analysts tend justifiably suspicious dbms analysis engine 
significant problem performance 
high degree sampling aggregation netflow permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sigmod june san diego ca 
copyright acm 
shkapenyuk dept computer science cmu cs cmu edu records traffic summaries produced routers ip backbone generates gbytes data day byte records 
problem certain portions analysis complicated 
analyses require network protocol simulated ip reconstructing tcp sessions 
network analysts developed special fast algorithms software overcome problems risk systems past proven slow inflexible 
severe data management problems persist 
interactions network analysts observed analyses expressed sequence sql queries 
furthermore data analysis best done close data source reduce data volume soon possible 
furthermore analysis done fly offer capabilities current methods provide 
decided gigascope lightweight stream query processing system fast hand written system allows user bypass query system needed provides sophisticated query data management facilities 
stream databases popular research topic 
refer interested reader survey babcock space constraints allow repeat 
stream databases continuous query model evaluated sliding window query language proposed 
query system different pure stream query processing system akin tribeca 
tribeca gigascope uses sql language gsql procedural language express queries allowing query composition query optimization 

query language gigascope query language gsql pure stream query language sql syntax restriction sql 
inputs gsql streams output data stream 
feel choice akin tribeca hancock allows precise query semantics enables composition query processing simplifies implementation fast operators 
query model proposed stream database systems continuous query sliding window data stream 
model advantages presentation results user areas best application sensor networks felt continuous query model inappropriate network data analysis 
significant problem continuous query model query difficult 
input query data streams output continuously changing table 
queries composed output input differences output reverse interpreted data stream 
second problem difficulty precisely expressing query conversely understanding query means 
consider example query select count src src dest dest id id select count query intended identify fraction traffic backbone attributed customer network semantics result clear 
output monitoring intended result evaluation query entire stream window 
window specified fact windows specify subquery second 
snapshots taken subqueries precisely synchronized specified result erratic meaningless 
respective windows defined number tuples time windows certainly unsynchronized 
example appears simple examination evaluation details shows semantics complex 
note examples explicit timestamps queries section explicit default sliding window sizes 
final reason pure stream query continuous query model simplicity implementation 
transforming input data stream windowed table operate data stream directly 
ordered attributes concern stream database language blocking operators 
operators selection projection need state tuple processed operators aggregation join potentially require entire inputs single output produced 
approach bounding state sliding windows 
approach analyze timestamps input stream properties query determine query plan bounds state required evaluate blocking operators 
observed network analysis data generally contains timestamps sequence numbers timestamps generally increase decrease ordinal position tuple stream queries timestamps 
adopt approach similar sequence database 
sequence database model couple limitations impractical application 
network data streams timestamps sequence numbers monotonically increasing ordinal position tuple stream 
simple example netflow records start timestamp 
stream netflow records produced router monotonically increasing timestamps generally monotonically increasing start timestamps 
queries netflow data refer start timestamp timestamp 
notion sequence perturbed operators join aggregation 
second network analysis queries naturally involve predicates timestamps sequence numbers ordinal position tuple stream 
timestamps sequence numbers defining ordered attributes having ordering properties 
properties inherent data source due processing operator 
illustrative set ordering properties 
strictly monotonically increasing decreasing expresses usual notion timestamp 

monotone generalization monotone increasing occur due hash function 

increasing group property states tuples defined field attribute increasing 
property occur aggregation 
example start time netflow record aggregation packets increasing group protocol need modify definitions account input 
example netflow records sorted time netflow records dumped seconds 
start time record seconds high water mark start attribute banded increasing sec 
ordering attributes turn blocking operators stream operators 
current implementation gigascope monotone increasing property follows join join predicate contain constraint ordered attribute table define join window 
example ts ts ts ts ts 
ts group aggregation group key contain ordered attribute 
tuple arrives aggregation ordered attribute larger current group deduce current groups closed receive updates 
closed groups flushed output 
gigascope data definition language allows user specify special properties attributes source stream including ordering properties 
query processing system impute ordering properties output query operators 
example suppose attribute monotonically increasing projection operator computes value attributes output 
impute monotonically increasing 
perform similar reasoning group aggregation operator 
ordering property imputation join operator complex depends constraints join predicate particular join algorithm selected 
example ts monotonically increasing ts output join predicate contains constraint ts ts ts output monotonically increasing 
constraint ts ts ts ts output ts monotonically increasing banded increasing depending choice join algorithm monotonically increasing requires buffer space 
gsql language gsql sql stream database language restriction sql stream database extensions 
currently gsql supports selection join aggregation stream merge discussed 
join queries currently restricted stream joins join predicate include constraint defines window ordered attributes streams 
aggregation queries ordered attribute group keys restriction enforced user obtain output flushing query 
queries operate streams come flavors protocols streams 
protocol data stream generated interpreting sequence data packets gigascope run time system 
data packets reasonable source ip packets transported oc netflow packets bgp updates gigascope run time system interprets data packets collection fields library interpretation functions 
schema protocol stream maps field names interpretation functions invoke 
stream output gigascope query 
fields tuples packed standard fashion 
protocol defines mechanism interpreting data source serves data source source stream output query 
completely specify data source protocol bound interface symbolic name run time system bind source packets interface default interface implied 
example reports destination ip port timestamp tcp packets eth ethernet interface card define query name select time eth tcp protocol define section query allows user set properties query 
case query name set 
user application gsql query read output specifying clause 
gsql contains extension sql merge operator union operator preserves ordering properties attribute 
example merge query suppose matches reads interface eth define query name merge time time merge operator allows combine streams multiple sources single stream 
operator surprisingly important implemented join operator 
developed gigascope monitor optical links usually simplex duplex 
obtain full view traffic logical link need monitor interfaces merge resulting streams 
query illustrates feature gsql ease queries composed complex processing chain 
gsql currently supports nested subqueries mechanism supporting subqueries clause requires update parser 
gsql supports join streams long determine join window join predicates 
gsql currently support join stream non stream relation 
gsql provides support user written functions act special types foreign key joins 
worked practice supporting non stream tables gsql low priority 
users new functions available adding code function function library registering function prototype function registry 
function registry function word chosen connotations endusers 
marked partial function meaning return value 
processing result join tuple processed discarded 
parameters function marked pass handle 
parameters literals query parameters require expensive pre processing function example regular expression compiled 
lets consider example select tb count group time tb tbl attribute time second granularity timer time defines minute long buckets group new value tb produced pre existing groups closed flushed output stream 
function performs longest prefix matching identifies subnet ip address belongs 
longest prefix matching common network analysis activity researchers developed special fast algorithms implements 
second parameter pass handle parameter indicates file containing prefixes autonomous systems ip peers obtained routing table 
query invoked parameter handle registration function reads file builds special memory function parameter handle ties table function invocation 
example illustrates design principles gigascope adapt needs network analysts 
support special algorithms developed gigascope rejected slow inflexible 

architecture central component gigascope stream manager tracks query nodes activated 
query nodes example query node processes 
started register registry stream manager 
user application query node needs subscribe output query submits query name registry receives query handle return 
process contacts query node set communication shared memory 
stream manager track connection positive negative aspects 
gsql processor code generator 
gsql query analyzed translated code code split discussed 
code generation approach results loss flexibility experiences shown capable producing fastest system 
generated code interfaces api perform tasks registering accessing source streams accepting producing tuples 
users write query nodes implement special operators api 
example implemented special ip operator manner built query tree 
ability bypass existing query system necessary critical flexibility application domain 
optimizations gsql optimizes queries rearranging query plan low level optimizations generated code 
significant optimization technique push query far processing stack possible network interface card nic 
accomplished part breaking queries high level query nodes low level query nodes accept stream input exist separate processes accept protocol input linked stream manager 
reason separation library convenience source data packet interpretation libraries linked stream manager run time system 
split performance optimization 
lightweight queries perform preliminary filtering projection aggregation 
linking rts preliminary queries evaluated additional data transfers greatly reduce data traffic 
application look identical fact simple query execute entirely 
gsql processor splits query component streams available application query name 
depending capabilities nic gigascope perform optimizations 
nic appropriate rts execute inside nic 
nics allow specify bpf berkley packet filter preliminary filter specify number bytes qualifying packets snap length returned push simple selection projection operator nic 
perform aggregation uses small hash table 
hash table collisions result tuple computed ejected group written output stream 
temporal locality aggregation small hash table effective early data reduction 
aggregation feed results completes aggregation 
processing similar data cube computation algorithms 
aggregate query splitting optimization motivations build gigascope pure stream database basic optimizations create networks queries streams 
lower level components linked rts possibly nic queries generate lf tas submitted batch 
changing set requires query system stopped rts changed restarted 
new submitted point 
increase flexibility system queries accept query parameters similar constants specified query instantiation time changed fly 
rts execute multiple instances different parameters 
architecture decision link rts introduces inflexibility gigascope mitigated somewhat query parameters fact change rts seconds 
produces signicant benefit 
lightweight design query plan code generation optimizations earliest possible reduction data flowing system gigascope executes fast hand written analysis code faster 
unblocking operators discussed section gsql uses ordering properties attributes stream non blocking implementations operators join merge aggregation defining window streams query execute 
operators multiple streams merge join block input streams slow providing tuples slow stream naturally low volume 
consider merge query section 
produces mbytes data second produces fta stands filtering transformation aggregation 
example avoiding database jargon adopting network analysis language 
tuple minute overflow merge buffers network traffic notoriously bursty manner 
problem presence tuple allows advance window query operates get information absence tuple 
overcome problem mechanism similar proposed 
injecting ordering update tokens query stream 
tokens contain lower bounds ordering attributes stream 
tokens injected periodically experimenting demand system operator detects blocked 

performance considerations performance measure stream database system fast produce answers high data rate input stream starts dropping tuples 
point expressed 
test performance alternatives wrote collection queries compute fraction port traffic due protocol port tunnel firewalls 
done comparing count packets port count packets port data payload matches regular expression 
expensive processing required evaluation query 
regular expression finding expensive filter query split filters tcp packets port part perform regular expression matching 
ran experiment mhz processor gb memory gigabit ethernet card 
generated mbit sec port traffic additional background traffic vary data rates 
tried approaches dumping data disk post facto analysis reading data ethernet card libpcap discarding packet best case processing running gigascope executing host reading libpcap running gigascope executing gigabit ethernet card 
chose packet drop rate maximum acceptable loss 
option nic best performance loss rate mbit sec traffic rate router handle 
options similar performance managing mbit sec exceeding packet loss 
point system experienced interrupt livelock 
option dumping data disk far worst performance packet loss rate exceeding mbit sec dumping data fast striped disks 
space constraints prevent detailed discussion experiment points clear early data reduction critical performance earlier better 
touching disk kills performance slow generates long unpredictable delays system 
contrary written efficient stream database execute complex queries high speed data streams 
example example query repeated section cited type query requires sampling approximation 
query experiment requires far intensive processing libpcap trial fails interrupt livelock occurs 
sufficiently complex query workload require sampling approximation technique resort 
authors note tuples equally valuable readily dropped 
authors propose scoring scheduling mechanism ensure quality service 
concur position tuples valuable simple heuristic easy understand implement highly processed tuples produced query chain valuable processed tuples filters aggregations applied 

developed gigascope high performance stream database network applications 
currently installations special network monitoring services customers 
largest scale deployment monitors application protocol performance gigabit ethernet links customers 
peak periods gigascope processes packets second inexpensive dual ghz cpu server 
time writing application running months nonstop 
additional deployments including oc deployments negotiations 
working closely network analysts developed system fast flexible satisfy expectations 
sql familiar language analysts quickly appreciate ease new monitoring tasks implemented 
soon start writing queries aggressive language features examples simplified user application start demanding 
research directions course developing gigascope encountered issues deferred 
issue stream operators provide dimension optimization choice operator implementation affects attribute ordering properties output turn affects performance downstream operators 
issue proper sampling approximation 
query sets need techniques applied integrated query language control analyst 
gsql suffices large class tasks network analysis queries find aggregate subsequences data stream extract tcp ip sessions 
exploring integrate complex group definition mechanisms described gsql 
pressing issue expressing streams source query 
interface protocol mechanism works current installations scale planned dozens hundreds deployments 
surprisingly issue received attention research literature 

babcock babu datar motwani widom 
models issues data stream systems 
principles database systems pages 
carney monitoring streams new class data management applications 
proc 
intl 
conf 
ver large databases 
johnson kim 
md join operator complex olap 
proc 

conf 
data engineering pages 
cranor johnson shkapenyuk 
gigascope high performance network monitoring sql interface 
sigmod demonstration 
greer 
fourth generation language 
proc 
sigmod conf pages 
sullivan 
tribeca system managing large databases network traffic 
proc 
usenix annual technical conf 
tucker maier 
exploiting punctuation semantics querying continuous data streams 
intl 
conf 
data engineering 
