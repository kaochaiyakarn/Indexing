goal cmu network attached secure disks nasd project define era storage system interfaces architectures 
encourage industry standardization ofa compliant storage device subsystem interface working closely national storage industry working group network attached storage 
experimental demonstration nasd interface value filesystem prototype software delivers scalability inherent nasd storage architecture 
academic community provide implementation industry development cmu linux digital unix ports software 
overview nasd scalable storage code base releasing linux 

demands storage throughput continue grow due larger clusters sharing storage rapidly increasing client performance richer data types video data inten sive applications data mining 
storage subsystems deliver scalable throughput application bandwidth accesses second increasing numbers storage devices data striped disks network links patterson name lookup checking decentralized hartman anderson 
current technology office engi neering data processing shops sufficient numbers disks scalable switched networking storage controller distributed fileserver bottlenecks 
bottlenecks arise single server computer copies data storage peripheral network client local area network functions concurrency control metadata consistency 
prior proposed new scalable bandwidth network attached secure disks nasd gibson gibson gobioff gibson amiri nagle 
fundamentally nasd minimizes server data movement separating management store forward copying elevating commodity storage interface richer object scsi 
earlier generations scsi nasd interface efficient flexible support wide range filesystem semantics multiple generations tech nology 
course advancing storage interfaces architecture requires industry collaboration standardization fortunately storage industry aggressively seeking evolve marketplace quantum seagate 
network attached storage cmu working closely national storage industry consortium working group network attached storage devices www org nasd 
past years dozen public workshops academics practitioners exchange perspectives 
currently core working group engaged developing ansi standards proposal new 
cmu publications sufficient effort 
widely disseminate cmu providing public implementation nasd linux digital unix environments 
implementa tion includes nasd device code running workstation pc masquerading subsystem disk drive nfs distributed file system designed nasd subsystems devices nasd inspired striping middle ware provide scalable bandwidth large striped files 
rest extended describes prototype soft ware summarizes prior research predictions performance 

background related illustrates principal network attached 
simplest implementation runs standalone server attached disks sad shown 
data network trips way client making server potential bottleneck server usually manages large numbers disks amortize cost 
companies network appliance performance sad implementations specifically number clients supported special pur pose server hardware highly optimized software sid hitz 
nasd scalable storage systems garth gibson david nagle william ii nat lanza paul marc jim zelenka school computer science department electrical computer engineering carnegie mellon university pittsburgh pa www pdl cs cmu edu proceedings usenix linux workshop monterey ca june 
page storage system re organized dma data clients sharing client network copy server number net transits data reduced 
organization examined extensively implementation mass storage model long watson 
third architecture taxonomy nasd archi tecture 
nasd embeds disk management functions device presenting storage variable length object interface 
organization file managers allow clients directly access specific storage granting capability 
data control information travels expensive store forward computer 
quantitative analysis architecture gibson 

network attached secure disks nasd enables cost effective throughput scaling 
flat name space variable length objects simple implemented efficiently ble wide variety applications 
highest levels distributed filesystem functionality glo bal naming access control concurrency control cache coherency vary significantly advocate stor age devices subsume file server entirely 
policies defining high level file system file manager nasd devices implement simple storage primitives efficiently operate indepen dently file manager possible 
nasd object interface allows data layout management disk storage subsystem 
addition nasd partitions variable sized groupings objects physical regions disk media enabling total partition space managed easily manner similar vir tual volumes virtual disks lee 
object storage supports quality service device optimizations drive supported data sharing anderson 
importantly drive objectstore securely employ storage metadata behalf client client needing consult file access 
alternative exporting storage metadata clients enabling client access arbitrary disk blocks worse insecure accident prone puts entire storage system risk 
nasd interface prototype nasd device software offers simple capa bility object store interface gibson loosely inode interface unix filesystem mckusick 
nasd interface contains commands including reading writing object data read ing writing object attributes creating removing file manager protocol stack network access control namespace consistency client network distributed file system network protocol network local filesystem disk driver client network packetized workstation client network taxonomy reaching storage network shows architecture storage attached clients separate specially integrated server 
clients server data forwards request storage 
storage answers server forwards data 
shows system server forwarded request dma command returning data directly tothe client 
completion dma status returned server collected forwarded client 
network scheme provides scalable bandwidth large request workloads 
network attached secure disks architecture 
access client contact server access checks 
reusable rights capabilities 
normal conditions clients requests directly storage verify capabilities directly reply 
lookup rights verification small accesses occur nasd scales bandwidth accesses second 
variation nasd usc isi derived virtual devices replaces capability server installed secure connection object definition state drive server attached disk sad server integrated disk sid network scsi network attached secure disks nasd scsi object capability file net net nasd nasd controller page objects creating resizing removing soft partitions constructing copy write version object setting security key 
partitions allow capacity quotas drive administrator 
object attributes describe timestamps sizes facilitate capacity reservation linkages clustering 
logical version number attribute object may changed immediately revoke capability temporarily permanently 
uninterpreted block space available file manager record long term object state filesystem lists mode bits 
nasd security cryptographic capabilities gobioff 
shows security related fields nasd request message 
summarizes security protocol 
clients obtain capabilities file manager secure private protocol external 
capability consists public portion private key 
portion rights granted object 
portion cryptographic key generated file keyed message digest mac bellare secret key shared target drive 
sends request generates keyed digest request parameters 
drive knows secret keys receives request compute cli ent 
calculated drive verify client supplied message digest 
field request changed including object version number digest comparison fail reject request client return file manager new capability 
mechanisms ensure integrity requests attacks rogue client eavesdropping man middle third party simple dents 
protecting integrity privacy data involves potentially expensive cryptographic opera tions data transferred 
software implementations operating disk rates available computational resources expect disk schemes des function blocks hardware implemented tens thousands gates disk data rates knudsen 
measurements reported disabled prototype support hardware 

filesystems nasd scalability file managers traditionally meant asthe total storage capacity increases new clients data total throughput increases response time doesnot 
demonstrate traditional scaling nasd system constructed distributed filesystem nfs sandberg tailored specifically nasd 
nasd architecture scale single file achievable bandwidth increasing storage capacity 
show scalable bandwidth constructed library user level parallel access striped file 
nfs nasd environment nasd adapted filesystem files directories nasd objects 
mapping files directories objects depends filesystem 
nfs filesystem file directory occupies exactly nasd object offsets files offsets objects 
allows common file attributes file length modify time correspond nasd maintained object attributes 
remainder packet diagram major security components nasd request 
request digest nonce request args capability security header rpc header indicates key includes approved logical version number access rights expiration time region protects replayed requests digest data nasd security system summary gobioff message sequence outlined 
client seeks capability file manager gets back public description rights secret indicated session key 
session demonstrate nasd drive file manager authorized rights privacy maintained 
accessing drive client proves authorization signing request session key receiving copy request drive able reconstruct session key verify 
drive replies similar signature 
single secret key file manager need install enable approve indefinite number accesses 
file manager nasd client request access secret key secret key req reply reply objid version rights expiry 
req page file attributes owner mode bits stored section object attributes 
filesystem policy decisions client may directly modify object metadata commands may impact policy decisions access rights go file manager 
combination stateless server weak cache consis tency filesystem management mechanisms porting nfs nasd environment straightforward 
data moving operations read write attribute reads getattr sent directly nasd drive requests handled file manager 
capabilities piggybacked file manager response 
file attributes computed nasd object attributes modify times object size uninterpreted filesystem specific attribute mode uid gid 
break nfs directories client 
allows pathname lookup avoid accessing file manager provided client appropri ate capabilities 
shows simple analysis amount fileserver entailed nfs workload traditional server attached disk system network scsi system nasd system 
offloading data access attribute directory reads may reduce file manager order magnitude nasd system 
parallel access striped files fully exploit potential bandwidth nasd system higher level filesystems large parallel requests files striped multiple nasd drives 
layered approach allows nasd nfs filesystem manage simple logical object store pro vided storage management system 
exports object interface underlying nasd devices maintains mapping nasd set objects individual devices implement nasd nfs object 
prototype client library translates application requests manages levels capabilities nasd drives 
separate storage manager possibly located file manager manages map pings striped objects 
evaluate performance intensive parallel applica tions implemented simple parallel filesystem nasd pfs offers sio low level parallel corbett top nasd nfs files striped user level middleware 
bandwidth scaling bound phases generation itemsets parallel data discovers association rules sales transactions agrawal processing mb sales 
single nasd provides mb drive array scales linearly mb nasd faster nfs server limits application half performance 
continuous media nasd central scalable file system throughput continuous media service video clearly requirement generation storage systems 
nasd interface higher level understanding data object naturally extended type 
demonstrate extended nasd drive prototype mpeg streaming system 
emphasis scalable throughput designed nasd video stripes video data nasd drives 
video middleware logically equivalent high management middleware integrated 
count top thousands sad nasd cycles billions cycles billions cycles billions attr read attr write block read block write dir read dir rw delete write open total offloading nfs file manager nasd drives enables file manager support drives clients gibson 
analysis traditional nfs implementation instrumented cycle counts recorded nfs operation type 
product numbers nfs operation frequencies extracted busiest nfs trace taken estimates traditional nfs server customers critical column labelled sad 
columns labelled nasd model expected workload file manager employing nasd drives small access workload reported percentage total done sad case 
page 
network attached secure disks nasd project new scalable storage interfaces characterized properties 
direct storage device 
second secure interfaces cryptography 
third asynchronous oversight file managers pro vide clients capabilities allow issue authorized commands directly devices 
fourth provides variable length objects separate attributes fixed length blocks enable self management avoid need trust client operating systems 
reviewed nasd architecture 
nasd scales number clients file manager supports offloading metadata lookup storage devices nasd scales single file bandwidth striping data distributing information clients enables direct parallel accesses file component objects 
larger purpose introduce nasd file system researchers practitioners interested cmu nasd public code 
intend release june extreme linux workshop 
includes linux digital unix alpha ports device code file manager client module nasd customized nfs filesystem pseudo allowing clients locate directly access components striped files compromising 

availability code soon available extreme nasd webpages www pdl cs cmu edu extreme 
nasd optimized parallel access filesystem 
nasd pfs conjunction mpi parallel applications workstations 
filesystem manages objects directly backed data 
backed storage ma redirects clients underlying component nasd objects 
parallel filesystem extends simple nasd interface sio low level interface corbett inherits name service directory hierarchy access controls filesystem 
nasd nfs fs access consistency net protocol net hardware nasd nfs net protocol application file manager client storage manager manager concurrency redundancy net protocol net hardware management read write access control nasd net hardware mpi switch object object object object object object sio bandwidth parallel data mining application gibson 
shows aggregate application bandwidth run item frequent sets mb sales transactions 
nasd line shows bandwidth clients reading single oc atm link dce rpc udp single file striped drives 
bandwidth scales linearly mb drive runs dec alpha mhz mb digital unix st mb scsi busses 
performance obsolete system comparable storage subsystems today 
traditional nfs configurations show maximum achievable bandwidth dec alpha mhz mb digital unix number st cheetah disks mb disk twice test clients reachable oc atm links 
nfs line shows thatthe performance clients read single file striped disks server bottlenecks near mb causes poor read ahead performance inside nfs server report nfs parallel case client reads server private replica file located client devoted disk 
better single shared file case achieves mb best 
number disks app lica tion thr nfs parallel page implemented releasing prototype drive software including security file manager client prototype filesystem prototype storage manager 
configuration management tools filesystem included 
prototype code easily ported 
drive file manager run user processes linux digital unix irix solaris 
addition digital unix port run drive file manager inside kernel 
linux drive file manager user process loadable kernel module 
modules implemented processes client available 
nasd intended directly manage drive hard ware nasd object system implements internal object access cache disk space management interacts minimally host operating system 
communication prototype uses rpc dce rpc udp ip 
dce implementation networking services available inside linux kernel 
appropriate protocol suite implementation cur rently issue active research anderson nagle 

release nasd linux entire nasd team specifically acknowledge khalil amiri jeff butler fay chang howard gobioff charles hardin erik riedel david research enabled release 
research sponsored ito darpa order contract 
project team indebted corporate sponsors compaq hewlett packard laboratories hitachi ibm intel novell quantum seagate technology siemens storage technology wind river systems com 
agrawal agrawal srikant fast algorithms association rules vldb sept 
amiri amiri gibson golding scalable con currency control recovery shared storage arrays tr cmu cs february 
anderson anderson serverless network filesystems acm tocs feb 
anderson anderson network attached www org nasd meetings html mar june 
bellare bellare keying hash functions message authentication crypto 
corbett corbett proposal common paral lel file system programming language caltech nov 
kaashoek hsieh 
disk new approach improving file systems acm sosp dec 
raid ii high band width network file server acm isca 
gibson gibson file server scaling net attached secure disks acm sigmetrics june 
gibson gibson filesystems network attached secure disks tr cmu cs july 
gibson gibson cost effective high band width storage architecture acm asplos october 
gobioff gobioff gibson tygar security attached storage devices tr cmu cs oct 
hartman hartman ousterhout network file system acm sosp dec 
hitz hitz lau malcolm file system nfs file server appliance usenix jan 
knudsen knudsen preneel hash functions basedon block ciphers quaternary codes 
advances cryptology asiacrypt nov 
lee lee thekkath petal distributed acm asplos oct 
long long swift raid distributed computing systems summer 
mckusick mckusick fast file system acm tocs august 
nagle nagle ganger butler goodson network network attached storage stanford ca august 
patterson patterson case inexpensive disks acm sigmod june 
quantum storage systems strategy www quantum com corporate pc leadership html march 
sandberg sandberg design sun network filesystem summer usenix june 
seagate jini pathway intelligent network storage www seagate com vpr literature papers jini shtml jan 
van meter visa vir tual internet scsi adapter acm asplos oct 
watson watson coyne parallel archi tecture high performance storage system hpss th ieee symp 
mass storage systems sept 
page 
