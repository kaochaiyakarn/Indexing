peer peer communication network address translators bryan ford massachusetts institute technology mit edu des des 
des network address translation nat causes known difficulties peer peer communication peers involved may reachable globally valid ip address 
nat traversal techniques known documentation slim data robustness relative merits 
documents analyzes simplest robust practical nat traversal techniques commonly known hole punching hole punching moderately understood udp communication show reliably set peer peer tcp streams 
gathering data reliability technique wide variety deployed nats find nats tested support hole punching udp support hole punching tcp streams 
nat vendors increasingly conscious needs important applications voice ip online gaming protocols support hole punching increase 
combined pressures tremendous growth massive security challenges forced internet evolve ways life difficult applications 
internet original uniform address architecture node globally unique ip address communicate directly node replaced new de facto internet address architecture consisting global address realm private address realms interconnected network address translators nat 
new address architecture illustrated nodes main global address realm dan com systems yahoo com public private ip address domains easily contacted network unique globally routable ip addresses 
nodes private networks connect nodes private network usually open tcp udp connections known nodes global address realm 
nats path allocate temporary public endpoints outgoing connections translate addresses port numbers packets comprising sessions generally blocking incoming traffic specifically configured 
internet new de facto address architecture suitable client server communication typical case client private network server global address realm 
architecture diffi cult nodes different private networks contact directly important peer peer communication protocols applications teleconferencing online gaming 
clearly need way protocols function smoothly presence nat 
effective methods establishing peerto peer communication hosts different private networks known hole punching technique widely udp applications essentially technique works tcp 
contrary name may suggest hole punching compromise security private network 
hole punching enables applications function default security policy nats effectively signaling nats path peer peer communication sessions solicited accepted 
documents hole punching udp tcp details crucial aspects application nat behavior hole punching 
unfortunately traversal technique works existing nats nat behavior standardized 
presents experimental results evaluating hole punching support current nats 
data derived results submitted users internet running nat check tool wide variety nats different vendors 
data points gathered self selecting user community may representative true distribution nat implementations deployed internet results generally encouraging 
evaluating basic hole punching point variations hole punching wider variety existing nats cost greater complexity 
primary focus developing simplest hole punching technique works cleanly robustly presence behaved nats reasonable network topology 
deliberately avoid excessively clever tricks may increase compatibility existing broken nats short term time may cause additional unpredictability network brittleness long term 
larger address space ipv may eventually reduce need nat short term ipv increasing demand nat nat provides easiest way achieve interoperability ipv ipv address domains 
anonymity hosts private networks widely perceived security privacy benefits 
firewalls go away ip addresses ipv firewalls commonly block unsolicited incoming traffic default making hole punching useful ipv applications 
rest organized follows 
section introduces basic terminology nat traversal concepts 
section details hole punching udp section introduces hole punching tcp 
section summarizes important properties nat order enable hole punching 
section presents experimental results hole punching support popular nats section discusses related section concludes 
general concepts section introduces basic nat terminology outlines general nat traversal techniques apply equally tcp udp 
nat terminology adopts nat terminology taxonomy defined rfc additional terms defined rfc 
particular importance notion session 
session endpoint tcp udp ip address port number pair particular session uniquely identified session endpoints 
perspective hosts involved session effectively identified tuple local ip local port remote ip remote port 
direction session normally flow direction packet initiates session initial syn packet tcp user datagram udp 
various flavors nat common type traditional outbound nat provides asymmetric bridge private network public network 
outbound nat default allows outbound sessions traverse nat incoming packets dropped nat identifies part existing session initiated private network 
outbound nat conflicts peer peer protocols peers desiring communicate private network side different nats whichever peer tries initiate session peer nat rejects 
nat traversal entails making sessions look outbound sessions nats 
outbound nat sub varieties basic nat translates ip addresses network address port translation translates entire session endpoints 
general variety common enables hosts private network share single public ip address 
assume principles techniques discuss apply equally trivially basic nat 
relaying nat traversal relaying reliable efficient method communication nat simply communication look network standard client server communication relaying 
suppose client hosts initiated tcp udp connections known server global ip address port number 
shown clients reside separate private networks respective nats prevent client directly initiating connection 
attempting direct connection clients simply server relay messages 
example send message client client simply sends message server established client server connection server forwards message client existing client server connection relaying works long clients connect server 
disadvantages consumes server processing power network bandwidth communication latency peering clients increased server connected 
efficient technique works reliably existing nats relaying useful fall back strategy maximum robustness desired 
turn protocol defines method implementing relaying relatively secure fashion 
connection reversal applications straightforward limited technique known connection reversal enable communication hosts connections nat traversal connection reversal known rendezvous server peers nat shown 
wants initiate connection direct connection attempt works automatically nat nat interprets connection outgoing session 
wants initiate connection direct connection attempt blocked nat 
relay connection request known server asking attempt reverse connection back despite obvious limitations technique central idea known rendezvous server intermediary help set direct peer peer connections fundamental general hole punching techniques described 
udp hole punching udp hole punching enables clients set direct peer peer udp session help known rendezvous server clients nats 
technique mentioned section rfc documented thoroughly web experimental internet protocols 
various proprietary protocols line gaming udp hole punching 
rendezvous server hole punching assumes clients active udp sessions rendezvous server client registers server records endpoints client ip address udp port pair client believes talk ip address udp port pair server ob udp hole punching peers common nat serves client talk 
refer pair client private endpoint second client public endpoint 
server obtain client private endpoint client field body client registration message obtain client public endpoint source ip address source udp port fields ip udp headers registration message 
client nat private public endpoints identical 
poorly behaved nats known scan body udp datagrams byte fields look ip addresses translate ip address fields ip header 
robust behavior applications may wish obfuscate ip addresses messages bodies slightly example transmitting complement ip address ip address 
course application encrypting messages behavior problem 
establishing peer peer sessions suppose client wants establish udp session directly client hole punching proceeds follows 
initially know reach asks help establishing udp session 
replies message containing public private endpoints 
time uses udp session send connection request message containing public private endpoints 
messages received know public private endpoints 

receives public private endpoints starts sending udp packets endpoints subsequently locks whichever endpoint elicits valid response similarly receives public private endpoints forwarded connection request starts sending udp packets known endpoints locking endpoint works 
order timing messages critical long asynchronous 
consider udp hole punching handles specific network scenarios 
situation representing easy case clients reside nat private network 
second common case clients reside different nats 
third scenario clients reside levels nat common level nat deployed isp example distinct second level nats consumer nat routers home networks 
general difficult impossible application determine exact physical layout network scenarios possible ones applies time 
protocols provide information nats communication path information may complete reliable especially multiple levels nat involved 
hole punching works automatically scenarios application having know specific network organization long nats involved behave reasonable fashion 
reasonable behavior nats described section 
peers common nat udp hole punching peers different nats consider simple scenario clients probably happen reside nat located private ip address realm shown 
client established udp session server common nat assigned public port number 
client similarly established session nat assigned public port number 
suppose client uses hole punching technique outlined establish udp session server 
client sends message requesting connection responds public private endpoints forwards public private endpoints clients attempt send udp datagrams directly endpoints 
messages directed public endpoints may may reach destination depending nat supports hairpin translation described section 
messages directed private endpoints reach destinations direct route private network faster indirect route nat anyway clients select private endpoints subsequent regular communication 
assuming nats support hairpin translation application dispense complexity trying private public endpoints cost making local communication common nat unnecessarily pass nat 
results section show hairpin translation common existing nats friendly nat behaviors 
applications may benefit substantially public private endpoints 
peers different nats suppose clients private ip addresses different nats shown 
initiated udp communication sessions local port port server handling outbound sessions nat assigned port public ip address session nat assigned port ip address session registration message reports private endpoint ip address private network 
records reported private endpoint public endpoint observed 
public endpoint case temporary endpoint assigned session nat 
similarly client registers records private endpoint public endpoint 
client follows hole punching procedure described establish udp communication session directly sends request message asking help connecting response sends public private endpoints sends public private endpoints start trying send udp datagrams directly endpoints 
different private networks respective private ip addresses globally routable messages sent endpoints reach wrong host host 
udp hole punching peers multiple levels nat nats act dhcp servers handing ip addresses fairly deterministic way private address pool usually determined nat vendor default quite practice messages directed private endpoint reach incorrect host private network happens private ip address 
applications authenticate messages way filter stray traffic robustly 
messages include applicationspecific names cryptographic tokens example random nonce pre arranged consider message sent public endpoint shown 
outbound message passes nat nat notices udp packet new outgoing session 
new session source endpoint existing session destination endpoint different 
nat behaved preserves identity private endpoint consistently translating outbound sessions private source endpoint corresponding public source endpoint 
outgoing message public endpoint effect hole nat new udp session identified endpoints private network endpoints main internet 
message public endpoint reaches nat message crossed nat nat may interpret inbound message unsolicited incoming traffic drop 
message public address similarly opens hole nat new udp session identified endpoints private network endpoints internet 
messages crossed respective nats holes open direction udp communication proceed normally 
clients verified public endpoints sending messages alternative private endpoints 
peers multiple levels nat topologies involving multiple nat devices clients establish optimal route specific knowledge topology 
consider final scenario depicted 
suppose nat large industrial nat deployed internet service provider isp multiplex customers public ip addresses nats small consumer nat routers deployed independently isp customers multiplex private home networks respective isp provided ip addresses 
server nat globally routable ip ad dresses public ip addresses nat nat private isp address realm client addresses turn private addressing realms nat nat respectively 
client initiates outgoing connection server causing nats create single public private translation causing nat establish public private translation session 
suppose attempt establish direct peer peer udp connection hole punching 
optimal routing strategy client send messages client semi public endpoint nat isp addressing realm client send messages semi public endpoint nat 
unfortunately way learn addresses server sees truly global public endpoints clients respectively 
way learn addresses guarantee usable address assignments isp private address realm conflict unrelated address assignments clients private realms 
nat ip address nat realm just easily example client private address nat realm 
clients choice global public addresses seen communication rely nat providing hairpin loopback translation 
sends udp datagram global endpoint nat translates datagram source endpoint 
datagram reaches nat recognizes datagram destination address nat translated public endpoints 
nat behaved translates source destination addresses datagram loops datagram back private network source endpoint destination endpoint 
nat translates datagram destination address datagram enters private network datagram reaches path back works similarly 
nats support hairpin translation common nat vendors aware issue 
udp idle timeouts udp transport protocol provides nats reliable application independent way determine lifetime session crossing nat nats simply associate idle timer udp translations closing hole traffic time period 
unfortunately standard value timer nats timeouts short seconds 
application needs keep idle udp session active establishing session hole punching application send periodic keep alive packets ensure relevant translation state nats disappear 
unfortunately nats associate udp idle timers individual udp sessions defined particular pair endpoints sending keep session keep sessions active sessions originate private endpoint 
sending keep different sessions applications avoid excessive keep alive traffic detecting udp session longer works re running original hole punching procedure demand tcp hole punching establishing peer peer tcp connections hosts nats slightly complex udp tcp hole punching remarkably similar protocol level 
understood currently supported fewer existing nats 
nats involved support tcp hole punching just fast reliable udp hole punching 
peer peer tcp communication behaved nats may fact robust udp communication udp tcp protocol state machine gives nats path standard way determine precise lifetime particular tcp session 
sockets tcp port reuse main practical challenge applications wishing implement tcp hole punching protocol issue application programming interface api issue 
standard berkeley sockets api designed client server paradigm api allows tcp stream socket initiate outgoing connection connect listen incoming connections listen accept 
tcp sockets usually correspondence tcp port numbers local host application binds socket particular local tcp port attempts bind second socket tcp port fail 
tcp hole punching need single local tcp port listen incoming tcp connections initiate multiple outgoing tcp connections concurrently 
fortunately major operating systems support special tcp socket option commonly allows application bind multiple sockets local endpoint long option set sockets involved 
bsd systems introduced option controls port reuse separately address reuse systems options set 
opening peer peer tcp streams suppose client wishes set tcp connection client assume usual active tcp connections known rendezvous server server records registered client public private endpoints just udp 
protocol level tcp hole punching works exactly udp 
client uses active tcp session ask help connecting 
replies public private tcp endpoints time sends public private endpoints 
local tcp ports register asynchronously outgoing connection attempts public private endpoints reported simultaneously listening incoming connections respective local tcp ports 

wait outgoing connection attempts succeed incoming connections appear 
outgoing connection attempts fails due network error connection reset host unreachable host simply re tries connection attempt short delay second application maximum timeout period 

tcp connection hosts authenticate verify connected intended host 
authentication fails clients close connection continue waiting succeed 
clients successfully authenticated tcp stream resulting process 
udp client needs socket communicate number peers simultaneously tcp client application manage sockets bound single local tcp port client node shown 
client needs stream socket representing connection listen socket accept incoming connections peers additional stream sockets initiate outgoing connections peer public private tcp endpoints 
consider common case scenario clients different nats shown sockets versus ports tcp hole punching assume port numbers shown tcp udp ports 
outgoing connection attempts private endpoints fail connect wrong host 
udp important tcp applications authenticate peer peer sessions due likelihood mistakenly connecting random host local network happens private ip address desired host remote private network 
clients outgoing connection attempts public endpoints cause respective nats open new holes enabling direct tcp communication nats wellbehaved new peer peer tcp stream automatically forms 
syn packet reaches nat syn packet reaches nat example nat may interpret syn unsolicited incoming connection attempt drop 
syn packet subsequently get nat sees syn part outbound session syn initiated 
behavior observed application client applications observe happen sockets tcp hole punching depends timing tcp implementations involved 
suppose outbound syn packet public endpoint dropped nat subsequent syn packet public endpoint gets tcp retransmits syn 
depending operating system involved things may happen tcp implementation notices session endpoints incoming syn match outbound session attempting initiate 
tcp stack associates new session socket local application public endpoint 
application call succeeds happens application listen socket 
received syn packet include ack previous outbound syn tcp replies public endpoint syn ack packet syn part merely replay original outbound syn sequence number 
tcp receives syn ack responds ack syn tcp session enters connected state ends 
alternatively tcp implementation notice active listen socket port waiting incoming connection attempts 
syn looks incoming connection attempt tcp creates new stream socket associate new tcp session hands new socket application application call listen socket 
tcp responds syn ack tcp connection setup proceeds usual client server style connections 
prior outbound connect attempt combination source destination endpoints socket just returned application attempt fail point typically address error 
application working peer peer stream socket needs communicate ignores failure 
behavior appears usual operating systems second behavior appears common linux windows 
simultaneous tcp open suppose timing various connection attempts hole punching process works initial outgoing syn packets clients traverse respective local nats opening new outbound tcp sessions nat reaching remote nat 
lucky case nats reject initial syn packets syns cross wire nats 
case clients observe event known simultaneous tcp open peer tcp receives raw syn waiting syn ack 
peer tcp responds syn ack syn part essentially replays peer previous outgoing syn ack part acknowledges syn received peer 
respective applications observe case depends behavior tcp implementations involved described previous section 
clients implement second behavior may calls application ultimately fail application running client receives new working peer peer tcp stream socket accept tcp stream magically created wire merely passively accepted endpoints 
long application care ultimately receives peer peer tcp sockets connect accept process results working stream tcp implementation properly implements standard tcp state machine specified rfc 
alternative network organization scenarios discussed section udp works exactly way tcp 
example tcp hole punching works multi level nat scenarios long nats involved behaved 
sequential hole punching variant tcp hole punching procedure implemented library clients attempt connections sequentially parallel 
example informs desire communicate simultaneously listening local port connect attempt opens hole nat fails due timeout rst nat rst closes connection listen local port turn closes connection signaling attempt directly sequential procedure may particularly useful windows hosts prior xp service pack correctly implement simultaneous tcp open sockets apis support functionality 
sequential procedure may slower common case robust unusual situations 
step example allow doomed fail connect attempt time ensure syn packet traverses nats side network 
little delay risks lost syn process delay increases total time required hole punching 
sequential hole punching procedure effectively consumes clients connections server requiring clients open fresh connections new connection forged 
parallel hole punching procedure contrast typically completes soon clients attempts allows client retain re single connection indefinitely 
properties friendly nats section describes key behavioral properties nats order hole punching techniques described properly 
current nat implementations satisfy properties nats gradually friendly nat vendors recognize demand peer peer protocols voice ip line gaming 
section meant complete definitive specification nats behave provide merely information commonly observed behaviors enable break hole punching 
ietf started new working group behave define official best current practices nat behavior 
behave group initial drafts include considerations outlined section nat vendors course follow ietf working group directly official behavioral standards formulated 
consistent endpoint translation hole punching techniques described automatically nat consistently maps tcp udp source endpoint private network single corresponding public endpoint controlled nat 
nat behaves way referred cone nat rfc nat focuses sessions originating single private endpoint public endpoint nat 
consider scenario example 
client initially contacted known server nat chose port public ip address temporary public endpoint representing private endpoint 
attempts establish peer peer session sending message local private endpoint public endpoint depends nat preserving identity private endpoint re exist ing public endpoint public endpoint sending corresponding messages 
nat designed support client server protocols necessarily preserve identities private endpoints way 
nat symmetric nat rfc terminology 
example nat assigns public endpoint client session server nat assign different public endpoint session tries initiate case hole punching process fails provide connectivity subsequent incoming messages reach nat wrong port number 
symmetric nats allocate port numbers successive sessions fairly predictable way 
exploiting fact variants hole punching algorithms time symmetric nats probing nat behavior protocol resulting information predict public port number nat assign new session 
prediction techniques amount chasing moving target things go wrong way 
predicted port number causing nat jump port number example client nat initiate unrelated session wrong time allocate predicted port number 
port number prediction useful trick achieving maximum compatibility badly behaved existing nats represent robust long term solution 
symmetric nat provides greater security cone nat session traffic filtering symmetric nat common nat vendors adapt algorithms support protocols 
handling unsolicited tcp connections nat receives syn packet public side appears unsolicited incoming connection attempt important nat just silently drop syn packet 
nats actively reject incoming connections sending back tcp rst packet icmp error report interferes tcp hole punching process 
behavior necessarily fatal long applications re try outgoing connection attempts specified step process described section resulting transient errors hole punching take longer 
leaving payloads existing nats known scan blindly packet payloads byte values look ip ad dresses translate ip address packet header knowing application protocol 
bad behavior fortunately appears uncommon applications easily protect obfuscating ip addresses send messages example sending bitwise complement desired ip address 
hairpin translation multi level nat situations require hairpin translation support order tcp udp hole punching described section 
scenario shown example depends nat providing hairpin translation 
support hairpin translation unfortunately rare current nats fortunately network scenarios require 
multi level nat common ipv address space depletion continues support hairpin translation important nat implementations 
evaluation existing nats evaluate robustness tcp udp hole punching techniques described variety existing nats implemented distributed test program called nat check solicited data internet users nats 
nat check primary purpose test nats behavioral properties crucial reliable udp tcp hole punching consistent endpoint translation section silently dropping unsolicited incoming tcp syns rejecting icmp errors section 
addition nat check separately tests nat supports hairpin translation section nat filters unsolicited incoming traffic 
property affect hole punching provides useful indication nat firewall policy 
nat check attempt test relevant facet nat behavior individually wide variety subtle behavioral differences known difficult test reliably 
nat check merely attempts answer question commonly proposed hole punching techniques expected deployed nats typical network conditions test method nat check consists client program run machine nat tested known servers different global ip addresses 
client cooperates servers check nat behavior relevant tcp udp hole punching 
client nat check test method udp program small relatively portable currently running windows linux bsd mac os machines hosting known servers run freebsd 
udp test test nat behavior udp client opens socket binds local udp port successively sends ping requests servers shown 
servers respond client pings reply includes client public udp endpoint client ip address udp port number observed server 
servers report public endpoint client nat check assumes nat properly preserves identity client private endpoint satisfying primary precondition reliable udp hole punching 
server receives udp request client replying directly client forwards request server turn replies client ip address 
nat firewall properly filters unsolicited incoming traffic session basis client sees replies server directed public port replies servers 
test nat hairpin translation support client simply opens second udp socket different local port uses send messages public endpoint representing client udp socket reported server 
messages reach client private endpoint nat supports hairpin translation 
tcp test tcp test follows similar pattern udp 
client uses single local tcp port initiate outbound sessions servers checks public endpoints reported servers precondition reliable tcp hole punching 
nat response unsolicited incoming connection attempts impacts speed reliability tcp hole punching nat check tests behavior 
server receives client request immediately replying client forwards request server waits server respond go ahead signal 
server receives forwarded request attempts initiate inbound connection client public tcp endpoint 
server waits seconds connection succeed fail connection attempt progress seconds server responds server go ahead signal continues waiting seconds 
client receives server reply server delayed waiting server go ahead signal client attempts outbound connection server effectively causing simultaneous tcp open server 
happens test depends nat behavior follows 
nat properly just drops server unsolicited incoming syn packets happens client listen socket second period server replies client 
client initiates connection server opening hole nat attempt succeeds immediately 
hand nat drop server unsolicited incoming syns allows fine hole punching ideal security client receives incoming tcp connection listen socket receiving server reply 
nat actively rejects server unsolicited incoming syns sending back tcp rst packets server gives client subsequent attempt connect server fails 
test hairpin translation tcp client simply uses secondary local tcp port attempt connection public endpoint corresponding primary tcp port way udp 
test results nat check data gathered consists reported data points covering variety nat router hardware vendors nat functionality built different versions popular operating systems 
total data points include results udp hairpin translation data points include re sults tcp implemented features versions nat check started gathering results 
data summarized nat vendor table table individually lists vendors data points available 
variations test results vendor accounted variety factors different nat devices product lines sold vendor different software firmware versions nat implementation different configurations probably occasional nat check testing reporting errors 
reported data points udp cases nat consistently translated client private endpoint indicating basic compatibility udp hole punching 
support hairpin translation common data points include udp hairpin translation results show hairpin translation support 
data points tcp show compatibility tcp hole punching nat consistently translates client private tcp endpoint send back rst packets response unsolicited incoming connection attempts 
hairpin translation support common reports showed hairpin support tcp 
reports generated self selecting community volunteers constitute random sample necessarily represent true distribution nats common 
results encouraging appears majority commonly support udp tcp hole punching single level nat scenarios 
testing limitations limitations nat check current testing protocol may cause misleading results cases 
learned nat implementations blindly translate ip addresses find unknown application payloads nat check protocol currently protect behavior obfuscating ip addresses transmits 
second nat check current hairpin translation checking may yield unnecessarily pessimistic results full way hole punching procedure test 
nat check currently assumes nat supporting hairpin translation filter incoming hairpin connections arriving private network way filter incoming connections arriving public side nat filtering unnecessary security 
realized nat simplistically treat traffic directed nat public ports untrusted regardless origin 
udp tcp hole hole punching hairpin punching hairpin nat hardware link belkin cisco smc com os nat windows linux freebsd vendors table user reports nat support udp tcp hole punching know behavior common 
nat implementations exist consistently translate client private endpoint long client nat particular private port number switch symmetric nat worse behaviors clients different ip addresses private network try communicate nat private port number 
nat check detect behavior requiring user run client hosts nat time 
doing nat check difficult impossible users usable machine nat 
plan implement testing functionality option version nat check 
corroboration results despite testing difficulties results generally corroborated large isp top consumer nat router vendors representing nats observed network vendors currently produce nats compatible udp hole punching 
additional independent results obtained udp oriented protocol tcp enabled extension appear consistent results 
studies provide information nat testing wider variety behaviors individually just testing basic hole punching compatibility nat check 
extensive tests require multiple cooperating clients nat difficult run results far available limited variety nats 
related udp hole punching explored publicly documented dan known peer peer application communities 
important aspects udp hole punching indirectly documented specifications experimental protocols ice 
know existing published thoroughly analyzes hole punching points hairpin translation issue multi level nat section 
know prior develops tcp hole punching symmetric fashion described 
existence crucial options berkeley sockets api appears little known application developers 
implements similar asymmetric tcp hole punching procedure outlined earlier section 
implement complex tcp hole punching tricks bad nat behaviors mentioned section require rendezvous server spoof source ip addresses require client applications access raw sockets usually available root administrator privilege levels 
protocols socks upnp mid com allow applications traverse nat explicit cooperation nat 
protocols widely consistently supported nat vendors applications appear address increasingly important multi level nat scenarios 
explicit control nat requires application locate nat authenticate typically involves explicit user configuration 
hole punching works contrast works user intervention 
proposals hip extend internet basic architecture decoupling host identity location 
uip doa propose schemes routing nats architecture 
extensions probably needed long term hole punching enables applications existing network infrastructure immediately protocol stack upgrades leaves notion host identity applications define 
hole punching general purpose technique establishing peer peer connections presence nat 
long nats involved meet certain behavioral requirements hole punching works consistently robustly tcp udp communication implemented ordinary applications special privileges specific network topology information 
hole punching fully preserves transparency important attractions nat works multiple levels nat certain corner case situations require hairpin translation nat feature widely implemented 
acknowledgments authors wish dave andersen crucial support gathering results section 
wish henrik nordstrom christian huitema justin roussopoulos anonymous usenix reviewers valuable feedback early drafts 
wish volunteers took time run nat check systems submit results 
andrew daniel geoffrey wilson adrian perrig 
establishing tcp connections hosts nats 
acm sigcomm asia workshop beijing china april 
david clark robert braden aaron falk venkata pingali 
reorganizing addressing architecture 
acm sig comm workshop august 
deering 
internet protocol version ipv specification december 
rfc 
jeffrey 
tcp connections apps software approach solving nat problem 
technical report cmu carnegie mellon university january 
bryan ford 
scalable internet routing topology independent node identities 
technical report mit lcs tr mit laboratory computer science october 
bryan ford 
unmanaged internet protocol taming edge network management crisis 
second workshop hot topics networks cambridge ma november 
paul francis ramakrishna gummadi 
nat extended internet architecture 
acm sigcomm august 
guha paul francis 
simple traversal udp nats tcp 
cis cornell edu 
guha paul francis 
approach udp tcp network connectivity 
sig comm workshops august 

protocol complications ip network address translator january 
rfc 
huitema 
tunneling ipv udp nats march 
internet draft progress 
jennings 
nat classification results october 
internet draft progress 
dan 
nat peer peer networking july 
www caltech edu peer nat html 
leech socks protocol march 
rfc 
moskowitz 
host identity protocol architecture april 
internet draft progress 
nat check 
sourceforge net 
rosenberg 
interactive connectivity establishment ice october 
internet draft progress 
rosenberg huitema 
traversal relay nat turn october 
internet draft progress 
rosenberg weinberger huitema 
simple traversal user datagram protocol udp network address translators nats march 
rfc 
saltzer 
naming binding network destinations 
editor local computer networks pages 
north holland amsterdam 
rfc 

ip network address translator nat terminology considerations august 
rfc 
rosenberg molitor 
communication architecture framework august 
rfc 
transmission control protocol september 
rfc 

network address translation protocol translation nat pt february 
rfc 
justin 
mail ietf mailing list february 
message id aol com 
upnp forum 
internet gateway device igd standardized device control protocol november 
www upnp org 
michael jeremy stribling maxwell krohn hari balakrishnan robert morris scott shenker 
middleboxes longer considered harmful 
usenix symposium operating systems design implementation san francisco ca december 
