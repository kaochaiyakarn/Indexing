como open infrastructure network monitoring research agenda iannaccone intel research cambridge february como project build open infrastructure network monitoring 
infrastructure span multiple administrative domains allow users gather data system data sharing policies 
users able query como systems perform processing network traffic 
open nature infrastructure main challenge efficiently handle multiple competing traffic queries idea define query accuracy metric maximize aggregate accuracy query results available resources 
argue network monitoring possible regulate accuracy query include measurement error timeliness results 
set queries need define aggregate utility function able exercise fine grained control 
overcome challenge need address orthogonal sub challenges 
allowing users post query systems secure fashion 
second definition regulation queries accuracy distributed monitoring infrastructure 
describe sub challenges detail introduce ideas overcome 
allow users easily define compute query network traffic providing security guarantees network operators sharing data challenge addressed levels 
architectural level define boundaries capabilities system 
feature rich query language allows efficient specification implementation traffic metric time possible statically verify safety implementation 
side note aim como perform distributed query processing anticipate applications gather data multiple como systems fuse perform processing irisnet discuss como system architecture section 
security guarantees discussed section 
deliver sufficiently timely accurate answers query may insufficient processing resources give complete results como systems policy decisions turn incoming queries reduce accuracy running queries order satisfy requests queries 
design space addressing challenge defined dimensions space policy global decision applied systems local decision system may take independently time policy applied online query run time line query planning phase 
sections solutions design space 
architecture design como architecture pursue objectives provide data protection network operator ii support traffic query iii handle wide range operating environments different transport media different input data rates different query loads 
details como architecture aims satisfy objectives 
highlight main ideas 
data protection 
major obstacle deployment monitoring infrastructure multiple administrative domains anxiety network operators facing request share network information parties 
solution share anonymized version data allow users anonymized data 
approach known severe limitations 
really address concern network operators convinced having anonymized 
result today commercial isp sharing anonymized packet traces 
user satisfied anonymization process discards information rendering data useless applications 
approach pursue como move queries data 
operator maintains ownership data users send queries data reside 
network operator may inspect query decide query allowed run dataset 
envision network operators define policy kind queries depending user role 
example users belonging organization may allowed post queries external users may restricted short list allowed queries 
support traffic query 
como infrastructure allow users compute metric traffic 
question user express metric compute 
joint diot mcauley irc moore pratt cambridge rizzo pisa 
please refer details 
need expressing traffic metric forces discard commonly query language sql restrictive express query perform automated worm signature detection track tcp sender state 
furthermore need pick language common network researchers application developers 
address challenge choose classical modular approach proven successful similar contexts 
users write single simple plug module making feature rich api provided core system como 
send module source code directly system load query run traffic 
question system find data interest metric 
supporting queries means supporting queries need process packets arrive interface packets transmitted past 
growing interest network forensic applications applications look back traffic understand trace back root cause behaviors specific network events 
reason envision como system constantly maintain large packet trace available queries 
length packet trace obviously depend disk space traffic rate aim dimension system maintain hours traffic entire week 
third question target query response time 
unfortunately different queries wide range response time requirements 
context capacity planning matter accuracy answer response time 
traffic engineering common tools techniques time frame tens minutes timescale bgp operates 
anomaly worm detection applications may request near real time responses 
clearly real time queries answered fetching packets disk 
reason architecture provides data feeds queries 
real time queries run directly incoming packets queries stringent response time requirements may run time fetching packets disk 
handle different operating environments 
architecture guarantees scalability system carefully partitioning tasks different system components 
queries reside plug modules 
set core processes sure modules process packets maintain state information packets store data disk send query response back user 
core processes partitioned requirements functionalities provide functions real time requirements run different processes functions stringent requirements executed 
hardware device assigned different process 
partitioning allows efficiently easily scale system higher speeds larger query loads 
safe modules discussing security system define como threat model 
assume trust hardware operating system core processes ii adversary assume credentials valid user system write plug module load module como system 
security guarantees aim provide malicious module starve modules resources 
problem reduced classical resource management problem solved guaranteeing fair access system resources modules 
fact modules process incoming traffic little control perfectly legal module driven processing resources response certain input patterns 
malicious module corrupt input data modules 
achieved isolating modules removing dependency 
como input data module provided core processes plug modules loaded users 
design choice negatively impacts performance system modules pipelined perform complex functions computation may performed multiple modules 
advantages input data modules pre defined ii input data module corrupted users iii allows treat module independently measure resource usage isolation implement resource management decisions efficiently 
malicious module gain access state modules packet fields system policies allow read 
results controlling memory accesses modules 
approach provide memory isolation virtualization running modules separate processes 
approach drawback delegating control module resource usage os modification os needed gain control reduce portability como software requiring run part core system kernel space 
prefer investigate safe languages memory access guaranteed happen defined regions memory 
como modules defined set callback functions operate memory regions packet data read packet meta data read write private module third memory region shared instances module 
aim define language modules adapting existing solutions proposed literature 
expanding threat model include system components raise interesting research questions consider scope project 
resource management packet sampling traffic sampling refers action collecting subset traffic network link 
high level sampling concerned making partial observations traffic drawn properties apply packets 
observation problem concerned minimising information loss whilst reducing volume collected data possible 
reduction collection process scalable 
way partial information transformed knowledge packet stream inversion problem 
inversion process general imperfect introduces errors 
sampling efficient way reduce load traffic monitor 
allows perform data reduction close wire little impact processing resources monitoring system 
context como project sampling may allow graceful degradation performance running module 
sampling incoming traffic running module local line policy decision como system may take reduce processing resource usage keeping results module user requested error bounds 
works literature studied inversion problem sampled traffic 
duffield study problem flow splitting propose estimators total number flows average flow size original traffic stream 
study inversion flow size distribution different methods 
show major difficulty comes number flows sampled need estimated auxiliary method 
finds sampling rate assures bounded error estimation size flows contributing predefined percentage traffic volume 
introduces idea smart sampling purpose isolate flows contribute considerably traffic done selecting flow records probability increases flow size 
prior focused inversion aggregate flow properties 
clear packet sampling affects accuracy traffic measurement focus individual flow properties 
step direction model analyze detect rank largest flows sampled traffic 
choose start metric knowledge top users applications useful statistics extracted network traffic 
information marketing purposes application developers content providers 
network operators knowledge popular destinations identify emerging markets applications locate setup new points presence 
content delivery networks popularity define caching replication strategies 
traffic engineering identification heavy hitters network treat route differently network 
keeping track network prefixes generate traffic great importance joint barakat inria diot irc 
details please refer 
anomaly detection mechanisms systems 
variation pattern common applications may warning sign trigger careful inspection packet streams 
potential applications come surprise significant effort research community find ways track frequent items data stream 
problem usually addressed objective reducing storage space usage 
works literature assume algorithm memory size chosen largest flows detected ranked high precision 
presence packet sampling methods rank correctly set sampled flows guarantee sampled rank corresponds original rank 
define problem follows 
consider monitor measurement period samples packets independently probability random sampling classifies flows sampled flows 
measurement period monitor sorts sampled flows sampled size packets returns ordered list largest flows 
random nature sampling sampled list may match list obtained sampling 
try answer questions top flows original traffic appear list detection 
ii appear list correct order total ranking 
answer questions perform analytical study problem ranking sampled flows compute probability 
surprisingly analytical analysis indicates high sampling rate required obtain ranking 
example considering link thousands flows pareto flow size distribution sampling rate correctly rank largest flows 
find sampling rate router vendors avoid overloading routers allows successful ranking largest flows number flows monitored link order millions 
find coarser flow definition packets destined ip routable prefixes improves ranking accuracy relative sizes largest flows increase function square root sizes 
contrary common belief having larger flow sizes help accurately detecting ranking largest flows 
research directions include devising additional methods refine ranking presence errors 
identify possible directions ranking distributed sampling 
protocol aware ranking specific information carried packets tcp sequence numbers refine ranking largest flows 
preliminary investigations show approach promising 
main limitation applied subset flows flow definitions tcp connections depending information set hosts may incur errors presence malicious hosts 
distributed sampling tries correlate sampled information multiple sites case observe flow 
way artificially increase sampling rate flows report accurate estimate size 
hand approach introduces bias ranking process sampling error strongly depends number times flow sampled 
placement como systems modules como infrastructure incurs types costs time deployment cost refers actual cost hardware equipment network capture device splitter disks ii operating recurring cost running maintaining systems iii service cost cost running specific query systems limited processing resources 
order minimize deployment costs network operators need identify set limited strategic locations networks 
strategic importance location may depend properties network links connecting sites large number users links links peering links locations available rack space may motivated demands preferences users infrastructure 
identifying strategic locations hard problem placement monitoring devices closely related measurement objective 
example authors focus placement measurement devices active monitoring specifically construction distance maps 
address placement problem active monitoring infrastructure measure delays detects faults 
authors address network coverage problem define set location allow observe network traffic 
show problem finding optimal placement np hard set greedy heuristics provide near optimal solutions 
context como placing system addresses half problem 
remains defined systems query run maximize accuracy keeping service cost minimum 
seek method query allow specify global line fashion target systems query run sampling rate incoming traffic 
define problem follows network topology set pairs monitoring budget links monitor sampling rate maximize accuracy metric keeping monitoring cost total budget 
note explicitly define accuracy metric aim apply method different queries 
framework define optimization problem non linear constraints derive optimal solution long accuracy metric strictly concave function pair may refer nodes network links network prefixes communicating points 
joint barakat inria epfl diot irc 
please refer details 
sampling rate 
currently investigating derive behavior accuracy metric canonical network traffic queries 
address set additional concerns operation standpoint related placement problem resiliency traffic changes 
traffic demand variations expected large networks constant evolution network topology addition new nodes users different traffic engineering practices 
resiliency network failures 
placement exhibit little sensitivity routing matrix changes 
shown link failures part everyday operations vast majority failures isolated network returns pre failure state matter minutes 
network failures cause routing matrix dynamic 
competing traffic engineering objectives 
standard traffic engineering practices may compete measurement goal hamper ability operator optimize monitoring infrastructure 
example practice traffic load balancing equal cost paths placement problem difficult solve 
knowledge traffic matrix routing matrix help determining actual path packets take network 
due randomness introduced hop load balancing strategy 
distributed indices como system allows detailed analysis past network data network forensic analysis 
large amount data stored system desirable able reduce amount data query needs process produce results 
natural approach build indices stored data 
moving single system network systems step design distributed indexing systems 
como system generate traffic summaries form flow records example allow users efficiently query set traffic summaries order find monitors contain relevant traces analyzed allowing users drill important data locations 
prior discussed design distributed approaches evaluating certain kinds declarative queries traffic aggregates 
kind query surprisingly received attention multidimensional range query 
flow record naturally represented hyper rectangle multi dimensional attribute space 
dimensions space include source destination ip addresses source destination port numbers possibly time 
queries network traffic naturally expressed multi dimensional range queries flow size greater mb customer prefix time interval 
argue distributed system supports multi dimensional range queries joint govindan li zhang usc diot irc hong irb 
details please refer 
essential component como 
design distributed systems supporting range queries started receive attention literature :10.1.1.102.473
systems store multi dimensional data manner preserves locality data tuples routed nodes tuples stored node nearby attribute space 
locality preserving hashing enables efficient querying queries routed mechanisms insertions nodes contain relevant parts attribute space 
existing techniques locality preserving hashing directly applied network monitoring designed constrained environments support multi dimensional range queries replicate data records extent may incompatible volume flow records :10.1.1.102.473
consider motivation sketch design mind multidimensional indices network diagnosis system supports creation distributed multi dimensional indices 
mind consists collection network nodes forms hypercube overlay nodes logically distinct located como systems 
traffic summaries expressed multi attribute tuples inserted indices 
mind routes tuples nodes tuples near attribute space stored node making multi dimensional range searches efficient 
care taken distributed index network monitoring 
clearly feasible insert flow records network monitor mind approach incur significant traffic overhead 
see mind way database administrators build centralized indices 
network administrator performs careful line analysis decide attributes indexed granularity traffic summaries inserted mind 
database design analysis trade cost building index expected frequency querying system 
research challenges lie ahead design development mind load balancing load balancing lies levels routing reach node contains part index storage index stored time 
routing load balancing achieved maintaining balanced hypercube alleviating query hot spots replication 
storage load balancing presents additional challenges 
remember mapping data space nodes mind locality preserving 
data distribution skewed careful partition needed balanced storage 
prior works addressed problem dimensional data space method node migration light loaded nodes leave positions overlay space re partition overlay space assigned heavy loaded nodes 
approach handle load dynamics drawbacks context mind node leave rejoin cause skewed hypercube structure 
ii huge amount tuples mind node migration prohibitive 
iii local volatility bring network oscillation nodes repeatedly moving back forth converging stable states 
especially true time stamp put data space indexing 
logically layers mapping mapping data space overlay space mapping overlay space nodes 
node migration addresses load balancing adjusting 
believe mind adjusting better choice affect hypercube structure 
investigating de centralized approach remap data space 
robustness mind task specialized system nodes expected dynamic various assumed dhts 
main robustness concern provide high data availability replication 
choice replication sites considered conditions replica far away original data data replication bring high overhead 
replica easy retrieve original data available 
query optimization traditional databases efficient way mind build query aware indices 
example majority queries attributes destination octets building index attributes destination source octets efficient index destination octets 
complexity comes dominating query forms 
example suppose user types queries octets destination source 
probability single index attributes sufficient 
probability equals need consider build separate indices classical secondary indices techniques partial tuples universal id numbers deal 
multiple indices coexist mind necessary support join indices 
consider scope como project plan leverage existing solutions current going research projects intel focus explicitly distributed query processing 
main activities form research agenda como project 
large set activities part como project discussed instrumental success 
include performance optimization techniques load balancing efficiently monitor resource usage predict query response times ease deployment development new modules simple efficient libraries services como core systems provide developing modules como 
acknowledgments document result large number useful discussions people involved various levels como project simon crosby carl christophe diot rob joe hellerstein larry brad karp derek mcauley andrew moore ian pratt luigi rizzo timothy roscoe richard sharp nina taft 
aspnes shah 
skip graphs 
proceedings acm siam symposium discrete algorithms jan 
barakat iannaccone diot 
ranking flows sampled traffic 
technical report intel research feb 
rastogi 
robust monitoring link delays faults ip networks 
proceedings ieee infocom apr 
bharambe agrawal seshan :10.1.1.102.473
mercury supporting scalable multi attribute range queries 
proceedings acm sigcomm sept 
iannaccone barakat diot 
reformulating monitor placement problem optimal network wide sampling 
technical report intel research feb 
carney monitoring streams new class data management applications 
proceedings vldb 
charikar chen farach colton 
finding frequent items data streams 
proceedings icalp 
choi park zhang 
adaptive packet sampling flow volume measurement 
technical report tr university minnesota 
cormode muthukrishnan 
hot tracking frequent items dynamically 
proceedings acm pods june 
demaine lopez ortiz munro 
frequency estimation internet packet streams limited space 
proceedings th annual european symposium algorithms 
duffield lund 
predicting resource usage estimation accuracy ip flow measurement collection infrastructure 
proceedings acm sigcomm internet measurement conference oct 
duffield lund thorup 
properties prediction flow statistics sampled packet streams 
proceedings acm sigcomm internet measurement workshop nov 
duffield lund thorup 
estimating flow distributions sampled flow statistics 
proceedings acm sigcomm aug 
sharp mycroft 
linear types packet processing 
proceedings european symposium programming 
estan savage varghese 
automatically inferring patterns resource consumption network traffic 
proceedings acm sigcomm aug 
estan varghese 
new directions traffic measurement accounting 
proceedings acm sigcomm aug 
ganesan bawa garcia molina 
online balancing data applications peer peer systems 
proceedings vldb aug 
gibbons karp ke nath seshan 
irisnet architecture world wide sensor web 
ieee pervasive computing oct 
gibbons matias 
synopsis structures massive data sets 
di macs series discrete mathematics theoretical computer science 
harvey jones saroiu theimer wolman 
skipnet scalable overlay network practical locality properties 
proceedings usenix mar 
veitch 
inverting sampled traffic 
proceedings acm sigcomm internet measurement conference oct 
huebsch hellerstein lanham loo shenker stoica 
querying internet pier 
proceedings vldb 
heidemann papadopoulos 
identification repeated dos attacks network traffic forensics 
technical report usc july 
iannaccone diot mcauley moore pratt rizzo 
como white 
technical report intel research sept 
iannaccone diot kurose towsley 
inferring tcp connection characteristics passive measurements 
proceedings ieee infocom mar 
jamin jin jin raz shavitt zhang 
placement internet instrumentation 
proceedings ieee infocom apr 
jim morrisett grossman hicks cheney wang 
cyclone safe dialect proceedings usenix conference june 
karger ruhl 
simple efficient load balancing algorithms peer peer systems 
proceedings spaa 

kim karp 
automated distributed worm signature detection 
proceedings th usenix security symposium security aug 
lakshman 
high speed policy packet forwarding efficient multi dimensional range matching 
proceedings acm sigcomm aug 
li zhang diot govindan hong iannaccone 
advanced indexing techniques wide area network monitoring 
proceedings workshop apr 
li kim govindan hong 
multi dimensional range queries sensor networks 
proceedings acm sensys nov 
iannaccone bhattacharyya 
chuah diot 
characterization failures ip backbone 
proceedings ieee infocom mar 
mogul 
trace anonymization misses point 
world wide web conference july 
moore shannon voelker savage 
internet quarantine requirements containing self propagating code 
proceedings ieee infocom mar 
morris kohler jannotti kaashoek 
click modular router 
proceedings acm symposium operating systems principles dec 
taft diot 
impact flow dynamics traffic engineering design principles 
proceedings ieee infocom hong kong china mar 
taft li zhang diot 
long term forecasting internet backbone traffic observations initial models 
proceedings ieee infocom san francisco usa mar 
hellerstein ratnasamy shenker 
prefix hash tree indexing data structure distributed hash tables 
technical report intel research 
shaikh rexford shin 
load sensitive routing long lived ip flows 
proceedings acm sigcomm sept 
staniford moore paxson weaver 
top speed flash worms 
proceedings worm oct 
suh guo kurose towsley 
locating network monitors complexity heuristics coverage 
proceedings ieee infocom mar 
peterson roscoe 
sophia information plane networked systems 
proceedings second workshop hot topics networking nov 

