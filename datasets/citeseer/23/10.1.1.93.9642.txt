brics rs damg ard jurik length flexible threshold cryptosystem applications brics basic research computer science length flexible threshold cryptosystem applications ivan damg ard mads jurik brics report series rs issn march copyright ivan damg ard mads jurik 
brics department computer science university aarhus 
rights reserved 
reproduction part permitted educational research condition copyright notice included copy 
see back inner page list brics report series publications 
copies may obtained contacting brics department computer science university aarhus ny munkegade building dk aarhus denmark telephone telefax internet brics brics dk brics publications general accessible world wide web anonymous ftp urls www brics dk ftp ftp brics dk document length flexible threshold cryptosystem applications ivan damg ard mads jurik aarhus university dept computer science brics 
propose public key cryptosystem derived paillier cryptosystem 
scheme inherits attractive homomorphic properties paillier encryption 
addition achieve new properties users modulus generating key pairs allows efficient proofs relations different encryptions 
second construct threshold decryption protocol scheme length flexible handle efficiently messages arbitrary length public key secret key shares held decryption servers fixed size 
show apply cryptosystem build self tallying election scheme perfect ballot secrecy 
small voting system result computed submitted votes need decryption servers 
votes kept secret cryptosystem broken regardless number cheating parties 
contrast known schemes usually require number decryption servers majority honest 
length flexible mix net universally verifiable size keys ciphertexts depend number mix servers robust corrupt minority 
mix nets provide anonymity shuffling messages provide random permutation input ciphertexts output plaintexts knows plaintexts relate ciphertexts 
mix net inherits nice properties underlying cryptosystem making useful setting small messages high computational power low band width verify mix done correctly 
keywords length flexible length invariant mix net group decryption self tallying election perfect ballot secrecy 
background paillier proposed public key cryptosystem rsa uses computations composite modulus basic research computer science centre danish national research foundation 
properties making potentially interesting applications electronic voting mix nets additively homomorphic decryption efficient ciphertexts need solve discrete logarithms additive homomorphic schemes derived el gamal encryption 
system generalized handle arbitrary size messages modulus threshold decryption protocol proposed 
unfortunately protocol handle efficiently messages length smaller threshold set key generation time longer messages cumbersome multiparty computation protocol needed 
unsatisfactory property secret key essentially factorization modulus different users modulus 
means natural tasks proving zero knowledge ciphertexts different public keys contain message difficult require generic solutions 
possible application homomorphic encryption build mix nets 
protocols provide anonymity senders collecting encrypted messages users collection servers process plaintext messages output randomly permuted order 
useful property mix nets length flexibility means mix net able handle messages arbitrary size 
precisely mean messages submitted single run mix net length order break anonymity common length decided freely run mix net having change public key information 
especially useful providing anonymity mails 
way achieve length flexibility hybrid mix nets 
mix nets public key construction create keys symmetric cipher encrypting bulk messages 
length flexible hybrid mix nets proposed 
abe proposed scheme verification server behavior relies generic method desmedt 
results system robust square root number mix servers corrupt 
juels jakobsson suggested verification added message authentication codes macs appended plaintext layer encryption 
allows tolerating corruptions expense efficiency instance length ciphertexts depends number mix servers opposed server store secret material 
system verifiable universally verifiable means external observers verify done correctly 
minor pitfall corrected abe introduced verifiable mix nets network binary switching gates permutation networks 
robust half mix servers controlled active malicious adversary 
approach length flexible exchange el gamal verifiable length flexible encryption scheme 
cryptosystem support efficient length flexible threshold decryption 
application area homomorphic encryption electronic voting 
yung introduced new paradigm electronic voting protocols self tallying perfect ballot secrecy short 
paradigm suitable elections small group users want maximally secure vote help external authorities 
main property perfect ballot secrecy means coalition voters majority information compute follows result votes tally honest users votes 
best hope type privacy achieved elections 
self tallying means soon votes cast interaction needed compute result efficiently computed just looking ballots done casual third party 
dispute freeness means disputes players arise faults detected public 
argued elections achieved efficiently traditional methods 
instance large scale solutions typically type assume set authorities available help election 
authorities typically share secret key reconstructed majority 
small scale scenario voter play role authority give perfect ballot secrecy corrupt majority know single voter voted 
try repair setting threshold secret sharing scheme total number voters single fault mean secret key lost expensive key generation phase needed 
elections achieved vote constructs discrete log modulo prime 
results tallying phase needs find discrete log requires voters 
implies generalization multi way elections results larger ballots worse complexity tallying phase 
earlier electronic voting natural speculate solved simply paillier encryption 
noted lose essential properties scheme 
contribution suggest new public key cryptosystem 
development scheme efficient constant factor inherits homomorphic property 
semantically secure paillier composite ddh assumptions moderate loss efficiency paillier assumption 
related paillier scheme efficient length flexible 
achieve new properties 
scheme allow users modulus 
allows efficient zero knowledge proofs relations ciphertexts created different public keys 
apply construct elections tallying phase reveals result small number additions multiplications 
shows elections essential properties paillier encryption solving problem left open 
implies natural efficient generalization multi way elections 
second propose threshold decryption protocol keys set messages arbitrary length handled efficiently fixed size keys 
addition compu tational done server depend message length cost final public post processing message dependent 
give efficient zero knowledge protocols proving various claims encrypted values 
combine ideas construct mix net desirable properties time length flexible public key limit size plaintexts encrypted mixed efficiently 
length ciphertexts specific mix fixed anonymity compromised 
length invariant lengths keys ciphertexts depend number mix servers 
provably secure system provable secure random oracle model decisional composite residuosity assumption composite ddh universally verifiable verify correctness output mix net 
strong correctness messages submitted malicious users changed submitted 
hold case helping malicious servers 
order flexible mix servers need invoked certain order 
improves resilience temporary server unavailability 
note achieved public key encryption passive adversary case efficient hybrid mix nets uses symmetric key crypto encrypt messages 
preliminaries notion semantic security encryption system definition 
adversary public key cryptosystem gets public key pk generated security parameter input outputs message encryption pk message chosen uniformly message space outputs bit 
respectively bethe probability outputs encryption respectively random encryption 
define advantage adv 
cryptosystem semantically secure probabilistic polynomial time adversary adv negligible systems modified version damg ard jurik generalization paillier cryptosystem 
security encryption scheme depends decisional composite residuosity assumption introduced paillier 
conjecture decisional composite residuosity assumption dcra 
probabilistic polynomial time algorithm assume gets input 
pq admissible rsa modulus length bits random random th power 
outputs bit probability random andp probability random th power 
negligible encryption extended discrete logarithm constructions ddh assumption needed slightly modified version capture group 
conjecture decisional diffie hellman composite ddh probabilistic polynomial time algorithm assume gets ga mod gb mod input 
pq admissible rsa modulus length bits element qn group squares chosen uniformly random value random qn satisfies gab mod outputs bit probability random qn andp probability ify gab mod negligible note number publicly known choose exponent uniform distribution 
exponent chosen group zn sufficiently large value 
done get distribution elements gr statistically close uniform distribution group generated difference distribution smaller value 
result goldreich rosen shows gr mod pseudo random generator 
possible choice result elements gr zn distinguished uniform element group generated damg ard jurik algorithm calculating discrete logarithm respect element described 
ls denote application function satisfies ls mod mmod computing function requires basic cryptosystem key generation choose rsa modulus pq length bits primes 
select element qn group squares qn 
public key mod private key 
encryption plaintext choose integer zn random zn ciphertext es mod mod ns mod decryption ciphertext es deduced length attached encryption ls mod ns ls mod ns mod ns ls mod mmod 
key generation assumes knows factorization choosing 
choose random zn generate 
difference security produced indistinguishable distribution allows system constants users 
security cryptosystem theorem semantic security 
conjecture dcra conjecture composite ddh cryptosystem semantically secure respect definition 
proof theorem seen appendix cryptosystem may simply combination el gamal paillier security inherently conjectures fact true 
simple modification possible show semantic security conjecture technique 
public key set gns mod ns generates subgroup ns order mod ns encryption ns mod ns 
theorem semantic security modified system 
conjecture dcra modified cryptosystem semantically secure respect definition 
proved follows general essentially way ciphertext form mod 
conjecture implies distinguish case case chosen randomly jacobi symbol respect 
case verify chosen large ciphertext contains shannon information plaintext 
basic system efficient describe protocols terms es encryption function modified encryption function 
efficient length flexible threshold cryptosystem basic cryptosystem length flexible threshold cryptosystem constructed threshold exponentiation threshold signatures 
key generation choose rsa modulus pq qn 
pick secret value random coefficients ai wheret threshold system servers 
polynomial created secret shares calculated 
public value mod values verification hi mod public key verification values hw private key server encryption plaintext choose integer zn pick random zn 
ciphertext es mod mod mod threshold decryption ciphertext es servers release value di mod proof hi 
proof shown section 
di values set servers legal proofs combined lagrange interpolation create exponent mod reason factor ensure removed calculating hd ns mod plaintext ls mod modn proof friendly variant system previous section works long legal encryptions submitted protocol allowing prove zero ciphertext formed 
standard problem building efficient protocol type need group elements large prime factors orders 
case ensured squaring start proofs trying show desired property prove 
shall see implies desired property 
handle define slightly relaxed cryptosystem key generation encryption plaintext choose integer zn pick random zn 
ciphertext mod mod mod threshold decryption ciphertext decrypted jacobi symbol 
squared value computed 
decrypt needs squared slightly different computation ns mod plaintext ls modn proving properties easier values squared sure qn proof 
section proofs shown proof encryption proof legal encryption publicly known plaintext threshold decryption proof 
appendix techniques improving complexity computations 
proof proof friendly variant purpose proof prove gr mod protocol legal encryption input private input zn zn 

chooses random zn secondary security parameter bits 
sends 
chooses random bit number sends 
sends er em mod checks prime jacobi symbol mod mod accepts case 
protocol proven sound complete honest verifier zero knowledge 
election protocol section non interactive setting fiat shamir heuristic hash function generate challenge 
proof legal encryption certain plaintext protocol legal encryptions altered protocol proving legal encryption certain plaintext way protocol legal encryption message input zn private input zn 

chooses random secondary security parameter bits 
sends 
chooses random bit number sends 
sends er checks prime jacobi symbol em modn mod accepts case 
protocol sound complete honest verifier zeroknowledge follows directly protocol observation encryption plaintext satisfy equation 
decryption proof decryption share server calculated value di mod server needs prove submitted allow possible factor accept di value lagrange interpolation 
needs proven log hi log done proof identical shoup rsa threshold signatures 
proof hash function outputs bit hash pick random calculate mod mod hi ic proof pair 
verification proof accepted equation hold hi gz mod mod proof correctness sound statistical zero knowledge random oracle model 
proven practical threshold signatures omitted 
security threshold cryptosystems due homomorphic properties basic cryptosystem chosen ciphertext secure hope prove threshold version chosen ciphertext secure 
show result saying essentially long adversary control ciphertexts decrypted threshold decryption releases information plaintext 
definition 
chosen plaintext threshold adversary runs probabilistic polynomial time statically actively corrupt servers 
addition efficiently distribution may request message chosen see random ciphertext containing decrypted threshold decryption protocol 
threshold public key cryptosystem secure adversary view simulated probabilistic polynomial time public key 
note arbitrary includes case adversary chooses 
type security sufficient mix net 
elaborate decryption protocol ciphertext randomized decrypted stronger property shown security threshold system equivalent security non threshold version attack 
omit due space limitations 
lemma 
threshold cryptosystems semantically secure conjectures 
secure chosen plaintext threshold adversary defined 
proof 
semantic security follows theorem encryption basic cryptosystem transformed encryption mod threshold systems raising component th power system multiplying proofs correctness decryption shares identical shoup verification proofs signatures shares proved sound statistical zero knowledge 
furthermore secret sharing secret key identical 
straightforward construct simulation proof security lines proof 
brief sketch public key simulate shares corrupt players choosing random values 
reconstruct verification values honest servers lagrange interpolation exponent 
simulate adversary view decryption protocol choose construct random ciphertext containing particular means know relevant value shares corrupt players compute statistically close distribution contribution honest servers decryption 
proofs correctness simulated 
soundness proofs adversary able contribute bad values decryption output desired 
homomorphic properties cryptosystems additive homomorphic means encryptions combined create new encryption sum plaintexts original encryptions 
proof friendly cryptosystem shown additive homomorphic way works cryptosystems note provides easy way re randomize encryption homomorphism works encryptions get transformations increase decrease change message inside encryption 
encryption transform encryption doing transformation ns mod ns mod mns mod mn encryption needs transformed encryption ns mod mod mod mmod ns rn mod rn ns mmod ns mod rn mod mod order relatively prime value rns span just big subgroup 
verifiable length flexible mix net mix net model mix net network servers receive number encryptions perform random permutation output plaintexts encryptions 
done way servers schemes cooperate link input encryptions output plaintexts 
note single mix messages inputs servers length match sizes inputs outputs find information permutation 
practical applications means fixed upper bound decided mix input messages mix chosen size 
bound chosen freely mix 
adversaries adversary defined tu ts active adversary passive adversary 
thresholds tu ts maximal number users servers respectively controlled adversary 
example tu ts ap adversary means adversary read change value tu users view value inside ts servers 
passive adversary observes values passing server user try induce values process 
active adversary attack protocol changing value refuse supply results part protocol 
adversary assumed non adaptive meaning users servers controlled adversary decided advance 
mix net safe adversaries increasing strength number users number servers pp adversary adversary see value passing server users 
ap adversary adversary see value passing server see change value inside users 
aa adversary strongest adversary see change value passing users half servers 
compared length flexible mix net adversaries improved aa aa security mix net strong version correctness users working servers able change message mix started 
definition strong correctness 
encrypted messages input encryptions malformed 
mix net output permutation messages correct decryptions discard malformed encryptions 
definition anonymity 
mix messages tu ts adversary 
adversary unable link tu messages tu uncorrupted users sent 
definition universal verifiability 
public view protocol information written bulletin board exist poly time algorithm accepts output protocol correct outputs reject 
definition robustness 
tu ts adversary protocol output correct result 
mix network shown satisfy definitions different adversaries 
theorem 
basic mix network provides strong correctness anonymity robustness adversary number users number servers 
theorem 
mix network threshold decryption provides strong correctness anonymity universal verifiability robustness adversary number users number servers 
system assumed communication protocol goes bulletin board access verify result 
means public key outputs proofs mix servers written bulletin board 
mix network built threshold cryptosystem way key generation trusted third party ttp generates pq qn 
depending model server picks secrets way 
passive adversary model mix server ttp picks random value sets mod 
public value computed modn 
public key posted private key server active adversary model key generation takes place exactly described threshold cryptosystem 
public key verification values hw posted bulletin board 
private key th server secure way 
encryption fixed mix zn random values zn chosen 
ciphertext posted bulletin board mod mod mod mixing phase mixing begins ciphertext jacobi symbol discarded incorrect 
illegal ciphertext jacobi symbol submitted caught decryption 
set 
pick th server mix permutation correct output posted bulletin board passive adversary model adversary passive mix server just random permutation output re encryption ciphertexts values mod mod mod active adversary model verification needed satisfy universal verifiability correctness robustness system 
server picks random permutation creates network binary gates construction 
network consists log binary gates create permutation inputs 
binary gate bit defined determining gate pass encryptions straight gate switch depending complete permutation mix 
gate ciphertexts input 
server chooses random values zn sets output ciphertexts gate prove done correctly server needs prove satisfying equations really exist 
done showing difference legal encryption likewise 
done concurrent runs legal encryption message protocol technique simulates statements unable answer truthfully legal encryptions 
legal encryptions 
proofs posted board outputs intermediate encryptions 
proof mix incorrect server refuses post complete mix output mix server simply ignored input mix server 
mix server refuses output mix server removed set 
decryption mixing performed decryption output ciphertexts needs performed 
removal hr part different depending model achieved way passive adversary model servers perform decryption calculating decryption part di mod values removed encryption di ns mod active adversary model servers check servers performed legal mix case honest safe decrypt encryptions 
value computed proof friendly threshold decryption section 
passive active model value form input correct encryption 
correct encryption power remaining hr ns case decryption aborted case 
message decrypted ls mod mod order mix servers chosen arbitrarily means server unavailable supposed mix server back perform mix output happened 
appendix method shown optimizes computations public exponentiation time 
security proofs proof sketch theorem anonymity follows semantic security encryption scheme ensures just server honest adversary track messages passing server 
furthermore happened ciphertexts processed longer controlled adversary 
apply lemma show decryption phase releases side information adversary 
warning technical details omitted due space limitations 
robustness result setup threshold decryption 
server refuses mix re simply ignored result decrypted threshold decryption 
strong correctness comes zero knowledge proofs ensure mix servers change message tamper correctness encryption 
bulletin board model verification proofs steps protocol ensures universal verifiability 
self tallying elections perfect ballot secrecy section shown efficient elections perfect ballot secrecy cryptosystem introduced 
note practical purposes sufficient application 
brief walk technical details depth explanation reader referred 
system uses bulletin board model assumed safe prime product generator qn setup advance modulus generated 
option trusted third party 
note factorization needed shared form trusted party solution quite acceptable instance secure hardware generated 
option distributed protocol generic multiparty computation 
note protocols purpose set proper subset players find factors words ensure perfect ballot secrecy players generate 
comes expense possibly having restart key generation faults occur cost avoided need handle dishonest consistent way corrective fault tolerance defined 
expense election generate simply random number large hard factor completely 
postpone details final version 
element generated jointly generating random value defining qn 
bulletin board participates protocol ensure actual voters know result vote 
self tallying scheme type fairness achieved trust see 
may think bulletin board party vote influence result trusted submit vote players voted 
bulletin board participate step protocol 
participate registration phase registers public key error correction ballot casting encrypted values needs reveal post ballot casting step reveals vote enabling calculate result 
accepting extra conjectures techniques employed order rsa modulus prime setup phase setup phase consists tasks 
voter registration initialization voting system 
registration phase voters want participate election register bulletin board 
voters registered voters need setup values protocol 
voters malicious part protocol error correction step correct problems encountered 
voter registration voter chooses private key random zn computes value hi mod voter registers posting public key pki hi bulletin board 
set registered voters simplicity assume 
ensure fairness bulletin board generates public key pk posts bulletin board set 
initialization voter picks random values sij random rij zn 
set sij mod ns ensures sij voter publishes encryptions cij gij hij sij rij proof legal encryptions sum plaintexts modulo prove legal encryptions proof section 
prove sum plaintexts encryptions gi hi look product hi 
resulting value hi ri ns si siu ns th power iff sij protocol ns th powers prove voter knows th root number ri error correction initialization set voters doesn supply encryptions supply invalid proofs 
values submitted voters simply ignored 
values honest voters created voters remain unused problem numbers sum 
correct honest voters open encryptions assigned voters 
formally voter releases values sij rij 
values uniquely determined encryption step verified checking cij sij rij 
voter refuse publish information simply added values revealed 
ballot casting ballot casting voter retrieves encryptions cij combines cj cij sij value cj private key get tj sij 
voter submits values dj vj rj vj tj value representing candidate voter votes say election value rj zn chosen random 
easiest way understand note ignore error correction assume faults occur tj set random numbers sum 
ensure xj formed adding allowable value vj tj res xj election result sum vj randomness tj ensures xj possible sets vj summing res equally 
prove dj legal encryption allowable value vj proof section ensure correct encryption proof legal vote value logarithmic number candidates second value encryption prove legal vj encrypted 
prove dj encryption vj xj voter proves xj th power proof sends proof bulletin board 
time required ns th root computed rj ij 
holds iff vj dj xj vj tj vj rj tj xj vj tj vj tj error correction ballot casting set voters ballot casting 
values voters simply published bulletin board error correction initialization 
time values created voters honest voters value sii know honest voters sij 
correct values published secret values rij unknown voters bulletin board decrypts reveals plaintext cij proves sij th power proof 
time required th root ij 
refuse participate error correction re simply added values published 
denote voters removed error correction steps voters completed protocol honestly 
post ballot casting ballot phase parties submitted vote removed error correction bulletin board computes ci pk gets plaintext si si decrypt ing 
bulletin board posts proof pk th power proof value calculated tallying 
point result computed res xj sij vi mod sum xj values posted bulletin board protocol 
values second sum values voters revealed error correction initialization value revealed error correction ballot casting 
third sum sum second values revealed error correction ballot casting 
lack space give formal definitions proofs security 
perfect ballot secrecy follows ignore encryptions remain due semantic security 
remains public numbers xi numbers revealed error correction 
observes corrupted subset result possible sets votes honest players leading result equally 
correctness follows observations sij implies cij get tj xj vj vj tj xj vj vj sij sij modn get sij sij sij mod subtracting sum get wanted result res xj sij vj mod sij mod sij efficiency comparison scheme schemes comparable steps protocol tallying phase 
protocol needs exhaustive search space size optimized multiplications 
protocol obtains result election simply adding values posted bulletin board 
scheme generalizes multi candidate elections exactly way 
particular tallying phase remains number additions 
scheme search result take multiplications candidates 
sij 
permutation network journal acm january pp 


shamir share secret communications acm november pp 


cramer damg ard schoenmakers proofs partial knowledge simplified design witness hiding protocols proceedings crypto springer verlag lncs pp 


abe mix networks permutation networks proceedings asiacrypt springer verlag lncs pp 


paillier public key cryptosystems composite degree residue classes proceedings eurocrypt springer verlag lncs pp 


abe length invariant hybrid mix proceedings asiacrypt springer verlag lncs pp 


desmedt break practical mix design new proceedings eurocrypt springer verlag lncs pp 


goldreich rosen security modular exponentiation application construction pseudorandom generators cryptology eprint archive record eprint iacr org december 

shoup practical threshold signatures proceedings eurocrypt springer verlag lncs pp 


abe remarks mix network permutation networks proceedings public key cryptography springer verlag lncs pp 


damg ard jurik generalisation simplification applications paillier probabilistic public key system proceedings public key cryptography springer verlag lncs pp 

final version appears 

damg ard practical threshold rsa signatures trusted dealer proceedings eurocrypt springer verlag lncs pp 


jakobsson juels optimally robust hybrid mix network annual acm symposium principles distributed computing pp 

damg ard jurik nielsen generalization paillier public key system applications electronic voting appear international journal information security springer verlag 

cramer shoup universal hash proofs paradigm adaptive chosen ciphertext secure public key encryption proceedings eurocrypt springer verlag lncs pp 


camenisch shoup efficient computation modulo shared secret application generation shared safe prime products proceedings crypto springer verlag lncs pp 


yung self tallying elections perfect ballot secrecy proceedings public key cryptography springer verlag lncs pp 

adversary 
get public key forward 
get message 
return 
get encryption es uniformly random zn 
calculate mod 
send 
get bit 
return fig 

algorithm adversary breaking damg ard jurik cryptosystem adversary security cryptosystem proving security cryptosystem lemma stating qn degrade security damg ard jurik cryptosystem 
lemma 
damg ard jurik cryptosystem qn semantically secure respect definition cryptosystem proof 
show security equivalent assume adversary exits break semantically security quadratic cryptosystem 
adversary original cryptosystem 
encryption message ciphertext generated legal encryption uniform distribution random follows ns ns es modn mis chosen uniformly random message space resulting ns ns es modn gcd function permutation new encryption uniformly random zn probabilities andp means advantage lemma easy prove dual key cryptosystem semantically secure 
theorem semantically security 
conjectures dcra composite ddh cryptosystem semantically secure respect definition 
proof 
proof done step hybrid reduction composite ddh conjecture semantical security quadratic variant damg ard jurik cryptosystem dcra 
public key pairs indistinguishable conjecture 
gk mod hk ns mod ns mod ns uniformly random 
gk mod ns qn 
gk mod ns 
mod ns mod random zn mod ns tuple indistinguishable dual key system semantically secure definition 
adversary distinguish tuple advantage poly nomial adversary able distinguish pair consecutive tuples probability larger pairs shown indistinguishable showing adversary tuples exist 
pairs indistinguishable due reduction composite ddh 
assuming adversary having non negligible advantage distinguishing pairs adversary built break composite ddh advantage 
algorithm adversary seen 
cases composite ddh correspond tuple respectively adversary 
get composite ddh tuple 

give public key tob 

get message 
give encryption ns mod tob 

get bit 
return fig 

algorithm adversary break composite ddh adversary ab ab value tuple 
uniformly random qn random value tuple 
tuple indistinguishable composite ddh assumption 
pair indistinguishable follow directly fact quadratic damg ard jurik system semantically secure dcra 
encryption rns mod ns message indistinguishable encryption random message zn rns mod ns pairs indistinguishable reduction 
optimization cryptosystem description cryptosystems mix net mod ns simplicity tation scheme 
number bit operations needed calculate sk msg security parameter msg length messages encrypted 
easy transform computed easily equality mod fixed mod ns calculated decryption servers advance passed public key 
important thing note value ns means value ns nice attribute value possible time compute method works mod mod mod ns ns kn ns mod ns kn 
means exponentiations encryption decryption mixing proving verifying mix net reduced complexity constant larger public generator value encryption exponentiation form computed formula 
mod achieving complexity shown 
exponentiation optimized public exponentiation combined server decryption value 
reason base exponentiation instance fixed 
brics report series publications rs ivan damg ard mads jurik 
length flexible threshold cryptosystem applications 
march 
pp 
rs anna ing 
semantic theory value passing processes late approach 
march 
pp 
rs mads sig ager olivier danvy jan 
interpreter compiler virtual machine functional derivation 
march 
pp 
rs mads sig ager olivier danvy jan 
functional correspondence evaluators machines 
march 
pp 
rs dan ulrich kohlenbach 
complexity analysis functional interpretations 
february 
pp 
rs mads sig ager olivier danvy henning 
fast partial evaluation pattern matching strings 
february 
pp 
report superseded report brics rs 
rs federico giuseppe 
wireless authentication spaces 
february 
pp 
rs ivan damg ard 
extended quadratic frobenius primality test average worst case error estimates 
february 
pp 
rs ivan damg ard 
efficient algorithms gcd cubic residuosity ring eisenstein integers 
february 
pp 
rs claus brabrand michael schwartzbach mads 
system extensible parsing transformation 
february 
pp 
rs giuseppe sassone 
jeeg temporal constraints synchronization concurrent objects 
february 
pp 
short version appears fox editors joint acm conference java grande proceedings pages 
