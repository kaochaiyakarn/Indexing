really truly bittorrent charles fry michael reiter august cmu cs school computer science carnegie mellon university pittsburgh pa electrical computer engineering department carnegie mellon university pittsburgh pa usa ece cmu edu electrical computer engineering department computer science department carnegie mellon university pittsburgh pa usa reiter cmu edu partially supported nsf award number ccf keywords peer peer systems expander graphs random walks bittorrent peer peer protocol collaborative downloading 
allows peers exchange blocks file downloading obtaining central server 
despite decentralized nature protocol bittorrent traditionally relied centralized tracker bootstraps system providing new clients random set peers 
tracker previously perceived critical part bittorrent systems efforts fault tolerant focused tracker replication tracker implementations distributed hash tables entitled bittorrent 
tracker sole responsibility implemented centralized distributed manner allow peers randomly select peers connect effort construct robust graph 
propose completely removing tracker replacing set distributed protocols random walks accomplishing tracker explicitly tracking peer system 
expansion measure compare quality graphs generated distributed algorithms graphs generated centralized tracker 
explore implications various design decisions related random walks key component proposal 
bittorrent distributed protocol multiple concurrent clients peers download file sharing blocks file obtaining central location 
order bootstrap protocol new client discover peers currently downloading file interest 
accomplish centralized tracker explicitly tracks peers currently downloading file 
contacted new client tracker adds client address list current downloaders collectively known swarm selects random set peers swarm provide joining client 
client contacts peers attempting establish connections 
clients connected neighbors long remain connected regularly attempt exchange blocks file downloading 
unfortunately distributed network formed bittorrent peers far robust scalable centralized tracker 
tracker goes offline remaining clients able continue exchanging blocks file downloaded lose current neighbors impossible new peers join swarm 
remedy propose removal tracker replacing functionality distributed algorithm random walks swarm 
approach party keeps track members swarm peers need notify departure continued presence 
peer simply maintains connections bounded set neighbors file block exchange 
peer neighbors selected walking randomly existing swarm refreshed similarly peer loses neighbors due departures failures 
walks conducted entry points joining nodes starting peers provided entry points stress entry point track swarm membership peer 
fact peer act entry point possibly simultaneously possibly transiently information participating swarm peer 
general framework evaluate different design alternatives impact swarm particular attention random walk algorithm affects swarm quality 
measure quality employ vertex expansion minimum ratio number peers neighboring set size set sets certain size half swarm 
expansion low diameter implies long recognized important properties peer peer networks 
high vertex expansion implies network robust partition highly improbable ensures relatively large number communication paths leaving set nodes network maximizing aggregate bandwidth network allows rare blocks rapidly expand swarm minimizing risk disappear network 
conduct evaluations trace driven simulations 
traces utilize wellknown month redhat tracker log month log debian tracker 
traces demonstrate random walk algorithms yield similar cases better expansion centralized tracker degree constraints imposed default bittorrent configuration 
suggests approach merit eliminating fragility due tracker impairing block exchange 
related place contributions context related bittorrent specifically section distributed construction random graphs generally section 
bittorrent traditional centralized tracker long recognized single point failure bittorrent systems 
efforts remove single point failure involved instantiating multiple tracker replicas defining order accessed 
successful strategy terms client adoption removing dependency single centralized tracker involved support distributed trackers 
concept originally pioneered unofficial clients bittorrent added official support distributed tracker naming resultant system bittorrent 
model client lightweight tracker distributed hash table dht kademlia store identities peers torrent 
storing tracker information dht removes single point failure centralized tracker construction maintenance dht requires addition neighbors communicates part bittorrent protocol peer maintain orthogonal set neighbors dht pay communication cost maintaining dht face high rates churn 
begs question distributed tracker combined existing bittorrent neighbor infrastructure tracker kind centralized distributed really necessary 
show 
supported official client peer exchange part bittorrent implementations 
introduced mechanism reducing load tracker peer exchange gossip protocol peers tell peers swarm 
peer exchange fails entirely eliminate tracker demonstrate peers discover new peers sharing peer information completely dependent tracker 
random graphs algorithmic techniques employ derive distributed construction random graphs vast majority seeks build random regular graphs particular random regular graph expander high probability 
holt proposed protocol distributed construction random regular graphs bound mixing time see section proved cooper 
nodes depart broadcast entire graph seeking nodes connected avoid large scale broadcasts 
law siu similarly construct random regular graphs cost maintaining hamilton cycles graph approach subsequently optimized insights due 
unfortunately hamilton cycle constructions unable deal large numbers nodes leaving network requiring periodic regeneration graph 
works construct random regular graphs graphs graph transformations 
introducing new randomness approaches benefit bittorrent graphs focus quality graphs initially constructed 
random regular graphs possess desirable properties high probability low diameter high expansion bittorrent tracker construct regular graphs bounded degree graphs 
follow goal closely mimic behavior tracker irregular graph constructions tend simpler intrusive new connections added necessary destroy existing connections 
tolerant node departures attempt maintain number neighbors node 
space proposed partially distributed bounded degree graph construction protocol relies centralized cache constant number nodes 
model directly applicable bittorrent tracker require central server insufficient case 
cooper propose algorithm peer contributes cm tokens graph circulate random walks picked time new nodes joining network new node connects peers contributed tokens picked 
resultant graph shown maintain diameter logarithmic total number nodes graph robust adversarial deletion edges vertices 
disadvantage protocol tokens graph constantly circulated order ensure mixed 
rate new nodes join system limited wait existing tokens mix potential problem face flash crowds bittorrent handle gracefully 
francis evaluate various types random walks random neighbor selection construction peer peer networks desired degree distribution 
unbiased walks unfit constructing graphs fixed degree distributions francis explore various biased halting biased forwarding heuristics simulation 
bittorrent graphs irregular require prescribed degree distribution impose lower upper bound degree 
arthur panigrahy define generative random graph model bittorrent graphs model analyze block distribution 
model incomplete doesn account neighbor replacement may occur nodes leave graph 
propose slight modification bittorrent graph construction initial neighbor selection biased newer nodes ends improving block exchange 
preliminaries section introduce key concepts underlie remainder discussion 
represent bittorrent swarm point time simple graph set peers set neighbor relations iff connected 
note neighbor relation symmetric 
neighbors 
deg 
discussed section primary measure quality graph vertex expansion min measuring expansion graph np complete close relationship graph expansion second smallest eigenvalue graph laplacian matrix 
specifically graph maximum degree vertex expansion 
claim compute expansion graph lower bound report 
random walk algorithm defined transition probability matrix row pi distribution components sum pij 
step random walk currently node samples node distribution pi transitions node making new current node 
random walk sequence nodes visited repeating steps starting node chosen initial distribution stationary distribution random walk algorithm distribution satisfies random walk algorithms consider stationary distribution unique exists high probability probability taken selection graph induced algorithms treat 
exists mixing time number steps needed reach distribution informally minimum pt initial distributions 
random walk algorithms consider mixing time known log 
random walk algorithms study utilize parameter fact mixing time established particular algorithm preclude 
bittorrent propose modification bittorrent protocol removes dependence tracker 
tracker sole responsibility provide peers neighbors randomly selected entire swarm 
currently happens node joins swarm neighbor count falls certain threshold 
tracker accomplishes job maintaining global list peers currently swarm selecting random sets peers distribution potential neighbor sets 
peer initiate connections peers cache extra peers tracker told 
peers accept connections peers long neighbors 
current official bittorrent implementation values configuration variables 
maintaining global list peers allows rapid random selection means mechanism random nodes selected 
appealing alternative random walks long randomly select nodes graphs 
simply performing unbiased random walk sufficient length mixing time selecting node walk select node graph probability proportional degree 
order select node irregular graph uniform probability bias added direction biased forwarding length biased halting random walk 
biased random walks bittorrent select initial neighbors joining nodes replace failed neighbors removing dependence tracker 
random walk algorithms consider require walking node randomly select element distribution 
implemented querying obtain choosing asking select element proper distribution return element able select failed replace neighbor obtain connecting ask keep notified changes 
entry points bittorrent function properly tracker kind necessary new nodes discover nodes swarm 
accomplish entry points help joining nodes obtain initial random set neighbors 
purpose entry points serve role tracker key distinction perform role 
centralized decentralized trackers name implies explicitly keep track node currently swarm 
entry point hand aware neighbors swarm 
node swarm act entry point helping joining nodes discover new neighbors 
entry points strictly required members swarm swarm membership advantage helping entry points remain connected swarm 
entry points implemented manner strongly resembles tracker emphasize key differences 
tracker holds distinguished role arbitrarily shared dht tracker implementations rely small number nodes store membership swarm 
entry points hand arbitrary nodes inside outside swarm 
communication required multiple entry points operate independently parallel 
entry points proactively explore swarm need notified join leave events nodes need regularly announce presence required tracker 
initial neighbor selection various ways random walks entry points order provide joining nodes initial random neighbor set 
primitive strategy entry point joining node perform mixing random walk order select new neighbor 
regardless performs walks solution disadvantage requiring walk advanced mixing time see section node walk selected desired stationary distribution 
having entry points perform walks allows new nodes rapidly join swarm long join rate entry point high 
advantage requiring newly joining nodes perform random walks reduces amount entry points required perform node joins swarm 
necessary walk newly advanced full mixing time join 
applying technique introduced peer peer context entry points maintain perpetual random walks extended steps selection random node 
perpetual random walks requires entry points extend random walks order avoid repeatedly distributing set neighbors joining node 
strictly required recommend entry points perform perpetual random walks neighbor set removes need maintain separate set nodes block exchange random walks 
beneficial side effect automatically refreshing entry point neighbors ensuring randomly spread entire graph 
practical measure entry points refresh neighbors actively exchanging blocks difficult avoid peers neighbors need perform random walks 
failed neighbor replacement bittorrent clients traditionally relied tracker provide additional randomly selected nodes neighbor count drops urgency 
truly system peers necessarily return original entry point request additional neighbors entry points may necessarily remain swarm entire lifetime peers help enter swarm 
node serve entry point peer need additional neighbors acquire node swarm 
trace driven simulations compare graphs generated approach created centralized tracker trace driven simulation actual logs generated distinct trackers covering periods months 
tracker logs determine nodes joined left swarm information drive simulator connects disconnects nodes various algorithms examine 
resultant connectivity graph periodically analyzed order compare quality graphs generated different algorithms 
log analyze redhat tracker log examined covering period april august 
trace began flash crowd rapidly grew simultaneous clients hours dropped rapidly days ultimately stabilizing simultaneous clients weeks 
second log analyze current debian tracker covering period december may 
new debian release time number simultaneous clients remains fairly constant fluctuating 
tracker log analysis extracting client arrival departure times 
specifically determine log tracker learned new client joining swarm case regular graphs similar results expected biased forwarding irregular graphs 
case biased halting obviously require larger values tracker assumed client left 
normal modes operation clients explicitly notify tracker arrival departure practice case 
log indicated interaction client currently known swarm recorded join client request claimed join periodic announcement 
determining nodes left swarm involved exit cleanly notifying tracker departure 
trackers tell clients expected announce clients go long doing assumed left swarm 
official bittorrent implementation clients asked announce minutes removed tracker list swarm members heard minutes 
recorded client departure place minutes interaction tracker cases exit cleanly 
practice node left earlier time tracker incorrectly assumed part swarm 
sake simulation pretend nodes remained swarm moment tracker assumed left 
doing err favor centralized tracker distribute stale nodes potential neighbors 
random walks actively explore swarm far falsely believe departed node swarm 
tracker peers request new neighbors tracker minutes neighbors half hour neighbors 
long waits obtaining new neighbors entirely unnecessary entry points err favor centralized tracker imposing delays new neighbor requests algorithms study 
just tracker distribute nodes alive suggest neighbors full unwilling accept new connections 
tracker accommodates error handing groups neighbors time 
entry points probably avoid distributing full nodes simulation currently selects node walked regardless degree favor centralized tracker 
arrival departure times clients actual tracker logs able simulate dynamic construction evolution bittorrent swarm various algorithms 
simulator notion times nodes join leave completely processes join leave event including addition removal associated neighbor connections serially order occur logs 
precedent francis justify random nature algorithms consider order timing events 
process tracker logs algorithm evaluated recording vertex expansion snapshot swarm taken regular intervals 
case tracker centralized distributed new neighbors randomly selected global swarm membership list 
entry points hand random walks dynamically explore swarm randomly selecting peers encountered walks 
order minimize number random walk steps taken joining node entry expansion may jun jul aug redhat centralized tracker expansion jan feb mar apr may debian points perform perpetual random walks extended single step select new neighbors joining node 
result neighbor sets successive nodes join entry point connected 
relationship successive random walk samples expected problematic perform simulations nodes joining single entry point ensure observe negative impact correlation expansion 
reason node needs additional neighbors requests single entry point 
centralized tracker evaluating feasibility replacing centralized tracker measuring expansion time graphs generated centralized tracker 
serve baseline algorithms compared 
shows expansion graph snapshots taken day lifetime redhat debian logs processed centralized tracker simulator 
illustrated expansion redhat torrent primarily oscillates 
rise fall initial flash crowd expansion hovers low spectrum rapidly rising total number nodes decreases 
steady state expansion debian torrent far regular primarily varying seen 
occasional periods zero expansion reflect gaps tracker logs due tracker time errors archiving logs 
regardless original cause simulator deals gaps allowing nodes swarm expire rebuilds swarm graph scratch log resumes 
obviously pessimistic tracker temporarily swarm stayed need scratch 
create artificial flash crowds allow observe effect algorithms study 
simple random walks understanding expansion graphs generated centralized tracker turn examination expansion graphs generated various random walk algorithms employed entry points 
type random walk examine uses normalized expansion centralized tracker unbiased walk metropolis hastings walk may jun jul aug redhat normalized expansion normalized simple random walks centralized tracker unbiased walk metropolis hastings walk jan feb mar apr may debian classical metropolis hastings algorithm allows approximately uniform sampling irregular graph closely mimicking behavior centralized tracker 
order determine advantage obtained bias metropolis hastings walk evaluate performance unbiased walks result select nodes probability proportional degree 
transition probabilities see section unbiased random walk ij transition probabilities metropolis hastings random walk mh ij max pmh ik shows expansion metropolis hastings random walks unbiased random walks normalized expansion centralized tracker order underscore relationship algorithms centralized tracker 
case redhat torrent shown random walk algorithms perform slightly worse centralized tracker metropolis hastings performing better unbiased random walks 
metropolis hastings algorithm just hair centralized tracker debian torrent shown unbiased random walks outperform centralized tracker point time 
somewhat surprising expansion obtained random nodes selected unbiased random walks select nodes probability proportional degree 
interesting observe uniform random sampling centralized tracker approximately uniform random sampling metropolis hastings random walks create graphs expansion properties uniformity sampling prerequisite obtaining results 
degree biased random walks success unbiased random walks suggests possibility types walk bias sample peers non uniformly may reasonable candidates replacing centralized tracker 
exploration biased random walks francis proposed walks steps taken probability proportional node outdegree number connections initiated inversely proportional node degree 
appealing prospect allows priority low degree nodes establishing new neighbor connections 
note cooper token protocol circulates token connection node willing accept resulting neighbor selections biased residual degree node 
arthur panigrahy bias new neighbor selection younger nodes improve block exchange 
initial evaluation degree biased random walks selects neighbors walk probability proportional residual degree probability inversely proportional degree 
note don distinguish inbound outbound connections inverse degree bias slightly different francis 
follow model applying bias locally random walk step necessarily result global selection nodes probability exactly proportional residual inverse degree 
define residual degree node 
transition probabilities residual degree random walk res ij transition probabilities inverse degree random walk inv ij deg shows normalized expansion results walks shall discussed shortly 
seen redhat torrent residual walk performs slightly better centralized tracker inverse walk slightly worse 
inverse walk centralized tracker debian torrent shown case residual walk yields expansion significantly higher centralized tracker time 
occasional drops normalized expansion residual walks debian torrent seen algorithms 
fact drops occur immediately periods zero expansion nodes swarm 
words residual degree walk slow grow graphs expansion scratch 
best seen zooms half days debian torrent showing expansion algorithms measured hourly daily 
residual walks initially create graphs relatively low expansion expansion rising steady state levels normalized expansion expansion centralized tracker residual walk inverse walk residual walk inverse walk may jun jul aug redhat normalized degree biased random walks centralized tracker unbiased walk metropolis hastings walk residual walk inverse walk residual walk inverse walk dec dec normalized expansion debian startup centralized tracker residual walk inverse walk residual walk inverse walk jan feb mar apr may debian slightly longer period time centralized tracker 
reason behavior older node chances selected random walk walk biased high degree nodes 
result old nodes tend higher degree new nodes degree biased walks select younger nodes 
francis similar observation biased forwarding random walks suggested periodically refreshing neighbors order introduce fresh randomness 
fact note churn impact graph refreshing partially explain low expansion initially experienced algorithms improves dramatically passage time 
success residual walk led experiment variations degree biased walks 
started making bias proportional square residual degree inverse degree respectively 
improved expansion simple residual inverse degree evaluated raising residual inverse degrees powers greater 
due space restrictions report results power denote residual inverse generally tended outperform powers 
transition probabilities residual random walk res ij transition probabilities inverse random walk inv ij results shown results original power residual inverse walks 
significantly outperform algorithm examined periods stability take longer reach steady state behavior 
anomaly expansion graphs generated residual best seen 
algorithms rise continually level steadystate residual rises albeit slower algorithm levels extended period time expansion levels inferior centralized tracker unexpectedly jumps levels significantly higher centralized tracker par inverse algorithm 
happens time 
month january debian trace residual algorithm second jump remained lower steady state period zero expansion 
leave analysis anomaly study 
hypothesize reason degree biased random walks yield higher expansion steady state algorithms closely approach random regular graphs known expansion properties high probability 
hypothesis supported fact maximum degree graphs generated algorithms strongly negatively correlated expansion correlation coefficient graphs generated algorithms redhat trace debian trace 
discussion median mean std dev algorithm expansion expansion expansion residual walk inverse walk residual walk centralized tracker inverse walk metropolis hastings walk unbiased walk table redhat expansion median mean std dev algorithm expansion expansion expansion inverse walk residual walk residual walk unbiased walk centralized tracker inverse walk metropolis hastings walk table debian expansion summarize results section single table torrent logs drive simulations 
tables show median mean standard deviation expansion redhat debian torrents respectively 
sorted median expansion represents steady state behavior 
slow ramp algorithms reflected higher standard deviation relatively low mean expansion compared median expansion algorithm 
experiments involved multiple iterations surprise expansion graphs generated multiple iterations algorithm negligible differences expansion average standard deviation expansion iterations redhat trace debian trace 
words fixed series node joins departures determines high precision expansion constructed graph case node selection algorithms study 
experimented extending perpetual random walk single step new neighbor selection noticeable effect expansion validating perpetual random walks adopt 
diameter expansion redhat diameter expansion diameter expansion debian known expansion diameter closely related graph parameters 
bound second smallest eigenvalue laplacian 
order provide intuition relative import observed deltas measured levels expansion show observed correlation expansion diameter graphs generated algorithms study 
point plot shows average diameter graphs expansion expansion truncated decimal places 
note diameter values observed expansion value average diameter occurs expansion values debian graphs indicates graphs diameter remainder diameter 
observation algorithms studied yield graphs various levels expansion diameter time 
second observation graphs low expansion relatively low diameters 
leave analysis negative implications low expansion especially combined relatively low degree expect reveal form graph fragility face churn fragmentation inaccessible blocks decreased aggregate bandwidth 
examined initial graphs produced various random walk algorithms expansion improved cases regularly refreshing neighbor sets 
done expiring neighbors fixed period time randomly removing neighbors slow rate performing regular random walks neighbor set happens automatically entry points 
refresh algorithm poor expansion resulting sub par graph construction algorithm executed fraction peers swarm 
obtain high levels stable state expansion enjoyed walks paying currently high startup cost poor expansion 
accomplished mixed algorithm walk combining multiple walks differ ent algorithms varying algorithm applied step taken 
alternatively bittorrent constants purposefully modify experiments altered put tighter bounds node degrees mechanism regular graphs closely approximated 
bittorrent traditionally relied tracker explicitly tracks peer swarm provide randomly selected neighbors joining nodes nodes neighbors 
proposed replacement tracker entry points peer swarm serve entry point 
tracking peer entry points multiple perpetual random walks randomly select nodes 
don maintain global state entry points arbitrarily replicated replaced 
entry points perform random node selection tracking nodes swarm performing multiple perpetual random walks 
bias walks determines distribution nodes randomly sampled 
trace driven simulations compared graphs generated centralized tracker generated entry points various types biased random walks 
vertex expansion means quantify quality graphs generated algorithm showed random walks generate graphs expansion properties similar superior graphs generated tracker 
addition ability entry points completely replace tracker serve valuable role alongside existing trackers 
example entry points added swarm actively managed tracker allowing peers join tracker went offline 
nodes actively replace failed neighbors manner preserves swarm expansion relying tracker 
acknowledgments david hallaron internet services course got thinking possibility removing tracker bittorrent 
stan help class project initially explored bittorrent 
debian project making tracker logs available analysis 
alon 
eigenvalues expanders 
combinatorica 
arthur panigrahy 
analyzing bittorrent related peer peer networks 
acm siam symposium discrete algorithms soda 
ferreira jagannathan 
distributed uniform sampling unstructured peer peer networks 
hawaii international conference system sciences hicss 
bagchi bhargava eppstein scheideler 
effect faults network expansion 
acm symposium parallelism algorithms architectures spaa 
linsker grinstein rish 
improving network robustness edge modification 
physica november 

bharambe padmanabhan 
analyzing improving bittorrent network performance mechanisms 
ieee conference computer communications infocom 
blum karp papadimitriou yannakakis 
complexity testing graph 
information processing letters 
holt 
swan small world wide area networks 
international conference advances infrastructure 
boyd diaconis xiao 
fastest mixing markov chain graph 
siam review 
chung 
spectral graph theory 
ams publications 
cohen 
incentives build robustness bittorrent 
workshop economics peer peer systems 
experimental draft bittorrent dht protocol specifications online 
available www bittorrent org draft dht protocol html cooper dyer 
sampling regular graphs peer peer network 
acm siam symposium discrete algorithms soda 
cooper 
randomized algorithm joining protocol dynamic distributed networks 
submission 
september 
friedman 
second eigenvalue random walks random regular graphs 
combinatorica 

chernoff bound random walks expander graphs 
siam journal computing august 
mihail 
random walks peer peer networks 
ieee conference computer communications infocom 
hastings 
monte carlo sampling methods markov chains applications 
biometrika 
hoffman 
metadata entry specification 
online 
available www 
com docs spec txt keller biersack felber 
dissecting bittorrent months torrent lifetime 
passive active measurements workshop pam 
law 
siu 
distributed construction random expander networks 
ieee conference computer communications infocom 
li stribling morris kaashoek gil 
performance vs cost framework evaluating dht design tradeoffs churn 
ieee conference computer communications infocom 
loguinov kumar rai ganesh 
graph theoretic analysis structured peerto peer systems routing distances fault resilience 
acm conference applications technologies architectures protocols computer communications sigcomm 
lovasz 
random walks graphs survey 
combinatorics paul erdos 

peer peer networks random transformations connected regular undirected graphs 
acm symposium parallelism algorithms architectures spaa 
maymounkov mazieres 
kademlia peer peer information system xor metric 
international workshop peer peer systems iptps 
metropolis rosenbluth rosenbluth teller teller 
equation state calculation fast computing machines 
chem 
physics 
raghavan upfal 
building low diameter peer peer networks 
ieee journal selected areas communications august 
peer exchange online 
available azureus com wiki index php peer exchange reiter samar wang 
distributed construction fault tolerant network tree 
ieee symposium reliable distributed systems srds 
francis 
heterogeneous overlay construction random node selection unstructured networks ieee conference computer communications infocom 

