retrospective essence compiling continuations cormac flanagan systems research center hp laboratories flanagan hpl hp com amr sabry dept computer science indiana university sabry indiana edu continuation passing style cps popular intermediate representation compilers higher order functional languages rabbit orbit sml nj 
authors compilers cited conventional engineering benefits 
appel stressed perform reduction cps intermediate language unsound source language uses call value 
observation consistent plotkin earlier formalized reasoning principles associated call value languages cps conversion 
optimizing call value source program reductions conversion cps reductions 
plotkin went prove perform strictly optimizations program source programs 
situation provided motivation study understand reductions cps terms relate reductions source programs 
building felleisen calculi sabry felleisen produced calculus source programs exactly corresponds cps terms 
key insight relate transformation step cps terms including administrative reductions corresponding transformation source terms 
additional reduction relations correspond administrative reductions cps terms 
sabry felleisen called reductions showed call value language equivalent cps ed call name language 
better set reductions strongly normalizing transforming source term normal form continuationpassing style term produces term administrative redexes 
sabry felleisen called set terms normal forms anf 
experimentation machines developed felleisen clear cps compilers intermediate representations done just naturally normal forms 
fact machines define meaning intermediate forms identical 
selected describes result theoretical practical experimentation 
surprisingly immediately received attention functional compiler community 
reviews mixed 
large majority compiler writers including historically dubious cps reported confirmed understanding precise formal way 
strong advocates cps compilers analysis captured essence compilers 
particular model cps optimizations capture years acm sigplan conference programming language design implementation selection 
copyright acm 
bruce duba dept computer science seattle university edu matthias felleisen college computer science northeastern university matthias ccs neu edu optimizations cps compilers perform 
particular appel kelsey considered additional optimizations essential part compiling continuations 
criticism motivated follow investigation 
year pldi sabry felleisen partially answered question effect cps transformation control data flow analysis 
explain precise impact cps results widely analyses 
sticky point remained story 
initial phase compilation cps compilers represent continuations procedures calls known procedures converted immediate jumps 
naturally converts returns known continuations jumps 
continuations explicit anf representation particular optimization expressed naturally 
sense model fails capture part essence compiling continuations 
compiler writers abandoned cps years anyway 
includes sml nj compiler redesigned new intermediate form close anf private communication daniel wang compilers written 
anf cps shown closely related ssa form 
compilers moby mlton exploit connection mixture anf ssa cps address sticky point regarding known continuations functions known continuations converted cps produce representation closely related ssa 
enables conventional analyses transformations convert uses known return continuations direct jumps 
limited cps called local cps conversion 
program representation anf success original role intermediate representation suitable compiling analyzing functional programs 
example quite standard study partial evaluation type theoretic treatment module systems 
summary succeeded making compiler writers reconsider decisions intermediate representations 
clear publicly stated reasons choosing cps invalidated 
analyze decisions depth 
result compilers intermediate representations anf local cps transformation enable additional optimization 
believe theoretical investigation produced thought practical compromise 
andrew appel 
compiling continuations 
cambridge university press 
andrew appel 
ssa functional programming 
acm sigplan notices april 
andrew appel david macqueen 
standard ml new jersey 
ma ski wirsing editors proceedings rd int 
symposium programming language implementation logic programming plilp passau germany lecture notes computer science pages 
springer verlag august 
andrew appel david macqueen 
standard ml new jersey 
technical report tr princeton university computer science department june 
matthias blume andrew appel 
lambda splitting higher order approach cross module optimizations 
proceedings acm sigplan international conference functional programming pages amsterdam netherlands june 
felleisen friedman 
control operators secd machine calculus pages 
north holland 
matthias felleisen 
cs extended calculus scheme 
proc 
acm conf 
lisp functional programming snowbird ut usa july pages 
acm press new york 
matthias felleisen daniel friedman eugene kohlbecker bruce duba 
reasoning continuations 
proc 
st ann 
ieee symp 
logic computer science lics cambridge ma usa june pages 
ieee computer society press washington dc 
matthias felleisen robert hieb 
revised report syntactic theories sequential control state 
theoretical computer science 
matthew stephen weeks 
dominators 
cindy norris jr james editors proceedings acm sigplan international conference functional programming icfp volume acm sigplan notices pages new york september 
acm press 
john hatcliff olivier danvy 
computational formalization partial evaluation 
mathematical structures computer science october 
richard kelsey 
correspondence continuation passing style static single assignment form 
acm sigplan notices march 
david kranz richard kelsey jonathan rees paul hudak james philbin norman adams 
orbit optimizing compiler scheme 
sigplan notices july 
proceedings acm sigplan symposium compiler construction 
xavier leroy 
syntactic theory type generativity sharing 
journal functional programming september 
plotkin 
call name call value calculus 
theoretical computer science 
john reppy 
local cps conversion direct style compiler 
proceedings third acm sigplan workshop continuations cw pages january 
amr sabry matthias felleisen 
reasoning programs continuation passing style 
proc 
acm conf 
lisp functional programming san francisco ca usa june pages 
acm press new york 
amr sabry matthias felleisen 
reasoning programs continuation passing style 
lisp symbolic computation 
amr sabry matthias felleisen 
continuation passing useful data flow analysis 
proceedings conference programming language design implementation pages new york ny usa june 
acm press 
jr steele guy rabbit compiler scheme 
technical report massachusetts institute technology may 
tarditi morrisett cheng stone harper lee 
til type directed optimizing compiler ml 
proceedings acm sigplan conference programming language design pages new york may 
acm press 
