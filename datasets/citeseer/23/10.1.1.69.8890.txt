colored local type inference martin odersky christoph zenger matthias zenger type system language allows certain type annotations elided actual programs 
local type inference determines types combination type propagation local constraint solving global constraint solving 
refine previously existing local type inference system pierce turner pt allowing partial type information propagated 
expressed coloring types indicate propagation directions 
propagating partial type information allows omit type annotations visitor pattern analogue pattern matching languages sum types 
modern programming languages type systems combine notion objects subtyping parametric polymorphism str mey cdg nc ow pt 
popular basis type systems second order lambda calculus subtyping 
excellent basis explaining type structure programs suitable kernel language concrete source programs excessive amount type information needs written programmer 
programmers agree kinds type annotations useful vehicle program documentation annoying repeat information easily deduced context 
instance type signature globally defined function generally useful explicit type parameter function application annoying particular information deduced types function actual value parameters 
local type inference pt aims eliminating need annoying explicit type information 
techniques 
type parameters function application inferred function value parameters cole polytechnique rale de lausanne odersky zenger di epfl ch solving constraint system relates formal actual argument types 
second propagates known types syntax tree order infer types formal value parameters provide additional guidance type parameter inference 
instance function known type int int int fun typed type parameter inferred int propagating known type int int tree 
bidirectional local type inference formalized type system type rule split rules case result type known case unknown 
compared type inference algorithm formalization type system terms typing rules attractive provides contract understood users implementers programming language 
reason bidirectional local type inference put forward type inference technology ml draft proposal acf 
downward type propagation bidirectional local type inference works propagated type completely known 
part type known downward propagation disabled types inferred propagating information leaves tree upwards 
instance known type int fun typed type information known outside anonymous function partial 
outside type information int instance type type variable determined 
study refinement bidirectional local type inference partial total type information propagated tree 
approach types essentially programs typable bidirectional local type inference programs 
instance type function application 
idioms arise naturally church encodings parameterized types 
consider instance implementation lists language recursive records sum types 
church encoding sum types guide implement pattern matching lists visitor records ghjv 
list type represented record single method match takes list visitor argument type list match list visitor record contains function valued fields called 
function invoked encountered list nil second 
type xs list implementations list constructors nil cons evident nil list match cons xs list list match xs example client lists list visitors consider standard implementation append function 
append xs list ys list list xs match ys xs cons append xs ys note close correspondence application match pattern matching case expression language algebraic data types 
methods list visitor correspond branches case expression 
principle applied represent systematically sum type language product types 
object oriented languages fall category 
systematic application visitor pattern obviate need complication type structure languages 
representation feasible practice demonstrated case pizza ow gj compilers 
pizza compiler written pizza heavy algebraic data types pattern matching 
gj compiler derived pizza compiler written gj algebraic data types 
pattern matching expressions pizza compiler represented applications visitor pattern gj compiler 
switch lead significant decrease readability 
unfortunately bidirectional local type inference type body append 
requires parameter types explicitly append xs list ys list list xs match ys xs list cons append xs ys reason match method lists polymorphic 
type information propagated argument match write parameter types methods visitor explicitly 
type information redundant easily derived type xs receiver match application 
programmers classify added type annotations annoying helpful 
required propagate knowledge dealing body list visitor record 
knowledge partial know return type type propagated 
inference system deal partial type information type definition append auxiliary type annotations visitor methods 
type completely known context term typed propagated inwards tree called inherited analogy inherited attributes attribute grammars knu 
contrast type propagated outwards tree called synthesized 
write inherited types synthesized types 
general type inherited synthesized parts 
instance list visitor argument match method code append inferred type list 
indicates expect outside type parameter second type parameter list typing visitor record 
type prefix allowed consist arbitrary inherited synthesized parts 
embed type inherited synthesized context prefix 
example represents function type function type constructor inherited argument type synthesized result type arbitrary 
inherited synthesized parts type alternatively concisely characterized coloring 
second version intended color output uses red font inherited parts type blue font synthesized parts 
black color reserved types arbitrary inherited synthesized parts 
rest develop ideas type system second order lambda calculus records subtyping 
define subtyping relation colored types reflects information colors 
subtyping relation designed allows definition subsumption rule 
instance inherited record type subtype smaller inherited record type mean type information guessed subsumption step proof propagated tree 
hand true define type system assigns colored types terms show infer missing type information explicitly typed 
type system essentially subsumes bidirectional local type inference system pierce turner 
minor deviation section 
local type inference algorithm propagate partial type information tree 
algorithm formulated colored types 
split colored type prototype contains information propagated tree type represents completely computed type term 
missing information prototype expressed special symbol 
shown algorithm sound complete respect type system 
type system second order lambda calculus source language ideas wider applicability 
instance design implementation type system functional net language funnel ode join calculus fg 
colored types useful general describing information flow polymorphic type systems propagation type inference 
related long thread research type inference extensions hindley milner system higher order lambda calculus 
particularly large body concerned extensions deal firstclass polymorphism subtyping 
typically type inference algorithms extensions hindley milner system complete algorithms variants second order lambda calculus incomplete basic type inference problem known undecidable wel 
extensions hindley milner system class polymorphism ol jon gr distinguish polymorphic type schemes monomorphic types 
differ methods convert 
type inference algorithm form order unification 
similar motivation pfenning type inference pfe uses higher order unification 
extensions hindley milner system subtyping studied aw ts est pot pot 
usually constrained types include set subtype constraints part type 
problem practice constraint sets large 
trifonov smith ts pottier pot proposed schemes address problem 
radical alternative proposed peyton jones wansbrough wj 
approximate constrained types unconstrained types generalization step 
system heuristically unifies type variables bounds 
uses scheme similar pass partial type information treating wildcards correspond unique fresh type variables 
roughly similar subtype polymorphism incomparable expressive power row variables 
system combines class polymorphism row variables studied gr express aspects admits complete decidable type inference algorithm unification 
resulting type system tends fragile complex necessary encodings user programs bit roundabout 
type inference problem combines subtyping class polymorphism addressed cardelli car greedy algorithm unifies type variables bounds soon encountered subtype constraint 
usually works practice admit independent characterization output type system 
clearly closest pierce turner local type inference pt 
main extension refinement type propagation 
propagation type information admit propagation partial information colored types 
forms type inference rely largely propagation global constraint solving 
form local type inference gj 
fact gj type parameter construct polymorphic method applications 
relies totally local type inference task 
java gj requires complete type signatures variables parameters 
techniques discussed directly relevant type inference gj 
propagation information edges syntax tree idea underlying attribute grammars knu 
synthesized types correspond synthesized attributes inherited types correspond inherited attributes 
attribute grammars express attributes inherited synthesized components 
litvinov lit develops type system cecil ct comparable 
cecil structural subtyping subtyping name deal recursive bounds 
type inference heuristic decidability result 
xi pfenning xp bidirectional algorithm type checking 
setting extension hindley milner type system dependent types 
bidirectionality infer quantifier elimination places 
rest structured follows 
section internal external language calculus 
section presents example section discuss subtype relation type system colors 
section outlines local constraint resolution section type inference algorithm 
section concludes 
internal language internal external language 
internal language essentially fully typed second order lambda calculus records subtyping 
external language additionally provides constructs elide explicit type information needed internal language reducing clutter source programs 
task type inference map external internal language reconstructing elided type information 
internal language pierce turner 
extension respect system record values types help streamline encoding object oriented programs 
terms types type environments internal language grammar terms fun 
xn en types 
xn tn environments var abs fun app app sel bot top var 
xn tn xi ti sel xi 
fn tn rec 
xn fn 
xn tn 
tn 
xn tn xn tn 
xm tm 
xn rec fun term variable function abstraction fun formal type parameters value parameter function application record constructor 
xn en record selector signifies tupling equivalent 
unspecified presence records allows restrict language single argument functions polyadic functions straightforwardly encoded fun encoded fun encoded 
type type variable record type 
xn tn function type function types polymorphic write polymorphic type variables function arrow customary types respectively greatest type 
primitive types int treated free type variables 
identify types equivalent renaming record types fields possibly occurring different order 
tv tv free type variables term type respectively 
type system internal language corresponding subtype relation 
bidirectional local type inference type system internal language subsumption rule 
matter presentation point match types application rule explicitly allow argument type subtype formal argument type 
external language external language superset internal language 
additional syntactic constructs omit type annotations 

fun lightweight abstraction lightweight application abstractions bit lightweight ones studied pierce turner pt elide formal type variables argument types elide argument types 
say term partial erasure obtained erasing type information replacing abstractions lightweight abstractions applications lightweight applications 
colors types represent direction type information propagated 
red color indicates part type known context inherited blue color indicates part type known term synthesized 
black white versions colors represented ticks ticks syntax synthesized types 
xn tn types propagated tree called inherited types 
written syntax dual synthesized types 

xn tn synthesized inherited types special cases general types arbitrary inherited synthesized parts 
prefixed colored version black 
syntax general types 
xn tn 
xn tn adjectives synthesized inherited refer type annotation color 
prevent annotations prefixes interpreted structurally type 
identical 
annotate outermost type constructor assume 
type constructors inherited synthesized 
constructor annotated means inherited synthesized 
write types single statement assumed structurally equivalent differing color 
constructor occurs annotated 
xn tn 
xn occurrences constructor assumed color 
substitutions types defined color preserving types type environments synthesized 
ensures type variable determined definition influenced context usage 
example demonstrate application colored local type inference means example details definition map function type option visitor technique 
example analogous list list visitor example avoids recursive types covered 
types option defined follows type option match type constructors option follows fun option match fun fun option match fun presentation easier added syntactic sugar formal language definition 
type declarations introduce abbreviations record types 
function abstraction return type fun considered equivalent function typed body fun explicitly typed expression turn considered equivalent fun consider map function optional values written external language follows 
map fun fun option match option match fun option option option fun option option option option option option option map map fun fun option match fun fun presents function internally computed type information terms formal parameters 
note applications function argument type typing actual argument 
formal parameter function match synthesized type expands 
actual argument visitor record outside second parameter type needs instantiated 
function type option 
argument type function outside 
type formal parameter reconstructed explicit type annotation needs 
subtyping subtyping role mediate differences type information term propagated inside 
xn tn xn 
xm 
xn tn 
xn 
xn 
tn 
xn tn 
xn var fun app sel sub abs tv fun rec outside 
synthesized type constructor type matches inherited constructor type supertype 
subtype relation colored types shown 
subtyping contravariant argument type colors covariant second relation reversed colors 
subtype relation structural change type implies different constructors differ color 
going subtype supertype change synthesized inherited 
synthesized type int int example subtype int int int 
int int subtype 
topmost constructors differ color 
ensures guess types 
synthesized information really coming inside constructed subsumption 
rule relating destroy property synthesize function type guessed propagated 
similarly inherited information really outside discarded subsumption type constructor inherited certain point term going outward discard inherited constructor explicitly rule origin information 
en tn 
xn en 
xn tn ing subsumption 
subtype rules designed derive smallest possible steps 
rely transitivity deriving subtype judgements 
instance int int 
subtype relations uncolored types internal language colored types relationship lemma subtyping 

implies 
implies statement says restriction subsumption sound internal language disregard colors colored types 
second statement subsumption guarantees term type typecheck supertype completely outside 
example consider typing map 
selection match know outside type form match 
look type environment find synthesized type match 
subsumption gives type match required form 
colored type system type system external language formulated terms colored types 
typing rules system 
include subsumption rule sub relation defined section 
rules straightforward 
rule var usual tautology rule variables 
variables environments synthesized type completely defined point definition 
var rule restricted synthesized types loss generality 
rules function abstraction 
rule function abstraction explicit argument type produces type synthesized arrow toplevel constructor rule abs lightweight abstractions produces inherited arrow 
words lightweight abstractions require function type passed outside abstraction 
function result type case prefixed tells type propagated direction 
untyped abstraction abs type function argument inherited 
known context 
example fun int int 
function type indicates argument type known context result type determined function 
formal type parameters explicitly mentioned term disallow function body see side condition rule abs 
pierce turner require side condition system formal type parameters 
context provide required information argument type annotate function definition 
example fun int int int consequence function purely synthesized type 
rules function application 
rule typed function application straightforward 
expression function part needs function type 
requirement propagated function expression rest function type synthesized 
information know type argument gets purely inherited type just needs checked 
example function type int int int applied term fun yielding fun int 
type derivation judgement uses subsumption step int int int int typing function argument 
step weakens synthesized result type int argument type int inherited form 
rule formulated way separate rule case function type superfluous assume expression type 
subsumption type 
argument typable conclude expected type 
far complicated rule system rule app function application explicit type parameters 
surprising rule plays role different rules pierce turner system 
premise rule requires function part expression function type 
argument expression checked type coincides function inherited argument type occurrences type parameters ai arbitrary synthesized type required 
expressed condition premise 
auxiliary relation expresses replacement occurrence variable arbitrary type 
try take account sharing point 
different occurrences type variable associated different types 
relation defined follows 
ai 
tn 
xn tn 
xn words type checking function arguments weaker constraint implied function type different occurrences type variable matched different types 
conditions premise rule app tighten constraint 
require existence tuple types substituted type variables formal argument type yield type supertype actual argument type furthermore substituted function result type require type subtype rule result type final premise rule app requires tuple types minimizes function result type compared solution satisfies constraints 
premise auxiliary relation states coincide inherited parts 
defined follows 
tn 
xn tn 
xn example suppose function type int applied term fun 
show fun int choose int rule app 
int int int shows type provides information type argument int int int int shows actual formal argument type match trivially int int turns int appropriate result type 
clearly int optimal choice 
function find type fun 
condition requires argument result type synthesized fails int int supertypes form int argument type inherited 
unexpected fun information type example lightweight application rule app consider function application synthesized type type int 
int matching argument 
fails purely synthesized type 
high level reason occurs contravariantly result type optimal choice try give synthesized type int int choose int 
subtype requirements rule app fulfilled int int provide alternative fulfills requirements 
falsifies optimality constraint int int yield valid typing 
choices synthesized types fail similar reasons 
hand verify inherited type int int 
choice int requirement int int stronger choice left int 
int int holds optimality constraint satisfied 
analogous reasoning inherited type 
rule sel specifies typing record selection 
premise rule uses inherited record type constructor reflects fact typing expression selection know record field 
field type propagated direction 
subsumption allows argument may additional fields 
additional fields synthesized types 
allowing inherited types enable guess 
rule rec specifies typing record construction 
record type constructor appears synthesized form rule reflecting fact record formation 
xn en know shape constructed record context information 
types fields 
xn hand propagated direction 
example assume want type fun record expression type int int int 
selection rule expects qualifier record type component 
apply subsumption rule get record type proper form int int 
essential component synthesized type subsumption needed int 
able type fun type component purely synthesized int int 
soundness completeness shown type system sound complete respect internal language 
theorem soundness exists term partial erasure theorem completeness 
completeness easy show rules lightweight terms need considered 
soundness insert derived argument types formal type parameters actual type parameters show resulting term unique type subtype note external language subject reduction property 
instance fun int int fun type int 
assuming standard reduction semantics expression reduces fun type 
show type soundness external language type soundness internal language soundness theorem relates languages 
variants optimality constraint rule app minimizes instantiated version function result type 
variants constraint possible 

account inherited information 
kind term bidirectional local type inference type checking mode colored local type inference 
see consider type type int 
saw infer types int int explain infer int 
try give type int find int solutions substitution better 
bidirectional local type inference infers int checking mode 
case appear polymorphic application type variable occurs contravariantly function result type example type variable chosen different ways int type completely outside 
points mean particular type outside replaces contravariant occurrences type variable different types int example 
solve problem optimality criterion app criterion infer type int 
implementing new criterion comes considerable cost algorithmic complexity 

extending optimality function arguments 
practice want restrict app generalizing 
problem rule app bidirectional local type inference instantiate type variables unique types 
case bidirectional local type inference succeeds instantiate type variable case application type type int 
colored bidirectional local type inference succeed determining instance type fact int possible instantiations 
indeterminacy problem languages parametric wad languages particular instantiation type variable affect result computation 
real world languages parametric overloading dynamic type casts inheritance overriding destroy parametricity 
parametricity hold mandatory type variables instantiated unique types 
case achieved strengthened optimality constraint rule app requires argument type result type minimized variation requires minimal changes inference algorithm 

dealing gracefully non variant result types 
optimality criteria far rely minimization function result type 
function result type non variant type variable instantiated best solution exist type parameters explicitly 
example consider version list type augmented append function type list match append ys list list type non variant type variable appears covariantly contravariantly type append 
consider function singleton creates list 
singleton list cons nil expect singleton abc list string optimality criteria far get ambiguity type error 
problem string legal instantiations singleton type parameter instantiations lead result types list string list better 
ambiguities avoided arbitrarily picking instantiation 
current implementation picks minimal instance types 
instantiates type variables non variant function result type smallest type consistent local constraints 
modification get expected type list string singleton abc 
experience indicates modification greatly reduces number required type annotations programs deal non variant types 
modification practice rough edge treatment non variant types 
consider occurrence parameter constructor non variant type nil non variant list assume inherited type information 
original optimality constraint nil ambiguous types list string list 
modified optimality constraint get purely variant version append written type variables lower bounds permitted append ys list list 
type system bounds scope 
nil list 
problem list useful type nil subtype list type assuming lists non variant 
wanted list string need type parameter nil string explicit type annotation nil list string 
local type inference algorithm gj neat solution problem adding unknown type internal type language 
types parameters implicitly widened types arbitrary types corresponding positions 
syntactic restrictions prevent duplication types guarantee soundness widening rule 
clear gj solution generalized setting considered 
constraint resolution type inference need find locally best solution actual type parameters polymorphic functions lightweight applications 
requires solving set subtype constraints 
techniques introduced bidirectional local type inference 
constraint set set inequations tv tv 
abbreviate substitution idempotent substitution dom substitution solution constraint set type inference generate constraint sets subtype constraints containing types contains constraint generation algorithm algorithm computes minimal constraint set guarantees judgement describes directly taken pt 
example int int int int soundness completeness properties shown pierce turner pt carry system records 
theorem soundness 
suppose tv tv 
solution theorem completeness 
types tv tv 
constraint set type solution type rr minimal solution rr undefined solution exist 
example get int int int 
algorithm pierce turner pt compute works system records 
type inference type inference organized recursive algorithm depth traversal syntax tree 
parameters inference algorithm term want type type environment prototype contains partial information type algorithm fills information lacking returns complete type type inference algorithm deduction system judgements form see 
prototypes regular types may contain additional type constant indicates information part type lacking 
say type matches prototype obtained replacing arbitrary types 
example judgement int fun int int prototype int indicates argument type int function known outside 
argument type conclude type int fill result type 
inference judgement find corresponding judgement colored system combining information single colored type 
instance judgement corresponds fun int int colored system 
parts prototype inherited rest synthesized 
reconstruct colored type prototype type general operation matches structurally equal inherited parts synthesized 
match prototype smallest supertype 
type exist undefined 
dually greatest subtype matches inherited parts synthesized 
instance int int int int int int 
int 
crucial inference keep rule system deterministic 
subsumption rule inference system 
inference prototype supertype matches prototype choose 
consequently derivable inference judgement satisfies invariant matches rules straightforward derive 
combined prototype type single colored type way split colored type prototype regular type 
instance rule sel split colored type sel rule splits 

fun var fun abs app sel rec rec 
fun fun app 
fn tn 
xn fn 
xn tn rec 
fn tn 
xn fn 
pm fm tm fm tm 
fn tn 
xm pm 
xn fn 
xm tm resulting rule sel illustrates information flow type checking sel 
outside get information type conclude type record match 
type inference record tell final type 
know final type selection expression record need separate rules rec rec rec consider different kinds prototypes 
xm pm 
reason rule rec types ti may inherited may inherited components record type constructor synthesized 
similarly construct rules 

important case untyped application rule app infer type parameters 
descriptive premises type system replaced local constraint resolution 
passing prototype actual argument guarantees generate constraint sets subtype requirements 
guarantees solution fulfills ensures type actual argument subtype function argument type 
ensures solution supertype matching solution satisfies constraints 
choosing guarantees solution satisfying optimality constraint 
map example match type type inference checks actual visitor argument match prototype 
yields final type option option 
resulting constraint system option option 
second constraint implies optimal solution result type option 
option complete type visitor application 
shown soundness completeness type inference respect colored type system 
theorem soundness 
theorem completeness 
condition completeness theorem requires prototype contains information inherited part special case purely inherited purely synthesized completeness simplifies corollary 
corollary completeness 
proofs soundness completeness proceed induction derivation 
proof completeness regard non subsumption step subsumption steps 
designing type system functional net language funnel ode looking type system deep subtyping polymorphic records 
wanted source language avoided unnecessary clutter due type annotations 
looking type systems type inference 
deep subtyping polymorphic records allow complete type inference find restrictions properties 
problem approach new language construct just slight change existing language construct possible threat decidability tractability type inference 
difficult see specific change leads undecidability 
local type inference scheme proved robust flexible respect 
internal language starting point fallback 
top introduce lightweight versions syntactic constructs obviate need type annotations 
funnel programs visitor pattern pervasively important able express visitors lightweight abstractions 
main contribution local type inference algorithm able propagate partial type information 
essential visitors helpful eliding type information language constructs 
type inference algorithm type visitor pattern local constraint resolution algorithm pierce turner pt complexity algorithm similar 
added power inference solely derived refined propagation scheme 
second main contribution presentation type system colored deduction system 
information flow type inference longer explicit encoded color types 
yields compact notation little redundancy 
looking discussion chapter see change little regarding different versions type system 
acf andrew appel luca cardelli kathleen fisher carl gunter robert harper xavier leroy mark lillibridge david macqueen john mitchell greg morrisett john reppy jon riecke zhong shao christopher stone 
principles preliminary design ml 
aw alexander aiken edward wimmers 
type inclusion constraints type inference 
fpca conference functional programming languages computer architecture copenhagen denmark pages new york june 
acm press 
gilad bracha martin odersky david stoutamire philip wadler 
making safe past adding genericity java programming language 
proc 
october 
car luca cardelli 
implementation 
technical report dec systems research center february 
cdg luca cardelli james donahue glassman mick jordan bill kalsow greg nelson 
modula language definition 
acm sigplan notices august 
ct craig chambers cecil team 
cecil language specification rationale december 
est jonathan scott smith trifonov 
type inference recursively constrained types application oop 
proc 
mfps eleventh conference mathematical foundations programming semantics march 
fg dric fournet georges gonthier 
reflexive chemical machine join calculus 
proc 
rd acm symposium principles programming languages pages january 
ghjv erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 
gr jacques didier 
semi explicit class polymorphism ml 
information computation 
jon mark jones 
class polymorphism type inference 
proc 
th acm symposium principles programming languages pages paris jan 
acm press 
knu donald knuth 
semantics context free languages 
mathematical systems theory february 
lit litvinov 
constraint polymorphism cecil practical static type system 
proceedings th acm conference object oriented programming systems languages applications october 
mey bertrand meyer 
eiffel language 
object oriented series 
prentice hall cliffs 
nc johan magnus carlsson 
reactive objects functional language escape evil proceedings haskell workshop june 
johan 
pragmatic subtyping polymorphic languages 
proceedings third acm sig plan international conference functional programming icfp september 
ode martin odersky 
functional nets 
european symposium programming lecture notes computer science 
springer verlag 
invited 
ol martin odersky konstantin ufer 
putting type annotations 
proc 
rd acm symposium principles programming languages pages january 
martin odersky martin sulzmann martin 
type inference constrained types 

ow martin odersky philip wadler 
pizza java translating theory practice 
proc 
th acm symposium principles programming languages pages january 
martin odersky christoph zenger matthias zenger 
colored local type inference 
epfl ch papers color ps gz 
pfe frank pfenning 
partial polymorphic type inference higher order unification 
proceedings acm conference lisp functional programming pages july 
pot fran ois pottier 
simplifying subtyping constraints 
proceedings acm sigplan international conference functional programming icfp pages january 
pot fran ois pottier 
framework type inference subtyping 
proceedings third acm sigplan international conference functional programming icfp pages september 
pt benjamin pierce david turner 
local type inference 
proc 
th acm symposium principles programming languages pages january 
didier 
typechecking records variants natural extension ml 
proc 
th acm symposium principles programming languages 
str bjarne stroustrup 
programming language second edition 
addison wesley 
ts trifonov scott smith 
subtyping constraint types 
international static analysis symposium volume lncs pages 
springer september 
wad philip wadler 
theorems free 
fourth symposium functional programming languages computer architecture pages 
acm september 
london 
wel wells 
typability type checking second order calculus equivalent undecidable 
proc 
th ieee symposium logic computer science pages july 
wj keith wansbrough simon peyton jones 
simple usage polymorphism 
proceedings third acm sigplan workshop types compilation september 
xp hongwei xi frank pfenning 
dependent types practical programming 
aiken editor conference record th symposium principles programming languages popl pages 
acm press january 

