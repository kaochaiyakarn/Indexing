proc 
th international workshop engineering societies agents world london uk october lncs appear swarm intelligence linda systems robert tolksdorf menezes freie universit berlin institut informatik ag informationssysteme 
berlin germany research robert tolksdorf de florida institute technology department computer sciences university blvd melbourne fl usa cs fit edu 
natural forming multi agent systems grow enormous sizes perform seemingly complex tasks existence centralized control 
success comes fact agents simple interaction environment neighboring agents local nature 
describe swarm intelligence implementation linda system called swarmlinda 
argue swarmlinda achieves desired characteristics scalability adaptiveness level fault tolerance 
past years coordination models particular linda proven quite successful tackling intricacies medium large scale open systems 
linda systems may scale number tuple spaces processes 
reasons poor scalability design systems inherits ideas early linda systems focused parallel computing 
quest identifying systems scalable turned away standard techniques looked field biology specifically zoology find examples scalable natural forming multi agents systems aka swarms 
swarms notorious organization despite enormous sizes 
activities simple rules easily implemented computer programs 
interaction involves local communications 
focus swarm techniques approaches tuple space systems 
goal tackle scalability problem studying improve current scenario techniques adapted models originating biological collective organisms 
scalability linda systems scalability tuple space systems studied topic 
studies range theoretical works implementations tuple space systems claim scalable studies suitability systems wide area computing 
partially funded daad germany nsf usa contract numbers int respectively 
theoretical works tend formalize concept tuple spaces formalism way show tuples distributed 
instance gr argue scalability achieved organizing tuples servers tuples structure 
practical arena rowstron works attempting linda systems scalable 
approach idea configuring tuple spaces hierarchically classifying local global tuple spaces 
illustration communication overhead existing linda implementations consider problem retrieving tuple template set remote servers 
common approach ask set servers matching tuples multicast 
server searches matches locks candidate tuples offers requestor 
scheme establishes state tuple request global set servers requestor 
approaches assume improved scalability depends solely way data distributed 
linda systems data oriented techniques need augmented concepts minimize communication overhead 
distributing linda literature describes plethora approaches distributing tuple spaces centralization simple client server distribution strategy specific server machine operates complete tuple space tspaces 
tuple space accessed clients arbitrarily located network see fig 

tuplespace client client server fig 

centralized tuple spaces centralized tuple space server advantage easy implementation basically attaches network interface non distributed tuple space 
carries disadvantages centralization services 
partitioning tuple spaces strategy locate tuples common characteristics set tuple space servers requests characteristics routed node see fig 

simple partitioning lead unbalanced partitions carefully chosen hashing function tuples better 
tuplespace client client server tuplespace server fig 

partitioned tuple spaces partitioning provides distributed management tuple spaces including concurrent execution operations partitions 
include centralization certain sets tuple handles reconfigurations poorly 
full replication places complete copies tuple spaces nodes different locations 
addition removal data replicated nodes searches data performed locally see fig 

distributes load data searches offers support fault tolerance 
cost keeping replicas consistent high requires locking protocols equivalents 
client replicate tuplespace server tuplespace server fig 

full replication update intermediate replication schema uses grid nodes formed logical intersecting busses 
node part exactly 
data replicated nodes searches performed 
intersects provides complete view tuple space see fig 

client tuplespace server query answer tuplespace server client update replicate tuplespace server tuplespace server fig 

intermediate replication client update replicate tuplespace server tuplespace server scheme allows concurrent replications searches data respectively 
removal data requires consistent update nodes respective 
approaches long term solutions 
proposal swarmlinda 
concepts swarmlinda past years new models originating biology studied field computer science 
primary interest lies models techniques finding feasible solutions np hard problems 
models actors ants sacrifice individual goals benefit collective 
act extremely decentralized 
carried making purely local decisions actions require small computations 
characteristics enable systems scale 
swarm intelligence interesting opportunity rethink scalability tuple spaces 
principles alternative data oriented schemes simply consist system templates modeled ants search food matching tuples 
understand world linda servers dimensional space ants search food leaving trails successful matches 
ant optimization trails shortest tuple producer consumer paths optimize system performance querying sets replicas template ant goes directly expects match 
technically accounts single message interchange producing consuming sites 
just illustration 
realistic swarmlinda consider principles observed swarm systems simplicity swarm individuals simple creatures perform simple tasks 
deep reasoning implement small set simple rules 
execution rules leads emergence complex behavior 
active entities swarmlinda obey principle simplicity small terms resource usage 
dynamism natural swarms adapt dynamically changing environments 
open distributed systems configuration running applications services changes time 
tuple location necessarily mean similar tuples exist location 
locality swarm individuals observe direct neighborhood take decisions local view 
key scalability swarmlinda active entities perform local searches inquire direct neighbors 
fully appreciate principles needs understand swarmlinda organized 
linda systems idea ants food 
swarmlinda needs concepts linda world 
base description swarmlinda abstractions 
individuals active entities able observe neighborhood move environment change state environment located 
environment context individuals observe 
state aspect environment observed changed individuals 
algorithms swarmlinda focus bringing concepts life defining concrete environment state individuals rules apply 
description succinct 
full description refer 
searching tuples ants look food proximity ant hill 
food brought ant hill trail left ants know food ants know way back ant hill short memory steps took ant hill distinctive scent tracked ants 
view tuples food locations tuples stored seen terrain templates seen ants wander locations search tuples 
ant hill process executed operation 
individuals template ants environment consists tuple space nodes state composed tuples stored scent different kinds templates indicating likelihood matches template available 
volatile disappear slowly 
tuple searching ants follow properties 
step spread scent process node connected node neighborhood represent ant hill 

check matching tuple ant current location 
match return origin location leave scent template matched step 
match check direct neighborhood traces desired scent 

desired direct neighborhood ant location current location randomly choose direction neighboring nodes look tuple 

scent indicates direction step matching scent move step scent start 
achieve non determinism adding small random factor range scent 
enables paths strongest scent chosen 

unsuccessful step match ant stops search probability 
initially increased unsuccessful step 
increases time 
ant decides searching takes actions sleep time continue 
die time location search started 
materialize random location continue search tuples 
action take depends age ant 
times tries 
re births decides 
result emergence application specific paths tuple producers consumers 
volatile paths dynamically adapt changes system consumers producers join leave move system 
additional concept needs mentioned ants tend change direction radically influence 
ant comes direction opposite direction highest probability chosen 
compare searching approach hashing mechanism 
tuples normally searched hash function takes template input generate location tuple 
hashing definitely fast unfortunately adaptive 
determinism exist hash functions forces tuples template placed location matter size system causing bottleneck problems tuples matching template highly demanded 
swarmlinda tuples matching template tend stay 
tuples produced locations far tuples remain separated clusters system created 
avoid creation bottlenecks tuples certain template required processes 
searches started various locations tuples retrieved closest cluster tuples 
problem hashing approaches fault tolerant 
swarming failures just change environment behave ants trying search food food supply suddenly destroyed 
distribution mechanism area swarmlinda swarming abstractions may distribution tuples nodes 
historically tuples distributed various static mechanisms see section 
swarmlinda partitioning tuple spaces dynamic ants concept brood sorting 
ants able sort different kinds things kept ant hill food eggs ant hill normally sorted type 
importantly ants process spite amount type scalable 
individuals operate tuple ants opposed template ants 
environment unchanged remains network nodes 
state set tuples stored 
swarmlinda implementation may brood sorting tuple distribution 
process tuples food ant active process representing 
execution primitive start visiting nodes 

observe kind tuples template match nodes store 
ant limited memory base decision local information 

store tuple node nearby nodes store tuples matching template 
decision considers small random factor 

nearby nodes contain similar tuples randomly choose random factor drop continue carry tuple node 
guarantee steps certain conditions satisfied 
ant able store tuple eventually 
time process decides store tuple random factor tend 
increases chance storing tuple step 
likelihood store tuple calculated stochastically kinds objects memory objects memory similar carried likelihood store tuple high 
power approach shows compared partitioning scheme section improve availability system counting costly techniques data replication 
ant approach assumptions behavior applications pre defined distribution schema special scenarios implemented deal failures node 
dealing openness openness known main challenges distributed systems ability system deal changes great asset 
swarmlinda show adaptive behavior collections similar tuples tuple ants individuals environment terrain nodes state 
swarmlinda want tuples matching template kept described section want fixed location 
consider function sc templates tuples relation scent defines similarity scent 
template te tuple tu match sc te sc tu 
new tuple ant carries tuple tu emits sc tu origin 
new carries template te emits sc te origin 

template ants remain position move 

tuple ants sense environment scent similar sc tu scent template tuple ants 

strength detected scent plus small random factor tuple ant decides move direction stay properties causes tuples stay closer similar tuples needed produced consists migrating node 
affect distribution mechanism explained section 
tuple stored scent left primitives considered deciding drop tuple current node keep walking nodes searching place drop tuple 
balancing tuple template movement far identified tuple ants template ants individuals move perform continued search 
describe intermediate approach ants tuples templates 
tuple template ant decides birth goes nodes seeking matches stays origin ant 
consider application node consumes lot tuples generated nodes 
trails producers consumer sense consumer start template ants seek producers 
system history known consumer path tuple ants started template ants consumer remain stationary wait matching tuple ant 
consumer starts producer calculation results reasonable start template ants producers search result 
algorithm individuals tuple template ants 
environment terrain nodes 
states include visitor scent indicates location visited successfully ants attraction outsider 
success means visiting ant matches location 
scent ranges 
positive values indicate matches took place visiting template ant retrieved tuple location showing location producer information 
negative scent indicates visiting tuple ants matched template location consumer tuples 
tuple template ants follow algorithms section find matching templates resp 
tuples 
tuple ant finds match bit scent location 
template ant finds match adds bit scent location 
kinds ants leave bit visitor scent case success 
new ants tuple template ants depending kind operation requested 
new tuple ant emits bit producer consumer scent location birth template ant 
ants behave different ways active move search algorithms described passive remain origin 
fate new ant depends current state location visitor producer consumer scent producer consumer attraction passive tuple ant passive active template ant active passive tuple ant passive template ant outsider active tuple ant passive template ant passive tuple ant active template ant producer visited ants need send tuple ants 
template ants passive visitors satisfy active establish global balance 
ratio passive active adjusted 
attractive consumer template ants remain passive 
tuple ants active argument global balance 
producer rarely visited send tuples ants find matches 
template ants remain passive 
consumer visited ants send active template ants find matches generate passive tuple ants attract active template ants improve chance attraction 
analysis algorithms described demonstrate power swarm abstractions context linda systems 
particular swarmlinda appears efficient dealing issues scalability decisions taken ants local observations sensing direct environment asking currently visited node match 
state changes purely local changing scent current directly surrounding locations 
global states locking set nodes 
activities algorithms independent number active ants 
adaptiveness decisions taken ants current state system 
state changed decisions individuals system leaving fresh scent locations 
influence prior decisions smaller time evaporation old scent 
state reflect current configuration system terms kind tuples produced consumed 
behavior ants dynamically adapts configurations 
fault tolerance influence wrong decisions ants temporary 
changes scent wrong decisions vanish time evaporation 
traditional linda system specialized processes take care fault detection correction coordination language extended 
swarmlinda fault tolerant adaptiveness improves availability system 
failures nodes treated ants changes system configuration 
load balancing adaptation current configuration tuple production consumption lead bottlenecks system 
shown load terms activity ants dynamically adjusted simple local decisions 
implementing swarmlinda section breaks issues faces task implementing swarmlinda discusses current prototype implemented alternatives implement refer full swarmlinda 
network topology algorithms defined section assumed swarmlinda nodes organized terrain tuple template ants walk 
particular network topology mentioned 
chance 
swarming requires nodes connected degree connectivity 
nodes directly connected specified 
connectivity nodes creates neighborhood node 
current implementation swarmlinda topology fixed degree connectivity node uniform nodes 
nodes organized dimensional grid reasonably represents terrain ant algorithms 
practice actual topology may organized exactly nodes system number nodes 
full swarmlinda restricted dimensional grid uniform number neighbors nodes keeps dynamic list neighbors 
random walk ants choose entries list random direction step 
tradeoff number neighbors performance algorithms neighbors lower probability right direction random 
full swarmlinda subject adaptation mechanism 
mentioned tradeoff quantified introducing notion fitness nodes 
calculated factors node simply routes ants nodes slowing lowering fitness node matches occur node matches raise fitness factor 
factor node example tell neighbors shortcuts 
easily integrated dynamic update routine entries 
substantial number ants coming node go node find match go node node detect establish shortcut tells ants change origin information walk carry origin information node learns ant goes node learn shortcut develop 
maintenance neighbor list essential algorithms method utilized reflect adaptiveness system take consideration nodes may working properly 
currently swarmlinda implements similar algorithms keep routing tables networks date 
node maintains list nodes neighborhood 
new node started connects node part current network request neighbor list 
new node picks node connected neighbors build neighbor list 
neighbor list broadcasted neighbors changes list need propagated 
full swarmlinda routing lists underlie principles dynamic adaptation 
neighborhood relation implemented symmetric 
node knows node neighbor know movement tuples distribute neighborhood information carrying node came 
ant moves tell came updates neighborhood information accordingly 
benefit relaxation consistency requirements neighborhood lists 
uniform tuple ant movement lists converge 
neighborhood information fixed 
entry neighborhood list vanish slowly time refreshed ant tuple coming system level failed attempts contact lead stronger evaporation entry 
routing tables adapt failure system communication structures 
details scheme calibration remain open 
critical initialization routing tables 
approach new node contact exactly node entered neighbor copying neighborhood list 
eventually entered neighborhood tables surrounding nodes 
important issue control lower upper bounds number neighbors node 
desirable neighborhood configuration adaptable changes general conditions swarming may relaxed avoid undesirable extremes 
dealing separation concerns algorithms described section assume existence multiple tuple spaces system point algorithms refer logical location tuples 
mean swarmlinda moving away known improvement linda systems 
necessarily implementation multiple tuple spaces exist straightforward implementation level multiple tuple spaces complex task 
options available implement multiple tuple spaces context swarmlinda limited standard implementation 
clearly linda process certain tell tuple space physically created 
uniqueness handles guaranteed easily implement linda system tuples just prefixed tuple spaces handle placing physical data structure representing tuple space 
swarm algorithms assume food distributed flat structure swarmlinda able implement multiple tuple spaces physically creating tuple spaces 
option utilize concept prefixing tuples handle process completely transparent users 
imple mentation swarmlinda physical tuple spaces 
consequence tuple distribution algorithm swarmlinda attempts adaptive independent clustering imposed user definition tuple spaces 
full swarmlinda adaptation take advantage fact tuples logical subspace belong application specific reason 
useful optimization handle placing tuples template 
example algorithm section extended weighting handle field strong determining similarity tuples 
movement ants algorithms described earlier depend movement tuple template ants 
prime question decision regards ants decide step 
currently prototype ants interact environment decide best suited neighbor node move 
suitability neighbor computed aspects scent strength neighbor scent strength particular tuple type template kept characteristic node 
ant decides move node exchanges local messages neighboring nodes 
scent strength type probability ant choose move location 
direction system cases scent may desired effect 
fact known real ants internal direction system 
available ants tend walk straight lines ant moving direction choose step direction minus 
environment current implementation dimensional grid direction system scent level seen grid values current position ant shown shaded figures 
example direction system scent levels currently implemented swarmlinda 
direction system sum scent levels resulting values sum fig 

scent levels neighborhood idea simple direction system pre determined fixed entire system 
swarming terms represents system ants belong species follow direction system 
currently system values absence scent ant change direction radically 
instance observe leftmost picture assume current direction ant indicated arrow 
con rotated system sum fig 

rotated direction system ditions direction system indicates ant chance keeping direction opposed chance choosing exactly opposite direction 
system augmented information scent level neighborhood middle picture 
combined produce final direction system step particular ant 
instance scenario depicted ant change moving west chance keep moving direction north 
ant decides move direction system may rotate represent initial idea correctly 
argued reason higher chance ant moving north due fact ants tend keep direction 
decides take different direction direction system remain consistent change 
instance assume resulting values calculated ant moved west 
new position direction system reflect fact step ant chance keep moving west 
direction system rotates configuration shown 
relaxation approach allow directions necessary may hinder direction system idea described 
swarming idea adapt direction system system success 
note scent indication path taken previous ants path returning ants 
assume evaporation scent value indicates ants returned node successfully finding tuple template looked 
necessarily mean ants took path finding tuple template 
scent influence decision ant want secondary value indicates probability ant move situations scent values similar 
secondary scent value stored environment keeping track number ants took particular direction 
represented delta vector see description section 
instance vector values indicating ants reached node decided go neighbor ants decided go neighbor 
values similar fashion direction system described probabilities 
example ant ant chance going neighbor chance going neighbor 
ant activity environment environment keeps state sensed ants 
dimensions making possible drop different kinds different information 
state observable place neighborhood ant vector consisting intensity values different 
currently assume fixed dimension vector 
ant operates cycle observe environment ii plan change environment iii change environment 
observation results vector neighborhood environment location 
complete observation leads matrix vectors represents environment matrix time observation 
ant generate delta vector reflects changes planned environment 
drop unit scent kind current location respective delta vector dimensional state 
delta vectors form delta matrix 
final step change applied adding delta matrix environment matrix atomic step 
current algorithms described ants add unit scent environment restrict change system 
ant follow algorithms drop units scent vector example perform collect operation carry tuple 
atomic addition delta matrix ensures ants operate concurrently 
algorithms changes example ant adds delta vector current location 
evaporation scent implemented periodic application vectors location example greater 
spreading scent implemented similar delta matrix 
lifecycle ants description clear ants communicate environment needs discuss created cease exist die 
consider ants mobile agents mobile processes 
implementation choice necessarily 
fact current implementation ants messages transmitted nodes network 
tuple ants messages created storing primitives executed 

tuple ant created inserted network initial node 
point onwards node decide ant drop food tuple contained message locally message transmitted neighbor nodes 
decision follows algorithms described section 
tuple ant delta value incremented time ant routed new node 
larger delta value greater likelihood tuple stored location 
template ants hand created retrieving primitive executed 
rdp 
similarly tuple ants implemented messages routed nodes 
difference consequence delta value 
case tuple ants template ants just abandoned stored case tuples 
linda systems request tuple fulfilled fail case non blocking primitives 
current implementation delta value determine failure 
template ant dies reports failure originating process uses failure message return value primitive executed case inp rdp 
case primitives fulfilled template ant behaves algorithm described section 
template ant reaches failure mode node places message sleep list 
represents templates ants find matching tuple 
sleep time may allow status system change matching tuples stored 
unsuccessful sleeps template ant destroyed message recreated original source 
option template ant warp completely random node restart search algorithm 
step implemented swarmlinda benefits clear create false paths 
implementations want deal better linda specific characteristics blocking 
currently blocking simulated really implemented 
described ants keep searching matching tuple 
problem happen approach tuple really exist system approach templates keep looking may naive costly 
possible approach aging mechanism embedded template ants decide template keep searching diffuse scent location characterizing blocking wasting system resources 
tuple ants able track scent template ants unblock match takes place 
described approaches implementing linda systems swarm intelligence swarmlinda 
demonstrated organized behavior swarmlinda implemented simple rules mimic naturally forming systems 
claimed swarm abstractions implementation swarmlinda simple improve scalability adaptiveness 
algorithms provide alternative standard approaches various linda implementations 
algorithms follow principles observed swarm systems simplicity dynamism locality 
implementations publications related swarmlinda available swarmlinda project website 

robert 
linda distributed memory multiprocessors 
phd thesis yale university department computer science 
technical report 

dorigo theraulaz 
swarm intelligence natural artificial systems 
oxford press 

nicholas carriero david gelernter 
net linda kernel 
acm transactions computer systems 

leonardi zambonelli 
strategies protocols highly parallel linda servers 
software practice experience 

dorigo maniezzo colorni 
ant system optimization colony cooperating agents 
ieee transactions systems man cybernetics part cybernetics 

david gelernter 
generative communication linda 
acm transactions programming languages systems 

david gelernter 
multiple tuple spaces linda 
rem 
editors parle vol 
ii parallel languages lncs pages 

kennedy eberhart 
swarm intelligence 
morgan kaufmann 

menezes robert tolksdorf 
swarmlinda project website 
cs fit edu swarmlinda 

menezes robert tolksdorf 
new approach scalable linda systems swarms extended version 
technical report cs florida institute technology department computer sciences 
www cs fit edu tr cs pdf 

menezes robert tolksdorf alan wood 
coordination scalability 
andrea omicini franco zambonelli matthias klusch robert tolksdorf editors coordination internet agents models technologies applications chapter pages 
springer verlag 
isbn 

gr scalability tuple spaces 
proceedings symposium applied computing pages 
acm march 

parunak 
go ant engineering principles natural multi agent systems 
annals operations research 

mitchel resnick 
termites traffic jams 
mit press 

rowstron 
ordination language geographically distributed agents 
world wide web 

rowstron wood 
bonita set tuple space primitives distributed coordination 
proc 
hicss sw track pages hawaii 
ieee computer society press 

wyckoff lehman ford 
spaces 
ibm systems journal 

zambonelli leonardi 
scalable tuple space model structured parallel programming 
proc 
nd int conf 
programming models massively parallel computers october 
