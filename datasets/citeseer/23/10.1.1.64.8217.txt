typed contracts functional programming ralf hinze johan jeuring andres institut informatik iii universit bonn bonn germany ralf informatik uni bonn de institute information computing sciences utrecht university box tb utrecht netherlands cs uu nl 
robust software component fulfills contract expects data satisfying certain property promises return data satisfying property 
object oriented community uses design approach extensively 
proposals language extensions add contracts higher order functional programming appeared 
propose embedded domain specific language typed higher order class contracts expressive previous proposals allows informative blame assignment 
take steps algebra contracts show define generic contract combinator arbitrary algebraic data types 
contract language implemented library haskell concept generalised algebraic data types 
familiar situation 
staring computer screen 
run program developing unexpectedly terminated prelude head empty list message 
quick grep yields total calls head program 
run wasn aborted core dumped notification error message provided isn helpful calls head blame 
sounds familiar interested contracts 
contract software components contract business obligations benefits parties 
scenario components simply functions function head function calls head 
possible contract parties head perspective pass non empty list shall return element 
contract implies obligations benefits caller obliged supply non empty list benefit receiving element ado 
restriction input benefit head need deal case empty list 
receives non empty list head obliged return element 
hinze jeuring business contracts may violated 
case contract specifies blame falls short promises 
head called empty list call site blame 
practical terms means program execution aborted error message points location caller just needed 
underlying design methodology developing programs basis contracts bertrand meyer designer eiffel 
fact contracts integral part eiffel 
findler felleisen adapted approach higher order functional languages :10.1.1.11.4081
major inspiration extends revises approach 
particular contributions develop small embedded domain specific language contracts handful basic combinators number derived ones show define generic contract combinator algebraic data types novel approach blame assignment additionally tracks cause contract violations proof concept provide complete implementation approach implementation generalised algebraic data types take steps algebra contracts 
rest structured follows 
sec 
introduces basic contract language sec 
shows blame assigned case contract violation 
tackle implementation sec 
blame assignment 
sec 
provides examples defines derived contract combinators 
algebra contracts studied sec 

sec 
reviews related sec 
concludes 
haskell notation 
fact source constitutes legal haskell program executed glasgow haskell compiler 
proofs easier pretend working strict setting 
subtleties lazy evaluation addressed sec 

deviate haskell syntax typeset type consed list standard ml 
contracts section introduces main building blocks contract language 
contract specifies desired property expression 
simple contract instance restricts value integer expression natural numbers 
general variable type boolean expression contract type contract called contract comprehension 
variable bound construct scopes contracts class citizens passed functions returned results importantly name 
nat contract int nat typed contracts functional programming second example contract list data type admits non empty lists 
nonempty contract nonempty null extreme contracts false true contract false false true true contract false demanding fact demanding satisfied value 
contrast true liberal admits value 
contract comprehensions define contracts values arbitrary types including function types 
contract instance specifies fixed point function valued expression type int int 
contract comprehensions expressive 
comprehension constrained haskell boolean expression state example function maps natural numbers natural numbers int 
consciously restrict formula right bar haskell expressions checking contracts remains feasible 
compensation introduce new contract combinator allows explicitly specify domain codomain function nat nat desired contract restricts functions take naturals naturals 
unfortunately new combinator weak 
want relate argument result expressing instance result greater argument 
generalise dependent function contract 
idea scopes represents argument function 
constraint straightforward express nat 
general variable type contracts type contract contract respectively contract type contract 
note dependent function contract binding construct 
properties data types pair list data type expressed contract comprehensions 
convenient able construct contracts compositional manner 
provide pair combinator takes contracts yields contract pairs nat nat instance constrains pairs pairs natural numbers 
offer dependent product contract scoping typing rules similar dependent function contract 
example contract nat true type contract int int constrains domain function second component value component 
dependent product contract logically compelling counterpart dependent function contract expect useful practice 
reason simply properties pairs contain functions easily formulated contract comprehensions 
simple example consider 
hinze jeuring bool contract contract contract contract contract contract contract contract contract contract contract contract fig 

typing rules contract combinators 
general need contract combinator parametric data type 
main bulk confine list data type list contract combinator takes contract elements contract lists 
instance nat constrains integer lists lists natural numbers 
list combinator captures independent properties relate elements list 
purpose contract comprehensions hand express contract nat nat 
contracts may combined conjunction holds hold 
offer disjunction negation reasons explained sec 

fig 
summarises contract language 
blame assignment contract attached expression assert head head assert nonempty true head attached contract specifies predefined function head requires argument non empty ensures 
conventional terms nonempty precondition true postcondition 
follows adopt convention contracted version identifier written attaching contract expression causes contract dynamically monitored run time 
contract violated evaluation aborted informative error message 
contract fulfilled assert acts identity 
consequently assert type assert contract contracts range specific liberal 
contract head nonempty true liberal functions require non empty argument 
hand contract may uniquely determine value 
consider respect function supposed calculate integer square root 
typed contracts functional programming int int loop loop loop immediately obvious definition meets specification add contract 
int int assert nat postcondition precisely captures intended semantics 
got acquainted contract language time see contracts action 
contract comprehension violated error message points expression contract attached 
assume purposes expression bound name error reporting implementation refer source location 
example definitions assert nat assert nat get results interactive session 
contracts contracts contract failed expression blame 
number natural consequently nat contract sounds alarm 
dependent function contract violated function applied wrong argument function wrong 
case precondition sends alarm second case postcondition 
consider functions dec increase respectively decrease number 
dec int int assert nat nat dec assert nat nat example applications functions interactive session contracts contracts contract failed expression labelled blame 
contracts dec contracts dec contract failed expression dec blame 
session put labels front function arguments refer error messages implementation refer hinze jeuring source location 
contract violation caused passing negative value precondition violated argument blame 
call dec falls short promise deliver natural number dec blame 
important note contract checking detection violations tied program runs dec obviously satisfy contract nat nat detected dec applied 
words contracts give static guarantees dec takes naturals naturals dynamic assertions particular program runs dec received delivered natural number run 
characteristic prominent consider higherorder functions 
codom int int int codom assert nat nat nat function codom takes function argument type int int 
expect contract violation detected moment codom applied function expect contract violation detected moment attach contract dec violations discovered function argument applied body codom 
extreme case parameter appear body get course result negative 
consider interactive session contracts codom contracts codom contract failed expression labelled blame :10.1.1.11.4081
error detected second call call wrong 
error message points correct location argument blame 
example adapted blume mcallester 
int int int int assert nat nat true higher order function expects function satisfying nat nat 
expect function contract checked immediately tested function argument applied 
contracts contracts contract failed expression labelled blame 
contracts contract failed expression blame violation caused expression labelled 
typed contracts functional programming concrete syntax haskell syntax prop function const function pair const pair list fig 

concrete syntax contracts 
call shows blamed contract violation postcondition true 
take care argument called correctly obviously take sufficient measurements 
error message additionally points location caused contract violation 
information available findler felleisen approach see sec :10.1.1.11.4081

returns function cause necessarily located body 
simple example consider reduced variant assert nat nat true second argument identified cause contract violation contracts contract failed expression blame violation caused expression labelled 
implementing contracts sec 
seen ways construct contracts 
syntax contracts may suggest need extension haskell implement contracts 
generalised algebraic data types model contracts directly haskell 
fig 
shows concrete syntax translates haskell 
note binding constructs concrete syntax realized functional components higher order syntax 
translate typing rules listed fig 
representation contracts obtain 
data contract prop bool contract function contract contract contract pair contract contract contract list contract contract contract contract contract data type define assert simple case analysis 
hinze jeuring assert contract assert prop error contract failed assert function assert assert assert pair assert assert assert list map assert assert assert assert definition explicit contract comprehensions checked immediately 
remaining cases contract taken apart constituents attached corresponding constituents value checked 
note function case checked argument propagated codomain contract ditto pair case 
choice alternatively pass original unchecked argument 
chose variant sacrifice idempotence 
furthermore lazy setting unchecked argument provoke runtime error postcondition consider instance nonempty head 
moment reflection reveals checking independent properties boils application mapping function type question 
particular assert function const assert assert assert pair const assert assert immediately suggests generalise contracts contract checking arbitrary container types map constituent contracts container 
assert 
cn mapt assert 
assert cn note mapping functions defined completely generically arbitrary haskell data types 
section show contract combinator algebraic data type just mapping function 
remains explain equation conjunction tested checking checking conjunction implemented functional composition 
odd sight expect conjunction commutative composition commutative general 
shall return issue sec 

note offer conjunction disjunction negation 
implement disjunction need kind exception handling contract fails second tried 
exception handling available haskell pure non io part 
similar reasons shy away negation 
assert implements main ideas contracts fact returns uninformative error message implementation useless practical purposes 
section show return precise location contract violation 
simple definition assert optimise contracted functions 
re consider definition repeated 
assert nat nat typed contracts functional programming intuitively satisfies contract optimize definition leaving postcondition 
formally prove assert nat nat assert nat true note keep precondition ensure called correctly equation assert nat nat hold 
unfolding definition assert equation rewrites assert nat assert nat assert nat proved simple case analysis 
general say satisfies contract iff assert assert obtained replacing sub contracts positive positions true contract contract prop true function function contract contract prop prop function function remaining cases just propagated components 
example satisfies nat nat 
higher order function sec 
satisfy contract nat nat nat 
aside note executable haskell functions 
proves worth contracts data easily manipulated say lists 
implementing blame assignment correctly assign blame case contract violations pass program locations assert contracted functions 
purposes keep type loc source locations 
seen sec 
blame assignment involves location 
case function contracts locations involved precondition fails argument blame postcondition fails function blame 
case need get hold location argument 
extend function extra parameter location ordinary parameter 
hinze jeuring infixr newtype fun app locs fact take slightly general approach allow pass data structure type locs containing locations 
shall provide implementations locs realizes blame assignment style findler felleisen additionally provides information contract violation 
postpone details section locs records locations parties involved contract 
type type contracted functions abstractions type fun additionally take locations applications app additionally pass locations 
abbreviate fun appear free norm user defined functions 
furthermore app written se 
actual program source arguments assert contracted functions single locations written explains notation sec 

contracted functions distinguished type adapt type function constructor 
function contract contract contract prerequisites implement contract checking proper blame assignment 
assert contract locs assert prop error contract failed blame assert function sf fun assert sf app assert sf assert pair assert assert assert list map assert assert assert assert function case merits careful study 
note sf locations involved contract location argument type locs single location form 
precondition checked possibly sf single location passed evaluation may involve checking 
postcondition checked possibly location sf note receives checked argument unchecked 
may surprising assert adds sf file suspects blamed precondition fails 
order function impossible 
takes function argument take care argument called correctly see discussion sec 

ensure blame 
essence assert turns contract type contract contracted function type 
re phrase assert terms type obtain assert contract assert prop prop assert function fun assert assert assert pair pair assert assert assert list list assert assert assert assert typed contracts functional programming prop bool prop fun error contract failed blame fun fun fun sf fun app sf app app sf pair pair fun app app list list fun map app fun app app fig 

contract checking proper blame assignment 
implementation listed fig 

note elements form arrows category kleisli category comonad identity acting composition 
furthermore list mapping function list functor 
implementation clear provided assert operation data type contract combinators contract library implemented directly terms prop fun pair list 
assert just identity 
remains implement data type locs associated functions 
start simple version supports blame assignment style findler felleisen 
contract involves parties 
data locs pos pos loc neg loc pos loc distinguish positive negative locations corresponding function argument locations 
blame assigned positive location 
blame locs string blame expression show pos blame 
actual locations source positive 
pos magic lies implementation combines elements type locs 
locs locs locs pos pos hinze jeuring data locs neg loc pos loc blame locs string blame expression show head pos blame case tail pos violation caused expression concat interleave map show loc locs locs locs locs ns ps ns ps ps ns ns ps fig 

extended blame assignment 
single locations merged double location argument double location second argument ignored 
furthermore positive negative occurrences interchanged second case 
vital functions order higher 
re consider function sec 

assert nat nat true 
precondition nat nat postcondition argument nat checked pos pos 
precondition checked pos 
precondition fails blamed 
apparent throws away information location possibly causes contract violation ignored 
provide informative error message keep track locations involved 
turn locs pair stacks see fig 

blame assigned top element stack positive locations remaining entries detail cause contract violation 
new version simply concatenates stacks swapping stacks argument 
just case wonder total length stacks equal order contracted function plus 
stacks seldom contain elements 
examples section give examples contracts 
shall introduce number derived contract combinators 
sorting invariant property appears pre postcondition 
illustrate invariants consider implementation insertion sort insertion sort ord insertion sort foldr insert insert ord insert insert insert typed contracts functional programming helper function insert takes element ordered list inserts element right order position list 
words insert takes ordered list ordered list 
insert ord insert assert true ord ord insert contract ord ordered lists defined follows ord ord contract ord ordered ordered ord bool ordered true ordered true ordered ordered type ordered list seen data type concrete easily invariant ord 
adts heaps search trees handled analogous manner 
completeness contracted version insertion sort insertion sort ord insertion sort assert true ord insertion sort note specify output list permutation input list 
assuming function bag ord turns list bag fully specify sorting true ord bag bag 
loosely speaking sorting preserves input list 
formally preserves function iff single idiom contract combinator 
preserves eq contract preserves true combinator sort contract reads true ord preserves bag 
course bag equality test bags expensive operation certainly involves sorting may content weaker property instance insertion sort preserves length input list true ord preserves length 
example sorting shows programmer library writer choice precise contracts 
fact contracts class hinze jeuring citizens renders possible common idioms 
final twist topic assume trusted sorting function hand 
simply specify new sorting routine extensionally equal trusted 
introduce contract combinator purpose 
eq contract true insertion sort assert sort insertion sort recursion schemes function insertion sort defined terms foldr catamorphism list data type 
intriguing question attach contract foldr 
foldr foldr foldr foldr application sorting gives true ord ord ord true ord contract course way specific 
idea suggests invariant pass invariant argument 
foldr contract foldr inv assert true inv inv inv true inv foldr fact contracts class citizens proves worth 
higherorder functions implement general recursion schemes control constructs typically take contracts arguments 
interestingly optimize foldr satisfies contract assert true inv inv inv true inv foldr assert true true inv inv true true foldr foldr foldr contracted version foldr 
unfold definition assert equation simplifies assert inv foldr foldr assert true inv inv assert true true inv assert inv equation shown simple appeal foldr fusion law parametricity :10.1.1.38.9875:10.1.1.34.1618
cases remains prove assert inv assert inv assert inv parts follow immediately idempotence conjunction assert assert assert see sec 

properties contracts typed contracts functional programming section study algebra contracts 
algebraic properties instance optimize contracts shall see contract efficient 
properties helpful showing function satisfies contract seen correctness foldr relies strict language consider bottom proofs previous section 
switch back haskell non strict semantics order study algebra contracts general setting 
easy show assert equal assert true true denotes standard information ordering 
property implies particular assert strict 
note brevity abbreviate law assert assert ditto equations 
happens apply contract twice result applying 
words idempotent 
show idempotence holds commutative cases go easily 
implemented function composition commutativity somewhat doubtful hold general example shows sum false contracts length assert contracts length assert contract failed expression blame 
contracts length assert contract failed expression blame 
reason false false lazy setting contract returns lazy list contract violations second contract violation 
strict setting commutativity holds trivially assert 
call demonstrate idempotence hold contracts involve conjunctions contracts projections 
fig 
summarises properties conjunctions 
equations marked hold strict setting 
list combinator independent variants implemented terms mapping functions 
remaining laws listed fig 
immediate consequences known functor laws maps bearing mind true corresponds id composition 
related contracts widely procedural object oriented order programming languages 
higher order contracts findler hinze jeuring false false false false true true true true true true true true true true fig 

properties contracts 
felleisen main inspiration :10.1.1.11.4081
blume mcallester describe sound complete model contracts proves contract checker discovers violations assigns blame properly 
show restricting predicate contracts language mixing semantics soundness avoided show regain expressiveness original language adding general recursive contracts 
furthermore findler blume felleisen prove properties contracts example contracts special kind projections give meaning types contracts modify behaviour program assign blame 
implemented contracts library haskell generalised algebraic data types giving strongly typed approach contracts 
approach allows informative blame assignment 
provide contract constructors pairs lists algebraic data types combinator conjunction 
conjunctions greatly increase usability contract language allow programmer specify independent properties separately 
conjunctions disturbing effect algebra lazy setting contracts include conjunctions necessarily projections 
stating verifying properties software central themes computer science 
properties interest range simple properties function takes integer returns integer complex properties precisely describe behaviour function contract insertion sort sec 

relatively simple properties hindley milner types statically checked compiler 
statically prove complex property function usually necessary resort theorem provers interactive typechecking tools 
contracts allow specification complex properties checking relegated run time 
design space summarised table 
static checking dynamic checking simple properties static type checking dynamic type checking complex properties theorem proving contract checking typed contracts functional programming contracts look bit types 
contracts dynamic static dynamically change program 
contracts differ dependent types :10.1.1.135.7851
dependent type may depend value may take different form depending value 
contract refines type changing behaviour explained 
dependently typed programs contain proof fact program satisfies property specified type 
contract checked fail 
characteristic property contracts attached program points suggests capture general algebraic properties associativity distributivity 
properties typically involve functions calls function hard attach program point 
furthermore follow type structure required contracts 
borderline example algebraic property formulated contract written type directed fashion idempotence function assert true general algebraic properties differ properties expressed contracts 
practice expect contract checking largely complementary tools support expressing testing general algebraic properties quickcheck 
may observe synergy quickcheck possibly lot effective program contracts 
ghc larger compilers haskell provides assertions expressions assert returns evaluates true 
function assert strict function 
show define assert lazily 
contrast contracts assertions assign blame precondition function satisfied function blamed 
furthermore contracts type directed assertion roughly corresponds contract comprehension 
introduced embedded domain specific language typed higherorder class contracts expressive previous proposals allows informative blame assignment 
contract language implemented library haskell concept generalised algebraic data types 
taken steps algebra contracts shown define generic contract combinator arbitrary algebraic data types 
left couple topics 
intend take existing debugger tracer haskell available information source locations point real source locations user supplied locations supported implementation described 
furthermore want turn algebra contracts complete set laws contracts 
hinze jeuring grateful matthias blume matthias felleisen robby findler anonymous referees valuable suggestions regarding content presentation 
special go matthias blume referee pointing previous implementation blame assignment 

meyer applying design contract 
ieee computer 
meyer eiffel language 
prentice hall 
findler felleisen contracts higher order functions 
acm sigplan notices 
peyton jones haskell language libraries 
cambridge university press 
ghc team glasgow haskell compilation system user guide version 
available www haskell org ghc 

blume mcallester sound complete model contracts 
acm sigplan notices 
xi chen chen guarded recursive datatype constructors 
popl acm press 
hinze fun phantom types 
gibbons de moor eds fun programming 
macmillan isbn isbn paperback 

peyton jones weirich types type inference generalised algebraic data types 
technical report ms cis university pennsylvania 
hinze polytypic values possess types 
science computer programming 
hutton tutorial universality expressiveness fold 
journal functional programming 
wadler theorems free 
fourth international conference functional programming languages computer architecture fpca london uk addison wesley publishing 
findler behavioral software contracts dissertation 
technical report tr department computer science rice university 
blume mcallester sound complete models contracts 
journal functional programming appear 

findler blume felleisen investigation contracts projections 
technical report tr university chicago 
nordstr petersson smith programming martin type theory 
oxford university press 
claessen runciman hughes wallace testing tracing lazy functional programs quickcheck hat 
jeuring peyton jones eds advanced functional programming 
volume lecture notes computer science springer verlag 
mcneill runciman lazy assertions 
trinder michaelson pe eds implementation functional languages th international workshop ifl edinburgh uk september 
volume lecture notes computer science springer verlag 
