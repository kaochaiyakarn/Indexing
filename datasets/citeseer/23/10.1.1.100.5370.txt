multijava modular open classes symmetric multiple dispatch java curtis clifton gary leavens department computer science iowa state university hall ames ia usa leavens cs iastate edu multijava backward compatible extension java supporting open classes symmetric multiple dispatch 
open classes allow add set methods existing class supports creating distinct subclasses editing existing code 
visitor design pattern open classes require advance planning open classes preserve ability add new subclasses modularly safely 
multiple dispatch offers known advantages single dispatching conventional object oriented languages including simple solution kinds binary method problems 
multijava multiple dispatch retains java existing class encapsulation properties 
adapt previous theoretical allow compilation units statically typechecked modularly safely ruling link time run time type errors 
novel compilation scheme operates modularly incurs performance overhead open classes multiple dispatching 

introduce multijava backward compatible extension java gosling arnold gosling supports open classes symmetric multiple dispatch 
open class new methods added editing class directly chambers millstein chambers 
open class allows clients customize interface needs client application 
customization subclasses inplace extension classes require existing code referencing class changed new subclass 
visitor design pattern gamma pp intended allow new client specific operations added existing family classes open classes visitor pattern requires class implementors plan ahead build infrastructure class clients indirectly add behavior class 
open classes visitor pattern difficult add new subclasses modularly acm conference object oriented programming systems languages applications oopsla minneapolis mn october 
craig chambers todd millstein department computer science engineering university washington box seattle wa usa chambers todd cs washington edu existing visitor infrastructure edited account new subclasses 
open classes organize cross cutting operations separately classes belong key feature aspect oriented programming kiczales 
open classes object oriented languages support addition new subclasses new methods existing classes relieving tension observed cook odersky wadler findler flatt forms extension 
multiple dispatch common lisp steele paepcke dylan cecil chambers chambers allows method invoked message send depend run time classes subset argument objects 
method takes advantage multiple dispatch mechanism called multimethod 
contrast single dispatch smalltalk java selects method invoked message send run time class distinguished receiver argument 
java static types arguments influence method selection static overload resolution dynamic types arguments involved method dispatch 
multimethods provide uniform expressive approach overload resolution 
example support safe covariant overriding face subtype polymorphism providing natural solution binary method problem bruce 
multiple dispatch symmetric rules method lookup treat dispatched arguments identically 
asymmetric multiple dispatch typically uses lexicographic ordering earlier arguments important variant approach selects methods partly textual ordering declarations 
believe symmetric multiple dispatch intuitive error prone reporting possible ambiguities silently resolving potentially unexpected ways 
symmetric multiple dispatch cecil dylan kea mugridge calculus castagna castagna ml bourdoncle merz tuple leavens millstein 
major obstacle adding symmetric multimethods existing statically typed programming language modularity problem cook independently developed modules typecheck isolation may cause type errors combined 
contrast object oriented languages multimethods suffer problem example java safely typecheck compilation unit isolation 
multimethod modularity problem previous adding multimethods existing statically typed object oriented language forced global typechecking leavens public class extends node protected node condition body 
public void accept public class extends node protected node condition 
public void accept public class 
public void public void millstein employed asymmetric multiple dispatch order ensure modularity boyland castagna 
open classes suffer similar modularity problem unrelated clients add method class 
multijava language supports open classes symmetric multiple dispatch retaining java modular encapsulation typechecking compilation model 
particular new run time typechecking compilation needs performed 
achieve goal adapting previous modular static typechecking open classes multimethods dubious small multimethod core language millstein chambers 
contributions extension previous theoretical result larger complicated practical java language 
second contribution new compilation scheme open classes multimethods modular class class extension compiled separately efficient additional run time cost incurred multimethods class extension methods invoked 
multijava conservative extension java existing java programs legal multijava programs meaning 
multijava retains backward compatibility interoperability existing java source bytecode 
sections multijava support open classes multiple dispatch 
section precisely describe multijava modular static type system section outline compilation multijava source code java bytecode 
section discuss alternative language design adding multiple dispatching java 
section discusses related section concludes avenues 

open classes motivation java allows new subclass added existing class modular way requiring modifications existing public class extends 
public void accept 
public void 
node accept accept java code participants visitor design pattern accept code 
java single dispatch languages aware allow new method added existing class modular way 
programmer forced add new method directly associated class declaration recompile class 
course requires access class source code 
additionally new operation visible programs class 
adding operations specific particular program pollute interface modified class resulting pressure keep ancillary operations class 
leaving operation class benefits run time dispatching different subclasses class causes outside methods invoked differently methods declared inside class declaration 
potential approach adding new method existing class modularly add new method new subclass class 
require modification original class declaration allows new code create instances new subclass access new operation subclass instances 
existing code creates instances old class persistent database old class instances 
cases non modular conversions existing code databases new subclass required largely defeating purpose introducing subclass place 
approach poorly new subclass objects passed returned existing code existing code return static type old class requiring explicit downcast order access new operation 
second approach visitor design pattern developed specifically address problem adding new functionality existing classes modular way 
basic idea reify operation class allowing operations structured hierarchy 
example consider node class hierarchy 
instances classes compiler form new new opt throws opt new identifier opt syntax extensions multijava open classes grammar extends java syntax java language specification gosling 
standard java nonterminals just list new productions multijava indicate existence productions ellipses 
existing java nonterminals annotated pertinent section numbers java language specification 
syntax trees 
compiler perform operations syntax trees typechecking code generation 
operations structured class hierarchy operation subclass class 
client operation nodes invokes accept method node passing instance representing operation perform accept new accept method kind node uses ingalls invoke visitor object method appropriate type node 
main advantage visitor pattern new operations added modularly needing edit node subclasses programmer simply defines new subclass containing methods visiting class node hierarchy 
visitor pattern brings drawbacks including listed increasing importance stylized double dispatching code tedious write prone error 
need visitor pattern anticipated ahead time node class implemented 
example node hierarchy written accept method allows visits hierarchy possible add typechecking functionality modular way 
accept method included visitors require additional arguments return results programmed natural way unanticipated arguments results handled state stored subclass instance 
visitor pattern allows addition new operations modularly doing gives ability add new subclasses existing node classes modular way 
example new node subclass introduced class subclasses modified contain method visiting new kind node 
proposals advanced dealing known limitation martin vlissides suffer additional complexity form hand coded type cases complex class hierarchies difficult error prone 
open classes multijava declaring invoking top level methods open class feature multijava allows programmer add new methods existing classes modifying existing code breaking encapsulation properties java 
key new language feature involved top level method declaration syntax specified 
top level methods functionality typechecking visitor written follows compilation unit typecheck package oopsla examples methods typechecking public boolean node typecheck 
public boolean typecheck 
public boolean typecheck 
program may contain top level method declarations add methods class 
java bodies top level methods may receiver object 
clients may invoke top level methods exactly class original methods 
example typecheck method invoked follows typecheck instance node subclass 
allowed created code access typecheck methods retrieved persistent database 
code create manipulate instances classes aware top level methods may added classes code wishing invoke particular top level method needs aware declaration 
generic functions external internal helpful point define technical terms 
conceptually think method program top level declared classes implicitly belonging generic function collection methods consisting top method methods dynamically override 
example typecheck top level methods introduce single new generic function providing implementations receiver classes 
message send site invokes methods particular statically determined generic function 
precisely method declaration sub receiver class interface method declaration sup name number arguments static argument types sub receiver proper supertype sub belongs generic function sup sub overrides sup 
sub top method new generic function 
top method may example declared interface 
say class subtype type equivalently supertype holds class subclass interface class implements interface interface extends say proper subtype subtype call method declared top level method declaration syntax external method class receiver declared compilation unit 
java compilation unit corresponds single file java implementations file systems gosling 
methods internal 
methods declared class declarations includes methods declared top level method declaration syntax receiver class declared compilation unit 
calling methods internal sensible added receiver class declaration compiler 
analogously generic function external top method external 
generic functions internal 
methods external generic function internal methods see subsection 
scoping external generic functions invoke override external generic function client code imports generic function extension java existing import mechanism 
example import oopsla examples typecheck import compilation unit typecheck package oopsla examples case declares typecheck generic function 
similarly import oopsla examples implicitly import compilation units package oopsla examples types generic functions package available 
compilation unit implicitly imports generic functions package 
explicit importation external generic functions enables client code manage name spaces classes manipulate 
clients import typecheck compilation unit typecheck operation interface node 
clients interfaces node polluted generic function 
furthermore compilation unit import typecheck compilation unit declare typecheck generic function conflict 
java allows public type class interface declaration compilation unit gosling 
concession allows implementation find file containing code type name 
multijava extend restriction natural way file may contain public type 
java restriction somewhat complex account default access modifier gives access classes package 
associated internal methods top method number overriding methods public external generic function 
subsuming visitor pattern key benefit open classes obviate need visitor pattern infrastructure visitor class hierarchy accept methods nodes unnecessary 
client specific operations performed written toplevel methods node subclasses outside class declarations 
visitor pattern need plan ahead adding new operations new external generic functions 
new external generic function define argument types result type independently operations 
importantly idiom allows new node subclasses added program modularly visitor hierarchy needs updated 
example new subclass node added changing existing code follows import oopsla examples node import oopsla examples typecheck public class extends node 
public boolean typecheck 
multijava extends java notion method inheritance open classes 
client invoke visible node method instance regardless method visible compilation unit 
subclass override visible inherited internal external methods example 
example illustrates regular internal methods added external generic functions 
ability write external methods gives programmers flexibility organizing code 
example original typecheck methods put single file separate compilation units defining classes node hierarchy 
open classes allow new methods added existing class source code class available example class java library 
new methods added final class violating property class subclasses 
encapsulation multijava retains encapsulation properties java gosling 
java privileged access modifiers allowed external methods 
example helper method public external method may declared private included compilation unit public method 
modifiers usual meaning methods exception private external method may invoked overridden compilation unit declared 
differs java context external method compilation unit class 
external method may access public members receiver class non private members receiver class external method package class 

java protected method overridden subclasses receiver class 
multijava define protected external methods overridden subclasses compilation unit introduced 
access receiver class members prohibited 
particular external method access private members receiver class 
top level internal method access privileges regular java method including ability access private members receiver class 
restrictions modular typechecking consequence multijava modular typechecking scheme discussed section external methods may annotated added interfaces 
concrete subclasses extended class interface declared compilation units knowledge external method vice versa purely modular typechecking guarantee external generic function implemented concrete subclasses class interface 
second consequence modular typechecking top level method belong generic function top method compilation unit internal method 
restriction possible independent compilation units declare top level methods generic function receiver class leading clash 
restrictions discussed section 
class extensions multijava currently allows instance non static methods added existing classes 
straightforward extend allow top level static methods top level static fields 
top level instance fields top level instance constructors require significant extensions compilation strategy 

multiple dispatch motivation java method invoked message depend runtime class receiver object depend runtime classes arguments 
situations restriction unnatural limiting 
common example involves binary methods 
binary method method operates objects type bruce 
shape class method checking shapes intersect binary method 
public class shape 
public boolean intersect shape 
suppose wishes create class rectangle subclass shape 
comparing rectangles efficient intersection algorithm comparing arbitrary shapes 
way attempt add functionality java program follows public class rectangle extends shape 
public boolean intersect rectangle efficient code rectangles unfortunately provide desired semantics 
particular new intersection method safely considered override original intersection method violates standard contravariant typechecking rule functions cardelli argument type safely changed subtype overriding method 
suppose new method considered override intersection method class shape 
method invocation intersect java invoke overriding method instance rectangle regardless run time class 
possible invoke rectangle intersection method arbitrary shape method expects argument rectangle 
cause run time type error example rectangle method tries access field argument inherited shape 
handle problem java considers rectangle intersect method statically overload shape method 
statically overloaded methods belong distinct generic functions just methods different names 
java uses name number arguments static argument types message send statically determine generic function invoked message send site 
example different static argument types intersect methods belong different generic functions java determines statically generic function invoked intersect message send site static type message argument expression 
example consider client code rectangle shape boolean new rectangle 
new rectangle 
intersect intersect intersect intersect objects passed arguments intersect message sends identical message sends invoke method 
fact message send invoke rectangle intersection method 
messages invoke shape intersection method static types arguments cause java bind messages generic function introduced shape intersect method 
likewise message statically bound generic function introduced rectangle intersect method 
java solve problem performing explicit run time type tests associated casts call coding pattern typecase 
example implement rectangle intersection method follows public class rectangle extends shape 
public boolean intersect shape instanceof rectangle rectangle rectangle efficient code rectangles super intersect version rectangle intersection method desired semantics 
addition takes argument type shape method safely override shape intersect method part generic function 
message sends type syntax extensions multijava multimethods example client code invoke rectangle intersect method 
improved code problems 
programmer explicitly coding search intersection algorithm execute tedious error prone 
addition code easily extensible 
example suppose triangle subclass shape added program 
special intersection behavior required rectangle triangle method modified add new case 
general new shape subclass added type case existing binary method existing shape subclass may need modified add new case new shape subclass 
related solution binary method problem java double dispatching accept methods visitor pattern see 
technique explicit instanceof test find run time type argument example information obtained performing second message send 
message sent argument name message encoding dynamic class original receiver 
double dispatching avoids need intersect method shape subclass include explicit type case possible argument shapes reuses language built method dispatching mechanism place user written type cases 
double dispatching tedious implement hand type casing 
double dispatching completely modular requires root class shape example modified new subclass added 
multiple dispatch multijava declaring multimethods part provide clean modular solution binary method problem multijava allows programmers write multimethods methods dynamically dispatch arguments addition receiver object 
syntax multimethod extension specified 
multimethods definition rectangle class changed public class rectangle extends shape 
public boolean intersect shape rectangle efficient code rectangles code identical solution attempt subsection type declaration formal parameter shape rectangle simply rectangle 
shape part denotes static type argument consequently revised rectangle intersect method belongs generic function shape intersect method name number arguments static argument types match 
rectangle part indicates wish dynamically dispatch formal parameter addition receiver 
standard java receiver dispatched 
intersect method invoked dynamic class receiver rectangle subclass regular java dynamic class argument rectangle subclass 
message dispatch semantics formal parameter declaration class symbol referred explicit specializer formal 
method tuple specializers receiver type explicit specializer ith position static type ith argument 
shape class intersect method tuple specializers shape shape rectangle class method rectangle rectangle 
semantics message dispatch multijava follows 
message send evaluate value extract methods generic function invoked determined statically generic functions scope named appropriate static types expressions select invoke specific method applicable arguments 
dynamic types object static type 
extend subtype relation defined subsection primitive types subtypes 
method tuple specializers applicable pointwise subtypes subtype 
specific applicable method unique applicable method tuple specializers pointwise subtypes tuple specializers applicable method 
applicable methods understood error occurs say generic function incomplete cause message understood errors invoked 
applicable methods unique message ambiguous error occurs say generic function ambiguous cause message ambiguous errors invoked 
static typechecking described section detect reject generic functions potentially incomplete ambiguous 
dispatching semantics code solves binary method problem 
example consider invocation intersect static type shape 
run time arguments instances rectangle subclass rectangle shape rectangle intersect methods applicable 
applicable methods rectangle method specific selected invoked 
shape method applicable invoked 
multijava dispatching semantics naturally generalizes java dispatching semantics 
multijava program uses argument specializers dispatching occurs receiver behavior program exactly regular java 
semantics dynamic dispatching static overloading unchanged 
addition argument specializers extends java normal dynamic dispatching semantics additional arguments 
mixing methods multimethods subset method arguments specialized 
class declare methods name static argument types provided different argument specializers ambiguities arise 
example circle class defined selection intersection methods public class circle extends shape 
public boolean intersect shape code circle shape public boolean intersect shape rectangle efficient code rectangle public boolean intersect shape circle efficient code circles methods static argument type shape generic function introduced intersect method shape class 
different combinations specializers causing apply different run time circumstances 
example consider intersect invocation static type shape 
run time arguments instances circle third methods applicable shape class default intersect method 
third circle method pointwise specific invoked 
circle triangle circle method shape method applicable circle method invoked 
rectangle circle shape intersect method remains applicable 
general generic function include methods specialize different subsets arguments long ambiguous 
ambiguity detection discussed section 
invocations generic functions regular java message syntax depend arguments specialized 
regular java method overridden subclass multimethod modifying overridden class invocations method 
super sends java super construct allows method invoke method directly overrides 
java allows super send invoke method different generic function name message different sender name arguments differ number static type formal parameters sender 
multijava multimethod may override method compilation unit 
example third circle intersect method overrides circle intersect method 
multijava super sends able walk chain overriding methods compilation unit 
multijava retain backward compatibility java super able invoke method different generic function sender 
solution statically identify super send invoke method generic function sender 
name message number static types arguments 
target generic function sender semantics super send semantics regular multijava message send set applicable methods filtered include methods overridden directly indirectly sending method 
hand target generic function different sender java multijava filters set applicable methods include methods declared inherited sender immediate superclass 
illustrate semantics consider implementation third circle intersect method contains super send intersect arguments public boolean intersect shape circle super intersect 
invocation known statically invoke method generic function sender consequently set applicable methods receiver argument specializer types pointwise supertypes run time receiver argument classes filtered contain just overridden intersect method 
case filtered applicable methods circle intersect method intersect method shape 
unique specific applicable method circle intersect method invoked 
method contains super send form filtered applicable method shape super send form shape intersect method lead static type error applicable methods 
consider alternative implementation third circle intersect method containing different super send public boolean intersect shape circle super 
invocation directed different generic function sender set applicable methods consists applicable methods generic function declared inherited shape circle immediate superclass 
uses multimethods binary methods commonly occurring situation multimethods valuable situations benefit multiple dispatching 
example consider generic function defined shapes output devices 
default algorithms provided shape independent output device 
certain combinations shape output device allow efficient algorithms instance device provides hardware support rendering shape 
implement generic function shape class introduce method public class shape 
public void default display shape subclass shape able provide additional overriding multimethods particular kinds output devices 
example rectangle class provide multimethods public class rectangle extends shape 
public void default display rectangle public void special display rectangle windows public void fast display rectangle hardware support top level methods added open classes multimethods 
example generic function implemented external generic function 
restrictions modular typechecking multimethod external restrictions open classes apply example external multimethods 
multimethod internal external default implementations provided arguments static types 
example assuming class method rectangle class provides default implementation argument tuple rectangle 
discuss restriction subsection 
typechecking section describe extend java static type system accommodate multijava extensions 
structure modular type system subsection 
subsection describe challenges open classes multimethods pose modular typechecking discuss restrictions impose multijava meet challenges 
approach multijava type system ensures statically message message ambiguous errors occur run time 
ruling errors involves complementary client side checking message sends implementation side checking methods chambers leavens 
describing mean modular typechecking discuss kinds checks 
modular typechecking modular typechecking requires compilation unit successfully typechecked considering static type information compilation units imports 
compilation units separately pass static typechecks combination compilation units pass regular java link time checks safe possibility message understood message ambiguous error run time 
say type visible compilation unit declared referred type primitive type 
tuple types visible component type visible 
method visible compilation unit declared declared type visible external method declared compilation unit imported modular typechecking strategy needs consider visible types visible methods determine compilation unit type correct 
client side typechecking client side checks local checks type correctness message send expression 
message send expression program static type exist unique generic function scope named top method tuple argument types pointwise supertype 
check performed standard java 
extension external generic functions imported checked regular class interface declarations 
send receiver super typechecker additionally ensure exists unique specific method invoked send 
check extends checking super sends java performs 
implementation side typechecking implementation side checks ensure generic function fully unambiguously implemented 
checks parts 
checks individual method declarations part applies method declaration isolation explicit specializers associated static type proper supertype class 
overriding method privileged access modifiers satisfy overrides method compilation unit receiver access level 
belongs external generic function access level generic function top method 
standard java rules privileged access overriding apply gosling 
requiring explicit specializer proper subtype associated static type ensures specializer affect dynamic dispatching 
specializer supertype associated static type specializer applicable legal message send generic function equivalent specializing argument position 
furthermore specializer unrelated associated static type specializer applicable legal message sends generic function method invoked 
explicit specializers required classes interfaces form multiple inheritance supported interfaces create ambiguities elude modular static detection millstein chambers 
restrictions privileged access level overriding methods intended simplify compilation scheme 
example restrictions ensure set methods compilation unit part generic function privileged access modifiers 
methods compiled single java method 
leave exploring ways relax restrictions 
checks entire generic functions second part implementation side checks treats visible multimethods visible generic function group 
consider generic function top method argument types 
tuple types legal argument tuple generic function pointwise supertype concrete 
say type concrete primitive type class declared 
classes interfaces non concrete checks visible generic function visible legal argument tuple visible specific applicable method invoke 
part implementation side typechecking critical ruling ambiguities multimethods ensuring top methods overridden non methods combinations concrete arguments 
example consider implementation side checks intersect generic function perspective compilation unit containing rectangle class defined subsection 
compilation unit shape rectangle visible shape subclasses circle visible referenced rectangle class 
intersect generic function visible intersect methods shape rectangle 
visible legal argument tuples pairs shapes rectangles 
intersect method class rectangle specific applicable method rectangle rectangle tuple intersect method class shape specific applicable method tuples 
conceptually checking involves enumeration combinations visible legal argument tuples efficient algorithms exist check interesting subset tuples chambers leavens castagna 
restrictions modular type safety unfortunately typechecking approach described message understood message ambiguous errors may occur run time caused interactions unrelated compilation units millstein chambers 
rest subsection describe kinds errors occur explain restrictions impose multijava rule 
classes open classes mentioned previously subsection external methods lead message understood errors 
illustrated 
jpeg class concrete implementation picture class 
external method declaration draw compilation unit adds new method draw picture class 
draw compilation unit passes implementation side typechecks jpeg class visible 
client invokes draw jpeg message understood error occur 
rule problem impose restriction implementation side typechecks local external generic function consider non local non concrete visible subtypes receiver type concrete receiver position 
type method local declared current compilation unit non local 
generic function local top method local non local 
external draw method compilation unit draw introduces new generic function non local non concrete receiver picture 
restriction implementation side typechecks consider picture concrete finding incompleteness legal argument tuple picture 
draw compilation unit provide implementation drawing pictures resolves incompleteness unseen jpeg class 
compilation unit picture package oopsla public class picture draw method 
compilation unit jpeg import oopsla picture public class jpeg extends picture draw method 
compilation unit draw import oopsla picture public void picture draw incompleteness problem classes open classes compilation unit picture package oopsla public class picture public boolean similar picture compilation unit jpeg import oopsla picture public class jpeg extends picture public boolean similar picture jpeg 
compilation unit gif import oopsla picture public class gif extends picture public boolean similar picture gif 
incompleteness problem classes multimethods compilation unit intersect import oopsla shape import oopsla rectangle public boolean shape intersect shape rectangle 
compilation unit triangle import oopsla shape public class triangle extends shape public boolean intersect shape 
ambiguity problem unrestricted multimethods consequence restriction useless declare external method restriction force receiver class treated concrete anyway 
reason multijava support open interfaces ability add method signatures interfaces 
classes multimethods classes coupled multimethods lead message understood errors 
consider example 
picture class declared need implement similar method 
implementation side checks jpeg compilation unit verify single visible legal argument tuple jpeg jpeg specific similar method similarly gif compilation unit 
run time message understood error occur similar message sent jpeg gif 
rule problem impose restriction non receiver argument position implementation side typechecks generic function consider non concrete visible subtypes static type concrete argument position 
picture restriction implementation side typechecks similar generic function jpeg compilation unit consider picture concrete non receiver argument position 
checks find incompleteness legal argument tuple jpeg picture requiring jpeg class include method handling case handles jpeg gif argument tuple 
similarly gif class forced add similar method handling gif picture 
general restriction forces creation method implementations handle classes non receiver arguments multimethods 
ensures appropriate method implementations exist handle unseen concrete subclasses classes 
restriction complements addressing case classes receiver position 
existence appropriate method implementations handle classes ensured 
restriction applies external generic functions internal generic functions may safely classes receiver position 
permits uses classes methods allowed standard java uses multimethods 
example picture class may safely omit implementation internal similar generic function 
unrestricted method overriding message ambiguous errors elude static detection occur arbitrary methods added generic function compilation unit 
errors occur multiple dispatch mentioned subsection 
section give example uses multiple dispatch 
consider example assuming shape class subsection rectangle class subsection 
external method declaration compilation unit intersect overrides default shape intersect method arguments dynamic class rectangle 
shapes rectangles visible intersect compilation unit pair classes specific applicable method 
similarly shapes triangles visible triangle compilation unit implementation side checks succeed 
run time intersect message send triangle instance rectangle instance cause message ambiguous error occur method example specific 
way partially solve problem break symmetry dispatching semantics 
example linearized specificity argument positions comparing specializers lexicographically left right pointwise done common lisp steele paepcke polyglot agrawal method triangle strictly specific method intersect 
major design goals retain symmetric multimethod dispatching semantics 
furthermore unrestricted external methods allow create methods identical type signatures breaking symmetry dispatching solve part problem 
solution impose restriction external method belong local generic function 
external method declaration intersect compilation unit violates restriction 
particular associated intersect method belong local generic function intersect generic function top method non local shape class 
restriction legal location declaration intersect method tuple specializers shape rectangle compilation unit shape class 
case method declaration rectangle class visible triangle compilation unit check specific applicable method argument tuple triangle rectangle statically detecting ambiguity 
resolve ambiguity write method dispatches triangle rectangle tuple 
result restriction method declaration compilation unit receiver class associated generic function top method 
case unseen method generic function different receiver violation restriction 
method ambiguous unseen method modular implementation side typechecks rule potential ambiguities 
java declare method final prevents overridden 
similarly multijava type system prevent method declared final overridden sense method generic function tuple specializers pointwise subtype restriction allows condition easily checked 
ensures methods particular method overrides available compilation unit typechecked 

compilation developed compilation strategy multijava standard java bytecode retains modular compilation efficient single dispatch existing java code supporting new features open classes multiple dispatching 
additional run time cost new features incurred features code multiple dispatching external generic functions compiles runs exactly regular java 
multijava code interoperate seamlessly existing java code 
multijava code invoke regular java code including standard java libraries 
additionally subclasses regular java classes defined multijava regular java methods overridden multimethods multijava subclasses 
client source code compiled bytecode insensitive invoked method regular java method multijava multimethod 
aside need import external generic functions client source code insensitive invoked method internal external 
internal external generic functions require different styles compilation 
recall external generic function external top method 
internal generic function compiled regular java method declared inside receiver class interface 
internal generic functions invoked calling sequence regular public class square extends rectangle 
public boolean intersect shape rectangle method body public boolean intersect shape square method body internal generic functions public class square extends rectangle 
intersect dispatch method public boolean intersect shape instanceof square square square method body substituting instanceof rectangle rectangle rectangle method body substituting return super intersect translation internal generic functions java method 
external generic function compiled separately receiver class interface 
external generic function uses different implementation strategy calling convention internal 
compiling code refers generic function code adds method invokes compiler tell generic function internal 
compiler information code imported compilation unit declaring generic function declaring generic function receiver type 
generic function internal compilation units 
subsection describes declarations invocations internal generic functions compiled 
subsection describes external generic functions 
subsection describes compilation super sends 
compilation directly java bytecode simplify discussion generally describe compilation going java source 
situations need exploit additional flexibility compiling directly java virtual machine 
internal generic functions multimethods internal generic function receiver class compiled unit single java method call dispatch method 
consider set intersect methods 
set multimethods multijava compiler produces dispatch method receiver class contains bodies multimethods set 
shows result translating multijava code 
translation dispatch method name generic function intersect case static 
course compiler careful avoid variable capture 
argument types generic function methods 
dispatch method internally necessary checks non receiver arguments explicit specializers select best applicable multimethods set 
implemented cascaded sequences instanceof tests 
multiple paths sequences lead method body goto bytecodes exploited avoid code duplication arise straightforward compilation java source 
alternatively compile method body static method static method call goto 
lieu cascaded sequences instanceof tests efficient dispatching schemes exploited chambers chen 
set multimethods compiled dispatch method dynamic dispatch tests ordered ensure specific multimethod 
multimethods set applicable argument tuple typechecking restrictions ensure single specific check succeeds 
multimethod body selected check specific applicable superclass method need check superclass multimethods dispatching local multimethod 
multimethod compiled dispatch method explicit specializer argument position possible checks match run time arguments 
case final clause passes dispatch superclass making super call 
eventually class reached includes method dispatch arguments modular typechecking rules ensure existence method checking completeness generic function 
case final clause body default method 
compiling regular java singly dispatched methods just special case rules 
method dispatch arguments local multimethods overriding body performs run time type dispatch arguments reduces just original method body 
invocation internal generic function compiled just regular java singly dispatched invocation 
clients insensitive invoked generic function performs multiple dispatching 
set arguments method dispatches changed needing recompile clients 
efficiency penalty regular java code compiled multijava compiler 
methods dispatch multiple arguments get compiled 
java program multijava program multimethods anyway little performance difference 
java program double dispatching simulate multimethods possible generate efficient code multijava constant time dispatches plus forwarding inheritance needed second argument double dispatching sacrifices ability add new subclasses modularly 
external generic functions external generic function introduced external method declaration 
generic function receiver class compiled separately external generic function added method class 
generate separate class called anchor class represent external generic function 
compilation unit rotate objects compilation external generic functions public shape shape rotate float method body public shape rectangle rotate float method body public shape square rotate float method body compilation unit defining external generic function public interface rotate rotate type dispatcher object example shape apply shape float public class rotate rotate anchor anchor class anchor object function field dispatcher object apply method public static rotate rotate function new rotate rotate dispatcher inner class implementing dispatcher object private class rotate rotate dispatcher implements rotate rotate public shape apply shape float instanceof square square square method body substituting instanceof rectangle rectangle rectangle method body substituting method body substituting shows objects generated compilation external generic functions 
anchor class instance single static field function containing dispatcher object 
invocation generic function dispatcher object responsible running generic function methods dynamic types arguments 
dispatcher object java version class function 
contains methods particular generic function declared single compilation unit 
example introduces rotate external generic function methods 
shows results compiling 
privileged access level top method determines privileged access level anchor class function field dispatcher interface 
names anchor class generic function interface formed concatenating name compilation unit containing top method generic function name appropriate suffix translation anchor respectively 
example anchor class named rotate rotate anchor dispatcher interface named rotate rotate internal generic functions dispatching performed cascaded instanceof tests optimizations apply 
invoke external generic function client loads dispatcher object anchor class function field invokes apply method arguments generic function including receiver 
multijava code shape new rectangle shape new square intersect rotate translated dispatches dynamic types arguments objects adding methods non local external generic functions compilation unit oval public class oval extends shape 
public shape rotate float method body public class oval extends shape shape new rectangle shape new square intersect rotate rotate anchor function apply internal generic functions clients invoking external generic functions insensitive generic function performs multiple dispatching 
set arguments method dispatches changed needing recompile clients 
consider compilation methods add nonlocal external generic function 
additional methods defined compilation unit receiver classes required typechecking restriction 
receiver classes compilation unit 
receiver classes translation creates new dispatcher object contain set generic function methods receiver class 
shows new dispatcher object created set methods 
anchor class function field updated new dispatcher object 
turn new dispatcher object contains old function field adding multimethod external generic function static initializer rotate rotate anchor function new oval rotate dispatcher rotate rotate anchor function 
anchor object function field new dispatcher object apply method old function field inner class implementing dispatcher object private class oval rotate dispatcher implements rotate rotate public rotate rotate public oval rotate dispatcher rotate rotate public shape apply shape float instanceof oval oval oval method body substituting return apply translation dispatcher object apply method original dispatcher object 
generic function invoked apply method new dispatcher object called 
checks methods applicable 
calls apply method original dispatcher object old function field 
example shows class oval containing method added non local external generic function rotate 
shows results compiling class 
new dispatcher class oval rotate dispatcher defined apply method checks run time arguments dispatch local rotate method 
static class initialization oval creates instance dispatcher object sets dispatcher old function field previous dispatcher object dispatcher constructor 
new dispatcher object assigned function field 
invoked dispatcher object checks receiver object oval 
oval rotate method run 
dispatching continues invoking apply method previous dispatcher object chain responsibility pattern gamma pp 

may class added methods rotate generic function 
eventually dispatching finds function applicable method added chain search ends initial dispatcher object installed generic function created 
completeness checking ensures dispatcher object includes default method handles arguments guaranteeing dispatching terminates successfully 
potentially slow chain responsibility pattern compiling external generic functions written standard java 
efficiency penalty methods written standard java 
order dispatcher objects checked depends order put chain referenced rotate rotate anchor function field 
java ensures superclasses initialized subclasses gosling dispatcher objects superclasses put chain earlier subclass dispatchers causing subclass dispatchers checked superclass dispatchers desired 
unrelated classes dispatchers put chain order fine modular typechecking ensured multimethods unrelated classes applicable disjoint sets legal argument tuples class multimethods apply invocation 
noted subsection internal methods part external generic functions granted access private data receiver class 
achieve dispatcher object methods compiled inner class nested corresponding receiver class gosling 
super sends compilation super sends divides cases depending super send invokes method compiled different java bytecode method 
target super send compiled different java method super send compiled just regular java eventually leading invokespecial bytecode 
implementation strategy applicable case super send dispatcher object external generic function class dispatcher object subclass class referred super 
invokespecial bytecode bytecode require inheritance relationship caller callee 
possibility super send invokes method compiled java bytecode method 
case super send effect branch compiled method invoking different branch 
avoid duplicating code called branch compile intra method invocation jsr bytecode suitable argument result shuffling code 
callee part ret bytecode invoked jsr points compiled method reached normal dispatching super sends 

alternative design early plan adding multimethods java apply concept multiple dispatch dispatch tuples leavens millstein leading 
multimethods external classes 
multimethod dispatched 
imagine strategy static initializers currently add new multimethods chain responsibility reflection analyze current generic function dynamic compilation create new global dispatching method fly 
load time cost strategy high run time invocation costs greatly reduced 
shape arguments took additional non dispatched shape argument declared public boolean shape shape nearest shape 
invoked nearest conceptually invocation sending message tuple objects 
offers advantages 
syntax defining invoking method cleanly separates dispatched arguments occur tuple non dispatched ones occur method identifier 
separation arguments maintains clear parallel syntax semantics 
tuple syntax clearly differentiates code takes advantage multiple dispatch standard java code ease programmer transition multiple dispatch mind set 
separation arguments dispatched sets brings problems 
provide robust client code 
example suppose wanted modify example include dynamic type third argument dispatching decisions 
tuple method declaration rewritten public boolean shape shape shape nearest 
furthermore method invocations client code need changed move third argument tuple 
invocation nearest multijava modification requires editing original method client source code compiled code remain unchanged code insensitive set arguments dispatched methods generic function 
requires multimethods generic function dispatch arguments 
particular means multimethods added existing singly dispatched methods includes existing java code 
multijava restriction 
example multijava override equals method object class multiple dispatch public class set extends object 
public boolean equals object set 
best public boolean set set equals 
attempt create new equals generic function completely distinct testing equality objects 
invocation code object obj obj 
obj equals obj invoke special equality operation sets arguments dynamic type set 
final argument multijava favor strictly expressive 
tuple method declarations invocations added syntactic sugar multijava vice versa 
remains seen ease learning advantages outweigh expressiveness code maintenance advantages multijava 
plan investigate completed implementation multijava 

related typechecking restrictions multijava derived previous millstein chambers 
presents dubious simple core language multimethods open classes describes type systems dubious achieve safe static typechecking degree modularity 
type systems differ trade offs expressiveness modularity typechecking complexity 
base multijava type system simplest modular systems called system encapsulated multimethods castagna bruce design adding asymmetric multimethods existing singly dispatched object oriented language 
encapsulated multimethods involve levels dispatch 
level just regular single dispatch class receiver object 
second level dispatch performed class find best multimethod applicable dynamic classes remaining arguments 
encapsulated style lead duplication code multimethods class inherited subclasses 
compilation strategy internal generic functions yields compiled code similar arise encapsulated multimethods hide asymmetry dispatch programmers 
boyland castagna demonstrated addition asymmetric multimethods java parasitic methods boyland castagna 
avoid unsolved modularity problems symmetric multimethods implementation idea encapsulated multimethods 
parasitic methods overcome limitations encapsulated multimethods supporting notion multimethod inheritance overriding 
parasitic methods allowed specialize interfaces causing potential ambiguity problem due form multiple inheritance supported interfaces 
retain modularity typechecking dispatching semantics parasitic methods complicated rules textual order multimethod declarations 
additionally overriding parasitic methods declared parasites effect adds signs arguments clean ability resolve ambiguities arise presence java static overloading 
contrast approach offers purely symmetric dispatching semantics smooth interactions static overloading modularity typechecking compilation 
approach supports open classes 
aspect oriented programming kiczales provides alternative traditional class structuring objectoriented programming 
things aspect may introduce new methods existing classes modifying classes supporting open classes 
aspects typechecked compiled modularly 
program preprocessed unit yield version program aspects inserted appropriate classes 
source code required classes extended aspects recompilation classes required aspects changed 
multijava open class technique require source code classes extended 
client library source code access add new methods classes library 
multijava require source code access program static typechecking compilation modular 
hand edit program source code pattern metaprogramming multijava handle crosscutting concerns aspect oriented programming 

shown extend java open classes multimethods 
shown possible modularly typecheck efficiently compile new features 
extends earlier modular typechecking multimethods millstein chambers function properly richer programming language including coping existing treatment single dispatching static overloading compilation units 
extension supports super sends compilation efficient modular interoperable existing java code 
possible areas 
continues implementation multijava compiler 
extensions multijava support top level static methods static fields instance fields instance constructors investigated 
straightforward extensions java reflection api considered example answer queries methods added open class mechanism 
increases multijava expressiveness studied 
area interest replacing static typechecking restrictions static warnings backed link time checking 
things change allow declaration external methods declaration top level methods arbitrary compilation units provided lead incompleteness ambiguity link time 

acknowledgments gary leavens supported part nsf ccr 
craig chambers todd millstein supported part nsf ccr nsf young investigator award ccr gifts sun microsystems ibm 
part performed craig chambers sabbatical carnegie mellon university 
clyde ruby gerald baumgartner discussions anonymous reviewers helpful comments 

agrawal rakesh agrawal linda demichiel bruce lindsay 
static type checking multi methods 
oopsla conference proceedings phoenix az october volume number acm sigplan notices pp 

acm new york november 
arnold gosling ken arnold james gosling 
java programming language 
second edition addison wesley reading mass 
bourdoncle merz fran ois bourdoncle stephan merz 
type checking higher order polymorphic multi methods 
conference record popl th acm sigplan sigact symposium principles programming languages paris france pp 

acm new york january 
boyland castagna john boyland giuseppe castagna 
parasitic methods implementation multi methods java 
proceedings acm sigplan conference object oriented programming systems languages applications volume number acm sigplan notices pp 

acm new york november 
bruce kim bruce luca cardelli giuseppe castagna hopkins object group gary leavens benjamin pierce 
binary methods 
theory practice object systems 
cardelli luca cardelli 
semantics multiple inheritance 
information computation february march 
earlier version appeared semantics data types symposium lncs pp 
springer verlag 
castagna giuseppe castagna giorgio ghelli giuseppe longo 
calculus overloaded functions subtyping 
proceedings acm conference lisp functional programming san francisco june pp 
volume number lisp pointers 
acm new york january march 
castagna giuseppe castagna 
covariance contravariance conflict cause 
acm transactions programming languages systems 
castagna giuseppe castagna 
object oriented programming unified foundation birkh user boston 
chambers craig chambers 
object oriented multi methods cecil 
ecoop conference proceedings utrecht netherlands june july volume lecture notes computer science pp 

springer verlag berlin 
chambers craig chambers 
cecil language specification rationale version 
department computer science engineering university washington december 
www cs washington edu research projects cecil www papers cecil spec html 
chambers chen craig chambers chen 
efficient multiple predicate dispatching 
oopsla conference proceedings pp 
october 
published sigplan notices october 
chambers leavens craig chambers gary leavens 
typechecking modules multi methods 
acm transactions programming languages systems 
november 
chambers craig chambers 
diesel generation oo language cecil 
invited talk fifth workshop foundations object oriented languages san diego california january 
cook william cook 
object oriented programming versus data types 
foundations object oriented languages rex school workshop proceedings noordwijkerhout netherlands may june volume lecture notes computer science pp 

springer verlag new york 
neal keene robert mathews tucker 
dylan programming book 
addison wesley longman reading mass 
findler flatt robert bruce findler matthew flatt 
modular object oriented programming units mixins 
international conference functional programming baltimore maryland september 
gamma erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley reading mass 
gosling james gosling bill joy guy steele gilad bracha 
java language specification second edition 
addison wesley reading mass 
ingalls ingalls 
simple technique handling multiple polymorphism 
norman meyrowitz editor oopsla conference proceedings portland oregon november volume number acm sigplan notices pp 

acm new york october 
kiczales gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
proceedings eleventh european conference object oriented programming finland 
springer verlag lncs 
june 
leavens millstein gary leavens todd millstein 
multiple dispatch dispatch tuples 
conference objectoriented programming systems languages applications vancouver british columbia october 
martin robert martin 
acyclic visitor 
robert martin dirk riehle frank buschmann editors pattern languages program design pp 

addison wesley longman reading mass 
millstein chambers todd millstein craig chambers 
modular statically typed multimethods 
proceedings fourteenth european conference object oriented programming lisbon portugal july 
volume lecture notes computer science pp 
springer verlag 
millstein chambers todd millstein craig chambers 
modular statically typed multimethods 
appear information computation 
mugridge mugridge hosking 
multi methods statically typed programming language 
ecoop conference proceedings geneva switzerland july volume lecture notes computer science springer verlag new york 
martin iii 
default extrinsic visitor 
robert martin dirk riehle frank buschmann editors pattern languages program design pp 

addison wesley longman reading mass 
odersky wadler martin odersky philip wadler 
pizza java translating theory practice 
conference record popl th acm sigplan sigact symposium principles programming languages paris france pp 

acm new york january 
paepcke andreas paepcke 
object oriented programming clos perspective 
mit press 
andrew 
dylan manual definitive guide new object oriented dynamic language 
addison wesley reading mass 
steele guy steele jr common lisp language second edition 
digital press bedford ma 
vlissides john vlissides 
visitor frameworks 
report 
sigs publications november december 
