distributed file system support virtual machines grid computing ming zhao jian zhang renato figueiredo advanced computing information systems laboratory acis electrical computer engineering university florida gainesville florida ming renato acis ufl edu presents data management solution allows fast virtual machine vm instantiation efficient run time execution support vms execution environments grid computing 
novel distributed file system virtualization techniques unique provides demand access vm state unmodified vm monitors supports user level write back disk caches application caching policies middleware driven consistency models supports meta data associated files expedite data transfers 
reports performance wan setup vmware vms 
results show solution delivers performance better native nfs bring application perceived overheads relatively local disk setup 
solution allows vm gb virtual disk mb virtual memory cloned seconds instantiated seconds subsequent clones 

fundamental goal computational grids allow flexible secure sharing resources distributed different administrative domains 
realize vision key challenge addressed grid middleware provisioning execution environments flexible customizable configurations allow secure execution untrusted code grid users 
environments delivered architectures combine classic virtual machines vms middleware dynamic instantiation vm instances user basis 
efficient instantiation vms distributed resources requires middleware support transfer large vm state files memory disk poses challenges data management infrastructures 
shows solution efficient transfer vm state domains implemented means extensions proxy distributed grid virtual file system 
context vms referred classic instruction set vms defined architecture leverages existing implementations de facto distributed file system standard local area networks nfs extends user level support middleware controlled encrypted file system channels cross domain authentication network latency hiding client side caching meta data file system level efficiently handle vm memory state files 
mechanisms implemented requiring modifications existing nfs clients servers support execution unmodified application binaries including para virtualized vms user mode vms file system store machine state vmware hosted uml 
reports performance vmware vms instantiated state stored wide area distributed file systems conventional proxy enhanced nfs 
experimental results show proxy enhanced file system improves execution time applications experiences relative small overhead respect locally stored vm state 
results show demand transfers meta data information allows instantiation mb ram gb disk linux vm clone seconds clone seconds subsequent clones considerably outperforming cloning transfer entire files excess seconds 
contribution novel solution extends user level proxies support demand high performance transfers grid vms 
builds extends distributed virtual file system infrastructure provides basis establishing session grid wide file system sessions 
solution addresses performance limitations associated typical nfs setups wide area environments buffer caches limited storage capacity write policies allowing user level write back disk caches 
addition solution supports application driven meta data information allow clients satisfy requests demand block file transfers selectively 
manner transparent kernel applications 
specific particular vm technology supports existing hosted vms allow nfs file system store machine state regular files filesystems 
analyzes performance solution quantitatively wide area network environment demonstrates outperform unmodified nfs scp file copying vm instantiation cloning run time execution 
rest organized follows 
section introduces architecture grid computing vms discusses alternatives handling transfer vm state model 
section describes distributed virtual file system techniques supporting vms section presents results discussions performance solution 
section discusses related section concludes 

grid computing virtual machines grid computing system supports unmodified applications commercial applications source code access available faces challenge preserving integrity resources presence untrusted users applications 
considerations resource security user isolation legacy applications flexibility customization execution environments led architectures employ classic vms grid computing support problem solving environments 
flexible application centric solution built fact defined vm execution environment encapsulated archived middleware available users 
request vm cloned instantiated middleware exploit computing power distributed vm app data compute server data server users vm app data vm app data compute server grid resources 
cloning vm entails copying states golden vm configuring user specific information restoring grid user 
mechanisms existing middleware utilized support functionality treating vm computing sessions processes scheduled vm monitors data transferred vm state 
data management key middleware support transfer vm state computation tied resources copy user vm image support transfer application data computation tied resources local access user files 
appropriate data management support components grid vm session distributed different logical entities image server stores vm base configuration images compute server provides capability instantiating vms data server stores user data 
support vms dynamically instantiated grid resources poses challenges data management infrastructure 
various vm technologies hosted vmware user mode linux xen image vm represented memory disk state files filesystems large gbytes transferred efficiently image server compute server 
approaches conceivable transfer entire vm state instantiation leverage host support demand transfer file system data allow vm state transferred demand requested vm monitor 
full state transfers disadvantages large setup latencies transfer storage unnecessary data compute server typical vm sessions small fraction disk state execution 
demand transfers possible granularity file blocks distributed file systems middleware vm image data middleware user data vm monitor hosting network image server app image server app data server user middleware supported data management virtual machine images user file systems allows application tailored vm instantiation vm vm vm grid resources compute servers image servers data servers 
nfs network latency accessing server lead poor performance writes capacity misses occur frequently memory file system buffers 
techniques section describe data management infrastructure supports efficient demand transfer data associated vm image 
combination complementary middleware resource user management user interfaces availability grid vms enables design problem solving systems highly flexible 
example vigo system allows demand creation user virtual workspace provides web browser capable interactive graphical interface linux vm clone upload download facility file manager runs vm 
workspace dynamically built middleware user transparent manner cloning suspended vm image configuring clone user specific information mounting user grid virtual file system inside vm clone 

grid virtual file system virtual machines 
background current grid data management solutions typically employ file staging techniques transfer files user accounts absence common file system 
file staging approaches require user explicitly specify files need transferred gridftp transfer entire files time opened gass may lead unnecessary data transfers entire vm image fraction required computation 
data management solutions supporting demand transfer grids investigated related discussed section 
solutions require customized application libraries file servers 
previous shown data management model supporting demand data transfers requiring dynamically linked libraries changes native file system clients servers achieved way mechanisms logical user accounts distributed virtual file system 
distributed virtual file system built virtualization layer top nfs de facto distributed file system standard allowing data transferred demand grid storage compute servers duration computing session 
functionality realized extensions existing nfs implementations user level requiring modification vigo prototype accessed acis ufl edu courtesy accounts available 
clients servers applications 
resulting grid virtual file system gvfs utilizes user level proxies dynamically map short lived user identities allocated middleware behalf user furthermore data transfer gvfs demand transparent user 
supporting unmodified applications gvfs inherently support implementations different flavors vm technologies including commercial open source designs vmware uml xen 
vm state data large size remote accesses high latencies extensions grid virtual file system necessary improve performance environment 
extensions proposed illustrated described remaining section 
extensions oriented file system sessions established vm transfers generally applicable tied particular vm implementation 

extensions support vm transfer 
disk file system caches 
caching classic successful technique improve performance computer systems exploiting temporal spatial locality providing high bandwidth low latency access cached data 
nfs protocol allows results various nfs requests cached nfs client 
memory caching generally implemented nfs clients disk caching typical 
disk caching especially important context distributed file system overhead network transaction high compared local access 
large storage capacity disks implies great reduction capacity conflict misses 
complementing memory cache disk cache form effective cache hierarchy 
implementations distributed file systems exploit advantages example afs transfers caches entire files client disk supports disk caching nfs blocks 
designs require kernel support able employ user application caching policies 
contrast gvfs extended employ client side proxy managed disk cache unique way user level proxies customized user application basis 
instance cache size write policy optimized knowledge grid application 
concrete example enabling file disk caching meta data handling application tailored knowledge support heterogeneous disk caching section 
proxy cache deployed systems native kernel support disk caching linux 
proxy behaves server receiving rpc calls client buffer kernel cache banks computer server proxy proxy file cache proxy extensions vm image transfers 
compute server vm monitor issues system calls processed nfs client 
requests may hit memory file systems buffer processed user level proxy 
proxy requests hit block disk cache file disk cache matching stored meta data satisfied locally proxy misses forwarded ssh tunneled rpc calls remote proxy kernel server satisfied data server 
issuing rpc calls possible establish virtual file system forwarding chain multiple proxies 
addition server side proxy responsible authenticating requests mapping identities proxy started client side establish manage disk caches illustrated 
furthermore series proxies independent caches different sizes cascaded client server supporting scalability multi level cache hierarchy 
disk caching gvfs implemented file system proxy operates granularity nfs rpc calls 
cache structured way similar traditional block hardware designs disk cache contains file banks hold frames data blocks cache tags stored 
cache banks created local disk proxy demand 
indexing banks frames hash requested nfs file handle offset allows associative lookups 
hashing function designed exploit spatial locality mapping consecutive blocks file consecutive sets cache bank 
caches different proxies independently managed may configured different sizes data block sizes nfs protocol limit kb 
design allows different proxies share disk caches read data 
gvfs proxy disk cache supports write back policy write operations important feature wide area environments hide long write latencies 
write back caching applied vms grid computing different ways 
supports write back persistent virtual disks transparently complements kernel level buffering application level write back schemes high capacity storage 
support wan firewall image server nfs server write back redo logs non persistent disks vms may migrated grid resources 
typically kernel level nfs clients geared local area environment implement write policy support staging writes limited time kernel memory buffers 
kernel extensions support aggressive solutions long term high capacity write back buffers undertaken nfs clients aware existence potential sharing clients maintaining consistency scenario difficult 
write back proxy cache described leverages middleware support implement session consistency model higher abstraction layer supports signals middleware controlled writing back flushing cache contents 
model middleware driven consistency assumed sufficient support grid applications tasks known independent scheduler high throughput computing condor 

meta data handling extension gvfs handling meta data information 
main motivation middleware information generate meta data certain categories files knowledge grid applications 
gvfs proxy take advantage meta data improve data transfer 
proxy receives nfs request file meta data associated processes meta data takes described actions file accordingly 
current implementation meta data file stored directory file associated special filename easily looked 
meta data contain data characteristics file associated define sequence actions taken file accessed 
example resuming vmware vm requires reading entire memory state file typically hundreds mbytes 
transferring entire contents file time consuming application tailored knowledge memory state file pre processed generate meta data file specifying blocks memory state zeros 
memory state file requested client side proxy processing meta data service requests zero filled blocks locally request non zero blocks server reconstruct memory state vm monitor 
normally memory state contains zero filled blocks filtered technique traffic wire greatly reduced instantiating vm 
instance resuming mb ram redhat vm suspended post boot state client issues nfs reads filtered technique 
example gvfs meta data handling capability help transfer large files enable file disk caching 
inherited underlying nfs protocol data transfer gvfs demand block block typically kbytes size allows partial transfer files 
applications benefit property especially working set accessed files considerably smaller original sizes files 
example accesses virtual disk classic vm typically restricted working set smaller large virtual disk file 
large files completely required client application remotely stored memory state file requested vmware resume vm block data transfer inefficient 
grid middleware speculate advance files entirely required knowledge application generate meta data gvfs proxy expedite data transfer 
actions described meta data compress remote copy uncompress read locally means referred file accessed client fetching file block block server proxy compress file server gzip remote copy compressed file client gsi enabled scp uncompress file cache gunzip generate results request locally cached file 
file cached requests file satisfied locally 
file cache support write back includes similar steps compressing uploading 
proxy effectively establishes demand fast file data channel secure employing ssh tunneling data transfer addition traditional block nfs data channel file cache complements block cache gvfs form heterogeneous disk caching scheme 
key success technique proper speculation application behavior 
grid middleware able accumulate knowledge applications past behaviors intelligent decisions knowledge 
instance vmware entire memory state file required image server vm resumed compute server highly compressible technique applied efficiently expedite transfer memory state file 

support persistent non persistent grid vms vms deployed grid different kinds scenarios pose different requirements data management distributed virtual file system 
scenario grid user allocated dedicated vm persistent virtual disk image server 
suspended current state user leaves resumed user comes user may may start computing sessions server 
session starts vm efficiently instantiated compute server session finishes modifications vm state user executions efficiently reflected image server 
extended gvfs support scenario meta data handling quickly restore vm checkpointed state demand block access pattern virtual disk avoid large overhead incurred downloading uploading entire virtual disk proxy disk cache exploit locality virtual disk provide high bandwidth low latency access cached file blocks write back caching effectively hide latencies write operations perceived user typically large wide area environment submit modifications user line session idle 
scenario image server stores number non persistent vms purpose cloning 
generic images application tailored hardware software configurations vm requested compute server image server searched requirements desired vm 
best match returned golden image cloned compute server 
cloning process entails copying state golden image restoring checkpointed state setting clone customized configurations 
new clone comes life computing start vm modifications original state stored form redo logs 
data management scenario requires efficient transfer vm state image server compute server efficient writes redo logs checkpointing 
similar scenario extended gvfs quickly instantiate cloned vm meta data handling memory state file demand block access virtual disk files 
copying entire virtual disk symbolic links virtual disk files compute server 
computation starts proxy disk cache help speedup access virtual disk cache warm write back help save user time writes redo logs 
differentiation scenario small set golden images instantiate clones concurrent execution high throughput task 
proxy disk cache exploit temporal locality cloned instances accelerate cloning process 
compute server cached data memory state virtual disk previous clones greatly expedite new golden images 
second level proxy cache setup lan server explained section exploit locality provide high speed access state golden images compute servers local network 

performance 
experimental setup prototype approach discussed built implementation middleware controlled user level file system proxies 
core proxy code extended support private data channels client side disk caching meta data handling 
section evaluates performance supporting vm grids analyzing data experiments group benchmarks 
experiments conducted local area wide area environments 
lan image server dual processor ghz pentium iii cluster node gb ram gb disk storage 
wan image server dual processor ghz pentium iii cluster node gb ram gb disk 
experiments application execution section compute server ghz pentium iii cluster node gb main memory gb scsi disk experiments vm cloning section compute servers cluster nodes ghz xeon processors gb ram gb disk 
compute servers installed vmware gsx server support vms 
connected lan image server mbit ethernet university florida connected wan image server abilene northwestern university university florida 
proxy cache configured file banks way associative capacity gbytes typically cache experiments 

experiments application execution 
benchmarks scenarios benchmarks selected evaluate performance run time execution typical applications taken spec high performance group benchmarks 
consists phases phase generates large trace file disk phase involves intensive seismic processing computations 
benchmark tested sequential mode small dataset 
models scientific application intensive compute intensive 
latex benchmark designed model interactive document processing session 
generation pdf portable document file version page document edited latex 
runs latex bibtex programs sequence iterates times time different version latex input files generated patch command 
worth emphasized vm grid execution environment allows users customize execution environment application encapsulate virtual state replicate distributed resources means dynamic instantiation vm copies 
users vm grid provided interactive environment customize vms middleware capable archiving replicating instantiating environments available physical resource capable supporting vms 
environment important interactive sessions vm setup show response times grid user 
latex benchmark chosen study scenario 
kernel compilation represents file system usage software development environment similar andrew benchmark 
kernel red hat linux compilation consists major steps dep modules modules install involve substantial reads writes large number files 
execution times benchmarks vm mb ram gb virtual disk vmware plain disk mode installed linux red hat benchmark applications data sets measured scenarios local vm state stored local disk file system 
lan vm state stored directory nfs mounted lan image server 
data access forwarded gvfs proxies ssh tunnels 
wan vm state stored directory nfs mounted wan image server 
data access forwarded gvfs proxies ssh tunnels 
wan setup wan scenario client side proxy disk caching enabled 

results analysis experiments initially setup cold caches kernel buffer cache proxy disk cache un mounting mounting virtual file system flushing proxy caches execution 
shows execution times phases 
performance compute intensive part phase range scenarios 
results intensive part phase shows large difference wan wan scenarios faster factor 
benefit write back policy evident phase large file input phases created 
proxy cache brings total execution time percent wide area environment 
latex benchmark results show wide area environment interactive users experience startup latency seconds wan seconds wan 
overhead substantial compared local lan execute iteration seconds 
start overhead scenarios smaller experience entire vm state downloaded image server session seconds 
subsequent iterations kernel buffer help reduce average response time wan scenario seconds 
proxy disk cache improve average response time wan scenario close local slower lan slower scenarios faster non cached wan scenario 
time needed flush cached dirty blocks write back enabled seconds shorter uploading time seconds entire state 
experimental results kernel compilation benchmark illustrated 
run benchmark wan scenario begins cold local lan wan wan phase phase phase phase benchmark execution times minutes seconds 
results show times execution phase 
caches shows overhead compared local scenario 
second run warm caches help bring overhead 
compared second run lan scenario slower 
availability proxy cache allows wan outperform wan percent 
latex case data show overhead experienced environment program binaries datasets partially re iterations application development environments response times wan mounted virtual file system acceptable 

experiments virtual machine cloning 
benchmark scenarios benchmark designed investigate performance gvfs support cloning vms 
cloning scheme discussed section includes copying vm configuration file copying vm memory state file building symbolic links virtual disk files configuring cloned vm resume new vm 
execution time benchmark measured different scenarios local vm images stored local disk file system 
wan vm images stored directory nfs mounted wan image server 
experiment single vm image cloned times compute server sequentially 
supported gvfs extensions including private data channels proxy disk caching meta data handling 
designed evaluate performance temporal locality 
wan setup wan different images cloned computer server sequentially 
designed evaluate performance locality 
iteration mean iterations total local lan wan wan latex benchmark execution times seconds 
execution times iteration average execution times iterations total execution times listed 
run second run local lan wan wan local lan wan wan dep modules modules install kernel compilation benchmark execution times hours minutes 
results show times different phases 
results consecutive runs benchmark run buffer proxy cache cold second run warm 
wan setup wan lan server provides second level proxy disk cache compute server 
different images cloned new compute server pre cached lan server due previous clones computer servers lan 
setup designed model scenario temporal locality vms cloned compute servers lan 
wan vm images stored directory nfs mounted wan image server computer servers nodes cluster 
experiment vm images cloned compute servers parallel 
supported gvfs extensions 

results analysis shows cloning times sequence vm images mb memory gb virtual disk 
comparison range gvfs cloning times shown figures vm cloned scp full file copying takes approximately minutes transfer entire image 
vm state copied read pure nfs mounted directory cloning takes half hour block transfer memory state file slow 
enhanced gvfs proxy disk caches meta data support compress gzip transfer scp vm memory state greatly speed cloning process seconds 
furthermore temporal locality access memory state virtual disk files local wan wan wan vm cloning times seconds sequence images mb memory gb virtual disk 
takes seconds copying image entirely scp 
copying memory state accessing virtual disk directory mounted image server gvfs support takes seconds clone vm 
clones proposed solution allows cloning performed seconds data cached local disks seconds data cached lan server 
table compares sequential cloning parallel cloning 
experiment wan scenario compute servers share single image server server side gvfs proxy 
start parallel client side gvfs proxy compute server spawns file data channel fetch memory state file demand 
speedup parallel cloning versus sequential cloning caches cold caches warm 
scenarios support gvfs demand transparent user vm monitor 
demonstrated section machine instantiation cloning gvfs improve vm run time performance substantially 
table total time cloning vm images wan wan caches kernel buffer cache proxy block cache proxy file cache cold warm 
total time caches cold total time caches warm wan seconds seconds wan seconds seconds 
related data management solutions gridftp gass provide apis applications programmed access data grid 
legion employs modified nfs server provide access remote file system 
condor system kangaroo utilize remote mechanisms implemented bypass mechanisms rely system call trapping dynamic library linking allow applications access files library approach movement vm images taken 
library approaches statically linked software 
nest software grid storage appliance supports nfs protocol restricted subset protocol anonymous accesses supported solution integrate unmodified nfs clients 
contrast solution allows unmodified applications access grid data conventional operating system clients servers 
self certifying file system sfs example file system uses proxies forward nfs protocol calls implement cross domain authentication encryption 
approach differs sfs ways 
key difference approach employs dynamically created user file system proxies allowing middleware controlled caching policies write back vs write user basis setup multiple levels proxy caching 
contrast sfs employs single proxy server multiple users 
nfs protocol includes provisions aggressive caching 
implementations deployed grid setups implementations versions protocol available wide variety platforms 
related project investigated solutions improve performance migration classic vms 
focuses mechanisms transfer images virtual desktops possibly low bandwidth links 
common approach mechanisms demand block transfers optimizations observation zero filled blocks common suspended vm memory images 
key difference lies fact techniques independent applications implemented interception nfs rpc calls reusing clients servers available typical grid resources approach uses modified libraries means intercepting vmm accesses files employs customized protocol 

grid computing classic virtual machines promises capability provisioning secure highly flexible computing environment users 
achieve goal important grid middleware provides efficient data management service vms vm state user data 
shows user level techniques build top de facto distributed file system implementations provide efficient framework purpose 
techniques applied vms different kinds long monitor allows state stored file systems mounted nfs 
results show user level proxy caches improve performance conventional nfs wide area network 
results show warm caches enhanced file system leverages native support buffer caches small overhead compared local disk file system 
results show demand transfers meta data information allows instantiation mb ram gb disk linux vm clone seconds clone seconds subsequent clones considerably outperforming cloning transfer entire files non enhanced nfs 
directions include distributed virtual file system support efficient checkpointing migration vm instances load balancing fault tolerant execution dynamic profiling application data access behavior support pre fetching high bandwidth transfers large data blocks selective manner protocols gridftp inter proxy transfers 
effort sponsored national science foundation eia eec aci nsf middleware initiative nmi collaborative ani 
authors acknowledge gift vmware sur ibm 
opinions findings recommendations expressed material authors necessarily reflect views nsf ibm vmware 
authors peter dinda northwestern university providing access resources 
foster kesselman tuecke anatomy grid enabling scalable virtual organizations 
international supercomputer applications 
butt kapadia figueiredo fortes grid computing portals security issues journal parallel distributed computing pp 

robert goldberg 
survey virtual machine research 
ieee computer magazine 
figueiredo dinda fortes case grid computing virtual machines proc 
international conference distributed computing systems icdcs may 
figueiredo kapadia fortes 
punch virtual file system seamless access decentralized storage services computational grid proc 
ieee international symposium high performance distributed computing hpdc august 
pawlowski smith hitz nfs version design implementation proc 
usenix summer technical conference 

lim virtualizing devices vmware workstation hosted virtual machine monitor proceedings usenix annual technical conference june 
dike user mode port linux kernel proc 
th annual linux showcase conference usenix association atlanta ga october 
barham fraser hand harris ho neugebauer pratt warfield xen art virtualization proceedings acm symposium operating systems principles sosp october 
chandra pfaff chow lam rosenblum optimizing migration virtual computers proceedings th symposium operating systems design implementation 
chawla figueiredo fortes zhang zhao zhu zhu 
virtualized resources virtual computing grids vigo system appear generation computing systems special issue complex problem solving environments grid computing david walker elias houstis editors 
allcock chervenak foster kesselman tuecke 
secure efficient data transport replica management high performance data intensive computing ieee mass storage conference 
foster kesselman tuecke gass data movement access service wide area computing systems proc 
th workshop parallel distributed systems may 
kapadia figueiredo fortes enhancing scalability usability computational grids logical user accounts virtual file systems proceedings heterogeneous computing workshop hcw international parallel distributed processing symposium ipdps april 
figueiredo fortes single sign vigo role access delegation mechanisms short lived user identities appear proc 
international parallel distributed processing symposium ipdps april 
callaghan nfs illustrated addison wesley 
hennessy patterson computer architecture quantitative approach rd edition morgan kaufmann 
zhao proxy managed disk cache grid virtual file system 
technical report tr acis acis laboratory department electrical computer engineering university florida 
litzkow livny mutka condor hunter idle workstations proc 
th int 
conf 
distributed computing systems pp june 
deelman griphyn ligo building virtual data grid gravitational wave scientists proceedings high performance distributed computing hpdc 
kapadia fortes punch architecture web enabled wide area network computing cluster computing journal networks software tools applications sept 
figueiredo vp gfs architecture virtual private grid file systems 
technical report tr acis acis laboratory department electrical computer engineering university florida 
howard kazar menees nichols satyanarayanan sidebotham west scale performance distributed file system acm transactions computer systems february 
white grimshaw nguyen grid file access legion model proc 
th ieee int 
symp 
high performance distributed computing hpdc pp aug 
thain 
son livny kangaroo approach data movement grid proc 
th ieee int 
symp 
high performance distributed computing hpdc pp aug 
bent leroy roy stanley arpaci dusseau arpaci dusseau livny flexibility manageability performance grid storage appliance proceedings eleventh ieee symposium high performance distributed computing edinburgh scotland july 
mazieres kaminsky kaashoek witchel separating key management file system security proc 
th acm symposium operating system principles sosp dec 
pawlowski beame callaghan robinson nfs version protocol proc 
nd intl 
system administration networking sane conference may 
