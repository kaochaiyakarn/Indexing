making modeling languages fit model driven development thomas hne darmstadt university technology germany informatik tu darmstadt de 
position statement argue modeling languages aspire model driven development context fulfill requirements traditional notations primarily solution sketching 
enumerate requirements evaluate extent addressed uml suggest uml enhanced order modeling language adequately supports model driven development 
model driven development mdd embodies idea raising level abstraction artifacts intended instruct computer hardware 
requiring developers think specify programming language level level abstraction afforded java allowed ways specifying solution 
conceptually notion model driven development just continuation age old computer science trend increase productivity programmers offering increasing number ways raise level abstraction programs 
fact generation programming languages general visual notation traditionally called modeling languages just coincidental details particular step programming language evolution 
likewise yielding advantages regarding platform independence feature marketing mdd just particular incarnation age old idea preferring problem oriented specifications addressing question 
realizations addressing question 
obviously modeling language hitherto successfully sketching solutions automatically suitable support mdd 
enabling developers create high level artifacts free solution oriented details automatically compiled machine code typically involving intermediate steps requires typical modeling languages uml currently offer 
mdd language requirements attempt exhaustive list requirements mdd language 
particular examine number requirements considered basic 
basic requirements language ii way ascertain sentences language formed 
possibility assign precise meaning formed sentences language 
property various partial specifications diagrams match coherent complete model 
means constructively describe structure behavior parts specification declarative descriptions automatically turned constructive descriptions 
adherence basic rules semiotics regarding concrete notation 
short modeling language support mdd fulfill basic requirements programming language 
standards vs domain specific approaches note require language standard semantics 
fact maintain uml property open interpretation aspects absence complete formal specification deliberate called semantic variation points feature uml bug significantly aiding widespread adoption 
restrictive meaning notation users choose favorite interpretation 
increasing popularity dsl dsm approaches utility language concepts semantics tailored particular domain 
choice tailored concepts concrete notation certainly success factor dsls ability define individual formedness rules semantics identical notation surely great importance 
general attractive individual developers small groups tool optimally tailored problem domain 
larger group size big organization struggle inherent disadvantage approach artifacts expressed highly domainspecific notation highly domain specific concepts unreadable invested effort learning domain specific language 
larger community certainly level multi lateral communication value obtain languages standardized notation semantics 
unfortunately possible cake optimal language eat universally understood 
section describes approach balances forces specificity dilemma 
discuss issue addressing organization specifications issues addressing absence traces solution oriented information problem oriented artifacts 
seemingly different issues common aim providing developers higher levels abstraction 
raising level abstraction soon models longer sketches intentionally leave lot required opposed derivable supplementary detail larger manageable 
implies need better means structuring handling large models way solve specification decomposition problem 
domain model types ct name pc standard processor ghz name string model instances processor string size string mt name flat size domain types description pattern product computer monitor item computer fig 

representing types objects monitor domain instances second order solution independent immune changes choice realization strategies models avoid polluting traces choices 
pollution easily occurs model annotated information intended guide transformations 
called marks chosen relate solution oriented information indicating name transformed string characters contaminate problem oriented model information consequently immune changes related solution technology 
problem appears worst form marks imple iii pattern artifacts iv mented modeling language features effectively constitute inseparable parts model stereotypes tagged values 
exists manages overlay marks model transparency sheet correspondence model elements marks established create maintenance issue case model solution technology changed 
summary facing polluting transformation phenomenon 
third source model pollution limitations solution technologies silently carried level problem specifications questioned 
limitation traditional restriction object oriented paradigm logical levels featuring types instances 
shows design computer hardware product hierarchy inspired example engels illustrate state art modeling uml 
design fig 
uses item description pattern known type object documents common developers practice supporting dynamic type level ordinary object oriented programming language 
types ct added removed dynamically represented objects play role types objects 
leads number problems numerous listed notice lot provided language support object creation individual constructors dynamic dispatch emulated 
note domain instances types represented objects domain represented classes see circular labels 
additional machinery required uml supported instantiation ct instantiation ct inevitable consequence level paradigm accommodate level problem 
said model fig 
meant model solution regarded problem oriented specification regarded featuring accidental complexity 
section describes version model feature additional accidental complexity caused modeling paradigm suffers level limitation 
uml shortcomings solutions specificity dilemma mentioned subsection addressed languages constructed start standardized language incrementally specific problem domain necessary specific 
strategy provides developers optimally adapted language preserving maximum amount universal communication possible 
uml similar answer specificity dilemma idea family languages long time managed support profile mechanism limited weak stereotype concept 
uml wants represent best worlds modeling standard needs small language intended building large modeling libraries unified modeling library sense approach described griswold programming languages 
package combination operators mof hitherto incrementally specifying uml basis number systematic customization operators 
specification decomposition problem addressed powerful techniques refinement hierarchical structuring 
provide simplified versions complex artifacts architecture stratification organize artifact principle aggregation exemplified hood method 
techniques exclude effectively conjunction 
uml added support hierarchical decomposition version offers meager support refinement 
needs improve areas order full size mdd models manageable 
polluting transformation phenomenon addressed providing guidance transformations categorizing model elements way need transformed manner refers problem oriented properties elements 
decorating elements pieces information ejb session bean ejb entity bean categories transaction item 
transformation directly knows map categories may consult dictionary provides mapping problem oriented solution oriented categories 
note way mapping sensitive changes regarding transformation class elements items contrast marking approach immune level individual model elements 
level limitation easily lifted allowing developers logical modeling levels wish 
shows corresponding version model fig 

note fig 
modeling levels instances types align domain instances types respectively 
consequently instantiation chain formed elements circular labels involves single way representing instantiation model fig 
uses uml instantiation user modeled form instantiation 
fig 
uml instantiation relationships ontological interpretation fig 
relationships domain instances uml classes linguistic interpretation instantiation relationships domain types uml classes ontological 
short model fig 
successfully avoids accidental complexity introduced model fig 

expect fig 
model transformed fig 
model proceeding problem specification solution expressed framework level limitation regard model fig 
faithful representation problem domain 
allowing users model levels straightforwardly achieved orthogonal classification architecture infrastructure proposal cleanly separates linguistic ontological dimensions instantiation supporting arbitrary number ontological levels 
infrastructure ideal choice linguistic instantiation occurs elements language usage model elements elements language definition metamodel elements 
vi model model types processor string ct name pc standard processor ghz model instances computer name string size string mt name flat size monitor fig 

user modeling levels supporting concept unified modeling library suggested section 
furthermore expressive way equip type model problem oriented category markers see paragraph polluting transformation phenomenon model elements instances domain shown fig 

position statement focussed number shortcomings associated today modeling languages particular uml 
claimed specificity dilemma specification decomposition problem polluting transformation phenomenon level limitation prevent today modeling languages opti domain instances domain types domain mally supporting mdd 
long sufficiently address issues severely hamper success mdd restrict application areas disadvantages applicable tolerated 
interestingly conjunction concept unified modeling library orthogonal classification architecture addresses aforementioned shortcomings 

atkinson hne 
aspect oriented development stratified frameworks 
ieee software january february 

atkinson hne 
uml infrastructure 
acm transactions modeling computer simulation oct 

atkinson hne 
concepts comparing modeling tool architectures 
briand editor proceedings acm ieee th international conference model driven engineering languages systems models uml pages 
springer verlag oct 

atkinson hne 
tour language customization concepts 
zelkowitz editor advances computers volume chapter 
academic press elsevier june 

atkinson hne 
reducing accidental complexity domain models 
journal software systems modeling appear doi 

brooks 
silver bullet essence accidents software engineering 
computer 

broy 
compositional refinement interactive systems modelled relations 
lecture notes computer science 

coad 
object oriented patterns 
communications acm sept 

cook kleppe mitchell rumpe warmer wills 
defining uml family members 
meyer editors proceedings technology object oriented languages systems tools pacific 
ieee computer society 

engels heckel th ne 
process modeling uml 
dumas van der aalst ter hofstede editors process aware information systems pages new york 
wiley publishing 

griswold wolski baden fink kohn 
programming language requirements millennium 
acm computing surveys es 

johnson woolf 
type object 
martin riehle buschmann editors pattern languages program design pages 
addison wesley 

hne 
matters meta modeling 
journal software systems modeling 

omg 
mda guide version 
version omg document omg 

omg 
unified modeling language superstructure specification version omg document formal 

omg 
meta object facility mof core specification 
omg document formal 


rosen 
hood industrial approach software design 
isbn 
vii 
