template composition semantic web services sirin parsia james hendler cs umd edu isr umd edu hendler cs umd edu mindswap research group university maryland college park md usa workflow templates necessary various different web service related tasks encoding business rules application specifying domain knowledge scientific grid application defining preferences users interact web services 
activities templates specify features required service service discovered generate executable workflows 
examine web ontologies write template descriptions allow flexible matchmaking services 
discuss importance expressing preferences templates provide ranking algorithm dl inference services 
htn dl formalism extension htn planning formalism generate compositions web services templates 
experimental evaluation composition system proposed 
web services emerging paradigm loosely coupled software components published located invoked web parts distributed applications 
main focus web services effort achieve interoperability heterogeneous decentralized distributed applications 
dynamic integration web services fulfill requirements task hand important objectives 
workflow templates web service composition provides means achieve functionality 
workflow template describes outline activities need performed solve problem 
generally templates parameterized respect variables generic template configured customized specific instance problem users current requirements preferences 
perspective composition realized different systems htn planning web services sirin golog generic procedures mcilraith son configuration parametric design van harmelen wielinga 
copyright american association artificial intelligence www aaai org 
rights reserved 
workflow templates useful domains applications 
example applications business rules encoded templates 
steps business process fixed 
partners transaction chosen run time depending specific request hand 
similarly grid applications workflows represent standard procedures accomplishing task exact services resources specific instance task may vary 
various considerations workflow template written web services 
activities workflow may bound existing concrete service design time activities may defined terms descriptions matched available concrete services run time 
hand want descriptions generic relevant services execution time 
hand want features fixed possible matches integration execution dynamically discovered service automatically accomplished human intervention 
service descriptions able specify preferences template generator matching services ranked selected preferences run time 
investigate workflow templates written describe expressive flexible compositions 
mainly motivated problem template instantiation finding concrete services constitute valid execution original workflow 
doing focus workflows controlled single party words looking templates oriented web service orchestration choreography 
web service orchestration language focus owl owl coalition mature probably widely deployed comprehensive semantic web service technology 
remaining highlight important features related describing workflow templates discuss owl extended define templates 
describe algorithms matching ranking potential services descriptions show combine htn planning formalism generate compositions web services 
motivating examples illustrate couple real world examples motivation proposed solutions clearer 
staring point consider problem obtaining books web 
various online stores sell new books book rental clubs subscribers check books time libraries books borrowed 
services typically published web service registry uses technology uddi 
web service registries store information web services businesses provide service taxonomy categorization available services 
shows portion categorization book selling services 
category taxonomy different web services registered 
services different structures different interaction models 
services may involve single message exchange send order request credit card information delivery address 
services may complicated structures create new account login existing account add items shopping cart proceed checkout 
simple ontology describes book related services extension standard setting publish discover workflow templates 
example conference organizer provide workflow template describes steps making travel arrangements conference 
template describe steps register conference arrange transportation conference venue hotel reservations possibly register additional events provided conference 
conference organizer may want specify exact hotel travel agent service template 
template just describes services wants template concrete services selected user input 
users pre defined workflow templates customized needs transac tion amount spent converted certain currency expenses recorded user financial software 
templates generated semi automated composition tool sirin parsia hendler saved previous similar transaction generated workflow mining techniques van der aalst 
goal template composition find sequence services valid execution workflow template 
note generalized version workflow instantiation problem considering recursive decomposition templates step template achieved template needs decomposed steps workflow considered isolation conference example want buy plane tickets reserve hotel room 
required executability plan considered possibly looking different choice points workflow choose traveling train plane tickets 
workflow templates workflow specifies activities need done order linearly parallel accomplish certain task 
execution ordering activities defined different constructors permit flow execution control sequence loop concurrency 
workflow specifies control flow details data flow parameters activity data carried activity 
workflows general describe real world activities carried humans focus workflow web services atomic concrete activity defined web service 
workflow template generalized workflow steps defined activities 
course various different ways define service 
idea fix step workflow design time ability discover substitute services run time 
template suitable dynamic environment available services task requirements constantly changing 
straight forward way define service notion interface provided wsdl 
similar interfaces programming language wsdl interface defines operation functional signature execution detail 
service implements interface guaranteed safely run time 
approach provide flexibility service provides functionality different interface 
furthermore template need ability specify preferences possible matches execution time ranked selected 
preferences include choices restrictions concrete service place process services certified authority service adhere required security privacy policies try find non fee services fee service choices available choices defined global service custom template element step require additional encryption 
templates owl owl owl coalition set ontologies written web ontology language owl dean schreiber describing web services 
owl ontology includes primary sub ontologies service profile process model grounding 
profile describe service capabilities defined inputs outputs preconditions effects qualitative properties quality service provided security guarantees process model describes pattern interaction web service grounding defines execution details web service linking process definition wsdl operation 
owl process ontology quite extensive orchestration language provides control flow elements perform sequence order choice iterate repeat repeat 
owl built processes constructs data flow components 
processes internal structure internals hidden defined 
owl control construct describe processes flexible way 
construct originally envisaged similar purpose latest release owl version construct quite specified 
technical overview states primarily designed provide view existing atomic composite process 
mainly concrete process corresponds view known priori design time 
importantly process description owl able refer profile descriptions 
profile description include information various different aspects information service provider rankings associated service 
information required differentiate candidate services finding best possible choice 
extensions owl solution problems new process type named define functional requirements input output types annotate perform control construct preference descriptions 
separation allows reuse different preferences different contexts 
similar atomicprocess description inputs outputs preconditions effects 
difference connected specific profile grounding description 
links existing processes 
perform construct ordinary process 
allows partially templates sequence step concrete atomicprocess executable second step needs instantiated 
example describes sells books accepts credit cards visa mastercard 
define process inputs books book loc address payment outputs receipt result owl class owl oneof visa mastercard preference descriptions added perform description additional statements 
base preferences combined partial ordering defines prioritization preferences specifying preference important 
describe preference schema inspired preference xpath kie ling query language designed encode various selection conditions commerce applications 
simplest form base preference says profile sought service belong class service ontology 
class restricted named concept ontology 
ordinary owl constructs conjunction owl intersectionof disjunction owl unionof negation owl describe complex descriptions 
example prefers profiles 
pref pref profile owl class owl intersectionof owl unionof owl preference defined certain attributes profile 
attributes owl described extensible set 
defined values restricted class numerical 
example average response time milliseconds service defined parameter takes integer values 
preferences numerical values get minimum maximum values prefer services minimum average brevity process descriptions written owl presentation syntax ontological definitions syntax 
formats easily translated verbose rdf xml syntax 
response time maximum reliability metric 
preferences expressed follows pref pref 
pref pref 
preferences combined cumulation treats preference equally important prioritization treats preferences important 
cumulation prioritization forms partial order complex preferences applied orthogonally 
pref pref preference pref preference pref pref preference preferences attached perform statement specify preferences process follows perform process multiple preferences perform simply treated elements prioritization assumed 
preferences performs 
matching ranking perform statement description preferences want find matching concrete services order possible choices preferences 
exploit standard reasoning services computing possible matches deciding service satisfies preferences 
subsumption relations defined ontologies allow generate flexible matches 
reduce matching functional attributes inputs outputs preconditions effects query containment 
process description generate queries input requirements output requirements 
expression inq denotes input requirement conjunction atoms precondition expression input type restrictions 
similarly output requirement expression conjunction atoms effect expression output type restrictions consider example defined previous section 
get expressions consider conditional effects conjunctions atoms outputs inq book address receipt concrete process matches process inq inq query containment relation 
formally query contained answers included answers 
relation concrete process ensures conditions precondition service true precondition concrete service true effects concrete service applied effects satisfied 
easy see precondition effect expressions associated process matching algorithm reduces standard techniques developed semantic web service matchmaking paolucci li horrocks simply checks subsumption relation parameter types 
second step matching compute rank services preferences 
adopt standard rank computation methods multi attribute decision problems 
preferences different attributes treated equally important known pareto optimality principle avoids empty result effect flooding effect 
prioritization preferences applied orthogonally rank possible matches 
htn dl extended htn formalism hierarchical task network htn planning web service composition sirin example composition approach 
htn planning problem formulated terms tasks accomplished task represents activity 
task defined name number parameters types associated parameters 
tasks hand matched method descriptions prescription decompose task subtasks 
operators single step atomic actions internal structure 
tasks accomplished operators named primitive tasks 
htn planning problem starts tasks methods matched tasks recursively decomposed step reduced operator detailed description htn planning reader referred ghallab nau traverso 
resulting plan sequence operators 
htn view planning fits naturally composition owl services composite owl processes directly translated htn method descriptions atomic processes modeled operators 
shown sirin process automated web services described owl 
possible htn planning directly kinds process descriptions explained 
notion task htn planning aligns concept htn planning assumptions restricted 
htn task specific type activity information associated name number parameters 
way associate preferences possible decompositions 
example consider activity preference specifies category 
service hierarchy implies service belongs categories acceptable 
expressive htn task descriptions needed represent preferences related taxonomies 
different services may different kind vocabularies ontologies describe functionality 
possible easily establish infer similarities descriptions 
htn planning strict separation primitive tasks impossible say composite service atomic service achieves task 
words task established method operator means task primitive consider example single step book buying service vs multi step book buying service 
operator primitive task symbols unique operator accomplishes primitive task 
clearly assumption restricted web services different atomic web services accomplish task 
task symbols operators names separate entities order overcome limitation 
precondition effects owl expressed dialect owl fairly expressive kr language open world assumption 
expressivity directly handled existing htn planners allows axiomatic inference 
describe htn dl extends htn formalism overcome problems 
htn dl tasks methods operators main idea htn dl separate task descriptions method operator definitions 
advantages separation 
tasks described completely different expressive language 
second tasks completely structure primitive task notion 
note primitive actions operators methods 
components htn dl domain 
component describes planning domain contains operator method descriptions 
second component description logic dl knowledge base contains task preference descriptions 
components called htn component dl component respectively 
chose description logic knowledge representation language due direct correspondence dls owl 
owl viewed expressive description logic owl ontology equivalent description logic knowledge base 
dl knowledge base typically comprises components tbox abox 
tbox contains intensional knowledge form terminology abox contains extensional knowledge specific individuals domain discourse 
owl facts type assertions property assertions individual equality inequality corresponds abox assertions owl axioms subclass axioms subproperty axioms domain range restrictions correspond tbox knowledge 
htn dl operators methods defined htn component follows definition htn dl operator htn dl operator described name dl pre dl effects dl profile similar original htn operators 
name syntactic expression 
xn operator name 
xn input parameters 
dl pre dl effects expressions consist possibly abox atoms describing preconditions effects action respectively 
dl profile refers instance dl component describes non functional aspects operator similar owl profile 
definition htn dl method htn dl method tuple name dl pre network dl profile name dl pre dl profile defined 
network set htn dl tasks partial ordering tasks describes method decomposed smaller steps 
note owl processes htn dl operators methods types associated parameters 
typed variables merely syntactic sugar expressed preconditions adding atoms conditions referred knowledge preconditions 
tasks descriptions divided parts 
functional description task parameters preconditions effects described htn component preference description base preferences ordering relations described dl component 
definition htn dl task htn dl task described name dl pre dl effects dl preferences name dl pre dl effects defined dl preferences refers preference description dl component 
definition htn dl task ontology task ontology dl knowledge base profiles actions preferences related tasks defined 
dl knowledge typically contains profile hierarchy subclass relations service categories 
preferences described respect dl profiles actions 
note elements htn dl close relationship extended version owl described previous sections 
main advantage representing services htn dl compared just htn ability refer profiles services addition process descriptions 
preference descriptions profiles stored dl component means directly owl definitions translation 
planning domain htn dl defined follows definition htn dl domain htn dl domain triple list operators list methods task ontology 
htn dl algorithm briefly describe htn dl formalism extension htn planning task descriptions task matching done owl dl ontologies 
idea keep previous translation algorithm encode owl processes htn methods leave matching activities owl dl reasoner 
dl reasoner handles evaluation preconditions simulates effects services 
procedure htn dl empty return empty plan task predecessors match rank operator re effects re return failure applying effects removing return htn dl method re network re return failure replacing network return htn dl htn dl htn dl planning procedure 
htn dl planning procedure see operates similarly htn algorithm spirit 
main difference htn dl algorithm task matching mechanism 
function match rank nondeterministically returns matching actions task order specified preferences 
plan generated selected action planning algorithm backtrack select available actions 
implementation evaluation initial attempt investigate applicability ideas implemented htn dl algorithm extending planner java version htn planner shop nau owl dl reasoner pellet pellet 
wanted investigate different points experiments integrated system compare original planning system new task matching ranking mechanism scale large comparison htn dl system number services complex ontologies 
ran experiments windows machine pentium ghz cpu mb memory 
objective experiment see overhead dl reasoner evaluating preconditions effects services compared original planning system state world represented simply relational database 
order planning problem run systems took standard planning problem rover domain international planning competition fox long encoded domain dl similar described sirin parsia 
different problems increasing complexity ran systems times problem computed average time spent shows logarithmic scale total planning time spent systems different problems suite 
seen total planning time htn dl generally slightly greater 
hardest problem large number resources htn dl performance better 
due fact dl reasoner pellet htn dl optimized handle large number instances implementation 
experiment shows expressivity knowledge representation language increases dramatically reasoning time necessarily increase 
test performance task matching ranking presence large ontologies created planning domain obtaining books web services 
mentioned motivating example section created different versions services require different conditions online store may require registration place order university library hand lend books students faculty 
planner needs find service book request list verify availability ensure conditions service met 
describing processes service taxonomies augmented owl version north american industry classification system naics ontology additional definitions 
naics ontology contains definitions categories classifying business establishments 
categories book stores naics code merchandise stores naics code electronic shopping naics code specialized classes book buying services workflow templates describe interact available services web services just provide functionality order books search content store case separate service may needed get isbn number book complete order 
planning problem buy books different restrictions book certain book may interested unused copies sold high rated service 
note relatively simple problem planning perspective quite different characteristics usual planning problem 
classical planning benchmark problems famous blocks world problem generally dealt small number predefined actions move block presence large number objects hundreds blocks 
interesting web composition problems generally deal large number actions varying properties hundreds book selling services limited number objects involved buying couple books 
reason believe setting starting example shows characteristics web services domain 
shows planning time solving different versions problem 
randomly generated planning domains services planning problems involved buying books 
setting different problems reported average planning time 
note buying books services takes sec demonstrating feasibility htn dl approach 
reasoning owl dl ontologies theoretically high complexity nexp time highly optimized instance retrieval algorithm task matching show linear behavior cases instances services concepts categories task ontology 
preliminary results working build domains different application areas evaluate effectiveness efficiency workflow templates 
related relevant meteor web service composition framework winter 
describes semantic process templates spt describe workflow concrete services 
templates may include qos criteria discovery 
ranking discov performance htn dl planner line shows time spent different size input task network ered services selection criteria assigned numerical score weighted combination scores computed rank services 
main problem see assigning weights come numerical values encode preferences 
especially templates generated different developers organizations shared hard ensure weights normalized 
choice qualitative preference specification means partially ordered preferences effective commerce applications intuitive users kie ling 
difference approach compared way non deterministic choice constructs encode possible different execution paths consider recursive decomposition templates 
hand focuses matching services atomic concrete services approach web service composition owl described mcilraith son 
notion generic procedures customized user constraints 
extends golog language enable programs generic customizable usable context web 
golog procedures seen workflows encode various different control flow elements 
notion services setting workflows concrete actions flexibility discover different services 
approach provides flexibility change conditions service desirability conditions defined addition preconditions 
lets users customize workflows extent useful describing hard constraints soft constraints 
hard write constraints easy get situations plan possible plans generated 
ai planning techniques htn planning applied web service composition 
approaches range simple classical strips style planning desjardins finin extended planning mcdermott planning model checking mcdermott deals non determinism partial observability complex goals planning knowledge level formulation martinez lesp rance 
main difference htn planning domain knowledge template structures guide planner find composition 
planning approaches mentioned focuses atomic services isolation tries generate compositions precondition effect descriptions 
useful cases known templates hand task general hard approaches scale problems large number services 
workflows play important role different application areas enterprise applications scientific grid computing applications users interact web services 
evolving requirements applications constantly changing availability services hard build fixed workflows 
flexible workflow templates describe functionalities needed concrete services satisfy requirements selected run time fixing choice design time 
looked problem describing workflow templates 
approach ontologies describe functionalities encode qualitative preferences workflow descriptions 
mixture allows encode hard constraints functional parameters services soft constraints related non functional attributes services 
explained extend owl language support process definitions 
htn dl formalism extension htn planning aimed solve web service composition problems expressive template descriptions 
implemented preliminary system combines htn planning dl reasoning initial experimental results demonstrate feasibility approach 
acknowledgments supported part defense advanced research projects agency darpa fujitsu laboratory america college park lockheed martin advanced technology laboratories national science foundation nsf national institute standards technology nist ntt dean schreiber 
owl web ontology language recommendation 
www org tr owl ref 
fox long 
international planning competition 
www dur ac uk long competition html 
ghallab nau traverso 
automated planning theory practice 
morgan kaufmann 
chapter hierarchical task network planning 
kie ling fischer holland 
preference xpath query language ecommerce 
proceedings th international conference wirtschaftsinformatik 
li horrocks 
software framework matchmaking semantic web technology 
proc 
twelfth international world wide web conference www 
martinez lesp rance 
web service composition planning task experiments knowledgebased planning 
proceedings workshop planning scheduling web grid services 
mcdermott 
estimated regression planning interactions web services 
aips 
mcilraith son 
adapting golog composition semantic web services 
proc 
th international conference knowledge representation reasoning 
nau au murdock wu 
shop htn planning system 
journal ai research 
owl coalition 

owl semantic markup web services 
member submission november www org submission owl 
paolucci kawamura payne sycara 
semantic matching web services capabilities 
international semantic web conference 
pellet 

pellet owl dl reasoner 
www mindswap org pellet 
desjardins finin 
planner composing services described daml 
aa mas workshop web services agent engineering 
sirin parsia 
planning semantic web services 
semantic web services workshop rd international semantic web conference iswc 
sirin parsia wu hendler nau 
htn planning web service composition shop 
journal web semantics 
sirin parsia hendler 
filtering selection semantic web services 
ieee intelligent systems 
miller sheth verma winter 
framework semantic web process composition 
international journal electronic commerce 
van harmelen wielinga 
configuration web services parametric design 
proc 
th international conference knowledge engineering knowledge management ekaw 
van der aalst van herbst weijters 
workflow mining survey issues approaches 
data knowl 
eng 

