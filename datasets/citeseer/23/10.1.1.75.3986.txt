adaptive soundness static equivalence steve kremer laurent lsv ens cachan cnrs inria kremer lsv ens cachan fr 
define framework reason implementations equational theories presence adaptive adversary 
particularly focus static equivalence 
illustrate framework equational theories symmetric encryption xor modular exponentiation joint theories encryption modular exponentiation 
example relies combination result reusing proofs separate theories 
define model symbolic analysis dynamic group key exchange protocols show computational soundness 
known simple security protocols extremely error prone 
mainly due fact executed hostile environment internet 
need rigorous proofs recognized early distinct competing approaches developed 
symbolic approach considers model messages cryptographic primitives modeled term algebra 
adversary manipulates terms pre defined set rules typically inference system 
computational approach considers detailed execution model 
protocol messages modeled bitstrings cryptographic primitives polynomialtime algorithms 
adversary arbitrary probabilistic polynomial time turing machine 
security protocol measured adversary success probability 
proofs symbolic model partially automated clear model captures possible attacks 
proofs computational model provide stronger security guarantees generally harder difficult automate 
trend tries get best worlds model strong computational guarantees 
seminal abadi rogaway shown soundness result symmetric encryption presence passive attacker 
baudet general framework reasoning sound implementations equational theories 
fixed set cryptographic primitives allow specification means equational theory 
formal indistinguishability relation consider static equivalence established security notion coming cryptographic pi calculi verification automated 
studying soundness equational theories motivated numerous works extending classical dolev yao result equations intended capture algebraic properties cryptographic primitives see survey partly supported ara artist network excellence 
showing soundness result equational theory proves equations considered symbolic model 
consider question soundness static equivalence presence adaptive adversary purely passive 
extends baudet similar way micciancio extended abadi rogaway 
adaptive adversary allowed choose messages implementation 
choice messages depend previously observed distributions 
illustrate model dynamic group key exchange protocols 
precisely contributions follows 
define notion adaptive soundness static equivalence general framework 
definition parameterized equational theory concrete algebra implementing symbolic model 
notion strictly stronger purely passive soundness 
develop combination proof technique allows reuse soundness results disjoint signatures conclude soundness joint signature 
conditions combination works course restrictive match cases practical interest 
give adaptive soundness results theories symmetric encryption provided encryption scheme respects length ind cpa security notion similar main result exclusive xor modular exponentiation abelian group provided decisional diffie hellman ddh assumption verified 
combination technique derive adaptive soundness joint theory encryption modular exponentiation 
believe adaptive soundness results modular exponentiation 
importance motivated real life protocols ssl tls rely diffie hellman key exchange modular exponentiation 
illustrate usefulness adaptive adversaries define symbolic model dynamic group key exchange dke protocols 
dke protocol suite protocols allows actions exchange initial key group users joining leaving group 
typical example dke ake protocol 
symbolic model assume static corruption case allow adversary schedule subprotocol decide users initially exchange key join respectively leave group 
adaptive soundness result show symbolic model sound respect corresponding computational model 
related 
discussed generalizes baudet micciancio 
abadi framework show soundness equational theory useful reasoning offline guessing attacks modeled terms static equivalence 
bana argue notion static equivalence coarse sound interesting equational theories 
example show ddh assumption sufficient imply soundness static equivalence 
introduce general notion formal indistinguishability relation 
prefer stick static equivalence advantage established tool supported equivalence relation 
address problems highlighted proving soundness restricted set formed frames vein abadi rogaway restrictions forbid key cycles 
regarding theory xor backes pfitzmann shown impossibility result reactive simulatability framework active attackers soundness result passive attackers 
note model restrict xor pure random values arbitrary payloads 
restriction may useful computing keys xor random values combining xor encryption 
numerous works considering active adversary approaches 
exhaustive includes reactive simulatability providing universally composable results soundness results universal composability automated tool cryptographically sound type systems protocol composition logic automatic tool aims directly generating cryptographic proofs sequences games 
works stick classical cryptographic primitives digital signatures symmetric asymmetric encryption 
aware general results equational theories active case 
considering active adversary technically involved incomparable adaptive adversary 
case active adaptive adversary challenging problem topic active research 
lack space proofs omitted 
available 
computational algebras introduce model minor changes 
algebras models called algebras consist term algebras defined sorted order signature equipped equational theories 
specifically signature set sorts 
set symbols 
arities form ar 
sk 
symbols take arguments called constants arity simply written fix set names 
set variables 
names variables sorts infinite number names variables available sort 
set terms sort defined inductively term sort variable sort name sort tk application symbol case require ti sort si ar 
sk allow subsorts subsort allow term sort term sort expected 
write sort sort term define root tn name variable 
write var names set variables names occurring respectively 
term ground closed var 
substitutions written xn tn domain dom 
xn 
consider sorted cycle free substitutions 
closed ti closed 
var var ti names names ti extend notations var 
names 
tuples sets terms substitutions obvious way 
application substitution term written defined usual way 
usual set positions pos term defined inductively pos pos pos ar pos tn pos ti 
position expression denotes subterm position tn ti symbols intended model cryptographic primitives names model secrets keys 
semantics symbols described equational theory equivalence relation written stable application contexts substitutions variables 
instance symmetric encryption modeled classical theory dec enc 
deducibility static equivalence frames represent sequences messages observed attacker 
formally frame expression xn tn set bound restricted names ti closed term sort xi 
simplicity consider frames xn tn restrict name names 
tn 
name may disclosed explicitly adding mapping xa frame 
assimilate frames underlying substitutions xn tn denoted xi ti definition deducibility 
closed term deducible frame equational theory written iff exists term var dom names names simplicity consider deducibility problems names names 
instance enc enc theory name deducible dec 
argued deducibility sufficient account knowledge attacker 
instance lacks partial information secrets 
classical notion formal methods static equivalence 
definition static equivalence 
frames statically equivalent theory written iff dom dom terms var dom names names equivalent 
instance constants known attacker 
enc enc 
enc enc statically equivalent dec 
variables defined names 

test distinguishes concrete semantics give terms frames concrete semantics parameterized implementation primitives 
provided set sorts set symbols computational algebra consists non empty set bit strings sort subsort require computable function 
sk ar 
sk effective procedure draw random elements denoted assume fixed computational algebra associate frame xn tn distribution drawings computed follows 
name sort appearing tn draw value 
xi sort si compute ti si recursively structure terms 
return value 
xn tn 
values xn en ei si called concrete frames 
extend notation tuples closed terms obvious way 
generalize notation terms variables specifying concrete values 
xn en 
rest focus asymptotic notions cryptographic security consider families computational algebra indexed complexity parameter 
parameter thought size keys secret values 
concrete semantics frame family distributions concrete frames 
consider families computational algebras required operation algebras feasible uniform probabilistic polynomialtime algorithm complexity parameter 
ensures concrete semantics terms frames efficiently computable sense 
families distributions ensembles concrete frames benefit usual notion cryptographic indistinguishability 
intuitively families distributions indistinguishable written probabilistic polynomial time adversary guess sample probability significantly greater adv ind formally ask advantage negligible function remain eventually smaller sufficiently large 
convention adversaries access implicitly fresh random coins needed complexity parameter 
adaptive soundness section recall original notion soundness static equivalence considers passive adversary extend adaptive adversary 
show relations classical soundness new adaptive soundness provide combination result allows hypotheses prove adaptive soundness computational algebras adaptive soundness parts 
soundness definitions definition soundness 
equational theory 
family computational algebras sound iff frames domain implies similarly baudet define soundness concentrate soundness static equivalence 
shown theories soundness static equivalence implies notions 
baudet introduce strong notion soundness holds restriction computational power adversaries 
definition unconditional soundness 
equational theory 
family computational algebras unconditionally sound iff frames domain implies 
unconditional soundness stipulates pairs equivalent frames related distributions equal 
adversary polynomially bounded distinguish distributions 
adaptive security extend soundness static equivalence adaptive setting adversary observes computational value sequence adaptively chosen terms 
adaptive setting formalized cryptographic game 
family computational algebras adversary 
access left right evaluation oracle olr pair symbolic terms outputs implementation 
oracle depends selection bit uses local store record values generated different names values processing queries 
slight abuse notation omit store write ob lr tb adversary plays indistinguishability game objective finding value formally advantage defined adv adpt lr lr restrictions queries adversary having non negligible advantage easy cases 
example adversary submit pair oracle 
require adversary legal 
definition adaptive soundness 
adversary legal sequence queries ti ti left right oracle queries statically equiv family computa xn tn tional algebras 
xn ad sound iff adv adpt negligible probabilistic polynomial time legal adversary unconditionally ad sound iff adv adpt legal adversary adaptive soundness implies original soundness notion static equivalence 
proposition 
family computational algebras 
ad sound sound converse false general 
interestingly unconditional soundness adaptive non adaptive case coincide 
proposition 
family computational algebras 
unconditionally ad sound iff unconditionally sound 
combination result objective provide combination result form signatures share symbol 
ad sound ad sound combination denoted ad sound 
false general 
provide restrictions combination possible consider disjoint signatures layered signatures 
definition disjoint signatures 
signatures 
say disjoint iff 
denote union signature 
definition signature combination layered signatures 
disjoint signatures 
subsort relation signature combination 
layered signature 
intuitively signature layered constructor occurs constructor defines sorts subsort 
layered signature term define set positions pos pos sort set minimal positions pos pos sort sort 
example consider theory symmetric encryption pseudo random generator 
signature contains sort data symbols enc dec arity data data data 
signature contains sort rand symbol prg pseudo random generator arity rand rand 
signature combination contains single element rand data elements sort rand keys plaintext 
disjoint layered 
term enc enc prg prg prg data rand valid term 
term prg enc term sorted 
pos pos 
definition hybrid functions 
disjoint signatures signature combination layered 
equational theories respectively 
hybrid function set pairs frames function lists terms terms frame occurring naturally extended frames xn tn xn tn xn tn xn un 
pos ti pos 
ui root ti root ui pos ti pos 
ui xq ti xq 
ui computable polynomial time input 
adaptive soundness may hold frames subset formed frames considering encryption typically discards frames contain key cycles 
say algebra ad sound set polynomial time legal adversary pair frames advantage adv adpt sequence queries ti ti verifies pair xi ti xi ti negligible 
typically show soundness set pairs formed frames notion formed frames depends particular equational theory 
proposition combination 
disjoint signatures signature combination 
equational theories respectively 
consider family computational algebras family respecting 
implies set pair frames hybrid function ad sound occurs ad sound frames ad sound idea proof adversary ad soundness queries oracle pair frames possible build adversary ad soundness submits oracle adversary ad soundness submits adversary ad soundness submits advantages related 
combination result useful section combining encryption modular exponentiation 
adaptively sound theories adaptive soundness results equational theories consider probabilistic symmetric encryption try close possible models 
assume implementation symmetric encryption scheme semantically secure relevant formal theory 
symbolic model 
symbolic model consists set sorts data infinite number names sort data called keys function symbols enc dec data data data data data data pair data data data data data data data data consider equational theory esym generated dec enc pair pair enc enc enc pair intuitively function symbols type testers 
meaning remaining symbols clear 
usual enc written pair written 
name key position term exists sub term enc plaintext position 
formed frames adversaries 
importance key cycles described 
general ind cpa sufficient prove soundness result presence key cycles 
numerous previous forbid formal terms contain cycles 
total order keys 
frame acyclic subterm occurs 
possibility handle key cycles consider stronger computational requirements key dependent message kdm security done 
noted selective decommitment problem 
classical solution problem require keys sent encrypt message appear plaintext 
frame xn tn formed acyclic terms ti symbols enc pair names key positions plaintext ti key position tj adversary formed sequence queries ti ti oracle yields formed frames 
xn tn xn concrete model 
symmetric encryption scheme se defined algorithms kg key generation algorithm takes input security parameter outputs key encryption algorithm randomized 
takes input bit string key returns encryption decryption algorithm takes input bit string ciphertext key outputs corresponding plaintext 
kg bit string family computational algebras giving concrete semantics depends symmetric encryption scheme se kg 
concrete domain data contains possible bit strings equipped distribution induced kg 
interpretation constants respectively bit strings enc dec function respectively interpreted algorithm assume existence concrete model concatenation operation interpret pair symbol 
corresponding left right projections implement interested formed frames provide computational interpretation 
semantic security 
schemes satisfy length concealing semantic security 
definition recall uses left right encryption oracle lr se oracle generates key kg 
answers queries form bs bs bs bs bit strings 
oracle returns ciphertext bsb 
goal adversary guess value bit advantage defined lr se lr se adv cpa se encryption scheme se ind cpa secure advantage adversary negligible 
difference standard semantic security require scheme hide length plaintext restrict bs bs equal length 
abuse notation call resulting scheme ind cpa secure 
proposition 
total order keys 
remainder proposition consider formed adversaries family computational algebras symmetric encryption scheme se 
esym ad sound se ind cpa converse false 
exclusive study adaptive soundness problem usual theory implementation exclusive xor model 
symbolic model consists single sort data infinite number names infix symbol data data data constants data 
terms equipped equational theory generated implementation define computational algebras concrete domain data equipped uniform distribution interpreted usual xor function implementation xor enjoys unconditional adaptive soundness respect proposition 
usual implementation unconditionally ad sound 
result follows directly unconditionally soundness shown proposition 
modular exponentiation third application study soundness modular exponentiation 
underlying cryptographic assumption hardness decisional diffie hellman ddh problem difficult feasible computation distinguish xy selected random 
original diffie hellman protocol building block key agreement protocols widely practice ssl tls kerberos group key exchange protocols ake burmester desmedt protocol 
symbolic model 
symbolic model consists sorts group elements ring elements infinite number names name sort symbols exp exponentiation add mult mult inverse constants consider equational theory edh generated exp exp exp exists direct correspondence terms sort set polynomials nr nr set names sort integer simply corresponds 


write times xn 
times times put restrictions formal terms products power free forbidden products contain elements fixed bound 
xn forbidden restrictions come ddh assumption difficult avoid 
furthermore interested frames terms sort frame containing terms sort rewritten exp xn exp pn orienting equation form left right 
frames immediate characterization static equivalence 
frames statically equivalent satisfy linear equations 
proposition 
exp xn exp pn edh exp xn exp qn iff sequence integer characterization decide static equivalence efficiently 
concrete model 
instance generator ig polynomial time algorithm outputs cyclic group defined generator order polynomial time multiplication algorithm prime order family computational algebras depends instance generator ig generates cyclic group generator order concrete domain zq uniform distribution 
symbols classical addition multiplication zq exp interpreted modular exponentiation constants interpreted integers zq 
domain contains bit string representations elements family computational algebras satisfies ddh assumption instance gen erator satisfies assumption probabilistic polynomial time adversary advantage adv ddh ig ig zq ab ig zq negligible 
remainder generally suppose unique group ig 
show ddh assumption necessary sufficient prove adaptive soundness 
proposition 
family computational algebras edh sound iff edh ad sound iff satisfies ddh assumption 
proof result uses adaptive variant ddh called dh generalizes previously variants ddh 
main difficulty proof consists relating ddh dh 
note adaptive soundness classical soundness equivalent symmetric encryption coincide case 
combining encryption exponentiation illustrate combination result proposition establishing joint soundness result symmetric encryption modular exponentiation 
symbolic model 
consider equational theory containing edh esym 
signature symmetric encryption signature modular exponentiation signature layered contains element data 
formed frames 
total order keys exponentiations 
frame formed contain dec symbol names exponentiations key position 
subterm exp key position linearly independent polynomials exp subterm 
subterm subterm name sort data exponentiation concrete model 
concrete model models symmetric encryption modular exponentiation 
need reflect exponentiations symmetric keys 
family computational algebras giving concrete semantics parameterized symmetric encryption scheme se instance generator ig 
require key generation algorithm se randomly samples element ig 
giving ind cpa encryption scheme se possible build ind cpa scheme se uses key generation algorithm 
achieved key extractor algorithm 
algorithm usually universal hash function entropy smoothing theorem transforms group elements valid keys se new encryption decryption algorithms se apply algorithm group element key 
produces symmetric key encryption decryption algorithms se family computational algebras implementing encryption exponentiation said ee secure encryption scheme se secure ind cpa uses key generation algorithm described ig satisfies ddh assumption 
soundness proven applying proposition 
proposition 
total order keys exponentiations 
ee secure family computational algebras ad sound formed frames similar result symmetric encryption xor full version 
analysis dynamic group key exchange micciancio exemplified adaptive soundness result multicast protocols 
propose application dynamic group key exchange protocols dke ake protocol 
keep symbolic security notion simple possible define security protocols modular exponentiation consider subtheory edh section symbols related equations 
definitions soundness results adapted equational theories symmetric encryption joint modular exponentiation 
dynamic group protocols take simple model dke adaptive setting 
dke protocol described operations specify protocol 
suppose specification polynomial time algorithms initializes new group 
algorithm takes input list users outputs internal state protocol list formal terms model messages exchanged setup phase 
take input state protocol list users un respectively added suppressed group output updated state protocol list formal terms representing message exchanges 
takes input state group outputs formal term representing shared key group 
internal state protocol thought internal state algorithms describe protocol 
partition set names sort users nonces generated user ui 
require formal term output uses nonces users currently group 
security symbolic model symbolic setting security property expressed reachability transition system 
represent states transition system triple list users currently group set corrupted users list formal terms sent protocol execution 
suppose internal state protocol recovered state tend assimilate notions state 
describe possible transitions 
convenience set notations manipulating lists 

corruption user 
setup group list users computed 

join users list computed 

exclusion users list computed 
simplify things consider static corruption model corruption transitions occur protocol 
setup transition taken followed leave join transitions 
dke protocol secure impossible adversary get bit information group key corrupted users group 
definition 
define dke protocol symbolically secure state tn reachable xn xn exp fresh nonce ui ti nonces removed exp 
exp 

security concrete model simplified version security model oracles useful anymore adaptive setting 
dke family computational algebras 
adversary interacts group oracles store current state group challenge bit setup un initializes group un produces new state list formal terms tm 
ti 
join un users un join group 
un executed outputs state list terms tm 
ti 
leave un users un leave group 
un executed outputs state list terms tm 
ti 
corrupt corrupts user nonces generated works polynomial time polynomial number values sufficient 
test receives key group output random key 
oracle queried 
consider static corruption model queries corrupt oracle done queries 
setup oracle called adversary interleaves queries join leave oracles 
adversary final call test oracle 
ob denote oracles challenge bit advantage adversary adv ao dke secure concrete model advantage adversary negligible 
soundness result symbolic model dke computationally sound dke algorithm secure symbolic model secure computational model provided static equivalence adaptively sound remember consider modular exponentiation static equivalence adaptively sound ddh 
proposition 
family computational algebras dke 
ad sound secure symbolic model secure concrete model 

abadi baudet warinschi 
guessing attacks computational soundness static equivalence 
proc 
th international conference foundations software science computation structures fossacs volume lncs pages 
springer 

abadi cortier 
deciding knowledge security protocols equational theories 
proc 
st international colloquium automata languages programming icalp volume lncs pages 

abadi fournet 
mobile values new names secure communications 
proc 
th annual acm symposium principles programming languages popl pages 
acm press 

abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
ifip international conference theoretical computer science ifip tcs volume lncs 
springer 

ad bana herzog scedrov 
soundness formal encryption presence key cycles 
proc 
th european symposium research computer security esorics volume lncs pages 
springer 

backes pfitzmann 
limits cryptographic realization dolev yao style xor 
proc 
th european symposium research computer security esorics volume lncs pages 

backes pfitzmann waidner 
composable cryptographic library nested operations 
proc 
th acm conference computer communications security ccs pages 

bana 
computational soundness formal indistinguishability static equivalence 
proc 
th asian computing science conference asian lncs 
springer 
appear 

baudet cortier kremer 
computationally sound implementations equational theories passive adversaries 
proc 
nd international colloquium automata languages programming icalp volume lncs pages 
springer 

blanchet 
automatic proof strong secrecy security protocols 
proc 
th ieee symposium security privacy ssp pages 

blanchet 
computationally sound mechanized prover security protocols 
proc 
th ieee symposium security privacy ssp pages 

pointcheval 
provably authenticated group diffie hellman key exchange dynamic case 
advances cryptology asiacrypt volume lncs pages 
springer 

lakhnech warinschi 
generalization ddh applications protocol analysis computational soundness 
submitted online version available athttp www lsv ens cachan fr pdf 

burmester desmedt 
secure efficient conference key distribution system extended 
advances cryptology eurocrypt volume lncs pages 
springer 

canetti herzog 
universally composable symbolic analysis mutual authentication key exchange protocols extended 
proc 
rd theory cryptography conference tcc volume lncs pages 
springer 


pointcheval 
key derivation randomness extraction 
technical report cryptology eprint archive 

cortier 
survey algebraic properties cryptographic protocols 
journal computer security appear 

cortier warinschi 
computationally sound automated proofs security protocols 
european symposium programming esop volume lncs pages edinburgh uk 
springer 

datta derek mitchell shmatikov 
probabilistic polynomialtime semantics protocol security logic 
proc 
nd international colloquium automata languages programming icalp volume lncs pages 
springer 

diffie hellman 
new directions cryptography 
ieee transactions information theory 

dwork naor reingold stockmeyer 
magic functions 
acm 

goldwasser micali 
probabilistic encryption play mental poker keeping secret partial information 
proc 
th annual acm symposium theory computing stoc 
acm press 

kremer 
adaptive soundness static equivalence 
research report lsv laboratoire sp ens cachan france feb 
pages 

laud 
composable cryptographic library nested operations 
proc 
th acm conference computer communications security ccs pages 

micciancio 
adaptive security symbolic encryption 
proc 
nd theory cryptography conference tcc volume lncs pages 
springer 

