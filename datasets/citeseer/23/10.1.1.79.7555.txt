qos scheduling workflow applications service grids grid computing distributed system laboratory dept computer science software engineering university melbourne vic australia raj edu au years grid technologies enhanced service oriented paradigm enables new way service provision utility computing models users consume qos quality service requirements 
pay service grids issues resource management scheduling users qos constraints addressed especially context workflow management systems 
propose qos workflow management system scheduling algorithm minimizes execution cost workflow application meeting delivering results 
attempt optimally solve task scheduling problem branches sequential tasks modeling branch markov decision process value iteration method 
utility computing emerged new service provision model services capable supporting diverse applications including business science global network 
users utilize services need pay 
past providing utility computing services reinforced service oriented grid computing providing infrastructure enables users consume utility services transparently secure shared scalable standard world wide network environment 
grid applications bioinformatics astronomy require workflow processing tasks executed control data dependencies 
result number grid workflow management systems scheduling algorithms developed projects condor dagman grads apst pegasus 
facilitate workflow application execution grids minimize execution time 
scheduling workflows users qos quality service requirements deadline budget addressed existing grid workflow management systems 
utility service pricing dependent level qos offered 
typically service providers charge higher prices higher qos 
users may need complete workflows earlier require 
prefer cheaper services lower qos sufficient meet requirements 
motivation focus qos workflow jia yu rajkumar buyya chen tham dept electrical computer engineering national university singapore kent ridge singapore nus edu sg management attempts minimize execution cost satisfying users qos requirements 
discuss basic qos workflow management requirements service grids novel workflow scheduling method 
objective function proposed scheduling algorithm develop workflow schedule minimizes execution cost meet time constraints imposed user 
order solve scheduling problems efficiently large scale workflows partition workflow tasks generate workflow execution schedule optimal schedules task partitions 
deadline assignment strategy developed distribute deadline partition 
attempt solve optimally scheduling problem sequential tasks modeling branch partition markov decision process mdp proven effective modeling decision problems 
proposed workflow scheduling approach users utility providers 
users approach orchestrate grid services utility providers outsource computing resources meet customers service level requirements 
remainder organized follows 
section ii provides overview qos workflow management service grids 
describe novel workflow scheduling approach section iii 
experimental details simulation results section iv 
conclude directions section ii 
qos workflow management system qos workflow management service grids impacts levels including workflow specification service discovery workflow scheduling 
term service mean utility computing service described 
architecture typical qos workflow management system shown 
components workflow management system discussed 
workflow specification qos workflow management system allows user specify requirements descriptions tasks dependencies workflow specification 
general qos constraints express preferences users essential efficient resource allocation 
categorize workflow qos constraints workflow level constraints 
task level illustrated qos constraints specified corresponding tasks 
scenario qos constraints time cost specified task contrast qos constraints workflow level entire workflow execution 
example shown workflow execution required completed minimum cost 
qos workflow management system contract violation workflow specification service discovery workflow planning qos monitor advance reservation executor workflow execution workflow scheduling qos request sla sla feedback fig 

qos workflow management system architecture 
workflow tasks task name qos constraints qos constraint name time value qos constraint name cost value qos constraints 
task tasks workflow fig 

task level qos specification 
workflow qos constraints qos constraint name time value qos constraint name cost optimal qos constraints tasks tasks workflow optional fig 
workflow level qos specification 
gsp grid service provider sla service level agreement grid market directory grid service grid service grid service users may want specify qos constraints deadline budget workflow processing task 
instance users may want entire workflow execution finished hours specifying execution time minutes task 
focus time constraint deadline 
gsp marketplace service discovery qos request submission workflow specification workflow system needs discover appropriate services processing tasks 
complex workflow different tasks require different types services 
example biological imaging process tasks need access genome search service tasks need access protein folding service 
service grid type services deployed different service providers distributed multiple administrative domains 
addition service local policy different users authorization pricing 
workflow system able query grid information service grid market directory generate list available services task user workflow 
service grid qos attributes services processing task diverse 
different service providers offer different qos 
service provider offer various qos levels satisfying different users requirements 
pricing services usually closely related qos provided 
users may priority terms service order execution time price certain service providers 
addition service providers may adjust service price peak peak periods order enhance utilization resources 
wms task parameters user period processing time price fig 

qos request scenario 
grid service knowledge qos details available services key scheduling workflow tasks efficiently 
possible qos request scenario 
initially starts workflow management system wms sending qos request grid services task 
request indicates task parameters user workflow estimated execution period 
receiving request grid services reply qos parameters processing speed available storage space free memory service offer corresponding price delivering service specified qos level 
workflow scheduling workflow scheduling focuses mapping managing execution workflow tasks grid services 
pay service grid scheduling decision workflow scheduling guided users qos constraints 
major steps workflow scheduling workflow planning advance reservation workflow execution run time rescheduling 
workflow planning workflow planning select service task workflow generate schedule workflow execution 
result schedule satisfy users qos constraints 
decision making planner workflow execution needs entire workflow qos parameters services obtained qos requests 
general mapping tasks distributed services nphard problem workflow planner may produce suboptimal schedule order balance scheduling time 
advance reservation advance reservation function proposed supported guaranteed qos services 
important workflow scheduling especially long lasting workflow execution 
workflow management systems need reservation services selected planner advance ensure availability services 
starttime endtime starttime endtime fig 

possible reservation schedule 
time slots advance reservation services generated optimal service possible start time workflow execution 
illustrates possible advance reservation schedule workflow execution 
earliest start time task depends possible completion time parent tasks 
task predecessor start time latest completion time predecessors 
consider communication overhead task start time latest completion time parent tasks plus communication time 
time slots desired services requested result planning may available workflow system reservations 
workflow scheduling needs able re plan acquire schedule 
workflow execution run time rescheduling typical utility computing services qos guaranteed need meet service commitments 
possibility services may violate contract workflow system service provider reasons service failure service delay due competition service consumers higher priority 
workflow scheduler able adapt update schedule resource dynamics 
example task execution delayed desired start time children tasks scheduling adjust reservation schedule tasks 
qos monitor required starttime endtime starttime endtime system monitor agreed performance inform planner changes 
non reservation services service availability known run time 
case run time rescheduling critical 
addition dealing situations contract violation rescheduling needs handle unavailability optimal services time task execution 
service level agreement service grid actual allocation services control workflow management system 
commitment service execution service level agreement sla workflow management system service providers 
sla contract specifies minimum expectations obligations exist consumers providers 
sla parameters workflow tasks qos requirements task processing include performance objectives earliest start time latest completion time rate model processing price 
penalty clauses service level violation required sla enforce service level guarantees 
penalty levels service execution violation may vary different workflow tasks 
example service executing task delayed minutes affect completion workflow 
delay executing task workflow execution delay 
penalty levels workflow task processing degree impact workflow execution single service execution 
iii 
qos workflow scheduling processing time execution cost typical qos constraints executing workflows pay services 
users normally get execution done lowest possible cost required 
motivation section qos workflow scheduling methodology algorithm allows workflow management system minimize execution cost delivering results deadline 
problem description methodology model workflow applications directed acyclic graph dag 
finite set tasks set directed arcs form ti called parent task child task oft assume child task executed parent tasks completed 
time constraint deadline specified users workflow execution 
workflow application described tuple workflow graph call task parent task entry task denoted entry task child task exit task denoted exit total number services available 
set services cond si capable executing service assigned execution task 
services varied processing capability delivered different prices 
general service price inversely proportional processing time shown 
denote cond satisfied sum processing time data transmission time cond satisfied sum service price data transmission cost processing service processing time fig 

processing time vs price task execution 
scheduling problem map si achieve minimum execution cost complete workflow execution deadline solve scheduling problem divide conquer technique methodology listed step 
discover available services request qos parameters services task 
step 
group workflow tasks task partitions 
step 
distribute user deadline task partition 
step 
generate optimized schedule plan local optimal solution task partition 
step 
start workflow execution reschedule initial schedule violated run time 
provide details steps subsections 
service discovery done querying directory service grid market directory workflow task partitioning categorize workflow tasks synchronization task simple task 
synchronization task defined task parent child task 
synchronization tasks 
tasks parent task child task simple tasks 
example simple tasks 
price simple task synchronization task partitioning 
partitioning 
fig 

workflow task partition 
branch branch set simple tasks executed sequentially synchronization tasks 
example branches partition workflow tasks independent branches synchronization tasks yi total number branches synchronization tasks workflow respectively 
letv set nodes dag corresponding set task partitions set directed edges form vi parent task partition child task partition task partition graph denoted simple path referred path sequence task partitions directed edge task partition path child vertices task partitions path repeated 
task partition vi attributes start time st deadline dl vi expected execution time eet vi minimum execution time met vi 
earliest start time vi earliest time task executed computed parent partitions st vi max dl pi set parent task pi partitions minimum execution time vi min dl vi st vi attributes related eet vi deadline assignment workflow task partitioning distribute deadline deadline dl assigned sub deadline deadline consider deadline assignment policies 
cumulative sub deadline independent path synchronization tasks 
synchronization task executed tasks parent task partitions completed 
waiting independent paths completed path capable finished earlier executed slower cheaper services 
example deadline assigned 
similarly deadlines assigned 

cumulative sub deadline path vi vi equal deadline assures task partition computed assigned deadline workflow execution satisfy user required deadline 

assigned sub deadline greater equal minimum processing time corresponding task partition 
assigned sub deadline minimum processing time task partition expected execution time exceed capability execution services handle 

deadline divided task partitions proportion minimum processing time 
execution times tasks workflows vary tasks may need minutes completed may need hour 
deadline distribution task partition execution time 
multiple possible processing times task minimum processing time distribute deadline 
implemented deadline assignment policies task partition graph combining breadth search bfs depth search dfs algorithms critical path analysis compute start times proportion sub deadlines task partition 
planning planning stage generate optimized schedule advance reservation run time execution 
schedule allocates workflow task selected service meet users deadline low execution cost 
solve workflow scheduling problem dividing entire problem task partition scheduling problems 
task partition sub deadline find local optimal schedule task partition 
local schedule guarantees task execution completed sub deadline workflow execution completed deadline 
similarly result cost minimization solution task partition leads optimized cost solution entire workflow 
optimized workflow schedule easily constructed local optimal schedules 
types task partitions synchronization task branch partition 
scheduling solutions type partition algorithm described sub sections 
synchronization task scheduling sts sts scheduler considers task decide service executing task 
objective function scheduling synchronization task min ti eet yi solution single task scheduling problem simple 
optimal decision select cheapest service process task assigned sub deadline 
branch task scheduling bts simple task branch solution bts sts 
multiple tasks scheduler needs decision service execute child task completion parent task 
optimal decision minimize total execution cost branch complete branch tasks assigned sub deadline 
objective function scheduling branch min ti eet ti ti bts achieved modeling problem markov decision process mdp shown effective solving sequential decision problems 
mdp model sequential branch tasks definition mdp model scheduling branch described states markov decision process state space definition state consists current execution task remaining deadline rd definition start state state current execution task task branch rd dl bi definition terminal state state task branch completed 
actions transitions state set actions actions incur immediate utility affect mdp transit state 
definition action mdp allocate service task 
variables associated action processing time service denoted service price denoted definition immediate utility obtained action state transitioning state rd definition transition incurred action state deterministic services qos guaranteed 
mdp problem find optimal policy possible states 
policy mapping decision making finding optimal action state immediate utility action expected utility sum immediate utilities obtained result decisions transiting state terminal state 
value associated state represents expected utility state mdp 
value calculated recursively value successor states 
value state min best action state arg min computation optimal policy solved standard dynamic programming algorithm policy iteration value iteration value iteration 
optimal policy indicates best services assigned execute branch tasks specific sub deadline 
planning algorithm shows pseudo code algorithm planning execution schedule 
acquiring information available services task task partition graph generated application graph deadline distributed partition 
optimal schedules computed partition level level sts bts 
optimization partition idle time expected completion planned services assigned sub deadline 
waiting adjust assigned sub deadline planned partitions start time child partitions 
input workflow graph output schedule workflow tasks request processing time price available services ti convert distribute deadline vi scheduled false entry partitions branch compute optimal schedule bts compute optimal schedule sts scheduled true child see empty remove element parent task partitions scheduled true put compute optimal schedule sts child child dl get expected completion time get child task partitions branch partition st dl compute optimal schedule bts get child partition put queue put st max dl fig 

planning algorithm optimizing execution cost users deadline 
sts compute optimal schedule synchronization task optimize execution sub deadline bts branch tasks 
rescheduling order complete workflows satisfy users requirements run time rescheduling required able adapt dynamic situations variation availability services due failures 
key idea rescheduling policy handling unexpected situation adjust sub deadlines re compute optimal schedules task partitions level level 
motivation level level task partition approach reschedule minimum number task partitions 
example execution task partition delayed look child task partitions 
delay time accommodated child task partitions rescheduling impact lower levels 
rest delay time accumulated successors total delay time distributed 
input task partition graph delayed synchronization task delay time delay output new schedule tasks workflow child task partitions scheduled true st st delay empty remove task partition parent task partitions scheduled true dl st compute new optimal schedule scheduled true dl st compute new optimal schedule scheduled true child task partitions put scheduled false st max dl fig 

rescheduling algorithm synchronization delay 
rescheduling algorithm synchronization task delay illustrated 
adjust start time child task partitions actual completion time delayed synchronization task line 
check new deadlines child task partitions achieved comparing minimum processing times line 
achievable planner generates new optimal schedules tasks child task partitions new expected execution times line rescheduling stopped 
new sub deadlines assigned minimum processing time expected execution time new schedules generated line 
delay accommodated level child partitions lower level child partitions put queue rescheduling line 
queue implementing breadth search algorithm identifying new start time graph 
branch task rescheduling branch task execution delayed optimal schedule branch task delayed task obtained initial mdp result current remaining sub deadline 
partitions affected long delay exceed minimum processing time remaining tasks branch 
addition handling task execution delay level task partition approach applied managing dynamic situations service unavailability service policy change 
iv 
performance evaluation performance qos workflow scheduling algorithm described section iii evaluated simulation toolkit 
conducted experiments simulating structure protein annotation workflow application see developed london science centre 
number bracket task represents length task mi instructions 
task workflow requires certain type service processing 
simulated types services service type supported different service providers 
simulated service providers 
table shows attributes instance different service providers terms processing capacity mips instructions second delivery processing time second price 
deliver type service required executing task 
extended support service discovery request qos parameters 
indicated workflow system discovers available services task grid index service gis queries services obtain processing time price 
processing time task service depends complexity task combined capability resource service provision 
indicated services lower processing time delivered higher price 
coils seg prosite prospero summary psi blast blast impala psi pred pssm genome summary scop table qos attributes services different providers executing task 
service id mips rating processing time sec cost fig 

workflow protein annotation 
experiment compare proposed scheduling algorithm denoted deadline min cost scheduling algorithms greedy cost greedy time random selection 
greedy cost greedy time algorithms arrive best immediate solution searching answer 
greedy cost algorithm selects cheapest service executing task greedy time algorithm selects fastest service 
random selection algorithm uses average value execution time execution cost captured repeated execution workflow application times services selected randomly 
fig 

service discovery 
main measurements evaluate scheduling approaches time constraint execution cost 
indicates schedule produced scheduling approach meets required deadline indicates costs schedule workflow tasks simulated service grid 
compares execution time cost generated planner scheduling approaches 
shown expected execution time workflow deadline min cost algorithm increases users relax deadline 
workflow execution time greedy cost random selection algorithms higher meet users requirements deadline lower 
greedy time algorithm complete earlier deadline min cost algorithm execution cost higher 
shows execution cost workflow deadline min cost algorithm reduced users relax deadline 
expected execution time seconds expected execution cost deadline min cost greedy time greedy cost random selection query type workflow system submit task gis service list register task time price register service type user deadline seconds expected execution time scheduling approaches 
deadline min cost greedy time greedy cost random selection grid service grid service user deadline seconds expected execution cost scheduling approaches 
fig 

expected execution time cost scheduling approaches 
greedy time complete execution earliest time corresponding cost high 
greedy cost complete execution cheapest cost unable meet users deadlines deadline small 
see deadline min cost algorithm considers users deadline requirements optimizing cost 
greedy time greedy cost algorithms represent scheduling approaches intend achieve minimization execution time cost respectively 
experiment executed workflow optimal services produced planner deadline min cost algorithm 
run time simulated delays execution task seconds 
shows actual workflow completion time rescheduling 
see rescheduling able adapt delay time complete workflow execution time 
actual execution cost increases scheduler switches remaining tasks expensive services speed execution 
need appropriate penalty mechanisms compensate loss caused violation qos guarantees 
actual execution time seconds rescheduling rescheduling execution delay time seconds task deadline seconds fig 

actual execution time task deadline seconds rescheduling rescheduling increasing delay 
actual execution cost rescheduling expected cost execution delay time seconds task deadline seconds fig 

actual execution cost task deadline seconds rescheduling increasing delay 
vi 
workflow management pay service grids addressed existing grid workflow systems 
qos workflow management system 
proposed novel qos workflow scheduling algorithm minimizes cost execution meeting deadline 
described task partitioning deadline assignment optimized execution planning efficient run time rescheduling 
utilized markov decision process approach schedule sequential workflow task execution 
current system uses run time rescheduling handle service agreement violations 
enhance scheduling method handle dynamic scenarios dynamic pricing 
acknowledgments hussein gibbins chee shin yeo goel arun comments 
partially supported fellowship australian research council arc discovery project 
engelbrecht schmidt service oriented grid environment demand supercomputing fifth ieee acm international workshop grid computing grid pittsburgh pa usa november 
utility computing sla management business objectives ibm system journal vol 

brien darlington mapping scientific workflow protein project distributed resources uk science hands meeting nottingham uk sep 
buyya toolkit modeling simulation distributed resource management scheduling grid computing concurrency computation practice experience vol 
wiley press usa 
cooper new grid scheduling rescheduling methods grads project nsf generation software workshop international parallel distributed processing symposium santa fe ieee cs press los alamitos ca usa april 
deelman mapping complex workflows grid environments journal grid computing vol 
utility computing framework develop utility systems ibm system journal vol 

tool set cluster grid computing concurrency computation practice experience wiley interscience 
foster physiology grid open grid service infrastructure wg global grid forum 
mayer dataflow workflow composition scheduling space time uk science hands meeting nottingham uk iop publishing bristol uk september 
grid economy services architecture grid economic services architecture wg global grid forum 
sutton barto reinforcement learning mit press cambridge ma 
utility computing new model darwin magazine april 
yu buyya market oriented grid directory service publication discovery grid service providers services journal supercomputing kluwer academic publishers usa 
yu buyya taxonomy workflow management systems grid computing technical report grids tr grid computing distributed systems laboratory university melbourne australia march 
tannenbaum wright miller livny 
condor distributed job scheduler 
beowulf cluster computing linux mit press ma usa 
singh deelman mehta su jacob katz blackburn pegasus portal web grid computing th annual acm symposium applied computing santa fe nm mar 
birnbaum hayes li miller bourne casanova grid workflow software high throughput proteome annotation pipeline proceedings international workshop life science grid ishikawa japan june 
