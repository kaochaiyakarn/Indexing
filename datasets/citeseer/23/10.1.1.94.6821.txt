execution monitoring security critical programs distributed systems specification approach calvin ko trusted information systems castro street suite mountain view ca ko tis com describes specification approach detect programs 
approach utilizes security specifications describe intended behavior programs scans audit trails operations violation specifications 
developed formal framework specifying security relevant behavior programs design implementation real time intrusion detection system distributed system 
wrote security specifications unix setuid root programs 
system detects attacks caused monitored programs including security violations caused improper synchronization distributed programs 
approach encompasses attacks exploit previously unknown vulnerabilities security critical programs 

security problems directly indirectly related vulnerabilities security critical programs privileged programs 
intruders exploit vulnerabilities programs gain unauthorized access exceed privileges system 
inappropriate uses programs lead security breaches 
intrusion detection alternative approach coping problems testing verification 
major approaches intrusion detection anomaly detection misuse detection detection 
anomaly detection assumes attacks result behavior different normally observed system detected comparing current behavior pre ieee manfred karl levitt department computer science university california davis davis ca levitt cs ucdavis 
edu established normal behavior 
statistics rule immunology methods employed modeling normal behavior 
anomaly detection advantage specific knowledge security flaws required order detect penetrations 
difficult set anomaly thresholds attacks produce significant anomalies 
addition anomaly detection detect kinds intrusions intrusions produce identifiable anomaly 
misuse detection attempts identify known patterns intrusions intrusion signatures occur 
misuse detection system detects intrusions matching audit trails set predefine signatures 
guarantee detection intrusion signature intrusion included system 
detect previously unknown attacks possible specify intrusion signatures exploiting vulnerability unknown 
difficult write signatures capture variants intrusion different ways exploit known weakness 
specification detection relies program specifications describe intended behavior security critical programs 
monitoring executing programs involves detecting deviations behavior specifications detecting occurrence specific attack patterns 
attacks detected may previously encountered 
early efforts focused sequential programs intended behavior specified terms static set allowable operations 
introduces formal intrusion detection model ordered sequences execution events specifying intended behavior concurrent programs distributed systems 
formal specification language expresses set valid operation sequences programs general efficient manner 
intrusion detection system distributed computer systems networks discussed 
model specification describes valid operation sequences execution programs collective called monitored subject 
sequence operations performed subject conform specification considered security violation 
specification determines execution trace subject valid called trace policy valid operation sequences subjects specified terms grammars alphabets system operations 
developed novel type grammar parallel environment grammars pe grammars specifying trace policies 
pe grammars describe different classes trace policies important security including behavior related synchronization concurrent distributed programs 
parsing audit trails detection mechanism specification detection system detects operations performed subjects violation trace policies 
designed pe grammars way permits parsed efficiently practically important cases 
developed prototype intrusion detection system unix wrote trace policies unix programs 
method detect known attacks programs potential detect previously unknown attacks 
detect race conditions privileged programs security violations caused improper synchronization distributed programs 
remainder organized follows 
section identifies aspects program behavior important security 
section describes basic concepts monitoring model 
section describes specification language 
section describes design implementation prototype specification detection system distributed system 
section presents suggests research 

security relevant aspects program behavior goal specify intended behavior programs security relevant possible specify full behavior program 
section discuss identify aspects program behavior relevant security 
accesses system objects simple important aspect behavior program set objects files accesses 
executing program treated subject access control 
specifying files program access permit detection attacks involving privileged programs unix 
cases number files privileged program needs access limited enumerated easily 
example finger daemon fingerd execute finger program usr ucb nger read status files plan profile 
attacker exploits finger daemon causing perform operations execute programs finger program modify password file caught 
specifying valid accesses privileged program possible detect attacks cause privileged program perform accesses part specification 
addition specify access policy suspect program unauthorized accesses files detected program trojan horse 
sequencing situations set operations performed program concern order operations 
example login program ought read password file lets user enter system starting shell program passing control user 
ascertained operation reading password file appears prior execution shell trace login program 
example concerns locking 
process locks file exclusive access needs ensured process removes lock file exits order prevent file locked permanently 
synchronization distributed system security failures result improper synchronization programs 
example user invokes passwd program change password system administrator editing password file password file may left inconsistent chapter 
addition synchronization problems occur concurrent distributed programs execution consists multiple processes 
order operations performed different concurrent processes concurrent distributed program concern need able specify valid synchronization behavior concurrent programs 
predominant synchronization activities mutual ex precedence 
processes modify file system simultaneously process wait process finishes 
similarly may precedence rela tion operations different processes process read file process finishes writing 
race case synchronization problem 
race condition flaw attacker affect behavior program performing certain operations execution program 
monitoring race condition requires monitoring operation sequence executing program relevant processes system 
model distributed system consists number hosts connected network 
basic entities perform operations objects system files processes 
event denotes execution operation system attributed process performs operation 
events happening system totally ordered history system sequence events occurred system started 
definition system traces execution distributed system produces sequence events vi lq 

called system trace thes 
event vi occurrence time denoted 
events totally ordered vi 
sequence events vi vl 
subtrace system trace 
subsequence 

said distinct execution sequential process simply process system produces sequence events 
vj 
sequence events called process trace denotes sequence operations performed process time starts time terminates 
process trace subtrace system trace 
definition merge races distinct vi merge traces subtrace denoted vi defined vz vl uz exist subsequences il 
il sequence 
ns vj 
definition filter traces filter vp function maps trace vz 
trace vs subtrace predicate set possible event attributes obtained removing events vi false 
example predicate true event describes operation performed user ko subtrace consists events caused ko 

monitoring programs program passive entity 
monitor program means monitor executions program 
execution program distributed process dp pz 
consists processes 
instance execution sequential program distributed process consisting single process execution distributed program concurrent program distributed process consists multiple processes 
trace program execution sequence events corresponding operations performed distributed process merge individual traces processes forming distributed process 
dp pi pz 
pn denoting distributed process execution trace vpl vp vpn vp execution trace process pi 
subtrace system trace single program number executions existing time 
example users execute program time resulting distributed processes running program different operating systems 
situations executions need monitored separately 
situations executions program need monitored 
example order detect user passwd administrator vi modifying password file simultaneously executions vi administrator root executions passwd need monitored 
case input monitor merge filtered traces corresponding executions vi predicate user root traces executions passwd 
streams merge time results single stream operations 
monitoring model 
subject monitoring different processes trace policy describes valid operation sequences single program execution multiple program executions user group users host entity entities collectively called monitored subject simply subject 
user level subject program executions users hosts 
system level subject consists processes 
host refers processes running host 
user refers processes owned user 
monitoring subject means analyzing sequence operations performed subject 
execution trace subject time ordered sequence operations performed processes forming subject 
execution trace subject sp pl 
pn vp vp 
vpi execution trace process pi 
subtrace system trace fig 
depicts situation monitoring program execution involves processes 
process produces execution trace 
process traces merged form single trace processes 
trace forms input monitor 

selection expression trace policy contains selection expression serves identify subjects monitored 
elements selection expression derived characteristics include set programs set users set hosts ii 
special symbols signify respectively 
selection expression list selectors sl sz 
si form pid ps selector hs pid distributed process selector pid ps program ps user ifs host 
selection expression identifies subjects 
selection expression symbol defines single subject selection expression consisting defines set subjects 
symbol selection expression similar variable generic template value instantiation 
instance rdist ko defines set subjects contains subjects rdist ko rdist ko blanc replaced hosts distributed system 
selection expressions subjects identify listed 



rdist defines set subjects subject distributed process executing rdist program user host example rdist 
passwd blanc vi root blanc defines subject executions passwd executions vi toot host blanc 
ko defines set subjects subject refers executions program user ko host 
ko blanc defines user ko host blanc 
defines host pro cesses 
execution program distributed process identified process id pid user representing program executing host running 
selection expression distributed process identified pm user program host simple matching operation determine distributed process belongs monitored subjects specified selection expression 

specification language approach trace policy captures intended behavior program specified means grammar 
grammar defines formal language set sentences alphabet consists program operations 
monitoring subject amounts parsing sequence program operations executed subject 
sequence operations trace obtained audit trails real time 
unsuccessful parsing attempt indicates violation trace policy triggers remedial responses 

parallel environment grammars view large variety possible trace policies constraints imposed real time parsing expressiveness grammar parser efficiency demand special attention 
developed novel type grammar parallel environment grammar meet demands 
pe grammars form parallel extensions environment grammars applied real time data translations heterogeneous relational database systems 
owing support parallel sequences pe grammars specify traces concurrent processes 
pe grammar involves quantities set terminals alphabet set set environment variables start expression 
production rules directly define language pe grammars parameterized versions rules 
parameterized versions called serve templates dynamic generation production rules parsing progresses 
production rule generated replacing parameter variables current values 
collectively parameter variables referred environment variables 
environment variable global local sub grammar analogous concept global local variables programming languages 
parallel aspect pe grammar arises start expression defines start notions 
pe grammar viewed consisting corresponding start notion start expression 
sentence derived start expression ordered merge sentence derived individual start notions 
indepth treatment pe grammars see 
introduce general properties pe grammars refer specific pe grammar shown fig 

pe grammar contains environment variables global environment variable local environment variable 
environment variables initialized lines 
line denotes start expression consists start notions 
general start expression form si ii 
ii sn start notion 
parallel derivation start notion derives sentence sentence derived start expression ordered merge xl 
lines show grammar 
general form 
xo xi terminal set attached actions 
tuple xl xn symbol environment variable 
set attached actions may contain assignments environment variables semantic actions 
example line attached environment assignment decreases value 






environment variables env int local env int start expression se writea 
writea closed 
open 
close 


open 
close 

example parallel environment grammar 
pe grammar production rule obtained current environment replacing environment variable rule current value vi called generated production rule 
serves template replacement 
left hand side resulting production rule single environment variables right hand side combination terminals 
resulting production rules equivalent production rules context free grammars corresponding nonterminals applications correspond derivation steps context free grammars 
set production rules constant varies environment derivation progresses 
change environment occurs environment assignment executed successful application production rule 
example line fig 
generates production rule produces production rule writea 
language defined grammar fig 
open close open close open close open 
table shows parallel derivation sentence close close 
sentential forms labeled represent intermediate results derivation steps involve executions environment assignments semantic actions 
general parallel derivation thought individual derivations si derives derivations proceed parallel consists sequence leftmost derivation steps 
order derivation steps driven occurrence times tokens 
individual derivation parsing corresponds leftmost traversal derivation tree 
affiliate internal node derivation tree represents traversal time occurrence time leftmost leaf node token subtree rooted internal node 
step node earliest traversal time traversed 
parallel derivation consists individual derivations steps open closes steps 
table denote local values perspective sub grammar corresponding sub grammar corresponding 
tz ts tl denote occurrence times tokens close open band close respectively tl tz tl times pace traversals derivation trees cf 
discussion fig 

derivation step production rule writea obtained fig 
environment initial value applied tial form changing writea 
step converts 
step changed execution environment assignment sets 
similarly step results close setting derivation opens proceeds analogously 
cpr torn open tl close open clo tz 
derivation tree example parallel derivation 
fig 
depicts derivation trees parallel derivation shows subscript traversal time affiliated node 
derivation step expands tl 
derivation steps expand writea reason 
tz ts expanded followed 
note open close close sentence grammar step sets earlier traversal time derives write match left hand sides grammar 
parser returns failure indication signals detection violation trace policy 

trace policy rdist program rdist remote file distribution program unix utility maintaining identical copies files multiple hosts 
race condition flaw enables attacker acquire root privileges 
flaw relates way rdist updates file semantics chown chmod system calls regarding symbolic links 
specifically flaw enables user change permission mode file system 
exploited attackers set setuid bit system shell bin sh resulting setuid root shell publicly executable 
explain method detects attack 
flaw exists bsd unix variants unix 
step sub grammar sub grammar 
writea 

fopen 
open fopen close 


fopen open 
fopen lil close open close 
spec rdist rdist blanc 
user 

env int str 
env str home export lj name 
se rdist rdist valid op rdist valid od 
open 
created violation fi violation fi 
inside tmp inside home violation fi nodeid nodeid crest dir inside inside home violation fi symlink 
inside tmp inside home violation fi chor 
created violation fi chmod 
created violation fi rename inside home violation 
pe grammar monitoring rdist 
fig 
shows trace policy rdist 
describes valid operations single rdist execution 
line shows selection expression subjects specification concerned 
specification describes operation sequence single execution rdist host blanc 
lines show initial environment assignments 
initialized user associated execution returned 
pid contains process id obtained process corresponding execution 
table 
example parallel derivation 
ive array storing inode numbers path names files created program execution 
initialized empty changed parsing create file operation recognized 
initialized home directory invoker export home username 
value changed 
line start expression contains start notion rdist implies input de scribed rdist 
recursively defines input valid operations specified valid op second alternative represents termination con dition 
describes operations rdist allowed perform 
alternative right hand sides 
alternative contains just terminal remaining alternatives contains terminal followed semantic actions 
tokens recognized open operation publicly readable file open operation file publicly readable open rw crest ile operation results creation file creat dir operation results creation directory symlink rename 
semantic actions various alternatives check attributes path name inode file recognized operation determine operation valid 
raise violation invalid operation calling function violation 
attributes operations referenced semantic actions denotes characteristics process file associated recognized operation denotes path name file denotes new owner denotes new path name 
semantic action second alternative fig 
raises violation file created process 
semantic action third alternative raises violation recognized open rw operation associated device file 
semantic actions crest file fourth alternative 
semantic action raises violation file associated operation inside tmp directory home directory specified environment variable 
second third semantic actions update environment variables indicate new file new path created 
semantic action raises violation file inside tmp directory home directory 
semantic actions chown chmod raise violation file created process 
semantic action rename raises violation old path name associated rename operation created program new path name inside home directory invoker 
summarize trace policy specifies execution rdist host blanc may open publicly readable file reading open file created reading open device file reading writing create new file directory symbolic link tmp directory home directory invoker change permission mode ownership file created rename file created host directory 
trace policy allows rdist change permission mode files created program execution attacks exploit rdist change permission mode files bin sh detected 

design implementation section presents design implementation specification intrusion detection system distributed program execution monitor monitors executions programs distributed system detect behavior inconsistent trace policies 

design target platform distributed system consists hosts connected local area network 
host system collects audit trails system operations occur host include system calls 
consists director specification manager trace dispatchers trace collectors analyzers situated various hosts distributed system 
trace dispatcher collector 


architecture perspective host 
design combines distributed data collection data reduction decentralized analysis 
system enables audit data collected filtered individual hosts data analysis carried concurrently multiple hosts 
component designed minimize amount audit data needs transferred network 
fig 
depicts architecture perspective host distributed system 
shows data flow components 
analyzers components perform monitoring 
analyzer checks execution trace subject violations respect trace policy 
analyzer thought runtime counterpart policy specification 
number analyzers running system may change dynamically 
fig 
analyzers running associated different trace policy 
analyzer may associated trace policy single execution rdist 
second analyzer may associated trace policy concerning behavior single execution 
third analyzer may monitor executions passwd vi 
additional analyzers started new subjects need monitored 
analyzers terminate subjects monitor exit 
instance user executes rdist analyzer associated trace policy concerned rdist executed monitor execution rdist analyzer fig 

analyzer reports erroneous behavior monitored subject director carries appropriate response incident notifying system security officers starting additional analyzers 
analyzer run host system 
analysis audit data distributed multiple hosts distributed system 
trace dispatcher host analyzers running 
responsible sending execution traces subjects analyzers running host 
conceptually reads audit trace hosts system merges form system trace distributed system filters pred pid sp see sec 
obtain trace subject sp required analyzer 
trace dispatcher gets audit records trace collectors situated various hosts 
depending subjects monitored attached analyzers trace dispatcher may may request audit records trace collector particular host 
identifies trace collectors audit records needed monitoring requests audit records long needed 
trace collector runs host audit trail resides 
fetches audit records directly audit repository sends records trace dispatchers possibly situated different hosts request records 
filters records records requested dispatcher sent minimizing network bandwidth monitoring system 
specification manager enables system administrator manage security specifications 
administrator add modify delete security specifications system specification manager interface 
specification manager starts analyzers monitor program executions programs need monitored executed 

specification manager specification manger keeps trace policies specification database 
trace policy associated selection expression indicating subjects policy concerned 
high level subject program executions users hosts 
system level subject consists distributed processes 
new distributed process created program started specification manager checks selection expressions determine distributed process belongs monitored subjects 
invokes corresponding analyzer monitor new process 
parallel hyperparser 
structure analyzer 
recall section execution program distributed process 
distributed process identified process id pid user representing program executing host running 
selection expression distributed process identified pid user program host simple matching determine distributed process belongs monitored subjects specified selection expression 
specification manager receives audit record indicating process pid associated user executes program host matches pid selection expression trace policy 
selection expression trace policy matches audit record new subject instantiated 
example selection expression rdist trace policy causes instantiation subject rdist user executes rdist pid process created 
analyzer associated analyzer started monitor subject 
general analyzers monitor trace policy subject 

analyzers analyzer monitors execution subject respect trace policy 
different analyzer constructed trace policy invoked subject monitored starts 
determines execution monitored subject violates trace policy parsing execution trace 
fig 
shows structure analyzer consists parallel hyperparser lexical analyzer semantic action module 
parallel hyperparser forms core analyzer 
constructed pe grammar representing trace policy 
fig 
depicts structure parallel hyperparser 
parallel hyperparser consists sequential set global environment variables shared initialization procedure performing initial environment assignments global environment variables 
hyperparser top parser similar hyperparser environment grammar 
mis hyper hyper hyper hyper parser parser gee parser parser 
shared memory set environment variables 
parallel hyperparser 
hyperparser start notion start expression 
hyperparser contains set local environment variables local initialization procedure performing initial environment assignments local environment variables set lexical procedures reading recognizing terminals set possibly recursive generating applying production rules 
may contain alternative right hand sides 
hyperparser local variable current token holds token processing 

form core hyperparser 
hp xo corresponding xo 
xm 
calls function inspect token input queue sets current token token 
function waits returns token available 
subsequently uses environment variables generate current production rule obtaining terminals yi terminals xi right hand side 
see sec 
lexical procedures case terminals identified subsequently called sequence 
procedures return successfully attached environment assignments semantic actions performed returns indicating success 
llp xo represents set alternative order processed determined consulting input token 
processing failure indication called procedure causes hyperparser backtrack start processing alternative immediately return failure indication 

parsing analyzer starts calls initialization procedure parallel hyperparser information monitored subject initialize environment variables 
calls initialization procedure lexical analyzer dispatcher module semantic action module information subject monitors 
initialization passes control parallel hyperparser 
parallel hyperparser performs global initialization procedures initialize global environment variables subsequently starts 
reads tokens dispatches input queue appropriate 
dispatching token hyperparser waits queue hyperparser empty token accepted hyperparser pauses calling token actions recognition previous token performed feeds token hyperparser 
hyperparser active single time blocked waiting token 
hyperparser starts initializes local environment variables 
calls hp start notion left hand side 
execution hyperparser driven input tokens 
hyperparser parallel hyperparser permits run parallel synchronization constraints affecting parsing correctness 
pauses lexical procedure token available input queue empty 
particular hp si stops input token available hyperparser starts 
purpose hyperparser parse sequence tokens input queue report violations 
hyperparser parses sequence tokens input queue successfully sentence recognized parallel hyperparser 
input sentence sentence pe grammar signaling detection violation 
lexical analyzer scans source input tokens pe grammar 
hyperparser invokes lexical analyzer specification expected token type lexical analyzer returns success failure indication token value case success 
semantic action module contains necessary procedures performing semantic actions 
includes procedure violation reports violation pertinent information security officer 
procedure terminate parser allows parsing continue 
general users code procedures semantic actions 

unix prototype built prototype single host design 
serves proof concept implementation approach 
prototype written programming language 
programming language chosen wide spread portability different unix platforms 
prototype runs solaris operating system uses auditing services provided sun bsm audit subsystem 
bsm audit subsystem provides log ties occur system 
records sequence system events order occurrence 
audit trails contain trace system 
audit record contains information process id user id process involved path name inode permission mode files accessed 
contain information program process running 
added audit record preprocessor associate program identification audit record 
audit record preprocessor serves purposes 
filters audit records irrelevant monitoring system 
second translates bsm audit records format required monitoring system 
keeps array pg holds identification program process currently executing 
reads audit record associated process id associates program pg record 
monitors exec fork calls updates array accordingly 
exec call invokes program program associated new process fork call creates new process program associated new process parent 
prototype maintains table registered programs 
entry contains name program pathname inode physical file contains program 
identification program started execve event inode number record key pathname unique identifier program 
example attacker create hard link setuid root program execute hard link effect executing setuid root program 
pathname execve record indicate execution setuid root program 
prototype started processes typically executing system 
generally impossible trace back processes got created audit trail audit records modified deleted 
obtain identifications programs existing processes executing audit record preprocessor inspects kernel memory initializes array pg starts 

experimental efforts written trace policies setuid root programs servers unix including fingerd rdist sendmail passwd vi 
trace policies tested prototype different kinds intrusions 
intrusions exploit vulnerabilities rdist sendmail 
experiments described performed sun sparcstation mb memory running solaris 
configured audit system log successful events users network daemons including inetd fingerd 
original version rdist sendmail replaced sun versions vulnerabilities removed solaris 
prototype runs continuously analyzes audit data generated audit system real time reports violations security specification 
intrusions realized combinations perl scripts programs 
intrusion exploited vulnerability rdist intrusion exploited vulnerability sendmail program causes sendmail create setuid shell tmp directory owned root publicly executable 
third intrusion caused overwrite shadow password file values attacker desires 
prototype detected intrusions seconds 
noticeable degradation performance noted 
fig 
shows report generated prototype intrusion 
trace policy fig rdist 
intrusion produced violations 
rdist changed ownership file created program 
second rdist changed permission mode usr bin 
time elapsed occurrence violation detection approximately seconds 
time detection obtained library call hyperparser executed semantics action called violation function 
time operation obtained audit records 
bin sh bin sh violation tue may sec tue may sec rdist nodeid path violation tue may sec tue may sec chmod rdist nodeid path usr bin mode 
report generated prototype 
tested prototype scenario involving simultaneous modifications password file 
scenario simulated manually 
window author logged superuser executed command vi shadow modify shadow password file 
subsequently author logged normal user window executed passwd change password 
trace policy requires execution passwd vi modify password file time 
passwd program obtained old password started modify password file prototype detected reported violation 
violation detected approximately seconds passwd opened shadow password file 
solaris associated audit record denotes finishing time system call 

advancements specification intrusion detection 
identified aspects program behavior security relevant detection model traces formal notion monitored subjects 
model uses formal language describing intended behavior programs 
addition developed prototype intrusion detection system detects attacks exploiting vulnerabilities privileged programs unix 
approach lends decentralized analysis system enhances scalability intrusion detection system 
particular data analysis carried various analyzers situated different hosts 
audit data relevant analyzer precisely defined enabling effective audit filtering trace collectors 
approach explicitly addresses security problems due lack synchronization concurrent programs 
innovation approach grammars specifying valid traces programs 
advantage results mature discipline formal languages readily applied 
developed language framework parallel environment grammars specifying trace policies 
parameterized grammars express large variety trace policies compact manner 
parsed efficiently cases practical importance 
described principal features parsing method illustrated application detection intrusions exploit vulnerabilities security critical programs 
detection system limitations 
trace policy deals mainly operations file accesses subject authorized perform 
consider particular data values subject reads writes 
detection reading writing unauthorized data values require inclusion description authorized data values specifications 
contemporary audit records expanded capture data values resulting significant increase overhead costs 
addition monitoring privileged programs specification approach monitor network components network services relevant security including domain name services dns network file systems routers 
thes methodology developing trace policies programs may useful research developing security policies computer systems networks 
acknowledgments supported part defense advanced research projects agency contract dod dabt darpa order national security agency university research program contract dod mda 
authors heather hinton anonymous referees helpful comments revising 
anderson computer security threat monitoring surveillance technical report james anderson fort washington pa april 
denning intrusion detection model ieee transactions software engineering vol 
pp 

forrest sense self unix processes proceedings symposium security privacy oakland ca may pp 

ilgun ustat real time intrusion detection system unix proceedings symposium security privacy oakland ca may pp 

javitz valdes nides statistical component description justification technical report computer science laboratory sri international menlo park ca march 
kernighan programming language 
englewood cliffs nj prentice hall 
ko execution monitoring ity critical programs distributed system specification approach 
phd thesis department computer science university california davis september 
available cs 
ucdavis edu ko thesis ps 
ko fink levitt automated detection vulnerabilities privileged programs execution monitoring proceedings th computer security application conference orlando fl december 
kumar classification detection computer intrusions 
phd thesis department computer science purdue university august 
lamport time clocks ordering events distributed system communications acm vol 
pp 

lunt real time intrusion detection expert system ides final technical report technical report computer science laboratory sri international menlo park ca feburary 
heterogeneous data translations environment grammars ieee software ing vol 
pp 

sun microsystems man pages rdist remote file distribution program 
sunsoft mountain view california solaris shield security module august 
vaccaro liepins detection anomalous computer session activity proceedings security privacy oakland ca may pp 

wall schwartz programming perl 
ca reilly associates 
