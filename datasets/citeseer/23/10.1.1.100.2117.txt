design evaluation wide area event notification service antonio carzaniga university colorado boulder david rosenblum university california irvine alexander wolf university colorado boulder components loosely coupled system typically designed operate generating responding asynchronous events 
event notification service application independent infrastructure supports construction event systems generators events publish event notifications infrastructure consumers events subscribe infrastructure receive relevant notifications 
primary services provided components infrastructure notification selection determining notifications match subscriptions notification delivery routing matching notifications publishers subscribers 
numerous event notification services developed networks generally centralized server select deliver event notifications 
suffer inherent inability scale wide area networks internet number physical distribution service clients quickly overwhelm centralized solution 
critical challenge setting wide area network maximize expressiveness selection mechanism sacrificing scalability delivery mechanism 
presents siena event notification service designed implemented exhibit expressiveness scalability 
describe service interface applications algorithms networks servers select deliver event notifications strategies optimize performance 
results simulation studies examine scalability performance service 
categories subject descriptors network architecture design distributed networks network communication network topology store forward networks network protocols applications routing protocols distributed systems client ser effort sponsored defense advanced research projects agency air force research laboratory air force materiel command usaf agreement numbers air force office scientific research air force materiel command usaf number national science foundation number ccr 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied defense advanced research projects agency air force research laboratory government 
address antonio carzaniga alexander wolf department computer science university colorado boulder ucb boulder usa alw cs colorado edu address david rosenblum department information computer science university california irvine irvine ca usa dsr ics uci edu carzaniga rosenblum wolf ver distributed applications local wide area networks internet internetworking routers performance systems design studies modeling techniques simulation modeling applications simulation modeling model validation analysis simulation modeling types simulation discrete event general terms algorithms experimentation performance additional key words phrases event notification publish subscribe content addressing routing 
asynchrony heterogeneity inherent loose coupling characterize applications wide area network promote event interaction natural design abstraction growing class software systems 
emerging building block systems infrastructure called event notification service rosenblum wolf 
envision ubiquitous event notification service accessible site wide area network suitable supporting highly distributed applications requiring component interactions ranging granularity fine coarse 
conceptually service implemented network servers provide access points clients 
clients access points advertise information events subsequently publish multiple notifications kind previously advertised 
advertisement expresses client intent publish particular kind notification 
access points subscribe notifications interest 
service uses access points notify clients delivering notifications interest 
clearly event notification service complements general purpose middleware services point point multicast communication mechanisms offering communication integration facility 
event notification service carry selection process determine published notifications interest clients routing delivering notifications clients interested 
addition serving clients interests selection process event notification service optimize communication network 
information drives selection process originates clients 
specifically event notification service may asked apply filter contents event notifications deliver notifications contain certain specified data values 
selection process may asked look patterns multiple events deliver sets notifications associated pattern event occurrences individual event occurrence matched filter 
primary purpose event notification service support notification selection delivery challenge face wide area setting maximizing expressiveness selection mechanism sacrificing scalability delivery mechanism carzaniga 
expressiveness refers ability event notification service provide powerful data model design evaluation wide area event notification service capture information events express filters patterns notifications interest data model basis optimizing notification delivery 
terms scalability referring simply number event generators number event notifications number notification recipients need discard assumptions local area networks low latency abundant bandwidth homogeneous platforms continuous reliable connectivity centralized control 
recognize important attributes event notification service expressiveness scalability including security reliability fault tolerance address 
intuitively simple event notification service provides selection mechanism reduced multicast routing transport mechanism numerous scalable implementations 
service provides selection mechanism efficiency service routing notifications affected power language construct notifications express filters patterns 
power language increases complexity processing 
practice scalability expressiveness conflicting goals traded 
presents siena event notification service designed implemented maximize expressiveness scalability 
section describe service formally defined application programming interface api extension familiar publish subscribe protocol birman 
candidate server topologies protocols section 
describe section routing algorithms service deliver event notifications clients algorithms designed specifically distributed networks event servers 
followed description strategies optimizing performance notification selection process 
supported part results simulation studies analysis scalability design choices section 
simulation studies focus alternative service architectures hierarchical topology peer peer topology 
particular study architectures perform various classes applications densities distributions clients differ 
conclude sections discussion related brief indication plans 

framing problem solution discussed section event notification service implements key activities notification selection notification delivery 
naive approach realizing activities employ central server subscriptions recorded notifications initially targeted notifications evaluated subscriptions notifications sent relevant subscribers 
solution logically simple impractical face scale 
clearly service architected distributed system activities spread network hopefully exploiting sort locality hopefully exhibiting reasonable growth complexity 
general form distributed event notification service composed interconnected servers serving subset clients service carzaniga rosenblum wolf object interest advertise publish servers event service interested party subscribe notify access point fig 

distributed event notification service 
shown 
terms proxy broker term server 
clients kinds objects interest generators events interested parties consumers event notifications 
course client act object interest interested party 
kinds clients interact locally accessible server functions access point network wide service 
practice service wide area network pattern matchers routers overlaid top wide area communication facility internet 
reasonable allocation servers place server administrative domain low level wide area communication network 
creating network servers provide distributed service sort gives rise critical design issues 
interconnection topology 
configuration servers connected 
routing algorithm 
information communicated servers allow correct efficient delivery messages 
processing strategy 
network heuristics message data processed order optimize message traffic 
design issues studied extensively years contexts 
challenge find solution particular domain wide area event notification leveraging previous results positive negative possible 
terms interconnection topology essentially broad classes choose hierarchy general graph 
existing distributed event notification services jedi cugola tibco product tib rendezvous tm adopt hierarchical topology 
analysis section shows topology exhibit significant performance problems 
siena adopted general graph common terms means servers organized peer peer relationship detail section 
hybrid structures hierarchy peers peers hierarchies topology consider requires inherent struc design evaluation wide area event notification service ture service applications order proper subdivision peers hierarchies 
having knowledge violate notion service general purpose 
desire event notification service general purpose complicates routing problem service 
particular assume objects interest knowledge interested parties 
event notifications addressed routed relatively simple manner example electronic mail message 
assume particular locality objects interest interested parties fact bears strong relationship server topology issue 
best try take advantage locality structure message traffic emerges 
demonstrate advertisements subscriptions serve basis 
considerations solving routing problem seen choice alternatives 
common alternatives need broadcast piece information servers network broadcast required lack priori knowledge locality 
alternative broadcasts notifications implies notification matching performed local server subscriptions received server 
alternative suffers drawback notifications delivered local servers serving parties interested notifications 
second third alternatives try take advantage emergent locality structure 
particular second alternative involves broadcast subscriptions 
shortest path algorithm route notifications back local servers interested parties 
third alternative advertisements broadcast subscriptions establish paths akin virtual circuits notifications routed local servers interested parties 
course alternatives suffer cost having store subscriptions advertisements servers 
drivers trade alternatives fairly straightforward identify design general purpose service choice suboptimal situation discuss section 
fortunately improve situation considerably intelligent allocate notification matching tasks network 
design issue concerns processing strategy 
observe practice parties interested similar events 
put way distinct subscriptions define partially completely overlapping sets notifications 
similar observation objects interest advertisements 
sketch observation leads processing strategy subscriptions assume corresponding strategy exists advertisements section presents detailed discussion strategies 
observation relationship subscriptions strategy works follows 
subscription reaches server client server server propagates subscription defines new selectable notifications set selectable notifications defined previously propagated subscription 
benefits accrue approach reduce network costs pruning propagation new subscriptions 
second reduce storage requirements servers 
third carzaniga rosenblum wolf reducing number subscriptions held server reduce computational resources needed match notifications server 
similar strategy propagation advertisements 
point discussion treated notifications subscriptions advertisements terms 
concepts somewhat concrete basis material sections 
mentioned information associated event represented data structure called notification 
refer data model encoding schema notifications event notification model simply event model 
existing event notification services adopt simple record structure notifications frameworks define object oriented model distributed event specification sun microsystems corba notification service object management group 
closely related event model subscription language defines form expressions associated subscriptions 
aspects subscription language crucial issue expressiveness 
scope subscription predicates 
aspect concerned visibility subscriptions contents notification 
record notification structure visibility determines fields specifying subscription 
power subscription predicates 
aspect concerned sophistication operators forming subscription predicates 
predicates apply possible filtering individual notifications possible formation patterns multiple notifications 
dual subscription language advertisement language issues scope power perspective object interest interested party 
consequence difference perspective interested parties may subscribe patterns multiple notifications objects interest advertise individual notifications 
sections elaborate basic concepts approach achieving expressiveness scalability 

api semantics minimum event notification service exports functions define usually referred publish subscribe protocol 
interested parties specify events interested means function subscribe 
objects interest publish notifications function publish 
siena extends publish subscribe protocol additional interface function called advertise object interest uses advertise notifications publishes 
siena adds functions unsubscribe 
subscriptions matched repeatedly cancelled call unsubscribe 
advertisements remain effect cancelled call 
table shows interface functions siena 
expression subscribe unsubscribe pattern expression advertise filter discuss patterns filters greater detail 
parameter design evaluation wide area event notification service publish notification subscribe string identity pattern expression unsubscribe string identity pattern expression advertise string identity string identity table 
interface siena 
identity specifies identity object interest interested party 
objects interest interested parties identify siena advertise subscribe respectively cancel advertisements subscriptions 
requirement siena imposes identifiers unique 
note siena maintains mapping identities interested parties handlers 
handler specifies means interested party receives notifications callbacks messages sent communication protocol smtp 
separating concepts level clients allows possibility redirecting temporarily suspending flow notifications objects interest interested parties supports mobility clients 
detailed discussion handlers scope 
notifications event notification simply notification 
example notification displayed represents stock price change event 
individual attribute type aname notification string class finance exchanges stock time date mar mst string exchange nyse string symbol dis float prior float change float earn fig 

example notification 
purely structural value derived attributes 
attribute names simply character strings 
attribute types belong predefined set primitive types commonly programming languages database query languages fixed set operators defined 
justification choosing typing scheme scalability 
systems finds example java distributed event specification sun microsystems corba notification service object management group notification value named explicit notification type 
carzaniga rosenblum wolf implies global authority managing verifying type space clearly feasible internet scale 
hand define restricted set attribute types construct arbitrary notifications 
having defined set perform efficient routing content notifications 
discuss section content routing distinct advantages alternative schemes channel subject routing 
filters event filter selects event notifications specifying set attributes constraints values attributes 
attribute constraint tuple specifying type name binary predicate operator value attribute 
operators provided siena include common equality ordering relations types substring prefix suffix operators strings operator matches value 
attribute type name value matches attribute constraint type name operator value type type name name operator value value 
say attribute satisfies matches attribute constraint notation 
matches covers 
shows filter matches price increases stock dis stock exchange nyse 
string class finance exchanges string exchange nyse string symbol dis float change fig 

example event filter 
filter subscription multiple constraints attribute interpreted conjunction constraints matched 
say notification matches short filter attribute constraints name case matching rule applies 
notification may contain attributes correspondents filter 
table gives examples illustrate semantics second example match notification missing value attribute level 
third example match constraints specified attribute level subscription matched value level notification 
patterns filter matched single notification notification attribute values pattern matched notifications attribute values combination form 
generic design evaluation wide area event notification service notification subscription string alarm time date string alarm string alarm time date string alarm integer level string alarm integer level table 
examples string alarm integer level string alarm integer level integer level string alarm integer level integer level pattern correlate events relation 
example programmer stock market analysis tool interested receiving price change notifications stock price related stock changed certain amount 
rich languages logics exist allow express event patterns mansouri sloman 
siena attempt provide complete pattern language 
goal study pattern operators exploited optimize selection notifications event notification service 
restrict pattern syntactically sequence filters fn matched temporally ordered sequence notifications matching corresponding filter 
example pattern shown matches increase price stock msft followed subsequent increase price stock 
string finance exchanges string symbol msft float change string finance exchanges string symbol float change fig 

example event pattern 
general observe sophisticated forms patterns split set simple subscriptions matched externally siena access point interested party induce extra network traffic 
say pattern simple composed single filter similarly say subscription simple requests simple pattern 
carzaniga rosenblum wolf possible semantics filter sequence operator 
interests scalability opted simplest possible semantics ignores order matches notifications due network latency see section 
understand semantics chose consider pattern read followed assume submitted subscription time 
notifications match meaning notification generated time ti object interest matched time tj server responsible matching pattern similarly notifications matched 
consider sequence notifications shown match order semantics chose server matching uses matches followed bm matches form match pattern uses matches followed matches form second match pattern 
match pattern sequence second match sequence 
matcher receives discards ignores subsequent matched matches matches bm 
ignores waiting ignores generated matched sequence matched matching pattern begins anew second match pattern completed advertisements seen covering relation defines semantics filters subscriptions 
define semantics advertisements defining similar relation motivation advertisements inform event notification service kind notifications generated objects interest best direct propagation subscriptions 
idea subscription defines set interesting notifications interested party advertisement defines set notifications potentially generated object interest 
advertisement relevant subscription sets notifications non empty intersection 
relation defines set notifications covered advertisement expression says advertisement covers notification covers individual attribute notification 
note dual subscriptions define minimal set attributes notification contain 
contrast subscriptions filter advertisement multiple constraints attribute interpreted disjunction conjunction constraints need satisfied 
table shows examples relation second example match attribute date notification defined advertisement 
fourth example match value attribute notification match constraints defined advertisement 
design evaluation wide area event notification service notification advertisement string alarm string login string username string alarm string alarm time date string login string username string logout string username table 
examples string alarm string login string username string alarm string login string username string alarm string login string username variants semantics siena studied alternative semantics siena semantics advertisement semantics 
subscription semantics semantics subscriptions defined extensions patterns 
advertisements solely relation enforced notifications may optimization purposes ignored completely implementation service 
notification delivered interested party submitted subscription advertisement semantics advertisements subscriptions 
particular notification published object delivered interested party advertised filter covers subscription covers ns 
semantics notification delivered interested party 
important covering relations far defined number relations express semantics subscriptions advertisements attribute matches attribute constraint notification matches filter interpreted subscription filter notification matches filter interpreted advertisement filter relations derived carzaniga rosenblum wolf filter covers filter wheref interpreted subscriptions 
formally means defines superset notifications defined 
covers filter wherea interpreted advertisements 
formally means defines superset notifications defined 
filter interpreted advertisement interpreted subscription 
formally means defines set notifications non empty intersection set defined relations intuitive meaning relations 
define equality relation filters define semantics serve cancel previous subscriptions advertisements respectively 
simple unsubscription unsubscribe identity interested party filter event notification service cancels simple subscriptions subscribe submitted interested party subscription filter covered 
semantics extended easily patterns unsubscription pattern fk cancels previous subscriptions gk gk fk 
analogous way cancel previous advertisements covered relation note unsubscription cancels previous subscriptions advertisements effect 
impose constraints existing subscriptions 
example subscribing filter price price result creation reduced subscription price price 
unsubscription simply effect cover subscription 
note subscriptions covered unsubscription cancelled unsubscription 
interested party initially subscribes specific filter say change subscribes generic say change filter covers generic subscription say change effect cancel previous subscriptions revert specific change 
design evaluation wide area event notification service timing issues semantics siena depends order siena receives processes requests subscriptions notifications 
instance subscription semantics subscription effective processed unsubscription cancels processed 
general case service request say subscription generated time rg received time rr completely processed time rp rg rr rp 
siena guarantees correct interpretation immediately rp 
notice external delay rg rr caused external communication mechanisms means controllable siena 
delay rp rg directly caused computations possibly communication delays internal siena 
siena semantics best effort service 
means implementation siena introduce unnecessary delays processing required prevent race conditions induced external delay processing delay 
clients siena resilient race conditions instance allow possibility receiving notification cancelled subscription 
siena associates timestamp notification indicate published 
allows service detect account effects latency matching patterns means certain limits actual order notifications recognized 

architectures server topologies protocols previous section describes protocol clients objects interest interested parties communicate servers act clients access points event notification service 
mentioned section servers communicate order cooperatively distribute selection delivery tasks wide area network 
servers arranged interconnection topology server server communication protocol 
topology protocol define refer architecture event notification service 
architecture assumed implemented top lower level network infrastructure 
particular topological connection servers necessarily imply permanent direct physical connection servers tcp ip 
server server protocol number network protocols smtp standard encoding tunneling techniques 
assume point discussion server communicate number specific servers exchanging messages 
assumption communication clients servers 
section consider basic architectures hierarchical client server advent accurate network time protocols existence satellite global positioning system gps reasonable assume existence global clock creation timestamps reasonable time sensitive applications rely timestamps 
carzaniga rosenblum wolf acyclic peer peer general peer peer 
consider hybrid architectures 
scalable ignore degenerate case centralized architecture having single server 
hierarchical client server architecture natural way connecting event servers hierarchical topology illustrated 
topology pairs connected servers interact asymmetric client server relationship 
directed graph represent topology architecture refer architecture hierarchical client server architecture simply hierarchical architecture 
server number incoming connections client servers outgoing connection master server 
server master server referred root 
client server protocol servers fig 

hierarchical client server architecture 
clients hierarchical architecture straightforward extension centralized architecture 
requires basic central server modified propagate information receives subscriptions master server 
fact server server protocol hierarchical architecture exactly protocol described section communication servers external clients event notification service 
terms communication server distinguished objects interest interested parties 
practice means server receive subscriptions advertisements notifications client servers send notifications back client servers 
demonstrate section main problem exhibited hierarchical architecture potential overloading servers high hierarchy 
server acts critical point failure network 
design evaluation wide area event notification service fact failure server disconnects subnets reachable master server client subnets 
acyclic peer peer architecture acyclic peer peer architecture servers communicate symmetrically peers adopting protocol allows bi directional flow subscriptions advertisements notifications 
undirected graph represent topology architecture 
external clients service standard client server protocol described section 
configuration connections servers architecture restricted topology forms acyclic undirected graph 
shows acyclic peerto peer architecture servers 
communication servers represented thick undirected lines communication clients servers represented dashed arrows 
client server protocol server server protocol fig 

acyclic peer peer server architecture 
important procedures adopted configure connections servers maintain property acyclicity routing algorithms rely property assume instance servers connected path 
ensuring difficult costly wide area service administration decentralized autonomous 
hierarchical architecture lack redundancy topology constitutes limitation assuring connectivity failure server isolates subnets reachable servers directly connected general peer peer architecture removing constraint acyclicity acyclic peer peer architecture obtain general peer peer architecture 
acyclic peer peer architecture architecture allows bi directional communication servers carzaniga rosenblum wolf topology form general undirected graph possibly having multiple paths servers 
example shown 
client server protocol server server protocol fig 

general peer peer server architecture 
advantage general peer peer architecture previous architectures requires coordination offers flexibility configuration connections servers 
allowing redundant connections robust respect failures single servers 
drawback having redundant connections special algorithms implemented avoid cycles choose best paths 
typically messages carry time counter routes established minimal spanning trees 
consequently server server protocol adopted general peer peer architecture accommodate extra information 
hybrid architectures wide area large scale decentralized service siena poses different requirements different levels administration 
words account intermediate levels local area wide area 
potentially take advantage intermediate levels gain efficiencies considering different architectures different levels network granularity 
example case multi national reasonable assume high degree control coordination administration cluster subnets intranet 
administrators intranet able design manage network event servers deployed subnets idea adopt hierarchical architecture intranet 
course intranet connect networks outside influence administrators 
arise general peer peer architecture global level serving interconnect different corporate intranets having hierarchical architecture 
illustrated 
design evaluation wide area event notification service intranets fig 

hierarchical general hybrid server architectures 
acyclic peer peer protocol fig 

general acyclic hybrid server architectures 
general peer peer protocol carzaniga rosenblum wolf cases want invert structure illustrated 
example suppose clusters subnets carry high degree message traffic specific applications security reasons small fraction traffic visible outside cluster 
case efficiency reasons general peer peer architecture preferable clusters high level architecture acyclic peer peer 
cluster gateway server able filter messages protocol inside cluster adapt protocol clusters 
example protocol locally cluster discover minimal spanning trees messages associated protocol propagated outside cluster 
hybrid architectures somewhat complicated basic architectures 
offer opportunity tailor server server topologies protocols way localities exploited 

routing algorithms processing strategies topology servers defined servers establish appropriate routing paths ensure notifications published object interest correctly delivered interested parties subscribed 
general observe notifications meet subscriptions network notifications selected subscriptions dispatched subscribers 
common principle realized spectrum possible routing algorithms 
possibility maintain subscriptions access point broadcast notifications network notification meets matches subscription subscriber immediately notified locally 
expect number notifications far exceed number subscriptions advertisements strategy appears offer possible efficiency consider siena 
routing strategies siena devise efficient routing algorithms employ principles ip multicast routing protocols deering cheriton 
similar protocols main idea routing strategy siena send notification event servers clients interested notification possibly shortest path 
principle applies patterns notifications 
specifically formulate generic principles requirements routing algorithms downstream replication notification routed copy far possible replicated downstream close possible parties interested 
principle illustrated 
upstream evaluation filters applied patterns assembled upstream close possible sources patterns notifications 
principle illustrated 
principles implemented classes routing algorithms involves broadcasting subscriptions second involves broad design evaluation wide area event notification service publish publish publish replication fig 

downstream notification replication 
filter filter assemble fig 

upstream filter pattern evaluation 
subscribe subscribe subscribe carzaniga rosenblum wolf casting advertisements subscription forwarding implementation advertisements routing paths notifications set subscriptions propagated network form tree connects subscribers servers network 
object publishes notification matches subscription notification routed subscriber reverse path put place subscription 
advertisement forwarding implementation uses advertisements safe send subscription objects interest intend generate notifications relevant subscription 
advertisements set paths subscriptions turn set paths notifications 
advertisement propagated network forming tree reaches server 
server receives subscription propagates subscription reverse paths advertisers submitted relevant advertisements activating paths 
notifications forwarded activated paths 
process forwarding subscriptions siena exploits commonalities subscriptions 
particular siena prunes propagation trees propagating paths covered previous requests 
derived covering relation determine new subscription covered previous forwarded 
advertisements treated similarly relation discussed detail handled similar way 
subscription forwarding algorithms realize subscription semantics advertisement forwarding algorithms realize advertisement semantics 
show section advertisement forwarding algorithms needed order implement upstream evaluation principle event patterns 
addition principles introduced devised strategies lead optimizations resource usage 
discussed carzaniga carzaniga 
putting algorithms topologies describe detail subscription forwarding advertisement forwarding algorithms implemented hierarchical peer peer architectures 
particular describe principal data structures maintained servers main algorithms process various requests coming clients servers 
consider simple subscriptions section deals patterns 
high level general terms algorithms acyclic peerto peer architectures attempt reduce communication storage computation costs pruning spanning trees network siena servers 
specifically subscription forwarding algorithms operate broadcasting subscriptions spanning trees rooted interested parties 
server receives new subscription terminate propagation subscription propagated general subscription covers new 
way servers prune spanning trees new subscriptions propagated 
design evaluation wide area event notification service advertisement forwarding algorithms operate analogous fashion pruning spanning trees rooted objects interest 
computation spanning trees network solved problem dalal metcalfe discuss construction 
focus details pruning 
algorithms hierarchical architectures simpler subscriptions advertisements propagated spanning trees merely propagated unique paths root hierarchy 
filters poset 
order keep track previous requests relationships came forwarded event servers maintain data structure common different algorithms topologies 
data structure represents partially ordered set poset 
subscription filters partial order defined covering relations advertisement filters 
denote ps poset defined denote pa poset defined shows example poset subscriptions 
orig den orig den airline ua price price orig den airline ua price orig den airline ua price dest mxp fig 

example poset simple subscriptions 
arrows represent immediate relation note aa transitive relations diagram representation memory store immediate relationships 
poset ps ordered immediate predecessor filter immediate successor filter ps 
top level filters refer roots successors poset 
inserting new filter poset different cases apply special interest forwarding algorithms added root filter exists poset inserted poset non empty set successors 
detail root filters produce network traffic due propagation subscriptions advertisements 
shape subscription carzaniga rosenblum wolf advertisement poset roughly reflects degree opportunity processing strategies 
particular poset extends vertically indicates subscriptions interdependent just subscriptions summarizing ones 
conversely poset extends horizontally indicates similarities subscriptions opportunities reduce network traffic 
hierarchical client server architecture 
hierarchical server maintains subscriptions poset ps 
subscription ps associated set called subscribers containing identities subscribers filter 
server variable master possibly null containing identity master server 
subscriptions 
receiving simple subscription subscribe server walks subscription poset ps starting root subscription looking filter covers new filter contains subscribers set subscribers 
server finds subscription ps simply terminates search effect 
happens interested party subscribed generic filter 
case server find subscription search process terminates producing possibly empty sets representing immediate successors immediate predecessors respectively 
filter exists ps server simply inserts subscribers 
inserted ps andx inserted subscribers set 
inserted root subscription server forward subscription master server 
particular master null server sends subscription subscribe 
server removes sets subscribers subscriptions covered done recursively walking breadth poset ps starting subscriptions recursion stopped subscription removed 
note process subscriptions left associated interested parties subscriptions removed ps 
illustrate processing subscriptions hierarchical architecture scenario depicted 
depicts hierarchical server master server 
server receives processes subscription airline ua client right side shows subscription poset ps server 
new subscription inserted root subscription server forwards master server 
server receives subscription airline ua dest den client new subscription covered previously forwarded subscription root subscription ps server forward master 
server processes subscription airline client root subscription forwarded server 
case server eliminates subscribers subscriptions covered new 
design evaluation wide area event notification service airline ua airline ua airline airline airline ua dest den server airline ua airline ua airline ua dest den airline airline ua dest den subscribers server new server airline ua new removed fig 

example scenario hierarchical client server architecture subscription 
carzaniga rosenblum wolf particular removes subscription airline ua subscribers subscription subscription removed 
notifications 
server receives notification subscriptions poset ps breadth looking subscriptions matching particular server initializes queue root subscriptions 
server iterates element server appends immediate predecessors visited 
server removes queue 
process terminates contains subscriptions cover server sends copy subscriber subscriptions independently matching subscriptions server master server master server sender server sends copy master server 
unsubscription 
cancel previous subscriptions exactly inverse subscriptions 
slightly complex handle expensive terms communication 
reason single unsubscription cancel previous subscription 
reason unsubscription cancel root subscriptions turn uncover specific subscriptions turn new root subscriptions 
case server forward unsubscription master server forward new root subscriptions 
specifically server receives unsubscription unsubscribe removes subscribers set subscriptions ps covered algorithm server case simple variation algorithm computes set matching subscriptions notification 
difference relation fill queue consequence removing subscriptions remain empty sx set subscribers 
sx set subscriptions sr sr set root subscriptions ps 
server computes sr union immediate predecessors subscription sr server removes subscriptions sx ps forwards unsubscription master server sends subscriptions master server 
continues scenario 
server receives unsubscription airline client consequence removes subscribers subscription airline subscription covered unsubscription case filters coincide 
subscription contains subscribers server removes 
root subscription server forwards unsubscription master new root subscription airline ua dest den 
advertisements 
advertisement forwarding technique apply hierarchical architecture 
possible propagate advertisements server master useless master design evaluation wide area event notification service sub airline airline airline ua dest den airline airline ua dest den server cancelled fig 

example scenario hierarchical client server architecture unsubscription 
server respond sending back subscriptions 
fact hierarchical server considers clients normal clients outside event notification service forward subscriptions 
practice advertisements silently dropped 
peer peer architectures subscription forwarding 
peer peer architectures server maintains set neighbors containing identifiers peer servers server connected 
peer peer server maintains subscriptions poset ps extension subscription poset hierarchical server 
hierarchical server peer peer server associates set subscribers subscription associates additional set called forwards contains subset neighbors forwarded 
general vs acyclic architectures 
subscription notification propagated origin destination minimal spanning tree 
acyclic peer peer architecture path connects servers exists unique spanning tree coincides network servers 
propagating message say subscription server simply sends neighbors excluding sender server propagates considered sender origin message unique event notification service access point message originally posted 
general peer peer architecture servers connected different paths 
server receives message forwarded network servers server sure forward links minimal spanning tree rooted origin message 
similar known problem broadcasting information network 
order simplify description algorithms focus acyclic peer peer architectures algorithms general peer peer architectures carzaniga 
peer connection setup 
connects server sending peer connect 
accept refuse connection 
case accepts peer sends confirmation message back carzaniga rosenblum wolf servers add address neighbors set 
accepting server forwards root subscription subscriptions poset ps requesting server adding corresponding forwards set 
servers dynamically disconnected peer disconnect request 
receives peer disconnect removes neighbors set root subscriptions removes forwards sets 
subscriptions 
algorithm peer peer server processes subscriptions extension algorithm hierarchical server 
server receives subscription subscribe searches subscriptions poset ps subscription covers subscribers subscribers 
case search terminates effect subscription equal subscribers server adds subscribers possibly empty sets representing immediate successors immediate predecessors respectively 
server inserts new subscription adds subscribers 
cases server removes subscriptions ps covered removes ps subscriptions subscribers 
procedure differs corresponding procedure hierarchical server peer peer server forwards subscription neighbors 
formally subscription ps defined follows forwards neighbors nst forwards ps sf words forwarded neighbors server downstream server spanning tree rooted original subscriber second term formula subscriptions covering forwarded server term formula 
second term formula functor stands spanning tree accounts fact may multiple paths connecting subscriber potential publishers propagation subscription follow computed spanning trees rooted original subscribers viewing spanning tree rooted directed graph may refer paths traveling away going downstream edges traveling going upstream edges 
practice propagation process excludes neighbors downstream server interest spanning tree rooted subscriber nst trivially computed topology acyclic architecture spanning tree topology coincides topology 
topology general architecture computation complicated necessary techniques link state distance vector routing algorithms known design evaluation wide area event notification service widely deployed 
alternative approach propagating subscriptions dalal metcalfe broadcasting algorithm dalal metcalfe 
term formula represents important optimization server situation generic subscriptions propagated neighbors 
illustrate processing subscriptions acyclic peer peer architecture scenario depicted 
shows fragment peer peer event notification service 
example server connected servers 
server local client server sends subscription airline server 
poset shown right side represents subscription poset ps server 
shown new subscription inserted root subscription ps forwarded servers server nst set subscription 
ones subscription ps subscribers denoted outgoing arrow subscription forwards denoted incoming arrow 
intuitively arrows indicate direction notifications 
shows effect second subscription airline ua orig den sent server server 
subscription inserted ps immediate predecessor previous root subscription forwarded server neighbor forwards set covering subscription airline 
client subscribes airline 
case subscription ps simply added subscribers set 
nst set subscription empty subscription forwarded server 
time server forwards subscription neighbor server adds forwards set consequently removes forwards sets subscriptions covered example server removes forwards set subscription airline ua orig den 

unsubscription effect removing subscriber number subscriptions ps 
specifically server receives unsubscription unsubscribe removes subscribers set subscription covered consequence cancellations subscriptions remain empty subscribers set subscriptions removed ps 
subscriptions affect nst set subscriptions 
particular removing subscriber subscription means removing distribution spanning tree turn add neighbor servers nst paths spanning tree subscriber see equation page 
order reduce forwards set subscriptions equation server forwards corresponding neighbor server added nst 
reduced forwards sets subscriptions affect forwards sets covered subscriptions 
effect produced term equation covered subscriptions 
intuitively means generic subscriptions necessary re forward specific subscriptions propagation blocked existence carzaniga rosenblum wolf airline airline airline ua dest den airline ua dest den airline airline airline fwd server airline new forwards subscribers server server nst airline sub airline ua dest den fwd sub server airline fwd sub fwd airline ua dest den sub fig 

example scenario acyclic peer peer architecture 
design evaluation wide area event notification service fwd airline ua dest den airline az fwd sub fwd sub fwd sub airline ua price sub fwd server nst airline ua dest den airline az price sub fwd sub empty airline ua dest den airline az fwd sub fwd sub fwd sub airline ua airline ua airline az price dest den price fwd sub fwd sub fwd sub airline ua dest den fwd sub fwd sub airline ua price fwd sub fwd airline ua dest den sub airline az price fwd sub fig 

acyclic peer peer architecture 
generic subscriptions 
illustrate processing acyclic peer peer architecture scenario depicted 
depicts subscriptions poset server received subscriptions local clients neighbor servers 
state server just receives unsubscription filter airline client step processing unsubscription client server removes subscriber subscriptions covered unsubscription filter airline 
shows subscriptions poset ps state 
root subscriptions affected subscription airline ua changes nst set initially empty include server subscription airline az carzaniga rosenblum wolf remains empty subscribers set 
consequence server forwards unsubscription airline ua neighbor server added nst set forwards second unsubscription airline az previous forwards 
eventually server processes immediate predecessors canceled subscriptions forwards changed consequence previous 
shows state subscription poset time 
subscription airline ua price forwarded server successor forwarded server see equation 
subscription airline ua dest den need propagated neighbor servers received successors 
subscription airline az price root subscription forwarded neighbor server nst server 
notifications 
algorithm peer peer architectures processes notifications exactly operates hierarchical architecture 
subscription forwarded subscriber covers advertisement forwarding 
subscription forwarding algorithm previous sections described needed implement advertisement forwarding algorithm 
fact exploit duality subscriptions advertisements transpose subscription forwarding algorithm advertisement forwarding 
extent read description subscription forwarding algorithm replacing terms regarding subscriptions corresponding terms regarding advertisements replacing terms regarding notifications corresponding terms regarding subscriptions obtain exact description advertisement forwarding algorithm 
main difference respect subscription forwarding structure interacting computations realizes forwarding advertisements realizes forwarding subscriptions 
computations similar data structures similar algorithms equivalent ones described 
particular server poset advertisements pa ordered relation 
advertisement associated set identities advertisers set identities forwards 
computations interact sense advertisement forwarding constrains subscription forwarding 
instance maintaining ps processing subscription server global set neighbors uses subset neighbors neighbors specific neighbors defined set advertisers listed pa advertisements covering formally advertisers neighbors ta note effect constraint new advertisements viewed subscription forwarding computation new peer connections dropped peer connections respectively 
server receives new advertisement covers set subscriptions sk server reacts design evaluation wide area event notification service forwarding sk immediately sender advertisement 
matching patterns far seen simple subscriptions simple notifications handled event servers 
major additional functionality provided siena matching patterns notifications 
functionality implemented distributed monitoring upstream evaluation principle set forth section 
match patterns servers assemble sequences notifications smaller subsequences single notifications 
advertisements server knows notifications subpatterns may sent neighbors technique requires advertisement semantics 
addition notifications patterns available neighbors server patterns previous subscriptions server set recognize 
term pattern factoring refer process server breaks compound subscription smaller compound simple subscriptions 
subscription factored elementary components server attempts group factors compound subscriptions forward delegation 
available patterns table 
server maintains table tp available patterns 
table simply advertisements poset pa addition usual advertisements contains patterns server processed 
pattern tp associated set identities providers contains peer servers available 
table shows pattern providers string alarm failed login integer attempts string file string operation file change table 
example table available patterns 
example table available patterns 
table says notifications matching filter notifications signal failed login integer attribute named attempts available server notifications matching filter file modification notifications available servers 
pattern factoring 
suppose server receives compound subscription subscribe 
fk 
server scans trying match fi pattern pi fi fi fi ki single compound pattern pi ki patterns contained tp example assuming table available patterns shown table suppose server receives subscription sequence failed login alarms attempts respectively alarm failed login attempts carzaniga rosenblum wolf alarm failed login attempts followed file modification event file passwd file passwd operation file change 
response requested available string alarm failed login integer attempts string alarm failed login integer attempts string file passwd string operation file change string alarm failed login integer attempts string alarm failed login integer attempts string file string operation file change table 
example factored compound subscription 
server factors matching filters sequence available patterns 
table shows subscription factoring computed server 
operator siena combining subpatterns sequence operator output factoring process sequence 
pattern delegation 
compound subscription divided available parts server send necessary subscriptions collect required subpatterns set monitor receive notifications matching subpatterns observe distribute occurrence pattern 
deciding subscriptions send server tries reassemble elementary factors groups delegated servers implementing upstream evaluation principle 
selection subpatterns eligible delegation follows intuitive criteria 
example contiguous subpatterns available single source grouped delegated source 
complete discussion criteria carzaniga 
example table server group filters delegate subpattern defined corresponding subscriptions server 
send subscription subscribe pattern string alarm failed login integer attempts string alarm failed login integer attempts server send remaining filter simple subscription subscribe string file passwd string operation file change servers 
server start monitor recognizes sequence 
depicts example corresponds tables subscriptions discussed 
particular server delegates server subscribes monitors diagram shows server handles delegated subscription 
assuming available server available design evaluation wide area event notification service subscribe monitor fig 

pattern monitoring delegation 
monitor server server sends corresponding subscriptions starts monitor 
evaluation claims scalability event notification service difficult challenge 
particular demonstrate ability scale fully doing require deployment implementation service thousands computers world 
conceding pragmatics approach build argument reasoning qualitatively rationale expressiveness notification selection mechanism performing simulation studies determine relative performance various architectures certain hypothetical usage scenarios constructing prototype implementation service proof concept 
section presents elements argument 
study required fully validate design early evidence strongly suggests achieved goal developing event notification service suitable scale wide area network 
rationale chosen expressiveness interface siena event notification service tailored application basic publish subscribe protocol 
certain factors affecting scalability design network latency data structure size intrinsic service control 
key factors control definitions notifications filters patterns complexity computing covering relations 
chosen level expressiveness siena represents compromise notification structure attribute types attribute operators approximate understood widely database query language sql 
covering relations behaved predictable sense exhibit arguably reasonable computational complexity deriving expressiveness filters assuming brute force unoptimized algorithm complex ity determining subscription notification related number attribute constraints carzaniga rosenblum wolf tion filter number attributes notification 
complexity computing reflects computation intersection attribute values notification constraints values appearing subscription 
complexity individual comparison predefined types included siena 
exception string type efficient comparison algorithms known 
complexities computing aa sa nm represent number attribute constraints appearing respective subscription advertisement filters 
complexity represents comparison attribute constraint filter corresponding attribute constraints filter 
checking covering relation filters amounts universal quantification 
choice types operators comparing pair attribute constraints reduced evaluating appropriate predicate constant values constraints complexity 
example see covers simply verify 
restrict expressiveness patterns siena interests efficiency 
patterns discuss section simple sequence filters 
computational complexity matching pattern length pattern 
means linear number filters covering relation complexity 
analysis covering relations exhibit complexity quite reasonable scalable event notification service 
fact factors practice relatively small typically making computations negligible compared network costs attempting reduce 
achieved expressiveness approximates sql 
simulation studies questions ask wide area event notification service 
initial simulation studies concentrated particular question scalability respect architectures algorithms described previous sections 
simulation framework 
simulation framework consists parts configuration servers clients mapped sites widearea network assignment application behaviors objects interest interested parties 
site represents subnet possibly hosts cost communication hosts site assumed zero 
configuration servers reflects choice event notification service architecture application behaviors involve basic service requests advertise subscribe unsubscribe publish 
primary measurement interest quantity refer cost 
assign relative cost site site communication network calculate effect cost varying number simulation parameters 
words evaluate architectures algorithms terms communication induced application behaviors interested characterizing degree architecture algorithm combination design evaluation wide area event notification service absorb increased communication costs face increasing application demands 
network configuration 
shows layered structure network configuration simulation framework 
bottom level model event service topology network topology fig 

layers network configuration 
wide area network topology 
model defines sites depicted cubes links depicted heavy lines cubes 
develop realistic network topologies account important properties latency approximate relative costs real wide area networks publicly available generator random network topologies implements transit stub model zegura 
discussion models generating network topologies zegura 
results performed networks sites 
simplifying assumptions sites links level 
assume costs computation sites communication links linear functions load 
second links constant latency 
third sites links infinite capacity 
note consequence assumptions model account effect congestion 
top level network configuration model event notification service topology 
model defines servers depicted shaded ovals clients depicted white ovals interconnection servers resulting choice architecture depicted heavy lines servers assignment client server depicted dotted arrow mapping clients servers sites wide area network depicted dashed lines ovals cubes 
simplification simulations involve homogeneous architectures hybrid architectures possible see section 
georgia tech internet topology models gt itm 
carzaniga rosenblum wolf client represents object interest interested party general possible client 
allocate server site configure server connect servers residing neighbor sites network topology configure client server local site 
words assume locations interconnections servers image underlying network topology 
assumption significantly reduces parameter space simulation 
reasonable assumption reflects structure domains characterize internet clark 
addition simulating various multi server architectures simulate single server centralized architecture serves baseline comparisons centralized architecture performs better chosen simply simplicity 
course centralized architecture requires forwarding algorithm comprises single server 
application behavior 
behavior application event notification service involves collective behaviors objects interest interested parties 
individual behaviors specified sequences service requests 
particular object interest executes sequences times advertise publish publish cycle publishes notifications 
addition average delay publish requests specified delays generated poisson distribution 
similarly interested party executes sequences times subscribe recv recv unsubscribe recv represents operation waiting receiving notification 
scenario generation 
input simulation tool generated process 
step random network topology generated discussed 
second step generated topology combined scenario parameter file specifies event notification service topology application behavior 
results 
space studies possible simulation framework quite extensive 
explore portion space focusing usage scenarios distinguish basic architecture algorithm combinations centralized hierarchical client server subscription forwarding acyclic peer peer subscription forwarding acyclic peer peer advertisement forwarding 
furthermore simulating objects interest interested parties associated particular kind event 
main purpose simulations highlight relative behaviors architectures extensive set data plots carzaniga carzaniga 
design evaluation wide area event notification service algorithms choose complicate experiments simulating additional kinds events associated objects interest interested parties 
conceivable choice affect results way intuition tells relative behaviors remain 
reveal scaling properties architecture algorithm combinations approach keep behaviors objects interest interested parties constant varying number objects interest number interested parties 
cases number network sites 
referring characterization section parameter values andn objects interest indicating sequences iterations average inter publication delay interval 
behavior parameters interested parties andq indicating iterations received notifications 
ran scenarios artificially low ratios publications advertisement notifications subscription order produce conservative simulation results 
applications ultimately benefit delivery notifications advertisements subscriptions considered necessary overhead obtain benefit 
low ratios serve exaggerate overhead 
real applications expect service deliver higher volume notifications correspondingly lower overhead represented ratios 
results shown plots data points represent average simulation runs parameter values 
plots acyclic peer peer architecture advertisement forwarding behavior unstable variance set simulation runs negligible choose include error bars plots 
majority plots horizontal axis gives number interested parties logarithmic scale ranging vertical axis gives linear measure cost 
mentioned cost values derived assignment relative costs communicating network links 
absolute value data point cost meaningless relative value gives useful characterization 
plots aliases event notification service architecture algorithm combinations ce centralized hs hierarchical client server subscription forwarding acyclic peer peer subscription forwarding aa acyclic peer peer advertisement forwarding 
total cost 
basic metric event notification service total cost providing service 
total cost calculated summing costs site site message traffic 
total cost captures important aspect scalability revealing communication cost impacted increases load service 
compares total costs incurred distributed architectures objects interest omit curves centralized architecture total cost far outweighs distributed architectures exhibiting exponential blowup starting interested parties plot 
interesting observations plots 
carzaniga rosenblum wolf total cost millions total cost millions arch hs aa objects interested parties arch hs aa objects hs aa interested parties hs aa total cost millions total cost millions arch hs aa objects interested parties arch hs aa objects hs aa interested parties fig 

comparison total costs incurred distributed architectures 
interested parties total cost essentially constant meaning point additional cost incurred delivering notifications additional interested parties 
call saturation point high likelihood object interest site object interest near interested party 
recall objects interest publishing notifications 
second architectures scale sublinearly number interested parties saturation point 
point object interest interested party site 
cost deliver notification nonzero 
number interested parties grows likelihood increases new interested party located site interested party 
marginal cost additional interested party decreases saturation point cost zero 
sublinear scaling character architectures discerned easily plots portion data saturation point linear scale horizontal axis 
third number objects interest increases hierarchical client server architecture subscription forwarding performs worse increasingly large constant factor compared acyclic peer peer architecture subscription forwarding 
attributed fact acyclic peerto peer architecture penalized broadcast subscriptions hierarchical client server architecture propagates notifications root hierarchy forced interested parties exist hs aa total cost millions total cost millions design evaluation wide area event notification service arch hs aa objects interested parties arch hs aa objects hs aa interested parties hs aa total cost millions total cost millions arch hs aa objects interested parties arch hs aa objects hs aa interested parties fig 

comparison total costs saturation point 
side root network 
generates potentially significant traffic unnecessary notifications 
acyclic peer peer architecture advertisement forwarding displays strikingly unstable cost profile low densities interested parties 
hand costs essentially follow acyclic peer peer architecture subscription forwarding saturation point passed 
effect evident number objects interest increase 
attribute conservative choice behavior objects interest studies 
particular object interest quite frequently compared number publications generates iteration 
acyclic peer peer architecture subscription forwarding appears scale predictably circumstances represent choice cover wide variety scenarios 
cost service request 
event notification service efficient amortize cost satisfying newer client requests cost satisfying previous client requests 
manifestation network effect 
average service cost calculated dividing total cost introduced total number client requests 
low value ratio indicates low overhead 
recall studies configure network clients connected servers local sites client server communication cost treated zero 
service cost purely reflects choice architecture algorithm combination 
hs aa carzaniga rosenblum wolf see interesting things results data analysis 
centralized architecture unreasonable essentially service cost service cost arch ce hs aa objects ce hs aa interested parties arch ce hs aa objects ce hs aa interested parties service cost service cost fig 

comparison service costs 
arch ce hs aa objects ce hs aa interested parties arch ce hs aa objects ce hs aa interested parties scenarios compared architectures 
second advertisement forwarding shows unstable high numbers objects interest saturation point interested parties reached 
third low numbers objects interest low numbers interested parties costs dominated messagepassing costs internal siena relatively notifications generated network parties interested receiving notifications significant internal cost incurred setting routing paths objects interest interested parties 
hierarchical client server architecture subscription forwarding situation subscriptions forwarded root server resulting lower setup costs 
number objects interest number interested parties increases advantage quickly disappears recovering saturation point interested parties 
acyclic peer peer architecture subscription forwarding extremely high number objects interest independent number interested parties 
effect explained series plots 
cost subscription notification 
results studying total service cost incurred architecture algorithm combinations hierarchical client server architecture acyclic peer peer architecture subscription forwarding appear promising design evaluation wide area event notification service choices 
clearly distinguished examine kind service request favors optimizations 
average subscription cost calculated dividing total cost subscription related messages number subscriptions processed 
graph shows subscription cost incurred hierarchical client server architecture acyclic peer peer architecture single object interest 
trying understand different cost drivers architectures simulated scenarios single object interest varying behavioral parameters 
cases observed significant variation cost 
additional simulations varied density interested parties highlight difference architectures 
results simulations reveal costs primarily dependent density interested parties 
particular subscription cost evidently higher acyclic peer peer architecture hierarchical client server low densities interested parties architectures benefit increasing densities interested parties 
main difference way architecture forwards subscriptions 
acyclic peer peer architecture subscription propagated network network sites subscription goes hops cost 
hierarchical client server architecture hand requires subscription forwarded upward root server case number hops cost log 
subscription arch hs objects interested parties fig 

comparison subscription costs hierarchical client server acyclic peerto peer architectures varying numbers interested parties 
acyclic peer peer architecture greater setup costs subscriptions reducing average cost notifications 
compares notification costs incurred acyclic peer peer architecture hierarchical client server architecture single object interest 
particular scenario difference notification costs architectures constant respect number interested parties 
difference clearly visible global service costs shown 
observe constant bracket depends number ignored notifications 
scenarios simulated total number notifications produced objects interest exceeds number notifications consumed hs carzaniga rosenblum wolf notification cost arch hs objects interested parties fig 

comparison notification costs hierarchical client server acyclic peerto peer architectures varying numbers interested parties 
interested parties 
example scenario represented results total notifications produced interested party consumes notifications terminating leaving ignored notifications 
cost ignored notifications clearly shown degenerate scenarios notification costs plotted number notifications published 
average notification cost calculated dividing total cost notification related messages number notification processed 
scenario object interest emits varying number notifications interested parties 
hierarchical client server architecture incurs constant cost due fact notification propagated root hierarchy acyclic peer peer architecture incurs cost notification remains local access server 
second scenario interested party consumes exactly notification terminates 
hierarchical client server architecture notification cost constant acyclic peer peer architecture incurs initial cost notification subsequently amortized zero cost subsequent ignored notifications 
avg cost service arch hs interested parties hs publications avg cost service hs arch hs interested parties hs publications fig 

comparison notification costs hierarchical client server acyclic peerto peer architectures varying numbers publications degenerate cases 
design evaluation wide area event notification service worst case site cost 
critical issue communication network behaves face congestion 
simulation model directly simulate congestion see section 
ask related question gives indication architecture approach level congestion 
metric worst case site cost 
calculated scenario averaging cost communication incurred site simulations scenario computing maximum average site costs 
max cost site max cost site arch hs objects hs interested parties arch hs objects hs interested parties max cost site max cost site arch hs objects hs interested parties arch hs objects hs interested parties fig 

comparison worst case site costs 
plots show maximum cost incurred site hierarchical client server acyclic peer peer architectures scenarios 
hierarchical client server architecture exhibits slightly lower worst case site cost low densities objects interest 
high densities objects interests high volumes notifications hierarchical client server architecture incurs greater maximum site cost acyclic peer peer architecture 
words high volume notifications cause congestion reached sooner hierarchical client server acyclic peer peer architecture 
explain difference behavior 
see attributable simple overloading root server hierarchical client server architecture 
counterintuitive observation fact acyclic peer peer architecture gains advantage object interest interested party opposite side network traffic remains localized neighborhood object interest 
carzaniga rosenblum wolf situation rarely arises high densities interested parties 
difference behavior explained solely effect relatively high numbers ignored notifications unavoidably forwarded root server discussed 
summary 
summarize differences hierarchical client server acyclic peer peer architectures follows hierarchical client server architecture lower subscription cost acyclic peer peer log ando respectively 
cost depend behavior objects interest interested parties 
architectures subscription cost amortized increased densities interested parties 
cost difference architectures significantly reduced high densities interested parties 
cost delivering notification interested parties architectures 
acyclic peer peer architecture cost ignored notifications hierarchical peer peer architecture pays log 
practice hierarchical client server architecture low densities interested parties subscribe unsubscribe frequently 
acyclic peer peer architecture suitable scenarios total cost dominated notifications especially total number notifications exceeds number notifications consumed interested parties presence ignored notifications 
prototype implemented prototype siena realizes subscription event notification service 
current implementation siena offers application programming interfaces java 
interfaces provide nearly complete data model subscription language described section 
time data type implemented 
event servers provided current implementation 
written java hierarchical client server algorithm written acyclic peer peer architecture subscription forwarding 
servers form hybrid topology 
client server server server communication siena simple event notification protocol implemented top tcp ip connections 
encapsulated application level protocols smtp 

related section briefly review related event notification services 
complete discussion topics carzaniga carzaniga 
source binary packages available www cs colorado edu siena 
design evaluation wide area event notification service classification framework order understand classify technologies related siena compare perspective server architectures affects scalability perspective subscription language affects expressiveness 
table presents comparison terms architectures described section terms classification subscription languages shown table 
classify subscription languages scope expressive power 
scope aspects subscription limited considering single notification reducing language filters consider multiple notifications involving filters patterns subscription limited considering single designated field notification consider multiple fields 
expressive power concerned sophistication operators forming subscription predicates ranging simple equality predicate expressions involving predefined operators expressions involving user defined operators 
note user defined operators suffer disadvantage having arbitrary unknown potentially unbounded complexity 
computation covering relations allow pruning propagation trees undecidable 
table derive classes subscription languages table 
channel language client subscribes notifications sent explicitly identified channel discrete communication path 
subject language client subscribes notifications publisher identified relevant particular subject selected predefined set available subjects 
difference channel subject channel typically allows straight equality test channel channel cnn subject subsumes richer predicates wild card string expressions subject identifiers subject comp os 
cases filter applies single known field 
content language client subscribes notifications content matches client specified predicates evaluated content evaluation predicates limited individual notifications simple contentbased language patterns multiple notifications content language patterns 
observe subscription languages user defined predicates rare table combined language classes corresponding predefined user defined predicates single entry object oriented active databases user defined predicates 
remainder section discuss relationship siena technologies mentioned table greater detail 
related technologies idea integrating different components means messages pioneered research system called field reiss 
commercial products followed hp dec fuse hart sun field implements message integrated environment software development tools cooperate carzaniga rosenblum wolf subscription language channel subject content content patterns centralized field reiss corba event service object management group java distributed event specification sun microsystems java message service sun microsystems elvin segall arnold gem mansouri sloman yeast krishnamurthy rosenblum corba notification service object management group object oriented active databases ceri widom architecture hierarchical client server corba event service object management group nntp kantor lapsley jedi cugola pear tibco tib rendezvous wray hawkes yu yu siena siena peer peer ip multicast deering cheriton gryphon banavar allows user defined operators subscription predicates support predefined operators 
table 
classification related technologies 
power design evaluation wide area event notification service simple equality expressions predefined operators expressions user defined operators single notification field scope single notification multiple fields multiple notifications multiple fields channel restricted subject general subject restricted content general content table 
typical features subscription languages 
restricted content patterns general content patterns exchanging messages 
messages carry service requests tools announcements changes state 
domain event notifications subscriptions systems limited 
tools generate fixed set messages cases dec fuse set messages statically mapped set callback procedures hard wired tool 
yeast krishnamurthy rosenblum event action system supporting definition rules specify actions taken occurrence particular events 
message integrated environments yeast general purpose event notification service rich event pattern language 
action part rule unix shell script 
gem mansouri sloman language allows specify event action rules similarly yeast 
different specialized kind system conceptually equivalent event action systems active databases ceri widom 
main difference event notification service siena event action system yeast event notification service dispatches event notifications responses events actions executed interested parties externally service 
event action system active database hand responsible executing actions taken response event notifications 
usenet news system main protocol nntp kantor lapsley best example scalable user level communication facility 
news articles modeled mail messages propagated network servers 
new server join network connecting slave master server part infrastructure 
articles posted newsgroups organized hierarchical name subject space 
nntp provides primitive filtering capability articles selected means simple expressions denoting sets group names dates postings 
example slave server request groups comp os posted date 
group names reflect general subject content messages filter realize coarse grained users definitely inadequate general purpose event notification service 
result common news readers client programs usenet news allow users perform additional sophisticated filtering messages transferred server carzaniga rosenblum wolf outside purview service reduce network traffic 
service scalable quite heavyweight fact time frame article propagation ranges hours days inadequate event notification service 
ip multicast deering network level infrastructure extends internet protocol realize communication service 
network realizes extension referred mbone 
multicast address virtual ip address corresponds group hosts 
ip datagrams addressed host group routed host belonging group 
hosts join leave group time reporting group membership specific protocol fenner 
event notification service thought multicast communication infrastructure addresses explicit host addresses arbitrary expressions interest subscribing equivalent joining group 
ip multicast infrastructure major limitations generic event notification service 
issue map expressions interest ip group addresses scalable way 
separate service similar dns sufficient resolve mapping 
assume exist multicast addresses map possible expression interest 
second crucial issue limited expressiveness addressing scheme 
fact ip multicast relates different ip groups possible exploit similarities subscriptions mapped different ip group addresses 
different notifications matching subscription sent separate multicast addresses routed parallel independently ip multicast network 
network level technology somewhat related siena active networks 
active network network programmable switches tennenhouse 
sense programmability feature active networks form content routing content packets govern packet routing expressive manner achieve routing optimizations 
active networks general purpose event notification service siena possibly implementation platform 
prominent efforts intended lead specifically event notification services 
corba notification service object management group java tm message service sun microsystems 
important note efforts realize event notification service 
simply specify interfaces implemented service critical issue implementation provide scalable service left unaddressed 
commercial products tibco tib rendezvous tm tm hewlett packard speak tm messaging system tm provide implementations event notification service 
products support distribution service specifically designed support wide area scale degree discussed 
particular typically achieve simple distribution federation centralized servers statically configured inter server routing 
design evaluation wide area event notification service research efforts concerned development event notification service including ibm gryphon aguilera banavar elvin segall arnold jedi cugola wray hawkes yu yu 
gryphon distributed content message brokering system similar siena 
techniques developed gryphon complementary ones siena 
particular gryphon uses fast algorithm match notification large set subscriptions aguilera 
algorithm similar described gough smith gough smith exploits commonalities subscriptions 
subscriptions specify constraint attribute algorithm organizes order test value attribute notification subscriptions 
main difference siena gryphon propagates subscription network siena propagates generic subscriptions 
yu propose event notification service implemented peer peer architecture proxy servers server distinguished root server 
sense architecture amalgam siena hierarchical acyclic peerto peer architectures 
believe hierarchical arrangement servers superior scalability non hierarchical 
simulated implemented architecture architecture scalability properties determined 
elvin centralized event dispatcher rich event filtering language allows complex expressions interest 
centralized architecture facilitates efficient event filtering poses severe limitations scalability 
provides structured event notifications filtering capabilities extended structure events 
distributed architecture similar usenet news servers 
architectures tib rendezvous jedi hierarchical subscriptions simplified regular expression applied single string subject tib rendezvous entire notification jedi 
simpler selection mechanism offered adopts channel addressing 
channel addressing specified corba event service object management group java tm distributed event specification sun microsystems 
shortcomings channel addressing scheme recognized corba java communities specifications superseded advanced service specifications line interface siena 
particular omg added additional filtering notification contents specification corba notification service object management group sun specified radically new service java tm message service sun microsystems features sql message selectors 

described siena distributed internet scale event notification service 
described design interface service semantics topological arrangements event servers routing algorithms realize service network servers 
simulations carzaniga rosenblum wolf performed confirm intuitions scalability topologies algorithms studied 
summarize hierarchical architecture suitable low densities clients subscribe unsubscribe frequently peer peer architecture performs better total cost communication dominated notifications 
situations high numbers ignored notifications notifications subscribers peer peer architecture superior hierarchical architecture 
plan continue exploring parameter space simulations directions 
particular simulating different ranges behavioral parameters see algorithms sensitive different classes applications 
plan extending design prototype implementation siena number ways 
instance plan enhance design interface algorithms support mobility clients 
plan implement advertisement forwarding algorithm prototype allow apply pattern matching optimizations discussed 
additionally plan extensions support expression quality service parameters especially suited integration software components 
new features allow implementation grouping mechanisms transactions notifications 
plan explore important aspects wide area event notification service 
specifically currently developing model secure publish subscribe communication mechanisms reliability fault tolerance event notification services 
significant new direction intend explore realization content routing fundamental network service provided physical network fabric carzaniga 
essentially involves replacing architecture described section assume event notification service siena implemented top lower level network protocol tcp ip 
viewed differently involves embedding content processing routing capabilities upper layer network topology lower layer 
content routing supported fashion efficient scalable event notification services supported new class networks built high speed content routers 
acknowledgments cugola di alfonso fuggetta richard hall dennis heimbigner andr van der hoek considerable contributions discussing shaping ideas 
aguilera strom sturman chandra 
matching events content subscription system 
eighteenth acm symposium principles distributed computing podc atlanta ga may pp 

banavar chandra mukherjee strom sturman 
efficient multicast protocol content publish subscribe design evaluation wide area event notification service systems 
th ieee international conference distributed computing systems icdcs austin tx may pp 

birman 
process group approach reliable distributed computing 
communications acm dec 

hp environment architecture new generation software tools 
hewlett packard journal technical information laboratories hewlett packard june 
carzaniga 
architectures event notification service scalable wide area networks 
ph 
thesis politecnico di milano milano italy 
carzaniga rosenblum wolf 
interfaces algorithms wide area event notification service 
technical report cu cs oct department computer science university colorado 
revised may 
carzaniga rosenblum wolf 
achieving scalability expressiveness internet scale event notification service 
proceedings nineteenth acm symposium principles distributed computing podc portland july pp 

carzaniga rosenblum wolf 
content addressing routing general model application 
technical report cu cs jan department computer science university colorado 
ceri widom 
active database systems triggers rules advanced database processing 
morgan kaufmann san mateo 
clark 
policy routing internet protocols 
internet requests comments rfc 
cugola di fuggetta 
exploiting event infrastructure develop complex distributed systems 
proceedings th international conference software engineering icse kyoto japan april pp 

cugola di fuggetta appear 
jedi event infrastructure application development opss wfms 
ieee transactions software engineering 
dalal metcalfe 
reverse path forwarding broadcast packets 
communications acm dec 
deering 
multicast routing datagram internetwork 
ph 
thesis stanford university 
deering cheriton 
multicast routing datagram networks extended lans 
acm transactions computer systems may 
fenner 
internet group management protocol version 
internet requests comments rfc 
gough smith 
efficient recognition events distributed system 
proceedings th australasian computer science conference adelaide australia feb 
hart 
dec fuse building graphical software development environment unix tools 
digital technical journal digital equipment spring 

open protocols inter application communication 
prentice hall englewood cliffs new jersey 
kantor lapsley 
network news transfer protocol proposed standard stream transmission news 
internet requests comments rfc 
krishnamurthy rosenblum 
yeast general purpose event action system 
ieee transactions software engineering oct 
mansouri sloman 
gem generalized event monitoring language distributed systems 
iee iop bcs distributed systems engineering journal june 
object management group 

common object service specification 
technical report july object management group 
carzaniga rosenblum wolf object management group 

notification service 
technical report nov object management group 
object management group 

notification service 
technical report aug object management group 
reiss 
connecting tools message passing field environment 
ieee software july 
rosenblum wolf 
design framework internet scale event observation notification 
proceedings sixth european software engineering conference number lecture notes computer science pp 

springer verlag 
segall arnold 
elvin left building publish subscribe notification service quenching 
proceedings auug brisbane australia sept pp 

sun microsystems 
java distributed event specification 
mountain view ca sun microsystems sun microsystems 
java message service 
mountain view ca sun microsystems tennenhouse smith wetherall 
survey active network research 
ieee communications magazine jan 
wray hawkes 
distributed virtual environments vrml eventbased architecture 
computer networks isdn systems april 
yu estrin govindan 
hierarchical proxy architecture event services 
proceedings stanford ca june 
zegura calvert 
quantitative comparison graph models internet topology 
ieee acm transactions networking dec 
zegura calvert bhattacharjee 
model internetwork 
proceedings ieee infocom san francisco ca april pp 

