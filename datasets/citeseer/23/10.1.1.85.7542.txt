self organized robotic system design autonomous odor localization thesis adam hayes partial fulfillment requirements degree doctor philosophy california institute technology california institute technology pasadena california defended may ii adam hayes rights reserved iii richard murray allowing complete rod goodman giving opportunity 
way benefited insight pietro perona joel christof koch comments helped mold final form 
owe owen holland introduced study collective mobile robotics guided interesting problems 
microsystems lab collective robotics group played role making andrew jim pugh ladd van tol robert wright mauricio ian kelly 
vin cent showing way graduate student starting easton giving opportunity continue tradi tion 
am forever indebted fellow years probably working problem sets 
especially tempted take killing time literally 
family seemingly encouraging support ensuring went hungry 
lastly sarah mathematical expertise endless ap revision constantly reminding important things run batteries 
iv thesis presents methodology designing self organized autonomous robotic systems demonstrates process applied problem finding source airborne odor plume 
design methodology applicable task domains resulting odor localization system extends state art 
design procedure centers ability define specific task performance metric systematically evaluate performance realistic environment define relationships system parameters system performance 
relationships experimentally validated test environment guide design deployable system 
process relies heavily evaluative feedback emphasizes development tools allow collection accurate performance data 
presents reliable multiple robot test bed task enabling sensory hardware validation sensory kinematic models simulation 
reinforcement learning methodology described provides consistent optimization performance minimizing amount required evaluation 
design methodology applied task odor localization 
specifically thesis analyzes basic collective search task derives optimal group size expected performance bounds random coordinated search 
set biologically inspired behaviors permit agent traverse odor plume source describes common characteristics successful algo rithms 
algorithms implemented real test bed simulation verify plume traversal place multiple ing robots expand reachable performance space 
collective search plume traversal combined egocentric source declaration full odor localization task optimized simulation 
design methodology model aid prediction performance choice algorithm parameters complex environments 
flocking behavior designed addition flocking behavior plume tracing algorithm shown produce capable system 
contents vi iii iv motivation 
design methodology 
application odor localization 
thesis overview 
original contributions 
background robotics 
difficulty sensing 
classes control 
designing self organized systems 
need metrics 
odor localization 
design methodology odor localization task design methodology 
phase zero choose task 
phase parameterize control algorithm 
phase line machine learning optimization 
vii phase generate model 
feedback design process 
odor localization problem 
odor plume 
task definition 
performance 
robots sensors simulators real robots 
robot arena infrastructure 
odor sensor 
wind sensor 
sensor simulation 
software 
collective search background 
search task description 
performance metric 
deriving performance 
random search 
coordinated search 
performance comparison 
supporting simulations 
results 

single agent plume traversal algorithms plume traversal 
hit analysis 
plume traversal algorithms 
viii biological inspiration 
algorithm descriptions 
algorithm evaluation 
hit metric generation 
direct evaluation 
results discussion 
parameter search 
optimized algorithms 
evaluation comparison 

designing odor localization system spiral surge algorithm 
collaborative spiral surge 
plume traversal results 
real robots 
sequential search comparison 
kinematic simulations 
full odor localization task 
algorithm optimization 
trends optimization 
model performance 

flocking improved collaboration background 
flocking task 
task definition 
distributed flocking algorithm 
test environments 
kinematic simulation 
ix real robots 
results discussion 
optimization kinematic simulator 
real robots 
flocking collaboration 

bibliography list figures venn diagram depicting space algorithms solve partic ular task 
schematic design process task definition application real problems 
arrows indicate significant interplay design phases 
plume traversal task 
issue define agent trajectory odor hit wind direction information agent approaches plume source 
basic 
equipped wind odor proximity sensors markings overhead tracking 
real robot arena 
plume source visible upper left 
real robot arena seen overhead camera 
bank recharging stations 
underneath robot contact metal plates ground robots posi tioned overhead camera system 
odor sensor closeup 
power spectral density odor sensor output stimulus robot distal plume 
raw distal plume data filtered distal plume data filtered baseline data 
threshold std 
total plume hits received real robots hour perform xi ing random walk behavior 
defined plume boundary indicates plume envelope stable time 
plume hits received real robots hour performing random walk behav ior 
similarity maps suggests significant differences robots 
wind sensor closeup 
sensor circuitry shown left 
average wind direction plume traversal arena measured real robots individual samples averaged spatially 
plume source upper right 
arrow lengths proportional uniformity flow direction tail arrow 
plume traversal arena average plume intensity map 
layout larger arena 
georgia tech plume taken real dye plume tank 
caltech plume generated simulating particle transport real ocean flow data 
plumes flow moves left right flow direction variable caltech plume 
plume hits received simulated robots hour 
example task layout 
simulated analytical results search task 
simulated data lower triangles cost data upper triangles exceed cost data 
agreement simulated analytical results indicates random search model assumptions sound 
plume traversal algorithms 
probability receiving new odor hit space surrounding xii site previous odor hit immediately cessation odor hit 
negative values closer plume source 
hit probability plume axis probability values part 
task layout direct odor localization algorithm evaluation 
agents receive initial odor hit agent start area attempt progress plume find area 
plume outline shown repre sents average odor hit probability generated instantaneous plume images 
plume find area radius equal plume length agent start area encompasses distal plume 
note plume find area sized eliminate influence noisy plume data near source 
odor hit probability different plume tracing algo rithms 
expected time odor hit different plume tracing algorithms 
note odor hit probability low expected time odor hit little importance 
error bars represent standard error mean 
expected downstream traversal odor hit different plume tracing algorithms 
error bars represent standard error mean 
expected cross stream traversal odor hit different plume tracing algorithms 
error bars represent standard error mean 
expected probability successful source location havior 
expected probability successful source location behavior 
note algorithms shown optimized better performance may achievable higher wind variances 
expected probability successful source location pf behav ior 
note point represents optimized performance particular wind variance 
comparison algorithms xiii hit step straight direct step straight evaluation 
comparison algorithms hit zigzag spiral direct zigzag spiral evaluation 
direct evaluation values optimal parameter sets wind values compared direct performances hit optimized parameter sets zigzag spiral algorithms 
gen eral hit parameter sets perform indicating hit optimization transfer real plume plume traversal task algorithms 
spiral surge odor localization behavior 
normalized time finish task group size real robot trials 
lower values better 
normalized distance group size real robot trials 
lower values better 
performance group size real robot trials 
higher values indicate better performance 
performance best ss algorithm basic sequential search different group sizes source find radius sequential algorithm approaches actual source find radius 
higher values better performance 
ss explicitly source find radius performance vary 
performance real robot rr trials group size 
higher values indicate better performance 
performance optimization run normalized max imum value run averaged runs 
error bars indicate standard deviation 
normalized time distance group size gt gt gt ct 
lower values better 
error bars represent standard error 
performance group size gt gt gt xiv ct 
higher values better 
error bars represent standard error 
optimization result frequency curve aver aged runs optimization result frequency curves plume type averaged group size kill attract 
optimization result frequency curves plume type averaged group size kill tract communication types 
optimization result frequency curves plume type averaged group size 
optimization result frequency curves plume type averaged group size kill 
optimization result frequency curves plume type averaged group size attract communication types 
optimization result frequency curves group size averaged gt gt gt communication 
performance versus group size odor localization task small arena generated model kinematic simulator real robots 
performance group size gt gt gt ct generated model kinematic simulator 
higher values better 
error bars represent standard error 
note agreement simulator model plumes communication types 
robot flock sense range bearing neighbors sensory area defined maximum range example 
xv summary generation com com 
obs obs seen 
start goal areas indicated 
large disks obstacles smaller disks shown start area agents 
flocking 
cycle flocking performance experimental condition 
higher values better 
optimal result frequency curves maximum number neighbors observed flocking 
optimal result frequency curves attractive power goal area 
flocking performance group real robots versus maximum number visible neighbors 
higher values better 
performance group size gt gt gt ct 
higher values better 
error bars represent standard error 
inverse normalized time required gt 
inverse normal ized distance required gt 
higher values better 
error bars represent standard error 
list tables xvi wind field characterization 
summary parameters variables 
task cost parameter values 
summary evaluation metrics variables 
algorithm parameter definitions 
parameter evaluation ranges 
parameter definitions table 
optimal parameter values 
optimal zig zag parameter values versus 
parameter definitions table 
spiral surge algorithm parameters 
plume traversal parameter values 
searched parameter values 
parameter definitions table 
full task parameter values simulation 
model parameter values 
distributed flocking algorithm parameters 
chapter suggested title dissertation contains principal themes 
presents methodology designing self organized robotic systems demonstrates application procedure odor localization task 
process provides detailed analysis odor localization problem ranging treatment general search task discussion common qualities efficient plume traversal algorithms 
inspiration biological systems plays role reflecting belief imitation natural systems applied proper context useful engineer 
motivation creation autonomous robots machines sense act world perform useful constant human supervision free humans repetitive dangerous tasks increase productivity immensely 
traditional sense model plan act approach artificial intelligence proven robust unknown dynamic environments years robotics re search provided little way autonomous systems function reliably real world 
shortcoming largely traced extreme difficulty building maintaining accurate world models sensor input uncertain state world change unexpectedly 
problem essentially comes sensing world sensed accurately properly modeled 
prevailing attitude large sector robotics community time sensing communication technology improve eventually level reliability currently obtained highly constrained environments necessary current control algorithms function available real world 
newer behavior approaches robotic controller design emphasize tighter coupling sensation action 
systems importance maintain ing world models reduced planning generally absent task designing system achieve particular goal difficult obvious global activity emerge particular set inter acting behaviors 
swarm intelligence computational behavioral metaphor draws inspiration social insects combines behavior approach redundancy inherent large numbers agents 
systems designed concept exceptionally robust agent failure environmental witness considerable success ant example distance local sensing action programmed agent system objective 
previous attempts training single multiple agent behavior systems focused learning proper sensory action mapping produce desired behavior 
success achieved laboratory domain techniques scale complicated tasks complexity learning problem grows exponentially number states system 
order address real applications different techniques needed 
design methodology thesis presents design methodology relies balance engineering intuition machine learning facilitate real system design 
step process requires engineer assess task develop set parameterized behaviors allows group agents solve 
magic solution proposed done familiarity systems possessing similar function observed biology helpful feedback subsequent design phases assist 
key point behavioral tion drastically reduces size algorithmic search space systematically explored simulated real instantiations task 
second phase design uses simple reinforcement learning algorithm optimize system performance minimal amount evaluation 
eval optimization required priori models system performance rarely exist 
performance evaluation real realistic environments typ ically resource intensive advantageous minimize number samples re quired 
results optimization procedure provide performance levels achievable chosen algorithm parameterization indicate behavioral parameters influence task performance 
third design phase involves definition relationships system parameters system performance 
system parameters encompass algorithmic parameters describe task environment 
relationships experimentally validated test environment guide design deployable system 
task resists sort characterization evaluative optimization performed directly application environment typically expensive experiment scaled version task 
design procedure centers ability define specific task performance metric considered design phase zero occur attempt design parameterized behaviors 
words goes solving problem idea know exactly problem idea intuitive raises interesting questions current practice robotics research developed chapter 
process relies heavily evaluative feedback emphasizes development tools allow collection accurate performance data 
presents reliable multiple robot test bed task enabling sensory hardware validation sensory kinematic models simulation 
application odor localization design methodology applied task odor localization finding source odor plume 
goal develop algorithm enables group relatively simple robots locate odor source enclosed arena 
task breaks subtasks plume finding coming contact odor plume traversal odor plume source source declaration determining odor acquisition characteristics source immediate vicinity 
subtasks wholly independent studied separately purposes building intuition operation successful systems 
plume finding amounts search task added complication due stochastic nature plume sequential search guaranteed succeed 
examines simplified search task analytically derives expressions optimal group size expected cost random suitable swarm intelligence implementations coordinated search strategies 
coordinated strategies perform better additional localization communication capabilities required expensive implement 
results encouraging random approach demonstrate probability target detection low built plume task location plume time variant performance benefit coordinated search diminishes 
plume traversal requires specialized behavior progress direc tion source maintain consistent contact plume 
single agent plume traversal dealt extensively biological literature species relies ability track odor plume source 
insects particularly useful regard incorporate information modalities utilize complicated cognitive maps envi ronment search behavior 
analyzes simple plume traversal strategies behavior concludes basic pattern havior followed algorithm successful 
worthwhile note strategies studied level incorporate restrictions implemented real hardware 
ensures results studies applicable real task 
nature provide certain degree guidance task studied need direct natural corollary 
odor localization task studied agents collectively locate odor source biological systems individual agents usually compete resource head plume 
collaboration strategies guided simplicity attraction repulsion communication 
experimental reasons attraction implemented real test bed simulation verify plume traversal place multiple collaborating robots expand reachable performance space 
performance impact communication strategies studied exclusively simulation 
source declaration necessarily done odor information typically odor sources perceived type sensor short range possible extra sensory apparatus 
phase task studied extensively highly dependent properties particular task environment functional solution 
source declaration behavior combined collective search plume traversal algorithms solve full plume traversal task optimized simulation 
design methodology model aid prediction performance choice algorithm parameters larger range environments 
design methodology applied part flocking behavior 
set basic behaviors conducive implementation real robots shown performance tuned different simulated environments purely 
model describes flocking performance suggested evaluative process extended different types environments model constructed empirically 
furthermore demon flocking capability integrated plume tracing behavior produce better odor localization system 
thesis overview chapter provides review robotics literature relevant 
briefly surveys issues surrounding development autonomous systems describes previous robotic system design approaches 
background odor localization problem provided including discussion biological robotic 
chapter presents system design methodology including line machine learning algorithm 
provides detailed description odor localization problem metrics performance evaluation 
chapter describes tools investigate plume task 
covers real robot platform arena infrastructure developed carry systematic experiments odor wind sensors built enable real robot plume traversal sensor simulator permit extensive experimentation software architecture runs control algorithms 
chapter presents quantitative analysis tradeoffs group size efficiency collective search tasks considers time sensitive nature search completion system operating cost 
search task defined performance metric account costs associated task 
random coordinated search strategies cal expressions derived predict optimal system performance bounds particular task description 
performance benefit coordinated search shown dependent relative values different cost components 
sensor computer simulation support analytical results suggesting assumptions involved derivation sound 
chapter presents investigation odor source localization algorithms turbulent odor plumes 
goal chapter gain better understanding algorithm successful order build capable robust chemical plume traversal systems 
problem plume traversal recast task obtaining odor hit set metrics provides detailed information algorithm function 
odor localization algorithms described demonstrated algorithm parameters tailored particular plume characteristics improved performance 
hit analysis shown capture performance types algorithms accurately concluded failure stems intrinsic shortcomings algorithms tested 
analysis general properties required successful turbulent odor plume traversal algorithms described 
chapter presents investigation plume traversal groups autonomous mobile robots extends address full odor localization task 
distributed algorithm described groups agents solve plume traversal task 
local position odor flow information tightly coupled robot behavior shown sufficient allow robot localize source odor plume 
multiple agents demonstrated increase size solution space reached particular system swarm intelligence solution compares coordinated search strategies task 
addition line machine learning algorithm optimize algorithm performance full odor localization task different environments shown optimal system parameters depend particular task studied 
model relate task parameters system performance 
chapter presents investigation flocking teams autonomous mobile robots principles swarm intelligence 
simple flocking task pre sented 
distributed flocking algorithm conducive implementation embodied agents established algorithms computer animation described 
design methodology followed optimize performance different conditions showing method improve performance gain insight algorithm components contribute system behavior 
shown group real robots executing algorithm emulated sensors successfully flock presence individual agent failure systematic characterization opti mization real robot flocking performance achievable 
integration flocking behavior odor localization algorithm demonstrated produce better odor localization performance 
chapter concludes dissertation summary main results discussion directions autonomous robotics 
original contributions thesis contributes field autonomous robotics advances study odor localization 
particular presents self organized system design methodology relies formulation evaluation specific task metrics 
improved odor localization system derive useful information distal part odor plume 
greater insight tradeoffs sensor reliability evaluation metrics coverage strategy collective search problems 
understanding general properties required successful turbulent odor plume traversal algorithms 
flocking algorithm suited implementation real hardware 
chapter background chapter provides review robotics literature relevant 
briefly surveys issues surrounding development autonomous systems describes previous robotic system design approaches 
background odor localization problem provided including discussion biological robotic 
robotics robot defined device automatically performs complicated repetitive tasks 
purpose sense increase human productivity particularly involved dull dirty dangerous 
robots successful regard 
robots industry worldwide share workload increase 
robots entertainment industry exhibits amusement parks sony aibo simpler toy robots 
service robots abound professional settings medicine promise arrive home lawn vacuum cleaners near 
progress years grey walter built robot george joseph constructed industrial robotic arms 
dreams robotics age exemplified space odyssey star wars realized 
due part fact tasks household chores originally designated robots done quite cheaply humans little financial incentive necessary investment development 
reasons shortcoming far robots performing specific tasks controlled environments examples robots function dynamic sensory rich settings 
difficulty sensing robots slow move real world 
asked missing field robotics interview commonly known father industrial robotics put simply thing big difference sensory perception 
isn amount software take junk really application 
need physical execution 
physical execution need great sensory perception 
vision tactile sense software 
observation argues continuing improve sensors sensory processing systems occurs outside field robotics 
highly evolved biological sensory systems human visual system relied accurately report state outside world time reasonable proper robotics design able account sensory inconsistencies 
sebastian thrun leading robotics researcher robots inherently uncertain state environments 
uncertainty arises sensor limitations noise fact interesting environments certain degree unpredictable 
question produce reliable performance presence sensory noise dealt differently different schools control developed robotics field 
classes control robotics control broken divisions deliberative reactive hybrid behavior 
differences approaches stem principally disagreements nature intelligence stems extensive cognitive reasoning highly tuned tightly coupled interactions environment 
early robotics grew early artificial intel assumed deliberative view intelligence 
ronald arkin leading robotics researcher explains link original proposal conference artificial intelligence marvin minsky indicates intelligent machine tend build model environment placed 
problem explore solutions internal model environment attempt external experiments approach dominated robotics research years time ai research developed strong dependence representational knowledge deliberative reasoning methods robotic planning 
deliberative approach proven effective possible implement accurate internal model constructed 
case sensory burden low environment highly controlled factory exist physically computers quite proficient game chess 
external world departs internal construction unknown way amount reasoning going reliably produce reasonable actions 
reactive paradigm takes entirely different view nature intelligence 
tightly couples sensory motor systems performing experi ments internal models robots built paradigm function constant interaction environment stimulus response manner 
principles walter early subsequently disappeared sev eral decades 
braitenberg revived mid rodney brooks responsible inducing robotics community take notice 
taken extreme robots reactive control contain models world 
problem maintaining models disappears sensor noise issue averaged actions 
purely reactive robots contain state allow learn time inability adapt cited main shortcomings type control 
purely deliberative purely reactive strategies represent opposing ends control spectrum current robotics takes place 
method hybrid control attempts combine real time response reactivity rationality optimality deliberation 
typical mobile robot hybrid control reactive controller attend immediate problems obstacle avoidance relying deliberative mechanism maintain goal oriented behavior 
key designing systems interface module allows systems communicate effectively 
successful hybrid systems assumed probabilistic approach world modeling guessing quantity sensor data probabilistic approach computes probability distribution case world generating single best guess 
result probabilistic robot gracefully recover errors handle ambiguities integrate sensor data consistent way 
probabilistic hybrid robots nearing point reliably tackle real world tasks problems approach 
computational cost dealing large number probability distributions significant current research devoted devising computationally efficient methods dealing structures problem intensify tasks complex 
may limit sensor noise systems handle far systems deployed dependent highly accurate expensive sensors function 
approach resides reactive control spec behavior control 
draws inspiration biology dividing robot control sets interacting behaviors 
behaviors mappings sensor input actuator output may include state memory enables wider range capabilities including adaptation planning possible purely reactive systems 
typically environment represented internally hybrid system little emphasis ex plicit modeling sensor uncertainty 
proper function obtained carefully tuning behavior interacts rest system inter nally environment controller design tends difficult environment dependent process 
behavior control commonly applied multi agent systems limited world models scales dynamic environments inherent multi agent case 
research thread en subset ideas grown field swarm intelligence draws inspiration multi agent biological examples provided social insects 
biological cases studied far robust capable biological group behavior mediated small set simple interactions individuals individuals environment 
application swarm intelligence principles autonomous collective robotics aims develop robust task solving minimizing complexity individual units emphasizing parallelism exploiting direct indirect local interactions 
principles favor design behavior robotic systems emphasize tight coupling sensation action avoidance representational knowledge action decomposition contextually meaningful units 
main ad swarm intelligence approach scalability thousands units second flexibility units dynamically added removed explicit reorganization third increased system robustness unit redundancy design minimalist units 
examples col robotics tasks solved swarm intelligence principles literature aggregation segregation beacon localization stick pulling collective transportation 
summarize currently leading approaches control ad dress problem imperfect sensing may yield robotic systems function dynamic environments 
hybrid control attempts explicitly account sensory uncertainty behave optimally respect infor mation computationally feasible 
hybrid systems contain explicit world models design interface straightforward computational issues scaling complex tasks noisy sensing fully addressed 
side behavior control particularly multi agent systems swarm intelligence sense 
control method take advantage inherent paral robustness agents additional complexity precise world models peer peer communication 
problem behavior systems function determined implicitly interactions environment difficult designer determine local rules agent follow order achieve particular group goal 
ultimate answer control strategies appropriate probably task dependent 
swarms robots cleaning near searching avalanche victims mining coal simply large 
focuses advancing behavior multi agent swarm intelligence domain may provide level robustness large scale tasks unattainable means 
designing self organized systems examining development design process note terminology self organized term grown biological literature simply represents decentralized operation desired swarm intelligence robotic systems 
accompanied term emergent function emergent property self organized system defined occurring global behavior system evident local behavior elements 
unfortunately emergence synonymous word magic circles 
fact magic emergent properties self organized systems words simply mean function system depends interaction number parallel processes may difficult explain serial hierarchical manner 
initial design behavior systems focused single agents considered self organized views individual behaviors dif ferent interacting processes 
difficulty designing behavior systems recognized early interest building systems essentially design solutions particular task 
mahadevan connell stated new behaviors learned free designer needing deep understanding interactions particular robot application en vironment 
studied get behavior robot learn push box edge room 
order achieve discretized state action spaces bits actions respectively attempted automat ically generate functional state action mapping allowing robot interact environment 
examined learning performance types re ward signals monolithic behavior 
rewarded robot pushing box divided task behaviors rewarded separately box finding box pushing recovering bumping object 
methods notable cause real simulated robot study algorithms incorporated hand coded random controls performance comparison 
perform trials generate statistical analysis find ings 
determined learning possible behavior learning methods effective 
results intuitive sense detailed reward functions provide learner instructive feedback progress 
better performance required de signer detailed understanding task took iterations write reward functions generated performance figures 
challenges experience reinforcement learning real robots think hard subproblems reinforcement learning dealing large sensory state spaces long action sequences initial task specification specification reward signal 
difficult evaluate states reasonable amount time providing detailed reward functions informative learner requires knowledge part designer 
colombetti dorigo introduced termed method ology behavior engineering effort bring tools established disciplines software engineering bear problem designing robots 
learning played central role system real world complex unpredictable directly programming robot controller soon impossible job 
machine learning techniques emerged interesting attempt overcome difficulty clear machine learning integrated traditional design methodologies 
formalized design process began mathematical description application complete specification target behavior include formal quantitative component 
designer determine sensors actuators necessary complete task training strategy specified reward function applied task completion progress estimator 
robot trained possibly simulation real environment learning state action mapping produced functional system 
demonstrated methodology simple tasks successful 
performed real robot trials generate statistics results perform control experiments hand coded random controllers draw limited utility methodology 
unclear methods extend harder problems extension direction complex behaviors 
require larger amount input information processed call powerful learning mechanisms 
implementations combination classifier systems genetic algorithms due implicit manner utilize reward values require substantial amount data function 
learning techniques acceptable continuous feedback task progress available state spaces searched relatively small evaluation sped simulation break conditions met 
systematic quantitative analysis behavior important concept advanced 
time researchers advancing techniques automated controller design multi robot domain 
maja mataric proposed complex group behavior created appropriate combinations simple basis behaviors 
simple behaviors avoidance inspired biology combined create complicated behaviors flocking foraging 
results demonstrated groups real robots impressive achievement quantitative metrics assigned particular tasks statistical characterization performance performed 
mataric applied techniques similar mahadevan connell learn task multi robot foraging 
mataric split robot sensory space set binary conditions action space low level behaviors aimed automatically generate functional mapping 
efficacy different reward methods investigated 
propose shaped reinforcement means advantage information available robot point 
shaping principled embedding domain knowledge order convert intermittent feedback continuous error signal 
continuous error signal single value success learning easier problem propagating reward states temporally minimized 
results learning process obtained group real robots revealed detailed reward functions produced statistically significant learning increase 
learning measured similarity learned policy designated optimal hand coded policy actual performance robots foraging task task metric stated 
process shaping reinforcement function heavily biases control policy develop particular way requires task specific knowledge designer 
significant learning demonstrated group robot domain state space inherently larger multiple agents learning time dynamic nature environment agents interact renders reward values variable 
proposed twofold approach distributed controller design included probabilistic modeling system performance auto matic creation control algorithms genetic algorithms 
modeling incorporated analysis algorithm flowcharts simple geometric considerations generate system performance measures methodology analyze aggregation cooperative object transport experiments 
results demonstrate probabilistic modeling useful tool building intuition system function minimalist essence allows designer identify system characteristics influence performance 
far quantitative agreement modes evaluation real robot results required free parameters predictive utility ap proach unclear 
modeling methodology inapplicable spatial location plays significant role task performance 
separate modeling design aspect investigated different methods genetic algorithms design controllers simulation 
trying con struct state action mapping control algorithms parameterized combinations parameters searched genetic algorithm 
different re ward structures individual group controller structures private public studied best combination determined task dependent 
clear design method scale control parameters search spaces unreasonably large 
described earlier genetic algorithms require performance data function investigators interleaved simulated real world performance evaluation success accurate simulation required produce working controllers difficult task complexity increases :10.1.1.153.9160
control heterogeneity permit ted cases meant public policies suffered severely state space size problem parameter values individual controller determined search space 
different approach multi robot learning lynne parker 
introduced method allowing heterogeneous group robots adapt actions changing environmental conditions time 
initial algorithm design left designer motivation approach real robot teams robust dynamic environments 
done giving member team desire accomplish particular parts task enabled team member specialize particular subtask normal system operation 
unexpected event occurred failure robot increase task difficulty agents compensate switching preferred task task properly accomplished robot properly completing subtask allow opportunity address 
dynamic task allocation mechanism demonstrated real robots box pushing task task metric defined analysis quantitative 
showed dynamic cooperation groups heterogeneous robots achieved imposed fairly heavy restrictions 
subtasks performed independent ensure robots robots able accurately determine progress selected subtask robots system access state subtasks system proper distribution take place 
experiments global knowledge achieved extensive communication team members solution renders control method suitable small teams cooperating robots larger robot systems overhead constant global communication significant 
approaches described representative previous research design self organized systems review means complete 
large amount done area 
main principles particularly applied real robots addressed 
include idea directly learning state action mappings reinforcement learning genetic algorithm techniques 
main problem techniques run size state space grows exponentially number states agent perceive 
structured behav iors reduce size state action spaces searched 
likewise detailed reward functions incorporate domain specific knowledge describing task solved facilitate learn ing solution mitigates benefit learning controllers requires designer intimate familiarity task 
au tuning control parameters investigated alternative state action approach complexity determined number plastic pa rameters complexity task 
optimization techniques proven effective traditional engineering problems taguchi ro bust design method may enhance performance approach 
space searched small noisy evaluation due stochasticity environment unpredictable agent interaction cause problems opti mization algorithm 
need metrics previous section touched order properly evaluative learning techniques needs definitive task quantitative way evaluating performance task 
idea intuitive researchers defined concrete task metric studying learning 
fact field robotics general tendency shy away defining specific task performance metrics particularly tasks complex 
attempts introduce uniform quantitative metrics specific subfields type analysis taken hold particularly field autonomous mobile robotics 
observation evident number papers diagram showing path robot took particular trial validation proof algorithm works compared support claims statistically valid experimental data 
underlying reasons culture proof demonstration field 
technological difficult build systems generate systematic data developments wireless networking computer vision task easier 
reason philosophical defining specific metric studying specific task results obtained appear difficult generalize 
study algorithm applies particular set conditions met deemed worthwhile 
fallacy approach design specific task mind assumes best case sensory actuation scenarios 
developing general solutions researchers algorithms function reliably perfect possibly gaussian worlds construct inside computers 
solutions brittle exposed harsh sensory realities real world may fielded autonomous robotic systems 
course purely evaluative design perfect process designation metric captures important aspects task difficult exhaustive testing situation system may encounter unconstrained ap plication environment definition impossible 
said study ing algorithms investigating sort systems created certain sensor actuator characteristics guaranteed 
understanding fundamental properties system ways interact greatly simplify design process sort investigation inform sensor community capabilities useful 
robotic algorithm design relies realistically unsatisfiable sumptions perfect localization communication common examples little advance creation functional robotic systems 
designation specific task performance metric systematic sta tistical verification desired performance levels achieved way uncover precise nature unavoidable imperfections real world demonstrate robotic system account 
done help simulation long sensor actuator models grounded reality 
real robots verify sensors accurately cap tured simulation models shown useful eventually actual real robot experimentation necessary systematic possibly limited way ensure relevant nuances captured 
facets real world difficult simulate effectively exam ple far sonar reflect metal file cabinet 
recognition need experimentation exists literature rarely acted 
experimental studies rigorous thorough standard benchmark problems algorithms 
challenging mobile robotics noisy system specific nature field 
necessary claims robustness near optimality appropriately quantified dependencies various control parameters better understood 
rigorous testing standard robotics community difficulties associated real sensors actuators embraced designs emerge prove robust real world 
odor localization advances understanding biological odor localization tracking developed rats air water 
biology utilizes wide variety tasks including finding species communication behavior modification avoiding predators searching food 
animals combination hardware frequency receptor adaptation software temporal integration spatial integration behavioral search strategies intrinsic landmark locate odor sources 
odor localization essence behavioral problem varies animal animal 
animals exploit fluid information different layers different residues ground ants track air combination information dogs 
engineering standpoint advantages combining odor track ing mobile robots detection chemical leaks chemical mapping hazardous waste sites 
necessary initial step develop robotic systems odor tracking algorithms multiple sensory modalities try sensory fusion search identify sources odor 
systems built various research groups performance far limited reliability temporal response characteristics sensitivity available odor transduction mechanisms 
essential problem available odor sensors lack combination speed sensitivity necessary perceive complex dynamic structure turbulent odor plume 
approach moving slowly continually sampling odor flow data reduce environmental noise nature applied robotic systems environmental behavioral constraints significant plume sparseness time critical performance render systems ineffective 
odor sensory technology improves de signers artificial odor localization systems able focus algorithm design achieve better system performance 
previous robotic odor localization research derived concentration gradient information multiple sensors restricted operation proximal region plume source move slowly concentration gradient information extracted reasonable accuracy 
efforts successful demonstrating feasibility odor localization mobile robots clear method involves spatial concentration extraction extend sparse plumes longer plume tracking distances odor information frequent concentration integration times increase decreasing system performance accordingly 
capable sensors different plume tracking behaviors may necessary efficiently track complex plumes 
chapter design methodology odor localization task reasons want construct self organized robotic system perform particular task laid previous chapter 
difficulties involved designing type system described 
chapter presents way design self organized systems including line machine learning algorithm evaluation expensive 
provides detailed description odor localization task studied metrics performance evaluation 
design methodology phase zero choose task begins design process task accomplished specified exactly 
description form quantitative performance metric 
total system cost useful regard way reduce different task components initialization costs energy time completion comparable units 
cost metrics 
costs may difficult specify exactly cost minute exposure chemical weapon 
estimates accuracy play significant role determining ultimate performance level achieved 
phase parameterize control algorithm step specifying control algorithm determine sensors actuators necessary cost effective task completion 
systems differ ent sensor actuator sets may constructed compared initial design effort set proceed independently 
done previously design methodology uses notion behaviors partition sensory action space individual agent 
choosing behavior set machine learning derive sense action mapping designer specifies set parameterized behaviors allows group agents solve task 
designer determines behavior active small set control parameters left searched 
design methodology attempt guide designer process determining proper behaviors specifying parameters free familiarity systems pos similar function observed biology helpful feedback subsequent design phases assist 
venn diagram depicting space algorithms solve particular task 
venn diagram depicting space algorithms solve particular task 
key point phase design behavioral parameterization drastically reduces size algorithmic search space sys explored simulated real instantiations task 
provides representation design space 
set algorithms perform particular task lies subset restricted particular sense action domain 
subset algorithms large complicated tasks design methodology calls system designer restrict space possible algorithms parameterizing behaviors perform sense action mapping 
limited domain reinforcement learning techniques determine algorithm parameter sets produce best performance 
phase line machine learning optimization behaviors control parameters chosen system implemented testing 
simulation useful initial design stages permit rapid prototyping behaviors testing real hardware take place verify simulations accurately model agent interactions environ ment 
simulated real results agree test domain speed simulation exploited optimization phase 
maximizing system formance involves solving global optimization problem algorithm parameter space 
self organized systems depend heavily sensitive agent agent agent environment interactions performance stochastic evaluative gradient search methods appropriate 
type control optimization extensively studied case single agent multiple agents 
design methodology assumes agents follow control policy metric system evaluation global task metric 
homogeneous controllers global reward signal provides way address ing credit assignment problem represents difficulty distributing credit success decisions may played role producing 
credit assignment central problem reinforcement learning 
making learning agent operate space algorithm parameters providing measures group performance feedback individual actions effectively agent action reward signal credit assign ment problem longer applies 
solution may extreme simplification reinforcement learning problem allow performance improvements realized reasonably complex tasks 
note agents required control policy differentiation possible 
agent alter control parameters experience agents randomly choose fixed number different policies task begins limit agents number agents type stable 
number control parameters small full dimensional search parameter space feasible 
reduce size search space sequential optimizations performed parame ter optimized remain fixed 
restriction may finding optimal parameter set difficult search domains 
case studies examined parameters grouped set effectively independent search allows performance improvements achieved reasonable amount time 
selection design points specific parameter values optimize done priori techniques selecting adaptively may utilized studies 
parameter space bounded discretized include range im portant values determined preliminary experiments 
optimization run variable values randomly initialized 
idea optimization procedure simple repeatedly evaluate set parameter values said degree certainty parameter values performs significantly better current es best value 
optimization algorithm defined initial design choice method parameters 
defines margin best point cost effective optimize remaining design points determined greater maxi mum optimization stops 
defines desired level certainty achievement margin defined 
sets minimum number trials necessary group comparison procedure accurate 
uses parametric test tukey hsd multiple comparison procedure assumptions underlying operation normality data fully met performs demonstrate utility optimization procedure 
real applications multiple comparison procedure tuned underlying distribution performance data 
describes details algorithm 
parameter design points total number points parameter selected optimization performed follows 
initialize set active points include 
iteration simulate trial storing result system performance described equation represents task metric maximized assumed positive 

tukey hsd multiple comparison procedure determine critical difference significance exceeded difference means set difference declared significant 
max max 
max max remove represents expected value 
remains go step 
process remaining point max represents best guess optimum value parameter currently optimized fixed parameter values 
cycle parameters fixed random order resulting parameter set evaluated input set cycle 
set number cycles optimization run 
reinforcement learning algorithm optimizes system performance minimal amount evaluation 
performance evaluation real realistic environments typically resource intensive advantageous minimize number samples required 
results optimization procedure reveal performance levels achievable chosen algorithm parameterization indicate behavioral parameters influence task performance 
example parameters converge particular set values fixed value omitted subsequent optimization runs indicates designer chose parameterize value critical task performance 
optimizing set environments analyzing optimal parameter values change environmental characteristics facilitate construction relationships environmental algorithmic parameters 
phase generate model third design phase involves definition relationships system parameters system performance 
system parameters encompass mic environmental parameters 
relationships experimentally validated test environment guide design deployable system allow designer predict system performance wider range environments explicitly examined experimentally 
examples procedure chapters 
task resists characterization extensive evaluative optimization performed directly application envi ronment typically expensive experiment scaled version task 
amount experimentation necessary application environment regardless verify system performs expected models guide choice control algorithm parameters eliminate need extensive experimental parameter search 
feedback design process design methodology described sequential process prac tice substantial feedback different design phases 
behaviors control parameterizations modified performance observed simulation 
real world implementation constrain interaction models simulation 
experimental axis design impact model generation procedure insights modeling may suggest new behaviors 
model generated predict performance values learn ing system real world problems may approached degree confidence 
schematic design process interactions components seen 
schematic design process task definition application real problems 
arrows indicate significant interplay design phases 
odor localization problem section provides detailed description odor localization task principle application examined 
odor plume odor source dissolves fluid medium odor plume formed 
turbulent nature fluid flow typically breaks plume isolated packets areas relative high concentration surrounded fluid contains odor 
focuses turbulent plumes application environments artificial systems dominated turbulent dispersion 
packet nature odor plumes current projected limitations odor sensing technology assumed binary odor information generated single plume sensor available odor localizing agents 
task definition general odor localization task addressed follows find source single turbulent odor plume enclosed area efficiently possible 
broken subtasks plume finding coming contact odor plume traversal odor plume source source declaration determining odor acquisition characteristics source immediate vicinity 
plume finding amounts search task added complication due stochastic nature plume simple sequential search guaranteed succeed 
plume traversal requires specialized behavior progress direction source maintain consistent contact plume 
illustrates phase task 
source declaration necessarily done odor information typically odor sources perceived type sensor short range possible extra sensory apparatus 
plume traversal task 
issue define agent trajectory odor hit wind direction information agent approaches plume source 
performance study odor localization multiple agents placed inside enclosed arena containing odor plume repeated trials time distance traveled group individual completes task measured 
case multiple agents deployed minimal distance single deployment point 
task completion defined number ways agent comes radius plume source allocentric determination useful emulate non odor related target sensor robot carry agent declares plume source egocentric determination additional sensor necessary combination extension thereof multiple tions required radius 
purposes performance evaluation assumed measures time group energy consid ered proportional sum individual distances traveled necessary task completion exist 
efficiency odor localization task defined general case 
combine time energy measures task performance application specific manner 
measures physically independent com metric incorporating particular weighting basic factors considered 
time needed task completion represents total distance traveled agents task 
taken cost unit time completing task cost unit distance running system 
represents total cost incurred task completed 
facilitate perfor mance comparison different environments useful normalize minimum completion cost particular system 
measure inverted generate intuitive presentable performance metric min min 
min min optimum values task determined average distance starting location target location maximum agent speed 
numerator represents minimal completion cost obtainable system prior knowledge source location 
form ensures greater optimal system achieve performance system requires time distance averaged initial conditions performance 
choosing specific values appropriate relationship time required energy typically vary inversely generated evaluating particular application 
chapter robots sensors simulators design methodology described previous chapter emphasizes generation systematic performance data real realistic environments 
chapter describes tools investigate plume task 
covers real robot platform arena infrastructure developed carry systematic experiments odor wind sensors built enable real robot plume traversal sensor simulator permit extensive experimentation software architecture runs control algorithms 
real robots uses shown originally designed owen holland university west england bristol cm diameter robot equipped dc motor driven wheels castor wheel mbit wireless lan transceiver bit converters 
see detailed robot description 
perform plume traversal basic configuration supple mented infrared range sensors collision avoidance single odor sensor hot wire set markings assist overhead tracking 
fully equipped plume traversing shown configura tion robot energetic autonomy hours 
board high level control provided pc intel processor running linux 
low level control motor speed regulation executed dedicated hardware interfaced pc bus 
groups robots study plume task group robots demonstrate flocking behavior see chapter 
basic 
equipped wind odor proximity sensors markings overhead tracking 
robot arena infrastructure due physical space constraints odor localization subtasks plume traversal studied real robots 
plume significant length fills large part arena plume search phase trivial real arena technical space constraints source declaration phase experimentally difficult study 
plume related complexity odor localization task captured traversal phase 
plume traversal arena odor plume created cm square hot water pan bank fans cm diameter see extends diagonally corner arena opposite corner 
flow characteristics data taken plume axis cm floor summarized table 
coefficient variation measure intensity flow turbulence 
represents ratio standard deviation wind velocity mean wind velocity value typically measured outdoors 
table wind field characterization distance source mean wind speed coefficient variation robot start area located corner opposite plume source 
head camera tracking system combined radio lan robots external workstation log position data trials determine trial completion reposition robots trials emulate inter robot communi cation signals 
signals require robot access local range bearing signaling robot hardware provide information available virtual sensors 
arena layout seen overhead camera shown 
real robot arena 
plume source visible upper left 
real robot arena seen overhead camera 
trials different group size interleaved inactive robots automati cally positioned recharging stations 
intermittent charging enables experimental sessions run hours nonstop 
bank recharging stations shown 
robot equipped pair underneath chassis contact metal plates floor instructed cam era system 
automation inter trial repositioning recharging procedures greatly increases rate experiments run reduces wear robots human handling 
factors instrumental extraction systematic data multiple robotics test bed 
bank recharging stations 
underneath robot contact metal plates ground robots positioned overhead camera system 
odor sensor types odor sensing technology currently exist combination ease transduction reversibility reproducibility ease production ro environments miniaturization speed offered carbon polymer sensors 
odor sensor detects presence airborne substance change electrical resistance chemically sensitive carbon polymer film 
type sensor lack baseline stability fast response times signal processing techniques counteract baseline drift 
carbon polymer sensors 
sensors fabricated solutions consisting carbon black polymer poly dissolved methods de scribed 
conducting polymer solution spray coated surface mount universal board sensor film closes circuit mount ing pads 
polymer solution applied sensor resistance nears baseline resistances typically settle value hour period 
sensor closeup seen 
odor sensor closeup 
interface circuitry applies input bias voltage multiplexer selectable range resistor generate current sensor wilson current source 
output voltage sensor filtered remove high frequency noise buffered reading 
variable bias voltage selectable range resistor allow wide range sensor baseline resistances automatic calibration important feature polymer sensors difficult fabricate precisely baselines drift time 
calibration procedure consists switching range resistors bias voltage centered stimulus choosing resistor results output closest desired output adjusting bias voltage desired baseline output achieved 
resistor bias values stored 
desired output value adc range sensor values drift 
power spectral density db hz plume plume frequency hz odor sensor output mv raw signal distal plume filtered signal distal plume filtered signal stimulus odor detection threshold samples hz power spectral density odor sensor output stimulus robot distal plume 
raw distal plume data filtered distal plume data filtered baseline data 
threshold std 
previous versions interface circuit local analog feedback loop maintain output voltage constant level 
low pass hardware filtering attenuated sensor drift signal reducing sensor sensitivity 
sensitivity crucial study plume tracing agents able sense meaningful plume structure simply respond close odor source 
indoor experimental set room ventilation limited enhancement plume signal option 
analog feedback output signal digitally filtered odor hit recorded filtered signal rises threshold 
sixth order butterworth bandpass filter filter parameters set comparing power spectral density stimulus power spectral density robot stationary distal part plume 
frequency range provides highest possible signal noise ratio desired bandpass cutoff values hz chosen data shown 
sensors respond higher frequencies information available hz transduction circuitry experimental conditions 
amplitude threshold odor detection set times baseline standard deviation recorded samples taken average rate hz calibration render false positives improbable 
total plume hits received real robots hour performing random walk behavior 
defined plume boundary indicates plume envelope stable time 
plume hits received individual real robots hour performing random walk behavior 
similarity maps suggests significant differences robots 
executing odor localization algorithm odor sensor polling rate av hz 
robot cpu performing polling filtering handling tasks robot requires communications high level motor control memory management sensor polling rate precise real time linux kernel provide reliable slower polling rates due overhead requires 
timing imprecision taken account digital filter treatment polling jitter ex ample dedicated microcontroller take sensor readings increase sensitivity 
combination calibration procedure digital filter ing produces robust binary odor detection sensor 
compares raw filtered data distal plume filtered baseline data sensor 
detection threshold plotted std raw data dc shifted ease presentation 
presence odor hits plume source shows significant plume stimulus exists tracked distal plume region odor information intermittent 
mapping plume random walk behavior indicates plume stable time robots see 
wind sensor wind sensor closeup 
sensor circuitry shown left 
average wind direction plume traversal arena measured real robots individual samples averaged spatially 
plume source upper right 
arrow lengths proportional uniformity flow direction tail arrow 
shown air flow sensor 
previously study odor localization sense wind flow enclosed tube provide unidirectional sensitivity combined scanning behavior allows robot measure wind direction 
wind direction information required robot rotates degrees rotates slowly degrees reading wind sensor output rotates back heading corresponding highest sensor value 
robot takes shortest path back desired heading rotates tar get account time delay internal processing circuitry 
initial rotation reduces probability robot begins facing upwind case discontinuity scanning behavior degrade resulting wind direction value 
wind sensor performance fully characterized due requirements suitable testing environment flow laminar data odor localization experiments suggests sufficient task 
wind map individual samples averaged spatially shown 
sensor simulation plume traversal arena average plume intensity map 
layout larger arena 
simulation models provide significantly decreased performance evaluation time enables complete investigation system parameter space 
models allow treatment environmental conditions due technical limitation implemented physically 
sensor simulation explicitly embeds models agent sensors sensed environment simulation permits enlargement plume search arena examination agent performance full odor localization problem 
source declaration phase task lead elevated agent densities source sensitive inter agent repulsion parameters point simulations approximate interactions able provide faithful results 
sensor kinematic simulator originally developed khepera robots employed systematically investigate odor localization performance simulation 
kinematic simulator previously shown generate data closely matches real khepera experiments reason believe real robot behavior accurately captured 
georgia tech plume taken real dye plume tank 
caltech plume generated simulating particle transport real ocean flow data 
plumes flow moves left right flow direction variable caltech plume 
initial simulations performed arena modeled physical arena shown verify simulator produces accurate results 
results chapter 
addition times larger area arena study full odor localization problem see 
agent behav algorithms correspond exactly real robots 
properly capture plume stimulus series leaky source planar laser induced fluorescence plume images generated water donald webster philip roberts georgia tech incorporated simulation 
image plume shown 
plume movies capture influence agents plume dynamics offer approximation discretized packet nature odor stimulus received real environments 
plume hits received simulated robots hour 
georgia tech plume data scaled imitate average speed envelope real plume data compare odor tivity threshold tuned higher threshold leads odor information performance observed real arena 
small arena sensor threshold increased odor hit frequency observed simulated plume com pared real plume due fact efficiency simulated sensors bandwidth limited update rate plume data hz bandpass filter real robots hz 
smaller arena flow information taken directly real robot data shown 
experiments performed larger arena georgia tech plume data increased size factor plume traversal phase relevant task 
create sparse plumes sensor thresholds investigated resulting plume resulting plume density original density original 
effort emulate open flow patterns wind information generated adding white noise constant direction parallel main plume axis 
larger arena set experiments incorporates set plume data provided francois chad caltech 
plume data frames generated detailed simulation model traced virtual particles dropped simulated moving fluid 
flow data readings ocean currents eastern florida coast generates complex plume observed relatively narrow georgia tech tank 
instantaneous image caltech plume shown 
plume data scaled size georgia tech plume frame update rate scaled render average velocity plumes equivalent 
software robot software architectures heavily researched area methods achieving equivalent function particular design choices typically important 
software developed control robots described briefly 
control code written set driver functions developed enable simplified access robot sensor motor ports 
controller process divided number different threads 
sensors polled constantly collision sensors dedicated thread handle polling sensor data stored memory 
incoming communication camera system tcp ip socket handled separate thread 
control thread reads communication sensor data memory performs control logic issues commands motors 
control code runs real simulated robots interface library developed translate functions function calls 
overhead camera software written take advantage library functions provided camera hardware 
software tracks robots arena experiments robots trials augments sensory information available robots 
robots appear camera system initialization procedure differ robots 
experiment camera system runs robot ip address sequentially issues command move slight amount 
camera system pair moving robot ip address maintains pairing tracking robots experiment 
tracking failures camera system confuses ip addresses robots due robots moving fast camera updating slowly detected repositioning trials recovery performed re initialization procedure 
high level software stability required generate systematic data multiple robot system 
chapter collective search investigating full odor localization problem subtasks examined separately search phase 
system design issues addressed high level results described chapter form ba sis model odor localization performance chapter 
chapter presents quantitative analysis tradeoffs group size efficiency collective search tasks considers time sensitive nature search completion system operating cost 
search task defined performance metric account costs associated task 
random coordinated search strategies cal expressions derived predict optimal system performance bounds particular task description 
performance benefit coordinated search shown dependent relative values different cost components 
sensor computer simulation support analytical results suggesting assumptions involved derivation sound 
background search tasks submit parallelization ideal application multi agent systems 
search studied problem review see significant amount investigation efficiency tradeoffs random coordinated search strategies 
assess performance multi agent search systems open problem 
researchers take account energy consider time required completion analyzing performance multi agent systems similar search tasks :10.1.1.28.2247
clearly performance metric appropriate task studied reason believe complete cost metric offer insight design tradeoffs aid comparison results research groups 
search task description search task examined chapter described follows group agents having sensor radius locate single target contained enclosed arena 
simplicity consider arena square length agents disperse arena target 
ensure agents full coverage arena driving search time initial agent deployment single deployment area radius assumed deployment area may located arena 
shows schematic example task layout 
performance metric performance search task measured terms time elapsed agent detects target sum distances traveled agents 
correlates amount energy needed system operation 
setup costs need considered complete system evaluation 
measures physically independent composite metric incorporating task specific weighting basic factors considered 
agents 
example task layout 
basic cost components 
taken cost unit time completing task cost unit distance running system initialization cost agent 
represents total cost incurred task completed 
choosing specific values appropriate relationship time required energy initial cost generated evaluating particular application 
simplify analysis control algorithm maintains average speed time total distance traveled approximated time required complete task substituting equation nv 
nv 
group size system cost obtained directly time required 
metric analysis section order facilitate comparison environments normalized minimum completion cost order generate performance metric minimum cost optimum values task min min single agent prior knowledge source location determined average distance starting location target location maximum agent speed min min 
form ensures cost greater optimal system achieve performance requires time distance agents performance 
deriving performance stochastic nature real systems sensor noise agent movement de target location variation means trial cost complete search task drawn distribution 
applications designer interested minimizing average cost system operation tasks value interest composite average cost variation 
focuses bounding cost percentage trials determining cost exceeds cost fraction trials particular environment 
expressions optimal cost random coordinated search strategies derived sections 
clarity summary variables provided table 
random search system performing random search agents move randomly searching target explicit attempt partition space agents avoid table summary parameters variables number agents sensor radius arena length deployment area radius time complete task total distance complete task cost finishing cost operation initialization cost agent total system cost average agent velocity system performance measure desired performance bound probability system finding target time interval minimum dispersion time sensor detect probability probability agent finding target optimal value variable single agent trial search time searching area multiple times 
system probability finding target time interval probability finding target particular interval simply multiplied probability finding target previous intervals 
probability target time expressed sum geometric series solve series simplified follows ts 
log 
log equation describes time complete task search success probability desired performance bounds 
accurate term needs added account fact agents task full coverage entire search area agents start deployment area log log 
factor represents time required cover distance deploy ment area target serves lower bound time needed perform task min 
probability decomposed terms number individual agents performing task probability single agent scanning target time period turn approximated ratio area scanned time total area arena sensor detection probability modeled probability target detection target enters sensor range factors rv 
assuming probability agent succeeding fully independent group size agents probability system locating target time period calculated plugging value equation 
log 
log optimum number robots optimum time optimal cost task derived 
log 
log represents length time necessary percent trials single agent locate target initial dispersion period 
substituting equation 
substituting value equation form total system cost derived vz 
assuming parameters system fixed determining critical points leads expression optimal number robots derivative setting equal solving vk 
vk positive root taken number agents positive second derivative positive occurs minimum value plugging value equation produces optimal search time vk 
equations combined arrive optimal cost searching particular environment random search vk vz 
breaks essentially terms 
represents mini mum cost having disperse arena finding target 
gen sensor radius assumed small compared arena size term substantial influence cost 
second term equation represents cost finishing task accrued performing task damage done target located 
term dominate dominant cost component 
coefficients play role term influence optimal number agents speed task accomplished 
third term represents cost searching required area complete task 
dominate dominant cost component 
relatively simple form number agents system influence size area searched 
substituting back optimal random search cost specified terms component costs basic task parameters log vk log rv log log rv 
coordinated search performance coordinated search algorithms studied 
terms variables described results follows 
coordinated search agents requires breaking search space equal partitions assigning single agent sequentially search 
total amount time tp ass required agent single pass entire partition stated terms arena size agent speed sensor range tp ass 
sensor detect probability total number passes robot expressed similarly equation log 
log total time required optimal system search arena follows tp assm log 
log represents time required robots move deployment area respective partitions 
defined follows equation reached log 
log rv 
optimal value derivations previous section apply 
performance comparison comparing optimal costs different search algorithms provide insight conditions type suitable 
done looking ratio optimal cost random search rnd optimal cost coordinated search cor 
choice algorithm influences value equation equation defined 
shown ratio simplifies follows log log rv log log rv log 
approximation holds rv close typical search arena large 
equation indicates sensor reliability decreases perfor mance gap random optimal search strategies closes 
cost components play role 
stated section dominant cost component second term cost function equation dominate assuming cost com ponents remain constant different algorithms rnd cor log 
likewise dominates third term cost function important rnd cor log 
aside sensor detect probability tasks considerable time pressure suited random search strategies tasks size economy effort 
unexpected finding analysis formalizes tradeoffs involved 
cost building maintaining different types robots suitable algorithm difficult deal abstractly con sidered 
worthwhile note robots capable coordinated action cost robots suitable random search 
supporting simulations formulation optimal search cost straightforward analysis random search algorithm required assumptions independence success probability sequential time periods single agent agents 
verify assumptions valid type task search task implemented time distance required groups various sizes succeed recorded 
implement random search behavior agents moved forward constant speed making random turns away obstacles walls agents necessary 
results rad random algorithm simulated times group sizes agents time group distance required complete task measured 
deployment area placed arena center target placed randomly arena trial 
dispersal time calculated arena length agent speed 
task cost parameter values table task cost parameter values agent radius sensor radius arena length deployment area radius average agent velocity minimum dispersion time desired performance bound sensor detect probability cost finishing cost operation initialization cost agent selected shown table 
note significantly random algorithm expected perform similarly coordinated search 
shows results calculating costs system analytically compared costs derived experimentally 
quantitative agreement analytical simulated results random algorithm suggesting task assumptions independence hold analytical results valid 
worthwhile note optimal group size algorithms interest multiple agents completing task warranted optimal cost random algorithm fairly close optimal system 
suggests increased cost adding coordination fault tolerance optimal system significant random system fault tolerance built agents perform actions may efficient 
chapter quantitative analysis tradeoffs group size efficiency collective search tasks considers time sensitive nature search completion system operating cost 
search task defined performance metric account costs associated log search cost analytical random simulated random simulated random analytical coordinated number agents simulated analytical results search task 
simulated data lower triangles cost data upper triangles exceed cost data 
agreement simulated analytical results indicates random search model assumptions sound task 
note computation cost parameters may simple estimates feasible 
costs linear functions task metrics differentiable function framework 
random coordinated search strategies analytical expressions derived predict optimal system performance bounds particular task description 
analysis allowed prediction optimal number agents required complete task efficiently 
addition performance benefit coordinated search shown dependent relative values different cost components coordinated search favored cost completing task significantly outweighs cost operating search system 
kinematic computer simulation support analytical results suggesting assumptions involved derivation sound 
assumptions include minimal interference agents uniform coverage arena hold environments approximately correct difficult applications area searched larger agent extent 
chapter single agent plume traversal algorithms chapter presents investigation second phase odor localization problem plume traversal 
better understanding plume traversal algorithm successful effective algorithms differ environments guide creation parameterization plume traversal behaviors 
problem plume traversal recast task obtaining odor hit set metrics provides detailed information algorithm function 
odor localization algorithms described demonstrated algorithm parameters tailored particular plume characteristics improved performance 
hit analysis shown capture performance types algorithms accurately concluded failure stems intrinsic shortcomings algorithms tested 
analysis general properties required successful turbulent odor plume traversal algorithms described 
plume traversal initial search procedure essentially coverage problem depends largely characteristics search area examined previous chapter source declaration procedure highly specialized task 
aspect odor localization depends heavily plume characteristics plume traversal trail odor packets upstream source 
observation suggests purposes tailoring system parameters plume characteristics useful focus plume traversal phase 
step process define efficient way quantify algo rithm performance plume algorithm pairs analyzed 
eventually comparisons generate high level mapping desirable algorithm properties characteristics plume stimuli tracked 
map ping facilitate matching system parameters application environment yielding higher efficiency aid development deployable sys tems 
better grasp relationship plume stimuli tracking algorithms enable new avenues investigation function biological systems 
hit analysis distal plume region plume information intermittent sensors able respond quickly derive information individual plume packets pass see diagram plume traversal task 
discussed chapter currently available odor sensors possess required sub hertz sample times noisy binary odor information reliably provide 
may information encoded fine structure distal part plume 
due highly stochastic nature turbulent fluid flow odor packet nature plume unclear complex sensing graded intensity information larger fixed sensor arrays benefit odor localizing agent flow information available means 
assuming binary odor information single sensor available possible restate problem agent just received odor hit strategy maximize appropriate combination likelihood distance speed receiving odor hit upstream direction closer source 
formulation necessitates set performance metrics probability getting plume hit short term efficient revert plume search procedure expected time plume hit respectively expected hit locations stream cross stream directions 
assuming metrics approximate actual range values encountered length plume combined produce probability initial plume hit search phase result successful approach source 
expected necessary plume traversal distance 
probability getting plume hit short term expected hit location stream direction 
probability agent receive required number consecutive odor hits traverse expected plume length resulting successful approach source 
table summary evaluation metrics variables ph hit probability plume traversal expected time odor hit cross stream expected hit locations pf probability approaching plume source expected plume traversal distance psr probability odor hit search phase tradeoffs metrics fastest plume traversal low search time combined high inter hit upstream traversal ideal odor information typically dense direct vicinity odor hit combination generally calls lower probability approaching plume source decrease due fact expected plume traversal distance greater average inter hit upstream traversal sensitive decreases probability receiving hit increases order optimize full odor localization task environment expected cost losing contact plume cost additional search phase depends probability unit time finding plume search phase task sr weighed expected plume traversal performance decrease necessitated increasing purposes chapter assume sr low high cost losing plume maximized best system performance 
plume traversal algorithms biological inspiration obvious generate plume tracking algorithm 
sensing odor signal reasonable policy move directly upwind immediate local indication source direction circumstances instantaneous direction flow 
odor longer strategy perform local search known casting biological literature odor packet location previous packet encounter provides best immediate estimate occur 
type surge cast behavior observed flying walking performance studied simulation 
previous surge cast category odor localization algorithms aimed studying biology limited sensory behavioral time scales investigated 
applying ideas artificial systems separation control algorithm underlying hardware clear longer sense constrain behavior strictly sensory response characteristics 
key aspects search behavior surge duration casting locality parameterized subsequently optimized plume type 
algorithm descriptions agent assumed access binary odor information flow direction dis tance travel time passage 
algorithm defines agent location evolves time odor hits 
odor hit agent samples flow direction proceeds odor hit time process repeats 
simple algorithm types explored straight step zig zag spiral 
straight proceeds upwind fixed fixed amount time 
step proceeds upwind fixed distance fixed speed waits location fixed amount time ing plume lost reverting plume search behavior 
zig zag performs counter turning procedure angle step length speed fixed amount time 
spiral begins step upwind fixed speed moves outward constant spiral fixed amount time 
traversal speed spiral increases maximum agent gets farther center type movement implemented wheeled vehicles previ ous 
diagrams showing behaviors seen corresponding parameters seen table 
table algorithm parameter definitions agent velocity time failure declared length step cast heading angle upwind spiral gap distance algorithm evaluation order adequately investigate parameter space acquire relationship tween algorithm parameters plume characteristics methods evaluating sal performance metrics available 
evaluation accomplished ac plume traversal algorithms 
executing plume traversal runs real world different plume types different tracking algorithms method require time feasible 
chapter different methods metric evaluation simulated plume input 
hit analysis allows detailed view algorithm function direct evaluation provides accurate performance data 
hit metric generation recall algorithm defines agent location evolves odor hits 
instantaneous odor hit probability function defines probability receiving odor hit particular algorithm subsequent cessation previous odor hit post hit eye view hit landscape averaged possible odor hits 
purposes analysis assumed monotonically decreasing large agent moved away plume vice versa 
particular environment particular sr plume traversal metrics computed follows min sr ts ts tm ts ts 
time represents point continuing search plume results lower probability getting odor hit transitioning search phase behavior represents probability density function getting hit instant time time considered discrete 
note arbitrary arbitrary summed series closed form 
acceptable total number calculations needed generate metrics scales linearly known 
calculations straightforward 
algorithm simple specify turns elusive 
ideally leverage extensive done involving plume models stan dard gaussian dispersion finite difference models 
models developed predict time averaged peak ob served concentration profiles capture specific inter odor packet spatial temporal relationships necessary generate instantaneous odor hit probabilities 
fine plume structure considered models possible generate accurate conditional hit probabilities necessary reliably calculate accurate hit statistics representing concept odor packets may clustered plume receiving odor hit par ticular length time decrease probability getting hit 
expect plume detail needed generate contained instantaneous concentration fields generated planar laser induced fluorescence techniques 
georgia tech plume data described chapter calculated algorithm directly thresholding concentration values generate binary odor hits threshold imple starting transition occurred distal half plume reaching odor hit 
hits distal half avoid need plume find area 
time location hit instance recorded set frames results summed hits generate experiment 
estimating plume stud ied calculated see equation values generated equations 
simulated binary odor sensor contain noise wind sensor returns values distributed gaussian manner true upwind direction standard deviation 
approximate range determine set discrete heading offsets rad combine values weighted value selected 
weighting performed discretizing selected gaussian probability density function heading offsets explicitly calculated 
heading offset values chosen calculation selected permit approximate determination reducing computation times degree accuracy achieved explored 
illustrate plume dynamics captured manner instantaneous odor hit probability map immediately post odor hit shown cross section 
observed concentration peaks seen time averaged map produce graphs spatio temporal dynamics play role algorithm performance 
plume long envelope extends cross stream direction 
distance plume axis distance plume axis odor hit probability odor hit probability distance plume axis probability receiving new odor hit space surrounding site previous odor hit immediately cessation odor hit 
negative values closer plume source 
hit probability plume axis probability values part 
direct evaluation verify assumptions involved hit metric analysis valid performance measurements compared odor localization test bed simulates full plume traversal behavior 
georgia tech plume data 
task layout shown 
start trial agent positioned randomly agent start area 
agent remains motionless receives odor hit odor hit received particular time period moved new random location 
method commencing trial meant mimic transition plume finding plume traversal occurs full plume tracing task distribution agent initial locations plume accurate 
receiving initial odor hit agent follows algorithm enters plume find area success exceeds inter hit time value failure 
plume image updated simulated time images 
note size layout start find areas arbitrary significant influence performance values algorithm 
quantitative agreement direct hit evaluation procedures expected 
long relative algorithm performance values accurate hit analysis capturing important aspects plume traversal task 
distance plume axis plume find area agent start area distance plume axis task layout direct odor localization algorithm evaluation 
agents receive initial odor hit agent start area attempt progress plume find area 
plume outline shown represents average odor hit probability generated instantaneous plume images 
plume find area radius equal plume length agent start area encompasses distal plume 
note plume find area sized eliminate influence noisy plume data near source 
results discussion parameter search maximize selected plume data hit procedure ex range parameter values algorithm types 
straight step zig zag spiral algorithms evaluated 
parameter ranges searched shown table 
values selected cover sub average hit probability region parameter space represent exhaustive search 
reduce simulation requirements simplify evaluation procedures maximum agent limited twice average flow speed plume search time value fixed seconds algorithms 
table parameter evaluation ranges 
parameter definitions table behavior cm cm rad cm straight step zig zag spiral illustrate evaluative process data best algorithm type 
algorithms referred straight step zig zag spiral respectively parameters shown table 
table optimal parameter values algorithm cm cm rad cm straight step zig zag spiral subsequent graphs plume data set split sections frames 
metrics calculated th frame pooled section compared sections standard error information generated 
sample tests procedure shown produce results significantly different data generated sections frames frames evaluated reducing number evaluated frames offers substantial savings evaluation time 
evaluation single algorithm reduced data sampling takes minutes ghz pentium iii 
shows probability receiving odor hit versus wind error 
note wind direction error larger probability ing plume hit decreases algorithms different amounts 
step lowest axis performance moves quickly plume 
straight takes trajectory lower velocity allows time plume envelope receive odor hit 
zig zag spiral ef maintaining contact plume 
performance symmetric respect wind error algorithms symmetric respect plume axis 
alternating orientation behaviors hit average differences absolute value wind error critical value 
probability receiving plume hit straight step zig zag spiral wind direction error rad expected time plume hit straight step zig zag spiral wind direction error rad odor hit probability different plume tracing algorithms 
expected time odor hit different plume tracing algorithms 
note odor hit probability low expected time odor hit little importance 
error bars represent standard error mean 
shows expected time receiving odor hit versus wind error 
note lower times better straight said performing best behaviors largely correlated low hit probability useful feature 
large times shown spiral suggest wind error values able regain plume contact initially exiting plume envelope 
shows expected upstream location receiving odor hit behaviors versus wind error 
larger metric values better indicate fewer hits necessary traverse plume spiral performance leader category 
straight suffers due low velocity higher probability getting hit step requires consecutive hits reach plume source 
expected location plume hit straight step zig zag spiral wind direction error rad expected location plume hit straight step zig zag spiral wind direction error rad expected downstream traversal odor hit different plume tracing algorithms 
error bars represent standard error mean 
expected cross stream traversal odor hit different plume tracing algorithms 
error bars represent standard error mean 
shows expected cross stream location receiving odor hit behaviors versus wind error 
cross stream movement spiral zigzag renders curves asymmetric behaviors mirrored hit net cross plume travel tends 
shows plume wind noise zig zag performs best group algorithms near perfect performance surprising simple structure plume tracked 
spiral simpler algorithms significantly worse 
tougher test algorithm capability comes wind information perfect 
algorithms shown best larger wind direction errors demonstrate relevant trends 
wind information degrades performance falls suggesting investing development wind sensor critical 
complex plumes large scale separates plume axis wind axis may difficult track effectively 
probability successful plume traversal straight step zig zag spiral wind direction error rad probability successful plume traversal straight step zig zag spiral sd wind direction rad expected probability successful source location behavior 
expected probability successful source location behavior 
note algorithms shown optimized better performance may achievable higher wind variances 
combining data expected heading error frequency wind sensor error standard deviation leads data seen 
graph directly relates sensor error algorithm performance relationships individual algorithms wind error grows par relevant optimal algorithms 
expect trend decreasing performance increasing wind error holds algorithms 
optimized algorithms data represents best performing algorithm type 
shows performance best algorithms type value plotted 
see zig zag performs best range examined followed closely spiral step straight performing significantly worse 
correlation approximate efficiency zig zag behavior surprising type casting behavior widely seen biological systems 
probability successful plume traversal straight step zig zag spiral sd wind direction rad expected probability successful source location pf behavior 
note point represents optimized performance particular wind variance 
main goals chapter illustrate creation mapping algorithm parameters plume characteristics order simplify design efficient plume tracing algorithms 
wind sensor noise system technically plume characteristic treated similar way demonstrate principles involved 
table shows parameters best performing zig zag algorithms evolve increases 
table optimal zig zag parameter values versus 
parameter definitions table rad cm cm rad wind error increases casting angles shallow agent speed increases casting distances increasing casting angle 
findings suggest increasing agent speed increase performance higher levels wind error 
possible create mapping wind error plume envelope optimal casting angle distance plume envelope defined search period 
evaluation comparison hit analysis relies assumptions success plume traversal algorithm dependent ability acquire odor hits second single probability receiving plume hits reasonable approximation actual plume traversal case 
investigate assumptions hit optimized algorithms type examined direct evaluation test bed described section 
sets individual trials algorithm run means set averaged produce performance values 
algorithm evaluation took minutes ghz pentium iii 
error bars represent standard error 
probability successful plume traversal straight straight step step sd wind direction rad comparison optimized step straight algorithms hit step straight direct step straight evaluation 
shows comparison algorithm performances step straight algorithm types evaluated hit analysis step straight direct test bed step straight 
quantitative correspondence expected hit analysis factor task parameters size source find area relative performance algorithms agree 
suggests assumptions required hit analysis accurate particular algorithms 
straight significantly outperforms step direct test bed plume find area spans entire plume width see 
best straight algorithm wind noise moves straight ahead algorithm enter source area may receive second odor hit 
step receive performance enhancement receive multiple plume hits reaching source area getting initial hit plume periphery lead failure plume narrow approaches source 
performance advan tage heavily dependent particular geometry chosen direct test bed extends wind direction variances explain straight consistently performs better step assumption acquiring plume hits related performance violated expect hit analysis properly evaluate straight 
fact performances direct test bed decrease quickly higher wind direction variances predicted hit analysis sug single probability assumption hit analysis hold 
algorithm types compose hit probabilities change significantly new odor hit 
unclear model effect hit analysis accurately capture performance algorithms largely unnecessary 
algorithms evaluated direct method little extra computational cost primary contribution hit analysis limitations uncover inherent weakness algorithms 
initial plume search process covers area containing plume uniformly location initial odor hit dependent average plume concentration modeled gaussian type plume equation 
mechanism moving laterally plume algorithms agent movement entirely determined gaussian wind reading 
second hit sampling distribution generated convolution initial gaussian agent distribution gaussian distributed movement result broader agent distri bution initial 
location second odor hit best mimic sampling distribution achieved plume perfectly gaussian agent allowed sample indefinitely 
real situations plume sim ply extend distance axis 
portion agents spread outside plume boundary able reacquire plume 
spatial distribution agents spreads iteration percentage active agents near plume boundary grow odor hit 
greater percentage agents fail receive subsequent odor hit decrease 
probability successful plume traversal zigzag zigzag spiral spiral sd wind direction rad comparison optimized zigzag spiral algorithms hit zigzag spiral direct zigzag spiral evaluation 
algorithms suffer limitation 
shows comparison algorithm performances zigzag spiral algorithm types evalu ated hit analysis zigzag spiral direct test bed zigzag spiral 
qualitative comparison holds evaluation types suggesting algorithms better modeled hit analysis 
algorithm non local aspects allow take advantage particular task description chosen direct test bed performance anomalies observed 
likewise algorithms able move plume axis part search analysis hit location composition gaussians hold 
broad sampling algorithm allows hit location follow plume concentration map systematic spread hit location distribution decline hit probabilities increase agent traverses plume plume dense nonstationarity accounted hit analysis agent essentially solving original difficult initial problem repeat explain fact direct performance levels consistently exceed hit levels 
probability successful plume traversal zigzag hit optimized values zigzag individual parameter sets sd wind direction rad probability successful plume traversal spiral hit optimized values spiral individual parameter sets sd wind direction rad direct evaluation values optimal parameter sets wind values compared direct performances hit optimized parameter sets zigzag spiral algorithms 
general hit parameter sets perform indicating hit optimization transfer real plume plume traversal task algorithms 
worthwhile note hit evaluation procedure quantitatively accurate useful optimization procedure assumptions met 
recall different parameter sets zigzag spiral employed wind variances 
algorithms evaluated wind variances direct procedure compared direct performances hit optimized values 
shows hit optimization generally best parameter values evaluated direct evaluation procedure parameter subset 
cases direct procedure evaluated different parameter set performing significantly better hit optimized set anova absolute performance differ ence 
note differences visible scale plots 
chapter investigation plume traversal algorithms turbulent odor plumes 
better understanding characteristics algorithm successful enable construction capable robust chemical plume tracing systems 
restricting sensory capabilities robots allows reduction problem task acquiring odor hit provides detailed way evaluate algorithm performance 
odor localization algorithms described detail shown performance characterization possible algorithm parameters tailored particular plume characteristics 
hit analysis captures performance types algorithms accurately stems intrinsic shortcomings algorithms tested 
hit analysis requires probability getting odor hit remains approximately agent traverses plume 
condition hold agents actively cast perceived wind axis agent distribution spreads larger percentage agents fail get subsequent plume hit plume stable inter hit time limited 
analysis concluded strategies actively cast plume tend better problem optimizing tradeoff upwind travel distance probability receiving hit addressed search particular algorithm parameters 
evaluating plume traversal algorithms experimental data accurate significant drawbacks 
evaluation values valid type plume originally filmed order able test broad cross section plume types plume experiments need run 
plume computer model parameters adjusted freely potentially substantial amount validation comparison experimental data need performed ensure pertinent plume structure properly captured 
second drawback methods evaluating traversal performance plume algorithm pair requires substantial amount data analysis correspondingly significant amount time limiting extent algorithm parameter space explored 
continuing advances computer technology alleviate problem near 
results shown chapter extend larger time length scales due self similarity turbulent plume structure 
plume tracing really difficult odor packets sparse due source tency diffusion detectable levels dispersed spatially due flow conditions faced fielding real odor localization systems investigated 
plume data sets incorporating large scale mean der times instantaneous plume width useful analyzing possible track plumes 
caltech plume described chapter representing actual plume data may capture greater degree flow complexity investigated context full odor localization task chapter 
chapter designing odor localization system previous chapters examined individual phases odor localization prob lem detail generating deeper understanding design issues involved 
knowledge guides application design methodology described chap ter full multi agent odor localization problem 
quantitative performance metric task defined chapter 
chapter distributed algorithm set parameterized behaviors described group agents solve full odor localization task 
experimental constraints allow plume traversal phase investigated real robots discussed chapter shown local position odor flow information tightly coupled robot behavior enable robot traverse real odor plume 
multiple agents demonstrated increase size solution space reached particular system swarm intelligence solution compares sequential search strategy task 
kinematic simulator de scribed chapter validated real robot data 
addition line machine learning algorithm optimize system performance full odor localization task different simulated environments shown performance enhanced optimal system parameters depend particular task studied 
model relate task parameters system performance 
spiral surge algorithm basic odor localization algorithm study spiral surge ss shown 
consists different behaviors related different subtasks 
robot path source stepsize odor hit plume spiral surge odor localization behavior 
table spiral surge algorithm parameters initial spiral gap width plume spiral gap width stepsize surge distance post odor hit length time reverting initial search spiral significance threshold consecutive separate odor hits number significant differences source declaration plume finding performed initial outward spiral search pattern constant inter cycle distance 
allows thorough coverage local space total search area large initial information provided deployment point external best guess source location 
alternatively priori knowledge available spiral gap greater arena size producing essentially straight line search paths provides effective search procedure shown chapter 
plume traversal performed type upwind surge algorithm 
odor packet encountered robot samples wind direction moves upwind set distance stepsize 
surge odor packet encountered robot resets surge distance resample wind direction 
surge distance reached robot begins spiral casting behavior looking plume hit 
zig zag casting performed marginally better single agent plume traversal analysis chapter spiral cast procedure allows simple integration source declaration behavior 
casting spiral tighter plume finding spiral post surge robot information local packet density thorough local search strategy 
robot subsequently re encounters plume repeat behavior additional plume information set amount time robot declare plume lost return plume finding behavior wider local spiral gap parameter 
source declaration accomplished fact robot performing plume traversal behavior head plume tend surge area plume information spiral back origin surge receiving odor hit 
robot keeps track internally post spiral inter hit distances odometry example sufficient information accurate locally series small differences indicate robot ceased progress plume source 
small inter hit distances occur parts plume method foolproof tuning difference threshold number observed occurrences source declaration required obtain particular performance plume 
see table summary individual ss parameters 
ss uses binary odor information generated single plume sensor simple reliable type information obtained real hardware temporal operating regime interest 
may information encoded distal fine plume structure due highly stochastic nature turbulent fluid flow odor packet nature plume unclear complex sensing graded intensity information larger fixed sensor arrays benefit odor localizing agent flow information available means 
collaborative spiral surge complex odor sensing may beneficial odor localization task possible route greater efficiency physical distribution odor sensing elements principle improve system speed robustness par search procedure 
performance benefit achieved constructing arbitrarily large complex single robot distributing number sensors group smaller simple communicating robots 
suitable command control interface collec tive viewed odor localization sensor way single larger robot generally device 
way increase performance robot swarm collaboration individual nodes 
particular collaboration obtained simple explicit communication schemes bi nary signaling team performance enhanced losing autonomy significantly increasing complexity individual level 
simple types communication integrated basic ss 
chap ter examines performance impact types communication communi cation come signal emitted upwind robots causes robots plume information surge direction calling robot attract signal emitted robot receive odor information causes robots surge away signaling robot enter power save mode awakened kill 
enhance performance attract extension communication type attract studied includes signal sent additional agents entered plume 
influence types communication analyzed group size determine impact system efficiency 
plume traversal results real robots real robot experiments focus plume traversal subtask contains plume related complexity full odor localization task due experimental limitations currently feasible study phases real robots 
justify high density agents plume general problem plume area small percentage total search area attract communication employed agents hold group traverses plume 
source declaration studied trial defined complete robot reaches distance source radius plume source 
task performance described equations combined convenience min min 
time needed task completion represents total distance traveled agents task 
taken cost unit time completing task cost unit distance running system 
optimum values task tmin dmin calculated agent executing optimal behavior straight line path start goal areas maximum speed 
maximum speed determines relationship time distance values maximum safe operating speed agent environment 
example set time energy components task factor equally minimum cost dmin tmin table plume traversal parameter values agent speed arena length plume length plume speed source find radius plume arena area goal search perimeter tmin dmin ss km ss stepsize ss ss stepsize real robot plume traversal performance tested sets ss parame ters control experiments 
stepsize considered plume traversal phase task studied 
parameter set ss represents nonlocal search search paths straight extend boundaries arena 
ss uses smaller spiral gap surge length perform local exploration arena 
control random odor uses ss parameters receives odor hits generated time sequence ss odor hits correlated robot position arena 
exper investigates algorithm incorporating precise odor packet location information efficient blind upwind behavior 
alternative experiment decouple wind source odor source creating wind field array fans due practical limitations experimental set random odor case easier implement provided equivalent formation proof concept point view 
second control random walk takes straight line paths random avoidance turns boundaries odor flow information provide traversal performance baseline 
specific parameters relating real robot tests listed table 
trials group size run ss ss random odor trials run random walk due high variance performance values 
error bars plots represent standard error specified 
tx tmin stderr tsf ss tsf ss tsf random odor tsf random walk group size dx dmin stderr dsf ss dsf ss dsf random odor dsf random walk group size normalized time finish task group size real robot trials 
lower values better 
normalized distance group size real robot trials 
lower values better 
figures show conditions studied traversal time decreases group size group distance traveled increases 
indicates expected search task time important performance energy usage larger group sizes preferred 
shows single robots generally efficient arena particular choice ss generates best results group size significant kolmogorov smirnov test group size demonstrating successful real robot plume traversal 
random odor performs worse ss group sizes significant group size ing location odor information important aspect search algorithm 
means ss plume tracing simply localizing source wind 
wind localizing place expect random odor perform exactly ss 
ss performs worse ss significant group sizes suggesting local search strategy performance stderr ss ss random odor random walk group size performance group size real robot trials 
higher values indicate better performance 
small arena goal search perimeter ratio high find goal chance 
random walk behavior retains relatively constant formance group size larger group sizes performance tends approach optimal observed performance 
suggests search arena random movement best strategy 
sequential search comparison ss perform better random search strategy way gauging ss performance compare basic sequential search 
task complete agent comes distance source odor plume aspect ignored reducing task search problem examined chapter 
note source sensor assumed perfect 
shown equation total amount time required single agent single pass entire arena estimated terms arena length agent speed source sensor range 
rv assuming uniform target distribution arena perfect ration team mates expected time find source group agents approximated ts note formulation account implementation details may overestimate performance search overlap necessary groups agents spread deploy ment area designated areas accurate purposes comparison 
performance best ss sequential sequential sequential sequential sequential sfr sfr act performance best ss algorithm basic sequential search different group sizes source find radius sequential algorithm approaches actual source find radius 
higher values indicate better performance 
ss explicitly source find radius performance vary 
arena length agent speed known quantities sensor range source find radius necessarily known priori system designer 
sensor ranges depend unknown variables environment depth buried mines 
specified range greater actual range incomplete coverage result conservative estimates typically necessary 
equation expected search time calculate expected distance traveled sequential search system see equation values calculate performance equation 
system performance plotted ratio programmed source find radius sf actual source find radius sf act 
best average performance observed ss algorithm depend predicted value source find radius included comparison 
sequential search single agent exceeds ss algorithm programmed source find radius factor actual value 
may difficult reach level accuracy particularly cost failing fully cover search area high 
large team sizes programmed source find radius greater actual value exceed ss performance 
proper radius known single agent sequential search performance factor ss performance large team performance factor overestimated discussed 
added cost localization mechanism required perform sequential search communication network needed group coordination considered 
kinematic simulations real robot performance data successfully reproduced shown 
simulated plume parameters envelope size sensor threshold see chapter details tuned ss data fixed conditions 
data represents trials group size 
parameters table apply data 
ss group size robot produces significantly different results determined tailed kolmogorov smirnov test real robots case error bars overlap 
data closely matches available real robot data reasonable simulated experiments accurately reflect real world behavior 
performance stderr ss rr ss rr random odor rr random walk rr ss ss random odor random walk group size performance real robot rr trials group size 
higher values indicate better performance 
full odor localization task principal limitation experiments described far relatively small arena available real robots 
simulation expand arena size move start area outside plume extent 
enables study phases odor localization task calls change task stopping condition 
experiments task declared complete greater half source declaration points agents source find radius plume source 
definition chosen avoid notion task failure bad source declaration overcome explicitly factoring distance declare point source location performance measure require arbitrary cost value introduce greater variation performance measure 
algorithm optimization performance impact types communication described earlier attract kill investigated different plumes 
attract studied attract preliminary tests indicated addition energy saving component communication algorithm reduced inter agent interference increased system performance 
plumes variants georgia tech plume data gt gt gt 
gt gt respectively density gt times larger length version plume small arena 
fourth plume ct caltech plume data set 
roughly size density gt complicated flow pattern 
see chapter details plume stimuli 
total plume communication pairs studied 
referred conditions condition evaluated range group sizes agents 
condition group size combination single optimization run described chapter executed ss parameters listed table 
parameters stepsize inter dependent combined single list parameter pairs searched 
parameter values chosen cover functionally significant partition parameter space listed table 
optimization parameter values defined section follows 
environmental algorithmic parameter values differ real robot experiments shown table 
table searched parameter values 
parameter definitions table stepsize table full task parameter values simulation arena length gt length gt arena area wind noise agent speed plume speed source find radius tmin dmin group size communication type technically algorithm parame ters evaluated separately optimization procedure trends variables analyzed 
total optimization runs plumes communication types group sizes performed 
executed ghz athlon xp run times ranged day weeks 
detailed chapter optimization run consists cycles parameters optimized remain fixed 
initial parameter selections random parameters chosen cycle serve input set subsequent cycle 
start run cycle perfor mance current parameter set measured executing task times averaging observed performance values 
run set performance measurements 
demonstrate optimization process succeeds improving performance performance values runs normalized maximum value observed run averaged runs 
shows performance increases initial cycles plateaus remainder run 
note performance evaluation stochastic component optimization process consider values mean performance analyzed manner expected converge 
data possible determine optimization maximum performance std cycle number performance optimization run normalized maximum value run averaged runs 
error bars indicate standard deviation 
process get trapped local minima 
purposes analysis runs assumed converged global optima output cycles considered optimal performance values 
time distance taken optimized cycles run cycles averaged produce values run 
shows time distance necessary group robots complete task plume 
note qualitatively curves resemble figures distance increasing roughly linearly group size time decreasing group size 
consistently uses energy plume types followed attract kill 
indicates energy saving measures built attract kill successful 
general sparse plumes greater influence distance traveled smaller group sizes 
distance traveled single agent increases factor gt gt distance groups agents increases 
kill requires largest amount time plume types indicating energy normalized time distance stderr normalized time distance stderr tc tc kill tc attract tc tc kill tc attract group size tc tc kill tc attract tc tc kill tc attract normalized time distance stderr tc tc kill tc attract tc tc kill tc attract group size group size normalized time distance stderr tc tc kill tc attract tc tc kill tc attract group size normalized time distance group size gt gt gt ct 
lower values better 
error bars represent standard error 
savings comes cost 
attract differ significantly time requirements attract energy savings significant suffer time penalty 
addition temporal speedup group size increases sparse plumes 
performance run shown 
average group size agents performs best gt gt ct group agents forms best gt 
attract performs near best plumes communication beneficial task 
performs worst gt com munication types perform similarly gt kill performs worst gt 
performance stderr performance stderr kill attract group size performance stderr kill attract group size kill attract group size performance stderr kill attract group size performance group size gt gt gt ct 
higher values better 
error bars represent standard error 
attract share best performance ct attract performs better larger group sizes 
results explained terms phases odor localization task emphasized plume 
plume sparse search phase prominent 
shown chapter harder search problems favor larger group sizes phase task parallelized quite easily 
sparse plumes task completion times drop drastically larger group sizes optimal group size increases 
likewise distance required large group sizes increase dramatically plume sparse thorough search process automatic distance required small groups increase significantly way achieve better coverage increasing distance traveled individual unit 
traverse declare phases emphasized smaller group sizes benefit 
tasks typically effectively carried small number robots large groups best burn extra energy worst cause destructive interference 
interference explain poor performance gt ct large group sizes 
plumes dense hold agents presence agents disturb casting spirals necessary plume traversal particularly source declaration 
gt gt appear sparse robots drawn plume task completion cause problems 
fact traverse declare phases possibly done best serially relatively easy 
kill uses agent subtasks requires shorter group distances communication types 
note kill fare cost losing plume high gt probability losing plume high ct note temporal speedup group size 
failures reflect high temporal cost plume loss parallel plume search capability lost 
trends optimization optimization procedure improve system performance looking optimized parameter values gain insight operation algorithm 
optimized parameters analyzed combining cycle results run examining parameter value selected results optimization result frequency curve 
simple example type data shown shows optimization result frequency curve averaged runs 
values possible see table data indicates nearly optimized parameter sets contain larger value 
task agent start area near optimization result frequency optimization result frequency optimization result frequency gt gt gt ct gt gt gt ct optimization result frequency gt gt gt ct optimization result frequency curve averaged runs optimization result frequency curves plume type averaged group size kill attract 
plume source initial local search wastes time energy 
surprising large value chosen reliability selection suggests optimization procedure functioning properly 
parameters exhibit greater degree complexity 
figures show optimization result frequency curves 
data averaged group size plotted plume type communication method 
recall searched pair stepsize spiral gap value appears pair appears twice value rarely selected analysis data captures relevant fea tures 
obvious result data ct heavily favors particular regardless communication type 
supports idea source declaration difficult phase ct task stepsize pair best procedure critical performance 
gt gt appear similar performance landscapes communication types gt renders traversal difficult smaller values favored kill attract agents performing traversal 
shift suggests particular plume smaller values reduce probability losing plume acquired 
optimization result frequency gt gt gt ct optimization result frequency gt gt gt ct optimization result frequency curves plume type averaged group size kill attract communication types 
optimization result frequency curves plume type averaged group size 
similar themes observed parameters 
shows selected values plumes kill attract commu nication types 
smaller values favored difference plumes 
shows data communication performance landscape ct markedly different 
plume communi optimization result frequency gt gt gt ct optimization result frequency gt gt gt ct optimization result frequency curves plume type averaged group size kill 
optimization result frequency curves plume type averaged group size attract communication types 
cation type larger values favored indicates large numbers agents traversing plume occur interfere produce spurious source declarations inhibit performance 
note effect observed gt just dense contain just agents easier declare cause flow patterns complex 
appears gt difficult declare different reason 
shows optimization result frequency curves kill plume type 
ma jor differences plumes gt favors slightly smaller values explained smaller size gt plume head 
shows data communication types suggests multiple agents plume gt favors larger source declaration distances 
explained fact multiple agents op erating concurrently small region space interfere precise declare procedure possible looser requirements necessary 
likewise multiple agents tracking plume ct favors smaller values consistent need limit false declarations due presence agents 
optimization result frequency group size group size group size group size group size optimization result frequency curves group size averaged gt gt gt communication 
observations group size 
shows optimization result frequency curves group size aver aged gt gt gt communication 
smallest group sizes favor larger values presumably avoid declaring plume traversing plume largest group size favors small count values facilitate declaration interference agents renders repeated declaration cycles difficult 
analysis intended con representative type information gleaned examining optimization results 
model performance specification optimization phases design process demon previous sections 
third design phase discussed chapter involves definition relationships system parameters system performance 
relationships experimentally validated test environment guide design deployable system allow designer predict system performance wider range environments explicitly examined experimentally 
performance model ss simulated ss real group size performance versus group size odor localization task small arena generated model kinematic simulator real robots 
model odor localization task drawn directly analysis coordinated search problem described chapter 
specifically task com plete agent comes range source experiments real arena time find source described follows lc np sr 
lc probability agent losing contact plume acquired number agents sr probability single agent getting odor hit search phase 
term sum represents expected amount time needed search plume assumes attract communication 
expected time traverse plume minimum required dispersion time arena 
represents expected time locate source 
required distance simple specify average robot speed 
real arena sr calculated mapping experiments see chapter measured directly real robot experiments collision avoidance wind scanning reduce actual speed maximum speed determined simple geometry 
choosing reasonable values lc results agreement real simulated modeled results task shown 
additions model necessary capture source tion phase task different communication strategies 
note model meant capture general performance trends specific interactions system modeled 
additional parameters de time required perform source declaration su distance travelled robot move away plume factor inter ference due inactive robots represents speedup declaration possible multiple agents plume 
parameter varies communication type corresponds number agents 
time complete task defined steps np sr 
expected time agent contact plume 
search time necessary contact subsequent plume loss expressed follows min lc 
min psr expected time system spend plume 
numerator expected number times plume lost denominator accounts time 
kill communication types time traverse plume declare source follows min de 
min term sum traversal time 
second term represents interference inactive agents source declaration third term represents source declaration time decrease number agents done parallel spatially 
attract greater speedup traversal time group size reflected term min min expected time task completion de 
min 
similarly equation distance traversed expressed terms traversal time reflect fact robots placed low power mode min min max su 
relative power savings inactive robot compared active 
term sum represents distance required plume hit 
second term represents distance traveled extra group members 
third term accounts distance traveled extra group members entering low power mode 
recall number agents trial 
performance stderr performance stderr kill attract model model kill model attract group size performance stderr kill attract model model kill model attract group size kill attract model model kill model attract group size performance stderr kill attract model model kill model attract group size performance group size gt gt gt ct generated model kinematic simulator 
higher values better 
error bars represent standard error 
note agreement simulator model plumes communication types 
table model parameter values gt gt gt ct sr fit fit lc fit de fit fit fit su fixed fixed fixed fixed attract kill respectively 
parameters chosen model shown table 
fixed algorithm 
calculated directly environment 
tuned fit data observable data effort respect similarities differences different plumes 
example sr gt estimated small arena resulting value reduced location odor hits correlated space density scale linearly 
likewise sr decreases plume sparseness ct roughly plume density gt sr value similar 
stays dense plumes roughly length 
gt extend far source smaller 
values small compared small arena expected point contact plume dependent distribution odor dense near plume source small arena starting location skews initial contact distal plume 
lc increases wth plume sparseness greater turbulent ct values lower small arena small arena particular algorithm presence arena walls increased incidence plume loss 
de remains gt plumes increases drastically ct changing wind direction declaration difficult 
parameter represents source declaration process requires larger area ct wind direction variable opportunity inactive agents interfere 
reflects fact dense plumes benefit parallel declaration agents 
model able fit data shown 
point matches perfectly agents attract gt unexpected optimized data averages values data point may skewed 
experimentation improve values current set data took processor weeks obtain stage simulation unwarranted purpose model reproduce data previously generated means 
real value model predictive power tested complex real world plume task addressed 
formulation representative type model intended produced guide design process 
chapter design algorithm odor localization groups autonomous mobile robots 
distributed algorithm described groups agents solve odor localization task 
algorithm odor flow information designed function environments flow weak detect reliably typically 
broad range military industrial situations involve stronger flows particular outdoor environment apply 
demonstrated simple sensory information tightly coupled robot behavior sufficient allow robot find source odor plume 
shows power integrating actuation sensory systems suggests complicated sensory transduction may necessary behaving sen mechanism tuned designated task 
addition shown integrating information collected group agents elementary manner increase efficiency odor localization system performance avenue previously explored real robots 
entire sys tem viewed odor localization sensor distributed approach opens new axis optimization inter agent communication available sin gle unit considered organizational principles swarm intelligence allow distributed systems remain scalable require minimal additional complex ity 
particular communication types explored represent basic interactions available complexity task description increases complicated plume types higher frequencies false positive odor hits corre complicated interaction schemes greater number signals variable signaling range necessary yield performance benefit 
long complex interactions reduced small set parameters integrated algorithm design methods 
chapter demonstrated key aspects design methodology feasible 
kinematic simulator reproduce real data sensory stimuli complex 
optimization process improve system performance provide insight algorithm function 
possible create relationships guide development 
may contradictory swarm intelligence approach stressed emphasizes minimalism actual robots study feature general purpose microprocessors high bandwidth communication 
care taken keep system requirements low algorithms study ported directly expensive smaller platforms 
robot swarms implemented large scale robust nature systems fully exploited 
advanced sensors available combine sensitivity discrimination mobility truly useful real world odor localization systems feasible 
chapter flocking improved collaboration previous chapter examined performance impact simple types collaboration full odor localization task 
chapter describes design complex mode interaction flocking investigates influence odor localization performance 
simple flocking task 
distributed flocking algorithm described conducive implementation embodied agents established algorithms computer animation 
design methodology followed optimize flocking performance different conditions showing previous chapter process improve performance gain insight algorithm components contribute system behavior 
shown group real robots executing algorithm emulated sensors successfully flock presence individual agent failure systematic characterization optimization real robot flocking performance achievable 
integration flocking behavior odor localization algorithm demonstrated shorten task completion times large group sizes corresponding gains distance traveled offset performance gains chosen cost metrics 
background flocking formation maintenance coherent group movement long studied natural systems efforts reproduce type behavior artificial systems 
appeared context computer animation 
behavior extensively studied simulation real robots 
theoretical treatments stability flocking behavior studies tend capture limited aspects flocking problem rely unreal istic agent capabilities perfect global communication 
study flocking distinct formation control goal flocking simply achieve maintain coherent group movement govern spe cific inter agent position relationships 
flocking better suited implementation large groups agents hundreds thousands overhead extensive inter agent communication unique agent identification renders formation control inefficient 
formation control flocking component larger multi agent system simplifying transport large numbers agents organizing nodes distributed sensing system 
majority chapter focus design scalable flocking algorithm section explore performance impact flock ing behavior integrated odor localization system studied previous chapter 
flocking task task definition flocking task examined similar form cooperative move ment task studied 
agents trial random positions tations area located corner square arena 
agents move diagonally arena obstacle field area opposite corner see 
trial declared finished half agents entered area traversal uniform probability time step agent fail meaning stops moving agents recognize teammate 
note trials able finish failed agents obstruct movement operational agents trials declared failed period time 
reduce number trials complete task number robot failures capped half total number agents 
purposes system performance defined combination time required complete task sum distances traveled successful agents average inter agent distance operational agents factors combined form cost metric 
taken cost unit time completing task cost unit distance running agent cost incurred unit distance inter agent separation agents provide mutual protection grouped looser groups associated protection higher costs due agent loss 
represents total cost incurred task completed 
choosing specific values proper relationship time required energy inter agent spacing generated evaluating application 
failed runs assigned cost lower successful run receive 
distributed flocking algorithm craig reynolds identifies behavior types lead simulated flocking separation alignment cohesion 
robotic flocking relies solely balanced combinations separation cohesion flock centering produce flocking behavior 
inclusion alignment term robotic flocking algorithms improve performance cost making heading information explicitly available system 
lead distributed flocking algorithm ld described essentially extension flock centering algorithm incorporating explicit collision avoidance mechanism separation suggest implicit velocity matching behavior alignment term comparison sequential flock centering data 
ld exhibit better flocking performance previous robotic algorithms comparative data unavailable significantly complicating implementation real robots 
ld explicitly alignment group members individual agents need able sense neighbors orientation range bearing data suffice 
specifically ld defined follows 
basic behaviors collision avoidance velocity matching flock centering 
collision avoidance activated agent collision sensors detect presence obstacle may environmental obstacle team member mediates turn away obstacle 
flock centering active collision avoidance involves generation target vector target difference vector mapping vectors wheel speed commands 
details behavior explained 
sensory input cycle agent utilize information closest neighbors residing region surrounding agent defined maximum range shown 
range ni bearing ni infor mation set neighbors desired cushion distance agent neighbors generate instantaneous center mass vector com agent ni com ni 
com normalized maximum number neighbors reduce vector sizes seen large values tunable system parameter represents strength attraction goal area agent centered heading goal area supplied gps signal 
flocking task studied robot flock sense range bearing neighbors sensory area defined maximum range example 
favors coherent movement flock neighbors directed movement goal added com induce movement proper direction 
com needed implement flock cohesion alignment requires information vector changing time 
information repre sented com 
generate com value com generated previous sensory cycle transformed current agent coordinates com current com 
agent change heading sensory cycles agent change position com com 
relationships algorithm components summarized 
agent access desired position respect neighbors com location moving respect agent com 
values generate motor commands 
gain factor allows agents speed slow approach com gain parameter summary generation com com 
maximum sensor range com cos com 
com denotes magnitude com direction vector com 
factored motor commands follows com com com com 
motor speeds biased desired travel speed changed differ rotate heading specified weighted sum direction desired location direction movement desired location 
weighting parameter determines fast agent approach target heading 
weights influence desired location direction versus desired location movement direction 
small induce agents align neighbors minimizing com move desired locations alignment achieved agents gradually steer com provided 
note necessary calculate optimal movement necessary reach goal position order functional system 
long commanded wheel speeds bring agent closer desired position sensory cycle com moves slower agent steady state agents approach goal positions 
formal stability conditions proofs examined chapter stable flocking systems observed broad range tunable algorithm parameters 
summary parameters shown table 
table distributed flocking algorithm parameters desired forward speed maximum number neighbors desired distance agents maximum sensor range motor speed gain parameters target attraction test environments kinematic simulation physical arena reproduced allow comparison data gener ated real robots different obstacle fields studied 
simpler obs contained cylindrical obstacles twice large agent complex obs contained sided barrier obstructed direct path start goal areas 
environ ments shown 
timeout value obs obs seen 
start goal areas indicated 
large disks obstacles smaller disks shown start area agents 
real robots group demonstrate flocking real robots shown 
flocking arena layout arena shown case single obstacle placed center arena 
addition standard configuration described robot equipped sharp gp infrared range sensors collision avoidance 
overhead camera tracking system combined radio lan robots external workstation log position data trials reposition robots trials emulate range bearing sensor signals 
results discussion optimization kinematic simulator optimization procedure flocking task involves line tuning parameters 
full optimization computationally feasible sequential optimizations performed parameter optimized flocking 
remain fixed 
restriction may finding optimal parameter set difficult search domains particular case stud ied allows performance improvements achieved reasonable amount time 
study selection design points specific parameter values optimize done priori techniques select ing adaptively may utilized studies 
parameter space bounded linearly discretized include range important values determined preliminary experiments 
optimization run variable values randomly initialized 
optimization process described detail chapter 
different conditions optimized consisting runs obs obs failures nf 
conditions set failures trial near optimal algorithm parameters obs envi ronment 
cost values trials fixed balance cost components near optimal algorithm parameters obs nf condi tion 
optimization parameter values follows 
shows flocking performance standard deviation cycle conditions 
ease presentation cmin plotted cmin represents lowest cost observed trials 
cycle data represents formance initial parameter sets 
obs nf converges highest performance value slightly worse followed nf 
shows obs difficult environment obs presence agent failures hurt performance 
conditions means standard deviations stabilize optimization cycles showing optimization improve perfor mance complete small number cycles 
fact conditions small standard deviation runs optimized cycle suggests optimization algorithm searches dimension time performing effective search fitness landscape susceptible trapped local minima 
standard deviations obs condi tions larger environments occasional runs fail complete timeout period performance metrics individual parameter sets higher variances 
min stdev obs nf obs nf obs obs cycle number optimization result frequency stdev obs nf obs nf obs obs cycle flocking performance experimental condition 
higher values better 
optimal result frequency curves maximum number neighbors observed flocking 
optimization procedure improve system performance cause looking optimized parameter values gain insight operation algorithm 
optimized parameters analyzed combining cycle results run averaging chosen parameter distributions runs condition results optimization re sult frequency curve 
shows optimal values environment different obs preferring smaller neighborhoods 
intuitive result agent listening fewer neighbors impeded neighbor caught barrier common obs open environments larger neighborhoods allow tighter flocks higher performance level 
pointwise way anova comparisons threshold significant difference determined optimization result frequency curves obs conditions differ obs remain simulated environment failure rates 
fact obs conditions result frequency curves differ parameter indicating best solution environment remained presence agent failure 
sense failed agent simply circular obstacle 
expected presence failed agents favor reduced agent neighborhood failed agents impede progress active clearly shows preference smaller obs compared obs nf 
obs environment optimal parameter values influenced presence agent failure shown 
absence agent failure low value optimal attractive force goal break groups apart move barrier 
agents fail task difficult failed agents trap barrier best solution move individuals goal opportunity presents high best 
note conditions broad region parameter space performance landscape effectively flat 
type finding suggests cases size parameter space searched may reduced resulting faster optimization runs loss optimization result frequency stderr obs nf obs nf obs obs stderr nf optimal result frequency curves attractive power goal area 
flocking performance group real robots versus maximum number visible neighbors 
higher values better 
performance 
real robots local range bearing hardware completed rely emulated sensory information overhead camera system form ld 
processing burden placed camera system limits maxi mum speed robots camera system able track robots frame frame position 
restriction fact control truly distributed renders extensive experimental effort unwarranted 
demonstrate capability quantitatively characterize real robot flocking performance principle reproduce simulated optimization exper iments real world set reasonable flocking parameter values chosen influence varying performance group real robots examined 
value trials run nf conditions resulting performance values shown 
average number failures trials 
ld represents baseline traversal behavior cooperation agents 
data demonstrates ld enable group robots flock flocking performance greater significant anova agent failure significantly influence performance anova larger sample sizes uncover significant difference 
specifics results highly dependent particular parameter values chosen arbitrary optimized detailed comparison simulation results meaningful 
flocking collaboration flocking integrated odor localization complex attract behav ior 
simply location odor hit agent agents performing search behavior fix hit location target destination center area move flocking agents 
flocking parameters optimized set obs nf condition desired inter agent spacing increased minimize interference plume 
interrupt source declare behavior agents search phase flock visible flocking agents 
influence flocking clear agents received plume hits rest agents attract 
odor localization flocking system termed flock 
optimization process performed collaboration methods run simulation flock see section full description performance results shown 
little difference performance attract flock 
indicate flocking simply influence odor localization may due fact flocking phase lasts briefly soon agents receive odor hits communication types identical 
plume show difference communi cation types gt dense period time performance stderr performance stderr attract flock group size performance stderr attract flock group size attract flock group size performance stderr attract flock group size performance group size gt gt gt ct 
higher values better 
error bars represent standard error 
third agents receiving odor hits greatest 
time distance required task completion normalized minimum values inverted ease presentation shown 
seen data larger group sizes flock requires time attract significant group sizes anova runs performed case agents average consists data points 
speed benefit offset larger distance traveled attract system presumably flocking agents spending time interfering moving higher average speed 
incorporation flocking inverse normalized time stderr attract flock group size inverse normalized distance stderr attract flock group size inverse normalized time required gt 
inverse normalized distance required gt 
higher values better 
error bars represent standard error 
odor localization behavior extend performance space system time larger factor performance energy tradeoff determined specific application increase system performance 
integrating flocking behavior source declaration procedure allow ing agents share information locally declare process lead performance benefits 
chapter described design flocking behavior investigated ence odor localization performance 
simple flocking task distributed flocking algorithm described conducive im plementation robots established algorithms computer animation 
key point algorithm uses time derivative perceived cen ter flock align robots explicit knowledge robot heading 
design methodology followed optimize performance different conditions showing method improve performance gain insight algorithm components contribute system behavior 
issue study automation selection improvement parameter ranges discretization levels searched 
addition ing optimization data may eventually possible construct models directly relate environmental characteristics parameter values 
demonstrated group real robots executing ld emulated sensors successfully flock systematic characterization real robot flocking parameters achievable 
integration flocking behavior odor localization algorithm demonstrated speed task completion large group sizes corresponding gains distance traveled offset performance gains chosen cost metrics 
chapter creation autonomous robots machines sense act world perform useful constant human supervision free humans repetitive dangerous tasks increase productivity immensely 
currently examples robotic systems operate degree autonomy unstructured environments approach level robustness observed relatively simple biological organisms ants termites 
part biological advantage natural systems possess distributed control structure consisting parallel local processes self organized susceptible single failures rely perfect sensing communication 
thesis methodology designing self organized autonomous robotic systems demonstrated process applied problem finding source airborne odor plume 
design methodology applicable task domains resulting odor localization system extends state art 
specifically contributions thesis follows self organized system design methodology relies formulation evaluation specific task metrics 
design procedure centers ability define specific task performance metric systematically evaluate performance realistic environment define model relates system parameters system performance 
relationships validated test environment comparing experimentally generated performance distributions derived model guide design deployable system 
design process relies heavily evaluative feedback emphasizes development tools allow collection accurate performance data 
reinforcement learning methodology described provides consistent optimization performance minimizing amount required evaluation 
improved odor localization system derive useful information distal part odor plume 
design methodology applied task odor localization 
plume traversal algorithm implemented real test bed simulation verify plume traversal place multiple collaborating robots expand reachable performance space 
parameter optimization performed simulation shown produce better performance real robot platform 
systematic experiments real odor plume required development robot platform arena infrastructure odor wind sensors 
collective search plume traversal combined ego centric source declaration full odor localization task optimized simulation 
odor tion algorithm shown functional sparse plumes 
design methodology model captures system performance algorithms environments 
real value model predictive power tested complex real world plume task addressed 
representative type model intended produced guide design process 
greater insight tradeoffs sensor reliability evaluation metrics coverage strategy collective search problems 
quantitative analysis tradeoffs group size efficiency collec tive search tasks considers time sensitive nature search completion system operating cost 
random coordinated search strategies analytical expressions derived predict optimal sys tem performance bounds particular task description 
performance benefit coordinated search shown dependent relative values different cost components 
sensor computer simulation support analytical results suggesting assumptions involved derivation sound 
understanding general properties required successful turbulent odor plume traversal algorithms 
problem plume traversal recast task obtaining odor hit set metrics provides detailed information algorithm function 
odor localization algorithms described shown algorithm parameters tailored particular plume characteristics improved performance 
hit analysis demonstrated capture performance types algorithms accurately concluded failure stems intrinsic shortcomings algorithms tested 
flocking algorithm suited implementation real hardware 
distributed flocking algorithm described conducive implementation embodied agents established algorithms computer animation 
design methodology followed optimize flocking performance different conditions showing process improve performance gain insight algorithm components contribute system behavior 
shown group real robots executing algorithm emulated sensors successfully flock presence individual agent failure systematic characterization optimization real robot flocking performance achievable 
thesis focused design self organized robotic systems 
exists skepticism robotics community systems prove useful particularly deemed difficult integrate traditional military command structures military funding drives robotic research 
understandable concern deploying robotic systems relinquishing ability control communicate times necessary dealing large numbers agents 
order prove self organized systems feasible successful large scale system demonstrated 
done suitable task benefits extreme parallelism agents warrants significant investment required develop complete system 
odor localization essentially search problem fulfills requirement circumstances may see satisfy 
bibliography willis 
organization goal oriented motion pheromone modulated flight behavior 
beer mckenna editors biological neural networks robotics 
academic press new york 
arkin 
behavior robotics 
mit press cambridge ma 

eddy chemotaxis odor landscapes exploration nature animal sensors 
biological bull 
balch 
integrating rl behavior control soccer 
proc 
ijcai workshop robocup nagoya japan 
balch 
behavioral diversity learning robot teams 
ph thesis college computing georgia institute technology december 
balch arkin :10.1.1.28.2247
behavior formation control multi robot teams 
ieee robotics automation december 
willis 
adaptive control odor guided locomotion behavioral flexibility environmental unpredictability 
adaptive behavior 
beni wang 
swarm intelligence cellular robotic systems 
pro ceedings nato advanced workshop robots biological systems il italy 

survey search theory literature 
naval research 
bower 
multi day recording olfactory bulb neurons awake freely moving rats spatial temporally organized variability odor ant response properties 
computational neuroscience 
billard ijspeert 
multi robot system adap tive exploration fast changing environment probabilistic modelling experimental study 
connection science 
bonabeau dorigo theraulaz 
swarm intelligence natural artificial systems 
oxford university press new york 
booker goldberg holland 
classifier systems genetic algorithms 
artificial intelligence 
braitenberg 
vehicles 
experiments synthetic psychology 
mit press cambridge ma 
brogan hodgins 
group behaviors systems significant dynamics 
autonomous robots 
brooks 
robust layered control system mobile robot 
ieee robotics automation ra march 
bruno 
pioneer joseph shares robotics 
red herring august 
burgard cremers fox lakemeyer schulz steiner thrun 
experiences interactive museum tour guide robot 
artificial intelligence 

self organization biological systems 
princeton university press princeton 
cao fukunaga kahng 
cooperative mobile robotics antecedents directions 
autonomous robots 
neto 
effect pheromone plume structure orientation pheromone 
editors perspectives insect pheromones 
new frontiers pages 
chapman hall 

topological simultaneous localization mapping slam exact localization explicit mapping 
ieee transactions robotics automation april 
walker ard 
sensor ration incremental construction hierarchical generalized voronoi graph 
international journal robotics research february 
colombetti dorigo 
behavior analysis training methodology behavior engineering 
ieee transactions systems man cybernetics part 
david kennedy perry 
re appraisal insect flight point source wind borne odor 
journal chemical ecology 
lewis quantitative study resolving power arrays carbon black polymer composites various vapor sensing tasks 
anal 
chem 

robotics practice management applications robots 
new york 
farrell 
plume tracing simulator 
www ee ucr edu farrell 
floreano mondada evolution homing navigation real mobile robot :10.1.1.153.9160
ieee transactions systems man cybernetics june 
united nations economic commission europe international feder ation robotics 
world robotics statistics market analysis forecasts case studies profitability robot investment 
geneva 
mataric 
robot formations local sensing control 
proceedings international symposium computational intelligence robotics automation ieee banff alberta canada july 
freund lewis 
chemically diverse conducting polymer electronic nose 
proceedings national academy sciences usa 
gage 
randomized search strategies imperfect sensors 
pro ceedings spie mobile robots viii volume pages boston september 
gage 
robots mcm search systems 
bottoms eagle editors proceedings autonomous vehicles mine sures symposium pages monterey april 
goldberg mataric 
design evaluation robust behavior controllers 
balch parker editors robot teams diversity polymorphism 
ak peters 
grasso mountain 
biomimetic robot performs chemo orientation turbulence pair spatially sep sensors 
robotics autonomous systems 
graves czarnecki 
design patterns behaviour robotics 
ieee transactions systems man cybernetics part systems humans january 
hayes 
robots 
group size efficiency collective search tasks 
proc 
sixth int 
symp 
distributed autonomous robotic systems fukuoka japan june 
springer verlag 
appear 
hayes goodman 
comparing distributed ration strategies simulated real autonomous robots 
parker bekey editors proc 
fifth int 
symp 
distributed au robotic systems pages knoxville tennessee october 
springer verlag 
hayes goodman 
swarm robotic odor local ization 
proc 
ieee conf 
intelligent robots systems pages hi october 
ieee press 
hayes goodman 
distributed odor source localization 
ieee sensors 
appear 
holland 
adaptation natural artificial systems 
university michigan press ann arbor 
holland 
stigmergy self organization sorting collective robotics 
artificial life 
gini 
repeatability real world training experiments case study 
autonomous robots 
ijspeert billard gambardella 
collaboration exploitation local interactions autonomous collective robotics stick pulling experiment 
autonomous robots 
ishida 
odor source tion clean room autonomous mobile sensing system 
sensors actuators 
ishida 
plume tracking robots new application chemical sensors 
biological bulletin april 
jones 
structure instantaneous plumes atmosphere 
journal hazardous materials 

line quality control parameter design taguchi method 
journal quality technology 

self generated zigzag turning mori males pheromone mediated upwind walking 
science 
goodman lin 
autonomous water va por plume tracking robot passive resistive polymer sensors 
autonomous robots 
kelly keating 
flocking fusion sonar active infrared sensors physical autonomous mobile robots 
proc 
third int 
conf 
mechatronics machine vision practice pages portugal 
kennedy eberhart 
swarm intelligence 
academic press san diego ca 
koehler simon 
estimating functions evaluated simulation bayesian analytic approach 
annals applied probability 
krieger keller 
ant task allocation recruit ment cooperative robots 
nature august 
kube bonabeau 
cooperative transport ants robots 
robotics autonomous systems 
miura 
synthesis pheromone oriented emergent behavior 
proceedings ieee rsj international conference intelligent robots systems pages 
leonard 
virtual leaders artificial potentials coordi nated control groups 
proceedings th ieee conference decision control pages 
lerman 
learning real team solutions 
lecture notes artificial intel lnai 
springer verlag berlin 
lipson pollack 
automatic design manufacture robotic 
nature 

special feature service sector robotics robots breaking factory 
red herring september 
lewis 
array vapor sensing chemically sensitive carbon black polymer resistors 
chem 

mataric interaction intelligent behavior 
ph thesis mit boston may 
mahadevan connell 
automatic programming behavior robots reinforcement learning 
artificial intelligence june 

swarm intelligence autonomous collective robotics tools analysis synthesis distributed control strategies 
ph thesis nr 
epfl lausanne switzerland october 
ijspeert gambardella 
probabilistic model understanding comparing collective aggregation mechanisms 
ano mondada 
nicoud editors proc 
fifth int 
european conf 
artificial life ecal lecture notes computer science pages 
springer verlag lausanne switzerland september 
ijspeert mondada 
understanding collective ag mechanisms probabilistic modelling experiments real robots 
robotic autonomous systems 
mataric 
designing understanding adaptive group behavior 
adaptive behavior december 
mataric 
issues approaches design collective autonomous agents 
robotics autonomous systems december 
mataric 
reinforcement learning multi robot domain 
autonomous robots march 
mataric 
learning behavior multi robot systems policies mod els agents 
cognitive systems research special issue multi disciplinary studies multi agent learning april 
lawrence lewis 
combinatorial approaches synthesis vapor detector arrays electronic nose 
comb 
chem 
mccarthy minsky rochester shannon 
proposal dartmouth summer research project artificial intelligence 
august 
merriam webster editor 
merriam webster collegiate dictionary 
interna tional thomson publishing london 
michel 
symbiosis virtual real mobile robots 
proceedings international conference virtual worlds vw pages paris france july 
springer verlag 
minsky 
steps artificial intelligence 
proceedings institute radio engineers 
mondada 
mobile robot miniaturization tool investigation control algorithms 
yoshikawa miyazaki editors proc 
third international symposium experimental robotics pages kyoto japan 
springer verlag 
zamora 
specialization multi agent systems learning 
biological cybernetics 

odor plumes insects 
annu 
rev 
nagle osuna schiffman 
electronic 
ieee spectrum september 
ishida 
sensing system odor plumes 
analytical chemistry august 
parker 
lifelong adaptation heterogeneous multi robot teams response continual variation individual robot performance 
autonomous robots 

quality engineering robust design 
prentice hall engle wood cliffs nj 
ramsey 
multiple independent means 
edwards editor applied analysis variance behavioral science volume xi pages 
marcel dekker new york 
reynolds 
flocks herds schools behavioral model 
computer graphics 
roberts 
modeling bay plumes 
ii far field 
hydraulic engineering 
russell 
odor detection mobile robots 
world scientific singapore 
russell thiel mackay sim 
robotic system locate hazardous chemical leaks 
proceedings ieee international conference robotics automation pages nagoya 
ram 
learning parameter adaptive reactive con robotic navigation 
proceedings world multiconference systemics cybernetics informatics july 
simon 
kasparov vs deep blue ai lessons 
communi cations acm august 
simons 
current approaches change blindness 
visual cognition spe cial issue change detection visual memory 
powell 
plume dispersion stratified near coastal flow measurements modeling 
continental shelf research 
sutton barto 
reinforcement learning 
mit press cambridge ma 
takahashi asada 
behavior acquisition multi layered reinforce ment learning 
proceedings ieee international conference systems man cybernetics pages 
thrun 
probabilistic algorithms robotics 
ai magazine 
thrun 
probabilistic online mapping algorithm teams mobile robots 
international journal robotics research 
tu 
flocks herds schools quantitative theory flocking 
physical review 
gambardella 
learning real team solutions 
weiss editor dai meets machine learning lectures artificial intelligence pages 
springer verlag berlin 
vickers baker 
responses single strands odor promote sustained upwind flight odor source location 
proceedings national academy sciences usa 
walter 
living brain 
norton new york 
webb 
view boundary 
biological bulletin april 
webster rahman 
usefulness bilateral com parison tracking turbulent chemical odor plumes 

webster rahman 
laser induced fluorescence mea turbulent plume 
journal engineering mechanics 
submitted 
webster roberts ra ad 
simultaneous mea turbulent jet 
experiments fluids 
webster 
guidance cues turbulent chemical odor plume 
oceanography 

odor trails vortex streets chemo orientation turbulent laminar flows 
lehrer editor orientation communication pages 
birkhauser basel 
rizzi koditschek 
comparative experiments new adaptive controller robot arms 
ieee transactions robotics automation february 
holland 
application wireless local area net technology control mobile robots 
microprocessors tems 
wolpert wheeler tumer 
collective intelligence control distributed dynamical systems 
letters march 
wright 
bold new vision robotics improved robotics vision systems bring step closer generation manufacturing 
advanced manufacturing march 

global stochastic optimization low dispersion point sets 
operations research november december 
yamaguchi beni 
distributed autonomous formation control mobile robot groups swarm pattern generation 
proc 
second int 
symp 
distributed autonomous robotic systems pages 
springer verlag 
