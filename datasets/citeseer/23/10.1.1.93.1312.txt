programming grid glite fisher white craig di hicks middleton walk wilson tbd cern geneva switzerland ral oxford uk switzerland brno czech republic infn italy univ 
amsterdam netherlands kth stockholm sweden rome italy march advances networking distributed computing allowed establishment production grid infrastructures past years 
today large scale production grid infrastructures egee europe osg japan offering services scientific industrial applications domains diverse astronomy biomedicine computational chemistry earth sciences financial simulations high energy physics 
grid infrastructures provide applications new means collaborative research facilitating sharing computational data resources unprecedented scale 
efficient secure sharing data resources reach tera petabytes application domains main challenges grid infrastructures 
enabling grid science project egee europe research infrastructures grid project world largest grid infrastructure kind 
involves partners countries arranged twelve regional federations providing cpus sites petabytes available network storage 
infrastructure supports scientific domains individual applications 
started april egee rapidly grown european global endeavor way learned great deal business building production quality infrastructure 
consortium effort represents significant proportion europe grid experts including academic institutions partners form research network community european industry 
grid systems applications aim integrate manage resources services distributed heterogeneous dynamic virtual organisations traditional administrative organisational domains real organisations 
funded enabling grids science egee project european commission contract number ri virtual organisation vo comprises set individuals institutions having access computers software data resources collaborative problem solving purposes 
virtual organisations concept supplies context operation grid associate users requests set resources 
sharing resources vo necessarily highly controlled resource providers consumers defining clearly carefully just shared allowed share conditions sharing occurs 
resource sharing facilitated controlled set services allow resources discovered accessed allocated monitored accounted regardless physical location 
services provide layer physical resources applications referred grid middleware grid system needs integrate grid services resources provided different vendors operated different organisations 
key achieve goal standardisation 
currently pursued framework global grid forum ggf standards bodies 
egee deploys glite middleware middleware stack combines components developed various related projects particular condor globus lcg extended egee developed services 
middleware provides user high level services scheduling running computational jobs accessing moving data obtaining information grid infrastructure grid applications embedded consistent security infrastructure 
describe egee infrastructure programmed version glite glite 
discussing glite architecture glite security infrastructure section section respectively highlight particular glite services information monitoring section workload management section data management section 
section reports experiences user communities gained egee infrastructure concluding remarks outlook section 
glite architecture glite grid services follow service oriented architecture facilitate interoperability grid services allow easier compliance upcoming standards ogsa principles 
services expected concerted way order achieve goals user deployed independently allowing exploitation different contexts 
depicts high level services thematically grouped service groups security services encompass authentication authorization auditing services enable identification entities users systems services allow deny access services resources provide information post mortem analysis security related events 
provides functionality data confidentiality dynamic connectivity service means site control network access patterns applications grid services utilizing resources 
information monitoring services provide mechanism publish consume information monitoring purposes 
information monitoring system directly publish example information concerning resources grid 
specialized services job monitoring service network performance monitoring services built top 
job management services main services related job management execution computing element workload management accounting job provenance package manager services 
primarily related job management services accounting special case eventually take account computing storage network resources 
see instance discussion different software layers grid infrastructure 
glite services computing element ce provides virtualization computing resource typically batch queue cluster supercomputers single workstations 
provides information underlying resource offers common interface submit manage jobs resource 
workload management system wms grid level schedules jobs available ces user preferences policies 
keeps track jobs manages consistent way logging bookkeeping service 
job provenance jp service provides persistent information jobs executed grid infrastructure inspections possible re runs 
package manager pm service allows dynamic deployment application software 
ce wms part production glite release jp pm available prototypes discussed 
data services main service groups relate data file access storage element catalog services data movement 
data management services described granularity data file level 
services generic extended levels granularity 
storage element se provides virtualization storage resource reach simple disk servers complex hierarchical tape storage systems ce abstracts computational resources 
catalog services keep track data location relevant metadata checksums data movement services allow efficient managed data transfers ses 
access files controlled access control lists acls 
application specific metadata expected stored basic glite services application specific metadata catalogs 
data management services act single files collections files 
user egee data services abstraction global file system 
client user application may look unix shell seamlessly navigate virtual file system listing files changing directories helper services addition services described grid infrastructure may provide set helper services aim providing higher level abstraction workflow services market mechanisms better quality service reservation allocation services better manageability infrastructure instance configuration services 
description scope 
note glite architecture general impose specific deployment scenarios instances certain service available user service replicated distributed 
importantly service instances may serve multiple vos facilitate scalability performance grid system vo may require instance 
remainder focus particular security monitoring job management data management service services typical user interacts 
details internals glite services scope glite architecture document 
security egee security architecture established grid community 
authentication side credential storage ensures proper security user held credentials proxy certificates enable single sign 
tls gsi ws security possibly transport message level security protocols ensure integrity authenticity optionally confidentiality 
eu establishes common set trust anchors authentication infrastructure 
authentication attribute authorities enable vo managed access control policy assertion services enable consolidation central administration common policy 
authorization framework enables local collection arbitration customization reasoning policies different administrative domains integration service containers legacy services 
functionalities described egee security architecture cases embedded service container application performance reasons rendered separate web services 
important security architecture egee allows basic interoperability grid deployments middleware projects 
minimum possible authentication authorization architecture systems operation 
depicts overview components security architecture interact typical request flow 
user obtains grid credentials credential store necessary tokens assert user rights access resource credentials short lived derived longer term credentials identity certificates issued certification authority ca 
egee uses credential store virtual organization membership service attribute authority 
manage membership vos 

user service container authenticate identities establish secure communication channel open network integrity authenticity confidentiality protection word user wide terms instance encompasses software agents act user behalf resource web services terminology practically managed front ended service compute element file transfer client information index ca year home institution user user certificate credential store short lived proxy cert 
attribute authority vo attributes group membership roles cert attributes network connectivity active credential store 
transport layer security tls mutual dynamic connectivity delegated cred renewal sandbox resource ce se 
sandboxing setuid service endpoint pdp pdp pdp 
service container 

proxy delegation user 
site policy blacklists file system acls attribute validators host certificate trust anchors revocation info overview components security architecture typical interaction user agent accessing resource 
non complete soap message payload conveyed 
default accomplished tls 
established connection event logged 

authentication layer validates user identity trust anchors credential revocation information exists 
result validation logged service container absorbs payload routes correct service endpoint 
case message level security authentication integrity checks happen message absorbed network 

authorization routines ensure user permission access resource combining asserted attributes vo policy sent request local site policy sources access control 

case delegated credentials user delegates rights delegating resource act user behalf 
note delegation typically happens separate point invocation part application level message flow user service 

service implementation gets invoked 
authorization routines may additional evaluation consultation 
depicted right hand side picture check mirrored client side client validates target computer sending message performing set checks 
table column defs table column defs table column defs schema primary producer table tuples consumer secondary producer demand producer virtual table consumer gma components table producer details table producer details table producer details table producer details table producer details table producer details registry 
service interacts resource turn may delegated credentials disposal 
sandboxing isolation techniques limit user influence resource expected boundaries avoiding malicious unintended usage worst scenario security breach 
include operating resource different user space service container 
consulting dynamic connectivity service order temporarily enable direct inbound outbound network connectivity resource 
provide additional protection delegated credentials active credential store 
useful case long term resource renewal delegated credentials may necessary 
information monitoring services glite system information monitoring gma relational implementation grid monitoring architecture ggf 
gma designed easy users publish information batch job query information grid environment 
shows principal components gma 
data written gma virtual database producers read consumers 
gma distributed database management system 
provides useful predictable information system built looser coupling data providers grid 
defining schema task user define needs published 
tables relational model 
common technique design relational schema surrogate keys small integer foreign key establish relationship 
traditional case assign department include column employee table 
works single managed database mechanism assign values grid 
assume anybody publishing 
best think publishing series measurements quantity different times gma tuples records associated timestamp gma query types take advantage 
producers producers data providers virtual database 
writing data virtual database known publishing data published complete rows known tuples 
classes producer primary secondary demand 
created user application returns tuples response queries consumers 
main difference tuples come 
ways considered job publish data gma 
intrusive job wrapper publish information state job picked looking stdout 
done modifications job provided useful information gleaned stdout 
job wrapper insert data gma system means primary producer important gma calls 
create primary producer appropriate properties 
declare table predicate information goes registry 
insert tuples virtual database 
close primary producer second alternative insert gma calls directly application code 
done supported apis java python 
code gma viewpoint identical job wrapper 
third approach native logging api log log log useful things 
need run program gma provided java 
takes messages gone terminal syslog sends gma producer 
attractive solution requires user just existing logging mechanisms disadvantage possible modify schema 
may wish collect information secondary producer capable answering latest history queries 
probably set redundancy 
sake example assume wish store history create secondary producer answer history queries 
consumers gma consumer represents single sql select query virtual database 
query matched list available producers registry set producers capable answering query selected 
query types continuous latest history static 
expressed normal sql query restrictions continuous query simply acts filter published tuples joins aggregate functions permitted 
issue continuous query receive tuple satisfying query published 
query natural 
latest query considers tuples published 
tables primary key defined allow latest tuples defined 
query information perform continuous query connected primary producers carry history query connected secondary producer created answer history queries 
command line tool easy command line tool written python provided built help system 
tool accepts short commands provides defaults possible 
example select name endpoint service prompt issue query current values parameters type query timeout current values changed displayed set query continuous set timeout minutes show command history command completion provided 
service discovery approach taken service discovery api hiding underlying information system 
information system linked plug mechanism currently support gma xml file 
apis provided java allow user service select suitable service 
understand gma monitoring service discovery apis please consult gma documentation 
workload management services workload management system wms comprises set grid middleware components responsible distribution management tasks grid resources way applications conveniently efficiently effectively executed 
specific kind tasks request computation usually referred jobs 
wms scope tasks needs broadened take account kinds resources storage network capacity 
change definition mainly due move batch activity applications demanding requirements areas data access interactivity user tasks 
core component workload management system workload manager wm purpose accept satisfy requests job management coming clients 
fundamental component job logging bookkeeping service described 
computation job main types request submission cancellation status request managed logging bookkeeping service 
particular meaning submission request pass responsibility job wm 
wm pass job appropriate ce execution account requirements preferences expressed job description 
decision resource outcome matchmaking process submission requests available resources 
availability resources particular task depends state resources utilization policies resource administrators administrator vo user belongs put place 
glite job description language job passed glite wms needs described specific language glite job description language 
glite originally developed eu datagrid project condor classad language 
central construct record structure classad composed finite number distinct attribute names mapped expressions 
expression contains literals attribute composed operators syntax 
ads conform protocol states description include expressions named requirements rank denote requirements preferences advertising entity 
entity descriptions match ad attribute requirements evaluates true context ad 
main advantages framework summarized points uses semi structured data model specific schema required resources description allowing naturally heterogeneous environment language folds query language data model 
requirements queries may expressed attributes job description classads class objects model descriptions arbitrarily nested leading natural language expressing resources jobs aggregates dags allocation requests glite defines specific attributes specify 
batch interactive simple mpi partitionable jobs 
aggregates jobs dependencies directed acyclic graphs 
constraints satisfied selected computing storage resources 
data access requirements appropriate conventions established express constraints data job wants process physical logical location grid 
preferences choosing suitable resources ranking expressions mentioned semi structured extensible 
set predefined attributes special meaning underlying components workload management system 
mandatory optional 
set predefined attributes decomposed groups job attributes representing job specific information specifying way actions performed wms schedule job transfer job input sandbox files data attributes representing job input data storage element related information 
selecting resources application best access data requirements rank allowing user specify respectively needs preferences term resources applications 
requirements rank expressions built resources attributes represent characteristics status resources recognizable job description prefixed string 
resources attributes part predefined set attributes naming meaning depends adopted information service schema publishing information 
independence resources information schema allows targeting submission resources described different information services changes job description language 
example describe simple job type job normal biomed executable bin bash std std err arguments sim sh environment gate bin usr local bin std std err brain root lfn lfn file gridftp grid pd infn home jobs bin sim sh home jobs required mac home jobs required db rank requirements member gate job description represents monte carlo simulation radiological imaging 
asks run sim sh simulation script resource gate application tomographic emission installed cpus available computation 
image data accessed simulation identified grid logical names 
details meaning attributes reader refer 
wms user interfaces having created descriptions applications users expect able ignore complexity grid resources enabled submit workload management system monitor evolution grid accomplished means appropriate api specific graphical user interface 
glite wms user interface logical entry point users applications workload management system 
component provides access services wms includes public interfaces exposed wms 
functionalities user interface allow access job including dags submission execution remote computing element including automatic resource discovery selection staging application input sandbox restart job previously saved checkpoint state interactive communication running job listing resources suitable run specific job job requirements cancellation submitted jobs retrieval output files completed jobs retrieval checkpoint state completed job retrieval jobs bookkeeping logging information 
functionality available command line interface api providing java bindings 
gui components developed top java api 
command line interface short basic commands glite command line interface 
details 
information usage command issuing command help command sure glite wms location glite location environment variables point valid wms ui installation path path containing bin directories 
glite wms job submit submits job wms precisely service 
requires file input returns wms job identifier 
glite wms job status queries logging bookkeeping service information collection retrieval partner wms status job 
glite wms job logging info lists events collected logging bookkeeping service collected lifetime job allow determine current status 
glite wms delegate proxy allows user delegate proxy credential service 
delegated credential job submissions 
glite wms job list match lists identifiers jobs submitted service user issuing command 
glite wms job cancel cancels jobs previously submitted service 
glite wms job output retrieves output files job finished 
operation job context purged operations possible glite wms job perusal manages perusal access files working area running job functionality job 
application programming interface wms client api supplies client applications set interfaces job submission control services available glite wms web service interface 
api provides corresponding method operation published wsdl description service egee wm mi infn egee wm 
request types supported service job simple application dag directed acyclic graph dependent jobs collection set independent jobs jobs turn batch interactive mpi partitionable parametric 
specification describing mentioned request types available 
requests submission exposes additional functionality request management control cancellation job files perusal output retrieval 
requests status follow achieved functionality exposed logging bookkeeping lb service 
documentation describing client api providing java python bindings 
pointers usage examples provided web pages 
logging bookkeeping logging bookkeeping service short see wms internally gather various information running jobs provide user view job state 
gathering system information running jobs service collect user information form arbitrary name value tags annotations assigned job running application independently 
addition querying job information glite user interface commands user pose simple complex queries public api available web service interface 
examples queries state concrete job details user running jobs jobs running concrete computing element user jobs returned exit code user jobs resubmitted hours user jobs annotated green red color started execution week january user failed jobs marked red re colored green red colored jobs heading computing element proved fail running user jobs 
list random examples demonstrate strength api 
user register receiving notifications job enters state matching conditions specified similar way 
examples discussed detail including appropriate code fragments 
data management services glite data management service stack assumption lowest granularity data file level 
deal files comes application data opposed data sets data objects tables relational database 
reason arguably restrictive assumption twofold importantly initial application groups egee glite implementation high energy physics biomedical communities data stored files 
second reason semantics files understood service provider application side 
case generic data objects example application group definition 
grid user identifies files logical file names 
lfn namespace hierarchical just conventional filesystem 
semantics lfn namespace exactly unix filesystem 
lfn name identifier associated file grid average user may filename benefit single global namespace 
maintain view grid data management middleware keep track logical physical file instance mappings scalable manner see section catalogs 
names identifying data grid lfn logical file name logical human readable identifier file 
unique mutable changed user files renamed 
namespace global hierarchical namespace file data organized computerized system today 
tools semantics may provided user logical namespace grid local filesystem 
virtual organisation namespace agrees convention 
guid global unique identifier logical identifier guarantees uniqueness construction mechanism 
lfn guid relationship 
guids immutable changed user 
file acquires guid changed consistency assured 
guids grid applications immutable pointers files 
change application may suddenly point wrong file 
filesystem analogy guids unique inode number file 
relation means allow hard links virtual filesystem experience tells implementing globally distributed filesystem hard links difficult introduces unnecessary complexities especially delete method 
logical logical namespace provides concept symbolic links 
symbolic links point lfn 
may lfn relation 
lfn removed renamed left dangling analogy usual filesystem semantics 
site url specifies physical instance replica file 
projects referred physical file name pfn 
file may replicas mapping guids mapping 
file replica unique 
glite fully qualified srm names accepted storage element srm interface see storage section 
example srm cern ch srm castor cern ch file srm endpoint implicitly part comes 
usually users directly exposed logical namespace defined 
storage url term srm specification actual file name inside storage system 
storage site url logical name real location file disk 
transport url 
url transfer file standard transport protocol 
fully qualified url starting protocol transfer direct file access native mechanism 
data services put basic categories storage catalogs movement describe 
storage glite relies storage systems exposing srm interface 
current systems supported include castor dcache 
glite disk pool manager dpm 
dpm developed lightweight solution disk storage management offering functionality dcache avoiding complexity 
dpm security enabled providing acl authentication file access 
addition srm interface dpm offers rfio 
interface posix data access gridftp data transfer 
mechanism glite file transfer service described 
order shield user differences current storage systems expose posix access libraries glite provides grid file access library api posix interface provides methods open read different srm implementations including native posix access mechanisms gridftp 
catalogs glite provides catalog named lfc store location files replicas 
lfc map guids 
high performance file catalogue builds experiences particular hep data challenges 
lfc supports oracle mysql database backends integrated interface 
shares codebase name service part dpm discussed 
similarly dpm lfc exposes methods user interface turn interacts srm implementations gridftp 
lfc client posix command line interface commands lfc chmod lfc ls lfc rm 
data movement glite file transfer service fts low level data movement service responsible moving sets files site allowing participating sites control network resource usage 
control includes enforcement site usages policies fair share mechanisms dedicated network links 
designed point point movement physical files 
fts dedicated interfaces managing network resource display statistics ongoing transfers 
fts supports able communicate external grid file catalogs file transferred specified logical file name 
fts interfaces programming 
file transfer interface submit file transfer jobs get status current jobs list requests job state cancel transfers set priority transfers add remove list vo managers 
channel management interface add list delete channels fts instance set channel parameters bandwidth nominal throughput number concurrent files transferred 
methods add remove list channel managers apply policies jobs need manual intervention hold state 
status interface list summarize channel vo activity list running background transfer agent processes 
set command line tools available interact interfaces performing tasks contacting fts 
fts interfaces come wsdl descriptions user wsdl generate clients language needed 
glite distribution includes set client apis java perl 
secure connection talk fts web service valid gsi proxy necessary 
extensions needed client wants contact example channel management interface vo site managers extra admin group membership signed 
fts transfer interface method takes input object consists array describing individual file transfer job source destination pairs 
list parameters key value pairs transfer layer specific applied file transfer gridftp parameters credential transfer system retrieve appropriate proxy transfer 
large amount source destination pairs potentially large object 
rest fts transfer interface channel management interface status interface methods simple straightforward java style easily rpc call soap 
detailed syntax api command line tools described user guide 
application usage glite exposed users egee production infrastructure egee pre production service smaller scale service testing upcoming middleware releases 
production infrastructure applications regular basis 
average concurrent jobs served day 
worth noting egee applications involve quite different workflows applications customize infrastructure particular needs 
instance done additional services provided glite discussed instance workflow systems grid portals 
services provided glite necessarily application 
show differences application usage highlight experiences egee pilot applications biomed high energy physics hep 
full details egee applications 
focus hep activity massive data transfer tests glite fts 
january rate gb sustained days achieved conditions similar cern lhc experiments data 
test involved main computing centers computing facilities world 
hep communities egee production infrastructure daily activities monte carlo generation simulated physics events 
jobs executed production infrastructure past year 
job submission limited anymore specialized users producing data community 
possible users grid experts grid infrastructure daily data analyses 
biomed infrastructure different hep 
amount data number computing cycles required hep complexity calculations diversification needs higher 
particularly challenging point view middleware design 
large fraction biomed grid activity performed pps require features workload data management systems 
main needs biomed community fast response jobs duration smaller hep ones overhead submission negligible data security privacy issues arise dealing medical data management 
system accessing encrypted data stored servers srm interface demonstrated october th egee conference pisa 
diversity requirements provision middleware multi purpose grid infrastructure egee challenging task 
clear need customization lead service oriented architecture approach followed glite allows glite services independently different settings 
gave brief overview egee grid infrastructure programmed services provided glite middleware distribution 
focused information monitoring workload management data management services frequently ones 
discussion security framework 
mentioned egee large scale grid infrastructures created past years 
different infrastructures deploying different services building different software stacks 
interoperability grid infrastructures important issue particular applications need exploit multiple infrastructures instance hep applications 
global grid forum ggf active defining grid related standards particular ogsa difficult production level infrastructure follow quickly evolving standards 
systems need take conservative approach wait establish standards arrive 
consequence glite proposed standards quickly superseded carefully moving web services adhering ws interoperability possible 
addition interoperability efforts ongoing major grid projects osg resulted seamless integration systems 
instance possible run egee jobs osg vice versa 
experiences gained fed back ggf relevant standardization bodies 
glite middleware constantly improved enriched services 
important improvements planned comprise gma introduce support multiple virtual databases defined registry schema act separate namespaces 
authorization rules query able span 
resilience performance services 
service discovery plan introduce bootstrapping mechanism 
wms components move web services interfaces particular ce compatible standards job workflow descriptions see performance optimizations 
appearance established standards help consolidating user interfaces reducing number translation layers implemented user space 
security model data management components constantly improved allow consistent access control storage se level catalogs 
generic metadata service provided 
service allows users attach metadata files stored file catalogue handle simple relational data stored relational database system 
users able select logical files searching metadata describing files content 
providing simplified transparent interface relational databases allow grid jobs access manipulate relational data generic way grid credentials vo mechanisms access control 
breton egee deliverable second revision egee application migration progress report 
https cern ch document 
digital imaging communication medicine 
org 
dvo services tracking archival grid job information 
proceedings grid workshop 
www pl cgw 
karl ws resource framework 
www ibm com developerworks library ws resource ws pdf 
allcock gridftp protocol specification 
global grid forum recommendation march 
frey tannenbaum livny foster tuecke 
condor computation management agent multi institutional grids 
cluster computing 
glite command line interface 
https cern ch document 
global grid forum 
www org 
homepage glue schema activity 
infn 
ggf grid storage resource manager working group 
foster kesselman tuecke 
anatomy grid 
international journal high performance computing applications fall 
attributes specification 
https cern ch document 
egee tec attributes 
uk 
rl ac uk egee uk 
egee 
egee deliverable global security architecture st revision 
https cern 
ch document 

credential renewal service long running jobs 
grid th ieee acm international workshop grid computing seattle november 
users guide 
https cern ch file lb guide pdf 
middleware generation grid infrastructure 
computing high energy nuclear physics chep switzerland september 
lcg project 
cern ch lcg 
paul leach rich 
guids february 
web services interoperability organization 
ws documents 
www ws org documents 


authorization system virtual organizations 
grid computing european grids conference 
gma 
www gma org 
raman livny solomon 
matchmaking distributed resource management high throughput computing 
proceedings seventh ieee international symposium high performance distributed computing hpdc chicago il july 
wilkes 
understanding service oriented architecture 
msdn microsoft com library default asp url library en html aj soa asp 
egee middleware design team 
egee deliverable egee middleware architecture 
https cern ch document 
tierney grid monitoring architecture 
technical report perf ggf 
tuecke open grid services infrastructure version 
https forge 
org projects wg 
virtual data toolkit 
www cs wisc edu 
ggf ogsa wg 
open grid services architecture glossary terms 
https forge 
org projects ogsa wg 
ggf ogsa wg 
open grid services architecture version 
https forge org projects ogsa wg 
api documentation 
egee wm mi infn egee wm glite api index shtml 

