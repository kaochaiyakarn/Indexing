efficient data access parallel blast lin ma praveen geist searching biological sequence databases routine tasks computational biology 
task significantly hampered exponential growth sequence database sizes 
advances parallelization biological sequence search applications enabled bioinformatics researchers utilize high performance computing platforms result greatly reduce execution time sequence database searches 
existing parallel sequence search tools focusing parallelizing sequence alignment engine 
computation intensive alignment tasks cheaper larger machines data intensive initial preparation result merging tasks expensive 
inefficient handling input output data easily create performance bottlenecks supercomputers 
causes considerable data management overhead 
set techniques efficient flexible data handling parallel sequence search applications 
demonstrate optimizations improving mpiblast open source parallel blast tool rapidly gaining popularity 
optimization techniques aim enabling flexible database partitioning reducing caching small auxiliary files results enabling parallel shared files performing scalable result processing protocols 
result reduce mpiblast users operational overhead removing requirement databases 
experiments show techniques bring order magnitude improvement performance scalability mpiblast 
department computer science north carolina state university department computer science north carolina state university computer science mathematics division oak ridge national laboratory 
ma csc ncsu edu computer science mathematics division oak ridge national laboratory computer science mathematics division oak ridge national laboratory computer science mathematics division oak ridge national laboratory 
ornl gov past decade research computational biology dramatically accelerated increasing computational power allows computers help people understand composition functional capability biological entities processes 
known outcome fusion high performance computing experimental biology assembly human genome genomics cluster nearly processors 
computation enabled breakthroughs huge impacts solving important problems areas medicine environmental science 
computational biology area demanded benefited parallel computing sequence database search 
tools search similarities query sequences dna amino acid sequences known sequences database 
helps people identify function newly discovered sequences identify species common ancestor forms foundation challenging tasks genome alignment 
key component bioinformatics research methods popular sequence search tools blast daily basis scientists 
scientists average search cost sequential machine growing despite faster cpus help new experimental technology internet data collecting sharing existing sequence databases growing speed faster average memory size equipped single computer node :10.1.1.5.3974
searching databases fit main memory requires large amount operations 
parallelizing database search obvious way avoid exploding sequence search time 
fortunately search tools blast perform pair wise comparison embarrassingly parallel 
section give examples parallel sequence search tools 
particular mpiblast implementation open source uses portable communication library mpi runs number parallel platforms :10.1.1.5.3974
published mpiblast steadily attracting new users 
tools mpiblast linearly shorten computationally intensive sequence alignment process processors unoptimized data handling easily bring operational management overhead creating new bottlenecks large parallel executions 
example mpiblast requires biological database pre partitioned fragments copied individual nodes local storage cluster parallel search 
step increases operational overhead creates large number small files may need larger number processors 
example result merging 
parallel search partitions database needs consolidate sequence segments individual database partitions query sequence report degree similarity query sequence 
non scalable design communication intensive process may result result merging time larger sequence alignment time observed mpiblast runs 
addition bottleneck situation deteriorates database size query size result size machine size grows 
project investigate data flow mpiblast set optimizations enables efficient scalable data transfer management 
main idea maximize utilization memory shared file systems available parallel computers explore parallelism application components outside blast sequence alignment engine 
demonstrate experiments multiple platforms optimizations bring dramatic improvement performance scalability 
addition solutions alleviate users potentially expensive tedious database pre partitioning tasks enable flexible dynamic database distribution performance fine tuning 
rest organized follows section discusses background information parallel sequence search tools mpiblast related parallel section presents optimization approaches 
section shows performance results analysis 
section discusses section concludes 
background related parallel sequence search research closely related studies designing high throughput biological sequence search programs especially parallel search programs execution methods :10.1.1.5.3974
hardware blast accelerators normally freely accessible 
addition tied specific hard ware technologies portable 
intended optimize parallel sequence search software reducing non search overhead portable manner 
earlier parallel sequence search adopts query segmentation method partitions sequence query set 
relatively easy implement allows blast search proceed independently different processors 
databases growing larger rapidly approach incur higher costs limited scalability 
follows trend pursuing database segmentation databases partitioned processors 
approach better utilizes aggregate memory space easily keep growing database sizes 
mpiblast optimization techniques parallel blast built evaluated portable existing implementation mpiblast tool developed los alamos national laboratory :10.1.1.5.3974
published parallel blast codes implementation reported highest speedup underwent largest scalability tests directly integrated ncbi toolkit 
parallelism mpiblast search database segmentation 
search raw sequence database needs formatted partitioned fragments stored shared storage space 
mpiblast organizes parallel processes master workers 
master uses greedy algorithm assign un searched fragments workers 
workers copy assigned fragments local disks available perform blast search concurrently 
finishing searching fragment worker reports local results master centralized result merging 
process repeats fragments searched 
master receives results workers query sequence calls standard ncbi blast output function format print results output file 
mpiblast achieves speedup especially number processes small moderate fitting database main memory eliminating repeated scanning disk resident database files 
mpiblast design details discussed rest 
related complements existing efforts exploring parallelism data intensive bioinformatics applications special focus data management 
particular experimented mpi io traditionally utilized large scale parallel simulations biological sequence search codes 
knowledge proposed approaches collective dynamic database partitioning studied previous research existing parallel bioinformatics codes aware executing mpiblast top pvfs file system parallel support 
database needs pre partitioned 
optimization techniques orthogonal improvement sequence search algorithms improvements enhance search applications performance 
fact optimization search algorithms reduces computation costs highlights requirement efficient data access memory management schemes 
addition plan incorporate methodologies existing parallel data mining memory management bioinformatics tools research designing efficient result pruning query batching 
efficient parallel data handling blast design implementation section major techniques enable efficient data handling mpiblast 
illustrate performance problem addressed timed main components mpiblast run test platforms sgi system oak ridge national lab details machine configuration section 
mpiblast version experiments latest release available mpiblast web site 
primary research goal reduce non search overheads parallel blast 
mpiblast authors reported low overhead processes :10.1.1.5.3974
repeated experiments searching query set database aforementioned sgi system 
show break search non search time mpiblast execution time tests different number processes 
database genbank nt approximately doubled size results confirmed mpiblast authors results range process numbers 
clear portion non search time grows steadily processes performing search parallel 
number processes increases portion search time total execution time slips 
recognized search time sensitive input queries 
experiments show searches smaller database default search threshold randomly sampled query sequence sets similar sizes test significant portion time needs spent non search tasks see section 
rest section techniques reduce costs non blast search components mpiblast 
implemented techniques enhanced version mpiblast called pioblast 
sequence search kernel identical mpi blast toolkit 
input query database pioblast mpiblast generate output 
improving utilization available aggregate memory important motivation database partitioning parallel blast tools mpiblast discussion focused scenario aggregate memory large accommodate database files intermediate search results 
easily satisfied today parallel computers 
direct global database access dynamic partitioning raw sequence databases usually stored widely fasta format need indexed searched blast 
normally done tool included ncbi blast toolkit 
scans raw fasta database produces set sequence index files 
blast execution files searched raw database 
note users searching repeatedly database need perform preprocessing 
mpiblast provides tool called wrapper standard integrates database formatting partitioning tasks sequential tool 
users specify number fragments partition database 
generate sets output files userspecified number fragments 
run time local disks attached individual nodes database fragments copied processors assigned shared storage private local storage space processors 
static partitioning approach drawbacks 
creates large number smaller files harder manage migrate share 
second database needs re partitioned number processors mpiblast search exceeds number existing fragments 
brings inconvenience users 
second relatively expensive took minutes minutes head node sgi system pre process partition gb nr database gb nt database respectively re partitioning cost trivial 
third execution time search number processes distribution execution time number processes mpiblast performance sensitive number database fragments shown mpiblast authors previous :10.1.1.5.3974
confirmed experiments 
depicts change mpiblast execution time processes different numbers pre generated database fragments 
test searched kb randomly sampled query set database 
number fragments increases search time non search time rise 
increase search time largely due cost embedded ncbi blast search kernel grows total candidate result size increases fragments searched 
increase non search time associated higher result merging retrieving overhead 
result performance degrades significantly number fragments grows 
creating large number fragments running different number processors option 
pioblast parallel access shared databases eliminate static partitioning 
help index files structured sequence files generated pioblast easily perform dynamic partitioning avoid generating physical database fragments 
global index files easy identify file offsets database fragment 
target databases formatted put shared file system 
master process calculates file ranges partition distributes worker processes terms start offset offset pairs 
worker processes file ranges read parallel different segments global sequence index files local memory mpi io 
way set global formatted database files partitioned dynamically arbitrary number virtual fragments execution time 
virtual partitioning resembles process array distri execution time 
mpiblast performance search number fragments performance sensitivity number fragments bution parallel numerical simulations 
added limited modifications ncbi blast engine redirect accesses disk files hold database fragments ncbi blast mpiblast memory buffers filled pioblast parallel input stage 
result caching merging input query sequence blast search produces alignment hits query sequence aligned sequences database 
controllable value determines alignments reported final output 
search hits sorted scores measure quality alignment database partitioned individual workers information determine local results qualify included global output 
local search results need merged filtered 
experiments multiple platforms result merging phase incurs highest overhead mpiblast easily grow surpass actual blast search time workers 
reason mpi blast uses merging scheme serializes processing workers 
workers send local result alignments pieces local database sequences align query sequence master 
master sorts result alignments scores indicating degree similarity query sequence 
result alignment appear global output master requests sequence information worker submitted alignment 
process repeated serial global result alignments 
pioblast improved mpiblast result merging phase 
workers cache sequence information details see blast 
potentially useful output local results discovered eliminates accesses multiple memory cached database files retrieve information 
second workers submit local results worker submit data items sorting filtering process alignment identifications necessary scores alignment output sizes 
alignment output size computed calling modified ncbi blast output routine redirects formatted result data file output memory buffers 
greatly reduces total message volume 
master merges local results identify global results notifies workers selected alignments 
knowing subset qualified local hits workers write corresponding result buffers prepared saving data return trip master 
shifts bulk result processing workers allow output preparation proceed parallel 
parallel output mpiblast pioblast produce search output single file output data organized query sequences 
query sequence output starts header containing search statistics followed result alignments 
just internet search engines output pages ranked relevance user queries blast outputs alignments ranked degree similarity query sequence database sequences denoted alignment scores 
mpiblast output handled master invokes ncbi blast output routines create header processes individual results alignment query sequence 
workers processing power bandwidth utilized 
pioblast parallelize file output mpi io 
mentioned previous section workers cache eligible local results memory buffers send size result alignment output master 
sizes header alignment output record known master compute offset ranges individual alignment output record distribute information workers 
workers create mpi file view defines ranges shared file visible processes 
collective enable workers write buffered results parallel 
allows data scattered noncontiguous source memory locations destination file locations output single mpi io operation mpi io library efficiently performs data shuffling combine scattered accesses large sequential writes 
illustrates difference pioblast mpiblast result handling 
note mpiblast communication master workers retrieve sequence information preparation output buffers serialized master 
pioblast workers carry output job parallel 
performance results analysis section evaluate pioblast compare mpiblast terms performance scalability 
experiments genbank nr database protein type repository frequently searched bioinformatics researchers 
size raw nr database nearly gb consisting peptide sequences 
today typical cluster configuration genbank database easily fit aggregate memory small number nodes 
better control query output size created input query sets containing different number query sequences randomly sampling database 
note previous mpiblast results benchmarked database currently gb 
databases size partition output sequence index files multiple volumes 
point pioblast handle multiple global database files design alternatives addressing problem 
extend pioblast parallel input function read multiple global files simultaneously 
may bring performance benefits complicates pioblast virtual partitioning load balancing schemes 
output single volume output files 
require modification pioblast simplifies file management may option file systems support large files 
plan design choice alternatives inquiring initial users pioblast 
experiments performed shared queues 
obviously caused concurrent jobs variance observed general small confidence interval average 
applies mpiblast pioblast omit error bars result charts 
results sgi sgi system ram resides oak ridge national lab 
intel ghz itanium processors running linux mb cache cache cache 
processor gb memory combines terabytes total system memory 
mpiblast pioblast sgi xfs parallel file system 
pioblast mpiblast output offsets orker alignment alignment alignment output orker alignment alignment alignment output master 
alignment alignment alignment output collective writing master alignment alignment alignment output function sequence id sequence data serial writing 
output processes pioblast mpiblast 
copy input search output total mpiblast pioblast table 
breakdown execution time mpi blast pioblast searching kb sequence query database 
take close look sample execution mpi blast pioblast searching kb randomly sampled sequence query set database processes 
mpiblast pre partitioned database fragments worker process 
partitioning call natural partitioning equivalent pioblast current default partitioning strategy 
discussed earlier natural partitioning appears result best performance mpi blast mpiblast authors results experience :10.1.1.5.3974
rest mpi blast results benchmarked natural partitioning 
table shows breakdown total execution time program major phases 
mpiblast spends seconds copy stage copies database fragments individual nodes local storage 
note local storage open user jobs mpiblast copies data files shared job scratch space xfs 
pioblast copy stage 
input stage performs spot partitioning parallel input mpi io 
worker reads contiguous range shared database file 
takes pioblast orker orker half second 
input stage pioblast worker contiguous memory buffers holding local portions database files 
search stage pioblast performs computation mpiblast saves time importing local database partition memory 
blast search kernel ncbi memory mapped files input disk resident database 
bring benefits implicitly overlapping computation avoiding subsequent mpiblast uses blast feature performed implicitly memory mapped files search stage 
pioblast slightly modified ncbi blast kernel local database memory buffers explicitly filled input stage memory buffers mapped directly disk resident files 
significant improvement comes result processing stage 
programs default value mb output data produced 
mpi blast spends seconds result merging output stage due heavily serialized implementation 
particular result fetching process shown table master queries individual workers result alignment data accounts total output time 
pioblast dramatically reduced output time total seconds efficient result caching merging parallel file writing 
category includes tasks counted previous columns 
examples tasks include query broadcasting initialization cleanup operations ncbi blast kernel 
summary pioblast significantly reduces query size kb kb kb kb output size mb mb mb mb table 
query sizes corresponding search output sizes head parallel searches 
result improves portion time spent blast search mpiblast particular search 
examine pioblast scalability dimensions parallelism query output data size 
test pioblast scales increasing number processes compares mpiblast ran programs different numbers processors 
query size fixed kb query previous group experiments generate output file nearly mb 
natural partitioning mpiblast equivalent virtual partitioning pioblast 
total number processes ranges 
generate arbitrary numbers fragments partition nr database fragments 
consequently processes mpiblast pioblast group tests 
results shown 
break total execution time search non search times 
programs search time decreases nicely number processes grows 
mpiblast non search time spent result merging output increases steadily workers 
workers increase output time offsets decrease search time causing execution time grow 
workers mpiblast total execution time spent blast search 
contrast pioblast smaller portion time spent non search tasks 
case workers deployed non search time keeps decreasing rate slower search time decreases 
total processes pioblast achieves speed workers total execution time spent blast search 
data scalability tests fixed number processes programs 
series synthetic query sequence sets different sizes randomly sampled nr database generate different output sizes 
table lists corresponding query output sizes 
shows results grouped output size 
query output data size grows mpiblast pioblast execution times scale roughly output size search times 
difference total execution time dominated result output time mpiblast search time pioblast 
notable detail portrayed small bars non search time pioblast doubled mb output mb output 
growing rate lower compared mpiblast 
results ibm blade cluster evaluate pioblast performance different parallel architecture repeated process scalability experiments ibm blade cluster high performance computing center north carolina state university 
linux cluster nodes offering total intel xeon ghz processors 
blade node equipped gb memory gb disk place 
shared file system nfs 
cluster smaller scale significantly longer queue waiting time tests processes 
general shows trends observed ornl system 
important difference shared file system significantly worse performance compared xfs 
result pioblast portion search time decreases processes worse deterioration compared considerably milder mpiblast processes 
mpiblast search time embeds certain amount search time scale processes 
discussion directions plan extend pioblast 
point implemented simple natural partitioning strategy pioblast 
worker accesses single sequential part global files individual interfaces mpi io input phase 
pioblast partitioning framework allows easy extension natural partitioning sophisticated strategies manipulating file ranges 
particular dynamic load balancing readily incorporated assigning smaller file ranges workers 
knowing having fragments degrades mpiblast performance pioblast adaptively find compromise load balancing controlling communication overhead starting coarse fragments gradually refining task granularity 
file ranges decided run time differentiated different workers ideal scenarios heterogeneous nodes skewed search 
execution time mpi pio mpi pio mpi pio search time time mpi pio program number processes node scalability mpi pio execution time mpi pio search mpi pio mpi pio program output size output scalability 
scalability tests ornl sgi execution time mpi pio mpi pio search mpi pio program number processes mpi pio 
process scalability results ncsu blade cluster second number workers grows size local results remains constant total size result alignments screened merged master increases linearly 
pioblast result merging scheme improved early score communication 
communication may easily added broadcast current global score threshold workers perform local pruning processing local results fall global cut line 
addition efficient result pruning result caching output schemes need adaptive large output data sizes tasks database database blast genome comparison 
plan add adaptive approaches query batching pipelining adjust amount available memory aggregate memory effectively handling larger tasks 
proposed designed evaluated set communication related optimizations parallel sequence search applications 
optimizations show mpi pio significant benefits reducing search execution time management costs 
choose implement demonstrate optimizations mpi blast optimizations specific particular implementation blast algorithm 
specifically solutions including dynamic input data partitioning parallel dis centralized result processing independent search algorithms file formats sequence data structures making solutions applicable parallel search tools adopt approach general 
consider major contributions follows 
demonstrated input output data handling great performance significance parallel sequence search applications 

enabled online dynamic partitioning shared databases eliminating pre partitioning process divides database static fragments 
offers low operational cost reduced convenience data storage management flex adjusting partitioning granularity 

applied parallel techniques traditionally large scale parallel simulations bioinformatics applications techniques proved effective new context 
especially aids collective non contiguous provided mpi io dramatically improved output performance parallel blast parallelizing originally serialized result processing procedure 

designed implemented schemes aggressive result caching efficient result merging utilizing available aggregate memory cpu resources interconnection bandwidth bandwidth improve scalability parallel sequence search 

performed extensive performance evaluation analysis multiple architectures combination different query sizes numbers processors 
acknowledgments funded part full department energy genomes life program www org ornl project exploratory data intensive computing complex biological systems faculty startup funds north carolina state university joint faculty appointment ma ncsu ornl 
lin supported scientific data management center lbl gov department energy scientific discovery advanced computing doe scidac program www scidac org 
gratefully acknowledge center computational science oak ridge national laboratory high performance computing center ncsu granting accesses sgi system ibm blade cluster respectively providing technical support 
thankful developer teams open source software ncbi blast mpiblast 

basic local alignment search tool 
journal molecular biology 
sherman weston willard wing 
parallel implementation blast built 
proceedings international parallel distributed processing symposium 
braun roberts 
parallelization local blast service workstation clusters 
generation computer systems 
camp 
high throughput blast 
www sgi com industries sciences resources papers ht whitepaper html 
iii ross thakur 
pvfs parallel file system linux clusters 
proceedings th annual linux showcase conference 
chi riedl 
efficiency shared memory multiprocessors genetic sequence similarity search algorithm 
carey feng :10.1.1.5.3974
design implementation evaluation mpiblast 
proceedings conference expo conjunction th international conference linux clusters hpc revolution 
de carvalho costa lifschitz 
database allocation strategies parallel blast evaluation clusters 
distributed parallel databases 
gregory butler lam thiel 
improvements search genome databases 
proceedings th international conference scientific statistical database management 
jr 
distributed blast psi blast beowulf cluster 
bioinformatics 
genomes life project proposal 
www genomes life org ornl proposal doc 
shields wolfe 
wrapping blast applications unix clusters 
bioinformatics 
kim kim han 
hyper blast parallelized blast cluster system 
proceedings international conference computational science 
lifschitz 
study multi ring buffer management blast 
proceedings th international workshop database expert systems applications 
hoover 
hardware software systems accelerating common bioinformatics sequence analysis algorithms 


parallel blast split databases 
bioinformatics 
may parallel high performance computing 
morgan kaufmann publishers 
message passing interface forum 
mpi message passing interface standard june 
national center biotechnology information 
ncbi blast 
www ncbi nlm nih gov blast 
national institutes health 

nih gov apps html 
shafer agrawal mehta 
sprint scalable parallel classifier data mining 
proc 
nd int 
conf 
large databases 
sweeney hu anderson peck 
scalability xfs file system 
proceedings usenix technical conference 
thakur gropp lusk 
implementing mpi io portably high performance 
proceedings sixth workshop parallel distributed systems may 
wang mu 
soap ht blast high throughput blast web services 
bioinformatics 
zaki 
scalable algorithms association mining 
ieee transactions knowledge data engineering 
zhu jiang qin swanson 
case study parallel biological sequence analysis linux clusters 
proceedings ieee international conference cluster computing 

