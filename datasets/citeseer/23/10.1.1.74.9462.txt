computational soundness equational theories tutorial steve kremer lsv ens cachan cnrs inria kremer lsv ens cachan fr 
study link formal cryptographic models security protocols presence passive adaptive adversaries 
describe seminal result abadi rogaway shortly discuss extensions 
describe general model reasoning soundness implementations equational theories 
illustrate model examples computationally sound implementations equational theories 
security protocols deployed massively years 
security difficult ensure small protocols known error prone 
different approaches proving protocols correct developed 
hand symbolic formal approach models messages cryptographic primitives term algebra 
adversary manipulates terms pre defined set rules 
hand computational approach considers detailed execution adversary model 
protocol messages modelled bitstrings cryptographic primitives algorithms 
adversary modelled probabilistic polynomial time turing machine security protocol measured adversary success probability 
considerable advantage symbolic model proofs partially automated 
unfortunately clear symbolic model captures possible attacks 
computational model provides stronger security guarantees proofs generally harder difficult automate 
trend tries get best worlds model provides strong computational guarantees 
seminal abadi rogaway shown soundness result presence passive attacker simple algebra symmetric encryption 
protocols rely complex cryptographic primitives may algebraic properties see survey algebraic properties 
properties naturally modelled equational theories 
tutorial original abadi rogaway result briefly discuss extensions 
general framework reasoning soundness implementation equational theory :10.1.1.75.3986
formal indistinguishability relation consider static equivalence established partly supported ara artist network excellence 
security notion coming cryptographic pi calculi verification automated 
soundness result equational theory proves equations considered symbolic model respect implementation 
consider soundness presence passive adversary extend setting adaptive adversary 
soundness results equational theories 
exist soundness results presence active adversary notably pioneered backes micciancio warinschi 
aware framework reasoning soundness equational theories active adversaries remains challenging topic research 
tutorial mainly joint mathieu baudet cortier laurent :10.1.1.75.3986
preliminaries function 
say negligible function remains eventually smaller sufficiently large 
conversely function overwhelming negligible 
denote turing machine access oracles denotes random drawing distribution complexity parameter family distributions 
family distributions collision free iff probability collision tween random elements negligible function 
abadi rogaway result section summarize seminal result abadi rogaway 
show soundness result simple equivalence formal expressions 
raise extensions passive case inspired generalization case adaptive active adversary 
formal expressions equivalence formal side consider simple grammar formal expressions terms 
expressions consider base types keys booleans taken disjoint sets keys bool 
keys booleans paired encrypted 
expressions key keys bit bool pair encryption keys example formal expression represents pair component pair key second encryption key pair consisting boolean constant key 
defining equivalence relation terms need define deducibility relation 
intuitively adversary learn expression expression formally smallest relation example 
constants known attacker 
equivalence relation terms equality patterns associated term 
pattern represents adversary view term 
patterns extend grammar defining terms special symbol 
pattern term replaces encryptions key deduced 
define function arguments term set keys inductively follows 
keys bool pattern expression defined pattern keys 
instance pattern say formally indistinguishable written pattern pattern bijection keys interpreted substitution applied pattern 
illustration 
bijective renaming keys reflects intuition different randomly chosen keys indistinguishable 
computational messages indistinguishability computational setting reason level bitstrings algorithms executed turing machines terms 
encryption scheme setting triple polynomial time algorithms se kg key generation encryption decryption algorithms 
key generation algorithm parametrized security complexity parameter encryption probabilistic 
intuitively defines key length 
expected require dk ek kg random bitstring decryption fails returns cases 
say encryption scheme se type secure terminology security parameter probabilistic polynomial time turing machine adversary advantage adv type se ek kg kg ek ek negligible function 
convention suppose adversaries access implicitly fresh random coins needed complexity parameter 
intuitively require adversary distinguish case encryption oracles encrypting different keys case twice encryption oracle encrypting constant bitstring representing key 
note answers second pair oracles distinct time encryption probabilistic 
type security message length key concealing version standard semantic security 
message length concealing means encryption hides length plaintext 
key concealing means fact ciphertexts encrypted key hidden 
important note encryption scheme respecting security definition may insecure soon adversary key cycle 
key cycle sequence keys 
kn ki encrypts possibly indirectly ki kn encrypts 
encryption key ek key cycle length 
example key cycle size ek ek 
abadi rogaway main result key cycles forbidden 
condition soundness results better understand problem key cycles suppose se kg semantically secure encryption scheme se kg defined follows kg kg ek const dk const const const constant key concatenation const belong set possible ciphertexts obtained obviously attacker key cycle length attacker directly learns key 
easy see se semantic secure encryption scheme behaves se nearly cases security experiment adversary query encrypting negligible probability 
notion computational indistinguishability requires adversary distinguish families distributions better negligible probability 
families probability distributions called ensembles 
indistinguishable written probabilistic polynomial time turing machine advantage adv ind negligible function 
notable exception stronger definition considered key dependent message kdm security :10.1.1.65.5072
interpretation formal expressions soundness result state abadi rogaway soundness result define interpretation formal terms bitstrings 
bitstrings tagged types key bool pair ciphertext 
initialize procedure draws keys key generation algorithm kg keys denotes set keys appearing term convert procedure implements encryption algorithm initialize keys kg convert keys return key bool return bool return convert convert pair convert return ciphertext initialize convert procedures associate formal term family probability distributions 
abadi rogaway main result 
theorem 
formal expressions contain key cycles computational interpretation terms uses type secure encryption scheme implies 
extensions result known extensions 
mention 
laud corin allow composed keys 
ad strengthen cryptographic assumptions allow key cycles 
ad consider different implementations encryption allowing key message length revealing encryption consider case time pad encryption information theoretic security 
garcia van rossum add probabilistic hash functions consider modular exponentiation 
extensions require re define time new formal indistinguishability relation extending classical notion patterns 
micciancio warinschi show completeness result families distributions resulting interpretation formal terms indistinguishable formal terms formally 
result requires stronger security requirement encryption authenticated encryption see details 
completeness result ensures false attacks reported formal model 
ad extend result different implementations encryptions soundness 
computational algebras avoid redefining new model new indistinguishability relation extension define general model relies equational theories static equivalence :10.1.1.75.3986
algebras abadi rogaway model symbolic terms simple grammar modelling encryption atomic keys pairs boolean constants 
introduce general model called algebras consists term algebras defined sorted order signature equipped equational theories 
specifically signature set sorts 
set symbols 
arities form ar 
sk 
symbols take arguments called constants arity simply written fix set names 
set variables 
assume names variables sorts 
default assume infinite number names variables available sort 
set terms sort defined inductively term sort variable sort name sort 
tk application symbol case require ti term sort si ar 
sk allow subsorts subsort allow term sort term sort expected 
write var names set variables names occurring respectively 
term ground closed iff var 
substitutions written 
xn tn domain dom 
xn 
consider sorted cycle free substitutions 
closed iff ti closed 
var var ti names names ti extend notations var 
names 
tuples sets terms substitutions obvious way 
application substitution term written defined usual way 
symbols intended model cryptographic primitives names model secrets example random numbers keys 
semantics symbols described equational theory equivalence relation written stable application contexts sorted substitutions variables 
instance symmetric encryption modeled theory generated equation dec enc 
deducibility static equivalence frames represent sequences messages observed attacker instance execution protocol 
formally frame expression 
xn tn set bound restricted names ti closed term sort xi 
simplicity consider frames 
xn tn restrict name names 
tn 
name may disclosed explicitly adding mapping xa frame 
tend assimilate frames underlying substitutions 
xn tn 
previous section introduced deducibility formal indistinguishability simple term algebra encryption pairing 
define similar notions respect equational theory 
definition deducibility 
closed term deducible frame equational theory written iff exists term var dom names names follows simplicity consider deducibility problems names names 
consider instance theory frame enc enc name deducible dec 
deducibility sufficient account knowledge attacker 
instance lacks partial information secrets 
refer reader additional details examples 
classical notion formal methods static equivalence formal indistinguishability relation 
definition static equivalence 
frames statically equivalent theory written iff dom dom terms var dom names names equivalent 
instance consider equational theory symmetric encryption 
constants known attacker 
frames enc enc statically equivalent respect 
enc enc statically equivalent term dec term 
variables defined names 
test distinguishes concrete semantics give terms frames concrete semantics parameterized implementation primitives 
provided set sorts set symbols computational algebra consists non empty set bitstrings sort subsort require computable function 
sk ar 
sk computable congruence sort order check equality elements element may represented different bitstrings congruence mean reflexive symmetric transitive relation 
ek sk 
ek 
remaining omit write effective procedure draw random elements denote draw ing assume fixed computational algebra associate frame 
xn tn distribution drawings computed follows 
name sort appearing 
tn draw value 
xi sort si compute ti si recursively structure terms 


return value 
xn tn 
values 
xn en ei si called concrete frames 
extend notation tuples closed terms obvious way 
focus asymptotic notions cryptographic security consider families computational algebra indexed complexity parameter 
previous section concrete semantics frame family distributions concrete frames 
consider families computational algebras required operation algebras feasible uniform probabilistic polynomialtime algorithm complexity parameter 
ensures concrete semantics terms frames efficiently computable sense 
relating computational algebras previous section defined computational algebras 
relate formal notions equality non deducibility static equivalence computational counterparts equality wayness indistinguishability 
soundness faithfulness introduce notions sound faithful computational algebras respect formal relations studied equality static equivalence deducibility 
equational theory 
family computational algebras sound iff closed terms sort implies overwhelming faithful iff closed terms sort implies negligible sound iff frames domain implies faithful iff frames domain implies exists polynomial time adversary distinguishing concrete frames adv ind overwhelming sound iff frame closed term names names implies polynomial time adversary prob ability negligible faithful iff frame closed term names names implies exists polynomial time adversary prob ability overwhelming 
note stronger completeness defined 
requires static equivalence hold distributions distinguished efficiently 
completeness defined replacing overwhelming nonnegligible 
possible prove stronger notions soundness hold restriction computational power adversaries 
particular unconditionally sound iff closed terms sort implies unconditionally sound iff frames domain implies unconditionally sound iff frame closed term names names drawings independent collision free 
drawing generally unconditional soundness construction 
true formal equations correspond expected behavior primitives hold concrete world overwhelming probability 
criteria difficult fulfill 
interesting restrict frames formed ones order achieve soundness faithfulness encountered typical example restriction forbid key cycles 
worth noting notions soundness faithfulness introduced independent 
proposition 
sound family computational algebras 

faithful 
faithful faithful 
theories soundness implies notions soundness faithfulness 
emphasizes importance soundness provides additional motivation study 
illustration consider arbitrary theory includes keyed hash functions 
symbol free respect equational theory iff exists set equations generating occur sort degenerated iff terms sort equal modulo proposition 
family sound computational algebras 
assume free binary symbols hs key hash available sort sort key degenerated drawing random elements sort hash hash collision free 

faithful 
sound 
assume implementations hs collision resistant sense sort fresh name sort key quantity hs hs negligible 
sound faithful faithful 
examples illustrate framework examples 
details proofs :10.1.1.75.3986
exclusive study soundness faithfulness problems natural theory implementation exclusive xor constants pure random numbers 
formal model consists single sort data infinite number names infix symbol data data data constants data 
terms equipped equational theory generated implementation define computational algebras concrete domain data set bitstrings length equipped uniform distribution interpreted usual xor function theorem :10.1.1.124.9715
implementation xor considered signature unconditionally sound 
faithful 
modular exponentiation application study soundness modular exponentiation 
cryptographic assumption decisional diffie hellman ddh problem difficult difficult feasible computation distinguish xy selected random 
original diffie hellman protocol building block key agreement protocols widely practice ssl tls kerberos 
symbolic model 
symbolic model consists sorts group elements ring elements infinite number names name sort symbols add mult inverse constants consider equational theory edh generated exp exponentiation mult exp exp exp exists direct correspondence terms sort set polynomials nr nr set names sort integer simply corresponds 


times times write xn 
correspondence exploited decide static equiva times 
put restrictions formal terms products power free forbidden products contain elements fixed bound 
xn forbidden restrictions come ddh assumption difficult avoid 
furthermore interested frames terms sort concrete model 
instance generator ig polynomial time algorithm outputs cyclic group defined generator order polynomial time multiplication algorithm prime order family computational algebras depends instance generator ig generates cyclic group generator order concrete domain zq uniform distribution 
symbols classical addition multiplication zq exp interpreted modular exponentiation constants respectively interpreted integers zq 
domain contains bitstrings representation elements family computational algebras satisfies ddh assumption instance generator satisfies assumption probabilistic polynomial time adversary advantage adv ddh ig defined ig zq ab ig zq negligible 
suppose unique group ig 
show ddh assumption necessary sufficient prove soundness edh theorem 
family computational algebras 
edh sound iff satisfies ddh assumption 
ciphers lists detail example symmetric deterministic length preserving encryption schemes 
schemes known ciphers widely practice famous examples des aes 
symbolic model 
formal model consists set sorts data list list 
list infinite number names sort data list symbols decn list data list encryption decryption consn data list list list constructor list data head list list list tail list nil list empty list data constants consider equational theory generated equations name sort list decn decn consn consn consn enc nil nil dec nil nil tail nil nil variables appropriate sorts 
effect equations sort list degenerated terms sort list equal 
notice sorted term unique sort 
subscripts function symbols redundant sorts tend omit terms 
instance data may write enc cons nil enc cons nil 
concrete meaning sorts symbols computational algebras defined follows carrier sets data list equipped uniform distribution usual equality relation decn implemented cipher data size keys size discuss required cryptographic assumptions 
verify equation decn nil empty bitstring consn usual concatenation returns digits bitstrings size returns digits :10.1.1.124.9715
simplicity assume loss generality encryption keys size blocks data 
assume keys generated uniform distribution 
difficult prove implementation unconditionally sound 
concrete model 
study soundness problem classical cryptographic assumptions 
standard assumptions ciphers include notions super pseudo random permutation notions indistinguishability 
particular ind denotes indistinguishability chosen plaintext chosen ciphertext attacks 
notions relations studied notably 
initially ind assumptions apply block ciphers specialized plaintexts size 
interestingly sufficient imply soundness frames contain plaintexts heterogeneous sizes encrypted key 
introduce strengthened version ind applying collection ciphers complexity parameter number blocks size contained plaintexts ciphertexts 
define ind assumption considering experiment stage adversary key randomly chosen stage access encryption oracles decryption oracles outputs plaintexts possibly data stage random bit drawn receives data challenge ciphertext mb outputs bit successful iff submitted encryption oracle decryption oracle 
define advantage adv ind successful ind assumption holds iff advantage probabilistic polynomial time adversary negligible 
holds inverse encryption scheme iff holds collection ciphers 
state soundness theorem 
define formed frames orient equations left right forms convergent rewriting system closed frame formed iff normal form atomic keys contains encryption cycles uses head tail symbols 
theorem soundness 
formed frames domain 
assume concrete implementations encryption inverse satisfy ind assumption 

cryptographic assumptions theorem may appear strong compared existing passive adversaries 
unavoidable allow frames contain encryption decryption symbols 
theory guessing attacks context password protocols guessing attacks abadi consider complex equational theory accounts symmetric asymmetric encryption ciphers passwords keys :10.1.1.124.9715
security guessing attacks elegantly modelled static equivalence 
main result soundness static equivalence equational theory 
direct corollary soundness security guessing attacks 
lack space detail result 
adaptive soundness extend soundness static equivalence adaptive setting 
soundness adversary observes computational value fixed frame setting adversary sees computational value sequence adaptively chosen frames 
applications adaptive setting include analysis multicast key distribution protocols dynamic group key exchange protocols 
adaptive setting formalized cryptographic game 
family computational algebras adversary 
access left right evaluation oracle olr pair terms outputs implementation 
oracle depends selection bit uses local store record values generated different names values processing queries 
slight abuse notation omit store write lr tb adversary plays indistinguishability game objective find value formally advantage defined adv adpt lr lr restrictions queries adversary having non negligible advantage easy cases 
example adversary submit pair oracle 
require adversary legal 
definition adaptive soundness 
adversary legal sequence queries left right oracle queries statically equiva lent 
xn 
xn family computational algebras ad sound iff advantage adv adpt polynomial time legal adversary negligible 
unconditionally ad sound iff advantage adv adpt legal adversary 
note variables typed query legal adversary oracle sort 
adaptive soundness implies original soundness notion static equivalence 
proposition 
family computational algebras 
ad sound sound converse false general 
interestingly case unconditional soundness adaptive non adaptive soundness coincide 
proposition 
family computational algebras 
unconditionally ad sound iff unconditionally sound 
direct corollary proposition 
corollary 
implementation xor signature considered section unconditionally ad sound 
adaptively sound theories seen theory xor unconditionally adaptively sound 
additional adaptive soundness results equational theories symmetric encryption adaptively sound ind cpa modular exponentiation adaptively sound ddh 
consider composed theories symmetric encryption modular exponentiation symmetric encryption xor 
theories allow keys computed respectively modular exponentiation xor 
additional details proofs 
symmetric encryption consider case probabilistic symmetric encryption result framework illustrates difference purely passive adaptive adversary 
symbolic model 
symbolic model consists set sorts data infinite number names sort data called keys function symbols enc dec data data data encrypt decrypt pair data data data pair constructor data data projections data data data key equalities test data data type testers data constants name key position term exists sub term enc plaintext position 
consider equational theory esym generated dec enc pair pair enc enc enc pair usual enc written pair written formed frames adversaries 
usual forbid formal terms contain cycles 
total order keys 
frame acyclic subterm occurs noted selective decommitment problem 
classical solution problem require keys sent encrypt message appear plaintext 
frame 
xn tn formed acyclic terms ti symbols enc pair names key positions plaintext ti key position tj adversary formed sequence queries oracle yields formed frames 
xn 
xn concrete model 
family computational algebras giving concrete semantics depends symmetric encryption scheme se kg 
concrete domain data contains possible bitstrings equipped distribu tion induced kg 
interpretation constants respectively bitstrings enc dec function respectively interpreted algorithm assume existence concrete model concatenation operation interpret pair symbol 
corresponding left right projections implement interested formed frames provide computational interpretation 
semantic security 
section suppose message length necessarily key concealing semantically secure encryption scheme 
definition recall uses left right encryption oracle se oracle generates key kg 
answers queries form bs bs bs bs bitstrings 
oracle returns ciphertext bsb 
goal adversary guess value bit advantage defined adv cpa se lr se lr se encryption scheme se ind cpa secure advantage adversary negligible 
standard definition ind cpa allows scheme message length revealing 
abuse notation call scheme ind cpa secure 
describe variant ind cpa security ind cpa models nonadaptive adversaries 
left right encryption oracle lr se takes input list pairs bitstrings returns list ciphertexts 
oracle queried 
adversary observe multiple encryptions allowed chose adaptively 
advantage adversary defined similar way replacing lr se lr se symmetric tion scheme said ind cpa advantage polynomial time adversary negligible 
notions semantic security related proposition 
proposition 
se symmetric encryption scheme 
se ind cpa se ind cpa se ind cpa ind cpa 
state soundness theorem symmetric encryption 
theorem 
total order keys 
remainder proposition consider formed adversaries family computational algebras symmetric encryption scheme se 
esym ad sound se ind cpa converse false 
esym sound se ind cpa converse false 
proof uses similar hybrid argument micciancio 
results section summed table 
note relations adaptive non adaptive soundness detailed formally 
modular exponentiation esym ad sound ind cpa esym sound ind cpa suppose symbolic concrete model section 
ddh assumption necessary sufficient prove adaptive soundness 
theorem 
family computational algebras 
edh sound iff satisfies ddh assumption 
edh ad sound iff satisfies ddh assumption 
proof result uses adaptive variant ddh called dh generalizes previously variants ddh 
main difficulty proof consists relating ddh dh 
results modular exponentiation summed table 
note adaptive soundness classical soundness equivalent symmetric encryption coincide case 
edh ad sound ddh edh sound composing encryption exponentiation symbolic model 
consider equational theory containing edh esym suppose subsort data 
formed frames 
total order keys exponentiations 
frame formed contain dec symbol names exponentiations key position 
subterm exp key position linearly independent polynomials exp subterm 
subterm name sort data exponentiation second condition similar conditions key cycles 
condition avoid selective decommitment 
concrete model 
concrete model models symmetric encryption modular exponentiation 
exponentiations symmetric keys symbolic model 
needs reflected concrete model 
family computational algebras giving concrete semantics parameterized symmetric encryption scheme se instance generator ig 
require key generation algorithm se randomly sample element ig 
giving ind cpa encryption scheme se build ind cpa encryption scheme se uses key generation algorithm 
achieved key extractor algorithm 
algorithm usually universal hash function entropy smoothing theorem transform group elements valid keys se main characteristic applying randomly sampled element group created ig produces distribution key generation algorithm se new encryption decryption algorithms se apply algorithm group element key 
produces symmetric key encryption decryption algorithms se family computational algebras implementing encryption exponentiation ee secure encryption scheme se secure ind cpa uses key generation algorithm described ig satisfies ddh assumption 
theorem 
total order keys exponentiations 
ee secure family computational algebras ad sound formed frames composing encryption xor symbolic model 
consider equational theory containing esym suppose data subsort data 
formed frames 
total order keys terms sort data 
frame 
xn tn formed conditions verified 
set maximal subterms sort data standard definitions manipulating terms formally defined follows ti pos ti sort ti data sort ti data 
contain function symbols dec terms sort data names key positions 
key position exist set 
xi disjoint xi 
subterm subterm name sort data element concrete model 
concrete model models symmetric encryption exclusive 
combination encryption exponentiation need reflect nonces keys 
family computational algebras giving concrete semantics parameterized symmetric encryption scheme se 
xor part uses implementation section 
require key generation algorithm se consists randomly sampling element family computational algebras said ex secure encryption scheme se secure ind cpa uses key generation algorithm described 
theorem 
total order keys terms sort data 
ex secure family computational algebras ad sound wellformed frames described computationally soundness results model relying equational theories static equivalence 
consider case passive adaptive adversaries examples sound equational theories illustrate framework 
framework generalized active attacker challenging research topic 

abadi baudet warinschi 
guessing attacks computational soundness static equivalence 
proc 
th international conference foundations software science computation structures fossacs volume lncs 

abadi cortier 
deciding knowledge security protocols equational theories 
proc 
st international colloquium automata languages programming icalp volume lncs pages 

abadi fournet 
mobile values new names secure communications 
proc 
th annual acm symposium principles programming languages popl pages 
acm press 

abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
proc 
st ifip international conference theoretical computer science ifip tcs volume lncs pages 

abadi rogaway 
reconciling views cryptography computational soundness formal encryption 
journal cryptology 

ad bana herzog scedrov 
soundness formal encryption presence key cycles 
proc 
th european symposium research computer security esorics volume lncs pages 

ad bana herzog scedrov 
soundness formal encryption presence key cycles 
proc 
th european symposium research computer security esorics volume lncs pages 
springer 

ad bana scedrov 
computational information theoretic soundness completeness formal encryption 
proc 
th ieee computer security foundations workshop csfw pages 

backes pfitzmann waidner 
composable cryptographic library nested operations 
proc 
th acm conference computer communications security ccs 

baudet cortier kremer 
computationally sound implementations equational theories passive adversaries 
proceedings nd international colloquium automata languages programming icalp volume lncs pages 
springer 

blanchet 
automatic proof strong secrecy security protocols 
proc 
th ieee symposium security privacy ssp pages 

lakhnech warinschi 
generalization ddh applications protocol analysis computational soundness 
advances cryptology crypto proc 
th annual international cryptology conference volume pages 
springer 


pointcheval 
key derivation randomness extraction 
technical report cryptology eprint archive 
eprint iacr org 

corin 
analysing password protocol security line dictionary attacks 
entcs 

cortier 
survey algebraic properties cryptographic protocols 
journal computer security 

dwork naor reingold stockmeyer 
magic functions 
acm 

garcia van rossum 
sound computational interpretation symbolic hashes standard model 
advances information computer security volume lncs pages 
springer 

goldwasser micali 
probabilistic encryption 
journal computer system sciences 

kremer 
adaptive soundness static equivalence 
proc 
th european symposium research computer security esorics volume lncs pages 
springer sept 

laud corin 
sound computational interpretation formal encryption composed keys 
proc 
th international conference information security cryptology volume lncs pages 
springer 

micciancio 
adaptive security symbolic encryption 
proc 
nd theory cryptography conference tcc volume lncs pages 
springer 

micciancio warinschi 
completeness theorems abadi rogaway logic encrypted expressions 
journal computer security 

micciancio warinschi 
soundness formal encryption presence active adversaries 
proc 
st theory cryptography conference tcc volume lncs pages 
springer 

phan pointcheval 
security ciphers semantic security pseudorandom permutations 
proc 
selected areas cryptography sac volume lncs pages 
