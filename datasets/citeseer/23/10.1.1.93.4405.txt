flexible composition enterprise web services zeng benatallah hui lei anne ngu david henry chang school computer science engineering university new south wales southwest texas state university department computer science san marcos texas ibm watson research center usa cse unsw edu au austin rr com ibm com 
process composition web services ing promising approach automate business process organizational boundaries 
approach individual web ser vices federated composite web services business logic expressed process model 
business process automation technol ogy workflow management systems wfmss component services 
fundamental assumptions wfmss workflow schemas static predefined 
assumption impractical business processes explosive number options dynamic business pro cesses generated altered fly meet rapid changing business conditions 
describe rule infer ence framework called users declaratively define business objectives goals system dynamically com poses web services execute business processes 
flexible composition enterprise web services web services technologies emerging powerful vehicle organizations need integrate applications organizational boundaries 
particular process composition web services gaining considerable momentum approach effective integration distributed heterogeneous autonomous applications 
approach applications encapsulated web services logic interactions expressed process model 
approach provides attractive alternative hand coding interactions applications general purpose programming languages 
wide availability standardization web services possible compose basic web services composite services provide sophisticated functionality create add values 
example composite service provide high level financial management service uses individual payroll tax preparation cash management web services components 
process model underlying composite service identifies func required services composed tasks composite service interactions control flow data flow transactional dependencies 
technologies modelling executing business processes generally referred wfmss 
motivated requirements dynamic web services composition 
web environments highly dynamic web services appear disappear clock 
approaches statically compose services inappropriate 
business process automation technology production wfms component services 
fundamental assumptions production wfmss pro cess schemas static predefined 
order automate business processes designers need understand business processes modelling tools chart process schemas 
particular business process needs enacted process instance created process schema 
approach designer required explicitly define tasks compose business processes specify relationships 
approach assumes particular business process repeatedly 
impractical compose services application domains 
example extremely difficult impossible predefine composite service schemas research development abbr processes automobile industry business processes dynamic 
meet con straints opportunities posed new technologies new markets new laws business processes constantly redefined adapted 
doesn mean flexible composition enterprise web services business rules govern processes doesn mean planning processes impossible 
need system enables automatic generation process schemas customized organization environment business policies business objectives 
time global economy volatile dynamic organizations chang ing constantly entering new markets introducing new products restructuring mergers acquisitions alliances 
composite services long running representing complex chains tasks 
organizations executing composite services may need change business processes adapt changes application requirements technologies business policies conditions constraints 
consequently run time modification composite services necessary meet changes 
process modelling techniques runtime modification manual procedure time consuming costly enforce 
order reduce cost provide fast responses changes need automate runtime modification composite service schemas 
design implementation dynamic intelligent flow web services composition 
business objectives declaratively defined composite service definitions generated demand re configured runtime order adapt changes 
nutshell salient features set business rule templates modelling business policies rule inference mech anism generating composite service schemas 
argue business rules independent individual business processes 
re generate different composite service schemas 
propose rule inference approach support dynamic service composition 
different traditional business process modelling techniques business rules implicitly codified process schemas data control flow constraints 
adaptive service composition engine enables runtime modification composite service schemas 
users business process managers define business rules modify composite service schemas time 
adaptive service composition engine automatically incorporate newly added business rules need modify composite service schemas runtime 
remainder organized follows 
section introduce real world example illustration approach 
example stems product flexible composition enterprise web services lifecycle management case study provided motivations 
section introduces basic concepts definitions 
section describes details dynamic service composition 
section illustrates implementation system 
discuss related section provide concluding section 
motivating example section example product lifecycle management automobile industry 
assume automobile decides build new prototype sedan car 
chief engineer proposes build new prototype car replacing old engine new electric engine 
order achieve business goal replacing engine sequence tasks need conducted includes new electric engine development new parts layout design parts design development manufacturing assembling testing see 

new engine development automobile different alternatives obtain new electric engine outsource development electric engine companies develop electric engine house 
cost outsourcing design develop electric engine house 
wants outsource electric engine suitable vendor needs selected 
domestic vendor selected national quality control procedure applied international qual ity control procedure needs applied 
alternative processes type quality control procedure selection processes depends requirements electric engine budgets relationships vendors 
parts layout design replacing engine sedan car require system engineers conduct parts layout design 
new old engines may different specifications 
old parts may need replaced 
new unique parts may required electric engine 
system engineers conduct layout evaluation decide complete new layout design re part old layout design 
layout feasibility analysis possible alternatives change electric engine specification change related parts specifications change engine related part new engine development parts layout design parts design development procurement assembling testing option option option feasible analysis integrate design cost evaluation parts faulty report complete new design layout design parts design parts specification self development prototype develop reuse original layout design reuse layout layout evaluation new layout re design parts layout request evaluation outsource catalog checking change new parts change parts verification budget budget pass inventory checking parts change request car assembling testing engine specification catalog exist self manufacture selection development planning procurement self design development procurement layout feasible analysis task data car testing flexible composition enterprise web services option feasible analysis national quality control international quality control option option engine modification request reuse old design modification planning change gas engine change change parts process fig 

motivating example layout redesign parts redesign prototype develop parts change request part list control flow testing new parts request layout design report data flow new engine car testing report flexible composition enterprise web services specifications 
alternative set optional processes selection processes results layout feasibility analysis 
inside process possible options tasks need invoked process lots possibility data flows control flows tasks 

parts design development procurement new electric engine layout design may require design devel opment new parts sedan car 
basic processes involved obtain new part procurement self design development self manufacture 
decision processes adopted dependent result request evaluation catalog checking inventory checking 

assembling testing new electric engine parts ready workshop engineers verify 
faults parts reported related part obtaining processes 
part passes verification workshop engineers assemble parts 
problem assembling generate part modification request 
workshop engineers finish assembling car test engineers conduct sequence tests test generate report 
report may recommend modifications electric engine parts 
step options tasks control flow constraints 
final decisions depend type parts budget testing standards example different countries different car safety standards 
automobile wants sell new car particular country testing country car safety standard needs 
process developing new sedan car replacing engine electronic engine take half year hundreds new parts designed developed manufactured 
explosive number tasks control flow relationships product development process 
pre defining process schemas general knowl edge business rules 
schemes need consider possible options 
impossible predefine process schemas product process complex time consuming exhaustively enumerate possible options 
calls dynamic generation composite service schemas business rules context information user profiles 
example process user engineer designer assigned develop new electronic engine budget 
flexible composition enterprise web services case composite service generated current available services requirement new electronic engine profile budget constraints exhaustively possible options engine development 
challenge product process long running process changes may occur 
example enactment product process better quality materials new batteries electric engine may available 
product process needs adapt changes modifying process schemes 
production workflows tions costly especially workflow schemas complex 
composite service schema dynamically generated adaptation done re generating composite service schemas 
sections motivating example illustrate system composes services execute business processes 
preliminaries section introduce important concepts definitions system 
service ontology service ontology see specifies common language agreed community automobile industry 
defines basic concepts terminologies pants community 
particular service ontology specifies domain automobile healthcare insurance set synonyms mainly facilitate flexible search domain example domain automobile may synonyms car 
ontology specifies service classes define property services 
service class specified attributes operations 
example attributes service class may include access information url 
operation specified name signature inputs outputs 
apart service classes describe functional properties services service ontology specifies services quality model describe non functional properties services execution duration operation 
services quality model consist set quality dimensions criteria 
quality criteria basic components definition criteria service elements services operations related compute measure flexible composition enterprise web services value criteria 
web services elementary services composite services business objectives business rules specified defined set service ontologies 
domain synonyms service ontology service quality model legend class input output associations associations service class quality criteria attribute operation operation name fig 

uml class diagram service ontology service description advertisement order participate system services providers need publish service descriptions service repository 
important elements service descriptions service ontology service class 
service provider needs specify service ontology communicate service classes support 
example part testing service provider may specify supports service ontology cart parts service class 
slas 
service level agreement sla contract defines terms conditions service quality web service promises deliver requesters 
major compo nent sla qos information 
number criteria contribute web service qos sla 
consider mainly execution price execution duration operation 
service providers publish qos information slas 
service providers may publish qos information service descriptions confidential reasons 
case service providers need provide interfaces authorized requesters query qos information 
initial state business objectives initial state represents user starting point initial task business process business objectives represent goals target tasks user wants achieve 
flexible composition enterprise web services develop xml schema language allows users specify initial state business objectives 
initial state business objectives defined terms service ontology 
initial state business objective users need specify operation name defined service ontology 
initial state users provide constraints input operation business objectives users provide constraints input output operation 
xml document illustrates business objective user wants change engine engine sedan car 
detailed presentation language score space reason 
user name role chief engineer name change engine sedan ontology service name automobile engine operation name data constraint variable car type op value value sedan value data constraint data constraint variable type op value value value data constraint data constraint variable type op value value value data constraint operation business rule templates fig 

example business objective business rules statements business conducted guidelines re respect business processes enterprise 
propose business rule templates facilitate description business policies 
categories business rule templates flexible composition enterprise web services 
service composition rules 
service composition rules dynamically compose services 
types service composition rules backward chain rules forward chain rules data flow rules 
backward chain rules indicate preconditions executing task 
precondition specify data constraints data available execution task 
precondition flow constraint execution task requires tasks completed task executed task 
backward chain rule specified structure backward chain rule rule id task task constraint constraint pre condition pre condition example backward chain rule 
rule defines user wants conduct task new part part type car engine tasks need completed 
backward chain rule task constraint car engine pre condition complete task complete task forward chain rules indicate tasks may need added dropped consequence executing task 
forward chain rules defined eca event condition action rules forward chain rule rule id event event condition condition action action forward chain rule task completed new part greater task audit needs executed task 
forward chain rule fcr event complete task condition action execute task audit flexible composition enterprise web services data flow rules specify data flows tasks 
task business process may input output parameters 
tasks require input data flow rules specify data source 
general form data flow rule follows data flow rule rule id constraint constraint data source task task data item data item data target task task data item data item data source task human users 
example data flow rule task output provides input task 
data flow rule dfr data source task data item output data target task data item input 
service selection rules 
service selection rules identify particular algorithm strategy choosing web service execute tasks runtime 
general form service selection rule follows service selection rule rule id task task constraint constraint service selection service selection method task set candidate web services perform task 
currently adopt multiple criteria decision making approach select web ser vices 
methodologies auction negotiation adopted system support selection web services 
configurable decision model quality web services selection 
decision model takes con service quality criteria execution price execution duration implementation web service selection 
service provider selection rule task engine weight greater kg execution price criteria select web services 
service selection rule ssr task start task flexible composition enterprise web services constraint engine weight kg service selection service selection execution price expect domain experts define various business rules rule templates 
example domain experts service outsourcing may define service selection rules domain experts product life cycle may define service composition rules 
organizational structure service ontology organization service user department role user profile business rule legend associations class fig 

uml class diagram organizational structure organizational structure glue basic elements organization real virtual department role user business rule service see fig ure 
organization subdivided departments may consist departments hierarchical structure 
department associated service ontology set roles users services 
role associated set business rules 
user assigned roles describing context dependent behavior user profile 
information user profile includes user personal information roles orga preferences 
user profile facilitates generation execution composite services 
system generates composite service schemas personal information provides input executing composite services user role information identify rele vant business rules preferences customize business rules 
example forward chain rule fcr see table variable condition left uninstantiated 
value substituted preference user profile 
noted different users may different constraints 
flexible composition enterprise web services forward chain rule fcr event complete task condition price action execute task table 
forward chain rule incremental service composition composite service schema defined terms service ontologies 
consists collection generic tasks combined certain ways 
adopt uml statechart represent composite services 
example composite service schema business process making new part shown graphically 
statechart diagram consists states transitions 
kinds states statechart actual states pseudo states 
psfrag replacements actual state represents task requires invoking web service execute runtime 
labeled operation name service class service ontology 
noted tasks composite services bound specific web services definition time 
ws ws ws legend cost analysis ta tb tc td new part verify testing clash testing clash analysis task data control flow data flow fig 

defining composite service statechart initial state final state pseudo state single composite service schema represent business process identify different levels composite services model business process hierarchical structure composition hierarchy shown 
composite service initiate new business process defined top level composite service composite service execute task composite service defined task level composite service 
noted composite services composition hierarchy created fly user business objectives business rules 
composition hierarchy built initial top level composite service expanded hierarchy composite services runtime see 
flexible composition enterprise web services top level composite service task level composite service task refinement fig 

composition hierarchy snapshot snapshot snapshot snapshot legend top level composite service task level composite service task refinement fig 

snapshots composition hierarchy service composition top level task level business process involves major steps see composite service generation selection execution 
business objectives backward chain inference composition service generation forward chain inference data flow inference set composition services composite service selection composite service composite service execution runtime inference fig 

composite service generation selection execution execution result 
composite service generation 
formulate problem composite service genera tion planning problem inputs description initial state user context user profile description user business objectives set service composition rules domain theory 
noted input service composition rules associated user role specified user profile 
associations business rules roles flexible composition enterprise web services defined organizational structure 
output set composite service schemas instantiated executed achieve business objectives 
propose phase rule inference mechanism generate composite service schemas 
phase backward chain inference discovers necessary tasks backward chain task executed achieve business objective 
second phase consists forward chain inference determine tasks may potentially involved consequence executing tasks inferred previous phase 
final phase involves data flow inference mechanism 
details inference algorithms 

composite service selection 
cases composite service generated phase inference mechanism 
example backward chain rules task may multiple ways archive business objective 
case choice delegatee selection policy involving parameters total execution duration execution price 
composite service execution adaption 
step system starts executing selected composite service 
time forward chain rules re applied runtime constantly monitor state composite service execution runtime inference 
runtime inference rules broad range runtime events drive rule inference 
differs forward chain inference performed pre execution time assumes component services able complete task start termination events 
implementation aspects section current implementation prototype illustrate key concepts ideas approach 
prototype see composed service composition manager business rule repository user profile repository service broker 
components service composition manager implemented java ibm 
order participate business processes web services need registered service broker 
section briefly describes service broker 
section overviews components composite manager 
flexible composition enterprise web services business rule user profile repository business rule repository rule base composite service generation rule service broker user profile service selection rule initiate state user objective statechart generator re planning statechart execution planner execution plan adaptive execution engine service composition manager qos information statechart service broker service repository uddi registry wsdl document composition hierarchy tmodel tmodel publish subscribe service ontology repository uddi registry web service web service web service web service fig 

architecture prototype meta data repositories service broker service ontology repository service repository 
adopt uddi registry implement meta data repositories 
define xml schema service ontologies 
service ontology represented xml document 
separate tmodel type created service ontology 
information tmodel quite simple 
tmodel key name service ontology name optional description url points location service ontology description document 
uddi api service broker provides kinds interfaces repositories publish interface search interface 
service ontology repository publish interface allows ontology engineer create new service ontology 
provides methods modify service ontology add new service class delete existing service class search interface allows service providers users search browse exist ing service ontologies 
search service ontology domain name synonyms service class web service repository publish interface allows service providers publish advertise service descriptions 
search interface allows user discover web services service class name operation name input output data 
noted qos information retrieved generic operations 
service composition manager flexible composition enterprise web services service composition manager consists modules statechart generator execution planner adaptive execution engine 
statechart generator receives users initiate state initiate task business objectives target task input 
locates user profile repository consults business rules dynamically generate set independent statecharts xml documents 
statechart generated execution planner create optimal execution plan web services qos information xml document 
details execution planning 
optimal execution plan passed adaptive execution engine execute composite services 
execution engine manages composite service lifecycle enables state control service collaboration monitoring executing business rules 
service composition manager gui see provides single point access system 
business rule manager users edit modify delete business rules 
gui provides profile manager allows users manage profiles 
lower panel shows tool displaying diagram statechart graphically 
fig 

gui service composition manager flexible composition enterprise web services application illustrate viability approach implemented automobile appli cation 
business rules application 
application incrementally generates composite services manage replacing engine product process see sec tion 
detailed scenario follows step creating top level composite service schema step chief engineer provides description business objective replacing engine input statechart generator 
statechart generator locate user profile appropriate business rules generate xml document represent stat service 
graphical presentation statechart shown 
creating top level composite service chief engineer initiate product process 
task new engine development assigned engine designer 
step creating task level composite service schema assuming engine designer assigned execute task new engine development top level composite service 
new engine development task top level composite service 
statechart generator needs generate composite service engine designer execute task 
having business objective engine designer profile initial context statechart generator create task level compos ite service schema shown 
noted task composite service elementary service execute statechart generator create statechart execute 
example task cost evaluation service composition rule elementary service execute 
task outsourcing engine set service composition rules statechart generator create composite service execute 
scenario shows system creates necessary composite service schemas product process 
enumerate possible tasks control flows data flows 
single large level schema represent product process composition hierarchy consists multiple nested composite services represent product process 
modular approach allows distinct process encapsulated composite service 
representation scalable easy implement runtime modification composite services 
related flexible composition enterprise web services fig 

task level composite service new engine development research efforts modelling complex process 
section review related area production workflow web services standard artificial intelligent ai planning 
production workflows focus automating business processes character ized static pattern high repetition factor 
ibm mqseries workflow fdl flow definition language define workflow schemas 
wide project workflow manage ment system built support distributed workflow execution 
eca rules support exceptions asynchronous behavior execution distributed workflow instance 
eve project eca rules address problem distributed event workflow execution fundamental metaphor defining enforcing workflow ex ecution 
typically production workflows require define workflow schemas advance suitable dynamic web service composition business rules may modified created execution business process 
uses eca rules specify business rules dynamically generate composite services rules runtime adopt changes business rules 
decision flow focuses providing high level business process specification language declarative semantics understood users enterprise 
provides flexible composition enterprise web services algorithm eager detection eligible needed necessary tasks support efficient execution decision flow 
decision flow predefined business rules hard coded decision flow 
isee introduces events rules business process model 
enables runtime modifications business processes 
tasks business processes predefined rules modified dynamically 
composes business processes demand immediately execution continuously adapts process events occur runtime 
business rules re evaluated runtime ensure optimal composite service runtime 
standards aim providing infrastructure support web services composition emerged including soap wsdl uddi bpel ws 
soap defines xml messaging protocol basic service interoperability 
wsdl introduces com mon grammar describing services 
uddi provides infrastructure required publish discover services systematic way 
specifications allow applications find collaborate loosely coupled platform independent protocol 
bpel ws latest attempt add layer top wsdl specifying business processes business interaction protocols 
doing extends web services interaction model enables support business transactions 
bpel ws complementary 
provides formalism defining composite services concerned composite services may derived business rules 
currently prototype uses uml statechart describe resultant composite services 
choice stat specifying composite services motivated main reasons statecharts defined semantics ii offer basic flow constructs contemporary process modelling languages sequence conditional branching structured loops concurrent threads inter thread synchronization 
characteristic facilitates application formal manipulation techniques statechart models second characteristic ensures generated composite services adapted process modelling languages example easily switch bpel ws framework 
early ai planning seeks build control algorithms enable agent size plan achieve goal 
ai planning information gathering integration web 
ai planning adopted enable interaction web services requires predefined activity diagrams workflow schema enumerate flexible composition enterprise web services possible interactions web services 
uses planning algorithm choosing optimal execution plan require predefined workflow schemas 
dynamic service composition framework uses rule inference support web service composition 
provides tools defining business rules ii generating com services execute business processes 
tools provide infrastructure new approach dynamically compose web services 
currently platform generate business process automobile industry 
particular relatively complex composition hierarchy contains composite services tasks created replacing engine product process 
ongoing research includes optimization composite services automatic business rule learning 
acknowledgments benatallah partially supported australian research council 

aiello yang pistore serafini traverso 
request language web services planning constraint sa 
vldb technologies services tes lncs page 
springer 

benatallah fabio casati editors 
distributed parallel database special issue web services 
springer verlag 

benatallah dumas 
definition execution composite web services self serv project 
bulletin technical committee data engineering 

business process execution language web services version 
www ibm com developerworks library ws bpel 

fabio casati ming chien shan dimitrios georgakopoulos editors 
vldb journal special issue services 
springer verlag 

stefano ceri paul grefen gabriel sanchez 
wide distributed architecture workflow manage ment 


dimitrios georgakopoulos mark hornick amit sheth 
overview workflow management process modeling ow automation infrastructure 
distributed parallel databases 

andreas dimitrios tombros 
event distributed workflow execution eve 
technical report 
flexible composition enterprise web services 
richard hull bharat kumar gang zhou francois llirbat dong su 
optimization techniques data intensive decision flows 
proceeding th international conference data engineering 

ibm mqseries workflow 
www ibm com software ts mqseries workflow 

ibm toolkit 
alphaworks ibm com tech 

editors 
multiple criteria decision making new millennium 
springer verlag 

craig knoblock steven minton jose luis ambite ashish ion muslea andrew sheila te jada 
ariadne approach web information integration 
international journal cooperative information systems 

frank leymann dieter roller andreas reuter 
production workflow concepts techniques 
prentice hall 

drew mcdermott 
estimated regression planning interactions web services 
th int 
conf 
ai planning scheduling 

meng su lam helal 
achieving dynamic inter organizational workflow management integrating business processes events rules 
proceedings fifth hawaii international conference system sciences hicss 

simple object access protocol soap www org tr soap 

universal description discovery integration business web 
www uddi org 

uml resource page 
www omg org uml 

daniel weld 
advances ai planning 
ai magazine 

web services description language wsdl 
www org wsdl 

zeng benatallah anne hee ngu 
dynamic web service integration collaboration submit publication 
technical report school computer science engineering university new south wales 

zeng david henry chang jun jang 
lm flow dynamic business process composition execution rule inference 
vldb technologies services tes lncs 
springer 
