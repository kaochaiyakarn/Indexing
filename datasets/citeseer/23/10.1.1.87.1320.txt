decomposing global grammar constraints claude guy toby walsh omega unsw 
wide range constraints specified automata formal languages 
grammar constraint restricts values taken sequence variables string context free language 
decomposition show constraint converted clauses conjunctive normal form hindering propagation 
decomposition propagate grammar constraint time 
decomposition provides efficient incremental propagator 
branch search tree length enforce gac times time 
specialized languages running time better 
example propagation decomposition requires just time regular languages size transition table automaton recognizing regular language 
experiments shift scheduling problem constraint solver state art sat solver show solve problems decomposition defeat existing constraint solvers 
problems areas planning scheduling routing configuration naturally expressed efficiently solved constraint programming cp 
reason success cp provides simple declarative method solving wide range difficult combinatorial problems 
way model run capability solvers mixed integer programming mip propositional satisfiability sat 
major direction research cp directed developing new ways user state problem constraints efficiently reasoned 
promising method rostering domains specify constraints grammars automata accept language 
regular constraint specify acceptable assignments sequence variables means deterministic finite automaton 
instance want consecutive shift variables assigned night shifts 
limitation regular constraint compactly specify just deterministic finite automaton 
example regular languages defined deterministic automaton exponential number states 
extension consider regular languages specified non deterministic automata automata exponentially smaller 
researchers considered moving regular languages chomsky hierarchy 
example grammar constraint permits specify constraints context free grammar 
generalization appeared till theoretical interest high cost propagating grammar constraint 
aim show global grammar constraint practical promise 
context free grammars provide compact specifications complex constraints making easier specify problem reason constraints 
example shift scheduling benchmarks reported grammar dozen productions whilst corresponding automaton states 
grammar arguably simpler specify automaton 
addition argue simple decomposition grammar constraint propagate specification efficiently effectively 
show global grammar constraints implemented simple decomposition known cyk parser 
prove decomposition hinder propagation unit propagation decomposition prunes possible values 
decomposing global constraints way brings advantages 
easily add global constraint constraint solver 
example decomposition add grammar constraint constraint toolkit state art sat solver 
second decomposition gives efficient incremental propagator 
solver simply wake just constraints containing variables domains changed ignoring parts decomposition need propagated 
gives propagator worst case cost branch search tree just calling 
third decomposition gives propagator backtrack efficiently 
modern sat cp solvers watch literals backtrack level search tree constant time 
decomposition provides efficiency 
background constraint satisfaction problem csp consists set variables finite domain values set constraints 
domain variable written dom 
constraint restricts values taken subset variables subset cartesian product domains 
solution assignment value variable satisfying constraints 
systematic constraint solvers typically construct partial assignments backtracking search enforcing local consistency prune values variables solution 
consider common local consistencies generalized arc consistency 
support constraint assignment variable value domain satisfies constraint generalized arc consistent gac iff variable value domain belongs support 
csp gac iff constraint gac 
consider global constraints specified terms grammar automaton accepts just valid assignments sequence variables 
constraints useful wide range scheduling rostering sequencing problems ensure certain patterns occur time 
example may wish ensure working night shifts days 
constraint easily expressed context free language 
context free languages exactly accepted non deterministic push automaton 
context free language specified set productions chomsky normal form left hand side just non terminal right hand just terminal non terminals 
capital letters non terminals lowercase letters terminals 
shall assume unique non terminal start symbol 
production bc chomsky normal form symbol non terminal consider production shorthand productions bz chomsky normal form 
sequence belongs context free language iff exists parsing tree root start symbol leaves order reproduce sequence 
parsing tree non terminal tree root labelled non terminal leaves labelled terminals inner nodes labelled non terminals 
productions chomsky normal form node parsing tree children bc production grammar child production grammar terminal 
grammar defining context free language grammar constraint accepts just assignments sequence variables strings context free language 
example 
consider context free grammar aa bb ab suppose 
enforcing gac grammar prunes supports sequences aab abb 
regular constraint special case grammar constraint 
accepts just assignments come regular language 
regular languages strictly contained context free languages 
regular language specified productions left hand side just non terminal righthand just terminal terminal non terminal 
alternatively specified means non deterministic finite automaton 
decomposition grammar constraint show propagate grammar constraint simple decomposition known cyk parser 
parser uses dynamic programming bottom construct possible parsings possible sub strings 
backtrack table constructed parser decompose constraint boolean formula 
introduce types boolean variables variables true iff xi ith csp variable terminal symbol domain variables true iff ith th symbols parsed non terminal truth expressed terms truth variables cyk update rule parsing symbols iff production bc grammar parsing symbols parsing symbols 
algorithm gives time procedure constructing decomposition 
algorithm takes input grammar constrained variables 
xn returns set boolean formulae 
algorithm creates table entry contains set non terminals non terminal belongs parse symbols 
second phase algorithm backtracks table create variable non terminal contribute production non terminal top parsing tree 
input context free grammar chomsky normal form input constrained variables 
xn output set boolean formulae equivalent grammar constraint unsatisfiable constraint unsatisfiable dom xi dom xi store non terminals generate sequence xi 
xi bc return unsatisfiable set variables set equivalences downto store pairs variables cyk rule applies bc add nodes decomposition add relation dom xi dom xi dom xi return set clauses algorithm cyk prop 
xn example 
consider context free grammar example applied sequence length 
aa bb ab algorithm constructs formulae fig 

dag corresponding example grammar 
formulae created algorithm represented rooted dag 
leaf labelled variable terminal symbol integer inner node conjunction disjunction 
formulae form represented single leaf node labels formulae form 
ak bk create nodes children ai bi 
label node expression ai bi 
nodes node labelled common parent 
dag propose cnf decomposition 
children 
ck post constraint forcing child true node true 
ci 
ck node children post constraints enforce children true node true 
node root post constraint ancestors 
ak force node true ancestors true 

ak force root node true 
position force terminal true 
note constraints redundant logically implied 
added encoding ensure unit propagation decomposition prunes possible values 
example 
node node node dag 
show cnf clauses constraining variable clause applied ensures true children true 
clauses applied 
node true children true 
clause constrains variable different ways 
clause directly applied forcing true produces 
similarly node belongs parsing tree true 
node true parents true 
constraints variable theoretical properties prove decomposition global grammar constraint correct 
correctness follows quite quickly proof correctness cyk parser similar correctness proofs previous propagators grammar constraint 
theorem grammar constraint satisfiable iff true 
proof suppose grammar constraint satisfiable 
exists parsing tree proving sequence 
xn belongs language 
prove node parsing tree corresponding variable created algorithm 
show variables set true 
phase algorithm line line stores non terminal produce symbols xi xi 
second phase algorithm line line creates node terminal produce symbols xi xi participates production non terminal root parsing tree 
correctness statement follows 
node parsing tree corresponding variable 
prove induction depth parsing tree variable corresponding node parsing tree set true 
base case leaves parsing tree correspond nodes xi dag set true 
leaves dag set false 
clauses satisfied leaf set true position 
node parsing tree children generates sequence length position generates sequence length consequently exists production bc variable variable variable 
line algorithm node parent pair production bc nodes exist 
induction hypothesis assume variables true 
node set true satisfying clauses 
node true set variable true satisfy clause 
clause satisfied variables node 
applying induction step nodes parsing tree post order obtain root node set true 
suppose exists solution cnf clauses true 
clause guarantees child true 
child node children true clauses 
continue reasoning reaching leaf nodes 
visited nodes form parsing tree leaves listed left right sequence satisfying grammar constraint 
notice constraint second part proof theorem 
constraint necessary detect satisfiability constraint 
constraint fact redundant 
essential prove result 
show decomposition grammar constraint hinder propagation 
immediate previous result 
particular find surprising unit propagation achieve gac 
follow directly completeness proofs previous gac propagators 
add redundant constraints decomposition give property 
theorem unit propagation cnf clauses achieves gac grammar constraint 
proof assume cnf clauses consistent 
constraint guarantees node true ancestor true 
successively applying argument leaf node obtain path connecting leaf root node variable path set true 
variable path 

cn child variables dag 
constraint conclude exists node children true 
ci child children 
constraints guarantee children true 
repeat argument reaching leaves 
node explored form parsing tree leaves support variable build support node dag set true 
constraint ensures character belongs supports corresponding leaf fixed true 
constraint ensures character fixed true removes supports characters position 
show propagate decomposition efficiently 
run time complexity algorithm cyk parser size grammar 
theorem running time complexity algorithm length sequence number productions grammar 
proof line iterates times productions resulting time complexity 
set created line tests combinations productions integers total number tests 
sets complexity sums 
running time loop line dominated computation line 
set non terminals grammar 
number productions grammar left hand side non terminal 
line takes nf time execute test production generates integer cumulative time spent line expression 
nf running time algorithm 
size graph number cnf clauses bounded number nodes dag 
notice whilst algorithm performs tests line tests add non terminal set 
non terminals lead creation node lines 
ready analyse running time complexity maintaining gac decomposition 
assume solver wakes constraint variable scope fixed specific value 
cnf clause arity event occurs times branch search tree 
assumptions regarding order constraints awaken 
assume propagator cnf clause arity maintains gac time branch search tree 
assumption satisfied encoding ary cnf clause xi clauses yi xi yi yk xk 
clauses awaken times branch search tree propagation takes constant time propagating original cnf clause requires time branch search tree 
notice implementations cnf clause propagator efficient practice 
see instance implementation watched literals 
theorem amortised branch search tree length enforce gac times grammar constraint decomposition time 
proof assume propagating cnf clause arity takes time branch search tree 
conclude propagation time branch search tree proportional number literals cnf clauses 
graph inducing cnf clauses size number literals cnf clauses 
consequently obtain running time complexity branch search tree 
improves time complexity monolithic propagators grammar constraint 
note decomposition incremental propagator proposed literature 
regular languages cases specify problem constraints simple grammar 
instance need regular language 
regular languages strictly contained context free languages 
specified productions form ab show regular languages algorithm creates smaller dag resulting faster propagation 
theorem unit propagation cnf decomposition enforces gac regular constraint time 
proof productions form ab node belong parsing tree 
size graph bounded nodes limits number literals cnf clauses 
assumption argument theorem conclude propagating cnf clauses branch search tree takes time 
running time complexity pruning regular languages decomposition matches complexity propagator regular constraint dynamic programming 
fact clauses constructed algorithm essentially hidden variable encoding ternary decomposition regular constraint 
example 
language example recognized automaton 
automaton translated regular grammar follows 
aa aa bb bb algorithm constructs graph depicted sequence variables 
graph construct clauses representing boolean formulae fig 

automaton recognizing language 
fig 

dag corresponding regular grammar example 
gives constraints logically equivalent conditional productions useful practice go slightly outside context free grammars 
extensions permit specify simple manner instance day span hours certain activity executed pm 
specify conditions productions grammar conditional boolean functions relevant indices 
quickly incorporated decomposition 
attach boolean functions fa fb fc production bc functions restrict production applied sequence 
instance non terminal produced production bc generates sub string length starting position fa true 
similarly production applied generates sub string length starting position fb true 
support constrained productions change line algorithm 
bc fa fb fc replace line 
bc fa fb fc productions form require function fa necessarily produce sequences length 
production terminal controlled removing terminal domain variables xi 
replace line 
dom xi fa dom xi replace line 
dom xi fa experimental results test practical utility decomposition grammar constraint ran experiments shift scheduling benchmark introduced 
schedule employee subject rules 
employee works activity ai break lunch rests 
working activity employee works activity minimum hour 
employee change activities break lunch 
break fifteen minutes long lunch hour long 
breaks scheduled periods 
part time employee works hours hours day break 
full time employee works hours day break lunch break order 
employees rest day 
time day business closed employees rest break lunch 
divide day time slots minutes 
time slot ai employees assigned activity ai 
goal minimize number employees number hours worked 
model schedule employee sequence characters time slot accepted grammar rr ll ai aiai ai ai bw lp rp rf add restrictions productions 
ai fw employee works activity continuous hour 
lp fl lunch hour long 
rp fp part time employee works hours hours plus fifteen minute break 
rf ff represents hours plus hour half idle time lunch breaks 
productions ak ak constrained open open returns true business hours 
solving problem employees model consists sequences 
sm subject grammar constraint 
variable set tth character sequence sj post constraint ai ai order satisfy demand activity ai time break symmetry force sequences lexicographical order 
implemented program takes input benchmark instance grammar prepares input minisat solver 
minisat pseudo boolean solver allows constraints form 
xn xi boolean variable 
inequality constraints useful sure demand ai satisfied 
cnf clauses encoded linear equations sum literals clause equal greater 
negation variable expressed tested cnf encodings grammar constraint encoding includes redundant clause allowing unit propagation achieve gac encoding clauses omitted gac maintained 
implemented cp model ilog solver decomposition grammar constraint previous monolithic propagator grammar constraint cyk parser 
model matrix variables row corresponds schedule employee subject grammar constraint 
column subject global cardinality constraint gcc ensure number occurrences activity satisfies demand 
added lexicographic constraints rows column break symmetries 
static variable essential success experiment filled table left right assigned variables values order 
experiments minisat intel dual core ghz gb ram mac os ilog solver amd dual core opteron ghz gb ram 
reader careful comparing times clock speeds computers slightly different 
minisat halted finding optimal solution search suspended lack memory 
ilog solver halted hour computation proved optimality solution 
table presents results satisfiable instances benchmark involving activities 
cp model performed finding solution 
solutions returned hundreds backtracks 
solutions proved optimal hour computation 
notice decomposition performs significantly better monolithic propagator explores backtracks period time 
decomposition explores larger portion search tree 
instances finds satisfiable solutions hour monolithic propagator 
gac sat sat mono decomp sol time bt opt sol time bt opt sol bt sol bt table 
benchmark problems solved minisat 
gac sat results minisat cnf clauses sat results minisat cnf clauses clause mono results cp solver monolithic propagator decomp results cp solver decomposition number activities problem number number employees sol number worked hours best solution different methods time cpu time seconds find prove optimality solution 
times omitted search suspended lack memory bt number backtracks backtracks methods prove optimality opt solution proved optimal 
ilog solver prove problems optimal hour computation 
minisat solver returned feasible solution instances regardless encoding 
instances solver proved optimality solutions 
encodings prove optimality instances 
main weakness minisat solver memory consumption times search stopped lack memory 
notice encoding omits clauses form faster encoding achieving gac 
conjecture case minisat finding redundant constraints learning 
algorithm produce graph nodes noticed practice nodes created 
size resulting dag smaller practice theoretical bound 
instance grammar problems activity written chomsky normal form productions 
upper bound number nodes dag nodes whilst nodes average instances 
tried modelled schedule employee automaton 
due constraints number hours full time part time employee states automaton needed duplicated resulting automaton thousands states 
patterns produced non terminals reused automaton duplicating states 
dag regular language ended larger produced context free grammar 
related introduced idea representing solutions csp deterministic finite automaton 
automaton answer questions satisfiability validity equivalence 
generalized ideas non deterministic automata proposed heuristics minimize size automata 
approach applied configuration problems 
wolper developed decision procedures arithmetic constraints automata 
introduced regular constraint gave complete propagation algorithm dynamic programming 
carlsson petit proposed specifying global constraints means finite automaton augmented counters 
propagators automaton constructed automatically specification automaton means decomposition simpler constraints 
walsh proposed closely related decomposition regular constraint showed effective efficient practice 
column generation technique solve shift scheduling problem 
columns generated cp solver cost regular constraint variation regular constraint optimization process driven simplex method 
encoded regular constraint mip efficiently solved instances shift scheduling problem automaton encoding takes modelling constraints formal languages scope constraint programming 
contributions continue theme constraints specified formal languages domain sat solvers 
walsh proposed grammar constraint gave different propagators cyk earley parser 
proposed grammar constraint gave propagator cyk parser 
golden pang proposed string variables specified regular expressions finite automata show propagate matching containment cardinality constraints string variables 
studied global grammar constraint 
restricts sequence variables belong context free language 
constraint useful wide range problems scheduling rostering related domains 
decomposition showed grammar constraint converted clauses conjunctive normal form 
decomposition hinder propagation unit propagation decomposition achieves gac original grammar constraint 
decomposition enforce gac grammar constraint time 
decomposition improve existing propagators incremental 
specialized languages running time better 
particular regular languages require just time size transition table automaton recognizing language 
experiments shift scheduling problem state art sat solver demonstrated solve problems way defeat existing constraint solvers 
decomposition global constraints opens number possibilities starting explore 
example may easier construct goods cost measures constrained problems 
decomposition may easier construct constraint branching heuristics 
second author funded arc backing australia ability ict centre excellence program 
louis martin rousseau useful comments providing benchmark 

regular language membership constraint finite sequences variables 
th int 
conf 
principles practice constraint programming cp lncs 
walsh global grammar constraints 
th int 
conf 
principles practices constraint programming cp lncs 
theory grammar constraints 
th int 
conf 
principles practice constraint programming cp lncs 
rousseau cost regular hybrid column generation approach 
constraints 
translating pseudo boolean constraints sat 
journal satisfiability boolean modelling computation 
solving constraint satisfaction problems finite state automata 
th national conf 
ai aaai 
representation par automate ensemble de solutions de probl mes de de contraintes 
phd thesis universite montpellier ii cnrs lirmm 
fargier marquis consistency restoration explanations dynamic csps application configuration 
artificial intelligence 
wolper representing arithmetic constraints finite automata overview 
int 
conf 
logic programming iclp lncs 
carlsson petit deriving filtering algorithms constraint checkers 
th int 
conf 
principles practice constraint programming cp lncs 
rousseau regular constraint integer programming modeling 
th int 
conf 
integration ai techniques constraint programming 

golden pang constraint reasoning strings 
th int 
conf 
principles practice constraint programming cp lncs 
moskewicz madigan zhao zhang malik chaff engineering efficient sat solver 
proc 
th design automation conf 
dac 

