journal artificial intelligence research submitted published minimaxsat efficient weighted max sat solver federico heras lsi upc edu javier larrosa larrosa lsi upc edu albert lsi upc edu technical university catalonia lsi department jordi girona barcelona spain 
introduce minimaxsat new max sat solver built top min isat 
incorporates best current sat max sat techniques 
handle hard clauses clauses mandatory satisfaction sat soft clauses clauses falsification penalized cost max sat pseudo boolean objective functions constraints 
main features learning backjumping hard clauses resolution lower bounding lazy propagation watched literal scheme 
empirical evaluation comparing wide set solving alternatives broad set optimization benchmarks indicates performance minimaxsat usually close best specialized alternative cases better 

max sat optimization version sat goal satisfy maximum number clauses 
considered fundamental combinatorial optimization problems important problems naturally expressed max sat 
include academic problems max cut max clique real problems domains routing bioinformatics scheduling electronic markets 
long tradition theoretical structural complexity papadimitriou approximability karloff zwick max sat 
restricted simplest case clauses equally important unweighted max sat fixed size mainly binary ternary 
practical point view significant progress years shen zhang larrosa heras larrosa heras de xing zhang li planes 
result handful new solvers deal time instances involving hundreds variables 
main motivation comes study max sat instances modelling realworld problems 
usually encounter features satisfaction clauses importance clause needs associated weight represents cost violation 
extreme case happens practice observed cha miyazaki clauses satisfaction mandatory 
usually modelled associating high weight 
literals appear randomly clauses 
contrary easy identify patterns symmetries kinds structures 
ai access foundation 
rights reserved 
heras larrosa problems mandatory clauses reduce dramatically number feasible assignments optimization part problem plays secondary role 
problems mandatory clauses trivially satisfiable real difficulty lays optimization part 
look current max sat solvers find robust features 
instance li solvers restricted formulas clauses equally important unweighted max sat shen zhang restricted binary clauses described larrosa 
efficient overconstrained problems small fraction clauses simultaneously satisfied planes efficient slightly overconstrained problems clauses satisfied 
solver described developed parallel research described handle mandatory clauses incorporates learning perform structured problems 
non mandatory clauses weight 
approaches translating max sat instance sat instance solve sat solver effective highly structured problems clauses mandatory fu malik le 
introduce minimaxsat new weighted max sat solver incorporates current best sat max sat techniques 
build top minisat borrows capability deal pseudo boolean problems minisat features processing mandatory clauses learning backjumping 
extended allowing deal weighted clauses preserving watched literal lazy propagation method 
main original contribution minimaxsat implements novel efficient lower bounding technique 
specifically applies unit propagation order detect disjoint subsets mutually inconsistent clauses done li 

simplifies problem larrosa heras heras larrosa larrosa 
order increment lower bound 
works clauses accomplish specific patterns transformed minimaxsat need define patterns 
structure follows section provides preliminary definitions sat section presents state art solving techniques incorporated modern sat solver minisat 
section presents preliminary definitions max sat section overviews minimaxsat 
sections focus lower bounding additional features respectively 
section benchmarks empirical evaluation report experimental results 
section presents related section concludes points possible 

preliminaries sat sequel xn set boolean variables 
literal variable xi negation xi 
variable literal refers noted var 
literal negation xi xi xi xi 
clause disjunction literals 
size clause noted number literals 
set variables appear noted var 
associate subscript greek letter clause 
xi order facilitate clause 
minimaxsat efficient weighted max sat solver algorithm dpll basic structure 
function search boolean loop conflict top conflict return alse variables assigned return true enqueue assignment set literals containing variable negation 
assignments maximal size called complete called partial 
variable unassigned belong toa similarly literal unassigned var unassigned 
assignment satisfies literal iff belongs assignment satisfies clause iff satisfies literals falsifies clause iff contains negation literals 
case say clause conflicting happens empty clause noted 
boolean conjunctive normal form cnf set clauses representing conjunction 
model complete assignment satisfies clauses inf iff model call satisfiable say unsatisfiable 
complete assignments say thatf tautology 
clauses size called unit clauses simply units 
formula contains unit simplified removing clauses containing removing clauses appears 
application rule quiescence called unit propagation recognized fundamental propagation technique current sat solvers 
known rule resolution formula containing clauses form called clauses allows add new clause called resolvent 

overview state art dpll sat solvers section overview architecture sat solvers dpll davis logemann loveland procedure 
procedure currently regarded efficient complete search procedure sat performs systematic depth search space assignments 
internal node associated partial assignment successors obtained selecting unassigned variable extending current assignment respectively 
visited node new units derived due application unit propagation 
leads heras larrosa algorithm unit propagation 
function conflict contains non propagated literals foreach clause unit falsified unit enqueue falsified return conflict return conflicting clause procedure backtracks performing non chronological backtracking clause learning originally proposed silva sakallah 
algorithmic description dpll procedure appears algorithm 
algorithm uses propagation queue contains units pending propagation contains representation current assignment 
propagation queue filled units contained original formula line 
main loop starts line iteration procedure charge propagating pending units line 
conflicting clause line conflict analyzed line result new clause learned inferred recorded line 
procedure backtracks propagation queue undo assignment exactly literals learned clause unassigned line 
backtrack maintaining condition advantageous commonly referred backjumping non chronological backtracking see silva sakallah 
leads conflict new unassigned literal selected extend current partial assignment 
new literal added line new iteration takes place 
procedure stops complete assignment line top level conflict line 
case procedure returns true indicates model second case returns alse means model exists input formula 
performance dpll sat solvers greatly improved sat solver chaff moskewicz madigan zhao zhang malik incorporated watched literal scheme efficient unit propagation uip scheme zhang madigan moskewicz malik clause learning cheap branching heuristic :10.1.1.18.2715:10.1.1.24.7475
currently stateof art sat solvers minisat implement small variations features 
describe depth 
unit propagation aim unit propagation twofold hand finds clauses units due current assignment hand detects clause conflicting 
concrete procedure algorithm 
non propagated literals exist picks oldest marks propagated line 
clauses containing may falsified units traversed describe clauses detected 
clauses unit enqueued propagated line minimaxsat efficient weighted max sat solver 
procedure iterates units propagate conflicting clause line 
types literals decision literals algorithm heuristically selected assigned branching point lines algorithm consequence literals added logical consequences previous decision literals line 
minisat uses non standard queue handle units pending propagation 
classical queues fetching element removed just marked 
consequently formed sets elements propagated literals literals pending propagation 
advantage strategy execution point contains current assignment 
propagated literals divided decision levels 
decision level contains decision literal set related consequences 
furthermore literal associated original clause caused propagation noted clause usually referred reason note decision literal reason represented example consider formula 
starting execution propagation queue empty 
symbol separate propagated literals left literals pending propagation right 
literal selected added propagation queue contains 
propagate add new consequences 
propagation queue current assignment 
propagation add new literals decided add new consequence 
propagation 
current assignment 
note literals propagated complete assignment 
note contains decision levels formed literals second formed literals 
lazy data structures 
mentioned aim detect units conflicting clauses 
account process typically takes total runtime sat solver important design efficient data structures 
attempt adjacency lists 
literal keeps list clauses literal appears 
addition literal assignment clauses containing traversed 
main drawback refinements detect efficiently clause unit keeping counters indicating number unassigned literals clause involved considerable amount backtracking 
method minisat watched literal scheme introduced moskewicz 

basic idea clause unit conflicting satisfied literal ii unassigned literals 
algorithm keeps special literals clause called watched literals initially unassigned literals tries maintain invariant satisfied literal unassigned literals watched 
invariant may broken watched literals falsified 
case clause traversed looking non false literal watch order restore heras larrosa invariant 
literal clause declared true unit conflicting depending value watched literal 
literal added assignment clauses may falsified unit line algorithm clauses watched 
main advantage approach clauses done backtracking 
main drawback way know literals unassigned clause traversing literals 
note information techniques sided jeroslow branching heuristic see section 
resolution refutation trees 
detects conflict unsatisfiable subset determined information provided unsatisfiable empty clause derived resolution 
resolution process called refutation 
refutation unsatisfiable clause set resolution refutation tree simply refutation tree clause exactly resolution process 
refutation tree built propagation queue follows conflicting clause 
traverse lifo fashion clause 
resolution applied obtaining resolvent 
traversal continues clause clashes giving resolvent iterate process resolvent obtain empty clause 
importance refutation trees relevant section 
example 
apply unit propagation unit clause enqueued producing 
propagated 
literal propagated causing clause unit 
literal propagated clause conflicting 
shows state propagation 
build refutation tree 
starting tail clause conflicting clause 
resolution generates resolvent 
clause producing resolvent 
clause resolution generates 
resolve clause obtain shows resulting refutation tree 
learning backjumping learning backjumping best illustrated example see silva sakallah zhang precise description example consider formula partial assignment leads conflict clause 
suppose current propagation queue xd 
example easy see decision xd incompatible decision xd incompatibility represented clause 
similarly consequence incompatible decision xd represented clause 
minimaxsat efficient weighted max sat solver graphical representation propagation queue refutation tree example 
top original left propagation step 
arrows indicate order resolving clauses selected 
right resolution tree computed step 
clause learning implements different techniques discover implicit incompatibilities adds formula 
learned clauses accelerate subsequent search increase potential executions 
observed unrestricted clause learning impractical cases recorded clauses consume memory repeated recording may lead exhaustion 
reason current sat solvers incorporate different clause deletion policies order remove learned clauses 
learned clauses presence allowed unit propagation earlier decision level 
case say clause asserting backjumping proceed going back level adding unit propagated literal 
automated ways generating asserting clauses minisat uses called unique implication point uip zhang 
branching heuristic branching occurs algorithm 
literals propagate function chooses variable unassigned ones assigns value 
heras larrosa importance branching heuristic known different branching heuristic may produce different sized search trees 
early branching heuristics include bohm heuristic buro ning maximum minimum sized clauses mom freeman sided jeroslow wang heuristic jeroslow wang 
heuristics try choose literal assignment generate largest number implications satisfy clauses 
heuristics state dependent information state clauses current assignment 
information number unassigned literals clause 
implemented jointly data structures adjacency lists keep information 
instance sided jeroslow wang heuristic computes literal function selects literal maximizes function 
solvers efficient updating metrics state dependent heuristics dominates execution time 
minisat uses slight modification state independent heuristic proposed moskewicz 

heuristic called variable state independent decaying sum selects literal appears frequently clauses giving priority learned clauses 
advantage heuristic metrics updated clauses learned 
occurs occasionally computation low overhead 
heuristic suits perfectly lazy data structures watched literal scheme 

weighted max sat weighted clause pair clause integer representing cost falsification called weight 
problem contains clauses satisfied call clauses mandatory hard associate special weight 
non mandatory clauses called soft 
weighted formula conjunctive normal form set weighted clauses 
model complete assignment satisfies mandatory clauses 
cost assignment sum weights clauses falsifies 
weighted max sat problem finding model minimum cost 
cost called optimal cost 
note formula contains mandatory clauses weighted max sat equivalent classical sat 
clauses weight called unweighted max sat problem 
assume weighted max sat 
say weighted relaxation weighted optimal cost equal optimal cost inf non models considered cost infinity 
say weighted andf equivalent andf max sat simplification rules transforms equivalent presumably simpler sat simplification rules unit propagation tautology removal 
directly applied max sat restricted mandatory clauses 
specific max sat simplification rules exist larrosa 
instance formula contains clauses replaced 
contains clause may removed 
contains unit simplified removing including soft clauses containing minimaxsat efficient weighted max sat solver removing clauses including soft clauses appears 
application rule quiescence natural extension unit propagation max sat 
empty clause may appear weighted formula 
weight clear formula model 
weight cost assignment include weight obvious lower bound formula optimal cost 
weighted empty clauses interpretation terms lower bounds relevant section 
shown larrosa 
notion resolution extended weighted formulas follows arbitrary disjunctions literals min 
called prior clauses called resolvent called posterior clauses called compensation clauses 
effect max sat resolution classical resolution infer explicit connection important difference classical resolution max sat resolution 
yields addition new clause max res transformation rule 
requires replacement left hand clauses right hand clauses 
reason cost prior clauses order compensate new inferred information 
consequently max res better understood movement knowledge formula 
resolution rule max sat preserves equivalence 
compensation clauses may lose clausal form rule larrosa may needed recover cnf cnf example apply weighted resolution clauses obtain 
clause simplified 
second clause omitted weight zero 
fifth clause omitted tautology 
fourth element clause simple disjunction 
apply cnf rule obtain new clauses cnf 
note new clause tautology 
obtain equivalent formula 

overview minimaxsat minimaxsat weighted max sat solver built top minisat 
dpll sat solver minisat particularly wellsuited short open source code 
deal pseudo boolean constraints 

empty clause represents tautology 
special weight relations larrosa heras larrosa algorithm minimaxsat basic structure 
function search integer ub localsearch lb loop propagate hard conflict top level hard conflict return ub soft conflict search return ub variables assigned ub lb ub return ub search return ub enqueue formula possibly containing hard soft clauses minimaxsat returns cost optimal model model 
achieved means branch search usually done solve optimization problems 
minisat tree assignments traversed depth manner 
search point algorithm tries simplify current formula ideally detect conflict mean current partial assignment successfully extended 
minimaxsat distinguishes types conflicts hard soft 
hard conflicts indicate model extending current partial assignment mandatory clauses simultaneously satisfied 
hard conflicts detected account hard clauses methods minisat 
hard conflict occurs minimaxsat learns hard clause minisat 
soft conflicts indicate current partial assignment extended optimal assignment 
order identify soft conflicts algorithm maintains values search cost best model far upper bound ub optimal solution 
underestimation best cost achieved extending current partial assignment model lower bound lb current subproblem 
soft conflict detected lb ub means current assignment lead optimal model 
soft conflict detected algorithm backtracks chronologically 
note minimaxsat efficient weighted max sat solver algorithm minimaxsat propagation 
function ms conflict contains non propagated literals lb lb lb ub return soft conflict foreach hard clause unit falsified unit enqueue falsified return hard conflict foreach soft clause unit unit return function propagate conflict ms hard soft conflict return lb ub return soft conflict return computing clause expressing reasons led lb ub 
presence lots soft clauses approach ends creating long clauses affect negatively solver decided perform simple chronological backtracking 
want soft clause ub satisfied optimal assignment 
assume soft clauses automatically transformed hard clauses previous search 
ones soft clause promoted hard search 
algorithmic description minimaxsat algorithm 
starting search initial upper bound obtained local search method line may yield identification new hard clauses 
current implementation hoos default parameters 
selected local search algorithm iterated robust tabu search smyth hoos st tzle 
lower bound initialized zero 
queue initialized unit hard clauses resulting formula line 
main loop starts line iteration charge propagating pending literals line conflict detected attempting extension current partial assignment line 
pending literals propagated function propagate line may return hard soft conflict 
hard conflict encountered line conflict analyzed new hard clause learned backjumping performed 
done introduced section 
soft conflict encountered line chronological backtracking performed 
conflict line literal heuristically selected added propagation iteration 
current assignment complete line upper bound updated 
search stops zero cost solution improved line 
chronological backtracking performed line 
note backjumping leads termination top level hard heras larrosa conflict chronological backtracking leads termination values assigned variable tried 
algorithm describes propagation process function propagate 
uses array accumulates weight soft clauses unit original clauses current assignment falsifies clauses exists assume 
performs max sat adapted form unit propagation ms line 
ms iterates non propagated literals line 
firstly adding assignment may set soft clauses falsified 
cost clauses kept add lower bound line 
lower bound increment identifies soft conflict returned line 
hard clause unit corresponding literal added propagation line 
soft clause unit clause line weight added line 
process hard conflict detected function returns lines 
algorithm attempts detect soft conflict call procedure line returns soft conflict line 
section detailed description 
conflict detected function returns line 

lower bounding minimaxsat consider arbitrary search state minimaxsat call procedure 
purpose section search state characterized current assignment 
current assignment determines current subformula original formula conditioned current assignment clause contains literal part current assignment removed 
literals negation appear current assignment removed clauses appear 
value lb maintained minimaxsat precisely aggregation costs clauses empty due current assignment 
similarly recall value aggregation costs clauses unit due current assignment 
current subformula contains lb minimaxsat computes lower bound deriving new soft empty clauses resolution process 
clauses added existing clause lb producing increment lower bound 
step replaces occurrence min amounts applying restricted version max sat resolution known unit neighborhood resolution larrosa 
produces immediate increment lower bound weight empty clause line illustrated example example consider current state 
resolve clauses replacing compensation clauses removed weight zero tautologies 
empty clauses grouped 
resolve clauses replacing 
empty clauses grouped 
new equivalent formula higher lower bound 
minimaxsat efficient weighted max sat solver algorithm lower bounding minimaxsat function sup conflict contains non propagated literals foreach hard soft clause unit falsified unit enqueue falsified return conflict return procedure lb foreach replace min sup con minimum weight clauses condition lb lb remove weight clauses second step executes simulation unit propagation sup line soft clauses treated hard 
sup adds unit soft clauses line 
new literals propagated 
new hard soft clauses unit inserted line 
yields conflict means subset soft hard clauses simultaneously satisfied 
showed section identify subset build refutation tree 
computes tree line 
take account weights clauses apply max sat resolution section dictated see produce new clause minimum weight clauses tree line 
means extension current partial assignment unassigned variables cost important step max sat resolution process consider minimum weight clauses minimum clauses resolution tree 
passed parameter line 
result resolution process replacement clauses leaves corresponding compensation clauses function line obtaining equivalent formula lower bound increment call procedure resolution lower bounding 
example consider step 
apply sup 
initially unit clause enqueued producing 
propagated 
literal propagated clause unit producing 
literal propagated clause conflicting 
shows state propagation 
heras larrosa graphical representation minimaxsat lower bounding 
top original current left propagation step 
middle structure refutation tree computed simulation step 
right effect executing max sat resolution step 
resulting appears bellow 
lower bounding performed step replaced weights producing step 
build simulated refutation tree 
starting tail clause conflicting clause 
resolution generates resolvent 
clause producing resolvent 
clause resolution generates 
resolve clause obtain shows resulting resolution tree 
step 
apply max sat resolution 
apply max sat resolution indicated refutation tree computed step 
graphically shows result process 
leaf clauses original weighted clauses involved resolution 
internal node indicates resolution step 
resolvents appear junction edges 
resolvent inside box compensation clauses added formula preserve equivalence 
clauses resolution removed resulting consists root minimaxsat efficient weighted max sat solver tree compensation clauses clauses refutation tree 
resulting formula isf 
soundness max sat resolution guarantees thatf transformations applied resolution lower bounding passed descendent nodes changes preserve equivalence 
transformations restored backtracking takes place 
alternative problem transformation resolution identify lower bound increment clauses participated resolution tree 
procedure similar lower bound computed li 
call line lower bounding 
example consider previous example 
steps identical 
lower bounding replace step step weight clauses appear refutation tree adds formula 
result 
note thatf applied lower bounding restored moving descendent node preserve equivalence 
increment lower bound technique procedure sup executed may yield new lower bound increments 
process repeated sup detect conflict 
comparing previous approaches observe resolution lower bounding larger overhead resolution steps need computed consequences added current formula removed backtracking 
effort invested transformation may amortized increment obtained lower bound part current formula discovered descendent nodes search 
hand lower bounding smaller overhead resolution needs computed 
facilitates context restoration backtracking 
minimaxsat incorporates alternatives chooses apply heuristically lines depending specific condition line 
observed resolution lower bounding effective resolution applied low arity clauses 
consequence identification resolution tree minimaxsat applies resolution lower bounding largest resolvent resolution tree arity strictly 
applies lower bounding 
see section details 

additional features minimaxsat section overview important features minimaxsat literal scheme branching heuristic soft probing minimaxsat deals pseudo boolean functions 
watched literals heras larrosa minimaxsat uses watched literal scheme soft clauses 
recall main advantages technique applied pure sat problems backtracking takes place done clauses 
unfortunately case soft clauses restoration needs done 
soft clause unit literal function ms weight added clause eliminated marked eliminated avoid reusing lower bounding procedure 
changes addition lb restored backtracking performed 
note executions sup simulation unit propagation clauses considered hard 
case watched literal scheme works exactly sat solver hard soft clauses 
inconsistency detected sup stops literals propagate initial state recovered 
situation restoring initial state completely overhead free 
branching heuristic minimaxsat incorporates alternative branching heuristics 
heuristic moskewicz disregarding soft clauses minisat default 
heuristic structured problems learning backjumping play significant role problems difficult find models satisfaction component problem difficult optimization component 
heuristic disregards soft clauses ineffective problems easy find models difficulty find optimal prove optimality 
extreme case problems contain soft clauses complete assignment model heuristic blind completely useless 
overcome limitation minimaxsat incorporates weighted jeroslow heuristic heras larrosa 
extension sat jeroslow heuristic described section 
weighted formula literal function defined mandatory clauses assumed weight equal upper bound ub 
heuristic selects literal highest value 
main disadvantage metrics need updated visited node 
combination watched literal updating expensive pay general 
current implementation heuristic values computed root node solving process 
experiments heuristic alternative problems difficulty lies optimization part problems models 
minimaxsat automatically changes weighted jeroslow problem contain literal hard clauses hard clauses heuristics literal lb ub node search tree selected literal assigned 
soft probing minimaxsat efficient weighted max sat solver probing known sat technique allows formulation hypothetical scenarios silva 
idea temporarily assume hard unit clause execute unit propagation 
yields conflict know model extending current assignment contain process iterated literals quiescence 
exhaustive experiments sat context indicate expensive probe search le silva normally done pre process order reduce initial number branching points 
easily extend idea max sat 
context discovery unit hard clauses may explicit weighted unit clauses 
call soft probing 
sat idea temporarily assume unit clause simulate unit propagation execute sup 
build resolution tree propagation queue clauses hard know added assignment 
reproduce applying max sat resolution weighted clauses derive unit clause minimum weight clauses 
having unit soft clauses upfront executions effective subsequent search 
derive generate unit neighborhood resolution see example initial non trivial lower bound min 
tested soft probing search preprocessing benchmarks 
observed empirically soft probing preprocessing best option sat 
example consider 
assume adding execute sup conflict reached 
obtain detect conflicting clause 
clauses involved refutation tree 
resolving clauses results 
resolution previous resolvent produces equivalent 
pseudo boolean functions pseudo boolean optimization problem barth sakallah form minimize subject ai jl bi ai bi non negative integers 
minimaxsat provided instance translates max sat formula follows pseudo boolean constraint translated set hard clauses minisat algorithm heuristically decides appropriate translation choosing adders bdds 
objective function translated set soft unit clauses 
summand new soft unit clause cj 
translation minimaxsat executed usual 

empirical results heras larrosa section benchmarks solvers empirical evaluation 
report experiments performed order adjust parameters minimaxsat 
comparison solvers 
benchmarks encodings having set problems fundamental show effectiveness new solvers 
problems explain encode weighted max sat 
max sat sat cnf formula cnf formula clauses size generated random unsatisfiable sat sat formulas generator solved corresponding max sat problem 
benchmarks fixed number variables varied number clauses repeated 
max cut graph cut defined subset vertices size cut number edges vi vj vi max cut problem consists finding cut maximum size 
encoded max sat associating variable xi graph vertex 
value true respectively false indicates vertex vi belongs respectively 
edge vi vj soft clauses xi xi 
complete assignment number violated clauses size cut associated assignment 
experiments considered max cut instances extracted random graphs nodes varying number edges 
max satisfiable cnf formula max problem finding model maximum number variables set true 
problem encoded max sat considering clauses original formula mandatory adding weighted unary clause xi variable formula 
note solving problem harder solving usual sat problem search soon model 
optimal model optimality proved 
considered max problem types cnf formula random sat instances variables generated structured satisfiable instances coming sat competition minimum vertex covering max clique graph vertex covering set edge vi vj vi size vertex covering 
minimum vertex covering problem consists finding covering minimal size 
naturally formulated weighted max sat 
associate variable xi graph vertex vi 
value true respectively false indicates 
van gelder ftp dimacs rutgers edu pub challenge satisfiability contributed ucsc instances 
www org minimaxsat efficient weighted max sat solver vertex vi belongs respectively 
binary hard xi edge vi vj 
specifies vertices covering edge connecting 
unary clause xi variable xi order specify preferred add vertices simple way transform minimum vertex coverings max cliques vice versa fahle 
experiments considered maximum clique instances extracted random graphs nodes varying number edges 
considered max clique instances dimacs challenge combinatorial auctions combinatorial auction defined set goods set bidders bid indivisible subsets goods 
bid defined subset requested goods gi amount money offered 
bid taker wants maximize revenue decide bids accepted 
note bids request jointly accepted sandholm 
max sat encoding variable xi associated bid 
unit clauses xi ui indicating bid accepted loss profit ui 
pair conflicting bids mandatory clause xi 
experiments cats generator leyton brown shoham allows generate random instances inspired real world scenarios 
particular generated instances regions paths scheduling distributions 
number goods fixed increased number bids 
increasing number bids instances constrained conflicting pairs bids harder solve 
miscellaneous considered sets instances widely literature unsatisfiable instances nd dimacs implementation challenge considered de larrosa meseguer schiex li 
random sat instances aim dubois pigeon hole problem hole coloring problems 
observe instances modelled unweighted max sat clauses weight 
max csp random instances generated protocol specified larrosa schiex de heras larrosa 
distinguish different sets problems dense loose dl dense tight dt sparse loose sl sparse tight st 
tight instances variables loose instances variables 
set contains instances values instances values variable 
planning cooper blanc de graph coloring structured instances taken weighted constraint satisfaction problem repository 
ftp dimacs rutgers edu pub challenge graph benchmarks clique 
mat cmu edu challenge html 
mat cmu edu coloring benchmarks 
toulouse fr plugins php toolbar heras larrosa problems taken pseudo boolean evaluation logic synthesis misc garden routing mpi minimum prime implicant mps 
instances encoded max sat specified previous section 
note max csp planning graph coloring instances encoded max sat direct encoding walsh 
alternative solvers compare minimaxsat optimizers different communities 
restricted comparison freely available solvers 
considered ones maxsatz li li planes 
unweighted max sat solver 
best unweighted max sat solver max sat evaluation 
max dpll heras larrosa larrosa 
weighted max sat solver 
part toolbar package 
best solver weighted max sat second best solver unweighted max sat max sat evaluation 
toolbar larrosa larrosa schiex de 
state art weighted csp solver 
pueblo sakallah 
pseudo boolean solver 
ranked categories pseudo boolean evaluation 
minisat 
pseudo boolean solver translates problems sat solves minisat 
ranked categories pseudo boolean evaluation 
instances taken pseudo boolean evaluation original format pueblo minisat 
instances translated max sat partitioning set clauses sets contains mandatory clauses contains weighted clauses andu contains unary weighted clauses 
hard clause pseudo boolean constraint obtained replacing negated variables non unary weighted clause uj pseudo boolean constraint computed new variable set trivially satisfies constraint 
objective function minimize experimental results jr jl cj divide experiments parts 
purpose part evaluate impact different techniques minimaxsat set different parameters 
techniques effective benchmarks useless counterproductive li stallman aimed finding configuration minimaxsat 
www univ fr pb minimaxsat efficient weighted max sat solver performs reasonably instances 
purpose second part compare min alternative solvers 
solvers specifically designed type problems expect minimaxsat outperform 
want show robustness minimaxsat showing usually close performance best alternative type problems 
results plots tables 
regarding tables column contains name set problems 
second column shows number instances 
remaining columns report performance different solvers 
cell contains average cpu time solver required solve instances 
solver solve instances set number inside brackets indicates number solved instances average cpu time takes account solved instances 
cell contains dash means instance solved time limit 
regarding plots note legend goes accordance performance solvers 
time limit set seconds instance 
solver written implemented top minisat 
executions ghz xeon computer linux 
experiments random instances samples instances plots report mean cpu time seconds 
setting parameters minimaxsat evaluate order importance techniques inside mini maxsat lower bounding soft probing branching heuristics learning backjumping 
starting basic version guides search jeroslow branching heuristic rest techniques deactivated analyze 
analysis studies technique incorporates previously analyzed ones corresponding tuned parameters 
experiments consider little challenging instances generated randomly lower bounding plays fundamental role solve 
consider structured instances learning backjumping required solve 
lower bounding experiment analyze impact resolution lower bounding versus lower bounding combined strategies 
considered combination techniques sup detects inconsistency refutation tree computed look resolvent maximum size 
size equal parameter resolution lower bounding applied lower bounding applied 
tested 
note corresponds pure lower bounding similar approach li corresponds pure resolution lower bounding 
results 
seen pure lower bounding worst option 
better results obtained increases 
improvement stops nearly stops 
significant improvement noticed 
plot omits case clarity reasons 
higher values may produce new clauses higher size may cause overhead instances set rest experiments 
cpu time max sat variables inf number clauses cpu time heras larrosa cpu time max cut nodes inf max sat variables inf number nodes number clauses performance minimaxsat different mixed lower inf 
soft probing second experiment evaluate impact soft probing 
preliminary experiments observed soft probing time consuming decided limit soft probing follows 
initially assign propagation level variable probe 
new literal propagate assigned propagation level literal produces propagation level limited probing propagate literals maximum propagation level restricted gives best results 
note propagation level decision level 
compare alternatives probing node search probing pre process search probing 
results indicates probing search worst option max sat max sat produces improvement max cut 
probing preprocessing gives slightly improvement max sat best results max cut 
note soft probing preprocessing max sat effect omitted plot results similar 
results decided include soft probing preprocessing 
jeroslow branching heuristic experiment evaluate importance weighted jeroslow heuristic 
shows time difference minimaxsat jeroslow heuristic previous experiments jeroslow heuristic 
results indicates guiding search jeroslow heuristic gives important speed ups 
maintain jeroslow heuristic minimaxsat 
cpu time minimaxsat efficient weighted max sat solver max sat variables number clauses cpu time cpu time max cut nodes number nodes max sat variables number clauses performance minimaxsat soft probing probing preprocessing probing search 
learning backjumping final experiment evaluate importance learning backjumping 
experiments structured instances known learning backjumping useful type problems 
evaluate importance heuristic combination learning backjumping 
recall heuristic specially designed cooperation learning meaningless analyze effect 
table reports results experiment 
third column reports results learning backjumping lower bounding probing jeroslow heuristic 
fourth column reports results adding learning backjumping previous version learning 
fifth column reports results adding learning backjumping changing jeroslow heuristic heuristic 
results show minimaxsat learning backjumping clearly worst option 
significant improvements obtained learning backjumping learning added 
adding heuristic improve results specially routing instances 
results incorporated learning backjumping minimaxsat 
regarding branching heuristic problems literals appear hard clauses polarities applies heuristic jeroslow heuristic computed root search tree stated section 
choice done starting search 
cpu time max sat variables jeroslow number clauses cpu time heras larrosa cpu time max cut nodes jeroslow max sat variables jeroslow number nodes number clauses performance minimaxsat heuristic jeroslow heuristic computed root node search tree jeroslow 
problem inst 
learning max col max cnt max dp max routing routing structured instances 
comparison boolean optimizers reporting results omit solver deal corresponding instances technical reasons deal weighted clauses performs extremely bad comparison 
contains plots results different benchmarks 
plots reports results random unweighted max sat instances 
pueblo minisat orders magnitude slower included graphics 
max sat plot minimaxsat lays max dpll maxsatz best option 
max sat plot minimaxsat clearly outperforms max dpll close maxsatz best 
max sat max sat maxsatz times faster minimaxsat 
minimaxsat efficient weighted max sat solver plot reports results random max cut instances 
minimaxsat performs slightly better maxsatz second alternative 
random max plot minimaxsat best solver far 
instances solved instantly pueblo max dpll require seconds difficult instances 
minisat performs poorly 
results structured max instances reported 
minisat fastest general 
minimaxsat close performance pueblo 
note instances minimaxsat system solving instances 
plot reports results random max clique instances 
minimaxsat best solver order magnitude faster max dpll second best option 
pueblo minisat perform poorly 
regarding structured dimacs instances minimaxsat best option 
solves instances time limit max dpll minisat pueblo solve respectively 
plots results combinatorial auctions different distributions 
paths distribution minimaxsat best solver twice faster max dpll ranks second 
regions distribution minimaxsat best solver max dpll second best solver requiring double time 
paths regions distributions pueblo minisat perform poorly 
scheduling distribution minisat best solver minimaxsat max dpll order magnitude slower 
results regarding unsatisfiable dimacs instances 
note instances optimum cost 
soon minimaxsat find solution cost clauses declared hard learning backjumping applied hard conflicts arise 
results indicate maxsatz max dpll solve instance sets aim minimaxsat solves sets instances best times hole instances maxsatz slightly faster 
encode problems advantageous way pueblo minisat decision problems optimization problems solve instances similar times minimaxsat 
planning instances fig 
pueblo best solver 
minimaxsat second best solver toolbar third minisat 
surprising toolbar perform learning hard constraints 
results regarding graph coloring instances fig 

observed minimaxsat able solve instance toolbar pueblo minisat solve instances 
max csp problems fig 
toolbar solves instances instantly pueblo worst option unable solve lot instances 
minimaxsat clearly second best solver minisat third best performing solver 
note solve instances 
results regarding instances taken pseudo boolean evaluation 
note time max sat solver tested pseudo boolean instances 
results indicate solver consistently outperforms minimaxsat fairly competitive pueblo minisat 
results conclude minimaxsat robust weighted max sat solver 
competitive pure optimization problems problems lots hard clauses best option 
final note minimaxsat previous benchmarks submitted second max sat evaluation located event tenth international conference theory applications satisfiability testing 
interested reader find cpu time cpu time cpu time cpu time max sat variables max dpll minimaxsat maxsatz number clauses max cut nodes max dpll maxsatz minimaxsat number edges max clique nodes minisat pueblo max dpll minimaxsat connectivity auctions scheduling goods pueblo max dpll minimaxsat minisat number bids heras larrosa cpu time cpu time cpu time cpu time max sat variables max dpll minimaxsat maxsatz number clauses max random sat variables minisat pueblo max dpll minimaxsat number hard clauses auctions paths goods pueblo minisat max dpll minimaxsat number bids auctions regions goods minisat pueblo max dpll minimaxsat number bids plots different benchmarks 
note order legend goes accordance performance solvers 
exhaustive comparison including instances solvers second max sat evaluation web page results evaluation showed minimaxsat best performing solver existing categories 

www maxsat es minimaxsat efficient weighted max sat solver problem inst 
minimaxsat maxsatz max dpll dubois hole aim aim aim unsatisfiable dimacs instances 
problem inst 
minimaxsat pueblo minisat col col col col cnt dp structured max instances 
problem inst 
toolbar minimaxsat pueblo minisat planning graph coloring max csp dl max csp dt max csp sl max csp st 
related results max csp instances 
previous done incorporating sat techniques inside max sat solver 

lazy data structure detect clauses unit requires static branching heuristic 
test different versions branch bound procedure 
versions uses watched literals uses basic lower bounding 
conclude previous approaches general watched literals 
far know rest max sat solvers adjacency lists 
presumably inefficient unit propagation silva par heras larrosa problem inst 
minimaxsat pueblo minisat misc logic synthesis mpi mps routing results pseudo boolean instances 
presence long clauses 
enhance max sat branch bound procedure learning hard constraints combination simple lower bounding techniques 
improved version powerful lower bound incorporate watched literal scheme backjumping best knowledge max sat solver incorporates backjumping 
note minimaxsat restricts backjumping occurrence hard conflicts 
related works integration backjumping techniques branch bound include meisels weighted csp silva pseudo boolean optimization nieuwenhuis sat modulo theories 
max sat solvers variations call lower bounding 
cases search special patterns mutually inconsistent subsets clauses shen zhang xing zhang 
efficiency reasons patterns restricted small sets small arity clauses clauses arity 
mini maxsat uses natural weighted extension approach proposed li 

able detect inconsistencies arbitrarily large sets arbitrarily large clauses 
idea call resolution lower bounding inspired domain larrosa larrosa schiex de proposed max sat context larrosa heras developed li 
heras larrosa larrosa 

works special patterns fixed size resolution trees executed 
simulated unit propagation allows minimaxsat identify arbitrarily large resolution trees 
example inconsistent subsets clauses detected minimaxsat transformed equivalent formula previous solvers transform limited specific patterns case minimaxsat replaces clauses min set compensation clauses 
second case minimaxsat replaces min set compensation clauses 
cases equivalence preserved 
solvers literature detect inconsistent subset clauses transform problem equivalent li simply detect heras larrosa 
probing method derive weighted unit clauses related res cycle rule heras larrosa larrosa 
failed literals li 
minimaxsat efficient weighted max sat solver singleton consistency csp bessi re 
simulated unit propagation allows minimaxsat identify arbitrarily large resolution trees 

minimaxsat efficient robust max sat solver deal hard soft clauses pseudo boolean functions 
incorporates best available techniques type problems performance similar best specialized solver 
development minimaxsat combining time known techniques different fields main original contribution novel lower bounding technique resolution 
minimaxsat lower bounding combines clean elegant way approaches proposed years mainly unit propagation lower bounding resolution problem transformation 
information provided propagation queue determine subset inconsistent clauses ii determine simple ordering resolution applied increase lower bound generate equivalent formula 
necessarily best ordering 
easy see different orderings may generate resolvents compensation clauses different arities 
selects ordering generates smallest resolvents compensation clauses resulting formula may presumably simpler 
concerns study orderings development heuristics soft clauses backjumping techniques soft conflicts 
acknowledgments niklas niklas making minisat code publicly available 
grateful anonymous referees helpful suggestions improving 
partially supported spanish ministry education science projects tin heras larrosa tin 
planes 

improved exact solvers weighted max sat 
proceedings sat vol 
lncs pp 

springer 


exact max sat solvers constrained problems 
heuristics 


learning hard constraints max sat 
proceedings vol 
lncs pp 

springer 


partial max sat solvers clause learning 
proceedings sat vol 
lncs pp 

springer 
barth 

davis putnam enumeration algorithm linear pseudo boolean optimization 
research report mpi max planck institut informatik im stadtwald saarbr cken germany 
li stallman 

role skeptic agent testing benchmarking sat algorithms 
proceedings sat pp 

heras larrosa buro ning 

report sat competition 
bulletin european association theoretical computer science 
cha miyazaki 

local search algorithms partial maxsat 
proceedings aaai pp 

mit press 
cooper blanc de 

soft arc consistency applied optimal planning 
proceedings cp vol 
lncs pp 

springer 
davis logemann loveland 

machine program theorem proving 
communications acm 
de heras larrosa 

existential arc consistency getting closer full arc consistency weighted csps 
proceedings th ijcai pp 

professional book center 
de larrosa meseguer schiex 

solving max sat weighted csp 
proceedings cp vol 
lncs pp 

springer 
bessi re 

practicable filtering techniques constraint satisfaction problem 
proceedings pp 

morgan kaufmann 


extensible sat solver 
proceedings sat vol 
lncs pp 

springer 


translating pseudo boolean constraints sat 
journal satisfiability boolean modeling computation 
fahle 

simple fast improving branch bound algorithm maximum clique 
proceedings esa vol 
lncs pp 

springer 
freeman 

improvements propositional satisfiability search algorithms 
ph thesis university pennsylvania 
fu malik 

solving partial max sat problem 
proceedings sat vol 
lncs pp 

springer 
heras larrosa 

new inference rules efficient max sat solving 
proceedings th aaai 
aaai press 
jeroslow wang 

solving propositional satisfiability problems 
annals mathematics artificial intelligence 
leyton brown shoham 

universal test suite combinatorial auction algorithms 
proceedings acm conference electronic commerce pp 

karloff zwick 

approximation algorithm max sat 
focs pp 

larrosa heras 

resolution max sat relation local consistency weighted csps 
proceedings ijcai pp 

professional book center 
larrosa heras de 

logical approach efficient max sat solving 
artificial intelligence 
appear 
minimaxsat efficient weighted max sat solver larrosa schiex 

quest best form local consistency weighted csp 
proceedings th ijcai pp 

larrosa 

node arc consistency weighted csp 
proceedings aaai pp 

aaai press 
le 

exploiting real power unit propagation lookahead 
proceedings lics workshop theory applications satisfiability testing 
le 

sat project max sat 
www sat org 
li planes 

exploiting unit propagation compute lower bounds branch bound max sat solvers 
proceedings cp vol 
lncs pp 

li planes 

new inference rules max sat 
journal artificial intelligence research 
appear 
li planes 

detecting disjoint inconsistent subformulas computing lower bounds max sat 
proceedings th aaai 
aaai press 
silva 

probing preprocessing techniques propositional satisfiability 
proceedings pp 

ieee computer society 
silva 

efficient data structures backtrack search sat solvers 
ann 
math 
artif 
intell 
silva 

satisfiability algorithms boolean optimization 
ann 
math 
artif 
intell 
moskewicz madigan zhao zhang malik 

chaff engineering efficient sat solver 
proceedings dac pp 

acm 
nieuwenhuis 

sat modulo theories optimization problems 
proceedings sat vol 
lncs pp 

springer 
papadimitriou 

computational complexity 
addison wesley usa 
sandholm 

algorithm optimal winner determination combinatorial auctions 
proceedings ijcai pp 

morgan kaufmann 
sakallah 

pueblo hybrid pseudo boolean sat solver 
journal satisfiability boolean modeling computation 
shen zhang 

study lower bounds max sat 
proceedings aaai pp 

aaai press mit press 
silva sakallah 

grasp new search algorithm satisfiability 
iccad pp 

smyth hoos st tzle 

iterated robust tabu search max sat 
proceedings ai vol 
lncs pp 

springer 
hoos 

implementation experimentation environment sls algorithms sat max sat 
proceedings sat vol 
lncs pp 

springer 
walsh 

sat csp 
proceedings cp vol 
lncs pp 

springer 
heras larrosa xing zhang 

efficient exact algorithm weighted maximum satisfiability 
artificial intelligence 
zhang madigan moskewicz malik 

efficient conflict driven learning boolean satisfiability solver 
proceedings iccad pp 

meisels 

conflict directed backjumping 
proceedings ijcai pp 


