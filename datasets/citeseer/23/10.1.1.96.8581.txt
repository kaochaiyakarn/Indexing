structured overlay multi dimensional range queries thorsten sch tt florian alexander zuse institute berlin 
introduce sonar structured overlay store retrieve objects addressed multi dimensional names keys 
overlay shape multi dimensional torus node responsible contiguous part data space 
uniform distribution keys data space necessary denser areas get assigned nodes 
support logarithmic routing sonar maintains dimension fingers nodes span exponentially increasing number nodes 
overlays maintain fingers key space require uniform data distribution 
sonar contrast avoids hashing able perform range queries arbitrary shape logarithmic number routing steps independent number system query dimensions 
sonar needs just hop updating entry routing table longer finger calculated querying node referred shorter finger shorter finger 
doubles number spanned nodes leads exponentially spaced fingers 
efficient handling multi dimensional range queries internet scale distributed systems open issue 
approaches exist lookup schemes expensive space filling curves probabilistic approaches consistent hashing build overlay 
propose system storing retrieving objects dimensional keys peer peer network 
sonar structured overlay network arbitrary range queries directly maps multi dimensional data space ddimensional torus 
supports range queries arbitrary shape useful example geo information systems objects distance position sought 
sonar employed internet games millions online players concurrently interact virtual space need quick access local surroundings avatars 
broader context sonar employed hierarchical publish subscribe system published events categorized independent attributes 
category published events addresses data point dimensional space consumers subscribing subareas receive events published subarea 
part carried projects funded european commission 
organized follows discuss related 
section introduce sonar 
section empirical results section conclude brief summary 
related systems proposed support complex queries multidimensional keys ranges 
split groups 
space filling curves 
systems locality preserving spacefilling curves map multi dimensional dimensional keys :10.1.1.131.6291
provide efficient range queries space partitioning schemes described single range query may cover parts curve queried separately fig 

chawathe performance results real world application curves top opendht 
query performance sec 
nodes low due layered approach 
space partitioning 
schemes space partitioning split key space nodes 
sonar belongs group systems 
proposed systems mainly differ routing strategies 
dhts 
hashes key space multidimensional torus 
topology resembles sonar murk see uses just neighbors routing support range queries 
employs voronoi space partitioning scheme uses small world graph overlay routing tables size 
overlay built regular partitioning scheme kd tree uses sample technique place fingers 
multi attribute range queries addressed mercury needs large number replicas item achieve logarithmic routing performance 
sword uses super peers query caching allow multi attribute range queries top bamboo dht 
ganesan proposed systems multi dimensional range queries peer peer systems scrap murk 
scrap uses traditional approach mapping multi dimensional dimensional data space filling curves destroys data locality 
consequently single multi dimensional range query mapped dimensional queries 
murk similar approach divides data space partition assigned node 
contrast sonar murk uses heuristic approach skip graphs set routing fingers 
system design overlay topology sonar discuss routing lookup strategy 
mechanisms sonar robust churn 
fig 
example dimensional overlay attribute domains 
sonar store retrieve objects 
works dimensional torus key space 
objects name key vector components attributes key 
dimension torus responsible attribute domain 
illustrates dimensional key space 
arbitrarily located computers nodes responsible dedicated area key space overlay rectangles fig 

node space extent key space completely filled nodes 
nodes node space adjacent neighbors keyspace adjacent 
direct mapping key space node space guarantees adjacent keys stored adjacent nodes enables efficient range queries node boundaries local query propagation 
nodes dynamically assigned key space node serves roughly number objects 
load balancing done changing responsibility nodes moving objects key space 
necessary number objects nodes system changes sect 

overlay topology illustrated dimensional key space covered rectangles containing number objects 
keys generally uniformly distributed rectangles different sizes may neighbor direction 
neighbors stored neighbor lists dimension 
overlay described far resembles hashing prevents efficient range queries 
consequently sonar need network hops just neighbors routing 
introduce routing tables achieve logarithmic routing performance 
routing routing sonar uses separate routing tables dimension 
routing table contains fingers spanning exponentially increasing number nodes node successors nodes adjacent markers 
fig 
routing table dimensional case fig 

total log routing fingers average number hops reduced log 
calculate th finger routing table node looks th finger asks remote node listed th finger 
lowest level fingers point successor 
finger successor finger update process works running system startup 
initially fingers set unknown finger successor 
filling second entry succeed successor knows successor 
filling entries may fail result unknown remote node may determined corresponding entry 
subsequent periodic updates eventually nodes get entries filled 
resulting structure similar skip lists behavior deterministic 
successor routing 
node may neighbor direction 
define node adjacent middle respective side successor 
successors marked small ticks 
due different box sizes calculation longer fingers shorter ones fingers necessarily straight direction 
slight deviations direction occur fingers direction vice versa shown 
empirical results indicate affect logarithmic routing performance sect 

calculates entries routing table void int dim int bool done false rt dim successor dim done node candidate rt dim dim dim rt dim key candidate key key rt dim candidate done true checks resp coordinate pos lies start bool dim dim key start key pos key fig 
finger calculation dimension dim 
routing table size 
node holds approximately log fingers routing tables 
knowing total number nodes fingers node put routing table total log 
mercury predicts system size estimating key density 
sonar uses simpler deterministic solution overhead 
dimension dim sonar finger update algorithm fig 
inserts additional finger finger long position routing table entry finger node 
new finger circles ring inserted 
results section confirm node holds log fingers 
construction process guarantees contrast chord fingers point node 
fingers routing tables span exponentially increasing number nodes routing table dimension total log entries average number nodes direction torus 
cost finger update 
periodically running finger update algorithm needs just network hop determine entry routing table 
chord contrast needs log operation performs dht lookup calculate finger 
lookup range queries dhts sonar uses greedy routing 
node finger maximally reduces euclidean distance target key space followed independently dimension see fig 

sonar supports range queries multiple attributes 
basic form range query defined intervals attribute domains 
find responsible node key node find point target node nexthop target nexthop return return nexthop find target double node point node point target node candidate double distance target distance target return int dimensions int rt size double dist rt target dist distance new candidate candidate rt distance dist happen assert candidate return candidate fig 
lookup target 
range query finds keys attributes match respective intervals returns corresponding objects 
shape range queries called dimensional rectangular range queries 
practice users need define circles polygons polyhedra queries 
illustrates dimensional circular range query defined center radius 
assume person located governmental district berlin searching hotel walking distance circle person 
query routed node responsible center circle forwarded neighbors partially cover circle fig 

query checked local data results returned requesting node 
shows pseudocode algorithm 
note redundant messages eliminated 
op additional check objects queried area case type hotel 
sonar performs range query single lookup 
target node hold complete key range query locally forwarded 
systems space filling curves contrast usually require lookup single range query map connected areas multiple independent line segments see 
curve line segments log neighborhood broadcast log fig 
circular range query 
perform range query void range operation op node center find center center op newid void range operation op id id avoid redundant executions contains id return add id foreach node neighbor neighbors neighbor range neighbor range op id execute operation locally op fig 
range query algorithm 
topology maintenance handle churn node join 
node joins system key space participating node split key responsibilities subdivided 
achieve things done describe random splitting include load balancing 
select random target node random position key space routed random walk started 
final target node candidate split 
random walk ensures nodes responsible larger areas key space preferred smaller ones 

split key space transfer part new node splits parallel coordinate system axes 
selection axis split strictly favor dimension number nodes contacted range query disproportionately high large interval favored dimension specified query 
node leaves expensive 
node leave 
handling leaving node difficult obvious node fill area leaving node 
example area node merged neighbors result non rectangular node space 
node space constructed way splitting plane forms kd tree 
kd trees topology maintenance similar murk index structures database systems 
space leaving node taken neighboring node sibling kd tree 
keeping tree balanced probability having sibling neighbor increases 
node remember position kd tree bit string describing path root tree node 
neighboring nodes siblings kd tree node fill gap 
neighboring node additionally takes responsibility separate area free node completely independent nodes siblings kd tree merge free node takes free area 
concept called virtual nodes load balancing systems 
load balancing 
load balancing implemented adjusting boundaries responsibilities locally freeing nodes underloaded areas moving overloaded areas 
similar issues node leave boundaries interlocked limited room adjustments 
shown converging predictable performance 
balancing different metrics load object query load combination 
avoid thrashing effects threshold performing load balancing round introduced 
empirical results testing performance sonar traveling salesman data set cities cities geographical locations follow zipf distribution common scenarios 
assigned responsibility nodes recursively splitting key space longer side part gets half cities rectangles created 
shows sample splitting nodes 
coordinates mapped doughnut shaped torus globe globe vertical rings meet poles 
www tsp gatech edu world fig 
cities split evenly rectangular nodes 
avg hops nodes routing table size routing table size log number nodes fig 
sonar results increasing system sizes dimensional 
cause routing bottleneck poles result different ring directions western eastern hemisphere vs 
shows results various searches networks different sizes 
routing performance depicted ticks perfectly matches expected log hops 
larger networks expected value slightly deviates 
checked number fingers routing tables calculated global information fig 
meets expectations 
ticks give routing table sizes horizontal direction ticks represent sizes vertical direction 
expected graphs frequency nodes nodes nodes nodes nodes routing table size deviation fig 
routing table size deviation expected value 
slope log lies consistently 
attributed different domain sizes coordinate system versus degrees uneven number splitting planes 
gives insight characteristics sonar routing tables 
shows various network sizes deviation table sizes expected size log denoted 
seen pattern applies network sizes tables contain extra entry meet expected size log decreasing number tables fewer entries 
deviations caused uneven key distribution sonar finger update algorithm tendency insert cases extra finger halfway ring left node 
sonar efficiently supports range queries multi dimensional data structured overlay networks 
needs log routing steps processing arbitrary shapes arbitrary number attribute domains 
finger calculation needs just hop updating entry routing table 
empirical results zipf distributed data set approximately keys 
results confirm sonar routing logarithmic number hops skewed data distributions 
additional tests practical uniform distributions shown gave logarithmic routing performance 
furthermore observed sizes distributed routing tables log autonomously maintained nodes local information 
anonymous reviewers valuable comments 
topographic images taken blue marble generation project nasa earth observatory 
street map berlin 

aberer haridi hauswirth 
essence architecture overlay networks 


xu 
scalable efficient range queries grid information services 


aspnes shah 
skip graphs 
soda jan 

shahabi 
family access methods similarity search peer peer data networks 
cikm nov 

bentley 
multidimensional binary search trees associative searching 
communications acm vol 


bharambe agrawal seshan 
mercury supporting scalable multiattribute range queries 
acm sigcomm aug 

chawathe ratnasamy lamarca shenker hellerstein 
case study building layered dht applications 
sigcomm aug 

gaede nther 
multidimensional access methods 
acm computing surveys 

ganesan yang garcia molina 
torus rule multidimensional queries systems 
webdb 

karger lehman leighton levine lewin 
consistent hashing random trees distributed caching protocols relieving hot spots world wide web 
acm sympos 
theory comp may 

karger ruhl 
simple efficient load balancing algorithms peer peer systems 
iptps feb 

oppenheimer albrecht patterson vahdat 
design implementation tradeoffs wide area resource discovery 
th ieee symposium high performance distributed computing hpdc jul 

pugh 
skip lists probabilistic alternative balanced trees 
communications acm june 

ratnasamy francis handley karp shenker 
scalable network 
acm sigcomm aug 

rhea geels roscoe kubiatowicz 
handling churn dht 
proceedings usenix annual technical conference jun 

schmidt 
enabling flexible queries guarantees systems 
ieee internet computing may june 

sch tt 
structured overlay consistent hashing empirical results 
gp pc may 

stoica morris kaashoek karger balakrishnan 
chord scalable peer peer lookup service internet application 
acm sigcomm aug 

zipf 
relative frequency determinant phonetic change 
harvard studies classical 
