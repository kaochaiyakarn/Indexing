compressed perfect embedded skip lists quick inverted index lookups paolo boldi sebastiano vigna dipartimento di scienze dell informazione universit degli studi di milano draft large inverted indices common construction web scale search engines 
faster access inverted indices indexed internally possible skip quickly unnecessary documents 
classical approach skipping dictates skip positioned document pointers number documents term appears 
argue due growing size web refined techniques necessary describe embed compressed perfect skip list inverted list 
provide statistical models explain empirical distribution skip data observe experiments devise compression techniques allow limit waste space resulting data structure increases index size just percents making possible index pointers fine granularity 
inverted indices commonly techniques organise large document collections 
provide high speed access sets documents satisfying queries subsequently ranked returned user 
properly built extremely compact :10.1.1.51.7802
birth web search engines brought new challenges traditional inverted index techniques 
particular eager term time query evaluation replaced lazy document time query evaluation 
case inverted list terms query computed usually choosing rarest term merged filtered lists :10.1.1.51.7802
evaluation lazy inverted lists scanned parallel retrieving sequence document satisfying query 
approach essential large document collections actual number documents retrieved guessed usually statistical approach documents reordered partially supported mega universit degli studi di milano 
kind static ranking scan documents satisfying query stopped soon documents retrieved 
lazy evaluation requires keeping constantly sync inverted lists 
perform operation efficiently essential skip method available allows caller quickly reach document pointer larger equal 
classical solution problem embedding skipping information inverted list regular intervals additional information describe skip pair document pointer number bits skipped reach pointer 
analysis skipping concludes skips spaced ft ft frequency term number documents containing level skip sufficient purposes 
abovementioned analysis important limitations 
contemplate presence positions description exact position occurrence term document necessary evaluate proximity application dependent additional data result estimate cost skipping document record severely underestimated second fundamentally eager evaluation extended lazy evaluation 
lazy evaluation necessary easier ranking especially long complex queries arise automated query preprocessing new techniques applied inverted indices document sampling require skips generated random source 
case difficult predict usage pattern skip methods 
motivated reasons going generic method self index inverted lists fine level granularity 
method assumption structure document record usage pattern inverted index 
skips pointer amount pointers performed logarithmic number low level reads bit level skips size index grows just percents sophisticated analysis skip structure eliminates redundant information predicts high precision remaining data compression techniques reduce space occupied skip structure 
techniques particularly useful memory indices indices kept core memory happens instance google computational cost retrieving document scanning decoding inverted lists opposed disk access time compression ratio essential 
results described implemented mg full text indexing engine available free software athttp mg dsi unimi 
perfect embedded skip lists inverted indices inverted indices 
inverted indices basic tool querying textual document collections 
consider collection documents documents numbered document seen sequence term occurrences 
inverted index collection data structure inverted list term 
inverted list term contains item called posting document appears increasing order document item contains document pointer number ft data data data data data inverted list skips 
document plus possibly additional data count number occurrences term document positions list integers representing positions term appears document number items contained inverted index term number documents occurs called frequency ft usually written inverted list 
graphical example shown 
inverted lists accessed sequentially purpose exactly retrieve sequence documents containing term usually trying match query inverted lists read merged 
introducing skips lists suggested may allow save time conjunctive queries skip useless postings 
skip structure embedded inverted list tell quickly skip performed counting number record read number integer read number jumps low level usually filesystem level calls skip number bits 
rest shall describe data structure natural evolution level skip described show structure compressed efficiently 
perfect skip lists 
skip lists data structure elements organised ordered list additional allow skip forward list needed 
precisely skip list singly linked list items 
xn items list increasingly ordered fixed order relation xn item xi appearing list contains item xi linked list item xi contains certain number hi extra called skip tower item th tower addresses item term taken mean memory address data structure programming literature usually called pointer 
unfortunately papers inverted indices pointer document number shall adhere tradition 
infinite perfect skip list tower really infinite 
searching skip list item scan tower top stopping pointing item smaller equal follow restart process current item larger items available 
skip lists probabilistic structure albeit deterministic versions exist parameter fixed height tower chosen tossing biased coin outcome positive 
probabilistic construction ensures structure updated dynamically maintaining logarithmic access time average 
additional fixed upper bound avoids excessively tall towers 
going describe perfect skip lists deterministic version skip lists suitable inverted lists 
probabilistic skip lists thought way represent search tree perfect skip list resembles complete binary search tree big advantage representation easily embedded inverted list high compression ratio apt sequential scanning 
sake simplicity start describing ideal infinite version perfect skip list 
lsb defined significant bit positive integer 
define height skip tower item xi hi lsb 
idealised version tower element infinite height able skip arbitrarily forward 
note choosing heights way find element logarithmic list size number steps 
fix limiting parameters number items list maximum height tower 
parameters fundamental actual implementation 
say finite skip list perfect height size 
tower contains 
exist infinite perfect skip list provided refer item index smaller equal violate requirement 
theorem perfect skip list items maximum height height tower element min lsb msb mod msb significant bit 
particular mod tower height min lsb means occasionally pointing just list 
mod tower height min lsb msb mod 
proof 
requirements perfect skip list claim item level lsb 
second inequality easily turned msb 
notice lsb lsb lsb trailing zeroes binary expansion reason lsb lsb 
conclude min lsb min lsb claim 
mod conclude msb mod msb msb tower height lsb called truncated height strictly smaller height infinite list particular tower truncated 
addressing directly pointers inverted list create unmanageable indices 
shall index item fixed quantum represents minimally addressable block items 
summarising perfect skip list quantum maximum height described follows items appearing list logically grouped left right blocks elements block may contain elements case called defective block items index multiple non empty skip tower item appearing position kq 
non defective block contains skip tower height min lsb th tower 
addresses item appearing items ahead item block item block virtual item appearing immediately list defective block items height skip tower kq 
min lsb msb note particular kq items tower 
shows perfect skip list items case block contains items example shows non defective block items defective block items 
perfect skip list items andh exist truncated minimisation msb 
line show values second line bit binary expansion defective block binary expansion shown 
block inverted list skips 
embedding skip lists inverted indices problem deal trying embed skip lists inverted index want access data strictly sequential manner search algorithm described adopted directly store bit offset referenced item pointer contained 
reader see portion inverted list skips example shows single block containing exactly item plus block 
item document pointer 
data section represented light grey small rectangle 
skip tower appears document pointer data section dark grey 
tower entries written top tower entry starts indication bit length forthcoming tower 
entry refers item appearing list contains pointer skip referenced pointer bit skip number bits skipped move referenced pointer precisely number bits tower point just referenced pointer 
block write extra items quantum bit length average length quantum bits forthcoming block excluding space occupied skip towers entry bit length average length tower entry bits forthcoming block 
tower entries written starting top principle replicate exactly standard skip list scanning algorithm 
searching climb phase reach highest tower pointing block jump phase skip entire blocks climb phase reach quantum possibly containing climb climb phases require record reads integers reads jumps height tower list know tower lengths read part tower interested block jump phase requires ft integer reads ft jumps 
particular maxt ft block jump phase occur case number record read bounded number integer read log ft number jumps log ft 
representing compressing skip lists reasonable quantum perfect skip list requires significant amount space stored raw form 
section show reduce space drastically 
pointer skips 
consider document collection documents term appears frequency number documents term appears ft relative frequency pt ft bernoulli model term considered appear independently document probability pt :10.1.1.51.7802
result random variable gt representing gap document pointers difference consecutive document pointers containing term distributed follows pt pt pr gt 
words gt random variable geometric distribution 
define pointer skip level term difference pointer containing term pointer appearing position inverted list denote random variable representing pointer skip level term st clearly st sum random variables gt st negative binomial distribution parameters pt 
interested reasonably large values approximate normal distribution mean pt standard deviation pt pt exactly mean standard deviation st 
words st pt pt pt represents usual normal distribution parameters approach just store difference mean expect distributed normally suitable universal code 
experiments show problems approach 
problem bernoulli model model perfect particular actual document collections may sport correlation adjacent documents 
lack truncation geometric distribution application central limit theorem say discrete variable approximated normal distribution mean pr dt 
nonnegative probability positive integer gap may larger tends empirical mean slightly smaller theoretical mean 
effect gaps noticeable visible high level skips 
contrary theoretical empirical variances agree 
minimise inaccuracies suggest predict top pointer skip tower bernoulli model predict remaining pointer skips halving model pointer skip level stored difference skip level contains divided 
differences distributed 
just comparing arbitrary skips different level variables independent resulting random variable st st case larger skip comprises smaller skip actual distribution st st st st st st distributed st resulting mean independent case resulting variance pt pt smaller 
gaussian golomb codes 
left problem coding integers normally distributed 
contrarily happens geometric double sided geometric distributions simple instantaneous code normal distribution 
faced task encoding skips resort approximation huffman coding course question 
precisely shall compute approximately best golomb code normal distribution 
course optimal code distribution shall see losing correct parameter golomb code approximated easily closed form 
recall encoded golomb code modulus unary zeroes followed followed minimal binary coding mod :10.1.1.51.7802
need code numbers shall map 
define recall definition error function erf dt 
going approximate expected length golomb coding modulus applied integers dx dx represents number bits required encode natural number golomb code modulus denotes rounding function 
dropping rounding avg 
length loss vs optimal loss vs entropy gain coding table comparison average lengths golomb codes various normal distributions 
approximating log minimise sum integrals log dx differentiating get ln dx dx dx ln dx ln ln value expressions zero ln ln erf log dx 
erf dx ignoring multiplicative factor second summand yields simpler equivalent ln 
shows predictions reader verify practically indistinguishable optimal value computed experimentally 
table show empirical comparison average length produced bit skips 
strategy follow bit skips absolutely analogous pointers important difference difficult model correctly distribution bit skips 
remember considering indices containing arbitrary data document pointers occurrence list means number bit skips may depend variables number occurrences term document 
possible specific situations regular document collections indices predictable data blocks analysis carried success leave 
presently suggest preview scheme similar document pointers coupled universal code viable solution 
optimal optimal value golomb modulus integers distributed varying computed experimentally plotted analytic predictions 
precisely explained section block index contains number bits consumed average quantum block number bits consumed average tower entry 
skip level skip quanta occupy bits average plus space occupied skip entries 
bit skip specifies number bits current tower entry level tower entries towers entries towers entries entries occupying bits 
summarising expected number bits skip level top skips stored difference quantity code 
skips lower levels technique adopted pointers bit skip level predicted bit skip level reducing dividing result inherited towers remarked previous sections part tower greater variance difficult compress tower top 
strange goal avoid writing tower tops 
usage pattern inverted list sequence reads skips start document pointer possibly reach list 
perfect skip lists accelerate process introduce data necessary 
assume shall read inverted list start necessary want compress docu ment pointers possible maintain inherited tower represent skip knowledge gathered far 
instance top entry tower block remains valid block length points block just update entry move block 
idea resembles search fingers skip lists adapt assume direct access skip backwards list 
read tower entry keep entry updating pointer bit skips read entry level see 
result climb phase longer necessary replaced scan inherited tower 
halves number jumps due climbing 
note inherited entries reach height block defective see right half 
supposing loss generality inherited towers positions middle quantum obviously identical available start quantum theorem highest valid entry inherited tower defective block length denotes bit bit exclusive 
msb proof 
assume 
inherited entry level exists position inherited tower containing entry level tower positioned mod entry exists larger equal non defective blocks inequality holds msb lsb entries inherited exist happen msb msb mod mod length block 
instance inherited tower position contain entry level msb 
need analytic form highest inherited entry available defective blocks 
letting mod inequation conditioning existence inherited entry level mod easily leads true msb denotes bit bit exclusive 
pleasant fact number means bound height inherited tower non defective blocks 
inherited tower entry point 
shown happen consecutive entries refer item 
precisely th level th level tower including inherited entries refer item iff mod mod mod mod note mod correct estimate pointed item non inherited entries case mod 
happens exactly bits th th computation leads fundamental observation non truncated tower highest entry inherits entry level identical top entry 
scanning list currently positioned element tower height inherited tower represented grey items inheriting bold 
block shown tower top elimination 
consequence lists traversed top entries non truncated towers omitted 
omission top entries halves number entries written observed start paragraph reduces skip structure size 
final form embedded perfect skip list shown 
writing blocks towers time explain block containing skip structure written 
writing inverted index data relative single block retained cache written block inverted list limiting parameter fundamental containing size cache kept core memory faster processing pointers block lengths necessary compute skip structure 
point know average quantum bit length know average number bits tower entry form recursion way skip towers coded depends length bits necessary code 
matter fact value need really average number bits entries value close certainly reduce space occupied skip towers prediction described section precise 
tentative value compute tower entries way write bit skip tower entry know exactly number bits specify predict formulae described section 
process compute number bits tower entry occupies average try compute series attempts stops soon number bits predicted coincides number bits written case upper bound number possible attempts 
value produced best compression ratio practise couple attempts necessary 
value fixed block written 
experimental data gathered statistics indexing partial snapshot taken uk domain containing gib parsed text index contained counts occurrences 
report preliminary date gathered disk indices investigation needed significantly larger collections testing disk memory indices 
document distribution snapshot highly skewed documents appeared crawl order 
adding embedded perfect skip list structure arbitrary tall towers caused increase size mib indexing ft elements caused increase 
compressing skip structures code gaussian golomb codes pointer skips caused increase pointer skip size respectively 
shows efficiency gaussian golomb codes quantum small due small footprint embedded skip list codes viable choice 
speed course core interests 
bookkeeping overhead skip lists increases average time required perform linear scan 
contrary tests performed synthetically generated queries disjunctive normal form show increase speed classical square root spaced approach 
compressed embedded perfect skip lists simple elegant way skip quickly inverted list 
small footprint provide access quantum 
research concentrate obtaining better codes highly skewed collection comprehensive set statistical tests realworld search engine queries comparisons advanced indexing systems described 
broder carmel 
sampling search engine results 
proc 
fourteenth international world wide web conference chiba japan 
acm press 
vo anh alistair moffat 
compressed inverted files reduced decoding overheads 
bruce croft alistair moffat van rijsbergen ross wilkinson justin zobel editors proceedings st annual international acm sigir conference research development information retrieval sigir pages new york city 
acm press 
ricardo baeza yates berthier ribeiro neto 
modern information retrieval 
addison wesley longman publishing boston ma usa 
solomon golomb 
sources maximize choice huffman coding tree 
inform 
control 
neri merhav marcelo weinberger 
optimal prefix codes sources sided geometric distributions 
ieee trans 
inform 
theory 
alistair moffat justin zobel 
self indexing inverted files fast text retrieval 
acm trans 
inf 
syst 
ian munro thomas robert sedgewick 
deterministic skip lists 
frances frederickson graham ron hochbaum johnson ellis kosaraju rao luby michael megiddo nimrod schieber vaidya pravin yao andy editor proceedings rd annual acm siam symposium discrete algorithms soda pages orlando fl usa 
siam 
william pugh 
skip list cookbook 
technical report umiacs tr univ maryland institute advanced computer studies college park college park md usa 
william pugh 
skip lists probabilistic alternative balanced trees 
commun 
acm 
turtle flood 
query evaluation strategies optimizations 
information processing management 
ian witten alistair moffat timothy bell :10.1.1.51.7802
managing gigabytes compressing indexing documents images 
morgan kaufmann publishers los altos ca usa second edition 
additional examples skip lists 

