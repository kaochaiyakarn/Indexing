preprocessing cvs data fine grained analysis thomas zimmermann saarland university saarbr cken germany tz acm org analyses version archives phase common preprocessing data 
preprocessing direct impact quality results returned analysis 
discuss essential preprocessing tasks necessary fine grained analysis cvs archives data extraction transaction recovery mapping changes fine grained entities data cleaning 
formalize concept sliding time windows show commit mails relate revisions transactions 
approaches map changes affected building blocks file functions sections 

papers analyzed version archives striking title version control system talk 

days cvs archives freely available sourceforge net 
provide lots information evolution software project changed 
data enables new analyses 
obvious analysis software evolution valuable input program analysis metrics 
approaches thing common preprocess data direct access cvs clients slow 
additionally important information accessible cvs files changed conjunction methods affected change 
essential fine grained analysis version archives function level 
focus preprocessing tasks performed analyses data extraction section lightweight fast approach mirror cvs information database 
restoring transactions analyses require information files changed peter wei gerber 
univ tt germany peter ku de tion 
section approaches restore transactions sliding time windows commit mails 
mapping changes entities cvs stores changes files 
analysis functions changes examined detail 
section presents extensible approach determines entities affected change file 
data cleaning transactions require special treatments analysis example large transactions result infrastructure changes 
merge transactions simply reproduce changes noise 
section discusses topics 
preprocessing prerequisite fast access cvs data 
data enriched additional information transactions fine granular changes 
section gives related section concludes 

data extraction goal preprocessing enable fast access content cvs archive 
common solution extracts data cvs repository mirrors database 
general depends analysis data needs extracted 
instance analyze software evolution interested including deleted files 
purpose analysis guide programmers related changes need existing files suggesting user change deleted files awkward :10.1.1.112.1518
case suffices extract subset files stored repository 
practice filtering performed analysis extraction 
extraction calls cvs log command root directory project extracted 
returns information files existed repository 
parse output illustrated store data appropriate tables obviously files directories stored 


data extraction information single revisions stored table revisions 
author log message stored table transactions step treat revision transaction section groups revisions transactions 
cvs user set symbolic names revisions 
symbolic names called tags frequently mark releases events 
table branches records branch points branch names 
information gathered different sections cvs log output see 
branch names symbolic names revision numbers contain zero jdk revision number 
branch prefix constructed removing zero example 
link section symbolic names branch point established hash map branch prefix keys 
note preprocessing steps done incrementally necessary preprocess data new revisions working repository 
determine new revisions approaches exist open source projects send email mailing list commit 
approach files track commits server side 
possibility get changed files client side cvs operation option summary cvs status operation 

restoring transactions cvs keep track files changed conjunction commit operation 
information required analysis determination logical coupling 
obvious solution consider changes developer log fixed time window sliding time window 
fixed vs sliding time window message time transaction 
term time inaccurate context usually commit operations take seconds minutes especially files involved 
practice approaches consider time candidates time interval fixed time windows restrict maximal duration transaction 
time interval begins checkin 
approach analysis cvs archives 
sliding time windows restrict maximal gap subsequent transaction 
time interval shifted checkin 
approach recognize transactions take longer complete duration time window 
approach originates programs cvs cl 
illustrates fixed time windows checkin part transaction visible time window drawn white 
shows sliding time window additionally considers time window slides 
transaction closed visible time window 
formally sliding time window seconds 
sorted time part transaction conditions hold author author log message log message 
time time sec additionally file part single transaction cvs allow commit revisions file time file file algorithm grouping transactions straightforward simply sort author checkin time log message 
iterate order time author log message differs ones previous checkin time window exceeded start new transaction 
experience sliding time windows superior fixed time windows deal transactions duration 
selection length time window fixed sliding depends analyzed project analysis 
time window chosen assumption long takes check largest file high network latency 
lengths time windows arbitrary range minutes 
approach chose seconds minutes plus buffer seconds 
buffer time window clash release cvs lock 
case continuation interrupted transaction considered new transaction 
time window gnu compiler collection gcc average duration transaction seconds maximal duration hour minutes time windows approximation restoring transactions cvs 
precise solution commit mails mails sent developer mailing lists commit 
mail contains timestamp modified files log message 
information straightforward relate files revisions transactions 
commit mails available open source projects gcc 

mapping changes entities cvs provides information files differences function changed 
analysis fine grained entities preprocessing step required revision compared predecessor changes mapped syntactic components files 
revision merge multiple predecessors get special treatment see section 
revision predecessors compared empty file 
fine grained changes computed diff tool light weight analysis creates building block files 
approach open source code documentation xml files diagrams 
change revision compute entities follows 
create mappings ei int entities source code lines entities light weight analysis counting brackets 
mapping revision called 
transaction dummy import prevent merge files 
map changes entities 
perform diff 
results lines affected change lines revision 

entities functions sections affected change respectively 
change revision 
changed entities added entities removed entities shows example algorithm 
revision decomposed building blocks example functions 
diff revisions calculated 
result create sets 


line mapped enclosing function sets created 
know function modified inserted 
approach weaknesses quality depends largely precision diff tool second determines changes lines exact source code positions 
rare cases approach recognizes changed entities 
precise expensive approach determines entities occur revisions 
compares source codes entities 
words diff operation pushed file level 
determine entities revision entities revision 

added entities removed entities 

entities may changed 
entity changed decided performing diff source code source code 
example algorithm determines function new appears revision 
compares function respective parts recognizes changed 
eclipse platform provides powerful extensible framework comparing files 
approaches described realized framework range class compares versions tokens 
approach traditional diff algorithm 
tokens created classes implementing interface lines class calculated differences returned list 
structure merge viewer class compares versions hierarchical structure returns delta tree describing change detail 
structure created implementation interface existing internal classes furthermore eclipse provides easy access java syntax trees facilitates analysis source code 
drawback features executed command line 

data cleaning previous sections described extraction data needed fine grained analysis 
issues call identifying noise appropriate cleaning special treatment 
large transactions result infrastructure changes merge transactions simply reproduce changes noise 
large transactions large transactions frequent real life 
examples openssl compare compare compare internal compare compare read decide internal classes 
jdt internal ui compare 
merges considered harmful change include filenames foo openssl files change functions ansi files log messages indicate files contained transactions changed infrastructure changes logical relations 
refer transactions noise get incorrect results analysis 
solution filter transactions size greater analysis 
upper bound depends examined software project 
merge transactions sophisticated kind noise merges branches 
cvs simply reproduces changes branch large transaction 
real life example taken gcc merge files shows smaller example branch transaction committed 
files changed merge point transaction contains changes branch 
merge transactions noise reasons contain unrelated changes second rank changes branches higher duplicated 
transactions account significant influence results 
transactions resulted merges identified 
depending analysis ignored get special treatment 
unfortunately cvs keep track revisions resulted merge 
michael fischer proposed heuristic detect revisions 
approach restricted merges main branch straightforward apply branches 
additionally revisions analyzing complete transactions 
analyzing transactions simplifies detection merges merge detected single file transaction probably merge 
automatic merge detection difficult realize large number existing merge policies 
example indicates development continue branches merge creating additional complexity heuristics 

related data extraction cvs covered tools available free daniel german mockus created tool extracts summarizes information cvs bug tracking databases 
dirk developed bloof extracts cvs log data database visualizes software evolution metrics 
michael fischer demonstrated populate release history database linking data cvs bugzilla 
combined approach features 
project considers additional data sources gail murphy 
link information cvs bugzilla developer mailing lists text similarity 
knowledge transaction recovery approaches covered detail harald gall daniel german mockus fixed time windows past sliding time windows previous 
commit mails restore transactions 
approaches considered finegrained changes harald gall james bieman analyzed relations classes 
previous applied approach section mined relations association rules functions sections fine grained building blocks :10.1.1.112.1518
michael fischer proposed algorithm detecting merges revisions release history database 
zou michael godfrey showed origin analysis detect merging splitting functions 
data cleaning neglected room improvement 

cvs archives contain lots information usually accessible clients 
data provides basis analyses mine additional knowledge 
cvs weaknesses slow loses information transactions fine grained changes merges 
preprocessing step required 
attempt collect formalize preprocessing tasks analyses version sourceforge net bloof sourceforge net archives 
hope facilitates upcoming research area provides fruitful base discussions 
acknowledgments 
project funded deutsche forschungsgemeinschaft ze 
stephan diehl richard andreas zeller anonymous msr reviewers gave helpful comments earlier revisions 
ball 
kim porter 
version control system talk 
icse workshop process modelling empirical studies software engineering 
whitehead 
identification software instabilities 
wcre pages 
bieman andrews yang 
understanding change proneness oo software visualization 
proc 
th international workshop program comprehension pages portland oregon may 

version management cvs dec 
www org docs manual 
murphy 
recommending pertinent software development artifacts 
proc 
th international conference software engineering icse pages portland oregon may 

process centric analytical processing version control data 

fischer gall 
analyzing relating bug report data feature tracking 
wcre 
fischer gall 
populating release history database version control bug tracking systems 
proc 
international conference software maintenance icsm amsterdam netherlands sept 
ieee 
fogel neill 
cvs cl pl cvs log message conversion script sept 
www com cvs cl 
gall jazayeri 
cvs release history data detecting logical couplings 
pages 
german mockus 
automating measurement open source projects 
proceedings icse workshop open source software engineering portland oregon usa may 
proc 
international workshop principles software evolution helsinki finland sept 
ieee press 
mansfield 
cvs feb 
www com 
miller myers 
file comparison program 
software practice experience nov 
mockus fielding 
case studies open source software development apache mozilla 
acm transactions software engineering methodology 
object technology international 
eclipse platform technical overview feb 
available www eclipse org 
des rivi res 
eclipse api may 
eclipse org articles article api eclipse rules html 
proc 
th working conference reverse engineering wcre victoria british columbia canada nov 
ieee 
zimmermann diehl zeller 
history justifies system architecture 
pages 
zimmermann wei gerber diehl zeller :10.1.1.112.1518
mining version histories guide software changes 
proc 
th international conference software engineering icse edinburgh scotland may 
zou godfrey 
detecting merging splitting origin analysis 
wcre 
