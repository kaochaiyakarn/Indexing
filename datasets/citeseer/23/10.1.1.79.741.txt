group nearest neighbor queries dimitris papadias shen tao department computer science hong kong university science technology clear water bay hong kong dimitris cs ust hk sets points group nearest neighbor query retrieves point smallest sum distances points consider instance users locations want find meeting point restaurant corresponding query returns data point minimizes sum euclidean distances 
assuming fits memory indexed tree propose algorithms finding group nearest neighbors efficiently 
second step extend techniques situations fit memory covering indexed non indexed query points 
experimental evaluation identifies best alternative data query properties 

nearest neighbor nn search oldest problems computer science 
algorithms theoretical performance bounds devised exact approximate processing main memory amn 
furthermore application nn search content similarity retrieval led development numerous cost models pm indexing techniques highdimensional versions problem 
spatial databases focused point nn query retrieves objects dataset closest usually euclidean distance query point existing algorithms reviewed section assume indexed spatial access method utilize pruning bounds restrict search space 
shahabi sks papadias deal nearest neighbor queries spatial network databases distance points defined length shortest path connecting network 
addition conventional point nn queries increasing interest alternative forms spatial spatio temporal nn search 
discover nn constrained area data space 
korn muthukrishnan km discuss department computer science city university hong kong tat chee avenue hong kong cs edu hk reverse nearest neighbor queries goal retrieve data points nearest neighbor specified query point 
korn kms study problem context data streams 
query moving steady velocity sr tp incrementally maintain nn query moves tps propose techniques continuous nn processing goal return results time 
develop various schemes answering nn queries moving objects 
overview existing nn methods spatial spatio temporal databases tp 
discuss group nearest neighbor queries novel form nn search 
input problem consists set pn static data points multidimensional space group query points qn 
output contains data point smallest sum distances points distance data point defined dist euclidean distance query point qi 
example consider database manages static facilities dataset 
query contains set user locations qn result returns facility minimizes total travel distance users 
addition relevance geographic information systems mobile computing applications search important domains 
instance clustering jmf outlier detection ay quality solution evaluated distances points nearest cluster centroid 
furthermore operability speed large circuits depends relative distance various components 
applied detect abnormalities guide relocation components 
assuming fits memory indexed rtree propose algorithms solving problem 
extend techniques cases large fit memory covering indexed query points 
rest structured follows 
section outlines related conventional nearest neighbor search top queries 
section describes algorithms case fits memory section case resides disk 
section experimentally evaluates algorithms identifies best depending problem characteristics 
section concludes directions 

related approaches relevant literature assume data points indexed tree 
proposed techniques applicable higher dimensions data partition access methods trees shows tree point set assuming capacity entries node 
points close space clustered leaf node 
nodes recursively grouped principle top level consists single root 
existing algorithms point nn queries trees follow branch bound paradigm utilizing metrics prune search space 
common metric mindist corresponds closest possible distance point subtree node shows mindist point nodes 
similarly mindist minimum possible distance points reside sub trees nodes 
points node extents corresponding tree example tree point nn query nn algorithm trees searches tree depth df manner 
specifically starting root visits node minimum mindist 
process repeated recursively leaf level node potential nearest neighbor 
backtracking upper level node algorithm visits entries minimum distance smaller distance nearest neighbor retrieved 
example discovering df backtrack root level visiting follow path actual nn 
df algorithm sub optimal accesses nodes necessary 
particular proven pm optimal algorithm visit nodes intersecting vicinity circle centers query point radius equal distance nearest neighbor 
instance optimal algorithm visit nodes df visits 
best bf algorithm hs achieves optimal performance maintaining heap entries visited far sorted mindist 
df bf starts root inserts entries mindist mindist mindist 
step bf visits node smallest mindist 
continuing example algorithm retrieves content inserts entries mindist mindist mindist 
similarly nodes accessed inserted visiting discovered current nn 
time algorithm terminates final result entry farther 
df bf easily extended retrieval nearest neighbors 
addition bf incremental 
reports nearest neighbors ascending order distance query known advance allowing different termination conditions 
branch bound framework applies closest pair queries find pair objects datasets distance minimum pairs 
hs propose various algorithms concepts df bf traversal 
difference nn algorithms access index structures data set simultaneously 
mindist intermediate nodes ni nj tree greater distance closest pair objects far sub trees ni nj contain closest pair pair pruned 
shown section processing technique queries applies multiple conventional nn queries query point combines results 
related topic appeared literature top ranked queries multiple data repositories see fln bcg representative papers 
example consider user wants find images similar query image similarity defined features color histogram object arrangement texture shape query submitted retrieval engines return best matches particular features similarity scores engine output set matches color second arrangement 
problem combine multiple inputs order determine top results terms similarity 
main idea techniques minimize extent cost search performed retrieval engine order compute final result 
threshold algorithm fln works follows assuming retrieval single best match query submitted search engine returns closest image feature 
similarity query image respect features computed 
second query submitted second search engine returns best match second feature 
similarity computed best current result 
process repeated round robin fashion search engine queried second match retrieved respect feature 
algorithm terminate similarity current result higher similarity achieved subsequent solution 
section adapt approach processing 

algorithms memory resident queries assuming set query points fits memory data points indexed tree algorithms processing queries 
algorithm illustrate retrieval single nearest neighbor show extension 
table contains primary symbols description appeared clarified shortly 
symbol description set query points qi group queries fits memory ni number queries qi mi mbr qi centroid dist sum distances point query points mindist minimum distance mbr node centroid mindist minimum distance data point query mbr ni mindist weighted mindist node respect query groups table frequently symbols multiple query method multiple query method mqm utilizes main idea threshold algorithm performs incremental nn queries point combines results 
instance mqm retrieves nn point computes distance 
similarly finds nn point computes 
point minimum sum distances query points current query point qi mqm stores threshold ti distance current nn 
total threshold defined sum thresholds 
continuing example dist possible exists point distance smaller dist 
mqm retrieves second nn encountered updates threshold 
equals summed distance best neighbor far points mqm terminates final result 
words non encountered point distance greater equal closer global sense 
example query shows pseudo code mqm nn best dist initially distance best nn far 
order achieve locality node accesses individual queries sort points hilbert value subsequent queries correspond nearby points access similar tree nodes 
algorithm computing nearest neighbors query points incremental best search discussed section termination condition known advance 
extension retrieval nearest neighbors straightforward 
neighbors minimum distances inserted list pairs dist sorted dist best dist equals distance th nn 
mqm proceeds way better neighbor inserted best nn element list removed 
mqm group query points threshold best dist distance current nn sort points hilbert value query point best dist best nn null initialization best dist get nearest neighbor query point jq update dist best dist best nn update current best dist dist return best nn mqm algorithm single point method mqm may incur multiple accesses node retrieve data point different queries 
avoid problem single point method spm processes queries single traversal 
spm computes centroid point space small value dist ideally point minimum dist 
intuition approach nearest neighbor point near remains derive computation ii range look points conclude better nn 
goal coordinates centroid xi yi coordinates query point qi 
centroid minimizes distance function dist partial derivatives function dist respect independent variables zero centroid equations dist xi xi yi dist yi unfortunately equations solved closed form words evaluated numerically implies centroid approximate 
implementation gradient descent method quickly obtain approximation 
specifically starting arbitrary initial coordinates nyi method modifies coordinates follows dist dist step size 
process repeated distance function dist converges minimum value 
resulting point approximation ideal centroid suffices purposes spm 
show prune search space lemma 
lemma qn group query points arbitrary point space 
inequality holds point dist dist pq denotes euclidean distance proof due triangular inequality query point qi pq 
summing inequalities pq pq dist pq dist qi qi lemma provides threshold termination spm 
particular applying incremental point nn query find point pq dist dist best nn 
lemma dist pq dist dist dist best nn 
idea pruning intermediate nodes summarized heuristic 
heuristic centroid best dist distance best far 
node pruned best dist dist mindist mindist minimum distance mbr centroid example heuristic shown best dist 
dist right part inequality equals meaning nodes pruned 
pruning nodes spm observations straightforward implement spm depth best paradigms 
shows pseudo code df spm 
starting root tree entries sorted list mindist query centroid visited recursively order 
entry mindist nj best dist dist subsequent ones list pruned 
extension queries conventional point nn algorithms 
spm node tree node group query points centroid node intermediate node sort entries node mindist list repeat get entry list mindist best dist dist heuristic spm recursion mindist best dist dist list node leaf node sort points node mindist list repeat get entry list jq best dist dist heuristic points dist best dist best nn update current best dist dist jq best dist dist list return best nn spm algorithm minimum bounding method spm minimum bounding method mbm performs single query uses minimum bounding rectangle centroid prune search space 
specifically starting root rtree dataset mbm visits nodes may contain candidate points 
sequel discuss heuristics identifying qualifying nodes 
heuristic mbr best dist distance best far 
node contain qualifying points best dist mindist mindist minimum distance cardinality shows group query points best nn best dist 
mindist best dist pruned visited 
words data point upper right corner query points lower right corner case dist best dist 
concept heuristic applies leaf entries 
point encountered compute mindist mbr mindist best dist discarded closer best nn 
way avoid performing distance computations points example heuristic heuristic incurs minimum overhead node requires single distance computation 
tight leads unnecessary node accesses 
instance node passes heuristic visited contain qualifying points 
heuristic presents tighter bound avoiding visits 
heuristic best dist distance best far 
node safely pruned mindist best dist qi mindist qi minimum distance query point qi mindist mindist best dist pruned 
heuristic requires multiple distance computations query point applied nodes pass heuristic 
note heuristic heuristic represent tightest condition successful node visits possible node satisfy heuristic contain qualifying points 
consider instance includes query points 
current best dist node passes heuristic mindist mindist mindist 
visited minimum distance achieved point greater 
dotted lines correspond distance best possible point necessarily data point query points 
example hypothetical optimal heuristic assuming identify best point node obtain tight heuristic follows distance smaller best dist visit node reject 
combination best approach heuristic lead optimal method algorithm hs conventional nn queries 
finding point similar problem locating query centroid time region constrained node mbr discussed section solved numerically approximately 
approximation suffices spm correctness best dist necessary precise solution order avoid false misses 
result hypothetical heuristic applied exact retrieval 
heuristics depth best traversal paradigms 
simplicity discuss mbm depth fist traversal example 
root tree retrieved entries sorted mindist node minimum mindist visited inside entry smallest mindist 
points processed value mindist pj current best dist 
points larger distances discarded 
backtracking subtree pruned heuristic 
mbm backtracks root visits nodes inside smallest mindist processed replacing best dist 
best nn best dist 
pruned heuristic algorithm terminates final 
extension retrieval knn best implementation straightforward 
query processing mbm 
algorithms disk resident queries discuss situation query set fit main memory 
section considers indexed tree shows adapt tree closest pair cp algorithm hs queries additional pruning rules 
argue tree offers limited benefits reducing query time 
motivated sections develop alternative methods mqm mbm require index simplicity describe algorithms single nn retrieval discussing 
group closest pairs method assume incremental cp algorithm outputs closest pairs pi qj pi qj ascending order distance 
consider keep count pi pairs pi appeared accumulated distance curr dist pi pi pairs 
count pi equals cardinality global distance pi respect query points computed 
distance smaller best global distance best dist far pi current nn 
questions remain answered qualifying data points lead better solution 
ii algorithm terminate 
regarding question clearly points encountered complete nn qualifying 
point pi kept list pi count pi curr dist pi 
hand complete nn data point encountered time discarded lead better solution 
general list qualifying points keeps increasing complete nn 
non qualifying points gradually removed list heuristic heuristic assume current output cp algorithm pi qj 
immediately discard points counter dist pi qj curr dist best dist words yield global distance smaller best dist un computed distances equal dist pi qj 
heuristic applied cases output pair pi qj data point pi ii global nn changes qualifying points 
point fails heuristic deleted qualifying list 
encountered subsequent pair considered new point pruned 
shows example closest pairs incrementally distance 
pair output complete nn global distance 
heuristic applied qualifying points discarded non discovered distances equal global distance greater best dist 
discovery st nn termination example gcp remaining qualifying point pi compute threshold ti ti best dist curr dist pi counter pi 
general case multiple qualifying points exist global threshold maximum individual thresholds ti largest distance output closest pair lead better solution existing 
instance meaning output pair distance algorithm terminate 
application heuristic modifies corresponding thresholds value date 
observations ready establish termination condition gcp terminates best dist ii qualifying list empty distance current pair larger global threshold continues example 
case algorithm terminates pair establishes best nn list empty 
pseudo code gcp shown 
store qualifying list memory hash table point ids facilitate retrieval information counter pi curr dist pi particular points pi 
size list exceeds available memory part table stored disk case knn queries best dist equals global distance th complete neighbor far pruning qualifying list occur complete neighbors retrieved 
worst case list may contain entry point gcp best nn null best dist initialization repeat output closest pair pi qj dist pi qj pi list best dist continue discard pi process pair add pi dist pi qj list pi encountered resides list counter pi curr dist pi curr dist pi dist pi qj counter pi curr dist pi best dist best nn pi update current best dist curr dist pi candidate point list counter dist pi qj curr dist best dist remove list pruned heuristic pruned heuristic best dist curr dist counter update threshold remove pi list counter pi best dist nn counter pi dist pi qj curr dist pi best dist remove pi list pruned heuristic pruned heuristic ti best dist curr dist pi counter pi ti ti update threshold best dist dist pi qj list empty return best nn gcp algorithm workspace mbr small contained workspace gcp terminate outputting small percentage total number closest pairs 
consider instance exist points near query points 
number closest pairs considered depends distance farthest neighbor data point example participate output closest pair nearest distance query point larger 
hand mbr large partially overlaps disjoint workspace gcp output closest pairs terminates 
shows example distance best nn farthest query point high 
addition computational overhead gcp case disadvantage large heap requirements 
recall gcp applies incremental cp algorithm keep closest pairs heap nn 
number pairs worst case equals cardinality cartesian product datasets may happen data point corner workspace distance query points small point pruned ii distance query point located opposite corner workspace largest possible 
alleviate problem samet hs proposed heap management technique included implementation part heap migrates disk size exceeds available memory space 
shown section cost gcp high motivates subsequent algorithms 
workspace workspace high pruning low pruning observations performance gcp mqm mqm applied directly disk resident high cost due large number individual queries performed shown section cost increases fast cardinality 
order overcome problem propose mqm file multiple query method splits blocks qm fit memory 
block computes main memory algorithms apply mbm due superior performance see section combines results mqm 
complication nn group retrieved effectively compute global distance respect data points immediately 
follow lazy approach find group load memory second group retrieve nn 
time compute distance current distance curr dist dist dist 
similarly load update current distances account objects third group 
round data point global distance respect query points computed 
point current nn 
process repeated round robin fashion step new global distance derived 
instance read group retrieve second nn distance nn completed respect groups 
point minimum global distance current nn 
case mqm threshold tj group qj equals dist pj qj pj retrieved neighbor qj 
global threshold sum thresholds 
mqm terminates equal larger global distance best nn far 
algorithm illustrated 
order achieve locality sort externally points hilbert value 
group obtained number consecutive pages fit memory 
extension retrieval similar main memory mqm 
particular best nn list pairs dist sorted global dist best dist equals distance th nn 
proceeds way 
mqm group query points best nn null best dist initialization sort points hilbert value split groups group fits memory best dist read group get nearest neighbor group curr dist dist dist update pass algorithm cur 
neighbor qi update nn curr dist curr dist dist local nn computed groups cur 
neighbor qi update nn curr dist curr dist dist modulo group global dist complete curr dist best dist best nn update current best dist curr dist modulo group process return best nn mqm algorithm mqm expected perform number query groups relatively small minimizing number applications main memory algorithm 
hand numerous groups combination individual results may expensive 
furthermore case main memory mqm algorithm may perform redundant computations encounters data point nearest neighbor different query groups 
possible optimization keep nn memory distances groups avoid computations point encountered group 
may possible main memory size limited 
mbm extend spm mbm case fit memory 
shown experiments mbm efficient describe mbm adaptation minimum bounding method 
points sorted hilbert value inserted pages order 
page qi contains ni points possible number points differs page may half full 
group qi keep memory mbr mi ni contents 
mbm descends tree df bf traversal nodes may contain qualifying points 
values mi ni query group memory quickly identify qualifying nodes follows 
heuristic best dist distance best far mi mbr group qi 
node safely pruned mindist best dist qi refer left part inequality weighted mindist shows example query points split groups mbrs best dist 
heuristic pruned weighted mindist mindist mindist contain better nn 
example heuristic leaf node reached compute global distance data points groups 
initially current distance curr dist pj point pj set 
new group qi loaded memory curr dist pj updated curr dist pj dist pj qi 
reduce cpu overhead distance computations heuristic 
heuristic curr dist pj accumulated distance data point pj respect groups qi 
pj safely excluded consideration curr dist mindist best dist shows example heuristic group processed curr dist pj dist pj 
point pj compared query points mindist pj equal best dist 
pj considered computations subsequent groups loaded memory 
example heuristic final clarification regards order qualifying nodes query groups accessed 
nodes weighted mindist intuition nodes small values lead neighbors small global distance subsequent visits pruned heuristic 
leaf node reached group qi read memory descending order mindist mi 
motivation groups far node prune numerous data points saving distance computations points respect groups 
shows pseudo code mbm df traversal bf implementation similar 
mbm node tree node group query points consists qm fit memory node intermediate node sort entries nj node weighted mindist list repeat get entry nj list weighted mindist nj best dist passes heuristic mbm nj recursion weighted mindist nj best dist list node leaf node sort points pj node weighted mindist list point pj list curr dist pj initialization sort groups qi descending order mindist node mi repeat read group qi point pj list curr dist mindist best dist remove list fails heuristic passes heuristic curr dist curr dist dist weighted mindist best dist list groups point remains list termination loops curr dist best dist best nn update current best dist curr dist return best nn mbm algorithm starting root tree entries sorted weighted mindist visited recursively order 
node fails heuristic subsequent nodes sorted list pruned 
leaf nodes point violates heuristic removed list compared subsequent groups 
extension nn straightforward 

experiments section evaluate efficiency proposed algorithms real datasets pp web populated places north america ii ts web contains centroids mbrs representing streams poly lines iowa kansas missouri nebraska 
experiments pentium ghz cpu gbyte memory 
page size trees bkss set kbyte resulting capacity entries node 
implementations best traversal 
versions mqm gcp require bf due incremental behavior 
spm mbm mbm df 
comparison algorithms memory resident queries compare methods section mqm spm mbm main memory queries 
purpose workloads queries 
query number points distributed uniformly mbr area randomly generated workspace values identical queries workload change queries workload position query mbr 
study effect cardinality fixing workspace number retrieved group nearest neighbors 
shows average number node accesses na cpu cost functions datasets pp ts 
number node accesses mqm spm mbm cpu cost sec na vs pp dataset cpu vs pp dataset number node accesses cpu cost sec na vs ts dataset cpu vs ts dataset cost vs cardinality mqm general worst method cost increases fast query cardinality leads multiple queries access nodes retrieve points 
redundant computations affect node accesses cpu cost significantly diagrams logarithmic scale 
queries access similar paths tree mqm benefits existence lru buffer total cost prohibitive large due high cpu overhead 
hand cardinality little effect node accesses spm mbm play important role pruning power heuristic spm heuristics mbm 
affects cpu time distance computations qualifying data points increase number query points 
mbm better spm due high pruning power heuristic opposed heuristic order measure effect mbr size set vary workspace shown cost average na cpu time algorithms increases query mbr 
mqm termination condition total threshold sum thresholds query point exceed best dist increases mbr size 
mqm retrieves nns query point 
spm mbm reason degradation pruning power heuristic heuristic mbr size number node accesses mbr size mqm spm mbm cpu cost sec mbr size na vs size pp cpu vs size pp number node accesses mbr size cpu cost sec mbr size na vs size ts cpu vs size ts cost vs size mbr set vary number retrieved neighbors 
value influence cost method significantly cases large number neighbors node extra computations 
relative performance algorithms similar implemented version mbm heuristic inferior spm 
heuristic useful conjunction heuristic reduces cpu time requirements algorithm 
previous diagrams mbm clearly efficient method followed spm 
number node accesses mqm spm mbm cpu cost sec na vs pp dataset cpu vs pp dataset number node accesses cpu cost sec na vs ts dataset cpu vs ts dataset cost vs num 
retrieved nns comparison algorithms disk resident queries set experiments datasets pp ts alternatively query data points 
gcp assume datasets indexed trees mqm mbm dataset plays role sorted hilbert values split blocks points fit memory 
cost sorting building trees taken account 
query cardinality fixed corresponding dataset perform experiments varying relative workspaces datasets 
assume workspaces centroid area mbr varies workspace similar experiments 
shows na cpu time assuming pp query dataset 
gcp worst performance cost increases fast reasons discussed section 
exceeds percent workspace gcp terminate due huge heap requirements 
algorithms order magnitude faster 
mqm outperforms mbm na case large query workspaces 
performance mqm compared main memory results due fact query set pp contains data points generates query groups 
query group processed memory mbm results combined relatively small overhead 
gcp mqm mbm number node accesses cpu time sec mbr area mbr area na vs size cpu vs size cost vs size mbr ts pp illustrates similar experiment pp plays role dataset ts role query set recall cardinality ts order magnitude higher pp 
case mbm clearly better due large number query groups results combined mqm 
comparing observe performance mbm similar mqm significantly worse 
consistent main memory behavior mqm cost increases fast cardinality query set 
gcp omitted diagrams incurs excessively high cost 
mqm mbm number node accesses cpu time sec mbr area mbr area na vs size cpu vs size cost vs size mbr pp ts order investigate effect relative workspace positions set experiments assume datasets lie workspaces size vary overlap area workspaces totally disjoint top 
intermediate values obtained starting case shifting query dataset axes 
shows cost algorithms assuming pp 
cost algorithms grows fast overlap area increases number potential candidates threshold mqm ii reduces pruning power mbm heuristics iii increases number closest pairs output termination gcp 
mqm clearly outperforms mbm overlap 
order explain consider overlap case assuming query workspace starts upper right corner data workspace 
nearest neighbors query groups lie near upper right corner points minimize total distance 
mqm find best nn relatively fast terminate points near corner considered 
hand query group large mbr recall contains points numerous nodes satisfy pruning heuristic mbm visited 
gcp mqm mbm number node accesses cpu time sec overlap area overlap area na vs overlap area cpu vs overlap area cost vs overlap area ts pp repeats experiment setting ts 
clear winner mbm due numerous queries performed mqm 
performed experiments varying number neighbors retrieved keeping parameters fixed 
case main memory queries significant effect performance diagrams omitted 
mqm mbm number node accesses overlap area cpu time sec overlap area na vs overlap area cpu vs overlap area cost vs overlap area pp ts summary best algorithm disk resident queries depends number query groups 
mqm usually preferable query dataset partitioned small number groups mbm better 
gcp poor performance cases 
experimented alternative version mbm uses tree hilbert sorting 
technique provide performance benefits qualifying point compute accumulated distance query points anyway 

dataset group query points group nearest neighbor query retrieves point minimizes sum distances points describe algorithms processing queries including main memory disk resident experimentally evaluate performance variety settings 
problem definition expensive performance different algorithms normally varies orders magnitude motivates efficient processing methods 
intend explore application related techniques variations group nearest neighbor search 
consider instance represents set facilities goal assign object single facility sum distances object nearest facility minimized 
additional constraints facility may serve users may complicate solutions 
similar problems studied context clustering recourse allocation proposed methods different ones 
furthermore interesting study distance metrics network distance necessitate alternative pruning heuristics algorithms 
supported hong kong 
amn arya mount netanyahu silverman wu optimal algorithm approximate nearest neighbor searching journal acm 
ay yu outlier detection high dimensional data 
sigmod 
bohm cost model query processing high dimensional data spaces 
tods vol 

bcg bruno chaudhuri gravano top selection queries relational databases mapping strategies performance evaluation 
tods 
beyer goldstein ramakrishnan shaft nearest neighbor meaningful 
icdt 
jensen nearest neighbor reverse nearest neighbor queries moving objects 
ideas 
bkss beckmann kriegel schneider seeger tree efficient robust access method points rectangles 
sigmod 
corral manolopoulos theodoridis closest pair queries spatial databases 
sigmod 
fagin combining fuzzy information overview 
sigmod record 
fln fagin lotem naor optimal aggregation algorithms middleware 
pods 
agrawal abbadi constrained nearest neighbor queries 

guttman trees dynamic index structure spatial searching 
sigmod 
jmf jain murthy flynn data clustering review 
acm comp 
surveys 
hs samet incremental distance join algorithms spatial databases 
sigmod 
hs samet distance browsing spatial databases 
tods 
hochreiter younger learning learn gradient descent 
icann 
gunopulos nearest neighbor queries mobile environment 

km korn muthukrishnan influence sets reverse nearest neighbor queries 
sigmod 
kms korn muthukrishnan srivastava reverse nearest neighbor aggregates data streams 
vldb 
nakano optimal algorithm angle restricted nearest neighbor problem reconfigurable mesh applications 
ieee trans 
parallel distributed systems 
pm papadopoulos manolopoulos performance nearest neighbor queries trees 
icdt 
papadias zhang tao query processing spatial network databases 
vldb 
roussopoulos kelly vincent nearest neighbor queries 
sigmod 
sproull refinements nearest neighbor searching dimensional trees 
algorithmica 
sks shahabi road network embedding technique nearest neighbor search moving object databases 
acm gis 
sr song roussopoulos nearest neighbor search moving query point 

sakurai yoshikawa kojima tree index structure high dimensional spaces relative approximation 
vldb 
tp tao papadias time parameterized queries spatio temporal databases 
sigmod 
tp tao papadias spatial queries dynamic environments 
acm tods 
tps tao papadias shen continuous nearest neighbor search 
vldb 
web www psu edu web dke cti gr people research datasets weber schek blott quantitative analysis performance study similarity search methods high dimensional spaces 
vldb 
yu ooi tan jagadish indexing distance efficient method knn processing 
vldb 
