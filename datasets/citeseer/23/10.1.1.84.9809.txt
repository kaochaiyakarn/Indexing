daniel blandford cs cmu edu compact representations simplicial meshes dimensions guy blelloch blelloch cs cmu edu david cs cmu edu carnegie mellon university pittsburgh pa describe data structures representing simplicial meshes compactly supporting online queries updates efficiently 
data structure requires factor memory efficient standard data structures triangular tetrahedral meshes efficiently supporting traversal simplices storing data simplices insertion deletion simplices 
implementation data structures uses bytes triangle dimensions bytes tetrahedron dimensions 
data structures implement incremental algorithms generating delaunay mesh 
algorithm generate tetrahedrons gbyte memory including space coordinates data algorithm 
runtime algorithm fast shewchuk pyramid code efficient know uses factor memory 
applications space required represent large unstructured meshes memory limiting factor size mesh 
standard representations tetrahedral meshes example require bytes vertex 
option larger meshes maintain mesh external memory 
avoid thrashing requires designing algorithms access mesh carefully orchestrated 
external memory algorithms designed algorithms complicated mainmemory counterparts significantly slower 
supported part national science foundation part aladdin center www aladdin cmu edu project www cs cmu edu aci ccr ccr 
clemens cmu edu option larger meshes try compress representation main memory 
fact significant interest compressing meshes 
dimensions example methods compress tetrahedral mesh byte tetrahedron bytes vertex including vertex coordinates 
techniques designed storing meshes disk reducing transmission time representing mesh main memory 
support dynamic queries updates mesh compressed form 
interested compressed representations meshes permit dynamic queries updates mesh 
goal solve larger problems standard random access main memory algorithms 
data structures representing dimensional simplicial meshes 
data structures support standard operations meshes including traversing neighboring simplices inserting deleting simplices ability store data simplices 
class shaped meshes bounded degree operations take constant time 
precise definition interface described section 
data structures compact designed disk storage save factor standard representations 
data structures described section 
take advantage separator properties shaped meshes results graph compression 
particular technique uses separators relabel vertices vertices share simplex labels close value 
pointers difference encoded variable length codes 
technique radially store neighboring vertices vertex subset edges 
query need decode single vertex vertex edge 
applications need generate new vertices delaunay refinement leave extra space label space assign new labels labels neighbors 
section describes implementation data structure section presents experimental results 
implementation uses bytes triangle bytes tetrahedron measured range mesh sizes point distributions 
experiments representation part incremental delaunay algorithms 
variant standard bowyer watson algorithm exact arithmetic predicates shewchuk geometric tests 
experiments delaunay refinement algorithm removes triangles small angles adding new points 
space reported terms total space including space vertex coordinates data structures required algorithm 
results gbyte memory summarized follows 
generate delaunay mesh triangles gbytes mesh gbytes vertex coordinates gbytes auxiliary data algorithm 
compared triangle code efficient know algorithm uses factor memory 
slower triangle divide conquer algorithm faster incremental algorithm 
generate delaunay mesh tetrahedrons gbytes mesh gbytes vertex coordinates gbytes auxiliary data 
compared pyramid code algorithm uses factor memory faster 
generate refined delaunay mesh triangles angle 
version dynamically generates new labels uses extra level indirection datastructure 
data structure conjunction external memory algorithms 
describe implementation simplicial meshes ideas extend higher dimensions 
topics discussed briefly section 
standard mesh data structures numerous approaches representing unstructured meshes dimensions 
specialized simplicial meshes general polytope meshes 
purpose comparing space usage review common data structures 
complete comparison structures kettner :10.1.1.30.4116
dimensions approaches triangles edges 
simplest data structure triangles 
triangle pointers neighboring triangles pointers vertices 
assuming data needs stored triangles edges data structure uses pointers triangle 
storing data requires extra pointers 
shewchuk triangle code cgal triangulation data structure triangle data structure 
distinguish neighbors vertices triangle handle triangle typically needs include index 
data structure triangle example includes index pointer neighbor low bits neighbor query returns neighbor triangle returns orders held 
closely related data structures edges including doubly connected edge list winged edge half edge structures 
addition triangulated meshes data structures polygonal meshes 
data structures edge maintains pointers neighboring vertices neighboring edges cyclically neighboring faces vertices 
edge maintain pointers neighboring faces edge data 
space efficient data structures maintain edge pointer neighboring vertices just neighboring edges face vertex 
assuming data needs stored face edge requires pointers edge manifold triangulation equivalent pointers triangle triangle structure 
half edge data structure cgal leda maintains structures edge direction :10.1.1.30.4116
half edges cross referenced requiring extra pointers edge 
quad edge structures maintain pointers neighboring edges requiring pointers edge triangle 
dimensions analogous data structures tetrahedrons faces edges 
simplest data structure structure tetrahedron 
tetrahedron pointers adjacent tetrahedrons corner vertices 
assuming data requires pointers tetrahedron 
data structure pyramid cgal 
face edge data structures called boundary representations reps 
boundary representations general tetrahedron data structures allowing representation polytope meshes tend take significantly space 
dobkin laszlo suggest data structure edge face pairs general requires pointers edge face 
tetrahedral meshes data structure optimized pointers face adjacent faces rotating edges corner vertices 
corresponds pointers tetrahedron 
weiler radial edge representation cell tuple representation map representation take space 
summary efficient standard data structures simplicial meshes pointers triangle pointers tetrahedron 
extra pointer required store data triangles tetrahedrons 
preliminaries section review basic notions combinatorial topology 
detailed discussion reader refer 
simplicial complex non empty collection finite sets closed nonempty subsets 
elements called simplices 
underlying set called vertex set elements called vertices 
dimension simplex vertices 
dimension maximum dimension simplices 
simplex face simplex iff iff say proper face 
say pure simplex face simplex highest dimension 
subset call collection simplices faces cl closure star simplex union st 
link simplex set simplices closure star intersect lk cl st st 
mapping vertices denote convex hull images vertices 
say embedding iff simplices holds maximum common face may empty 
say manifold boundary iff manifold boundary 
manifold dimension link simplex cycle edges vertices manifold 
manifold boundary link simplex cycle path manifold example manifold complex boundary complex link vertex link single path paths 
boundary see 
fact representation described section 
ordering simplex total ordering vertices 
orientation simplex maximal set orderings permutations ordering simplex implies orientation simplex simplex possible orientations 
orientation sd simplex induces orientation sd sd sd exists sd sd sd prefix sd purposes pure simplex contained simplices dual graph connected 
vertices dual graph edges simplices 
orientable simplices orientations way meet simplex induce opposite orientations orientable possible orientations specified orientation simplices 
link simplex collection disjoint cycles paths see 
term simplicial mesh refer simplicial complex orientation 
interface section interface simplicial meshes data structure implements 
simplified version interface described 
inter permutation permutation reached number swaps 
face supports standard operations meshes including mechanism systematically traverse mesh reflect face rotate vertex updating mesh including inserting deleting simplices associating data simplices 
interface consists operations ordered simplices empty faces operations simplicial meshes add delete 

vk ordered simplex 
empty operation creates empty simplex empty 
operation adds vertex 
vk 
operation extracts vertex 
vk vk 
sd consider faces 
faces operation returns set 
si prefix intuitively means returns faces opposite orientation easily implemented operations 
dimensional simplicial mesh 
add operation takes highest dimension ordered simplex returns new mesh results adding require consistent orientation note add don store permutations just storing determine orientation delete operation takes highest dimension ordered simplex returns mesh results removing takes ordered simplex returns null 
returns ordered simplex prefix null exists 
special case returned 
addition core interface provide operations associate retrieve data simplices complex 
operation takes ordered simplex user supplied data associates operation takes ordered simplex returns user data ud associated associated data null returned 
interface described applications traverse update simplicial mesh 
gives example code traverses mesh boundary returns boundary mesh 
recursively traverses mesh depth order storing flags simplices visited 
boundary simplex null code added output mesh 
code assumes boundary simplicial mesh 
procedure boundary mb true faces null add mb boundary mb pseudocode computing boundary mb simplicial mesh data structure describe data structures simplicial meshes simplicial orientable pseudo manifolds 
describe uncompressed versions data structures describe compress 
data structures storing link set simplices 
similar half edge structure similar dobkin laszlo structure 
note vertex labels pointers higher dimensional simplex structures allowing compress vertex labels 
data structures property degree vertices bounded queries take constant time 
describe version manifold complexes 
data structure maps vertex link represented cycle labels neighboring vertices 
cycle ordered radially vertex orientation complex clockwise 
query ordered edge answered looking link finding link returning vertex link 
vertex answered selecting vertices link 
link stored list labels starting arbitrary point cycle 
vertex bounded degree lookup takes constant time 
analyze space note edge appears cycles appearance requires pointers vertex label element list 
total space pointers edge pointer vertex 
identical space usage triangle structure assuming maintains pointer vertex incident triangles 
data structure similar half edge structure effectively structures edge pointing direction 
differs direct cross pointers matching half edges 
data structure maps subset ordered edges link represented cycle vertex labels 
cycle maintained consistent orientation obeying right hand rule respect order direction edge 
representative subset selected include edges labels odd 
furthermore edge stored orders chosen fixed rule lower labeled vertex 
triangle simplex labels odd sampling edges guarantees triangle representative ordered edge data structure needs supply way access link vertex labels edge implemented adjacency list outgoing representative edges element list stores pointer link 
ordered triangle works follows 
finds representative ordered edge va vb triangle 
call third vertex triangle vc 
looks link va vb adjacency list va searches vc link 
va vb vc orientation permutation returns vertex link returns previous vertex link 
vertex implemented selecting outgoing edges selecting vertices edge link 
vertex outgoing edges vertex data structure store triangle 
triangle find tetrahedron 
support edges requires storing edges direction necessarily links 
edges odd edges data structure needs store single vertex link 
analyze space data structure assume links representative edges stored lists vertices 
list element pointers vertex element list 
edge correspondence triangles face list elements link triangle edges average half edges appear triangle contribute average list elements data structure 
twice triangles tetrahedrons tetrahedron contribute average list elements corresponds pointers 
need strictly true randomly selected labels 
non random labels hash labels decide edges include 
store vertex adjacency lists edges edge appear element list require pointers link element list 
additionally pointer vertex list required 
total space support triangles 
typical reasonably shaped mesh giving approximately pointers tetrahedron 
data structure tetrahedrons 
additional space support vertices trivial vertices outgoing edge 
support edges need separately store excluded edges direction 
stored linked list pointers edge link pointer 
comes 
applications need edges cases extra data need stored 
manifolds boundaries link path vertices cycle 
simply keep path starting element 
link singular vertices edges consist set cycles paths 
call set link set represented multiple lists 
simplex deleted finding representative simplices faces splitting cycle path links 
example triangle deleted going path link vertex split paths 
similarly cycles vertices triangle slit path 
splitting link leaves link set empty simplex deleted 
simplex added finding representative simplices extending link sets 
extension add new path set new vertices set extend existing path vertex set join existing paths vertices separate paths joint path cycle vertices ends path 
data structure restricted manifolds boundary single path extended side jointed cycle 
data added simplices simplices adding data field element link 
simplex appear multiple links data needs stored chosen fixed manner lookup easy 
compressed data structure 
neighborhood corresponding difference code data vertex 
entry degree vertex 
entries offsets neighbors 
compressed data structure discuss compress data structure 
compression similar 
difference coding element vertex link represented difference original vertex 
differences small variable length prefix code gamma code elias represent efficiently 
additional sign bit added allow negative differences 
ensure differences small algorithm vertices preprocessing phase discuss 
vertices relabeled link vertex represented concatenating code degree codes differences neighbors 
see example 
vertex link consisting multiple cycles paths occur link set represented putting cycles paths count 
data associated simplices interleaved codes neighbors 
resulting vertex encodings stored fixed length blocks encoding larger fit block multiple blocks may formed linked list hold encoding 
data structure hashing technique minimize size pointers linked lists 
data structure queried code corresponding vertex decompressed 
update code corresponding vertices decompressed modified compressed 
compression data structure similar data structure stores link representative edges vertices 
vertex data structure stores list vertex representative edges pointers links edges 
pointers compressed hashing technique 
generating labels 
vertices known algorithm begins algorithm relabel technique cuts 
set points technique finds axes greatest diameter 
finds approximate median coordinate partitions points side median 
points side labeled points side 
done recursively produce labeling points near similar labels 
similar separator technique graph compression relabeling occurs edges added mesh 
vertices known algorithm begins algorithm assign sparse labeling initial vertices 
new vertex added assigned label close labels neighbors 
inefficient allocate storage possible label algorithm uses extra level indirection map vertex labels memory blocks 
implementation triangulation 
dimensional compressed data structure implemented follows 
difference encoding structure uses nibble code code devising stores integers bit 
nibble contains bits data continue bit 
continue bit set nibble representation integer 
find code faster gamma code space efficient 
necessary store extra bit value accomplished shift operation particular value negative difference coder stores absolute value plus sign bit sign 
vertex represented nibble code degree vertex followed nibble codes differences vertex neighbors 
implementation stores additional special case bits neighbor provide information triangle precedes link 
bit set indicate gap link set indicates triangle preceding neighbor mesh 
bit set data associated triangle preceding neighbor 
case code neighbor followed nibble code representation data 
optimization note vertices special case bits set 
implementation stores bit degree vertex indicate special case bits set bits omitted encoding vertex 
implementation stores nibble codes vertex array containing byte block vertex 
block overflows storage needed greater bytes additional space allocated separate pool byte blocks 
byte block stores pointer block sequence 
implementation uses hashing technique ensure pointer needs larger byte 
requires hash function maps address pairs addresses spare memory pool 
implementation tests values range result hash unused block 
uses value pointer block 
certain assumptions hash function memory pool full probability technique fail find vertices labeled sparsely new labels generated dynamically implementation hash mapping labels vertex data blocks 
byte memory allocated label label byte contains hash pointer data block vertex 
bit stored block indicate current block sequence 
block bit stored degree vertex subsequent blocks stored eighth bit byte pointer block 
tradeoff sizes blocks 
large blocks inefficient contain unused space small blocks inefficient require space pointers blocks 
addition cost associated computing hash pointers searching unused blocks memory pool 
shows tradeoff factors delaunay triangulation algorithm run uniformly distributed points unit square 
chose block size gives efficient space 
improve efficiency lookups implementation caching system 
query update blocks associated appropriate vertex decoded 
information represented uncompressed form list vertex link element list 
lists kept fifo cache maximum capacity nodes 
update operations may affect lists cache 
lists encoded back blocks block blocks total size needed space number extra blocks needed vertices uniform distribution total space required allocate blocks needed 
flushed cache 
triangulation 
dimensional structure implemented slight generalization dimensional structure 
recall data structure keeps map vertex representative edges 
stored difference coded list corresponding neighbors 
code neighbor followed code number encoding representative edge pointer block containing data edge 
pointer stored hash trick keep pointer sizes small 
representative edge block allocated memory pool capability allocate additional blocks needed 
edge queried implementation loads list vertex edge cache 
need decompress edges adjoining vertex 
number needed representative edge quite variable data structure allocates pools byte blocks reduce wasted space 
number blocks pool determined experimentally shown 
data structure ensures pool free space block allocated pool data structure looks larger 
initial block vertex comes separate array containing blocks size 
dynamic point generation 
support dynamic point generation expanded label space 
total vertices generated allow possible labels 
label receives byte hash pointer label points initial data block corresponding vertex 
initial vertices spread evenly label space 
block blocks blocks size allocated number blocks size allocated vertex mesh percentage blocks incremental delaunay implemented delaunay triangulation algorithm dimensions compressed data structure 
employ known bowyer watson kernel incrementally generate mesh 
course algorithm delaunay triangulation current maintained 
incremental step inserts new vertex mesh determining elements violate delaunay condition 
elements form delaunay cavity 
faces bound cavity called horizon 
mesh modified removing elements cavity connecting new vertex horizon 
cavity connected local search current mesh 
point inserted cavity determined starting element get removed insertion optimal runtime bounds idea guibas maintain association point inserted mesh element tp contains search cavity start tp 
algorithm history mesh kept time inserted history locate element tp current mesh 
contrast keep mesh history maintain association points containing elements tp current mesh 
incremental step points cavity elements new elements tests tests accounts dominant cost algorithm 
carefully implemented idea described extended dimensions 
implementation require extra memory lists points time point vertex mesh list 
memory store vertex mesh list node 
algorithm maintains queue elements interiors contain points 
elements contain points added mesh algorithm terminates 
scenario points known 
relabel input points cuts coordinate directions described 
runtimes reported section include preprocessing step 
delaunay refinement test implementation performance case new points dynamically generated runtime implemented delaunay refinement code style ruppert 
augment delaunay triangulation adding badly shaped triangles maintaining delaunay property 
initial triangulation built walk mesh check quality element queuing ones satisfying preset minimum angle bound 
queue triangulation phase algorithm store list triangles split 
new point generated algorithm assigns new label considering horizon vertices cavity created calculating value minimizes sum log norms finds closest label 
pure triangulation code vertices known store point coordinates level vertex arrays densely 
refinement code fill arrays open address hashing takes prohibitively long 
require extra memory additional map form label space vertices 
experiments report experiments pentium ghz system running redhat linux kernel gnu compiler version 
geometric operations incircle tests shewchuk adaptive precision geometric predicates 
single precision floating point numbers represent coordinates 
delaunay tested implementation data drawn distributions assess memory needs non uniform data sets 
ran tests distributions uniformly random normal line singularity 
details distributions 
report number extra overflow byte blocks store delaunay meshes various point distributions runtime implementation 
seen runtime varies number extra blocks varies 
furthermore number extra blocks comes number default blocks needed distribution pts extra blocks time uniform normal line uniform normal line number extra byte blocks needed store triangular delaunay meshes various point distributions structure runtime implementation 
vertex 
experiments set number extra blocks available number default blocks 
extra blocks fill capacity 
setting total space require mesh bytes vertex bytes triangle 
compare runtime memory usage implementation shewchuk triangle code efficient code reported boissonnat 
report runtime incremental code vs triangle divide conquer incremental implementation 
report total memory codes break memory simplicial mesh point coordinates queue 
just third memory code runs slower triangle divide conquer implementation order magnitude faster triangle incremental implementation 
code memory represent mesh store coordinates queue 
delaunay tested implementation point distributions 
structure allocate memory blocks different size 
compare memory needs various point distribution report number bytes store occupied blocks 
runtimes differ memory needed nearly independent distribution 
compare implementation uniform random data shewchuk pyramid code figures show runtime memory usage 
breaks memory usage code 
note version pyramid beta release 
runtime sec triangle divide conquer triangle incremental incremental code problem size elements runtime uniformly random points peak memory mbyte triangle code problem size elements memory uniformly random points memory mbyte total simplicial mesh point coordinates queue problem size elements breakdown memory uniformly random points distribution pts bytes time uniform normal line uniform normal line number bytes needed occupied blocks store tetrahedral delaunay meshes various point distributions runtime implementation 
comparison implementation runs slightly faster uses third memory 
representation mesh uses total memory point coordinates queue account respectively 
delaunay refinement tested delaunay refinement code compare runtime memory pure delaunay code see figures 
figures show problem size terms final number elements mesh 
pure delaunay code points known initially refinement code points known initially generated labeled fly described section 
refine mesh minimum angle runtimes versions identical 
need memory refinement code 
additional memory needed map labels vertices slack point coordinate array level vertex array needed hashing technique 
discussion representation described alternative external memory core representations mesh factor fitting memory relative standard representation 
representation advantage allows random access mesh significant penalty part standard memory algorithms code just exchanging mesh interface 
conjunction external memory 
large problems representation conjunction external memory techniques 
representation ordering vertices designed local quad oct tree runtime sec pyramid code problem size elements runtime uniformly random points peak memory mbyte pyramid code problem size elements memory uniformly random points memory mbyte total simplicial mesh point coordinates queue problem size elements breakdown memory uniformly random points runtime sec pure delaunay delaunay refinement problem size final elements runtime pure delaunay vs delaunay refinement peak memory mbyte pure delaunay delaunay refinement problem size final elements memory pure delaunay vs delaunay refinement decomposition blocks memory vertices laid ordering nearby vertices mesh appear page 
problem data vertex overflows assign overflow data extra blocks hash locality 
sure overflow data spatial locality careful assigning extra blocks preferentially page original block 
representation algorithms strong bias accessing mesh locally see amenta choi rote tend spatial locality virtual memory fit physical memory 
generalizations dimensions 
idea storing link dimensional simplex generalizes arbitrary dimension 
compression technique generalizes arbitrary dimension ineffective large dimensions 
size difference codes depends separator sizes turn depends dimension 
choosing effective way select representative subset dimensional simplices depend dimension need considered representation dimensions greater 
done experimentation analyze effectiveness techniques dimensions greater compare representations representations 
grateful jonathan shewchuk commenting letting pre release version pyramid 
done part project project members contributed ideas 
amenta choi rote 
incremental constructions con 
proc 
acm symposium computational geometry pages june 
arge 
external memory data structures 
proc 
european symposium algorithms pages 

polyhedron representation computer vision 
proc 
national computer conference pages 
blandford blelloch 
compact representations separable graphs 
proc 
acm siam symposium discrete algorithms 
blandford blelloch 
experimental analysis compact graph representation 
proc 
workshop algorithm engineering experimentation 
blelloch burch crary harper miller 
persistent triangulations 
journal functional programming sept 
blelloch miller 
design implementation practical parallel delaunay algorithm 
algorithmica 

boissonnat devillers 
triangulations cgal 
computational geometry 
bowyer 
computing dirichlet tessellations 
computer journal 

representing geometric structures dimensions topology order 
proc 
acm symposium computational geometry pages 
ferragina mehlhorn meyer ramos 
randomized external memory algorithms geometric problems 
proc 
acm symposium computational geometry pages june 
deering 
geometry compression 
proc 
sig graph pages 
dehne hutchinson maheshwari dittrich 
reducing complexity simulating coarse grained parallel algorithms 
proc 
ipps spdp pages 
dobkin laszlo 
primitives manipulation dimensional subdivisions 
algorithmica 
edelsbrunner 
geometry topology mesh generation 
cambridge univ press england 
elias 
universal codeword sets representations integers 
ieee transactions information theory march 

devillers 
progressive lossless compression arbitrary simplicial complexes 
proc 
siggraph 
goodrich 
vitter 
external memory computational geometry 
proc 
ieee symposium foundations computer science pages nov 
gu 
harvard graphics archive mesh library 
www cs deas harvard edu mesh 
guibas knuth sharir 
randomized incremental construction delaunay voronoi diagrams 
algorithmica 
guibas stolfi 
primitives manipulation general subdivisions computation voronoi diagrams 
acm transactions graphics 

real time compression triangle mesh connectivity 
proc 
siggraph pages 
snoeyink 
face compressing polygon meshes properties 
proc 
siggraph pages 
project 
www cs cmu edu 
gotsman 
spectral compression mesh geometry 
proc 
siggraph pages 
kettner :10.1.1.30.4116
generic programming designing data structure polyhedral surfaces 
computational geometry theory applications 

dimensional generalized combinatorial maps cellular quasi manifolds 
international journal computational geometry applications 
hellerstein 
build topological data structure polygon soup 
proc 
symposium solid modeling applications pages june 
mehlhorn 
leda platform combinatorial geometric computing 
cambridge university press 
miller 
teng thurston vavasis 
separators sphere packings nearest neighbor graphs 
journal acm 
muller preparata 
finding intersection convex polyhedra 
theoretical computer science 
rossignac 
implant compression progressive tetrahedral mesh connectivity 
proc 
visualization pages 
rossignac 
connectivity compression triangle meshes 
ieee transactions visualization computer graphics 

algebraic topology graduate texts mathematics 
springer verlag 
ruppert 
delaunay refinement algorithm quality dimensional mesh generation 
algorithms 
shewchuk 
pyramid mesh generator software 
www cs berkeley edu 
personal communication 
shewchuk 
triangle engineering quality mesh generator delaunay 
proc 
workshop applied computational geometry pages philadelphia pa may 
shewchuk 
adaptive precision floating point arithmetic fast robust geometric predicates 
discrete computational geometry 
rossignac 
grow fold compressing connectivity tetrahedral meshes 
computer aided design 
taubin rossignac 
geometric compression topological surgery 
acm transactions graphics 
tu hallaron lopez 
database oriented method generating large octree meshes 
proc 
international meshing roundtable pages sept 
vitter 
external memory algorithms data structures dealing massive data 
acm computing surveys june 
watson 
computing dimensional delaunay tesselation application voronoi polytopes 
computer journal 
weiler 
edge data structures solid modeling curved surface environment 
ieee computer graphics applications jan 
weiler 
radial edge structure topological representation non manifold geometric boundary modeling 
geometric modeling cad applications pages 
north holland 

