mission plan specification language behaviour robots albert louis thesis submitted conformity requirements degree master science graduate department computer science university toronto copyright albert mission plan specification language behaviour robots albert louis master science graduate department computer science university toronto xe architecture tsotsos xe tsotsos tsotsos tsotsos proposed solution problem integrating reactive deliberative functionality robot control 
describe xe robot control architecture theoretical foundation salient points major contributions 
context xe implemented mission specification language provides support task decomposition synchronization execution monitoring seeking complete specification proposed language realize implementation mechanism demonstrate process converting mission description behaviour network xe network executing mission simulated mobile robot 
examples 
ii go 
professor john tsotsos thesis advisor gave guidance support entire thesis process 
importantly friendship 
john tsotsos sven dickinson helping transform heap words thesis 
reading 
michael jenkin wolfgang st george advice needed 
andrei great partner research needed vent frustration 
clark discussions advice years 
formal grammars casting body parts limits 
ibm canada supporting studies research financially 
parents enjoyed opportunities love encouragement 
special person incredible amount patience 
iii table contents chapter 
background framework 
chapter mobile robot simulator system background implementation chapter 
mission specification language language sequences behaviours 
temporal connectors 
grouping constructs phase 
grouping constructs ensure 
behaviour parameters 
language implemented chapter 
behaviour networks behaviour interaction competitive methods 
cooperative methods 
discussion 
proposed solution 
extended behaviours pure behaviour 
behaviour parameters 
daemons 
behaviour status 
nested ensure clauses behaviour life cycle example chapter implementation experimental results parsing missions intermediate representations behaviour parameters numeric parameters 
behaviour parameters representation names parameters 
behaviour parameters symbolic parameters 
behaviour network node descriptors 
parameters node descriptors 
networks node descriptors 
intermediate representations networks behaviours behaviour parameters 
start pseudo behaviours 
compatible ensure clause behaviours 
prohibited ensure clause behaviours 
building complete behaviour network behaviour life cycle implementation iv experimental results behaviour target tracking 
behaviour target tracking mutual inhibition 
mission target tracking examples 
integrating deliberative reactive behaviours 
ensure clause 
chapter appendix mission syntax appendix uml diagrams bibliography list figures 
decomposition robot operational software horizontal structures 
decomposition robot operational software vertical structures 
smpa cycle 
image processing steps top bw camera images middle laplacian images bottom disparity map navigation module 
simulator screenshot views left right cameras collision sensor proximity sensor bird eye view white lines indicating field view cameras 
temporal connectors behaviours 
structure behaviour envelope 
simple example bump turn dotted line indicates inhibition 
graph behaviour network node descriptors 
behaviours representations numeric values start pseudo nodes ensure pseudo nodes phase pseudo nodes 
numbered boxes described text 

simple example target tracking analysis 
simple example target tracking analysis collisions dotted line indicates inhibition 
intermediate representation target tracking mission 
behaviour network target tracking mission 
behaviour network target tracking mission multiple instances behaviour 
behaviour network target tracking mission parameters 
reactive deliberative behaviours 
intermediate network mission ensure behaviour 
behaviour network ensure behaviour 
intermediate network mission ensure boolean predicate 
uml simulated robot 
uml behaviour envelope classes 
uml representations examples 
uml controllers vi chapter project part effort implement validate xe proposal tsotsos xe tsotsos particular focus presenting implementation mission specification language introduced 
background information placing context past current robotics research followed description xe robot control architecture theoretical foundation salient points major contributions claims 
brief overview representative current research similar focus helps put research context highlights relevance research major questions attempting answer 
second describe virtual reality environment mobile robot simulation designed implemented support research 
describe design implementation performance 
third describe network xe network behaviours concept 
concept described tsotsos xe tsotsos fleshed time important characteristics described integration data driven temporal constrain type behaviour interconnections detail supported experimental results 
context xe implementation mission specification language provides support task decomposition synchronization execution monitoring 
details formally defines language originally tsotsos xe tsotsos moving pseudo code 
examples 
thesis conclude overview original contributions brief description number limitations identified language solutions proposed 
series ideas directions research background sensing thinking acting parts robot function organized framework accommodate requirements robot performance multiple sensors uncertain processes conflicting goals planning 
basic control paradigms appeared organizing control systems intelligent mobile robot functional xe functional decomposition centralized behaviour decomposition distributed 
horizontal functional xe functional decomposition classical top methodology design existing autonomous robot systems 
approach breaks robot control problem separate components processed turn output module acting input 
components classical horizontal decomposition described hu see perception module gather information environment model module build environmental model robot perception environment plan module construct plan robot execute module moves robot plan motion controller module provide low level control robot sensing action perception model plan execute motor control 
decomposition robot operational software horizontal structures architecture known sense model plan act smpa cycle 
representative examples dudek 
main drawback functional xe functional approach inability react rapidly events changes environment current cycle come change observed cycle traversed action taken 
problem compounded fact architecture imposes module complex handle complex task robot intended perform leading long latency times 
imposing temporal constraints bekey partial solution comes price significantly increased software complexity 
reactive control xe reactive control paradigm decomposing action behaviour deliberative process similar views animal models intelligence especially study neuroscience psychology ethology 
researchers attempt implement results disciplines closely possible choose underlying details arkin dudek 
behaviour systems directly couple sensors actuators see simple example introduced deal difficulties encountered adapting classical planners deal low level robot control 
sensing build map explore wander avoid obstacle environment 
decomposition robot operational software vertical structures action particular problems reactive control systems trying address multiple goals classical planners attempt satisfy single goal time robots satisfy goals simultaneously safety processing input communicating executing motions tasks accomplished real time functional xe functional model computation suited task multiple sensors real time constraints robot sensors impose rapid data retrieval sensitive sensor data measurement rates rate data transmission sensor software system robustness low level system relatively insensitive conflicting confounding missing data robots sensors system performance degrade gracefully failure hardware software components extensibility controls system easily modified deal changes sensor task locomotive configurations addition new behaviours disrupt existing functionality best known influential reactive architectures subsumption control paradigm brooks consisting number behaviour modules arranged hierarchy different layers care different behaviours 
lower level layers control basic behaviours robot higher level modules control advanced functions introducing concept levels competence brooks 
levels competence avoid collisions wander environment explore world build map environment sense changes environment reason world formulate execute plans reason behaviour objects modify plans accordingly level competence includes subsumes lower levels 
behaviour emerges interaction various modules hard judge priori difficult prove performance timelines 
examples reactive control xe reactive control architectures see arkin dudek 
strong theoretical argument strict version subsumption tsotsos xe tsotsos tsotsos showing appropriate limited domain scaling human performance desired number enhancements permitted form intermediate representations hierarchical organization explicit representations goals attentive processes 
argument starts need visually recognize targets behaviour triggers proofs computational characteristics visual search comparison unbounded passive vs unbounded active search 
targets explicitly known help guide search search problem np hard knowledge target explicitly forbidden strict paradigm 
system take advantage theoretical results dickinson describes robot vision system achieves complex object recognition 
system uses layers behaviours performing planning object recognition respectively 
respects system considered precursor authors describing hierarchical behaviour architecture internal representations behaviours triggered read write internal representations 
important contribution domain advanced behaviour architectures lacks formal setting ideas applied single domain aware follow discuss issues 
important component robotic architecture language define missions 
yoav shoham shoham shoham especially proposal agent oriented programming new programming paradigm societal view computation shoham influential area 
paradigm key idea observation humans intentional stance abstraction mechanism representing world directly programming robots terms mentalistic intentional notions agent theorists developed represent properties agents 
view agent oriented programming system components logical system defining mental state agents interpreted programming language programming agents process compiling agent programs low level executable systems 
implementation agent language uses notions beliefs commitments capabilities 
agent specified set logical rules entering commitments executing capabilities terms sets beliefs 
language supports simple communicative actions exchanging agents 
extension davies increases communicative capabilities 
thomas elaborate implementation form planning communicating agents placa language addressed important drawback previous systems inability agents plan communicate high level goals shoham relationship logic programming language loosely defined 
case programming language said truly execute associated logic 
metatem concurrent metatem systems barringer fisher fisher temporal logic stronger claims respect 
execution agent program corresponds iteratively building logical model temporal agent specification 
possible prove procedure execute agent specification correct possible satisfy specification agent barringer fact programs expressed terms rules major limitation agent programming languages rao agentspeak rao apl 
expert systems goals may achieved easy analyze reason behaviour agent provide timing guarantees 
authors talk planning reality limited dynamically selecting predefined plans library 
number languages situation calculus mccarthy formal calculus situations favourite approaches problem reasoning time action plans 
golog levesque uses situation calculus define complex actions general systems extensively control mobile robots rwi nomad delivery tasks tam 
golog programs defined imperative programming language common language control structures 
actions domain specified providing precondition effects axioms 
precondition axioms state conditions action performed effects axioms specify action affects world state 
number extensions golog including congolog de giacomo de giacomo extension supports concurrency providing facilities concurrent program execution priorities interrupts exogenous actions program execution 
golog congolog number limitations mainly arising offline nature planning 
de giacomo congolog features additional facilities line planning sensing incremental execution appropriate developing robust high level control programs involve planning reactive capabilities 
labs similar directions proposal ubc lab mackworth 
colleagues developed control framework term constraint nets zhang 
framework formal model building hybrid intelligent systems situated agents 
robotic system modeled formally symmetrical coupling robot environment 
model formal semantics applying robot operating environment separately models dynamics robot plant robot control program environment 
total system may shown various properties safety liveness provable properties subsystems 
assumption robot environment form closed system may formally modelled strategy useful domains variables controlled 
albus researcher related path proposing rcs model architecture 
seeks include goal directed processes hierarchical decomposition goals attentive processes flexible control structure proof theoretic verification methods missing 
xe framework xe architecture proposed described tsotsos xe tsotsos tsotsos tsotsos seeks reconcile successful behaviour robot architectures results tsotsos show mechanisms early dogma attention goal directed processing necessary vision major sensor 
conceptual strategy control facilitates mechanisms 
language mission plan specification defined permitting integration deliberative reactive specifications proof procedure sketched determine particular behaviour set violates timing feasibility constraints specific mission 
unique method determining particular behaviour collection satisfy mission described 
research seeks complete specification proposed language mission plan specification realize implementation mechanism demonstrate process converting mission description behaviour network xe network executing mission simulated mobile robot 
subsumption style behaviour definitions behaviour acts directly physical world 
xe notion generalized world behaviour may act may internal logical representation external physical representation 
world added sense model plan act cycle create sense model plan act world xe sense model plan act world smpa cycle 
behaviour taken mean process uses input available representations causes effect may representations 
representations defined part agent 
behaviour represented smpa cycle 
behaviours may act external world manipulating physical objects causing robot move may act internal world robot 
behaviour may manipulate internal representations input internal representation making changes creating internal representation subsequent processes 
intermediate representations hierarchical organizations attentive selection explicit goals facilitated 
subsumption architecture realized architecture vice versa 
smpa concept part definition noted means decompose individual behaviours component parts 
partition robot functions centralized strategy 
usual approach achieving real time performance robotics avoid minimize role vision sensors visual analysis order realize real time operation 
claimed tsotsos xe tsotsos attentive goal driven vision capacity realize real time performance 
visual analysis previous researchers low resolution sensors khepera vision module consisting pixel linear sensor team implemented primitive form attentional selection vision selectively analyze parts visual world analyze degree required order achieve goal done ad hoc fashion resulting real time performance 
xe attempts include attentional selection goal driven processing principled manner broader scope 
behaviour internal external represented smpa cycle see 
concept smpa control criticized past criticism due single integrated control paradigm 
xe means decompose stages computation individual behaviours 
world act 
smpa cycle sense elements cycle defined plan model world contains representations event window action window 
event window accessible relevant portion representation system 
similarly action window opens set representations 
world node contains set demons monitor contents event window 
demons detect changes event representations relevant types act triggers activation behaviour 
way representations limited external world sophisticated forms intelligent reasoning permitted 
intermediate representations manipulated permit internal behaviours handled manner representations external behaviours 
sense process attempts extract event window stimuli interest perform level processing 
model representation domain sensed representation model associated subsets sensed representation 
plan process associates actions models determines appropriateness association 
act process invokes manipulation representation realizes behaviour acting action window world node 
behaviours execute autonomously parallel impose number limitations representations especially regarding integrity representation conflict resolution 
issue discussed 
address representation scheduler ensures behaviour write time behaviours may read time updates 
accomplished semaphores 
detail xe papers technical reports tsotsos xe tsotsos tsotsos tsotsos including exception handling behaviour augmentation scheme aspects novel ideas robotics literature implementation 
tsotsos xe introduces language mission plan specification permits integration deliberative reactive specifications proof procedure sketched determine particular behaviour set violates timing feasibility constraints specific mission 
capacity specify mission robot deployment provide flexibility required autonomous robot re structure internal behaviours response new conditions 
robotic control methods general lack procedures allow formal way predicting performance 
chapter mobile robot simulator system background replace experimentation physical robot addressing complicated issues limited resources sensory imperfections time lags mechanical characteristics limitations virtual reality simulators useful rapid prototyping behaviours missions developing testing new architectures 
context high investment high risk space missions ability simulate visualize possible execution outcomes plan development different circumstances critical success mission 
important goal robotic architecture science directed planetary missions provide scientists ability specify observe rover operation virtual environment mission tested refined safety comfort research lab final plan communicated rover autonomous execution 
system satisfy needs described comprise components simulation visualization plan execution 
robot simulator provide solutions common mobile robotics problems simple non experts flexible experts extend modify 
simulate kinematics rover locomotion manipulator mobile sensor systems provide sensory inputs correct ranges statistical distribution responses 
visualization module needs able generate replicas terrain robot located situ observations simulate camera views mechanical optical characteristics systems rover 
order able visualization module needs able represent variety terrain features texture mapping real images simulate varying lighting conditions 
plan execution component specific virtual reality environment rover executive ideally need aware running rover simulation 
implementation initial step research development virtual reality robot environment simulator designed common platform mobile robotics related vision research providing generic software components encapsulate robotics functionality low level vision algorithms complex virtual reality environment 
capabilities simulator flexible platform research development integration new capabilities different levels abstraction providing generic solutions common robotics problems implementation various holonomic non holonomic locomotion systems stereo vision 
components system easily extended modified order accommodate various requirements 
important step implementation components focus research desired features implemented process driven mainly current needs plan execution model evolving capabilities 
current implementation restricted representation obstacles essentially flat world design system allows easy extension worlds simulation environments movement research underwater flight orbital robotics 
layers abstraction simulated robot provides research level ranging low level actuator control high level vision single robot systems complex multi robot coordination 
date usual approach achieving real time performance robotics avoid minimize role vision 
sensors visual analysis order realize real time operation 
simulator intended stand basis research visual attention goal driven processing mobile robotics 
simulator designed provide solutions common mobile robotics problems designed simple non experts flexible experts extend modify 
locomotion package simulates kinematics variety common drive types including popular differential drive non holonomic car drive 
vision packages provide image processing map building handling 
package provides default functionality allowing quick starting point people need components outside area expertise 
vision system driven real time simulated opengl camera views 
seen camera system flexible allowing active vision tasks simplest example building panoramic images surrounding terrain backed collection image processing algorithms 

image processing steps top bw camera images middle laplacian images bottom disparity map navigation module important capability virtual reality system ability simulate multi agent systems 
capability implemented flexible manner robot different physical characteristics size locomotion system sensor array control strategy 
permits testing cooperative competitive behaviours 
examples potential uses include distributed map building cooperative behaviour evasion pursuit game competitive behaviour 
capability built system having mind research research 
virtual reality environment opengl due portability wide availability hardware support 
display consists configurable number windows represent views various sensors robot 
main window represents view rover main camera system mast mounted stereo system left right camera views single camera see 
optional windows represent proximity sensor readings simulating array sonar detectors commonly available commercial research mobile robots collision sensors depth information extracted stereo views 
display updated real time mechanical characteristics robot maximum speed acceleration locomotion system position displacement roll pitch yaw camera system simulating kinematics robot subsystems interaction environment 
level detail simulations sufficient purposes research details dynamics locomotor soil interaction simplified case interest research directions structure simple flexible designed extensibility mind 

simulator screenshot views left right cameras collision sensor proximity sensor bird eye view white lines indicating field view cameras simulator built modular fashion advantage expressive power object oriented software development methodology 
generic classes provided high level concepts involved terrain feature various objects landscape locomotor various kinds robot modules described kinematics sensor various means robots sample environment 
classes represent view physical reality provide generic public interfaces derived physical classes 
graphical display classes derived terrain feature provide implementation physical entities ground sky rocks 
order allow rapid development testing vision algorithms non realistic terrain features implemented textured cubes coloured spheres 
users add types terrain features order enhance realism simulation sand 
implementers terrain features define addition geometric graphic specifications characteristics interaction robots new terrain features visibility proximity sensors collision characteristics impact robot motion simulated robot collection sensors see appendix classes involved 
case sensor array contains collision proximity sensors stereo camera mounted mast 
simulated robot contains locomotion systems differential drive mobility system mast stereo camera system degrees freedom height roll pitch yaw 
simulate kinematics real locomotion system implementing limits acceleration speed angles rotation 
due fact mechanical systems general orders magnitude slower microprocessors provide time estimates motions formats control system query desired motion locomotor provide time estimate executing command control system query time left execute current command 
accept process commands modes blocking commands issued current command completed possibility emergency overrides non blocking commands executed issued commands process execution abandoned controller responsibility ensure consistency system 
order allow controllers varying degrees abstraction built accept commands level high level commands move forward distance turn left angle low level commands set left motor speed value robot simulator virtual reality environment main focus research consider significant contribution goal building vision mobile robots planetary exploration 
complexity level detail level similar systems available flexible design unique focus vision main sensor powerful tool research developments necessary framework place support easy enhancement virtual reality environment number directions addition kinds locomotion systems precise simulation kinematics involved motions addition new sensors manipulators 
chapter 
mission specification language intelligent agents capable executing variety missions face difficult task single mission systems 
generally strips planners provide sequences steps executed account motion sensor uncertainty including localization correction steps explicitly plan 
attempts capture integrate reactivity kind plan conversely structure behaviour systems way compatible planning varying degrees success 
modern mission specification languages chapter facilitate development robotic systems able reasoning planning able react environment able monitor mission execution integrate reactive deliberative behaviours programmed high level languages general systems developed characteristics clear separation deliberative reactive parts system special modules monitoring 
general reasonable approach introduces split definition capabilities system consequence fact usually reactive part system controlled mission programs systems generally high complexity leading engineering problems especially comes extending capabilities system new modules 
characteristic means monitoring implemented outside normal flow mission mission developer control 
different stages complex missions operate different constraints require different monitoring aspect user control flexible uniform manner 
language proposed tsotsos addresses issues context framework time providing normal temporal constraints characterize programming languages robotics control 
presenting language chapter aspects needed support language runtime chapter followed description implementation examples usage chapter 
exercise identify number shortcomings language potential solutions 
language sequences behaviours introduce mission specification language gradually series examples justify components 
simplest form mission series steps executed sequence start step step step step steps defined level abstraction simplest obvious thing actual behaviour names language 
number advantages ranging readability program ease implementation 
life easier attempts validate missions extract properties scope research 
grammar specifies formed missions mission start behaviour list behaviour list behaviour behaviour list behaviour temporal connectors simple temporal sequence obviously sufficient simplest missions temporal grouping constructs needed enhance expressive power language especially permits behaviours active parallel 
need able express parallelism connect events time 
default behaviour connector semicolon implies steps behaviours executed 
binary connectors illustrated graphically starts behaviours start behaviour starts ends second behaviour starts execution second starts time behaviour starts second optional time delay ends behaviours time ends behaviour ends execution second arbitrary number behaviours aligned start time time represented respectively 
example mission uses constructs start find landmarks starts localize go landmark track landmark starts starts ends ends 
temporal connectors behaviours resulting grammar mission start behaviours behaviours behaviour behaviour list behaviours connector behaviours starts optional time delay behaviour list list list list behaviour list behaviour connector starts starts time ends ends time null number grouping constructs phase grouping construct introduced called phase label sequences actions reuse similar function procedure call traditional programming language 
simple usage example planetary rover takes panoramic view environment localizes approaches target tracking marks position takes panoramic view note nested phases analyze target start phase panorama raise mast take snapshot turn camera degrees left take snapshot turn camera degrees left take snapshot turn camera degrees left take snapshot turn camera degrees left lower mast phase am raise mast find landmarks localize lower mast phase approach target go landmark track landmark phase analyze target localize panorama am panorama approach target analyze target associated grammar mission start phase def behaviours phase def null phase phase def phase phase phase id behaviours behaviour atom behaviour id phase id behaviours behaviour atom behaviour list behaviours connector behaviours behaviour list list list list behaviour atom list behaviour atom connector starts starts time ends ends time null number apparent language differentiate definitions stage execution stage 
problem soon apparent language benefit separation 
grouping constructs ensure mentioned aspect sets language proposed tsotsos apart aside able specify robot actions temporal relationships allows programmer planner specify aspects environment robot execution various stages plan 
include second grouping construct called ensure xe ensure primitive collection plan steps actions may associated clause ensure particular conditions met ensure position certain tolerance keep safe distance obstacles 
grouping constructs nested 
nesting permits sub phases mission proceed localized constraints tightening relaxing ensure clauses 
part ensure construct identical phase grouping construct 
ensure part contain types information ensure behaviours behaviours need execute duration construct parallel behaviours included prohibited behaviours behaviours execute time construct identified preceding similar logical operator traditional programming languages boolean clause boolean clause needs periodically evaluated duration construct frequency evaluation specified optional argument 
examples ensure behaviours obstacle avoidance behaviours tracking behaviours position validation behaviours 
similarly prohibited behaviours example yielding right way situation continuous motion critical 
boolean conditions expressions include comparisons values various representations representations mission specified values example minimum distance obstacles go certain value speed exceed maximum value battery charge decrease certain threshold 
grammar mission start phase def def behaviours phase def null phase phase def def null phase def def phase phase phase id behaviours id behaviours ensure time predicate behaviour atom behaviour id phase id id behaviours behaviour atom behaviour list behaviours connector behaviours behaviour list list list list behaviour atom list behaviour atom connector starts starts time ends ends time null number predicate behaviour preds boolean preds behaviour preds boolean preds behaviour preds behaviour id behaviour id individual arg representation id number symbol boolean preds boolean preds boolean preds boolean preds boolean preds boolean preds individual arg individual arg individual arg individual arg individual arg individual arg individual arg individual arg individual arg individual arg modify mission previous example take advantage new construct start phase panorama raise mast take snapshot turn camera degrees left take snapshot turn camera degrees left take snapshot turn camera degrees left take snapshot turn camera degrees left lower mast phase am raise mast find landmarks localize lower mast phase approach target go landmark track landmark phase analyze target localize panorama mission am panorama ensure speed approach target analyze target ensure speed ensure case identified sections mission important robot stationary describe mechanisms designed perform task 
note ensure clauses nested solution integrating various levels 
problem identified earlier absence clear separation declarative stage execution stage apparent 
implementer faced problem multiple ensure constructs decision taken interpret separate definitions invocations 
phases decision took considered declarations 
ensure constructs number possibilities exist 
decided consider definitions single execution stage mission 
obviously best long term solution suggest change mission specification language mission description starts list phase ensure definitions potentially labelled identifier keyword execution stage list behaviours phase ensure constructs contained start keywords connected normal temporal connectors default sequential execution 
solution explored research consider important observation warrants investigation 
behaviour parameters language missions define flexible important provide flexibility allow behaviours act various representations having link hard coded design stage case behaviour systems 
examples earlier turn camera degrees left find landmarks making parameters ad hoc manner require natural language understanding capabilities technically feasible scope research 
formal definition style traditional programming languages simple flexible candidate resulting grammar adds parameters behaviours form lists representations numbers symbols mission start phase def def behaviours phase def null phase phase def def null phase def def phase phase phase id behaviours id behaviours ensure time predicate behaviour args null individual arg behaviour args individual arg individual arg representation id number symbol behaviour atom behaviour id behaviour args phase id id behaviours behaviour atom behaviour list behaviours connector behaviours behaviour list list list list behaviour atom list behaviour atom connector starts starts time ends ends time null number predicate behaviour preds boolean preds behaviour preds boolean preds behaviour preds behaviour id behaviour args behaviour id boolean preds boolean preds boolean preds boolean preds boolean preds boolean preds individual arg individual arg individual arg individual arg individual arg individual arg individual arg individual arg individual arg individual arg start previous example phase panorama raise mast take snapshot turn camera take snapshot turn camera take snapshot turn camera take snapshot turn camera lower mast phase am raise mast find landmark find landmark localize lower mast phase approach target goto landmark track landmark phase analyze target localize panorama mission am panorama ensure speed approach target analyze target ensure speed ensure examples usage tsotsos necessity various constructs language justified 
note examples referenced pseudo code format 
implemented syntax sub chapter appendix examples chapter 
language implemented grammar slightly different tsotsos variants tsotsos tsotsos 
process designing lexical semantic analyzers minor omissions apparent 
example definitions phases specified grammar mission mission definition simply mission start behaviours indication phase definitions occur mission 
number definitions compressed increase readability result contradictory incomplete definitions reduce reduce shift reduce errors 
unresolved issues original presentation language issue behaviour parameters definition parameter possible system parameters rigorous definition clarified restricted possible parameters categories representations behaviours read write information representations natural choice example sequence find landmark find landmark interpreted system contains landmark representations labelled find landmark behaviour needs execute information contained representation execute information contained representation numbers certain behaviours take numeric arguments example turn camera turn camera mast specified number degrees move forward cause robot move forward specified distance 
symbolic arguments catch type argument cases appropriate example subset particular representation needs addressed data required explicitly exist system function call needed generate 
example case representation arguments designer decides single landmark representation form list landmark data structures 
case symbols need resolved time mission processed 
issues raised various types parameters implications design system discussed thoroughly chapter 
chapter 
behaviour networks behaviour interaction various methods proposed handle interactions conflicting incompatible behaviours output arbitration behaviour coordination mechanisms mutually exclusive behaviour execution conditions arkin 
tsotsos xe tsotsos original xe proposal offers hybrid solution locking representation level ensuring multiple reads single write output arbitration actuators specialized arbitration behaviours associated actuator representations behaviour incompatibilities resolved representations collision behaviour supposed mark fact path target available target approach behaviours take appropriate steps stopping obstacle avoided control flow exceptions 
quickly review options available desire evaluate appropriate solutions particular implementation mission specification language followed discussion justification chosen solution 
thorough review see aspects taken consideration detailed structure behaviours complex interactions behaviour augmentation exceptions discussed issues important progress study little bearing language results chapter represent done cooperation andrei see implementation purpose mainly interpret mission translate meaningful network behaviours 
course great care taken making sure solution proposed interfere aspects worth mentioning similar analysis important aspect compatible aspects presenting 
arkin dudek contain detailed discussions topic general setting 
competitive methods behaviours active time conflicts independent responses result 
competitive methods provide means coordinating behavioural responses conflict resolution viewed winner take network output single behaviour prevails directs robot 
competitive strategies literature grouped broad categories 
arbitration requires coordination function serving arbiter select single behavioural response arkin 
common approach arbitration takes form fixed priority network strict behavioural dominance suppression inhibition brooks mataric 
action selection methods maes allow behaviours compete activation levels driven agent goals incoming sensory information fixed hierarchy established 
lateral inhibition possible implementation 
propose voting system behaviours generate actions vote predefined set discrete motor responses 
arbitration takes place winner take fashion single action votes executed 
tsotsos proposes arbitration behaviours associated robot actuators specify function 
take number forms ranging simple priority schemes complex decisional mechanisms discuss overview cooperative schemes 
cooperative methods cooperative methods attempt fuse outputs multiple behaviours providing ability concurrently 
key methods finding representations possible 
potential field methods khatib krogh latombe provide useful formalism vector weighted summation superposition favoured methods 
behaviour blending discussed theoretically 
method results tasks involve physical motion manipulation navigation vectors natural representation task 
unclear method extended types tasks confidence correct predictable results obtained 
discussion case number special circumstances taken account discussing behaviour integration generally behaviour systems 
behaviours connected hard coded networks basically forming behaviour systems internal representations form mission dynamical networks temporal constraints 
behaviours cases certainly execute parallel 
representations store kinds data sensory input internal state including processed sensory input actuator data 
wide variety possible types data stored representations associated rules update size fits solution 
arbitration appropriate simple behaviour systems due strict ordering behaviours hierarchy sufficient distributed decentralized system 
argued predefined priority network inappropriate due fact unable distinguish tsotsos priority due emergency priority due logical sequence events priority due execution causal chain events plan arbitrary priority break deadlock suggested tsotsos problem solved meta rules associated nodes structure avoiding problems raised large centralized meta rule sets expert systems 
action selection interesting method shows promise unclear reactive deliberative aspects mission integrated theoretical argument suggesting capabilities exceed behaviour systems 
benefits integrating solution unclear significant preliminary theoretical completed attempted 
intuitively accomplished relative ease defining appropriate activation behaviours making daemons sensitive thresholds input values rate change 
spirit voting systems incompatible focus generating actions dynamically take robot wide variety goals wide variety missions selecting predefined list actions 
voting systems suffer severe scalability problems unclear system deal complex internal representations actions data written result reasoning process complex algorithms way selected predefined list 
cooperative schemes mentioned appropriate direct motor output carefully advantage schemes 
example application requires traversal partially unknown terrain integration traversal obstacle avoidance provide better results competitive solutions 
safety reasons obstacle avoidance take precedence motion target obstacle avoidance system aware goals significant negative side effects 
hand integrating usage goal type information obstacle avoidance behaviour problematic engineering point view reducing reusability behaviour increasing significantly complexity undesirable especially safety critical behaviour 
solution offered cooperative integration allows system follow goal avoid obstacle minimizing impact behaviour side effects 
fairly obvious discussion traditional schemes entirely appropriate needs 
mentioned earlier tsotsos xe tsotsos original xe proposal offers hybrid solution locking representation level output arbitration actuators resolving behaviour incompatibilities representations control flow exceptions 
mandatory line defence system protect representations inconsistencies due simultaneous writes reading updates time allowing multiple reads occur parallel 
easily accomplished traditional resource sharing mechanism semaphores techniques consequences extensively studied discuss 
specialized arbitration behaviours associated actuator representations representation matter special way actuators represented done levels ranging plain priority schemes complex decisional heuristics 
simple priority schemes route possible implementations opinion simpler approaches lead results 
creating arbitration behaviours implement simple priority scheme advisable number reasons representation needs arbitration introduce extra behaviour number representations equal number behaviours need arbitrated store intermediate results adding complexity system reducing reactiveness decision particular behaviour delayed behaviours allowed execute results may discarded increasing system load 
behaviour write multiple representations potentially priority scheme need extra mechanism ensure decisions consistent trivial conflicts sets behaviours representation complex problem decisions taken disjoint sets behaviours 
arbitration behaviour needs updated new intermediate representations created time new relevant behaviours added system reducing benefits behaviour schemes new behaviours added system modifications behaviours 
extreme complex arbitration behaviours addition inheriting ones mentioned suffer significantly difficult problems caused mainly fact arbitration behaviour aware reasons behaviours activated reasons attempt update representations way aware state system relative priorities conflicting behaviours goals priorities name just 
solution impractical easy see arbitration behaviour growing complexity point complex behaviours attempting arbitrate argued smart discard arbitrated behaviours complex piece code 
third idea tsotsos resolve behaviour incompatibilities representations 
example collision behaviour triggered collision sensor representation supposed mark fact path obstructed path behaviour know needs path cleared new path 
idea significant merit general applicability questionable conceptual level practical engineering level 
conflicts arise high level behaviours target approach low level behaviours obstacle avoidance need resolved general favour low level behaviours ensure safety integrity robot environment 
proposal implications low level behaviour necessarily fast real time process burdened having write representations trigger conflicting high level behaviours signalling example path blocked 
low level behaviour needs aware state system current goals order know information needs write representations 
scheme hard codes relationships unclear flexibility built adapted varying needs various stages mission consistent rigorous fashion 
issues involve high level decisions messages outside area expertise low level safety critical behaviour 
argument intended discard idea completely obvious applicability limited interaction behaviours level complexity similar types expertise 
unclear proposals address list prohibited behaviours ensure clauses consistent manner 
solutions deal problem behaviour specific knowledge network building process making process inconsistent error prone hard maintain 
tsotsos personal communications indicates preferred method handling conflicting situations exceptions 
chosen implement method number theoretical practical questions scope research need answered proceed direction 
behaviour needs able detect failures order generate exception unclear theoretical limits doing incomplete incorrect data provided real sensors 
exception handling tends complex heavy handed approach control flow thorough analysis performance issues undertaken 
initial answers questions implementation exception handling mechanism available time research undertaken 
final results available language exception handling mechanism need integrated important items identified research 
proposed solution apart representation integrity scheme deemed mandatory difficulties associated methods led solution simpler conceptually add significant overhead system flexible decentralized updated dynamically runtime spirit distributed behaviour systems 
propose distributed priority scheme mutual inhibition behaviours 
accomplished attaching behaviour list incompatible behaviours daemon decides behaviour execute inhibition requests sent 
behaviours deemed incompatible decision rest designer specific application constitutes undesirable interaction behaviours context desirable 
proposal addresses previously identified problems having characteristics information distributed system associates list incompatibilities behaviour 
avoids scalability problems caused searching large space priority rules rules implemented level abstraction desired 
decision priori 
means system burdened executing behaviours results discarded possibility different decisions taken different representations resulting inconsistencies avoided 
information dynamically updated 
means scheme flexible adapted needs particular stages mission 
network building proceed knowledge structure behaviours representations involved 
requests inhibition reactivation treated locally easily paired 
scheme compatible approach 
designer system free approach deemed appropriate solve particular problems arise restricted decision 
problems identified previously addressed claim solution best efficient situation inherent flexibility scheme ensures powerful address issues discreet stand way solutions appropriate 
show example successfully integrate scheme behaviour cooperation advantage strength methods 
argued certain extent poor implementation exception handling 
claim case reasons 
exception handling special consideration list prohibited behaviours specified ensure clause solution integrates naturally see 
scheme rely behaviours able detect failures 
incompatibilities behaviours result failures behaviours incompatibility application desirable interaction 
discussion somewhat limited scope research number cases relevant behaviour augmentation exception handling taken account confident proposed scheme interfere may facilitate implementation 
analysis taken reports ongoing research capabilities research investigates issues performance stability reaction exceptional states deadlocks extended behaviours concepts including behaviours triggered changes representations representations read written behaviours temporal connections behaviours form network xe network behaviours defines functionality robot 
order allow flexibility required static hard coded network scenario mission specification language need define elements form connections structures support behaviour runtime 
xe definition world smpa architecture extended include external physical world set internal representations 
extended definition world added smpa cycle create sense model plan act world xe sense model plan act world cycle see behaviour represented cycle 
behaviours read information act physical world manipulators robot motion internal world representations 
intermediate representations hierarchical organization attentive selection explicit goals facilitated fact enforced argued tsotsos xe tsotsos 
rest thesis term pure behaviour describe smpa part cycles actual code implements functionality behaviour behaviour extended behaviour composite object comprising pure behaviour additional data structures needed execution integration networks behaviours 
extended behaviours composed see appendix pure behaviour lists input output parameters behaviour incompatibilities triggering conditions daemon behaviour status representation 
note extended behaviour structure included big hexagon surrounding represented input output representations pale yellow connected thin arrows incompatible behaviour small hexagon connected dashed arrow trigger representation pale connected thick arrow 
conventions arrows hexagons behaviours rectangles representations 
describe justify component extended behaviour show wrapping provides flexibility argued 
pure behaviour 
structure behaviour envelope pure behaviour blue code implements desired functionality reading input representations performing task writing results may representations 
pure behaviour corresponds smpa part smpa cycle defined 
basic units mission specification language deals behaviours representations language constructs manipulate internal structure pure behaviour structure relevant discussions follow treat pure behaviour atomic entity 
important remember just convenient approximation context reader pointed important discussions structure behaviours tsotsos xe tsotsos tsotsos tsotsos 
behaviour parameters mission configures network particular topology depending configuration pure behaviours representations implement different functionality 
allow flexibility necessary accomplish pure behaviours representations need decoupled pure behaviours direct hard coded representations go intermediate data structure list representations yellow 
list set part network specification introduces extra level indirection code data 
clarity list representations pure behaviour needs split input list containing pointers representations behaviour reads output list containing representations behaviour writes 
course overlap possible separation somewhat artificial 
daemons order behaviours execute changes relevant representations detected task accomplished daemons act triggers dormant behaviours grey 
connection daemons representations monitor defines control flow system need flexible user needs able configure connections modifications pure behaviours daemons 
accomplished associating daemon list representations monitor marked triggers 
structure list identical parameter lists 
due uniform representation daemon mechanism handles internal external changes manner 
daemons introduce long latencies overhead general rule code daemon performs simple test representation interested changed execution behaviour behaviour implement code verifies changes relevant appropriate 
implementation daemons monitor representations changes provided reuse mechanism evaluates boolean expressions sub chapter significantly complex trigger conditions implemented desired 
see daemon monitoring representation mechanism implement temporal constraints 
behaviour status complexity possible interactions behaviours requires behaviour envelope provide status representation green observed behaviours daemons 
status representation encapsulates information behaviour running execution complete successful mutual inhibition behaviour integration scheme status representation indicates behaviour inhibited stores information needed resolve ambiguities result behaviours issue inhibition reactivation requests 
nested ensure clauses obvious description language ensure grouping constructs nested raises question solving potential incompatibilities inconsistencies integrating different predicates ensure clauses 
issue complicated significantly fact behaviours different nesting levels execute parallel 
identify different execution circumstances specific requirements analyze investigate possible solutions 
structure mission behaviours belonging outer ensure clause execute parallel inner ensure behaviours inhibited activated allowing inner ensure clause take precedence 
boolean predicates attempt merge levels inner loop evaluates compound expression unfortunately semantic information impossible determine conditions take precedence case test involves representation arbitrary scheme leads unpredictable inconsistent behaviour need declare inner take precedence effectively shutting evaluation outer expression asking mission developer provide complete sets conditions ensure clause 
situation significantly complex case outer behaviours execute parallel inner ensure behaviours behaviours inhibited active time shut evaluation outer boolean predicate 
case presence conflicting behaviour requirements resolved favour inner set condition identified flagged error network building process 
solution different boolean expressions complete predicates level needed task deciding action taken case failure accomplished exception handling mechanism 
strong argument integration exception handling mechanism language form try catch type construct allowing customized actions attached specific groups behaviours mission stages 
behaviour life cycle number critical events occur lifecycle behaviour detail show place execution modes purely reactive mission 
lifecycle behaviour begins activation point system thread allocated thread pool daemon begins executing 
daemon reads list precondition representations trigger representations monitors changes 
daemon simplest form dictated desire simple fast low overhead course reusing ensure boolean expression evaluation mechanism significantly complex preconditions tested require significant additions mission specification language investigated 
behaviours involved complex temporal relationships defined mission triggering mechanism works change just important add appropriate status representations list trigger representations 
pure behaviour preconditions met daemon start 
tasks completed start sending inhibition requests implementing priori behaviour integration scheme desired verifying temporal preconditions met daemon monitors updates representations nature verifying changes detected triggering representations relevant 
options exist code located pros cons discussed implementation chapter 
mentioned daemons limited decisional capabilities task pure behaviour ensure needed changes detected daemon relevant 
conditions met pure behaviour return control daemon daemon continue monitoring preconditions 
pure behaviour decides execute appropriate parameters read list envelope code executed 
smpa cycle control returned daemon setting relevant status flags 
framework addresses number limitations behaviour systems particular separation pure behaviour code performs desired function triggering conditions input output representations allows system tackle complex problems containing temporal sequences consistent flexible manner 
example types examples 
category illustrates fact implement behaviour systems examples mainly illustrate constructs involved behaviour networks familiar setting 
second category examples missions illustrating process converting mission programs behaviour networks 
review similar figures follow behaviour envelopes represented hexagons hexagon structure corresponds representations rectangles 
solid arrow behaviour representation signifies behaviour writes representation 
thin solid arrow representation behaviour means behaviour reads representation thick arrow means behaviour triggered changes representation reads 
dotted arrow behaviours means source behaviour inhibits destination behaviour 
simple example consider bump turn navigation controller 
representations needed collision sensors locomotion system case examples simulated differential drive 
default behaviour robot wander drive forward constant speed 
collide behaviour daemon monitors collision sensor representation change detected default behaviour inhibited avoidance moves performed 
wander default collide 
simple example bump turn dotted line indicates inhibition locomotor involve sending commands locomotor representation move away obstacle turn random angle random direction accomplished sending different commands wheels locomotion system random time accomplished higher level instructing locomotor turn robot specified number degrees 
turn collide behaviour terminates default behaviour reactivated 
simple nature easy see addition representations map current robot location behaviour map updating transform robot builds map environment having extra behaviour mark location obstacle map 
chapter implementation experimental results implementing system number design decisions taken justified appropriate 
highest level process converting mission network behaviours consists steps parsing mission program translating intermediate representation determining complete set behaviours representations generating behaviour network steps detail introducing tools data structures designed justifying design decisions 
secondly discuss problems earlier solved implementation temporal constraints nesting ensure constructs number examples implemented course research starting static networks illustrate general capabilities continuing number missions presentation intermediate steps case 
examples discussed drawn highlight limitations language form 
parsing missions intermediate representations transforming mission program network xe network behaviours complex process doing steps helps manage complexity time creates necessity intermediate representations correspond extended behaviours 
call behaviour network node descriptors intermediate representation graph connects 
structure graph closely mimics structure behaviour network 
behaviour network node descriptors graph form describe parser xe parser generates graph 
behaviour parameters numeric parameters seen restricted behaviour parameters possible types numbers representation names symbols 
see implemented discuss implications design decisions 
numerical parameters needed express commands turn camera move forward keep spirit values need stored representations purpose introduced class sole purpose store numerical values 
define class named needs subclassed provide required data storage services representations store just number 
classes inherit class named simply representation provides basic locking services earlier 
instantiated new numerical parameter appears mission behaviour node descriptor stores pointer parameter list 
course solutions possible fall broad categories behaviour specific parsing parser identifies behaviour information provided system identifies appropriate representation data item representation inserts value 
special case code stores numerical parameters system retrieves appropriate behaviour request solution number serious problems serious fact value set mission parsed early execution cycle guarantee representation changed execution mission 
process identifying appropriate representation simple may having resolve ambiguities information available runtime 
solution palatable contradiction spirit presenting serious problems software engineering point view 
testament expressive power framework course research able entirely avoid special case code able express concepts framework 
behaviour parameters representation names parameters representation names parameters spirit language originally making language consistent structure functional constructs behaviours proposed originally tsotsos data constructs representations 
solution relies representations implemented singleton single instance classes name representation class uniquely identifies representation 
main disadvantages approach fact exposes internal organization data mission programmer desirable goal missions programmed scientist don need need know details fact solution applied case singleton representation paradigm abandoned 
subtle consequence approach granularity representations 
high level complex representations need parameters substructures mechanism accomplish 
hand high granularity representations means singleton solution appropriate multiple instances low level data structures needed represent objects appear repeatedly environment list landmarks targets 
behaviour parameters symbolic parameters problems revealed led investigate second solution representation behaviour parameters language definition high level symbols parsed translated appropriate data pointers 
may little syntactic sugar top previous solution number advantages immediately apparent 
high level symbols allow mission scientists describe missions domain specific language having bother implementation details solution require representations singletons providing flexibility investigations fit hierarchical representations symbol translated pointer sub representations desired level 
disadvantage approach fact relies translation process arbitrary definition symbols particular application domains reduces portability missions 
different solutions investigated number advantages disadvantages apparent solutions incompatible coexist language specification allow desired low granularity representations access internal structure 
art system design rests deciding finding appropriate balance 
innovative hierarchical organization solution granularity representations proposed solution provide formal framework organization representations provides answers questions raised 
theoretical aspects proposal completed important integrate approach mission specification language 
behaviour network node descriptors intermediate graph nodes encapsulate information type node identity node parameters temporal relationships involved 
describe paragraphs 
nodes intermediate representation types corresponding various language constructs 
behaviour nodes representing extended behaviours storing information identity type pure behaviour lists input output parameters identical ones 
phase nodes simple place holders behaviours defined part phase nodes similarly place holders behaviours defined part ensure xe ensure construct storing information content ensure clause xe ensure clause 
facilitate representation common merger divergence points example start phase start pseudo nodes defined 
store information mainly anchor points behaviours phases grouping constructs 
node exception start nodes identity phase nodes labelled name program behaviour nodes labelled name behaviour class 
node intermediate graph lists nodes temporal relationships forming doubly linked graph nodes 
forward links traverse structure order generate behaviour envelopes backward links serve basis automatically generating trigger lists 
important task parser xe parser associate ensure clause information construct 
seen language introduced categories information list behaviours need run list behaviours need inhibited boolean expression needs periodically evaluated duration ensure xe ensure clause pseudo nodes appropriate data structures store information 
boolean expression transformed tree representations values leaves comparison logical operators nodes 
tree format expected class role traverse tree evaluate expression processing data structure needed 
mentioned earlier desired class reused daemons implement complex triggering conditions possibility explored 
parser xe parser implemented standard lex yacc tools reads mission specification transforms graph behaviour network xe network node descriptors 
grammar detail chapter appendix parsing process fairly straightforward complication introduced fact phases ensure constructs repeatedly 
issue dealt inserting phase ensure definition tables phase ensure mission definition retrieved copy placed graph 
inlining natural solution context xe controller treating line sequences similar function call awkward introduce unnecessary level complexity control flow time making difficult associate execution behaviours validation associated ensure clauses especially groups potentially executed part different ensure xe ensure constructs time 
simplifies efforts add mission validation code 
limitation introduced fact parsing single pass permitted symbol definition 
restriction captured grammar appropriate error generated user attempts 
limitation introduced inlining fact prohibits recursive grouping constructs 
parameters node descriptors introduced notion lists input output parameters 
detail process transforming list mission parameters list parameters associated behaviour descriptor node 
behaviours representations applications hard coded fashion seen link certain behaviours representations change link motion behaviours associated actuator representations link certain sensor representations associated behaviours behaviour needs know default parameters mission program needs provide parameters different 
difficult know behaviour design stage parameters going fixed mission control decided simplifying convention list parameters mission developer omit parameters identical hard coded value replace null parameter similar concept default parameters programming languages 
general convention default parameters list omitted parameters default value empty parameter list provided 
mentioned behaviour node descriptor list parameters filled parsing process pointers appropriate data structures null pointers second stage network generation resolve conflicts ambiguities creating extended behaviour 
networks node descriptors mentioned decided break network building process steps transforming information mission program intermediate representation going desired network behaviours 
provides example illustrate information 
mission parsed graph omits behaviour parameters concentrates temporal connections nodes pseudo nodes 
mission behaviour representation names irrelevant context abstracted replaced respectively replaced numeric values 
clarify relationship mission graph add index symbol 
start phase phase ensure figures representing intermediate graphs arrows represent temporal connectors convention regular arrows double arrows dotted arrows representing respectively followed starts ends relationships 

graph behaviour network node descriptors 
behaviours representations numeric values start pseudo nodes ensure pseudo nodes phase pseudo nodes 
numbered boxes described text 
box represents high level structure mission start node followed node followed node 
node associated boolean expression evaluated box temporal connectors behaviours need run time node box connected starts ends connectors 
list behaviours need inhibited duration stored box temporal connectors 
solution needs include evaluation boolean expression execution required behaviours inhibition incompatible behaviours normal framework possible 
deal issue generating network behaviours 
boxes instances phase behaviour followed behaviours start parallel followed consecutive behaviours inlined graph described box phase behaviour followed phase followed behaviour 
box represents high level structure ensure construct behaviour phase behaviour phase behaviour 
aid synchronizing various components stage enclosed pair start nodes 
intermediate representations networks behaviours process transforming intermediate graph behaviour network xe network involves traversal graph generation appropriate behaviour envelopes 
part straight forward intuitive process interesting aspects handling behaviour parameters conversion list behaviour nodes associated ensure clause xe ensure clause evaluation associated boolean expression 
behaviour parameters behaviours initially built default parameters task accomplished default constructor behaviour envelope class 
real parameter list intermediate representation scanned non null entries 
replace defaults behaviours fully prepared execution 
start pseudo behaviours design decision translate start pseudo behaviour descriptor nodes special start behaviours simply exit marking successful completion status representation synchronization purposes 
done order singular entry exit points grouping constructs aiding understanding debugging process 
preceding statement refers fact pseudo behaviours functional role contain debugging code useful development new missions 
sake functional efficiency optimization module added stages eliminate pseudo behaviours point need debugging help provide prevailed kept final design 
probably best solution provide option allows programmers selectively include exclude similar debug optimized modes traditional compilers 
compatible ensure clause behaviours far conversion lists behaviour nodes associated ensure clause xe ensure clause concerned order bring naturally xe framework simple solution designed implemented solves problems simultaneously 
solution stems form need process executes periodically evaluating boolean expression ensure clause 
simplest natural solution create ensure behaviour 
behaviour single task evaluate boolean expression evaluation fails generate exception 
exception handling mechanism early stages design implementation see details accomplished simply creating exception record inserting queue exceptions execution continues 
change exception handling mechanism place code simply inherit functionality needed minimal changes 
ensure behaviour connected starts type connection associated start behaviour ends connection associated behaviour ensure behaviour execute parallel behaviours 
behaviour brings ensure behaviours nicely framework 
prohibited ensure clause behaviours mentioned sequence behaviours ensure xe ensure clause encoded start pseudo behaviour 
prohibited behaviours listed ensure pseudo behaviour inhibition list transparently send inhibition requests activation requests execution 
ensures prohibited behaviours triggered purely reactive fashion result changes representations execution behaviours contained ensure clause 
behaviours run ensure clause xe ensure clause executing simply linked starts links ensure start pseudo behaviour ends links pseudo behaviour 
pseudo behaviours aspects language naturally integrated framework special case code written 
building complete behaviour network process determining set behaviours constitutes solution mission specification fairly straight forward due nature mission specification language uses behaviours part mission specification 
takes care planned part mission behaviours require supporting behaviours part reactive part mission order execute properly 
method proposed tsotsos determining set supporting behaviours robot adapted needs 
generic process sensor actuator representation behaviours read write included arbitration behaviours needed behaviours referenced representations included 
add mission specified behaviours including behaviours specified ensure clauses create list representations read locate behaviours write include mission 
continue process required behaviours representations included 
perform similar process representations written 
behaviours connected representations temporal constraints form directed graph 
add node worst case cost proof theoretic methods applied order guarantee mission timing specifications important items 
process gathering information application encapsulated class subclasses individual applications see appendix 
mission applications controller initiates process parsing program building network keeps track system default behaviour ensures placed network appropriate temporal connections 
behaviour life cycle implementation seen earlier number critical events occur lifecycle behaviour provide details implementation concepts 
lifecycle behaviour begins activation point system thread allocated thread pool daemon begins executing 
purely reactive configurations daemons execute parallel time threads allocated system startup action needs taken shutdown 
mission configurations tend larger numbers behaviours problem due heavy demand threads put system 
distinguish types behaviours included system behaviours explicitly specified mission program supporting reactive behaviours included iterative procedure described 
principle applies purely reactive systems associated daemons need execute times 
case due existence temporal constraints order activation predictable reuse threads just possible recommended idea behaviour starts executing behaviours temporal connections activated assigned thread daemon starts executing 
behaviour completes task thread returned thread pool behaviour dormant reactivated 
daemons read list precondition representations trigger representations monitor changes 
changes detected tasks performed pure behaviour execute main functionality 
task relevant mission configurations verify appropriate type temporal relationship signalled detected change behaviour status representation 
code implemented behaviour envelope facilitate code reuse conceptually type task pure behaviour responsible 
test trivial involves matching appropriate flags status representation expected values temporal constraint timestamp relationship involves delay start time constraints 
second test needs performed triggering representations 
daemon detects change representations nature changes verified changes relevant task accomplished pure behaviour area expertise information necessary take appropriate decision available 
time inhibition requests need sent task delegated behaviour envelope 
mentioned inhibition requests matched accomplished adding status representation simple counter inhibition request increases counter reactivation request decreases counter behaviour reactivated counter reaches zero 
application demands complex matching schemes easily implemented top mechanism sub status representation behaviour envelope classes overriding appropriate functions 
pure behaviour completes cycle execution smpa cycle control returned daemon number housekeeping tasks performed setting status flags done pure behaviour sending reactivation requests implemented behaviour envelope inhibition 
behaviour envelope role handle inhibition reactivation requests behaviours 
experimental results number behaviours implemented various levels abstraction ranging collision obstacle avoidance visually guided navigation target tracking 
behaviours chosen mainly purpose illustrating capabilities system way representative behaviours implemented mission real robot similarly problems solved missions simple toy problems 
missions implemented pure behaviour fashion course augmented availability internal representations mission illustrating flexibility approach proving fact planned missions behaviour systems incompatible framework naturally integrates need special constructs code 
representations controllers implemented figures appendix knowledge demonstration plan guided behaviour system require hierarchical architecture 
behaviour target tracking simple example behaviour network conventions introduced 
task consists visual identification target followed motion robot target target tracked camera system 
task executed repeatedly targets contained list targets 
representations contains list targets need located analyzed 
contains description current target colour location status information analyzed contains stereo images captured camera system raw processed format actuators needed direct camera contains information position orientation camera system locomotor actuator robot differential drive system update target list locomotor goto target track target select current target 
simple example target tracking analysis scan target stereo camera image behaviours reads description target top target list updates representation reads description current target current stereo images directs camera mast rotate searching target reads description current target current stereo images directs locomotor move robot target reads description current target current stereo images directs camera mast rotate keeping target field view process started daemon behaviour detects updated initialized 
behaviour reads description target initializes representation accordingly declares current target red 
triggered information writes representation instructions turn mast analyzing resulting image red objects 
process continues red object centred field view simplicity omit behaviours get triggered case target located full degrees scan alternatives implemented behaviour selects target descriptor list current target descriptor reinserted lower list processing behaviour starts wandering randomly environment looking target 
target centred behaviour marks target acquired stops 
acquired flag triggers behaviours respective daemons parallel move robot target try keep target centre field view 
target lost process goes back 
monitors distance target depth information provided stereo camera system distance gets predetermined value target marked analyzed terminate 
change status target detected behaviour target descriptor available process starts 
behaviour target tracking mutual inhibition slightly elaborate example augment simple target detection tracking system handle collisions illustrating inhibition behaviours 
mission proceeds described previously additional representation behaviour pair see 
added representation corresponds robot collision sensors collide behaviour triggered changes representation 
associated daemon checks incompatible behaviour list sends instances behaviour inhibition request triggering 
particular collision sensors activated series evasive motions performed order clear obstacle 
motions completed behaviour stops reactivated 
update target list goto target locomotor track target select current target scan target stereo camera image 
simple example target tracking analysis collisions dotted line indicates inhibition collide elaborate examples capabilities including integration planning reactive behaviours role task information attentive processing investigations behaviour integration 
mission target tracking examples moving demonstrating capabilities mission specification language variations target detection tracking example externally provided programs hard coded networks previous examples 
mission extension mission underlying behaviour network nodes 
task identify targets move tracked camera system 
start ensure program consists repetitions sequence adopted convention behaviour names start representation names start sequence starts new target read target list current target representation initialized 
selection behaviour completes current target representation updated scanning behaviour activated 
identified target centred field view behaviour completes start time generating combined behaviour motion target target tracking 
previous examples mark target analyzed behaviours complete signal activate refresh target list process continues targets 
intermediate representation conventions introduced resulting behaviour network 
behaviour networks associated missions include temporal constrains explicitly represent behaviour status representation rectangle attached behaviour hexagon order represent connections 

intermediate representation target tracking mission box represents high level structure mission construct start pseudo behaviours box represents repeating sequence highlighted 
careful inspection behaviour network reveal similarities network surprising fundamentally mission layer complexity imposed temporal constraints 
ease reading interpretation presents subset real behaviour network including high level structure instance repeating sequence 
start pseudo behaviours labelled matching numbers ease identification mission stages 
start status start status stereo camera image status select current target status start status target list current target scan target status track target status goto target status update target list status status camera mast 
locomotor 
behaviour network target tracking mission concentrate repetitions sequence illustrating way multiple instances behaviour differentiated 
repetitions separated dashed diagonal line due complexity graph decided eliminate top level start behaviours include temporal triggering connections eliminating reads writes connectors representations trigger behaviours actuator representations 
status status 
behaviour network target tracking mission multiple instances behaviour easy see example phases greatly simplify program making mission modular easier read interpret modify 
example time list behaviours defined phase start phase ensure graphs similar ones figures addition phase nodes intermediate network associated start nodes behaviours 
example clearly illustrates shortcomings language proposed tsotsos language construct express repetitive tasks 
conditional version construct greatly increase expressive power language allowing missions stated repeat sequence steps targets analyzed boolean expression evaluator reused accomplish task part behaviour start 
third variation example behaviour parameters demonstrating power language construct expose shortcoming language lack parameterized grouping constructs 
start red target red target red target blue target blue target ensure blue target example mission scan specified target move tracking 
parser detects symbols red target blue target locates symbol table simply translates pointers appropriate representations 
course context singleton representations code modified class target previously generic class 
solution desirable implies class object needs represented second solution proposed symbolic parameters implemented targets selected list targets representation symbol table 
shows behaviour network phases targets represented components list representation 

behaviour network target tracking mission parameters translating graph behaviour network node descriptors behaviour envelopes pointer replaces default parameter behaviours process transparent pure behaviour point view 
targets cosmetic issue expand mission different targets sense phase describe sequence behaviours unfortunately language permit definition phases arguments 
integrating deliberative reactive behaviours demonstrating capabilities ensure clause discuss illustrate important issue integration deliberative reactive behaviours described theoretically chapter example mission 
process generating behaviour network includes step enumerates available sensors 
process identify collision sensor cause collide behaviour added network 
definition collide behaviour identifies behaviour incompatible robot collides obstacle behaviour inhibited allowing obstacle avoidance steps taken interference see 
start status start status collision sensor stereo camera image status select current target status collide status start status target list current target scan target status track target status goto target status update target list status status camera mast 

reactive deliberative behaviours locomotor time behaviours identified incompatible executing time collision case target tracking behaviour continue execute 
may important feature essential efficient functioning system minimizing side effects reactive behaviours case obstacle avoidance cause target lost causing needless potentially expensive new search target 
collide behaviour completed behaviour reactivated mission continues 
status status ensure clause reactive behaviours activated unexpected circumstances collision obstacle side effects significant consequences ability complete mission strict time constraints better avoid possible 
course reactive behaviours important role play especially maintaining safety robot environment provides mechanism expect unexpected ensure clause 
example previous example possible avoid collisions specifying ensure clause minimum safe distance obstacles execution proximity sensor obstacle avoidance behaviour 
expressive power language allows specify different minimum distances different stages mission multiple ensure constructs different parameters example imposing stricter safety limits target approach stage relaxing target analysis robot approach target deploy sensors 
start examine possible solutions simple mission red target red target red target ensure mission consists scanning red target followed approaching target tracking camera system 
add new behaviour takes argument minimum distance obstacles invoke part ensure clause 
ensure 
intermediate network mission ensure behaviour means network set behaviour connected starts ends temporal connectors pseudo behaviour representation list input parameters simple representation value 
behaviour daemon active duration pseudo behaviour monitoring proximity sensor representation instruct locomotor take evasive action obstacle detected closer specified distance 
inhibition directed ensures conflict behaviours try write locomotor representation 
purposes research investigated particular instance behaviour cooperation vector summation scheme 
behaviour write locomotor representation imposing speeds wheels differential drive provide offsets current values contributing equally final setting 
behaviour steers robot attempting take shortest distance target behaviour contribute offset inversely proportional distance obstacle steer robot away implementing simple form behavioural fusion goal attraction dominance see arkin 
obvious example schemes achieve desired result produces better results particular instance integration way behaviour know goal evasive actions takes interfere potentially causing robot get infinite cycle approach evasion 
illustrates process note inhibitory connections 

behaviour network ensure behaviour similar effect achieved specifying ensure clause readings proximity sensor exceed minimum value start 
ensure min proximity 
intermediate network mission ensure boolean predicate parsing process symbol min proximity associated representation pointer piece data stores minimum reading distance closest obstacle 
logical condition evaluated repeatedly ensure pseudo behaviour 
test fails exception generated handled 
chapter research provided description virtual reality environment mobile robot simulation designed implemented support research 
design implementation performance discussed detail 
similar environments available commercial research communities simulator provides real time operation multiple mobile robots simulating kinematics propulsion system motion constraints array sensors 
simulator unique fact geared research vision robotics simulating view board mast mounted cameras normal mechanical constraints imposed 
package vision processing routines available allowing users concentrate high level robotics tasks 
similar nasa claraty architecture simulator allows behaviours access robot different levels abstraction direct low level access actuators high level commands functional xe functional units robot camera system locomotor 
describe network xe network behaviours concept 
concept described tsotsos xe tsotsos fleshed time important characteristics described integration data driven temporal constrain type behaviour interconnections detail supported experimental results 
maes explore similar issues related extension capabilities behaviour systems behaviour networks 
maes dynamically creates network behaviours behaviour repertoire action selection mechanism spreading activation network preconditions goals behaviours execute level activation exceeds dynamic threshold 
approach interesting shows promise unclear reactive deliberative aspects mission integrated theoretical argument suggesting system capabilities exceeding traditional behaviour systems 
architecture aspects similar notion behaviour networks 
implementation separation responsibilities responsibilities modules verify world sequential preconditions modules perform actions terminology distinguishes pure behaviours 
activation flows system way traditional behaviour systems important addition temporal constraints 
results promising architecture find solutions simple local problems caused conflicts behaviours unclear system handle complexities real world missions solutions proposed scale large systems 
behaviour network concept ways similar ones investigated researchers details infrastructure behaviour interaction significantly flexible capable accommodating levels interaction simple behaviour interaction mission guided automatic generation networks framework little special code handle complexities introduced level 
investigated daemons easily adapted implement maes dynamic threshold activation 
context xe implemented mission specification language provides support task decomposition synchronization execution monitoring 
details language originally tsotsos xe tsotsos structures support run time introduce implementation 
examples 
process number aspects language clarified inconsistencies corrected number limitations identified 
original definition language distinguish declarative execution stage addressed part solution incomplete better solution proposed 
formally define notion prohibited ensure clause behaviours 
concept behaviour parameters extensively discussed pros cons various approaches investigated 
solutions implemented observed incompatible appropriate certain circumstances 
analysis revealed language lacks important features 
clearly defined declarative stage lacks parameterized grouping constructs permit definition explicit exception handling mechanisms relying predefined hard coded implementation 
language permit definition repetitive sequences repetitions predefined number known mission specification time 
research number additional extensions mission control language identified proposed investigation 
important area mission language xe proposal strengthened area exception handling 
useful provide mission specification language constructs allow structured exception handling form try catch blocks mechanism reverting defaults case explicit catch particular exception generated 
proposal major implications architecture exception handling mechanism tsotsos xe tsotsos early investigation design stages 
mechanism implemented analysed drawn performance potential limitations proposal natural extension topic research 
areas investigation relate language 
language implemented fairly cryptic intention plan automatically generated maintained higher level goals descriptions 
aspect investigated tests performed handcrafted mission descriptions 
set tools automate process allow human operators easily analyze understand modify monitor execution plans useful 
depending uses xe easily readable language desirable examples tsotsos xe tsotsos serve examples characteristics language 
shortcoming language identified research lack constructs conditional repeated execution 
natural place insert language extension form ensure xe ensure construct ensure xe ensure sequence behaviours executed repeatedly boolean condition clause true 
minor modifications parser xe parser pseudo behaviour enhanced verify termination condition existing boolean parser currently validation ensure clause xe ensure clause 
possible extension language comes form phases parameters allow missions contain sequences steps differ data process implementation involving number fairly complex steps fundamentally straightforward 
phase definition attached local symbol table order keep appropriate scope names virtual parameters inserted table point definition phase 
phase process creating graph behaviour network node descriptors actual parameters bound virtual parameters appropriate behaviours 
explicit declarative stages mission specification language important item 
exciting possibility opened integration opportunistic behaviour robotic mission 
going details consider appropriate type task mention powerful mechanisms visual attention hierarchical internal representations clear language able express process discovery expressing explore unexpected interesting rock detected previous step variables 
step direction fact behaviour envelopes contain configurable output representations programmatically bound variables open door interesting possibilities 
mentioned implementation daemons monitor representations changes provided reuse significantly complex trigger conditions implemented 
problem handcrafted controllers language specified missions extensions language needed allow programmatic control preconditions 
number theoretical issues need addressed probably important providing proof contention subsumption architecture realized xe vice versa tsotsos xe tsotsos 
great theoretical importance providing mechanisms verify plan timing constraints tsotsos presenting high level description promising approach 
shown chapter behaviours connected representations temporal constraints form directed graph 
add node worst case cost proof theoretic methods applied order guarantee mission timing specifications 
initial attempt specifying mechanism tsotsos xe tsotsos tsotsos 
direction crucial acceptance xe viable alternative traditional robot control architectures architecture aware provides possibility specify missions provide theoretic proof missions satisfy temporal constraints 
mentioned components virtual reality environment robotics research third plan execution focus research rover simulation environment visualization analyzed implemented level currently needed means trivial components deserve investigation collaborations mechanical engineering department complete kinematics simulator research issues rover soil interaction computer graphics department visualization existing data better simulation local environmental conditions realistic reproduction optical system characteristics beneficial 
significant amounts expertise exist organizations notably nasa significant investment years type system see edwards adding specific needs systems interesting avenue pursue 
course real test xe come development large scale vision missions physical robots point original claims architecture scalability verified 
appendix mission syntax appendix provide yacc syntax mission specification language token start token ensure phase string token string id phase id token starts ends token string token number symbol token eq lt gt left type string id phase id symbol type dval number type pointer boolean predicates type pointer individual arg mission mission start phases mission phases phase phases phases id behaviours ensure time predicate id id ensure ensure behaviours behaviour statement behaviour statement temp connector behaviour statement behaviour args individual arg behaviour args individual arg individual arg number symbol behaviour atom behaviour args behaviour list phase phase id id behaviour statement behaviour atom behaviour statement behaviour atom phase phase phase id behaviour statement phase id phase id behaviour list list list list behaviour args list behaviour args temp connector starts starts time time predicate ends ends number behaviour predicates boolean predicates behaviour predicates boolean predicates behaviour predicates ensure ensure behaviour predicates behaviour predicates boolean predicates boolean predicates boolean predicates boolean predicates boolean predicates predicate individual arg eq number individual arg lt number individual arg number individual arg gt number individual arg number individual arg eq individual arg individual arg lt individual arg individual arg individual arg individual arg gt individual arg individual arg individual arg ensure behaviour args ensure behaviour args mission start start mission appendix uml diagrams appendix provide simplified uml diagrams relevant subsets implementation 

uml simulated robot 
uml behaviour envelope classes 
uml representations examples 
uml controllers bibliography albus engineering mind proceedings fourth international conference simulation adaptive behavior animals animats cape code ma september 
arkin behavior robotics mit press barringer fisher gabbay gough owens metatem framework programming temporal logic 
rex workshop stepwise refinement distributed systems models formalisms correctness lncs volume pp springer verlag berlin germany june bekey inspired control autonomous robots 
robotics autonomous systems brooks robust layered control system mobile robot 
ieee journal robotics automation davies edwards agent integration aop kqml king college technical report aucs tr 
de giacomo lesperance levesque reasoning concurrent execution prioritized interrupts exogenous actions situation calculus 
proceedings fifth international joint conference artificial intelligence pp nagoya japan august 
de giacomo levesque incremental interpreter high level programs sensing 
logical foundations cognitive agents pp 
springer verlag berlin germany de giacomo lesperance levesque congolog concurrent programming language situation calculus artificial intelligence pp 
dickinson stevenson tsotsos olsson integrating task directed planning reactive object recognition spie vol 
intelligent robots computer vision xii pp 
dudek jenkin computational principles mobile robotics cambridge university press 
edwards laurence viper virtual intelligent planetary exploration rover proceedings th international symposium artificial intelligence robotics automation space montreal canada 
fisher concurrent metatem language modeling reactive systems 
lecture notes computer science springer verlag bonn germany june 
fisher survey concurrent metatem language applications 
lecture notes computer science pp springer verlag bonn germany july 
de boer van der hoek meyer ch formal embedding agentspeak apl advanced topics artificial intelligence lnai pp 
springer verlag 
hu bradley parallel processing architecture sensor control intelligent mobile robots 
robotics autonomous systems team sa switzerland khepera robot modules vision turret www team com robots khepera html khatib real time obstacle avoidance manipulators mobile robots proceedings ieee international conference robotics automation st louis mo pp 
krogh generalized potential field approach obstacle avoidance control sme ri technical ms society manufacturing engineers michigan latombe 
robot motion planning academic publishers boston levesque reiter lesperance lin scherl golog logic programming language dynamic domains logic programming 
special issue reasoning action change maes situated agents goals journal robotics autonomous systems mataric group behaviours proceedings workshop dynamically interacting robots international joint conference artificial intelligence ijcai chambery france august pp 
mccarthy hayes philosophical problems standpoint artificial intelligence mach 
intell pp 
mataric extending behavior systems capabilities behavior representation working notes aaai fall symposium parallel cognition pages north ma november 
mataric hierarchical architecture behavior robots proceedings international joint conference autonomous agents multi agent systems bologna italy july rao agentspeak bdi agents speak logical computable language 
maamaw lecture notes artificial intelligence pp netherlands 
payton fine grained alternative subsumption architecture mobile robot control proceedings international joint conference neural networks june pp distributed architecture mobile navigation working notes aaai spring symposium lessons learned implemented software architectures physical agents palo alto ca march pp 
supporting deliberation behaviour systems sc 
thesis york university 
konolige ruspini multi valued approach integrating planning control artificial intelligence vol 
july pp 
shoham agent oriented programming 
artificial intelligence 
shoham agent oriented programming overview framework summary research knowledge representation reasoning uncertainty pp 

simmons task description language robot control proceedings conference intelligent robotics systems vancouver canada october 
tam lloyd lesperance levesque lin marcu reiter jenkin controlling autonomous robots golog australian joint conference artificial intelligence pp 
thomas placa agent oriented programming language phd thesis computer science department university stanford ca august 
tsotsos xe tsotsos intelligence scaling problem artificial intelligence tsotsos xe tsotsos xe proposal ark internal working notes dept computer science university toronto june unpublished 
tsotsos xe tsotsos intelligent control perceptually attentive agents xe proposal technical report tr university toronto june 
tsotsos xe tsotsos intelligent control perceptually attentive agents xe proposal robotics autonomous systems july 
estlin das claraty architecture robotic autonomy 
proceedings ieee aerospace conference big sky montana march zhang mackworth constraint nets semantic model hybrid dynamic systems 
theo 
computer sci 

