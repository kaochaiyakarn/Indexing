pergamon grammatical specification human computer dialogue albert 
long 
vol 

pp 

printed britain 
rights reserved university twente department computer science box 
ae enschede 
netherlands received may revision received io november model humancomputer interaction partitions interactive application user interface dialogue controller application 
formal techniques implementing dialogue controller context free grammars automata 
modify shelf compiler generator yacc generate dialogue controller 
dialogue controller integrated popular window system create interactive application generator 
actions user drive automaton turn controls application 
compiler generators dialogue models humancomputer interaction formal techniques 
model interaction user application defined workshop 
model popularly called model shown fig 
partitions interactive application components presentation component refer user interface dialogue controller interface application 
presentation component fact user experiences user interface part interactive application seen heard touched spoken 
window technology improved dramatically resulting highly featured user interfaces 
application interface technology hand barely changed period 
quite difficult separate application user interface elegant way 
dialogue component responsible sequence events constitutes interaction user application 
term dialogue taken real world human human communication human human dialogue essentially different hu dialogue 
human human dialogue consists symmetric parties communicate output party input context plays crucial role meaning word highly influenced context 
human computer dialogue terms refers conversation parties parties symmetric context important may play role 
human computer dialogue 
usually specify input language user response computer application side effect 
sense accurate say dealing model humancomputer monologue 
avoid confusion terminology literature 
system provides tools design develop presentation dialogue components 
integrate components application called user interface management system uims 
uims conceptual model separates user interface dialogue application 
uims acts interactive application compiler compiler 
uims complies user interface dialogue specification application interactive application 
analogy dialogue specification user application constitutes source program 
application programmed directly user interface toolkit example lead complex difficult maintain non portable code 
control flow dialogue 
application achieved judicious selectivity widgets 
albert fig 

model interaction 
context free grammar specify dialogue parser generator yacc compiler compiler 
compile dialogue 
window system specify user interface 
components comprise uims 
yacc chosen generate dialogue controller reasons 
yacc available source code form easily modifiable 
yacc extremely popular 
yacc parses lalr grammars descriptive ll grammars 
yacc implemented window system 
shows possible build direct fuss inexpensive implementation uims clearly separates user interface dialogue application 
provides insight relationship components 
section briefly review various models uimss 
section describe compiler generator system yacc show yacc specify dialogue application 
section describe salient features window system point shortcomings system specifying dialogue 
build uims interface automaton generated yacc user interface need certain modifications yacc 
modifications explained section 
section explain application built new tool 
section 

formal techniques formal techniques advantages 
system formally specified analysed properties deduced 
system implemented specification readily reliably updated managed 
rapid prototyping enhanced 
problems formal techniques include firstly real world system specifications large complex possibly unreadable experts secondly specification style model may influence influenced implementation technique 
ideally specification independent particular implementation technique 
seminal green identified formal categories uimss context free grammar specify user interface transition network event driven 
fourth currently popular category formal called direct manipulation 
green presents algorithms converting formal specifications forms executable form 
finds event driven approach greatest descriptive power presents efficient algorithms convert grammar transition specification forms event driven specification forms 
approach particular advantage green advocates letting interface builder whichever approach considers best letting uims translate context free grammars transition networks event driven internal form 
formal methods transition network approach longest 
application approach user interface design parnas 
real implemen public domain version yacc called berkeley yacc 
grammatical specification human computer dialogue tations came mid jacob wasserman 
system scenario developed 
usual criticism technique verbose lacks abstraction networks unwieldy complex realistic systems 
event driven approach object oriented model data structures incoming outgoing messages handle input output structure dialogue defined arrangement objects protocol 
examples systems technique lo smalltalk system 
context free grammar approach name suggests formalism context free grammars compiler building 
approach consider dialogue component form translator specify dialogue context free grammar 
lexical level specify basic events example pressing key button position mouse colour choice window type window 
syntactic level structure dialogue specified terminals represent input user 
nonterminals determine structure dialogue 
semantic level application routines called 
routines may produce output 
lexical syntactical semantic levels mapped natural way model 
systems developed approach olsen dempsey 
system called user interface generator interactive system graphics 
system tokens represent graphical devices parsed context free grammar 
semantics grammar set data types define pictures displayed set procedures 
olsen dempsey address certain problem areas continuous sampling devices prompting user inputs cancellation rub processing 
ref 
olsen developed system called interactive push automaton 
predecessor implements syntactic component user interface manager attention paid interfaces lexical syntactical component syntactic semantic component 
contains extensions enable automata interactively 
additional kinds transitions introduced increase semantic control allow automaton change state input cater exceptional conditions 
context free grammar transformed interpreted example triggers associated sampled devices 
development carried ref 

dialogue controller integrated dynamic display model 
system called built study interface input sequence commands graphical feedback 
dialogue controller communicated logical input device handler constraint interpreter 
layout editor supports built 
scott context free grammar specify dialogue 
find conventional context free grammars unable specify important aspects dialogue multi threading context 
multi threading arbitrary interleaving concurrent conversations 
specify multi threading introduced parallel operators grammar 
parallel operators allowed productions forked 
forked production suspends current parser creates sub parsers processes continue parallel sub grammars tables 
problem context solved synthesized attribute 
attribute determined running processes receive particular token 
elaborate grammatical model incorporates event handling van den bos 
model hierarchy interaction modules 
uses input expression specify input sequence trigger certain user interface application task 
interaction module data structure local variables procedures links tasks 
structure obtained locally including definitions lower level modules 
modules lowest level define coupling physical devices 
system provides multi thread multi device user interaction context dependent prompting echoing 
feedback error correction expertise levels 
grammatical formalism van den bos powerful complex context free 
olsen scott yap extended ll grammars specify dialogue 
albert advantages top ll approach simple intuitive 
top approach lends action followed arguments style user interface commands 
parsing action determine unique production applied 
class extended ll grammars contained class lr grammars 
lr parsers differently ll parsers 
lr parser works states represent progress number productions concurrently 
number ll grammar 
lr grammar may choose ll style specification action arguments lot 
ll artificial restriction larger class languages specified lr grammar 
important point means user interface designer uses lr power specify dialogue 
example specify cancellation application directed dialogue quite easily lr grammar ll grammar 
general advantage grammatical approach lexical syntactic semantic levels naturally model tiers model formalism concise 
major disadvantages approach sequence user actions dialogue explicitly reflected context free grammar 
context free grammar artificially structured complex reflect structure dialogue 
approach awkward rigid 
semantics application implicitly specified application routine calls static requiring recompilation time change 
problem receives particular attention chimera system 
continuous devices easily handled 
parser know check sample device see setting changed 
user olsen reports student user interface designers difficulty applying formal language technique specify dialogue 
direct manipulation approach approaches formal 
approach referred interaction example user friendly technique building user interface specification language needs learnt user interface designer simply builds user interface interaction devices controls placed disposal 
general direct manipulation interfaces conform model 
problem arises direct manipulation requires semantics application brought closer user interface works clean separation 
greater separation responsibility user interface assume 
problems encountered fitting direct manipulation uims model possible solutions ref 

jacob ref 
introduces object specification language direct manipulation interfaces 

yacc dialogue specification context free grammar specification language yacc tool generates parser language 
yacc lalr parser generator 
generated parser translate input sentences language representation 
translation specified grammar 
parser translator generated yacc requires scanner read character input convert input tokens 
token representation symbol construct input language 
token may information attributed associated 
parser calls scanner new token 
parser referred shift operation 
operations reduce accept input error detected 
fig 
show role yacc schematically 
parser contains push automaton set tables semantic actions grammar 
tables actions created specification 
push automaton uses tables input token change new state 
process changing state semantic action carried 
action usually involves emitting piece translation code 
grammatical specification human computer dialogue yacc fig 

yacc compiler model 
specification yacc reads context free grammar ancillary code semantic actions 
quite straightforward specify dialogue user application context free grammar 
note doing specifying syntax application 
semantics application referred functionality contained ancillary code 
fig 
show structure system uses automaton generated yacc control dialogue 
consider example game 
game computer chooses random word tells user letters word 
user determine word guessing letters word making stab word 
letter guess computer tells user letter word appears word 
aim user determine word letter word guesses possible 
fig 
show syntax game yacc grammar form 
specification nonterminals upper case letter tokens underlined 
rules grammar consist nonterminal symbol left hand side terminal nonterminal symbols right hand side 
left right hand sides separated colon rule terminated semi colon 
different rules share left hand side nonterminal indicated vertical bar 
differ slightly standard yacc notation denote empty rule essence dialogue consists zero letter word guesses corresponding tokens letter word optionally terminated token 
complete specification game add dialogue specification application code form semantic actions 
example user guesses letter check ascii terminal fig 

yacc control dialogue 
albert hang list fini list fini list lxx fig 

part dialogue specification game 
letter tried word contains 
word contains letter check word complete fill letter 
code carry semantic actions added grammar 

window system window system years important standard platform window system graphical applications 
system hardware operating system independent network transparent 
window system application interact directly windows screen 
user communicates application generating events 
pushing button screen pressing key moving mouse example trigger event 
events linked parts application code 
event triggered corresponding application code executed control returns interface 
called callback 
user interface screen constructed widgets 
widget characteristics determine look interface 
types widgets visible screen 
visible generally referred windows act container widgets types widgets 
user interacts application widgets user interface keyboard mouse course 
semantics functionality application largely determined arrangement callbacks widgets 
note window application event driven principle events occur time application programmer enable disable widgets correspond parts application may may executed time 
note user control event results application called application finished control back user 
widgets configured application programmer changing global variables associated widgets 
variables called resources 
resources set application start files called resource widget creation time run time 
resource specifications set hierarchical structure widgets 
window application see fig 
loops continually waiting event 
event occurs callback associated event executed 
explicit flow control resource specification implicit 
hierarchy widgets creation deletion determine nature interaction user application 
consider example user interface 
define widget called test consists sub widget containing string old message sub widget containing string quit 
widget test shown fig 

build user interface simply need construct resource specification 
add application user interface 
click left mouse button user interface grammatical specification human computer dialogue fig 

schematic window application 
sub widget want string change old message new message click second sub widget want application terminate widgets disappear 
sub widgets called screen buttons strings labels 
build application simply attach callbacks resources respective buttons 
button example attach callback routine writes label new message calling widget second routine terminates application 
result clicking button shown fig 

control flow events generated user drive window application 
applications require frequent interaction user suited window system 
dialogue user application largely unspecified 
specified relationship widgets callbacks default user perform action time 
dialogue control imposed window application user interface level imposed application 
done way 
user interface application programmer control execution callbacks ensuring buttons screen available user 
widgets correspond callbacks may executed time switched 
window system provides mechanisms exercise dialogue control 
selective disabling callbacks second general shielding events outside particular widget 
selective disabling involves setting boolean resource 
resource true widget concerned respond action user 
problem grained application programmer explicitly widgets correspond callbacks may executed time 
second mechanism general shielding effectively widget 
mechanism coarse grained 
dialogue control window system generally ad hoc 
inadequate 
dialogue control programmed application 
achieved adding guards callbacks guard condition true corresponding callback executed 
value guard determined state application 
mechanism related traditional technique flags provide control flow 
overloads application mixes application code dialogue control 
methods dialogue control inadequate 
fig 

user interface message changed 
albert 
saw section application generated yacc consists automaton controls dialogue application routines 
automaton waits input user calls application routines directed rules grammar 
want yacc generate automaton interfaces window user interface modify yacc 
modifications necessary module yacc responsible generating automaton module responsible parsing grammar 
modifications 
automaton routine user interface 
error automaton fatal 
user able cancel part dialogue 
application able direct automaton 
user interface indicate user widgets active 
modifications yacc discussed 
modified version yacc called 

routine modification generated automaton 
traditional model see fig 
automaton requests token scanner time ready shift 
scanner slave automaton 
contrast automaton converses user interface needs scanner 
role scanner converting user actions tokens assumed user interface 
user user interface control automaton wait token user interface 
implement scheme making automaton routine user interface token representing user action formal parameter 
automaton shifts token carries reductions 
automaton goes waiting state 
remains state automaton called 
user terminates application automaton accept input automaton dies 

error handling yacc designed act syntax analysis tool dialogue generator 
consequence error handling automaton generated yacc inappropriate 
dialogue making incorrect action course result dialogue rejected 
fatal errors automaton 
keep dialogue specification manageable automaton shielded invalid actions tokens user interface user invalid action caught handled automaton 
case existing error handling scheme yacc removed 
concept valid tokens discussed detail section 

cancellation cancellation stopping process started certain point returning earlier stage process continuing 
case dialogue process parsing rule 
dialogue design try predict user may wish cancel part dialogue 
automaton part dialogue represented nonterminal user wishes cancel part dialogue able reinstate state automaton just nonterminal parsed 
consider example grammar grammatical specification human computer dialogue symbols denote right hand side consisting terminals nonterminals 
valid sentence language specified grammar match nonterminal assume sentences match share common prefix character sentence entered turning back 
dialogue amounts user forced carry certain sequence actions 
unacceptable 
allow user abort cancel part dialogue provide cancellation facility grammar 
cancel input means throw away input received date starting point 
facility allows example multiple attempts matching particular nonterminal 
strings match nonterminal 
require string wz 
ow accepted grammar modified provide cancellation 

represent series actions tokens user subsequently cancelled 
act cancellation represented token 
string cancelled continue dialogue 
wish modify explicitly allow cancellation grammar 
productions allow nonterminal cancelled number times 
technique specifying cancellation non transparent clumsy complex dialogue 
modify yacc grammar explicitly indicate cancellation may occur subsequent dialogue restart 
rewrite original grammar explicit technique way 
ax bx oe rule grammar called store rule indicated exclamation mark 
rule reinstate rule indicated nonterminal enclosed angular brackets 
generated automaton store rule causes state automaton stored parsing corresponding rule commences 
reinstate rule reverse forces automaton continue parsing named previously stored state starting state 
realistic example cancellation consider situation user carry tasks name 
grammar represents dialogue 
session task task task 
task getname task getname getname session assume user wishes enter name task dialogue 
session rule store rule parsing state automaton stored 
user activates appropriate widget types name user interface generates token 
corresponds single read name 
task user enter name number times application satisfied 
user unable remember albert name user able cancel abort part dialogue possibly go 
achieved reinstate rule parsed result receiving token 
note application wishes user cancels dialogue restrict number guesses user may name possible application generate token 
discuss section 
store reinstate rules added grammar satisfy conditions 
reinstate item rule 
intuitively obvious reinstate executed 
reinstate rule derives current rule 
nonterminal specified reinstate unique nonterminal appear left hand side rule 
reinstate stored rule 
practice inserts extra rule grammar encounters store rule 
extra rule semantic action call routine stores current state 
example rule lx store cr function store stores state automaton structure indexed argument case 
reinstate rule encountered call routine stack inserted semantic action rule 
course dialogue cancelled semantic actions executed dialogue undone 
responsibility application programmer 

application directed dialogue assumed tokens dialogue receives come user interface 
need case 
changing interface automaton slightly allow application generate tokens 
defining global variable set application adding routine having called automaton checks see token placed variable application call 
re calls automaton token parameter simply returns 
new interface loops variable application places new tokens variable 
illustrate role application play dialogue consider grammar 
init abort ar abort printf unable init show time semantic actions form simple code 
dialogue function init called initialize application 
able token abort placed 
effect automaton take step process token abort nonterminal match empty string match terminal abort error message generated dialogue finished 
application initialized successfully nonterminal match match empty string 

highlighting active widgets standard windows widget callback highlighted mouse positioned 
widgets course correspond tokens valid automaton 
separated user interface dialogue user interface user know widgets active correspond valid tokens grammatical specification dialogue ii inactive 
information dialogue disposal 
widgets callback highlighted mislead user 
true course user activates invalid callback corresponding token ignored automaton behaviour support user way time wasted sure application just appeared 
remedy problem including error rules corresponding context free grammar 
rules catch invalid tokens 
generate error messages 
messy error prone process specification readable manageable 
parsing tokens valid automaton referred set 
normally speaking look ahead set available user 
look ahead set extracted automaton indicate widgets active 
user ways 
mouse positioned valid widget 
user action invalid widgets buttons automatically shaded 
knows independent position mouse inactive 
solution clearly unacceptable 
requires user wander screen determine command widgets active 
solution results user interface refreshing user action 
user interface automatically widgets members look ahead set leave 
implementation scheme highlight active widgets twofold problem 
look ahead set needs extracted 
done statically automaton generated dynamically interaction user application 
solution efficient disadvantage look ahead information stored 
reason reasons transparency 
decided extract look ahead set dynamically 
involved adding routine generated automaton simulates possible parses 
automaton returning control user shift possibly number reductions calls dummy parser token 
tokens successfully parsed dummy parser valid placed look ahead set 
doing computation token generated user interface expected degrade performance system 
case 
noticeable performance degradation 
second problem making look ahead set 
automaton knows lookahead set know names widgets corresponding tokens set 
overcome problem user interface initializes 
start time 
array couples token names widget names 
call initialization routine simply callback associated root widget 
look ahead set array coupling tokens widgets automaton quite simply widget setting appropriate resource 
example 
consider grammar 
cord cord dialogue specified user click succession button clicking button generates token clicking button generates token 
dialogue cycles endlessly 
appearance albert fig 

user interfaces resulting sequence user actions 
user interface step process shown fig 

notice buttons active highlighted step shaded 

dialogue specification able generate automaton call dialogue controller window application 
application user interface plays role scanner generating tokens represent actions user 
tokens processed dialogue controller calls application routines 
schematic showing relationship user interface dialogue controller application shown fig 

demonstrate scheme works practice add dialogue controller simple user interface described section 
recap user interface user replace label old message label new message button clicking button terminate application clicking quit button 
modify user interface 
calling application user interface call dialogue controller user action 
call token represent action parameter 
minor change resource specification user interface 
need define dialogue 
user little dialogue specification near trivial 
design decisions need 
user example allowed click message case dialogue specified rule explicitly cater clicking widget ad recursive rule rule contains redundancy second subsequent clicks widget application argue user user interface dialogue call controller screen update fig 

schematic window application dialogue 
grammatical specification human dialogue quit jl fig 

snapshot user interface freedom extraneous tokens generated ignored automaton 
choose rule 
complete specification add calls application 
consists simple routine write takes parameters name activated widget new string 
effect routine details shown replace label widget string 
full dialogue specification follows 
write widget new message grammar attribute associated referred name activated widget 
example trivial show virtue dialogue specification 
consider realistic example game 
considered game section specified game context free grammar 
grammar fact form basis dialogue specification 
presenting consider user interface game appears screen 
example game progress shown fig 

refer interface 
user interface consists widgets 
top bottom left right message widget case containing message guess incomplete word widget count widget button labelled new game 
widget consists buttons letter alphabet dialogue widget containing empty widget button labelled ok buttons labelled give quit 
stage game user guesses vowels incorrect 
time user guess letter guess word give word revealed quit start new game 
user guess corresponding message appears message widget message bad guess appears count widget incremented 
resource specification user interface game defines layout presentation widgets associates callbacks certain widgets buttons 
callbacks send tokens dialogue controller 
labels buttons associated tokens shown table 
table button token new game ok word give km various types widgets user interface 
example buttons representing alphabet called toggle widgets 
called toggle widgets word way 
hw fini list cancel letter list cancel fini cancel list letter hang leta 
albert lise message word letters strlen temp count count word temp message unable init word word letcmp word word temp strcmp word temp write widget message guess message correct word temp write widget message bad guess write widget count count strcmp word message correct word word write widget message bad guess write widget count count toggle fig 

dialogue specification 
permanently change white black activated 
game tells user guessed letter 
building certain amount intelligence user interface reduces amount application dialogue 
cost convenience system portable 
example want replace user interface choose equally intelligent 
tokens table control dialogue 
corresponding dialogue specification game shown fig 

notice specification explicit cancellation application direct dialogue initialization 
routine grammatical specification dialogue initialise fetch random word token set 
description rest semantics shown appendix 

language model parser generator build uims 
user interface dialogue application separated clean uniform way 
user interface specified window system dialogue controller specified context free grammar application consists library routines 
protocol user interface dialogue controller consists tokens dialogue controller application calls application routines 
resulting uims integrated requires minimum programming 
lalr parser generator research yacc able handle wide variety dialogue specification problems 
powerful generator popular ell parser generators researchers see section 
case extra power necessary concentrated solving dialogue specification problems syntactically 
modifications yacc described 
step step explanation modification showing modification 
simplicity system possible describe operation system detail 
separation components system come cost 
times example application needs know window send data 
information come user interface dialogue 
unfortunately communi cation channel clumsy inconvenient 
attributes limited 
consequence data global blurs boundaries results dependencies components system 
unattractive fixes initialization routine described section couples widget names token names necessary 
problem separate shared data models user interface application faces implementations model problem addressed literature 
exceptions 
built uims called wood gray built chimera 
resolve problem wood gray adding special interface called linkage component dialogue application layers model 
division labour components level clear interface builder confronted practice problem place input output facilities user interface dialogue 
clean design versus convenience issue greatly influenced available resources widget set example matter style 
clever presentation component example significantly reduce amount dialogue application components 
clever presentation component requires application specific information inconsistent model blurs boundary user interface application 
unfortunately little issue literature 
exception wiecha ul 
xi 

defining dialogue component split user interface layer contains set screen primitives layer consists style rules 
style layer defines presentation behaviour family interaction techniques 
major improvement addition dynamic application interface 
simply define semantics calls routines 
clearer separation concerns better data model necessary 
multi threading error handling help facility mechanism handle continuous sampling events needed 
rick mud built early prototype system specified dialogue 
albert 
green report dialogue specification tools 
proceedings workshop user interface management systems edited pfaff pp 

springer verlag 

morse reynolds overcoming current growth limits ui development 
commun 
acm april 

johnson yacc compiler compiler 
murray hill nj bell laboratories cstr 

green survey dialogue models 
acm trans 
graphics july 

pamas transition diagrams design user interface interactive computer system 
proc 
th nat 
acm conf 


jacob formal specifications design human computer interface 
acm trans 
graphics april 

wasserman extending state transition diagrams specification human computer interaction 
ieee trans 
softw 
engng 


minor new generation uims 
human computer interaction interact edited diaper pp 

north holland elsevier science 

hill supporting concurrency communication synchronization interaction uims 
acm trans 
graphics july 

sibert hurley human computer interaction 
norwood nj ablex 
il 
olsen automatic generation interactive systems 
computer graphics 

olsen dempsey syntax directed graphical interaction 
acm sigplan notices symp 
progr 
lung 
issues softw 
syst 


olsen dempsey graphical user interface generator 
computer graphics 

olsen pushdown automaton user interface management 
acm trans 
graphics 

olsen dempsey input output linkage user interface management system 
computer graphics 

scott yap 
grammar approach automatic generation user interface dialogues 
proc 
chi 

van den bos interaction tool language user interface management systems 
acm trans 
progr 
lung 
syst 
lo 

wood gray user interface application communication chimera uims 
software practice exp 

olsen mike menu interaction environment 
acm trans 
graphics 

shneiderman direct manipulation step programming languages 
ieee computer 

edmonds experiment interactive architectures 
human computer interaction inter act edited diaper pp 

north holland elsevier science publishers 

hartson user interface management control communication 
ieee software 

jacob specification language direct manipulation user interfaces 
commun 
acm 


separating graphics application design user interfaces 
computer 

hurley sibert modeling user interface application interactions 
ieee software 

wiecha bennett gould greene tool rapidly developing interactive applications 
acm trans 
inform 
syst 

appendix places random word string word series dots string temp initialises array store letters guessed 
return success failure activities 
letcmp check see parameter letter second parameter word 
return success failure 
parameter letter 
instance letter second parameter word copy letter corresponding position third parameter temp 
strcmp string parameters equal return success return failure 
author albert received bachelor mathematics degree diploma computer science university newcastle australia 
working period research assistant began ph studies university field theoretical physics 
research involved computer simulations series analysis critical behaviour various lattice models 
received ph 
took position computer science university twente netherlands 
currently member tele informatics open systems group involved research compiler design software tools supporting development formal specification languages user interface management systems 
book compiler generation published author 
