design language tool machines specification petros department computer science city liberal studies affiliated institution university sheffield str thessaloniki greece mail city academic gr essential phases software development system specification 
intuitive formal method easily applied phase facilitate testing order prove correctness implementation respect specification 
machine theory defined detail mathematically lack automated tools facilitate 
brief machine theory language specifying machines defined act communication protocol various machine tools 
addition proof tool checks special properties machines defined prerequisites machine testing algorithm 
variation software development model process starts specification finishes testing 
specification phase important directives rest development process set 
specification models able hand supply concrete concise coherent specification different levels abstraction order avoid misconceptions developers hand establish system properties system proved handle certain set situations 
various methods appeared specification language state charts roughly classified degree formalism 
formal techniques mathematics completely informal techniques natural languages 
intermediate ones known semi formal major disadvantage incomplete inconsistent 
hand formal techniques difficult learned especially people apply mathematical background 
despite disadvantages formal models ones guarantee completeness consequently correctness model justifies current research community concern 
area formal models finite state machines fsm theory enriched extensions 
fsm popular formal nature expressiveness intuitiveness 
represent compact way information states transitions inputs outputs conditions hold transition followed notation simple requires basic mathematical background 
machine theory fsm theory strongly integrates problems data control processing specification single model testing implementation specification 
machine theory established appeared automated tools support machine definition checking special machine properties 
current contributes solving problem machine design language tool checking machine properties 
brief machines specification methods describe dynamic static aspect system respectively distinguished operational descriptive dual 
dynamic part represents system control usually defined terms states transitions event triggering static part represents system data usually defined terms data structures tables data processing functions retrieving updating checking data 
petri nets example classified operational specification method entityrelationship diagrams descriptive 
diagrammatic nature generality fsm intuitive tool specifying dynamics computational system 
fsm inadequate specify systems include complex data structures data manipulation 
fsm appear deficient handle corresponding static part 
machines overcome deficiency allowing control operational data descriptive processing system described separately control processing described inputs outputs states transitions similarly simple fsm data processing described memory set functions 
memory acts global set values retrieved updated time represents main data processed machine 
set functions main data processing unit machine 
order handle data functions perform alterations memory call external data processing functions 
essential machine establish communication machine control processing data processing unit 
specification phase system machine modeling strongly addresses testing phase 
machine testing theory specification implementation expressed machines proved test set finds faults implementation generated 
machines act specification tool guarantee correctness implementation respect specification 
additionally practical perspective brings final phases system development close preserves homogeneity intermediate phases saves time resources testing process fully automated 
formally machine defined ims sequence inputs finite set constants describes possible input values sequence outputs finite set constants describes possible output values memory set states set functions set transitions initial state ims initial memory state 
machine example usual procedure vending machine customer enters coins selects soft drink coke sprite presses button execute order enter button 
prices drinks stored database accessed set external data processing functions related model 
ovals denote system states arcs transitions arcs labels functions triggered 
continue await coin enter pressed ready continue ready await coin get selection get selection get coin complete money await selection continue await selection 
machine state diagram automatic soft drinks vending machine machine input refer coins buttons pressed button executes order 
input drc drc coke sprite enter machine output consists basic elements current state machine state amount money inserted far message informing user drink available 
output state drink drink state await coin ready await selection machine memory includes information amount money inserted far drink user selected 
memory initial state machine await coin state initial memory machine defines coins inserted amount money inserted default soft drink selection coke coke 
initial state await coin initial memory coke process machine functions defined take parameters token representing input tuple representing current memory contents produce tuples concerning output new memory contents 
example get coin function takes parameters input current memory state amount selection 
input coin coin type newly inserted coin amount money stored current memory state sufficient sufficient amount user get drink machine continue waiting coin 
output function inform user machine waiting coins await coin new amount money machine old amount money plus coin inserted add amount available drink drink 
function update machine memory contain new amount money drink selection 
user input drink selection new memory state drink selection previous memory state 
get coin amount selection coin type sufficient amount await coin add amount drink add amount selection elements function variables tuples variables sufficient add 
external functions enable communication machine data processing machine 
example sufficient returns true coin amount money get drink false case sufficient coin type amount type rest machine functions shown appendix 
machine design language common ground software tools built model detailed general representation model specified 
main reasons existing languages rejected representation syntax semantics functional logic programming languages general loose ones desired 
computational description machine close corresponding mathematical description notation 
model representation specific programming language require user knowledge programming language 
important aim representation reusability machines different tools representation independent programming language tools 
decided define new description language representing machine supports constants required data type state function definitions example drc 
sets example states machine defined state await coin await selection ready 
data types defined finite sets constant values example datatype coin drc drc variables defined sequence characters starting example belongs selection enter membership operator example belongs coin 
equality operator example sufficient current amount true 
tuples example coke external functions example fun boolean sufficient coin amount partial code machine defined 
data types datatype coin drc drc datatype selection coke sprite datatype process enter datatype drink ready datatype amount datatype boolean true false set states state await coin await selection ready input type input coin union selection union process output type output state amount drink ready memory type memory amount selection initial state value init state await coin initial memory value init memory coke function fun get coin current amount current selection belongs coin sufficient current amount true await coin add current amount drink add current amount current selection external functions fun boolean sufficient coin amount fun amount add coin amount transitions transition await coin get coin await coin 
partial code automatic soft drink vending machine correctness description machine design language basic levels correctness machine description syntactic level semantic level logical level 
syntactic level phase syntax machine checked identifying syntax errors code example missing bracket misspelled reserved word errors state idle record idle play set contains duplicate elements intended identified level 
semantic level level mistakes concerning data types functions sets identified 
example function record recording defined assumed record legal input included input grammar recording legal output respectively 
level guarantees model mathematically correct tool attempts prove properties 
concluded basic conditions checked data types types parameters returning values legal 
data type checking applies definition external operators 
part input output memory state definitions functions 
system guarantee values returned operators expected data type 
somebody argue kind type checking applied previous phase syntactic analysis 
require language positional meaning user define states functions functions transitions positioning restrictive user preferred check data types second level 
sets defined set included expected language syntax set contain duplicate elements 
functions function applied tuple containing input memory state produces tuple containing output memory state 
system guarantee function able produce output memory state tuples input memory state tuple 
logical level phase refers model general consistency 
questions referring model completeness output distinguishability minimality addressed 
levels grammar mathematical notation checking tools especially built purposes 
proof tools possible extensions discussed section 
machine checking tool modeling system aims comprehension accomplished machine specification phase testing 
machine testing method applied system specification implementation viewed stream machines set functions set functions satisfies design test conditions completeness 
aim machine proof tool section determine testing method applied specific machine design test conditions hold consequence inform user conflicting functions 
function machine called test complete respect memory memory input domain set functions machine called complete respect memory functions complete respect memory 
algorithm proving completeness listed 
empty function complete respect memory 
holds functions machine said complete respect memory 
machine proof tool applies algorithm machine functions returns informing user model completeness 
algorithm devised prove output distinguishability 
set functions machine called output distinguishable holds functions memory input memory outputs 
procedure completeness code combinations memory values combinations possible inputs initialize index pm get element applicable false initialize index applicable false pi get element pi pm domain applicable true endwhile applicable false assert pm endwhile return 

algorithm proving completeness functions machine different processing functions produce different outputs memory input pair 
machine proof tool applies algorithm machine specified code returns conflicting functions 
algorithms implementation issues consideration extensively described 
complete tool aims primary design tool machine modeling common representation tools build machines independently programming language implement fig 

specification testing machine machine checking tool dcg code checking algorithms complete machine specification 
role proposed tool language process software development machine theory tool 
tool related popularity intuitiveness finite state automata development languages tools refer fsms initial definition extensions 
languages related interface convert graphical representation equivalent textual vise versa 
graphical representation serves mainly user interface purposes textual representation manipulated tool input animator model checker test case generator tools roughly classified educational assist 
tools usually support data types input output stack alphabet 
handle constraints related states transitions communication different state machines 
language restrictive positional easily readable 
software engineering oriented autofocus hytech uppaal 
advanced tools ability handle data types functions constraints assignment statements language mixture mark positional procedural language compact clear 
easily extensible handle machine modeling 
detailed review existing tools 
evaluation aim set framework computerised tool machines accomplished machine design language 
close initial mathematical notation machines 
characterised orthogonal sense primitive structures combined ways build description machine mark supplies users freedom non positioning language strongly typed performs type checking set checking function checking exception handling implementation describing syntax semantic rules prolog dcg notation 
algorithms described implemented prolog 
algorithms implemented close corresponding mathematical definition completeness 
machine checking tool basic prerequisite machine testing tool design test conditions proved met test sequences generated tool complete 
tool currently tested apply exhaustive algorithms quite limited state space 
expected algorithms transformed application large state spaces efficient 
intention apply parts machines model 
hand currently working implementation graphical machine specification tool automatically produce corresponding output implementation testing tool alike specialised machines order generate apply test sequences characterization set method 

spivey notation manual nd edition prentice hall int 
harel pnueli schmidt sherman formal semantics statecharts proc 
nd ieee symp 
logic computer science ieee press new york pp 

tools real time systems real time systems pp 

holcombe correct systems building business process solution springer verlag 
holcombe jordan duan machine model video cassette recorder current issues electronic modelling pp 

holcombe specification testing generalised machines presentation case study software testing verification reliability pp 

machine design language tool proving completeness output distinguishability technical report cs department computer science city liberal studies 
head assist simple simulator state transitions watson 
cs edu tools assist html msc thesis university new york 

interact theorems automata theory th sigcse technical symposium computer science education pp 

huber consistent graphical specification distributed systems lecture notes computer science pp 
henzinger ho wong toi user guide hytech lecture notes computer science pp 
bengtsson larsen larsson pettersson yi uppaal tool suite automatic verification real time systems lecture notes computer science pp 
nguyen fsm test sequence generator www site ottawa ca ural tsg html university ottawa ottawa ontario canada 
chow testing software design modeled finite state machines ieee transactions software engineering pp 
appendix machine functions vending machine written 
complete money money selection belongs coin type sufficient money await selection add money drink add money selection get selection money selection belongs selection type ready money drink money enter pressed enter money selection await coin drink selection continue await coin money selection belongs selection type enter await coin money drink money selection continue await selection money selection belongs coin type enter await selection money drink money selection continue ready money selection belongs coin type ready money drink money selection 
