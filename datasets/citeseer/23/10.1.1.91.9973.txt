semantic integration multiple domain specific languages ontological foundations matthias br henrik sap research cec dresden str 
dresden germany matthias henrik sap com 
model driven software development advocates domain specific modeling languages dsls describing software systems 
modeling complex systems usually requires different dsls raises need consistently integrate corresponding models 
current model driven approaches properly support expressing semantic relationships interdependencies distinct modeling languages 
information implicitly hidden code generators weaving models model transformations hampers reusability dsls associated assets 
approach facilitates integration domain specific languages semantic level mapping language constructs concepts upper ontology 
contrast previous approaches concentrate system design phase 
customized upper ontology software modeling demonstrate feasibility approach case study 
years importance domain specific languages dsls describing software systems increased convergence model driven software development witnessed 
compared large general purpose modeling languages uml dsls offer limited set constructs 
increases modeling productivity facilitates precise definition concerns particular domain 
modeling complex systems usually necessitates multiple dsls resulting domain specific models describing aspect application data structures workflows user interfaces 
believed small loosely coupled models easier handle improve readability comparison single monolithic model 
multi domain modeling raises need sophisticated consistency checking different viewpoints 
particularly vital models frequently change iterative development result feature configurations software product line 
current model driven approaches typically express interdependencies elements related models name weaving models mapping supported project financed german ministry education research bmbf 
specifications graph rewrite rules model transformations 
unfortunately methods specify semantic relationships individual model elements explicitly 
information meaning model element relation hidden weaving links model transformation rules 
pairwise connection models scale complex system descriptions dsls hampers reuse modeling languages different language combinations 
ongoing research project currently investigating semantic technologies particular ontologies semantic web standards help alleviate problems 
project line efforts propagate combined ontology technical space 
idea ontology knowledge base semantic connector multiple domain specific models 
reusing concepts relationships suitable domain core upper ontologies hope provide semantically rich system description leveraged automatic reasoning consistency checking 
report initial findings definition common upper ontology software modeling languages successful application simple case study involves integration different dsls 
remainder structured follows describing problem motivation project sect 
core ideas expected benefits approach sect 

section discusses ontological foundations modeling languages contains proposal upper ontology software design modeling languages 
section illustrates application approach small case study 
sect 
briefly highlight related place approach context 
sect 
concludes gives outlook 
problem motivation domain specific modeling languages usually specified metamodeling 
metamodel defines concepts language relationships viz syntax set wellformedness rules viz static semantics govern validity models written language 
multi dsl development scenarios suffice ensure consistency validity models constituting complex system description semantic relationships constructs different languages remain unspecified 
literature solutions problem multi domain integration proposed name 
warmer kleppe suggest connect models referencing model elements name models 
solution drawback delegates information semantic interrelationship dynamic interplay different language constructs code generator 
words actual integration happens code level model level reveal model elements semantically related 
weaving models 
model weaver allows define visualize correspondences elements different models extensible weaving metamodel 
advantage approach model elements kept outside models 
weaving model express semantics links different model elements denoting equivalence define meaning corresponding language constructs 
model weaver usually connects pairs models suited integration large number domain specific languages 
model mappings 
mappings models cornerstone approaches omg mda initiative 
realized xslt transformations graph rewrite rules triple graph grammars model transformations 
suitable formalism mappings seen models describe relationships elements source target model allow validate inter model consistency constraints 
transformations models written adhoc fashion specific respective source target metamodel 
severely limits reuse potential hampers easy integration arbitrary domain specific languages 
furthermore mapping specification expresses semantics different dsl elements implicitly assign explicit meaning language construct 
address current approaches number proposals argue favor ontologies means specify language semantics integrate multiple domain specific modeling languages 
agree views additionally stipulate language integration ontological foundations guided common upper ontology software modeling languages 
allows reuse fundamental relationships constraints axioms integrating new dsl 
defining upper ontology topic 
integrating languages ontologies core idea approach coined semantic model connector establish semantic links different domain specific models ontology knowledge base 
contrast weaving model connector store information correspondences model elements contains individuals instances ontology classes property assertions represent model elements relationships 
note intend create representatives model elements 
central aspect methodology restrict connector knowledge base elements required semantic connection participating models 
connector forms detailed holistic view entire system modeled 
illustrates central concept formation 
automatically populate connector knowledge base representatives newly created model elements need map relevant meta classes dsl metamodel concepts relationships common ontology 
essentially mapping defines semantics modeling language constructs concept descriptions axioms ontology 
course ontology mapping lacks rigor complete operational semantics specification cases suffice express cross language relationships semantic connector fig 

integrating different domain specific models semantic connector constraints 
current phase project employ upper ontology general concepts limited set relationships realize specialized ontologies eventually necessary define detailed dsl mappings cf 

long term envisage library reusable dsls managed project team language comes semantic binding common foundational ontology shared set core domain ontologies 
upper ontology core ontology domain ontology application ontology optional mapping upper ontologies define concepts applicable domains 
core ontologies define concepts shared number similar domains 
domain ontologies define concepts specific particular area interest 
application ontologies specialize concepts upper core domain ontology application specific variants 
approach maps constructs dsl application ontology 
metamodel describes dsl fig 

hierarchy ontologies defining language semantics motivation starting upper ontology provide number welldefined theoretically principled sufficiently axiomatized concepts base concepts specialized ontologies 
argued resulting core domain ontologies usually higher quality developed bottom selection sample languages 
describe experimental upper ontology creation detail sect 

obviously constructs domain specific language map oneto concepts ontology 
research goals investigate language designers assisted writing complex mapping rules technical spaces 
graph rewrite rules visual patterns promising solution problem 
fortunately mapping central ontology linear complexity growing number dsls compared pairwise model transformations language 
objection approach called pivot model intermediate universal metamodel provides similar possibilities integrating metamodels multiple dsls constraint language ocl defining inter model consistency rules 
general answer point underlying presumption project combining ontologies leverages respective strengths technical space envisage number concrete benefits lightweight coupling 
semantic web technologies provide necessary means effective decoupling different languages models storing solely textual uris 
design independent particular language specification technologies mof emf 
pivot model necessarily biased platform defined 
extensibility 
web ontology language owl permits flexibly derive subclasses concepts ontology requiring access original file 
owl information added 
facilitates easy creation dsl specific application ontologies 
ontology classes defined value cardinality restrictions allows specify consistency rules intuitively metamodeling constraint language 
reasoning support 
due formal logical underpinning semantic web technologies offer powerful means reasoning inferencing 
semantic connector contains individuals limited subsumption concept hierarchies take advantage full instance level reasoning knowledge base 
example reasoner entail validate additional semantic relationships automatically insert delete elements keep knowledge base consistent 
experiments representing models prolog fact base shown conventional model querying languages match power logics approaches 
deriving upper ontology software modeling languages step realizing project goals investigate primitive ontological categories required describe semantics software models 
initially aimed integrating languages abstraction levels 
interestingly rich body previous research ontological foundations conceptual modeling languages 
best knowledge published deals upper ontologies modeling languages system design implementation phases 
mention existing proposals area conceptual modeling 
briefly assess applicability discuss problem formalization 
describe experimental upper ontology software modeling languages prototypical implementation semantic connector 
ontological foundations conceptual modeling languages conceptual modeling important activities initial phases software development process requirements engineering system analysis 
aims describing business domain viz real world terms technical bias characterizes models subsequent design phase 
past proposals tried provide sound semantics conceptual uml models mapping uml constructs concepts upper ontology 
pioneering wand employed bunge wand weber bww ontology arguably prominent approach ontology information systems modeling purpose 
related study henderson sellers bww ontological evaluation uml 
great similarity defined ontological foundations conceptual uml models general ontological language gol upper ontology called 
led development unified foundational ontology ufo comprehensive theory structural conceptual models 
naturally question arises results translated problem defining semantics domain specific modeling languages system design 
wand note derived rules applicable 
software modelling 
analyzed different structural conceptual models created design patterns suggested cases ontological model elements changed moving analysis design 
complete presentation findings outside scope solely state ontologies conceptual modeling languages directly expressing semantics design modeling languages 
believe general concepts ontologies guide development dedicated upper ontology software modeling languages cf 
sect 

question formalization argued design domain specific visual language formal domain ontology 
precisely established number properties need hold guarantee isomorphic mapping metamodel ontology representing associated domain 
postulate domain ontology full axiomatization transferred metamodel ontology needs formulated general ontology representation language philosophically principled foundational ontology 
consider requirements difficult fulfill practical setting 
firstly domain specific languages process constitute development assets artifacts depend 
redesign existing dsls may repercussions models code generators constraint definitions secondly questionable dsl designers philosophical background tailor languages fit rigid axiomatization prescribed foundational ontology 
observed existing languages violate ideal ontological commitment 
due time budget constraints formal top approach language design usually feasible practice 
proponents model driven development approaches advocate iterative process incorporating new language elements time adapt semantics accordingly 
obviously ontological soundness demanded upfront 
complex axiomatization domain foundational ontology easily translates constraint language world 
answer propose define semantics upper ontology concepts rigid way ontology rule languages developed semantic web community 
limited scope dsl library development team light weight approach usually exhibit information integration semantic interoperability problems reported 
essence upper ontologies terminological services inferencing small set concepts semantics known meaning negotiation heterogeneous agents suggested 
experimental upper ontology explained aim upper ontology provides basic concepts domain specific modeling languages system design implementation 
currently provide solution desirable goal integrating conceptual analysis models due differences ontological foundations cf 
section 
project goals practicality applicability industrial cases need define set foundational concepts small concise remain manageable practical scenarios ontological power cover wide range different dsls 
meet requirements developed framework classifying domain specific system modeling languages 
dimensions framework solution domain 
refers horizontal domain addressed dsl broadly categorized structural behavioral ui languages 
abstraction level 
follows suggestion omg mda framework characterizes constructs modeling language computation independent platform independent platform specific 
ontological kind models 
partitions modeling languages nature elements resulting models 
distinction works hne determines model elements modeled system classifying individual runtime objects types type models represent image token models 
typical examples type token models uml class object diagrams respectively 
framework categorize large number sample languages gain feeling recurring concepts dsl design patterns 
proceeded adapting extending small lightweight upper ontology called abc features intuitive design contains key concepts powerful ontologies 
carefully analyzed shortcomings abc ontology respect requirements listed incorporated elements bww gol ufo dolce ontology particulars 
subsequently identified missing elements mapping language constructs set sample languages ontology 
way iteratively implemented enhancements basic conceptual structures 
excerpt resulting upper ontology shown fig 

schema substantial actuality property representative quality entity moment relator process life transition state situation activity fig 

upper ontology software modeling languages line philosophically motivated approaches draw major distinction enduring entities 
enduring entities wholly 
time entities partially time 
say enduring entities time entities happen time 
addition fundamental conceptual categories distinguish universal entities universals particular entities particulars 
distinction important integrate modeling languages type models token models 
example consider concepts schema substantial represent universal particular data structures respectively 
concepts related instance property 
relationship exists concepts property moment including respective subclasses signal event behavior action 
signal event behavior action case study illustrate application approach simple case study 
modeled conference registration system different domain specific languages 
system description comprises structural model business entities dialog model describing page flow application presentation model user interface screen 
brevity reasons discuss entire mapping connector concentrate selected issues showcase potential 
connecting structural model presentation model example consider known problem binding user interface components data structures 
illustrates semantic connector achieve consistency presentation model ui structural model describing data 
upper part shows excerpt corresponding metamodels lower part highlights semantic mapping provided corresponding dsl designers 
relevant language construct derive subclass corresponding upper ontology concept 
moment employ eclipse modeling framework emf metamodeling dsls easily establish technical spaces uri metamodel element 
mapping exhibits number interesting properties 
want emphasize models written structure dsl type models presentation dsl results token models cf 
sect 

ontological point view ui elements presentation language particulars 
case map representative concept indicate hold data merely represent ui 
representatives flexible may stand types particulars processes events 
semantically link languages upper ontology introduces modal property may represent representative universal concepts 
support universals particulars concrete instances data flow diagram modeled extending substantial concept 
explains fits general ontological structure 
currently experimenting inference rules expressed rule language jena semantic web framework check consistency knowledge base universals particulars appear 
furthermore property restrictions owl enable dsl designer restrict range may represent property 
ontological counterpart instance may represent instances 
ontology subclasses allow fine grained control distinguish different types connector 
additionally reasoning querying engine suggest ui modeler assigned particular context 
plan integrate feature form model hint available envisaged tool suite 
example inspired application mentioned single dsl 
container presentation page presentation owner panel presentation part widgets presentation dsl widget presentation presentation particular representative represents label presentation may represent substantial universal structure structure structure schema defines label panel may represent may represent may represent instance semantic mapping owner data structure dsl fig 

semantic mapping structure presentation dsl structure type enumeration datatype structure owl class upper ontology owl class application ontology owl property subclass connecting presentation language dialog flow language time look instantiated connector 
depicts ui presentation model page semantically integrated dialog model describes page flow 
presentation model page mapped instance subclass representative 
dialog model page node represents activity 
enhanced clarity added names corresponding upper ontology concepts diagram 
notice semantic structures created automatically domain experts build associated models 
logic semantic mapping defined dsl designers 
pointed inference rules define axioms upper ontology may help populate connector knowledge base entailed facts alleviating need highly complex mapping expressions 
get glimpse potential benefits approach assume existence general consistency rule depends represents represents depends better legibility omitted rdf type statements 
plain english rule states dependency relationship particulars implies dependency corresponding representatives 
consider part page representative contains representative represents represents occurs enter personal details select payment presentation model dialog model activity succeeds event transition triggers instantiated semantic connector precedes activity individual rdf statement fig 

semantic connector presentation dialog model part occurs property subproperties depends 
semantic web reasoner information infer rule holds model depicted fig 

moved button page reasoner flag inter model inconsistency 
similar rules ensure corresponding event button added ui model 
ultimately goal leverage semantic connector automatic semi automatic adaptation related models face changes model 
large number different languages expect efficiency gains compared traditional approach model transformations 
related semantic integration modeling languages ontological foundations relatively new field research 
potential benefits approach identified early concrete proposals started appear years 
bauer sketch idea semantic ide maintains representation dsl metamodel application ontology 
authors suggest bind application ontologies ontology obtain unambiguous semantics facilitate sophisticated reasoning 
elaborate necessary expressiveness ontology simply assume general availability 
related article employ owl ontological automatically derive model transformation meta models process modeling languages 
consider semantic integration dsls covering heterogeneous domains 
great similarity propose semantic infrastructure called allows integrate models different tools languages 
create application ontologies mapping elements languages metamodels corresponding concepts ontology 
authors briefly mention alignment models written conceptually distinct languages explicitly address modeling 
case study deals translating uml activity diagrams bpel models vice versa generic workflow ontology 
connect models ontology knowledge base derive bridging operators model transformations solely metamodel layer 
result ontology reasoner restricted discovery subsumption relationships concepts taxonomy 
lastly system assumes complete lifting dsl metamodel corresponding ontology 
contrast transfer semantically relevant metamodel classes ontology technical space 
outlook approached challenge software systems engineering multiple models written different domain specific languages 
line authors proposed ontologies describe semantic relationships interdependencies languages 
approach grounded idea expressing semantic links multiple domain specific models ontology knowledge base 
discussed experimental upper ontology software modeling languages aims providing key concepts integrate wide variety dsls 
case study provided insights applicability usefulness method 
gave overview related studies highlighted differences approach 
moment working implementation methodology introduced 
envisage eclipse tool suite visualization editing facilities built semantic connector knowledge base 
desirable features include automatic consistency checking navigation semantic links model instance level reasoning querying cf 
sect 
visualization semantic relationships pattern oriented rule editing generation system architecture documentation benefit features twofold hand multiple models multi domain development scenario kept consistent particularly vital check validity feature configurations software product line 
hand domain experts better understand modeling artifacts fit system description 
making interdependencies models explicit approach fosters traceability improves communication model developers 
expect holistic semantics system description connector aid architects product management stakeholders wishing see big picture application fine details 
provide detailed evaluation ontology applicability entire approach practical project 
purpose currently realizing large scale case study research project 
hope deepen understanding ontological foundations system modeling languages identify additional requirements enhancements approach 
case study develop customer related product management system requires integration different domain specific modeling languages 
acknowledgment authors manuel anonymous reviewers valuable comments previous versions 

feature driven aspect oriented model driven software product line development 
www de index en html 

jena semantic web framework java 
jena sourceforge net jan 
version 
bauer 
semantic enabled software engineering development 
infor informatik lecture notes informatics 

zivin gogolla 
model transformations 
transformation models 
nierstrasz whittle harel reggio editors proceedings th international conference model driven engineering languages systems models volume lncs berlin 
springer 

zivin valduriez 
model dsl frameworks 
companion st annual acm sigplan conference object oriented programming systems languages applications oopsla pages portland oregon usa oct 
acm press 

steinberg grose 
eclipse modeling framework 
eclipse series 
addison wesley longman amsterdam st edition aug 

czarnecki eisenecker 
generative programming 
methods tools applications 
addison wesley longman amsterdam 

wand 
ontologically semantics uml constructs 
kunii jajodia lvberg editors proceedings er 
th international conference conceptual modeling yokohama japan volume lncs pages berlin heidelberg 
springer 

zivin breton 
generic model weaver 
journ es sur ing par les mod les idm paris france june 

gangemi guarino masolo schneider 
ontologies dolce 
proceedings th international conference knowledge engineering knowledge management ekaw madrid spain oct 
springer 

ga ic 
bridging mda owl ontologies 
journal web engineering 

short 
software factories assembling applications patterns models frameworks tools 
wiley sons indianapolis indiana usa 


ontological foundations structural conceptual models 
phd thesis university twente enschede netherlands 
fundamental research series 


role foundational ontologies conceptual modeling domain ontology representation 
th international baltic conference databases information systems 
companion invited keynote speech 

wagner 
ontological foundations uml conceptual models 
tari editors move meaningful internet systems coopis doa odbase 
proceedings international conferences irvine california volume lncs pages berlin 
springer 

van 
ontology approach evaluating domain appropriateness comprehensibility appropriateness modeling languages 
proceedings th models pages 



applications ontologies software engineering 
nd international workshop semantic web enabled software engineering held th international semantic web conference iswc athens ga usa nov 

heller 
ontological categories gol 
editor process theories studies dynamic categories pages 
kluwer academic publishers dordrecht 

czarnecki 
guided development multiple domain specific languages 
acm ieee th international conference model driven engineering languages systems models nashville tn usa sept oct 
appear 

hunter 
enhancing semantic interoperability multimedia core ontology 
ieee transactions circuits systems video technology 

kappel reiter schwinger 
semantic infrastructure supporting model tool integration 
international conference software engineering proceedings international workshop global integrated model management shanghai china session metamodels semantics pages new york ny usa 
acm press 

hne 
matters meta modeling 
software systems modeling dec 


metamodels definitions structures ontological commitments 
workshop towers models 
collocated tools europe 

martin paolucci mcilraith burstein mcdermott mcguinness parsia payne sabou srinivasan sycara 
bringing semantics web services owl approach 
cardoso sheth editors proceedings international workshop semantic web services web process composition july san diego california usa volume lncs pages berlin heidelberg july 
springer 


domain specific modeling metaedit times faster uml 
white consulting 
www com papers domain specific modeling faster uml pdf 

oberle 
semantic management middleware volume semantic web computing human experience 
springer berlin 

object management group omg 
mda guide version june 
omg document omg www omg org docs omg pdf 

object management group omg 
meta object facility mof core specification version jan 
omg document formal www omg org docs formal pdf 

henderson sellers 
ontological evaluation uml bunge wand weber model 
software systems modeling sept 

bauer 
approach automatically generated model transformations ontology engineering space 
nd international workshop semantic web enabled software engineering held th international semantic web conference iswc athens ga usa nov 

smith welty mcguinness 
owl web ontology language guide 
world wide web consortium feb 
recommendation available www org tr owl guide 

stahl lter haase 
engineering management 
verlag heidelberg nd edition 
german 

pan oberle wallace uschold kendall 
ontology driven architectures potential uses semantic web systems software engineering 
working draft world wide web consortium feb 
www 
org sw se oda 

uschold gruninger 
ontologies principles methods applications 
knowledge engineering review june 

wand weber 
deep structure information systems 
information systems journal 

warmer kleppe 
building flexible software factory partial domain specific models 
gray 
editors proceedings th oopsla workshop domain specific modeling dsm portland oregon usa volume computer science information system reports pages 
university jyv skyl finland oct 
