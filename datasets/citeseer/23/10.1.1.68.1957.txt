journal artificial intelligence research submitted published pddl extension pddl expressing temporal planning domains maria fox maria fox cis strath ac uk derek long derek long cis strath ac uk department computer information sciences university strathclyde glasgow uk years research planning community moved increasingly application planners realistic problems involving time types resources 
example interest planning demonstrated space research community inspired observation scheduling planetary rover exploration spacecraft control domains 
temporal resource intensive domains including logistics planning plant control manufacturing helped focus community modelling reasoning issues confronted planning technology meet challenges application 
international planning competitions acted important motivating force progress planning 
third competition held set planning community challenge handling time numeric resources 
necessitated development modelling language capable expressing temporal numeric properties planning domains 
describe language pddl competition 
describe syntax language formal semantics validation concurrent plans 
observe pddl considerable modelling power exceeding capabilities current planning technology presents number important challenges research community 

drew mcdermott released planning domain description language pddl mc mcdermott aips planning competition committee community standard representation exchange planning domain models 
despite dissatisfaction community features pddl language enabled considerable progress planning research ease systems sharing standard compared enormous increase availability shared planning resources 
pddl facilitated scientific development planning 
decisive movement research community application planning technology realistic problems 
propositional puzzle domains old longer considered adequate demonstrating utility planning system modern planners able reason time numeric quantities 
members community working applications planning real domains nature time ghallab ghallab muscettola tate wilkins gap ai access foundation morgan kaufmann publishers 
rights reserved 
fox long modelling requirements domains expressed pddl 
application driven planners come equipped modelling conventions black arts consequence difficult reproduce results empirical comparisons approaches essential scientific progress 
pddl language provides foundation expressive standard constructed enabling domain models applications driven community shared motivating development planning field realistic application 
third international planning competition took place objective closing gap planning research application 
organisers third competition authors took step defining expressive language capable modelling certain class temporal resource intensive planning domains 
done eye awareness current capabilities planners possible language members community competitors 
describe resulting language pddl terms syntax semantics modelling capabilities 
pddl designed backward compatible fragment pddl common usage 
compatibility supports development resources help establish scientific foundation field ai planning 
furthermore mcdermott original pddl provides clean understood basis development embodies number design principles considered important retain 
pddl extends pddl principled ways achieve additional expressive power far possible mcdermott maxim physics advice mcdermott 
take maxim mean language focus expressing physical properties world advice planner search associated solution spaces 
course model physical systems simplifying assumptions abstracts behaviours level model claimed purely physics free decisions influence model 
attempt strong judgements constitutes advice try implement maxim keeping language simple possible 
guarantees backward compatibility 
existing pddl domains common usage valid pddl domains 
important enable existing libraries benchmark problems remain valid 

valid pddl plans valid pddl plans 
important contribution development pddl means domain designers provide alternative objective functions judge value plan 
numbers domain provides platform measuring consumption critical resources parameters 
example metric modelled energy consumption minimized 
important practical applications planning plan quality dependent number interacting domain dependent factors 
organisation follows 
section introduce non specialist readers pddl domain description language planning research community 
pddl expressing temporal planning domains background order provide foundations numeric durative extensions developing pddl 
focusses specific extensions introduced numeric expressions durative actions 
section start explaining syntax numeric expressions action descriptions 
explain section metrics provided part problem description quality plan involving numeric change evaluated terms appropriate problem domain 
syntax metrics expressed give examples 
section introduces notion durative action way modelling temporal properties planning domain 
discretised continuous durative actions considered 
syntax described examples modelling power limitations cases 
having examples syntactic representation durative actions formal semantics discretised continuous actions plans 
sections provide details 
semantics gives way tackling problem confirming plan validity important issue face concurrent activity 
section describe process plans validated competition discuss complexity validation question pddl 
section describes related temporal reasoning community order put contributions pddl wider context 
full bnf description pddl appendix 
pddl developed third international planning competition competing planners demonstrated discretized temporal metric models efficiently handled domain independent planners control rules 
ease competition identified features pddl series levels increasing expressive power 
strips fragment pddl referred level numeric extensions comprised level addition discretised durative actions resulted level continuous durative actions resulted level final level level comprised extensions pddl additional components support modelling spontaneous events physical processes 
level discussed details earlier fox long 
competition focussed levels levels planning technology stage sufficiently advanced handle additional complexities 
despite fact level competition devote discussion 
feel level presents important immediate challenges planning community affect extent planning applied real problems 
purpose provide overview new features introduced pddl discuss rationale language choices explain issues arisen trying extend pddl 
provided bnf pddl appendix intended language manual tutorial language 
examples language relevant materials readers consult archived resources currently held www dur ac uk long competition html 

pddl background fox long pddl action centred language inspired known strips formulations planning problems 
core simple standardisation syntax expressing familiar semantics actions pre post conditions describe applicability effects actions 
syntax inspired lisp structure domain description lisp list expressions 
early design decision language separate descriptions parameterised actions characterise domain behaviours description specific objects initial conditions goals characterise problem instance 
planning problem created pairing domain description problem description 
domain description paired different problem descriptions yield different planning problems domain 
parameterisation actions depends variables stand terms problem instance instantiated objects specific problem instance action grounded application 
pre post conditions actions expressed logical propositions constructed predicates argument terms objects problem instance logical connectives 
core pddl strips formalism language extends 
extended expressive power includes ability express type structure objects domain typing parameters appear actions constraining types arguments predicates actions negative preconditions conditional effects quantification expressing pre post conditions 
extensions essentially proposed adl pednault 
original definition pddl syntax accompanied formal semantics language really proposal standard syntax commonly accepted semantics little scope disagreement meaning language constructs 
parts original language proposal claim fails attempt offer standard syntax describing hierarchical domain descriptions suitable htn planners subset language concerned expressing numeric valued fluents 
ambitious project construct syntax entire structure domains hierarchical action decompositions expressed 
contrast strips planning differences planners hierarchical decomposition appear deeper domain descriptions containing structures go description domain behaviours example shop nau cao lotem mu oz avila uses mechanisms represent goal agendas solution oriented structures domain encoding 
diversity undermined efforts standardisation hierarchical domain descriptions part language successfully explored 
syntax proposed expressing numeric valued fluents tested language competition underwent revision early development language 
second competition avoided fluents general agreement syntax semantics language remained unnecessary 
mcdermott original pddl provides support numbers allowing numeric quantities assigned updated 
syntax numeric valued fluents changed pddl manuals mcdermott pddl expressing temporal planning domains define domain jug pouring requirements typing fluents types jug functors amount jug capacity jug fluent number action empty parameters jug jug jug precondition fluent test capacity jug amount jug amount jug effect change amount jug change amount jug amount jug amount jug pouring water described ai magazine article mcdermott 
aips planning competition committee ai magazine article pddl mcdermott 
mcdermott version numeric fluents pddl article ai magazine taken definitive statement syntax 
example numeric fluents mcdermott shown 
action models action known water problem allowing water jug emptied second jug provided space second jug large hold water 
effect discrete update values current contents assignment denoted change token 
numeric extensions pddl expressive language capable capturing wide variety interesting challenging behaviours 
illustrates pddl capture domain vehicle move locations consuming fuel 
seen example pddl includes syntactic representation level expressivity required particular domain descriptions requirements flags 
gives opportunity planning system gracefully reject attempts plan domains advanced features language planner handle 
syntax checking tools confirm requirements flags correctly set domain types features language correctly employed 
example problem description accompany vehicle domain shown 
example illustrates description initial state requires exhaustive listing atomic propositions hold 
symmetric transitive relations modelled exhaustive explicit listing propositions hold 
domain axioms simplify description domains relationships considered remains untested part pddl fox long define domain vehicle requirements strips typing types vehicle location fuel level predicates vehicle location fuel vehicle fuel level accessible vehicle location fuel level action drive parameters vehicle location fuel level precondition accessible fuel effect fuel fuel domain description pddl 
unstable part syntax 
pddl domains case sensitive somewhat light standard practice modern programming languages 
sections review extensions pddl development pddl version language third international planning competition 

numeric expressions conditions effects decisions development pddl propose definitive syntax expression numeric fluents 
syntax version described ai magazine article mcdermott minor revisions discussed 
numeric expressions constructed arithmetic operators primitive numeric expressions values associated tuples domain objects domain functions 
proposed syntax expressing numeric assignments updates express jug pouring operator originally described pddl manual ai magazine article see pddl 
example functions capacity amount associate jug objects numeric values corresponding capacity current contents respectively 
seen example prefix syntax arithmetic operators including comparison predicates order simplify parsing 
conditions numeric expressions comparisons pairs numeric expressions 
effects selection assignment operations order update values primitive numeric expressions 
include direct assignment relative assignments increase decrease 
numbers distinguished possible roles values represent example quantities resources accumulating utility indices counters 
pddl expressing temporal planning domains define problem vehicle example domain vehicle objects truck car vehicle full half empty fuel level paris berlin rome madrid location init truck rome car paris fuel truck half fuel car full full half half empty accessible car paris berlin accessible car berlin rome accessible car rome madrid truck rome paris accessible truck rome berlin accessible truck berlin paris goal truck paris car rome problem instance associated vehicle domain 
define domain jug pouring requirements typing fluents types jug functions amount jug capacity jug action pour parameters jug jug jug precondition capacity jug amount jug amount jug effect assign amount jug increase amount jug amount jug pouring water pddl style 
fox long differences pddl syntax ai magazine syntax declaration functions assign change 
decided allow numeric valued functions making declaration function return types superfluous 
simplified language requiring declaration function names argument types required predicates 
felt change ambiguous alongside operations increase decrease assign clearer 
numeric expressions allowed appear terms language arguments predicates values action parameters 
justifications decision philosophical pragmatic 
philosophically take view finite number objects world 
numbers exist unique independent objects world values attributes objects 
models object oriented sense actions seen methods apply objects parameters 
object oriented view directly inform syntax representations reflected way numbers manipulated relationships objects identified named initial state 
pragmatically current planning approaches rely able instantiate action schemas prior planning feasible finite number action instances 
branching planner search space choice points corresponding action selection finite ranges 
numeric fluent variables conflicts occur arguments predicate define finite ranges 
decision allow numbers arguments actions rules actions intuitively reasonable 
example action fly certain altitude expected take altitude number valued argument 
possible pddl range numbers finite 
practical point view think arduous constraint benefits keeping logical state space finite compensates modelling awkwardness results 
functions pddl restricted type object finite collection objects planning instance object finite function arity extensions pddl introduce functions type object object allowing object extended application functions objects 
advantage allow objects referred relationships known objects 
example refer object currently top object instantiating 
unfortunately functions various semantic problems 
particular interpretation quantified preconditions significantly harder collection objects longer necessarily finite extensional interpretations possible 
difficulty identity problem objects manipulated actions functional expressions refer affected implicitly 
example objects moved change action manipulating explicitly 
managing way functional terms map specific objects domain specific names appears introduce considerable complication semantics 
believe important avoid extending pddl elements poorly understood 

plan metrics pddl expressing temporal planning domains adoption stable numeric extension pddl core allowed introduce extension pddl new optional field specification problems plan metric 
plan metrics specify benefit planner basis plan evaluated particular problem 
initial goal states yield entirely different optimal plans different plan metrics 
course planner choose metric guide development solution just evaluate solution post hoc 
approach lead sub optimal possibly poor quality plans pragmatic approach handling metrics quite widely competition 
issue discussed companion analysing results rd ipc issue long fox 
value total time refer temporal span entire plan 
values built primitive numeric expressions defined domain manipulated actions domain 
consequence plan metrics express non temporal metrics pddl domains numeric expressions 
arithmetic expression specification metric requirement expression linear 
domain designer responsibility ensure plan metrics defined example involve divisions zero 
example plan metric shown 
implications having introduced extension far reaching helped demonstrate important new challenges planning systems particularly fully automated systems 
enriched descriptive power evaluation plans crucial extension practical planners case real plans evaluated solely number actions contain 
metrics described problem description allowing modeller easily explore effect different metrics construction solutions problems domain 
order define metric terms specific quantity necessary instrument quantity domain description 
example metric defined terms fuel fuel quantity initialised zero initial state updated time fuel consumed 
domain shown possible minimise linear combination fuel vehicles metric minimize fuel car fuel truck possible minimise distance covered distance instrumented 
straightforward instrument desired simply adding appropriate initial value incrementing effects domain description 
actions cause quantities change instrumenting value requires modification domain description just problem file 
plan metrics subtle dramatic impact plans sought 
simplest case actions increase metric minimised decrease maximised 
case example shown drive action worsen value plan metric metric shown maximising metric described paragraph 
situation appear relatively straightforward planner fox long define domain requirements strips typing fluents types vehicle location predicates vehicle location accessible vehicle location functions fuel level vehicle fuel vehicle fuel required location total fuel action drive parameters vehicle location precondition accessible fuel level fuel required effect decrease fuel level fuel required increase total fuel fuel required increase fuel fuel required define problem example domain objects truck car vehicle paris berlin rome madrid location init truck rome car paris fuel level truck fuel level car accessible car paris berlin accessible car berlin rome accessible car rome madrid accessible truck rome paris accessible truck rome berlin accessible truck berlin paris fuel required paris berlin fuel required berlin rome fuel required rome madrid fuel required rome paris fuel required rome berlin fuel required berlin paris total fuel fuel car fuel truck goal truck paris car rome metric minimize total fuel example domain problem instance describing plan metric 
pddl expressing temporal planning domains attempt actions solve problem possible 
fact case little complex appears rival plans uses actions lower cost 
complex case arises actions improve quality metric degrade 
example maximising metric add action domain driving degrade plan quality reducing fuel level vehicle improve plan quality increasing fuel level vehicle 
case planner attempt actions improve plan quality actions contributing achieving goals 
example necessary get vehicles destinations adding actions improve quality solution 
process involve trading finite resources increased value plan 
case example vehicle took fuel finite reservoir 
alternatively domain allow plans arbitrarily high value constructed actions 
occur metric vehicles domain maximising vehicle fuel level metric constrained domain impose limit fuel capacities vehicles 
case plans constrained finite availability resources important interesting form planning problem case plans arbitrarily high utility constructed obviously ill defined problem optimal plan exist 
non trivial determine planning problem provided metric ill defined 
fact shows numeric expressions constrained way adopted pddl planning problem undecidable 
problem finding collection actions consume resources beneficial impact plan metric hard planning problem 
clear determining planning problem defined undecidable 
worthless consider planning metrics course demonstrates modelling problem planning problem complex metrics introduced 
strategy available planners working problems subject plan metrics ignore metric simply produce plan satisfy logical goals problem specifies 
case plan quality simply value metric plan happens constructed 
strategy unsophisticated obviously better planner construct plan guided specified metric 
best metric expedite search process fully automated planner research issue 

durative actions temporal planning smith weld bacchus kabanza kambhampati various forms durative action 
order facilitate participation competition developed forms durative action allowing specification restricted forms timed conditions effects description 
constrained certain ways durative actions expressive proposals previously explored particularly way allow concurrency exploited 
forms discretised durative actions continuous durative actions 
fox long durative action load truck parameters truck location cargo crane duration duration condition start start start empty holding effect start holding start holding durative action loading truck 
assume capacity constraints 
forms rely basic durative action structure consisting logical changes caused application action 
consider logical change instantaneous continuous aspects continuous durative action refer numeric values change interval action 
depicts basic durative action load truck numeric change 
modelling temporal relationships discretised durative action done means temporally annotated conditions effects 
conditions effects durative actions temporally annotated 
annotation condition explicit associated proposition hold start interval point action applied interval point final effects action asserted interval start invariant duration action 
annotation effect explicit effect immediate happens start interval delayed happens interval 
time points accessible discrete activity takes place identified start points actions plan 
invariant conditions durative action required hold interval open ends starting points action 
expressed construct seen figures 
wants specify fact holds closed interval duration durative action conditions required start 
considered adopting convention constraints apply start points open interval inside durative action decided impossible express conditions required hold open interval 
examples actions conditions invariant open interval include action loading truck 
truck remain loading location loading interval start move away simultaneously loading completed 
reason start pddl expressing temporal planning domains drive action non mutex load reasonable interpretation plan driving starts instant loading completed 
actions affect invariant condition location truck executed simultaneously point durative action invariant constrained hold true point 
highlights important difference 
condition required precondition invariant condition meaning action affects invariant start action requiring invariant 
example truck location precondition load operator invariant consequence truck drive away instant load completed 
note definition load truck action chosen condition holding start effect precondition invariant condition 
means crane temporarily cease hold cargo time interval long holding cargo time deposit loading interval 
action quite flexible enabling exploitation concurrent uses crane applicable 
load truck example shows logical change wrapped durative actions encapsulate detail involved achieving effect sequence connected activities 
naturally useful able combine actions concurrently plan 
section consider extent concurrency allowed ways concurrent plans interpreted 
interpretation concurrent plans time introduced modelling domain possible concurrent activity occur plan 
prior time pddl plans interpreted sequential graphplan concurrent plans sequenced validated concurrency issue 
pddl plan validity depend exploiting concurrency correctly 
actions overlap occur giving rise questions interpretation synchronous behaviour 
discuss problems arising precise synchronization section 
explain constraints actions occur concurrently plan involving durative actions numeric conditions effects 
key difference durative actions pddl planners prior competition distinguish conditions effects start points durative interval invariant conditions specified hold interval 
actions pre postconditions local points action planner choose exploit durative action effects start 
conditions invariant distinguished pre conditions enabling exploitation higher degree concurrency possible preconditions distinguished invariants smith weld garrido barber tp geffner 
discuss consequences design decisions examples durative actions sections 
important observe view time point interval 
see period activity terms intervals state separated time points fox long state changing activities occur 
logical state change occurs instantaneously start point durative action 
propositions true half open intervals closed left open right 
activities change logical state update values numeric variables 
discretised view time allow finite number activities call happenings time points time considered continuous actions scheduled time point 
plan considered valid logical condition asserted negated instant 
impose constraint logical condition required hold asserted instant 
overly strong claim plan guaranteed valid instant proposition required exactly instant asserted 
require action precondition start time half open interval immediately preceding holds 
mathematically inconsistent asserted instant required 
conservative view validity simultaneous update access state proposition 
example instantaneous actions precondition effects precondition effect consider attempt apply simultaneously state holds ill defined 
reason switches state holds holds suppose precondition secure abstraction model values changing argue reliance values point change unstable 
adopt rule call moving targets mean actions simultaneously value accessing value update value moving target action access 
rule creates behaviour propositions planning state behaviour variables shared memory protected mutex lock posix threads difference read write access variable 
validity requires numeric value accessed updated simultaneously start point durative action 
case discretised durative actions numeric change modelled terms step functions numeric values accessed updated interval durative action acting value provide examples section provided updates consistent invariant properties dependent value 
case continuous durative actions values simultaneously accessed updated continuous process change occurring interval action 
discretised continuous cases allow multiple simultaneous updates provided update operations commutative 
order implement mutual exclusion relation require non zero separation mutually exclusive action points 
view points nonconflicting treated possible execute simultaneously precise synchronicity achieved world 
points mutually exclusive planner buffer occurrence points explicitly separating 
way ensure concurrency plan plausible world 
pddl expressing temporal planning domains durative action heat water parameters pan duration duration temperature heat rate condition start full start start full heating effect start heating heating assign temperature simple durative action boiling pan water 
planners exploit considerable concurrency domain ensuring conflicting start points actions separated non zero amount 
detailed specification mutual exclusion relation pddl section 
discuss implications non zero separation section 
numeric change discretised durative actions section explains continuous change modelled pddl durative actions discrete effects 
achieved step functions describe instantaneous changes beginnings ends durations actions 
appendix details language constructs involved 
example durative action illustrating numeric update operations shown 
example showing water heating action conditions full hold start interval interval 
model enter conditions start constraints 
action achieves start effect water heating condition maintained invariant interval action 
example operator achieves invariant condition draws attention fact conditions hold interval open left right 
noted actions figures fixed duration specifications 
case water boiling example means impossible adjust length time pan heated impact context action 
particular assign construct update numeric value possible concurrent activity affect value model flawed 
water heating example uses assign construct concurrent activity affect temperature water 
responsibility modeller ensure temperature accessed updated interval action executing 
fox long durative action navigate parameters rover waypoint waypoint duration duration travel time condition start available start start energy travel time rate visible traverse effect start decrease energy travel time rate start durative action recharge parameters rover waypoint duration duration recharge period condition start start sun start energy capacity effect increase energy duration recharge rate discretised durative actions rover move locations recharge 
decided leave modeller ensure correct behaviour assign construct want forbid modelling truly discontinuous updates 
example durative action models deposit cheque bank account duration days discontinuous update account balance interval inappropriate prevent actions accessing balance day period 
general modelling continuous change discrete effects open various pitfalls 
price paid convenience having specify details continuous processes 
discretised durative actions combination numeric step function updates requires care modelling 
particular relies notion conservative resource updating 
updating resource levels conservative consumption resource modelled happens start durative action happens continuously duration action production resource modelled happens durative action produced continuously interval 
example discretised durative action shows action rover navigating points modelled 
local precondition start period rover start location 
local effects include rover consumes appropriate amount energy destination 
conservative immediate second logical effect occurs point 
organisation ensures parallel activities consume energy committed navigation activity 
similarly recharge action initial energy zero energy pddl expressing temporal planning domains actual energy profile projected energy production step function model energy consumption dig action recharge action energy changing production consumption dig action final stage digging action final energy step function model energy produced recharge action discrete actions model production consumption resource 
reality recharge activity produces energy continuously concurrent dig activity continuously consumes 
conservative model step functions requires energy consumed digging available start action despite having updated model show additional energy accumulated part recharge action far executed 
final energy level consistent having continuous model 
new charge available action charge gained exploited recharging complete 
conservative updates ensures model support invalid concurrency 
illustrates recharging digging action consumes energy interact conservative energy consumption model 
model allow concurrent actions consume energy provided consume energy left conservative assumption dig action consumed demands start recharge action produced 
note example assumes energy constraints capacity constraint 
conservative updates subtle 
capacity constraint energy level rover need consider separate resources energy space available storage energy 
dig action consume energy start produce space recharge action consume space start produce charge 
combination possible ensure plans consume resource available 
durative actions conditional effects 
antecedents consequents conditional effect temporally annotated possible specify condition checked start effect asserted points 
fox long durative action parameters match location duration duration duration condition start start effect start dark start dark start light start start burning burning start dark light dark actions initial state coin basement dark basement goal coin problem plan basement pickup basement coin pickup coin start dark basement light basement dark basement plan action pickup parameters location object precondition light effect example problem durative action useful start effects 
burning match produces light necessary pick coin 
semantics clear formed durative action conditional effects require condition checked effect asserted 
conditional effects arise pddl variants 
discuss occurrence discretized durative actions interpreted section 
pddl allows specification duration inequalities enabling actions described external factors involved determining temporal extent 
match burning example shown seen effect start point interest planner exploit action start effect 
duration inequality specifies match burn longer specified upper bound 
model shows match put early planner considers appropriate 
discuss duration inequalities section 
pddl expressing temporal planning domains durative actions continuous effects objective discrete durative actions continuous change concentrate points period change takes place 
syntax allows precise specification discrete changes points durative actions 
plan needs manage continuously changing values discretely changing ones durative action language semantics need powerful 
general durative actions continuous discrete effects 
increase decrease numeric variable specified rate change time variable 
determining achieve goal planner able access values continuous quantities arbitrary points time line plan 
refer continuously changing time start durative action execution 
example express fact fuel level plane decreases continuously function consumption rate write decrease fuel level consumption rate distinctly different decrease fuel level flight time consumption rate single update happening point flight action whilst allows correct calculation fuel level plane point interval 
continuous effect whilst discrete 
continuous effects temporally annotated evaluated time interval action 
local durative action durative action access purely local clock 
way interpret expression representing continuous change differential equation fuel level consumption rate dt chose symbol differential equation possible concurrent actions simultaneously modifying quantity 
case differential equations form inconsistent pair simultaneous equations having intended effect combined contribution changing value quantity 
expressions describing continuous change take form product quantity possible express complex change interdependent concurrent effects 
example acceleration arises simply increasing distance quantity describing velocity time increasing velocity quantity describing acceleration 
dependencies changing terms include mutual dependencies terms differential equations arise lead continuous change dictated exponential logarithmic exponential functions 
plan containing continuous durative actions assign consult continuously modify numeric variables concurrently see example 
figures discrete continuous actions heating pan water simple model ignores heat loss 
discrete action modifies version duration inequality constraint 
fox long example flying example shown seen invariant condition fuel level greater equal zero flight maintained whilst fuel continuously decreasing 
expressed discrete durative actions abstracting continuous decrease making final value available point flight 
operation happens flight time mid air fuel level flight need calculated account continuous rate consumption operation 
discrete action calculate fuel level correctly access distance source destination flight rate consumption determine final fuel level 
order calculate fuel level correctly necessary determine time takes place remaining flight time calculate fuel consumed 
discrete durative actions give access time points start points 
discrete durative actions express desired combinations flying providing additional durative actions fly encapsulate interactions just described calculating fuel level correctly 
approach requires domain designer planner domain designer anticipate useful combination behaviours ensure appropriate encapsulations provided 
contrast discrete form continuous action fuel consumption effect terms powerful express fact mid flight plane affects final fuel level way consistent maintaining invariant fly action 
durative action fly parameters airplane airport duration duration flight time condition start fuel level effect start start decrease fuel level fuel consumption rate action parameters precondition effect assign fuel level fuel capacity continuous durative action flying 
pddl expressing temporal planning domains durative action heat water parameters pan duration duration temperature heat rate condition start full start start full heating effect start heating heating increase temperature duration heat rate discrete durative action heating pan water variable duration 
duration inequalities add significant expressive power duration equalities 
duration constraints express inequalities associated additional requirements flag extended expressiveness fixed duration discrete durative actions 
actions logical post condition start period pan heating 
conditions pan heating full heat source invariant presence agent pan local precondition points invariant 
action duration modelled expressing duration inequality constraint duration temperature heat rate effect point discrete durative action temperature pan increased duration heat rate heat rate domain constant 
continuous action duration constraint unnecessary invariant temperature added ensure pan exceeds boiling 
durative action models heating pan face possible concurrent activities affecting temperature 
duration inequality allows planner adapt duration take account temperature affecting activity way possible duration specified equality constraint 
duration constraint ensures temperature exceeds boiling checking precondition updating activity computed temperature increase executed exceeding boiling point 
temperature increase exceed boiling plan invalid 
temperature interval execution computed current temperature heating rate duration heating action active see discussion example 
fox long example plan attempts heat pan say applying pan heat water interval provided concurrent action ends heat water action duration constraint seen violated duration chosen increase temperature exceed boiling 
concurrent activity ends simultaneously heat water action moving targets rule violated duration constraint attempt access temperature time point concurrent action attempted update 
depicts situations 
apply durative action applies heat object case pan 
part duration constraint violated duration heat water action sufficient cause temperature increase boiling combined heat increase caused case plan invalid 
planner choose value duration avoids violation 
part plan determined invalid regardless duration action moving targets rule 
notice model attempt model consequences continued heating pan boiling point plans actions cause occur simply invalid 
pddl model physical situation consequences explicit planner choose exploit avoid accordingly 
heat water apply increase temperature pan check duration constraint heat water apply simultaneous change consultation temperature heating pan discrete durative action concurrently heating activity 
pddl expressing temporal planning domains durative action heat water parameters pan duration condition start full start start full heating temperature effect start heating heating increase temperature heat rate continuous durative action heating pan water 
duration inequalities adds significant expressive power discrete durative actions 
example plan depicted part illustrates water heating action shown concurrently heating pan considered valid provided duration value satisfies duration constraint water heating action 
brings close expressive power available continuous durative actions gives planner power exploit concurrent interacting activities enacting changes numeric valued variable see example 
attempting express continuous change duration inequalities give precisely equivalent behaviour discretisation forces actions access changing numeric values separated small temporal interval actions change values order resolve mutual exclusion 
continuous model necessary true value numeric variable available consultation time continuous process change 
discrete semantics section exploit fact changes occur plan executed points corresponding times happenings plan checked looking activity focussed finite happening sequence 
fact provided continuous effects restricted linear functions time order effects requires continuous effects affect numeric expressions contributing rate change numeric valued variable invariants restricted linear functions changing quantities possible restrict attention happening sequence continuous actions 
non linear effects higher order rates change create difficulties possible invariant satisfied points interval having necessarily satisfied interval 
cases longer sufficient insert invariant checking actions fixed mid points happening sequence plan order validate behaviour 
provided effects order linear invariants linear continuously changing values despite fact arbitrary fox long example possible discrete durative actions duration inequalities model effects adding egg heating water water say degrees 
applying heat water actions add egg action way duration heat water actions exactly duration required boil water original temperature 
way heat water action currently modelled means heat turned egg added turned complete heating temperature updated durative action terminates 
continuous durative actions egg added whilst single heat water action progress temperature pan continuously updated 
discrete durative actions duration inequalities allow approximate continuous activity appending finite sequence discrete intervals appropriate way 
moving targets rule means points intervals separated non zero arbitrarily small time gaps 
required continuous actions contrast step function effects discrete actions continuous effects localised single point 
time points action intervals accessible planner necessary gain access numeric values start points actions plan refer finitely mid points invariant checking actions 
values required points 
continuous durative actions support modelling exogenous events necessary take account exogenous activity environment determining validity plan 
related approaches time important numerically varying quantity 
simplest way reason time adopt black box durative action model change happens ends durative intervals 
approach taken language smith weld example durative actions encapsulate continuous change correct values affected variables guaranteed points implied intervals 
logical numeric effects durative action enacted action undefined interval execution 
preconditions remain true interval 
syntactic distinction preconditions invariant conditions action representation 
simplistic way ensuring correct action application prevent concurrent actions refer facts excludes intuitively valid plans 
sophisticated approach allows preconditions annotated time points intervals requirement condition true point interval duration action expressed 
approach taken kambhampati 
example annotated precondition possible express requirement chemical additive added minutes start tank filling action 
effects specified occur arbitrary points duration action possible express effects pddl expressing temporal planning domains occur specified duration 
possible distinguish conditions local specific points duration action invariant action 
allowing finitely time points start actions language complex adding expressive power 
time points strictly scheduled relative start action effect achieved sequence linked durative actions 
decided keep pddl simple restricting access points actions 
tlplan bacchus similar constrained approach adopted actions applied instantaneously delayed effects 
delays effects arbitrary different effect 
invariants specified preconditions checked instant application subsequent delayed effects separated action initiated 
planners developed networks temporal constraints ghallab jonsson morris muscettola rajan el richards handle temporal structure planning problems :10.1.1.35.724
efficient algorithms exist handling constraints dechter meiri pearl practical managing large networks :10.1.1.40.1018
domain models constructed pddl certainly lend treatment similar techniques constrained handled way 

semantics pddl sections provide formal semantics numeric extension temporal extension pddl 
sections contain definitions 
lengthy treatment necessary semantics developed adds significant extensions classical planning semantics lifschitz developed strips lifschitz 
time plans describe behaviour relative real time line related extension treatment concurrency actions executed parallel lead plans contain concurrent interacting processes processes encapsulated durative actions pddl extension handle numeric valued fluents conditional effects conjunction extensions 
semantics built familiar state transition model 
requirements semantics reduced essential elements 

define state 
time numeric values complicate usual definition state set atoms 

define state satisfies propositional formula representing goal condition precondition action 
extension usual interpretation state valuation atom true atom state closed world assumption required order handle numeric values state 
fox long 
define state transition induced application action 
update rule logical state supplemented explanation consequences numeric part state 

define actions applied concurrently concurrent application affects application actions individually 
structure definitions follows 
definitions section define means plan valid plan consists non durative actions 
definitions set basic terminology foundational structures framework handling conditional effects primitive numeric expressions 
definition meets requirement identified defining states 
definition meets second requirement defining goal description satisfied state 
definition defines simple plan extending classical notion sequence actions adding time 
definitions meets fourth requirement defining actions executed concurrently 
definition meets third requirement defining mean execution actions including concurrent execution actions 
definitions define execution plan means plan valid basis laid previous definitions 
section semantics extended give meaning durative actions 
definition defines ground durative actions analogously definition simple non durative actions 
similarly definition parallels definition simple plan definition definitions parallel execution validity simple plans definitions 
definition critical definition semantics plans durative actions supplying transformation temporal plans simple plans validity semantics purely simple plans determine validity original temporally structured plans 

semantics simple plans semantics define section extends essential core lifschitz strips semantics handle temporally situated actions possibly occurring simultaneously numeric conditional effects 
definition simple planning instance simple planning instance defined pair dom rob dom rs arity tuple consisting finite sets function symbols relation symbols actions non durative function arity mapping symbols respective arities 
rob os init triple consisting objects domain initial state specification goal state specification 
primitive numeric expressions planning instance nes terms constructed function symbols domain applied appropriate number objects drawn os 
dimension planning instance dim number distinct primitive numeric expressions constructed instance 
pddl expressing temporal planning domains atoms planning instance atms finitely expressions formed applying relation symbols rs objects os respecting arities 
init consists parts set literals formed atoms atms 
set propositions asserting initial values subset primitive numeric expressions domain 
assertions assign single primitive numeric expression constant real value 
goal condition proposition include atoms formed relation symbols objects planning instance numeric propositions primitive numeric expressions numbers 
collection action schemas non durative actions expressed syntax pddl 
primitive numeric expression schemas atom schemas action schemas formed function symbols relation symbols appropriate arities defined domain applied objects os schema variables 
semantics shows instantiated action schemas interpreted state transitions similar way familiar state transition semantics defined lifschitz 
important difference states longer seen simply sets propositions account numeric expressions appearing planning instance time state holds 
achieved extending notion state 
definition logical states states finite collection atoms planning instance logical state subset 
planning instance dimension dim state tuple denotes undefined value 
value time state second logical state third value vector dim values dim primitive numeric expressions planning instance 
initial state planning instance vector values corresponding initial assignments treating unspecified values 
undefined values included numeric ranges domains terms start undefined initialised exploited actions 
interpret actions state transition functions necessary achieve steps 
firstly pddl plans constructed fully instantiated action schemas process instantiation affects constructs action schema defined secondly machinery links primitive numeric expressions elements vector real values state allows interpretation numeric updating behaviours action effects defined 
mechanisms support second steps affect process treatment numeric effects described 
definition assignment proposition syntactic form numeric effect consists assignment operator assign increase decrease scale scale primitive numeric expression referred lvalue numeric expression arithmetic expression terms numbers primitive numeric expressions referred rvalue 
fox long assignment proposition corresponding numeric effect formed replacing assignment operator equivalent arithmetic operation increase annotating lvalue prime 
numeric effect assignment operator increase decrease called additive assignment effect operator scale scale called scaling assignment effect called simple assignment effects 
numeric effect defines function numeric values state action applied determining value primitive numeric expression resulting state 
convenience uniform treatment numeric expressions appearing pre post conditions transform functions propositions assert equality post condition value expression intended define 
writing effect increase function write proposition 
priming distinguishes postcondition value primitive numeric expression precondition value convention commonly adopted describing state transition effects numeric values 
binding primitive numeric expressions values states defined definition 
definition normalisation planning instance dimension dimi 
dim instance dependent correspondence primitive numeric expressions integer indices elements vector dimi real values dimi normalised form ground proposition defined result substituting primitive numeric expression literal 
normalised form referred 
numeric effects normalised converting assignment propositions 
primed primitive numeric expressions replaced corresponding primed literals 
represent vector 
xn definition replacement primitive numeric expressions indexed literals allows convenient consistent substitution vector actual parameters vector literals appearing state 
machinery supporting treatment numeric expressions complete possible consider process instantiating action schemas 
process managed steps 
step remove constructs treat syntactic sugar definition domain 
conditional effects quantified formulae 
handle direct syntactic transformations action schema set action schemas considered equivalent 
transformation similar described knoblock 
possible give semantic interpretation application conditional effects directly transformation allows significantly simplify question actions performed concurrently 
definition flattening actions planning instance containing action schema asi set action schemas flatten defined set initially containing constructed follows pddl expressing temporal planning domains contains action schema conditional effect create new schemas copies conditional effect conjoin condition precondition copy effects copy conjoin precondition copy 
add modified copies contains action schema formula containing quantifier replace version quantified formula var 
replaced conjunction quantifier forall disjunction exists propositions formed substituting objects variable var 
possible ways 
steps repeated step applicable 
flattened actions grounded usual substitution objects parameters definition ground action planning instance containing action schema asi set ground actions gaa defined set structures formed substituting objects schema variables schema flatten components name name action schema values substituted parameters forming precondition propositional precondition set ground atoms appear referred 
adda positive postcondition set ground atoms asserted positive literals effect negative postcondition set ground atoms asserted negative literals effect npa numeric postcondition set assignment propositions corresponding numeric effects sets primitive numeric expressions defined ground action gaa la appears lvalue ra primitive numeric expression rvalue appears rea appears lvalue additive assignment effect comment appropriate definition action precondition considered parts logical part numeric expression dependent part 
unfortunately interdependent 
example clear room space fox long precondition action 
order handle conditions need check satisfied current logical state current values domain numeric expressions 
inclusion numeric component state necessary ensure correct substitution numeric values expressions action precondition 
achieved normalisation process definition definition 
contrast postcondition action contain interlocked numeric logical effects possible separate effects distinct numeric logical components 
definition valid ground action ground action 
valid primitive numeric expression appears lvalue simple assignment effect different type assignment effect 
definition ensures action attempt inconsistent updates numeric value 
logical effects action conflict possible write syntactic definition action effects inconsistent example assigning different values primitive numeric expression 
definition updating function valid ground action 
updating function composition set functions dim npa primitive numeric expression appear lvalue xi satisfied 
notation read result normalising substituting vector actual values parameters actual values formal parameters definition defines function describing update effects action 
function ensures reals vector describing numeric state remain unchanged affected action numeric state equivalent persistence achieved propositions strips assumption 
values vector normalisation process substitute correctly indexed vector elements primitive numeric expressions appearing lvalues primed vector elements corresponding values post action state rvalues unprimed values appearing pre action state 
tests satisfied order ensure correct behaviour functions composition simply confirm arithmetic rvalues correctly applied arrive lvalues 
requirement action valid ensures composition functions definition defined functions set commute composition carried order 
various sets primitive numeric expressions defined definition allow conveniently express conditions concurrent actions interfere 
particular concerned allow concurrent assignment primitive numeric expression concurrent assignment inspection 
allow concurrent increase decrease primitive numeric expression 
allow pddl expressing temporal planning domains apply collections concurrent updating functions primitive numeric expressions 
allowed provided functions commute 
additive assignments commute updating operations guaranteed affect primitive numeric expressions rely primitive numeric expressions affected concurrent assignment propositions 
possible similar exception scaling effects additive assignment effects particularly important role durative actions shared scaling effects simplicity allow concurrent updates effects 
sets primitive numeric expressions determine safe situation 
single action possible rvalues lvalues intersect 
action update primitive numeric expressions current values primitive numeric expressions updated action 
rvalues values take state prior execution lvalues supply new values state follows 
definition satisfaction propositions logical state ground propositional formula pddl defines predicate num follows num iff means true interpretation atom numeric comparison assigned true iff numeric comparison interpreted standard equality ordering reals logical connectives usual interpretations 
satisfied state num 
comparisons involving including direct equality values undefined enclosing propositions undefined satisfied state 
definition applicability action ground action 
applicable state rea satisfied semantics simple plan simple plan pddl sequence timed actions timed action syntactic form action 
pn notation positive rational number floating point syntax expression action 
pn name actual parameters action executed point time 
complex plans simple durative actions effects preconditions occur semantics plans discussed section 
special separators required separate timed actions sequence actions required time sorted order 
possible multiple actions time stamp indicating executed concurrently 
emphasised earliest point activity occurs plan strictly time 
constraint follows decision initial state state existing time decision semantics actions effects interval closed left starting time action applied preconditions tested interval open right precedes action 
fox long order retain compatibility output current planners concession plan sequence actions time points inferred action applied time succeeding actions apply sequence integral time points unit apart 
simple plan slight generalisation familiar strips style classical plan actions labelled time executed 
definition simple plan simple plan sp planning instance consists finite collection timed simple actions pairs rational valued time action name 
happening sequence ti sp ordered sequence times set times appearing timed simple actions sp ti greater 
possible sequence empty empty plan 
happening time happening sequence sp set simple action names appear timed simple actions associated time sp plan consists sequence happenings set action names applied concurrently specific time sequence ordered time 
times happenings occur forms happening sequence 
noted action names ambiguous action schemas contain conditional effects consequence flattening split actions multiple actions identical names differentiated preconditions 
set actions identical names applicable logical state precondition action set necessarily inconsistent precondition action set due way conditional effects distributed pairs action schemas induce 
order handle concurrent actions need define situations effects actions consistent 
issue discussed section 
mutual exclusion rule pddl extension idea action mutex conditions graphplan blum furst 
extension handles extra features extended expressive power language include arbitrary propositional connectives numeric expressions 
conservative condition actions executed concurrently ensures possibility interaction 
rules cases intuition suppose concurrency possible 
example actions action precondition effect action precondition effect suppose executed simultaneously state hold 
definition asserts actions mutex 
reason chosen constrained definition checking mutex actions pddl expressing temporal planning domains tractable handling case implied example appear require checking consequence interleaving preconditions effects possible orderings 
condition primitive numeric expressions discussed determines update effects executed concurrently affect values tested preconditions regardless results tests matter satisfaction enclosing proposition 
rule moving targets concurrent actions affect parts state relevant precondition tests actions set regardless effects harmful 
considered odd preconditions action refer literals add effects concurrent action 
require preconditions negative case interaction add effects analogous interaction positive preconditions delete effects 
moving targets rule cost determining set actions applied concurrently polynomial size set actions pre post conditions 
definition mutex actions grounded actions non interfering gp rea gp reb adda adda la rb ra lb la lb actions non interfering mutex 
clause definition asserts concurrent actions update values additive assignment effects 
ready define conditions simple plan valid 
separate executability plan achieves intended goal 
say plan valid executable achieves final goal 
executability defined terms sequence states plan induces sequentially executing happenings defines 
definition happening execution state happening activity set grounded actions ah name valid rea satisfied result executing happening associated time th state undefined ah pair actions ah mutex 
state th adda ah ah result applying composition functions ah functions ah affect different primitive numeric expressions represent additive assignment effects functions commute fox long order functions applied irrelevant 
value defined definition 
requirement activity happening number elements happening simply constraint ensures action name happening leads valid action applicable appropriate state 
seen conditional effects induce construction families grounded actions family applicable state 
applicable name mean precondition unsatisfied regardless conditional effects 
case asserting attempt apply action undefined interpretation 
definition executability simple plan sp planning instance executable defines happening sequence ti sequence states si initial state planning instance 
si result executing happening time ti sp state sk called final state produced sp state sequence si called trace sp note executable plan produces unique trace 
definition validity simple plan simple plan planning instance valid executable produces final state goal specification satisfied 
semantics durative actions plans durative actions discrete effects semantics terms semantics simple plans 
handling durative actions continuous effects complex discuss section 
durative actions appearing plan additional field indicating duration 
syntax action 
pn rational valued duration written floating point syntax 
durative actions introduced framework defined far generalising definition include durative action schemas 
definition grounded action extended define form grounded durative actions 
definition way associate durative action simple actions corresponding points durative action 
simple actions simulate behaviour durative action 
aspects captured pair simple actions duration durative action invariants hold duration 
elements simply handled minor extension semantics simple plans approach adopt 
route avoid difficulties establishing effects interactions durative actions handled semantics concurrent activity simple plan 
see difficulty account handling durative actions conditional effects contain conditions effects associated different times conditions hold entire duration pddl expressing temporal planning domains action 
cases complicate semantics postpone treatment section durative actions conditional effects 
mapping durative actions non durative actions important consequence mutex relation implied non durative actions advantageously weaker strong mutex relation example smith weld 
durative actions applied concurrently provided points action interact points simultaneous invariants action 
definition grounded durative actions durative actions grounded way simple actions see definition replacing formal parameters constants planning instance expanding quantified propositions 
definition durative actions requires condition conjunction temporally annotated propositions 
temporally annotated proposition form start unannotated proposition 
similarly effects durative action continuous conditional effects conjunction temporally annotated simple effects 
duration field da defines conjunction propositions separated start duration conditions start da terms arithmetic expressions duration 
separation conducted obvious way placing start conditions start conditions grounded durative action da continuous effects conditional effects defines parameterised simple actions parameter duration value single additional simple action follows 
precondition equal conjunction set propositions start condition da start effect equal conjunction simple effects start effect da respectively 
defined simple action precondition equal conjunction propositions condition da 
empty effect 
conjunct condition da contributes precondition precisely 
conjunct effect da contributes effect precisely 
convenience refer entire respective simple action just name 
actions parameterised duration parameter substituted correct duration value order arrive simple actions corresponding start durative action 
definition plans plan durative actions planning instance consists finite collection timed actions pairs form rational valued time simple action name action schema name constants instantiating arguments schema form rational valued time durative action name non negative rational valued duration 
fox long definition induced simple plan plan happening sequence ti ordered sequence time points formed set times induced simple plan plan simplify set pairs defined follows simple non durative action name 
duration duration expressions simple timed actions square brackets denote substitution duration case pairs durative action name 
ti ti pair ti ti ti happening sequence process transforming plan simple plan involves introducing actions represent points intervals durative actions plan applicable 
duration constraints convert simple preconditions start actions requiring substitution numeric value duration field complete conversion simple actions 
complication process invariants associated points checked interval 
achieved adding simple plan collection special actions responsible checking invariants 
actions added pair happenings original plan lying start point durative action 
semantics simple plans requires preconditions actions plan satisfied effects consequence putting monitoring actions simple plan ensure original plan judged valid invariants remain true firstly start durative action subsequently happening occurs duration durative action 
possibility monitoring actions occur times updating actions require values accessed time updated violating moving targets rule 
order avoid problem monitoring actions interleaved updating actions inserting midway pairs successive happenings interval durative action executed 
happenings original plan need considered carrying insertion invariant checking actions effect states checked 
alternative treatments invariants possible important advantage approach taken semantics rests state transition model form familiar planning community 
plans seen recipes state transition sequences state transition function current state world 
durative actions complicate picture rely commitment durative action started follow completion 
commitment involves sort communication duration plan 
communication managed structures outside plan examine 
care taken reading definition disjunct allows time corresponding execution durative action included happening time 
pddl expressing temporal planning domains trace artificial modification plan ensure states carry extra information start durative action 
approach disadvantage durative actions complex artificial components added plan intrusive 
particularly apparent treatment conditional effects require conditions tested start durative action duration effects triggered cases require sort memory state remember status tested conditions start durative action point 
memory conditions allow avoid embedding entire execution history state substituting ad hoc memory history just propositions just times required 
management conditional effects form mapping durative actions simple actions discussed section 
conclude definitions supporting validity plan durative actions 
definition executability plan plan planning instance executable induced simple plan simplify executable producing trace si ti si vi definition validity plan plan planning instance valid executable goal specification satisfied final state produced induced simple plan 
durative actions conditional effects explain mapping described previous section extended deal durative actions containing conditional effects 
observe temporally annotated conditions effects accumulated temporal annotation distributes logical conjunction 
convert conditional effects conditions simple conjunctions start condition condition condition 
noted allow logical connectives conjunction combining temporally annotated propositions 
allowing connectives create significant complexity semantics create potentially paradoxical opportunities communication states earlier states 
similarly conditions durative action effects reduced conjunction start effect effect 
treatment conditional effects divides cases 
case straightforward effect durative action form condition effect bear single temporal annotation transformed simple conditional effect form attached start simple action start 
case straightforward explicitly extend previous definitions cope 
second case condition condition effect start conditions effect effects 
note consider conditional effects effects occur start conditions dependent state duration action fox long meaningless 
reverse expected behaviour causality cause precedes effect 
attempt validate plan constructing trace reversed causality huge problem determine initial effects applying durative action seen conditions held subsequent interval activity equally see effects activity interval seeing initial effects applying durative action 
paradox created opportunity action change past 
handle second case need modify state start durative action remember start conditions satisfied communicate durative action simply looked current state determine conditional effect applied 
apply transformation conditional effects form start ps pe conditional effect added start simple action ps mps conditional effect added simple action pe mps mps special new proposition unique particular conditional effect particular application durative action transformed 
ensuring proposition unique way possibility action plan interfering represents isolated memory fact ps held state durative action started 
conditional effect conditions transformation applied simply ignoring pe previous discussion 
depicts transformation single durative action conditional effect collection level actions complete appropriate memory proposition case called 
importance memory introduced transformation explained figures 
shows ambiguity results remembering state trajectory plan reached 
illustrates state point durative action described ends impossible determine state added 
possible reached state different paths path having seen started state held path having seen started state hold action achieve effect 
state contain information disambiguate path reach determine correct value ends 
third final case durative action conditional effects form start ps pi pe 
effect start conditions transformation applied simply ignoring ps pe appropriate 
case need construct transformation remembers ps held state durative action applied pi holds interval start durative action 
invariants durative actions conditions required hold plan valid determine effects occur durative action 
idea intervening monitoring actions invariants definition 
achieved adding effect start action start parameters precondition effect pddl expressing temporal planning domains durative action parameters duration duration condition effect start action start parameters precondition effect action start parameters precondition effect initial durative action transformation simple actions expansion conditional effects action parameters precondition effect action parameters precondition effect transformation plan simple plan plan plan start action parameters precondition effect conversion durative action non durative actions grounded forms 
start fox long start achieve flawed state space resulting failure record path traversed conditional effects span interval durative action 
arc labelled achieve indicates possible application action achieves proposition start start achieve correct state space showing memory proposition 
arc labelled achieve indicates possible application action achieves proposition action mpi 
monitoring simple actions required precondition single conditional effect mpi pi mpi 
mpi special new proposition unique conditional effect application instance durative action transformed 
monitoring actions added intermediate points monitoring actions definition 
transformation second case required start condition ps ps mps added conditional effect start simple action 
add conditional effect simple action mps mpi pe 
effect machinery ensure false time start durative action mpi deleted durative action mps hold precisely ps held start action mpi hold precisely pi held entire duration durative action 
conditional effect action achieves intuitively correct behaviour asserting conditional effect precisely start condition held start durative action condition holds durative action condition held duration action 
addition new memory checking actions means longer true claim added actions change state 
memory propositions unique task communication single action instance effects memory checking actions implications invariants 

pddl expressing temporal planning domains 
semantics continuous durative actions continuous durative actions complicates semantics 
longer possible handle invariants insertion simple actions happenings plan test continued satisfaction 
fact continuous effects principle cause invariant satisfied parts interval 
ignoring invariants moment updates numeric values caused continuous effects applied discrete updates time points interval apply 
updates behave slightly differently discrete updates seen durative actions discrete effects possible continuous update affect variable concurrently affected discrete update examined precondition creating inconsistency 
example water heating action applied concurrent addition egg pan precondition temperature water degrees value temperature examined moment application action adding egg 
temperature change happening interval start heating point egg added discrete update point egg added 
temperature changed instant addition egg 
section summarise semantics continuous actions 
semantics discrete durative actions defined terms familiar state transition semantics continuous semantics introduces different formulation 
definition continuous durative action continuous effect effect expression includes symbol continuous durative action durative action continuous effect 
definition continuous update function set ground continuous effects planning instance st state 
continuous update function defined state st function fc dimi dt fc update function generated action npa op op definition shows continuous effects continuous durative actions combined create single system simultaneous differential equations solution appropriate starting point defines evolution continuously varying values 
definition induced continuous plan planning instance includes continuous durative actions plan induced continuous plan triple cts simplify set invariant constraints invariant fox long ti ti consecutive times happening sequence simplify 
set active continuous effects ti ti ti ti continuous effect cts set systems continuous effects cts ti ti set active continuous effects ti ti components continuous plan separate invariant conditions continuous effects rest simple plan order allow correct application continuous updates allow confirmation invariants hold face continuous effects 
definition trace planning instance includes continuous durative actions plan sp inv cts induced continuous plan ti happening sequence initial state trace sequence states si defined follows element ti ti cts si state resulting applying happening ti simple plan sp state si 
ti ti cts ti state formed substituting ti ti numeric part state si continuous update function defined state si 
si state resulting applying happening ti simple plan sp state ti 
undefined element cts trace 
definition defines trace similar fashion traces simple plans plans durative actions 
key difference need apply continuous updates 
handled solving systems simultaneous differential equations interval active applying result update numeric values interval 
course easier describe solving arbitrary simultaneous differential equations algorithmically generally possible 
certain constraints semantics implemented order confirm validity plan automatically 
definition invariant safe planning instance includes continuous durative actions plan inv cts induced continuous plan si trace ti ti cts fi continuous update function defined si 
invariant safe fi defined inv ti ti num fi logical state si 
definition symbols mean interval closed open 
pddl expressing temporal planning domains semantic point view invariants checked point interval apply 
interval contains finitely discrete changes obligation met considering finite number points change occurs fact exploited discrete durative action plan semantics definition 
continuous change obligation harder meet 
practice invariants checked examining possible roots function describing continuous change finding roots difficult general 
suitable constraints forms differential equations expressed domain validation problem tractable 
definitions simply assemble components arrive analogous definitions executability validity simple plans plans durative actions 
definition executability plan plan containing continuous durative actions planning instance induced continuous plan cts 
executable trace defined si invariant safe 
definition plan validity plan containing durative actions planning instance valid executable trace si sk satisfies goal 
plan validation plan validation important part pddl particularly role competition 
approximately plans consider competition seen automation essential 
validation problem tractable propositional versions pddl plans finite validated simply simulation execution 
issue complicated pddl potential concurrent activity possibly face numeric change necessary ensure invariant properties protected concurrent activity non interfering 
durative actions question plan considered valid contain points actions initiated plan 
action exploited plan effect duration clear point plan action selected start effect clear 
match striking action performed start effect order burned match brief interval 
argued having obtained desired start effect action irrelevant plan terminate soon goals achieved ensuring initiated actions safely 
plan search process kambhampati terminate whilst queued events awaiting advancement time 
possible conceive situations point action incorporated start effect introduces inconsistencies plan inclusion plan invalid 
cases plan validity compromised ignoring effects 
order avoid having resolve complexities taken view pddl plan valid action start points explicit plan 
having identified case proceed confirm happenings plan mutex free 
fox long plan validation decidable domains including discretized certain constraints continuous durative actions activity encapsulated durative actions explicitly identified plan 
trace induced plan finite checkable 
observe validation problem pddl decidable actions contain duration inequalities 
determining duration inequalities solved completed finished plan validation plan proceed simulation execution case pddl plans 
problem tractable domains continuous effects continuous effects principle allow expression domains complex functions describing numeric change long 
assumption continuous effects restricted description terms simple linear quadratic functions interactions concurrent continuous effects plan validity tractable 
cost practice increased may necessary solve polynomials order check invariants 
validation plans containing complex expressions change explored 
plan validity checking tractable subtlety arises need represent plans syntactically difficulties involved expressing numbers arbitrary precision 
principle values required describe valid plans algebraic assuming constrain continuous effects indicated finitely representable 
practice expecting planners handle numbers algebraic expressions unnecessarily complicated far reasonable assume numbers represented finite precision floating point values 
syntax adopted expression plans restricts planners expressing times finite precision floating point values 
constraint limitations precision floating point computations implementations plan validation systems necessary take pragmatic view validation process accept numeric conditions evaluated certain tolerance 
occur way report plan necessary degree accuracy valid interpretation semantics defined section 
cases plan specifies time points example significant digits reasonable abstraction execution time activity needed control flow system 
plan specify time points absolutely precisely abstraction forced planner fact working models world physical world 
problem relationship theoretical semantics pragmatic concerns automated validation 
relationship depicted terms kinds plans automatically validated 
left side picture describes theoretical semantics arrow indicating link plans interpretation theoretical semantics 
example possible construct domain problem plan requires action happen time meaningful semantic object plan specifies action happen time meaningful semantic object equal 
plans distinct correct assumed constraints 
right side picture depicts pragmatic validation syntactic plan objects 
control plans distinct semantics map syntactic object assume validation subject tolerance 
pddl expressing temporal planning domains semantic plan objects semantic interpretation plans validation plans mapping semantics pragmatic realisation automated validation process mapping semantic plans syntactic counterparts 
specific pair mappings syntactic plan objects pragmatic mapping semantics plans validation automated computational processes 
shaded area contains plans interpreted theoretical semantics 
seen plan collection indistinguishable meaningful plan mapped syntactic side picture 
plans map syntactic object approximates value 
syntactic plan validated pragmatic validation processes necessary automatic validation describable syntactic plans check validity subject tolerance 
pragmatic constraints representations plans expectations representations numeric values planners validators consequences reasonable assumptions models check validity case abstractions non zero tolerance world 
practice problem accept plans specified tolerance levels pathological cases arithmetic precision computer representations floats immediate negative impact tries take stronger line plans accepted strictly valid formally precise evaluation expressions 
interesting philosophical issue arises discussed henzinger authors 
fact possible achieve exact precision measurement time continuous numeric quantities 
henzinger considered problem development robust automata 
robust automata accept trace exists tube traces distance original trace acceptable original acceptance criteria 
called fuzzy tubes indicating time precisely detectable 
idea offers path formal semantics closer defining plans robust imprecision executive ability measure time 
unfortunately checking fuzzy tubes intractable 
currently compromise adopting value tolerance checking numeric values fulfil numeric constraints plan execution represent minimum separation conflicting points plans 
consistent idea planner assumes executive willing indicated tolerance level checking preconditions actions unreasonable suppose plan finer grained measurements determining actions fox long applied 
moment value set validation process communicated informally planner engineers better allow domain designer define appropriate particular domain 
remain issues concerning correct management buffers validation particularly usual problem concerning transitivity fuzzy closeness important issues temporal reasoning restricted planning context 
solutions problems 

related representing reasoning time representation reasoning statements time temporal extent propositions long subject research ai including planning research allen mcdermott sandewall kowalski sergot ghallab muscettola bacchus kabanza 
important issues raised extension pddl handle temporal features course examined researchers example shanahan continuous change event calculus shoham reichgelt temporal reasoning non reified temporal systems bacchus tenenberg 
vila provides excellent survey temporal reasoning ai 
section briefly review central issues addressed treatment literature set pddl context research temporal logics 
researchers temporal logics considered problems reasoning concurrency continuous change temporal extent 
works focussed problem reasoning change world described arbitrary logical formulae concerned making meta level statements effect precede cause 
need handle complex logical formulae frame problem difficult resolve approach circumscription mccarthy default reasoning reiter typical 
strips assumption provides simple solution frame problem states described atomic formulae 
classical planning assumption states described atomically general view modelling change 
simplifying assumption surprisingly expressive 
bench mark domains introduced third international planning competition suggest atomic modelling powerful capture complex domains closely approximate real problems 
temporal reasoning issues confront simplified consequence having simplifying assumption states updated 
remain concerned major issues temporal reasoning concurrency continuous change temporal extent 
development pddl basic decision consider points durative actions instantaneous state transitions 
allows concentrate truth propositions points intervals 
decision consider actions way similar temporal reasoning researchers shanahan mccarthy hayes mcdermott 
context pddl approach advantage smoothly integrating classical planning view actions state transitions 
allen shown temporal ontology intervals basis planning allen planning systems pddl expressing temporal planning domains strongly influenced intervals approach muscettola knight chien fukunaga 
allen moved away initial position instants required introducing notion moments hayes allen concept attempts reconcile stance instantaneous intervals observation changes values discrete valued variables propositional variables apparently avoid changing instants 
view consistent approach take modelling continuous durative actions view change consisting discrete continuous aspects henzinger 
remainder section compare pddl extensions propose previous temporal reasoning considering central issues identified 
objective claim extensions improve previous demonstrate implementation solutions problems pddl framework exploitation directly accessible planning way embedded logic accompanying proof theory 
continuous change temporal reasoning frameworks began consideration discrete change extended handle continuous change 
example shanahan extended event calculus kowalski sergot enable modelling continuous change 
process extension mirrors situation faced extending pddl system modelling discrete change existed 
interesting compare pddl systems extended event calculus 
sink filling example shanahan discusses issues termination events self termination termination events identification level water sink filling process effect rate change level water sink filled sources simultaneously 
behaviour filling process effects state sink time modelled axioms allow inference engine predict state sink points execution process 
pddl allows representation complex interactions arise sink filled multiple independently controlled water sources means concurrent durative actions continuous effects encapsulate initiation filling process single water source change level water sink termination process water source turned 
model robust easily accommodates multiple water sources simply modifying rate flow appropriately commutative updates 
actions additive effects model provides rate water enters tank source possible compute level water sink point filling interval concurrent action consult level 
contrast shanahan extension event calculus approach require filling process point view logical axiomatisation terminated restarted new rate water source opened closed process simply remains active 
change rate filling fox long reflected piecewise linear profile depth water sink just shanahan model 
possible model multiple water sources situation filling process completely encapsulated discretized durative action 
discretized action true level water accessible filling process start 
step function behaviour coarsely approximates true behaviour consequence complex interactions properly modelled 
important consequences continuous behaviour triggering events 
shanahan extensions achieved axiomatisation causal relationships events distinguished syntactically actions fact happening axiomatically consequence certain conditions 
pddl events flooding sink filling continues capacity reached modelled combination conditional effects duration inequalities 
events modelled way possible predict spontaneous events occur 
pddl extended allow expression causal axioms alternative approach modify language enable representation events action oriented tradition 
achieved breaking continuous durative actions instantaneous start points processes encapsulate 
enable execution process initiated start action ended instantaneous state transition action control planner event 
simple extension language needed distinguish actions events prevent planner deliberately selecting event 
refer approach start process model extended pddl support fox long 
resulting language pddl difficult plan pddl open questions concerning complexity plan validation problem language remain topics 
concurrency opportunity concurrent activities complicates aspects temporal reasoning 
firstly necessary account actions concurrent secondly necessary describe concurrent activities interact effects world 
formalisms points achieved relying underlying logic deliver inconsistency attempt apply incompatible actions simultaneously 
example axioms event calculus yield simultaneous truth falsity fluent incompatible actions applied simultaneously consequently yield inconsistency 
unfortunately recognising inconsistency general undecidable sufficiently expressive language 
pddl adopt solution exploits restricted form action centred formalism defining circumstances actions lead inconsistency rejecting simultaneous application actions 
favour conservative restriction compatibility actions moving targets rule order support efficient determination incompatibility permissive elusive ruling 
alternative approach adopted bacchus tlplan example allow multiple actions occur instant executed sequence 
find solution counter intuitive pddl expressing temporal planning domains importantly consider impossible plan sort instruction executive executive equipped execute actions simultaneously specified order 
view order execution matters executive ensure actions sequenced limitations capability measure time react passing 
shanahan discusses gelfond example soup bowl problem concerns raising soup bowl spilling soup 
actions lift left lift right applied bowl 
applied soup spill argued applied simultaneously bowl raised table soup spills 
shanahan considers example event calculus uses explicit assertion interaction lift left lift right actions ensure effect cancelled pair executed 
assumption actions executed precisely moment reasoner rely successful simultaneity order exploit effect 
pddl take view precise simultaneity outside control physical executive 
plan interpreted instruction executive system hold executive system capable measuring time controlling activity arbitrarily fine degrees accuracy 
particular possible executive ensure actions independently initiated executed simultaneously 
plan rely precision measurement claim executed reliable expectation success considered valid plan 
pddl supports modelling soup bowl situation way 
durative actions lift left lift right independently initiate tilting intervals complete result soup effects 
provided lift actions start appropriate tolerance tilting corrected avoided need model cancellation effects 
argue executive execute actions fine non zero tolerance successfully lift bowl 
event calculus model shanahan insists precise synchronization actions incorrectly allowing inferred soup spilled time elapses lifts small allow correction tilting bowl 
worse shanahan axioms allow lack precise synchronization exploited achieve amount time smaller correctly describing physical situation modelled 
considers unnecessary model precise interaction lifts alternative pddl interaction see soup bowl lifting action single discretized action achieves successful raising bowl 
temporal extent common concern temporal reasoning frameworks discussed detail vila vila van divided instant problem 
problem apparent considering happens moment transition say truth falsity propositional variable 
question addressed fox long proposition true false undefined inconsistently true false instant transition 
clearly possibilities undesirable 
solution adopt combination pragmatic philosophically principled 
pragmatic element choose model actions instantaneous transitions effects instant application 
actions mark points intervals persistence state closed left open right 
ensures intervals nest inconsistency truth values propositions defined 
half open half closed solution adopted 
example shanahan observes similar approach event calculus intervals closed right 
choices effectively equivalent slightly prefer closed left choice allows validation plan conclude state point execution final action making determination temporal span plan unambiguous 
philosophical point view truth value proposition instant application action exploited action virtue moving targets rule position outlined valid plan depend precise synchronisation actions 
forces actions require proposition precondition sit open half open interval proposition holds 
planning time classical planning models time treated relative 
temporal structuring plan reasoning plan ordering actions 
clearly emphasised issues dominated planning research late early classical planning mainly characterised exploration partial plan spaces planners tweak chapman snlp mcallester rosenblitt ucpop penberthy weld 
partial plans include collection actions representing activity far determined part possible plan set temporal constraints actions 
temporal constraints partial plan form time points corresponding application actions 
classical linear planners fikes nilsson russell norvig rely simple fact total ordering points actions applied trivially embedded time line 
duration actions considered 
role time planning far significant metric time introduced 
metric time possible associate specific durations actions set deadlines windows opportunity 
problems associated relative time resolved metric time framework new problems introduced 
particular durations explicit necessary decide durations attach actions states 
explicit temporal extents important confront issue concurrency order best exploit measured temporal resources available planner 
contrast simple ordering constraints required relative time metric time requires powerful constraint management 
metric time constraint handlers built foundations laid dechter meiri pearl 
example ixtet uses extensions temporal constraint networks ghallab 
language pddl expressing temporal planning domains ixtet uses represent planning domains similar pddl described expressive allows access time points interval durative action 
added expressive power obtained cost increased semantic complexity consequently increased difficulty validation plans 
similarities modelling discretised durative actions pddl ixtet similar modelling conventions languages kambhampati tate 
earliest planners consider metric time vere developed nonlin tate 
metric constraints times actions applied deadlines achievements goals expressible planner construct plans respecting metric temporal constraints interactions actions 
cesta explored various developments temporal constraint network algorithms achieve efficient implementation planning consider extensions manage disjunctive temporal constraints efficiently particularly valuable expressive element plan construction observed constraints preventing overlap intervals translate disjunctive constraints time points 
hsts muscettola relies temporal constraint manager 
systems continuous real valued time possible linear constraint solvers handle temporal constraints 
particular constraints dictated relative placement actions durations timeline approached way long fox 
alternative timeline discretised line integers 
advantage approach possible advance time value considering activity time point 
modality interpreted continuous time framework mean state logical change regardless time occurs bacchus kabanza 
planning problems events occur actions dictated planner continuous change modelled plans finite structures change occur finite number time points execution 
possible embed execution plan integer valued discrete time line loss expressiveness 
various researchers considered problem modelling continuous change 
pednault proposes explicit description functions govern continuous change metric parameters attached actions effect instantaneous change initiate processes 
approach easy describing interacting continuous processes 
example water filling tank constant rate additional water source added increase rate filling action initiating second process combine effects water sources 
means second action described simply terms direct effect world increase rate flow tank effects actions affected rate change parameter 
shanahan uses approach consequence processes modelled stopping restarting new trajectories interacting action applied 
zeno penberthy weld actions effects described terms derivatives 
approach easier describe interacting processes complicates fox long management processes making necessary solve differential equations 
complication authors approach mcdermott takes approach process planner 
continuous processes planning problem represents considerable complication model includes temporal features supports concurrency 
area active research community agreed matters representation semantics 
remain open problems planning community address development languages planning algorithms development plan verification tools embody widely accepted semantics 

developments ai planning research leading community closer application planning technology realistic problems 
necessitated development representation language capable modelling domains temporal metric features 
approach taken development language extend mcdermott pddl domain representation standard support temporal metric models 
development pddl sequence greater expressive power important planning community pddl provided common foundation great deal research effort 
problems involved modelling behaviour domains discrete continuous behaviours explored temporal logic model checking communities widely adopted models planning community 
pddl provides way making relevant developments communities accessible planning 
furthermore pddl begins bridge gap basic research applications oriented planning providing expressive power necessary capture real problems 
pddl expressive power represent class deterministic mixed domains planning domains 
language introduces form durative action connected parts initiation interval numeric change occur explicit termination means action produces state corresponding durative interval 
form action allows modelling discrete continuous behaviours discretized change represented means step functions whilst continuous change modelled variable 
language provides solutions critical issues concurrency continuous change temporal extent 
semantics language derived familiar state transition semantics strips extended interpret invariants holding intervals continuous functions active 
semantics allows interpret plans efficiently validate 
describe criteria plan satisfy order practically verifiable 
focussed primarily discussion numeric discretised temporal features pddl 
modelling capability discretized durative actions respects limited important planning community address challenges continuous change 
continuous actions pddl expressing temporal planning domains pddl possible model episodes change terminated spontaneous events world deliberate choice planner 
goals community include addressing domains require continuous actions pddl confronting challenges planning dynamic environments intervals change terminated world deliberate action planner 
constitute important step planning dynamic unpredictable environments 
members committee third international planning competition 
particular discussions drew mcdermott fahiem bacchus david smith hector geffner turns intrigued contributed strengths 
offered comments insights allowed develop 
rg hoffmann antonio garrido stefan nicola muscettola mark boddy keith golden jeremy frank ari nsson julie alex stephen cresswell luke murray keith richard helpful discussions shared 
fox long appendix bnf specification pddl appendix contains complete bnf specification pddl language 
strict superset pddl example local variables action schemas left specification 
widely part language competition domains 
interpretation local variables proposed mcdermott subtle demands confirmation unique instantiation exists variable 
non trivial confirm case plan validation domains significant expressive power fact largely ignored suggests poorly understood 
changes discussed sections 
domains domain structures remain essentially specified pddl main alterations introduce slightly modified syntax numeric fluent expressions remove syntax hierarchical expansions 
necessarily abandoned best knowledge publicly available planning systems domains 
original pddl specification distinction drawn strict pddl non strict pddl strict pddl follow ordering fields specified non strict pddl restricted way 
practice relatively fields intuitive accept arbitrary orders natural expect declarations precede symbols preconditions precede effects 
declarations constants predicates function symbols naturally ordered current definition pddl ordering fields follow specification exception fields legal order respect group follow types precede action specifications 
domain define domain name require def types def typing constants def predicates def functions def fluents structure def require def requirements require key require key see section types def types typed list name constants def constants typed list name predicates def predicates atomic formula skeleton atomic formula skeleton predicate typed list variable predicate name variable name atomic function skeleton function symbol typed list variable function symbol name functions def fluents functions function typed list atomic function skeleton structure def action def structure def durative actions durative action def pddl expressing temporal planning domains slight modification type syntax longer possible nest expressions possibility exploited complicates parsing 
numbers longer considered implicit type extension numbers handled functional expressions 
ensures finitely ground action instances 
desirable consequence action selection choice points need include choice arbitrary numeric ranges 
finite ranges integers specifying actions useful see mystery example extension standard syntax allow convenient representation cases useful 
syntax function declarations allows functions declared types 
syntax restricted number types semantics functions syntax offers scope possible extension 
types function results assumed numbers 
typed list typed list typing type typed list primitive type name type primitive type type primitive type function typed list function typed list typing function type function typed list function type number actions bnf action definition 
simplified removing generally unused constructs mainly hierarchical expansions 
emphasised removal intended permanent exclusion hierarchical expansion syntax proved difficult element language agree exploit 
levels language stabilise hope return layer 
action def action action symbol parameters typed list variable action def body action symbol name action def body precondition gd effect effect goal descriptions extended include fluent expressions 
gd gd atomic formula term gd negative preconditions literal term gd gd fox long gd disjunctive preconditions gd gd disjunctive preconditions gd gd disjunctive preconditions imply gd gd gd existential preconditions exists typed list variable gd gd universal preconditions forall typed list variable gd gd fluents comp comp binary comp exp exp literal atomic formula literal atomic formula atomic formula predicate term name term variable exp number exp binary op exp exp exp exp exp head head function symbol term head function symbol binary op binary op binary op binary op binary comp binary comp binary comp binary comp binary comp number numeric literal integers floats form 
effects extended include functional expression updates 
syntax proposed little different syntax proposed earlier version pddl 
syntax conditional effects proposed fahiem bacchus aips adopted nesting conditional effects supported 
assignment operators prefix forms 
simple assignment called assign previously change operators corresponding update assignments names increase decrease scale scale respectively 
prefix form adopted preference infix form order preserve consistency lisp syntax non names help programmers remember operators prefix form 
prefer assign original change increase nature change ambiguous 
effect effect effect effect effect effect conditional effects forall variable effect effect conditional effects gd cond effect effect effect effect assign op head exp effect atomic formula term effect atomic formula term pddl expressing temporal planning domains effect fluents assign op head exp cond effect effect cond effect effect assign op assign assign op scale assign op scale assign op increase assign op decrease durative actions durative action syntax built relatively conservative extension existing action syntax 
durative action def durative action da symbol parameters typed list variable da def body da symbol name da def body duration duration constraint condition da gd effect da effect conditions durative action executed complex standard actions specify conditions hold point execution 
specify conditions hold duration durative action termination 
distinguish components introduce simple temporal qualifier preconditions 
name precondition somewhat misleading conditions described include constraints hold action begun 
motivated adoption condition describe collection constraints hold order successfully apply durative action 
logical form conditions durative actions restricted conjunctions temporally annotated expressions clearly scope extension allow complex formulae 
da gd da gd timed gd da gd timed gd timed gd time specifier gd timed gd interval gd time specifier start time specifier interval duration duration durative action specified equal expression function numeric expressions constrained inequalities 
allows actions action freely determined executive necessarily having side effects 
example walk locations take long executive fox long considered convenient provided long time taken walk locations fastest walking speed possible 
constraints specify exact duration durative action prove harder handle introduced label duration inequalities signal domain 
duration constraint supplied dictate limit temporal extent durative action 
duration implicit parameter durative action supplied plan uses durative actions 
denote durative action denoted plan name arg argn non negative rational valued duration floating point format 
duration constraints explicitly temporally annotated indicate evaluated context start point action left unannotated case default evaluated context start action indicated definition 
duration constraint duration inequalities simple duration constraint duration constraint duration constraint simple duration constraint simple duration constraint op duration value simple duration constraint time specifier simple duration constraint op duration inequalities op duration inequalities op value number value fluents exp addition logical effects occur start durative action durative actions numeric effects refer literal duration 
sophisticated durative actions functional expressions describing effects occur duration action 
allows functional expressions updated continuous function time step functions 
da effect da effect da effect da effect timed effect da effect conditional effects forall variable da effect da effect conditional effects da gd timed effect da effect fluents assign op head exp da timed effect time specifier effect timed effect time specifier assign da timed effect continuous effects assign op head exp assign da assign op head exp da exp da binary op exp da exp da exp da exp da exp da duration inequalities duration exp da exp note duration term define functional expression updating effects duration constraints requirement set 
cases duration value available expression duration constraints provided duration freely selected constrained boundaries 
pddl expressing temporal planning domains assign op increase assign op decrease exp exp exp exp exp symbol represent period time durative action active 
local clock value duration independent similar clocks duration 
discussion members committee expression proposed expression declaring rate change 
decided grounds assertion rate change suggests rate change determined process effect 
fact intended multiple active processes affect fluent effects accumulated 
expression directly defines amount process contributes change fluent value time appear assert inconsistently fluent multiple simultaneous rates change 
problems planning problems specifications modified exclude generally unused constructs named initial situations expansion information 
removed length specification odds intention supply physics advice 
furthermore advice field offers emphasises coarse plan metric 
introduced optional metric field supply expression optimized construction plan 
field states metric minimized maximized 
course planner free ignore field assumption plans fewest steps considered plans 
consider extension crucial development widely applicable planning language 
provided variable total time takes value total execution time plan 
allows conveniently express intention minimize total execution time 
anticipate extensions plan metric syntax prove necessary longer term believe version provides significant new challenge community 
problem specifications somewhat impoverished terms ability easily specify temporal constraints goals non standard features initial goal states 
anticipate need extension chosen leave clean sheet developments 
problem define problem name domain name require def object declaration init goal metric spec length spec object declaration objects typed list name init init init el init el literal name fox long init el fluents head number goal goal gd metric spec metric optimization ground exp optimization minimize optimization maximize ground exp binary op ground exp ground exp ground exp ground exp ground exp number ground exp function symbol name ground exp total time ground exp function symbol length spec length serial integer parallel integer length spec deprecated 
requirements table requirements pddl 
requirements imply abbreviations common sets requirements 
domain stipulates requirements assumed declare requirement strips 
requirement description strips basic strips style adds deletes typing allow type names declarations variables negative preconditions allow goal descriptions disjunctive preconditions allow goal descriptions equality support built predicate existential preconditions allow exists goal descriptions universal preconditions allow forall goal descriptions quantified preconditions existential preconditions universal preconditions conditional effects allow action effects fluents allow function definitions effects assignment operators arithmetic preconditions 
adl strips typing negative preconditions disjunctive preconditions equality quantified preconditions conditional effects durative actions allows durative actions 
note imply fluents 
duration inequalities allows duration constraints durative actions inequalities 
continuous effects allows durative actions affect fluents continuously duration actions 
pddl expressing temporal planning domains allen 

general theory action time 
artificial intelligence 
allen 

planning temporal reasoning 
proceedings kr pp 

bacchus 

planning resources concurrency forward chaining approach 
proceedings ijcai pp 

bacchus kabanza 

planning temporally extended goals 
annals mathematics artificial intelligence 
bacchus kabanza 

temporal logic express search control knowledge planning 
artificial intelligence 
bacchus tenenberg 

non reified temporal logic ai 
artificial intelligence 
blum furst 

fast planning plan graph analysis 
proceedings ijcai 
cesta 

gaining efficiency flexibility simple temporal problem 
chittaro goodwin hamilton montanari 
eds proceedings time 
chapman 

planning conjunctive goals 
artificial intelligence 
dechter meiri pearl 

temporal constraint networks 
artificial intelligence 
kambhampati 

domain independent heuristic metric temporal planner 
proceedings ecp 
tate 

optimistic pessimistic resource profiles inform search activity planner 
proceedings aips 
aaai press 
el richards 

temporal resource reasoning planning approach 
proceedings ecai 
fikes nilsson 

strips new approach application problem solving 
artificial intelligence 
fox long 

pddl planning time metric resources 
tech 
rep department computer science university durham uk 
available www dur ac uk long competition html 


representation reasoning disjunction temporal constraints 
proceedings time 
garrido barber 

time optimal planning temporal problems 
proceedings ecp 
knoblock 

combining expressivity ucpop efficiency graphplan 
proceedings ecp pp 

gelfond lifschitz 

limitations situation calculus 
boyer 
ed essays honor woody bledsoe pp 

kluwer academic 
fox long ghallab 

representation control ixtet temporal planner 
proceedings aips 
gupta jagadeesan 

robust timed automata 
hart hybrid real time systems lncs pp 

springer verlag 
geffner 

heuristic planning time resources 
proceedings ecp toledo 
hayes allen 

short time periods 
proceedings ijcai pp 



decidability undecidability results planning numerical state variables 
proceedings aips 
henzinger 

theory hybrid automata 
proceedings th annual symposium logic computer science 
invited tutorial pp 

ieee computer society press 
henzinger raskin 

robust undecidability timed hybrid systems 
proceedings rd international workshop hybrid systems computation control 
lncs pp 

springer verlag 
long 

validating plans continuous effects 
tech 
rep dept computer science university durham 
jonsson morris muscettola rajan 

planning interplanetary space theory practice 
proceedings aips 
kowalski sergot 

logic calculus events 
new generation computing 
ghallab 

planning sharable resource constraints 
proceedings ijcai 
morgan kaufmann 
lifschitz 

semantics strips 
proceedings workshop reasoning actions plans 
long fox 

exploiting graphplan framework temporal planning 
proceedings 
long fox 

overview analysis results rd international planning competition 
journal artifical intelligence research issue 
mcallester rosenblitt 

systematic nonlinear planning 
proceedings aaai vol 
pp 
anaheim california usa 
aaai press mit press 
mccarthy 

circumscription form non monotonic reasoning 
artificial intelligence 
mccarthy hayes 

philosophical problems standpoint artificial intelligence 
meltzer michie 
eds machine intelligence pp 

edinburgh university press 
mcdermott 

temporal logic reasoning processes plans 
cognitive science 
mcdermott 

ai planning systems competition 
ai magazine 
pddl expressing temporal planning domains mcdermott 

reasoning autonomous processes estimated regression planner 
proceedings 
mcdermott aips planning competition committee 
pddl planning domain definition language 
tech 
rep available www cs yale edu homes dvm 
muscettola 

hsts integrating planning scheduling 
zweben fox 
eds intelligent scheduling pp 

morgan kaufmann san mateo ca 
nau cao lotem mu oz avila 

shop simple hierarchical ordered planner 
proceedings ijcai 
pednault 

formulating multiagent dynamic world problems classical planning framework 
georgeff lansky 
eds proceedings oregon workshop reasoning actions plans 
pednault 

adl exploring middle ground strips situation calculus 
proceedings kr pp 

penberthy weld 

temporal planning continuous change 
proceedings aaai 
aaai mit press 
penberthy weld 

ucpop sound complete partial order planner adl 
proceedings kr pp 
los altos ca 
kaufmann 
knight chien fukunaga 

iterative repair planning spacecraft operations aspen system 
international symposium artificial intelligence robotics automation space 
reichgelt 

comparison order modal theories time 
jackson reichgelt van harmelen 
eds logic knowledge representation pp 

mit press 
reiter 

logic default reasoning 
artificial intelligence 
russell norvig 

artificial intelligence modern approach 
prentice hall 
sandewall 

features fluents representation knowledge dynamical systems volume oxford university press 
shanahan 

representing continuous change event calculus 
proceedings ecai pp 

shanahan 

event calculus explained 
wooldridge veloso 
eds artificial intelligence today pp 

springer lecture notes artificial intelligence 
shoham 

requirements theory change 
new generation computing 
smith weld 

temporal planning mutual exclusion reasoning 
proceedings ijcai stockholm pp 

tate 

generating project networks 
proceedings ijcai 
van 

logic time 
kluwer academic press dordrecht 
fox long vere 

planning time windows durations activities goals 
ieee transactions pattern analysis machine intelligence 
vila 

survey temporal reasoning artificial intelligence 
ai communications 
wilkins 

practical planning extending classical ai planning paradigm 
morgan kaufmann publishers san francisco ca 

