functional programming matters john hughes chalmers goteborg sweden 
cs chalmers se software complex important structure 
structured software easy write easy debug provides collection modules re reduce programming costs 
conventional languages place conceptual limits way problems modularised 
functional languages push limits back 
features functional languages particular higher order functions lazy evaluation contribute greatly modularity 
examples manipulate lists trees program numerical algorithms implement heuristic algorithm arti cial intelligence game playing programs 
modularity key successful programming functional languages vitally important real world 
attempt demonstrate real world functional programming vitally important help functional programmers exploit advantages full making clear advantages 
functional programming called program consists entirely functions 
main program written function receives program input argument delivers program output result 
typically main function de ned terms functions turn de ned terms functions bottom level functions language primitives 
functions ordinary mathematical functions de ned ordinary equations 
notation follows turner language miranda tm tur readable prior knowledge functional languages 
miranda trademark research software special characteristics advantages functional programming summed follows 
functional programs contain assignment statements variables change 
generally functional programs contain side ects 
function call ect compute result 
eliminates major source bugs order execution irrelevant side ect change value expression evaluated time 
relieves programmer burden prescribing ow 
expressions evaluated time freely replace variables values vice versa programs referentially transparent 
freedom helps functional programs tractable mathematically conventional counterparts 
catalogue advantages surprised outsiders don take seriously 
says lot functional programming dates circulated chalmers memo years 
slightly revised versions appeared hug hug :10.1.1.100.8004
version original chalmers memo source lightly edited latex bring closer published versions errors corrected 
please excuse slightly old fashioned type setting fact examples haskell 
assignment side ects ow functional programmer sounds monk denying life hope 
interested material bene ts advantages convincing 
functional programmers argue great material bene ts functional programmer order magnitude productive conventional counterpart functional programs order magnitude shorter 

plausible reason suggest basis advantages conventional programs consist assignment statements functional programs omitted 
plainly 
omitting assignment statements brought enormous bene ts tran programmers doing years 
logical impossibility language powerful omitting features matter bad may 
functional programmer ed called advantages give help exploiting power functional languages 
write program particularly lacking assignment statements particularly referentially transparent 
yardstick program quality ideal aim 
clearly characterisation functional programming inadequate 
nd put place explains power functional programming gives clear indication functional programmer strive 
analogy structured programming helpful draw analogy functional structured programming 
past characteristics advantages structured programming summed follows 
structured programs contain goto statements 
blocks structured program multiple entries exits 
structured programs tractable mathematically unstructured counterparts 
advantages structured programming similar spirit advantages functional programming discussed earlier 
essentially negative statements led fruitless argument essential gotos 
bene hindsight clear properties structured programs helpful go heart matter 
important di erence structured unstructured programs structured programs designed modular way 
modular design brings great productivity improvements 
small modules coded quickly easily 
secondly general purpose modules re leading faster development subsequent programs 
thirdly modules program tested independently helping reduce time spent debugging 
absence gotos little 
helps programming small modular design helps programming large 
enjoy bene ts structured programming fortran assembly language little 
generally accepted modular design key successful programming languages modula ii wir ada od standard ml mth include features speci cally designed help improve modularity 
important missed 
writing modular program solve problem rst divides problem sub problems solves sub problems combines solutions 
ways divide original problem depend directly ways glue solutions 
increase ones ability problem conceptually provide new kinds glue programming language 
complicated scope rules provision separate compilation help clerical details er new conceptual tools decomposing problems 
appreciate importance glue analogy carpentry 
quite easily making parts seat legs back sticking right way 
depends ability wood glue 
lacking ability way carve piece solid block harder task 
example demonstrates enormous power modularisation importance having right glue 
return functional programming 
shall argue remainder functional languages provide new important kinds glue 
shall give examples programs modularised new ways greatly simpli ed 
key functional programming power allows greatly improved modularisation 
goal functional programmers strive smaller simpler general modules glued new shall describe 
glueing functions rst new kinds glue enables simple functions glued complex ones 
illustrated simple list processing problem adding elements list 
de ne lists listof nil cons listof means list xs nil representing list elements cons list xs 
cons represents list rst element second subsequent elements elements list xs 
may stand type example integer de nition says list integers empty cons integer list integers 
normal practice write lists simply enclosing elements square brackets writing nils explicitly 
simply shorthand notational convenience 
example means nil means cons nil means cons cons cons nil elements list added recursive function sum 
de ned kinds argument empty list nil cons 
sum numbers zero de ne sum nil sum cons calculated adding rst element list sum de ne sum cons num list num sum list examining de nition see boxed parts speci computing sum 
sum nil sum cons num list num sum list means computation sum modularised glueing general recursive pattern boxed parts 
recursive pattern conventionally called reduce sum expressed sum reduce add convenience reduce passed argument function add operator 
add just de ned add de nition reduce derived just parameterising de nition sum giving reduce nil reduce cons reduce written brackets reduce clear replaces sum 
conventionally brackets omitted reduce written reduce 
function arguments reduce applied taken function remaining argument general function arguments applied function remaining ones 
follow convention 
having modularised sum way reap bene ts re parts 
interesting part reduce write function multiplying elements list programming product reduce multiply test list booleans true reduce false true reduce true way understand reduce function replaces occurrences cons list occurrences nil list example means cons cons cons nil reduce add converts add add add reduce multiply converts multiply multiply multiply reduce cons nil just copies list 
list appended consing elements front nd example append reduce cons append reduce cons reduce cons cons cons nil cons cons replacing cons cons nil function double elements list written reduce nil num list cons num list modularised rst double double el list cons el list cons 
function composition standard operator de ned see new de nition correct applying arguments el cons el cons el el list cons el list nal version reduce cons double nil modularisation arrive map double map reduce cons nil map applies function elements list 
map generally useful function 
write function add elements matrix represented list lists 
sum map sum map sum uses sum add rows left sum adds row totals get sum matrix 
examples convince reader little modularisation go long way 
simple function sum combination higher order function simple arguments arrived part reduce write functions lists programming ort 
need functions lists 
example consider datatype ordered labelled trees de ned node listof de nition says tree xs node label list subtrees trees xs 
example tree represented node cons node nil cons node cons node nil nil nil considering example abstracting higher order function straight function analogous reduce 
recall reduce took arguments replace cons replace nil 
trees built node cons nil take arguments replace 
trees lists di erent types de ne functions operating type 
de ne node label subtrees label subtrees cons subtree rest subtree rest nil interesting functions de ned glueing functions 
example labels tree numbers added add add tree wrote earlier example gives add add add add add add add list labels tree computed labels cons append nil example gives cons append cons nil append cons append cons nil nil nil de ne function analogous map applies function labels tree maptree node cons nil achieved functional languages allow functions indivisible conventional programming languages expressed combination parts general higher order function particular specialising functions 
de ned higher order functions allow operations programmed easily 
new datatype de ned higher order functions written processing 
manipulating datatype easy knowledge details representation 
best analogy conventional programming extensible languages programming language extended new control structures desired 
glueing programs new kind glue functional languages provide enables programs glued 
recall complete functional program just function input output 
programs program applied input computes input program computes output input program implemented conventionally storing output temporary le 
problem temporary le memory impractical glue programs way 
functional languages provide solution problem 
programs run strict synchronisation 
started tries read input runs long deliver output trying read 
suspended run tries read input 
added bonus terminates reading output aborted 
non terminating program producing nite amount output terminated forcibly soon nished 
allows termination conditions separated loop bodies powerful modularisation 
method evaluation runs little possible called lazy evaluation 
practical program generator constructs large number possible answers selector appropriate 
systems allow programs run manner functional languages lazy evaluation uniformly function call allowing part program modularised way 
lazy evaluation powerful tool modularisation functional programmer repertoire 
newton raphson square roots illustrate power lazy evaluation programming numerical algorithms 
consider newton raphson algorithm nding square roots 
algorithm computes square root number starting initial approximation computing better better ones rule approximations converge limit squareroot fact approximations converge rapidly limit 
square root programs take tolerance eps successive approximations di er eps 
algorithm usually programmed follows called zn right type eps value matter long abs gt eps abs le eps goto zn 
goto continue square root zn program indivisible conventional languages 
express modular form lazy evaluation show uses parts may put 
newton raphson algorithm computes sequence approximations natural represent explicitly program list approximations 
approximation derived previous function function mapping approximation 
calling function sequence approximations 
de ne function compute repeat cons repeat list approximations computed repeat repeat example function nite output doesn matter approximations computed rest program requires 
nity potential means number approximations computed required repeat places limit 
remainder square root nder function takes tolerance list approximations looks list successive approximations di er tolerance 
de ned eps cons cons rest abs eps eps cons rest putting parts sqrt eps eps repeat parts square root nder try combining di erent ways 
modi cation wish ratio successive approximations approach di erence approach zero 
appropriate small numbers di erence successive approximations small start large ones rounding error larger tolerance 
necessary de ne replacement relative eps cons cons rest abs eps abs relative eps cons rest new version sqrt de ned eps relative eps repeat necessary rewrite part generates approximations 
numerical di erentiation wehave re sequence approximations square root 
course possible reuse relative numerical algorithm generates sequence approximations 
numerical di erentiation algorithm 
result di erentiating function point slope function graph point 
estimated quite easily evaluating function point point nearby computing slope straight line points 
assumes points close graph function curve 
gives de nition order get approximation value small 
unfortunately small values close rounding error subtraction may swamp result 
right value chosen 
solution dilemma compute sequence approximations smaller smaller starting reasonably large 
sequence derivative hopelessly inaccurate eventually due rounding error 
eps select rst approximation accurate risk rounding error ecting result reduced 
need function compute sequence differentiate map repeat halve halve initial value successive values obtained repeated halving 
function derivative point computed eps differentiate solution satisfactory sequence approximations converges fairly slowly 
little simple mathematics help 
elements sequence expressed right answer error term involving shown theoretically error term roughly proportional power gets smaller gets smaller 
right answer error term approximation computed value twice successive approximations expressed error term eliminated 
conclude course error term roughly power approximate better approximation 
improvement applied successive pairs approximations function cons cons rest cons cons rest eliminating error terms sequence approximations yields sequence converges rapidly 
problem remains right value di cult predict general easy measure 
di cult show function estimates correctly include proof 
order cons cons cons rest round log round rounded nearest integer log logarithm base general function improve sequence approximations de ned improve order derivative function computed ciently improve follows eps improve differentiate improve sequences approximations computed parameter halved approximation 
applied sequence result sequence 
means sequence approximations improved 
di erent error term eliminated time resulting sequences converge faster faster 
compute derivative ciently eps improve improve improve differentiate numerical analysts terms fourth order method gives accurate result quickly 
de ne super map second repeat improve second cons cons rest uses repeat improve get sequence improved sequences approximations constructs new sequence approximations second approximation improved sequences turns second best take accurate rst doesn require extra compute 
algorithm really sophisticated uses better better numerical method approximations computed 
compute derivatives ciently program eps super differentiate probably case hammer crack point algorithm sophisticated super easily expressed modularised lazy evaluation 
numerical integration example discuss section numerical integration 
problem may stated simply real valued function real argument points estimate area curve describes points 
easiest way estimate area assume nearly straight line case area unfortunately estimate inaccurate close 
better estimate dividing interval estimating area half adding results 
de ne sequence better better approximations value integral formula rst approximation adding better better approximations integrals half calculate 
sequence computed function integrate cons map zip integrate mid integrate mid mid zip standard list processing function 
takes lists returns list pairs pair consisting corresponding elements lists 
rst pair consists rst element rst list rst element second 
zip de ned zip cons cons cons pair zip integrate zip computes list pairs corresponding approximations integrals sub intervals map adds elements pairs give list approximations original integral 
version integrate ine cient continually recomputes values written evaluates recursive calls integrate re evaluate 
mid evaluated recursive call 
preferable version recomputes value integrate fa fb cons fa fb map zip fa fm fm fb fm integrate computes nite list better better approximations integral just di erentiate section 
just write integration routines integrate required accuracy asin eps integrate relative eps integrate integration algorithm su ers disadvantage rst di erentiation algorithm preceding sub section converges slowly 
improved 
rst approximation sequence computed points separation 
second approximation uses mid point separation neighbouring points 
third approximation uses method half interval separation neighbouring points 
clearly separation neighbouring points halved approximation 
separation sequence candidate improvement improve function de ned preceding section 
write quickly converging sequences approximations integrals example super integrate sin improve integrate sequence eighth order method computing pi 
second approximation requires evaluations compute correct decimal places 
section taken number numerical algorithms programmed functionally lazy evaluation glue stick parts 
able new ways generally useful functions relative improve 
combining parts various ways programmed quite numerical algorithms simply easily 
example arti cial intelligence argued functional languages powerful primarily provide new kinds glue higher order functions lazy evaluation 
section take larger example arti cial intelligence show programmed quite simply kinds glue 
example choose alpha beta heuristic algorithm estimating position game player 
algorithm works looking ahead see game develop avoids pursuing table lines 
game positions represented objects type position 
type vary game game assume 
knowing moves position assume function moves position listof position takes game position argument returns list positions reached move 
crosses tic tac toe example moves moves assumes possible tell player turn position 
crosses done counting crosses game chess include information explicitly type position 
function moves rst step build game tree 
tree nodes labelled positions children node labelled positions reached move node 
node labelled position children labelled positions moves 
game tree may nite possible game go side winning 
game trees exactly trees discussed section node label position represents list subnodes 
datatype represent 
game tree built repeated applications moves 
starting root position moves generate labels sub trees root 
moves generate sub trees sub trees 
pattern recursion expressed higher order function node map function de ned constructs game tree particular position moves example look gure 
higher order function analogous function repeat construct nite lists preceding section 
alpha beta algorithm looks ahead position see game develop favourably order able rough estimate value position looking ahead 
static evaluation 

example game tree 
limit look ahead may guide algorithm earlier 
result static evaluation measure promise position computer point view assuming computer playing game human opponent 
larger result better position computer 
smaller result worse position 
simplest function return say positions computer won positions computer lost 
reality static evaluation function measures various things position look example material advantage control centre chess 
assume function static position number game tree position converted number function maptree static statically evaluates positions tree may nitely 
uses function maptree de ned section 
true value positions 
particular value ascribed root position 
static value rough guess 
value ascribed node determined true values subnodes 
done assuming player best moves 
remembering high value means position computer clear computer move position choose move leading sub node maximum true value 
similarly opponent move leading sub node minimum true value 
assuming computer opponent alternate turns true value node computed function maximise computer turn minimise maximise node sub max map minimise sub minimise node sub min map maximise sub max min functions lists numbers return maximum minimum list respectively 
de nitions complete recurse base case 
de ne value node successors take static evaluation node label 
static evaluation player won limit look ahead 
complete de nitions maximise minimise maximise node nil maximise node sub max map minimise sub minimise node nil minimise node sub min map maximise sub write function stage take position return true value 
evaluate maximise maptree static problems de nition 
doesn nite trees 
maximise keeps recursing nds node subtrees tree 
maximise return result 
second problem related nite game trees crosses large 
unrealistic try evaluate game tree search limited moves 
done pruning tree xed depth prune node node nil prune node node map prune prune takes tree cuts nodes root 
game tree pruned forces maximise static evaluation nodes depth recursing 
evaluate de ned evaluate maximise maptree static prune looks say moves ahead 
development wehave higher order functions lazy evaluation 
higher order functions maptree allow construct manipulate game trees ease 
importantly lazy evaluation permits evaluate way 
potentially nite result program terminate lazy evaluation 
writing prune fold functions constructed rst levels tree 
worse rst levels may large held memory time 
program written function maptree static prune constructs parts tree maximise requires 
part thrown away reclaimed garbage collector soon maximise nished tree resident inmemory 
small part tree stored time 
lazy program cient 
ciency depends interaction maximise function chain compositions rst achieved lazy evaluation folding functions chain big 
drastic reduction modularity usually done 
evaluation algorithm part relatively easy 
conventional programmer modify entire program unit harder 
far described simple 
heart alpha beta algorithm observation compute value maximise minimise looking tree 
consider tree max min min strangely unnecessary know thevalue question mark order evaluate tree 
left minimum evaluates right minimum clearly evaluates equal 
maximum minima 
observation generalised built maximise minimise 
rst step separate maximise application max list numbers decompose maximise maximise max maximise minimise decomposed similar way 
minimise maximise entirely symmetrical shall discuss maximise assume minimise treated similarly 
decomposed way maximise minimise minimise discover numbers minimise take minimum 
may able discard numbers looking 
lazy evaluation maximise doesn look list numbers computed potential saving computer time 
easy factor max de nition maximise giving maximise node nil cons nil maximise node map minimise map min minimise map min map minimise map minimise map min minimise returns list numbers minimum result minimise map minimise returns list lists numbers 
maximise return list lists 
maximum list matters 
shall de ne new version omits minima lists minimum doesn matter 
cons nums rest cons min nums omit min nums rest function omit passed potential maximum largest minimum seen far omits minima 
omit pot nil nil omit pot cons nums rest omit pot rest nums pot cons min nums omit min nums rest takes list numbers potential maximum returns true minimum list numbers equal potential maximum 
need look list 
element list equal potential maximum minimum list sure 
elements particular irrelevant question mark example 
de ned nil pot false cons num rest pot true num pot rest pot having de ned maximise minimise way simple write new evaluator evaluate max maximise maptree static prune lazy evaluation fact maximise looks tree means program runs ciently just fact prune looks part nite tree enables program terminate 
optimisations maximise fairly simple dramatic ect speed evaluation allow look ahead 
optimisations evaluator 
example alpha beta algorithm just described works best best moves considered rst move need consider worse moves demonstrate opponent reply 
wish sort sub trees node putting highest values rst computer move lowest values rst 
done function node sub node sort higher map sub node sub node sort higher map sub higher node sub node sub sort general purpose sorting function 
evaluator evaluate max maximise maptree static prune regard su cient consider best moves computer opponent order restrict search 
program necessary replace high rst high rst cons nil label sub node label take sub replaces nodes tree nodes subnodes function take returns rst elements list fewer list shorter 
improvement re ne pruning 
program looks ahead xed depth position dynamic may decide look position queen chess example 
usual de ne certain dynamic positions allow look ahead 
assuming function dynamic recognises positions need add equation prune prune node pos sub node pos map prune sub dynamic pos making changes easy program modular 
remarked program depends crucially ciency interaction maximise function chain rst written monolithic program lazy evaluation 
program hard write hard modify hard understand 
argued modularity successful programming 
languages aim improve productivity support modular programming 
new scope rules mechanisms separate compilation modularity means modules 
ability decompose problem parts depends directly ability glue solutions 
assist modular programming language provide glue 
functional programming languages provide new kinds glue higher order functions lazy evaluation 
programs new exciting ways shown examples 
smaller general modules re widely easing subsequent programming 
explains functional programs smaller easier write conventional ones 
provides target functional programmers aim 
program messy complicated programmer attempt generalise parts 
expect higher order functions lazy evaluation tools doing 
course rst point power elegance higher order functions lazy evaluation 
example turner shows great advantage program generating chemical structures tur 
abelson sussman stress streams lazy lists powerful tool structuring programs 
henderson streams structure functional operating systems 
main contribution assert better modularity key power functional languages 
relevant controversy lazy evaluation 
believe functional languages lazy believe 
compromise provide lazy lists special syntax constructing example scheme 
provides evidence lazy evaluation important relegated citizenship 
powerful glue functional programmers possess 
obstruct access 
owes conversations phil wadler richard bird programming research group oxford 
magnus chalmers university goteborg pointed serious error earlier version numerical algorithms prompted development 
carried support research fellowship uk science engineering research council 
abelson sussman 
structure interpretation computer programs 
mit press boston 
hug hughes :10.1.1.100.8004
functional programming matters 
computer journal 
hug john hughes 
functional programming matters 
turner editor research topics functional programming 
addison wesley 
mth milner tofte harper 
de nition standard ml 
mit press 
od united states department defense 
programming language ada manual 
springer verlag 
henderson 
purely functional operating systems 

tur turner 
semantic elegance applicative languages 
proceedings conference languages computer architecture sea new hampshire 
tur turner 
miranda non strict language polymorphic types 
proceedings conference functional programming languages computer architecture pages nancy france 
wir wirth 
programming modula ii 
springer verlag 

