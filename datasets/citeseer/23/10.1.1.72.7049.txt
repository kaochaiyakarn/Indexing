efficient systemc parser daniel gro tim christian tim rolf drechsler due increasing complexity circuits systems new methodologies system design mandatory 
languages enable modeling higher levels abstraction allow concise hardware description offer promising way direction 
language systemc 
propose systemc parser allows convert systemc source code internal intermediate representation 
formal model retrieved systemc description 
serve generic front different purposes verification visualization 
demonstrate efficiency applied synthesis register transfer level rtl descriptions different sizes different types designs 
new design methodologies design flows needed cope increasing complexity today circuits systems 
applies stages circuit design system level modeling verification layout 
focus research area new hardware description languages 
traditionally system level description done programming language dedicated hardware description languages vhdl verilog rtl 
leads decoupling behavioral description synthesizable description 
developed languages allow higher degrees abstraction additionally refinement synthesis possible language 
new languages systemc 
basis systemc 
features available 
additional systemc library provides concepts needed model hardware timing concurrency 
hardware modeling systemc easily done 
research conceptual side algorithms systemc difficult 
areas high level synthesis verification power estimation formal understanding design necessary subsequent processing carried 
publications focused special features systemc synthesis fixed point numeric operations polymorphism pointers considered supported part dfg dr 
institute computer science university bremen bremen germany informatik uni bremen de design methodology 
works published rely formal model arbitrary systemc design 
reason high effort syntactically semantically understand systemc description 
purpose systemc parsed 
parser systemc implemented tool 
parser covers systemc certain extent 
purdue compiler construction tool set pccts build 
parser produces easy process representation systemc design form intermediate representation 
description generic processing start representation regardless application visualization formal verification purposes 
example application synthesis rtl descriptions explained efficiency underlined experiments 
advantages yielded approach easy adaptivity efficiency systemc front 
structured follows basic concepts systemc discussed section 
methodology create exemplary application synthesis explained section iii 
advantages approach discussed section iv 
experimental results section section vi 
ii 
systemc main concepts systemc briefly reviewed self contained 
systemc system description language enables modeling different levels abstraction 
constructs known traditional hardware description languages provided 
task design exploration high level synthesis lowlevel carried environment 
features aid modeling different levels abstraction included systemc 
example concept channels allows details communication modules 
modeling transactional level done 
turn enables fast design space exploration partitioning design working details protocols modules 
practice systemc comes library provides classes model hardware 
example module hardware modeled class sc module provided systemc 
features available systemc 
includes dynamic memory allocation multiple inheritance type complex operations data arbitrary type 
systemc design simulated compiling ordinary compiler executable specification 
focus aspects circuit design formal model design needed 
deriving formal model systemc description hard parser handles systemc necessary 
developing parser complex language comes high effort 
parser generic order aid single purpose applicable different areas synthesis formal verification visualization 
synthesis order allow concise modeling hardware constructs excluded synthesizable subset systemc 
example systemc provides classes easily model buffers arbitrary data class sc fifo 
instance type sc fifo arbitrary size explicit timing 
general way synthesis 
principle solved providing standard realization class 
order retrieve small fast solution synthesis decisions necessary 
left hardware designer replace class synthesizable description 
concept dynamic memory allocation hardly synthesizable efficient way excluded synthesizable subset 
better understanding synthesis rtl descriptions demonstrate features 
due application systemc input restricted generic front handle types systemc descriptions 
iii 
systemc parser section methodology build parser special features parsing systemc explained 
synthesis rtl descriptions carried frontend 
methodology parsing compiling studied intensively see 
unix tools lex yacc create parsers 
tools provide easier powerful interfaces purpose 
tool pccts create 
details advantages pccts see 
specialized systemc parser built follows sc sc bv bus sc bool lsb cntr sc uint counter sc signal bool done count datatypes void robot controller counter proc read counter bus read count read counter counter done write counter lsb cntr write counter process fig 

proc robot controller preprocessor account directives filter header files part design files 
lexical analyzer splits input sequence tokens 
regular expressions define keywords identifiers systemc descriptions 
keywords essential keywords systemc added sc module int 
analyzer checks sequence tokens conforms grammar describes syntax systemc 
terminals grammar tokens 
pccts creates lexical syntactical analyzer tokens grammar respectively 
referred parser 
result parsing systemc description syntax tree ast 
stage semantic checks performed type conflicts 
ast constructed single node type pointer list children pointer sibling 
additional tags node store type statement string identifier necessary information 
structure explained example 
example consider code fragment 
process robot controller introduced 
shows part ast process 
missing parts ast indicated triangles 
ast produced pccts node points sibling list children 
node upper left represents statement line code 
condition stored child node 
part part statement siblings child 
fig 

ast example fig 

synthesis procedure systemc description preprocessor statement expression preprocessed systemc description parser syntax tree analyzer intermediate representation synthesizer netlist block expression id counter procedure applying parser synthesis shown 
dashed box indicates steps application independent corresponding tasks executed applications visualization formal verification 
process divided steps 
preprocessing parser build ast systemc description design 
ast traversed build intermediate representation design 
nodes ast type additional information contained tags attached theses nodes 
different cases handled node traversing ast 
transforming ast intermediate representation information statement id bus statement write statement write explicit new representation processing 
intermediate representation built classes represent building blocks design modules statements blocks statements 
traversal semantic consistency checks carried 
includes checking correct typing operands consistency declarations definitions 
stage parser restricted synthesis processing 
intermediate representation serves starting point originally intended application 
point handling design easier represented formal model class structure intermediate representation 
classes assemble intermediate representation correspond constructs 
component self aware knows semantic original description 
processing design done adding application specific features classes storing intermediate representation 
case synthesis recursive traversal necessary 
class extended functions synthesis substructures generate gate level description design 
example consider ast shown 
transformed intermediate representation shown 
structure looks similar ast ast type node 
dedicated classes hold different types constructs 
differentiation classes relies inheritance 
synthesis recursively descend intermediate representation 
usual synthesis rtl descriptions systemc restricted subset possible systemc constructs 
features dynamic memory allocation pointers recursions loops variable bounds allowed prevent difficulties known high level synthesis 
fig 

intermediate representation condition 

counter 
destination source statements 
destination source 
bus way systemc constructs excluded direct correspondence rtl shown fifo section ii simplicity systemc channels excluded synthesis 
channels obey certain restrictions synthesis extended providing library rtl realizations 
supported constructs known traditional hardware description languages 
comprises different operators systemc datatypes hierarchical modeling concurrent processes module 
additionally new operator allowed submodules allow compact description scalable designs 
outcome synthesis process gate level description format sis 
switching output format vhdl verilog rtl easily possible 
focus parsing systemc retrieving formal model description optimizations applied synthesis 
iv 
discussion approach create formal model systemc description advantages 
systemc evolving 
parser easily extended cope developments changing underlying grammar extending classes intermediate representation 
necessary changes straightforward cases 
adaptivity 
exemplary applied synthesis applications interest 
starting new application condition 
destination source systemc designs intermediate representation directly serves model design 
application specific extensions necessary allow processing 
decoupling 
complex process parsing hidden application 
frontend understand systemc description allows intended application concentrate algorithms efficiency intended purpose 
efficiency 
fast front necessary cope large designs 
efficiency front guaranteed compiler generator pccts 
subsequent application directly start processing intermediate representation class structure 
experiments section underline efficiency 
compactness 
parser compact allow easy understanding extension 
parser lines code loc includes grammar necessary modifications pccts create ast 
code analyzing classes intermediate representation consists loc 
synthesis loc needed 
complete tool synthesis including error handling messaging loc 
comments blank lines source included numbers 
req req token req token token token token token fig 

arbiter block level diagram override cell override override cell override ack override cell override experiments ack ack experiments carried pentium iv ghz gb ram running linux 
implemented 
control dominated design data dominated design considered experiments respectively 
large systemc descriptions created iscas circuits demonstrate efficiency third experiment 
control dominated design scalable arbiter introduced frequently works related property checking 
rtl created synthesized 
top level view arbiter shown 
design handles access devices shared resource 
device signal request may access resource arbiter 
arbiter uses priority scheduling guarantees device waits forever details refer 
shows top level module scalable 
corresponding arbiter cell instantiated cells interconnected loop 
results synthesis different numbers arbiter cells shown table size netlist output cpu times needed 
netlist built input gates 
number gates contained flattened netlist hierarchical description generated synthesis tool contains gates gates arbiter cell plus additional buffer inverter 
holds number latches 
flattened netlist contains latches arbiter cell hierarchical netlist contains latches total 
note arbiter cells described rtl synthesis carried cc sc module due space sc ctor create new connect tick 
ove connect 
connect 
new inv inv fig 

arbiter top level applying optimizations 
gate level representation cells optimal 
times needed parsing tp analyzing ta synthesis ts total time tt shown respective columns 
seen scaling arbiter influence time parsing source code changed 
time analyzing increases moderately type checks different cells carried 
synthesis loop unrolled scaling influences synthesis time 
total time dominated time needed synthesis includes overhead reading template output format parsing command line synthesizing design corresponds netlist gates takes cpu second 
table arbiter synthesis results latches gates tp ta ts tt data dominated design second design fir filter scalable width 
scalable number coefficients bit width data 
diagram fir filter shown 
incoming data stored shift register coefficients stored register array 
result provided output dout 
systemc description contains process create shift register process carries calculations 
coefficients provided array constants 
synthesis results different bit widths numbers coefficients table ii 
case arbiter additional checks submodules necessary analysis loop 
case fir filter submodules created scaling influence time needed analysis 
fir filter time synthesis increases faster compared arbiter design expanded 
due description multiplication simple equation systemc tmp tmp instantiating modules operations directly generated netlist 
bit width number coefficients direct influence synthesis time size output 
large design gates parsed analyzed fast 
synthesis writing output hard disk took seconds 
large systemc descriptions experiments showed influence scaling different types designs 
influence large systemc description investigated 
circuits iscas benchmark set considered 
starting netlist binary decision diagrams bdd built circuit 
building bdd reordering techniques applied size reductions 
output state bdd dumped reset din fig 

fir filter block level diagram table ii fir filter synthesis results dout width coeff latches gates tp ta ts tt structure embedded systemc module 
module synthesized 
results shown table iii 
name circuit lines code loc number characters char systemc code 
circuits ordered increasing loc 
seen time parsing increases size source code small large designs loc 
time needed analysis increases faster due semantical checks translation intermediate representation carried stage 
largest amount time due synthesis intermediate structure traversed netlist written 
time needed compile systemc code version optimizations turned linking done column tg 
compiling systemc means create executable description design simulation 
comparable synthesis creates hardware description design 
total table iii iscas synthesis results circuit loc char tp ta ts tt tg runtime needed synthesis comparable time needed largest files 
experiments shown efficient frontend systemc 
purpose designs considered large terms number gates terms size systemc description 
performance comparable efficient widely compiler 
vi 
introduced front construct formal model systemc description 
formal model intermediate representation serve starting point different applications design flow verification visualization 
allows hide complexity parsing systemc description intended application 
example synthesis rtl descriptions shown 
experiments underline efficiency tool 
acknowledgment project run students university bremen 
main implementation done lot important discussions took place 
terrence parr pccts development team providing purdue compiler construction tool set public domain software 
aho sethi ullman 
compilers principles techniques tools 
pearson higher education 
braun 
automated conversion systemc fixed point data types hardware synthesis 
vlsi system chip pages 
bryant 
graph algorithms boolean function manipulation 
ieee trans 
comp 
gro drechsler 
formal verification ltl formulas systemc designs 
ieee international symposium circuits systems pages 
gro drechsler 
efficient automatic visualization systemc designs 
forum specification design languages pages 
gr liao martin swan 
system design systemc 
kluwer academic publishers 
clarke 
behavioral consistency verilog programs bounded model checking 
design automation conf pages 
liao tjiang gupta 
efficient implementation reactivity modeling hardware scenic design environment 
design automation conf pages 
mcmillan 
symbolic model checking 
kluwer academic publisher 
ller ruf editors 
systemc methodologies applications 
kluwer academic publishers 
ller ruf hoffmann 
simulation semantics systemc 
design automation test europe pages 
parr 
language translation pccts guide 
automata publishing 
parr quong 
antlr predicated ll parser generator 
software practice experience 
schulz key schweizer kuhn 
object oriented modeling synthesis systemc specifications 
asp design automation conf pages 
singh lavagno ch 
moon stephan brayton sangiovanni vincentelli 
sis system sequential circuit synthesis 
technical report university berkeley 
synopsys 
describing synthesizable rtl systemc vers 

synopsys 
available www synopsys com 
