web programming smlserver martin elsman edu niels nh edu university copenhagen 
dk copenhagen nv denmark 
smlserver efficient multi threaded web server platform standard ml programs 
provides access variety different relational database management systems rdbmss including oracle mysql postgresql 
describe execution model region memory model smlserver explain solutions design issues confronted development 
describe experience programming maintaining web applications standard ml provides higher order functions static typing rich module system 
experiments user scenarios common web tasks demonstrates efficiency smlserver respect script execution database connectivity 
higher order functions modules language exposing functionality composable components promising features web application development code reuse separation programming tasks layout implementation primary concern 
rapid change development web applications combined way web applications exposed users suggests web applications particularly robust changes easy maintain 
observation contrast web applications built scripting languages limited support finding errors program exposed users 
powerful static type system hand enforces programming errors fixed compile time cost imposed compilation step development cycle 
smlserver web server platform standard ml programming language provides features requested higher order functions rich module system powerful static type system 
smlserver builds bytecode backend interpreter ml kit compiler full standard ml programming language 
interpreter called kit machine kam embedded module open source web server provided america online 
kam supports caching part time royal veterinary agricultural university denmark 
port smlserver open source web server apache ongoing 
loaded code multi threaded execution features including database interoperability 
focus fold 
demonstrate programming web applications standard ml provides useful programming idioms higher order functions static typing rich standard ml module system 
second evidence web server support high level functional programming languages standard ml efficient highly tuned scripting languages tcl php 
background ideas smlserver came mind author attending talk philip author book philip alex guide web publishing 
philip coworkers writing astonishing lines dynamically typed tcl code implement community system planned maintain extend customize different web sites 
philip coworkers successful community system dynamic typing tcl large system difficult maintain extend mention customize 
smlserver project initiated construction embeddable runtime system bytecode backend ml kit 
bytecode backend embeddable runtime system place kam embedded module way requests files extension sml msp called scripts cause corresponding compiled bytecode files loaded executed 
april basic system running necessary support caching loaded code multithreaded execution features database interoperability type safe caching interface 
smlserver open source distributed gnu general public license gpl 
outline proceeds follows 
sect 
describe smlserver serves requests loading executing compiled scripts 
sect 
demonstrate higher order functions type polymorphism providing type safe caching memoization interface smlserver web scripts 
sect 
describe smlserver scripts may interface rdbms generic interface extensive higher order functions type polymorphism convenient access manipulation data rdbms 
sect 
describe region memory model scales multi threaded environment programs run shortly executed 
sect 
demonstrate efficiency smlserver respect script execution database connectivity comparing number requests smlserver may serve second numbers web server platforms 
measure effect design decisions confronted development script execution time 
describe related conclude 
serving pages users shall see create small web service presenting day user 
example uses time function standard ml basis library obtain time day 
html code send user browser constructed standard ml string primitives val time day date fmt date time val ns conn return html head title time day title head body bgcolor white time day time day time day hr served href www smlserver org smlserver body html result user requesting file time day sml web server shown fig 

script uses function ns conn return send response status code page mime type text html browser html code passed argument string 
fig 

result requesting script time day sml 
sect 
shall see support quotations may embed html code web applications somewhat elegantly standard ml string literals 
smlserver supports alternative quotations strings form combinator library constructing html code 
combinator library guarantee validity generated html code may help eliminate certain types errors compile time 
addition smlserver support ml server pages provides notation embedding standard ml code html code similar php microsoft active server pages asp 
ml server pages stored files extension msp 
loading serving pages smlserver implemented module loaded web server web server starts 
time requests scripts sml files msp files served interpreting bytecode file result compiling requested script 
compilation scripts bytecode files done user explicitly invoking smlserver compiler 
smlserver compiler takes argument project file lists scripts client may request standard ml library code scripts 
time script requested smlserver executes initialization code library file caches resulting initial heap execution requested script requests 
serve script smlserver loads requested script caches result cache script executed 
execution heap restored available requests 
smlserver initiates execution identical initial heaps time request served means possible maintain state implicitly web applications standard ml arrays 
state maintained explicitly relational database management system rdbms cache primitives supported smlserver 
possibility emulate state behavior capturing state form variables cookies 
limitation may major drawback 
limitation important advantages memory reuse 
request served memory serving request may reused serving requests 
support threaded execution model 
requests may served simultaneously interpreters running different threads need maintaining complex locks 
scalability properties 
high volume web sites serving requests may distributed different machines communicate single database server 
serving simultaneous requests multiple clients exactly rdbms 
durability properties 
web server hardware failures data stored web server memory lost data stored rdbms may restored durability features rdbms 
limitation suggest session support impossible sessions timeout semantics encoded smlserver caching features 
quotations html embedding smlserver supports generation html code html combinators convenient write html code directly 
section introduce notion quotations elegant extension standard ml eases readability maintainability embedded object language fragments html code standard ml programs 
quotations officially standard ml compilers provide support quotations including moscow ml sml nj ml kit 
small quotation example demonstrates basics quotations val text fun val string frag list ul li web programming text ul program declares variable text type string variable type string frag list indirectly constructors datatype datatype frag quote string happens quotation bound evaluates list quote ul li web programming fun quote ul quot flatten function type string frag list string value bound may turned string sent browser 
precise quotation particular kind expression consists non empty sequence possibly empty fragments surrounded back quotes exp quotation character sequence id anti quotation id exp anti quotation exp character sequence written possibly empty sequence printable characters spaces tabs newlines exception characters escaped notation respectively 
quotation evaluates value type ty frag list ty type anti quotation variables anti quotation expressions quotation 
character sequence fragment evaluates quote 
antiquotation fragment id exp evaluates value value value variable id expression exp respectively 
ease programming quotations type constructor quot declared top level abbreviation type string frag list 
symbolic identifier declared infix identifier type quot quot quot associativity similar 
obtaining data users example demonstrates quotations embedding html code smlserver library structure accessing validating user input called hidden form variables emulating state web application 
example simple web game functionality structure random asks user guess number zero fun title pic body ns return html head title title title head body bgcolor white center title img src pic quot tostring body served href www smlserver org smlserver center body html fun mk form int form action guess sml method post input type hidden name value int tostring input type text name guess input type submit value guess form fun case guess type number try bill guess jpg mk form guess big try bill large jpg mk form guess small try bill small jpg mk form 
bill jpg guessed number int tostring href guess sml play val case generate new random number val random range random guess number bill guess jpg mk form functions mk form quotations embedding html code 
function ns return takes value type quot argument returns argument client 
expression results function type string int option 
function takes name form variable argument returns integer obtained string value associated form variable 
form variable occur query data formed natural number value fit bits function returns 
argument function type string int prop erty raises exception argument proper natural number 
higher order functions form variable validation necessary obtain shallow interface gain high degree code reuse 
particular structure provides wrapper functions possible report multiple error messages user concerning invalid form content 
case form variable exists new random number generated game started presenting line player form entering guess 
game proceeds returning different pages user depending user guess greater smaller equal random number notice game uses request method post random number user guess shown browser location field 
left exercise reader find help web browser possible guess number guess 
shows different pages served guess number game 
fig 

different pages served guess number game 
caching support smlserver simple type safe caching interface cache data information computed script invocation subsequent script invocations 
cache functionality implemented structure cache matches signature cache listed fig 

cache type cache maps keys type type values type type 
cache interface defines set base types int real string set type constructors build new types pair list signature cache sig datatype kind int timeout int size int type cache type type type name string val get type type name kind cache val cache val int int type val real real type val string string type val pair type type type val option type option type val list type list type fig 

cache interface 
option 
cache cache name represented standard ml string 
smlserver supports kinds caches size caches 
entries caches kind size expire room new entry maximum cache size bytes 
oldest entries expire 
timeout caches 
caches kind timeout entry expires seconds inserted 
kind cache guarantees cache updated freshly computed information cache accessed constantly 
keep caches 
entry cache kind expires accessed seconds 
kind cache useful caching authentication information passwords lower pressure rdbms 
function get obtains cache domain type range type cache name kind 
time get called particular domain type particular range type particular cache name new cache constructed 
conceptually think function get having constrained bounded polymorphic type type type name kind cache type denotes set types supported cache interface 
example expression constructs cache named maps pairs integers lists reals get pair int int list real size function adds caching functionality memoization function 
assuming function type int string real appropriately typed cache expression returns new function caches results evaluating function subsequent calls argument results cached pairs strings reals result longer lives cache case evaluated 
cache interface provides functions flushing caches adding entries deleting entries shown signature 
currency exchange rate service uses function cache exchange rate obtained foreign web site 
web service implemented single file exchange sml structure cache val get string option real currency timeout val form form method post action exchange sml dollar amount br input type text name input type submit value value danish form fun url case ns url pg val pattern regexp td td case regexp extract pattern pg real val fetch val url se finance yahoo com usd val body case form case fetch url service currently available rate real tostring usd gives real fmt fix rate 
form val page return currency exchange service body program creates cache maps strings base type string optional reals constructed type option real 
cache kind timeout limit pressure foreign site sure currency rate updated minutes 
exchange rate american dollars danish obtained fetching web page function ns takes url argument returns contents page string 
page received support regular expressions extract appropriate information currency exchange rate web page 
function page return return html code client function takes arguments string denoting title page body page terms value type quot 
interfacing rdbms section interface connecting rdbms web scripts written smlserver 
shall argue idea rdbms keeping state web server just mention true rdbms provides data guarantees difficult obtain means 
rdbms vendors solved problem serving simultaneous users rdbmss ideal web purposes 
language communicate rdbms standardized structured query language sql 
rdbms extensions language extent possible smlserver write web services indifferent rdbms choice 
smlserver scripts may access manipulate data rdbms structure matches ns db signature signature ns db sig structure handle val dml quot unit val foldr string string quot val qq string string val string string smlserver supports oracle rdbms postgresql rdbms mysql structures ns structure matches ns db signature ns ns ns 
example web server project file includes file db sml binds top level structure db structure ns follows shall structure db access postgresql rdbms 
database handle identifies connection rdbms pool set database handles 
web server started configurable number pools created 
time database handle owned script 
database handles owned script time belong different pools 
database functions request database handles initialized pools release database handles way deadlocks avoided pool database handles say simple form deadlock appear scripts executing simultaneously obtained database handle pool requesting second database handle 
ns db function dml type quot unit execute sql data manipulation language statements insert update statements rdbms 
error function raises top level exception fail 
function foldr access data database 
select statement passed argument function 
function similar basis library function list foldr 
application foldr sql executes sql statement quotation sql folds result set similarly list foldr folds list 
function function folding base argument function type string string maps column names values row 
number database handles owned script time limited number initialized pools nesting applications database access functions foldr limited number initialized pools 
error function raises top level exception fail involved database handles released appropriately 
function qq type string string returns argument string occurrence quote replaced double occurrence quotes escaped sql string literals 
function similar qq function extra functionality result encapsulated quotes 
show tiny guest book example demonstrates database interface 
example consists file guest sml presents guest book entries form entering new entries file guest add sml processes submitted guest book entry 
data model basis guest book service consists simple sql table create table guest email varchar name varchar comment varchar table guest contains columns email name comment 
row table corresponds form entry submitted user initially table contains rows 
file guest sml includes code val form form method post action guest add sml table tr td top new comment br name cols rows wrap virtual fill tr tr td name br input type text size name td email br input type text size name td br input type submit value add tr table form fun acc li comment href mailto email name acc val rows db foldr select email name comment guest order name val page return guest book ul rows ul form function db foldr query database rows table function type string string quot quot format row appropriately 
argument passed function function returns contents column row 
notice quotations embed sql statements code 
shows result requesting file guest sml 
file guest add sml fig 

result requesting file guest sml 
shall list uses functionality extracting form variables function db dml add entry guest table 
databases support transactions smlserver supports transactions handle structure 
execution model describe smlserver caches loaded bytecode gain efficiency multi threaded execution model possible smlserver serve multiple requests simultaneously describe region memory management scheme smlserver 
region memory management memory management system smlserver region inference extended appropriately deal correctly multi threaded program execution 
region inference inserts allocation deallocation directives program compile time pointer tracing garbage collection runtime 
region memory model store consists stack regions 
region inference turns value producing expressions program region variable denotes region store runtime 
expression source program region inference may turn target expression letregion target analyzing sub expressions region variable 
runtime empty region pushed stack bound 
sub expression evaluated allocation 
reaching region deallocated stack 
safety region inference guarantees region freed value located region 
functions target language declared take regions arguments may depending actual regions passed function produce values different regions call 
region inference region annotated program compiled bytecode kam series compilation phases 
dynamically region represented linked list constant sized region pages chunks memory allocated operating system 
region deallocated region pages region stored free list region pages obtained memory requested allocation 
consequence region memory management tags needed runtime distinguish different types values usually necessary pointer tracing garbage collection 
programs developed smlserver region inference proven recycle memory sufficiently combination region inference garbage collection enforcing programmer write region friendly programs 
multi threaded execution smlserver supports multi threaded execution scripts shared free list region pages 
memory model allows threads executing simultaneously region page different points time 
property potentially reduce memory usage obtained protecting free list mutual exclusion locks mutex 
smlserver maintains mutex protected pool initial heaps possible eliminate overhead library initialization presence multi threaded execution 
script executed initial heap obtained pool 
execution heap recovered back pool 
type safety process recovering pool involves restoring initial heap ensure mutable data initial heap reinitialized 
standard ml library approximately kb region pages containing closures copied time heap recovered 
storing mutable data arrays distinct regions copying avoided may improve efficiency smlserver 
measurements section measure performance smlserver respect script execution time compare cgi ml server pages implementation tcl php apache apache 
measure effect caching compiled scripts performance 
measure overhead interpreting initialization code libraries request 
measurements performed mhz pentium linux box equipped mb ram 
program benchmarking version 
benchmark scripts include different scripts 
hello script returns small constant html document 
date script uses library function show current date 
script db connects database executes simple query 
script guest returns guest list entries database 
script calendar returns formatted calendar months 
script mul returns simple multiplication table 
script table returns lines html table 
script log returns lines html table database content 
higher order functions list foldl list map msp version calendar script translated explicit loops tcl php versions script 
performance figures smlserver benchmark scripts shown fourth column table 
column shows benchmark number requests smlserver serves second instructed threads issue requests simultaneously seconds 
measurements web server platforms msp tcl apache php shown columns 
observations point 
scripts smlserver performs better web server platforms 

msp platform performs worse platforms benchmark scripts probably due cgi approach msp 
fifth column table shows efficiency smlserver caching script bytecode disabled caching library bytecode enabled 
measurements demonstrate caching script bytecode improves performance percent average percent 
sixth column table shows efficiency smlserver library execution enabled requests library script code cached 
execution library code request degrades performance percent average percent 
performance degrade highest involved scripts 
scripts hello date db guest time library execution executing script 
requests second program msp tcl apache php smlserver msp script caching library execution hello date db guest calendar mul table log table 
columns compares script execution times smlserver web server platforms 
caching loaded script bytecode improves performance percent column 
column shows execution library code request degrades performance percent 
related related fall categories 
related improving efficiency cgi programs particular embedding interpreters web servers may drastically decrease script initialization time 
particular expensive script forking script loading may avoided pool database connections maintained web server scripts need establish individual connections database 
second large body related functional languages web programming 
meijer library writing cgi scripts haskell provides low level functionality accessing cgi parameters sending responses clients 
thiemann extends meijer providing library wash cgi supports sessions typing forms html combinators 
mod haskell project takes approach embedding hugs haskell interpreter module apache web server 
peter sestoft ml server pages implementation moscow ml provides support web programming cgi provide high efficiency see table 
graunke demonstrate programming web server infrastructure high level functional language efficient utilizing existing web server infrastructure 
suggest multithreaded execution scripts supported context server state 
existing web server infrastructure apache advantage pluggable modules providing ssl secure socket layer support efficient pool database drivers variety database systems 
queinnec suggests continuations implement interaction clients web servers 
separate graunke demon strate web programs written traditional direct style transformed cgi scripts cps conversion lambda lifting 
contrast queinnec approach uses client storing state information continuation environments requests 
interesting investigate approach works statically typed languages standard ml 
bigwig provides type system guarantees web applications return proper html clients 
support typing forms sessions ensure type safety bigwig programs written special domain specific language 
session support provided bigwig raises question session state stored web server garbage collected 
directions directions 
ongoing direction development smlserver community suite scs contains composable modules user authentication multi lingual web sites 
smlserver scs university copenhagen running course evaluation system administrative systems amounts approximately lines standard ml excluding basis library 
surprisingly experienced static type system standard ml eases development maintenance web applications 
aspects web application development smlserver may give better static guarantees 
embedded html code untyped 
data sent browser guaranteed valid html 
html combinators constructing html code increase faith code completely ensure validity html code requires dynamic tests text embedded html code 

form variables untyped 
correspondence form variables expected script form variables provided request modeled standard ml type system 
solution problem problem html code untyped proposed bigwig project solution builds new language tailored specifically web applications 

embedded sql queries untyped 
extension standard ml type system support embedding sql queries proposed requires drastic departure standard ml language addition extensible records variant types 
possibility separate database queries program logic tool generate type safe query functions query specifications 
way queries invalid respect underlying data model rejected compile time 
smlserver multi threaded web server platform executing web applications written standard ml 
making advanced language features standard ml provides advantages web programming higher order functions combined rich module language standard ml provide mechanisms gain high degree code reuse means constructing shallow interfaces examples include modules form variable validation database interaction data caching 
static type system standard ml provides maintenance properties particularly important web programming program modifications exposed users early 
experience writing large web applications lines code smlserver demonstrates importance maintenance properties smlserver scales construction large systems 
measurements demonstrate web applications written smlserver perform better web applications written scripting languages respect script execution time database connectivity 
shown region memory model scales multithreaded environment programs run shortly executed 
information smlserver available www smlserver org 
acknowledgments lars birkedal ken larsen peter sestoft mads tofte fruitful discussions 

lars birkedal mads tofte magnus 
region inference von neumann machines region representation inference 
proceedings rd acm sigplan sigact symposium principles programming languages pages 
acm press january 

claus brabrand anders ller michael schwartzbach 
bigwig project 
acm transactions internet technology may 

peter buneman atsushi ohori 
polymorphism type inference database programming 
acm transactions database systems 

eelco hemel 
mod haskell january 
st lab cs uu nl mod haskell 

martin elsman 
static interpretation modules 
procedings fourth international conference functional programming icfp pages 
acm press september 

martin elsman niels 
region machine ml kit 
technical report tr university copenhagen august 

martin elsman niels 
smlserver functional approach web publishing 
university copenhagen february 
pages 
available www smlserver org 

matthew riccardo pucella 
phantom types subtyping 
second ifip international conference theoretical computer science tcs pages august 

paul graunke shriram krishnamurthi robert bruce findler matthias felleisen 
automatically restructuring programs web 
th ieee international conference automated software engineering ase september 

paul graunke shriram steve van der matthias felleisen 
programming web high level programming languages 
european symposium programming esop april 

philip 
philip alex guide web publishing 
morgan kaufmann may 
pages 
isbn 

niels martin elsman mads tofte 
combining region inference garbage collection 
acm sigplan conference programming language design implementation pldi 
acm press june 
berlin germany 

erik meijer 
server side web scripting haskell 
journal functional programming january 

robin milner mads tofte robert harper david macqueen 
definition standard ml revised 
mit press 

open market fastcgi high performance web server interface april 
technical white 
available www fastcgi com 

christian queinnec 
influence browsers evaluators continuations program web servers 
fifth international conference functional programming icfp september 

sergei claudio russo peter sestoft 
moscow ml owner manual june 
version 
pages 

anders sandholm michael schwartzbach 
type system dynamic web documents 
proceedings acm sigplan sigact symposium principles programming languages popl 
acm press january 

konrad slind 
object language embedding standard ml new jersey 
proceedings second ml workshop cmu scs technical report 
carnegie mellon university pittsburgh pennsylvania november 

lincoln stein doug maceachern 
writing apache modules perl reilly associates april 
isbn 

peter thiemann 
wash cgi server side web scripting sessions typed compositional forms 
procedings practical aspects declarative languages padl 
springer verlag january 
portland oregon 

mads tofte lars birkedal martin elsman niels tommy olesen peter sestoft 
programming regions ml kit version 
technical report tr university copenhagen october 

mads tofte jean pierre talpin 
region memory management 
information computation 
