kat ml interactive theorem prover kleene algebra tests kamal dexter kozen department computer science cornell university ithaca new york usa kamal kozen cs cornell edu 
describe implementation interactive theorem prover kleene algebra tests kat 
system designed reflect natural style reasoning kat finds literature 
illustrate examples 
kleene algebra tests kat introduced equational system program verification combines kleene algebra ka boolean algebra 
kat applied successfully various low level verification tasks involving communication protocols basic safety analysis source source program transformation concurrency control compiler optimization dataflow analysis 
system subsumes hoare logic deductively complete partial correctness relational models 
attention focused equational theory ka kat 
axioms kat known deductively complete equational theory relational models validity decidable pspace 
practical importance premises universal horn theory interest set valid sentences form pn qn atomic symbols implicitly universally quantified 
typically premises pi qi assumptions regarding interaction atomic programs tests represents equivalence optimized unoptimized program 
necessary premises obtained inspection program validity may depend properties domain computation usually quite simple easy verify inspection typically involve atomic programs tests 
premises established proof purely propositional 
ability introduce premises needed features kat versatile 
comparison hoare logic assignment rule limited 
addition style reasoning allows clean separation order interpreted reasoning justify premises pn qn purely propositional reasoning establish follows premises 
pspace decision procedure equational theory implemented cohen 
cohen approach try reduce horn formula equivalent equation apply pspace decision procedure verify resulting equation automatically 
reduction possible 
contrast system allows user develop proof interactively natural human style keeping track details proof 
unproven theorem number outstanding tasks form unproven horn formulas 
initial task theorem 
user applies axioms lemmas simplify tasks may introduce new presumably simpler tasks 
tasks discharged proof complete 
user applies proof rules system constructs representation proof form term 
proof term unproven theorem free task variables corresponding undischarged tasks 
describe system give example 
verified formally known results literature previously verified hand including kat translation hoare partial correctness rules verification problem involving windows device driver intricate scheme equivalence problem 
system implemented standard ml easy install 
source code executable images various platforms downloaded 
tutorial examples provided distribution 
preliminary definitions kleene algebra kleene algebra ka algebra regular expressions 
axiomatization 
kleene algebra algebraic structure satisfies axioms pq qr pq pr pr qr pp pr rp qp universal horn axiomatization :10.1.1.113.2877
axioms say idempotent semiring 
adjective idempotent refers 
axioms say solution px qp solution xp refers natural partial order defined def standard models include family regular sets finite alphabet family binary relations set family matrices kleene algebra 
unusual interpretations include min algebra known tropical semiring shortest path algorithms models consisting convex polyhedra computational geometry 
alternative axiomatizations literature infinitary 
example kleene algebra called star continuous satisfies infinitary property pq sup pq equivalent infinitely equations infinitary horn formula pq pq pq pq 
natural models star continuous 
axiom stronger finitary horn axiomatization difficult implement require meta rules handle induction needed establish 
completeness result says true identities regular expressions interpreted regular sets strings derivable axioms 
words algebra regular sets strings finite alphabet free kleene algebra generators axioms complete equational theory relational models 
see thorough 
kleene algebra tests kleene algebra tests kat just kleene algebra embedded boolean subalgebra 
sorted structure kleene algebra boolean algebra elements called tests 
boolean complementation operator defined tests 
kat ml variables upper case character denote tests lower case character denote arbitrary kleene elements 
axioms boolean algebra purely equational 
addition kleene algebra axioms tests satisfy equations bc cb bb cd bc bb program constructs encoded propositional dynamic logic def pq def bp bq def bp hoare partial correctness assertion expressed equation bpc equivalently bp bpc 
hoare rules derivable kat kat deductively complete relationally valid propositional hoare style rules involving partial correctness assertions propositional hoare logic 
simple example illustrates equational reasoning horn formulas proceeds kat 
illustrate system give mechanical derivation lemma sect 

lemma 
equations equivalent kat cp ii cp iii cp proof 
prove separately horn formulas ii iii ii iii 
assume holds 
replace cp left hand side ii boolean algebra axiom 
second assume holds 
replace second occurrence right hand side iii cp distributivity law cp cp boolean algebra axiom multiplicative identity axiom ii iii multiply sides ii iii left distributivity boolean algebra axioms cc cc see detailed kat 
description system kat ml interactive theorem prover kleene algebra tests 
written standard ml 
system command line interface works platform graphical user interface works unix operating system 
user create manage libraries kat theorems proved cited name proofs 
standard libraries containing axioms kat commonly lemmas provided 
core kat theorem prover commands publish cite 
publication mechanism making previous constructions available abbreviated form 
citation incorporates previously constructed objects proof having reconstruct 
commands relate way 
representation proofs kat ml maintains proof theorem term abstracted individual variables 
test variables 
appear theorem proof variables 
premises 
proof complete proof term contain free task variables 
undischarged tasks 
proof terms typed type theorem curry howard isomorphism 
theorem proof reconstructed proof term 
instance consider theorem 
xm 
premises 
xm individual variables appear 
viewed type theorem realized proof term representing function takes arbitrary substitution variables xi proofs premises returns proof 
initially proof represented term 
xm 
pn pn free variable type representing main task 
publishing theorem results creation initial proof term proof rules applied proof term expanded accordingly 
citing theorem lemma proof theorem equivalent substituting proof term free task variable proof term 
proof need complete happen undischarged tasks undischarged tasks 
citation system allows forms citation focused unfocused 
citations applied current task 
may cite published theorem command cite premise current task command 
unfocused citation cited theorem unified current task giving substitution terms individual variables 
substitution applied premises cited theorem current task replaced new presumably simpler tasks premise cited theorem 
specialized premise cited theorem proved premises original task 
example suppose current task indicating prove pq qp premises rr display symbol denotes equal 
proof term point display represents 
means returns proof pq qp proofs premises 
appropriate citation point lemma sup sup unified task giving substitution pq qp substitution applied premises sup old task replaced new tasks operation reflected proof term follows sup new proof term function returns proof pq qp sup provided proofs premises incomplete proofs 
arguments proofs premises original task 
premise cited command just identical premise case corresponding task variable replaced proof variable cited premise 
focused citation implement proof rule substitution equals equals 
focused citation subterm current task specified subterm called focus 
system provides set navigation commands allow user focus subterm 
current focus citation attempt unify left right hand side cited theorem focus replace specialized side 
unfocused citation new tasks introduced premises cited theorem 
corresponding substitution proof term 
event multiple substitutions possible system prompts user options applies selected 
example suppose current task axiom apply 
system allow citation unify task unify 
change focusing left hand side citing axiom id focusing desired subterm gives focus underlined 
citing id unifies right hand side focus replaces specialized left hand side id yielding commands exist facilitate proving theorems 
cut rule adds new premise list premises current task adds second task prove original premises 
starting task 
command cut yields new tasks 


list commands see readme file kat ml distribution 
heuristics kat ml simple set heuristics aid proving theorems 
heuristics automatically perform unfocused citation premises theorems library premises reflexivity unify current task 
system provides list suggested citations library focused unfocused unify current task focus 
currently system attempt order suggestions provides list possible citations 
eventually system attempt order list suggested citations learned priority determined usage statistics 
extended example example system 
proof horn formulas lemma 
proof demonstrates basic publication citation focus navigation 
examples varying complexity see examples directory kat ml distribution 
pub task current task proof current task focus current task current task cite current task current task cite compl cite compl task completed tasks proof subst compl tasks heuristics theorem tasks heuristics prem tasks pub task current task proof current task focus current task current task cite id cite id current task current task cite cite 
current task current task cite compl 
cite compl 

current task current task cite 
cite 
current task current task cite cite current task current task cite cong cite cong cite task completed tasks proof subst id subst subst compl 
subst 
subst cong tasks described interactive theorem prover kleene algebra tests kat 
feel interesting part particular data structures algorithms chosen fairly standard design mode interaction user system 
main goal automate reasoning process possible provide support user developing proofs natural human style similar proofs kat literature 
kat naturally equational equational reasoning pervades aspect reasoning kat 
system true style 
user introduce self evident equational premises describing interaction atomic programs tests reason assumptions derive equivalence complicated programs 
system performs low level reasoning tasks bookkeeping facilitates sharing theorems proofs user develop main proof strategies 
current focus extend system order constructs including arrays 
atomic programs assignments program variable order term ranging domain computation particular order signature 
extra equational axioms needed schematic uninterpreted order reasoning single rule introducing properties domain computation 
order axioms typically establish correctness premises done reasoning reverts purely propositional level 
short term goal implement order infrastructure support mechanical derivation certain proofs order kat appearing literature 
acknowledgments supported part nsf ccr onr 
views contained authors interpreted necessarily representing official policies endorsements expressed implied organizations government 

kozen kleene algebra tests 
transactions programming languages systems 
kozen kleene algebra tests program 
technical report computer science department cornell university 
barth kozen equational verification cache blocking lu decomposition kleene algebra tests 
technical report computer science department cornell university 
cohen lazy caching kleene algebra citeseer nj nec com html 

cohen hypotheses kleene algebra 
technical report tm bellcore citeseer nj nec com html 

cohen kleene algebra reason concurrency control 
technical report telcordia morristown 

kozen patron certification compiler optimizations kleene algebra tests 
lloyd dahl furbach kerber lau palamidessi pereira sagiv stuckey eds proc 
st int 
conf 
computational logic cl 
volume lecture notes artificial intelligence london springer verlag 
kozen hoare logic kleene algebra tests 
trans 
computational logic 
cohen kozen smith complexity kleene algebra tests 
technical report computer science department cornell university 
kozen smith kleene algebra tests completeness decidability 
van dalen bezem eds proc 
th int 
workshop computer science logic csl 
volume lecture notes computer science utrecht netherlands springer verlag 
ball rajamani automatically validating temporal safety properties interfaces 
proceedings th international spin workshop model checking software spin 
volume lecture notes computer science springer verlag 
www cs cornell edu kozen kat ml zip 

kleene representation events nerve nets finite automata 
shannon mccarthy eds automata studies 
princeton university press princeton 

conway regular algebra finite machines 
chapman hall london 
kozen completeness theorem kleene algebras algebra regular events 
infor 
comput 

fischer ladner propositional dynamic logic regular programs 
comput 
syst 
sci 

kozen tiuryn substructural logic partial correctness 
trans 
computational logic 
rensen urzyczyn lectures curry howard isomorphism 
available diku rapport 
