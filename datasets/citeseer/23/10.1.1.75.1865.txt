coinductive big step operational semantics xavier leroy inria rocquencourt domaine de voluceau le chesnay france xavier leroy inria fr 
illustrates coinductive definitions proofs big step operational semantics enabling describe diverging evaluations addition terminating evaluations 
show applications proofs type soundness proofs semantic preservation compilers 
exist popular styles structured operational semantics big step semantics relating programs final configurations small step semantics step reduction relation repeatedly applied form reduction sequences 
small step semantics expressive describe evaluation terminating non terminating programs finite infinite reduction sequences respectively 
contrast big step semantics describes evaluation terminating programs fails distinguish nonterminating programs programs go wrong 
reason small step semantics generally preferred particular proving soundness type systems 
big step semantics convenient small step semantics applications 
dear heart proving correctness preservation program behaviours program transformations especially compilation high level language lower level language 
experience fairly complex optimizing compilation passes proved correct relatively easily big step semantics induction structure big step evaluation derivations 
contrast compiler correctness proofs small step semantics significantly harder simple non optimizing compilation schemes 
illustrate coinductive definitions proofs enable big step semantics describe finite infinite evaluations 
target study simple call value functional language 
study approaches initially proposed cousot cousot complements normal inductive big step evaluation rules finite evaluations coinductive big step rules describing diverging evaluations second simply interprets coinductively normal big step evaluation rules enabling describe terminating non terminating evaluations 
semantics defined section 
main technical results connections coinductive big step semantics finite infinite reduction sequences small step semantics section novel approach stating proving soundness type systems section proofs semantic preservation compilation machine section 
originality results proved proof assistant coq system developed interaction tool transcribed standard mathematical notations 
coq proof assistant provides built support coinductive definitions proofs limited form coinduction called guarded structural coinduction 
see descriptions approach coinduction 
proofs easier standard proofs coinduction particular need exhibit consistent relations 
enables play fast loose coinduction proof sketches skeptical reader referred corresponding coq development details 
benefit coq formalization proofs modest mathematics just syntactic definitions domain theory constructive logic plus axiom excluded middle classical logic 
proofs excluded middle marked classical 
language big step semantics language consider calculus extended constants simplest functional language exhibits run time errors terms go wrong 
syntax follows variables 
constants 
terms write capture avoiding substitution free occurrences say term value write values constant abstraction standard call value semantics big step style language defined inference rules interpreted inductively 
const fun app precisely relation read evaluates smallest fixpoint rules 
equivalently holds finite derivation tree built rules 
coq development treat terms modulo conversion substitution capture avoiding closed 
suffices define evaluation reduction closed source terms 
lemma 
values 
proof sketch 
induction derivation rules capture terminating evaluations 
writing instance lemma 
false terms proof sketch 
show implies induction derivation cousot cousot define divergence infinite evaluations inference rules interpreted coinductively app app app precisely relation read diverges greatest fixpoint rules equivalently infinite derivation trees built rules 
note imposed arbitrarily left right evaluation order applications 
lemma 
holds 
proof sketch 
coinduction 
assume coinduction hypothesis 
derive rule app coinduction hypothesis third premise 
lemma 
mutually exclusive 
proof sketch 
induction derivation inversion alternate attempt describe terminating non terminating evaluations time interpret coinductively standard evaluation rules terminating evaluations 
const fun app double horizontal lines inference rules denote inference rules interpreted coinductively single horizontal lines denote inductive interpretation 
relation read greatest fixpoint standard evaluation rules 
holds finite infinite derivation tree built rules 
naively expect union 
intuition supported properties lemma 
proof sketch 
induction derivation lemma 
terms proof sketch 
coinduction rule app coinduction hypothesis third premise 
lemma 
proof sketch classical 
show implies result follows excluded middle auxiliary property proved coinduction case analysis cases variables constants abstractions trivially contradict hypotheses 
inversion hypothesis shows excluded middle terms evaluate hold 
result follows applying rule matches term evaluate coinduction hypothesis 
reverse implication hold exists terms diverge 
consider instance 
true term argument goes wrong 
unusual feature deterministic 
instance term deterministic terminating terms sense lemma 
proof sketch 
induction derivation inversion exists diverging terms value 
example term 
relation small step semantics step reduction relation defined call value reduction axiom plus context rules reducing applications assuming left evaluation order 
app values values app kinds reduction sequences interest 
written reduces zero steps normal reflexive transitive closure captures finite reductions 
second re duces infinitely captures infinite reductions 
third reduces zero infinitely steps coinductive interpretation rules reflexive transitive closure captures finite infinite reduc tions 
relations defined rules interpreted inductively coinductively 
contrast evaluation predicates section true union 
lemma 
proof sketch classical 
part show induction coinduction 
part show coinduction 
result follows excluded middle turn relating reduction relations small step evaluation relations big step 
results proved earlier variant consistent relation approach 
known normal evaluation equivalent finite reduction value lemma 
values 
proof sketch 
part easy induction part show lemmas values result follows induction derivation similarly divergence equivalent infinite reduction 
proof uses lemma lemma 
terms exists 
proof sketch classical 
show implies coinduction 
argue excluded middle lemma 
proof sketch classical 
part show implies structural induction conclude coinduction 
part proceed coinduction case analysis non trivial case 
lemma distinguish cases reduces infinitely reduces value reduces infinitely reduce values respectively reduces infinitely 
result follows coinduction hypothesis cases 
equivalence holds direction 
lemma 
implies proof sketch 
classical logic follows lemmas 
result proved directly constructive logic 
show values induction result follows coinduction 
example reverse implication hold 
hold term 
type soundness proofs turn coinductive evaluation reduction relations proving soundness type systems 
specific simply typed calculus recursive types type system 
obtain recursive types interpreting type algebra int coinductively 
typing rules recalled 
ranges type environments finite maps variables types 
int enabling recursive types type system non normalizing allows interesting programs written 
particular call value fixpoint operator 

typed types types type soundness proofs small step semantics felleisen wright introduced proof technique showing type soundness relies small step semantics standard nowadays 
proof relies twin properties type preservation called subject reduction progress lemma preservation 
lemma progress 
values formal statement type soundness felleisen wright approach lemma type soundness 
values exists proof sketch 
show induction preservation lemma 
conclude progress lemma 
authors follow approach conclude typed closed terms reduce value reduce infinitely 
generally expressed proved formally 
approach easy lemma type soundness 
exists values 
proof sketch classical 
lemma 
result obvious case 
second case note consequence preservation lemma progress lemma conclude values 
alternate equivalent formulation theorem uses relation 
lemma type soundness 
exists values 
proof sketch classical 
follows lemmas 
arguably nicer characterisation programs go wrong relation safe read reduces safely defined coinductively rules values safe safe safe rules interpreted coinductively safe holds reduces infinitely 
state show type soundness recourse classical logic lemma type soundness 
safe proof sketch 
coinduction 
applying progress lemma values done case preservation property result follows coinduction hypothesis 
type soundness proofs big step semantics standard big step semantics relation awkward proving type soundness distinguish terms diverge terms go wrong cases value consequently obvious type soundness statement exists false type systems guarantee normalization 
best result prove big step equivalent preservation lemma lemma 

standard approach provide inductive inference rules define predicate err characterizing terms go wrong prove weaker type soundness statement case err 
approach unsatisfactory reasons extra rules provided define err increases size semantics risk rules err incomplete cases going wrong case type soundness statement guarantee typed terms evaluate value diverge 
revisit trade offs light characterizations divergence 
formally state means term evaluate diverge 
leads alternate statement type soundness lemma type soundness 
exists result follows lemma big step analogue progress lemma excluded middle applied lemma 
proof sketch classical 
proof coinduction case analysis cases lead contradictions variables typeable empty environment constants abstractions evaluate 
interesting case 
excluded middle evaluates value 
case follows rule app obtain coinduction hypothesis 
case function type lemma 
excluded middle evaluates value 
case follows rule app coinduction hypothesis 
case typing stable substitution 
excluded middle third time evaluate value 
result follows rule app coinduction hypothesis 
proof original alternative standard approach showing err typed terms methodological standpoint proof addresses shortcomings standard approach risk putting error rules 
forget divergence rules proof lemma likelihood go 
improbable put rules divergence property mutually exclusive 
novel approach proving type soundness big step semantics appears robust respect mistakes specification semantics 
methodological shortcoming remains just goes wrong approach approach requires evaluation rules just normal evaluations rules divergence 
easily double size specification dynamic semantics serious concern realistic languages normal evaluation rules number dozens 
relation attractive pragmatic reasons number rules normal evaluation 
course seen equivalent example gave term typeable early diverging evaluation hides evaluation goes wrong 
type systems ensure subterms term go wrong hope conjecture holds conjecture type soundness 
exists able prove conjecture uninteresting non normalizing type systems simply typed calculus recursive types predefined constant type int int diverges applied 
conjecture false simply typed calculus recursive types probably type systems general fixpoint operator 
andrzej filinski provided counterexample 
consider 

term typed type int int fails possible value infinite term 


compiler correctness proofs return original motivation proving semantic preservation compilers terminating diverging programs big step semantics 
demonstrate approach compilation call value calculus simple machine 
big step semantics environments closures 
vn 
xn vn 
vn 
xn vn fig 

big step evaluation rules closures environments machine uses closures environments indexed de bruijn indices 
convenient reformulate big step evaluation predicates terms 
variables written xn identified de bruijn indices values longer subset terms environments defined values integer values function closures environments sequences values shows inference rules defining evaluation relations finite evaluations inductive infinite evaluations coinductive coinductive formally study relations note enjoy properties environment relations studied section 
machine compilation scheme machine target compilation follows call value strategy eval apply model 
close spirit secd cam fam cek machines 
machine state components code sequence stack environment 
syntax components follows 
instructions var push value variable number const push constant clos push closure code app perform function application ret return calling function code instruction sequences machine values integer values code closures machine environments stacks empty stack pushing value pushing return frame behaviour machine defined rules transition relation relates machine state execution instruction code 
var vn 
vn 
const clos app ret section consider closures step transition relation zero transitions inductive transitions inductive infinitely transitions coinductive zero infinitely transitions 
compilation scheme terms code straightforward xn var const clos ret app intended effect code evaluate term push value top machine stack leaving rest stack environment unchanged 
proofs semantic preservation expect compilation machine code preserve semantics source term general sense 
consider closed term start machine initial state corresponding diverges machine perform infinitely transitions 
evaluates value machine reach final state corresponding finite number transitions 
initial state corresponding 
final state corresponding result value code entirely consumed machine value corresponding value left top stack 
correspondence source level machine values defined ret 
vn 
vn semantic preservation easy show terminating terms semantics 
just need strengthen statement preservation lends induction derivation 
see coq development full proof 
lemma 
codes stacks impossible prove semantic preservation diverging terms standard big step semantics 
led authors prove semantic preservation compilation machines small step semantics explicit substitutions 
proofs difficult obvious simulation property hold transitions machine follow reductions source term 
proofs rely decompilation relation maps intermediate machine states back source level terms 
help decompilation relation possible prove simulation diagrams imply desired semantic preservation properties 
decompilation relations difficult define especially optimizing compilation schemes see example 
coinductive big step semantics studied provide simpler way prove semantic preservation non terminating terms 
theorems hold showing compilation preserves divergence characterized predicates 
lemma 
lemma 

full proofs 
lemmas proved directly structural coinduction case analysis problem application case code component initial machine state form app possible invoke coinduction hypothesis reason execution coinduction hypothesis guarded inference rule relation terms machine instruction evaluated invoking hypothesis 
ways address issue 
modify compilation scheme applications order insert operation instruction front generated sequence nop 
nop operation obvious machine transition nop modification coinductive proof lemma performs nop transition invoking coinduction hypothesis deal evaluation 
coinductive proof properly guarded acceptable coq 
course inelegant pepper generated code nop instructions just proof get 
alternate approach compilation scheme applications unchanged exploit fact number recursive calls perform machine transition necessarily finite term algebra finite 
proof lemma exploits fact defining variant relation enables finite number stuttering steps instructions executed executions instructions 
finite number question length left application spine term compiled 
problem solution similar described bertot coinductive presentation proof eratosthenes sieve algorithm 
related instances coinductive definitions proofs big step semantics literature 
cousot cousot proposed coinductive big step characterization divergence studied applicability interpretation 
applied approach call value calculus predicates big step semantics generate finite infinite traces elementary computation steps traces uses define observational equivalences 
gunter stoughton initial goal describe terminating diverging computations big step semantics increasing sequences finite incomplete derivations infinite derivations 
know approach relates relations 
milner tofte leroy coinduction context big step semantics functional imperative languages describe diverging evaluations capture safety properties possibly cyclic memory stores 
course coinductive techniques routinely context semantics especially labeled transition systems arising process calculi 
flavours coinduction especially proofs bisimulations quite different 
infinitary calculus studies diverging computations different angle authors reduction semantics terms infinite topological tools metrics convergence coinduction 
investigated coinductive approaches giving big step semantics nonterminating computations 
separate evaluation rules terminating terms diverging terms appears behaved corresponds exactly finite infinite reduction sequences lends type soundness proofs compiler correctness proofs 
second approach consisting coinductive interpretation standard evaluation rules satisfactory amenable compiler correctness proofs captures subset diverging computations interest clear subset exactly 
natural continuation develop coinductive big step trace semantics imperative languages capture final outcome evaluation divergence result value possibly infinite trace observable effects input output performed evaluation 
trace semantics enable stronger statements observational equivalence source code compiled code context compiler certification 
existence suitable traces infinite evaluations proved constructively just axiom excluded middle 
clear classical axioms probably variants axiom choice need added coq 
acknowledgments andrzej filinski disproved conjecture section shortly stated 
anonymous reviewers participants nd meeting ifip working group functional programming feedback 

berarducci dezani ciancaglini 
infinite lambda calculus types 
theor 
comp 
sci 

bertot 
filters coinductive streams application eratosthenes sieve 
typed lambda calculi applications tlca volume lncs pages 
springer verlag 

bertot cast ran 
interactive theorem proving program development coq art calculus inductive constructions 
eatcs texts theoretical computer science 
springer verlag 

cousot cousot 
inductive definitions semantics interpretation 
th symp 
principles progr 
lang pages 
acm press 

levin pierce 
recursive subtyping revealed 
func 
progr 

gim nez 
codifying guarded definitions recursive schemes 
types proofs programs 
international workshop types volume lncs pages 
springer verlag 


deux crit res de pour ex cution de code mobile 
phd thesis cole nationale des es dec 

gr 
compilation des termes de un entre coq ocaml 
phd thesis university paris 

gunter 
proof theoretic assessment runtime type errors 
research report tm bell laboratories 

hardin 
functional runtimes calculus 
journal functional programming 

kennaway klop sleep 
de vries 
infinitary lambda calculus 
theor 
comp 
sci 

klein nipkow 
machine checked model java language virtual machine compiler 
technical report national ict australia mar 
appear acm toplas 

leroy 
coinductive big step operational semantics coq development 
available pauillac inria fr 

leroy 
formal certification compiler back programming compiler proof assistant 
rd symp 
principles progr 
lang pages 
acm press 

leroy 
security properties typed applets 
vitek jensen editors secure internet programming security issues mobile distributed objects volume lncs pages 
springer verlag 

milner tofte 
induction relational semantics 
theor 
comp 
sci 


proving correctness virtual machine bisimulation 
licentiate thesis teborg university 

stoughton 
operational semantics framework supporting incremental construction derivation trees 
second workshop higher order operational techniques semantics ii volume electronic notes theoretical computer science 
elsevier 

strecker 
compiler verification 
technical report universit paul sabatier toulouse april 

wright felleisen 
syntactic approach type soundness 
inf 
comp 

