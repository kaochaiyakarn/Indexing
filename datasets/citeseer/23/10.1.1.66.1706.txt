java programming language implementing server side application logic increasing popularity little known architectural requirements emerging commercial workload 
detailed characterization transaction processing council tpc web benchmark implemented java 
tpc benchmark designed exercise web server transaction processing system typical commerce web site 
implemented tpc collection java servlets architectural study detailing memory system branch predictor behavior workload 
evaluate effectiveness coarse grained multithreaded processor increasing system throughput tpc commercial workloads 
measure system throughput improvements context processor context uniprocessor single threaded uniprocessor despite decreased branch prediction accuracy cache hit rates 

architectural evaluation java tpc harold cain ravi computer sciences department university wisconsin madison wi cain cs wisc edu years world wide web evolved global repository static information dynamic environment provides mechanisms connecting interacting increasing number line databases sources dynamic content 
pursuit global market share companies ranging traditional brick mortar retailers online startup companies implementing web sites allow high level dynamic interaction inventory purchasing order databases 
transition online electronic commerce placing new demands software hardware infrastructure implement complex systems 
software side new implementation techniques increasing layers middleware business object frameworks new programming languages java required simplify task application programmer reduce develop morris lipasti dept electrical computer engineering university wisconsin madison wi ece wisc edu ment time 
hardware side overhead software techniques unique demands created confluence web connectivity complex middleware application logic high availability expected traditional line transaction processing database systems potential dramatically change behavior program code executed large server computer systems serve hardware platforms web sites 
historically transaction processing performance council tpc consortium system database vendors specified standard benchmarks tpc tpc tpc tpc tpc tpc evaluating performance transaction processing decision support database systems 
benchmarks useful gauging absolute performance price performance combined software hardware systems 
significant body prior studied architectural requirements workloads 
time systems performance evaluation cooperative spec similar consortium developed standard benchmarks evaluating static dynamic web content serving specweb specweb respectively 
useful right benchmarks reflect demands placed systems perform functions concert 
response shortcoming tpc developed new benchmark commerce called tpc modeled line bookstore includes elements website including complex application logic significant web serving component including static dynamic web pages direct transaction processing decision support connectivity online relational database containing product inventory customer order tracking information 
implemented requirements specified tpc specification published early findings 
overview tpc specification section details implementation described section 
section results characterizing benchmark natively processor ibm rs shared memory multiprocessor system 
proliferation world wide web dramatically altered landscape commercial server software architectural trends new techniques continued evolve 
trends include deeper pipelines increasingly dependent accurate branch prediction increasing importance highperformance memory subsystem particularly multiprocessor systems need architectural techniques overcome tolerate high memory interprocessor communication latencies 
particularly effective technique studied literature subsequently implemented ibm line computers coarse grained multithreading 
multiple thread contexts exist physical processor thread switch logic swap threads long latency events cache misses stall execution particular thread 
section characterize system performance memory subsystem branch predictor behavior context conventional processors uni multiprocessor configurations running tpc workload 
shown past commercial workloads find effective technique increasing throughput java server workloads despite increase cache misses reduced accuracy shared branch prediction mechanism 

tpc benchmark specification tpc benchmark transactional web benchmark models line bookstore 
benchmark comprises set operations designed exercise web server database system manner representative typical internet commerce application environment 
environment characterized multiple concurrent line browser sessions web serving static dynamically generated web pages variety access update patterns database consisting tables different sizes attributes relationships 
section general overview benchmark followed detailed description web serving database components workload 

emphasize implementation fully conform tpc specification results interpreted accurate representations performance software hardware systems described 
results meet strict reporting auditing requirements specified tpc sense official comparable tpc results considered 

tpc overview components tpc logically divided tiers set emulated web browsers web server means persistent storage 
emulated browsers simulate activities multiple concurrent web browsing users making autonomous requests web server web pages images 
depending web page requested may necessary web server communicate persistent storage mechanism dynamically generate response page 
persistent storage mechanism records data necessary online bookstore inventory customer records order records 
web server storage mechanism logically separated parts benchmark specification preclude merging 
tpc specification defines web interactions different terms required amount server side processing 
relatively light weight requiring web serving static html pages images 
require considerable amount server side processing involving connections database addition dynamically generating html pages 
characteristics related amount processing required web interaction summarized table 
web interactions require dynamic html generation including communicate database 
amount done database varies interaction interactions perform simple selects updates database best seller admin confirm perform complicated transactions similar decision support system workloads 
table lists number joins required interaction queries approximation query complexity 
number static images associated web interaction ranging size kb mb 
column table shows response time requirement web interactions 
type web interaction complete maximum response time 
tpc benchmark run begins starting certain number emulated browsers begins browsing session tpc bookstore home page 
emulated browsers continue traversing bookstore web pages different links entering user information varying probabilities 
number emulated browsers variable determines maximum reported throughput results 
emulated browser session browser may fill shopping cart perform searches inventory database fill customer information perform bookstore administrative duties buy contents shopping cart look best sellers name dynamic html 
table joins images max response time seconds admin confirm admin request best seller buy confirm buy request customer registration home new product order display order inquiry product detail search request search result shopping cart table tpc web interaction characteristics 
new products lists inquiries previous orders 
random period time spent sleeping subsequent individual browser requests simulate user think time 
emulated browsers continue access system test minutes 
system reaches steady state performance measurements 
primary performance metric tested tpc benchmark throughput measured number web interactions second 
specification defines different mixes web interactions varying ratio inventory browsing related web pages visited ordering related web pages visited 
depending particular mix remote browser emulator visit certain parts store front website 
primary mix shopping mix throughput denoted intended reflect average shopping scenario pages user visits related browsing pages related ordering 
actual usage patterns may vary different web sites tpc specification defines web interaction mixes browsing mix little ordering occurs ordering mix ratio browsing ordering 
exact web interaction frequencies mix shown table 
results reported web interaction mixes tpc specifies hardware software configuration identical interaction mixes 
web interaction browsing mix 
database component shopping mix ordering mix browse best sellers home new products product detail search request search results order admin confirm admin request buy confirm buy request customer registration order display order inquiry shopping cart table web interaction frequencies mix tpc specification defines exact schema database 
schema consists tables customer address order order line credit card transaction item author country 
minimum tpc implementation include database tables contain exact organization specified schema 
additional fields tables may added 
benchmark tables modified course execution author country tables read 
ratio read read write queries changes different mixes 
queries associated browsing related web interactions read order related web interactions contain database updates 
scaling rules database dependent variables size bookstore inventory number emulated browsers drive system 
number items item table chosen predetermined sizes 
number emulated browsers may scaled increments 
database scaling rules shown table typical row lengths table size estimates emulated browsers items addition storing tables system test store images image thumbnails associated item 
tpc specification defines set consistency requirements system test pass prior table name cardinality rows publishing official results 
requirements pertain database transactions called acid requirements 
acid requirements specify necessary conditions atomicity consistency isolation durability system 
atomicity requirement guarantees web interaction database operations occur 
consistency requirement specifies initially consistent database tpc database transaction transitions database consistent state 
isolation requirement specifies tpc interactions isolated meaning concurrent transactions yield results serialized transactions 
durability requirement specifies database transactions durable system preserve effects committed database transaction recovery single point failure 

web server component typical row length bytes typical table size bytes customer number eb address customer orders customer order line orders cc orders item author item country table database scaling rules example table sizes web server software include logic tracking user sessions 
emulated browser session tracked session identification number meaning request emulated browser include session identifier 
web servers browsers typically methods maintain communicate sessions 
cookies web server responds browser initial request cookie browser includes subsequent requests 
second means maintaining sessions url rewriting web server encodes session id part links html document 
browser follows links session id communicated part requested url 
disadvantage url rewriting web page dynamically generated order properly encode session id web page links 
addition serving static dynamically generated html documents web server serve images referenced documents 
storage requirements associated images amount approximately kilobytes inventory item 
image file set may stored database standard file system 
order provide secure line payment authorization web server include support secure sockets layer ssl communications 
benchmark defines payment gateway emulator authorizes payment purchasing transaction buy confirm web interaction 
payment gateway emulator program external system test web server communicate prior completing buy confirm interaction 
similar database consistency requirements web server follow strict consistency requirements 
requirements affect amount allowable web page caching specifying update system reflected pages returned web server seconds update 
prior second limit effects update visible 
search results page web page exempt second limit 
search results minimally required reflect state system initial population 
relaxation introduced specification permit commercially available web searching indexing tools 

java implementation tpc tpc specification dictates set requirements implementation meet allows substantial freedom making various implementation decisions 
implemented tpc application logic java java servlet api 
little published concerning behavior architectural characteristics new workload 
section discuss characteristics implementation implications performance 
describe areas implementation specification 
implementation notable feature java bookstore application logic 
implemented web interactions java servlet java servlet api alternative traditional common gateway interface cgi web servers dynamic html generation server side application processing 
servlet interface provides standard portable programming environment writing server side applications 
servlet api provides java libraries receiving responding requests maintaining state user session 
portable nature java enabled servlets multiple platforms previous study able preliminary char workload architectures changes benchmark application 
study zeus web server apache java servlet engine 
database component workload ibm db relational database system 
database query update requests servlets java database connectivity jdbc api 
described section tpc specification organizes application data tables 
addition schema required specification implementation stores user shopping cart database shopping cart durable single point failure hours 
added tables database fulfill durability requirement 
advantage keeping state database removes state associated specific user session web server java servlet engine 
elimination state allows multiple independent web servers servlet engines handling requests 
necessary different requests user session may routed servers communicating db back 
servlet api provides library methods tracking sessions cookies url rewriting implementation relies solely url rewriting 
restricting url rewriting session tracking avoid complexity managing cookies remote browser emulator 
unfortunately means html documents dynamically generated order encode session identifier link 
eleven fourteen web interactions require dynamically generated html display database query results web interactions pay penalty doing url rewriting 
consequently believe choice url rewriting substantially affect performance implementation 
implementation tpc benchmark specification ways secure sockets layer connection required buy confirm interaction credit card authorization associated web interaction 
specification system test communicate credit card information external application payment authorization buy request web interaction secure sockets layer communicating credit card information 
neglecting implement feature web server buy confirm interaction required specification 
browsing shopping interaction mixes interaction accounts percent web interactions percent ordering mix 
relative believe loss functionality seriously affect behavior workload 

native execution results section results experiments performed executing workload natively processor ibm rs smp system running aix operating system 
find memory system stalls due cache load misses large fraction misses serviced cache cache transfers 
show importance exclusive state cache coherence protocols executing tpc commercial workloads 

workloads better understand behavior tpc compares current server benchmarks results specweb specjbb 
specweb web serving benchmark tests requirements modern web servers static dynamic requests keep alive persistent connections dynamic advertisement rotation cookies 
specweb results collected zeus web server tpc experiments 
spec java business benchmark specjbb designed test server side java performance 
benchmark written entirely java runs single instance java virtual machine 
emulates tier system similar tpc wholesale containing multiple warehouses services concurrent users 
system throughput scales number warehouses 
warehouses experiments jvm running specjbb tpc java servlet engine 

methodology ibm rs shared memory symmetric multiprocessor powerpc rs iii pulsar microprocessor 
pulsar issue order superscalar processor stage risc pipeline 
pulsar tolerates memory latency coarse grained multithreading switching alternate thread currently running thread encounters cache ready thread pipeline stalled resolves 
unfortunately multithreading feature pulsar disabled aix 
despite lack multithreading july system non clustered tpc performance leader 
simulation results evaluating coarse grained multithreading section 
considerable effort spent tuning workload system setup represents state art hardware software running commercial server hardware processors way mhz rs iii pulsar memory gb cache mb unified cache processor cache kb cache kb cache software ibm jdk aix apache ibm db zeus web server database size mb image set size mb table system parameters 
cpu utilization divided web server database servlet engine loads 
pertinent system parameters described table 
smallest allowed item table size items larger configuration scaling rules items emulated browsers 
rs iii processor includes rich set bit performance counters 
combination counters record unique events ranging memory system statistics cache misses coherence protocol transitions bus utilization microarchitectural issues coarse grained multithreading events branch penalties 
counters collected substantially data room complete set data extended version 
software controlling counters supports counting granularity process tree single set virtual counters shared parent process child processes 
process tree counting mode natively collected results 
counting enabled user system level instructions 
performing experiments remote browser emulators run workstations external system test browser think time set zero seconds order place heavy load server fewer client cpu resources 
similar strategy 
workload measurements performed runs consisting minute warm phase followed minute measurement phase 

cpu utilization component shows measured cpu utilization running tpc web interaction mixes breaking cpu utilization parts workload components 
see java servlet engine component dominates cpu usage accounting cpu utilization web interaction mixes 
database accounts majority remaining cpu time web server time account cpi cpu utilization browsing shopping ordering mem barrier stalls tlb stalls cache stalls cache stalls cache stalls infinite cache cpi 
cpi breakdown tpc runs broken groups bars group corresponds different component workload bars group correspond browsing shopping ordering mix runs 
ing cpu mixes 
see idle time update intensive ordering mix synchronization servlet implementation prevents conflicting updates database 

memory system characterization idle zeus db specjbb tpc tpc db tpc zeus specweb shows measured cpi workloads memory system stall time broken components 
absence cache misses processor runs cpi near cases 
memory system contribution cpi varies considerably workloads tpc zeus specweb affected memory system stalls specjbb java applications affected 
zeus tpc component touches static image file set db large memory footprint account increased memory system related stalls applications 
tpc servlet engine suffers relatively memory system stall cycles primary function formatting forwarding requests responses database emulated stall cycles instr store specjbb tpc tpc db load tpc zeus specweb 
breakdown cache stall cycles browsers touch volumes data managed database web server consequently resulting fewer memory system stalls 
cases level cache misses account majority memory related stall cycles 
breaks stalls category stalls caused instructions loads stores translations 
translation stalls occur powerpc hardware page fault handler loads page table entry groups cache traversing page table 
expect load misses dominate number cache stall cycles db shows considerable number store stalls 
database web server applications affected instruction misses servlet engine specjbb suffer instruction related stalls 

cache cache transfers previous studies commercial workloads demonstrated importance optimizing cache cache transfers due high percentage cache misses lines resident caches processors 
breakdown cache misses location serviced memory system 
server implements coherence protocol cache misses blocks processor cache serviced processor cache block owned exclusive modified state results measurements shown 
level cache misses broken misses serviced memory misses serviced caches containing copy line state 
data confirms previous web serving database portions workload shows substantial fraction serviced cache dirty state java server workloads 
general see cache misses serviced cache cache transfers specweb web serving component tpc workload 
cache misses specjbb tpc tpc db tpc zeus specweb 
breakdown cache line residency cache misses cache blocks entering entering transition entering transition 
exclusive state bars show percentage cache lines entering cache state percentages transitions state 
cache cache transfers dirty misses zeus db specjbb cache cache transfers dirty misses java servlet engine 

impact exclusive state store load store load store memory load memory specjbb tpc tpc db tpc zeus specweb characterizing commercial workloads argued exclusive state multiprocessor cache coherence protocols useful stores rarely find cache lines cache exclusive state state 
believe percentage stores hitting cache state indicator state usefulness 
due spatial locality stores may cache line store line find state 
single transition count processor centric view state processor filtered cache count reflect demands placed system wide interconnect 
better indicator state usefulness frequency cache lines enter cache state transition state 
shown see cache lines enter cache state 
furthermore cache lines eventually transition state 
transition state state saves single bus upgrade transaction find extra bus transaction required cache misses simple msi protocol 
reason believe adding state multiprocessor cache coherence protocols justified 

simulation results learned behavior system performance monitoring hardware restricted studying existing systems 
study performance implications new architectural techniques building hardware simulation necessary 
section study effects coarse grained multithreading system performance results collected performance counters 
multithreading affects aspects processor design access shared resources different threads may impact thread 
section contrast behavior different branch predictor designs presence multithreading 
section examine effects multithreading cache behavior sharing 
section measure performance impact coarse grained multithreading tpc workload 
experiments section include results specint rate benchmark addition tpc specjbb specweb 
specint rate consists concurrently executing spec integer benchmarks measure system throughput 

methodology augmented version simos ppc full system simulator powerpc port simulator originally developed stanford university 
simos ppc runs slightly modified version aix 
level interaction system code user code amount inter process communication workloads ability simulate user system level code essential 
simos ppc faithfully simulates system devices detail 
simos ppc uses setup native execution runs terms disks database setup applications 
software parameters workload carry native runs 
slow speed detailed processor memory system simulation constrains length time workload studied 
high speed simulation mode simos ppc warm workload 
exception specint rate second snapshot steady state behavior warm period timing statistics 
specint rate run completion reduced input sets 
processor model approximates behavior rs iii pulsar processors ibm rs systems 
collect results thread processor threads processor threads processor configurations pulsar implements threads processor 
shown section pulsar runs approximately cycles instruction absence cache misses model details pipeline charge cycle instruction executed accurate memory subsystem timing model accounts latencies contention memory hierarchy 
simulator models simplified version pulsar thread switch state machine 
possible states thread running ready stalled swapped 
threads transition states cache initiated completed thread switch logic decides switch alternate thread 
conditions switching alternate thread cache occurred primary thread thread ready state 
primary thread entered idle loop spinning lock non idle non spinning thread ready state 
alternate thread pending interrupt exception 
alternate ready non idle thread retired instruction cycles 
forward progress guaranteed preventing preemptive thread switch occurring running thread active cycles 
assume cycle thread switch penalty draining pipeline resuming instruction fetch new active thread matches pulsar switch penalty 
model aggressive way snooping bus shared memory multiprocessor 
snoop design modeled sun uses split transaction pipelined address bus support outstanding transactions order responses 
bus implements invalidation state owned shared invalid snooping cache coherence protocol transient states level caches implement protocol 
data network modeled sun xb bit wide point point data crossbar 
latencies memory system modeled detail contention levels memory hierarchy 
due differences parameters memory system difference processor counts results section comparable section 
memory system parameters match table 
workloads driver program bind driver program extra processor collect statistics 
example way smp tpc runs browser emulator run fifth processor statistics collected 

effect multithreading branch prediction simulate different gshare branch predictor configurations branch history tables bht ranging entries 
shows branch misprediction rates way multithreaded uniprocessor systems workloads 
note simulator ignores branches idle loops unconditional branches 
find threads processor share standard branch predictor shown shared bhr bht case histories branches destructively interfere negatively affecting predictor accuracy 
improve predictor performance multithreaded processors simulate new types branch predictors 
examine separate branch predictors thread size predictors scaled number threads 
case dual threaded processor branch predictors half size single threaded processor branch predictor 
likewise processor threads branch predictors mispredictions mispredictions bht entries bht entries fourth size single threaded processor branch predictor 
results show effective method reducing number mispredictions caused interference threads 
individual branch predictor smaller size single threaded processor branch predictor individual branch predictors perform worse large uniprocessor branch predictor 
disadvantage separate branch predictors thread strategy adapt workloads require branch predictors varying sizes 
example thread larger bht needs share entries bht second thread working set fit bht 
address problem simulate branch predictor separate branch history register bhr thread shares bht threads 
results show workloads specweb branch predictor performs better separate smaller branch predictors thread small branch predictors 
branch predictor performs significantly worse large private branch predictor uniprocessor run indicating substantial amount conflict threads tpc browsing mix tpc shopping mix tpc ordering mix bht entries specjbb specweb specint rate 
effects multithreading branch predictor performance dotted dashed solid lines represent way multithreading respectively 
results branch history register shared threads branch history table shared threads graphed square 
results private bhr shared bht graphed circle results private bhr bht triangle 
mispredictions mispredictions bht entries mispredictions mispredictions bht entries bht entries misses instrs misses instrs cache line size cache line size specjbb specweb specint rate 
cache misses workload broken cold true sharing false sharing capacity conflict misses bar corresponds separate run processors hardware threads processor 
note difference axis scale tpc results 
bht 
size branch predictor increases performance private bht private bhr shared bht private bhr predictor private bht large minimize conflicting updates bht different branches 

effects multithreading cache behavior measure cache performance simulate single level unified way set associative mb caches different line sizes 
simulations caches empty 
note memory instructions idle loops included usually hit cache artificially lower cache rates 
compute true false sharing caches dubois definition sharing 
results cache simulations shown 
multithreaded uniprocessor systems number capacity conflict misses increase number threads processor workloads specint rate 
surprising threads share cache leaving thread effectively smaller cache case single threaded processor 
specint rate mb cache easily contains memory footprint shared different threads 
cases number cold misses grows misses instrs cache line size misses instrs cache line size tpc browsing mix tpc shopping mix tpc ordering mix misses instrs cache line size misses instrs cache line size number threads artifact simulator starting caches 
number threads increases processor relative percentage second snapshot spent warming caches 
prefetching occurring threads gains offset increased amount time spent warming cache 
uniprocessor systems see number capacity conflict misses decrease number processors multiprocessor configurations 
processor cache aggregate cache size entire system larger 
workloads significant amount true sharing multiprocessor specint rate due effects operating system 
tpc exhibits relatively false sharing misses despite larger number misses instruction 
implementation tpc shared data servlets running java servlet engine sharing occurs database 
db mature application optimized reduce false sharing 
believe specjbb zeus mature applications optimized reduce false sharing relatively larger number false sharing misses 

multithreading performance collect cycles instruction cpi performance data detailed memory subsystem simula benchmark speedup speedup specjbb tpc browsing tpc shopping tpc ordering specweb specint rate table modeled cycles instruction cpi table shows modeled cpi benchmark way uniprocessor speedups relative case 
tor table 
measurements include instructions executed idle loop precisely measurement cycles useful instruction 
find coarse grained multithreading offers significant speedups commercial applications specint rate showing small speedups 
commercial workloads show considerable reductions cpi way multithreaded case tpc shopping mix reductions way multithreaded case 
law diminishing returns effect applications incur memory system stalls gain little multithreading 
speedups applications suffer large memory system penalties commercial workloads compelling evidence efficacy coarse grained multithreading 

show level cache misses caused data primary contributor memory system stall cycles java commercial workloads commercial 
find misses serviced cache cache transfers smp system coherence protocol 
show exclusive state eliminates extra bus upgrade transaction necessary level cache misses 
execution driven study coarse grained multithreaded processor commercial workloads 
believe coarse grained multithreading viable means increasing system throughput limited processor resources 
saw throughput improvements context uniprocessor single threaded uniprocessor running tpc 
show sharing branch prediction resources contexts detrimental performance branch predictor due negative interference threads 
addition multiple threads processor increases conflict misses contention memory system 
despite penalties ability tolerate memory system latency coarse grained multithreading attractive choice commercial workloads 

acknowledgments supported part ibm university partnership award nsf ccr ccr 
ibm donating equipment steve help pulsar performance counters 
acknowledge students uw madison ece course fall contributed tpc implementation milo martin pointing state methodology problems prior 
agarwal kubiatowicz kranz lim yeung 
evolutionary processor design large scale multiprocessors 
ieee micro pages june 
gharachorloo bugnion 
memory system characterization commercial workloads 
proceedings th annual international symposium computer architecture may 
fink arora 
java server benchmarks 
ibm systems journal 
cain dickson heil martin zilles lipasti 
characterizing java implementation tpc third workshop computer architecture evaluation commercial workloads january 

th generation bit powerpc compatible commercial processor design 
ibm whitepaper www rs ibm com 
cain lipasti 
architectural characterization java server workloads multithreaded processors 
technical report university wisconsin department computer sciences 
cao 
pey torrellas won 
detailed characterization quad pentium pro server running tpc 
proceedings third international symposium high performance computer architecture february 
phelps williams gilbert 
xb extending ultra enterprise family 
proceedings symposium high performance interconnects august 
dubois detection elimination misses multiprocessors 
proceedings th annual international symposium computer architecture may 
johnson rose 
analysis multithreading powerpc processors 
technical report ibm 
johnson lim 
evaluation multithreaded processors thread switch policies 
lecture notes computer science 
johnson liu 
evaluation multithreaded uniprocessors commercial application environments 
proceedings rd annual international symposium computer architecture may 
franklin alexander maynard 
commercial workload performance ibm power risc system processor 
ibm journal research development september 
ibm 
rs enterprise server model technology architecture 
ibm whitepaper available www rs ibm com 
keeton patterson raphael baker 
performance characterization quad pentium pro smp oltp workloads 
proceedings th annual international symposium computer architecture june 
keller maynard simpson 
si mos ppc full system simulator 
www cs utexas edu users cart simos 
armstrong vitale 
system optimization oltp workloads 
ieee micro may june 
kurihara agarwal 
latency tolerance multithreading large scale multiprocessors 
proceedings international symposium shared memory multiprocessing april 
lo eggers gharachorloo levy parekh 
analysis database workload performance simultaneous multithreaded processors 
proceedings th annual international symposium computer architecture june 
maynard donnelly 
contrasting characteristics cache performance technical multi user commercial workloads 
acm sig plan notices november 
mcfarling 
combining branch predictors 
technical report tn digital equipment june 
ranganathan gharachorloo adve 
performance database workloads shared memory systems order processors 
proceedings eigth international conference architectural support programming languages operating systems october 
rosenblum herrod witchel gupta 
complete computer simulation simos approach 
ieee parallel distributed technology 
singhal price yuan cheng agarwal harvey 
high performance bus large smps 
proceedings symposium high performance interconnects iv august 
uhlmann 
commercial multi threaded risc processor 
international solid state circuits conference 
systems performance evaluation cooperative 
spec benchmarks 
www spec org 
transaction processing performance council 
tpc benchmarks 
www tpc org 
