locating faulty code failure inducing chops gupta zhang rajiv gupta software debugging process locating correcting faulty code 
prior techniques locate faulty code program analysis techniques backward dynamic program slicing exclusively delta debugging analyze state changes program execution 
new approach integrates potential delta debugging algorithm benefit forward backward dynamic program slicing narrow search faulty code 
approach delta debugging algorithm identify minimal failure inducing input input compute forward dynamic slice intersect statements forward dynamic slice statements backward dynamic slice erroneous output compute failure inducing chop 
implemented technique conducted experiments faulty versions programs siemens suite evaluate technique 
experiments show failure inducing chops greatly reduce size search space compared dynamic slices significantly compromising capability locate faulty code 
applied technique programs known memory related bugs buffer overflow bugs 
failure inducing chop cases contained statements included code causing memory corruption 
categories subject descriptors programming languages processors debuggers software engineering testing debugging debugging aids testing tools tracing general terms algorithms measurement reliability verification keywords automated debugging forward dynamic program slicing backward dynamic program slicing failure inducing input supported ibm microsoft intel nsf ccr ccr ccr eia univ arizona 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
ase november long beach california usa 
copyright acm 
department computer science university arizona tucson arizona gupta cs arizona edu 
mark carnegie mellon university software engineering institute noted fundamental problem software quality programmers mistakes 
programming primarily human activity errors creep software spite advances areas programming languages software development processes 
locating correcting errors software difficult time consuming activity requires understanding software 
techniques tools help software developers narrowing search faulty code greatly reduce time resources spent locating correcting software errors 
delta debugging 
zeller introduced term delta debugging process determining causes program behavior looking differences deltas old new configurations programs 
zeller hildebrandt applied delta debugging approach simplify isolate failure inducing input 
simplify failing test case delta debugging algorithm finds minimal test case removing single input entity cause failure disappear 
isolating minimal failure inducing input difference failing passing test case generalized delta debugging algorithm 
zeller extended idea isolate failure inducing differences program states build chain terms relevant state differences 
show example may easy link cause effect chains terms values variables different execution points faulty source code 
programmer cause effect chains terms program states decide failure causing code failure causing circumstance 
cleve zeller focus cause transitions effort link failures program code 
focus analyzing program state transitions space time order narrow search faulty code 
dynamic slicing 
contrast techniques analyze program states occur program execution traditional program analysis techniques program slicing focus source code analysis programs :10.1.1.21.8980:10.1.1.146.5178
concept program slicing introduced mark weiser 
debugging usually performed analyzing statements program executed specific input korel laski proposed idea dynamic program slicing 
kinds dynamic slices backward dynamic slices forward dynamic slices 
backward dynamic slice variable point execution trace includes 
executed statements affect value variable point 
contrast forward dynamic slice variable point execution trace includes executed statements affected value variable point 
backward dynamic slicing proposed guide programmers process debugging focusing attention user subset program statements expected contain faulty code 
effectiveness backward dynamic slice fault location determined factors faulty statement slice 
big slice statements included slice 
previous evaluated compared effectiveness different backward dynamic slicing algorithms fault location 
erroneous statements static slices faulty outputs observed dynamic slices able contain faulty statement cases general dynamic slices quite small compared number executed statements 
fact results study reported show number executed statements range times number statements backward dynamic slice 
observed number statements backward dynamic slice large addition statements apparently related fault 
goal reduce number statements need examined locate faulty code 
integrating delta debugging dynamic slicing 
surprisingly prior research delta debugging integrates potential dynamic program slicing delta debugging approach narrowing search faulty code 
propose novel approach 
delta debugging find simplified failure inducing input isolate minimal failure inducing input difference 
simply refer relevant part input minimal failure initial inputs input input minimal failure inducing inputs input input incorrect outputs line bitter sweet input argv input bitter failure inducing chop input argv bitter input sweet failure inducing chop input argv sweet input failure inducing chop input argv example program 
inducing input 
compute intersection statements forward dynamic slice failure inducing input backward dynamic slice faulty output locate faulty code 
simply refer statements intersection forward backward dynamic slices chop 
failure inducing chops expected smaller backward dynamic slices capture statements dynamic slices affected minimal failure inducing input 
consider example program shown left column taken unravel tool set 
introduce error program modifying statement line red red 
inputs failed test case passed test case program shown right 
starting inputs failed passed runs delta debugging algorithm isolate minimal failure inducing input difference 
algorithm isolated argv minimal failure inducing input difference 
inputs failed test case correct test case corresponding isolated minimal failure inducing input difference 
outputs bitter sweet wrong value input 
forward slice argv backward slices bitter sweet resulting failure inducing chops shown right column 
see failure inducing chop faulty outputs contains faulty statement 
addition failure inducing chop case smaller respective backward forward slices 
note example failed run successful run contain error statement 
approach program set difference execution slices failed successful runs discussed able locate error statement case 
automated debugging service delta debugging technique obtain cause effect chains example program line error 
cause effect chains 

execution reaches line test dd main 
program invoked test dd local variable sweet 

execution reaches line test dd main 
local 

execution reaches line test dd main 
local 

execution ends 
program exits status code 
program fails 
cause effect chains easy statement line source code error 
values steps chain directly linked failure 
fact output correct failed successful runs 
point delta debugging provides novel technique select set test cases may highly relevant failure may easy link cause effect chains term values variables different execution points faulty source code 
approach attempts combine novelty delta debugging algorithm selecting relevant test cases benefits dynamic source code analysis automatically provide information programmer statements cause failure 
note cause effect chains may able capture failures resulting circumstances incorrect environmental settings failures resulting faulty source code 
goal able provide direct source code related help programmers cases failures programs result faulty source code 
implemented approach evaluated effectiveness locating faulty code programs :10.1.1.117.5955
results show promise combining dynamic slicing delta debugging locating faulty code 
contributions propose novel approach integrates delta debugging algorithm forward backward dynamic program slicing narrow search faulty statements failure inducing chop 
prior program slicing debugging proposed backward dynamic program slicing 
show delta debugging enables forward program slicing locating faulty code 
conducted experiments siemens suite programs provides faulty versions injected faults test pools program 
results show average faulty statement failure inducing chop cases different programs 
average size failure inducing chop size backward dynamic slice size program 
applied technique programs known memory related bugs 
cases technique able locate statements included faulty code 
rest organized follows 
section explain technique algorithms 
describe implementation section experimental results section 
related section section 
failure inducing chops basic idea approach shown 
represents successful execution takes set inputs carries series computations produces set outputs 
represents failing run faulty output observed resulting execution faulty statement 
shows case backward dynamic slice bs faulty output includes faulty statement 
delta debugging algorithm identify minimal failure inducing input min shown 
perform forward dynamic failure inducing chops 
slicing min reasonable expect faulty statement failure inducing chop fchop intersection bs fs 
shown expect fchop smaller bs fs 
outline algorithm algorithm 
discuss step algorithm 
algorithm fault location failure inducing chops 
step compute minimal failure inducing input simplify input min dd isolate input difference dd min step compute forward dynamic slice fs min step compute backward dynamic slice bs failed output step compute failure inducing chop fchop fs bs step finding minimal failure inducing input 
find input algorithms zeller hildebrandt 
algorithm simplifies failing test case produce minimal test case removing single input entity causes failure disappear 
min case 
second algorithm dd isolates minimal failure inducing input difference failing passing test case 
inputs failed run successful run respectively algorithm returns pair inputs correspond successful run failed run respectively single part removed failure disappear added failure occur 
case min step compute forward dynamic slice 
minimal input min computed step defines slicing criteria forward dynamic slicing 
step compute forward dynamic slice fs min 
illustrate computation forward dynamic slice example 
value red statement affected input argv data dependent argv 
statement forward slice argv 
argv directly contribute values computed statements decides execution statements affecting predicate outcome 
statements forward slice argv 
words input corresponding execution dynamic forward slice set statements affected particular input data control dependences 
statement statically control dependent multiple predicates runtime execution instance statement dynamically control dependent single predicate 
predicate execution statement control dependent follows 
statement execution intraprocedural control ancestor correspond function invocation 
second dynamic control dependence execution executed predicate statically control dependent 
timestamps associated execution instances statements order evaluate condition 
third inter procedural control dependence computed introducing extra dependence edges call sites corresponding function entries 
algorithm updating forward slicing information 
procedure update si stack si marked cd predicate cd stack ts cd maximum stack marked cd slice slice predicate stack marked stack ts timestamp definition def si marked forward computation algorithm forward slicing 
algorithm updates forward slices variables execution statement 
updating dynamic forward slice execution statement instance si algorithm 
variables algorithm follows marked denotes affected specified input indicates statement included slice slice denotes currently computed forward slice specified input timestamp denotes current time stack current stack frame 
store timestamps latest executions predicates stack ts information predicates affected specified input stack marked 
guarantees search predicate instance largest timestamp set cd predicates statically control dependent consider instances stack frame si 
algorithm lines set marked variable si 
lines set immediate control ancestor si marked 
set lines include forward slice 
lines update information stack predicate 
lines mark variable defined si 
initiate propagation marks need mark specified input variable 
step compute backward dynamic slice 
step backward dynamic slice bs failed output failed output computed failed run corresponding input generated step 
backward dynamic slice computed statement instance erroneous output generated 
faulty version generates segmentation fault backward slicing criterion pointer caused segment fault output 
backward dynamic slicing algorithm full slicing algorithm prior 
step compute failure inducing chop 
step compute statements intersection forward dynamic slice fs computed step backward dynamic slice bs computed step 
algorithm identifies set statements intersection called failure inducing chop fchop set statements contain faulty code 

implementation developed dynamic slicing tool conduct experiments 
tool executes gcc compiler generated binaries intel computes dynamic slices forward computation algorithms 
tool works binary level slices mapped back source code level debugging information generated 
slicing infrastructure 
fig 
shows main components tool 
static analysis component tool computes static control dependence cd required forward backward slice computations binary 
static analysis implemented retargetable link time binary rewriting framework framework capability constructing control flow graph binary 
dynamic profiling component system valgrind memory debugger profiler accepts gcc generated binary instruments calling slicing instrumenter executes instrumented code support slicing runtime 
slicing instrumenter slicing runtime developed enable collection dynamic information computation dynamic slices 
valgrind kernel dynamic instrumenter takes binary executing new instrumented basic blocks calls instrumentation function provided slicing instrumenter 
instrumentation function instruments provided basic block returns new basic block valgrind kernel 
kernel executes instrumented basic block original 
instrumented basic block copied new code space reused calling instrumenter 
instrumentation dynamic sense user enforce expiration instrumented basic block 
easily turn slicing instrumentation sake time performance certain code library code 
slicing runtime essentially consists set call back functions certain events entering functions accessing memory binary operations predicates 
intercept output system call write augment original output slices represented reduced ordered binary decision diagrams robdd 
details robdd slicing previous 
important features robdd represent unique set unique integer number number full set easily retrieved robdd 
words robdd able represent slice integer 
critical design variable memory location need store integer 
basic idea forward computation operation performed operands slices marks source operands fetched unioned ored current statement 
resulting slice assigned destination operand 
slice represented integer need store integer mark bit operand memory location register predicate 
implementation delta debugging carried separately mainly involves repeatedly manipulating program inputs executing program inputs 
input identified set execute program compute chop forward backward dynamic slices 

experimental evaluation evaluation siemens suite experimental study programs siemens suite 
program siemens suite provides test cases faulty versions manually injected faults 
table overview benchmark programs 
program description versions loc tests print tokens lexical analyzer print tokens lexical analyzer schedule priority scheduler schedule priority scheduler replace pattern replacement table shows siemens suite programs experimentation 
excluded programs tcas tot info tcas small tot info floating point operations currently supported slicing tool 
omitted statement static dynamic slice excluded faulty versions corresponding errors code omission experiments 
faulty version program experiments exactly fault injected 
faulty programs excluded produce output unclear proper slicing criterion defined 
instrument faulty programs minor ways order run experiments 
example replaced input functions fgetc output functions fprintf printf customized functions convenient slicing tool find forward backward slicing criterion 
failure inducing chops 
table lists programs faulty versions experiments 
input simplification algorithm experiments 
number failed table number size original simplified inputs 
program version number avg 
input size fts orig 
simplified print tokens print tokens schedule schedule replace test cases test pool faulty version program experiments shown column fts 
applied input simplification algorithm failed test cases number unique simplified inputs produced faulty version column 
number smaller cases different failing inputs produce simplified input 
average sizes inputs failed test cases average sizes simplified inputs columns orig 
simplified respectively 
input sizes terms entities appropriate program 
print tokens print tokens number tokens schedule schedule number commands replace number characters 
see simplified inputs smaller original inputs 
table shows results experiment 
columns labeled avg 
bs avg 
fs avg 
fchop show average sizes backward slices forward slices failure inducing chops respectively 
averages computed number unique simplified inputs version 
columns labeled bs fs fchop respectively show fraction total number faulty version backward dynamic slices forward dynamic slices failure inducing chops contain faulty statement 
fraction ranges 
cases fraction indicating faulty statements captured failure inducing chops 
table results fault location simplified inputs 
program version avg 
bs bs avg 
fs fs avg 
fchop fchop print tokens print tokens schedule schedule replace table average benchmark results fault location simplified inputs 
program avg 
bs bs avg 
fs fs avg 
fchop fchop fchop bs fchop print tokens print tokens schedule schedule replace table average time seconds simplifying inputs computing slices 
program failed test cases simplification time unique simplified inputs average slicing time print tokens print tokens schedule schedule replace table potential benefits failure inducing input differences 
program version avg 
bs bs avg fs fs avg 
fchop fchop print tokens print tokens schedule schedule replace table average benchmark potential benefits failure inducing input differences 
program avg 
bs bs avg 
fs fs avg 
fchop fchop fchop bs fchop print tokens print tokens schedule schedule replace table overview benchmark programs memory related bugs 
program fault description fault location isolation gzip byte long filename overflows global variable line strcpy file name gzip byte long filename overflows global variable line gzip file name byte long filename corrupts stack return address line compress file name byte long filename corrupts stack return address line file name tar wrong loop bounds lead heap object overflow line env 
variables bc misuse bounds variable corrupts heap objects line storage file contents tidy memory corruption problem line parser file contents version replace program presents interesting case 
faulty define statement version 
modified program replacing define statements corresponding assignment statements 
example erroneous define faulty version define replaced 
error define error assignment statement 
problem error faulty assignment statement depend program input 
forward slice input 
shows limitation forward slices locating faulty code 
faulty statement backward slice result intersection negative 
address problem little change fault location algorithm 
simply added statements backward dynamic slices depend input intersection 
average size fchop increased result positive 
average results program shown table 
table shows range average fraction bs average fraction fs 
range average fraction fchop 
table column labeled fchop bs shows average ratio size fchop bs column labeled fchop shows average ratio size fchop size program 
see range fchop bs significant reductions backward slices observed range fchop size program 
interesting observation sizes forward dynamic slices experiments comparable sizes backward dynamic slices forward dynamic slices effective containing faulty code backward dynamic slices 
compares performance cause transitions nearest neighbors approaches locate faulty code siemens suite 
results show nearest neighbors method locate faulty statement code test runs cause transitions method locate faulty statement code test runs 
considered faulty versions siemens suite containing faults omission experiments faulty versions failed runs corresponding total number faulty versions approach located faulty statement failed runs average size fchop size program 
time performance implementation algorithm shown table 
average time taken simplification input average time taken compute forward backward slices seconds 
seen table total time taken narrow search faulty code small subset program statements typically seconds 
experiments conducted intel pentium ghz cpu memory linux platform 
recall results obtained implementing algorithm dd algorithm 
simplified input obtained may general contain input values 
algorithm dd isolate failure inducing input differences applied simplified input smaller input difference smaller chop may result 
estimate potential isolating input differences reducing chop sizes conducted experiment 
experiment forward slices chops computed respect value simplified input 
example simplified input print tokens contained token forward slices tokens separately computed 
chops produced manner clearly smaller 
table shows average results chops 
give results replace changing fault location algorithm second applying modification mentioned previously 
average results program shown table 
table shows range average fraction fs recall fs previous experiment 
range average fraction fchop 
note programs average fallen comparison earlier fchop values 
table column labeled fchop bs shows average ratio size fchop bs column labeled fchop shows average ratio size fchop size program 
see range fchop bs opposed previous experiment range fchop size program 
reported memory related faults evaluation set program versions taken real faults reported 
programs listed table fault causes memory corruption eventually leads segmentation error 
observe crashes caused programs directly related length input particular value input 
corrupted memory location accessed program crashes 
find failure inducing input simplify input failed run 
faulty versions programs siemens suite programs produce output program crashes output produced 
distinguish failing run successful run follows 
consider input program crashes execution point input reduced removing input value 
program run breakpoint set just past point breakpoint reached program crashes input reduced process repeated 
note due nature bugs way input reduced cause crash remains 
hand breakpoint reached means latest change input resulted crash avoided 
case part input removed failure inducing input difference 
approach isolated failure inducing input difference memory related bugs 
executing program failing input able collect backward slice erroneous output forward slice failure inducing input difference 
failure inducing chop computed 
results experiments summarized table 
table exec number lines code executed program run bs fs number lines code belong backward forward slices respectively fchop number lines code chop 
results obtained encouraging 
statement execution corrupted memory failure inducing chops cases 
second observe programs number lines code fchop small chop essentially pinpoints appropriate statement 
fs effective fchop cases 
observe programs chops larger significantly smaller sizes exec bs fs 
time isolate failure inducing input programs range seconds seconds 
programs tidy time compute forward backward slices range seconds seconds 
tidy program took seconds compute forward backward slices due long length run 
results show technique computing chops integration delta debugging dynamic slicing effective identifying code causing memory corruption 
table fchop sizes 
program exec bs fs fchop gzip gzip tar bc tidy provide understanding failure inducing chop captures statement causing memory corruption consider case gzip known buffer overflow problem 
illustrates details problem 
left hand side show relevant code segment problem 
problem happens strcpy statement line 
variable global array defined line 
size array defined 
statement line check length 
length longer buffer overflows 
length string larger value env changed due buffer overflow 
memory layout shown difference bytes 
line free env executed program crashes due presence illegal memory address inenv 


gzip buffer overflow 
picked input file name repeated times program crashes length larger 
applying simplification process described section find successful input file name repeated times failed run input file name repeated times 
failure inducing input difference character input failed run 
slicing tool compute forward slice failure inducing input difference backward slice line failed run 
size forward slice lines code size backward slice lines code 
intersection forward slice includes statement line place buffer overflow occurred 
note overflow occurred statement executed inside strcpy part source code gzip 
slicing tool running binary code able perform slicing source code library code 

related series articles delta debugging algorithm developed automatically simplify isolate input produce cause effect chains link cause transitions faulty code 
works delta debugging algorithm analyze program state changes execution program 
program state analysis difficult expensive programs 
hand program source code analysis techniques explored backward dynamic slicing debugging :10.1.1.21.8980:10.1.1.146.5178
problem existed time cost computing dynamic slicing 
developed practical slicing algorithm average slicing times range seconds benchmarks specint 
shown number distinct statements executed program execution times number statements backward dynamic slice 
experimental study shows dynamic slicing effective locating faulty code 
backward dynamic slices typically contain small fraction executed statements number statements large 
motivated current 
prior research explored backward dynamic slicing debugging 
shown minimal failure inducing input computed delta debugging enable forward dynamic slices debugging 
experiments forward dynamic slices effective containing faulty code smaller backward dynamic slices 
shows delta debugging combined forward backward dynamic slices compute failure inducing chops smaller backward forward dynamic slice 
harrold compared spectra passing failing runs failing runs tend unusual coverage spectra 
jones ranked statement ratio failing tests correct tests information assist fault location 
describe sampling framework approach guess eliminate predicates isolate deterministic bug 
isolating nondeterministic bugs statistical regression techniques identify predicates highly correlated program failure 
contrast reiss focused difference failing run single passing run similar spectra means narrow search space faulty code 
xie show redundancies programs correspond hard program errors 
identified causes programming errors java programs observing violations program invariants 
developed technique notion path weakest preconditions automatically locate faulty code function precondition postcondition function available order predicate logic formulas 

propose novel way combine delta debugging algorithm forward backward dynamic slicing narrow search faulty code 
prior backward dynamic slicing considered useful program debugging time shows application forward slicing locating faulty code enabled delta debugging technique 
experiments show sizes chops induced combination forward backward slicing smaller forward backward slices significantly compromising fault detection effectiveness 

agrawal horgan dynamic program slicing acm sigplan conference programming language design implementation pldi pages 
agrawal demillo spafford debugging dynamic slicing backtracking software practice experience sp vol 
pages 
agrawal horgan london incremental regression testing ieee conference software maintenance icsm montreal canada 
agrawal horgan london wong fault localization execution slices dataflow tests sixth ieee international symposium software reliability engineering pages 
automated debugging service 
www st cs uni sb de szabo dynamic slicing method maintenance large programs th european conference software maintenance reengineering pages march 
cleve andreas zeller locating causes program failures th international conference software engineering icse pages 
better link time optimizer 
www efficient relevant slicing method debugging th european software engineering conference th acm sigsoft international symposium foundations software engineering esec fse toulouse france 
lam tracking software bugs automatic anomaly detection international conference software engineering icse 
harrold rothermel wu yi empirical investigation relationship spectra differences regression faults journal software testing verification reliability 
gupta automated debugging path weakest preconditions fundamental approaches software engineering fase etaps joint conference barcelona spain march 
www cse unl edu galileo sir hutchins foster ostrand experiments effectiveness dataflow controlflow test adequacy criteria th international conference software engineering icse pages 
information week issue software quality jan 
jones harrold stasko visualization test information assist fault localization international conf 
software engineering icse page 
korel laski dynamic program slicing information processing letters ipl vol 
pages 
korel application dynamic slicing program debugging rd international workshop automatic debugging linkoping 
aiken zheng jordan bug isolation remote program sampling sigplan conference programming language design implementation pldi san diego california june 
calder bugnet continuously recording program execution deterministic replay debugging nd international symposium computer architecture isca pages 
reiss fault localization nearest neighbor queries automated software engineering ase 
unravel project 
nist gov unravel valgrind 
valgrind org weiser program slicing ieee transactions software engineering tse vol 
se pages 
xie engler redundancies find errors acm international symposium foundations software engineering fse pages 
zeller isolating cause effect chains computer programs th acm sigsoft symposium foundations software engineering fse charleston south carolina 
zeller yesterday program worked 
today 
seventh european software engineering conference seventh acm sigsoft symposium foundations software engineering esec fse pages sept 
zeller hildebrandt simplifying isolating failure inducing input ieee transactions software engineering tse vol feb 
zhang gupta zhang precise dynamic slicing algorithms ieee acm international conference software engineering icse pages portland oregon may 
zhang gupta zhang effective forward computation dynamic slices reduced ordered binary decision diagrams ieee international conference software engineering icse pages 
zhang gupta gupta experimental evaluation dynamic slices fault location sixth international symposium automated analysis driven debugging monterey california september 
zhang gupta cost effective dynamic program slicing acm sigplan conference programming language design implementation pldi pages washington june 
zhou liu fei lu qin zhou midkiff torrellas automatically detecting memory related bugs program counter invariants th annual international symposium microarchitecture micro pages 
