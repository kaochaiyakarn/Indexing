bounds power savings runtime dynamic voltage scaling exact algorithm linear time heuristic approximation fen xie dept electrical engineering princeton university princeton nj princeton edu dynamic voltage frequency scaling dvfs shown efficient power energy reduction technique 
various runtime dvfs policies proposed utilize runtime dvfs opportunities 
hard know runtime dvfs opportunities fully exploited dvfs policy knowing upper bounds possible energy savings 
propose exact exponential algorithm determine upper bound energy savings 
algorithm takes consideration switching costs discrete voltage frequency voltage levels different program states 
show fast linear time heuristic provide close approximate bound 
categories subject descriptors computing methodologies simulation modelling model validation analysis general terms design algorithms keywords low power dynamic voltage scaling bounds energy savings linear time 
aggressive cmos technology scaling high power energy consumption limiting factor ability develop designs battery operated mobile systems server desktop systems due cooling packaging power costs 
cmos systems dynamic power dissipation varies linearly frequency quadratically supply voltage equation ower ddf switching activity factor cl load capacitance supply voltage clock frequency 
considering applications need continuously maintain peak performance dynamic voltage frequency scaling dvfs trades performance energy savings scaling voltage frequency peak performance required 
efficient energy reduction technique dvfs implemented contemporary microprocessors intel xscale transmeta crusoe 
various policies proposed dvfs techniques reduce energy consumption 
policies classified compile time policies runtime policies decisions switch voltage frequency 
runtime dvfs policies received research permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
islped august san diego california usa copyright acm 
margaret martonosi dept electrical engineering princeton university princeton nj mrm princeton edu sharad malik dept electrical engineering princeton university princeton nj sharad princeton edu attention ability reduce energy consumption response variations workload 
study theoretical bounds energy savings runtime dvfs important sense guiding development efficient runtime dvfs policy assessing particular policy 
interested providing upper bounds energy savings lower bounds energy consumption dvfs enabled processor particular workload 
models studied past provide upper bounds energy savings runtime dvfs 
unfortunately models unrealistic assumptions limit value 
example assume cost switching voltage frequency require continuous voltage scaling assume linear scaling cpu speed ignoring non scalable factors chip memory accesses 
primary contributions propose realistic model study upper bounds energy savings runtime dvfs 
model includes realistic dvfs enabled processor discrete voltage levels switching overheads due voltage frequency scaling 
model considers non scalable program behavior including chip memory accesses service 
propose optimal algorithm provide exact upper bound works efficiently problems thousands computation segments independently scaled referred scaling units 
provide linear time heuristic algorithm closely approximate upper bound model large problems 
example method generate bounded near optimal value instruction problem minutes 
rest organized follows section describes model including model assumptions notation 
section introduces exact algorithm discusses complexity algorithm 
section presents linear time heuristic algorithm compares results exact algorithm 
section compares energy bounds predicted optimistic analytical model energy bounds runtime dvfs energy results optimal compile time dvfs policy 
section summarizes contributions 

problem statement define scaling points series events timer interrupts cache misses voltage frequency scaling occur 
consider run program data input 
trace instructions sliced scaling points units labelled scaling points 
units referred scaling units scheduled specific level 
consider sequence scaling units running dvfs enabled microprocessor discrete voltage frequency levels 
goal unit table simple example scaling units scaling levels 
indicate execution time energy scaling unit 
find set assignments 
xm energy consumption set assignments minimized meeting performance requirements expressed form deadline 
scaling units arbitrarily fine method determines upper bound energy savings possible dvfs policy applied program trace 
shown problem np hard combinatorial optimization problem instance multiple dimensional knapsack problem solved searching feasible solutions solution space 
exact upper bounds possible energy savings optimal assignment introduce linear time heuristic algorithm approximate exact upper bounds 
introduce assumptions notation 
assumptions notations system assumptions voltage frequency scaling levels vn fn vn fn denotes highest voltage frequency level 
energy time overheads voltage frequency scaling vi fi vj fj denoted se st equations taken calculate overheads se st vi vj imax capacitance voltage regulator energy efficiency power regulator imax maximum allowed current 
model leakage energy cpu consumes portion power idle due chip accesses 
notation tij eij denote execution time energy consumption th scaling unit ui running th level 
refers total execution time scaling units running highest frequency vn fn xi level assigned th scaling unit 
tuple xi represent set assignments scaling units define set xi sets assignments scaling units 
tuples referred partial solutions xi refers execution time partial solution scaling unit includes time overheads switching occurs xj xj 
similarly xi refers total energy consumption partial solution scaling unit including energy overheads 
tuples length xm represent complete scheduling solutions 
feasible solutions refer subset solutions satisfy deadline requirements 

optimal algorithm standard way solve optimal dvfs problem search solution space optimal solution confirmed 
considering succession scaling units breadth search generates partial solutions input sequence 
algorithm enumerates possible levels scaling unit generates partial solution set considering scaling unit 
enumerates possible levels second scaling unit generates partial solutions considering second scaling unit 
process repeats complete solutions generated xm considering scaling unit 
visualize process building state space tree shown 
node tree represents problem state path root node level node represents solution state defines partial solution xi 
starting root node algorithm branches possible levels scaling unit generates level nodes represents partial solution 
node level branches possible levels second scaling unit generates level nodes representing partial solutions 
continues branching higher level nodes reaching level nodes 
naive algorithm result nodes level general case choices level 
due deadline optimality requirements branching unpromising nodes generate infeasible solutions nonoptimal solutions avoided 
circumstances referred pruning conditions branching certain node discontinued 
suppose partial solution defined node xi 
define xi xi execution time energy consumption node 
shortest remaining time srt node defined execution time running remaining scaling units highest frequency xi xm 
node satisfies conditions branching node discontinued 
sum execution time shortest remaining time node greater deadline xi xi xm deadline inequality means partial solution meet deadline running remaining scaling units highest frequency 
solutions generated node infeasible solutions 
nodes satisfying condition called infeasible nodes generate infeasible solutions 

exists level node bi bi xi bi xi bi xi case node uses energy time node node generate better solution additional switching levels 
goal find feasible solution lowest energy consumption node confirmed generate non optimal solutions branching node stopped reduce unnecessary node generation 
existence node declares node generate optimal solution best feasible solution generated node consume energy consumption best feasible solution generated node node referred dominating node 
nodes satisfying condition referred dead nodes 
function prune check status nodes 
prune xi returns true node dead node need branch node 
node live branching possible 
look simple example 
suppose scaling units running processor voltage frequency levels shown table 
assume initial level deadline 
assume switching time overhead energy overhead 
generated state space tree shown level state space tree constructed scaling unit example 

start root node branch scaling unit 
levels 
root node generates level nodes node node 
nodes live nodes 
pick node branch generate node node 
pick node branch generate level nodes node node 
nodes live nodes continue branching generate nodes 
node satisfies pruning condition deadline execution time node plus srt exceeding deadline 
node dead node 
reason node node dead nodes 
node dead node consumes energy node having execution time assignment 
branch node node live nodes generate node node solid lined nodes node node represent feasible solutions dot lined nodes node node node infeasible solutions 
node represents optimal solution minimum energy consumption 
pseudo code optimal algorithm procedure branch prune algorithm 
practical complexity section discuss practical complexity optimal algorithm 
discuss impact deadlines complexity 
show optimal algorithm needs exponential runtime respect number scaling units 
consider dvfs enabled processor voltage frequency levels similar voltage frequency pairings available intel xscale processors mhz mhz mhz mhz ghz 
imax equation calculate switching overheads generates switching time switching energy transition mhz mhz 
note settings parameters changed easily 
consider size scaling unit instructions 
benchmarks mediabench generate energy time profiles simplescalar wattch 
number scaling units benchmark listed table includes execution time energy consumption levels benchmark 
deadlines benchmark picked tight loose shown 
deadline sits middle execution time ghz execution time mhz 
deadline sits middle execution times mhz mhz 
deadline sits middle execution times mhz mhz 
deadline deadline sit evenly execution times mhz mhz 
examine impact different deadlines algorithm complexity 
shows number nodes generated level different deadlines benchmark gsm 
figures benchmarks similar shape 
deadline deadline deadline deadline deadline deadline ghz mhz mhz mhz mhz positions deadlines respect execution times single frequency 
number nodes deadline deadline deadline deadline deadline deadline tight loose level state space tree number nodes generated level benchmark gsm scaling units exact algorithm deadlines tight loose 
note number nodes generally increases level increases decreases approaching 
nodes satisfy deadline pruning condition 
nodes compete optimality second pruning condition responsible removing non optimal nodes 
level grows execution time nodes approach deadlines 
nodes killed deadline pruning condition 
notice middle deadlines generate nodes tight deadlines deadline deadline loose deadlines deadline 
reflects fact solution space shrinks deadline approaches upper bounds lower bounds execution time 
reasons reduced number nodes different 
tight deadlines significant number nodes taken pruning condition infeasibility 
loose deadlines nodes killed confirmed non optimality second pruning condition 
examine relationship number total nodes generated state space tree number scaling units 
table shows total number nodes benchmarks deadlines 
adpcm benchmark scaling units requires nodes deadline 
epic benchmark scaling units required nodes increase times larger 
mpeg benchmark scaling units number rises times larger adpcm 
results demonstrate number nodes grows exponentially number scaling units gets larger 
table shows runtime exact algorithm 
algorithm works efficiently small scaling unit sets 
epic gsm take seconds mpeg takes minute 
runtime increases quickly number scaling units increases 
fact takes hours find optimal solution number scaling units rises thousands 
exact algorithm impractical analyzing large problems tens thousands scaling units 
motivates linear time heuristic algorithm approximate bounds provided optimal algorithm 

linear time heuristic algorithm pruning function optimal algorithm job removing unpromising nodes significantly shrinking search paths 
vast majority solutions partial solutions enumerated optimality confirmed energy consumption uj mhz mhz mhz mhz mhz scaling units adpcm epic gsm mpeg table basic information benchmarks 
number nodes runtime adpcm epic gsm mpeg adpcm epic gsm mpeg deadline deadline deadline deadline deadline deadline table number nodes runtimes benchmarks deadlines execution time energy delay relationship nodes level 
worst case optimal algorithm 
looking mechanism shrink search scope solution space removing unpromising nodes 
shows energy consumption execution time nodes level benchmark mpeg state space tree assignment dot represents node 
notice trend dots monotonically decreasing 
due second pruning condition 
second notice scattering randomly nodes clustered 
due discrete voltage frequency levels 
clustered nodes close energy consumption execution time shown embedded window 
best solutions generated clustered nodes close energy consumptions 
leads optimal solution solutions generated nodes produce near optimal results 
choose remove remove optimal node get near optimal solution 
nodes leads optimal solution harm keep remove 
way reduce number nodes greatly 
create bins dividing energy axis axis evenly nbins number ranges 
suppose energy consumption leftmost node emax rightmost node emin 
energy difference nodes bin emax emin nbins 
keep node bin remove 
number nodes level controlled nbins 
need decide node keep 
considering hardware complications voltage frequency scaling pipeline flushing fewer switches usually preferred 
pick node lowest switching count 
multiple nodes lowest switching count choose lowest energy delay product energy delay metric favor solutions low frequency high frequency 
shown algorithm heuristic algorithm built exact algorithm 
generating nodes branch prune procedure proceeding level heuristic traverses nodes keeps node bin 
screening procedure described procedure select selects node lowest energy delay product nodes lowest switching count removes nodes bin 
algorithm complexity suppose major costs statements shown algorithm 
nbins nodes level 
procedure branch prune loop needs nbins steps worst case 
second loop needs nbins steps total 
total cost procedure branch prune nbins 
procedure select needs nbins nbins 
total cost building nodes level nbins worst case 

scaling units total total runtime cost bounded nbins linear nbins fixed 
shows number generated nodes benchmarks different deadlines bins 
node number normalized number nodes generated exact algorithm 
small programs adpcm benchmark node reduction effective 
number scaling units increases mpeg benchmark number nodes reduced significantly 
discussion section compare energy results heuristic algorithm results exact algorithm described section 
energy results generated exact algorithm heuristic shown 
energy consumption normalized energy consumption exact algorithm 
shown heuristic generates higher minimum energy 
energy difference small especially number bins big 
bins nodes depth results heuristic algorithm close optimal results adpcm epic gsm mpeg 
energy difference benchmarks 
surprising heuristic algorithm produces nearoptimal results 
shown exist near algorithm heuristic algorithm procedure branch prune set xi xi set worse case cost iteration srt srt xi xi xi xi xi alse pruning condition insert xi set xi energy xi set xi worse case cost iteration xi rue pruning condition remove xi set xi procedure procedure select set nbins distribute nodes xi set nbins bins cost length set nbins worst case cost iteration tran nodes lowest transition counts bin min node lowest energy delay product tran remove nodes min node node bin procedure normalized node counts exact algorithm deadline deadline deadline deadline deadline deadline adpcm epic gsm mpeg number total nodes generated heuristic mediabench benchmarks bins 
numbers normalized nodes generated exact algorithm 
optimal solutions 
scaling units similar terms scalability execution time energy respect frequency 
suppose step node leading optimal solution removed node smaller product kept 
define error energy difference node leading optimal solution chosen node error introduced 
error cumulative growth levels 
example execution time chosen node optimal node energy consumption chosen node higher optimal node short period slack introduced 
period slack reclaimed slowing scaling units reduces energy difference error 
large programs error adjustment occurs 
worst case chosen node leads infeasible solutions exceeds deadline 
case solution generated node neighboring bin higher energy shorter execution time chosen 
error bounded energy difference bins 
normalized energy exact algorithm deadline deadline deadline deadline deadline deadline adpcm epic gsm mpeg energy consumption heuristic bins mediabench benchmarks 
energy normalized energy exponentially complex exact algorithm 
show runtime mediabench benchmarks heuristic algorithm bins table 
heuristic algorithm takes significantly time exact algorithm 
benchmark mpeg runtime seconds hours exponentially complex exact algorithm 
speedup energy difference heuristic exact algorithm 
runtime differences different deadlines dramatic exact case 

comparison bounds section compare lower bounds energy consumptions optimistic analytical model considers ideal case may switched cost instruction possible minimum energy consumption runtime dvfs exact algorithm actual energy consumption optimal compiletime dvfs policy 
different deadlines tight deadline loose deadline 
energy results shown 
energy normalized energy best single frequency lowest frequency meet deadline 
deadline adpcm epic gsm mpeg table runtime mediabench benchmarks heuristic bins 
normalized energy adpcm deadlines gsm deadlines epic deadlines mpeg analytical runtime compile time deadlines minimum energy consumption predicted ideal analytical model lower bounds energy consumption runtime dvfs actual energy consumption achieved compile time dvfs policy deadlines 
energy consumption normalized best single frequency 
expected analytical model predicts energy savings runtime dvfs compile time dvfs possibly achieve 
analytical model assumes switching costs 
note dvfs method comes quite close optimistic analytical model indicating usefulness model despite simplicity 
possible minimum energy runtime dvfs provided exact algorithm lower actual energy optimal compile time policy 
adpcm energy saving compile time dvfs savings runtime dvfs 
certain deadlines epic gsm mpeg show runtime dvfs possibly achieve energy savings compile time dvfs 
motivates need runtime dvfs cases complete program knowledge 
reason runtime dvfs assign different levels piece static code different runs compile time dvfs usually confined static code structure piece static code assigned run frequency different runs 

demonstrated ability algorithm provide exact upper bounds energy savings small medium problems dvfs enabled processor 
proposed linear time heuristic approximate upper bounds large problem exact bounds computationally expensive get 
model widely analyze energy savings runtime dvfs 
believe model powerful tool guide development runtime dvfs policies 
successfully investigated impact scaling granularity program behavior variation memory system energy savings runtime dvfs model 
development model leads current developing fast runtime dvfs policy achieve energy savings corresponding upper bounds 

brooks tiwari martonosi 
wattch framework architectural level power analysis optimizations 
proceedings th international symposium computer architecture june 
brodersen 
design issues dynamic voltage scaling 
proceedings international symposium low power electronics design islped june 
burger austin bennett 
evaluating microprocessors simplescalar tool set 
tech 
report tr univ wisconsin madison computer sciences dept july 
choi soma pedram 
fine grained dynamic voltage frequency scaling precise energy performance tradeoff ratio chip access chip computation times 
pages jan 
clark 
circuit design xscale tm microprocessors 
symposium vlsi circuits short course physical design low power high performance microprocessor circuits 
intel intel xscale tm core developer manual 
developer intel com design 

voltage scheduling problem dynamically variable voltage processors 
international symposium low power electronics design islped pages august 
gupta 
energy aware task scheduling task synchronization embedded real time systems 
proceedings international conference compilers architecture synthesis embedded systems pages 
lee potkonjak mangione smith 
mediabench tool evaluating synthesizing multimedia communication systems 
proceedings th international symp 
microarchitecture dec 
lorch smith 
improving dynamic voltage algorithms pace 
proceedings international conference measurement modeling computer systems sigmetrics june 
shin 
real time dynamic voltage scaling low power embedded operating systems 
proceedings th acm symp 
operating systems principles 
qu 
limit energy saving dynamic voltage scaling 
proceedings international conference computer aided design 
sinha chandrakasan 
dynamic voltage scheduling filtering workload traces 
proceedings th international conference vlsi design jan 
transmeta 
crusoe processor documentation 
www transmeta com 
weiser welch demers shenker 
scheduling reduced cpu energy 
st operating systems design implementation osdi pages 

process cruise control event driven clock scaling dynamic power management 
cases proceedings international conference compilers architecture synthesis embedded systems pages 
xie martonosi malik 
compile time dynamic voltage scaling settings opportunities limits 
proceedings acm sigplan conference programming languages design implementation pldi june 
yao demers shenker 
scheduling model reduced cpu energy 
proceedings th annual symposium foundations computer science focs page 
ieee computer society 
