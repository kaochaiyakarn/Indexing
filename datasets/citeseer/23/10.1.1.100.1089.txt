natural language toolkit steven bird department computer science software engineering university melbourne victoria australia linguistic data consortium university pennsylvania philadelphia pa usa natural language toolkit suite program modules data sets tutorials supporting research teaching computational linguistics natural language processing 
written python distributed gpl open source license 
past year toolkit rewritten simplifying linguistic data structures advantage enhancements python language 
reports simplified toolkit explains teaching nlp 
natural language toolkit suite python modules providing nlp data types processing tasks corpus samples readers animated algorithms tutorials problem sets bird 
data types include tokens tags chunks trees feature structures 
interface definitions implementations provided stemmers taggers regexp ngram brill parsers recursive descent shift reduce chart probabilistic classifiers 
corpus samples readers include brown corpus conll chunking corpus cmu pronunciation dictionary nist corpus pp attachment corpus penn treebank sil shoebox corpus format 
ideally suited students learning nlp conducting research nlp closely related areas 
successfully teaching tool individual study tool platform prototyping building research systems liddy mccracken tre 
chose python shallow learning curve transparent syntax string handling 
python permits exploration interactive interpreter 
object oriented language python permits data code encapsulated re easily 
python comes extensive library including tools graphical programming numerical processing beasley 
past years toolkit grew rapidly data structures significantly complex 
new processing task added new requirements input output representations 
clear generalize tasks applied independently 
simple example consider independent tasks tagging stemming operate sequences tokens 
stemming done lose information required tagging 
tagging done stemming able skip tags 
done independently need able align results 
task combinations multiply managing data extremely difficult 
address problem introduced blackboard architecture tokens unifying data types permitting distinct tasks run independently 
unfortunately architecture came significant overhead programmers forced awkward code structures hearst 
clear re engineering done unduly complicated programmer task 
presents brief overview tutorial new simplified toolkit describes teaching 
simple processing tasks tokenization stemming line program imports tokenize package defines text string string whitespace create list tokens 
nb 
python interactive prompt continuation prompt 
text test list tokenize whitespace text test provided 
stem output tokenization porter stemmer follows text stemming exciting tokens tokenize whitespace text porter stem porter token tokens print porter stem token stem corpora included come corpus readers understand file structure corpus load data python data structures 
example code reads part brown corpus 
prints list tuples tuple consists word tag 
sent brown tagged print sent fulton np tl county nn tl grand jj tl jury nn tl said vbd 
provides support conditional frequency distributions making easy count items interest specified contexts 
information may useful studies stylistics text categorization 
tagging simplest possible tagger assigns tag token tagger tag default nn list tagger tag tokens john nn saw nn nn polar nn bears nn nn tag tokens correctly 
reasonable tagger default advanced tagger fails determine token tag 
regular expression tagger assigns tag token series string patterns 
instance tagger cardinal numbers nns words letter patterns 
cd 
nns 
nn simple tagger tag regexp patterns list simple tagger tag tokens john nn saw nn cd polar nn bears nns nn tag unigram class implements simple statistical tagging algorithm token assigns tag token 
example assign occurrence word frequent frequent adjective frequent word verb frequent cafe 
unigram tagger trained corpus shown section brown corpus 
unigram tagger tag unigram unigram tagger train brown unigram tagger trained tag new text 
note assigns default tag token encountered training 
text john saw books table tokens list tokenize whitespace text list unigram tagger tag tokens john np saw vbd books table instruct unigram tagger back default simple tagger assign tag 
words guaranteed tagged unigram tagger tag unigram backoff simple tagger unigram tagger train train sents list unigram tagger tag tokens john np saw vbd books nns table nn go define train bigram tagger shown bigram tagger tag bigram backoff unigram tagger bigram tagger train brown tagged easily evaluate tagger gold standard tagged text tag accuracy function 
includes brill tagger contributed christopher hmm tagger contributed trevor cohn 
chunking parsing chunking technique shallow syntactic analysis tagged text 
chunk data loaded files common bracket iob notations 
define regular expression chunk parser chunking tagged text 
supports simple cascading chunk parsers 
corpus readers chunked data penn treebank conll provided comprehensive support evaluation error analysis 
provides parsers context free phrase structure grammars 
grammars defined series productions follows grammar cfg parse grammar 
np vp 
vp np np pp 
saw ate 
np john det det pp 
det 
dog cat ball 
pp np 
tokenize parse sentence recursive descent parser 
note avoided left recursive productions grammar parser get infinite loop 
text john saw cat ball sent list tokenize whitespace text rd parse grammar apply sentence iterate parses generates 
observe parses possible due prepositional phrase attachment ambiguity 
rd get parse list sent print np john vp saw np det cat pp np det ball np john vp saw np det cat pp np det ball sentence parsed grammar left recursive productions long chart parser 
invoke chart parser bottom rule invocation strategy chart grammar chart bu strategy 
tracing turned order display step process 
supports probabilistic context free grammars provides viterbi style pcfg parser suite bottom probabilistic chart parsers 
teaching natural language processing taught confines single semester course advanced undergraduate level postgraduate level 
unfortunately turns difficult cover theoretical practical sides subject short span time 
courses focus theory exclusion practical exercises students challenge excitement writing programs automatically process natural language 
courses simply designed teach programming linguists manage cover significant nlp content 
developed address problem making feasible cover substantial amount theory practice single semester course 
significant fraction nlp course fundamental data structures algorithms 
usually taught help formal notations complex diagrams 
large trees charts copied board edited tedious slow motion laboriously prepared presentation slides 
effective method live demonstrations diagrams generated updated automatically 
provides interactive graphical user interfaces making possible view program state study program execution step step see 
components demonstration mode perform interesting task requiring special input user 
possible minor modifications programs response questions 
way students learn mechanics nlp quickly gain deeper insights data structures algorithms acquire new problem solving skills 
demonstrations distributed toolkit students experiment algorithms seen class 
parser demonstrations shift reduce recursive descent parsers create student assignments varying difficulty scope 
simplest assignments students experiment existing modules 
students familiar toolkit asked minor changes extensions existing module build left corner parser modifying recursive descent parser 
bigger challenge develop new modules integrate existing modules perform sophisticated nlp task 
provides useful starting point existing components extensive tutorials api documentation 
unique framework teaching natural language processing 
provides comprehensive support course nlp tightly couples theory practice 
extensive documentation maximizes potential independent learning 
information including documentation download pointers links dozens courses adopted please see sourceforge net am grateful edward developer dozens people contributed code provided helpful feedback 
marti hearst 

teaching applied natural language processing 
proc nd acl workshop effective tools methodologies teaching nlp cl pages acl elizabeth liddy nancy mccracken 

nlp interdisciplinary audience 
proc nd acl workshop effective tools methodologies teaching nlp cl pages acl edward steven bird 

natural language toolkit 
proc acl workshop effective tools methodologies teaching natural language processing computational linguistics pages 
acl 
david beasley 

python essential rd edition 
sams 
rune tre 

semantic annotation biomedical literature google 
data mining bioinformatics workshop volume lecture notes computer science 
springer 
