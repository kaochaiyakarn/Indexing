integrated aspect oriented modeling approach software architecture design ivan alessandro garcia christina chavez computer science department university twente netherlands computing department lancaster university uk computing department federal university brazil computer science department catholic university rio de janeiro puc rio brazil cs utwente nl comp lancs ac uk flach dcc br les inf puc rio br increasing agreement aspects issue programming level tend arise requirements analysis software architecture design 
unfortunately conventional software modeling approaches lack abstractions support modular representation crosscutting concerns development stages 
researchers proposed modeling techniques primarily aim modeling aspects early development phases 
approaches focus specific issues modeling aspects benefits drawbacks 
focuses modular representation aspects software architecture design provides attempt integrate best practices existing aspect oriented ao architectural approaches single general purpose modeling language 
integration systematic comparison modeling techniques 
aspect oriented architecture modeling approach unified modeling language uml illustrative example concurrent versioning systems 
keywords aspect oriented software architecture visual modeling uml 

software architecture computing system high level design representation structure system comprises software components externally visible properties components captured interfaces intercomponent relationships :10.1.1.106.9588
generally accepted software architecture design support required software system qualities 
ensuring quality factors common assumption identifying fundamental concerns architecture design necessary 
number specification approaches introduced derive fundamental architectural abstractions 
approaches vary deriving architectural abstractions share common idea abstractions represent relevant concerns system 
concerns architectural design level easily localized specified individual architectural units traditional interfaces components 
similar notion aspect programming level say concerns crosscutting architectural unit denote called architectural aspects 
crosscutting concern architecture design level concern captured conventional architectural units 
architectural aspects adopted define common behavior structure architectural elements 
example crosscutting architectural concern ensure recovery architectural unit 
example platform concern architectural units 
concerns easily mapped single unit conventional architectural modeling 
crosscutting property architectural concerns remains implicit described informal ways leading reduced uniformity impeding traceability hindering detailed design implementation decisions 
unfortunately conventional architecture modeling approaches appropriately support modular representation architectural aspects 
researchers proposed uml modeling approaches primarily aim providing proper abstractions corresponding visual notations modularly capture architectural crosscutting concerns 
approaches focus specific issues modeling aspects benefits drawbacks 
provides attempt integrate best practices aspect oriented software architecture design approaches single general purpose modeling language 
integrated modeling approach carried context aosd europe project 
having defined survey aspect oriented architecture design approaches selected key aspect oriented architecture design approaches compared analyzed respect ability model required aspect oriented concepts 
presents main important results 
aspectoriented architecture modeling approach illustrative example concurrent versioning systems 
structured follows 
section presents concepts addressed ao modeling approach desired traits approach 
section describes aspect oriented architecture modeling approaches considered objects integration effort 
section presents integrated uml approach aspect oriented architecture modeling 
section adopts integrated modeling technique represent architectural aspects concurrent versioning system cvs 
section contains general discussion assessment unified modeling approach case study 
section presents final remarks 

modeling aspect oriented software architectures section key aspect oriented concepts think need captured architecture design stage 
ll formulate requirements general purpose ao modeling notation 
ao modeling concepts defined comparison framework depicts core set concepts point view supported aspect oriented architecture description 
concepts derived joint analysis aosd glossary conceptual frameworks defined 
aggregated filtered terms sources marking vital issues architectural stage 
order identify relevant architectural concepts aggregation filtering processes terminology software architecture descriptions 
result comparison framework composed aosd concepts 

aspect 

component 

point cut 

advice 

static dynamic crosscutting 

aspect component relation 

aspect aspect relation 
concept component considered important conventional non aspect oriented construction element typically container crosscutting concerns architectural level 
importance component concept confirmed plays key role aspect oriented middleware architecture 
aspect point cut advice included considered primary abstractions capture crosscutting concerns 
note considering shall concentrate crosscutting leaving weaving issue focus 
categories relations aspect component aspect aspect important represent architectural building blocks collaborating realize system requirements 
desired properties aspect oriented modeling notation need general purpose visual notation aspectoriented architecture modeling 
integration guidelines proposed unified approach comprised requirements 
visual modeling language general purpose uml 

complete means having supporting abstraction commonly accepted aosd concepts 
different concepts implicitly explicitly designated different existing new class uml elements 

implementation language independent lowest level detail involved 
way resulting aspect oriented architectural models easily mapped elements distinct aspect oriented programming languages frameworks detailed design notations 

integrated uml notation promote simplicity avoid unnecessary extensions 

comparing ao modeling approaches section shall selected source approaches 
section provides comparative analysis 
analyzed approaches comprehensive survey chosen source architecture modeling approaches focuses architecture design stage provides aspect oriented visual notation optionally meta model 
selected techniques 
pcs framework 





cam adl 
pcs framework cam provide visual notations representing architectures 
general visual notations extend uml represent aspect oriented concepts architecture design level 
pcs framework notation intensively utilizes aspectj syntax design details specification 
approach extends notation handle architectural aspects 
moment writing visual meta model completely expressed corresponding notation 
existing notation elements just high level components connectors shall anyway benefit consideration meta model concepts 
cam notation visualization xml adl architecture description language 
comparative analysis table summarizes modeling commonly accepted aosd concepts pcs framework cam 
presents comparison investigated approaches classification framework section 
goal extensively describe concept existing approaches details reader refer original papers 
due space limitations show notation elements table appear component row uml component relation row uml connector 
concise notation albeit lacking direct visual support architecturally relevant aosd concepts aspect point cut static dynamic crosscutting aspect aspect relations 
observe approaches different abstractions associated graphical elements support modeling aosd concepts 
clear agreement uml modules components classes capture component concept 
section discusses differences chosen techniques identifies abstractions integrated approach integration guidelines section 
table 
source approaches support aosd concepts pcs framework cam adl aspect association uml component diamond uml class aspect decoration 
stereotype component uml component point cut connection point join point attachment 
aspectj syntax detailed specification advice section element 
aspectj syntax detailed specification static dynamic crosscutting relation relation section element 
aspectj syntax detailed specification 
association classifier roles inheritance precedence relation 
aspect uml component interfaces 
component normal interface crosscuts relation bindings 
binding relates placeholder aspect crosscutting interface component element refinements redefinitions compartments crosscutting interface list operations combined override base operations additions compartment crosscutting interface crosscutting relationship relates aspects base components 
may include list bindings 
crosscutting relationship inheritance aspects 
kinds dependency precedes requires xor 
uml class component stereotype applies association constraints static crosscutting supported 
applies association constraints 

get set associations components aspects properties 
get set associations aspects properties 

integrated ao modeling approach guided requirements sections motivate choices source approaches expressive elements integrated visual modeling approach 
table gives short examples visual elements proposed integrated aspectoriented modeling approach 
aspect prefer designate separate architecture element aspect mixing aspect relations way done pcs framework approach 
keep separate elements aspects point cuts introductions binding 
take stereotyped component visual aspect representation just equivalently approaches 
contrast cam adl choose uml component uml class base aspects coarse grained elements 
suites better architecture design stage contributes general purpose ness 
component naturally just evaluated visual notations choose uml component concept representation 
crosscutting interface propose aspect interfaces capture crosscutting influence aspectual components 
captures notion pointcuts advice architectural models 
representation aspect interfaces combine features different approaches crosscutting interfaces evaluated interface adl cam point cut labels 
decision taken satisfy 
notion crosscutting interface seamless extension notion interfaces uml point cut labels capture crosscutting nature aspect affects architectural components 
allows abstracting different ways different programming languages detailed design modeling languages implement composition 
crosscutting interface pointcut labels uml stereotyped interface method names point cut labels 
aspect crosscutting interface attached means operates certain points execution flow bound point cut labels crosscutting interface 
possible leave crosscutting interface empty point cut labels bound postpone point cut specification development stages 
strategy contributes 
members crosscutting interface exactly class methods sense object oriented programming 
instances generalization method concept bound certain points evaluated component code way component adhere crosscutting interface contract 
note crosscutting interface point cut labels facility resembles connection point attachment combination pcs framework approach 
composition rules omitted 
far pcs framework utilizes aspectj syntax composition specification due incline choosing means detailed point cut definition 
exactly done open question 
option may sub component aspect realizing composition rules point cuts crosscutting interface basing point cut labels just point cut mask meta model 
evaluated approaches provide notation advice conforms requirements 
closest pcs framework align 
consequently raise open question advice representation 
point cut representation advice may modeled sub component gets delegation enclosing aspect uml delegation connector realize advice crosscutting interface 
may convenient introduce commonly stereotypes advices transformation message signature conditional filtering 
static dynamic crosscutting dynamic crosscutting modeling integrated approach supports point cut advice concepts 
model static crosscutting combine available concepts observed approaches element pcs framework crosscutting interface component relation 
state crosscuts unidirectional association crosscutting interface aspect component indicate static crosscutting component structure 
detailed specification static crosscutting sub component aspect 
abstracts structural changes necessary target component hold crosscutting interface contract 
delegation uml connector may link served crosscutting interface 
pcs framework utilizes aspectj syntax inter type declarations brought 
find implementation language independent representation 
aspect component relation propose reuse aspect component relation approach formulating follows 
crosscutting interface crosscuts internal elements component interfaces 
case means aspect directly affects internal structure dynamic behavior target component 
second case means aspect affects contract defined interfaces 
aspect component relation effectively binding aspect component 
apparently individual binding needs detailed specification design stage 
composition pcs framework integration rules list bindings stand 
keep aspect implementation aspect binding decoupled may reasonable provide association class aspect component relation introduce association tagged values purpose 
encapsulation binding details 
aspect aspect relation proposed take inheritance precedence relation pcs framework 
gives means defining aspects may detailed refined successors setting aspect priorities 
uml ll model generalization dominates navigable binary association respectively 
table 
integrated approach relation aosd concepts concepts means visual modeling aspect component point cut advice static dynamic crosscutting relation relation 
example cvs illustrate proposed modeling approach take case study concurrent versioning system 
due space limitations show architectural models condensed views proposed integrated approach 
problem statement software configuration management scm deals control software changes proper documentation changes issuing new software versions releases registration recording approved software versions 
important functionality scm forms concurrent version control system cvs 
concurrent version control system keeps history changes set files concurrently accessed 
cvs provides functions checking checking files 
files checked edited compiled 
possible check modifications file 
checking file give developer exclusive rights file 
developers check modifications check back 
cvs automatically detect multiple developers changes file merge changes 
support versioning cvs maintains history source tree terms series changes 
stamps change time user name person 
developers provide textual description describing change 
information cvs help developers inspect change 
developers check files change files merge changes commit changes check files 
administrator initiate repository shared files stored set profiles developers monitor activities developers set authentication policies 
model diagram gives cvs architecture overview 

cvs architecture expressed integrated modeling language 
take little closer look access control aspect 
integrated modeling language diagram shows crosscutting interfaces aspect provides components interfaces subjects crosscutting functionality 

crosscutting access control aspect 
crosscutting interface defines single show element point cut label bound joinpoints interface cvs server component 
crosscutting interface defined access control aspect 
point cut labels crosscutting interface bound business objects create read write operations 
diagram generally show relation crosscutting interface cvs server component 
relations detailed development stages 

discussion architecture design activity integrated complete software development life cycle 
means smooth transition connected stages traceability involved artifacts 
clear elements requirements model concerns goals constraints guidelines reflected architecture model 
possible validate evaluate architecture stated requirements 
hand software architecture model appropriate input software design stage architecture modeling facility permit refinement detailing 
adoption uml aspect oriented approaches strongly benefits seamless integration architectural artifacts classes aspects 
proposed integrated architectural approach takes consideration inheriting studied approaches uml elements 
reusing concepts approach obtain benefit supporting traceability explicitly linking elements architectural model corresponding elements detailed design models class sequence diagrams 
example section observe advantages brought integrated approach consequence integration guidelines defined section 
resulted visual modeling language explicit architectural aspects address important crosscutting concerns cvs access control logging persistence synchronization 
aspect specified presenting interaction cvs components aspects 
component aspect interfaces help detail way elements interact 
aspect interfaces specify clearly component join points specific architectural aspect interested observe possibly affect functionality 
elements adopted integrated approach uml 
derived approach 
cvs ao architecture programming language independent 
integrated modeling language allows specifying high level components aspects system omitting implementation details related specific ao programming languages 
integrated modeling language aligned new elements uml standard adopted industry 
promotes simplicity sense introduce new elements 
may easier learnt uml users supported existing tools 

investigated compared aspectoriented architecture design approaches published pcs framework cam 
aim specify unified general purpose aspect oriented architecture modeling approach 
order analyze proposed approaches defined comparison framework section depicts core set concepts believe supported aspectoriented architecture description 
analysis investigated approaches section showed concepts completely fulfilled approaches 
pcs framework close implementation hard linked aspectj 
approach encompasses means elaborating point cuts advice static crosscutting expanded view 
cam features serve specifics platform focusing implementation details weakening universality 
moment means visual modeling limited expressive power uml component diagrams 
aspect oriented meta model provided realized visual modeling facilities xml back 
established set requirements section integration guidelines definition unified generalpurpose aspect oriented architecture modeling approach 
requirements selected investigated approaches respective expressive elements section 
integration approaches difficult expected basically different conceptual views aspect oriented software architecture 
useful elements approach point cut labels crosscutting interfaces connection points introductions pcs framework evaluated interface cam directly combining single approach difficult provide radical decisions integrate elements framework 
note integration efforts aspectoriented concepts addressed studied approaches directly supported integrated approach 
provide basis research activities aspect oriented architecture design 
obviously study shows benefit existing aspect oriented architecture design approaches published far 
think provided important integrated approach integrates best practices 
important research required aspect oriented architecture design 
hope think provide important input activities 

supported european commission ist european network excellence aosd aosd europe 

allen formal approach software architecture ph thesis carnegie mellon university cmu technical report cmu cs may 
ara jo early aspects current landscape technical note cmu sei lancaster university 
discovering early aspects ieee software jan feb 
framework software architecture evolution workshop coordination adaptation techniques software entities ecoop oslo norway 
bass clements kazman software architecture practice addison wesley 
van den berg aosd ontology public ontology aspect orientation aosd europe 
chavez lucena 
theory aspects aspect oriented software development 
proc 
xvii acm sigsoft brazilian symp 
soft 
engineering october 
chavez model driven approach aspect oriented design phd thesis computer science department puc rio april 
chavez garcia anna lucena 
taming heterogeneous aspects crosscutting interfaces 
journal brazilian computer society sbc jan 
rashid sawyer garcia pinto bakker clarke jackson survey analysis design approaches aosd europe 
architectural aspects architectural aspects 
nd european workshop software architecture lncs pp 

garlan monroe acme architectural description component systems foundations component systems leavens sitaraman eds cambridge university press pp 

concern oriented approach software architecture phd 
lausanne switzerland swiss federal institute technology epfl 
garcia lucena method development aspect oriented generative approaches 
workshop early aspects oopsla november vancouver canada 
requirements definition ao middleware architecture aosd europe 
luckham rapide language toolset simulation distributed systems partial orderings events dimacs partial order methods workshop iv princeton university july 
magee dulay eisenbach kramer specifying distributed software architectures proc 
th european software engineering conference esec september lncs pp 

kiczales modeling crosscutting aspect oriented mechanisms 
proc 
ecoop medvidovic object oriented typing support architectural design style proc 
fse acm san francisco ca october 
medvidovic modeling software architectures uml 
acm jan 
medvidovic taylor 
classification comparison framework software architecture description languages 
ieee trans 
soft 
eng jan 
object management group unified modeling language superstructure 
version available www omg org 
pinto dynamic component aspect platform computer journal 
schmidt systems engineering perspective aspect oriented software architectural analysis uml rd aspect oriented modeling workshop aosd boston ma march 
shaw garlan software architectures perspectives emerging discipline 
englewood cliffs nj prentice hall 
