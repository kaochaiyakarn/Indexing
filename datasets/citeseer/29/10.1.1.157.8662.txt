reflective middleware solutions context aware applications capra wolfgang emmerich mascolo dept computer science university college london gower street london wc bt uk capra emmerich mascolo cs ucl ac uk 
argue middleware wired distributed systems mobile setting principle transparency driven design runs counter new degrees awareness imposed mobility 
propose marriage reflection metadata means middleware give applications dynamic access information execution context 
describe conceptual model provides basis reflective middleware 
advances wireless networking technologies growing success mobile computing devices laptop computers third generation mobile phones personal digital assistants watches enabling new classes applications challenging problems designers 
devices face temporary loss network connectivity move discover hosts ad hoc manner scarce resources low battery power slow cpu speed little memory required react frequent changes environment new location high variability network bandwidth developing distributed applications designers deal explicitly problems related distribution heterogeneity scalability resource sharing 
middleware developed network operating systems provides application designers higher level abstraction hiding complexity introduced distribution 
existing middleware technologies transaction oriented message oriented object oriented middleware built adhering metaphor black box distribution hidden users software engineers system appears single integrated computing facility :10.1.1.36.867
words distribution transparent 
technologies designed successfully stationary distributed systems built fixed networks appear suitable mobile setting 
firstly interaction primitives distributed transactions object requests remote procedure calls assume high bandwidth connection components constant availability 
mobile systems contrast unreachability low bandwidth norm exception 
object oriented middleware systems corba mainly support synchronous point point communication mobile environment case client server hosts connected time 
secondly notably completely hiding implementation details application difficult little sense 
mobile systems need detect adapt drastic changes happening environment changes connectivity bandwidth battery power 
providing transparency middleware take decisions behalf application 
application normally efficient better quality decisions application specific information 
particularly important mobile computing settings context location device taken account 
propose joint reflection metadata order develop middleware targeted mobile settings 
metadata obtain separation concerns distinguish middleware middleware 
reflection means provide applications order inspect adapt middleware metadata influence way middleware behaves current context execution 
principles reflective middleware section introduce basic principles driven design reflective middleware 
applications running mobile device need aware execution context 
context mean influence behaviour application 
general term identify specific levels awareness encountered case study device awareness environment awareness 
device awareness refers resides physical device application running example memory battery power screen size processing power 
call entities internal resources 
environment awareness refers outside physical device bandwidth network connection location hosts services reach 
call entities external resources 
hand aware execution context requires designer know instance location device hosts reach general piece information collected network operating system 
hand want application designers build applications directly network os extremely tedious error prone lead non portable applications 
middleware solve issues 
middleware interact underlying network operating system keep updated information execution context internal data structures 
information available applications listen changes context inspection middleware influence behaviour middleware accordingly adaptation middleware 
user user profile application application profile middleware context network os fig 

user application profiles 
reflection metadata means rely build middleware systems support context aware applications 
fig 
shows may applications running middleware different users application 
user may customize application different ways users example customize task bar application interface icons sophisticated things asking application silent user particular places movie theatre train automatically disconnect network battery power low user sets user profile instructs application behave different circumstances 
application point view call data subject computation say functional requirements product catalogue shopping application 
user profile define application metadata 
application filters settings manage context independent way layout task bar translates ones application profile passed middleware 
middleware point view context data value bandwidth status network connection status battery power application profile metadata see fig 

middleware charge maintaining valid representation context directly interacting network operating system change execution context detected consults metadata find application asked behave configuration 
question reasonable assume application fixes profile time installation changes 
answer 
needs user context change quite frequently expect application designers foresee possible configurations 
need provide mid data metadata context independent context dependent application layer subject computation product catalogue shopping application user profiles middleware layer context execution bandwidth location application profiles fig 

application middleware data metadata 
initial profile application dynamic access 
reflection comes play 
definition reflection allows program access reason alter interpretation 
principle reflection mainly adopted programming languages order allow program access implementation see reflection package java interface repository corba 
reflection middleware coarse grained dealing methods attributes deals middleware data metadata 
metadata store information middleware behave executing particular context 
applications reflective mechanisms provided middleware access profile changes information immediately reflect changes middleware behaviour 
reflective conceptual model section left open question information need encode application profile middleware metadata 
provide answer 
application profile written application designer managed underlying middleware agreement parts representation profile 
believe extended markup language xml related technologies particular xml schema successfully model information 
scenario middleware defines grammar rules followed write profiles xml schema application designer encodes profile xml document valid instance grammar 
change done profile respect grammar check easily performed available xml parsers 
understand information encode distinguish different ways application influences behaviour middleware 

changes execution context 
application ask middleware listen changes execution context react accordingly independently task application performing moment 
example application may ask middleware disconnect bandwidth application service request service policy context aware set policy configuration configuration context internal resource external resource fig 

application profile 
fluctuating battery power low 
establish association particular context configurations depend value resources middleware monitors policies applied shown right hand side fig 

fig 
illustrates simple example xml document kind information 
resource name battery status operator value behaviour policy disconnect resource context configuration policy fig 

xml encoding context aware set 
middleware interacts underlying network operating system order keep updated configuration context 
change context happens looks application profiles running applications registered interest changed resources triggers corresponding actions 

service request 
application ask middleware execute service example access remote data cached locally 
different ways service provided example service access data delivered different policies copy physical copy bunch data created locally link network master copy created 
circumstances application may want different physical copy data may preferred lot free space device link may necessary amount available memory prevents creating copy network connection allow reliable read write operations 
service application may ask middleware application profile specifies policies applied re satisfied order choose apply 
requirements expressed terms execution context left hand side fig 

fig 
gives example express information application profile xml 
service name behaviour policy copy resource name memory status operator value resource behaviour behaviour policy link resource name bandwidth status operator value resource resource name memory status operator value resource behaviour service fig 

xml encoding application service request 
particular services middleware systems provide supported applications include trading binding services 
trading service put place find host provides specific service requested application 
mobile setting hosts may come leave quite rapidly services available host disconnects network completely different ones host finds context reconnects 
host trader keeps track services provided hosts reach moment 
general may provider service example service looking access data host holding replica neighborhood 
situation trader needs choose contact decision taken different strategies contact closest host contact host cheapest link 
application specifies profile trading service delivered policy trader apply selecting service providers requests coming application 
service provider contacted chosen middleware needs decide policy apply serve request dealing 
application specified particular policy binding service invoked binder charge checking requirements related policy deciding adopt 
may circumstances policy followed selection driven strategy policy specified application profile voice binding service policy requires amount resources provides best quality service 
reflective principle middleware applications dynamic access profiles profile modified middleware runs validating parser parses document checks valid xml instance grammar provided middleware application 
grammar xml schema updated middleware charge verifying consistency updates example new policy introduced code provided way reconfigure middleware adapt unpredictable situations extend set behaviours provides great flexibility 
discussion related described middleware context aware mobile applications principle reflection metadata 
metadata achieve separation concerns distinguish middleware middleware 
reflection provide applications dynamic access middleware metadata 
principle reflection investigated middleware community past years mainly achieve flexibility dynamic configurability orb 
examples include opencorba dynamictao done blair adhere idea reflection add flexibility dynamic configurability middleware systems platforms developed experiment reflection standard middleware implementations corba suited mobile environment 
middleware systems built support mobility reflective principle 
observe partial solutions developed date mainly focused providing support location awareness nexus teleporting disconnected operations reconciliation data bayou odyssey 
tuple space coordination primitives initially suggested linda employed number mobile middleware systems jini javaspaces lime spaces facilitate component interaction mobile systems 
addressing natural manner asynchronous mode communication characteristic ad hoc nomadic computing systems bound poor data structures flat unstructured tuples allow complex data organization hardly extended support metadata reflection capabilities 
believe xml particular associated hierarchical tree structure allows semantically richer data metadata formatting overcoming limitation 
implemented java existence class dynamically loaded java class loader required 
concluding remarks growing success mobile computing devices networking technologies wavelan bluetooth call investigation new middleware deal mobile computing requirements particular contextawareness 
goal outline global model design mobile middleware systems principle reflection metadata 
choice xml represent metadata comes previous experience xmiddle xml middleware mobile systems focuses data reconciliation synchronization problems solves exploiting application specific reconciliation strategies 
plan extend previously built prototype fully support reflective model 
issues investigated followings 
conflicting policies happens applications ask middleware behave differently executing context 
application requires conflicting behaviors changes related different resources happen time disconnect battery low vs connect bandwidth high 
questions currently investigation major problem security 
portable devices particularly exposed security attacks easy connect wireless link 
reflection worsen situation 
reflection technique accessing protected internal data structures cause security problems malicious programs break protection mechanism reflective capability disclose modify delete data 
security major issue mobile computing application proper measures need included design mobile middleware system 
plan investigate issue 

bray paoli sperberg mcqueen 
extensible markup language 
recommendation www org tr rec xml world wide web consortium march 

capra emmerich mascolo 
middleware mobile computing awareness vs transparency position summary 
proceedings th workshop hot topics operating systems hotos viii schloss germany may 

andersen blair costa coulson goebel hansen kristensen yu 
generation middleware requirements architecture prototypes 
proceedings th ieee workshop trends distributed computing systems pages 
ieee computer society press december 

emmerich 
software engineering middleware roadmap 
software engineering nd int 
conf 
software engineering icse pages 
acm press may 

mascolo capra wolfgang emmerich 
xml middleware peer peer computing 
proc 
international conference peer peer computing sweden august 
appear 
