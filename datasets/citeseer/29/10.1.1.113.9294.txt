lime linda meets mobility pietro picco amy murphy roman dept computer science washington university campus box drive st louis mo usa picco roman cs wustl edu lime system designed assist rapid de dependable mobile applications wired ad hoc networks 
mobile agents reside mo hosts communication takes place tran shared tuple spaces distributed mobile hosts 
decoupled style computing characterizing linda model extended mobile environment 
application level agents hosts perceive movement sudden change context 
set tu ples accessible particular agent residing host altered transparently response changes connectivity pattern mobile hosts 
pa key design concepts lime system 
simple rapid application development facilitated mechanisms parallel programming linda attractive implementors 
programs written variety languages view world sea tuples accessible contents 
movement logical physical results implicit changes tuple space accessible individual components 
system application program responsible managing movement tuple space restructuring associated connectivity changes 
formal semantic definition lime subject companion relies mobile unity extension unity notation logic proposed chandy misra concepts fundamental dealing mobility :10.1.1.41.3512
remainder structured follows 
section provides brief review linda 
section motivates lime design philosophy 
sections set coordination primitives supporting transiently shared tuple spaces location aware computing reactive programming fundamental concepts underlying lime 
desirable en reaction event definition providing higher level abstraction programmer freed burden dealing explicitly synchronization issues 
lime introduces notion reactive statement having form code fragment containing non reactive statements executed tuple matching pattern tuple space tuple space 
section see additional constraints necessary deal remote tuple spaces 
execution registers reaction complementary operation de register reaction provided lime 
semantics statement defined mobile unity reactive statements described :10.1.1.41.3512
non reactive statement reaction selected nondeterministically registered guard evaluated 
guard true corresponding action executed reaction equivalent skip 
selection execution proceeds enabled reactions normal execution non reactive statements resume 
reactive statements executed belong separate reactive program run fixed point non reactive statement 
workshop mobile computing systems applications pages 
malone crowston 
study coordination 
acm computing mar 
:10.1.1.41.3512
roman 
compositional programming abstractions mobile computing 
ieee trans 
software engineering feb 
