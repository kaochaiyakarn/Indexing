view rendering visualizing real objects scanned range color data kari pulli michael tom duchamp hugues linda shapiro werner stuetzle university washington seattle wa research redmond wa modeling arbitrary real objects difficult rendering textured models typically result realistic images 
describe new method displaying scanned real objects called view rendering 
method takes input collection colored range images covering object creates collection partial object models 
partial models rendered separately traditional graphics hardware blended various weights soft buffering 
demonstrate interactive viewing real non trivial objects difficult model traditional methods 
traditional model rendering geometric model scene surface reflectance properties lighting parameters generate image scene desired viewpoint 
contrast image rendering set images scene taken possibly known viewpoints create new images 
image rendering area active research past years address problems efficient rendering complicated scenes 
applications rendering walk throughs complex environments require generation images interactive rates 
way achieve render scene suitably chosen set viewpoints 
images required walk synthesized images computed pre processing step 
idea premise interpolation images faster rendering scene 
dimensional display real world objects 
suppose wish capture appearance object way allows viewer see chosen viewpoint 
obvious solution create model object capturing shape surface reflectance properties 
generating realistic models complex objects discuss 
alternatively capture images object collection viewpoints synthesize new images 
motivation realistic display real objects 
method view rendering lies purely model purely image methods 
full model needed model rendering requires number steps acquisition range color data number viewpoints chosen get complete coverage object registration data single coordinate system representation data surface model agrees images computation surface reflection model point surface colors observed various images 
despite advances automatically creating accurate surface models complex objects step difficult task computation accurate reflection models step hardly addressed 
addition rendered images models look quite realistic photographs capture intricate geometric texture global illumination effects ease 
idea forgo construction full object model 
create independent models depth maps observed viewpoint simpler task 
having gather manipulate set images dense purely imagebased rendering sparser set images geometric information accurately interpolate 
request image object specified viewpoint satisfied color geometry stored views 
describes new view rendering algorithm shows results non trivial real objects 
organized follows 
section casts image rendering interpolation problem samples light field function interpolated create new images 
section describes view rendering approach 
section presents details implementation including data acquisition view model generation graphics hardware efficient implementation results 
section covers related 
section discusses hardware acceleration concludes 
image rendering interpolation problem basic problem image rendering compute image scene seen target viewpoint set poses possibly additional associated information 
useful abstraction context light field function known plenoptic function 
levoy hanrahan define light field radiance point direction 
purposes convenient pencil rays describes colors visible points point 
light field function describes colors rays starting point 
define light field radiance point direction see 
precisely define ray directed half line originating 
may represent ray ordered pair ir direction denotes unit sphere 
light field function ir ir assigns ray rgb color 
measures radiance direction collection rays starting point called pencil 
complete knowledge light field func tion render view location associating ray average rays pencil pixel virtual camera 
full light field function needed render entire environments arbitrary viewpoint 
content rendering individual objects distance suffices know light field function subset ir inward rays originating points convex surface encloses object 
gortler call simpler function lumigraph 
call surface encloses object lumigraph surface 
shows schematic lumigraph domain case lumigraph surface sphere 
lumigraph contains rays needed synthesize image viewpoint exterior convex hull object modeled 
pixel image defines ray intersects spherical lumigraph surface 
lumigraph surface point say direction ray rgb color value assigned pixel 
distance measures rays practice able acquire full light field function complete lumigraph 
discrete set images scene taken finite resolution 
words values function sample rays really local averages light field function 
render scene new viewpoint need estimate values function set query rays values sample rays 
image rendering interpolation problem 
generic interpolation problem values function discrete set sample points 
function value new query point estimated weighted average function values sample points weights concentrating samples close query point 
performance interpolation method critically dependent definition closeness 
image rendering aim paint pixels image plane virtual camera renderer looks rays close associated particular pixel 
sections examine closeness measures 
ray surface intersection shows piece lumigraph pencils rays 
fig 
information object surface geometry 
case concentrate pencils origins close query ray interpolate rays parallel query ray 
denser pencils lumigraph surface rays pencil better match expect find 
assuming object lambertian reflector lumigraph representation high degree redundancy rays intersect object surface point 
shows case precise object geometry known estimate average distance object surface lumigraph surface 
estimate query ray intersects object surface choose rays nearby pencils point intersection point 
expected error estimate case 
obtain error need far fewer sample rays images 
query ray dotted sample rays solid 
choose similar rays 
choose rays query ray meets surface 
choose rays intersecting surface query ray 
illustrates case accurate information object geometry 
estimate locate sample rays intersect object surface location query ray 
accurate surface description possible find rays directed location remove rays really intersect part surface 
naturally expected error collection rays minimized 
ray direction improve estimate lighting function take account direction heavily weight sample rays direction near query ray 

surfaces reflect incoming direction 
typical example specular reflections shiny surfaces appearance materials hair varies significantly viewing direction 
image rendering suggests favoring rays similar directions 
second undetected self occlusions may cause incorrectly conclude sample rays intersect object surface point lead incorrectly estimate light field function 
occlusion due large scale object feature information surface geometry may able notice cull away occluded rays see fig 

occlusion due small scale surface geometry approximate information surface geometry occlusion harder detect shown fig 

object thin features illustrated fig 
rays may approach object surface opposite directions intersect points spatially near far apart respect distance measured surface 
likelihood errors decreases heavily weighting sample rays directions near direction query ray 
third shown fig 
angle query ray sample ray large small errors surface geometry lead large errors estimate distance intersection points object surface 
get robust results favoring rays similar direction query ray 
view rendering preprocessing input data described detail section clarity summarize 
input view rendering system set views detailed surface geometry cause occlusions surface appear different different directions 
thin features cause discrepancy surface distance spatial distance intersection points 
parallel rays damaging error estimate surface distance 
colored range images object 
registering range maps common coordinate system gives camera locations orientations colored images respect object 
replace dense range map sparse triangle mesh closely approximates 
texture map triangle mesh associated colored image 
synthesize image object fixed individually render meshes constructed close viewpoints blend pixel weighting algorithm uses soft buffering 
simple approach better understand virtues approach helpful contrast simpler algorithm 
want view object stored viewpoints place virtual camera render associated textured mesh 
move virtual camera rendering mesh new viewpoint 
viewpoint changes parts surface seen original viewpoint visible opening holes rendered image 
missing surface parts seen stored viewpoints fill holes simultaneously rendering textured meshes associated additional viewpoints 
resulting image collage individual images 
results displayed fig 

terms ray interpolation graphics hardware interpolates rays view finding ray pixel intersects surface approximately query ray pixel 
interpolation views ray mesh happens closest camera pixel chosen 
imperfect geometrical information registration get lot visible artifacts 
improve interpolating rays different views 
various weights account factors viewing directions surface sampling densities blend rays correctly presence partial self occlusions 
results better interpolation shown fig 

weights soft buffering preprocess viewing directions input views follows 
viewing direction corresponds point unit sphere 
viewing directions define set points sphere compute delaunay triangulation set illustrated fig 

viewing direction virtual camera views surrounding virtual camera weights assigned views vertices delaunay triangles containing current view barycentric coordinates 
weight cosine angle normal ray sensor 
synthesize image object fixed viewpoint select views corresponding vertices delaunay triangle current viewing direction virtual camera 
textured mesh selected view individually rendered viewpoint obtain separate images 
images blended single image scheme 
consider single pixel 
set wi ci color value associated pixel ith image wi weight designed overcome difficulties encountered naive implementation mentioned 
weight wi product weights wi definition illustrated figs 

self occlusions handled soft buffering combine images pixel pixel 
weight measures proximity chosen view current viewpoint changes dynamically virtual camera moves 
calculate barycentric coordinate current viewpoint respect delaunay triangle containing see fig 

components sum associated triangle vertices 
components give weights linearly interpolate vertices produce current viewpoint 
define weight view component associated view 
remaining weights pixel dependent independent view direction virtual camera 
second weight measure surface sampling density see figs 
constant triangle mesh 
consider point triangle mesh view corresponding pixel 
small region area point projects region area cos image plane ith sensor angle normal triangle ray point sensor 
set cos similar weight 
third weight call blend weight designed smoothly blend meshes boundaries 
illustrated fig 
blend weight view linearly increases distance mesh boundary point projecting pixel 
associated view triangles approximating geometry view associated color texture view 
similar weight debevec :10.1.1.10.713
self occlusions handled back face culling buffering 
combining view partial models part view model may occlude part view model 
surfaces relatively close occluded pixel excluded contributing pixel color 
done performing soft buffering software 
consult buffer information separately rendered view search smallest value 
views values threshold closest included composition excluded 
threshold chosen slightly exceed upper estimate combination sampling registration polygonal approximation errors 
illustrates potential problem 
picture view surface approximation rightmost camera failed notice step edge due self occlusion data incorrectly connected surface regions 
performing soft buffering pixel corresponding dashed line wrongly connected step edge closer view problems un soft buffering throw away correct sample 
detected step edges 
doing soft buffering treat weights confidence measures 
pixel low confidence value covers pixel high confidence value low confidence pixel ignored altogether 
rendering registered geometry graphics hardware soft buffering finds rays intersect surface query ray pixel 
weights favor rays sense discussed section hide effects inevitable inaccuracies due real scanned data 
implementation view acquisition data acquisition 
obtain range data stereo camera system uses active light 
cameras calibrated uncalibrated light source sweeps beam vertical light plane past object discrete steps 
pixel beam project epipolar line right camera image plane 
intersection epipolar line bright line gives pixel sees surface point original pixel left camera 
obtain coordinates point triangulating corresponding pixels 
view scanned turn lights take color picture object 
object repositioned scan different viewpoint 
view registration 
registering views range data aligns range maps object 
transformation applied range data moves sensor respect object centered coordinate system giving relative camera positions orientations 
perform initial registration interactively marking identifiable object features color images 
initial registration refined chen medioni registration method modified deal multiple data sets simultaneously 
triangle mesh creation 
currently create triangle meshes interactively 
user marks boundaries object inserting points color image software incrementally updates delaunay vertices 
system optimizes coordinates vertices squares error range data approximation minimized 
triangles parallel viewing direction discarded step edges approximation object surface 
triangles outside object discarded 
begun automate mesh creation phase 
place blue cloth background scan empty scene 
points geometry color match data scanned empty scene classified background 
adding vertices easily automated 
example garland heckbert add vertices image coordinates current approximation worst 
drawback approach data contains step edges due self occlusions mesh unnecessarily dense approximation achieved 
prevent perform mesh simplification step mesh optimization methods hoppe 
rendering interactive viewer viewing reconstructed images see 
frame find views view directions surround current view direction unit sphere 
views rendered separately viewpoint virtual camera textured triangle meshes weighted barycentric coordinates current view direction respect chosen views 
weights static view depend viewing direction virtual camera 
apply weights offline code alpha channels mesh color texture map 
weight decrease importance triangles tilted respect scanner 
applied assigning color triangle 
weight hide artifacts mesh boundary view 
directly applied alpha channel texture map stores color information 
calculate weights pixel projecting triangle mesh color image painting white black background 
calculate distance white pixel closest black pixel 
pixels distances get alpha value pixels get value gives pseudo code view composition algorithm 
function min reliable returns minimum pixel closest pixel low confidence weight point point case pixel zmin min reliable pixel pixel color pixel weight view zmin view pixel zmin weight pixel color weight color view pixel pixel weight weight endif color pixel pixel color pixel weight pseudo code color blending 
minimum high confidence point returned 
render triangle mesh described colors texture maps hard ware calculates correct weights 
alpha value pixel possible apply remaining weight graphics hardware 
render views read information frame buffer 
opengl allows scaling pixel reading frame buffer memory 
scale alpha channel resulting alpha value contains final weight results implemented object sgi maximum impact mhz mips 
obtain polygonal approximation consisting triangles view 
user free rotate zoom pan object front virtual camera 
frame choose views 
texture mapped polygonal approximations views rendered current viewpoint separately windows 
images combined pixel pixel composite image 
compares simple approach section view rendering method uses weights soft buffering section 
fig 
views rendered repeatedly frame viewpoint virtual camera 
mesh boundaries clearly visible result looks badly mosaic 
fig 
views blended smoothly pixel pixel 
dog flower basket free blending artifacts background color showing mesh boundaries false surfaces due undetected step edges triangle meshes 
current implementation deliver frames second 
execution time 
rendering texture mapped triangle meshes takes reading color buffers memory takes building composite image takes displaying result takes total execution time 
additional hardware acceleration parts algorithm currently supported graphics hardware weighted pixel averaging soft buffering 
weighted averaging easy implement allowing bits accumulation buffer interpreting alpha channel value weight opacity value providing command divides rgb channels alpha channel value 
approximate implementation soft buffering hardware require adding replacing ignoring weighted color weight alpha value depending new pixel value closer farther old value respectively 
exact implementation passes required find minimum reliable blend soft threshold minimum related chen mcmillan bishop modeled environments storing light field function point :10.1.1.139.3990
rays visible point texture mapped cylinder point horizontal view created warping portion cylinder image plane 
systems allow limited rotations vertical axis support continuous translation viewpoint 
levoy hanrahan gortler developed image synthesis systems lumigraph support continuous translation rotation view point 
fact term lumigraph describe slice light field borrowed 
systems cube surrounding object lumigraph surface 
create lumigraph digitized images real object levoy hanrahan moved camera regular pattern known set positions projected camera images back lumigraph cube 
gortler moved hand held video camera object placed capture stage 
capture stage patterned set concentric circles estimating camera pose image 
rays images projected lumigraph walls lumigraph interpolated samples stored grid images 
systems new images synthesized stored grid images interpolation procedure gortler additional geometric information improve ray interpolation 
create rough model visual hull object 
advantage lumigraph methods allow capturing appearance object regardless complexity surface 
disadvantage difficulty storing accessing enormous lumigraph representation 
algebraic approach image rendering pairs images pixel correspondences images introduced laveau faugeras 
systems :10.1.1.139.3990
correct dense pixel correspondences calculate coordinates surface points visible images project image plane virtual camera 
projection calculated directly reconstruction 
illustrated fig 
shows stored images image plane virtual camera pixel marked image corresponds marked image associated rays assumed intersect location object surface 
point projects matching rays correspond pixel virtual camera projections rays intersect 
image intersectionof epipolar lines projections image color destination pixel combination colors input pixels 
pixel correspondence mapping input images easy reliably especially regions homogeneous color 
fortunately regions pixels project constant color projection error pixels typically cause visible artifacts 
chen williams similar methods trade unbounded scene complexity bounded image complexity 
render large number views complicated scene obtain accurate pixel correspondences depth values stored addition color pixel 
missing views needed walk virtual environment interpolated stored ones 
max similar techniques rendering trees precomputed buffer views 
morphing precomputed images pixel pixel 
shade partition geometric primitives scene render images texture map images quadrilaterals displayed geometry 
debevec developed system fits user generated geometric models buildings digitized images interactively associating image features model features fitting model parameters images :10.1.1.10.713
buildings view dependently texture mapped color images 
interpolation different texture maps improved determining accurate surface geometry stereo input images morphing texture map accordingly 
papers similar techniques 
mark investigate image rendering increase frame rate remotely viewing virtual worlds 
proposed system remotely render images geometric models frames sec send local computer warps interpolates consecutive frames frames sec 
warp done 
values pixel dense triangle mesh constructed views interpolation performed 
normal vectors values pixel locate false connections step edge occluding occluded surface 
describe approach rapidly displaying complicated environments 
virtual environment divided cubes 
center cube views face cube rendered 
buffer geometry visible scene tessellated sparse triangle mesh texture mapped rendered color image 
viewer center cube simply view textured polygon meshes stored cube walls 
viewer moves parts scene previously hidden visible 
textured meshes cubes fill holes 
authors discuss different weighting schemes merging meshes cubes 
discussion described new rendering method called view rendering lies purely model purely image methods 
input method small set range color images containing geometric color information 
image rendered arbitrary viewpoint blending information obtained views 
blending operation accomplished weights determined view direction virtual camera surface sampling density orientation distance mesh boundary 
robust solution propose soft buffering technique allow points threshold included blending 
demonstrated interactive viewing non trivial real objects method 
view rendering advantages approach rendering full objects 
easier model view separately create model object especially object convoluted geometry 
approach automatically gives view dependent texturing object produces realistic images typically obtained static texturing 
advantages image rendering twofold direct consequence having explicit geometric information 
significantly fewer input images needed view rendering image rendering 
second construct composite objects view models 
contrast realistic composite images generated image models bounding boxes intersect 
disadvantage system shows object fixed lighting 
synthetically created view models possible store additional information normals reflectance properties pixel texture maps 
real objects normals approximated obtaining reflectance properties trivial 
chen 
quicktime vr image virtual environment navigation 
siggraph conference proceedings pages 
acm siggraph addison wesley august 
chen williams 
view interpolation image synthesis 
computer graphics siggraph proceedings volume pages august 
chen medioni 
object modelling registration multiple range images 
image vision computing april 
curless levoy 
volumetric method building complex models range images 
siggraph conference proceedings pages 
acm siggraph addison wesley august 
silva varshney 
navigating static image morphing 
proc 
symposium interactive graphics pages april 
debevec taylor malik :10.1.1.10.713
modeling rendering architecture photographs hybrid geometry image approach 
siggraph conference proceedings pages 
acm siggraph addison wesley august 

image rendering algebraic techniques 
technical report memo massachusetts institute technology 
garland heckbert 
fast polygonal approximation terrains height fields 
technical report cmu cs dept computer science carnegie mellon university pittsburgh pa 
gortler grzeszczuk szeliski cohen 
lumigraph 
siggraph conference proceedings pages 
acm siggraph addison wesley august 
hoppe derose duchamp mcdonald stuetzle 
mesh optimization 
computer graphics siggraph proceedings volume pages august 
laveau faugeras 
scene representation collection images fundamental matrices 
technical report rr inria france 
available ftp ftp inria fr inria techreports rr rr ps gz 
levoy hanrahan 
light field rendering 
siggraph conference proceedings pages 
acm siggraph addison wesley august 
mark mcmillan bishop 
post rendering warping 
proc 
symposium interactive graphics pages april 
max 
rendering trees precomputed buffer views 
eurographics rendering workshop pages 
eurographics june 
mcmillan bishop :10.1.1.139.3990
plenoptic modeling image rendering system 
siggraph conference proceedings pages 
acm siggraph addison wesley august 
pulli duchamp hoppe mcdonald shapiro stuetzle 
robust meshes multiple range maps 
proc 
ieee int 
conf 
advances digital imaging modeling may 
shade lischinski salesin derose snyder 
hierarchical image accelerated 
siggraph pages acm siggraph addison wesley august 
werner rendering real world objects view interpolation 
proc 
ieee int 
conf computer vision iccv pages june 
color image toy dog 
weight applied face triangular mesh 
weight smoothly decreases mesh boundary 
result combining views repeatedly rendering view meshes viewpoint virtual camera described section 
weights soft buffering described section produces better result 
viewer shows view models rendered viewpoint virtual camera 
final image bottom right 
