approach fault tolerant secure data storage collaborative environments arun douglas school electrical computer engineering georgia institute technology atlanta ga usa arun ece gatech edu describe novel approach building secure fault tolerant data storage service collaborative environments uses perfect secret sharing schemes store data 
perfect secret sharing schemes little managing generic data high computation overheads incurred schemes 
proposed approach uses novel combination xor secret sharing replication mechanisms drastically reduce computation overheads achieve speeds comparable standard encryption schemes 
combination secret sharing replication manifests architectural framework attractive property dimension varied exploit tradeoffs different performance metrics 
evaluate properties performance proposed framework show combination perfect secret sharing replication build efficient fault tolerant secure distributed data storage systems 
categories subject descriptors information storage retrieval systems software distributed systems performance evaluation performance systems fault tolerance reliability availability general terms security algorithms design performance keywords byzantine fault tolerance collaborative environments confidentiality distributed data storage replication secret sharing 
storage sensitive information studied extensively various contexts ranging cryptographic keys generic data 
considers problem storing sensitive information storage service realized distributed set storage servers 
sensitive data stored servers data confidentiality integrity availability requirements met storage servers compromised 
research supported national science foundation ccr 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
november fairfax virginia usa 
copyright acm 
traditional approach realizing secure fault tolerant storage service encrypt data confidentiality store encrypted data replication techniques fault tolerance 
approach benefit computationally storage efficient 
collaborative environments multiple clients may authorized access encrypted data 
facilitate easy sharing encrypted data authorized clients cryptographic keys encrypt sensitive data stored storage service 
obviously keys stored storage service secure fault tolerant manner additional keys 
possible approach store key perfect secret sharing schemes 
perfect secret sharing schemes encode data case cryptographic keys shares certain valid combinations shares reconstruct encoded data invalid combinations shares give information encoded data 
storing shares different servers encoded data kept confidential long servers compromised 
confidentiality achieved additional encryption avoiding need storage management additional cryptographic keys 
perfect secret sharing schemes additional property shares changed renewed distributively encoded data remains 
process share renewal performed provide strong data confidentiality 
security scheme relies inability adversary compromise sufficient number servers time consecutive share 
approach drawback security encrypted data relies solely maintaining secrecy cryptographic keys 
adversary find key vulnerabilities system applications clients 
release cryptographic key adversary give away confidentiality sensitive data encrypted key 
proposed approach overcome drawback store sensitive information perfect secret sharing 
security gained perfect secret sharing schemes store cryptographic keys transferred sensitive data directly 
disclosure sensitive data adversary affect confidentiality rest sensitive data stored storage service 
private key encryption schemes perfect secret sharing schemes computationally expensive 
verifiable secret sharing schemes typically perfect secret sharing schemes detect incorrect shares may returned faulty compromised servers detect incorrect secret sharing writes 
techniques increase computation time encoding decoding data 
solve problems xor secret sharing fast computations replication schemes detect incorrect shares may returned faulty malicious servers 
combination secret sharing replication manifests architectural framework servers arranged form rectangle grid 
proposed architectural framework call useful property dimensions varied trade performance metrics 
collaborative environments expected changes list clients authorized read update sensitive data 
traditional approach changes access list require re encrypting stored data new cryptographic key may cumbersome 
fine grained access list management file document stored data storage service require unique key 
number keys large unmanageable 
sensitive data stored secret sharing techniques expensive operations changes access list avoided 
contributions follows describe novel approach building secure fault tolerant data storage service uses combination perfect secret sharing techniques replication provide data confidentiality integrity availability 
perfect secret sharing schemes little managing sensitive data high computation overheads schemes incur especially supplemented mechanisms achieve byzantine fault tolerance 
proposed approach uses novel combination xor secret sharing replication mechanisms drastically reduce computation overheads achieve speeds comparable standard encryption schemes 
combination secret sharing replication manifests architectural framework dimension varied exploit tradeoffs different performance metrics 
evaluate properties performance proposed framework show combination perfect secret sharing replication build efficient fault tolerant secure distributed data storage systems collaborative environments 

related works emerged consider problem providing secure distributed data storage services :10.1.1.16.1952
confidentiality stored data provided encrypting data key storing key store secret sharing secret sharing data combination 
works imperfect secret sharing schemes erasure codes rabin ida algorithm knowledge fewer threshold number shares reveal information encoded data 
coding algorithms information theoretic secure allow savings storage space 
time adversary may compromise servers learn encoded data 
provide long term confidentiality secret sharing scheme allow share renewal shares changed distributively encoded secret kept 
knowledge share renewal scheme imperfect secret sharing developed date 
perfect secret sharing schemes allow share renewal 
perfect secret sharing schemes information theoretic secure meaning leakage insufficient number shares adversary reveal information encoded data 
data stored secret sharing possible client identify corrupted shares reads 
verifiable secret sharing schemes perfect secret sharing purpose check secret sharing performed correctly writes 
verifiable secret sharing schemes allow share renewal 
schemes computationally expensive 
section describes detail avoid verifiable secret sharing schemes drastically reducing computation overheads 
approach detect corrupted shares reads store hash shares hash vector servers 
knowledge algorithm developed updating hash vector distributively share renewal 
works combined replication mechanisms perfect secret sharing 
presents scheme data encrypted key stored storage servers 
data stored replicated form quorum key stored secret sharing 
uses quorum systems secret sharing build authorization service 
quorum properties ensure sufficient servers agree authorize request shares replicated servers 
addresses malicious users consider compromised servers 
shares directly read written 
consider perfect secret sharing special types data generic data 
performance reads writes addressed 
uses perfect secret sharing generic data uses perfect secret sharing archival data 
works address problem high computation overheads 
technique called fragmentation redundancy scattering 
security technique relies mainly securely maintaining encryption key fragmentation key 
store data directly perfect secret sharing schemes 
secrets encrypted public key data storage service 
private key maintained data storage servers secret sharing 
due expensive cryptographic operations computation latencies approach expected higher approach 
secrecy stored data rests maintaining secrecy key service private key 
scheme secure storing data directly perfect secret sharing 
secret sharing build survivable information storage systems 
tradeoffs possible threshold schemes outlined 
description terms choice affect performance 
explores trade space detail addresses performance overheads involved schemes 
consider perfect secret sharing schemes special case schemes distributed share renewal algorithms developed schemes 

background secret sharing schemes secret sharing schemes techniques secret encoded fragments called shares certain combinations shares reveal encoded secret 
perfect secret sharing schemes invalid combinations shares give information encoded secret 
perfect secret sharing schemes information theoretic secure 
perfect secret sharing schemes allow share renewal process distributively changing shares encoded secret 
frequent share renewal provide strong data confidentiality 
perfect threshold secret sharing schemes secret encoded shares shares recover encoded secret shares give information encoded secret 
schemes called threshold schemes 
shamir scheme example threshold perfect secret sharing scheme table computation times shamir scheme kb block prime length sharing recovery sharing recovery bits ms ms ms bits ms ms ms ms bits ms ms ms ms subsection describe ito saito share assignment scheme realizes access structure threshold secret sharing scheme 
ito saito share assignment scheme describe ito saito share assignment scheme threshold access structure 
consider set participants pr participants pool shares recover encoded secret 
secret sharing scheme realizing access structure list set consisting possible combinations participants 
bq encode secret threshold secret sharing scheme shares generated denoted sq set shares signed participant pi function sj pi bj 
participant receives shares share stored participants 
example consider set participants participants pool shares find encoded secret 
set 
generate shares secret needed decode secret 
denote shares 
share assignment function participant gets shares participant gets shares participant gets shares participant gets shares 
participants pool shares find shares 
knowledge sixth share encoded secret 
participants pool shares find shares needed recover encoded secret 

computation overhead fect secret sharing schemes section show high computation overhead known secret sharing schemes main reason schemes widely distributed data storage 
contrast computation overheads rijndael aes symmetric key encryption algorithm illustrate point 
show xor secret sharing combined replication mechanisms computational overhead similar rijndael 
performance measurements reported done intel pentium ghz processor mb ram running linux 
library implement cryptographic algorithms 
section compare communication overheads techniques developed encryption secret sharing 
table computation times kb block shamir feldman scheme feldman prime length bits 
prime length sharing recovery sharing recovery bits bits bits ms ms table computation time aes cbc mode kb block 
key length encryption decryption bytes bytes bytes shamir scheme example threshold perfect secret sharing scheme table lists time taken compute shares sharing time taken compute secret shares recovery kb block data shamir scheme selection values 
secret sharing recovery done writes reads respectively overheads important 
shamir scheme computations done modulo prime size modulus factor throughput measurements 
attacks possible data stored secret sharing techniques 
attack faulty client generates inconsistent shares writes different subsets shares shares decode different values 
attack faulty server returns incorrect arbitrary shares reads 
attacks detected verifiable secret sharing schemes 
schemes common data called witnesses shares computed client writes sent servers 
storing shares witnesses servers check shares received witnesses arrive consensus consistency shares 
reads client determine witnesses check validity share witnesses proceeding decode sensitive data 
verifiable secret sharing schemes significantly increase computation overheads secret sharing encoding secret recovery decoding processes 
widely method verifiable secret sharing feldman scheme 
table gives computation times secret sharing secret recovery kb block data feldman scheme shamir scheme 
comparison purposes throughputs aes rijndael symmetric key encryption algorithm table 
tables clear computation times shamir scheme feldman scheme far higher encryption fact performance acceptable modern data storage systems 
secret recovery computation time verifiable secret sharing times slower rijndael decryption times 
analyses indicate part perfect secret sharing techniques adopted generic data date 
reduce computation overheads mechanisms mechanism perfect secret sharing scheme shares needed recover secret inconsistent secret sharing possible 
question different subsets shares shares decoding different values subset verifiable secret sharing schemes avoided 
perfect secret sharing scheme realized sim table computation times xor sharing kb block 
secret sharing secret recovery ms table computation times voting responses determine share size kb 
measurements reflect best case incorrect responses 
computation time ple bit wise xor operations 
data bit thought separate secret share single bit xor shares bits gives encoded secret bit 
practice xor secret sharing implemented word wide operations efficiency 
table lists computation times secret sharing secret recovery selection values xor secret sharing 
note xor secret sharing perfect secret sharing scheme 
constraint compared general threshold scheme shares recovered reconstruct secret 
compared computation times shamir scheme table computation times xor secret sharing lower 
mechanism replication voting determine incorrect shares reads detect incorrect shares may returned malicious servers reads propose share replicated servers threshold servers return share read share correct secret recovery computation 
traditional technique managing replicated data apply share 
number malicious servers denoted share responses received 
value returned servers correct value share read 
table gives computation times determining share responses number possibly malicious servers 
note numbers share 
computation time secret recovery include product time taken determine share responses number shares 
secret sharing computation time remain unchanged additional shares generated 
secret sharing recovery computation times xor secret sharing voting shown table 
compared computation times verifiable secret sharing schemes table computation times xor secret sharing voting lower order magnitude rijndael encryption algorithm table 
summarizing perfect secret sharing schemes fault tolerant secure distributed data storage combining verifiable secret sharing schemes 
computation latency rijndael benchmark shown known verifiable secret sharing techniques combination feldman scheme shamir scheme slow large volumes data 
computation overheads drastically reduced perfect secret sharing scheme xor secret sharing replication voting mechanisms 
computation times comparable table secret sharing recovery computation times xor secret sharing voting kb block 
secret sharing secret recovery ms rijndael 
rest describe detail xor secret sharing replication voting mechanisms combined benefits approach 

fault adversary model data storage service offer availability integrity confidentiality guarantees stored data identify types server faults crash server said crashed stops performing computations sends receives messages network 
byzantine byzantine faulty server deviate arbitrarily specified protocol 
byzantine faulty server reveal shares stored locally internal state adversary 
leakage server said exhibit leakage fault reveal shares state adversary executes specified protocol faithfully 
proposed fault model allows direct reasoning availability integrity confidentiality properties storage service 
availability attacks denial service attacks resources available legitimate service constrained example limiting network bandwidth increasing server loads 
crash faults severe form attack server stops execution completely permanently 
storage service tolerate high number crash faults highly available storage service able tolerate denial service attacks greater degree 
integrity attacks storage service model consider consist compromising servers altering behavior compromising servers arbitrarily modifying shares stored 
attacks represented byzantine faults 
confidentiality attacks launched compromising servers obtain sufficient shares focus share allocation problem actual protocols 
modeled byzantine leakage faults 
threshold fault model types faults 
assume servers crash servers byzantine faulty servers exhibit leakage faults 

combining secret sharing replication approach fault tolerant secure data storage service perfect threshold secret sharing data confidentiality replication mechanisms manage share crash byzantine fault tolerance 
describe straightforward method approach called direct approach show suffers requiring large number storage servers 
introduce framework tradeoff number servers required storage direct approach servers arranged logical grid having rows servers row 
secret sharing done rows distinct share assigned row 
shares replicated rows 
space needed server achieved 
worthwhile tradeoff storage space cheap 
direct approach interested designing share allocation scheme storage servers servers faulty servers byzantine faulty servers crash 
direct solution threshold perfect secret sharing scheme 
share distinct set servers 
setup envisioned servers arranged form logical grid rows columns shown 
servers row store shares 
replication shares achieve crash byzantine fault tolerance 
data confidentiality achieved secret sharing 
secret sharing done rows 
rows required share assigned distinct row 
compromise servers give shares adversary shares needed recover secret 
secrets read written shares read written replication protocols 
purposes subsequent analyses assume simple replication protocol 
write secret user generates shares bitwise xor gives secret user writes server assigned share 
example depicted user write server row share server row share 
secret read time user different user need contact set servers read shares 
consider share read example 
share stored row consists servers 
user needs contact servers determine maximum servers byzantine faulty 
share returned servers returned server byzantine faulty correct 
user obtain responses determine servers fail return response 
assuming clients connect servers asynchronous network unable detect server failures share written servers reads successful presence byzantine failures crash failures system 
share stored servers 
gives 
note description writes reads approach possible replication protocol manage framework servers arranged logical grid having rows 
secret sharing done rows shares replicated rows 
setup shown 
note server holds shares 
shares 
overlooked need timestamps common shares 
shares written part single write operation 
approach described just sufficient derive lower bound number servers required store share 
lower bound change assumptions system model kind read write semantics realized 
minimum number servers needed maintain share point design framework dependent choice replication protocol underlying assumptions 
tolerate leakage faults byzantine faults crash faults servers required approach 
servers required 
servers faulty 
inefficient terms number storage servers required 
storage blowup server size share size encoded secret 
bare minimum number shares generated 
computation times secret sharing writes secret recovery reads clients kept small possible 
section describe framework balance strengths weakness direct approach 
tradeoff number storage servers required storage blowup server total number shares generated secret 
framework similar direct approach framework consists servers servers crash servers byzantine faulty servers exhibit leakage faults 
servers arranged form logical rectangular grid rows columns simplicity assumed multiple arrangement depicted 
servers row store shares 
tolerance crash byzantine failures achieved 
data confidentiality achieved secret sharing 
secret sharing done rows 
ito share assignment scheme assign shares rows 
terminology section rows participants shares distributed 
servers leakage faulty reveal shares adversary byzantine faulty servers shares rows disclosed adversary 
section threshold perfect secret sharing scheme tolerate faulty servers rows 
gives example servers arranged rectangular grid rows 
necessary tolerate byzantine fault leakage fault xor secret sharing scheme 
assume secret encoded shares 
bit secret xor corresponding bits shares 
share assignment function section servers row get shares servers row get shares servers row get shares servers row get shares 
choice ito share assignment scheme motivated fact share assigned multiple rows 
line principle replication shares achieve byzantine crash fault tolerance 
note direct approach shares replicated rows 
argued section share stored servers 
proposed framework share assigned rows servers 
share stored row servers 
gives inequality gives smallest rows framework 
vary range greater byzantine fault leakage fault row give adversary shares recover encoded data 
inequality obvious lower bound greater 
inequality rewritten give lower bound number servers required 
lower bound minimized maximum value substituting inequality gives requirement tolerating leakage faults byzantine faults crash faults number rows increased minimum number servers required decrease 
smallest number servers needed tolerate byzantine crash leakage faults reached 
column number servers number rows increase 
performance analysis grid sharing performance metrics section defines performance metrics relation fault tolerance security properties number rows described section 
min minimum number servers required smallest satisfying inequality multiple shares total number shares generated secret 
proposed framework shares storage blowup server defined ratio storage space taken server size data encoded 
proposed framework storage blowup factor xor secret sharing scheme size share size secret 
secret sharing secret recovery computation times secret sharing computation time time taken generate shares shares kb block data 
secret recovery computation time sum components 
component time taken determine correct shares shares responses share byzantine fault tolerance threshold 
assume best case incorrect servers evaluating component 
second component time taken compute data block correct shares shares determined 
size data block share kb 
measurements taken pentium ghz computer mb ram running linux 
measurements performed memory involved disk network effect grid dimension security fault tolerance thresholds performance metrics traded varying number rows secret sharing recovery computation times dependent shares dependent 
smaller fewer number shares shares lower secret sharing recovery computation times 
increased inequality minimum number servers required decrease 
affects min computation times opposing ways 
tradeoff space table 
table shows increasing number rows reduces minimum number servers required configuration increasing number shares shares needed store secret 
storage capacity required server increases increasing shares increase computation overheads users secret sharing secret recovery processes 
practical range limited storage blowup computation overheads 
row gets distinct share direct approach 
number shares shares generated minimum computation times small 
servers required configuration 
minimum number servers required lowered half servers 
fault tolerance security thresholds having fewer servers implies higher percentage faulty servers tolerated 
having fewer servers increase manageability system 
hand storage blowup server increases factor 
storage cost cheap worthwhile tradeoff 
computation times acceptable values 
arrive suitable tradeoff point number servers required storage blowup secret sharing recovery computation overheads 
table effect increasing number rows performance min shares storage blowup computation time server secret sharing secret recovery ms ms ms ms ms ms ms table effect increasing performance min servers min shares storage blowup computation time server secret sharing secret recovery ms ms ms ms ms ms effect fault thresholds servers section assume data storage servers available investigate relation fault tolerance security thresholds performance metrics 
consider cases 
case fix thresholds servers increase threshold servers 
tables show different cases 
combination fix number rows secret recovery computation time smallest possible configuration 
secret recovery computation time decreases increasing set smallest value min servers 
table increasing leakage fault threshold leads tolerable increase storage blowup server secret sharing recovery computation times high servers 
effect increasing byzantine fault threshold shown table adverse effect performance 
storage blowup server secret sharing recovery computation times increase rapidly increasing achieve high performance servers relatively small number byzantine failures tolerated 
hand framework accomodate crash failures substantial performance impact shown table 
increasing crash fault threshold servers leaves performance metrics unchanged 
storage blowup server tolerable computation throughputs maintained acceptable levels 
examples considered demonstrate framework tolerate crash failures little performance impact faults medium impact limited number byzantine faults 
maximum number faults tolerated equation 
servers leakage faults tolerated byzantine faults tolerated crash faults tolerated 
practical limits secret sharing recovery computation times storage blowup server severe restriction actual range faults tolerated 
notice high values byzantine fault threshold secret sharing recovery computation times smaller figures verifiable secret sharing table 
effect fault thresholds restriction secret recovery computation time increasing particular lead substantial increase secret sharing secret recovery computation times observed table table remove requirement having storage servers available impose requirement secret recovery computation time kb data ms secret recovery computation time important reads frequent writes case 
secret recovery computation time ms kb data approximately times slower decryption time rijndael encryption algorithm key sizes bytes bytes respectively shown table 
similar section consider cases 
case fix fault thresholds servers increase fault threshold servers 
tables show different cases 
combination fix number rows gives smallest min maintaining secret recovery computation time ms restricting secret recovery computation time limits number shares shares generated turn keeps storage blowup server reasonable 
table minimum number servers required min shows moderate increase increasing servers total servers servers faulty 
servers faulty leakage byzantine crash acceptable 
table minimum number servers required min increases rapidly byzantine fault threshold proposed framework suitable tolerating small number byzantine faults 
table computation throughputs storage blowup remain increasing crash fault threshold example considered 
servers crash faults tolerated servers crash faults tolerated 
note crash faults total servers servers faulty 
servers faulty standard property replica management protocols tolerate byzantine faults 
example faults crash faults number servers required reasonable 
tables low secret recovery computation times achieved acceptable requirements number servers storage blowup server 
ob table effect increasing performance min servers min shares storage blowup computation time server secret sharing secret recovery ms ms ms ms ms sec sec table effect increasing performance min servers min shares storage blowup computation time server secret sharing secret recovery ms ms ms ms ms ms ms served section number servers required tolerating crash leakage faults acceptable practical considerations restrict number byzantine faults tolerated 
note analyses number rows manipulated arrive optimum configuration 

discussion framework aims decrease computation overheads incurred secret sharing recovery storage blowup server increased increases communication overhead reads writes 
table shows computation communication overheads secret sharing writes secret recovery reads processes encryption verifiable secret sharing vss framework fault thresholds equal 
total time taken write operation composed parts secret sharing operation encryption shares establish secure channels client servers communication time 
similarly total time taken read operation consists communication time getting required number shares decrypting shares secure channels recovering secret 
communication time assumed network bandwidth client servers mbps 
note read write protocol simple client writes servers reads required number servers 
timestamps message authentication codes providing message integrity communication overlooked 
assumed client reliably gives server share writes eliminating need implement reliable broadcast protocol 
figures serve compare verifiable secret sharing schemes combination shamir feldman scheme encryption 
figures encryption take account overheads due storage retrieval cryptographic keys 
encrypted data need re encrypted achieve secure channels 
read write latencies small 
minimum number servers required storage blowup server 
data storage replication attractive option performance critical 
argued section security scheme relies secure maintenance cryptographic keys 
vss number servers required 
threshold shamir scheme servers leak shares adversary 
write read latencies vss slower encryption 
secret sharing recovery computation overheads account total write read latencies 
secret sharing recovery computation overheads decreased substantially communication overheads increased 
write read latencies vss 
number rows set write read operations faster vss respectively 
number servers required vss storage blowup server 
decreasing decreases read write latencies storage blowup expense requiring storage servers 
write read latencies comparable encryption times storage servers required 
increased storage blowup limitation storage space cheap 
fact large amounts inexpensive surplus storage available exploited applications surplus storage space store different versions objects subsequent intrusion diagnosis recovery 
note communication overheads replication protocols reduced techniques 
cryptographic hashes reading replicated data shown significantly reduce read latency 
investigates tradeoff computation communication overheads lossless compression algorithms 
cryptographic hashes compression algorithms reduce communication overheads increasing computation overheads reinforces need reducing computation overheads secret sharing recovery processes 

presents novel approach realizing secure fault tolerant data storage service collaborative environments 
key highlights perfect secret sharing schemes provide stronger security encryption techniques facilitate easier sharing data collaborative environments 
table effect increasing performance secret recovery computation time ms min shares storage blowup computation time server secret sharing secret recovery ms ms ms ms ms ms ms table effect increasing performance secret recovery computation time ms min shares storage blowup computation time server secret sharing secret recovery ms ms ms ms ms ms ms verifiable secret sharing schemes typically perfect secret sharing schemes achieve byzantine fault tolerance 
show verifiable secret sharing schemes incur substantial computation overheads slower rijndael encryption algorithm 
threshold perfect secret sharing scheme xor secret sharing scheme confidentiality manage share replication protocols byzantine crash fault tolerance 
computation overheads reduced drastically compared verifiable secret sharing schemes additional servers storage capacities server required 
example secret recovery computation time times slower rijndael decryption algorithm 
architectural framework called dimension varied tradeoff number servers required storage blowup secret sharing recovery computation times 
property shown valuable arriving optimum configurations different fault thresholds 
introduce new fault model consisting crash byzantine leakage faults analyses 
believe new fault model prove useful analyzing works common areas fault tolerance security 
secret recovery computation times times slower rijndael decryption show proposed framework provides fault tolerance leakage crash faults acceptable overheads 
practice resource limitations place restriction number byzantine server failures tolerated 
rough comparison overheads including read write latencies encryption replication verifiable secret sharing 
grid sharing incurs higher storage blowup server read write communication overheads higher vss 
despite lower write read latencies vss 
write read latencies comparable storing data private key encryption schemes achieved expense requiring greater number storage servers 

software library 
indigo 
anderson 
eternity service 
proceedings st international conference theory application cryptography 
blakley 
safeguarding cryptographic keys 
proceedings national computer conference 
chen goldberg gottlieb yianilos 
prototype implementation archival intermemory 
proceedings th acm international conference digital libraries 
chor goldwasser micali awerbuch 
verifiable secret sharing achieving simultaneity presence faults 
proceedings th ieee symposium foundations computer science 
fabre 
intrusion tolerance distributed computing systems 
proceedings th ieee symposium security privacy 
feldman 
practical scheme non interactive verifiable secret sharing 
proceedings th ieee symposium foundations computer science 
herlihy tygar 
replicated data secure 
crypto 
herzberg jarecki krawczyk yung 
proactive secret sharing cope perpetual leakage 
crypto 
ito saito 
secret sharing scheme realizing general access structure 
proceedings ieee global communication conference 
iyengar cahn jutla garay 
design implementation secure distributed data repository 
proceedings th ifip international information security conference 
kong sun ahamad 
agile store experience quorum data replication techniques adaptive byzantine fault tolerance 
proceedings international symposium reliable distributed systems 
table effect increasing performance secret recovery computation time ms min shares storage blowup computation time server secret sharing secret recovery ms ms ms ms ms ms ms ms ms ms table comparison encryption verifiable secret sharing kb data 

storage overhead writes overhead reads coding blowup encryption encryption min shares secret comm 
secret comm 
scheme sharing secure time total sharing secure time server channels channels total encryption ms ms ms ms vss ms ms ms ms ms ms ms rows ms ms ms ms ms ms rows ms ms ms ms ms ms rows ms ms ms ms ms ms rows ms ms ms ms ms ms ms rows ms ms ms ms ms ms ms kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage 
proceedings th asplos 
lakshmanan ahamad 
responsive security stored data 
ieee transactions parallel distributed systems 
marsh schneider 
robust secure secret distribution system 
ieee transactions dependable secure computing 
naor wool 
access control signatures quorum secret sharing 
ieee transactions parallel distributed systems 
rabin 
efficient dispersal information security load balancing fault tolerance 
journal acm 
shamir 
share secret 
communications acm 
strunk goodson soules ganger 
self securing storage protecting data compromised systems 
proceedings th symposium operating systems design implementation 
waldman rubin cranor 
publius robust tamper evident censorship resistant web publishing system 
proceedings th usenix security symposium 
schwan 
efficient data exchange configurable compression 
proceedings th international conference distributed computing systems 
wong 
decentralized recovery survivable storage systems 
phd thesis carnegie mellon university 
wylie strunk ganger te khosla 
survivable information storage systems 
ieee computer 
