tree efficient access method similarity search metric spaces pa ciaccia deis cnr marco patella deis cnr bologna italy bologna italy deis unibo deis unibo pave cnuce cnr italy iei pi cnr new access method called tree proposed organize search large data sets generic metric space object proximity defined distance function satisfying positivity symmetry triangle inequality postulates 
detail algorithms insertion objects split management keep tree balanced heuristic split alternatives considered experimentally evaluated 
algorithms similarity range nearest neighbors queries described 
results extensive experimentation prototype system reported considering performance criteria number page number distance computations 
results demonstrate tree extends domain applicability traditional vector spaces performs reasonably high dimensional data spaces scales case growing files 
need manage various types data stored large computer repositories drastically permission copy fee part material granted provided copies distributed direct commercial advantage vldb copyright notice title publication date appear notice copying permission large data base endowment 
copy republish requires fee special permission endowment 
proceedings rd vldb conference athens greece increased resulted development multimedia database systems aiming uniform management voice video image text numerical data 
research challenges multimedia technology entails including data placement presentation synchronization content retrieval plays dominant role 
order satisfy information needs users vital importance effectively efficiently support retrieval process devised determine portions database relevant users requests 
particular urgent need indexing techniques able support execution similarity queries 
multimedia applications typically require complex distance functions quantify similarities multi dimensional features shape texture color fef image patterns vm sound text fuzzy values set values sequence data afs frm multi dimensional spatial access methods sams tree gut variants srf considered index data 
applicability sams limited assumptions structures rely 
objects indexing purposes represented means feature values multidimensional vector space 
dis similarity objects distance function introduce correlation cross talk feature values fef 
precisely metric euclidean distance 
furthermore performance point view sams assume comparison keys feature values trivial operation respect cost accessing disk page case multimedia applications 
consequently attempt design structures done reduce number distance computations 
general approach similarity indexing problem gained popularity years leading development called metric trees see 
ric trees consider relative distances objects absolute positions multi dimensional space organize partition search space just require function measure distance dissimilarity objects metric see section triangle inequality property applies prune search space 
effectiveness metric trees clearly demonstrated chi bri current designs suffer intrinsically static limits applicability dynamic database environments 
contrary sams known metric trees tried reduce number distance computations required answer query paying attention costs 
article introduce paged metric tree called tree explicitly designed integrated access methods database systems 
demonstrate possibility implementing tree gist generalized search tree framework allows specific access methods added extensible database system 
tree balanced tree able deal dynamic data files require periodical 
tree index objects features compared distance functions fit vector space metric considerably extends cases efficient query processing possible 
design tree inspired principles metric trees database access methods performance optimization concerns cpu distance computations costs 
providing preliminary background section section introduces basic tree principles algorithms 
section discuss available alternatives implementing split strategy manage node overflows 
section presents experimental results 
section concludes suggests topics research activity 
preliminaries indexing metric space means provide efficient support answering similarity queries queries purpose retrieve db objects similar query object dis similarity objects measured spe cific metric distance function formally metric space pair domain feature values indexing keys total distance function properties 
symmetry 
non negativity 
oz triangle inequality principle basic types similarity queries range query nearest neighbors query 
definition range query object maximum search distance range query range selects indexed objects oj oj 
definition nearest neighbors lnn query object integer nn query nn selects indexed objects shortest distance attempts tackle difficult metric space indexing problem 
fastmap algorithm fl transforms matrix pairwise distances set low dimensional points indexed sam 
fastmap assumes static data set introduces approximation errors mapping process 
vantage point vp tree chi partitions data set distances objects respect vantage point 
median value distances separator partition objects balanced subsets procedure recursively applied 
mvp tree extends idea multiple vantage points exploits pre computed distances reduce number distance computations query time 
gnat design bri applies different called generalized hyperplane partitioning style 
basic case objects chosen remaining objects assigned closest object 
obtained subsets recursively split necessary 
organizations build trees means top recursive process trees guaranteed remain balanced case insertions deletions require costly prevent performance degradation 
order simplify presentation refer object feature value object 
tree research challenge led design tree combine advantages balanced dynamic sams capabilities static metric trees index objects features distance functions fit vector space constrained metric postulates 
tree partitions objects basis relative distances measured specific distance function stores objects fixed size nodes correspond constrained regions metric space 
tree fully parametric distance function function implementation black box tree 
theoretical application background tree thoroughly described 
article mainly concentrate implementation issues order establish basis performance evaluation comparison structure tree nodes leaf nodes tree store indexed database objects represented keys features internal nodes store called routing objects 
routing object database object routing role assigned specific promotion algorithm see section 
routing object associated pointer denoted ptr root sub tree called tree 
objects covering tree distance 
called covering radius forms part entry particular tree node 
routing object associated distance parent object routing object node entry stored 
obviously distance defined entries root tree 
general information routing object entry summarized table 
feature value routing object entry database object oj leaf quite similar routing object covering radius needed pointer field stores actual object identifier oid provide access object possibly resident separate data prevent variable size nodes done tree bkk :10.1.1.102.7240
simplicity consider possibility 
file summary entries leaf nodes structured follows 
oj oid oj oj oj feature value db object object identifier distance oj parent processing similarity queries presenting specific algorithms building tree show information stored nodes processing similarity queries 
performance search algorithms largely influenced actual construction tree correctness logic search independent aspects 
algorithms objective reduce number accessed nodes number distance computations needed execute queries 
particularly relevant search turns cpu bound case computationally intensive distance functions 
purpose information concerning pre computed distances stored tree nodes oi oi effectively apply triangle inequality 
range queries query range selects db objects oj 
algorithm rs starts root node recursively traverses paths excluded leading objects satisfying inequality 
rs node query object search parent object node leaf id compute rs ptr id compute add oid oj result accessing node distance parent object computed possible prune sub tree computing new distance 
condition applied pruning follows 
lemma op object oj oj 
safely pruned search 
course tree primary data organization objects stored leaves tree 
lemma applied avoid distance computations fact oj oj triangle inequality oj def 
covering radius oj 
hypothesis result follows 
order apply lemma distance computed 
avoided advantage result 
lemma 
direct consequence triangle inequality guarantees hold 
optimization principle applied leaf nodes 
experimental results see section show technique save distance computations 
case distances necessary compute dealing root node undefined 
nearest neighbor queries algorithm retrieves nearest neighbors query object assumed objects indexed tree 
branch bound technique quite similar designed trees utilizes global structures priority queue pr elements array nn execution contains result 
pr queue pointers active sub trees sub trees qualifying objects 
pointer root sub tree lower bound distance object kept 
lower bound dmin max object distance 
bounds function extract pr node examined 
pruning criterion dynamic search radius distance current th nearest neighbor order nodes visited affect performance 
heuristic criterion implemented function select node lower bound minimum 
experimental observations criteria lead better performance 
pr priority queue node lin min lin 
considering entries pr remove entry oz pr return ptr execution th entry nn array value loid oj oj th nearest neighbor distance value th entry denoted dk largest distance value nn 
clearly dk plays role dynamic search radius sub tree dmin dk safely pruned 
entries nr array initially set oid undefined di 
search starts internal nodes accessed idea compute sub tree upper bound distance object upper bound set dmoz consider simplest case sub trees ja land min ora 
op guarantees object distance exists pruned search 
bounds inserted appropriate positions nn array just leaving oid field undefined 
algorithm 
query object integer pr ct nn pr method implements search logic 
internal node determines active sub trees inserts pr queue 
needed calls rn update function specified er orm ordered insertion rn array receives back possibly new value dk 
remove pr sub trees dmin lower bound exceeds dk 
similar actions performed leaf nodes 
cases optimization reduce number distance computations means pre computed distances parent object applied 
node query object integer parent object node leaf id dk compute dmi dk add pr dk dk nn update remove pr entries dmin dk leaf vo dk compute dk dk oid oj remove pr entries dmin dk building tree algorithms building tree specify objects inserted deleted node overflows underflows managed 
due space limitations deletion objects described article 
insert algorithm recursively descends tree locate suitable leaf node accommodating new object possibly triggering split leaf full 
basic rationale determine suitable leaf node descend level tree sub tree enlargement covering radius needed 
multiple sub trees property exist object closest chosen 
heuristics tries obtain clustered sub trees haa beneficial effect performance 
routing object exists choice minimize increase covering radius 
tightly related heuristic criterion suggests minimize volume covered routing objects current node 
insert node entry tree entry set entries node leaf ac entries entry minimum entry minimum insert ptr entry leaf full store entry split entry determination set ni routing objects enlargement covering radius needed optimized saving distance computations 
lemma substituting setting derive id op follows 
ni 
note optimization applied root node 
split management dynamic balanced tree tree grows bottom fashion 
overflow node managed allocating new node level partitioning entries nodes posting promoting parent node np routing objects nodes 
root splits new root created tree grows level 
split node tree entry entries node ifn root parent stored np node allocate nev node promote jv op partition hf opa store nl entries nz entries current root allocate new root node np store entry np replace entry entry node np full split store entry op promote method chooses specific criterion routing objects inserted parent node np 
partition method divides entries node set disjoint subsets nl nz stored nodes respectively 
specific implementation promote partition methods defines call split policy static metric tree designs relying specific criterion organize objects tree offers possibility implementing alternative split policies order tune performance depending specific application needs see section 
regardless specific split policy semantics covering radii preserved 
split node leaf covering radius promoted object say opl set opl ma oj lo overflow occurs internal node opl max ior ni guarantees oj object 
holds pair objects sum covering radii opa minimum 
split policies ideal split policy promote objects partition objects regions minimum volume minimum overlap 
criteria aim improve effectiveness search algorithms having small low volume regions leads clustered trees reduces amount indexed dead space space object having small possibly null overlap regions reduces number paths traversed answering query 
minimum volume criterion leads devise split policies try minimize values covering radii minimum overlap requirement suggests fixed values covering radii distance chosen objects maximized requirements quite standard sams possible high cpu cost computing distances taken account 
suggests naive policies random choice routing objects execute distance computations worth considering 
choosing routing objects promote method determines set entries objects promoted stored parent node 
specific algorithms consider classified confirm original parent object role 
definition confirmed split policy chooses promoted objects say object parent object split node 
terms confirmed split policy just extracts region centered second routing object region remain centered 
general simplifies split execution reduces number distance computations 
alternatives describe implementing promote selected subset set experimentally evaluated 
minimum sum radii algorithm complex terms distance computations 
considers possible pairs objects partitioning set entries promotes note detailed knowledge distance function impossible quantify exact amount overlap non disjoint regions metric space 
similar minimizes maximum radii 
acronym stands maximum lower bound distance policy differs previous ones uses precomputed stored distances 
confirmed version algorithm determines farthest object random variant selects random way object 
smart strategy fast performance policies 
sampling policy iterated sample objects size 
pairs objects sample entries distributed potential covering radii established 
pair resulting maximum covering radii minimum selected 
case confirmed promotion different distributions tried 
sample size experiments set th node capacity 
distribution entries set entries routing objects problem efficiently partition subsets nl nz 
purpose consider basic strategies 
idea generalized hyperplane decomposition leads unbalanced splits second obtains balanced distribution 
shortly described follows 
generalized hyperplane assign object oj nearest routing object oj oj assign oj nl assign oj nr 
balanced compute oj oj oj repeat empty assign nl nearest neighbor remove assign nz nearest neighbor remove depending data distribution way routing objects chosen unbalanced split policy lead better objects partitioning due additional degree freedom obtains 
remarked obtaining balanced split sams forces enlargement regions necessary dimensions metric space consequent increase covering radius propagate dimensions 
experimental results section provide experimental results performance tree processing similarity queries 
implementation gist package uses constant node size kbytes 
influence results node capacity inversely related dimensionality data sets investigate effect changing node size 
tested split policies described section evaluated variety experimental settings 
gain flexibility needed comparative analysis experiments synthetic data sets report 
data sets obtained procedure described generates clusters dim vector space 
experiments number clusters variance clusters centers uniformly distributed shows sample 
distance evaluated metric leads hyper cubic search covering regions 
graphs concerning construction costs obtained averaging costs building trees results performance query processing averaged queries 
policy identified suffix designates non confirmed policy see definition 
value entry pair refers distance computations cpu cost second value page reads costs 
important observation balanced leads considerable cpu overhead increases costs 
depends total volume covered tree sum volumes covered routing objects shown volume overhead lines table 
instance data sets balanced generalized hyperplane random policy leads tree covered volume times larger 
results split policies generalized hyperplane 
effect dimensionality consider increasing dimensionality data set influences performance tree 
number indexed objects io graphs 
shows split policies compute number distances building tree number decreases dim grows 
explanation increasing dim reduces node capacity beneficial effect numbers distances computed insertion split algorithms 
reduction particularly evident cpu split costs grow square node capacity 
costs shown inverse trend grow space dimensionality 
explained reduction node capacity 
fastest split policy random slowest surprisingly 
sample data set experiments balanced vs unbalanced split policies compare performance balanced generalized hyperplane implementations partition method see section 
table shows overhead balanced policy respect corresponding unbalanced process range queries side imm dim lo objects 
similar results obtained larger dimensionalities policies shown 
table figures confirmed split distance camp 
building tree costs building tree sampling lb dist random dim volume 


dim volume 
dist 
table balanced vs unbalanced split policies cpu shows quality tree construction measured average covered volume page depends split policy complexity criterion cheap policy effective 
average covered volume page performance lo nn query processing considering distance selectivities shown figures respectively distance selectivity ratio computed distances total number objects 
processing lo nn queries volume overheads cause reduced page capacity leads larger trees 
considered range dim values node capacity varies factor coincides ratio costs dim costs dim 
distance selectivity differences emerge high values dim favor exhibit moderate performance degradation 
policies complexity results discarded subsequent analyses 
scalability major challenge design tree ensure scalability performance respect size indexed data set 
addresses aspects efficiently building tree performing similarity queries 
table shows average number distance computations operations inserted object data sets size varies range lo 
results refer random policy similar trends observed policies 
moderate increase average number distance computations depends growing height tree higher density indexed objects clusters 
number clusters kept fixed regardless data set size 
figures show cpu distance computations lo nn search costs grow logarithmically number objects demonstrates tree scales data set size dynamic management algorithms deteriorate quality search 
emphasized behavior peculiar tree known metric trees intrinsically static 
distance selectivity lo nn queries interesting observations done results 
policies non confirmed promotion perform better confirmed policies costs especially high dimensions save attributed better object clustering policies obtain 
costs increase dimensionality mainly cl processing io nn queries relative behaviors split policies figures show cheap policies random avg 
dist camp 
avg 
table average number distance computations building tree split policy distance computations lo nn queries penalized high node capacity arises indexing points 
higher effective complex split policies 
number alternatives objects promotion grows high values probability cheap policies perform choice considerably decreases 
comparing tree tree final set experiments compares tree tree 
tree implementation available gist package 
definitely deeply investigate merits drawbacks structures provide results obtained access method known largely database systems 
furthermore tree intrinsically wider applicability range consider important evaluate relative performance traditional domains access methods 
results figures compare cpu costs respectively build tree tree policies 
trend graphs tree confirms observed influence node capacity see figures 
graphs emphasize different perfomance trees trees terms cpu costs structures similar building costs 
distance computations building tree tree figures show search costs square range queries side mm 
observed costs tree higher tree variants 
order fair comparison cpu costs shows tree split policy graph labelled non opt optimization reducing number distance computations see lemma applied 
graphs show optimization highly effective saving distance computations similar results obtained nn queries 
note optimization tree efficient tree 
results remind far providing detailed comparison trees trees anyway see tree competitive access method indexing data vector spaces 
processing range queries costs building tree tree distance selectivity range queries tree original index storage structure major innovative properties paged balanced dynamic secondary memory structure able index data sets generic metric spaces similarity range nearest neighbor queries performed results ranked respect query object query execution optimized reduce number page reads number distance computations suitable high dimensional vector data 
experimental results show tree achieves primary goal dynamicity consequently scalability size data sets generic metric spaces 
analysis available split policies suggests proper choice reflect relative weights cpu distance computation costs may 
possibility tuning tree performance respect cost factors highly dependent specific application domain considered analysis metric trees 
implementation gist package clear tree effectively extend set access methods database system current planned research includes support complex similarity queries variable size nodes perform splits parallelization cpu loads 
real life applications fingerprint identification protein matching considered 
funded ec esprit ltr proj 
hermes 
supported pm 
afs agrawal faloutsos swami 
efficient similarity search sequence databases 
fodo pp 
chicago il oct 
springer lncs vol 

bkk berchtold keim :10.1.1.102.7240
kriegel 
tree index structure highdimensional data 
nd vldb pp 
mumbai bombay india sept 
beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
acm sigmod pp 
atlantic city nj may 
implementing tree postgresql system 
bri chi fef fl frm gut jd srf vm ozsoyoglu 
indexing high dimensional metric spaces 
acm sigmod pp 
tucson az may 
brin 
near neighbor search large metric spaces 
st vldb pp 
zurich switzerland sept 
chiueh 
content image indexing 
th vldb pp 
santiago chile sept 
faloutsos equitz flickner niblack petkovic barber 
efficient effective querying image content 
intell 

sys july 
faloutsos 
lin 
fastmap fast algorithm indexing data mining visualization traditional multimedia datasets 
acm sigmod pp 
san jose ca june 
faloutsos ranganathan manolopoulos 
fast subsequence matching time series databases 
acm sigmod pp 
minneapolis mn may 
guttman 
trees dynamic index structure spatial searching 
acm sigmod pp 
boston ma june 
hellerstein naughton pfeffer 
generalized search trees database systems 
fst vldb zurich switzerland sept 
jain dubes 
algorithms clustering data 
prentice hall 
roussopoulos kelley vincent 
nearest neighbor queries 
acm sigmod pp 
san jose ca may 
sellis roussopoulos sos 
rt tree dynamic index multidimensional objects 
th vldb pp 
brighton england sept 
uhlmann 
satisfying general proximity similarity queries metric trees 
inf 
proc 
lett nov 
manolopoulos 
dynamic inverted quadtree structure pictorial databases 

sys sept 
wold blum 
content classification search retrieval audio 
ieee multimedia 
ciaccia 
tree dynamic index similarity queries multimedia databases 
tr hermes es ltr project 
available url ced gr hermes 

