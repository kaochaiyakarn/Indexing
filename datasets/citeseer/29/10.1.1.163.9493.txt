implementing range queries decentralized balanced tree dhts nuno lopes carlos department informatics university braga portugal range queries retrieving keys range important add dhts rely exact key matching lookup 
support range queries way tree algorithm decentralized balanced tree runs dht system 
algorithm tree design efficiently stores clustered data maintaining balanced load hosts 
internal structure balanced tree suited range queries operations data distributions easily handles clustered data losing performance 
analysed evaluated algorithm simulated environment show operation scalability insertions queries 
show system design imposes fixed penalty dht access cost inherits scalability properties chosen underlying dht 
dht systems efficient distributed dictionary implementations offering scalable robust framework efficiently locates objects key :10.1.1.1.5939
efficiency achieved exact key matching lookup interface 
discrete key lookup interface uses hash function key value locate objects 
hash function removes locality property keys restricts range queries 
range query consists retrieving keys fall specific range interval 
range query desired feature data indexed contiguous values consider example numeric spatial coordinates 
previous systems offered range query feature specially designed structures building top generic dhts 
class systems bound particular basic storage structure offer limited solution may efficient dht systems 
second class systems building tree structure generic dht flexible choice 
building generic dht choose best dht implementation available system maintaining range query functionality 
structures available literature prefix hash tree pht distributed segment tree dst sensitive clustered data :10.1.1.60.5834:10.1.1.130.853
clustered data common real data sets particular data depicts geographical placement items tied human activity 
instance concentration wifi access points clustered cities roads sharing access point locations querying nearby access points yield response depicting clustered data :10.1.1.60.5834
population concentration patterns clustered data typically follows powerlaw distribution combination power laws centered focus points 
common setting depicts higher density key regions data sparsely distributed key domain 
show decentralize balance tree deb tree algorithm algorithm tree design offers structure suitable storing clustered data block oriented storage case dht supporting range queries loss performance 
algorithm capable running top generic dht incurring significant overhead 
insertions reduced complexity terms dht operation requests caching clients 
dht request cost depends dht implementation selected 
sense scalability tree design closely follows scalability properties dht 
query cost depends data stored index range size 
additionally possible parallelize query operation reducing latency logarithmic factor stored data size terms dht operations 
related related divided groups range query systems specific underlying struc tures range query systems tree structure generic dht interface 
due space restrictions focus group provide brief mention systems group 
mercury supports multi attribute range queries circular overlay similar chord key hashing locality preserved :10.1.1.102.473
skip graphs generalization skip lists nodes part distributed linked lists form distributed binary tree 
systems specific routing algorithm achieve data locality hop dht algorithms dht extensions efficiently handling load balancing churn 
chawathe proposed prefix hash tree pht building trie structure generic dht :10.1.1.60.5834
main difference pht deb tree structure sensible clustered data 
pht order adapt clustered data places leaves different tree levels causing irregular tree structure impact query performance 
data placed tree nodes prefix value block identification scheme 
identification scheme independent data possible access tree block directly knowing tree structure advance 
hand independency data block ids create overloaded blocks storing large number objects share common prefix value 
algorithm adapts efficiently clustered data distributions creating balanced tree bounded block sizes directly access block initial tree traversal 
zheng distributed segment tree dst algorithm running generic dht :10.1.1.130.853
binary tree structure static tree nodes pre defined range limit 
static range limits incapable handling clustered data properly possibly generating empty nodes depending key distribution 
just pht block identification depend data allowing direct access tree node 
algorithm allows access block directly feature queries reduce number accesses replicating data additional tree nodes 
design efficient small queries cost storage 
clustered data queries small range produce large results requiring additional accesses 
tree algorithm assigns node ranges dynamically data distribution tends create storage distribution data presence strong clustering 
furthermore queries redundant accesses tree access minimum nodes necessary retrieve complete answer 
decentralized balanced tree section review deb tree algorithm described show adapted generic dht support range queries 
tree structure tree structure tree design leaf internal blocks 
leaf blocks contain data items stored tree internal blocks contain children blocks 
leaf blocks tree level leaf blocks distance root 
feature creates logarithmic bound number block accesses reach leaf block 
maintain high availability tree structure maintenance block keeps block points consecutive block tree level 
block size bounded block maximum size parameter block items items root block maximum bound 
additionally block contains limit interval minimum maximum values specifies range data block responsible 
dht mapping single deb tree store entire index data 
support multiple spaces dimensions obtained methods multiple trees space filling curve function 
support multiple trees requires capability distinguish blocks different trees dht key domain 
single tree store compare values range intervals linear space 
storing dimensional data system possible mapping dimensional space single dimension space space filling curve :10.1.1.60.5834
tree block stored dht host responsible hash value block id block ids generated dynamically globally unique dht key domain collide force change existing identification 
require moving block data dht updating blocks pointing 
block identification defined tuple level level field identifies tree level block distinguishes block inside level 
operation request model access block data uses typical put get dht interface 
modification block content requires cycle procedure caller get execute put operations 
block access get operation issued retrieve block data dht caller 
data modified additional put operation issued store new data dht 
design pht dst implement tree structure top generic dht opendht system 
previous structures deb algorithm support concurrency operations 
operate correctly algorithm requires mechanism detect concurrent modifications object case block content 
propose simple extension get put semantics include logical time stamp parameter concurrent puts detected prevented happening 
extension follows 
get current time stamp integer returned data 
put caller sends increased time stamp value indicating modification 
caller new value key dht host receiving put request detect puts concurrent abort second 
index user interface section describe index operations available user insertions removals range queries 
user calls operations store retrieve data items system 
client host explicitly store data system retrieved range queries 
insertion removal insertion operation stores data item index 
data items consist fields location key places item space data item value fetched location contained inside range queries 
order insert data item tree insertion operation locate correct leaf block performing top traversal tree adding new data leaf content removal item tree identical insertion removal item leaf block 
leaf blocks get full caller perform split operation block transferring half data new block 
omit details split operation 
range queries range query interval consists retrieving items tree locations contained interval 
items stored leaf blocks limits intersect range interval 
blocks ordered limits tree level retrieving blocks phases locate leaf block limits contain follow block sequentially block interval greater tree block access requires get dht operation retrieve block content 
sequential procedure requires vertical tree traversal locate leaf leaf retrieval depends number stored items belonging range interval size query range 
reduce query latency possible parallelize block accesses having client retrieve simultaneously tree blocks belonging level intersect range interval 
procedure reduces latency logarithmic factor number stored items tree height maintaining number leaf accesses 
internal block caching user oriented operations insertions queries require tree top traversal root block reach target leaf block 
eliminate bottleneck upper level blocks caching internal blocks callers 
caching reduces topdown traversal cost maintaining operation correctness internal blocks serve location purposes 
furthermore stale cached versions caller succeeds finding correct block invalidates local cache passively requesting actual block 
simulation implemented deb tree algorithm custom simulator python 
basic dht functionality simulated local storage 
real dht platform opendht quite straightforward concurrency issue described 
simulation data synthetically generated uniform power law distributions order determine impact clustered data algorithm 
clustered case considered small number focus points clustering chosen uniformly random 
points randomly allocated left right focus points pareto distribution density kbk shape parameter frequency linear space fig 
data point distribution cluster configuration 
frequency fig 
log log rank order 
rank order point density set minimum making 
random value obtained distribution decremented transforming range added subtracted position focus point 
resulting data set mimics usual distribution population geographic linear space 
insertion insertion simulation consisted placing points linear space system sequentially determine adaptation algorithm clustered uniform data 
data distributions insertion points unif clust unif clust unif clust items block fig 
empirical cumulative distribution function number stored items block 
uniform distribution cluster distribution 
figures show details actual cluster sample 
shows concentration points linear space second shows rank ordered point densities 
observe clusters expected linear decrease point densities log log scale graphical signature power laws 
ran simulations maximum block sizes items repeated experiment times exclude random variations 
dht simulated assume dht hash function uniformly distributes blocks system hosts 
shows average number stored items block 
tree algorithm balances data perfectly see simulations block size different data distributions uniform clustered tend create identical block usage number stored items block varies block size single exception root block 
largest block size case shows clusters half block size full block size 
clustering due number inserted points large split blocks small fill completely 
greater number points line similar shape lines 
insert single item tree vertical tree traversal requiring access block level 
cost insertions equal tree height 
tree height defined expression log block size block data gets items gets size dist mean mean unif clust unif clust unif clust table simulation query set different storage distributions uniform clusters different block sizes items 
results measure mean standard deviation number dht gets ratio items retrieved versus number gets query 
number stored items 
measured tree heights simulations resulting levels trees block sizes items levels item block size case 
range query generated set range queries middle point range size middle point 
middle points generated uniform distribution linear space 
range size generated normal distribution mean standard deviation space length 
measured query performance number leaf blocks retrieved order obtain complete answer 
take account internal blocks cost constant queries equal dht accesses 
clients cache internal blocks locally removing height traversal cost 
furthermore queries parallelized tree level reducing query latency tree height number hops cost increased bandwidth 
table shows results simulations different insertion point distributions uniform distribution cluster distribution maximum block sizes items 
query set simulations 
measured mean standard deviation number dht get calls leaf blocks ratio items retrieved gets query 
insertion set simulations insertion data distribution simulations returned results matter block size average items uniform case average items clustered case 
block size increases see mean number dht gets necessary reply query decreases standard deviation larger blocks capable returning data 
mean ratio increases greater block capacity get request returns items 
ratio standard deviation increases meaning queries obtain increasingly different amounts items get query 
explained larger block capacity storage distribution size blocks distributed half full maximum size 
larger block capacities generate blocks spawning wider load variation reflected different number items block returns consequently ratio standard deviation 
table compares algorithm efficiency running query set point data created uniform distribution cluster distribution 
expected number gets query distributions 
standard deviation greater clustered case 
uniform distribution return approximate number items queries linear space whilst queries clustered distribution disparity number items returned depending density stored data query range area higher standard deviation 
item get ratio mean higher uniform case block sizes 
standard deviation contrary significantly smaller 
results show algorithm adapts perfectly storage data distribution 
running uniform data standard deviation low queries tend receive amount results 
running clustered data higher standard deviation shows algorithm returns different amounts data query set accordance clustered distribution data sparse regions highly dense regions 
show deb tree algorithm balanced trees easily provide scalable range query implementation generic dht systems 
solution induces distribution items dht block consequently balances storage network load hosts support dht 
considered opposite data sets data uniformly distributed space exhibiting highly clustered data 
scenarios induce indistinguishable patterns data allocation dht depicting similar 
considered effects typical range query scenario 
users query items wifi access points spatial distance current location 
choice maximum block size driving factor dictates number dhts requests needed usage pattern 
optimal size take account expected usage pattern number stored items combined effects caching concurrent dht gets 
approach presents clear advance previous systems providing design insensitive presence clustered data building shelf dht middleware 

stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
proceedings acm sigcomm conference 

rowstron druschel pastry scalable decentralized object location routing large scale peer peer systems 
proceedings th ifip acm international conference distributed systems platforms germany 
ratnasamy francis handley karp shenker scalable content addressable network 
proceedings acm sigcomm conference 

rhea geels roscoe kubiatowicz handling churn dht 
technical report ucb csd university california berkeley 
gupta liskov rodrigues efficient routing peer peer overlays 
proceedings st symposium networked systems design implementation nsdi 
march 
bharambe agrawal seshan mercury supporting scalable multi attribute range queries 
proceedings sigcomm 
august 
aspnes shah skip graphs 
fourteenth annual acm siam symposium discrete algorithms 

zhang krishnamurthy wang distributed trees peer peer systems 
proceedings th international workshop peer peer systems iptps new york usa 
chawathe ratnasamy lamarca hellerstein shenker case study building layered dht applications 
proceedings acm sigcomm conference 

gao steenkiste adaptative protocol efficient support range queries dht systems 
proceedings th ieee int 
conference network protocols icnp 

zheng shen li shenker distributed segment tree support range query cover query dht 
electronic publications th international workshop peer peer systems iptps california usa 
zipf human behaviour principle effort 
addison wesley 
knuth sorting searching 
second edn 
volume art computer programming 
addison wesley 
cormen leiserson rivest algorithms 
mit press 
lopes distributed balanced trees dhts building large scale indexes 
technical report university 
johnson krishna lazy updates distributed data structures 
proceedings acm sigmod international conference management data 

sean rhea karp kubiatowicz ratnasamy shenker stoica yu opendht public dht service uses 
proceedings sigcomm 

