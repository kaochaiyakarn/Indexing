finding maximal repetitions word linear time roman french russian institute informatics applied mathematics moscow university moscow russia mail roman vertex inria msu ru gregory loria inria lorraine rue du jardin nancy france mail loria fr repetition word subword period half subword length 
study maximal repetitions occurring extended subword bigger period 
set repetitions represents compact way repetitions prove combinatorial result asserting sum exponents maximal repetitions word length bounded linear function implies particular linear number maximal repetitions word 
allows construct linear time algorithm finding maximal repetitions 
consequences applications results discussed related works 

repetitions periodicities words fundamental objects due primary importance word combinatorics various applications string matching algorithms molecular biology text compression 
notions repetitions studied precise start basic definitions 
recall period word smallest positive integer provided rational called exponent exponent integer number simply part done author visit loria inria lorraine supported french ministry public education research 
author part supported russian foundation fundamental research russian federal program integration 
done joint project french russian institut applied mathematics informatics moscow university written called integer power power tandem arrays 
word exponent called square tandem repeat 
word integer power called primitive 
general word period exponent written primitive word proper prefix call repetition word exponent equivalently period half word length 
problem addressed construct efficient algorithm identifying subwords word repetitions 
note interested characterizing occurrences repetitions word syntactically distinct repetitions cf 
clearly word may contain quadratic number repetitions 
represent compact way introduce notion maximal repetition 
maximal repetition word repetition extension letter right left yields word bigger period 
example subword word maximal repetition period subword 
maximal repetitions prefix period suffix period prefix period occurrences period 
maximal repetitions encode compact way repetitions word importance 
survey known algorithmic results searching repetitions word classical string matching problem see 
early proposed linear real time algorithm finding syntactically distinct maximal repetitions word 
independently crochemore described simple elegant linear algorithm finding square word checking word repetition free 
algorithm called run maximal periodicity special factorization word called factorization factorization lempel ziv decomposition 
linear algorithm checking word contains square proposed 
known may square occurrences word rooted squares considered integer power rooted primitive word 
example provided fibonacci words contain squares rooted exact formula 
implies hope construct linear algorithm explicitly find squares word number super linear 
different algorithms finding occurrences repetitions string 
note algorithms uses notion repetition 
crochemore proposed algorithm finding occurrences non extendable integer powers word rooted integer powers followed preceded occurrence 
asymptotically optimal bound number powers suffix tree technique apostolico preparata described algorithm finding right maximal repetitions repetitions extended right increasing period 
main lorentz proposed algorithm finds maximal repetitions time 
point optimality bound assumption unbounded alphabet restriction algorithm symbol comparisons 
factorization main proposed lineartime algorithm finds leftmost occurrences distinct maximal repetitions word 
far related works concerned kosaraju describes algorithm word finds position shortest square starting position 
claims generalization finds squares time number squares 
stoye gusfield proposed algorithms unified suffix tree framework 
results algorithm finds time branching tandem repeats 
terminology branching tandem repeats necessarily rooted square suffixes maximal repetitions 
stoye gusfield proposed different approach combining factorization suffix tree techniques 
goal achieved find linear time representative syntactically distinct square 
feasibility task supported result asserting linear number distinct squares words length arbitrary alphabet 
approach allows solve problems achieve results claimed 
far open question linear algorithm finding maximal repetitions exists 
concluding section main speculates algorithm exist 
question raised 
evidence support conjecture number maximal repetitions known linear 
provides argument 
part section prove combinatorial result asserting sum exponents maximal repetitions word linearly bounded 
obviously implies number maximal repetitions word linear contrasts bounds number rooted squares integer powers 
explains trade number repetitions word exponents fibonacci words example linear number maximal repetitions small exponent smaller 
linearity result show section maximal repetitions word linear time 
maximal repetitions characterize completely repetitive structure word allows solve related problems output squares word time output size find linear time branching tandem repeats determine linear time number repetitions exponent starting position word 
believe applications results discovered 

definitions basic results word denotes subword 
position word integer position defines factorization 
position letter denote 
say subword crosses position 
subword natural called period root clearly period iff equivalent definition see period iff 
word minimal period denote call period ratio called exponent denoted clearly root primitive thatis written consider repetition subword occurrence maximal repetition repetition maximal repetition repetition subword contains proper subword minimal period note repetition word extended unique maximal repetition 
basic result periods fine wilf theorem see theorem fine wilf periods period lemma states useful facts maximal repetitions sequel 
lemma distinct maximal repetitions period overlap length greater equal ii maximal repetitions periods overlap length greater equal 
repetition said period subword overlaps subword letters 
say repetition period right respectively left position meaning respectively subword denotes cardinality set logarithms binary base indicated 
estimating total size exponents maximal repetitions section prove main result asserting sum exponents maximal repetitions word arbitrary alphabet bounded linear function length word 
formally set maximal repetitions word andlet proceeding general case look fibonacci words numerous interesting combinatorial properties provide example test conjectures analyze algorithms words cf 
fibonacci words binary words defined recursively noted fibonacci word contains squares 
exact number squares fibonacci words obtained asymptotically golden ratio 
general words length contain squares fibonacci words contain asymptotically maximal number 
computed exact number maximal repetitions fibonacci words turned curiously number number distinct squares computed 
obtained approximate formula 
total sum exponents maximal repetitions fibonacci words linear length suggests hold general words 
turn general case state main result 
theorem proof lemma 
lemma set repetitions crossing frontier proof induction sufficient prove lemma repetition denote intersection intersection easy see difference prove theorem prove stronger statement 
theorem exist absolute positive constants full detailed proof theorem technical 
give high level description proof omitting tedious details presenting typical arguments 
assume loss generality sufficiently larger say function monotonically increasing induction take word length split proof major cases depending contains maximal repetition exponent case assume maximal repetitions exponent smaller write simplicity 
lemma set repetitions crossing frontier induction prove concentrate repetitions overlap letters letters 
lemma repetitions 
assume repetitions periods respectively 
assume consider non empty word 
observe subword occurs period away 
occurrences positions consider word 
observe period occurs prefix suffix maximal repetitions exponent bound 
contains subword length implies turning logarithms recall repetition consideration distinct period distinct value hand vary distinct values repetitions considered 
repetitions overlap letters letters proof similar contains subword length implies repetitions 
case repetitions overlap letters symmetrical 
conclude maximal repetitions remains show achieved picking sufficiently large constant proof case completed 
case turn case contain maximal repetition exponent write denote note denote split approximately equal parts 
assume big parts long 
formally find positions denote 
lemma repetitions crossing position repetitions crossing position part estimate number repetitions analyzed similarly 
goal prove general idea part split subclasses repetitions subclass distinct periods typically lemma 
upper bound number possible periods implies upper bound number repetitions subclass 
illustrate idea 
split subset repetitions period smaller equal subset repetitions period larger repetitions period right left lemma period length 
subsets distinct elements maximal repetitions crossing turn observation repetitions lie entirely inside contradict lemma ii 
repetition contains letters different split ties init mid 
illustration part 
prove proofs somewhat similar refer reader 
pick position middle consider repetitions letters left case symmetrical 
consider repetitions lemma assume consider word 
note letter right repetition note proper prefix part period word belongs starts period away 
occurrences starting positions see 
shift occurrences claim occurrences overlap length overlap prefix occurrence starting period overlap suffix ofthe occurrence starting see contradiction 
differ periods considered repetitions distinct belong interval considered rep 
conclude repetitions proving contain maximal repetitions rewritten part step estimate done induction 
direct induction argument leads subtle analysis 
split consecutive blocks length defined 
simplicity assume divides evenly possible remainder block affect analysis 
lemma set repetitions cross boundary blocks repetition period lemma ii maximal repetition inside period larger fixed position repetitions crossing position argument part 
second inequality obtained induction hypothesis denote exponent 
technical reasons assume case considered separately choose choice inequation transformed follows 
chosen term fact usingthe rewrite part count recall goal prove conclude induction argument 
estimating induction substituting left inequation replaced 
step estimate expression parentheses 
elementary calculus considerations estimation proved 
prove suffices prove recalling inequation satisfied choosing sufficiently large constant completes proof theorem 
theorem follows 
important corollary theorem maximal number maximal repetitions words length linearly bounded state theorem 
theorem 
finding maximal repetitions word section show theorems allow obtain linear time algorithms string matching problems 
linear time algorithm finding maximal repetitions word periods 
algorithm modification main algorithm finding leftmost occurrences distinct maximal repetitions turn idea factorization lempel ziv decomposition 
describe main algorithm 
definition arbitrary word 
factorization factorization defined inductively follows letter occurring immediately occur 
longest word prefix possibly overlapping occurrences 
example factorization word factorization call factors 
usefulness factorization explained theorem slight reformulation theorem 
theorem factorization maximal repetition 
theorem suggests partition maximal repetitions classes 
repetitions factor 
repetitions factor 
classification cover repetitions suffixes set empty appending new symbol ensures factor consists letter 
maximal repetitions verifying conditions called repetitions type respectively 
follows definition factorization repetition type occurrence left 
finding repetitions type guarantees finding distinct maximal repetitions particular leftmost occurrences distinct maximal repetitions 
describe repetitions type main algorithm 
assume factorization 
theorem find maximal repetitions word start suffix length word case length smaller 
show find general maximal repetition word start assume want find maximal repetitions word repetition belongs non exclusively classes repetitions period period note lemma maximal repetition period starting having period shows particular number repetitions linear 
similarly number repetitions having period linear number maximal repetitions start linear 
focus maximal repetitions period repetitions period symmetrically 
need auxiliary functions defined defined 
informally length longest prefix prefix length longest suffix 
theorem holds 
theorem exists maximal repetition period starts ends period iff 
ifthe inequality holds repetition 
function computed time linear time linear knuth morris pratt algorithm see 
maximal repetitions start computed time 
find repetitions type word main algorithm proceeds follows 
compute factorization 
computation done time suffix tree construction 
compute method maximal repetitions word suffix length 
computation takes time finding maximal repetitions type takes time 
note definition type step need repetitions strictly 
reason requirement repetition suffix may maximal repetition may extend right longer repetition 
hand maximal repetition step algorithm missed 
note algorithm may output maximal repetition times unboundedly times 
essential feature algorithm linear time finds repetitions type 
find maximal repetitions find addition repetitions type 
show done 
task greatly simplified fact repetition type occurs entirely inside factor earlier occurrence computation factorization store factor pointer earlier occurrence easily done suffix tree construction computation factorization remains linear time 
earlier occurrence andlet obviously repetition type occurring inside copy maximal repetition occurring inside shifted right 
proceed follows 
compute maximal repetitions type main algorithm 
sort basket sort lists list contains repetitions position 
note sort eliminate duplicates 
process lists increasing order sort repetitions basket sort lists initial position 
double sort repetitions initial position sorted inside list increasing order positions 
linear number repetitions type sort procedures take linear time 
find repetitions type 
store data structure 
internal position inside maximal repetitions starting position inside 
maximal repetitions starting position inside andthen shift right 
note repetitions may type previously repetitions type 
look list retrieve prefix consisting repetitions inside 
shift repetitions append modified copy prefix head list 
note data structure preserved appended repetitions position inside previously stored list type position outside 
process left right repetition missed 
recover repetitions type processed data structure contains repetitions types 
note retrieve prefix list corresponding position repetition prefix results new repetition type 
shows time spent processing lists proportional number newly repetitions 
theorem previous section states number maximal repetitions linear length word 
proves algorithm takes linear time 
set maximal repetitions algorithm linear time provides exhaustive information repetitive structure word 
allows easily extract repetitions types non rooted squares cubes integer powers 
tasks done time output size bounds obtained sophisticated algorithms 
example set branching tandem repeats notion studied 
terminology branching tandem repeats necessarily rooted square suffixes maximal repetitions 
authors conjecture maximal number branching tandem repeats word linearly bounded length 
theorem confirms conjecture maximal repetition contains branching tandem repeats total number clearly set maximal repetitions algorithm allows extract branching tandem repeats 
number linear finding branching tandem takes linear time 
application set maximal repetitions allows determine linear time number rooted integer powers exponent starting position word 
done 
position create coun ters initially set 
repetition increment interval rooted powers induced repetition start 
theorem number updates linear 
compute numbers powers starting character scan characters left right applying iterative procedure 
note algorithm extended necessarily rooted powers 
case increment increment theorem guarantees number updates linear 
note procedure easily modified order count arbitrary repetitions exponent repetitions centered position 

concluding remarks main drawback proof theorem allow extract reasonable constant factor linear bound 
constant factor quite small 
computer experiments suggest number maximal repetitions smaller sum exponents smaller binary alphabet 
interesting find simpler proof theorems implying small multiplicative constant linear bound 
experimental implementation algorithm described section mathieu giraud loria inria lorraine 
program tested biological sequences interesting long repetitions discovered 
expected algorithm turned fast 
bottleneck memory occupied suffix tree construction needed computing factorization 
strings characters easily processed 
apostolico preparata 
optimal line detection repetitions string 
theoretical computer science 
crochemore 
optimal algorithm computing repetitions word 
information processing letters 
crochemore 
recherche lin aire un carr 
comptes rendus acad 
sci 
paris math 
crochemore rytter 
text algorithms 
oxford university press 
crochemore rytter 
squares cubes efficient string searching 
algorithmica 
fraenkel simpson 
squares string contain 
combinatorial theory ser 

fraenkel simpson 
exact number squares fibonacci words 
theoretical computer science 
galil 
time space optimal string matching 
journal computer system sciences 
gusfield 
algorithms strings trees sequences 
cambridge university press 
moore smyth 
characterization squares fibonacci string 
theoretical computer science 

maximal repetitions words find squares linear time 
rapport interne laboratoire de recherche en informatique ses applications 
available www loria fr res activ html 

sum exponents maximal repetitions word 
rapport interne laboratoire de recherche en informatique ses applications 
available www loria fr res activ html 
kosaraju 
computation squares string 
crochemore gusfield editors proceedings th annual symposium combinatorial pattern matching number lecture notes computer science pages 
springer verlag 

combinatorics words volume encyclopedia mathematics applications 
addison wesley 
main lorentz 
algorithm finding repetitions string 
journal algorithms 
main lorentz 
linear time recognition square free strings 
apostolico galil editors combinatorial algorithms words volume nato advanced science institutes series pages 
springer verlag 
main 
detecting leftmost maximal periodicities 
discrete applied mathematics 
mccreight 
space economical suffix tree construction algorithm 
journal acm 

detection periodicities string matching real time 
journal soviet mathematics 
storer 
data compression methods theory 
computer science press rockville md 
stoye gusfield 
simple flexible detection contiguous repeats suffix tree 
farach colton editor proceedings th annual symposium combinatorial pattern matching number lecture notes computer science pages 
springer verlag 
stoye gusfield 
linear time algorithms finding representing tandem repeats string 
technical report cse computer science department university california davis 
ukkonen 
line construction suffix trees 
algorithmica 
