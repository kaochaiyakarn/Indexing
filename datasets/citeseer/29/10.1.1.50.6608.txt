array algorithm simultaneous multidimensional aggregates zhao computer sciences department university wisconsin madison zhao cs wisc edu prasad deshpande computer sciences department university wisconsin madison cs wisc edu jeffrey naughton computer sciences department university wisconsin madison naughton cs wisc edu computing multiple related group bys aggregates core operations line analytical processing olap applications 
gray gblp proposed cube operator computes group aggregations possible subsets specified dimensions 
rapid acceptance importance operator led variant cube proposed sql standard 
efficient algorithms relational olap rolap developed compute cube 
knowledge literature compute cube multidimensional olap molap systems store data sparse arrays tables 
molap algorithm compute cube compare leading rolap algorithm 
main reason fundamental difference data structures systems store data 
rolap systems example ms informix mc information advantage ia definition relational tables data structure 
means cell logically multidimensional space represented system tuple attributes identify location tuple multidimensional space attributes contain data value corresponding data cell 
returning example cell array represented tuple shoes july 
computing cube table requires generalization standard relational aggregation operators :10.1.1.144.1766
prior main ideas rolap computation efficient 
sort grouping operation dimension attributes bring related tuples sorting hashing 
grouping performed behalf sub aggregates partial grouping speed computation sub aggregate 
compute aggregate aggregate presumably larger base table 
mentioned cube array requires computing aggregates array 
example array dimensions abc need compute ab bc ac total aggregate 
naive approach compute aggregates initial abc array 
moment thought shows bad idea far efficient compute ab compute abc 
idea explored rolap cube computation literature :10.1.1.144.1766
look entire cube computation aggregates computed viewed lattice abc root 
abc children ab bc ac ac children forth 
compute cube efficiently embed tree lattice compute aggregate parent tree 
question arises tree computation 
multi pass multi way array algorithm optimal dimension ordering mt memory required calculated rule 
mt allocate required memory subtrees 
call subtrees incomplete subtrees 
need extra steps compute group bys included incomplete subtrees 
problem allocating memory optimally different subtrees similar described np hard :10.1.1.144.1766
heuristic allocating memory subtrees root right left order 
example order subtrees considered bc ac ab 
heuristic bc largest array want avoid computing multiple passes 
multi pass algorithm listed create dimension order add list 
response time memory size kb multi way array alg 
offset comp multi way array alg 
various memory size varying number dimensions discuss varying number dimensions compare array algorithm rolap algorithm 
rolap vs multi way array algorithms section investigate performance molap algorithm previously published sort rolap algorithm cases 
overlap method benchmark comparison :10.1.1.144.1766
rolap data stored tables 
computing cube table produces set result tables representing group bys 
hand molap data stored sparse multidimensional arrays 
cube array produce array group bys 
proven dimension order algorithm minimizes total memory requirement algorithm 
performance results show multi way array method performs better previously published rolap algorithms 
fact performance benefits multi way array method substantial tests faster load array table cube array dump array tables cube table directly 
suggests algorithm valuable rolap molap systems necessary system support arrays persistent storage type order obtain performance benefits algorithm 
agarwal agrawal deshpande naughton sarawagi ramakrishnan :10.1.1.144.1766
computation multidimensional aggregates 
proceedings nd international conference large databases mumbai bombay 
arbor software 
role multidimensional database data warehousing solution 
