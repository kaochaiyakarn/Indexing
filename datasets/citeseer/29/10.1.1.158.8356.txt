line decision theoretic golog interpreter 
mikhail soutchanski dept computer science university toronto toronto mes cs toronto edu consider line decision theoretic interpreter incremental execution golog programs 
new interpreter intended overcome limitations line interpreter proposed boutilier 
introduce new search control operators mentioned golog programs line interpreter takes advantage save computational efforts 
addition sensing actions designed identify outcomes stochastic actions consider new representation sensing actions may return binary real valued data run time 
programmers may sensing actions explicitly golog programs results sensing required evaluate tests 
representation sensing actions introduce allows regression computationally efficient mechanism evaluation tests 
describe implementation line incremental decision theoretic golog interpreter prolog 
implementation successfully tested robot manufactured rwi 
aim provide new line architecture designing controllers autonomous agents 
specifically explore controllers mobile robots programmed dt golog extension high level programming language golog 
dtgolog aims provide seamless integration decision theoretic planner markov decision processes expressive set program control structures available golog 
motivation research provided boutilier ask reader consult additional technical details arguments model planning programming manage conceptual complexity devising controllers mobile robots 
dtgolog interpreter described boutilier line interpreter computes optimal conditional policy probability executed successfully expected utility policy 
semantics dtgolog program defined predicate starting situation finite horizon 
policy returned line interpreter golog program sequential composition agent actions sensing actions serve identify real outcome stochastic action conditionals situation calculus formula provides test condition decide branch policy agent take result sensing 
interpreter looks ahead choice point branch program say alternative primitive actions choice proceeds backwards recursively deciding choice point branch optimal 
assumed line dtgolog interpreter computed optimal policy policy robotics software control real mobile robot 
line architecture number limitations 
imagine interested executing program sub programs large nondeterministic dtgolog programs designed solve independent decision theoretic problems supposed start certain set states perspective important policy reach states 
intuitively case interested computing optimal policy corresponds executing real world computing executing optimal policy line interpreter return optimal policy corresponds program spending computation time necessary compute execute relevant decisions execution second limitation evident addition sensing actions serving identify outcomes stochastic actions need explicitly include sensing actions program sensing actions characterized stochastic actions fixed finite set outcomes 
imagine program 
sensing action returns time measurement quantity current coordinates battery voltage condition depends real data returned sensors program sub programs choice operator binds variables 
test grounds current time 
intuitively want compute optimal policy corresponding line execute real world sense compute execute optimal policy corresponds conditional golog program brackets 
line interpreter able compute optimal policy program includes explicit sensing actions information available possible results sensing 
note nondeterministic choice operator occurs front program confused policies computed interpreter 
propose compute execute optimal policies online new incremental decision theoretic interpreter 
works step step mode 
golog program starting situation computes optimal policy program remains action executed 
stage action executed real world 
interpreter gets sensory information identify outcome occurred stochastic action may require doing sequence sensing actions line 
action possibly sensing actions performed results new situation 
cycle computing optimal policy remaining program executing action getting sensory information necessary repeats program terminates execution fails 
context incremental line execution define new programming operator limits scope search performed interpreter 
program computational efforts saved interpreter computes optimal policy programmer writes line incremental interpreter compute execute step step golog program looking ahead decisions need programmer knows sensing action necessary evaluate condition program 
required information obtained incremental interpreter proceed execution conditional 
sensing action different outcomes approach gives computational advantages line approach computing optimal policy 
incremental interpretation decisiontheoretic golog programs needs account sensing formulated situation calculus satisfy criteria naturally arise robotics context 
accounts sensing situation calculus address different aspects reasoning sensory physical actions bacchus de giacomo levesque funge lakemeyer levesque pirri scherl levesque 
propose new representation sensing simplifies reasoning results sensing require consistency sensory information domain theory leads natural sound implementation connections representation knowledge sensing considered reiter 
section recall representation decision theoretic domain introduced 
section propose representation sensing actions consider examples 
section consider line incremental decision 
section discusses connections previously published papers 
decision theoretic problem representation boutilier introduces representation problem domains include sensing actions 
representation distinction agent actions deterministic stochastic nature actions correspond separate outcomes stochastic agent action 
nature actions considered deterministic 
executed agent occur policies agent executes 
agent stochastic action situation nature chooses outcomes action sit uation considered resulting situations 
accordance perspective evolution stochastic transition system specified precondition successor state axioms mention stochastic agent actions mention deterministic agent actions nature actions 
boutilier suggested characterize dtgolog problem domain pred holds agent action predicate meaning nature action outcomes stochastic agent action situation function symbol denotes probability nature action situation predicate specifying test condition serving identify outcome stochastic action function symbol denotes rewards costs functions current situation action 
example imagine robot moving different locations process going initiated deterministic action terminated stochastic ac tion may different outcomes successful arrival unsuccessful place different destination robot gets stuck hall enter office door closed 
represent process moving locations relational fluent represent symbolic location robot relational fluent meaning office employee hall main office place robot transitions stochastic dynamical system describing robot motion characterized precondition successor state axioms 
poss startgo going robotloc poss going poss going 
going cb startgo going going real outcome stochastic agent action identified sensory information 
information obtained executing sensing actions 
section propose new representation sensing actions providing seamless integration representation considered section 
sensing actions contrast physical actions sensing actions change properties external world return values measured sensors 
despite difference convenient treat physical sensing actions equally successor state axioms 
approach justifiable fluents represent robot knows world see 
specifically high level control module robot provided internal logical model world set precondition successor state axioms 
db 


ba bf de axiomatization initial situation 
programmer expresses axiomatization incomplete knowledge initial situation captures certain important effects robot actions effects actions agents may remain unmodeled 
robot action real world high level control module sends command effectors effectors execute command know directly immediately effects reality action produce high level control module may compute expected effects internal logical model 
similarly robot informed actions executed external agents high level control module may compute expected effects exogenous actions axioms account 
point view programmer designed axioms high level control module maintains set beliefs robot real world 
set beliefs needs feedback real world possible contingencies incompleteness initial information unobserved unmodeled actions executed agents 
gain feedback high level control module requests sensors return required data 
find convenient represent information gathered sensors argument sensing action value argument instantiated run time sensing action executed 
high level control module needs know current situation action log expected effects actions fluents computed sequence physical sensing actions 
grid location point initiated deterministic terminated neous action deterministic action robot may change location transported external agent place exogenous actions account fluent represents process moving robot external agent 
state precondition axioms characterize aforementioned fluents actions 
denote respectively components current robot location internal logical model initial data golog program effectors sensors exogenous actions actions sensing data environment includes agents high level control module low level modules interacting environment 
poss 

poss poss imagine initial situation robot stays time starts moving robot stops time senses coordinates time sensors tell located 
sensory information inconsistent expected location robot discrepancy attributed unobserved actions external agent transported robot 
final situation de sequel consider deterministic sensing actions noisy sensing actions represented 
suggest representing sensing actions functional symbol sense term rep run time value returned sensors time predicate true sensing action 
proceed consider examples successor state axioms employ representation 

sensing action re turns pair geometric coordinates current robot location dimensional grid relational fluent true coordinates robot location example assume actions deterministic simplify exposition example 
process moving represented relational fluent 
lcm ng 

lbl 


originally expected situation resulting execution exogenous ts actions tu ts situation robot ends moving ts followed sensing action 
exogenous actions occurred unknown times may say actual history 

robot determine location data sonar laser sensors 
action sensing coordinates current location determined sequel consider discrepancy results deterministic action observations obtained sensors explained occurrences unobserved exogenous actions 
example indicates inconsistency physical sensory actions resolved solving corresponding diagnostic problem see mcilraith 
previous location actions robot executed 
process going initiated deterministic action terminated stochastic action axiomatized section 
office office predicate true pair inside office functional symbols represent coordinates top left bottom right corners rectangle contains office inside robot stops senses coordinates determines real location high level control module identify outcome stochastic ac tion robot stopped successfully failed arrive intended destination 

stochastic action different outcomes robot gives successfully time action giving unsuccessful 
action sensing delivery successful delivery acknowledged result sensing 
successor state axiom characterizes flu ent changes situation situation robot office senses buttons pressed assumed pressed button acknowledge coffee 
sensory information high level control module identify outcome successful 
coffee db ba surprisingly straightforward regression setting solve forward projection task 
background axiomatization domain set successor state axioms precondition axioms unique name axioms set order sentences situation term situation calculus formula free variable situational argument 
suppose ground situational term may mention physical sensing actions 
forward projection task determine regression way solving forward projection task reiter pirri reiter mention sensing actions 
representation introduced allows regression case mentions sensing actions explicitly 
regression evaluate 
tests golog programs sensing actions modifications required 
addition approach allows implementation prolog considered reiter 
interesting connection representation beliefs sensing approach knowledge programming reiter 
soutchanski show approach approach solution forward projection task sensing actions equivalent 
incremental line dtgolog interpreter incremental dtgolog interpreter uses predicate predicate takes predicate input golog program starting situation horizon returns optimal conditional policy expected utility probability success program remains executing action policy predicate tells execution policy completes null program true program zero cost action takes agent absorbing state meaning execution failed policy cases simply reward associated situation note comparison bestdo additional argument representing program remains executed 
defined inductively structure golog program definition case program consider begins deterministic agent action 
reward deterministic agent action possible situation compute optimal policy remaining program expected utility probability successful termination deterministic action proba bility policy complete successfully program expected utility sum reward expected utility continuation possible remaining program policy action expected utility reward probability success 
cases defined similarly program begins finite nondeterministic choice finite set choice binds free occurrences elements means free occurrences optimal policy corresponds element delivers best execution 
note remaining program sides definition 
recall policies golog programs 
golog program contains nondeterministic choices optimal policy computed conditional program involve nondeterministic choices 
observation suggests programmers may wish take advantage structure decision theoretic problem explicit search control operators limit bounds search optimal policy concentrate 
addition standard set golog programming constructs introduce new operators intuitively program means 
compute optimal policy corresponding subprogram compute optimal policy corresponding program 
sub programs highly nondeterministic operator programmer indicates computational efforts saved need looking ahead compute case golog program begins construct limits search policy computed action executed remaining part program indication search may concentrate 
reason programmer may find convenient search control operator persists remaining part program program inside scopes operator terminates 
operator called specified abbreviation 
diagnose sn happened online er sn pol 
line interpreter uses prolog cut 
prevent backtracking predicate 
need actions performed physical world robot undo 
addition predicates mentioned section line interpreter uses predicate predicate predicate describe meaning show implementation prolog 
stochastic action situation predicate holds situation results doing number sensing actions necessary differentiate outcomes stochastic action predicate holds sequence sensing actions specified programmer domain problem representation sequence differentiating doing actions sequence action chosen nature outcome stochastic action uniquely identified 
se seq seq se 


specification optimal policy computed looking ahead program programmer express domain specific procedural knowledge save computational efforts 
note nil execute doing action remaining program contains implementing line interpreter definitions mentioned previous sub section consider line interpretation coupled execution golog programs 
definitions translate directly prolog clauses omit 
line interpreter calls er pol prob interpreter compute optimal policy program expression gets action optimal policy commits physical world repeats rest program 
interpreter implemented prolog online pol er pol prob final er pol pol pol reward pol rest stochastic execute reality commit result online er pol sensing commit results sensing online er pol stochastic execute reality commit result 
connect sensors get data free variable rest se connect sensors get data rest se 
predicate takes argument situation resulting getting sensory input contains information disambiguate different possible outcomes stochastic action second argument list outcomes nature may choose agent executes stochastic action third argument situation result nature action occurred 
identify action nature chosen set mutually exclusive test conditions term representing situation calculus formula holds current situation know nature chosen action belongs list 
diagnose se se holds se 
diagnose se outcomes sn holds se sn se holds se diagnose se outcomes sn 
successful tests implementation described conducted real office environment mobile robot manufactured rwi 
low level software initially developed university bonn control rhino robot see burgard details 
tests implementation demonstrated expressive set encode domain knowledge constraints large mdp problem 
operator proved useful providing heuris tics allowed compute sub real time 
preliminary tests brought new important issues computation new policy line proceed parallel executing actions policy line 
discussion incremental golog interpreter single step semantics introduced de giacomo levesque 
golog programs considered may include binary sensing actions 
interpreter considered motivated similar intuitions different decision theoretic semantics employs expressive representation sensing 
de giacomo levesque introduces guarded sensed fluent axioms gsfa guarded successor state axioms gssa assumes stream sensor readings available time 
readings represented unary sensing functions syntactically look 
representation sensing actions mentioned explicitly golog programs executed interpreter 
major advantage representation require consistency sensory readings action theory may prove useful solving diagnostic tasks mcilraith 
execution monitoring framework proposed de giacomo assumes feedback environment provided terms actions executed agents 
assume feedback provided terms sensory readings may lead development realistic framework 
approach integrating planning execution stochastic domains dearden boutilier alternative approach proposed 
concluding remarks important issues covered 
monitoring rescheduling policies 
note actions policies time arguments instantiated moments time incremental interpreter computes optimal policy determines schedule actions executed 
realistic scenarios robot involved ongoing processes extended time may happen process terminate earlier expected 
diagnostic task current version line interpreter solves 
expect additional research integrating line incremental interpreter approach proposed mcilraith allow formulate comprehensive version 
acknowledgments ray reiter maurice anonymous reviewers comments preliminary versions 
sam kaufman provided help conducting tests mobile robot 
bacchus fahiem bacchus joseph halpern hector levesque 
reasoning noisy sensors situation calculus 
proceedings fourteenth international joint conference artificial intelligence pages montreal 
boutilier boutilier reiter soutchanski thrun 
decision theoretic high level robot programming situation calculus 
proc 
th national conference artificial intelligence aaai austin texas 
burgard burgard cremers fox hnel lakemeyer schulz steiner thrun 
experiences interactive museum tour guide robot 
artificial intelligence 
de giacomo levesque de giacomo levesque 
projection regression sensors 
proceedings sixteenth international joint conference artificial intelligence stockholm sweden 
de giacomo levesque de giacomo levesque 
incremental interpreter high level programs sensing 
pirri editors logical foundations cognitive agents contributions honor ray reiter pages 
springer 
de giacomo de giacomo reiter soutchanski 
execution monitoring high level robot programs 
principles knowledge representation reasoning proc 
th international conference kr pages trento italy 
dearden boutilier richard dearden craig boutilier 
integrating planning execution stochastic domains 
proceedings tenth conference uncertainty artificial intelligence pages 
funge funge 
making behave cognitive models computer animation ph thesis 
dept computer science univ toronto 

probabilistic projection belief update framework 
nd international cognitive robotics workshop th european conference ai pages berlin germany 
lakemeyer lakemeyer 
sensing line interpreting golog 
levesque pirri editors logical foundations cognitive agents contributions honor ray reiter pages 
springer 
levesque levesque 
planning presence sensing 
proceedingsof thirteenth national conference artificial intelligence volume pages portland oregon 
mcilraith mcilraith 
explanatory diagnosis actions explain 
principles knowledge representation reasoning proc 
th international conference kr pages italy 
pirri pirri 
approach perception theory actions part 
link ping electronic articles computer information science 
pirri reiter pirri reiter 
contributions metatheory situation calculus 
journal acm 
reiter reiter 
knowledge action logical foundations describing implementing dynamical systems 
www cs toronto edu 
scherl levesque scherl levesque 
frame problem knowledge producing actions 
proceedings eleventh national conference artificial intelligence pages washington dc 
soutchanski soutchanski 
correspondence different solutions projection task sensing 
th symposium logical formalizations new york usa 
