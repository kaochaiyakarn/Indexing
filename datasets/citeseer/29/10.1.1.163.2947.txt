connections context enhance file search craig soules gregory ganger carnegie mellon university connections file system search tool combines traditional content search context information gathered user activity 
tracing file system calls connections identify temporal relationships files expand reorder traditional content search results 
doing improves recall reducing precision reducing false negatives 
example connections improves average recall precision results 
averaged recall levels connections improves precision 
connections provides benefits modest increases average query time seconds indexing time seconds daily index size user data set 
categories subject descriptors information storage retrieval information search retrieval operating systems file systems management file organization general terms algorithms design human factors management keywords context file system search successor models 
users need effective ways organizing searching data 
years amount data storage available individual users increased nearly orders magnitude allowing today users store practically unbounded amounts data 
shifts challenge individual users deciding keep finding particular files needed 
personal computer systems today provide hierarchical directory naming allows users place file single unique path 
useful small scale having classification file unwieldy large data sets 
traversing large hierarchies users may remember exact location file 
users may think file different manner filed sending incorrect path hierarchy 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
sosp october brighton united kingdom 
copyright acm 
attribute naming allows users classify file multiple attributes 
place attributes provide additional paths file helping users locate files 
unrealistic inappropriate require users proactively provide accurate useful classifications 
systems viable automatically classify user files fact requirement led systems employ search tools hierarchical file systems change underlying methods organization 
prevalent automated classification method today content analysis examining contents pathnames files determine attributes describe 
systems attribute naming semantic file system content analysis automate attribute assignment 
search tools google desktop content analysis map user queries ranked list files 
clearly useful limitations content analysis 
files understandable contents analyzed difficult identify attributes movie clips music files 
second examining file contents overlooks key way users think organize data context 
context interrelated conditions exists occurs 
examples file context include concurrently accessed files user current task user physical location actions data user associates file 
study showed users organize search data context 
example user may group files related particular task single directory search file remembering files accessing time 
contextual relationships may impossible gather file contents 
focus increase utility file system search context 
specifically examine temporal locality clearest forms context successfully exploited areas file systems 
temporal locality captures file setting connecting files actions user tasks 
connections new search tool identifies temporal contextual relationships files time accessed traces file system activity 
user performs search connections locates files traditional content search extends results contextually related files 
user studies connections show combining content analysis context analysis improves recall increasing number relevant hits precision returning fewer false positives content analysis 
compared indri state art content search tool connections increases average precision recall level increasing average 
considering just top results connections creases average recall average precision 
cutoff connections increases average recall average precision 
remainder organized follows 
section describes related 
section outlines design implementation connections 
section analyzes utility connections context search 
section discusses interesting considerations building context search systems connections 

background related context key ways users remember locate data 
example user may remember stored downloaded email attachment may remember contextually related items sender email approximately email arrived read email doing time downloaded attachment 
automatically identifying file context assist user locating related contextual information filename contents attachment 
section begins describing background file systems web search motivated exploration context search 
describes successfully utilizes connection specific form context temporal locality domains 
section ends description search organizational systems utilize forms context identifying contextual relationships temporal locality enhance 
semantic file systems researchers identified organizational problems strict hierarchical naming 
proposed naming solution attaching multiple attributes keywords file improve organizational structure search capabilities 
semantic file system explore attribute naming providing searchable mapping category value pairings files 
research commercial systems merge hierarchical namespaces flat attribute namespaces various ways providing new organizational structures 
attribute naming potential improve file system search systems focused mechanism store additional attributes sources attributes 
traditionally attributes come sources users content analysis 
understandably users unwilling perform difficult time consuming task manually assigning attributes files 
result changing underlying file system structure focus content analysis provide file system search existing hierarchical systems 
content search simplest content search tools unix tools find grep scan contents set files term terms returning hits 
speed process tools locate glimpse indices reduce amount data accessed search 
tools premise provided keywords narrow resulting list files human searchable size 
commercial systems google desktop desktop search leverage done text information retrieval provide accurate ranked search results 
exact methods commercial systems unpublished techniques similar cutting edge information retrieval systems indri 
modern tools probabilistic models map documents terms providing ranked results include full partial matches 
probabilities generated methods term frequency document inverse term frequency collection complex language models 
context web search despite tools argue easier find things web order magnitude larger search space non personalized organization 
strange largely enabled availability user provided context attributes form hyperlinks 
just current file system search early web relied user input user submitted web page classifications content analysis word counts word proximity 
techniques emerged inherent link structure web identify contextual links 
hits algorithm defines sub graph web content search results uses link structure graph identify authority hub nodes 
popular google search engine uses link structure primary ways 
uses text associated hyperlink guide content classifications linked site 
second uses pagerank algorithm uses link structure web calculate importance individual sites 
successful web techniques face challenges personal file systems tagged contextual links inherently exist file system 
aims add untagged contextual links files temporal locality 
evaluation combining approach hits pagerank discussed section 
context approach seen web search personalization user current context target search results 
webglimpse took step personalized search concept neighborhood set web pages certain hyperlink distance page 
users choose search current page neighborhood creating directed search potentially related pages user current context 
focused targeting results particular topics interests gathered user activity 
systems remove results relate user current context improving precision 
conversely connections extends results context information gathered previous activity 
believe techniques complement removing unrelated content results prevents connections gathering files unrelated context 
identifying context temporal locality file systems temporal locality provide contextual clues readily available web 
observing users access files system determine contextual relationships files 
uses contextual relationships enhance existing contentbased search tools 
identify temporal relationships borrow uses temporal locality model users access data 
example temporal locality predict access patterns file prefetching 
file systems prefetching hide storage latencies predicting user access reading cache request 
prefetching schemes temporal locality correlate common user access patterns individual user contexts 
systems keep history file access patterns successor models directed graphs predict access accesses 
sequence accesses matches stored successor models system assumes user context matches model prefetches specified data 
success schemes led variety algorithms building successor models 
similarly cache hoarding schemes successor models predict files user need disconnected network 
connections uses successor models identify relationships files successfully identified related files domains 
existing uses context file search systems leverage forms context guide file organization search 
gathering context temporal locality connections enhance systems providing additional contextual clues classification 
haystack projects data organization core interface design allowing users group assign classifications objects quickly 
interfaces motivate users provide additional classifications result improved search facilities 
assist users system adding automated groupings temporal locality 
systems attempt determine user current context predict prefetch potentially desired data 
lumiere project provides users help data microsoft office application suite attempting predict user problems predicting current context actions 
agent continually provides list related files content similarity user working 
feeding accessed file data content search system locates files similar contents may reflect user current context 
enhance systems providing additional contextually related files temporal locality content similarity 
content search tools organize search results allowing user hone set files contain searching 
example lifestreams project orders search results latest access time resulting files 
search tool clusters search results grouping files similar contents 
cluster results contextual relationships addition content similarity access time 

connections connections combines traditional content analysis contextual relationships identified temporal locality file accesses 
section describes architecture relation applications tracer file system results relation graph user context enhanced search results keywords content search architecture connections 
applications file system remain unchanged information required connections gathered transparent tracing module directly existing file system interfaces 
ship tracking result ranking algorithms prototype implementation 
architecture traditional content search systems user submits keywords search tool returns rank ordered results directly user 
search tool separate file system background process read index file data 
illustrates architecture connections 
user perspective connections context enhanced search identical existing content search tool separate file system takes keywords returns ranked list results 
internally connections receives keywords user begins content search retrieving results content search tool 
feeds results relation graph locates additional hits contextual relationships 
combined results ranked passed back user 
identify store relationships connections adds new components tracer relation graph 
tracer sits applications file system monitoring file system activity 
connections uses traces identify contextual relationships files 
relation graph stores contextual relationships files 
file system maps node graph 
edges nodes represent contextual relationships files weight edge indicating strength relationship 
different users may different contexts particular file connections maintains separate relation graph user file accesses 
separates user tasks background system activity single user systems 
algorithms drive context portions connections 
algorithm takes captured file traces identifies contextual relationships creating relation graph 
second algorithm takes content search results locates contextually related files relation graph creating smaller result graph 
third algorithm uses result graph rank combined set content context related results 
system call open read write mmap stat dup link rename description opens file reading writing reads data file writes data file maps file memory region reads inode file duplicates file handle adds directory entry file changes name file table file system calls 
table lists file system calls considered connections identifying relationships traces 
parameter identified source destination 
open read write ops 
open filter classifies source file open call input output 
conceptually captures strict temporal locality files accessed nearby time related 
read write filter classifies source file read call input destination file write call output 
conceptually captures causal data relationships data read file may affect data written file relating files 
ops filter classifies source file mmap read stat dup link rename input 
classifies destination file write dup link rename output 
filter extends causal relationships read write filter adding access modification relationships 
algorithms connections specifically designed flexibility tunable parameters 
flexibility allows study range options algorithm 
evaluation sensitivity algorithm provided section 
identifying relationships connections identifies temporal relationships constructing successor model file traces 
files accessed window time connected relation graph 
time user access patterns form probabilistic mappings files basis connections contextual relationships 
specific algorithm generating relation graph described parameters relation window edge style operation filter 
relation window relation window maintains list input files accessed seconds 
conceptually captures period time user focused particular task 
short window key relationships large window connect files unrelated tasks 
window sees output file creates edge relation graph weight input files output file 
edge exists weight incremented 
avoid creating heavy weightings long sequences output operations single file large file writes files connected input file stays relation window 
edge style edge style specifies edges relation graph directed undirected 
direction indicates edges relation graph may followed search 
directed edges point input files output files undirected edges may followed direction 
conceptually undirected links reverse causal nature relation graph allowing searches locate input file 
operation filter entry trace corresponds file system operation 
operation filter specifies system calls consider trace classifies source destination files accessed system call shown table input output 
consider different operation filters considered fixed number files window practice burstiness file accesses approach perform poorly 
related files bursts connected unrelated files connected long periods idleness 
searching relationships context portion search connections starts results content search 
file results connections performs breadth graph traversal starting node file 
files touched traversal added result graph subgraph results specific search 
process building relation graph incorrect edges form 
example user switches context disparate tasks writing personal email examining spreadsheet edges formed transition misleading 
algorithm attempts reduce number paths introduced tunable parameters path length weight cutoff 
path length path length maximum number steps taken starting node graph 
system follows edges initial file strength relationship grows weaker weaker 
limiting path length reduces number false positives created long chain edges leads unrelated files 
weight cutoff weight cutoff specifies edge weight minimum percentage source outgoing weight sink incoming weight 
manner lightly weighted edges coming files total accesses followed heavily weighted edges followed frequently accessed files 
limits effects removing links oft accessed files rarely accessed 
see weight cutoff path length consider example relation graph 
assume starting point search path length weight cutoff 
connections starts examining sees edge db outgoing weight incoming weight followed 
edge de connections repeats procedure 
case eb ef outgoing weight incoming weight nodes respectively followed 
contain edges de ef eb 
path length increased result graph contain edges ba bc 
similarly cutoff reduced edge db followed contain edges 
graph result graph path length content search returns wd wb 
consider wb 
pass algorithm wb updated wd 
case wd affects value wb second pass formula wd relation graph example 
nodes relation graph map file user system 
edges indicate related files weights specifying strength relationship 
note edge weights specifically chosen algorithm behavior example text 
ranking results modern search tools rank order results provide best guesses 
connections implements ranking algorithms basic bfs algorithm pushes weights edges breadth manner extensions basic bfs popular web search algorithms hits pagerank 
basic bfs basic bfs uses rankings provided content search guide rankings contextually related items 
close relations relations multiple paths receive weight distant relations incoming paths 
intuitively match user activity file rarely association content matched files receive low rank vice versa 
set nodes result graph path length generate result graph 
assigned weight wn content search scheme 
file ranked content analysis wn 
connections runs algorithm iterations 
em set incoming edges node enm em percentage outgoing edge weight edge assuming th iteration algorithm wm enm em wn enm value wm represents weight pushed node iteration algorithm dictates trust specific weighting edge 
runs algorithm total weight node wn px wn sum wn represents contributions contextual relationship paths node plus contribution original content ranking 
final ranking results sorts file highest weight lowest 
example algorithm works assume wb final weight wb sum weights 
hits hits algorithm attempts locate authority hub nodes graph specific set starting nodes 
authority nodes incoming links hub nodes hub nodes outgoing links authority nodes 
web authorities analogous pages linked times particular topic official sosp web site hubs analogous pages lists links authorities page links acm conference websites 
hits identifies authorities hubs steps 
runs content search locate initial set nodes 
second creates sub graph relation graph locating nodes incoming outgoing links starting nodes 
third runs recursive algorithm locate principal eigenvectors pair matrices derived link structure 
eigenvectors indicate authority hub probabilities node 
connections implements hits ways 
implementation hits original runs unmodified version hits 
second implementation hits new begins result graph derived section runs third part hits algorithm 
evaluation section examines hub authority rankings implementation 
pagerank pagerank ranking algorithm google web search engine 
takes graph hyperlinks web calculates principal eigenvector stochastic transition matrix describing graph 
eigenvector describes probabilities reaching particular node random walk graph 
probability referred page pagerank 
connections power method calculate pagerank file relation graph 
unfortunately google method merging content search results pagerank documented implemented possible uses file pagerank connections 
implementation pr applies file page rank content ranking take product original ranking pagerank new ranking runs basic bfs algorithm 
second implementation pr runs basic bfs algorithm applies pagerank final results 
third implementation pr ignores content rankings uses pagerank rank files result graph 
implementation prototype implementation connections components shown tracer contentbased search relation graph 
minimize foreground impact tracer runs system continuously indexing required content search relation graph runs idle time background processes 
delay indexing affects users search files created indexing periods scenario exists today content search tools 
tracing component sits system call layer kernel watches user activity tracing file system process management calls 
process management calls allow proper reconstruction file descriptor activity 
tracing component operating system specific connections currently runs exclusively linux kernels 
similar system call tracing infrastructure exists systems windows xp porting connections difficult 
performance impact tracing component minimal file system tracing tools 
content search component uses indri state art content analysis tool 
chose indri consistently high performance predecessors tracks text retrieval conference trec years 
trec annual competitive ranking content information retrieval systems different tracks distinct corpora data queries geared particular retrieval tasks 
connections creates relation graph algorithm described section stores 
connections searches relation graph algorithm described section ranks results search algorithms described section 
users specify queries connections set keywords optionally file types 
file types specified final query results filtered remove types 
example user searching copy input keywords content context types ps pdf 
connections perform search content context filter final results showing ps pdf files 

evaluation evaluation connections parts 
evaluate utility connections context enhanced search comparing precision recall indri state art content search tool hoped addition context search tool effective 
second evaluate sensitivity various parameters connections showing settings parameters affect search quality reasonable settings close optimal sufficient see benefits context 
third evaluate performance indexing querying connections finding space time overheads adding context analysis minimal 
experimental approach evaluation compares indri version search connections context enhanced search 
compare utility systems borrow adapt techniques information retrieval 
traditionally content search tools evaluated large public corpora data archived library data collections publicly accessible websites 
queries generated experts evaluated individuals familiar material 
oracle results compared results generated system evaluation 
unfortunately subtle differences file system search especially context enhanced search difficult evaluate 
nature queries searching old data demand traces exist long period time connections provide context enhanced results trace data desired data 
second data personal owner create meaningful queries act oracle evaluating query results especially queries formed period tracing mind 
doing render experiment useless tracing lifetime production system 
gathering data gather context data traced desktop computers computer science researchers period months 
traces generated relation graph user default parameters second relation window directed edge style read write operation filter 
gather content search results content system connections internal ran indri set parsable document types users computers files appearing contain text pdf postscript files 
user submitted queries 
table lists submitted queries representative examples listed space privacy reasons 
ran queries indri internally connections combine operator 
ran connections search algorithm default parameters path length weight cutoff basic bfs ranking algorithm parameter 
evaluation recall precision measure effectiveness search system matching oracle results 
system recall number relevant documents retrieved total number specified oracle 
system precision number relevant documents retrieved total number documents retrieved 
unfortunately user system knows data act oracle queries users willing examine file systems query 
account technique known pooling combines results number different search techniques generating set results coverage relevant files 
case pooled context enhanced searches broader parameter settings default settings evaluated users 
users chose relevant documents pooled set files create oracle 
chose settings performing sensitivity analysis described section 
query num query file types description osdi background ps pdf papers related particular submission content context eps figures relating content context search mozilla log mozilla web browsing logs generated tracing tool table selected search queries 
table shows specific user submitted queries 
query search terms file type listed english description search submitted user 
compare recall precision different systems techniques 
technique examine recall precision curve system 
curve plots precision systems standard recall levels increments 
examining curve shows system ranks results generates 
recall level curve plots highest precision seen 
calculate average recall precision values set queries precision query recall level calculated averaged 
second technique examine recall precision system fixed numbers results 
search systems results user time page results requiring prompting user results 
example result cutoffs may map pages results users may give try different query 
examining recall precision low result cutoffs shows quickly user locate relevant data system 
examining recall precision infinite result cutoff shows relevant results located system 
utility context section compares recall precision indri connections 
compare rankings systems recall precision graphs 
second examine interactive performance systems comparing recall precision various result cutoffs 
third examine queries detail get understanding connections specific strengths weaknesses 
fourth anecdotal evidence advantages context enhanced search user perspective 
fifth discuss popular content search tool glimpse place indri effect search utility 
sixth compare automated context relationships relationships inherent existing user organization indri dir system uses directories contextual clusters 
ranking performance shows raw recall precision data table form plot data 
noticeable feature data connections outperforms indri recall level shown line higher point 
indicates connections finds relevant data evidenced high precision high recall levels ranks higher evidenced higher precision lower recall levels content search 
cutoff recall precision indri connections indri connections inf 
table recall precision varying cutoffs averaged queries 
table lists recall precision levels indri connections different cutoff points 
low cutoffs show system performs interactive situation users request pages results 
higher cutoffs show system performs user trying locate available information topic 
interactive query performance table shows recall precision levels systems various cutoff points 
key feature data combining content context connections outperforms content search cutoff point increasing recall precision 
connections significantly increases total number results system 
result cutoff infinite connections increases average recall queries 
results indicate users find data quickly better chance finding data 
individual query performance table shows performance schemes queries result cutoff 
noticeable result queries connections provides correct results content search similar better precision 
assist interpretation horizontal lines partition queries categories 
queries user specified file type 
filter reduces number retrieved results improving average precision 
queries user specified file image jpg eps making difficult indri locate relevant files 
queries connections able leverage contextual relationships locate relevant images 
queries user specify file type 
cases connections improved recall precision 
queries connections ranked relevant results lower indri resulting lower precision 
improvements ranking algorithm help connec recall precision indri connections average indri connections precision recall points averaged queries 
table left lists precision indri connections different recall levels average levels 
indicates accurate results system higher precision levels mean data quickly system 
plot right graphical representation data table 
perfect system line top recall point 
tions match improve queries pushing relevant results higher rankings 
query indri results exist 
side effect experimental setup relation graph contains data files accessed period tracing 
connections place system lifetime contextual data exist 
examining queries connections unable improve search effectiveness provides interesting insights 
queries relevant files located indri mailbox files 
meta files composed smaller sub units data 
trace data distinguish relationships individual sub units files misleading edges making difficult connections provide accurate results 
problem indicates need level application assistance storing individual emails separate files 
queries search terms multiple meanings user data 
example query words user specified training refer schedule happened working project related machine learning contained word training disjoint uses single word indicate level result clustering useful presenting results users 
clustering contextually related results ranks disjoint sets adjusted include results cluster 
user satisfaction important consideration search system satisfaction user ease system provided results 
easily measurable anecdotal evidence indicates context enhanced search improve user satisfaction file system search 
improvement noted users queries intuitive example query see table keywords intuitively describe user searching content search tools provide accurate results query 
users appear searching context forced come content friendly search terms 
improvement noted users kind results system 
users mentioned connections located relevant files hadn remembered machine 
looking specific file user remembers user search terms directed relying search system provide desired data 
far scientific study user satisfaction anecdotal evidence lends weight argument context search 
content analysis tools exploring utility combining content analysis context analysis implemented version connections glimpse content analysis tool glimpse connections 
glimpse rank search results glimpse connections impossible comparisons rely ranking recall precision curves specific result cutoffs 
recall precision compared infinite result cutoff 
comparing glimpse glimpse connections infinite cutoff see results similar table glimpse recall precision glimpse connections recall precision 
reduced recall increased precision systems indri systems due glimpse strict boolean query terms results fewer hits indri queries 
directories context traditionally users organize files directory hierarchy grouping related files 
groupings contextual relationships provide benefits connections practice 
explore possibility built indri dir tool uses directory structure enhance search results 
specifically indri dir looks category query indri connections description num total correct recall precision total correct recall precision typed queries untyped queries data available table query result details result cutoff 
search systems table shows total number results user total number correct results recall system precision system 
files requested type number files located filtering listed parenthesis 
directories content results files requested type assigning files combined weight content matches directory 
type specified indri dir adds files directory assigning weight highest ranked content result directory 
indri dir significantly connections indri metrics 
reason fold 
indri dir relies users organizing files directories contextually meaningful ways users files effectively cluttered home directories download folders directories 
second indri dir relies directory organization match context user search users organize files way 
example user download proceedings particular conference single directory find particular project 
finding papers related project indri dir find papers conference 
sensitivity analysis understand sensitivity different parameter settings examined wide variety parameter configurations phases context search 
space considerations subset results queries listed table represent space 
query recall precision graph shown 
set graphs examine sensitivity single parameter default settings parameters 
identifying relationships relation window presents recall precision curves connections configured different relation window sizes default seconds 
graphs illustrate larger window size tends reduce precision 
increase links node results weight cutoff removing accurate links 
shown query small window result missing relationships due edges formed 
edge style presents recall precision curves connections configured directed default undirected edge styles 
case directed edge style outperforms undirected edge style 
reason nuanced 
traces misleading input files related files emacs 
adding output files significantly increases number outgoing edges node causing weight cutoff remove relevant edges 
misleading edges may followed cutting additional edges removes paths located relevant files 
operation filter presents recall precision curves connections configured operation filters read write default open ops 
queries open filter performs poorly increased number edges result incorrect relationships followed 
cases user specified type queries ops read write filters perform similarly 
untyped queries query ops filter provides lower precision 
query query query sensitivity analysis connections different relation window sizes 
query directed undirected query directed undirected query directed undirected sensitivity analysis connections different edge styles 
query read write open ops query read write open ops query read write open ops sensitivity analysis connections different operation filters 
query query query sensitivity analysis connections different path lengths 
query query query sensitivity analysis connections different weight cutoffs 
query query query sensitivity analysis connections different settings 
query hits original authorities hits original hubs hits new authorities hits new hubs query hits original authorities hits original hubs hits new authorities hits new hubs query hits original authorities hits original hubs hits new authorities hits new hubs sensitivity analysis connections different hits methods 
discrepancy user specified type filter hides added incorrect edges generated ops scheme 
searching relationships path length presents recall precision curves connections configured different path lengths default 
queries path length relevant files higher path lengths perform quite 
high path length reduce precision ranking algorithm places nodes far away path lower rankings 
weight cutoff presents recall precision curves connections configured different weight cutoffs default 
high cutoff levels recall suffers relevant links cut 
cutoff incorrect paths followed reducing precision 
ranking results basic bfs presents recall precision curves connections configured different parameters default 
parameter sets tradeoff individual link weight existence link 
setting specifies link weight considered acting cutoff lightweight links result graph 
settings perform similarly performing slightly better average 
indicates creating accurate result graph individual link weights importance 
hits presents recall precision curves connections configured different hits implementations default scheme hits rankings authority hub rankings hits original hits new 
results illustrate difficulty web graph algorithms temporal locality graphs 
web algorithms focus finding authority hub topic algorithms rely links valid indicator context 
connections result graph approximation context links erroneous 
example file outgoing incoming links result graph bash history authority hub terms accuracy links shows hits 
result hits new performs poorly compared basic bfs 
hits original limited result graph detracts accuracy 
pagerank presents recall precision curves connections configured different page rank implementations default scheme pagerank pr pr pr 
page rank measure node authority graph pagerank schemes similar difficulties algorithms 
pr performs best highest ranked nodes similarly low page rank values resulting shifting top ranked results 
basic bfs rankings additive nature pr generally performs worse pr 
sensitivity analysis summary building relation graph result graph parameter settings increase decrease number paths graph 
unsurprisingly mid range settings parameter provides best recall precision trade 
side paths results reduced recall side paths results reduced precision 
fortunately results indicate mid range settings sufficiently wide perfect tuning crit query pr pr pr query pr pr pr query pr pr pr sensitivity analysis connections different pagerank methods 
ical success context enhanced search 
set reasonable parameters connections outperforms content search 
ranking results important consider result graph pruned contains misleading connections 
reason basic bfs ranking algorithm outperforms algorithms excel web search 
system performance connections demonstrates combining content context file search improves recall precision 
users utilize system foreground impacted required indexing additional storage space required index exceed reasonable bounds queries answered quickly 
connections implementation tuned analysis indicates requirements satisfied 
ran timing experiments intel pentium ghz processor mb ram quantum atlas gb disk drive 
indexing performance connections indexing phase consists content analysis merging file system traces 
startup cost content indexing high incremental costs low users accept 
context analysis startup cost record temporal relationships exists initially 
measured incremental costs time required merge day traces machine relation graph 
average indexing time day seconds standard deviation seconds 
longest indexing time observed seconds 
overheads low believe users find acceptable 
machine constantly powered worst case minute day indexing time low run background little impact foreground 
indexing space connections index consists content index relation graph 
space overheads content indexing known examine additional space required relation graph 
incrementally added day tracing machines measured total size relation graph month 
graph size mb machine machine machine machine machine machine time months relation graph size 
illustrates cumulative size relation graph month tracing machines experiments 
shows space required relation graph month tracing machine 
results indicate relation graph size barrier search 
final graph sizes quite small requiring mb 
average index size size user data set 
second graphs appear grow linearly time part matching slow growth user data set size 
worst case graph growth seen practice total number files user system grows time user working set stays relatively constant 
edges form constant sized clusters files working set shifts relation graph grows linear rate 
user drastically changes context graph grow significantly size 
example seen month machine user began new piece software 
querying performance connections average query time queries seconds combination content search seconds context search seconds higher con query time averages calculated runs query standard deviations mean 
tent search believe query times connections users find system usable 
summary connections demonstrates benefits flexibility combining content context file search 
compared indri state art content analysis tool connections improves average recall average precision 
parameter tuning improve results simply finding settings provides benefit meaning non tuned systems perform 
performance overheads adding context analysis existing file system search systems low prototype connections 

discussion designing connections focused highlighting significant improvements garnered combining content analysis context analysis 
section briefly discusses considerations lead improvements connections 
application assistance temporal relationships number ways system assign context files 
example applications mail provide context clues system files sender time subject 
context clues include user physical location current schedule visible windows user settings different users manage data different ways 
differences mean connections may provide greater benefits algorithm parameters tuned individual users 
true interesting question connections determine correct parameter settings automatically starting broad settings eventually honing correct values 
deleted files relation graph built trace data time graph contains files user deleted 
connections currently leaves place deleted files eventually pruned relation graph 
left shown users potentially needless searches data deleted increased results reduce search effectiveness 
questions merit study 
organizing results mentioned section connections divide results categories disjoint sets relation graph disjoint uses word training allowing users quickly hone desired set files large numbers search results 
organization help ranking algorithm adjusting rankings disjoint result sets include results set 
network storage settings common users store files remotely networked storage 
key advantages approach data accessed variety machines 
causes problems connections access patterns particular piece data spread remote machines 
examining information centralized collated important mobile devices shift user data usage model 
personalization web file search researchers search accuracy improved results targeted user current context 
believe connections uniquely targeted task 
examining accessed files connections identify set files user current context targeting search 
file system interaction currently component connections interacts directly file system tracer 
result connections relies existence complete traces system state lost ability perfectly reconstruct system state traces process takes indexing time connections 
connections uses filename tag file relation information faulty user renames file multiple paths file 
moving connections inside file system problems alleviated 
additionally connections system file system assist automate file organization grouping related files virtual directories automatically assigning attributes related files 

individual data sets grow search organizational tools grow increasingly important 
presents connections search tool combines traditional content analysis contextual relationships identified temporal locality 
show connections improves average recall average precision state art search system 
results demonstrate context information important complement content analysis file search tools 

acknowledgments members companies pdl consortium including apc emc hewlett packard hitachi ibm intel microsoft network appliance oracle seagate sun interest insights feedback support 

abdul emmanuel li liu wade allan 
umass trec hard qa 
text retrieval conference pages 
amer long 
paris burns 
file access prediction adjustable accuracy 
international performance conference computers communication 
ieee 
wright zadok 
tracefs file system trace 
conference file storage technologies pages 
usenix association 
baeza yates ribeiro neto 
modern information retrieval 
acm press 
brin page 
anatomy large scale hypertextual web search engine 
computer networks isdn systems 
fertig freeman gelernter 
lifestreams alternative desktop metaphor 
acm sigchi conference pages 
gemmell bell drucker wong 
fulfilling memex vision 
acm multimedia pages 
acm 

practical file system design file system 
morgan kaufmann 
gifford jouvelot sheldon toole jr semantic file systems 
acm symposium operating system principles pages 
acm press 
google www google com 
google desktop desktop google com 
gopal manber 
integrating content access mechanisms hierarchical file systems 
symposium operating systems design implementation pages 
acm 
griffioen appleton 
reducing file system latency predictive approach 
summer usenix technical conference pages 
usenix association 
www com 
haveliwala 
topic sensitive pagerank context sensitive ranking algorithm web search 
ieee transactions knowledge data engineering 
ieee august 
hayes 
terabyte territory 
american scientist may june 
horvitz breese heckerman 
lumiere project bayesian user modeling inferring goals needs software users 
conference uncertainty artificial intelligence pages 
kamvar haveliwala manning golub 
extrapolation methods accelerating pagerank computations 
world wide web conference 
acm 
kistler satyanarayanan 
disconnected operation coda file system 
acm transactions computer systems 
acm press february 
kleinberg 
authoritative sources hyperlinked environment 
journal acm 
acm september 
kroeger long 
predicting file system actions prior events 
usenix annual technical conference pages 
usenix association 
kuenning 
seer predictive file hoarding disconnected mobile operation 
technical report ucla csd 
university california los angeles may 
larkey allan connell wade 
umass trec cross language novelty tracks 
text retrieval conference 
lei duchamp 
analytical approach file prefetching 
usenix annual technical conference 
usenix association 
lemur toolkit www org 
lycos www lycos com 
reed 
intelligent adaptive file system policy selection 
frontiers massively parallel computation october 
manber smith gopal 
webglimpse combining browsing searching 
usenix annual technical conference 
usenix association 
manber wu 
glimpse tool search entire file systems 
winter usenix technical conference pages 
usenix association 
mauldin 
retrieval performance ferret conceptual information retrieval system 
acm sigir conference research development information retrieval pages 
acm press 
metzler croft 
combining language model inference network approaches retrieval 
information processing management international journal 
acm press september 
metzler turtle croft 
indri trec terabyte track 
text retrieval conference 
olson bostic seltzer 
berkeley db 
summer usenix technical conference 
usenix association 
quan huynh karger 
haystack platform authoring user semantic web applications 
international semantic web conference 
rhodes 
physical context just time information retrieval 
ieee transactions computers 
acm press august 
rhodes starner 
remembrance agent continuously running automated information retrieval system 
international conference practical application intelligent agents multi agent technology pages 

blending hierarchical attribute file naming 
international conference distributed computing systems pages 
alvarado ackerman karger 
perfect search engine study orienteering behavior directed search 
conference human factors computing systems pages 
acm 
dumais horvitz 
personalizing search automated analysis interests activities 
acm sigir conference 
acm 
information retrieval platform ir dcs gla ac uk 
turtle croft 
evaluation inference network retrieval model 
acm transactions information systems 
acm july 
voorhees 
overview trec 
text retrieval conference 
nist 
merriam webster online www com 
desktop search www com 
yahoo www yahoo com 
