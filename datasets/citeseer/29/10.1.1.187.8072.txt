emergence computational ecologies bernardo huberman tad hogg lectures complex systems pp 
addison wesley describe form distributed computation agents incomplete knowledge imperfect information state system instantiation systems market mechanisms 
agents choose resources dynamics system oscillatory chaotic 
mechanism described achieving global stability local controls 
advances software design increasing connectivity computer networks distributed computational systems starting spread offices laboratories countries 
systems computational processes consisting active execution programs spawn new ones machines printers file servers machines network need arises 
contrasts familiar stand computers traditional methods centralized scheduling resource allocation programming methods serial processing 
effective distributed computation challenging task processes obtain resources dynamically changing environment designed collaborate despite variety asynchronous unpredictable changes 
instance lack global perspectives determining resource allocation requires different approach system level programming creation suitable languages 
implementing reliable methods processes compute machines diverse characteristics difficult 
distributed systems grow community concurrent processes computational ecosystem interactions strategies lack perfect knowledge analogous biological ecosystems human economies :10.1.1.187.8072
systems consist large number independent actors competing resources analogy suggest new ways design understand behavior emerging computational systems 
particular existing systems methods deal successfully coordinating asynchronous operations face imperfect knowledge 
methods allow system adapt changes environment disturbances individual members marked contrast brittle nature current computer programs fail completely small change inputs error program 
improve reliability usefulness distributed computation interest examine extent analogy exploited 
computational ecologies rationality assumption game theory explicitly imposed agents making systems amenable game dynamic analyses suitably adjusted intrinsic characteristics 
hand computational agents considerably sophisticated decision making capacity people prevent expectations observed human performance realized 
number distributed computational systems exhibit characteristics offer increased performance compared traditional operating systems 
enterprise market scheduler independent processes agents allocated run time remote idle workstations bidding mechanism 
evolved system spawn organized market economy composed interacting buyers sellers :10.1.1.17.605
commodities economy computer processing resources specifically slices cpu time various types computers distributed computational environment 
system shown provide substantial improvements conventional systems providing dynamic response changes resource sharing 
scientific point view analogy distributed computation natural ecologies brings mind spontaneous appearance organized behavior biological social systems agents engage cooperating strategies working solution particular problems 
cases strategy mix agents evolves asymptotic ratio constant time stable perturbations 
particular successful markets requires number changes traditional computer systems 
system provide easily accessible reliable market buyers sellers quickly find 
second individual programs price sensitive respond changes relative prices resources 
implies programs sense able choices various resources suited task hand 
number market systems implemented years :10.1.1.17.605
instances focus finding appropriate machine running single task 
important flexibility provided systems market mechanisms manage collection parallel processes contributing solution single task 
case prices give flexible method allocating resources multiple competing heuristics problem perceived progress 
greatly simplifies development programs adjust unpredictable changes resource demand availability 
important flexibility provided systems market mechanisms manage collection parallel processes contributing solution single task 
case prices give flexible method allocating resources multiple competing heuristics problem perceived progress 
greatly simplifies development programs adjust unpredictable changes resource demand availability 
second reason consider markets may useful flexible allocation computational resources competing tasks simplicity price mechanism provide help designing cooperative parallel programs 
system spawn task starting certain amount money corresponding relative priority bids machines network :10.1.1.17.605
way task allocate budget resources important 
addition prices low tasks split parts run parallel shown fig 
adjusting number machines devoted task demand users 
user point view starting task spawn system amounts giving command execute necessary funding buy resources 
specifically perceived payoffs taken normally distributed standard deviation correct values 
addition information delays cause agent knowledge state system somewhat date 
simplicity consider case agents effective delay uncertainty preferences resource mention range behaviors general situations 
specific illustration approach consider case resources system described fraction agents resource time 
dynamics governed df dt rate agents reevaluate resource choice probability agent prefer resource choice :10.1.1.187.8072
generally function density dependent payoffs 
terms payoffs uncertainty erf quantifies uncertainty 
notice definition captures simple requirement agent prefer resource payoff relatively large 
delays information modeled supposing payoffs enter time values delayed time 
tad hogg bernardo huberman 
controlling chaos distributed systems 
ieee trans 
systems man cybernetics november december 
bernardo huberman tad hogg :10.1.1.187.8072
behavior computational ecologies 
huberman editor ecology computation pages 
north holland amsterdam 
kephart hogg huberman 
reprint edition 
sutherland 
futures market computer time 
communications acm june 
carl waldspurger tad hogg bernardo huberman jeffery kephart scott :10.1.1.17.605
spawn distributed computational economy 
ieee trans 
software engineering february 

