logic algebraic effects gordon plotkin gdp inf ed ac uk info laboratory foundations computer science school informatics university edinburgh edinburgh scotland logic algebraic effects algebraic representation computational effects operations equations 
calculus minimal calculus separates values effects computations order evaluation 
extended obtain logic classical firstorder multi sorted logic higher order value computation types levy call push value principle induction computations free algebra principle predicate fixed points 
logic embraces moggi computational calculus definable modalities hennessy milner logic evaluation logic hoare logic presents difficulties 
numerous approaches tackle complexity reasoning programming languages incorporate computational effects exceptions nondeterminism state input output concurrency continuations 
moggi gave uniform representation effects monads idea computations element say set modelled elements monad :10.1.1.41.840
plotkin power proposed representing effects operations equations get uniform theory effects accounted source call effects algebraic :10.1.1.158.8901:10.1.1.144.1841
effects mentioned algebraic notable exception continuations treated differently 
supported epsrc gr royal society wolfson award fellowship 
supported epsrc gr 
algebraic approach arguments operation represent possible computations occurrence effect 
example binary choice operation nondeterministically chosen boolean represented term return true return false operation choice elements type 
equations operations example saying semi lattice operation generate free algebra monad exactly monad proposed moggi model corresponding effect :10.1.1.22.2642
article proposes logic algebraic effects aims show provides rich framework embraces approaches developed specific effects hennessy milner logic concurrency approaches originating representation computational effects monads pitts evaluation logic :10.1.1.42.1853
define embrace translation preserves provable judgements 
translation reflects provable judgements call strong embrace 
section introduces calculus syntactic properties denotational semantics 
calculus minimal calculus separates values effects computations order evaluation 
section extended classical order multi sorted logic higher order value computation types levy call push value principle induction computations free algebra principle predicate fixed points 
section show moggi computational calculus definable modalities hennessy milner logic evaluation logic embraced logic observe problems embracing hoare logic 
section briefly study recursion logic semantics 
section discusses open problems 
calculus calculus consists parts values effects computations 
structure reflected semantics part interpreted separate category 
similar levy call calculus consists part values part computations 
describe values effects equational theories 
serve parameters calculus computations values effects 
values take collection base types natural numbers nat booleans bool memory locations loc 
signature fun list base functions 
example zero nat succ nat nat plus nat nat nat 
shown build value terms type context consisting variables uniquely bound value types typing judgements form 
write bound 
article vector notation abbreviate lists 


vn vi 

vn fun 
syntax typing rules value terms describe properties values value theory consisting equations value terms closed usual rules multi sorted equational logic 
write equation value theory effects represent sources effects take finite single sorted signature op finitary algebraic operations op examples binary operation nondeterminism family nullary operations varying finite set exceptions 
capture polymorphic nature operations build effect terms serve templates computation terms type 
effect terms built typed context 
distinct effect variables shown 
computation terms arbitrary type substituted variables 
op 
tn ti 
op 
tn op op 
syntax typing rules effect terms example effect term effect term representing nondeterministic choice raising exception describe properties effects equations form effect theory collection equations closed standard rules equational theories 
value theory write equation effect theory equationally consistent effect theories theories equation interest 
examples algebraic effects shown table case state 
tn effect term looks location proceeds ti contains datum di 
addition effects represent various combinations effects 
demanded signature op finite operations finitary sets exceptions locations data alphabet finite 
restriction lifted generalise operations section 
computations effectful programs cause effects return values evaluation order 
reflect represent computation terms limiting computation terms combined operation returned value terms computation terms sequenced binding 
seen type computation types ranged 
calculus computation types limited types computations ultimately returning value type 
define instantiation effect term 
computation terms ti equational schemas allow put computation term canonical form bindings 
derive equality associativity binding usually taken axioms :10.1.1.41.840
lemma 
effect term computation terms ti proof 
induction structure commutativity operations binding 
definition 
computation term canonical form form return effect term value terms vi 
proposition 
computation term exists computation term canonical form proof 
proceed induction structure cases return op 
tn straightforward case lemma 
theorem 
equalities return derivable appear free proof 
equality provably equal term form return proposition 
equality return return return derivable lemma 
finish proof equality 
proof second equality proceeds similarly assuming canonical form 
seen proof associativity binding consequence commutativity operations 
properties operations reflected binding example commutativity derivable effect theory commutative 
proposition 
equality op op 

op 
nn op op 

op 
nn effect theory operations op op op equality derivable assuming distinct appear free 
addition op op 

op 
nn op 
nn effect theory operations op op equality derivable 
semantics interpret value terms category set sets effect terms lawvere theory computation terms category modl set models theory set 
values interpretation determined sets base type functions base function 
stated assume fixed interpretation omit index 
contexts 
xn interpreted component wise interpretation value terms defined inductively xi pr 
vn 
vn interpretation sound respect value theory equation 
consider sound interpretations 
effects effect theory gives rise lawvere theory standard way volume chapter 
effect term 
interpreted morphism defined pr op 
tn op 
tn op interpretation operation op lawvere theory 
computations model lawvere theory set product preserving functor set 
models natural transformations form category modl set equipped forgetful functor modl set set maps model set 
functor left adjoint takes set constructs free model 
computation types interpreted free models computation terms interpreted maps defined inductively op 
tn op 
tn return id uf sta uf um lifting function um sta uf uf strength functor uf lemma 
map um operation op diagram commutes 
uf ida op uf ida pr um op um proof 
transposing um obtain map adjunction model morphism commutativity diagram translates commutativity diagram op fn op commutes naturality proposition soundness 
derivable computation terms 
proof 
show soundness equality go rules calculus 
proving soundness structural rules inheritance rules equality straightforward 
show soundness commutativity operations binding lemma known naturality result adapted non monadic setting 
related note converse rule inheritance value theory sound effect theory equationally consistent 
completeness result relative value theory proposition completeness results algebraic theories 
theorem completeness 
computation terms 
equality holds sound interpretations equation derivable 
logic get expressive framework calculus extend value theory order logic extend effect theory parametric operations binding equations side conditions extend value computation terms extended type structure pattern levy call push value 
extend equational logic calculus classical multi sorted order sequent calculus principle induction computations predicate fixed points 
terms logic value computation terms classification logic exogenous logic computation terms parts propositions endogenous logic propositions concern single computation 
syntax order value theory collection base types signature fun consisting base functions signature rel consisting base relations form 
build firstorder multi sorted value formulae form usual way 
value theory collection formulae closed standard rules classical multi sorted order logic signatures fun rel 
parametric operations binding having set nearly identical operations location datum take single operation parameter types update loc dat 
way get finitary syntax describing infinite set effects 
describe memory holding infinite set data routinely generalising operations infinitary ones left infinitary syntax 
take alternative approach allow argument operation dependent values base types example dat effect term computation copies datum proceeds operation lookup loc dat 
take general signature op operations op 
base types parameter types base types 
respective arity types 
writing signatures omit semicolon 
empty write 
empty 
reflect dependency values type effect terms context value variables context abstracted effect variables rules op 
xi ti 
op 
xn tn describe case equation holds particular subset parameters write equations form form side condition 
way finite syntax write possibly infinite number equations 
effect theory finite collection equations equational theory 
unfortunately know rules equational theories operations parameters arguments binding see preliminary results 
value computation terms types calculus terms fst snd inl inr match inl inr thunk op 
xn tn force return fst snd tv forcing value computation terms intertwined thunk computation term obtain value term pass eventually forcing retrieve original computation term 
type value computation terms context value variables context computation variables 
omitting previously mentioned rules base functions returned values binding known rules variables products sums function types typing rules thunk force xi ti 
op 
xn tn define instantiation effect term xi ti 
defined argument wise operations op variables op ti xi 
propose calculus value computation terms 
natural example consider conditional equations form difficulty find right rules 
logic noted logic exogenous describe properties computations introduce predicates predicate variables addition usual propositions built predicate variable required occur positively 
type propositions prop predicates prop context value variables context computation variables context predicate variables prop prop prop prop prop prop standard rules 
judgements logic form list hypotheses 
propositions contexts 
write hypotheses 
rules logic standard reasoning rules classical order sequent calculus including structural rules equivalence defining behaviour predicates rules sums products lambda expressions forcing call push value rules inheriting value effect theories equations return op op 
binding second op 
equation op op op defines behaviour operation op 
computation type similar ones computation types rules stating predicate smallest pre fixed point principle induction computations stating computation term type returned value built computation terms operations computation variable proposition prop form return op 
op 
operations op op 
op proposition op xi xi free algebra principle stating op 
uf 
thunk return op op 
op take computation term top op thunk op 
top thunk states ti top op top op equality ti theory top op defined effect top op op top top op abbreviates return similarly existential quantification 
note uniqueness proved induction principle 
free algebra principle top defines op formula says th axiom effect theory holds op says preserves op 
note finiteness signature op effect theory formulation induction free algebra principles 
logic prove stronger version theorem 
theorem 
equalities derivable 
return proof uses induction principle structural induction theorem 
structural induction unwieldy due large number term constructors fails prove theorem presence effect variables 
similar way prove non schematic version proposition 
operation op 
define generic effect gen op def op 
evident abbreviations particular stands see discussion operations generic effects 
example loc dat applied location returns datum stored usually written operations recoverable generic effects 
example operation form op op general case pattern matching 
generic effects programming example useful logic equations effect theory written operations 
modalities define local modalities order reason computations 
modality expresses properties computation terms returned values operation modality expresses properties terms immediate subcomputations 
exogenous view modalities operators predicates propositions 
define modalities predicate prop operation modalities op op operation op 
predicate 
prop def return def return op def 
op op def 
op notation modality follows notation moggi predicate expressible terms modality 
define predicate prop 
op op op 
xi xi defined dually 
intuitively states immediate subcomputations satisfy 
derived elimination rules necessity modalities return op op dually possibility modalities 
adjoint form rules see categorical approach logic operation modalities quantifiers corresponding inclusion value terms computation terms operations respectively 
extend local global reasoning predicate fixed points define global necessity modality global possibility modality 
way define global modalities known computational tree logic af recall working set computations finite 
intuitively states subcomputations effects satisfy 
subcomputation relation reflexive transitive expect global modalities satisfy axioms 
proposition 
rules dual ones derivable 
semantics start interpretation determined sets base type functions base function subsets base relation form 
determines interpretation rest logic 
interpret value formulae form standard way subsets consider interpretations sound respect value theory effect theory equational theory abbreviation infinitary fixed interpretation base types occurring arity types operations interpreted countable sets 
case assume effect theory gives rise countable lawvere theory adjoint functors modl set set standard way 
interested interpretations non trivial 
value types interpreted sets computation types interpreted models theory value types interpreted obvious way cases computation types interpreted model structure defined component wise point wise context 
xn interpreted 
interpreted 
value terms interpreted functions computation terms interpreted functions defined straightforward way 
note computation terms interpreted morphisms kleisli category adjunction form um un um 
interpretation equal form um furthermore form um morphism kleisli category 
contexts prop 
xn prop interpreted sets propositions prop subsets predicates prop maps defined obvious way 
particular fixed points defined follows interpretation predicate prop prop defines monotone operator 
tarski fixed point theorem smallest fixed point sa define map sa 
judgement 
sound respect interpretation 
showing soundness reasoning rules straightforward structural rules rules connectives quantifiers standard ones proof soundness equations straightforward interpretation fixed points sound definition proofs soundness induction free algebra principles proceed universal property free model 
non trivial consistency proposition holds 
return return embracing approaches computational calculus computational calculus predicate states computation term causes effects place separation values computations :10.1.1.41.840
base functions computational calculus arbitrary type cause arbitrary effects 
main premise approach algebraic operations adequate representation effects argue arbitrary primitive functions need pure functions generic effects operation op general generics add sum types moggi language 
mild assumption get embrace computational calculus translating types uf contexts 
xn terms 
xn return return gen op gen op return thunk force return return fst return fst snd return snd return thunk judgements tt force proposition 
hennessy milner logic hennessy milner logic examines ccs process satisfies property processes properties ranging set actions note deal finite processes 
dual properties defined terms negation 
satisfiability transition relation usual way 
embrace take operations equations represent process computation term evident way 
lemma 
map sends process induces bijection equivalence classes bisimilar processes elements free model 
proposition 
processes exists process proof 
assume proceed induction hold case second case proceed way 
assume get soundness interpretation free model lemma 
get define translation formulae predicates similarly cases 
translation get strong embrace hennessy milner logic 
shows express modalities hennessy milner logic terms local modalities operations conjecture converse fails suitable sense operation modalities expressed modalities hennessy milner logic 
lemma 
process ai pi action ai ai proof 
proof employs free algebra principle algebra defined sum regard set bisimulation equivalence classes qn qj subterm action occurring evident semi lattice zero structure define qn qn qn subterm 
proposition 
holds 
proof 
proceed induction 
propositional cases evident 
case ai pi ai pi pi ai 
lemma ai holds know ai induction hypothesis 
converse straightforward proposition 
case exists 
induction hypothesis get fact implies 
hand get soundness interpretation show implication direction 
corollary 
processes bisimilar proof 
follows congruence properties 
hennessy milner logic classifies bisimilar processes get hand bisimilarity characterised equations effect theory implies evaluation logic evaluation logic reasons computations terms values return :10.1.1.42.1853
necessity modality states value computed computation term satisfies 
example effect hand nondeterminism holds values computed satisfy exceptions holds satisfies raise exception 
possibility modality defined dually states exists value computed computation term satisfies 
translate types evaluation logic terms uf thunk return thunk force force contexts 
xn 
xn formulae def op 
xi xi op op agrees moggi definition evaluation modality set 
write ev judgements pitts evaluation logic modality rules limited moggi derived ones duals :10.1.1.42.1853
proposition 
ev hoare logic finite commands state locations 
ln embraced state translating hoare triples 
xn ln 
yn ln return natural 
answer may lie coalgebraic treatment state algebraic treatment failed give natural operational semantics state 
treatment fit pitts ad hoc approach state 
recursion sketch version scott lcf adapted algebraic computational effects claim 
logic extension logic algebraic effects set category cpo cpos continuous maps 
extend value theory inequations form suitable axioms rules including asymmetry 
effect theory inequations example assume existence operation equation 
level computation terms add recursion logic additional atomic propositions 
axioms rules adapted presence inequations obvious way principle induction computations restricted admissible propositions axiom principle scott induction restricted admissible propositions 
definition admissibility complex owing presence predicates predicate variables give note admissible suitable assumptions axioms rules case logic set adapted presence inequations 
interpret values cpo interpret base types occurring arities countable sets 
effect theory gives rise countable discrete lawvere cpo theory adjunction modl cpo cpo standard way 
evidence expressiveness strength logic algebraic effects clearly remains done 
mention example expect get embrace global evaluation logic investigated embrace dynamic logic 
question account computation exception handlers remains open question logic may 
set cpo looking logic general category ask logics categories presheaves sheaves consideration new names variables separation logic additional logical connectives 
acknowledgments authors andrej bauer paul levy john power alex simpson insightful comments support 
benton kennedy 
exceptional syntax 
fun 
prog 
borceux 
handbook categorical algebra 
cambridge university press 
flanagan sabry duba felleisen 
essence compiling continuations 
pldi pages 
gabbay pitts 
new approach syntax variable binding 
form 
asp 
comp 
goncharov schr der mossakowski 
completeness global evaluation logic 
st mfps pages 
gordon milner wadsworth 
edinburgh lcf 
springer 
hennessy milner 
algebraic laws nondeterminism concurrency 
acm 
hoare 
axiomatic basis computer programming 
comm 
acm 
hyland levy plotkin power 
combining algebraic effects continuations 
theor 
comp 
sci 
hyland plotkin power 
combining effects sum tensor 
theor 
comp 
sci 
hyland power 
discrete lawvere theories computational effects 
theor 
comp 
sci 
levy 
call push value decomposing call value call name 
high 
ord 
symb 
comp 
levy 
monads adjunctions global exceptions 
elect 
notes theor 
comp 
sci 
moggi :10.1.1.41.840
notions computation monads 
inform 
comp 
moggi :10.1.1.42.1853
general semantics evaluation logic 
th lics pages 
moggi 
semantics evaluation logic 
fund 
inform 
pitts 
evaluation logic 
th pages 
plotkin 
varieties equational logic 
essays dedicated joseph goguen pages 
plotkin power 
adequacy algebraic effects 
th fossacs pages 
plotkin power :10.1.1.22.2642
notions computation determine monads 
th fossacs pages 
plotkin power 
algebraic operations generic effects 
appl 
cat 
struct 
plotkin power 
logic computational effects progress 
th 
plotkin power 
computational effects operations overview 
elect 
notes theor 
comp 
sci 
plotkin power 
tensors models operational semantics 
th mfps 
appear 
pnueli 
temporal logic programs 
th focs pages 
power 
countable lawvere theories computational effects 
elect 
notes theor 
comp 
sci 
power 
coalgebras state arrays 
elect 
notes theor 
comp 
sci 
reynolds 
separation logic logic shared mutable data structures 
th lics pages 
schr der mossakowski 
monad independent dynamic logic hascasl 
log 
comp 
scott 
type theoretical alternative iswim cuch 
theor 
comp 
sci 
