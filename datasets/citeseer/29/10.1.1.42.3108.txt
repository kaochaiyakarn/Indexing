proceedings th workshop generation information technologies systems israel july 

vol 
springer verlag pp 

olog deductive object database language extended mengchi liu department computer science university regina regina saskatchewan canada cs uregina ca www cs uregina ca 
proposes novel deductive language supports important structurally object oriented features object identity complex objects typing classes class hierarchies multiple property inheritance overriding con ict handling blocking schema de nitions uniform framework 
language ectively integrates useful features deductive object oriented database languages 
main novel feature logical semantics cleanly accounts structurally object oriented features missing object oriented database languages 
establishes theoretical foundation practical deductive object oriented database system advanced database applications 
past years number deductive object oriented database languages proposed logic revised logic logic iql logres llo noodle complex coral gulog rock roll rol rol :10.1.1.35.2858
objective deductive object oriented databases combine best deductive object oriented approaches recursion declarative querying rm logical foundation deductive approach object identity complex objects typing classes class hierarchy multiple property inheritance overriding con ict handling blocking schema de nition object oriented approach 
existing proposals fall kinds languages logical semantics limited object oriented features revised logic logic rol languages object oriented features logical semantics iql rock roll coral 
non monotonic multiple property inheritance fundamental feature object oriented database languages orion 
user explicitly rede ne override inherited attribute 
see details 
propose novel deductive object oriented database language called olog 
olog iql overcomes problems associated iql supports important object oriented features object identity structured values complex objects typing class hierarchies multiple property inheritance overriding con ict handling blocking schema de nition 
iql allows object identi er identify kind value 
ectively integrates useful features deductive languages especially rol relationlog :10.1.1.40.2037:10.1.1.35.2858
logical semantics cleanly accounts structural features object oriented databases listed 
objective establish theoretical foundation practical dood system 
organized follows 
section introduces syntax olog 
object identi er oid term 
tn terms distinct attributes tn tuple term 
tn terms ht tn partial set term 
tn terms involving partial set terms ft tn complete set term 
partial set terms complete set terms rst introduced rol extended relationlog generalize set treatment hilog logic ldl :10.1.1.40.2037:10.1.1.35.2858
manipulation sets convenient 
enable user encode open closed world assumption sets directly program 
see detailed discussion 
term ground variables 
de nition 
rule expression form ln head atom body ln sequence atoms negation atoms 
usual rules required safe covered de ned 
fact safe rule empty body 
notion strati cation logical languages give semantics programs involving negation sets :10.1.1.40.2037:10.1.1.35.2858
normally program strati ed statically determined dependency graph de ned symbols predicate function attribute symbols program 
olog may atom symbol de ned symbol variables 
de ne strati cation syntax usual 
iql olog programmer responsible strati cation program organize program sequence subprograms explicitly 
de nition 
subprogram interpretation step operator tp yields instance ln constituent atom exists ground substitution oid assignment ln ln constituent atom exists ground substitution object ln ln exists ground substitution relation tuple ln unique oid assignment typed tp unde ned 
note notion tp incorporates unique oid assignment typing constraints 
tp may compact consistent 
introduce grouping operator relationlog :10.1.1.40.2037
group partial tuple set information spread objects relation tuples complete information 
rst introduce auxiliary notion 
set values compatible pair holds 

note objects grouped identity 
example 
examples show grouping operator applied values objects relation tuples ancestors ann ancestors ann ancestors ann ann ancestors ancestors ancestors ancestors ancestors ancestors ancestors tom ancestors tom husband adam wife eve children family husband adam wife eve children family husband adam wife eve children husband adam wife eve children husband adam wife eve children abel proposition 
instance schema de ned interpretation 
relationlog partial set terms olog function di erent ways depending head rules body rules :10.1.1.40.2037
head accumulate partial information corresponding complete sets 
conversion partial sets complete sets done grouping operator body denote part corresponding complete sets 
conversion complete sets corresponding partial sets done part notion 
de nition 
