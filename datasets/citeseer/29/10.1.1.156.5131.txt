implicit parameters dynamic scoping static types jeffrey lewis mark shields erik john launchbury oregon graduate institute science technology utrecht introduces language feature called implicit parameters provides dynamically scoped variables statically typed hindley milner framework 
implicit parameters lexically distinct regular identifiers bound special construct scope dynamic static 
implicit parameters treated type system parameters explicitly declared inferred 
implicit parameters small call name calculus 
give type system type inference algorithm semantics 
explore implicit parameters wider settings call need languages overloading call value languages effects 
witness implemented implicit parameters extension haskell hugs interpreter motivating examples 
scenario pretty printing just finished writing perfect pretty printer 
takes input document laid produces string 
pretty dot string done hard part code lovely concise modular pretty printer produces output bother hand 
re thinking functional pearl 
just details left 
example focusing unimportant details hard coded width display characters 
annoying thing check see exceeded display width buried deep code 
permission digital hard copies part ofthis usc granted fee provided copies nn distributed commercial advantage ld copies bar notice full citation page 
cc py republish post servers redistribute lists requires prior specific permission fee 
popl boston ma usa acm line lines code levels deep recursion 
basically choices 
define global named width line add extra parameter nearly function pretty printer percolate width levels recursion 
choice satisfactory 
fuss especially annoying change wish conceptually small implementing require significant change program 
really get best definition parameterized thread additional parameter code 
implicit parameter 
system proposed need change line place display width checked handful type signatures discussed section 
rest pretty printer remain completely unaffected 
idea introduce parameter program presence inferred programmer having spell 
introduce implicit parameter change line follows 
width 
annotation identifier indicates implicit parameter 
small change ask type pretty answer pretty width int dot string means pretty function dot string implicit parameter named width type int 
ase implicit parameter presence inferred 
striking difference implicit regular explicit parameters implicit parameter introduced propagated automatically 
words function implicit parameters called implicit parameters inherited caller 
examine definition pretty find defined terms function worker implicitly parameterized 
pretty worker cl worker width int dot string lifting finger saw type pretty width parameter propagated parameter pretty 
implicit parameter twice context uses merged 
pretty twice get twice pretty width parameter twice pretty pretty pretty twice pretty width int dot string implicit parameters bound construct 
express original behavior pretty fixed width pretty width dot string course need extend language just set display width 
point user control display width 
display characters wide need point halve display width pretty pretty width pretty width int dot string vars vars implicit vars terms type vars types schemes contexts type mvar pvar contexts xx 
viz 
car tl xl distinct xl distinct notice means bindings recursive implicit parameters easily rebound 
merging multiple uses implicit parameter scope want easy renaming 
example consider laying documents side side different display widths 
lhs pretty dl width rhs pretty width fill lines lhs lines rhs int int dot dot string rest ivar app abs ttr xx 
gen pzm section introduce type system implicit parameters followed section semantics implicit parameters 
section offer illuminating examples 
section discusses issues associated adding implicit parameters full language 
followed section related close section directions 
types implicit parameters formalize implicit parameters presenting type system inference algorithm small language 
syntax types presents syntax types call name calculus bound polymorphism implicit variables typed terms 
bindings 
syntactically associates left 
type system extension standard hindley milner type system 
distinguishes primarily presence new context implicit parameters 
context keeps track implicit parameters term 
addition type schemes describe types bound variables extended include implicit parameter contexts 
implies notion traditional hindley determines type variables quantify includes abstraction implicit parameters 
write gen denote principal type scheme associated context gen aid presenting axiomatic semantics section choose lexical distinction bound variables bound variables 

distinction unnecessary practice 
bound variables bindings implicit parameter contexts monomorphic 
get see variable bound generalize 
luxury afforded dynamic scoping restrict implicit parameters monomorphic 
type system perspective implicit parameters lambda bound variables binding sites just hag pen far removed usages 
ivar rules ones explicitly add remove elements implicit parameter context 
notation denotes binding removed 
may note ivar corresponds mvar corresponds writ backwards corresponding app abs rules implicit parameters 
combination fact types appear type schemes clear functions take implicitly parameterized arguments 
reasons lambda bound variables generalized abandon type inference abandon type safety 
section discuss avoids worst sort bugs arise dynamic scoping lisp 
standard rules pvar ones modified outside simply adding implicit parameter context 
real change pvar rule insist instantiated implicit parameters variable included implicit parameter context judgment 
point note rule dynamic context judgment completely independent dynamic context consequent 
independence assures implicit parameters arising associated principal types inherit hindley milner problem typings terms unique 
fortunately extension preserves property terms principal types unique type best represents type term 
hindley milner polymorphic term may arbitrarily specific type general typing 
implicit parameters similarly allow term implicit parameters uses 
example valid typings constant int bool int 
extend notion general type hindley milner mean addition fewer implicit parameters 
general written 
bc da mvar pvar ivar app abs id new id id ff new cy el cl vl ul ue ue um ec fb 
new xx 
bff el ge ec ol cl new cr vr vi mgu cl mgu vr 
ec type inference terms 
type inference type inference algorithm implicit parameters 
deductive style remy :10.1.1.47.1059
invocation written follows arrow indicates input algorithm arrow indicates output 
result algorithm principal type write mg denote general idempotent unifier types 
implicit parameter contexts write mgu cr denote pair smallest context containing cr cs defined follows 
uh cl usual substitutions form semi lattice 
write denote upper bound substitutions lattice 
understood type inference derivation impossible operations undefined 
relationship type system inference algorithm expressed theorems 
theorem soundness note particular theorem er implicit parameters simply static variables 
application implicit variables 
consider proof proceeds induction structure derivations coupled usual tedious reasoning type substitutions 
note theorem implies 
holds possible types algorithm yields principal type 
semantics section develop axiomatic semantics suitable program transformations 
continue developing operational semantics type directed translation typed terms call name calculus bound polymorphism 
translation preserves equality forms basis implementation implicit parameters hugs 
intuition launching detailed axiomatic semantics test intuition simple examples 
things interesting ll assume extended integers addition obvious way 
explore interaction 
consider equal 
rule requires generalized implicit parameter means occurrence evaluated local environment 
may rewrite example may simplified expand definition see correct result 
abstracting particulars see ti xx 
equal 
consulting see abs rule requires monotype 
substituting argument variable take care ensure uses binding 
don substitute immediately reroute correct binding fresh implicit variable doing yields propagate renaming propagate binding expand correct answer 
axiomatic semantics presents rules typed terms 
rules defined terms substitution operators binding form variable class 
consider reduction abstractions 
write denote substituting bound variable typed 
may contain implicit parameters provided surrounding context just take care avoid static name capture renaming bound variables avoid dynamic name capture rebinding implicit variables 
rebinding obvious definition taken care ensure implicit parameter binding bypass binding fresh implicit variable 
case similar time bypass implicit parameters rules xx uint ti rules xx 
cy rules xx xy uint uint plus congruent closure substitution vars ul ul xy 
xy sf tv int fvars wars fresh fresh substitution vars remaining cases van substitution implicit vars xh xy 
xy 
tv vint vint xt xt ti axiomatic semantics 
lest captured notice rule change type 
particular depend fresh implicit variables bound surrounding term type remains unchanged 
surprisingly rules reduction term perform rebinding 
obvious recall bound term generalized implicit parameters 
essentially calculus substitution 
rules reduction terms illustrate dynamic environment propagated subterms 
implicit variables lexically distinct static variables danger name capture xy 
need rename furthermore implicit parameters immutable dynamic environment need threaded state program 
simply propagate interesting rule comes 
ll generalized 
depends implicit variable implicit binding resolved occurrence may unrelated binding translation semantics type directed translation terms familiar call name calculus bound polymorphism tuples 
providing semantics translation provides convenient mechanism adding implicit parameters existing language 
translation borrows technique dictionary passing give semantics overloading haskell :10.1.1.47.1059:10.1.1.47.1059
short encode treat implicit parameter contexts tuples explicit parameters 
presents translation induction type derivation rules 
tuples show var rules arise making implicit parameters explicit 
note target language just ordinary variable retained ensure introduced identifiers confused source program 
term may typed type derivation address question translation coherent 
example term translated choose principle type choose specific type thing arises additional unused parameters difficult see loss coherence 
axiomatic semantics sound respect translation semantics 
write denote mvar pvar 
tn ic ver wi icf full languages particularly haskell 
demonstrated extending hugs interpreter include implicit parameters 
suggested section implementation leverages existing type class mechanism implicit parameters new kind type predicate 
resulting system available distribution hugs pi 
chief advantage having real implementation development real examples 
enabled explore system exploring merely curiosity real practical potential 
rest section contains variety illustrative examples 
ivar app abs xx 
xx 
tt uf gen cir ad 
ut uw translation semantics 

implied context write denote ordinary calculus substitution 
lemma theorem tn proofs proceed straightforward induction structure examples far implicit parameter system extension simple hindley milner typed lambda calculus 
practice integrates nicely auxiliary parameters recursive definitions recursive function definitions parameters don change recursive calls 
convenience es small nod efficiency definitions factored worker wrapper arrangement worker recursive definition written local function explicitly parameterized auxiliary parameters 
example append cal cal cal append xs ys prepend xs prepend xs prepend xs prepend cl ys unfortunately side effect hiding function doing prepend rest program 
quite unnecessary considerable inconvenience 
example access prepend outside body append examine type test directly 
worse standard haskell lacks ability express scoped type variables give type signature prepend 
implicit parameters factor definition way prepend need hidden inside definition append anymore 
append cal cal cal append xs ys prepend xs ys ys prepend ys cal ai prepend xs prepend xs prepend cl ys give proper type prepend reuse test isolation append 
trivial example principle scales naturally particularly writing monadic code common pattern generate state components pass recursive worker code 
able pass state context implicitly simplifies body code 
concrete consider depth traversal routine 
case pass procedures accessing state array 
data rose node rose dfs graph vertex rose vertex dfs vs runst arr bounds false vs marked arr mark arr true return vs ib marked vs mark ps children qs vs return node ps qs function df looks defined local definition top level function typable right graph marked vertex st bool 
mark vertex st vertex st dose vertex environments writing shell scripts parameters script passed environment 
simply paucity shell scripting languages environment variables form moderately stable context execution script 
similar gui code 
large graphics context 
gc contains relevant windowing information including default font color size example 
time gc remains unchanged example text needs written different color 
gc color changed text written color changed back 
typical shell environments represented lists pairs 
implement shell environments implicit parameters follows type environment string string getenv env environment string string nv var case lookup env var just val val shells typically provide way change environment side effect far common idiom changes environment scope sub processes forward 
idiom naturally mimicked implicit parameters 
consider script called program needed different environment search path ordered differently core size changed 
env environment string string environment update env update cl update abs abs update abs example foo path getenv path baz env path path bar third components tuple access current value path call baz context path bound contents path 
numerical methods provide example environments useful 
environment contain parameters control factors desired accuracy response ill conditioned problems 
file io doing file haskell programmer forced carry file handles 
adds quite bit clutter 
implicit parameters model functionally nice situation notion standard input output streams stream easily redirected stream 
haskell io library provides primitives getline putstr follow convention provide easy way redirect 
implicit parameters redefine getline putstr follows 
stdin io string putstr stdout string io define simple session session stdin stdout io session name getline putstr hello postulate mechanism binds stdin stdout top level respective defaults top level declaration example default line putstr behave exactly haskell 
programmer easily redirect stdout having change session code openfile foe session stdout linking haskell java jni java native interface jni allows way integration java native code programs written languages haskell lo 
native side reflection java method extra parameters jnienv pointer pointer 
jnienv pointer handle virtual method table native methods access parameters objects java 
ect pointer variable java 
consider simple class native method supposed display prompt return user response class string prompt native string getline method implemented haskell function getline jnienv io explained gets additional arguments environment pointer type jnienv pointer type instance getline method called 
order display prompt fetch content prompt field object marshal value proper string 
display read user response back java string returned result calling getline 
actual details interacting java jni painful 
read field java object get class object field name field type entry jnienv jclass string string io read value jnienv io get class object jnienv entry jnienv io jclass functions entries jnienv method table translate java haskell strings 
calling functions right order passing jnienv pointer implement function getline haskell follows line jnienv io getline jnienv cls jnienv fid jnienv cls prompt ljava lang string jnienv fid prompt jnienv putstr prompt answer jnienv answer explicitly passing jnienv argument tedious pass environment pointer call jni primitive 
implicit parameters come rescue just argument implicit similar way environment section implicit 
functions jnienv method table get jnienv jnienv implicit parameter jnienv jnienv io jclass jnienv jnienv jclass string string io jnienv jnienv io jnienv jnienv io string jnienv jnienv string io effect making jnienv implicit jni primitives functions automatically get jnienv implicit argument getline jnienv jnienv io getline doc cls fid cls prompt ljava lang string fid prompt putstr prompt answer answer expressive power implicit parameters able irrelevant details passing jnienv pointer 
resulting code conciseness difficult achieve working 
implicit parameters large discuss subtle language design issues associated adding implicit parameters full language haskell ml 
call need languages call need languages share computational cost evaluating bound terms updating 
example fib letx consider bound term defined implicit parameters fib fib fib fib fib fib fib io fib clearly cost evaluating fib shared 
problem semantics clearly term implicit parameters fully evaluated parameters supplied 
words term value computational cost share 
problem programmer accustomed able distinguish value computation looking syntax system type important 
designers haskell encountered subtlety :10.1.1.47.1059
bound term contains unresolved overloading value far sharing concerned determined knowing term type 
solution introduce monomorphism restriction bound term looks computation generalized 
effect adopting restriction implicit parameters 
consider looks computation monomorphism restriction kick generalized 
result statically bound binding stark disagreement axiomatic semantics 
effort preserve sharing altered language semantics hardly happy situation 
conclude presence implicit parameters monomorphism restriction wrong solution sharing problem 
address sharing programmer knowledge control subject editorial distinctions language designers 
give programmer knowledge suggest languages implicit parameters matter haskell style overloading need programming environments type information immediately available programmer whilst editing 
environments distinguishing values computations trivial 
alternately give programmer control providing versions non generalizing promises sharing generalizing doesn way type checker validate programmer intuition regards sharing 
call value languages technical difficulty adding implicit parameters call value language 
translation may unchanged axiomatic semantics weakened usual 
things interesting consider ml language side effects 
consider print fib output 
add implicit parameter print fib evaluation output twice 
timing effect depends type binding time free implicit parameters versus contains implicit parameters 
exactly problem call need 
call need lazy programmer surprised duplication 
call value eager programmer surprised duplication side effects 
surprise programmer knows type ml version haskell monomorphism restriction value restriction motivation prevent loss type soundness :10.1.1.47.1059
term requiring implicit parameters semantically value restriction may somewhat relaxed system compromising soundness 
haskell style overloading section saw translation turns implicit parameters explicit parameters dictionary translation turns overloading explicit dictionary passing :10.1.1.47.1059:10.1.1.47.1059
haskell form anonymous implicit parameters pleasant consequence implicit parameters haskell style overloading coexist happily 
witnessed implementation implicit parameters hugs 
half larger research programme de construct complex type class system haskell simpler orthogonal language features ll 
dictionary translation selfcontained language feature just semantics type classes left hood replace haskell type classes just implicit parameters 

original proposal type classes encode class declarations record types instance declarations values :10.1.1.47.1059:10.1.1.47.1059:10.1.1.47.1059
example consider standard fun class class fun map encode class datatype data functor functor map forall 
introduce class methods implicitly parameterized map forall 
functor functor map map functor type class system primarily designed solve problem overloading identifier type scope 
consider example haskell 
example assumes implicit parameters may higher ranked polymorphic types sufficient type annotations provided 
map map id type intl int int 
unfortunately implicit parameters come constraint instances implicit parameter type 
example ill typed map implemented implicit parameters map different types 
clearly programme remains unfinished 
signatures fly respect implicit parameters signatures 
selling points implicit parameters provide low impact way adding additional parameters existing program 
consider program annotated type signatures definitions 
considered style 
unfortunately programmer doesn need modify functions implicitly parameterized types functions change 
tedious global change type annotations may required 
fortunately easily mitigated way compatible type signatures allowing type signatures partially constrain context type 
ellipses 
context example indicate may arbitrary additional context elements constrained 
say indicate signature pretty constraining context 
pretty 
dot string solution suited haskell style overloading suffers exactly problem 
related dynamic scoping lisp quite didn mention lisp introduced dynamic scoping albeit bug took decades stamp 
modern lisps static scoping variables mit scheme statically scoped fluid construct dynamically binds variables side effect takes care ensure previous binding 
biggest problem dynamic scoping lisp involved higher order functions known downward problem 
function passed parameter function unintentionally free variables captured local environment 
implicit parameters provide functionality dynamic scoping lisp implicitly parameterized functions class passed arguments functions implicit parameters float outer contexts don enter inner ones 
argue implicit parameters give best dynamic scoping avoiding worst pitfalls 
furthermore type system know records dynamic parameters types 
qualified types system ip close syntax directed variant jones system oml formal system designed capture essence generalize haskell type classes 
system differs oml key ways instances implicit parameter assumed implicit parameters local binding construct 
oml label element context 
associated family types collection instances implicit parameters associated individual parameter 
type classes unconstrained uses overloaded construct assumed different implicit parameters assumed 
significance local binding construct affects design choices rule 
system follows conservative route binding implicit parameters bound variable 
haskell allows type predicates escape binding particular type depends type variables bound 
generalize type variables predicate predicate bound predicate 
approach chosen rule 
gen tv rule system principal types 
consider term typings int cr depending captured implicit parameter inner binding effect 
unfortunately types incomparable lub isn type term 
doesn affect haskell local binding mechanism corresponding 
instance declarations haskell global 
result constraint arises due bound identifier body propagate constraint anyway 
ideas distributed mark jones refined oml include notion dependencies 
resulting system step able encode implicit parameters overloading single system 
related odersky proposed system overloading individual identifiers overloaded classes operators haskell :10.1.1.27.2072:10.1.1.47.1059
proposal intended overcome number difficulties arise type classes 
individual identifiers overloaded type constraints bear striking similarity implicit parameter contexts 
system overloading lacks local binding construct 
label selective lambda calculus kaci allows dynamic static binding coexist 
system requires change foundation languages abstraction 
unclear change integrate existing functional languages 
past years monads popular way provide semantics systems especially involving effects state exceptions 
intrigued appeared comonads mathematical structure underlying implicit parameters 
intuition follows monads model effect performing computation associated outputs right hand sides semantic type judgments 
comonads hand model structure environments associated inputs left hand sides judgements 
example separated multiplicative intuitionistic linear logic comonads show modeling intuitionistic segment environment 
system comonads model implicit portion environment 
currently working categorical semantics implicit parameters 
hope demonstrate translation semantics simply represents term language family categories term language base category 
benton mixed linear non linear logic proofs terms models 
tech 
rep university cambridge computer laboratory oct 
pi wi pi wi king launchbury structuring depthfirst search algorithms haskell 
acm symposium principles programming languages san francisco california jan pp 

liang java native interface programmer guide specification 
java series 
addison wesley 
meijer claessen design implementation mondrian 
proceedings haskell workshop 
milner tofte harper mac queen definition standard ml revised 
mit press 
odersky wadler second look overloading 
proceedings conference functional programming languages computer architecture san diego california june acm press 
peyton jones hughes haskell non strict purely functional language 
haskell cs yale edu jan 
remy typechecking records variants natural extension ml 
conference record sixteenth annual acm symposium principles programming languages austin texas jan 
wadler blott ad hoc polymorphism ad hoc 
conference record sixteenth annual acm symposium principles programming languages 
dynamic binding lexical binding transformation calculus 
proc 
international workshop functional logic 

kaci typed label selective lambda calculus 
conference record popl lst acm sigplan sigact symposium principles programming languages portland oregon 
hanson mit scheme 
cambridge ma mit press apr 
jones theory 
cambridge university press cambridge england 
jones exploring design space implicit parameterization 
tech 
rep oregon graduate institute july 
jones type classes functional dependencies oct 
submitted publication 
jones peterson 
hugs user manual 

haskell erg hugs may 

