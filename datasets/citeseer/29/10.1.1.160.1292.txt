proving existential termination normal logic programs massimo marchiori dept pure applied mathematics university padova italy max hilbert math 
important open problem study termination logic programs existential termination 
transformational methodology provides necessary conditions su cient criteria existential termination 
followed approach develop suitable transformation logic programs term rewriting systems trss proving termination obtained trs implies existential termination original logic program 
extensive termination trss automatically logic programming setting 
approach dual notion universal termination fact spectrum termination properties said termination universal existential termination extremes 
satisfactory treatment problem termination logic programming negation achieved 
way provide unique uniform di erent notions termination 
study program termination fundamental topic computer science 
eld logic programming power paradigm way prolog study termination extremely hard 
kinds termination distinguished logic programs existential universal 
key property termination natural notion termination programmer viewpoint program run input nding solution problem saying solutions 
unfortunately existential termination important open problem see eld termination logic programs 
works far tried shed light problem giving satisfactory results cf 
give results expressibility nature saying prolog operational semantics principle codi ed formalism rst order logic instance termination properties studied trying kind inductive reasoning 
hand dual notion universal termination stronger property program terminate existentially invocation user backtracking number solutions problem nite 
property subject great number works cf 
due intrinsic complexity problem restrictive case works theoretical nature extremely di cult implement 
noticeable exception called transformational approach started rao kapur investigated consisting giving transformation logic programs trss universal termination logic program su ces prove termination transformed term rewriting system 
transformational approach advantages 
main trss study termination sharp contrast logic programming case easier available plenty criteria automatic semiautomatic implementations test termination instance path orderings polynomial orderings semantic labelling general path orderings see :10.1.1.15.3043
reader referred nice application transformational approach compiler veri cation 
advantage approach giving translation obtain criterion bunch criterion termination trss automatically criterion logic programs address open problem existential termination developing suitable powerful transformational approach able cope fundamental property 
way gain aforementioned bene ts proper kind approach 
fact tackle general problem introducing studying expressive property ofk termination roughly speaking ordinal program terminates rst derivations nite 
termination generalizes existential universal termination corresponding respectively termination termination providing hierarchy properties 
method cope di culties corresponding strong versions termination cf 
termination input possible inputs 
way unique uniform way cope di erent notions termination 
limit de nite logic programming cover termination normal logic programming programs important feature negation implemented prolog 
primary importance negation applications non monotonic reasoning arti cial intelligence known 
restricted universal termination fully satisfactory treatment termination programs negation far scope problem tightly related existential termination instance program universally terminates ground literal existentially terminates analysis taken carefully studied extent weget su cient criteria kinds termination necessary ones allowing formally state minimum power method 
instance method restricted universal termination far powerful works transformational approach 
point works transformational approach followed modular technique presenting complicated transformation main class logic programs built transformation composition smaller submodules 
way complexity transformation composition easier sub transformations making analysis easier subsequent improvements obtained separately enhancing submodules having rebuild transformation scratch 
organized follows 
develop transformation trss core subclass logic programs regularly typed programs rt short 
core transformation proven completely preserve termination giving necessary su cient criterion termination better plenty said earlier 
subclass extended bigger class safely typed programs st suitable transformation independent interest st logic programs rt logic programs 
results extended normal logic programming covering negation 
accurate comparison related 
preliminaries assume basic knowledge logic programming term rewriting systems 
standard logic programming terminology mainly follow whilst trss standard notations 
logic programs considered executed leftmost selection rule depth rst search rule standard way inwhich logic programming implemented example prolog 
consider full generality conditions constrain logic program goal notational convenience talk abuse class logic programs meaning collection logic programs goals 
notation assume logic program written nite set variables var signature fp pi predicate symbols fi function symbols constants nullary functions 
usually employed just minimal signature considered logic program written nite 
substitution dom indicates respectively domain range denotes inverse mapping jv restriction set variables composition functions indicated sequences terms written vectorial notation 
sequences formulae seen just abbreviations instance tm denotes string tm 
accordingly sequences sn tm stands sequence sn tm 
family objects terms atoms var set variables contained said linear variable occurs 
term sequence linear term sequence substitution dom var var var ran var simply replace repeated variables di erent fresh ones term linear instance take fz 
readable omit brackets argument unary functions may written 
sequence tn unary function shorthand tn 
goals clauses goals clauses di erent objects describing class logic programs usually provide di erent descriptions goal clauses 
di culty de nition de nition class said regular amg amg goal new nullary predicate symbol 
regular properties allows de ne class logic programs goal giving de nition programs making de nitions shorter 
assumption classes consider understood regular 
context useful going introduce transformations translate logic programs possibly goal logic programs possibly goal trss possibly term shorten de nitions transformations de ning logic programs goals identi ed clause goal analogously trss terms identi ed produced rule form goal 
automatically gives translation goal eventually 
program classes de nition mode ary predicate map ng fin outg 
map associating predicate mode 
moded program program endowed 
argument position moded predicate called input resp 
output mapped mode resp 

multiple de ned renaming predicates 
denotes moded atom having input positions lled sequence terms output positions lled respectively number input output positions moded predicate roughly seen function input arguments output ones 
instance predicate viewed function having inputs rst arguments output third 
programs consider typed 
type system provided satis es assumption type closed substitutions 
denote types set types chosen type system 
example possible types terms nat terms ground ground terms list lists lists naturals 
examples assume basic types type system 
ground contained ground 
term type indicated tn tn respectively sequence terms types shorthand tn tn 
just modes types associated predicates de nition type ary predicate map types 
typing map associating predicate atype 
typed program program endowed typing 
argument position typed predicate said type mapped type write mn tn indicate predicate mn typing tn 
reason types standard concept type checking expression form indicates fact type infer type formally substitution implies instance list xjy list 
concept need de nition term generic expression type having common variables unifying instance 
example variables generic expressions term generic expression ground xjx xjy jz generic expressions list 
types generic expression program execution uni cation behaves regular way performed repeated applications pattern matching see 
main class studied de nition program said safely typed st clauses sn sn pn sn sn tn tn wehave tj tj sj sj term ti lled generic expression corresponding type ti variable occurs twice tn ti var ti var ti term ti corresponding ground type 
example program quicksort di erence lists see example safely typed 
scope class st quite large comparable class typed programs introduced instance great majority programs safely typed 
finding program st problem addressed existing tools nd typing information logic program 
syntactical nature class suitable just strongly typed logic programming language 
direction followed systems cases typing information optionally supplied state art fastest compiler mercury cf 
modes types just adopted syntax 
type system contains type ground st class collapses known class moded programs cf 

de nition program said regularly typed rt safely typed clauses pn sn tn wehavethat tn linear sequence variables var ti si var sj 
example usual program add numbers add add add typing add ground regularly typed 
standard basic programs append reverse quicksort member suitable typings rt 
interesting notice parts logic programming codes written consciously form rt class 
class properly contains class simply moded typed swt programs introduced class shown quite expressive see instance list programs 
de nitions concern de nite logic programs programs negation 
section classes extended normal logic programs programs negation 
termination suppose logic program run goal denote rst obtained answer equal 
computation terminates successfully giving computed answer substitution 

fail computation terminates failure 

computation terminate 
fail special symbols denote failure nontermination respectively 
case user activate backtracking look second answer till returns fail 
case nite answers assume 
answer semantics logic program goal de ned possibly nite sequence answer provide formal de nition termination de nition goal suppose answer semantics said existentially resp 
universally terminate 
resp 

program existentially terminates rst answer di erent 
nite derivation universally terminates give answers program returns nite number answers halts failure 
general concept termination encompasses previous de nition goal suppose answer semantics ordinal said terminate 
termination provides complete spectrum termination properties intermediate degrees extremes consisting existential universal termination 
immediate see existential termination corresponds termination universal termination corresponds termination 
note ordinal termination coincides termination universal termination strongest termination property hierarchy 
observe program trivially terminates loss generality restrict attention termination 
example termination property closest universal termination termination hierarchy termination says program enter nite derivation perform nite number nite derivations 
strong termination investigate strong termination termination single goal goals class de nition class logic programs ordinal program pis said strongly terminate pk terminates goal 
big di erence previous case termination goal result precise holds assumption persistent classes closed resolution see assumption satis ed theorem strong existential termination strong termination coincide 
strong termination case termination hierarchy collapses properties plus trivial strong termination strong existential strong universal termination 
sequel talking strong termination class usually omit mentioning clear context class meant 
basic transformation section provide transformation ert regularly typed program trss core subsequent transformations 
giving formal de nition need preliminary notions 
corresponding trs utilize symbols original logic program new symbols 
employ called lists lists constructors binary symbol constant notation ht tni denote lists ht 
unary symbol marker indicate argument roughly speaking result datum doesn need processed 
symbols form roughly seen function expects datum form gives output exact formalization lambda operator 
de nition take regularly typed clause sn pn sn tn 
flow msn mv mv jpn msn mv mv jp ms mv mt mt var ti 
idea flow de nition clause sn provides away calculate mt applied input arguments 
output value msn obtained way 
informally denotes pk needed input arguments pk pn output argument head predicate sk sn 
mv jp ms start input data mt 
applying rst operator mv mt calculate ms gives output values mt values mt needed sequel calculate pi msi nal output msn 
process goes till pn pro msn cessed operator mv simply passes nal output msn values previously computed mv 
example example clause add add recall typing add ground 
de nition flow ms mx mz special new constant 
mx mx ms ms map terms terms inductively de ned way tk tk var map simply replaces variable term special constant instance 
de nition uni cation engine term uni cation engine de ned follows 
linearization 
rules de ning ut ut true var xi xi fx ut false false true xm ym ml xi yi xm yn false true true true false false false false note write synonymous true 
uni cation engine term formalizes trs concept uni cation tests term uni able informally behaviour summarized follows 
test performs kind restricted martelli montanari algorithm easily seen looking rewrite rules de ning roughly speaking performs uni cation linear terms 
rule immediate understand true rst argument denoted special constant uni es 
reason introduced de nition performs variable test syntactic level 
invokes times face problem repeated variables non linear terms done rules de ning ut repeated variables sequence operator written easier readability imposed common uni er 
note uni cation engine built terms produced transformation invoked transformation properly performs uni cation test general terms 
example take term corresponding linearization 
rst rules de ning uf uf true true ready provide formal de nition ert explanation soon 
de nition transformation ert transformation ert regularly typed logic program de ned way 
predicate take de nition 
ck produce rewrite rules plus corresponding uni cation engines mx mx enc mx enc mx try mx unify try mt true flow ci try far introduced produce xin false mx jy mx produce bx jy observe case de ned transformation simply produces mx behaviour ert intuitively illustrated follows 
said earlier clause de ning predicate provides way calculate applied input values 
point transformation rst rule says order calculate disposal de nition rst clause encoded enc till clause enc 
di erent choices grouped left right order list 
symbol rule list represents backtracking command activates computation 
backtracking command penetrate possibly complicated structures encounters rules produced points respectively backtracking command idempotent bx 
soon nds enc operator encoding certain clause tries activate second rules produced point checked representation trs selected atom goal representation head clause unify performed test unify xin 
case test succeeds rule try mt true flow ci applies clause case rule try false says result produced 
rule produced point jy says group choices contained list rst argument produced results discarded backtracking command generated applied remaining choices 
note result produced backtracking command generated execution stops 
eventually ifb nds results gives results rule 
thing remains consider behaviour operators 
said section supposed act roughly function expressed rule 
di erence deal kinds structures crop case nds results produces results rule case nds choices list applies rules produced point 
observation useful shorthand consider atomic goals goals form 
way wecan simply de ne translation ert goal ms convention subsection 
brevity consider examples atomic goals 
aside note general restrictive regularly typed goal form pn sn tn split goal tn clause tn pn sn tn new predicate regularly typed giving equivalent program 
example consider program de ning integers int int int goal int typing int 
translation ert enc int try int int enc int int 
try int unify try true int false 
true ms mx int try int term int plus rules uni cation engine steps ert de nition 
corresponding reduction term trs int int int enc int true enc int int unify enc int enc int enc int trss produced ert quite regular structure lemma regularly typed program ert weakly con uent 
ert terminating con uent 
existential termination properties ert enjoys theorem respectively regularly typed program goal existentially terminates ert terminates ert 
theorem typed program strongly existentially terminates ert terminates 
theorems obtain characterization existential termination class regularly typed programs 
example graph structures applications representing relations situations problems 
consider program connected nds nodes graph connected connected arc connected arc connected typing connected ground ground arc ground ground 
suppose graph de ned facts arc arc arc graph cyclic case program connected strongly universally terminate 
theorem strongly existentially terminating 
example reconsider integer program example 
program strongly universally terminates trivial see 
obtained trs proven terminating showing theorem integer program strongly existentially terminates 
st rt section extend previous results class safely typed programs transformation independent interest 
safely typed clause sn pn sn tn de ne number ti satisfy rt condition 
measure ofc belong rt viz 
clause bad ones note rt 
extend program obvious way 
wecan de ne transformation translates safely typed program regularly typed 
de nition transformation safely typed program 
regularly typed leaves unchanged 
suppose rt 
take clause sn pn sn tn take ani rt condition fail pi si ti bad atom body 
replace clauses sn eq pi pi si ti pi si pi pi pi var ti si var tj var ti si var tj pi si ti pn sn tn ti var ti var tj var ti var tj pi fresh variables pi new predicate symbol note mode type implicitly clauses 
di cult prove new program obtained safely typed 
repeating process nally get program regularly typed intuition patch bad atoms program pi si ti bad force back inserting place ti new fresh variables check variables instantiated uni able ti new eq predicate 
example take program di erence lists page quicksort xs ys quicksort dl xs ys quicksort dl xjxs ys zs partition xs quicksort dl ys quicksort dl ys zs quicksort dl xs xs plus rules partition typing quicksort quicksort dl partition nat 
program safely typed regularly typed rst second clause atom quicksort dl xs ys atom quicksort dl ys bad ones 
applying obtain place clauses quicksort xs ys quicksort dl xs ys eq eq quicksort dl xjxs ys zs partition xs quicksort dl ys eq ys quicksort dl ys zs eq ys eq moded typed nat 
observe transformation general introduce extra computations delays test output arguments eq 
retains original structure program preserves logical meaning sense theorem safely typed program goal 
sld computed answer substitution fgg jvar sld computed answer substitution fgg 
proof theorem fold unfold techniques 
far termination concerned result holds lemma safely typed program goal 
ordinal terminates terminates strongly terminates strongly terminates 
analyze termination behaviour safely typed program applying compound transformation est ert theorem respectively safely typed program goal existentially terminates est terminates est 
theorem safely typed program strongly existentially terminates est terminates 
termination case far criteria existential termination 
section provide general results cope spectrum termination 
section denote new fresh symbols 
theorem typed resp 
safely typed program goal 
terminates resp 
est fa jz terminates est 
intuition consider reductions trs original term est term est counts far produced 
counter stored rst argument ofa initially set unary representation 
time answer added rules de ning applied forcing new backtracking decrementing counter till answers 
far termination concerned close universal termination way provide speci criterion termination infer termination criterion universal termination see 
example consider program path computing paths graph goal asks paths path path arc path xjxs arc path xs typing path ground ground list arc ground ground rst clause arc ground ground second clause regularly typed 
suppose graph gk de ned facts arc arc ak arc arc ak ak arc ak ak theorem prove program path gk terminating 
note programs universally terminate path gk terminating 
incidentally provides proof strong termination case case termination goal termination hierarchy collapse 
theorem typed resp 
safely typed program goal 
universally terminates resp 
est fa xjy terminates est 
turn attention strong termination 
theorem strong termination coincides strong existential termination theorem su ces cases 
remaining case strong universal termination theorem regularly typed resp 
safely typed program 
strongly universally terminates resp 
est fa xjy terminates 
example consider program seen example theorem prove strongly universally terminating 
analogously prove instance program solve hanoi towers problem cf 
pp 
typing hanoi list list usual quicksort program page quicksort list list english sentences parser pp 
sentence ground ground strongly universally terminating 
normal logic programs having analyzed de nite logic programming extend results previously obtained normal logic programming allowing usage negation 
usual prolog negated atoms solved negation nite failure procedure succeed nitely fail 
de ned classes de nite logic programs give de nition extensions normal logic programs inductively number negative literals de nition clause normal safely typed safely typed clause form sn pk sk tk pn sn tn sn pk sk tk andp sn pk sk tk pk sk tk pn sn tn normal safely typed 
program normal safely typed nst clauses class normal regularly typed nrt logic programs de ned analogously 
example suppose typing 
clause normal regularly typed andp regularly typed 
extend de nition ert cope negation 
modi cation quite simple 
de nition flow cf 
def 
extended way acts predicate pi body clause negated form pi produced term appears compound function pi de ned follows jxi 
xjy 
explanation rules perfectly natural pi succeeds pi nitely fails trs rst calculate pi apply operator answers returned outputs result rule corresponds fact successful negative literal produces bindings result returned outputs result rules 
way obtain new basic transformation extends ert regularly typed normal regularly typed programs 
transformations previously de ned results extend normal logic programs correspondence rt nrt st nst 
brevity cite cases strong existential universal termination similarly obtained syntactic correspondence 
theorem normal regularly typed resp 
normal safely typed program strongly existentially terminates resp 
enst terminates 
theorem normal regularly typed resp 
normal safely typed program 
strongly universally terminates resp 
enst fa xjy terminates 
example consider normal program theorem prove program strongly existentially terminating 
universally terminating 
example complicated example normal program block world planner pp 
typing transform state state plan state plan suitable types theorem strongly existentially terminating 
example normal program solve ciently queens problem page moded typed queens ground list proven theorem strongly universally terminating 
relations previous said main contribution aimed open problem existential termination mentioned works subject expressibility results presently practical cf 

cope intermediate degrees termination 
works addressed subject 
rst introduced concept termination shown studied functional programming techniques 
class normal logic programs analysis applied limited main goal completely di erent identify part logic programming just functional programming disguise 
second treating negation practical importance moment unclear 
order comparison works approach termination case 
rst point approach able satisfactorily cope negation works manage cover aspects negation best knowledge 
theoretical criterion acceptable programs result considered main theoretical foundation ective methodology practical way automate semi automate criterion known heavily relies semantical information provided model program model completion negative part 
novel methodology overcomes di culties method due semantic information introduced 
su cient criterion termination normal logic programs 
criterion su ers drawback far easily implemented exclusively semantically addition requires main semantical information provided proof method 
treatment negation coped assuming negated literal succeed readily limits far usefulness approach negation 
importance manages treat logic programming class normal constraint logic programming presence delays 
provides characterization termination negation 
limitation treatment negation analogous aforementioned 
theoretically comparing power approaches gives result overlap strictly powerful 
turning works subject cover negation wehave discussed advantages transformational approach methods panoramic see 
remains ask approach ts papers transformational approach cf 

cited works cover strong universal termination case 
second works treat moded programs cf 
section class obtained st unique type allowed ground restricting far applicability scope 
third call transformation notation logic program terminates implies terminates program proven terminating proven terminating 
call strictly powerful 
exception transformations theoretical interest result theorem restricting type system type ground transformation strictly powerful transformations 

proving termination logic programs transforming equivalent term rewriting systems 
fst tcs lncs pp 


aiken lakshman 
directional type checking logic programs 
proc 
sas lncs pages 
apt 
uni cation free prolog programs 
proc 
mfcs lncs pp 

springer 
apt pedreschi 
proving termination general prolog programs 
proc 
tacs lncs pages 
springer verlag 
arts zantema 
termination logic programs semantic uni cation 
proc 
th lncs 

appear 

proving termination properties prolog programs semantic approach 
journal logic programming 
lakshman reddy 
framework directionality proving termination logic programs 
proc 
jicslp pp 

mit press 
rusinowitch 
methode de des programmes logiques 
manuscript 
clark 

rst order theory data programs 
editor proc 
ifip congress information processing pp 

coelho 
prolog 
springer verlag 
marchiori marchiori 
termination constraint logic programs 
proc 
cp lncs pp 

springer 
conway henderson somogyi 
code generation mercury 
proc 
international logic programming symposium pp 

mit press 
de schreye 
termination logic programs story 
journal logic programming 
debray 
static inference modes data dependencies logic programs 
acm toplas july 
dershowitz 
termination rewriting 
symbolic computation 
dershowitz 
topics termination 
proceedings fifth rta lncs pp 

springer 
dershowitz jouannaud 
rewrite systems 
handbook theoretical computer science vol 
chapter pp 

elsevier mit press 
grumberg katz pnueli 
proving termination prolog programs 
parikh editor logics programs pp 

springer 
ganzinger 
termination proofs moded logic programs conditional rewrite systems 
ctrs lncs pp 

springer 
levi 
contributions theory existential termination de nite logic programs 
pp 


lloyd 
foundations logic programming 
springer verlag second edition 
marchiori 
practical methods proving termination general logic programs 
journal arti cial intelligence research 
appear 
marchiori 
logic programs term rewriting systems 
proc 
rd int 
conf 
algebraic logic programming lncs pp 

springer 
marchiori 
uni cation freedom matching directions 
proc 
international logic programming symposium pp 

mit press 
marchiori 
functional side logic programming 
proc 
acm fpca pages 
acm press 
rao kapur 
transformational methodology proving termination logic programs 
th csl lncs pp 
springer 
rao 
veri cation tools provably correct compilers 
fme lncs pp 

springer 
nguyen 
integrating modes subtypes prolog type checker 
proc 
jicslp pages 
mit press 
sterling shapiro 
art prolog 
mit press 
wang 
methodology termination logic programs 
programming 
