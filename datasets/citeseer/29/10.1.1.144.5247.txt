decision procedure bit vectors arrays dill computer systems laboratory stanford university dill cs stanford edu 
stp decision procedure satisfiability quantifier free formulas theory bit vectors arrays optimized large problems encountered software analysis applications 
basic architecture procedure consists word level pre processing algorithms followed translation sat 
primary bottlenecks software verification bug finding applications large arrays linear bit vector arithmetic 
new algorithms abstraction refinement paradigm reasoning large arrays 
solver bit vector linear arithmetic eliminates variables parts variables enable transformations reduce size problem eventually received sat solver 
algorithms implemented stp heavily tested thousands examples obtained real world applications 
experimental results indicate mix algorithms architecture far effective variety applications direct translation original formula sat comparable decision procedures 
decision procedures fragments order logic increasingly modern hardware verification theorem proving tools 
decision procedures usually support integer real arithmetic uninterpreted functions bit vectors arrays 
examples decision procedures include svc cvc lite :10.1.1.2.5593
theorem proving hardware verification primary users decision procedures increasingly large scale program analysis bug finding test generation tools 
tools symbolically analyze code generate constraints decision procedure solve results guide analysis generate new test cases 
software analysis tools create demands decision procedures different imposed hardware applications 
applications generate large array constraints especially tools choose model system memory arrays 
software analysis tools need able reason bit vectors especially mod arithmetic important source incorrect system behavior 
constraint problems large extremely challenging solve 
reports stp decision procedure quantifier free order logic bit vector array datatypes 
design stp driven primarily demands software analysis research projects 
stp damm hermanns eds cav lncs pp 

springer verlag berlin heidelberg ganesh dill software analysis bug finding hardware verification applications 
notable applications include exe project stanford generates test cases programs symbolic execution uses stp solve constraints 
projects include replayer project minesweeper carnegie mellon university produce constraints symbolic execution machine code project berkeley tries catch errors due type conversion programs 
project produced largest example solved stp far 
mbyte formula bit bit vector variables array write terms tens thousands levels deep large number array reads nonconstant indices corresponding aliased reads memory linear constraints liberal bit vector functions predicates stp solves approx 
minutes ghz linux box 
nice overview bit vector decision procedures repeat 
stp architecture different decision procedures support bit vectors arrays backtracking framework combining specialized theories nelson oppen 
stp consists series word level transformations optimizations eventually convert original problem conjunctive normal form cnf formula input high speed solver satisfiability problem propositional logic formulas sat 
stp fully exploits speed modern sat solvers advantage theory specific optimizations bit vectors arrays 
respect stp similar :10.1.1.2.5593
goal describe factors enable stp handle large constraints software applications 
cases simple optimizations careful decision ordering transformations huge difference capacity tool 
cases sophisticated optimizations required 
discussed detail fly solver mod linear arithmetic heuristics array expressions 
rest discusses architecture stp basic engineering principles goes detail optimizations bit vector arithmetic arrays 
performance large examples discussed comparative evaluation known efficiency 
stp overview stp input language functions predicates implemented programming language machine instruction set floating point datatypes operations 
current set operations supported include true false propositional variables arbitrary boolean connectives bitwise boolean operators extraction concatenation left right shifts addition multiplication unary minus signed division modulo array read write functions relational operators 
semantics parallel semantics bit vector language programming language stp bit vectors positive length 
arithmetic bitwise boolean operations require inputs length 
stp stand program parse input files decision procedure bit vectors arrays special human readable syntax qf syntax 
library special language api relatively easy integrate applications 
stp converts decision problem logic propositional cnf solved high performance shelf cnf sat solver minisat minisat nice api concise clean efficient reliable relatively unencumbered licensing conditions 
process converting cnf includes transformations optimizations reduce difficulty eventual sat problem 
problems frequently solved transformation stages stp sat need called 
stp architecture differs significantly decision procedures case splitting backtracking including tools svc cvc lite solvers davis putnam logemann loveland dpll architecture 
conceptually solvers recursively assert atomic formulas negations theory specific decision procedures check consistency formulas asserted backtracking current combination assertions inconsistent 
versions style decision procedure choice formulas assert conventional dpll sat solver treats formulas propositional variables asserted decision procedures invoked 
architectures assertion backtracking invoke theory specific inner loop sat solver 
modern sat solvers fast largely incredible efficiency inner loops difficult architectures take best advantage fast sat solvers 
stp hand theory specific processing invoking sat solver 
sat solver works purely propositional formula internals modified including highly optimized inner loop 
optimizing transformations employed sat solver solve problem efficiently sat solver reduce difficulty problem eventually sat solver 
dpll solvers nelson oppen combination variants thereof link multiple theory specific decision procedures 
nelson oppen combination needs individual theories disjoint stably infinite requires exchange equality relationships deduced individual theory leading inflexibility implementation complexity 
return nelson oppen ensures combination theories complete 
stp complete entire formula converted set satisfiability preserving steps cnf satisfiability decided sat solver 
need worry meeting conditions nelson oppen combination 
furthermore extra overhead communication theories nelson oppen style decision procedures bottleneck large inputs seen overhead avoided stp 
stp approach going superior backtracking solver 
input stp conjunction formulas enable local algebraic transformations 
hand formulas top level disjunctions may difficult 
fortunately software applications stp tend generate large conjunctions stp approach worked practice 
ganesh dill input formula substitution simplifications linear solving refinement array axioms cnf conversion sat solver sat unsat fig 

stp architecture detail stp architecture depicted 
processing consists phases word level transformations followed conversion purely boolean formula boolean simplifications process called bit conversion propositional cnf solving sat solver 
primary focus word level optimizations arithmetic arrays refinement arrays 
expressions represented directed acyclic graphs dags time created parser interface converted cnf 
dag representation isomorphic subtrees represented single node may pointed parent nodes 
representation advantages disadvantages overwhelming advantage compactness 
possible identify design principles worked development stp 
overarching principle procrastinate faced hard problems 
principle applied ways 
transformations risky significantly expand size expression dag postponed risky transformations performed hope risky transformation reduce size number expressions requiring risky transformations 
approach particularly helpful array expressions 
counter example guided abstraction refinement standard paradigm formal tools applied variety ways 
application procrastination principle 
example tool abstracts refines precision integer variables 
major novelty stp implementation particular implementation refinement loop 
stp abstraction implemented formula obtained omitting conjunctive constraints concrete formula concrete formula original formula 
logical formulas iff satisfiable exactly satisfiable 
testing formula satisfiability results 
stp determine abstracted formula unsatisfiable 
case clear original formula unsatisfiable stp return unsatisfiable additional refinement potentially saving massive amount 
second possible outcome stp finds satisfying assignment formula 
case stp converts satisfying assignment purported concrete decision procedure bit vectors arrays model assigns zero variables appear original formula formula evaluates original formula respect purported model 
result evaluations true purported model truly model original formula original formula satisfiable stp returns model refinement iterations 
third possible outcome stp finds purported model evaluating original formula respect model returns false 
case stp refines abstracted formula heuristically choosing additional conjuncts false purported model conjoining formulas abstracted formula create new formula 
practice formula modified new formulas bit converted cnf added clauses cnf formula derived previous formula resulting cnf formula solved sat solver 
process iterated correct result occur worst case formula fully concrete conjoining formula omitted abstraction 
formulas included result guaranteed correct requirement 
arrays mentioned arrays heavily software analysis applications reasoning arrays major bottleneck examples 
stp input language supports dimensional non extensional arrays indexed bit vectors contain bit vectors 
operations arrays read value location array index expression correct type write returns new array value indices possibly value bitvector appear operand operation predicate operates bit vectors 
value array variable array write array type may appear operand read write operand 
particular values array type appear equality predicate 
unoptimized mode stp reduces formulas form contains array read transformations 
expression ite shorthand endif 
transformations standard 
ite lifting transformation converts read ite write ite read write 
similar transformation write part ite 
read write transformation eliminates write terms transforming read write ite read 
read elimination transformation eliminates read terms introducing fresh bit vector variable expression adding predicates ensure consistency 
specifically term read appears replaced fresh variable new model assignment constant values variables formula formula satisfied 
ganesh dill predicates conjoined formula variables introduced place read terms read having array term operand 
example transformation simple formula read read transformed 
formula form called array read axiom 
optimizing array reads read elimination described expands formula nodes number syntactically distinct index expressions 
unfortunately software analysis applications produce thousands reads variable indices resulting blow transformation applied 
blow unavoidable worst case appropriate procrastination leads practical solutions large problems 
optimizations effective array substitution abstraction refinement reads call read refinement 
array substitution optimization reduces number array variables substituting constraints form read wherec constant contain array read 
programs index arrays memory constant indexes case occurs practice 
optimization passes 
pass builds substitution table left hand side equation read key right hand side value deletes equation input query 
second pass expression replaces occurrence key corresponding table entry 
note soundness second equation encountered left hand side table second equation deleted table changed 
example stp saw read read second formula deleted simplified 
second optimization read refinement delays translation array reads non constant indexes hope avoiding read elimination blowup 
main trick solve expensive approximation formula check result original formula try accurate approximation result incorrect 
read formulas abstracted performing read elimination replacing reads new variables adding array read axioms 
abstracted formula processed remaining stages stp 
discussed overview result unsatisfiable result correct returned immediately stp 
model stp converted concrete model original formula evaluated respect model 
result true answer correct stp returns model 
array read axioms read elimination added formula stp asked satisfy modified formula 
iteration repeats correct result guaranteed happen memory time exhausted finitely array read axioms eventually added worst case 
choice array read axioms add refinement heuristic important success method 
policy find nonconstant array index term axiom violated add violated axioms involving term 
adding false axiom refinement decision procedure bit vectors arrays guarantees stp find false model 
adding axioms particular term empirically compromise adding just formula results iterations adding formulas eliminates abstraction failure 
example suppose stp formula read read 
stp apply substitution optimization deleting read formula inserting pair read substitution table 
replace read new variable vi generating constrained formula vi 
suppose stp finds solution vi 
stp translates solution variables original formula get read read 
solution satisfiable original formula stp terminates true satisfying assignment 
suppose stp finds solution vi 
solution original formula eventually evaluates read read substitution gives 
solution constrained formula solution original formula 
case stp adds array read axiom read read formula checked result correct new formula includes complete set array read axioms 
optimizing array writes efficiently dealing array writes crucial stp utility software applications produce deeply nested write terms successive assignments indices array 
read write transformation creates performance bottleneck destroying sharing subterms creating unacceptable blow dag size 
consider simple formula read write read write term shared 
read write transformation translates ite read ite read 
applied recursively deeply nested write terms essentially creates new copy entire dag write terms distinct read index exhausts memory large examples 
procrastination principle applies 
read write transformation delayed simplification solving transformations performed special cases read write read write indices simplify terms equal equal 
practice simple transformations convert index terms constants 
read write transformation applied subsequent phase 
happens formula smaller contains constants 
simple optimization enormously effective enabling stp solve large problems nested writes unable 
abstraction refinement write expressions previous optimization leaves large numbers read leading major speed ups large formulas 
optimization array read write terms replaced new variables yield conjunction formulas original set 
example transformed ganesh dill ite read ite read formulas called array write axioms 
abstraction array write axioms omitted abstracted formula processed remaining phases stp 
array reads refinement loop iterates stp finds model abstracted formula model original formula 
write axioms added abstracted formula refinement loop iterates additional axioms definite result produced 
technique leads improvement certain cases primary problem number iterations refinement loop large 
linear solver variable elimination essential features stp software analysis applications efficient handling linear complement arithmetic 
heart fly solver 
main goal solver eliminate bits variables possible reduce size transformed problem sat solver 
addition enables simplifications solve purely linear problems outright sat solver need 
solver solves equation variable time 
variable eliminated substitution rest formula variable occurs linear equations formulas 
cases solve entire variable solves low order bits variable 
bit bits appear variables problem sat solver 
non linear terms extracts appearing linear equations treated bit vector variables 
algorithm worst case time running time multiplications number equations number variables input system linear bit vector equations 
input unsatisfiable solver terminates false 
input satisfiable terminates set equations solved form symbolically represent possible satisfying assignments input equations 
special case formula system linear equations solver leads sound complete polynomial time decision procedure 
furthermore equations reduced closed form captures possible solutions 
definition 
solved form list equations solved form invariants hold equations list 
observed theory linear mod arithmetic equations tandem concatenate extract operations np complete 
stp concatenate extraction operations terms operations treated independent variables linear solving process polynomial 
hard np complete input problem constructed linear operations concatenate extract operations solved completely linear solving result sat solver 
decision procedure bit vectors arrays equation list form wherex variable linear combination variables constant times variable extractions thereof occuring equations list variables left hand side equations occuring earlier list may occur right hand side subsequent equations 
may equations left hand side list extractions variables occur list form lower extraction index extractions length extraction variable occurs list entry list wherex new variable refering top bits concatenation symbol algorithm illustrated system constants variables functions bits long 
solver proceeds choosing equation checks chosen equation solvable 
uses theorem basic number theory determine equation solvable aixi ci mod solvable unknowns xi greatest common divisor divides ci 
example solver chooses solvable gcd divide 
basic result number theory number multiplicative inverse mod iff gcd inverse computed extended greatest common divisor algorithm method 
variable odd coefficient solver isolates left hand side multiplies inverse coefficient 
example multiplicative inverse mod solved yield 
substituting remaining equations yields system coefficients 
note coefficients multiplicative inverses arithmetic mod isolate variable 
possible solve bits remaining variables 
solver transforms system solvable equations system summand odd coefficient 
solver chooses equation summand coefficient minimum number factors 
example equation summand 
system divided high order bit variable dropped obtain reduced set equations ganesh dill constants variables operations bits 
solved obtain 
substituting system yields new system equations 
equation solved obtain 
follows original system equations satisfiable 
important note bits unconstrained 
solved form case note equations variables constants functions bits long 
algorithms deciding satisfiability system equations congruences modular residue arithmetic known long time 
algorithms provide solved form captures possible solutions 
ideas devised clark barrett implemented svc decision procedure svc algorithm exponential worst case time complexity stp linear solver polynomial worst case 
closest related probably huang cheng reduces set equations solved form elimination 
hand stp implements online solving substitution algorithm gives closed form solution 
algorithms easier integrate complex decision procedures 
experimental results section presents empirical results large examples software analysis tools randomly generated sets linear equations 
effects abstraction linear solving stp examined 
difficult compare stp decision procedures publicly available decision procedures cvcl authors research group deal terms involving bit vectors arrays indexed bit vectors 
cvcl hopelessly inefficient compared stp written replace 
terms include bit vectors uninterpreted functions bit vectors 
uninterpreted functions equivalent arrays write operations possible compare performance stp examples linear arithmetic realistic example read array 
table stp compared optimizations array optimizations arr lin linear solving arr lin optimizations examples examples heavy linear arithmetic array reads 
table summarizes stp performance array write abstraction big array examples deeply nested writes 
table compares stp small version example randomly generated linear system equations 
experiments run ghz gb ram intel machine running linux 
table includes hardest examples usually tens megabytes text typically hundreds thousands bit bit vector variables lots array reads large number linear constraints derived 
primary reason timeouts memory exception 
table shows optimizations decision procedure bit vectors arrays table 
stp performance different modes examples 
names followed 
approximate node size millions nodes 
nodes 
shared nodes counted exactly 
nr stands result 
timings seconds 
mo stands memory error 
examples generated tool 
example name node size result arr lin arr lin testcase sat mo testcase sat mo spin sat mo spin nr mo mo mo mo sat mo mo table 
stp performance different modes examples deep nested writes 
names followed 
nodes nodes 
shared nodes counted exactly 
nr stands result 
timings seconds 
mo stands memory error examples generated minesweeper tools 
example name node size result write abstraction write abstraction grep sat grep sat grep sat grep sat grep nr mo mo dd dc sat testcase sat mo required solving hardest real world problems 
expected stp linear solver helpful solving examples 
table includes examples deeply nested array writes modest amounts linear constraints derived various applications 
grep examples generated minesweeper tool trying find bugs unix grep program 
dd formula generated minesweeper analysis program attack 
formula testcase generated 
expected stp write abstraction refinement yield large improvement stp write abstraction refinement switched faster 
stp compared small randomly generated systems linear equations coefficients ranging variables bits equations 
consistently timed seconds examples variables significantly slower stp smaller examples 
hardest problem stp set benchmarks test case equations variables bits stp solved seconds 
cases illustration table 
times variable equation example finish slower stp 
large real example read arrays linear arithmetic suitable comparison 
example nearly ganesh dill table 
stp vs 
timeout example sec 
example generated replayer tool 
example stp var equations unsat var equations sat timeout cookie checksum example sat times slower stp 
unfortunately compare stp examples array writes support array writes bit vector indexing 
meaningful comparisons wait till competing decision procedures includes bit vector operations theory arrays indexed 
tests section available verify stanford edu stp html software applications program analysis bug finding symbolic simulation software tend impose different conditions decision procedures hardware applications 
particular arrays bottleneck 
constraints tend large lots linear bit vector arithmetic 
abstraction refinement algorithms helpful handling large array terms 
approach doing phased word level transformations starting expensive risky transformations followed translation sat design decision procedures applications considered 
linear solving implemented carefully effective variable elimination 
indebted users feedback great examples david molnar berkeley cristian dawson engler aaron bradley stanford jim newsome david ivan jaeger dawn song cmu research supported department homeland security fa national science foundation cns 
opinions findings recommendations expressed material author necessarily reflect view department homeland security national science foundation 

website www csl sri com users smt comp 
barrett cvc lite new implementation cooperating validity checker 
alur peled 
eds 
cav 
lncs vol 
springer heidelberg decision procedure bit vectors arrays 
barrett dill levitt validity checking combinations theories equality palo alto california november 
srivas 
eds 
fmcad 
lncs vol 
pp 

springer heidelberg 
barrett dill levitt decision procedure bit vector arithmetic 
proceedings th design automation conference san francisco ca june 
liang newsome song yin automatically identifying trigger behavior malware symbolic execution binary analysis 
technical report cmu cs carnegie mellon university school computer science january 
bryant ouaknine brady deciding bit vector arithmetic abstraction 
th intl 
conference tools algorithms construction systems tacas 
ganesh pawlowski dill engler exe automatically generating inputs death 
proceedings th acm conference computer communications security acm press new york october november 
cormen leiserson rivest algorithms chapter pp 

mit press cambridge 
de moura fast linear arithmetic solver dpll 
ball jones 
eds 
cav 
lncs vol 
pp 

springer heidelberg 
een extensible sat solver 
proc 
sixth international conference theory applications satisfiability testing may pp 
may 
ganzinger hagen nieuwenhuis dpll fast decision procedures 
huang cheng assertion checking combined word level atpg modular arithmetic constraint solving techniques 
design automation conference dac pp 

lahiri decision procedure 
alur peled 
eds 
cav 
lncs vol 
pp 

springer heidelberg 
molnar wagner tool catching conversion errors 
personal communications 
nelson oppen simplification cooperating decision procedures 
acm transactions programming languages systems 
newsome franklin song replayer automatic protocol replay binary analysis 
proceedings th acm conference computer communications security ccs acm press new york 
stump barrett dill levitt decision procedure extensional theory arrays 
th ieee symposium logic computer science pp 

ieee computer society press los alamitos 
stump barrett dill cvc cooperating validity checker 
brinksma larsen 
eds 
cav 
lncs vol 
pp 

springer heidelberg 
