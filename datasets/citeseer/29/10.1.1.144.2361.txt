optimization techniques queries expensive methods joseph hellerstein berkeley object relational database management systems allow knowledgeable users de ne new data types new methods operators types 
exibility produces attendant complexity handled new ways object relational database management system cient 
study techniques optimizing queries contain time consuming methods 
focus traditional query optimizers choice join methods orders selections handled pushdown rules 
rules apply selections arbitrary order joins possible assumption selection takes time 
users object relational systems embed complex methods selections 
addresses basic ciency problem arises extensible database systems 
explores techniques ciently ectively optimizing declarative queries contain time consuming methods 
queries natural modern extensible database systems expressly designed support declarative queries user de ned types methods 
note expensive time consuming methods natural complex user de ned data types large objects encode signi cant complexity information arrays images sound video maps circuits documents order ciently process queries containing expensive methods new techniques needed handle expensive methods 
gis example illustrate issues arise processing queries expensive methods consider example satellite image data sequoia benchmark geographic information systems gis stonebraker :10.1.1.47.7618
query retrieves names digital raster images taken satellite particularly selects names images rst time period observation show level vegetation pixels example 
select name raster example method reads megabytes raster image data infrared visual data satellite counts percentage pixels characteristics vegetation characteristics computed pixel standard technique remote sensing 
method timeconsuming thousands instructions operations compute 
clear query run faster selection applied selection doing minimizes number calls 
section describes proves correctness predicate migration algorithm produces optimal query plan queries expensive predicates 
predicate migration increases query optimization time additional cost factor polynomial number operators query plan 
compares favorably exponential join enumeration schemes standard query optimizers easily circumvented optimizing queries expensive predicates expensive predicates parsing query techniques section need invoked 
queries expensive predicates gains execution speed set extra optimization time 
implemented predicate migration illustra integrating illustra standard system style optimizer selinger :10.1.1.129.5879
modest overhead optimization time optimization techniques queries expensive methods predicate migration reduce execution time practical queries orders magnitude 
illustrated 
background optimizer estimates develop optimizations enhance traditional model analyzing query plan cost 
involve modi cation usual metrics expense selectivity relational operators 
background optimizer estimates develop optimizations enhance traditional model analyzing query plan cost 
involve modi cation usual metrics expense selectivity relational operators 
preliminary discussion model prove critical analysis 
relational query language sql may clause contains arbitrary boolean expression constants range variables query 
clauses maximal set conjuncts boolean factors selinger refer boolean factor distinct predicate satis ed result tuple query :10.1.1.129.5879
term predicate refer boolean factor query clause 
join predicate refers multiple tables selection predicate refers single table 
selectivity 
traditional query optimizers compute selectivities joins selections 
term predicate refer boolean factor query clause 
join predicate refers multiple tables selection predicate refers single table 
selectivity 
traditional query optimizers compute selectivities joins selections 
predicate join selection estimate value selectivity cardinality output cardinality input typically estimations default values statistics stored dbms selinger suggests inexpensive sampling techniques lipton hou haas :10.1.1.129.5879
accurate selectivity estimation di cult problem query optimization generated increasing interest years ioannidis christodoulakis faloutsos kamel ioannidis poosala poosala poosala ioannidis 
illustra selectivity estimation user de ned methods controlled ag create function command illustra information technologies 
standard assumptions query optimization algorithms estimates accurate predicates independent selectivities 
di erential cost user de ned methods 
order need measure expense join tuple join inputs need estimate di erential cost join respect input 
join algorithm outer relation inner relation cost function jrj jsj jrj jsj numbers tuples respectively 
information compute di erential cost join respect outer relation join respect inner relation jsj jrj di erential cost see section partial di constants known join algorithms cost join tuple input typically de ned independent cardinality input 
need characterize selectivity join respect inputs 
traditional selectivity estimation selinger computes selectivity sj join relations expected number tuples output oj number tuples cartesian product input relations sj jr sj jrj jsj :10.1.1.129.5879
selectivity sj join respect derived traditional estimation size output join relative size sj jrj sj jsj 
selectivity sj respect derived similarly sj jsj sj jrj 
note query may contain multiple join predicates set relations 
execution plan query predicates processing join call primary join predicates 
sec sec min sec min sec table 
performance plans example 
preserving opportunities pruning previous section predicate migration algorithm algorithm optimally placing selection secondary join predicates plan tree 
applied possible join plan query predicate migration algorithm guaranteed generate minimum cost plan query 
traditional query optimizer enumerate possible plans query pruning plan space enumerating plans selinger :10.1.1.129.5879
pruning ect basic exponential nature join plan enumeration signi cantly lower amounts space time required optimize queries joins 
pruning system style optimizer done dynamic programming algorithm builds optimal plans bottom fashion 
plans subexpression query generated plans pruned suboptimal cost 
unfortunately pruning integrate predicate migration 
point describe experience implementing predicate migration algorithm simpler heuristics illustra 
compare performance approaches di erent classes queries attempting highlight simplest solution works class 
table provides quick algorithms applicability limitations 
appropriate lines eld gives rough estimate total number lines code comments needed illustra system style optimizer support algorithm 
note code shared course may choose save particular subtrees reasons interesting orders selinger :10.1.1.129.5879
optimization techniques queries expensive methods algorithm works lines comments queries expensive predicates queries ok single table queries pushdown joins oodbmss 
queries free ok selection costs expensive dominate 
may ok pullup selections 
queries preprocessor pullrank join predicate migration 
analyzing ectiveness optimizer problematic undertaking 
optimizers choose plans enormous search space search space plans vary performance orders magnitude 
addition optimization decisions selectivity cost estimations erroneous ioannidis christodoulakis ioannidis poosala 
result exhaustive optimizer compares plans may choose best cost selectivity estimates inaccurate 
result database community query optimizer optimal avoids worst query plans generally picks query plans krishnamurthy lohman lohman swami iyer :10.1.1.76.1079
remains open debate de nitions generally previous statement 
situation optimizer chooses suboptimal plan database query constructed error look arbitrarily detrimental 
database queries de nition fact pioneering designs query optimization accurately described authors schemes query decomposition wong access path selection selinger :10.1.1.129.5879
hellerstein ad hoc leaves signi cant problem intelligently analyze practical cacy inherently rough technique nite space inputs 
result exhaustive optimizer compares plans may choose best cost selectivity estimates inaccurate 
result database community query optimizer optimal avoids worst query plans generally picks query plans krishnamurthy lohman lohman swami iyer :10.1.1.76.1079
remains open debate de nitions generally previous statement 
situation optimizer chooses suboptimal plan database query constructed error look arbitrarily detrimental 
database queries de nition fact pioneering designs query optimization accurately described authors schemes query decomposition wong access path selection selinger :10.1.1.129.5879
hellerstein ad hoc leaves signi cant problem intelligently analyze practical cacy inherently rough technique nite space inputs 
approaches problem traditionally taken literature 
micro benchmarks basic query operators executed optimizer cost selectivity modeling compared actual performance 
technique study distributed dbms lohman lohman ective isolating inaccuracies optimizer cost model 
payo investment optimization time apparent 
note predicate migration algorithm correctly optimize queries 
theory practice implementation issues algorithms described previous section implemented illustra dbms 
section discuss implementation experience issues arose experiments 
illustra object relational dbms publicly available post system stonebraker :10.1.1.133.8073
illustra extends postgres ways signi cantly purposes supporting extended version sql bringing postgres prototype code industrial grade performance reliability 
full predicate migration algorithm originally implemented author postgres ort took months month add pullrank heuristic month implement predicate migration algorithm 
re ning upgrading code illustra proved time consuming writing initially postgres 
illustra sql signi cantly complex language postquel modest changes code handle subqueries sql speci features 
ldl approach treated selections joins virtual relations nite cardinality 
essence query transformed select joins having cost equivalent cost applying methods 
point ldl approach applies traditional join ordering optimizer plan rewritten query 
integrate system style optimization algorithm ldl increases number joins order system complexity exponential number joins 
krishnamurthy zaniolo proposes polynomial time ik kbz ibaraki kameda krishnamurthy approach optimizing join order :10.1.1.76.1079
unfortunately system ik kbz optimization algorithms consider left deep plan trees left deep plan tree model optimal plan tree 
plan tree selections treated joins looks bushy plan tree 
ectively ldl approach forced pull expensive selections inner relation join order get left deep tree 
ldl approach err making eager pullup decisions 
de ciency ldl approach overcome 
system optimizer modi ed explore space bushy trees increases complexity ldl approach 
known modi cation ik kbz optimizer handle bushy trees 
successfully integrate ldl approach ik kbz optimizer exhaustive mechanism requires time exponential number expensive selections 
related ibaraki kameda ibaraki kameda krishnamurthy boral zaniolo krishnamurthy swami iyer swami iyer hellerstein developed re ned query optimization scheme built notion rank :10.1.1.76.1079
scheme uses rank reorder joins selections 
techniques consider possibility expensive selection predicates reorder nodes single path left deep query plan tree 
furthermore schemes proposal completely new method query optimization extension applied plans query optimizer 
system project faced issue expensive predicate placement early sql language notion subqueries especially correlated form expensive selection 
open questions leaves number interesting questions open 
satisfying understand cations weakening assumptions predicate migration cost model 
roughness estimation required predicate placement algorithm way assumptions develop cient algorithm 
question cast di erent terms 
combines ldl approach expensive methods chimenti ik kbz rank join optimizer ibaraki kameda krishnamurthy gets polynomial time optimization algorithm handles expensive selections :10.1.1.76.1079
pointed section technique fails ik kbz handle bushy join trees 
isomorphic question ik kbz join ordering algorithm extended handle bushy trees polynomial time 
moerkotte shows answer question general negative 
predicate migration signi cantly ect asymptotic cost exponential join ordering query optimizers noticeably increase memory utilization algorithms preventing pruning 
