point temporal extensions sql efficient implementation david toman department computer science university toronto toronto ontario canada david cs toronto edu 
chapter introduces new approach temporal extensions sql 
main difference current proposals single time points intervals various time achieving efficient query evaluation 
proposed language sql tp extends syntax sql handle temporal data natural way adds single data type represent linearly ordered universe time instants 
semantics new language naturally extends standard sql semantics eliminates fixes problems connected defining precise semantics temporal query languages explicit interval valued temporal attributes 
efficient query evaluation procedure compilation technique translates sql tp queries sql 
existing shelf database systems back ends implementations approach manage temporal data 
temporal extension sql 
decade research temporal databases universal consensus temporal features added standard relational model query languages 
dozens mutually incompatible models proposals 
ad hoc extensions existing relational languages tquel various temporal extensions sql tsql sql temporal current proposal temporal extension sql iso ansi standardization committees :10.1.1.36.7510
goal chapter twofold want point problems common majority proposals representation dependent handling temporal attributes limited temporal dimensionality languages 
second propose alternative solution avoids problems 
proposal clean separation syntax semantics stored database query underlying compact representation temporal information stored database 
technique applied wide range relational research supported nato nserc pdf fellowship 
technique applied wide range relational research supported nato nserc pdf fellowship 
query languages chosen standard sql duplicate semantics aggregation operators starting point prove interested practical real life query languages 
current proposals current proposals recognize timestamping ordinary tuples single time instants leads enormous space requirements tuple repeated time instant represented fact holds modeled reality 
tuples associated compact encodings set time instants called period validity 
sets time instants commonly stored finite sets intervals bitemporal elements products intervals hyper rectangles :10.1.1.36.7510
syntax chosen encoding provides domain values temporal attributes languages pairs interval endpoints sql temporal keywords extract endpoints intervals period keyword construct new interval timestamps allen interval algebra operators compare timestamps :10.1.1.36.7510
possible user knows timestamps encoded intervals 
leads tension syntax query languages intended semantics data model semantics languages point temporal attributes syntax refer actual encoding sets time instants interval endpoints :10.1.1.43.3977
conflict leads unpleasant surprises precise semantics needs defined 
query languages chosen standard sql duplicate semantics aggregation operators starting point prove interested practical real life query languages 
current proposals current proposals recognize timestamping ordinary tuples single time instants leads enormous space requirements tuple repeated time instant represented fact holds modeled reality 
tuples associated compact encodings set time instants called period validity 
sets time instants commonly stored finite sets intervals bitemporal elements products intervals hyper rectangles :10.1.1.36.7510
syntax chosen encoding provides domain values temporal attributes languages pairs interval endpoints sql temporal keywords extract endpoints intervals period keyword construct new interval timestamps allen interval algebra operators compare timestamps :10.1.1.36.7510
possible user knows timestamps encoded intervals 
leads tension syntax query languages intended semantics data model semantics languages point temporal attributes syntax refer actual encoding sets time instants interval endpoints :10.1.1.43.3977
conflict leads unpleasant surprises precise semantics needs defined 
importantly easy show examples queries answers depend choice particular encoding underlying meaning cf 
tuples associated compact encodings set time instants called period validity 
sets time instants commonly stored finite sets intervals bitemporal elements products intervals hyper rectangles :10.1.1.36.7510
syntax chosen encoding provides domain values temporal attributes languages pairs interval endpoints sql temporal keywords extract endpoints intervals period keyword construct new interval timestamps allen interval algebra operators compare timestamps :10.1.1.36.7510
possible user knows timestamps encoded intervals 
leads tension syntax query languages intended semantics data model semantics languages point temporal attributes syntax refer actual encoding sets time instants interval endpoints :10.1.1.43.3977
conflict leads unpleasant surprises precise semantics needs defined 
importantly easy show examples queries answers depend choice particular encoding underlying meaning cf 
example 
extremely hard avoid behavior elegant way cases uniqueness answers guaranteed operational means particular evaluation order 
order query sql temporal 
call queries representation dependent queries meaningful semantics temporal models 
simple queries counting number regions axes give different results depending particular representation 
common temporal query languages hope avoid representation dependencies reasons try mimic point semantics set operations encoded timestamps normalization procedure encoding 
single dimensional case representation dependency problem successfully coalescing :10.1.1.136.4755
tsql informal semantics including examples queries tsql implicitly assumption 
rest section argue situation example naturally arises temporal query evaluation avoided general 
argue single temporal dimension sufficient formulate general temporal queries 
consider query distinct time instants relation contains exactly tuples 
way build sql tp front existing rdbms provide temporal capabilities modifying underlying database system 
sql tp express representation independent sql temporal queries 
sql tp complete sense 
results show case temporal query languages fixed dimensional temporal relational algebra issue clear tsql derived languages presence explicit coercion operators convert encoded temporal attributes data attributes 
proposal easily extended support migration requirements upward temporal compatibility sql :10.1.1.36.7510
sql tp literally follow requirements compatibility easily achieved simple syntactic manipulation source queries adding tags distinguish particular compatibility modes cf 
section 
relational languages provided sufficient expressive power 
start technical part chapter reiterate avoid misunderstanding interested intervals physical encoding sets time instants 
propose constructs insert query 
delete query 
updates preserve semantics respect temporal databases manipulating concrete representation similar way queries 
delete construction powerful sql version handles duplication correctly 
compatibility sql allow easy migration sql sql tp follow introduce compatibility modes allow standard sql queries evaluated temporal database temporal upward compatibility :10.1.1.36.7510
level compatibility treats standard sql queries queries operating respect current time instant 
goal easily achieved simple query transformation replaces base table expression 
oe list data attributes temporal attribute constant representing current time instant current date db 
transformation removes temporal attributes original sql query evaluated current snapshot database 
oe theta ftg resulting query performs exactly required operation 
specify explicit syntax compatibility modes queries come legacy applications compatibility modes usually mode default assume preprocessed definitions submitted sql tp query processor 
practical purposes arrangement sufficient provide upward compatibility sql 
easy see extend sql tp keywords tag queries distinguish compatibility query evaluation algorithm defined section executes queries efficiently respect interval encoding separate evaluation time instant 
modes syntactic level similarly :10.1.1.36.7510
tagging mechanism guarantee syntactic temporal upward compatibility necessary 
cases sql tp queries generated compatibility modes satisfy assumptions theorem efficiently translated sql algorithm 
evaluation sql tp statements starting section focus second third results chapter compilation technique translate point sql tp queries equivalent relational queries interval concrete temporal databases 
subtle point resulting queries efficient completely trivial semantics original queries defined respect temporal databases naive query evaluation procedure refer points active domain corresponding temporal database immediate exponential blowup data complexity query evaluation 
points bounded intervals unbounded intervals aggr 
min max count sum rid 
valid relation identifier id valid attribute identifier rel 
valid comparison type compatible involved attributes 
comparison sql temporal ready compare sql tp current proposal temporal extensions sql iso ansi committees sql temporal :10.1.1.36.7510
comparison slightly complicated sql temporal comes separate flavors distinct semantics 
variants follow migration requirements stated informally section full description see :10.1.1.36.7510

temporal upward compatibility semantics mere restriction temporal relations current state 
valid relation identifier id valid attribute identifier rel 
valid comparison type compatible involved attributes 
comparison sql temporal ready compare sql tp current proposal temporal extensions sql iso ansi committees sql temporal :10.1.1.36.7510
comparison slightly complicated sql temporal comes separate flavors distinct semantics 
variants follow migration requirements stated informally section full description see :10.1.1.36.7510

temporal upward compatibility semantics mere restriction temporal relations current state 
way query evaluation essentially performed standard relational database 
point view mode doesn involve manipulation temporal attributes include completeness 
