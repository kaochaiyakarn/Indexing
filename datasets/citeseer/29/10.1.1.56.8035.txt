reformulating temporal plans efficient execution nicola muscettola technologies 
nasa ames research center field ca mus arc nasa gov paul morris research 
nasa ames research center field ca arc nasa gov intelligent systems program university pittsburgh pittsburgh pa cs pitt edu simple temporal network formalism permits significant flexibility specifying occurrence time events temporal plans 
retain flexibility execution need propagate actual execution times past events occurrence windows events adjusted appropriately 
unfortunately may run tight real time control requirements dictate extreme efficiency 
performance may improved restricting propagation 
algorithm autonomous spacecraft part deep space remote agent experiment 
designing implementing control systems operating physical world important correctly deal metric nature time 
example deadlines typically upper bounds value occurrence time certain events task 
control system guarantee correct execution specified time constraints satisfied possible execution 
interested class high level control architectures distinguish deliberative layer planner reactive layer executive :10.1.1.7.6101:10.1.1.1.2088
concerned properties satisfied temporally flexible plans order correctly executed simplified fast execution algorithm 
speed execution algorithm central ensuring plan robustly executed real time condition crucial importance mission critical applications autonomous spacecraft operations avionics control systems 
fixed time schedules temporally flexible plans allow executive seamlessly adjust delays fluctuations task durations 
cost flexibility executive constantly adjust plan execution performing amount constraint propagation 
discuss non dispatchable plan transformed polynomial time dispatchable plan show resulting plan desirable property minimal number edges dispatchable plans 
dispatching executions type plan interested temporal plan partial order tasks metric time information 
refer start times task separate events 
plan satisfies conditions task start events separated non negative duration additional separation constraints may specified start tasks 
temporal bound constraint duration separation event event constrains possible values times occurrence ta tb respectively tb gamma ta assume plan contains disjunctive bound constraints events graph events bound constraints simple temporal network stn sense dechter meiri pearl :10.1.1.40.1018
loss generality assume stn graph connected 
concentrate process executive selects individual events executes assigns specific time occurrence consistent plan 
established finding ranges execution times event event time bounds equivalent solving single source shortest path problems simple transformation stn graph :10.1.1.40.1018
furthermore stn consistent event possible arbitrarily pick time ta time bounds find corresponding times events set occurrence times events satisfies plan constraints 
plan satisfies conditions task start events separated non negative duration additional separation constraints may specified start tasks 
temporal bound constraint duration separation event event constrains possible values times occurrence ta tb respectively tb gamma ta assume plan contains disjunctive bound constraints events graph events bound constraints simple temporal network stn sense dechter meiri pearl :10.1.1.40.1018
loss generality assume stn graph connected 
concentrate process executive selects individual events executes assigns specific time occurrence consistent plan 
established finding ranges execution times event event time bounds equivalent solving single source shortest path problems simple transformation stn graph :10.1.1.40.1018
furthermore stn consistent event possible arbitrarily pick time ta time bounds find corresponding times events set occurrence times events satisfies plan constraints 
suggests naive execution algorithm iteratively selects event current time event time bound event enabled events directly precede stn executed assigns current time event propagates consequences collapsing event time bounds time bound 
iteration continues events executed 
problems naive execution algorithm 
precisely estimating propagation cost general stn difficult may require considering possible large number possible execution conditions 
analysis best give bound depends total size plan precisely bound corresponds running dijkstra algorithm twice graph 
complexity propagation log total number edges total number nodes stn 
second serious problem selecting events sole basis time bound information stn guaranteed remain consistent possible avoid costly bellman algorithm 
simple temporal network :10.1.1.1.2088
distance graph 
precedence enablement may lead incorrect executions 
consider example network 
intuitively network corresponds tasks bd cd fixed durations respectively time units synchronize event start time units time origin event 
distance graph 
precedence enablement may lead incorrect executions 
consider example network 
intuitively network corresponds tasks bd cd fixed durations respectively time units synchronize event start time units time origin event 
shows corresponding distance graph suitable shortest path propagation :10.1.1.40.1018
assume event occurs time events initially obtain time bounds respectively 
recall lower bound node computed negation shortest path distance node time origin upper bound simply shortest path distance origin node :10.1.1.40.1018
suppose current time tasks bd cd started 
time bounds contain time naive execution algorithm may select execution event discover propagation event started time order plan execute consistently 
consider example network 
intuitively network corresponds tasks bd cd fixed durations respectively time units synchronize event start time units time origin event 
shows corresponding distance graph suitable shortest path propagation :10.1.1.40.1018
assume event occurs time events initially obtain time bounds respectively 
recall lower bound node computed negation shortest path distance node time origin upper bound simply shortest path distance origin node :10.1.1.40.1018
suppose current time tasks bd cd started 
time bounds contain time naive execution algorithm may select execution event discover propagation event started time order plan execute consistently 
naive approach guarantee correct execution plan execution conditions 
problem plan implicit synchronization constraint requires executed exactly time unit execution reaches implicit constraint detected increasing lower bound waiting events current time propagating considering event select 
write denote distance shortest path path exists 
note may negative distance graphs 
proofs theorems supporting lemmas contained appendix 
result useful simplifying local propagation required dispatching execution 
recall stn distance graph upper bounds propagated forward direction edges lower bounds transmitted reverse direction :10.1.1.40.1018
theorem dispatching execution upper bound negative edges lower bound non negative edges affect course execution 
note theorem shows dispatching execution upper lower bound confined disjoint sets edges 
remainder stated contrary convenient term execution mean dispatching execution 
investigate needed obtain dispatchable networks 
theorem dispatching execution upper bound negative edges lower bound non negative edges affect course execution 
note theorem shows dispatching execution upper lower bound confined disjoint sets edges 
remainder stated contrary convenient term execution mean dispatching execution 
investigate needed obtain dispatchable networks 
recall stn rewritten pairs shortest path network called :10.1.1.40.1018

theorem pairs shortest path network dispatchable 
pairs network dispatchable obvious disadvantages 
particular prop node requires time proportional number nodes case 
known preorder induces equivalence relation defined equivalence classes partially ordered relation 
case dominance relation induced equivalence classes useful formulating multiple removal strategy discussed section 
dom dom dom dom dom dom dom domination partial order 
minimality filtered network properties dominates relations definition see pair shortest path network give rise number minimal dispatchable networks minimality means filtered network minimal number edges 
confused tightness minimality property defined :10.1.1.40.1018
wish show number edges 
example partial order structure induced dominates shown 
set corresponds equivalence class dominates relation 
links class dominate symmetrically 
consider lower bound propagation reverse edge non negative length executed done earlier 
occur case edge constraint requires tx gamma rewritten tx gamma occurring anyway bound constrain subsumed actual execution time remainder proofs convenient term execution mean dispatching execution 
theorem pairs shortest path network dispatchable 
proof show full propagating execution controller respects enablement conditions generate inconsistency 
theory simple temporal networks guarantees locally consistent assignment extended global :10.1.1.40.1018
means full propagation execution reduce timepoint bounds empty set 
possibility incorrect execution pending timepoint forced past propagation 
happen shortest path negative distance currently executing timepoint case pairs property single edge negative length 
enablement condition forced executed giving contradiction 
ieee 
cormen leiserson rivest 
algorithms 
mit press cambridge ma 
dechter meiri pearl :10.1.1.40.1018
temporal constraint networks 
artificial intelligence may 
brian austin tate jeff 
plan project evaluation experiments results 
