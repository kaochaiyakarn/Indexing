french version appear des sur intelligence les multi agents chambery st france march 
foundations logical approach agent programming yves lesperance hector levesque lin daniel marcu raymond reiter richard scherl department computer science university toronto toronto canada hector fl marcu reiter scherl ai toronto edu february describes novel approach high level agent programming highly developed logical theory action 
user provides specification agents basic actions preconditions effects relevant aspects environment extended version situation calculus 
specify behaviors agents terms actions programming language refer conditions effect environment 
implementation basic actions provided programs executed real environment simulated execution possible 
interpreter automatically maintains world model required execute programs specification 
account complex actions explain viewed agent programming language 
section develops set simple tools agent communication section completes specification meeting scheduling application 
sections discuss various architectural issues arise implementing framework describe status implementation sketch experimental applications implemented 
conclude summarizing main features approach discussing problems remain 
theory action approach extended version situation calculus predicate calculus dialect representing dynamically changing worlds :10.1.1.85.5082
world taken certain state situation 
state change result agent performing action 
term agt act represents state results agent agt performance action act state example formula agt mean state results agt performance state predicates function symbols value may change state state argument state called fluents 
action specified stating conditions performed means precondition axiom 
action specified stating conditions performed means precondition axiom 
example poss agt user period activity organizer agt user activity organizer schedule user period activity organizer means possible agent add activity user schedule iff user schedule manager scheduled period 
specifies action affects world state effect axioms example poss agt user period activity organizer oe schedule user period activity organizer agt user period activity organizer axioms sufficient wants reason change 
usually necessary add frame axioms specify fluents remain unchanged actions 
frame problem arises number frame axioms order product number fluents number actions :10.1.1.85.5082
approach incorporates treatment frame problem due reiter extends previous proposals pednault schubert haas 
basic idea collect effect axioms fluent assume specify ways value fluent may change 
syntactic transformation applied obtain successor state axiom fluent example poss agt act oe schedule user period activ org agt act act user period activ org schedule user period activ org act user period says activity user schedule performance action act agt state iff action add activity user schedule activity user schedule action removing user schedule 
treatment avoids proliferation axioms requires single successor state axiom fluent single precondition axiom action 
journal logic 
marcu lesperance levesque lin reiter scherl 
distributed software agents communication situation calculus 
submitted workshop intelligent computer communication june 
john mccarthy patrick hayes :10.1.1.85.5082
philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence volume pages 
edinburgh university press edinburgh uk 
robert moore 
