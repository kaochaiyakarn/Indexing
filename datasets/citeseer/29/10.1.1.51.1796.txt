secure mobile code javaseal experiment jan vitek university geneva mobile agents programs move sites execution benefit services information site 
gain wide acceptance strong security guarantees sites protected malicious agents agents protected 
software protection widely viewed efficient way enforcing agent security 
part review programming language support security 
review helps highlight weaknesses java security model 
second part lessons learned review design security architecture javaseal agent platform 
local interaction takes place located agents hand remote interaction obtained moving programs 
agent systems contain agent execution platform agent kernel role includes provision agent protection mechanisms 
agent programming language mean language agents kernel programmed 
emphasis security portability java obvious choice widely adopted language mobile agent systems 
:10.1.1.38.3917
illustrates typical agent system 
resource host os java virtual machine rmi serialization api classloader api network api agent execution platform agent program data code agent program data code mobile agent architecture 
mobile agent paradigm interesting case study security community 
agent program executing environment fully trust interacts located agents fully trust 
fundamental level problem jdk shared kernel interface comprised jdk core classes big reason checked primitives mediate access kernel protection domain 
javaseal experiment javaseal micro kernel agent systems implemented university geneva 
implementation agent languages java system originally implemented jdk ported jdk 
current implementation comprises classes lines sparsely commented java code 
javaseal offers basic support required develop mobile agent application strong emphasis security :10.1.1.38.3917
orientation design javaseal 
discussing security motivations shaped system give brief overview main features javaseal 
javaseal layered top jdk virtual machine 
small kernel implements core functionalities provides api agents 
convenience daemon strands started service external calls 
mobility movement seals javaseal transparent 
modify jvm way capture thread state 
reason threads strands javaseal agent killed data reachable garbage collection sense seal instance moved 
mobility model javaseal seal run method executed seal created seal re started move basically approach java agent systems :10.1.1.38.3917
move active seal close portals strands currently seal 
seal point passive stored capsule 
movement capsule opened seal run method invoked 
plan bit fingerprints identify class files transfer class files necessary 
ffl trojan horse attacks malicious code transferred domain 
ffl flooding target seal messages 
attack prevented including kernel mode deep copy operation implementation 
copy done trusted kernel avoid risk user code creating alias objects copied 
currently implementation relies serialization efficient implementation possible :10.1.1.124.9017
trojan horse attacks may occur message capsule includes malicious subtype classes receiver 
mandatory policy javaseal opened namespace seal namespace classes necessary capsule content operation fails 
possible add classes seal 
fact set classes implement seal signed transportation meaning alteration network detected 
obtained aliasing hard control 
guarded objects version approach guarded object hidden encapsulating object 
discuss software protection mechanisms java stack introspection controlled namespaces 
approaches mentioned section 
kernel offers capabilities tighter guarantees :10.1.1.124.9017
protection domain kernel name space implemented class loader 
communication domains achieved invoking method capability object acts mini rmi stub 
parameters deep copied domains capabilities core classes shared 
design javaseal differs kernel seal protection domain hierarchy allows layered set security policies stringent kernel interface controlling storage channels kernel 
hamilton 
spring nucleus micro kernel objects 
proc 
usenix summer conference pages ohio usa june 
:10.1.1.124.9017
chang hu von 
implementing multiple protection domains java 
technical report cornell university department computer science 
jones liskov 
