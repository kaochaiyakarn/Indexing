free open source software development faster better cheaper software engineering 
walt scacchi institute software research university california irvine irvine ca usa voice fax uci edu june research described report supported national science foundation itr itr itr 
endorsement implied 
mark ackerman university michigan ann arbor les gasser university illinois urbana champaign john noll santa clara university margaret elliott chris jensen mark bergman li uci institute software research julia watson ohio state university collaborators research project produced chapter 
free open source software development faster better cheaper software engineering 
chapter draws attention question determining conditions free open source software development may represent significant alternative modern software engineering techniques developing large scale software systems 
ossd entails shorter development times produce higher quality systems incur lower costs may realized developing systems se techniques 
understanding may arise focus chapter 
presents analyzes compares data collected different ossd projects including depth case study help develop understanding 
goal chapter determine circumstances conditions ossd represents viable alternative se development complex software systems 
particular chapter seeks contrast differences observed arrangement tooling respective software development practices production resources technical regimes community practices embedded 
turn may help identify practice principles se improved 
keywords software engineering free open source software development software productivity software quality software cost software engineering se free open source software development ossd different approaches challenge developing deploying sustaining complex software system products services 
asserted ossd represents significant alternative development software commodity products application services cf 
clark 
ossd represents quicker effective lower cost approach se circumstances conditions merits serious review 
similarly popular mantra faster better cheaper suggests new approaches engineering product development innovation may hand available voas clark 
little known people ossd communities coordinate software development different settings software processes practices organizational contexts necessary success 
conditions may point need critically reflect practices principles se require serious rethinking possible reformulation address accommodate ossd ossd differs current se principles 
extent academic communities commercial enterprises government agencies seek supposed efficacy oss need grounded models processes practices ossd allow effective investment limited resources 
true ossd faster better cheaper se certain conditions possible see similar conditions improve practices adapt principles se 
ossd demonstrated practical value success informal approaches compared formal notation approaches advocated se scholars 
questions ignored mere decades academic industrial se research 
chapter brings questions foreground advocate position se community needs recognize conditions ossd may represent faster better cheaper alternative engineer complex software systems 
failure se community embrace ossd different current se principles may relegate se research academic curiosity engineering discipline capabilities maximized operationalized complex web socio technical development processes community oriented practices 
modern software engineering principles best practices order determine ossd outperforms modern se reasonable identify principles best practices se addressed 
clearly fixed prior technical boundary separates se ossd software developers may may free select methods techniques tools development processes comprehensible manageable 
se ossd may simply represent alternative approaches address challenge developing large software system products application services efficient quality oriented cost effective manner 
alternatives include agile software development cockburn fowler extreme programming beck 
understanding particular approach ossd may outperform se focus 
se academic discipline industrial practice seeks rationalize development complex software system products services 
appeared late principles identified captured increasingly taught subject suitable late undergraduate early graduate study brooks pressman schach sommerville 
quick review current edition textbooks cited finds principles se team endeavor focused development large software systems software development life cycle 
second software life cycle model constitutes framework stipulates orders processes se software development project traverse 
third focal processes se include software requirements engineering specification prototyping design functional architectural modular object oriented testing verification validation configuration management maintenance evolution project management 
fourth processes may employ formal notations reasoning schemes consistency completeness computer tool support notations schemes unclear 
fifth software quality results systematic performance software life cycle processes create reuse manipulate update software artifacts including formal notations graphic diagrams source code project planning cost estimation management control efforts 
sixth level goal threshold software quality user satisfaction number defects discovered post delivery sought attained determines level software productivity achieved cost software development effort 
principles leads product development release cycles measured months years calendar time staff effort 
principles modern se get applied industrial centers government system acquisition programs number lessons learned emerge generally recognized best practices developing software system products services se 
sample best practices appears exhibit items grouped address project integrity project management software construction integrity software product stability 
practices drawn web site software program managers network practices draw attention risk management project performance metrics defect tracking testing continuous ongoing process centrally located originally established navy capture identify disseminate best practices developing large software systems acquired department defense 
web site maintained integrated computer engineering hierarchically organized corporate centers software production supplements se principles identified 
principles practices characterize technical regime nelson winter developing software products service se 
exhibit 
set best practices software engineering project management source www com copyright integrated computer engineering 
encouragement support department defense industry wide efforts improve software product quality promoted entail external assessment maturity firm software development capability stalk hout observed measured terms se principles best practices employs routine basis 
assessment firm capability maturity fact constitute reliable indicator predictor quality software produced unclear conradi 
advocate ossd practice modern se principles 
foundation principles best practices modern se hand attention turn examine practices ossd 
effort identify principles ossd principles take years practice empirical observation conceptualization abstraction refinement identify reproduce stabilize practice technical regime ossd widespread approach software development years old systematic empirical studies begun appear years 
different places examine find practices ossd 
ossd projects seek embrace modern se principles may practices different industry best practices noted 
example dozens ossd projects associated tigris org community 
exhibit presents best practices identified 
second ossd projects supported organized industrial software development centers 
examples include eclipse ossd projects developing java interactive development environments ides part corporate support respectively sun ibm 
third vendors ossd project management environments sourceforge enterprise va software collab net corporate source zee source 
sc cs products early commercially oriented ossd projects evolved refined web project management environments collaborative software development augustin 
environments ides exhibit 
partial view best practices advocated tigris org projects source www tigris org community vision best practices html april 
eclipse interoperate 
environments non free commercial products service offerings marketed primarily large corporations may dozens hundreds organizationally dispersed software development projects underway time 
companies hewlett packard barclays global investments adopted ossd project management environments corporate firewall support corporate sponsored ossd projects 
ossd projects follow practices arise ongoing routine tools services transactions supported project management environments collaborative software development vendors offer 
example view project management activities services capabilities supported sc cs appear exhibit 
noted ossd projects employ capabilities projects scacchi 
product development technical communications project management project management web source code access bug web file content management mailing list management incremental partial project planning process workflow support project task status tracking update tracking configuration version mgmt 
discussion forums role access control audit logs history search index source code documents project document web page templates enterprise project branding exhibit 
set software product development technical communication project management capabilities available commercial os collaborative software environments sources collab net sc cs april 
fourth empirical studies collect analyze software development practices processes different samples ossd projects 
studies produce quantitative results characterize oss properties source size team size release rates bug defect rates qualitative studies identify processes project patterns recurring activity oss development evolution 
results studies sub section serves example study 
case study tigris org argouml tigris org consider case tigris org ossd community ossd se projects affiliated argouml 
tigris org operates virtual enterprise decentralized software development noll 
exists primarily web portal operates project management environment collab net 
may encourage development practices similar internal corporate external corporate sponsored ossd projects 
argouml project project argouml tigris org focuses development computer aided tool developing software system designs notated uml 
home page argouml displayed exhibit 
observations follow intended accentuate important valued efforts community 
purpose provide real world example happens ossd se come 
exhibit 
homepage argouml project web source argouml tigris org tigris org community identifies web site portal meeting ground oss developers se specialists students 
browsing web site tigris org finds mission statement tigris org provides information resources software engineering professionals students home open source software engineering tool projects 
promote software engineering education host undergraduate senior projects 
www tigris org march 
claim lead expect find numerous examples instances modern se techniques concepts applied support ossd 
example ossd focus attention source code development debugging 
modern coding techniques modularity program debugging execution monitoring tools expected 
se textbooks draw attention topics requirements engineering software architecture component design validating implementation source code satisfies requirements testing verifying implementation consistent complete traceable way correct realization architecture component design 
project management configuration management receives appropriate attention 
argouml seeks embrace ossd se principles creation modeling tool help design uml open source development project invited contribute 
argouml design environment provides cognitive support object oriented design www argouml tigris org march 
argouml project today includes registered users developers 
argouml large software development project significant number users conceived support se professionals modern se design tools techniques 
uml widely recognized unified modeling language addressed se information system design textbooks industrial se projects 
uml se isd professionals create document cases software requirements 
addition uml notation specifying software component design architectural features component arrangements 
argouml web site find case diagrams specify requirements argouml uml descriptions argouml architecture component design 
appears argouml developers practice tool document development 
surprising discover software engineering practices key large development project 
unfortunately software engineering tools methods widely today 
years engineering profession software developers software engineering tools 
reasons tools expensive hard learn developers seen software engineering tools effectively 
www argouml tigris org march 
se professionals suppose learn argouml experience 
se students study build se tools support modern se techniques concepts 
similarly examining remaining projects affiliated tigris org difficult find se tools developed tigris org community projects community engineered se techniques cases requirements uml design 
situation find better characterized configuration management tool subversion manage source code configuration 
contrast unclear issue tracking bug reporting system track issues arising development development tigris org projects 
observation intended way positive negative assessment ossd projects merely highlight ossd se practices different 
open source software development movement produced number powerful useful software development tools evolved software development process works conditions normal development processes fail 
software engineering field learn way successful open source projects gather requirements design decisions achieve quality support users 
open source projects great developers keep skills current plug growing base shared experience field 
www argouml tigris org march 
case tigris org community argouml project generalizing efforts appears objectives practices technical regimes ossd se different 
note caution results help researchers investigating ossd projects recognize potential risks making pre mature generalizations ossd works examination single ossd project single ossd community cf 
scacchi 
true ossd project artifacts processes practices may true ossd project empirical study explicit comparison 
modest grounding exhibits case study ossd efforts way address se topics concerns possible examine overarching question chapter addresses 
note opening question focus attributes oss source code programs executable implementations files operating system shell scripts plug modules activex controls intra application scripting code javascript 
focus directed attributes ossd processes technical regime management practices collective community sustaining actions projects 
ossd faster se 
mean software product development approach faster 
space time measures speed come mind software development common indicators include software productivity source lines code product feature delivered developer time unit sommerville task duration schedules process cycle time stalk hout product delivery time time market time product innovation von hippel product defect repair time 
large composite ossd projects org apache org mozilla org tigris org debian org linux kernel corporate users sc cs seek enact internet time development practices microsoft netscape 
internet time software development projects emphasize minimizing time market delivery incremental improvements user initiated innovations functionality complete engineered products 
incremental product releases driven feedback users way determine incremental functionality perceived errors available functionality matter improved resolved 
internet time ossd projects tend produce incremental software releases faster rate point releasing unstable operational daily system builds 
denotes reduction product release cycle times compared se practice significantly restructured life cycle process process cycle time reduction 
largest popular oss systems linux kernel godfrey schach gnu linux distributions gnome user interface koch growing exponential rate internal architectural complexity schach 
oss system architectures functionality grow discontinuous jumps independent ossd projects merge autonomously designed evolved systems combined scacchi 
ossd project teams continue grow time releases incremental rate suggesting adding developers late development cycle may slow may increase size functionality quality system 
stands contrast long received wisdom se indicates adding developers project soon release delays release adverse effect system quality brooks 
examples ossd projects producing large software systems size productivity grows rate faster observed se projects focus attention product development scheduled management control cf 
lehman 
oss developers users systems software requirements design take time articulate negotiate compared se projects 
example exhibit identifies se practice organized inspection explicit software system requirements design artifacts exhibit identifies practice see quality assurance item software requirements designs typically written formalized scacchi tacitly understood developers users 
similarly se developers expected users systems develop 
elicit requirements validate system design users generally se professionals negotiate able schedule budget staff resources 
contrast ossd projects involve users developers time takes determine required system functionality shorter demanding expected se projects 
elapsed time intervals incremental software product innovation defect detection removal product adaptation release cycles shorter growth software product functionality size faster 
ossd better se 
mean software product development approach better 
measures indicators product quality product defects discovered field release come mind 
indicators increased effectiveness software development include product reliability security sommerville response time diagnose repair product defects mockus zhao increases social welfare product developer user community associated ease openness effective technical communication yamauchi building sustained trust accumulation social capital developers user contributors community ownership protection shared common pool resources cf 


ossd projects rely software informalisms scacchi shared information artifacts resources publicly accessed browsed hyperlinked updated demand 
informalisms threaded email discussion lists project web pages socially lightweight mechanisms managing communicating coordinating globally dispersed knowledge mackenzie sharman yamauchi 
informalisms easy learn semi structured representations capture software requirements system design design rationale identified 
large oss systems apache web server mozilla web browser developed sustained informalisms stable features higher quality compared systems developed traditional se techniques corporate settings mockus zhao 
informalisms ossd projects stand contrast cumbersome precise demanding heavyweight formalisms advocated principles practices se 
ossd projects iteratively developed incrementally released reviewed refined software development peers ongoing agile manner cf 
cockburn fowler 
methods ensure adaptation shifting user developer requirements conveyed informalisms 
ensure acceptable levels quality coherence security system wide software continuous distributed testing profiling payne schmidt 
agile software development practices closely aligned ossd practices may fairer observe agile software development methods stand middle ground se ossd practices 
ossd projects hosted decentralized communities peers scacchi sharman form virtual enterprise interconnected logically centralized web sites repositories noll 
ossd projects rely software developers provide peer reviews source code system quality synchronized complexity system release 
major releases undergo review compared daily build releases 
peer review helps create community peers way social capital may accumulated contributing regarded review discussions lost initiating flame discussion project contributors initiator 
community oriented ossd gives rise new kinds requirements community building community portals sourceforge net net gnu org tigris org community software community information sharing systems web site content management interlinked communication channels email forums instant messaging scacchi 
capabilities community oriented mechanisms tend improve social welfare contributing ossd developers users 
contrast se projects targeted hosting centralized corporate setting access visibility may restricted local participants administrative control project business managers 
oss systems evolve community developer users create contribute scacchi 
communities form social organization software development learning software technology practices mentioned modern se principles practices textbooks 
vast majority oss projects small short lived exhibit little growth involve effort developer hunt madey 
contrast large projects realize critical mass core oss developers madey mockus inevitably garner attention software downloads usage 
significant population projects developers oss developers participate projects participate oss projects floss 
labeled developers madey indicate role enabling previously independent small oss projects 
developers come larger social network critical mass needed independent systems merged experience growth size functionality user base 
trend traditional se projects unclear 
appears ossd projects rely virtual project management coordinate control build assure quality ossd activities 
invites encourages system contributors come forward take shared individual responsibility serve benefit ossd collective user developers 
requires multiple people come forward act role team leader sub system manager system module owner manner may short term long term skill accomplishments availability belief community development fielding 
contrast se projects predicated centralized project management regimes project managers assigned administrative authority plan manage control software development resources staff schedule budget projects 
ossd projects enable management arise decentralized community developers se assumes management arises centralized corporate structure resource control framework 
ossd cheaper se 
mean software product development approach cheaper 
measures indicators monetary cost project budgets sommerville come mind costs merit garner attention 
may include procurement purchase deployment costs tooling production infrastructure costs transaction costs associated governance coordination development activities opportunity costs costs associated choosing option cost transfers subsidies 
ossd tools application systems inexpensive free acquire comparatively easy learn globally accessed transferred internet 
situations competing alternative implementations oss tools developers assess evaluate best meet need taste 
tools received public goods gifts 
oss operating environments debian gnu linux distribution constitute thousands utilities tools user applications development costs estimated billions dollars gonzalez barahona available oss immediate download internet 
substantial ossd tool collections essentially free fewer cost barriers procurement adoption readily transferred communities developers users 
commercially available se tools rational microsoft visual studio free may available free trail periods days weeks 
may barriers adoption form perceived higher costs acquisition training number user licenses product support 
commercially available collaborative software development environments sc cs free packaged sale support services similarly represent major cost procurement sustained 
oss tools applications widely examples demonstrate potential software reuse brown 
successful widespread reuse saves time reduces development costs avoiding previously developed products components modules 
ossd encourages software reuse resource sharing ways encourages ongoing evolution tools applications basis continuous improvement 
faster better ossd conditions turn tend drive cost developing software terms schedule budget resources 
se course encourages software reuse advocacy component system design commercial shelf cots components 
may situation se encourages invention relies primarily corporate initiatives software process improvement mixed results conradi developer user motivation software product improvement von hippel 
ossd projects voluntarily developer users want project potentially commit time skill effort personal computing resources reducing apparent cost ossd 
exchange contributors may realize personal professional private collective benefits ossd development efforts floss von hippel von 
minimal management governance forms fielding sharman direct ossd efforts compared rigidly hierarchical managed planned controlled project activities typical se best practice efforts 
discussion contrast large sustained ossd projects se embraces rational economic approach private development complex software systems applications commodity products proprietary services 
ossd project communities hand appear motivated collective actions create utilize extend redistribute common pools software resources information artifacts programs source code executable forms informalisms 
classic institutional conflict rational action private capital firms versus collective action associated ossd community seeks manage share common pool resources hayek north 
consequently resolution conflict may lie suggested private collective mode innovation software production von hippel von 
large globally dispersed ossd projects enact lateral organizational relations galbraith developers users teamwork structures peer oriented decentralized community forms 
relations reduce supplant hierarchical functional organizational forms inherent traditional se techniques increase bureaucratic tendencies rules formalization cf 

ossd relies private collective actions developers users realize virtual project management capabilities reduce reliance formal project management techniques administrative structures industrial se projects reiterated se textbooks 
ossd oriented community agility oriented centralized project management formal life cycle documentation regimes 
developers users reduces time effort needed users want developed delivered meets user needs von hippel von hippel von 
drawing practices observed ossd projects opportunity exists developing new se processes practices project community forms organizational architectures decentralized lateral rely semi structured informal representations software artifacts 
se community web sites host examples community development tools appear candidates adoption 
ossd panacea compared se shortcomings 
noted vast majority ossd projects fail grow developers subsequently associated software source code achieves critical mass users functionality community discourse informalisms related resource subsidies 
ossd general risky undertaking terms probability achieving critical mass realizing faster better cheaper way develop complex software products services 
accordingly ossd suited adoption hierarchical organizations develop software products services rational management schemes traditional se principles practices cf 

organizations firms develop software products service tradition se may hand find adoption ossd practices viable alternative developing high value software products enterprise resource planning erp systems 
large software development companies ibm sun hp sap started sponsored ossd projects ibm eclipse sun hp sap db mysql separate complementary mainstream software product lines tend follow se practices 
risk failure ossd reduced mitigated association social networking complementary ossd projects suggested tigris org community example studies madey corporate ossd efforts noted 
associations successful sustained enable transactional flow shared resources gifts trust social capital social information networks developers users cf 
north 
appears ossd different rational economic world se merits study practice refinement cf 
von hippel von 
teach se consider embrace ossd practices community information resources infrastructure alternative approach development large software system products services 
practices build viable lateral social relationships small software developed open source erp system operates conjunction oracle proprietary database management system 
reports copies erp system downloaded making widely deployed erp system world 
org community developing free software erp system aimed deployments small companies developing countries elliott scacchi scacchi 
sustained evolved ongoing sharing reuse ossd informalisms 
informalisms encourage sharing study modification redistribution development project results 
se education need interests rationally managed hierarchically organized corporate software development projects 
se educators may consider embrace free open global community students collaborating software engineers want improve software development productivity quality reducing costs 
current se textbooks need revision accommodate emerging ossd principles practices 
free open source software development appears changing world software development faster better cheaper pace broad impact audience 
understanding may help advance state art se ossd 
failing recognize differences may result ossd characterizing leading edge global software product development activity se characterizes trailing edge software development rationally managed corporate settings 
accordingly chapter examines question ossd faster better cheaper se examination data exhibits case study review related empirical studies results summarized follows 
ossd faster se development life cycle focused internet time product releases produced delivered daily basis 
rapid development release cycle means unstable operational systems delivered time stable systems emerge slowly extensive community review iterative incremental refinement online discourse system features usage experience 
large oss systems may grow size platform diversity faster rate systems resulting se oss systems acceptable quality users 
independent ossd projects merge larger projects may reach critical mass developers needed obtain high growth rates system functionality quality 
se may able contribute expertise restructure reinvent architecture large oss systems continuously improve mitigate unwanted complexity 
developers oss systems users systems readily determine system requirements design features online discourse 
capabilities help ossd faster traditional se principles practices 
ossd better se developers rely socially lightweight software informalisms mathematically heavyweight software formalisms 
ossd projects employ informalisms tend agile systems result evolve teams communities develop 
ossd projects rely community building community portals community software community information sharing systems project content management communication channels realize sustain quality software developed 
socio technical infrastructure ossd enables agile virtual enterprise forms practice virtual project management routine collaborative software development tools techniques informalisms 
ossd cheaper se total costs oss tools users applications low free collective development cost enables flow social capital developers users 
ossd projects prime venue demonstrating value software reuse speeds development reduces costs 
oss developers appear motivated give away products collaborative software development order share examine learn reinvent modify redistribute results experiences practice ossd ways build sustain community developers 
ossd irrational version se se poorly done 
ossd private collective approach problem develop large software systems 
oss embraces encourages requires community oriented collaborative software development effort basis practices success 
se turn faster better cheaper selectively adopting integrating practices technologies community techniques ossd projects 
empirical study ossd practices help identify new ways improve principles practices se 
augustin smith 
accelerating software development collaboration proc 
th intern 
conf 
software engineering orlando fl may beck 
extreme programming explained embrace change addison wesley pub hall rainer 
software process improvement problems twelve software companies empirical analysis empirical software engineering march 
ljungberg 
power gifts organizing social relationships open source communities info 
systems 
brooks 
mythical man month essays software engineering anniversary edition nd edition addison wesley menlo park ca 
brown booch 
reusing open source software practices impact open source commercial vendors proc 
th intern 
conf 
software reuse lecture notes computer science vol 

cockburn 
agile software development addison wesley boston ma 
conradi fuggetta 
improving software process improvement ieee software july august 

software development internet time computer october 
stone 
open sources voices open source revolution reilly press sebastopol ca 
garg miller nelson 
progressive open source proc 
th intern 
conf 
software engineering orlando fl may 
elliott scacchi 
free software development cooperation conflict virtual organizational culture appear koch ed free open source software development idea press 
fielding 
shared leadership apache project 
communications acm 
floss 
free libre open source software survey study floss final report international institute university maastricht netherlands june 
fowler 
new methodology com articles html april 
galbraith competing flexible lateral organizations second edition addison wesley menlo park ca 
godfrey tu 
evolution open source software case study proc 
intern 
conf 
software maintenance san jose california october 
ou working free 

motivations participating open source software projects intern 
electronic commerce 
hayek 
knowledge society american economic review 
hunt johnson 
pareto distribution sourceforge projects proc 
open source software development workshop newcastle tyne uk 
scherlis 
high quality open source software practices proc 
nd workshop open source software engineering orlando fl 
koch schneider 
effort operation ordination open source project gnome 
info 
sys 


open source software development distributed innovation oxford review economic policy 
lehman 
software evolution ed encyclopedia software engineering nd edition john wiley sons new york 

developing products internet time anatomy flexible development process management science 
mackenzie rouncefield rebel code 
open source code proc 
open source software development workshop newcastle tyne uk 
madey 
open source software development phenomenon analysis social network theory 
proc 
americas conference information systems 
dallas tx 

faster better cheaper low cost innovation space program john hopkins university press 
mockus fielding 
case studies open source software development apache mozilla acm transactions software engineering methodology july 

competing design power organizational architecture oxford university press new york 
yamamoto ye 
evolution patterns open source software systems communities proc 
intern 
workshop principles software evolution 
nelson winter 
evolutionary theory economic change press cambridge ma 
noll scacchi 
supporting software development virtual enterprises digital information february 
jodi ecs soton ac uk articles noll 
north 
institutions institutional change economic performance cambridge university press 

developing community software commodity world fisher downey eds frontiers capital ethnographic reflections new economy social science research council appear 
gardner walker 
rules games common pool resources university michigan press ann arbor mi 

embracing open source software development sams publishing indianapolis 
payne security open source software info 
systems 
pressman 
software engineering practitioner approach fifth edition mcgraw hill 
scacchi 
understanding requirements developing open source software systems iee proceedings software february 
scacchi 
open ec case study electronic commerce open source software development working institute software research uc irvine july 
schach 
object oriented classical software engineering fifth edition mcgraw hill 
schach jin wright heller offutt 
maintainability linux kernel iee proceedings software february 
schmidt porter 
leveraging open source communities improve quality performance open source software st workshop open source software engineering toronto ontario may sharman rajagopalan 
framework creating hybrid open source software communities info 
systems 
sommerville 
software engineering th edition addison wesley pub stalk hout 
competing time time competition reshaping global markets free press new york 
voas 
faster better cheaper ieee software may june 
von hippel 
innovation user communities learning open source software sloan management review 
von hippel von krogh 
open source software private collective innovation model issues organization science organization science 
clark 
product development quantum leaps speed efficiency quality free press new york 
yamauchi shinohara ishida 
collaboration lean media open source software succeeds proc 
computer supported cooperative conf 
cscw philadelphia pa acm press 
zhao 
quality assurance open source development model journal systems software 

