compiling occam field programmable gate arrays ian page wayne luk programming research group oxford university computing laboratory road oxford england ox qd describe compiler maps programs expressed subset occam netlist descriptions parallel hardware 
field programmable gate arrays implement problem specific hardware generated entirely software process 
inner loops time consuming programs implemented hardware intensively parts program mapped machine code conventional compiler 
software investment protected program run entirely software entirely hardware mixture 
single program result implementations potentially wide range 
compilation system generate hardware interfaces real world devices systolic arrays complete microprocessors 
near hope proven version compiler enabling automatically generate provably correct hardware implementations including microprocessors higher level specifications 
field programmable gate arrays fpgas readily available multi sourced components proven place development small scale production large scale production runs 
style field programmable gate array uses static ram dynamically configure function logic cells interconnections 
current examples large scale fpgas style xilinx series xilinx electrically reconfigurable array plessey logic cell array devices 
vendor provided cad software creates device configuration data circuit schematics boolean equations state machine descriptions higher level descriptions 
dynamically reconfigurable fpgas equivalent complexity gates available denser devices developed 
due relatively large scale devices programmability possible compile non trivial algorithms directly reusable hardware 
combining fpgas traditional microprocessor possible build systems compiled high level notation directly mixture hardware software order exploit best features domain effectively 
user software investment protected program run entirely software entirely hardware subject available resources mixture 
single program result implementations potentially wide cost performance range 
application programs demand processing power supplied conventional processing resources 
programs kernel responsible significant fraction total execution time program 
particular interest vision algorithms conditions certainly hold increasingly looking application specific hardware provide necessary computational resource real time robot vision 
application areas exhibiting similar characteristics abound 
complete application program probably complex implemented special purpose hardware feasible implement kernel application hardware remainder program implemented machine code conventional computers 
examples possible uses legion computer graphics image processing vision data compression database search maintenance cryptography obvious application areas 
area interest interfacing real world devices need intelligent control real time requirements capability conventional processors 
reported describes compilation system takes specifications algorithms specifications synchronous hardware netlist form 
related delay insensitive implementations csp occam van brown 
contain simple gates type flip flops 
netlist processed xilinx software tools xnf lca apr xact produce configuration data xilinx fpga chips 
compiler maintains refinement relation semantics algorithm specification hardware observable behaviour algorithm identical implemented hardware conventional software 
occam language jones ideal candidate source language compiler due simplicity static compilation properties minimal run time demands expressive power parallelism 
defined semantics hoare csp highly appropriate checking equivalence widely varying implementations amenable formal proof techniques 
making extensive properties attempts prove correct version compiler described 
due array architecture chips especially appropriate systolic implementations algorithms 
design systolic arrays declarative language set correctness preserving transformations 
companion luk page describes approach specification transformation implementation systolic algorithms 
prototype hardware host built xilinx xc fpga coupled banks static ram transputer link adapter allows system coupled transputer array 
currently designing successor prototype transputer large bank dynamic ram large xilinx chip frequency synthesizer banks static ram daughter board designed tram standard inmos 
hope replicate module standard tram host boards order exploit coarse grained algorithmic parallelism fine grained parallelism xilinx chip course transputer 
algorithm description language reasons simple subset occam minor extensions appropriate current chosen input language 
current compiler prototype written sml harper proved convenient supply input programs form syntax 
need build parser language cost writing programs slightly verbose form 
syntax produces listings conventional occam form 
part process demonstrating proof correctness produced small version compiler prolog implementation proof close 
input language compiler currently includes integers channels basic data types expression evaluation multiple assignment communication basic processes seq par alt constructors 
useful necessary minor extensions occam language 
modifications allow variable precision integers channels offer slightly richer set logical operators expression sub language 
take evidence descriptive power occam little modified despite fact generating hardware machine code 
time extensions withdrawn powerful optimisation capabilities built compiler 
compilation strategy general scheme compilation top syntax driven consequently fast 
declarations usage checked program body generate netlist entries registers corresponding user variables 
channels generate static hardware circuitry particular channel generated input output statements quote 
minor amount hardware generated provide global start signal hardware deal global signal 
compilation proceeds recursive descent body program adding hardware netlist circuits section 
final phase optimises netlist adds buffers outputting xnf files currently interface compiler vendor software programming fpgas 
sub sections review general characteristics control circuits generated compiler strategy dealing expressions 
clocking scheme reasons simplicity compiler proof compact designs compiler generates completely synchronous circuits 
single global clock target hardware clock period terminated rising edge global clock time flip flop system triggered 
model supported xilinx chips dedicated low skew clock lines 
compiler remain unchanged eventually re engineer produce self timed circuits 
synchronous nature hardware fact opportunity parallel implementation taken means precise guarantees real time response resulting implementations 
simple calculus tions programs particularly simple case free programs 
essence calculus skip assignment communication process ready take precisely clock cycle constructs take precisely zero time 
moment rely vendor software predict maximum delays circuits placement routing information set clock speed alternatively guide transforming program faster version laws occam 
hope compiler 
unexpected side effect synchronous implementation technique number additional laws implementations valid implementations occam 
may possible deriving optimal implementations programs formal transformation tools oxford occam transformation system goldsmith 
control strategy generating necessary datapaths compiler generates fully distributed control hardware program 
statement program results generation hardware controls activation corresponding parts datapath execution statement 
usually flip flop corresponding primitive statement user program set statement executed 
basically hot approach control state encoding demonstrated space efficient particular xilinx fpgas knapp 
perfectly possible adopt alternative encoding schemes may preferable circumstances 
developed provably equivalent control state encoding schemes integrated compiler optional optimisations 
control hardware statement compiled single control input signal called start triggers execution statement single control output called finish signals statement execution complete 
single execution statement control signals high exactly clock period terminated rising edge global clock 
external environment guarantee initial control pulse start program execution just clock period long attempt initiate executions program corresponding finish signal generated 
initial environment guarantee program control circuits generated compiler maintain guarantee nested statement program 
expressions language integers basic type basic values integer constants values variables 
sub language expressions selection binary unary operators variable width integers currently including addition subtraction multiplication magnitude extraction bitwise xor operations shifting field extraction concatenation 
new operators usually prototyped tive language mentioned earlier interfaced compiler 
working comprehensive integration approaches higher order declarative sublanguage replaces current expression language occam framework 
compiler generates fully parallel hardware expression evaluation hardware unit typically generated operator expression 
shows simple expression involving operands derived registers say result calculated hardware units 
expressions represented trees form expression evaluation hardware mirrors structure 
untimed combinational logic expression hardware 
expressions evaluated constantly environment guarantee sufficient period stability input operands result expression circuit 
simplifying assumption expressions evaluated single clock period 
hooks compiler straightforward individual expressions evaluate integral number clock periods currently compiler code predict evaluation timings feature dormant 
case done partially advance placement routing 
start adder clock ff clock ce expr 
register expr 
finish expression hardware assignment control hardware combinational hardware associated expression evaluation particular removed peephole optimisation step producing final netlist 
optimisations consist removing gates connections output terminals removing gates constant output removing constant duplicated inputs gates 
example expression adds variable generate chain full adders reduced optimisation rules chain 
opportunities optimisation circuits subject 
compilation statements section show various statements input language mapped control hardware 
details datapaths generated straightforward essentially covered notes sub section 
assignment statements hardware generated statement expr shown 
black triangle top left hand corner box denotes implementation control circuitry statement distinguished readily hardware units 
expressions evaluate clock period control circuitry cause destination register load expression value clock period start pulse 
provide control output pulse incident clock period 
destination registers synchronous clock clock enable input 
means incoming control pulse drive reg load clock enable input destination register high rising edge start clock period 
termination statement signalled subsequent statements enclosing program finish pulse delayed version input pulse generated type flip flop 
programs multiple assignments target destination register 
case multiplexors generated register load signal associated destination register enables just source expressions register input bus 
simple sum products multiplexors 
language semantics guarantee register target assignment communication time checks deal kind conflict needed hardware 
register load signals particular register ored resulting signal clock enable signal register 
skip statements implementation skip type flip flop providing delay clock period assignment statement destination register 
implementation chosen arbitrary delays multiples clock period easily programmed 
optimised piece wire delay known required explicit temporal constraints execution met 
implementation receives start pulse generates finish pulse 
sets global flip flop indicate condition seq statements simplest composite statement seq implementation shown 
start pulse triggers statement sequence 
termination statement trigger second statement termination seq construct finish pulse generated 
environment complete seq construct respects rules control pulses clearly construct provides behaved environment statement sequence 
formally proven similar assertions statements 
start finish seq statements start start finish finish conditional statements provided construct hardware structure shown 
incoming start pulse steered controlled statements depending evaluated boolean expression complex conditional statements occam style built compositions basic construct 
implementation construct shown 
control pulse initial directed back controlled statement finish construct depending current value boolean expression 
case statement implemented shown 
hardware level evaluated expression log bits drives decoder output triggering dependent statements case expression 
hardware optimisation phase removes redundant hardware set case constants compact 
par statements start 

finish implementation par implementation par construct shown 
incoming control pulse activates statements parallel statement sets reset dominant sr flip flop completed 
statements completed outgoing control pulse generated flip flops reset 
gates optimisation statement complete trigger output directly waiting clock period 
time overhead initiating terminating parallel construct 
implementation channels implementation control hardware channel communication shown 
arbitrary number statements may input output channel statements implemented circuit shown 
reg load signal relevant channel input statements enable loading destination reg exactly assignment communication occam regarded simply distributed assignment 
start ready transfer reg load finish implementation channels pair start finish signals input output statement quotes particular channel shown 
start signal sets reset dominant sr flip flop remember communication pending particular statement 
gate performs optimisation seen flip flops implementation par 
ready signals input statements involving particular channel ored giving signal asserted statement ready input channel 
similar circuit determines statement ready output channel 
signals anded form transfer signal shown 
transfer signal asserted precisely input output statement ready communicate channel 
language semantics ensure input output statement trying communicate channel time checks necessary hardware deal type conflict 
transfer signal resets request flip flops initiated transfer type flip flop creates clock delay exactly assignment 
channel datapath circuitry sending receiving statements generated mechanism set assignment 
compiler implements fixed priority alt accepts input channel offer 
lack space precludes presentation details 
application examples briefly widely differing implementations simple algorithm 
direct implementation algorithm generate fibonacci numbers simple application specific microprocessor running code achieves 
shown formally prove equivalence implementations 
int seq true direct fibonacci algorithm straightforward compiler produces circuit type flip flops primitive gates inverters 
circuit produces new value modulo clock cycle 
simple example custom microprocessor algorithm program interpreter processor bit words repertoire instructions 
instruction format bit opcode significant bit operand 
liberties taken occam syntax reduce size program page 
int iptr int inst int mem inst drop seq inst iptr mem iptr iptr fetch increment case inst drop case opcode skip skip inst take ldc mem inst take lda mem inst take sta mem inst take adda iptr inst take jmp iptr inst take true skip skip take drop operators take drop significant bits value 
simply shorthand equivalents certain shift mask operations extracting operand opcode 
compiler implements microprocessor type flip flops primitive gates 
figures ignore circuitry bootstrap machine code onchip memory mem include chip memory 
processor pipelined easily takes clock cycles instruction fetched executed instruction fetch instruction pointer increment case statement happens variant takes exactly cycle 
listing shows fibonacci program loaded microprocessor 
generates new result instructions 
clearly program microprocessor illustrative meant sense optimal 
point showing microprocessor implementation highlight algorithms compiled directly hardware interpreted form mixture ii forms provably equivalent iii compiler best judge implementation style choose parts algorithm iv ally compiler smart design optimal architectures processor details particular application program 
address contents ldc sta initialise previous fib 
ldc sta latest fib 
accumulator point adda calculate fib 
sta re arrange register contents lda sta lda jmp loop var var var order prove equivalence programs bootstrap code consisting explicit assignments integer constants corresponding machine code instructions memory locations indicated prepended microprocessor definition 
application laws occam sufficient demonstrate second program refines 
proof correctness currently working proof correctness compiler principles outlined page 
algebraic semantics occam show equivalences user programs stylized normal form program written occam 
shown variety interpretations normal form programs possible 
interpretations leads isomorphism user programs style hardware circuits described 
project addresses number important issues development computing systems 
addresses problem faced designers applications demand particular specialized processing offered conventional processor systems parallel ones 
algorithms require non standard operations bit reversal field extraction parsing sorting searching complex matching may fit fpga offer considerable speed compared machine code implementations 
addresses problem usefully 
vast number transistors available cheaply silicon 
programmable gate array technology side side conventional microprocessors produce uncommitted processors outlined 
exciting possibility microprocessor real estate programmable gate array 
microprocessor gain faster interface gate array ii extra flexibility application iii extended life microprocessor design upgrades handled software updates user systems 
offers degree late design post delivery flexibility reconfiguration systems new user demands arise new algorithms available 
particular interfaces complex devices rapidly implemented people devices notoriously ill specified large degree flexibility coping change sub systems designer control 
addresses need system developers prototype systems extremely rapidly 
run time reconfiguration requirement large volumes anticipated identical circuit derived design method adequately capture designer implementation intentions produced mask programmable gate array form 
importantly provably correct hardware compiler offers clear way forward production complete systems including hardware software provably correct 
applicable approach significant advantages attempts prove correct ad hoc hardware designs 
gratefully acknowledge help assistance jifeng contributed enormously efforts prove correct version compiler prof hoare support new research initiative adrian lawrence undertaken detailed design tram module bernard help ml invaluable jonathan bowen undertaken prolog specification 
valued colleagues members programming research group adrian lawrence member computing service oxford 
cal datasheet edinburgh eh jl uk 
van compilation communicating processes delay insensitive circuits proc 
iccd brook new york october 
bertin programmable active memories systolic array processors eds prentice hall international pp 

brown truly delay insensitive circuit realisation process algebras designing correct circuits jones sheeran eds springer verlag pp 

goldsmith occam transformation oxford proc 
th occam user group technical meeting ed ios 
harper standard ml report ecs lfcs laboratory foundation computer science university edinburgh 
hoare communicating sequential processes prentice hall international 
inmos transputer iq systems jones programming occam prentice hall international 
knapp accelerate fpga macros hot approach electronic design sept 
high level synthesis system asic ieee september appear 
luk page designs field programmable gate arrays volume 
may compiling occam silicon developments concurrency communication hoare ed addison wesley pp 

page provably correct hardware compilation prg internal report 
plessey semiconductors era electrically reconfigurable array data sheet sn qw uk roscoe hoare laws occam programming theoretical computer science vol 
pp 

chan kong empirical study performance multilevel logic minimization tools field programmable gate array technology university california santa cruz computer engineering departmental report ucsc crl shepherd wilson making chips new scientist may pp 
xilinx technical data book xc series logic cell array family xilinx san jose ca 
xilinx programmable gate array data book 
xilinx xact manual san jose ca 

