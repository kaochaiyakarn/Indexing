query flocks generalization association rule mining dick tsur hitachi jeffrey ullman stanford university stanford university inria chris clifton mitre rajeev motwani stanford university nestorov stanford university rosenthal mitre serge abiteboul march association rule mining proved highly successful technique extracting useful information large databases 
success attributed appropriateness objectives fact number new query optimization ideas priori trick association rule mining run faster expected 
see tricks extended general context allowing efficient mining large databases different kinds patterns 
general idea called query flocks generate test model data mining problems 
show idea general purpose mining system generation conventional query optimizers 
shall discussion reviewing basics market basket analysis priori algorithm finding items tend appear market baskets 
see generalize market basket problem query flocks parametrized queries filter condition eliminate values parameters uninteresting partially supported community management staff massive digital data systems program nsf ar daah ibm hitachi permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post redistribute lists requires prior specific permission fee 
sigmod seattle wa usa acm expressing query flock datalog find wellknown condition query safety lets enumerate queries candidates query optimization technique generalizes priori 
interestingly technique applicable sql queries directly apparent express queries datalog 
consider pragmatics implementing generalized priori technique query flocks processor conventional sql query optimizer 
approach see generalized priori cost optimization principally involving join order selection useful subqueries 
approach view technique applied dynamically decision perform extra filtering step analogous priori technique eliminating low support items done see sizes intermediate relations query flock execution process 
review market basket mining marker basket problem represents attempt retail store learn items customers frequently purchase 
goal understanding behavior typical customers navigate store 
instance learn customers frequently buy suppose customers walk 
store owner puts high profit items tempting customers induce impulse buying increase profits 
query problem database containing information market baskets time customer appears cash register set items bought entered database 
shall assume simplicity database relation baskets bid item giving pairs consisting basket id item appeared basket 
goal market basket analysis find sets items associated fact association called association rule 
intuitively associated items appear frequently 
precise measures association support items appear baskets 
confidence probability item basket high 
interest probability significantly higher lower expected probability items purchased random 
example oft repeated observation people buy buy beer 
statement set beer high support means people buy beer 
fact useful marketer 
statement rule beer high confidence means lot people buy beer buy 
rule useful begs question people buy beer especially buy buy just everybody buys 
saying rule beer high interest means buy beer buy general population 
priori optimization important trick speeding search sets items known priori ais 
uses fact set items appears baskets subset appears baskets 
example looking pairs items appear baskets start finding items appear baskets 
high eliminate tuples basket relation hard part joining baskets count occurrences pairs items 
transformation market basket problem shown papers cited great difference time taken find answer question find pairs items appear market baskets problem sql mining lang principle express query pairs items appear large number baskets conventional sql 
approach examined hs instance 
problem right optimizations state art commercial database systems 
example fig 
shows express query find pairs items appear market baskets join baskets condition basket id name item lexicographically name second item avoid repeating pairs possible orders 
group joined relation pair items involved check having clause group baskets 
select il item item baskets il baskets il item item il bid iz bid group il item item having count il bid searching association rules sql problem formulation priori trick implemented conventional optimizers 
example popular dbms rewriting query fig 
find items appeared baskets data word occurrences newspaper articles threshold occurrences sense retail store data joining set items baskets relation performing query written fig 
resulted fold speedup 
principle necessary code optimizations implemented sql systems 
idea roughly pushing grouping expression tree studied 
advent market basket mining database vendors invest lot time effort building transformations systems 
argue data mining problems analysis profit building priori form code optimization existing systems 
number approaches optimization priori type including significantly different existing optimization techniques 
formalism query flocks including expression datalog important tool building improved optimizers 
mine sql 
pointed early papers cited sql systems unable compete ad hoc file process ln practice market basket analysis done higher floor baskets typically baskets 
example lower bound support 
ing algorithms priori variants 
assume data stored conventional relational system mining occurs issuing sequence sql queries database 
dispute demonstrated fact ad hoc file processing algorithms outperform significantly dbms algorithms 
fact negate importance approach reasons 
algorithms mining optimizations develop carried file dbms setting corresponding speedup 

mining large scale databases routine matter mining queries issued quickly data appropriate dbms probably sql databases play important role process 
appropriate move data conventional dbms special purpose system designed mining algorithms suggest improvements thereof component special purpose system 
outline section introduce model query flock running examples shall explicate concepts 
select flocks language unions conjunctive queries arithmetic comparisons negations allowed 
section discusses ways priori technique generalized setting query flocks filters minimum support 
show old concept safe conjunctive queries guides application technique general setting 
section introduce notation query plans 
search optimal plans complicated fact conventional optimization problems exponential space possible plans restrict search 
suggest reasonable heuristics limiting search exponential set plans including dynamic technique select join order advance choose apply filter operation seeing intermediate result 
query flocks intuitively query jock generate test system family queries identical values parameters asked simultaneously 
answers queries filtered pass filter test enable parameters part answer query flock 
setting query flock system language express queries parametrized parameters 
language express filter conditions results query 
languages specify particular query flock designating 
predicates represent data stored relations 

set parameters shall denote names 

query expressed query language parameters roles normally reserved constants 

specifies condition result query satisfy order assignment values parameters acceptable 
meaning query flock set tuples represent acceptable assignments values parameters 
determine acceptable parameter assignments principle trying assignments query evaluating query seeing result passes filter test 
course efficient ways compute meaning query flock optimizations subject balance 
remember query flock query parameters 
result flock result parametrized query help specify flock 
languages flocks idea expressing query form filter condition proposed 
example mannila man talks logic expressed 
mannila formulation puts filter items market basket beer role filter limited condition result query 
simply eliminate parameters mention beer explicitly query flock require items beer 
shall query language conjunctive queries cm augmented arithmetic introduced section union introduced section 
subsequent examples shall datalog ull notation sql express queries 
datalog gives capabilities utility clear section 
notion safe query datalog figures potential optimizations 

set options adapting priori trick arbitrary flocks easily expressed datalog 
advantages mentioned translated sql terms 
filter language sql conditions appear having clause 
tht 
filter language turns important principal results concern flocks filter support condition condition essentially single constant minimum threshold support 
market basket analysis query flock example shall consider simplest problem query flock 
relation baskets bid item find pairs items appear baskets 
query flock easily generalizes finding sets jz items appear fixed query filter answer baskets baskets count answer market basket association rules query flock example query flock finding pairs items appear baskets seen fig 

values query asks set baskets items appear 
answer relation pair items set baskets 
filter condition requires set baskets number 
result query flock set pairs items baskets containing items 
adding arithmetic negation query flocks language market basket problem corresponds simple query flock 
query conjunctive query subgoals positive relational subgoals 
principle finding complex set maximal sets items appear baskets regardless cardinal set items awkward expressed sequence query flocks increasing cardinalities flock depending result previous rock 
query language whatsoever query flock language 
order apply query optimization techniques propose limitations query language 
extensions conjunctive queries shall allow 
negated subgoals 

arithmetic subgoals variables parameters 
shall refer broader class conjunctive queries extended conjunctive queries 
addition shall allow query union extended cq discuss section 
original cq assume extended cq follow conventional set semantics bag semantics duplicate tuples allowed 
claims hold bag semantics 
simple example arithmetic subgoals useful original query flock market baskets example produces successful pair items orders 
restrict result pair items appear lexicographic order add arithmetic condition query answer baskets baskets ibe extensions negation union quite useful 
introduce examples rest illustrate ideas 
example example query flock searches unexplained side effects 
want find symptoms patients take threshold exhibit symptom medicine patient disease explain symptom 
underlying data consists relations 

diagnoses patient disease patient diagnosed having disease 
exhibits patient symptom 
symptom patient ex treatments patient medicine medicine prescribed patient 
causes disease symptom disease known cause symptom 
query flock problem described shown fig 

order query sense assume patient disease 
include patients diseases simultaneously extend query flocks language allow intermediate predicates particular predicate relating patients set symptoms diseases 
extension feasible shall concentrate simpler cases order explore query optimization opportunities 
query filter answer exhibits treatments diagnoses causes count answer mining side effects medical database flock fig 
parametrized query asks set patients exhibit symptom receiving medicine disease disease doesn explain symptom filter requires patients medicine exhibiting unexplained symptom example example looking words strongly related collection html documents 
notions strong connection explored shall fix count 
number times words appear title 
number times word appears anchor appears title document anchor points 
query flock searches pairs words predicates relations 

word appears anchor text anchor 
link dl anchor links document dl document 
shows query flock finds pairs words desired relationships title query alter answer answer link dl answer link dl count answer query flock defining strongly connected words anchor target title 
prevent pairs words generated twice elected require word lexically precede second word 
result forced rules distinguish case lexically word anchor case second word anchor 
taken occurrences threshold significance 
notice count filter counting answers may anchor id document id assume values common types id count low 
generalizing priori technique essence priori trick applied query flocks optimize evaluating expensive query answer allows upper bound size answer obtained certain parameters 
bound threshold filter condition eliminate certain values parameter parameters consideration 
expensive queries come 
containment conjunctive queries queries conjunctive cm ahv straightforward answer question 
simplest way query put upper bound size result query provable database result subset result condition normally write conjunctive queries containment decidable technique containment mappings cm 
consequence containment mapping theorem way hold constructed 
subset subgoals 
splitting zero variables variables 
splitting variables decrease number solutions query query simpler 
shall limit search subsets subgoals variable splitting allowed 
picking proper subset subgoals decrease size solution query simpler simplification essence priori trick 
subset subgoals eliminate consideration parameters query flock important aspect priori safe queries subset subgoals conjunctive query sense intermediate step evaluation query flock 
particular variables appear head query appear body query defines infinite set tuples head predicate provide useful upper bound size result full query 
condition studied cu way restrict datalog queries equivalent relational algebra called safety cq negation arithmetic satisfy condition variable appears head appears body called safe queries 
prune values parameters 
instance ask values query answer baskets values threshold filter 
value eliminated consideration member pair items meeting filter condition 
symmetry set survive test subquery exactly set survive test second subquery 
fact priori trick case item pairs seen combination subqueries exploitation equivalence 
may summarize generalization priori cq negation arithmetic 
follows optimization principle conjunctive queries optimize query flock described conjunctive query filter puts lower bound support consider eval mating safe subqueries formed deleting subgoals exploit query eliminating values parameters meet support threshold subquery evaluated 
safe queries negation arithmetic expand horizon conjunctive queries datalog queries negation arithmetic matters get complex ways 
discovery containing queries easy 
decision procedures zo datalog arithmetic es datalog negation including arithmetic 
cases containing query characterized subset subgoals contained query 
cases unusual propose continue example consider market basket query flock restriction look subsets subgoals example reproduce query defines query flock 
augment search generalized notion answer safe query conditions baskets satisfied uw baskets nontrivial subqueries formed nonempty proper subset subgoals answer baskets 
variable appears head appear subgoal body 

variable appears negated subgoal body appear subgoal body 

variable appears arithmetic subgoal body appear answer baskets subgoal body 
parameters variables constants far safety conditions concerned 
appear head affected rule 
rules apply parameters explicit variables 
example consider flock example includes negated subgoal repeat answer exhibits treatments diagnoses causes nontrivial subsets subgoals safe 
satisfy condition subgoals include head variable condition rules possible subquery answer causes notice query sense trying count number patients information go says disease cause symptom ss 
assure condition says pick subgoal causes variable parameter appear subgoal pick positive subgoal positive subgoal 
pick causes pick diagnoses exhibits positive subgoals respectively 
condition rules subquery causes body rules subqueries subgoal bi diagnoses 
remaining subqueries candidates optimization subquery eliminate values pairs evaluate entire query flock 
considering optimization problem general consider candidates 
interpretation recall filter condition original query flock patients receiving medicine exhibiting unexplained symptom 
answer exhibits 
patients exhibit symptom 

answer treatments 
patients medicine 

answer diagnoses exhibits 
causes patients disease cause symptom exhibit 
answer exhibits treatments pi patients medicine exhibiting symptom 
pick strategy knowing sizes relations numbers patients diseases intuitive observations 
preliminary filter values 
options sense depends statistics situation 
example attractive exhibits tuples rare symptoms 
subquery entire query attractive number different administered disease small symptom qualifies associated single medicine meet threshold patients 
may useful subqueries 
subquery eliminate rare symptoms consideration eliminate rarely 
worth basing preliminary step depends density rare symptoms 
example threshold patients symptom reports symptoms appeared patients get significant advantage eliminated relation exhibits tuples rare symptoms 
conversely symptom reports symptoms appearing support threshold patients subquery worth extra effort 
subquery involves useful preliminary step 
easier relations exhibits treatments join relations appear full query 
lots pairs appear patients eliminated consideration join symptoms causes determine frequently occurring symptom medicine pairs explained fact medicine treat disease causes symptom 
extension unions datalog queries suppose query flock consists union datalog queries type considering 
construct query provides upper bound result union take union queries provide upper bound query individually 
look subquery query union 
query safe sense described section 
size result union subqueries bound size result original query 
may union subqueries eliminate values parameter parameters possibly appear result query hock 
optimization principle unions conjunctive queries optimize query flock described union conjunctive queries 
qn filter puts lower bound support consider evaluating unions safe subqueries pi 
pi formed deleting subgoals qi exploit union queries eliminating values parameters meet support threshold subquery evaluated 
example consider union example suppose want find subquery involves word 
safety condition essentially choice queries union subqueries answer answer answer link dl word candidate matter get sum filter set parameters 
query involving parameters 
relation tuples values parameters 
condition result query mean create relation consist tuple assignment values parameters parameter values result query meets condition query plan sequence filter steps 
step subgoals relations hold data problem relations parameters created previous steps 
ss filter answer exhibits count answer sm filter answer treatments count answer ok ss sm filter answer 
number times appears title 
number times appears anchor diagnoses 
number anchors point titles appears 
exhibits treatments causes count answer search optimal query flock evaluators query plan medical mining problem limited search evaluation strategies selection subqueries restrict values parameters 
section introduce formal notation subqueries represent query plans 
filter steps expression example continue example 
suppose estimate expected sizes relations joins conclude best strategy finding side effects filter symptoms subquery patients exhibit symptom filter subquery patients medicine filter symptoms subquery filter symptom medicine pairs subquery 
query plan consists steps shown fig 
create unary relation consisting symptoms appear patients 
create unary relation ok consisting patients 
evaluate entire query original subgoals plus additional subgoals ok relations 
step fig 
define relation 
set parameters 
query filter step subquery suggested example useful filtering rarely occurring symptoms 
filter condition step steps condition result query contain patients 
second step similar creates set ok patients 
third step repeats original query example additional subgoals ok 
ask things harder 
addition filter steps take time finish query plan step original query flock plus extra subgoals 
third step easier harder answer original query 
intuitive reason subgoals ok joined subgoals exhibits treatments sm particular relatively quickly 
results joins smaller relations making subsequent join steps take time original query flock 
legal query plans argue intuitively query plan expressed example meets basic requirement result sequence filter steps equivalent original query flock expressed single filter step ok ss sm filter answer diagnoses exhibits treatments causes count answer ask conditions plan fig 
improvement original join order final step 
give definitive answer questions estimates sizes join results matter studied extensively general theory cost optimization applies 
fundamental question settled circumstances query plan equivalent query flock 
propose natural consequence ideas far 
treat filters involve support filter condition lower bound size query result 
handling filters remains open 
possibly general rules proposed support believe space options implied rule omit best option pathological cases 
rule generating query plans conjunctive query flocks support type filter conditions consider sequences filter steps meet conditions 
step uses filter condition original query flock 

step defines uniquely named relation 

step derived query flock steps start original query flock 
add zero subgoals copies left side assignment previous filter step 
delete zero subgoals optimization principle conjunctive queries sure resulting query safe 

final step delete subgoals original query may additional subgoals derived previous steps course 
example fig 
steps filter condition original query flock 
steps add additional subgoals query delete original subgoals 
result safe query case 
step retains subgoals original query flock adds left sides steps 
notice left sides copied literally relation name predicate parameters arguments 
exponential search query plans ample precedent making exponential searches find best query plan instance 
queries tend small exponential searches computationally feasible 
space query plans entailed rule section bounded exponential size query defining original query flock 
number safe subsets subgoals original query exponential option adding subgoals left sides prior queries 
time add step query plan double number options step 
reason believe long sequence steps uses result previous step candidate best possible 
example illustrates point 
example suppose query flock underlying relation arc represents arcs directed graph 
query appears fig 

intuitively query flock asks node successors path length extending 
query answer arc arc yl arc yl 
arc fil er count answer query flock step query plan subgoal restrict nodes successors regardless paths extend 
second step examine nodes past test subgoals original query restrict nodes successors successors 
proceed fashion winding step query plan step useful simplification query 
pattern query plan suggested fig 

reasonable ways restrict search query plan exponential number possibilities 
said generalize priori technique 
select sets parameters 
selected set select subset subgoals original query safe includes exactly parameters subquery define relation rs restricts parameters step original query subgoals formed relations rs selected set parameters approach generalizes priori case item sets followed query plan fig 
instance 

select list subsets subgoals original query form safe queries 
turn subquery filter step adding subgoals formed result prior step ok filter answer arc count answer filter answer arc arc yl count answer filter answer ok arc arc yl 
arc yn count answer query plan steps restricts parameters appear approach yield priori method sets items 
case compute candidate sets ic items restricting itemsets subset ic items previously met support test dynamic selection filter steps strategies limiting search exponential number possible query plans unremarkable strategy analog conventional query optimization 
deciding subqueries advance sizes intermediate relations compute determine apply filter step 
intuitively size intermediate relation average number tuples assignment values parameters significantly lower previous step computed relation set parameters chance value assignments parameters eliminated step eliminated previously 
important special case set parameters relation previously encountered 
case includes expressions consisting single subgoal relations query flock provided subgoal parameters arguments 
special case previous filtering ask number tuples value assignment parameters low high compared support threshold 
priori symmetry represent items making process simpler general case 
low expect lot value assignments eliminated useful filter 
high value assignments eliminated elimination reduce size underlying relation significantly filter point 
example consider query flock example searches unexplained side effects 
start choosing join order subgoals 
number models approaches selecting join order may idea independent join order chosen shall suppose argument ordering fig 
chosen 
exhibits causes diagnoses treatments join order medical mining example start leaves tree fig 

leaf exhibits option apply filter step equivalent computation relation fig 

depends number patients mentioned exhibits compares number symptoms mentioned 
assuming ratio somewhat usual assumed threshold support shall elect perform filtering step 
note eliminate rare symptoms normally want ratio significantly order step say reduce size relation half 
actual distribution sizes groups symptom affects expected reduction relation size may want substantial gathering statistics support filter don filter decision 
consider leaf treatments 
assuming patients medicine may decide filtering time unproductive 
filter leaf diagnoses parameters 
filter leaf causes query just subgoal safe 
consider lowest interior node tree fig 

represents join exhibits treatments involves parameters 
seen lower node involving parameters special case decide number pairs eliminated worth cost filtering 
divide size intermediate relation computed node product number symptoms compare number 
suppose ratio low decide filtering idea 
ss filter answer exhibits count answer temp join exhibits join treatments temp ss sm filter answer temp count answer temp temp join temp sm join diagnoses join causes sideeffect filter answer temp count answer possible query plan resulting dynamic evaluation move node diagnoses joined 
assuming patients exhibits treatments appear diagnoses result second join smaller advantage filter step 
decision join 
final step join causes completes query 
filter root simply filtering necessary find answer query flock 
resulting query plan looks little different pure filter programs discussed previously joins performed explicitly 
plan appears fig 

notation called query flocks describing large scale data mining operations 
flock consists parametrized query filter selects certain assignments values parameters applying condition result query value assignment 
explored case query described union conjunctive queries optional arithmetic negation filter lower bound number tuples returned query 
generalized known priori technique market basket analysis apply query flock class 
concept query safety described possible subqueries exploit priori idea suggested techniques limiting search query plans 
techniques static heuristics enumerate class plans estimate cost available size estimates relations dynamic see size intermediate results deciding apply filtering step 
monotone filter conditions techniques described directly monotone filter condition 
monotone mean condition true set true superset original set 
examples include certain count min max sum case non negative numbers conditions 
simple example extend traditional market basket problem flock appeared fig 
weighted market basket baskets weights associated relation import ante example conventional mining importance basket total value items purchased test mining baskets documents items words importance document number web hits gets 
event modify original market basket flock evaluate answer summing weights baskets returned answer fig 

query filter answer baskets baskets importance sum answer weighted market basket example monotone flock ai iv abiteboul hull vianu foundations ais cm hs man zo databases addison wesley reading mass 
agrawal imielinski swami mining association rules sets items large databases proc 
acm sigmod conf pp 

agrawal srikant fast algorithms mining association rules proc 
th vldb conf 
chandra 
merlin optimal implementation conjunctive queries relational databases proc 
ninth annual acm symposium theory computing pp 

griffiths selinger selection relational database management system acm sigmod international conf 
management data pp 

gupta harinarayan quass generalized projections powerful approach aggregation proc 
st vldb conf 
swami set oriented mining association rules proc 

conf 
data engineering pp 

klug equivalence relational algebra relational calculus query languages having aggregate functions acm pp 

levy sagiv queries independent update proc 
international conference large data bases pp 

mannila methods problems data mining proc 
intl 
conf 
database theory pp 
springer verlag 
ullman principles database knowledge base systems volume fundamental concepts computer science press new york 
ullman principles database knowledge base systems volume ii new technologies computer science press new york 
ullman widom course database systems addison wesley reading mass 
zhang ozsoyoglu 
efficient reasoning implication constraints proc 
third dood conf pp 


