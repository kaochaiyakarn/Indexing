lazy functional state threads john launchbury simon peyton jones university glasgow email simonpj jl dcs glasgow 
ac 
uk 
phone algorithms critical internal updatable state external specification purely functional 
earlier monads way securely encapsulating stateful computations manipulate multiple named mutable objects context non strict purely functional language 
security encapsulation assured type system parametricity 
parametricity requires provision single constant rank polymorphic type 
purely functional programming languages allow algorithms expressed concisely algorithms place updatable state play crucial role 
algorithms purely functional languages lack updatable state appear inherently inefficient ponder ng 
take example algorithms incrementally modified hash tables lookups interleaved insertion new items 
similarly union find algorithm relies efficiency set representations simplified time structure examined 
likewise graph algorithms require dynamically changing structure sharing explicit changes visible non locally 
furthermore absolutely unavoidable state functional program input output 
plain fact matter pur permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
sigplan orlando florida usa acm pose running program functional side effect world place please 
programs effects complex involving interleaved reads writes world state 
term stateful describe computations algorithms programmer really want manipulate updatable state 
lacking clean way describing algorithms functional language especially nonstrict throwing away main virtues functional languages independence order evaluation church rosser property referential transparency non strict semantics 
describe way express stateful algorithms non strict purely functional languages 
approach development earlier monadic state encapsulation launchbury peyton jones wadler important technical innovation parametric polymorphism achieve safe encapsulation state 
turns allows mutable objects named losing safety allows input output smoothly integrated state 
important feature describes complete system implemented glasgow haskell compiler freely available 
system properties complete referential transparency maintained 
clear statement means stateful computation said referentially transparent 
precise stateful computation state transformer function initial state final state 
script detailing actions performed input state 
function quite possible apply single stateful computation input state 
state transformer pure function 
guarantee state single threaded way final state constructed modifying input state place 
efficient implementation respects semantics state transformer function usual techniques reasoning functional programs continue 
similarly stateful programs exposed full range program transformations applied compiler special cases side conditions 
programmer complete control place updates 
example complex analysis determine array single threaded way 
viability entire program may predicated place updates programmer confident able reason outcome 
mutable objects named 
ability sounds innocuous object named controlled readily 
naming important 
example gives ability manipulate multiple mutable objects simultaneously 
input output takes place specialised form stateful computation 
type computations instance polymorphic type stateful computations 
comes ability call imperative procedures written languages 
overview section introduces key ideas approach stateful computation 
programmer eye view 
state transformers value type st computation transforms state indexed type delivers value type think box result state state notice purely functional account state 
st stands state transformer take synonymous stateful computation computation seen transforming state 
course intention new state constructed modifying old place matter return section 
state transformer class value passed function returned result stored data structure duplicated freely 
state transformer inputs state functional type 
results returning tuple 
example state transformer inputs type int results type int boo type possible encapsulate stateful computations appear rest program pure stateless functions guaranteed type system interactions computations stateful values arguments results course 
int int st int bool picture look inputs results complete safety maintained encapsulation 
program may contain arbitrary number stateful sub computations simultaneously active concern mutable object mutated 
state state simplest state transformer returnst simply delivers value affecting state returnst st stateful computations performed lazily losing safety 
example suppose stateful depth search graph returns list vertices depth order 
consumer list evaluates list stateful computation executed produce elements 
picture returnst state state state 
part state finite mapping values 
state may components see section 
thought name address variable updatable location state capable holding value 
primitive operations provided newvar st mutvar readvar mutvar st writevar mutvar st function newvar takes initial value type say delivers state transformer type st mutvar applied state allocates fresh currently state 
augments state mapping supplied value returns modified state 
type mutvar type allocated store type containing value type notice sml ref types example parameterised type state type value mapped state 
name mutvar type ref specifically avoid confusion sml 
readvar state transformer leaves state unchanged uses state map value 
function writevar transforms state maps new value 
notice change state modified 
writevar delivers result unit type type value apart bottom written 
state transformer type st useful effect state 

refer state transformer thread invoking picture series primitive stateful operations threaded state passed 
putting far procedure swaps contents variables swap mutvar mutvar st swap readvar thenst readvar thenst writevar thenst writevar syntax needs little explanation 
form haskell syntax lambda abstraction 
body lambda abstraction extends far right possible 
code swap second argument thenst extends way function 
just expect second argument thenst meant function 
second line wild card pattern matches value 
writevar return value interest 
parentheses omitted infix operations bind tightly lambda abstraction operator 
furthermore provide special form thenst called thenst type signature thenst thenst second argument function lambda isn required 
swap follows swap mutvar mutvar st swap readvar thenst readvar thenst writevar thenst writevar composing state transformers state transformers composed sequence form larger state transformer thenst type thenst st sb picture thenst thisl notice computations manipulate state indexed type notice thenst inherently sequential state consumed second computation produced haskell notation infix operator 
swap executed state thread state dereferenced returning value bound similarly value bound new values written state locations values respectively 
addition thenst returnst useful introduce plumbing combina statet lm ml tor type usual knot tying semantics depict ema point relies laziness 
directly applicable strict languages 
encapsulation far able combine state transformers larger state transformers state transformer part larger program manipulate state 
need function runst type runst idea runst takes state transformer argument initial empty state applies state transformer returns result discarding final state 
initial state empty sense allocated newvar empty mapping 
terrible flaw prevent thread 
example runst newvar true runst readvar allocated runst thread inside second runst 
doing great mistake reads thread sequenced respect writes result program depend evaluation order execute 
runtime check required ensure dereferenced thread allocated 
unfortunately expensive 
worse experience suggests surprisingly tricky implement check obvious ideas fail possible test identity thread losing referential transparency know straightforward way 
problem brings main technical contribution difficulties runst solved giving specific type 
type runst implicitly universally quantified put quantification explicitly type written runst vs 
st really want say runst applied state transformer uses newvar create thread 
put way argument runst assumptions allocated initial state 
runst regardless state zt 
type runst 
st hindley milner type quantifiers top level example rank polymorphism mccracken 
type prevent capture thread 
consider example runst newvar true runst readvar line stateful thread readvar supposedly encapsulated runst 
type checker comes 
typechecking type readvar depend type example type derivation contain judgement form 
mutvar bool readvar st bool order apply runst able generalise type readvar respect free type environment readvar simply type vs st bool 
way round 
check type runst prevents escape thread 
consider definition runst newvar true allocated thread released outside world 
consider happens typechecking 
expression newvar true type st mutvar bool generalise nicely vs st mutvar bool 
match type runst 
see consider instance runst instantiated mutvar bool runst ds st mutvar bool mutvar bool rename bound variable type runst avoid erroneously capturing type mutvar bool 
argument type doesn match type 
instance runst applied just demonstrate type runst allow nice examples fine mutvar mutvar runst newvar thenst readvar arbitrary state thread 
accessed state type affect local state type short thread fact totally polymorphic 
fine encapsulated state thread manipulate threads long attempt dereference 
short expedient giving runst rank polymorphic type enforce safe encapsulation state transformers 
details section show runst type accommodated minor enhancement type checker 
array far introduced idea section thought single mutable box 
want update array thought boxes independently mutable 
provide primitives allocate read write elements arrays 
ix elt st elt ix elt st elt ix elt elt st ix elt st array elt allocates anew array bounds argument 
second argument value location initialised 
state transformer returns array call array 
functions writ names suggest 
result undefined index bounds 
interesting function turns standard haskell array 
immutable value certainly returned stateful thread lacks parameterisation state operationally speaking takes name array argument looks state returns copy finds unaltered state 
copy required case subsequent changes value array state possible avoid overhead making copy see section 
ix part type just haskell way saying type index type mapping value type offset linear array 
integers characters tuples automatically ix class array indexing restricted 
type mapping int provided instance declaration class ix type 
haskell arrays mutable arrays shall define haskell primitive accumarray high level array operation type accumarray ix array result call accumarray bnds ivs array size determined bnds values defined separating values list ivs index performing left fold operation collection starting value typical uses accumarray histogram example hist ix array int hist bnds accumarray bnds li inrange bnds ii counts occurrences element list falls range bounds bnds 
example bin sort ix array bnds key vs flip bnds key vsi value vs placed bins key value defined function key results assumed lie range specified bounds bnds 
bin element array contain list values key value 
lists start empty new elements added version cons order arguments reversed 
examples array built single pass input list 
implementation accumarray follows 
accumarray bnds ivs runst bnds thenst fill ivs thenst fill returnst fill ivs thenst thenst fill ivs evaluating call accumarray new state thread generated 
thread array allocated element initialised array named passed fill procedure accumulator function list index value pairs 
list exhausted fill simply returns 
element list pair technically assoc 
array accessed location value obtained bound new value written array location fill called recursively rest list 
fill finished array frozen immutable haskell array returned thread 
mutable array operations enabled describe complex array primitive terms simpler operations 
compiler writer job easier allows programmers define variants say cases accumarray match application precisely 
example interesting encapsulated state 
internal details accumarray imperative external purely functional 
presence state detected outside definition accumarray combining state transformers state transformers class values power functional language define new combining forms 
useful example sequencing list procedures st st foldr thenst returnst example rewritten accumarray bnds ivs runst bnds thenst map update ivs thenst update thenst local function update takes index value pair evaluates state transformer updates array referenced mapping function list index value pairs ivs produces list stat transformers sequenced 
input output state transformer framework place give new account input output 
performing computation type st realworld state transformer transforming state type realworld delivering value type thing special type state transforms type values represent real world 
convenient type synonym express specialisation type io st realworld io instance st follows state transformer primitives concerning arrays equally mixed operations 
plumbing combinators thenst returnst state transformers 
addition provide variety operations io instance state polymorphic state put char char io getchar io char easy build sophisticated operations top 
example char io put string returnst put string cs putchar thenst equivalent ly cs map putchar cs way caller tell primitive programmed 
putchar getchar primitive 
primitive operation called ccall allows haskell programmer call procedure 
example putchar defined put char char io put char ccall putchar thenst returnst state transformer put char transforms real world calling function put char passing character value returned call ignored indicated wild card 
similarly get char implemented getchar io char getchar ccall getchar ccall implemented new language construct ordinary function want regardless number type arguments 
restrictions placed arguments result types understands int float double bool array 
automatic conversion complex structured types lists trees 
argument ccall name function called appear literally 
really part construct 
cs running io io type particular instance state transformers particular operations polymorphic state 
immediate consequence io ons encapsulated runst 

type 
demands state transformer argument universally quantified state exactly io 
fortunately exactly want 
io operations encapsulated possible write apparently pure functions behaviour depended external factors contents file user input shared variable language longer exhibit referential transparency 
leave problem io operations executed 
answer provide top level identifier io define meaning program terms 
program executed mai nio applied true external world state meaning program final world state returned program including course incremental changes en route 
means possible give full definition haskell standard input output behaviour involving lists requests responses 
glasgow implementation haskell system written entirely haskell ccall invoke unix primitives directly 
techniques ed write libraries routines calling type rules having programmer eye view time formal simply necessary typing judgments achieve goal 
full version denotational semantics outlined proof safety encapsulation launchbury peyton jones 
state transformers context full sized programming language haskell implemented ideas 
convenient restrict essentials 
language focus lambda calculus extended state transformer operations 
syntax language types el el ez runst ccall el em 
thenst returnst newvar readvar writevar wri type rules usual hindley milner rules 
interesting addition typing judgement runst 
treating language construct avoids need go hindley milner types 
give runst type runst va 
st suggested ensure typing judgment effect 
consistent rank type previous intuition applies 
usual talk types type schemes types possibly universal quantifiers outside 
types type schemes type constants int bool 
addition range subset correspond types described section 
ltl vt mutvar note type constructor arguments 
missing index type 
purposes semantics shall assume arrays indexed naturals starting type rules 
ranges type environments partial functions types write fv free variables type likewise type environments 
implementation point expressing stateful computations framework described operations modify state update state zn place 
implementation crucial enterprise peripheral issue 
mind implementation framework state encapsulated state thread represented collection objects storage 
represented address object heap allocated store 
read operation returns current contents object 
write operation overwrites contents specified object case mutable arrays part contents app lam var el tl tl el ax el ste letz sbx thread little different state includes actual state real world 
operations carried directly real world updating place 
previous section outlined correctness implement ation relies totally type system 
reliance quite familiar example implementation addition attempt check arguments integers type system ensures 
way implementation state transformers attempt ensure example state thread created type system ensures 
spec fe qt update place gen ccall run te fv el en cn ccall 
en rt runst type rules critical correctness issue concerns update place behaviour write operations 
update place safe 
safe combinators thenst returnst state single threaded manner schmidt incoming state exactly duplicates 
furthermore primitive operations state strict 
write operation modify state place copy incoming state strict incoming state unevaluated read operations pending state 
programmer duplicate state 
st type opaque way programmer manipulate state combinators thenst returnst hand programmer certainly access named state 
perfectly ok duplicated stored data structures 
variables state refer altered write operation 
find arguments convincing cert formal 
formal proof necessarily involve operational semantics proof evaluation order change behaviour program 
undertaken proof 
efficiency considerations possible implement state transformers providing combinators thenst returnst primitive operations readvar writevar library functions 
impose heavy overhead operation worse composition 
example thenst entail construction function valued arguments followed procedure call thenst 
compares poorly simple juxtaposition code sequential composition implemented conventional languages 
better way treat state transformer operations specially code generator 
risks complicating complex part compiler 
implement state transformers way direct efficient simply give haskell definitions combinators 
type st state state returnst runst current state provide st built type opaque compiler give representation explicit haskell type definition 
representation st course exposed programmer lest write functions duplicate discard state 
easy give haskell definitions combinators 
implementation runst intriguing 
argument works regardless state passed simply pass value representing current state heap 
see shortly section value looked constant value 
code generator course remain responsible producing appropriate code primitive operation readvar ccall 
implementation provide haskell wrapper primitive explicit evaluation arguments called unboxed values 
motivation implementation approach unboxed values detailed peyton jones launchbury 
transformation beauty approach combina tors inlined call sites largely removing plumbing costs 
example ex pression ml thenst vl thenst returnst inlining thenst returnst vi sl ml si furthermore resulting code exposed full range analyses program transformations implemented compiler example compiler spot code context strict component result tuple transformed case ml vi case version heap allocated thunks created ml case version avoids cost 
sorts optimisations performed st type combinators opaque compiler 
passing state implementation st type passes explicit state 
said earlier operations implemented performing side effects common global heap 
role explicit state values passed code 
plays important roles 
firstly compiler shakes code quite considerably possible changing order primitive operations performed 

input state primitive operation produced preceding operation ordering maintained simple data dependencies explicit state certainly preserved correct program transformation 
secondly explicit state allows express compiler strictness primitive operations ir 
state 
state type defined state state state represented single constructor algebraic data type contents value type state 
primitive type states 
lifting implied constructor corresponds exactly lifting semantics 
definition state define newvar example newvar init case newvar init definition absolutely explicit evaluation strictness newvar state argument calling truly primitive newvar perform allocation 
think primitive state value type stat type token stands state heap case thread real world 
implementation inspects primitive state value faithfully passed returned primitive state transformer operation time program reaches code generator role state values code generator arranges generate code move values type state assuming underlying ram architecture course 
arrays implementation arrays straightforward 
complication lies takes mutable array returns frozen immutable copy 
want construct array incrementally freeze performing mutation mutable array 
case waste copy entire array discard mutable version immediately 
right solution job compiler spot special case 
moment provide highly dangerous operation type works copying mutable array 
hack expect critical pieces standard library couldn steam job properly just handle occasions 
provide general access efficient state transformer little special observation final state thread certainly demanded 

point running program place cause side effect real world 
exploit property gain little extra efficiency 
final state thread demanded intermediate thread 
safely strict efficient version thenst io io case krs case appears thenst avoid construction heap allocated thunk useful combinators useful expand range combinators primitives minimal set far section presents ones useful 
equality correspond closely pointers variables 
useful additional operation determine aliases variable writes affect reads 
turns quite straightforward add additional constant mutvar mutvar bool ix bool notice result depend state simply boolean 
notice provide test exist state thread 
different state threads aliases 
interleaved parallel operations state transformer composition combinator defined far thenst strictly sequential state passed state transformer second 
wanted 
consider example operation reading file 
may want specify precise relative ordering individual character reads file operations 
may want file read lazily contents demanded 
provide ability new combinator int interleaves state transformer far duplicates state 
plumbing diagram interleaves result state state precisely splits state parts disjoint 
lazy file read example state file passed branch rest state world passed 
states disjoint arbitrary interleaving operations branch fork legitimate 
concrete implementation lazy file read readfile string io char readfile filename openfile filename thenst id char interleaves thenst returnst thenst cs returnst cs parallel version concurrent task perform forked thread useful building responsive graphical user interfaces 
idea forkio anew widget capable independent part screen 
unsatisfactory feature see absolutely way guarantee side effects performed branches fork independent 
left proof programmer location proof obligations explicit 
fear may absolutely secure system expressive describe programs real programmers want write 
related languages functional stable provide kind state 
forexample standard ml provides types updated paulson 
resulting system shortcomings 
meaning programs depends complete specification order evaluation program 
sml strict acceptable price pay unworkable non strict language exact order evaluation hard worse referential transparency lost 
arbitrary function may rely state accesses result need depend purely values arguments 
additional implications polymorphism leading weakened form order maintain type safety tofte 
problems dataflow language id provides structures structures mutable datatypes nikhil 
stateful program referential transparency lost structures result independent evaluation order provided sub expressions eventually evaluated case side effect structure 
structures result program depend evaluation order 
compared structures structures approach permits lazy evaluation values evaluated demand may evaluated required supports stronger notion encapsulation 
big advantage structures structures better suited parallel programming method 
clean language takes different approach barendsen smetsers 
clean type system supports form linear types called unique types 
value type unique safely updated place type system ensures updating operation sole value contrast interesting 
separate state refer permit explicit manipulation state 
clean identifies consequence requires state manipulated explicitly 
allow duplicated stored data structures clean 
clean requires new type system explained programmer system 
hand separation state tiresome 
example systems express idea mutable list clean neatly explicit de referencing tradeoff implicit explicit state purely functional languages far clear 
significant similarities gifford lucassen effect system uses types record side effects performed program gifford lucassen effects system designed delimit effect side effects may occur result evaluation 
semantic setting relies predictable order evaluation 
strong similarities odersky rabin hudak odersky rabin hudak influenced imperative lambda calculus ilc swarup reddy ireland 
ilc imposed rigid stratification applicative state reading imperative operations 
type runst stratification unnecessary state operations encapsulated appear purely functional 
true ar achieved run time checking direct consequence precludes style lazy state 
earlier papers describe approach issues monads context nonstrict purely functional languages 
peyton jones wadler focusses mainly input output second launchbury deals stateful computation program 
ap taken papers major shortcomings state input output existed separate frameworks 
general approach handle example different combinators required compose stateful computations required performing computation 
state safely handled anonymous 
consequently difficult write programs manipulate piece state 
programs brittle apparently innocuous change adding extra updatable array difficult impossible 
separate state threads required expensive checks keep apart 
possibility created stateful thread asynchronously destroy church rosser property 
idea adding extra type variable state threads arose discussion john hughes briefly copenhagen workshop state programming languages time suggested existential quantification type runst 
addition ideas benefited discussions functional programming group glasgow 
barendsen smetsers dee conventional uniqueness typing graph rewrite proc th conference foundations software technology theoretical computer science springer lncs 
dk gifford jm lucassen aug integrating functional imperative programming acm conference lisp functional programming mit acm 
launchbury june lazy imperative programming proc acm sigplan workshop state programming languages copenhagen available yaleu dcs rr yale university pp 
launchbury sl peyton jones feb lazy functional state threads technical report fp department computing science universit glasgow ftp ftp 
dcs glasgow 
ac uk pub glasgow tech reports fp state 
ps 

nj mccracken june typechecking programs implicit type structure semantics data types springer verlag lncs 
jc mitchell ar meyer second order logical relations logics programs parikh cd springer verlag lncs 
nikhil march id manual lab computer sci mit 
odersky rabin hudak jan call name assignment lambda calculus th acm symposium principles programming languages charleston acm 
lc paulson ml working programmer cambridge university press 
sl peyton jones launchbury sept unboxed values class citizens functional programming languages computer architecture boston hughes ed lncs springer verlag 
sl peyton jones pl wadler jan imperative functional programming th acm symposium principles programming languages charleston acm 
cg ponder pc ng june applicative languages inefficient notices 
da schmidt apr detecting global variables denotational specifications toplas 
swarup reddy ireland sept assignments applicative languages functional programming languages computer architecture boston hughes ed lncs springer verlag 
tofte nov type inference polymorphic information computation 

