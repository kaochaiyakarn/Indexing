fully decentralized resource discovery grid environments adriana iamnitchi ian foster department computer science university chicago th street chicago il usa cs uchicago edu mathematics computer science division argonne national laboratory argonne il usa 
computational grids provide mechanisms sharing accessing large heterogeneous collections remote resources computers online instruments storage space data applications 
resources identified set desired attributes 
resource attributes various degrees dynamism static attributes operating system version highly dynamic ones network bandwidth cpu load 
propose peer peer architecture resource discovery large dynamic collection resources 
evaluate set request forwarding algorithms fully decentralized architecture designed accommodate heterogeneity sharing policies resource types dynamism 
build testbed models usage characteristics resource distribution peers varies number frequency shared resources various requests patterns resources 
analyzed resource discovery mechanisms peers peer provides information resource 
learned decentralized approach desirable administrative reasons supported promising performance results 
results allow characterize correlation resource discovery performance sharing characteristics 
opportunistic sharing internet connected computers low cost method achieving computational power 
trend supported research domain computational grids collections shared geographically distributed hardware software resources available groups remote users 
computational grids resources computers storage space sensors telescopes software applications data connected internet middleware software layer provides basic services security monitoring accessing information components resources owned various administrative organizations shared locally defined policies specify shared allowed share conditions 
set individuals institutions defined sharing rules called virtual organization vo 
basic service grids resource discovery description resources desired resource discovery mechanism returns set contact addresses resources match description 
resource discovery grid challenging potentially large number resources users millions considerable heterogeneity resource types user requests 
resource discovery complicated natural tendency vos evolve time example institutions joining leaving resources users number resources shared institution varying resource characteristics availability cpu load changing 
characteristics create significant difficulties traditional centralized hierarchical resource discovery services 
investigate flat fully decentralized architecture developing candidate architecture design studying characteristics design detailed simulation studies 
architecture distinguished peer peer flavor entities participate resource discovery equally important system correct efficient functioning 
common characteristics grid environments current peer peer systems dynamism wide area scale heterogeneity significant 
decentralized file sharing systems gnutella freenet extensively analyzed results little relevance important differences problem :10.1.1.10.4919
anonymity major objective file sharing systems gnutella freenet consequently design decisions achieve 
environment anonymity unnecessary may undesirable example accountability performance tuning replication decisions 

dynamics gnutella network different dynamics virtual organization 

resource sharing grid different policies community contributions payment hopefully avoid phenomena gnutella free riding behavior 

user request patterns may different 
gnutella user request file times grids quite usual user kind resource multiple times 

file sharing systems answer perfectly match request 
case resource discovery matches may approximate mhz processor acceptable asking mhz processor 

properties refer resources may mutable 
performance analysis large scale gnutella network estimating performance similar solution problem 
objective framework architecture evaluation preliminary set performance results 
results show flat decentralized self configuring architecture promising solution dealing large variable heterogeneous collections resources 
results significant put effort improving performance 
rest follows 
discuss related section 
section presents design decisions 
describe section emulated grid built testbed evaluating various design alternatives measurements section 
conclude section lessons learned research plans 
locating resources wide area systems classes related relevant study resource discovery dynamic self organizing networks resource discovery wide area systems 
category benefited huge attention due popularity peer peer file sharing systems 
systems identify resources files names variety strategies locate specified named file including aggressive flooding gnutella combination informed request forwarding automatic file replication freenet intelligent positioning data search optimized reliable flexible structures efficient scalable retrieval chord tapestry 
successful wide area service locating resources names dns 
hierarchical organization caching strategies take advantage static information managed 
mentioned systems names search criteria 
context requests specify sets desired attributes values example name version operating system cpu load 
perspective web search engines resource discovery mechanisms similar need grids set criteria search keys return addresses relevant resources web pages 
web search engines deal dynamic information 
unique names global identifiers appealing idea position information global ids search optimized structures search trees scalably reliably plaxton networks faster search 
globe system assigns location independent names resources means retrieving mobile resources mobile services wide area systems 
imagine defining mapping attribute value pairs names assigning distinct name meaningful combination attribute value pairs maintaining mapping names physical resources attributes volatility attribute values utility mapping uncertain 
name search systems matching resource descriptions requests benefit certain degree approximation example computer cpu load appropriate matching request computer cpu load 
aware potential existence clever methods organizing grid resource information search efficient structures believe search feasible resource discovery grids 
distributed resource sharing systems global names resource discovery condor matchmaker resource descriptions requests sent central authority performs matching 
centralized architecture efficient local area network condor initially designed assumes willingness organization operate central server 
relevant experience provided globus mds initially centralized service moved decentralized structure pool resources users grew 
mds grid assumed consist multiple information sources register index servers registration protocol 
index servers users enquiry protocol query directory servers discover entities obtain detailed descriptions resources information sources 
left unspecified techniques associate entities directories construct efficient scalable network directory servers 
research complementary mds proposing evaluating mechanisms organize directories equivalent call nodes peers flat dynamic networks 
resource discovery problem restated peer peer approach grid collection resources shared different organizations individuals 
organizations strictly specified sharing policies time intervals resources available non internal users types projects resources may contribute 
attempting enforce uniform rules grid drastically limit participation 
pool resources shared organization may vary time subject local computing load sharing policies 
natural solution allow organization control access information local shared resources 
assume participant vo organization individual servers store provide access local resource information 
call servers nodes peers 
node may provide information resource multiple resources resources shared organization 
perspective resource discovery grid collection geographically distributed nodes may join leave time notice example result system communication failures 
assume sets resources published nodes disjoint may multiple resources identical descriptions example multiple copies data identical machines 
observations assumptions direct consequences problem characteristics 
design decisions 
framework basic framework follows 
assume users send requests known typically local node 
node responds matching resource descriptions locally forwards requests node 
intermediate nodes forward request time live ttl expires matching resources whichever occurs 
node information matching forwarded request sends information directly node initiated forwarding intermediate nodes turn send user 
framework particular resource discovery algorithm defined mechanisms membership protocol provides node typically partial membership information nodes strategy determine nodes requests forwarded 
focus describing evaluating different request forwarding strategies described 
particularly concerned characteristics membership protocol note simply soft state membership protocol common peer topeer systems 
node joins grid contacting member node 
contact addresses member nodes learned band information 
node contacted joining members responds membership information 
membership lists updated periodic alive messages exchanged neighbors nodes know 
membership information enriched time receipt message previously unknown node node adds new address membership list 
request forwarding strategy decides node locally known ones request forwarded 
addition contact addresses nodes store information peers information requests previously answered 
tradeoff amount information neighbors search performance generates large set alternatives random forwarding information resources provided nodes hop forwarding nodes know exactly node requested resource 
information dynamic nodes cache information attribute values address es relevant information previously 
request forwarding nodes forward requests answer peer selected locally known nodes 
evaluated request forwarding algorithms frq 
random chooses randomly node request forwarded 
extra information stored nodes 
frq 
experience random nodes learn experience recording requests answered nodes 
request forwarded peer answered similar requests previously 
relevant experience exists request forwarded randomly chosen node 
frq 
best neighbor algorithm records number answers received peer recording type request answered 
request forwarded peer answered largest number requests 
frq 
experience best neighbor identical frq relevant experience exists request forwarded best neighbor 
section presents emulated grid serves testbed evaluation request forwarding algorithms different grids 
emulated grid resource discovery opted building emulated grid understand fully decentralized flat design approach resource discovery appropriate terms response time response quality scalability 
focus large scale simulations thousands nodes preferred build emulated grid general purpose usually unscalable discrete event simulator 
grid simulators designed framework sole purpose analyzing resource discovery strategies 
framework node implemented process communicates nodes tcp 
node maintains types information information number resources contribution vo information nodes system including restricted membership information 
amount resource information hosted nodes varies information large number resources resource 
preliminary experiments assume amount information nodes stored locally unlimited 
performance resource discovery mechanism depends usage environment characteristics scale resource distributions user request patterns 
evaluated request forwarding strategies number nodes 
studied architecture requests matching set distinct resources identical descriptions 
request similarity difficult quantify model 
simplified problem considering simple requests requests resource perfect matching 
setup realistic helps understand effects parameters consider 
shall extend experiments realistic scenarios analyzing requirements query language 
remaining section give details model resource distributions nodes user requests 
resource distributions analyzing resource distributions consider issues 
distribution resources nodes nodes share large number resources just 
modeled resource distributions different degrees fairness 
space limitations results measured environments unbalanced balanced resource distributions 
number resources log scale balanced fig 

geometric distribution resources nodes varies highly unbalanced nodes provide large number resources nodes provide fair nodes share number resources 
second aspect need model resource frequency need distinguish common resources ones numerous widely available rare unique resources 
assuming resources distinct types consider resources grid equally common frequency compare resource discovery performance grids different values simpler model permitting frequency vary individual resources tracking requests common rare resources 
user requests usage patterns decisive making design decisions tackle problem having real user request logs problem inherent systems design phase 
experimented request distributions random geometric requests chosen match existing resources 
experiments number distinct requests random distribution approximately twice large equally sized geometric distribution average request repeated twice geometric distribution random distribution 
experiments randomly chose set nodes sent independently generated sets requests 
sets requests sent nodes respectively repeated compare various algorithms 
starting topology connection graph defined membership information strongly influences resource discovery performance nodes known local node informed request forwarding decision 
described membership protocol previously detail starting topology graph vertices nodes grid edges connect pairs nodes know looks requests processed 
generated starting topology tiers network generator 
experiments consider nodes joined grid request generated 
assume failures 
connection graph changes time influenced design usage factors location requested resources graph request forwarding algorithm number diversity user requests starting topology important avoid unrealistically optimistic starting configurations star topology 
experimental results testbed evaluate performance algorithms grids different resource distributions 
interested understanding response time request success rate 
currently measure response time number hops traversed answering request 
experiments requests refer existing resources success rate due dropped requests dead ends exceeded ttl 
section evaluation request forwarding algorithms different sharing usage conditions 
consider environment common resources resources type measure average number hops request forwarding algorithms 
second compare results experiments environment common resources type 
sets results user requests generated follow geometric distribution 
understand influence user request pattern resource discovery performance compare performance requests follow geometric respectively random distribution environments different levels resource frequency 
randomness encapsulated testbed algorithms repeated experiments multiple times 
results shown section average values measurements obtained multiple runs 
note experience forwarding algorithms take advantage time space locality user requests 
assumption infinite storage space logs response time experience algorithms lower bound particular algorithms 
optimistic results partially counterbalanced measurements including system warm nodes learn nodes resources 
presents average number hops request various degrees sharing fairness average resources type system 
random forwarding algorithm labeled frq advantage additional storage space required nodes record history expected efficient 
intuition confirmed unbalanced resource distribution left case balanced distribution seen right 
distributions experience random algorithm labeled frq performs best expensive version frq proves equally efficient 
best neighbor algorithm frq expensive terms storage space records number requests answered node requests performs unbalanced distribution cases uniformly small number distinct resources node gives false hints locating resources 
influence reason frq performing poorer frq clearly seen balanced distribution 
average number hops nodes frq frq frq frq number nodes frq frq frq frq fig 

average number hops request function number nodes grid environments different resource distributions 
left unbalanced 
right balanced 
number resources considered 
resource frequency number resources type constant 
compares resource discovery performance grids different resource frequencies average respectively resources type 
grid common resources average number hops large order percentage answered requests time live 
observe environment performance decreases faster number nodes lower lines graph represent results measured environment common resources 
surprisingly forwarding algorithms perform comparatively independent resource frequency 
influence different user request patterns 
measured average number hops request best performing forwarding algorithm experience random environments different answered requests ttl number nodes frq frq frq frq frq frq frq frq number nodes frq frq frq frq frq frq frq frq fig 

percentage answered requests time live environments 
left unbalanced resource distribution 
right balanced resource distribution 
resource distribution considered different resource frequencies upper plots graph respectively 
resource frequencies 
influence user request patterns stronger environment common resources number hops request times larger requests follow random distribution compared environment common resources 
average number hops request number nodes random geom random geom fig 

influence different user requests patterns random geometric distributions resource discovery performance environments different resource frequencies respectively unbalanced resource distribution 
algorithm experience random frq 
argue resource discovery grid environments requires decentralized flat architecture 
inherent problems architectures tradeoffs communication costs performance 
better understand tradeoffs evaluate different strategies resource discovery built simple grid emulator modeled relevant parameters pattern user requests distribution resource information grid 
results obtained collections nodes host descriptions total resources 
results suggest decentralized resource discovery strategy may feasible solution request forwarded msec 
assuming msec 
latency metropolitan area network msec 
necessary request processing path hops takes half second 
interesting observe relation discovery performance environment characteristics experiments show best performing algorithm expensive terms storage space performs independent type resource distribution 
best neighbor algorithm performs unbalanced resource distribution 
expensive forwarding algorithm random performs satisfactorily cases best resources equally distributed nodes 
relative performance forwarding algorithms considered independent average resource frequency 
request forwarding algorithms evaluated attempt improve search performance past experience 
differentiates algorithms type information choose remember past 
algorithm remembers neighbor helped past guess nodes lot share share close 
environment nodes contribute equally algorithm tends perform worse random 
simple strategies evaluated promising leave room improvements 
limitation framework uneven spread information nodes contacted users learn 
obvious improvement keep nodes informed exchanging history information example membership information 
simple improvement attach history information request messages avoid visiting visited nodes 
results suffer limitations due computational expensive experiments 
accurate measurements require larger set ideally larger experiments larger number requests larger number runs experiment larger number nodes 
plan enrich understanding problem careful analytical evaluations 
interesting outcomes come 
includes directions development emulated grid include capabilities processing realistic requests simulating data dynamism design evaluation different membership protocols new strategies reliability evaluation 
final objective propose coherent suite resource discovery mechanisms expressive query language suited large heterogeneous community grid members 
acknowledgments grateful david generosity sharing computational resources 
research supported national science foundation contract itr 

adar huberman free riding gnutella 
monday 

clarke sandberg wiley hong freenet distributed anonymous information storage retrieval system 
workshop design issues anonymity unobservability 

czajkowski fitzgerald foster kesselman grid information services distributed resource sharing 
th ieee symposium high performance distributed computing 

doar better model generating test networks 
ieee global internet pp 


foster kesselman eds 
grid blueprint new computing infrastructure 
morgan kaufmann 

foster kesselman tuecke anatomy grid enabling scalable virtual organizations 
international journal supercomputing applications 

plaxton rajaraman richa accessing nearby copies replicated objects distributed environment 
acm symposium parallel algorithms architectures 

raman livny solomon matchmaking distributed resource management high throughput computing 
th ieee international symposium high performance distributed computing 

ratnasamy francis handley karp shenker scalable content addressable network 
acm sigcomm 

ripeanu peer peer architecture case study gnutella network 
international conference peer peer computing 

song liu bhagwan zhang chien scientific tool modeling computational grids 
supercomputing 

stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
acm sigcomm 

van steen tanenbaum globe area distributed system 
ieee concurrency 

zhao kubiatowicz joseph tapestry infrastructure fault resilient wide area location routing 
tech 
rep ucb csd berkeley 

gnutella protocol specification 
www clip com articles html 
