specification heterogeneous agent architectures maurizio martelli mascardi zini disi universit di genova genova italy 
disi unige martelli mascardi disi unige itc irst trento italy zini itc 
agent software applications need incorporate agents having heterogeneous architectures order agent optimally perform task 
hemasl simple meta language specify intelligent agents multi agent systems different heterogeneous agent architectures 
hemasl specifications agent model abstracts existing agent architectures 
describes features language presents examples outlines operational semantics 
executed providing working prototype free founded semantics formally verify properties programs fundamental safety critical applications developed 
far widespread technology concerned considerations industries programmers implementation languages visual basic java specification languages mainly non executable uml formal ones 
logic languages suitable formal verification system properties definitely user friendly 
harder simple user friendly prolog 
logic programming group computer science department genova university working development specification prototyping environment mass caselp complex application specification environment logic programming provides macro micro level development method agent applications tools languages support development steps :10.1.1.17.3856
methodology formal specification mas executable linear logic programming language provides constructs concurrency state updating 
successfully adopted specification language inter agent macro intra agent micro levels abstraction requires profound knowledge linear logic syntax semantics language definitely difficult adopt 
initial ideas design caselp create environment accommodate various specification implementation languages legacy software mas prototype built range techniques integrated common framework 
attempted bridge gap mentioned users habits tool rapid prototyping 
desire framework provide explicit support defining agent architectures terms state program engine successfully adopted develop library heterogeneous architectures ranging reactive proactive ones reflective bdi ones 
congolog specifies agent behaviour actions agent execute 
language adopted purpose situation calculus order language second order features representing dynamic domains 
congolog includes facilities prioritizing execution concurrent processes interrupting execution certain conditions true dealing exogenous actions 
features adoption language implementing reactive agents possible :10.1.1.33.961
hand ascription mental attitudes agents easily achieved adapting possible worlds model knowledge situation calculus 
communicative capabilities modelled framework 
congolog provides means describing declarative procedural knowledge agents different capabilities ranging reactivity rationality 
done program level 
