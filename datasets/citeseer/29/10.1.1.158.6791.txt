proceeding visual languages boulder colorado ieee computer society 
tactile programming unified manipulation paradigm supporting program comprehension composition sharing alexander repenning james department computer science center lifelong learning design university colorado boulder cs colorado edu cs colorado edu fax www cs colorado edu www cs colorado edu visual programming techniques lower threshold programming users sufficient creating user programming environments easy powerful 
achieve environment support definition programs just static representations behavior dynamic collections program objects applied number contexts just program editor 
describe approach user programming called tactile programming extends visual techniques unified program manipulation paradigm programs easy comprehend compose importantly share world wide web 
tactile programming inherent ability support social context programming takes place ability ease program comprehension composition differentiates approach 
context agentsheets programming substrate created instance tactile programming environment called visual agentalk create interactive simulations 
keywords graphical rewrite rules user programming languages scripting direct manipulation agents object oriented programming visual programming visual object oriented programming languages vl topics hci issues visual programming languages programming internet 

visual agentalk tactile programming environment 
application world 
programming world 

collaboration world 
moving worlds 
comprehension composition direct composition composition example 
sharing 
acknowledgments tactile programming unified manipulation paradigm supporting program comprehension composition sharing alexander repenning james department computer science center lifelong learning design university colorado boulder cs colorado edu cs colorado edu fax www cs colorado edu www cs colorado edu graphical rewrite rules agentsheets effective user programming approaches allowing users define behavior editing pictures 
rule visual programming environments provide ease limited expressiveness 
question raised possible create programming environments expressive 
visual programming techniques lower threshold programming users sufficient creating user programming environments easy powerful 
achieve environment support definition programs just static representations behavior dynamic collections program objects applied number contexts just program editor 
describe approach user programming called tactile programming extends visual techniques unified program manipulation paradigm programs easy comprehend compose importantly share world wide web 
tactile programming inherent ability support social context programming takes place ability ease program comprehension composition differentiates approach 
context agentsheets programming substrate created instance tactile programming environment called visual agentalk create interactive simulations 

goal enable wide range users ranging children professionals create interactive simulations 
central goal problem creating programming environment strikes careful balance ease expressiveness 
general purpose programming languages pascal hand highly expressive enable professional programmers create complex computational artifacts accessible majority users 
visual user programming approaches hand meant casual programmer little programming background 
especially domain interactive simulations visual programming environments address tradeoff believe focus solely mechanisms attempt programming intuitive 
help achieving qualitative increase expressiveness sacrificing ease requires support social context programming take place 
currently user programming environments assume solitary programming process person programs computer 
nardi maclean indicate advantages supporting development programming communities 
maclean specifically points programming community encourages members help sharing insights expertise 
existence social dimension recognized supported current user programming environments 
programming environments easy expressive contain mechanisms enhance user ability comprehend programs program fragments compose complex programs simpler primitives importantly easily share programs program fragments community users 
programming environments addressed concerns individually believe essential find unified program manipulation paradigm supports issues simultaneously comprehension user programming environment include mechanisms increase program comprehension 
users able easily determine effects programs program components applications 
increasingly important environments support collaboration sharing programs 
programs shared users essential programs executable easily understood users may need modify 
composition easy construct complex behaviors composing simpler ones 
programming environments allow kind composition actively support composition meaningful programs helping users avoid composition incompatible components 
sharing environments allow users share little effort programs program fragments 
programming environment enable users recognize sharable program fragment boundaries ensure shared components users applications 
develops notion tactile programming unified program manipulation paradigm supports issues user interface perspective 
introduce instance tactile programming environment called visual agentalk designed experience graphical rewrite rules rule visual programming languages 

visual agentalk tactile programming environment visual programs non textual visualization represent programs programming constructs 
representations provide kind feedback program execution static representations program 
viewing programs dynamic medium computer little comprehensible viewing program static medium 
tactile programming extends framework visual programming adding perception manipulation 
tactile programming visual program representations enhanced sense elevating program fragments status class interface objects dragged dropped different contexts just program editors 
applying program objects dropping different contexts triggers dynamic audio visual feedback creates perception manipulation 
ability apply program objects different contexts interface manipulation paradigm primary concern tactile programming provides support program comprehension composition sharing 
visual agentalk tactile programming environment added agentsheets system order enable users create complex interactive simulations 
tactile programming visual agentalk centered notion objects move different worlds application world programming world collaboration world 

application world application world contains objects direct interest user 
agentsheets application worlds consist communicating agents organized grid 
agents represent real world objects cars roads traffic signals comparison application world objects hypercard include things buttons fields application world objects manipulated viewed user application 
agentsheets worksheet allowing users simulate interactions cars traffic lights 

programming world 
programming world contains objects describe behavior application world objects 
hypercard programming world objects consist functions handlers describing behavior application world objects buttons 
comparison visual agentalk features different types programming world objects commands rules triggers 
commands small interactive forms representing programming primitives manipulated users 
commands interfaces consist familiar direct manipulation widgets 
command consists name arbitrary number parameters 
commands visual syntax allowing combination textual pictorial components 
users set values typed parameters type interactors number fields text fields check boxes textual iconic pop menus 
type interactors limit user input valid choices 
instance sound type interactor pop menu offering names sounds available system 
name static text parameters icon pop direction pop visual agentalk command change look agent 
parameters crossing gate application world objects 
ability application world objects appear programming world application world significantly helps users map worlds 
rules contain condition action commands 
instance rule program car 
part left part right rule represented flexibly sized containers commands dragged dropped 
part implicit conjunction conditions part implicit action sequence 
check gas station rule 
gas station car energy level car car pull gas station set energy level 
triggers tool trigger rule allow user define type event cause rule tested 
case check gas station rule tested user applies hand tool car agent 
trigger types include timers mouse clicks keyboard events new messages defined users 

collaboration world collaboration world contains application world objects programming world objects shared programming community 
visual agentalk shared items include simulations agents rules commands triggers ability easily share program fragments user programming environments tend ignore 
focus lowering individual threshold programming providing intuitive interfaces 
significant amount evidence shows individual learning enhanced individual part larger community share 
programming environments internet medium allow sharing distributed community current mechanisms allow exchange ftp email difficult directly integrated programming environment 
perceive benefits community practice mechanisms allow sharing easy tightly integrated rest user programming environment 

moving worlds tactile programming relies ability users easily cross boundaries application world programming world collaboration world 
philosophy tactile programming think integration collaboration world afterthought create programming environment takes worlds account provides unified approach accessing 

comprehension tactile programming enhances user ability comprehend programs augmenting visual perception visual programming perception manipulation 
tactile programming objects programming world elevated status concrete tangible objects manipulated user 
visual agentalk manipulation commands drag drop allow users move commands rules worlds comprehend functionality applying agents 
lines dynamic programming languages lisp smalltalk command rule executed point time resulting immediate feedback 
application world collaboration world programming world moving worlds comprehension test functionality commands rules moving programming world collaboration world application world 
direct composition select commands compose rules 
composition example compose rules manipulating application world 
sharing share community users entire simulations agents rules commands world wide web 
context agent simplifying task program comprehension 
commands dragged dropped agents explore functionality modify agents command applied agent executed selecting command palette specifying command parameters dragging dropping command agent worksheet 
shows simple agentsheets turing machine 
top window worksheet representing application world 
contains number agents act tape pieces turing machine head 
worksheet command palettes representing part programming world 
condition command palette left holds commands query state application world 
action command palette right holds commands effect application world 
move action command selected direction parameter set right graphical pop menu command dragged top turing machine head 
dropping command turing head results command execution 
turing head move direction indicated command case position right 
powerful application execution paradigm allows user explore test repertoire commands parameters significant comprehension exploring repertoire commands ability test entire rules 
problems identified regarding rule comprehension debugging stand contrast claims modularity rule approaches 
modularity rule approaches simplify process writing rules increase complexity debugging 
believe problem partly due lack ability test individual rules 
ability trace rule execution rule systems limited provide insights rules executed 
visual agentalk part rule part part individual condition action commands entire rules dragged dropped agent point time test 
applying rule agent drag drop execute rule audiovisual feedback 
instance applying car rule agent sequentially highlight condition commands testing presence gas station testing energy level 
conditions succeed actions executed sequentially agent moves gas station sets energy 
condition fail execution feedback plays sound providing visual feedback indicating condition failed 
tactile approach testing helpful assisting single user comprehend programs crucial support comprehension programs created 
tactile nature programming world objects enabled drag drop interaction mechanism extends notion 
encourages exploratory style programming users perceive functionality programming world objects touching direct manipulation sense 
composition process tactile programming includes creation programs composing programming world objects 
similar boxer visual agentalk employs spatial metaphor nested containers represent programs 
composition consist putting programming world objects containers 
programming objects containers 
visual agentalk supports different approaches putting objects containers direct composition composition example 
difficult convey power static medium 
direct composition users directly compose programs selecting commands condition action palettes dragging rules contained visual agentalk rule editor 
instance turing machine programmed rules order behave table move right change move right resulting visual agentalk program consists rules turing machine rules 
rule sets interpreted top bottom 
rule interpreter finds rule conditions true execute actions top bottom return matching cycle 
composition example tactile programming reduces barriers application word programming word possible programming example techniques allow composition programming word objects manipulation objects application word 
instance turing machine rule composed visual agentalk holding special composition example key manipulating objects programmed 
holding key clicking tape segment machine head visual agentalk infers important part rule condition located tape head 
user simply drags head right visual agentalk adds move command rule action 
condition action parts rule composed arbitrary number commands specified manipulating application world objects 

sharing tactile programming environment manipulation paradigm minimize barriers application world programming world access collaboration world 
world wide web increasing acceptance turning promising medium enabling collaboration 
current web programming environments java java script provide little support users 
java may serve essential role networking similar role postscript plays printing necessary add higher level program manipulation paradigms tactile programming web programming accessible users 
ideal environment take advantage allow easy sharing programming world application world objects 
visual agentalk behavior exchange extends initial system called remote adding different levels sharing granularity 
tactile manipulation paradigm users share entire agentsheets simulations individual agents rules commands 
sharing simulations simulations coarsest objects users share 
users find simulations interest visual agentalk behavior exchange web page spirit tactile programming simply drag simulation page agentsheets 
simulation includes objects necessary including agents rules commands resources sounds icons documentation 
dragging simulation web page shows city traffic simulation dragged web page 
doing necessary programs resources automatically downloaded user computer 
sharing agents dragging agents visual agentalk behavior exchange page copy look behavior agentsheets 
agent comes rules commands contained rules 
command function create user interface command install command palette 
dragging agent web page sharing rules rules dragged visual agentalk rule editor get copy directly application world objects order comprehend 
dragging rule web page sharing commands rules commands dragged programming world get copy dragged application world comprehend 
visual agentalk open programming language allowing language designers create specialized commands share programming community 
send command send messages distant agents dragged web page 
dragging new command programming world compile new dragging command web page visual agentalk gains power collaboration world allowing community users create growing collection easily sharable components 
depending experience users get involved different degrees community 
may wish access simulations doing programming extend existing simulations programming visual agentalk 
users create new simulation scratch share create programming language featuring specialized commands share commands users 

order create user programming environments allow program comprehension composition sharing occur easily develop better visualizations languages 
argue environment needs employ tactile programming techniques described provide unified program manipulation paradigm allows users easily cross boundaries application world programming world collaboration world 
allowing happen lowers threshold programming provides flexible framework allows definition highly expressive languages programs 
visual agentalk exists working prototype currently exploring creation tactile programming environments languages including java 
acknowledgments wish gerhard fischer center lifelong learning design thoughtful discussions 
want perrone excellent kurt schneider sumner anders feedback 
supported advanced research projects agency cooperative agreement number cda national science foundation number red 

bell rieman lewis usability testing graphical programming system things missed programming walkthrough proceedings chi new orleans la pp 

programming demonstration cypher ed mit press cambridge ma pp 


learning collaboration convergent conceptual change journal learning sciences vol 
pp 


brown collins duguid situated cognition culture learning educational researcher vol 
january february pp 


pea gomez distributed multimedia 
repenning bending rules steps learning environments interactive semantically enriched graphical rewrite rules learning environments vol 
pp 

proceeding visual languages darmstadt germany pp 


gilmore underwood underwood 
furnas new graphical reasoning models understanding graphical interfaces proceedings chi new orleans la pp 


bell lewis language creating behaving pictures ieee workshop visual languages bergen norway pp 


smith cypher spohrer programming agents programming language communications acm vol 
pp 


glinert visual tools generating iconic programming environments proceedings ieee workshop visual languages seattle pp 


nardi small matter programming mit press cambridge ma 

maclean carter moran user tailorable systems pressing issues buttons proceedings chi seattle wa pp 


loh repenning rule programming simulation manipulation environment lego programmable brick proceeding visual languages darmstadt germany pp 
learning graphical programming evaluation proceedings fifth ifip conference human computer interaction london pp 

carver improving children debugging skills empirical studies programmers second workshop olson sheppard soloway ed ablex publishing norwood new jersey pp 


cook analysis line debugging process empirical studies programmers second workshop olson sheppard soloway ed ablex publishing norwood new jersey pp 


papert children computers powerful ideas basic books new york 

cooper rule programming ops morgan kaufman san mateo ca 

overview boxer journal mathematical behavior pp 


travers construction kit animate systems proceedings boston ma pp 


cypher watch programming 
wagner curran drag drop demonstration mit press cambridge ma 
treat object proceedings chi denver pp 


perrone repenning remote 
repenning sumner agentsheets medium creating domain oriented visual languages ieee computer vol 
pp 


programming demonstration desktop metaphor watch combining networking design environments computers education vol 
pp 


