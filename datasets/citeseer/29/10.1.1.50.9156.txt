theory generalized annotated logic programming applications michael kifer department computer science suny stony brook stony brook ny 
mail kifer cs edu subrahmanian department computer science university maryland college park maryland 
mail vs cs umd edu annotated logics introduced studied 
annotations extended allow variables functions argued logics provide formal semantics rule expert systems uncertainty 
continue investigate power approach 
introduce new semantics programs ideals lattices 
mail vs cs umd edu annotated logics introduced studied 
annotations extended allow variables functions argued logics provide formal semantics rule expert systems uncertainty 
continue investigate power approach 
introduce new semantics programs ideals lattices 
subsequently proposals multivalued logic programming formalisms temporal reasoning shown fit framework :10.1.1.39.4588
interesting product investigation obtain new result concerning multivalued logic programming model theory fitting bilattice logic programming characterized model theoretically 
accompanied corresponding proof theory 
large knowledge bases inconsistent ways 
certain inconsistencies allowed significantly alter intended meaning knowledge bases 
model theoretic fixed point operational semantics gaps 
section show van emden quantitative logic programming special case gaps 
section show fitting bilattice logic programming approach fits framework gaps 
consequence fit characterize fitting approach model theoretically model theoretic semantics previously proposed approach 
translating gaps obtain sound complete proof procedure theories strengthening van emden soundness completeness theorems obtained restrictions complementing fitting results :10.1.1.39.4588
lastly demonstrate incorporate versions temporal logic programming framework gaps consider discrete linear version time instant time time point second consider interval temporal logic 
show gaps sufficiently expressive able cope large body temporal problems particular subsume earlier proposals temporal logic programming 
approach directly represent certain constructs temporal specifications note implication problem full fledged temporal logics pi complete logics adequately implemented computer anyway 
contrast corresponding problem temporal specifications gaps semi decidable suitable computer implementation 
negation ontological defines satisfaction negated atoms follows 
case usually ae ae logically equivalent 
result ontological negation computationally expensive 
primary reason epistemic negation computational fact negation fitting theory logic programming annotation ground term identified constant annotation functions evaluable 
bilattices directly translates epistemic negation gaps see section :10.1.1.39.4588
easy see implication expressed ontological negation follows expressible epistemic negation 
ontological negation define implication separately 
properties ontological negation discussed detail 
definition tells models gap 
