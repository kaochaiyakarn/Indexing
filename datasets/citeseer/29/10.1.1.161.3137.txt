dynamic ml dynamic types stephen gilmore rl christopher walton laboratory foundations computer science department computer science university edinburgh june describe variant standard ml programming language incorporates facility replacement modular components program execution 
useful extension language builds existing compiler technology permits separate compilation modular units standard ml program 
defined naively extension incur performance overheads due need retain typing information run time 
explain cost significantly lessened cases eliminated entirely 
essential technical device employ implementation extension language modification space copying garbage collection 
keywords languages modular programming static type checking dynamic standard ml reliable useful programming language provides expressivity functional programming language setting full power imperative programming constructs available 
programmer choose setting supported clear distinction mutable immutable values 
standard ml polymorphic type system sophisticated modules called structures provide flexible encapsulation due interfaces called signatures addition flexible assembly due parametric modules called functors 
standard ml strongly typed language 
order enforce application type checking phase language strict distinction elaboration evaluation insisting programs successfully elaborated evaluated 
rigid ordering activities prohibits execution programs attempt data values ways allowed type eliminates large number software errors manifest runtime working untyped programming language 
useful enforcing distinction elaboration evaluation phases prohibits modification programs execution 
sight preventing modification executing program eminently sensible thing increasingly situations case 
long lived computations programmer wish minor modification order correct programming error adjustment order improve efficiency heavily function 
standard ml elaboration evaluation model operation allowed 
show regulate replacement process order facilitate updating program components interrupting program execution compromising type safety 
give standard ml language allows component replacement name dynamic ml reflecting ability dynamically replace compiled program code run time 
replacement model order facilitate replacement process indicate suitable size component replacements fix order module level replacement 
allow replacement signatures signatures structures structures conditions 
functors compile time objects generate structures replacement model 
semantically module level replacement apt choice facilitates improvement programs revision replacement data structures tandem creation access functions associated 
implementation terms module level replacement supported facility compile standard ml modules isolation 
executing program may upgraded need re compile entirety 
order module level replacement needed provide reasonably comprehensive dynamic code replacement facility alter allowable forms top level declaration dynamic ml remove core language declarations top level 
include distinguished main program function function main structure main 
addition reserve distinguished structure name install 
standard ml deploys inference static program information checking formedness program compilation 
inference types functions values core language complemented inference signatures structures functors modules language 
analogously notion general type called principal type core language notion general signature modules language 
principal signature structure permissive allowing definitions structure body seen outside 
order avoid need consider case structures signatures assume structures explicit signature ascription principal 
structure replacement running example consider replacement implementation name table functionally equivalent offers improved performance 
simplicity choose type names simply character strings 
table type moving inefficient implementation efficient fact replacing unsorted list binary search tree 
implementations match table signature shown 
implementations provide type tables declaration type names implemented strings constant value denoting empty table functions insert names test membership table 
standard ml structures provide dot notation accessing components structures structures named table matching table signature define types table name table table empty signature table sig type table type name string val empty table val insert name table table val member name table bool interface signature name tables functions table insert table member 
implementations shown 
matching signature syntax opaque outside structure body typing information known inside structure body 
example fact version structure tables implemented standard ml lists 
prevents applying functions defined lists list rev table table 
inside structure body free list constants empty list denoted square brackets list constructors cons denoted colons 
careful comparison implementations able agree second implementation replacement 
specification analysis implementations judge behaviourally equivalent 
think compute different results initially built system second implementation structure 
notion structure replacement certainly includes logically undetectable replacements lax additionally allowing replacements change observable behaviour program modification 
examples include replacing structure version logged function calls order extract statistical information program run time performance order aid detection logical errors implementation 
formal requirement structure replacements satisfy captured static type checking replacement structure match signature constraint matched original program 
practice means replacement structure omit functions types values exported structure replaces 
functions values types defined internally may omitted implementation replacement structure 
simplicity provide facility combining replacement renaming 
structures signatures replace structures signatures name 
signature replacement signature replacement facilitating operation allows permissive signatures replace restrictive ones 
effect visible functions types values hidden application signature constraint 
replacement subject type preservation conditions constrain relationship structure table table struct type name string type table name list val empty fun insert fun member false member orelse member inefficient implementation name table structure table table struct type name string datatype table empty node table name table fun insert empty node empty empty insert node node insert node insert node fun member empty false member node member member true improved implementation name table signatures 
signature replacement cause changes typing information visible values functions 
appropriate term operation signature extension allow declarations structure supplemented increase functionality matching structure 
consider situation replace table signature includes function specification val checkpoint table unit applied pair table output stream stdout function serialize contents table output stream return unit value type unit signal completion 
replace previous version table signature extended checkpointing function upgrading structures match signature contain implementation function 
visible old signature visible upgrade signature include 
replace client structures table structure allow calls newly added checkpointing function 
implementation model having outlined types code replacement perform go describe simple implementation strategy 
consider attaching compiled image replacement code program image reassigning function pointers invoking garbage collection remove old unused code 
moment thought convince 
realise values calculated old version code live memory application replacement function able data value way allowed type 
way elaboration evaluation model allow programmer circumvent helpful static type checking standard ml 
intention 
slightly bring structure replacement type safe way 
new structure replacement mapping shows upgrade old representations data values new ones 
expressing replacement operation method code replacement intended suitable updating programs application programmer followed software engineering practice encapsulating information concrete representation data structures 
disciplined approach programming facilitates replacement list tree ensuring change invisible users table structure 
disciplined approach programming proves disadvantage come consider problem describing replacement values old datatype values new datatype 
specifically constructors old concrete representation visible due encapsulation provided application table signature constraint table structure example 
order circumvent difficulty table structure specialised implement name table list character strings 
structure abstractions standard ml functors 
structure matching specialised table signature functor body describe structure implements name tables binary search trees 
addition structure contain functions convert types structure types new 
place conversion functions inside install structure follow convention mapping values old representation new functions identifier type update 
duplicate identifiers possible standard ml language maintains different name spaces different categories identifiers value constructors type constructors record labels core language signature structure functor identifiers modules language 
shows method structure replacement encoded standard ml functor 
functions update values type name table new types respectively identity function mapping application standard ml basis library function implementing folding function list right associativity 
list foldr function applied insert function trees empty tree specialised provide function maps lists binary search trees 
expressive power standard ml functors provide sufficient allow state wish replace lists binary search trees sufficient allow subsequently replace trees say balanced trees 
reason standard ml type expression appears qualification signature expression may refer type constructors scope signature expression 
nullary functor structure table table type table string list table struct type name string datatype table empty node table name table fun insert empty node empty empty insert node node insert node insert node fun member empty false member node member member true structure install struct val name table name name fn val table table table table list foldr insert empty functor defines method replacement tables type constructor string unary type constructor list scope virtue pre defined language 
binary search tree datatype defined body functor pre defined 
exported structure formed applying functor old version table structure due opaque signature matching table signature 
reason require dynamic ml extended version standard ml type qualification 
extension language feature permit qualifications form functor headings 
functor structure table table datatype table empty node table name table table datatype declarations standard ml generative declarations replications existing datatypes producing new type distinct introduced point 
datatype specifications signatures generative need datatype qualification similarly generate new type name 
purpose allow describe existing type defined structure named table matching table signature 
language degree expressivity able describe replacement programmer defined local datatypes types 
describe replacement effected 
executing replacement implementation strategy effecting code replacement modification space copying garbage collection 
describing code replacement operation necessary understand basic copying collection algorithm 
uniprocessor implementation address space heap divided contiguous semi spaces 
normal program execution semi spaces 
memory allocated linear fashion semi space allocation fails 
point copying collector called reclaim space 
current semi space space recursively scanned root objects live objects copied semi space space 
objects reachable roots copied collection finished old semispace space discarded see 
subsequent memory allocations performed new space space 
role semi spaces reversed garbage collection 
garbage 
space collection roots free space space collection space copying garbage collection propose perform code replacement operation garbage collection 
functor shown compiled separately 
invoke garbage collection operation extended application replacement functions install structure values type replacement 
completion copying replacement possible dispose outdated version structure modification semi space switch new version semi space contains data values newly introduced replacement types 
replacement illustrated 
failure installation modification due match consider cases operation replacing program components judged failed 
case components fit description component replaced 
example mean executing program image contained compiled representation structure name table matching table signature implementing type table table list character strings 
failure kind compiled program image modified classified passive failure 
response language implementation case report warning application programmer stating replacement installed 
semi space true cons cons nil replacement semi space bool true node node table table empty pi real symbol table free space replacement collection code replacement type update rollback due programmer error second failure case complex 
presenting modified form garbage collection operation executes application programmer code 
functions executed code replacement unrestricted standard ml functions may diverge application raise exception signal inability continue processing 
non terminating computations case exception raised 
exception producing function application halt execution program gone trouble allowed modify program interrupting execution 
possibility exception handler program deal errors recover 
may introducing new datatypes program access 
method recovery rollback garbage collection operation exception raised 
revert semi space data values old types continue execution old program code 
error report returned application programmer giving diagnostic information possible location nature cause exception 
implementation considerations code distribution eventual intention extend dynamic module replacement model described previous sections multi user distributed computing environment 
considerably enhance usefulness system 
example enable team software developers concurrently introduce updates project requiring lengthy code freeze recompilation stage 
consequently choice garbage collection algorithm heavily influenced desire avoid unnecessarily complicating extension 
promising alternative garbage collection appears regionbased memory management 
scheme memory consists multiple stacks containing values particular type 
sophisticated region inference algorithm determine memory requirements program compile time avoiding need run time garbage collection 
sight scheme appears ideal purposes separation types different regions avoid need retain run time typing information simplify replacement operation 
code replacement may serious implications algorithm longer possible infer absolute memory usage compile time program change time 
inference algorithm primarily designed uniprocessor system contains obvious method integration distributed environment 
furthermore source code requires careful profiling obtain real performance benefit traditional garbage collection techniques 
possible combine allocation different types different areas memory traditional garbage collection investigated thoroughly 
generational variant space copying garbage collection algorithm successfully integrated distributed computing environment lemma interface 
semi spaces divided generations local global 
local generation contains data local machine global generation contains data shared machines 
data may migrate local generation global generation reverse 
collection local generation exactly 
collection global generation requires operation machines copy shared data 
extending replacement operation generational scheme appears relatively straightforward 
need consider data objects shared machines 
lemma interface compile time distinction immutable mutable objects 
immutable objects freely copied machines need coherency checking need updated 
hand mutable objects require coherency checking scheme update object propagate atomically copies object machines 
fortunately types standard ml give rise mutable objects relatively little expensive coherency checking required typical program constructed functional programming style 
unfortunately replacement operation longer permits ignore coherency checking immutable objects may updated replacement 
consequently additional distinction replaceable objects mutable immutable types 
example signature shown contains concrete representation type name string replaced 
type table replaceable 
replaceable objects require additional coherency checking expensive mutable coherency checking updates performed replacement garbage collections 
performance extension standard ml language impose penalties run time performance programs 
penalty consider overhead incurred need retain typing information run time 
information checked program execution programs modified structure replacement 
reason typing information shown needed example distinguish lists character strings values type table table non types 
noted previous section tagging values replaceable types avoided storing scheme regions 
observe values datatypes replaced need incur overhead retaining typing information runtime 
values types stored type information known techniques 
slight run time penalty imposed dependence encapsulation provided opaque signature matching 
compiler optimisations performed exploiting knowledge concrete representation data structure may inadmissible 
believe reasonable suffer slight performance penalty benefit ease software maintenance due security representation independence 
storage penalty incurred facilitate signature replacement 
compiler eliminate called dead code typically functions structure bodies exported 
comes consideration generous signature applied structure making invisible functions visible allowing invoked 
cases lessened 
install structure structure replacement removed successful completion code replacement activity 
security significant concern related dynamic language facility replace code run time leave system vulnerable active attack virus passive attack data snooping 
implementation technology include consideration allowing prevention undesired modification requiring user authenticate replacement code known public key encryption techniques 
semantic model unusually practical programming language standard ml formal definition 
language definition acts solid scientific platform may conducted experiments programming language design 
alteration standard ml language adding order module replacement investigated terms definition 
readers definition know silent topic memory management say semantic rules concerning disposal inaccessible addresses page 
authors considered argued usefulness semantic model memory management making precise implementation notions memory leaks tail recursion optimisation 
suitable machine model memory management developed form suitable setting discuss dynamic ml extensions standard ml 
intend provide semantics extension follow 
related untyped weakly typed interpreted languages give programmer great flexibility allowing code revised executing 
reason implementation systems software distributed computer systems allowing minor errors corrected disrupting computations progress 
languages inherent problems inefficiency insecurity interest bringing flexibility code replacement efficient secure language 
model order module level replacement standard ml programs forms step creation dynamic variant standard ml 
concurrent distributed versions language exist view replacement model definition 
dominic duggan defined dynamic variant standard ml aims common 
language differs retains type information run time adds dynamic types suffering familiar run time penalties 
hope explore relationship languages 
stephen gilmore giving lectures course early part written 
rl supported university edinburgh scholarship department computer science 
christopher walton supported epsrc postgraduate studentship 
mads tofte jean pierre talpin 
region memory management 
information computation february 
david matthews thierry le 
lemma distributed shared memory global local garbage collection 
technical report ecs lfcs laboratory foundations computer science department computer science university edinburgh april 
andrew appel 
runtime tags aren necessary 
lisp symbolic computation 
robin milner mads tofte robert harper david macqueen 
definition standard ml revised 
mit press 
greg morrisett robert harper 
semantics memory management polymorphic languages 
technical report school computer science carnegie mellon university september 
published fox memorandum cmu cs fox 
david matthews 
distributed concurrent implementation standard ml 
autumn conference 
reppy 
cml higher order concurrent language 
acm sig plan conference programming language design implementation sigplan notices pages 

distributed ml abstractions efficient fault tolerant programming 
phd thesis department computer science cornell university 
bernard thierry le 
programming behaviours ml framework syntax semantics lcs 
programming languages systems esop number lncs pages 
springer april 
dominic duggan 
type implementation language distributed scope 
jan vitek christian tschudin editors mobile object systems programmable internet number lncs pages 
springer 
xavier leroy michel mauny 
dynamics ml 
journal functional programming october 

