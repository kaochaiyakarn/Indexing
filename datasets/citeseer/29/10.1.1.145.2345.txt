distributed streams algorithms sliding windows phillip gibbons intel research pittsburgh south craig st pittsburgh pa 
phillip gibbons intel com dept electrical computer engg iowa state university ames ia 
snt iastate edu massive data sets arise physically distributed parallel data streams important estimate various aggregates statistics union streams 
presents algorithms estimating aggregate functions sliding window data items streams 
results include 
single stream approximation scheme number sliding window optimal worst case time space 
approximation scheme sum integers sliding window optimal worst case time space assuming polynomial 
algorithms deterministic logarithmic memory words 

contrast show deterministic algorithm estimates small constant relative error number sum integers sliding window union distributed streams requires space 
preliminary version appeared proceedings th acm symposium parallel algorithms architectures 

randomized approximation scheme number sliding window union distributed streams uses logarithmic memory words 
approximation scheme number distinct values sliding window distributed streams uses logarithmic memory words 
results obtained novel family synopsis data structures called waves 
flurry designing effective algorithms estimating aggregates statistics data streams motivated importance network monitoring data warehousing telecommunications focused entirely sequential context data stream observed single party :10.1.1.130.3576:10.1.1.119.5031:10.1.1.29.634:10.1.1.24.7941:10.1.1.32.1927:10.1.1.102.5483:10.1.1.15.2457
depicts example data stream data item bit 
shown data items stream item position stream bits rank bits rank 
main challenge data stream algorithms carry computation single pass data limited workspace memory 
previous focused sequential data stream context applications multiple concurrent data sources generating data stream 
network monitoring telecommunications example node person network potential source new streaming data 
large retail data warehouse retail store produces stream items sold 
model scenarios previously proposed distributed streams model number data streams stream observed single party aggregate computed union streams 
real world scenarios data important 
example telecommunications call records generated continuously customers processing done call records records archived :10.1.1.24.7941
model scenarios studied sliding windows setting data streams aggregates statistics computed sliding window items stream :10.1.1.119.5031
studies sliding windows setting single stream distributed stream models improving previous results models 
describe models previous results new results greater detail 
data stream computations algorithm data stream perform computations pass input limited workspace 
goal sequential distributed streams algorithm estimate function input minimizing total workspace memory parties time taken party process data item time produce estimate query time 
functions sequential distributed data streams require linear space compute exactly attention focused finding approximation scheme approximation scheme defined 
definition approximation scheme quantity randomized procedure positive computes estimate relative error probability pr 
approximation scheme deterministic procedure positive computes estimate worst case relative error 
algorithms sliding window single stream sliding windows model computations performed data items stream goal workspace 
limited workspace keep track items window 
consider problem estimating number sliding window called basic counting :10.1.1.24.7941
stream example number current window items items 
datar approximation scheme basic counting uses log bits workspace memory processes data item amortized log worst case time produce estimate current window time :10.1.1.24.7941
prove matching lower bound space 
demonstrate importance problem algorithm building block number functions sum bounded integers lp norms restricted model 
improve results presenting approximation scheme basic counting matches space query time bounds improving item processing time worst case :10.1.1.24.7941
approximation scheme sum bounded integers sliding window matches space query times improving item processing time amortized log worst case time worst case 
algorithms family small space data structures call waves example wave basic counting data stream 
axis rank extends right new bits arrive 
wave contains positions bits stream arranged different levels 
level wave stores fixed number positions stream level storing bits ranks multiple 
waves described detail section 
shall see additional stream bits arrive wave retains basic shape moving right crest wave largest rank far 
algorithms sliding window distributed streams previous distributed streams consider sliding windows 
ways define sliding window distributed streams propose ways show definitions solved straightforward applications single stream algorithms third position wise union challenging 
lower bound space required deterministic algorithm guarantees small constant relative error estimating number sum bounded integers position wise union distributed streams 
lower bound holds parties sliding windows considered case current length stream 
motivates study randomized approximation schemes 
approximation scheme number name arises basic shape suggestive ocean wave break 
stream position rank stream position rank stream position rank example data stream bits 
position stream position rank bits rank computed stream processed 
window deterministic wave data stream example window query 
optimal deterministic wave data stream 
sliding window position wise union distributed streams 
building block constructing approximation scheme number distinct values sliding windows single distributed streams 
scheme uses logarithmic memory words party 
key idea randomized waves 
contrast deterministic wave discussed bit position selected level rank multiple randomized wave bit position selected level probability party uses pseudo random hash function applied position number source randomness order ensure position wise coordination choices stream 
summary contributions contributions follows 

introduce family synopsis data structures called waves demonstrate utility data stream processing sliding windows setting 

sliding window size single stream approximation schemes number sum integers optimal worst case space processing time query time 

sliding window size union distributed streams lower bound space deterministic algorithm estimates number small constant relative error 
contrast randomized approximation schemes number number distinct values logarithmic memory words 
remainder organized follows 
section presents background comparisons previous related 
section section results deterministic randomized resp 
wave synopsis 
section shows techniques various problems distinct values counting nth 
integer sum problem space matches lower bound polynomial background related papers data streams algorithms :10.1.1.130.3576:10.1.1.119.5031:10.1.1.29.634:10.1.1.24.7941:10.1.1.32.1927:10.1.1.102.5483:10.1.1.15.2457
section restrict attention related distributed streams sliding windows distinct values counting 
distributed streams model introduced 
model party observes stream limited workspace communicates parties estimate requested 
estimate computed union streams seen parties 
specifically asked estimate party sends message referee computes estimate 
model reflects set commercial network monitoring products data analysis front serves role referee 
results approximation scheme number union distributed streams bitwise streams log log memory bits party length stream ii approximation scheme number distinct values collection distributed streams log log memory bits values 
algorithms technique authors call coordinated sampling stream sampled random positions sampling rate 
party stores positions bits sample 
stored bits exceed target space bound sampling probability reduced sample fits smaller space 
sliding windows considered 
distributed streams model contrasted studied communication complexity models parties unlimited time space process respective inputs 
observed simultaneous round communication complexity results related distributed streams model 
lower bounds round communication complexity certainly carry directly 
distributed streams algorithms designed stored coins setting parties share string unbiased fully independent random bits bits stored prior observing streams space store bits accounted workspace bound 
previous streaming models studied settings stored coins :10.1.1.102.5483
stored coins differ private coins studied communication complexity 
stored coins model random string stored parties private coins model parties forbidden sharing information prior start computation 
approximation scheme due datar basic counting mentioned section uses exponential histogram eh :10.1.1.24.7941
eh maintains information seen items old items items outside window items 
specifically assigned individual buckets assigned buckets size assigned buckets size items assigned bucket 
bucket eh stores size power position 
ki bucket 
receiving new item bucket discarded position longer falls window 
new item assigned new bucket size 
buckets size merged form bucket size 
large buckets size merged resulting cascading log bucket merges worst case 
show approach waves avoids cascading 
babcock sliding windows algorithms maintaining uniform random sample specified size variance median clustering single stream 
cohen strauss show sliding windows algorithms estimate general aggregates single stream :10.1.1.12.7100
distinct values counting studied number papers :10.1.1.12.7100:10.1.1.102.5483
seminal algorithm flajolet martin variant due alon matias szegedy estimate number distinct values stream number bit stream relative error :10.1.1.102.5483
algorithm works distributed streams model adapted sliding windows :10.1.1.24.7941
results know extend algorithm arbitrary relative error trevisan bar yossef 
trevisan algorithm extended distributed streams quite easily cost extending sliding windows clear 
log instances algorithm different hash functions maintain datar reported extension arbitrary relative error sliding window single stream trevisan approach :10.1.1.24.7941
smallest distinct hashed values sliding window values 
assuming hashed values random maintaining just minimum value sliding window takes log expected time :10.1.1.24.7941
know extend algorithm sliding windows addition space time bounds single streams worse algorithm list efficient 
appeared publication preliminary version bar yossef improve space complexity distinct values counting single stream cormode show compute number distinct values single stream presence additions deletions items stream 
considers sliding windows 
show approximation scheme distinct values counting distributed streams extended sliding windows setting combining coordinated sampling waves 
deterministic waves introducing wave data structure describe approximation scheme basic counting single stream 
describe approximation scheme estimating sum integers sliding window single stream 
consider approximation schemes distributed streams 
basic wave recall basic counting problem stream bits maintain number sliding window bits stream 
solve slightly general problem data structure estimate number sliding window prespecified maximum window size basic wave describe somewhat wasteful terms space bound processing time query time improved section 
consider data stream bits desired bound relative accuracy 
simplify notation assume integer 
maintain counters pos current length stream rank current number stream 
wave contains positions stream arranged different levels 
log levels numbered 

level contains positions bits rank multiple fewer bits level stores dummy position 
depicts basic wave data stream 
wave levels level labeled contains positions bits ranks modulo ranks axis 
level fewer bits stores dummy position dummy rank 
wave estimate number window size steps 
pos return rank exact answer 
pos 
estimating number stream positions pos 
maximum position stored wave minimum position stored wave greater equal 
exists return exact answer 

ranks respectively 
return rank exact answer 
return rank example window query depicted pos rank 
noted earlier actual number window 
lemma window size estimation procedure returns estimate relative error actual number window 
proof 
pos window includes entire stream rank exact answer 
exist level skip bits follows bits occur window 
wave returns exact answer 
consider general case conditions hold 
show exists 
note level contains dummy position positions exactly ranks apart 
smallest rank level rank level contains position clearly exists 
difference rank smallest rank level difference ranks large difference position follows exists 
smallest numbered level containing position 
bound absolute error 
deduce wave number window rank rank 
example 
returning midpoint range guarantee absolute error construction gap larger rank 
absolute error estimate 
gap 
bound relative error show window 
smallest rank level 
position level 
equation rank smallest rank wave larger 
number window rank rank relative error improvements show improve basic wave get optimal deterministic wave sliding window size smallest power greater equal 
modulo counters pos rank store positions wave modulo numbers takes log bits regardless length stream 
discard expire positions pos create ambiguity modulo arithmetic 
keep track largest rank discarded initialized smallest rank wave number sliding window size answered time 
processing bit takes constant time processing bit takes log worst case time amortized time bit rank multiple stored levels 
improvements eh synopsis discussed section obtain bounds :10.1.1.24.7941
steps implement improvements differ differences deterministic wave synopses eh synopses 
significantly waves approach decrease item processing time worst case follows 
storing single position multiple levels store position maximum level shown 
levels 
store positions level store positions 
levels may store fewer positions discard expired positions initially fewer positions exist 
positions level stored fixed length queue called level queue time new position added level position tail queue removed assuming queue full 
example circular buffer queue new head position simply overwrites buffer slot 
maintain doubly linked list positions wave increasing order 
positions evicted tail level queue spliced list 
new stream item arrives check head sorted list see head needs expired 
observed set positions sorted sequence numbers storing difference modulo consecutive positions absolute positions reduce space log log bits log bits :10.1.1.24.7941
depicts high level steps deterministic wave algorithm simplicity omits optimizations discussed 
summarizing results subsection theorem algorithm maintains deterministic wave give estimate basic counting problem sliding window size explicitly discarded positions outside size window order show full levels 
positions pos expired largest expired rank 
receiving bit 
increment pos 
additions comparisons done modulo 
head linked list expired pos discard tail queue store largest rank discarded 

increment rank determine corresponding level largest rank multiple 
level queue full discard tail queue splice 
add pos rank head level queue tail answering query sliding window size 
pos return rank exact answer 
largest rank discarded rank discarded 
pair head linked list 
empty return exact answer 

pos return rank exact answer 
return rank deterministic wave algorithm basic counting single stream 
relative error log bits 
item processed worst case time 
time instant wave provide count estimate time 
proof 
wave level step position significant bit rank numbering 
assuming constant time operation time bounds follow discussion 
space bound level queues updated place block memory show determine wave level constant time weaker machine model explicitly support operation constant time 
linked list pointers offsets block full sized pointers 
space bound follows discussion 
proof relative error follows proof lemma 
seen considering executions algorithm basic wave algorithm data stream considering query set positions basic wave lie window position answer error bound follows set positions improved wave including position corresponding superset optimality bounds 
time bounds optimal constant worst case bounds 
space bound optimal matches lower bound datar randomized deterministic algorithms :10.1.1.24.7941
state deterministic lower bound theorem obtain similar bounds randomized algorithms 
theorem deterministic algorithm provides estimate basic counting problem time instant relative error integer requires log bits memory :10.1.1.24.7941
computing wave level weaker machine model 
step requires computing significant bit number rank 
machine model explicitly support operation constant time naive approach examine bit rank time desired position 
takes log worst case time rank log bits 
store log level numbers associated sequence 
log array log 
takes log log log bits 
store counter log log log bits initially 
bits received desired wave level element array 
bit reaching array property log log bits rank desired level log log plus position significant bit numbering 
increment return cycling array starting array arrival bit 
correctly computes wave level step 
note cycling array log steps need know significant bit interleaving cycling ii search bits determine wave level worst case time 
basic counting window size algorithm achieves constant worst case query time sliding window size sliding window size single wave give estimate basic counting problem relative error steps outlined basic wave section 
query time window sizes log worst case search linked list order determine 
matches query time bound eh algorithm :10.1.1.24.7941
precise statement bounds obtained algorithm consider generalization described 
sliding windows duplicated positions 
simple generalization basic counting problem permits multiple stream items position 
stream item position bit value pair positions consecutive integers possible repetitions arriving nondecreasing order 
example stream 
scenario arise positions increasing time units target sliding window time units 
algorithms section easily adapted handle scenario long upper bound number stream items occur sliding window 
specifically changes 
log levels smallest power greater equal 
largest smallest rank position respectively 
add maintain doubly linked list items position linked list enables items expiring position discarded time step 
note largest rank discarded rank expiring item adjacent new head determined time prior discarding 
additional linked list easily maintained time items spliced step 
bounds obtained algorithm corollary 
corollary consider stream duplicate positions permitted upper bound number stream items occur sliding window positions 
algorithm maintains deterministic wave give estimate basic counting problem window positions relative error log bits 
item processed worst case time 
estimate takes worst case time special case log worst case time general proof 
time space bounds immediate discussion 
proof relative error follows lines proofs lemma theorem 
subtlety duplicated positions scenario show desired exists wave aspect proofs crucially depends correspondence positions ranks 
cases position important exact answer returned immediate definitions 
see exists observe having log levels ensures level contains dummy position spans bits 
window contained level definition sliding window stream items 
note bounds scenario duplicates obtained setting sum bounded integers deterministic wave scheme extended handle problem maintaining sum items data stream item integer 
datar showed extend eh approach obtain approximation scheme problem log log buckets log log log log bits query time log amortized log log worst case item processing time :10.1.1.24.7941
log matching asymptotic lower bound number bits 
show achieve constant worst case item processing time number memory words query time 
lower bound assumes log 
measured bits words bound log log bits slightly worse theirs super polynomial algorithm depicted 
sum sliding window range smallest power greater equal nr 
maintain modulo counters pos current length total running sum 
log nr levels 
level full positions 
algorithm follows general steps algorithm 
storing pairs store triples value data item needed value stored item partial sum item equivalent rank sums 
answering query know window sum total total triple head linked list largest partial sum discarded return midpoint interval 
key insight algorithm suffices store item level largest power divides number total total 
naively mimic basic counting wave viewing value items value 
lead worst case processing time item 
datar reduced time log log directly computing eh resulting insertions value :10.1.1.24.7941
single item stored log log eh buckets 
contrast store item just enables time bound 
challenge quickly compute wave level step show time 
observe desired wave level largest position numbering number interval total total bit positions multiple 
second observe differ bit position bit changes point total total largest 
position significant bit total total accordingly bitwise complement total total bitwise desired wave level position significant bit log 
summarizing results subsection weaker machine model support operation constant time binary search find desired position log log log time follows 
word size bit mask comprising followed checking equals 
left shift positions recurse 
right shift positions recurse 
theorem algorithm approximation scheme sum items data stream item integer 
uses log log memory words memory word log log bits large hold item window size 
item processed worst case time 
time instant provide estimate time 
proof 
prove approximation guarantee define basic wave corresponding input stream sums integers algorithm show sum wave constructed algorithm simulates basic wave 
approximation guarantee follows approximation guarantee provided basic wave 
basic wave defined follows 
triple input algorithm position value integer current running total inclusive pair input basic wave 
stream model discussed section duplicated positions permitted 
note basic wave stores item level multiple pos pos interested interval pos 
estimate returned basic wave number bits window pos 
know corollary relative error actual value 
construction number bits input basic wave interval pos exactly equals sum integers interval pos sum wave trying estimate 
relative error sum integers window pos 
suppose maximum position basic wave minimum position basic wave greater equal largest rank position smallest rank position 
absolute error basic wave sufficient approximation guarantee 
show absolute error sum wave estimating sum integers pos greater complete proof 
suppose integers gave rise respectively 
show expires sum wave time expires basic wave 
suppose entered sum wave level ls entered basic wave level lb 
firstly ls lb ls largest power divides number lb largest power divides 
show tuple entering sum wave level ls tuple entering basic wave level lb 
see suppose tuple entered sum wave level ls 
tuple enters basic wave level ls 
lb ls enters basic wave level lb 
argument shows expires sums wave time expires basic wave 
similar argument show expires sum wave time expires sum wave 
absolute error sum wave greater equal 
space time bounds immediate discussion perform step constant time 
distributed streams recall distributed streams model 
parties party observes stream 
estimate requested party sends message referee computes estimate union streams 
consider natural definitions sliding window union distributed streams illustrated basic counting problem scenario seek total number items streams items total 
scenario single logical stream split arbitrarily parties 
party receives items include sequence number value bit seek total number items logical stream 
scenario seek total number items position wise union logical streams 
second scenarios deterministic wave answer sliding windows queries collection distributed streams 
scenario apply single stream algorithm stream 
answer query party sends count referee simply sums answers 
individual count relative error actual total 
second scenario assume estimate requested parties party sent current sequence number pos logical stream 
party separately estimates number items stream sequence numbers lie interval pos deterministic wave 
note interval necessarily items stream observed party 
guaranteed lie window items observed party 
corollary party separately estimate number relevant items stream relative error 
individual count relative error actual total 
third scenario problematic 
denote union counting problem problem counting number union distributed data streams 
stream represents characteristic vector set size union sets 
show lower bound deterministic algorithm problem case involving sliding windows 
theorem deterministic algorithm guarantees constant relative error union counting problem requires space bit streams parties sliding window 
proof 
proof contradiction 
suppose algorithm existed approximating union counting relative error space 
attempted maximize constants 
parties referee 
data stream seen stream seen length query request occurs streams observed 
suppose exactly ones zeroes 
restricted scenario exact answer union counting problem hamming distance possible message sm denote set inputs cause transmit workspace bits number distinct messages send number possible inputs 
pigeonhole principle conclude exists message sends sm relative error exact answer absolute error estimate produced algorithm 
claim inputs sm hamming distance greater 
proof contradiction 
suppose inputs sm 
consider runs algorithm second 
runs referee gets pair messages outputs estimate absolute error cases equation contradiction 
bit string exactly number bit strings hamming distance number exactly combinations flipped flipped 
inputs odd distances 
number strings hamming distance 
setting claim messages sends sm choosing equation get sm choosing suitably large follows equation sm log obtain contradiction completes proof 
sum bounded integers problem distributed streams scenario straightforward application single stream algorithm 
scenario fact deterministic stream algorithm window size provide estimates window size scenario solved stream separately executing single stream algorithm party 
scenario union means take position wise sum problem reduces scenario 
union means take position wise maximum lower bound theorem applies number union special case sum position wise maximum 
linear space lower bound deterministic algorithms theorem motivation considering randomized waves introduced section 
randomized waves section describes randomized wave data structure union counting problem 
deterministic wave randomized wave consists bits accurately positions bits data stream stored different levels 
level contains positions selected bits position selected level probability difference deterministic randomized waves level deterministic wave selects bits regular intervals randomized wave selects expected bits random intervals 
randomized wave retains positions level deterministic wave 
randomized wave describe data structure show yields approximation scheme union counting sliding window prespecified maximum window size analysis time space complexity 
minimum power log desired bound relative error upper bound probability algorithm fails achieve bound 
randomized wave party consists queues qj 
qj level 
queue hold items constant determined analysis 
hash function pseudo random hash function map positions levels exponential distribution 
input position modulo 


pr pr hash function computed follows 
consider numbers 
members field gf 
preprocessing step choose uniformly independently random store party 
order compute party computes operations performed 
represent bit vector largest significant bits zero log 
clearly 
properties 
distributed uniformly pr 
mapping pairwise independent distinct pr pr pr 
hash function alon domain range sizes depend maximum window size entire stream length :10.1.1.102.5483
updating randomized wave steps maintaining randomized wave summarized top half 
bit arriving position selected levels 

sample level stored queue contains positions selected level 
constant determined analysis 
consider queue qj tail earliest element position qj contains bits interval pos positions hash value greater equal call interval pos range qj 
move level range may increase decrease 
reason follows 
bit selected level selected level queue level contains positions selected level possible qj contains earlier positions qj vice versa 
assume level initialized dummy position 
handling query bottom half summarizes steps answering query 
receive query number interval max pos pos 
step party selects lowest numbered level lj range qj lj contains sends lj qj lj referee 
maximum levels parties 
queue qj lj contains positions uj bits stream hash value positions outside hash values lj 
step referee computes extracts uj 
step referee takes union positions queues returns number positions union scaled factor 
proof correctness lemma proved 
lemma consider items 
sampled levels starting level follows 
item placed levels defined 
denote number items level xj 
smallest numbered level 
estimate level xj xj level pr xj lemma randomized wave algorithm returns estimate union counting sliding window size relative error probability greater 
proof 
consider party level define sj bi stream 
queue level qj contains positions bits sj 
consider size sj large small decreases increases 
sj range qj contain vice versa 
level selected party lj smallest value sj words lj smallest value number relevant bits window selected stream lowest numbered level satisfies property stream 
estimate 
st 
consider stream formed bitwise union streams observed various parties 
interested estimating number bits union stream lie window bits union stream sampled different levels process described lemma 
smallest numbered level number bits union lie sampled algorithm estimates sample level clearly applying lemma proof complete 
note approximation guarantee holds independent number parties 
median log independent instances algorithm get desired approximation scheme theorem estimation procedure approximation scheme union counting sliding window size greater log log bits party 
time process item dominated time expected log finite field operations 
query time log log log 
proof 
log instances log queues positions position log bits 
instance hash function parameters log bits 
shows space bound 
item processing expected time instance expected number levels new position added bounded step likewise expected number levels position pos size sliding window bounded 
scanning tails queues levels 
looking step takes constant expected time 
log instances time bound follows 
query time party determine lj instances log log time binary search 
party sends log memory words referee receives processes 
extensions number distinct values 
minor modifications randomized wave algorithm estimate number distinct values sliding window union distributed streams 
element sample wave ordered pair value seen stream position occurrence value 
updated time value appears stream 
wave level stores elements positions sampled level 
note hash function hashes value element position case union counting 
party maintains pos length observed stream 
maintains doubly linked list elements wave ordered position 
list lets party discard expired elements 
element arrives insert levels 
storing pos alongside 
expected value inserted expected constant number case levels 
wave update position 
determine presence value wave additional hash table hashed item value contains pointer occurrence element doubly linked list 
updating element position requires moving element current position tail list done constant time 
element position updated levels belongs 
done constant expected time element belongs expected constant number levels 
produce estimate party passes wave referee 
referee constructs wave union computing level wise union waves receives 
resulting wave estimation 
perform log independent instances algorithm take median 
space bound proof correctness identical randomized wave union counting 
summarizing result theorem estimation procedure approximation scheme number distinct values sliding window size dis log log log tributed streams 
uses bits party values item processing time dominated time expected log finite field operations 
query time query time log log log 
handling predicates 
note algorithm number distinct values stores random sample distinct values 
sample answer queries predicates distinct values distinct values 
order provide approximation scheme predicate selectivity fraction distinct values satisfy predicate predicate known query time store sample size level increasing space bound factor problems sliding windows studied :10.1.1.29.634
nth 
wave synopsis obtain approximation scheme position nth stream follows 
storing bits wave store items level positions apart apart 
addition keep track rank bit closest item wave 
rest algorithm similar basic counting scheme 
note need log bits upper bound size window needed order contain problems 
improved time bounds distinct counting single stream lead improved time bounds problems reduce distinct counting described :10.1.1.24.7941
include lp norms averages histogramming example approximation scheme sliding average readily obtained running sum count algorithms targeting relative error 
alon matias szegedy :10.1.1.102.5483
space complexity approximating frequency moments 
journal computer system sciences 
babcock babu datar motwani widom :10.1.1.24.7136
models issues data stream systems 
proc 
st acm sigmod sigact sigart symp 
principles database systems pods pages june 
babcock datar motwani 
sampling moving window streaming data 
proc 
th acm siam symp 
discrete algorithms soda pages jan 
babcock datar motwani callaghan :10.1.1.24.7941
maintaining variance medians data stream windows 
proc 
nd acm sigmod sigact sigarch symp 
principles database systems pods pages june 
bar yossef jayram kumar sivakumar trevisan 
counting distinct elements data stream 
proc 
th international workshop randomization approximation techniques ran dom pages sept 
lecture notes computer science vol 
springer 
bar yossef kumar sivakumar 
reductions streaming algorithms application counting triangles graphs 
proc 
th acm siam symposium discrete algorithms soda pages jan 
cohen strauss :10.1.1.12.7100
maintaining time decaying stream aggregates 
proc 
nd acm sigmod sigact sigarch symp 
principles database systems pods pages june 
cormode datar indyk muthukrishnan 
comparing data streams hamming norms zero 
proc 
th international conf 
large data bases vldb pages aug 
datar gionis indyk motwani :10.1.1.24.7941
maintaining stream statistics sliding windows 
siam journal computing 
feigenbaum kannan strauss viswanathan 
testing spot checking data streams 
technical report shannon laboratories florham park nj july 
feigenbaum kannan strauss viswanathan 
approximate difference algorithm massive data streams 
siam journal computing 
flajolet martin 
probabilistic counting algorithms data base applications 
journal computer system sciences 
fong strauss 
approximate difference algorithm massive data streams 
proc 
th symp 
theoretical aspects computer science lncs pages 
springer feb 
ganti gehrke ramakrishnan 
demon mining monitoring evolving data 
ieee trans 
knowledge data engineering jan feb 
gehrke korn srivastava 
computing correlated aggregates continual data streams 
proc 
acm sigmod international conf 
management data sigmod pages may 
gibbons :10.1.1.29.634
distinct sampling highly accurate answers distinct values queries event reports 
proc 
th international conf 
large data bases vldb pages sept 
gibbons matias 
synopsis data structures massive data sets 
abello vitter editors external memory algorithms pages 
ams 
dimacs series discrete mathematics theoretical computer science vol 

page summary appeared soda 
gibbons 
estimating simple functions union data streams 
proc 
acm symp 
parallel algorithms architectures spaa pages june 
gibbons 
distributed streams algorithms sliding windows 
proc 
acm symp 
parallel algorithms architectures spaa pages aug 
gilbert kotidis muthukrishnan strauss 
surfing wavelets streams pass summaries approximate aggregate queries 
proc 
th international conf 
large data bases vldb pages sept 
guha koudas shim 
data streams histograms 
proc 
rd acm symposium theory computing stoc pages july 
guha mishra motwani callaghan 
clustering data streams 
proc 
st ieee symp 
foundations computer science focs pages nov 
henzinger raghavan rajagopalan 
computing data streams 
technical report digital systems research center palo alto ca may 
indyk 
stable distributions pseudorandom generators embeddings data stream computation 
proc 
st ieee symp 
foundations computer science focs nov 
indyk 
personal communication 
kremer nisan ron 
randomized round complexity 
computational complexity 
kushilevitz nisan 
communication complexity 
cambridge university press cambridge uk 
muthukrishnan 
data streams algorithms applications 
technical report rutgers university piscataway nj 
newman 
private vs common random bits communication complexity 
information processing letters 
newman szegedy 
public vs private coin flips round communication games 
proc 
th acm symp 
theory computing stoc pages may 
trevisan 
note counting distinct elements streaming model 
unpublished manuscript april 
receiving item value 
increment pos 
additions comparisons done modulo 
head linked list expired pos discard tail queue store largest partial sum discarded 

determine wave level largest number total total multiple add total 
level queue full discard tail queue splice 
add pos total head level queue tail answering query sliding window size 
pos return total exact answer 
largest partial sum discarded partial sum discarded 
triple head linked list 
empty return exact answer 

pos return total exact answer 
return total deterministic wave algorithm sum sliding window single stream 
party pj receiving stream bit 
increment pos 
note additions comparisons done modulo 
discard position tail queue expired pos 


pos note parties function 
level queue qj full discard tail qj 
add pos head qj 
answering query sliding window size party observed pos bits 
max pos 
pos desired window 
party determines smallest numbered level lj tail qj lj position sends lj qj lj referee 

referee computes maxj lj 

uj set positions qj lj 
referee returns uj 
randomized wave algorithm union counting sliding window streams 

