defending computer system autonomous agents technical report mark gene spa ord coast laboratory dept computer sciences purdue university west lafayette cs purdue edu march report presents prototype architecture defense mechanism computer systems 
intrusion detection problem introduced key aspects solution explained 
standard intrusion detection systems built single monolithic module 
ner grained approach proposed small independent agents monitor system 
agents taught howto recognise intrusive behaviour 
learning mechanism agents built genetic programming 
explained sample agents described 
exibility scalability resilience agent approach discussed 
issues outlined 
increased network connectivity computer systems increasingly vulnerable attack 
attacks exploit aws operating system application programs 
general goal attacks subvert traditional security mechanisms systems execute operations excess intruder authorisation 
operations include reading protected private data simply doing malicious damage system user les 
degree protection malicious actions depends amount time ort spent building maintaining system security defenses 
building complex tools continually monitor report activities system security operator catch potentially malicious activities occur 
involves large expense terms time money building maintaining monitoring system 
monitoring impose performance penalty system protected users may object 
proposes mechanism building monitoring system involve signi cant amount ort 
utilises small processes achieve goal system monitoring 
process agent operates independently agents cooperate monitoring system 
approach signi cant advantages terms overhead scalability exibility 
intrusions intrusion detection intrusion de ned set actions attempt compromise integrity con resource 
main classes misuse intrusions de ned attacks known weak points system 
spotted watching certain actions performed certain objects 
anomaly intrusions observations deviations normal system usage patterns 
detected building pro le system monitored detecting signi cant deviations pro le 
misuse intrusions follow de ned patterns detected doing pattern matching information 
example attempt create setuid le caught examining log messages resulting system calls 
done pattern matching approach 
anomaly intrusions harder detect 
xed patterns monitored fuzzy approach taken 
ideally system combined human pattern matching capabilities vigilance computer program 
monitoring system potential intrusions able ignore spurious false intrusions resulted legitimate user actions 
rely heuristics decide pre speci ed operator learned system time 
heuristics guarantee perfect accuracy goal minimise probability incorrect classi cation 
intrusion detection intrusion detection system ids identify preferably real time unauthorized misuse abuse computer systems 
intrusion detection system attempt intrusion occurs 
role alert system security cer potential security violation occurring 
reactive proactive form system defense 
intrusion detection system host network 
system hybrid approaches 
host system monitor activity single host computer 
ensure user operations violating site security policy 
network system monitors net wide basis consider actions occurring network analyse constitute potential security violations 
case resulting system large monolithic module 
module performs monitoring data gathering data manipulation decision making system 
sits top system kernel 
depending data gathered monitor system audit logs user activities system state 
observations deduce metrics system security state decide intrusion currently occurring 
apparent problem approach building ids overhead imposes system protected 
single system analysed system due added overhead ids 
audit logs analysed kernel generate audit information actions performs 
results large amount information stored semi permanently storage medium 
generating detailed logs consumes disk space cpu time 
logs generated ids read interpret attempting correlate activities system information 
ids may perform system monitoring may keep aggregate statistics give system usage pro le 
statistics derived variety sources cpu usage disk memory usage activities users number attempted logins statistics continually updated correlated internal model 
model may describe set intrusion scenarios encodes pro le clean system 
way signi cant processing occur matching observed pro le internal model 
monolithic approach presents practical problems 
new intrusion discovered utilises system capability previously monitored ids completely rebuilt handle 
certainly trivial task 
importantly monolithic ids represents single point failure attack destroy ids system security greatly reduced 
monolithic approach scale 
attempts perform operations ids module 
networked environment useful distribute ids functionality multiple machines 
reduce load individual machine done correctly guarantee graceful degradation face network partitioning 
finer grained approach large monolithic ids module propose ner grained approach group free running processes act independently system 
termed autonomous agents trained observe system behaviour cooperate ag behaviour consider anomalous 
agent lightweight program observes small aspect system 
single agent form ective intrusion detection system view system limited scope 
agents operate system cooperate complicated ids built 
agents independent 
added removed system dynamically 
need rebuild ids order add new agents 
having small agents single monolithic ids 
clear analogy drawn human immune system proposal 
immune system consists white blood cells dispersed body 
attack consider alien poses threat body 
takes just white cell destroy attacker 
having large number cells body able defend cient way possible 
infection occurs area cells move area ght 
considering small lightweight agents comparison monolithic approach advantages seen easily tailored having small agents observe system behaviour detection system tailored system needs cient way possible 
ability trained advantage human operator identify major threats monitored teach agents recognise threats 
major threats identi ed agents free evolve mechanisms monitor obvious threats 
ciency obviously users want degradation performance system 
individual agents optimised perform monitoring unobtrusive way possible 
primitives agents simple interface cleanly existing network layer interface 
training phase complete agents impose low overhead system 
fault tolerance system monitoring fail agents lose state 
encode behaviour internally actual code restarting agents leave exactly state 
resume monitoring system degradation performance 
see article maes autonomous agents 
graceful degradation similarly agents compromised system defenses don disappear 
graceful degradation system ability defend occurs best expected case 
resilience subversion defense system subverted attacker worse useless gives false sense security 
knowledge particular agent system give knowledge operation agents evolve di erent conditions 
moving system means agents slightly di erent simple matter subvert 
important advantage 
extendible agents easily modi ed operate networked environment migrated system system network 
track anomalous behaviour network move systems useful 
scalability agents approach scales nicely larger systems simply add agents increase diversity 
notion network level leads interesting insight network agents migrate large networks monitor network tra suspicious behaviour 
important believe ease tailoring agents system resilience subversion exhibited agents highly scalable nature agents approach 
drawbacks autonomous agent approach 
impose overhead system consume memory cpu cycles order monitor intrusions 
cost intrusion detection system cost weighed bene ts having protection mechanism place 
training agents monitor system takes time 
solution aims generic system autonomous agents tailored speci cally system monitored 
means time spent analysing monitored agents placed system 
possibility positives minimised intrusion detector useful security tool 
intrusion detection system agents subverted intrusion detector security liability 
agents distributed system monitor di erent system parameters immune sort attack 
architecture agent guiding concept design agent 
agent job cooperation agents ciently possible 
agent structured monitor audit logs system data streams small subset possibly activities 
activity detected login attempt network connection excessive cpu usage agent simply inform agents system suspects intrusion 
naturally agent mistaken 
agents take account operation 
broadcasts exceed threshold message sent operator monitoring process 
illustrates decision reached 
agent nal vote decide potential intrusion 
collective consensus agents system 
agent suspects intrusion ignored 
suspect anomalous behaviour probably potential intrusion 
certain events may important scheme example failed login attempts root signi cant ftp connection machine outside domain 
di erent agents detect events message rst agent detecting failed login attempts weight second 
agents react di erently seeing important message possibly monitoring slightly di erent activities result 
internal design agent variety paradigms 
simple static pattern matching system detect known misuse anomalies 
rule system match observed events trigger actions matched rule 
having rules encoded large rulebase see example ides system small subset rules pertaining single event encoded 
exible scheme dynamic learning system neural network classi er system approach genetic programming small programs detected simple activities system 
prototype solution illustrate system operating consider small local area network workstations running solaris 
stations simple rewall protected collection agents described 
trained detect anomalous activity tra subjected training phase operator 
operator di erent styles network tra intrusive tra neutral tra guide learning agents 
note agents learning paradigm internally operator explicitly adjust operation agents 
training phase complete allowed run continually system observing activities cooperating decide activities form part intrusion attempt 
report suspicions human operator 
propose genetic programming gp paradigm basis internal design agents 
powerful machine learning paradigm allows feedback learning human guided learning discovery nding new combinations activities monitor 
gp system populations programs evolved solve speci problem 
problem singular correct solution solution expensive compute 
possible solution programs represented parse trees simple meta language parse trees manipulated operations similar natural genetics 
time population programs converges particular program set programs gives optimal solution problem 
programs di erent code written traditional language 
syntactic elements drawn specially created language allows simple representation important system parameters 
example having calculate average cpu usage may available programs variable cpu usage 
code agents system abstractions available 
shows simple parse tree agent 
parse tree corresponds block pseudo code packet ip destination address packet equal ip address generate suspicion broadcast endif endfor terminals parse tree primitives ip dest ip raise obtain values abstraction layer beneath agents see 
simple example primitive ip dest obtain ip destination address current packet abstraction layer ip neq function compare address ip address system ip primitive 
simple agent inform agents system sees packet arrived machine di erent ip destination address system 
may useful thing may perform function conjunction agents system time 
example shows agents detect packet arrives destined subnet outside rewall 
packet type udp destined port rip update port see goldberg classi er systems 
packet data packet data obtained lower layers system 
evaluate agent packet ip neq raise example code simple agent 
ip dest ip broadcast message agents 
sample internal parse tree agent generate additional suspicion message 
illustrates exibility encoding activity patterns parse trees 
gives system exibility single agent replicated entire network monitoring activity single agent rewall machine 
packet get subnet part ip destination address packet equal subnet address generate suspicion broadcast packet protocol equals udp udp dest port equals generate suspicion broadcast endif endif endfor distributing agent entire network signi cant advantage network partitioned 
despite loss connectivity machines agents continue operate independently monitor suspicious activities 
example graceful degradation system occurred monolithic ids 
single ids hosted rewall machine network partition leave machines partition little intrusion detection defenses 
gives view agents operate 
lowest level raw network interface 
prototype implementation sun interface 
provides interface allow programs transmit receive level frames 
system generate new network data receive capabilities 
system gather data network encapsulate form agents 
lies network primitives layer 
takes raw network data interface encapsulates away allow agents handle 
agents require values various elds network packet header plus variety aggregate values packet size inter packet arrival times time day 
values derived packet data outside system sources 
agents operate network primitives layer 
agent program represented parse tree simple language 
language allows agents inspect contents network packets perform operations information 
network packet information obtained underlying network primitives layer 
actual mechanisms plus example agent described internal design agents section 
lies training module 
agents allowed monitor system trained correctly respond intrusions 
trained minimise number false positives spurious intrusion reports generated 
involves human interaction agents module 
agents trained placed system module place 
training feedback mechanism operator provides input describing agents actual behaviour close desired behaviour tra pattern 
similar training phase neural networks 
cooperation multiple agents importance cooperation illustrated example 
case agents monitoring far varied selection system parameters 
agents distributed network host 
subsystems monitored system network nfs device driver disk subsystem 
network connection agent monitors source address incoming connections 
human operator provides feedback training module agents trained network primitives abstraction raw network layer architectural overview agents system incoming nfs request network disk system detects request address suspicion broadcast nfs server monitors write file system monitors requests nfs handles monitors write requests agents monitoring nfs write request sees seen considers suspicious behaviour 
agents monitoring nfs server 
analyses requests nfs handles monitoring write requests 
agent monitoring disk subsystem writes speci system directories 
shown 
intruder attempting valid nfs handle write system directory local disk 
intruder coming network previously machine 
scenario write request comes system agent seen 
causes agent suspicious raises suspicion level sends message agents system 
case network connection nfs server 
agent trigger intrusion alert 
agent monitoring requests nfs handles received noti cation suspicion 
couples observation nfs request agent increase suspicion level broadcast agents 
agents received previous broadcasts take account monitor actions 
intruder issues write request agent su cient evidence raise suspicion level broadcast 
agent sees write system directory suspicion level gone threshold value due earlier broadcasts agents inform operator possible intrusion 
shows agents cooperate achieve nal goal detecting intrusion 
notice agent monitors common activities agent monitoring nfs handle requests common occurrence networked environment running nfs 
su cient weight evidence gathered agents working alarm raised 
feel agents approach powerful design abstraction 
scalable new agents continually added system 
simple concept extended wide variety ways hybrid approach agents monolithic ids 
exibility adapted variety network architectures 
example network distributed system agents distributed systems 
agents migrate system system possibly host potential attack 
similar antibodies moving location susceptible viral infection 
agents small allow happen clean cient way 
furthermore agents replicate controlled way 
example intruder managed halt operation particular agent agents detect restart new copy agent multiple copies 
potential intruder faced changing security defense system 
agents distributed network wide basis greater scope monitoring system usage 
network monitoring agents closely host agents determine intrusion occurring 
example network agents broadcast intrusion suspicion host agents take steps extra increased audit trail detail thorough monitoring network ports example 
network single defensive unit 
host network contributing defense 
extension agents take active measures defending system simply reporting state 
example detect suspicious connection may attempt slow connection order damage waiting human operator take action 
agents suspicious connection greater amount 
idea extended agents actively kill connections trust hamper user activity outside acceptable bounds 
extreme examples currently feel leaving response intrusion hands human operator safer solution 
propose building prototype order test concepts 
initially prototype monitor network tra small local network rewall 
primary goal prototype prove concept autonomous agents applied intrusion detection works 
examine overhead system imposes hosts network network 
investigate ways learning training phase simple possible operator perform 
want identify ways agents approach generalised larger network systems heterogeneous machines 
maccabe 
architecture network level intrusion detection system 
technical report university new mexico department computer science august 
mukherjee todd karl levitt network intrusion detection 
ieee network may june pages 
sandeep kumar gene spa ord 
pattern matching model misuse intrusion detection proceedings th national computer security conference october 
david goldberg 
genetic algorithms search optimization machine learning 
wesley 
john koza 
genetic programming programming computers means natural selection 
mit press 
lunt javitz valdes areal time intrusion detection expert system ides sri international technical report sri project february 
neal internet engineering sun microsystems 
pattie maes modeling adaptive autonomous agents arti cial life vol ed christopher langton mit press 
