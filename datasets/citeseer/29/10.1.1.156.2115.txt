journal computer system sciences article indexing data models constraints classes paris kanellakis sridhar ramaswamy department computer science brown university box providence rhode island darren vengroff jeffrey scott vitter department computer science duke university box durham north carolina received november examine efficient data structures provide indexing support new data models 
database languages models include concepts constraint programming relational tuples generated conjunctions constraints object oriented programming objects organized class hierarchies 
size database number classes page size secondary storage size output query indexing attribute constraint data models equivalent external dynamic interval management special case external dynamic dimensional range searching 
semi dynamic data structure problem worst case space pages query time logb logb logb amortized insert time 
note static version problem worst case optimal solution 
indexing attribute class name object oriented model objects organized forest hierarchy classes special case external dynamic dimensional range searching 

motivation successful realization data model requires supporting language features efficient secondary storage manipulation 
example relational data model includes declarative programming form relational calculus algebra expresses queries low data complexity fixed relational calculus query evaluable logspace ptime size input database 
importantly language features supported data structures searching updating optimal secondary storage 
trees variants trees examples data structures :10.1.1.96.6637
unqualified success supporting external dynamic dimensional range searching relational database systems 
general data structure problem underlying efficient secondary storage manipulation data models external dynamic dimensional range searching 
problem dimensional range searching main memory secondary memory subject research 
date solutions approaching worstcase performance trees dimensional searching simplest cases external dimensional range searching 
general data structure problem underlying efficient secondary storage manipulation data models external dynamic dimensional range searching 
problem dimensional range searching main memory secondary memory subject research 
date solutions approaching worstcase performance trees dimensional searching simplest cases external dimensional range searching 
examine new efficient data structures special cases general problem dimensional range searching 
special cases important supporting new language features constraint query languages class hierarchies object oriented databases :10.1.1.41.7218
standard assumption secondary memory access transmits page units data typically bytes count 
terms page disk block interchangeably copyright academic press rights reproduction form reserved 
kanellakis terms core main memory 
assume units main memory available 
note log log log asymptotically larger log 
special structure indexing problems interest improve bounds 

contributions indexing constraints constraint programming paradigms inherently declarative describe computations specifying computations constrained 
general constraint programming framework database query languages called constraint query languages :10.1.1.41.7218
framework adapts ideas constraint logic programming databases provides calculus algebra guarantees low data complexity applicable managing spatial data 
course important index constraints support new language features efficient secondary storage manipulation see section detailed exposition problem 
fortunately possible combining existing dimensional data structures :10.1.1.41.7218
basis observation reduction indexing constraints fairly general class constraints dynamic interval management secondary storage 
contributions indexing constraints constraint programming paradigms inherently declarative describe computations specifying computations constrained 
general constraint programming framework database query languages called constraint query languages :10.1.1.41.7218
framework adapts ideas constraint logic programming databases provides calculus algebra guarantees low data complexity applicable managing spatial data 
course important index constraints support new language features efficient secondary storage manipulation see section detailed exposition problem 
fortunately possible combining existing dimensional data structures :10.1.1.41.7218
basis observation reduction indexing constraints fairly general class constraints dynamic interval management secondary storage 
set input intervals dynamic interval management involves able perform operations efficiently answer interval intersection queries report input intervals intersect query interval 
delete insert intervals interval collection 
dynamic interval management shown special case external dynamic dimensional range searching 
consider data structures organize embedding space problem 
quad trees designed organize dimensional data 
recursively subdividing region equal pieces number points region fits disk block 
adapt input data bad worst case times 
kanellakis grid file proposed data structure treats dimensions symmetrically data structures inverted file distinguish primary secondary keys :10.1.1.72.3364
grid file works dividing dimension ranges maintaining grid directory provides mapping regions search space disk blocks 
provide analysis worst case query times :10.1.1.72.3364
mention range queries efficient queries return records 
assume uniform dimensional grid points point integral coordinate input grid file produce regions size 
recursively subdividing region equal pieces number points region fits disk block 
adapt input data bad worst case times 
kanellakis grid file proposed data structure treats dimensions symmetrically data structures inverted file distinguish primary secondary keys :10.1.1.72.3364
grid file works dividing dimension ranges maintaining grid directory provides mapping regions search space disk blocks 
provide analysis worst case query times :10.1.1.72.3364
mention range queries efficient queries return records 
assume uniform dimensional grid points point integral coordinate input grid file produce regions size 
consider query retrieving points horizontal straight line 
time report answers query worst case number points query result 
problem trees respect question hand remains 
uniform grid hb trees produce rectangles size range searching inefficient 
read disk blocks report points straight line 
data structures proposed literature handle region data 
include tree tree tree cell tree :10.1.1.141.6518:10.1.1.131.7887
data structures applicable point data dimensional range data relevant problems 
recursive decomposition space heuristics offer worst case guarantees space time seek 
interesting idea space filling curves proposed 
identifies space filling curve order points dimensional space 
section open problems 

problems initial approaches 
indexing constraints illustrate indexing constraints consider domain rational numbers language syntax consists theory rational order constants relational calculus 
see details :10.1.1.41.7218
context generalized tuple quantifier free conjunction constraints variables range domain rational numbers 
example relational database model tuple arity 
thought single point dimensional space range finite domain 
framework generalized tuple arity range rational numbers 
set intersecting rectangles expressed 
simplicity program due ability cql describe name point sets constraints 
program intersecting triangles 
simplicity expression combined efficient evaluation techniques quantification infinite domain rationals 
examples details please see :10.1.1.41.7218
cql model rational order relational calculus low data complexity fixed query evaluable logspace 
suitable model implementation 
situation similar relational model language framework low data complexity account searches logarithmic faster sizes input relations 
ability perform searches relational databases impractical 
fact harmonic mean set numbers arithmetic mean tells wi substitute kp denominator left hand side value left hand side decrease remain 
kp replace numerator righthand side kp increase remain 
kp produces contradiction assuming constant independent intriguing open questions performance possible arbitrary partitions plane just rectangular performance improved allowing small constant number copies data item 
data structures attempt obtain tree performance ideas 
example tree tree grid file rectangular single copies tree uses small number copies rectangular hb tree cell tree order non rectangular decompositions space :10.1.1.72.3364:10.1.1.141.6518:10.1.1.131.7887
experimental comparisons indicate data structures significantly better different cases range querying 
previous lemma infer problem indexing classes despite structure nontrivial 
consider class hierarchy leaves children root 
map class indexing problem twodimensional range searching 
performance case deletions open 
note techniques static structure possible achieve dynamic bounds indexing constraints pages dynamic query time log amortized update time log log indexing classes log pages dynamic query time log amortized update time log log log 
progress different directions 
case goal handle large number queries batch proves twodimensional queries answered logm io number queries processed amount main memory available 
new technique called path caching convert main memory data structures priority search tree segment tree efficient secondary storage structures :10.1.1.35.1453
example shown possible implement priority search trees secondary memory sided queries answered optimal logb disk storage log log :10.1.1.35.1453
inserts deletes data structure 
amortized cost update logb 
stronger version lower bound lemma proved 
note techniques static structure possible achieve dynamic bounds indexing constraints pages dynamic query time log amortized update time log log indexing classes log pages dynamic query time log amortized update time log log log 
progress different directions 
case goal handle large number queries batch proves twodimensional queries answered logm io number queries processed amount main memory available 
new technique called path caching convert main memory data structures priority search tree segment tree efficient secondary storage structures :10.1.1.35.1453
example shown possible implement priority search trees secondary memory sided queries answered optimal logb disk storage log log :10.1.1.35.1453
inserts deletes data structure 
amortized cost update logb 
stronger version lower bound lemma proved 
show secondary storage data structure answer twodimensional range queries log worst case constant occupy log log logb disk blocks 
