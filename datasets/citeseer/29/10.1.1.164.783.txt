architectural design distributed application autonomic quality requirements danny weyns kurt tom holvoet department computer science leuven celestijnenlaan leuven belgium danny weyns kurt tom holvoet cs kuleuven ac autonomic system essentially characterized quality requirements specify system able adapt configure optimize heal varying circumstances situations 
quality requirements call architecture centric software engineering approach 
discuss illustrate architectural design complex real world distributed application autonomic quality requirements 
particular architecture autonomous entities agents managing warehouse logistics 
illustrate subsequent architectural decisions guided architecture situated multi agent systems hand functional quality requirements application hand 

software architecture generally acknowledged crucial part design software system 
architectural design architect shapes structures software system 
software architecture backbone designed solution meets functional requirements system aims satisfy essential quality requirements 
software architecture systems comprises different structures reflected different architectural views 
common module view provides modules containers holding responsibilities data flow relationships modules 
views concurrency view focuses dynamic aspects system parallelism synchronization deployment view describes allocation available processors system 
software systems built perform particular functionality 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
deas may st louis missouri usa 
copyright acm 
various stakeholders interested software system project managers developers users customers maintainers additional requirements regarding quality software system performance scalability adaptability maintainability today software engineers generally recognize quality requirements system primarily achieved software architecture 
architectural patterns developed realize particular quality requirements 
couple known patterns client server pipe filter layers blackboard 
architectures go step reuse best practices architectural design 
architecture defines architecture serves blueprint develop software architectures family applications characterized specific functional quality requirements 
autonomic systems quality requirements 
autonomic computing recognized viable solution challenge increasing complexity managing software systems 
autonomic system able adapt varying circumstances 
examples autonomic capabilities self configuration self healing 
autonomic systems essentially characterized quality requirements specify system able adapt changing situations design development autonomic systems call architecture centric software engineering approach 
importance architecture autonomic systems emphasized researchers see 
research study engineering complex distributed applications autonomic quality requirements 
example domains self managing networks decentralized control logistic machines warehouse 
flexibility adaptability openness important quality properties systems able adapt autonomously 
put forward situated multiagent systems situated mass approach build complex applications 
developed architecture situated mass guide development applications autonomic quality requirements 
discuss illustrate architectural design complex real world application autonomic properties 
show subsequent architectural decisions guided architecture situated mass hand functional quality requirements application hand 
overview 
remainder structured follows 
section elaborates situated mass architecture developed situated mass section discuss architectural design transportation system managing warehouse logistics illustrate applied architecture design real word application 
draw section 
architecture situated multiagent systems section briefly introduce situated mass motivate situated mass design autonomic applications 
give high level overview architecture developed situated mass situated multiagent systems situated mas consists distributed environment populated set autonomous entities agents cooperate solve complex problem decentralized way 
situated agents local access environment agent placed local context perceive act interact agents 
situated agent long term planning decide action sequence executed selects actions basis current position state world perceives limited internal state 
intelligence situated mas originates interactions agents individual capabilities 
situated mass agents environment order abstractions :10.1.1.154.5212
situated agents exploit environment share information coordinate actions 
digital pheromone example dynamic structure environment aggregates additional pheromone dropped diffuses space evaporates time 
agents pheromones dynamically form pheromone paths locations interest 
example gradient field propagates environment changes strength propagated 
agents gradient field guiding beacon 
situated mass applied success practical applications broad range domains 
examples manufacturing control supply chains systems network management 
cooperating agents situated environment natural concept manage complexity decentralized manner 
agents encapsulate behavior able adapt changes environment 
known benefits situated mass efficiency robustness flexibility 
fundamental properties situated mass suitable approach building applications 
architecture nutshell years developing architecture situated mass architecture embodies knowledge experiences acquired research 
architecture generalizes extracts common functions structures various experimental applica alternative descriptions behavior agents adaptive autonomous agents agents 
tions studied including simple peer peer file sharing system simulation automatic guided vehicle transportation system basic robot applications 
currently architecture applied agv automatic guided vehicle transportation system 
elaborate complex realworld application section 
goal architecture offer support software engineers architectural design complex decentralized applications autonomic properties 
place focus systems require self managing behavior respect dynamism change 
particular system able cope autonomously changing circumstances new agents may join system may leave environment may change topology characteristics throughput accessibility 
self configuration self protection discussed concerns focus 
table lists properties problem domains focus corresponding target quality properties architecture basic principles apply realize quality properties 
flexibility 




adaptability openness target quality properties architecture cope dynamism change 
flexibility enables system cope different environmental situations adaptability refers system capability adapt behavior time changing circumstances openness enables system cope expansion new agents join system reduction agents leave system 
main software engineering principles apply realize quality properties decentralized control collective behavior adaptive behavior 
manageability unambiguity target quality properties architecture cope complexity 
main software engineering principles apply realize quality properties modularity loose coupling separation concerns provide formal specification architecture 
give brief overview main modules architecture 
fig 
depicts high level module view architecture situated mas 
architecture integrates primary abstractions agents ongoing activities environment 
successively look architecture abstraction 
agents 
agent architecture models different concerns agent perception decision making communication sep org andy www site mai main php www cs kuleuven ac di ongoing activities 
agents introduced concept ongoing activity model processes system 
ongoing activity produces influences state environment 
examples ongoing activities moving object pheromone 
ongoing activities enable indirect coordination agents form basis collective behavior 
discusses ongoing activities detail 
poi 
high level module view architecture 
modules 
module maps local state environment percept agent 
developed model active perception enables agent direct perception relevant aspects environment current task 
consumption module consumes consumptions agent 
consumption effect reaction environment particular agent 
agent consumes consumption consumed effect absorbed agent acquires energy agent may simply hold element object picked consumption may affect agent state arm robot external force 
module integrates percepts consumptions update current knowledge agent 
decision module responsible action selection 
developed decision module free flow architecture 
free flow architectures allow flexible adaptive action selection 
existing free flow architectures lack explicit support social behavior introduced concepts role situated commitment 
role covers logical functionality agent situated commitment allows agent adjust behavior role commitment 
agent commit fulfill vital task 
collaboration agents commit relatively communication 
roles situated commitments building blocks collective behavior 
operator selected decision module passed module invokes influence environment 
influence attempt modify course events world 
communication module takes care communicative interactions 
developed communication module processes incoming messages produces outgoing messages defined communication protocols 
communication enables agents exchange information set collaborations reflected mutual situated commitments 
environment 
agents architecture environment models different concerns communication perception generation action handling separate modules 
ing module environment handles message transport 
module generates representations local state environment agents 
collector module collects influences produced agents ongoing activities passes reactor module 
calculates set domain specific laws reaction state changes environment consumptions agents 
thorough discussion influences reactions refer 

architectural design automatic guided vehicle transportation system section illustrate architectural design agv transportation system 
application investigated ongoing research project close cooperation manufacturer automated warehouse systems introduce application briefly discuss existing centralized approach 
discuss new autonomic quality requirements application illustrate applied architecture situated mass design new decentralized solution aims meet quality requirements 
agv transportation system agv transportation system uses unmanned vehicles agvs transport loads warehouse 
typical applications distributing incoming goods various branches distributing manufactured products storage locations 
agv uses battery energy source 
agvs move warehouse physical path factory floor guided laser navigation system magnets cables fixed floor 
functionalities 
main functionality agv transportation system perform handling transports moving loads place 
transports generated client systems 
client systems typically business management programs particular machines employees service operators 
transport composed multiple jobs job simple task assigned agv 
transport typically starts pick job followed series move jobs ends drop job 
order execute transports main functionalities system perform transport assignment transports assigned agvs execute routing agvs route efficiently layout www com home html 


warehouse executing transports best route agvs general dynamic depends current conditions system collision avoidance obviously agvs may collide 
agvs cross intersection moment safety measures necessary agvs pass closely located paths 
deadlock prevention system ensure necessary conditions deadlock hold 
agv idle park neighboring park location agv runs energy charge battery charging stations 
traditional approach traditionally vehicles controlled central server wireless communication 
server global knowledge system 
plans routes agvs incoming transports instructs agvs perform jobs 
server continuously polls agvs status 
low level control agvs terms sensors actuators staying track segment turning determining current position handled agv control software called layout factory divided logical elements segments nodes 
logical segment typically corresponds physical part path meters 
instructed drive agv segment drive agv segment pick drop load drive agv segment battery charging station start charging drive agv segment park 
new quality requirements 
evolution market put forward new requirements agv transportation systems 
customers request flexibility transportation systems agvs adapt behavior changing circumstances 
customers various requests respect flexibility adaptability discuss briefly number desired properties 
agvs able exploit opportunities agv assigned transport moves load possible agv switch tasks way interesting transport pops 
agvs able anticipate possible difficulties battery level agv decreases agv anticipate prefer zone near charge station 
desired property agvs able cope exceptional situations segment blocked agvs avoid segment 
summary flexibility adaptability high ranking quality requirements today agv transportation systems 
decentralized approach situated mas decentralized solution agv transportation system aims meet quality requirements flexibility adaptability 
vehicles autonomous agents decisions current knowledge coordinate agents ensure system processes transports time 
acronym navigation system robot 
section follow trace architectural design situated mas 
focus mainly module view architecture 
step refine particular module architecture motivate main architectural decisions 
step system decomposition situated mas 
toplevel agv transportation system modelled situated mas 
motivation 
decision making situated mas decentralized agents decide locally situated agents able react flexibly different situations adapt behavior changing circumstances 
properties situated mas valuable candidate cope target quality requirements 
hand decentralization control introduces additional complexity 
mas approach repository global knowledge available resolve conflicts agvs coordinate 
avoid communication bottleneck communication localized possible 
decentralized setup harder debug 
challenge project guarantee existing functionality aiming realize listed advantages mas approach 
fig 
depicts high level model view architecture mas solution 
situated mas consists environment 

module view architecture 
kinds agents transport agents agv agents 
transport agent represents transport system responsible determine priority transport assign transport agv ensure transport completed correctly 
priority transport depends kind transport pending time creation nature transports system 
transport agents interact related transport agents determine correct priority time 
agv agents responsible executing assigned transports 
environment provides communication infrastructure enables agents exchange information coordinate behavior 
physical infrastructure agvs equipped sensors actuators floor infrastructure guide agvs factory loads agvs transport part environment 
step look architecture environment steps elaborate architecture agv agents 
step environment architecture 
zoom architecture environment set layered architecture 
motivation 
cope complexity environment selected layers architectural pattern architecture 
layers separate functionality support reuse 
fig 
depicts model view architecture environment 
agv agents transport agents situated virtual 
virtual environment agv agents 

architecture environment 
environment located top layered architecture 
virtual environment uses middleware layer composed message transfer system enables agents communicate middleware 
bottom layer environment consists infrastructure communication physical infrastructure agv transportation system 
motivate clarify virtual environment 
goal middleware discussed paragraph 
detailed study virtual environment refer 
physical environment factory constrained restricts agents environment 
introduced virtual environment agents live 
virtual environment offers medium agents exchange information coordinate behavior 
virtual environment illustrated fig 

clarity simplified explanation details see 
look agv agents coordinate virtual environment avoid collisions 
agv agents mark path going drive environment hulls 
hull agv physical area agv occupies 
series hulls describes physical area agv occupies certain path see fig 

area marked hulls agv hulls intersect agv move drive reserved path 
agv removes markings virtual environment 
virtual environment road signs 
node layout sign virtual environment repre sents cost destination outgoing segment see fig 

cost segment average time takes agv drive segment 
agent perceives signs environment uses determine segment take 
transport agents virtual environment find agv agents assign transports follow progress assigned transports 
assign transport transport agent negotiates agv agents idle agvs near location load 
transport assigned awarded agv handles transport 
medium coordination virtual environment serves suitable abstraction shields agv agents low level issues physical control agv 
part middleware fully reused software deals low level control agvs 
agv agents control movement actions fairly high level 
deployment view environment 
explain virtual environment deployed system role middleware 
fig 
depicts deployment view agv transportation system 
deployment view shows software assigned hardware processing communication elements 
transport agents located transport bases 
agv agents located agvs situated factory floor 
agv transport base equipped processor 
communication infrastructure provides wired network connects client systems transport bases wireless network enables mobile agvs communicate transport agents 
avoid overload network agents typically communicate agents neighborhood 
physical infrastructure available agvs wireless network communicate virtual environment necessarily distributed 
effect agent system maintains local virtual environment local manifestation virtual environment 
synchronization state local virtual environment neighboring neighboring agents supported middleware 
local virtual environment uses middleware sharing objects tuplespace container called 
agv locally available 
objects remote agvs gathered view 
view specifies agvs object 


software architecture deployed agvs 

deployment view system architecture 
places need included view agvs specific range objects need included view hull objects 
fig 
depicts architecture software deployed agv 
agv agent shown top layer model 
layers correspond top layers architecture environment see fig 

step agv agent architecture data repository pattern 
zoom agv agent 
agv agent architecture corresponds agent architecture architecture basically modelled data repository pattern 
motivation 
data repository pattern supports separation concerns loose coupling 
fig 
depicts module view agv agent 
different concerns agent behavior perception communication decision making modelled separate modules architecture 
current knowledge module serves data repository different modules 
step decision making combination blackboard sequential processing 
conclude zoom decision making module 
decision making module set hybrid architecture combines blackboard pattern sequential processing 
motivation 
architecture combines complex interpretation data decision making subsequent levels abstraction 

agv agent architecture 
architecture decision making module depicted fig 

current knowledge module serves blackboard data structure action controller coordinates selection appropriate operator 
job selection action selection module selects action fairly high level move pick park 
action selection module modelled free flow architecture 
free flow architectures allow model flexible action selection 
described design process free flow architectures detail 
action generation module transforms action concrete preliminary operator move segment 
collision avoidance module responsible lock trajectory associated selected operator 
soon trajectory locked collision avoidance module passes confirmed operator action execution module 
subsequent phases selected operator executed obstacle detected selected trajectory feedback sent action controller inform appropriate module revise decision 
feedback loop enables flexible decision making 

formalization allow rigorously describe decomposition non functional requirements serve practical evaluation 
challenges project order assignment deadlock avoidance subsequently validation integral solution advanced setup 



decision module 
argued autonomic systems essentially characterized quality requirements specify system able adapt varying circumstances situations 
identified dynamism change complexity important properties problem domains building autonomic systems 
target quality properties architecture cope dynamism change flexibility adaptability openness 
target quality properties cope complexity manageability unambiguity 
put forward situated mass approach build decentralized applications autonomic quality requirements 
discussed architectural design self managing agv transportation system 
application agvs able exploit opportunities anticipate possible difficulties cope exceptional situations 
primary quality requirements enable self managing behavior flexibility adaptability 
illustrated architectural decisions guided architecture situated mass hand architectural patterns aim satisfy system requirements hand 
far validated solution industrial test setup physical agvs execute predefined batches jobs 
important lessons learned initial project phase architecture great instrument communication different stakeholders general architecture situated mass turned excellent guide architectural design complexity application forced decompose modules architecture concurrency view deployment view essential modular view build quality software complex problem agv transportation system 
intend formalize initial framework interpreting autonomic quality requirements 
bass clements kazman 
software architecture practice 
addison wesley 
bonabeau snyers kuntz theraulaz 
routing telecommunications networks ant agents 

brooks 
intelligence representation 
artificial intelligence journal 
chase 
autonomic computing roadmap 
www ibm com developerworks library ac roadmap 
ferber 
distributed artificial intelligence 
addison wesley 

autonomic computing era 
autonomic computing 
genesereth nilsson 
logical foundations artificial intelligence 
morgan 
kephart chess 
vision autonomic computing 
computer magazine ieee 
maes 
modeling adaptive autonomous agents 
artificial life journal 
parunak 
agent architecture manufacturing requirements agent system design 
integrated computer aided engineering 
sauter parunak 
ants supply chain 
agent decision support managing supply chains 
holvoet 
environment situated mass th joint conference autonomous agents multi agent systems 
shaw garlan 
software architecture perspectives emerging discipline 
prentice hall 
weyns holvoet 
design process adaptive behavior situated agents 
agent oriented software engineering lncs 
tyrrell 
computational mechanisms action selection 
university edinburgh 
weyns holvoet 
formal model situated mass fundamenta informaticae 
weyns parunak michel holvoet ferber :10.1.1.154.5212
environments multiagent systems state art research challenges 
lncs 
weyns holvoet 
exploiting virtual environment real world application 
second int 
workshop environments multiagent systems 
weyns holvoet 
protocol communication situated mass th joint conference autonomous agents multi agent systems 
weyns holvoet 
active perception situated multiagent systems 
journal applied artificial intelligence 
wooldridge 
multiagent systems 
john wiley sons england 

