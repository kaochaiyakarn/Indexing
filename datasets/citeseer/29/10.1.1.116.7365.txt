journal computer system sciences indexing moving points pankaj agarwal lars arge jeff erickson www elsevier com locate jcss center geometric computing department computer science duke university durham nc usa department computer science university illinois urbana il usa received december revised february propose indexing schemes storing set points plane moving linear trajectory query form answered quickly rectangle real value report points lie inside time indexing structure constant uses disk blocks answers query os block size 
report points lie inside time interval 
point inserted deleted trajectory point changed log os 
general approach improves query time queries arrive chronological order allowing index evolve time 
obtain tradeoff query time number times index needs updated points move 
describe indexing scheme number os required answer query depends monotonically difference query time stamp current time 
obtain tradeoff query time number times index needs updated points move 
describe indexing scheme number os required answer query depends monotonically difference query time stamp current time 
develop efficient indexing scheme answer approximate nearest neighbor queries moving points 
published elsevier science usa 
extended appeared proceedings th sigmod sigart symposium principles database systems :10.1.1.116.7365:10.1.1.38.6261
corresponding author 
mail addresses pankaj cs duke edu agarwal large cs uiuc edu arge cs uiuc edu erickson 
urls www cs duke edu pankaj www cs duke edu large www uiuc edu 
supported part national science foundation eia eia ccr army research office muri daah sloan fellowship israeli science foundation 
supported part national science foundation dms army research office muri daah sloan fellowship 
see front matter published elsevier science usa 
pii 
efficient indexing schemes support range searching variants central large database system 
relational database systems example dimensional range searching commonly operation :10.1.1.156.2115
various dimensional range searching problems crucial support new language features constraint query languages class hierarchies object oriented databases 
spatial databases geographic information systems gis range searching obviously plays pivotal role large number external data structures indexing schemes answering queries developed see 
need storing processing continuously moving data arises wide range applications including digital air traffic control mobile communication systems 
existing database systems assume data constant explicitly modified 
existing database systems assume data constant explicitly modified 
systems suitable representing storing querying continuously moving objects database continuously updated query output obsolete 
better approach represent position moving object function time changes object position require explicit change database system 
representation database needs updated function changes example velocity object changes 
extending capabilities existing database systems handle moving object databases mod see example :10.1.1.44.437:10.1.1.55.134:10.1.1.43.7536
focuses developing efficient indexing schemes storing set points moving xy plane range queries locations past answered quickly 
example spatio temporal query report points lie inside query rectangle minutes 
problem statement agarwal journal computer system sciences fp png set moving points xy plane 
time pi denote position pi time fp pn assume point pi moving fixed velocity formally pi ait bi ai trajectories points pi change time 
refer bounds linear introduce notation jn bn jk bn assume size internal memory 
previous results agarwal journal computer system sciences fig 

instances queries respectively 
detailed summary early temporal databases survey salzberg tsotras :10.1.1.44.437
early concentrated multiversion time series data 
activity developing data models query languages supporting continuously moving objects 
sistla wolfson developed temporal query language called temporal logic ftl supports proximity queries moving objects :10.1.1.55.134
sistla refined ftl proposed data model called moving objects spatio temporal moving objects :10.1.1.44.437
instances queries respectively 
detailed summary early temporal databases survey salzberg tsotras :10.1.1.44.437
early concentrated multiversion time series data 
activity developing data models query languages supporting continuously moving objects 
sistla wolfson developed temporal query language called temporal logic ftl supports proximity queries moving objects :10.1.1.55.134
sistla refined ftl proposed data model called moving objects spatio temporal moving objects :10.1.1.44.437
models extended incorporate important issues including uncertainty motion communication cost 
spatio temporal models :10.1.1.43.7536
number methods proposed accessing searching moving objects practice require os worst case query range empty :10.1.1.55.280:10.1.1.43.3132
detailed summary early temporal databases survey salzberg tsotras :10.1.1.44.437
early concentrated multiversion time series data 
activity developing data models query languages supporting continuously moving objects 
sistla wolfson developed temporal query language called temporal logic ftl supports proximity queries moving objects :10.1.1.55.134
sistla refined ftl proposed data model called moving objects spatio temporal moving objects :10.1.1.44.437
models extended incorporate important issues including uncertainty motion communication cost 
spatio temporal models :10.1.1.43.7536
number methods proposed accessing searching moving objects practice require os worst case query range empty :10.1.1.55.280:10.1.1.43.3132
proposed efficient indexing scheme partition trees storing set points moving real line :10.1.1.33.4042:10.1.1.37.5751:10.1.1.38.6261
activity developing data models query languages supporting continuously moving objects 
sistla wolfson developed temporal query language called temporal logic ftl supports proximity queries moving objects :10.1.1.55.134
sistla refined ftl proposed data model called moving objects spatio temporal moving objects :10.1.1.44.437
models extended incorporate important issues including uncertainty motion communication cost 
spatio temporal models :10.1.1.43.7536
number methods proposed accessing searching moving objects practice require os worst case query range empty :10.1.1.55.280:10.1.1.43.3132
proposed efficient indexing scheme partition trees storing set points moving real line :10.1.1.33.4042:10.1.1.37.5751:10.1.1.38.6261
uses disk blocks answers dimensional query type os allows point inserted deleted log os 
scheme uses nn disk blocks answers query type logb os assuming speed point changes 
sistla wolfson developed temporal query language called temporal logic ftl supports proximity queries moving objects :10.1.1.55.134
sistla refined ftl proposed data model called moving objects spatio temporal moving objects :10.1.1.44.437
models extended incorporate important issues including uncertainty motion communication cost 
spatio temporal models :10.1.1.43.7536
number methods proposed accessing searching moving objects practice require os worst case query range empty :10.1.1.55.280:10.1.1.43.3132
proposed efficient indexing scheme partition trees storing set points moving real line :10.1.1.33.4042:10.1.1.37.5751:10.1.1.38.6261
uses disk blocks answers dimensional query type os allows point inserted deleted log os 
scheme uses nn disk blocks answers query type logb os assuming speed point changes 
propose data structure answers queries type points moving requires os answer query worst case 
sistla refined ftl proposed data model called moving objects spatio temporal moving objects :10.1.1.44.437
models extended incorporate important issues including uncertainty motion communication cost 
spatio temporal models :10.1.1.43.7536
number methods proposed accessing searching moving objects practice require os worst case query range empty :10.1.1.55.280:10.1.1.43.3132
proposed efficient indexing scheme partition trees storing set points moving real line :10.1.1.33.4042:10.1.1.37.5751:10.1.1.38.6261
uses disk blocks answers dimensional query type os allows point inserted deleted log os 
scheme uses nn disk blocks answers query type logb os assuming speed point changes 
propose data structure answers queries type points moving requires os answer query worst case 
proposed data structure answering nearest neighbor queries moving points real line provide nontrivial bound time taken answer query 
uses disk blocks answers dimensional query type os allows point inserted deleted log os 
scheme uses nn disk blocks answers query type logb os assuming speed point changes 
propose data structure answers queries type points moving requires os answer query worst case 
proposed data structure answering nearest neighbor queries moving points real line provide nontrivial bound time taken answer query 
propose indexing scheme trees answering queries type worst case query time os :10.1.1.24.2262
see 
computational geometry community early moving points focused bounding number changes various geometric structures convex hulls delaunay points move :10.1.1.74.3527
notion kinetic data structures introduced led interesting results related moving objects including results kinetic space partition trees known cell trees :10.1.1.134.6921
main idea kinetic framework points move continuously relevant combinatorial structure changes certain predictable discrete times 
propose data structure answers queries type points moving requires os answer query worst case 
proposed data structure answering nearest neighbor queries moving points real line provide nontrivial bound time taken answer query 
propose indexing scheme trees answering queries type worst case query time os :10.1.1.24.2262
see 
computational geometry community early moving points focused bounding number changes various geometric structures convex hulls delaunay points move :10.1.1.74.3527
notion kinetic data structures introduced led interesting results related moving objects including results kinetic space partition trees known cell trees :10.1.1.134.6921
main idea kinetic framework points move continuously relevant combinatorial structure changes certain predictable discrete times 
update data structure continuously 
contrast fixed time step methods entire structure updated periodically fixed rate determined fastest moving object database kinetic data structures updated certain kinetic events occur 
proposed data structure answering nearest neighbor queries moving points real line provide nontrivial bound time taken answer query 
propose indexing scheme trees answering queries type worst case query time os :10.1.1.24.2262
see 
computational geometry community early moving points focused bounding number changes various geometric structures convex hulls delaunay points move :10.1.1.74.3527
notion kinetic data structures introduced led interesting results related moving objects including results kinetic space partition trees known cell trees :10.1.1.134.6921
main idea kinetic framework points move continuously relevant combinatorial structure changes certain predictable discrete times 
update data structure continuously 
contrast fixed time step methods entire structure updated periodically fixed rate determined fastest moving object database kinetic data structures updated certain kinetic events occur 
events natural interpretation terms underlying structure example trajectory point changes ory projections points coincide 
observe indexing scheme handle certain forms uncertainty velocity points affecting asymptotic performance 
index needs updated trajectory point changes call time oblivious index 
partition tree scheme time oblivious cost query relatively high 
sections show allowing index evolve time answer query logb os provided queries arrive chronological order 
achieved applying kinetic data structure framework external range tree :10.1.1.134.6921
kinetic range trees slightly worse performance developed internal memory setting 
structure uses logb logb logb disk blocks 
points move fixed velocity processes events processed log logb logb os 
structure works trajectories points polynomials fixed degree provided compute time ory coordinates points coincide 
point expected os 
inserted deleted amortized log 
geometric preliminaries agarwal journal computer system sciences order develop results need concepts results computational geometry 
geometric background refer reader textbook de berg explicitly assume distribution input points trajectories expectation taken outcome coin flips performed algorithm expected bounds hold input 
amortized expected cost update time mean rx expected cost performing sequence updates rt survey geometric range searching agarwal erickson :10.1.1.37.5751:10.1.1.38.6261
assume reader familiar standard randomized algorithms techniques see motwani raghavan details 

duality duality popular powerful technique geometric algorithms maps point line vice versa :10.1.1.37.5751
duality transform dual point ar line ax dual line ax point denote dual object point line set objects denote set dual objects fs note duality object essential property transformation point resp line dual point resp dual line dual strip vertical line segment sense point lies inside dual line intersects see fig 
geometric background refer reader textbook de berg explicitly assume distribution input points trajectories expectation taken outcome coin flips performed algorithm expected bounds hold input 
amortized expected cost update time mean rx expected cost performing sequence updates rt survey geometric range searching agarwal erickson :10.1.1.37.5751:10.1.1.38.6261
assume reader familiar standard randomized algorithms techniques see motwani raghavan details 

duality duality popular powerful technique geometric algorithms maps point line vice versa :10.1.1.37.5751
duality transform dual point ar line ax dual line ax point denote dual object point line set objects denote set dual objects fs note duality object essential property transformation point resp line dual point resp dual line dual strip vertical line segment sense point lies inside dual line intersects see fig 


external partition trees agarwal journal computer system sciences primal partition trees commonly internal memory data structures geometric range searching :10.1.1.38.6261
duality duality popular powerful technique geometric algorithms maps point line vice versa :10.1.1.37.5751
duality transform dual point ar line ax dual line ax point denote dual object point line set objects denote set dual objects fs note duality object essential property transformation point resp line dual point resp dual line dual strip vertical line segment sense point lies inside dual line intersects see fig 


external partition trees agarwal journal computer system sciences primal partition trees commonly internal memory data structures geometric range searching :10.1.1.38.6261
indexing scheme partition trees originally described extended external memory setting :10.1.1.33.4042:10.1.1.38.6261
briefly summarize emphasis insertion deletion operations slightly improve performance compared :10.1.1.33.4042:10.1.1.38.6261
order describe algorithm constructing partition tree need define concepts simplicial partitions interesting right 
set lines plane 
duality transform dual point ar line ax dual line ax point denote dual object point line set objects denote set dual objects fs note duality object essential property transformation point resp line dual point resp dual line dual strip vertical line segment sense point lies inside dual line intersects see fig 


external partition trees agarwal journal computer system sciences primal partition trees commonly internal memory data structures geometric range searching :10.1.1.38.6261
indexing scheme partition trees originally described extended external memory setting :10.1.1.33.4042:10.1.1.38.6261
briefly summarize emphasis insertion deletion operations slightly improve performance compared :10.1.1.33.4042:10.1.1.38.6261
order describe algorithm constructing partition tree need define concepts simplicial partitions interesting right 
set lines plane 
integer triangulation plane called cutting lines intersect interior triangle size cutting just number triangles 


external partition trees agarwal journal computer system sciences primal partition trees commonly internal memory data structures geometric range searching :10.1.1.38.6261
indexing scheme partition trees originally described extended external memory setting :10.1.1.33.4042:10.1.1.38.6261
briefly summarize emphasis insertion deletion operations slightly improve performance compared :10.1.1.33.4042:10.1.1.38.6261
order describe algorithm constructing partition tree need define concepts simplicial partitions interesting right 
set lines plane 
integer triangulation plane called cutting lines intersect interior triangle size cutting just number triangles 
weight function called weighted cutting total weight lines intersecting triangle total weight lines lemma follows known results computational geometry 
proof 
showed scaling weights lines appropriately problem computing weighted cutting reduced computing cutting unweighted lines 
assume line weight want compute cutting choose random subset ar lines constant line chosen equal probability 
compute arrangement face denote resulting triangulation 
triangle compute subset lines intersect interior standard random sampling argument implies log expected value nr assume size internal memory ja size step done nr os :10.1.1.125.6778
triangle integer ix choose random subset ai log lines compute arrangement rw compute triangulation rw rw set rw shown constant chosen appropriately high probability triangle intersects lines expected size cr constant expected number os needed step nr algorithm creates cr triangles run algorithm 
markov inequality probability happening expected number times run algorithm 
set points simplicial partition set pairs sr wr si disjoint subsets wi possibly unbounded triangle containing points corresponding subset si point may lie triangles belongs subset si see fig 

size denoted number subset triangle pairs 
simplicial partition balanced subset si contains points 
crossing number simplicial partition maximum number triangles crossed single line 
lemma states fast simplicial partition constructed 
bound proved smaller :10.1.1.33.4042:10.1.1.38.6261
lemma 
set points plane positive integer 
balanced simplicial partition size constructed nr expected os crossing number proof 
construct simple randomized algorithm 
apply lemma recursively build entire partition tree total expected construction time logb os 
want able answer queries type find points inside query strip order visit top fashion 
suppose node leaf report points sv lie inside test triangle wi pv wi lies completely outside ignore wi lies completely inside report points si traversing ith subtree crosses wi recursively visit ith child note spend os node point reported exactly 
nv denote number os required answer query starting node excluding kv os report kv output points 
analysis find nv obeys recurrence constant defined proof lemma nv nv nv rv arbitrarily small positive constant :10.1.1.33.4042:10.1.1.38.6261
induction nv prove nv pa constant provided choose sufficiently large eq 
definition rv inequality obviously true rv nv nv provided nv cb rv cb induction hypothesis nv nv cbs cba nv cb cb cb pa nv provided choose completes induction proof 
putting conclude query answered os constant proportionality depends spend os nodes visited query procedure 
handle insertions deletions partial rebuilding technique overmars 
insertion deletion changes logb counters amortized cost insertion deletion log expected os 
theorem 
set points parameter preprocess external partition tree size blocks points inside query strip os 
index constructed logb expected os points inserted deleted amortized cost log expected os 
exploiting duality transformation described section show dimensional external partition trees efficiently answer range queries linearly moving dimensional points follows :10.1.1.37.5751
set moving points interpret time second spatial dimensions traces set lines xt plane 
denote set static points dual lines 
dimensional query asks lines traced intersect horizontal line segment equivalently points lie inside query strip 
query answered partition tree described 
set moving points interpret time second spatial dimensions traces set lines xt plane 
denote set static points dual lines 
dimensional query asks lines traced intersect horizontal line segment equivalently points lie inside query strip 
query answered partition tree described 
theorem framework achieve query space bounds improve bound log os insertion deletion :10.1.1.37.5751
query type dimension report points lying interval time interval equivalent reporting lines intersect rectangle report lines separately reporting lines intersecting bottom top left edges separate copies level partition tree 
note moving point may reported twice 
obtain 
corollary 

time oblivious indexing describe indexing scheme answer queries points plane 
set linearly moving points xy plane 
points trace lines threedimensional space time setting query asks lines intersect rectangle parallel xy plane 
proposed mapping line point partition trees answer queries resulting query time quite large :10.1.1.37.5751
multilevel partition tree 
multilevel data structures general technique allows answer complex queries decomposing simpler components designing separate data structure component 
see general discussion powerful technique :10.1.1.38.6261
observe line intersects projections xt yt planes intersect 
points trace lines threedimensional space time setting query asks lines intersect rectangle parallel xy plane 
proposed mapping line point partition trees answer queries resulting query time quite large :10.1.1.37.5751
multilevel partition tree 
multilevel data structures general technique allows answer complex queries decomposing simpler components designing separate data structure component 
see general discussion powerful technique :10.1.1.38.6261
observe line intersects projections xt yt planes intersect 
apply duality transformation xt yt planes described section 
moving point xy plane induces static points dual xt plane dual yt plane respectively 
subset respectively denote corresponding points dual xt plane dual yt plane 
fanout resulting structure uses blocks answers queries rn expected os 
example fanout primary tree quad tree resulting structure uses log blocks answers queries log expected os 

extensions agarwal journal computer system sciences conclude section briefly sketch extensions data structures 
extensions combine results section existing techniques computational geometry omit details :10.1.1.38.6261
higher dimensions building levels partition trees generalize results constant number dimensions 
particular set points moving fixed velocity 
point traces line dimensional space time xd earlier line intersects orthogonal rectangle dimensional space projections dimensional plane intersect map point pas dimensional point dual plane map query rectangle strip dual plane 
point lies construct level partition tree plane proceed dimensional case 
suppose position point pas polynomial degree time parameter point traces algebraic curve space time 
case linear motion curve intersects horizontal rectangle projections xt plane yt plane intersect 
map polynomial curve equation point gn ad ar point ar hyperplane pn xd pd vertical segment pq maps slab sn bounded hyperplanes pn qn intersects vertical line segment point reduce query type pair slab queries static points answer high dimensional slab queries construct external partition tree exactly dimensional case 
performance data structure deteriorates dimension 
combining earlier analysis techniques described show query time dimensional slab query os :10.1.1.33.4042:10.1.1.38.6261
combine higher dimensional partition trees multilevel data structure exactly linear motion 
theorem 
set points moving polynomial function degree parameter preprocess index size blocks query answered os 
index constructed log expected os points inserted deleted amortized cost log expected os 
index constructed logb expected os points inserted deleted amortized cost log expected os 

dimensional chronological queries sections describe significantly improve query time allow data structure change time allow queries current time 
approach extended handle queries time long arrive chronological order 
develop results kinetic data structure framework :10.1.1.134.6921
main idea store combinatorial snapshot moving points time 
points moving continuously data structure depends certain combinatorial properties sorted order points andy axis changes discrete instants called events 
event occurs perform kinetic update data structure 
know points move predict event occur 
rational motion fixed degree events constant depends degree motion 

query update tradeoffs agarwal journal computer system sciences going perform queries inefficient spend logb os evolving kinetic tree events 
combine kinetic tree external partition tree obtain tradeoff cost answering queries total number kinetic events 
construction similar general technique establish tradeoffs data structure size query time :10.1.1.38.6261
set linearly moving points convert set lines xt plane denote set points dual lines 
construct partition tree described section 
node associated subset points 
set points corresponding pv set nv parameter discard nodes parents associated points 
set linearly moving points initial positions velocities uniformly distributed parameter store index size blocks current range query answered logb expected os 
expected amortized cost kinetic event trajectory change logb os 
trajectories points change expected number events 
dimensional chronological queries section extends results section complex case moving points plane 
called kinetic external range tree kinetic range tree developed external range tree optimal query cost developed arge :10.1.1.134.6921
give brief overview external range tree section discuss section 
section discuss query update tradeoff similar onedimensional case 

external range trees agarwal journal computer system sciences external range tree level structure :10.1.1.134.6921
called kinetic external range tree kinetic range tree developed external range tree optimal query cost developed arge :10.1.1.134.6921
give brief overview external range tree section discuss section 
section discuss query update tradeoff similar onedimensional case 

external range trees agarwal journal computer system sciences external range tree level structure :10.1.1.134.6921
primary structure tree coordinates points similar tree fanout logb range xv associated node tree natural way range subdivided logb slabs children store coordinates slab boundaries tree slab containing query point determined logb logb os 
set points coordinates lie range xv set nv sv stored secondary data structures associated structures tree bv sv coordinates points keys 
structures external versions priority search tree 
external priority search tree answer sided range queries reporting points lying rectangle form logb os 
map point pn yp yq sn resulting set points 
construct points lying range form reported logb os 
note point pn yp yq lies range yp yq intersects horizontal line see fig 

interval slab logb point pn stored store pointer leaf stores corresponding point external priority search trees trees linear space point stored secondary structures logb logb logb nodes path root leaf storing coordinate structure logb logb logb blocks total :10.1.1.134.6921
agarwal journal computer system sciences fig 

slabs corresponding node primary tree 
find points rectangle answer sided queries find lowest point slab bottom rectangle walk upwards points inside slabs external range trees find points inside query rectangle log os follows :10.1.1.134.6921
interval slab logb point pn stored store pointer leaf stores corresponding point external priority search trees trees linear space point stored secondary structures logb logb logb nodes path root leaf storing coordinate structure logb logb logb blocks total :10.1.1.134.6921
agarwal journal computer system sciences fig 

slabs corresponding node primary tree 
find points rectangle answer sided queries find lowest point slab bottom rectangle walk upwards points inside slabs external range trees find points inside query rectangle log os follows :10.1.1.134.6921
find log log log log log log os highest node lie different slabs suppose lies range vi range vj query rectangle naturally decomposed parts xvi qc see fig 

points contained reported log os vi vj respectively 
report points query find lowest point lies qc pointer corresponding point 
report points query find lowest point lies qc pointer corresponding point 
trees report points qc total number os needed log perform update external range tree need perform updates secondary structures log log log levels base tree 
updates take log os external priority search tree updated log os 
needs update primary structure 
arge discuss done log log log amortized os weight balanced tree :10.1.1.134.6921
lemma arge :10.1.1.134.6921
set points stored index log log log blocks range query answered log os 
points inserted deleted amortized cost log log log os 
external priority search trees 
trees report points qc total number os needed log perform update external range tree need perform updates secondary structures log log log levels base tree 
updates take log os external priority search tree updated log os 
needs update primary structure 
arge discuss done log log log amortized os weight balanced tree :10.1.1.134.6921
lemma arge :10.1.1.134.6921
set points stored index log log log blocks range query answered log os 
points inserted deleted amortized cost log log log os 
external priority search trees 
discuss linear space external priority search tree answering queries form set points log os 
answer sided query start root external priority search tree proceed recursively appropriate subtree 
node query catalog structure av report points av lies xvi coordinates points av lie xvi recursively query vi see fig 

query procedure visits logb nodes lies xv node visited query procedure reported points parent coordinates lie xv follows query procedure reports points logb os 
fact catalog structure updated os arge showed update external priority search tree logb os obtained :10.1.1.134.6921
lemma arge :10.1.1.134.6921
set points stored external priority search tree size blocks sided range query answered log os 
points inserted deleted log os 
catalog structure 
node query catalog structure av report points av lies xvi coordinates points av lie xvi recursively query vi see fig 

query procedure visits logb nodes lies xv node visited query procedure reported points parent coordinates lie xv follows query procedure reports points logb os 
fact catalog structure updated os arge showed update external priority search tree logb os obtained :10.1.1.134.6921
lemma arge :10.1.1.134.6921
set points stored external priority search tree size blocks sided range query answered log os 
points inserted deleted log os 
catalog structure 
describe called catalog structure answering sided range queries set points os 
sweep line reaches point xj yj consecutive blocks bi bi fewer points lying line yj top coordinate rectangles bi bi set yj longer keep track bi bi sweep 
new block br created rectangle left coordinate right coordinate bottom coordinate yj br contains points bi bi lie line yj sweep continues manner line reaches point blocks created 
see fig 

entire catalog structure constructed os :10.1.1.134.6921
answer sided query load catalog blocks main memory os 
identify blocks rectangle intersects bottom edge query range 
load blocks main memory time report relevant points 
query takes os consecutive pair blocks possibly blocks containing contributes points output 
structure easily dynamic global rebuilding 
updates simply logged extra block updates full entire structure rebuilt scratch os 
amortized cost insertion deletion os 
query spend extra examining ensure query results consistent recorded updates 
lemma arge :10.1.1.134.6921
set points stored index size blocks sided range query answered os 
index constructed os points inserted deleted amortized cost os 

kinetic external range trees discuss external range tree store moving points quickly answer range queries current time 
kinetic trees event occurs points value kinetic range trees event occurs pair points share common coordinate 
events update kinetic data structure log os 
sequence event times updated ki version time ti time ti notational convenience define current time ti ti idea maintain versions ki ki ki parameter maintain past versions versions note versions ki ki tentative built anticipating events current trajectories points 
trajectory point changes versions structure change 
storing ki explicitly store differences ki ki ideas persistent data structures :10.1.1.74.3527
main differences structures standard persistent data structures 
storing past versions maintain past versions delete past version old 
second maintain versions data structure update trajectory point changes 
multiversion kinetic trees 
main differences structures standard persistent data structures 
storing past versions maintain past versions delete past version old 
second maintain versions data structure update trajectory point changes 
multiversion kinetic trees 
case dimensional moving points directly apply ideas becker verma obtain persistent multiversion tree :10.1.1.74.3527
roughly speaking data element augmented life span consisting time element inserted possibly time deleted 
similarly node tree augmented life span 
say element node alive life span 
apart normal tree constraint number elements node maintain node contains alive elements children life span 
amortized cost kinetic event log os 
point stored places index update trajectory log os 
multiversion external kinetic range trees 
recall external range tree levels 
primary secondary structures variants trees store different versions adapting standard techniques :10.1.1.74.3527
discussing describe third level structure catalog structure av stored node priority search tree 
structure answers sided range queries set points 
recall av maintains extra update block records updates kinetic events kinetic events occurred av reconstructed old version av discarded 
maintain multiple versions av modify update query procedures follows 
best internal data structures currently known prohibitively large slow query times 

indexing scheme described section extended bounds theorem hold worst case just random points trajectories 
believe techniques authors may helpful answering question 
agarwal journal computer system sciences arcview gis arcview tracking analyst :10.1.1.33.4042
agarwal arge erickson indexing moving points proceedings th annual principles database systems pp :10.1.1.116.7365:10.1.1.38.6261

agarwal arge erickson vitter efficient searching linear constraints comput :10.1.1.33.4042:10.1.1.38.6261
system sci 

indexing scheme described section extended bounds theorem hold worst case just random points trajectories 
believe techniques authors may helpful answering question 
agarwal journal computer system sciences arcview gis arcview tracking analyst :10.1.1.33.4042
agarwal arge erickson indexing moving points proceedings th annual principles database systems pp :10.1.1.116.7365:10.1.1.38.6261

agarwal arge erickson vitter efficient searching linear constraints comput :10.1.1.33.4042:10.1.1.38.6261
system sci 

believe techniques authors may helpful answering question 
agarwal journal computer system sciences arcview gis arcview tracking analyst :10.1.1.33.4042
agarwal arge erickson indexing moving points proceedings th annual principles database systems pp :10.1.1.116.7365:10.1.1.38.6261

agarwal arge erickson vitter efficient searching linear constraints comput :10.1.1.33.4042:10.1.1.38.6261
system sci 

agarwal arge time responsive indexing scheme moving points proceedings seventh workshop algorithms data structures pp 

system sci 

agarwal arge time responsive indexing scheme moving points proceedings seventh workshop algorithms data structures pp 

agarwal erickson geometric range searching relatives chazelle goodman pollack eds advances discrete computational geometry contemporary mathematics vol :10.1.1.38.6261
american mathematical society providence ri pp 

agarwal erickson guibas kinetic binary space partitions intersecting segments disjoint triangles proceedings computational geometry pp 

agarwal erickson guibas kinetic binary space partitions intersecting segments disjoint triangles proceedings computational geometry pp 

arge external memory data structures abello pardalos eds handbook massive data sets kluwer academic publishers dordrecht pp 

arge vitter dimensional optimal range search indexing proceedings th principles database systems pp :10.1.1.134.6921

arge vitter optimal dynamic interval management external memory proceedings th ieee symposium foundations computer science pp 

guibas data structures mobile data proceedings acm discrete algorithms pp :10.1.1.134.6921
arge vitter dimensional optimal range search indexing proceedings th principles database systems pp :10.1.1.134.6921

arge vitter optimal dynamic interval management external memory proceedings th ieee symposium foundations computer science pp 

guibas data structures mobile data proceedings acm discrete algorithms pp :10.1.1.134.6921

guibas zhang proximity problems moving points proceedings th annual acm symposium computational geometry pp 

becker seeger widmayer asymptotically optimal multiversion tree vldb 

chazelle friedman deterministic view random sampling geometry 
agarwal journal computer system sciences chomicki revesz geometric framework specifying spatiotemporal objects proceedings sixth international workshop time representation reasoning pp 

clarkson algorithm approximate closest point queries proceedings th annual acm symposium computational geometry pp :10.1.1.37.5751

clarkson applications random sampling computational geometry ii discrete comput 
geom 


clarkson applications random sampling computational geometry ii discrete comput 
geom 

de berg van overmars computational geometry algorithms applications springer berlin :10.1.1.37.5751
queries voronoi diagrams moving points comput 
geom 
theory appl 


metric entropy classes sets differentiable boundaries approx 
theory 
erwig schneider vazirgiannis discrete modeling spatiotemporal data types symposium pp 
erwig schneider developments spatio temporal query languages dexa workshop :10.1.1.37.5751
schneider data model data structures moving objects databases proceedings sigmod international conference management data pp 

gaede multidimensional access methods acm comput 
surveys 

gunopulos tsotras nearest neighbor queries mobile environment proceedings international workshop spatio temporal database management lecture notes computer science vol 
springer berlin pp 

gunopulos tsotras indexing mobile objects proceedings principles database systems pp :10.1.1.37.5751

koubarakis complexity query evaluation indefinite temporal constraint databases theor 
comput 
sci 
system sci 

jensen theodoridis novel approaches query processing moving objects proceedings international conference large databases 
agarwal har star tree efficient self adjusting index moving points proceedings fourth workshop algorithm engineering experiments 
ramaswamy subramanian path caching technique optimal external searching proceedings principles database systems pp :10.1.1.55.134

agarwal journal computer system sciences salzberg tsotras comparison access methods time evolving data :10.1.1.44.437
surveys 
samet applications spatial data structures computer graphics image processing gis addison wesley reading ma 
jensen theodoridis novel approaches query processing moving objects proceedings international conference large databases 
agarwal har star tree efficient self adjusting index moving points proceedings fourth workshop algorithm engineering experiments 
ramaswamy subramanian path caching technique optimal external searching proceedings principles database systems pp :10.1.1.55.134

agarwal journal computer system sciences salzberg tsotras comparison access methods time evolving data :10.1.1.44.437
surveys 
samet applications spatial data structures computer graphics image processing gis addison wesley reading ma 
sharir agarwal davenport sequences geometric applications cambridge university press new york :10.1.1.74.3527
sistla wolfson temporal conditions integrity constraints active database systems proceedings acm sigmod international conference management data pp :10.1.1.55.134

agarwal journal computer system sciences salzberg tsotras comparison access methods time evolving data :10.1.1.44.437
surveys 
samet applications spatial data structures computer graphics image processing gis addison wesley reading ma 
sharir agarwal davenport sequences geometric applications cambridge university press new york :10.1.1.74.3527
sistla wolfson temporal conditions integrity constraints active database systems proceedings acm sigmod international conference management data pp :10.1.1.55.134

sistla wolfson chamberlain dao modeling querying moving objects proceedings ieee international conference data engineering pp :10.1.1.44.437

agarwal journal computer system sciences salzberg tsotras comparison access methods time evolving data :10.1.1.44.437
surveys 
samet applications spatial data structures computer graphics image processing gis addison wesley reading ma 
sharir agarwal davenport sequences geometric applications cambridge university press new york :10.1.1.74.3527
sistla wolfson temporal conditions integrity constraints active database systems proceedings acm sigmod international conference management data pp :10.1.1.55.134

sistla wolfson chamberlain dao modeling querying moving objects proceedings ieee international conference data engineering pp :10.1.1.44.437

wolfson quadtree dynamic attribute indexing method comput 
samet applications spatial data structures computer graphics image processing gis addison wesley reading ma 
sharir agarwal davenport sequences geometric applications cambridge university press new york :10.1.1.74.3527
sistla wolfson temporal conditions integrity constraints active database systems proceedings acm sigmod international conference management data pp :10.1.1.55.134

sistla wolfson chamberlain dao modeling querying moving objects proceedings ieee international conference data engineering pp :10.1.1.44.437

wolfson quadtree dynamic attribute indexing method comput 

verma efficient multiversion access structure ieee trans :10.1.1.74.3527
sistla wolfson chamberlain dao modeling querying moving objects proceedings ieee international conference data engineering pp :10.1.1.44.437

wolfson quadtree dynamic attribute indexing method comput 

verma efficient multiversion access structure ieee trans :10.1.1.74.3527
knowledge data eng 

jensen indexing positions continuously moving objects proceedings international conference sigmod management data pp :10.1.1.24.2262


verma efficient multiversion access structure ieee trans :10.1.1.74.3527
knowledge data eng 

jensen indexing positions continuously moving objects proceedings international conference sigmod management data pp :10.1.1.24.2262

wolfson chamberlain jiang cost imprecision modeling position moving objects proceedings ieee international conference data engineering pp 

wolfson jiang sistla chamberlain deng databases tracking mobile units real time proceedings international conference database theory pp 
