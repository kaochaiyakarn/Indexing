rd working conference reverse engineering monterey california november catalog object model transformations michael blaha william premerlani omt associates mo blaha acm org ge corporate ny premerlani crd ge com process software development gradually achieving rigor 
proficient developers construct software indirectly abstraction models 
models allow developer focus essential aspects application defer details 
transformations extend power models developer substitute refinement optimization models tedious manipulation code 
catalogs object modeling transformations encountered application 

transformations prominent theme literature 
working conferences reverse engineering mention interest transformations 
principle kinds transformations function data 
concerns transformations data 
literature explains theory transformations data motivates surprisingly lists small number specific transformations 
presents list primitive transformations object models 
claim list complete comprehensive list 
uses omt notation modeling data structure 
omt object model essentially extended entity relationship model 
object model characterizes static structure things objects 
looks structure terms groups analogous objects classes similarities differences generalization important relationships associations 
appendix summarizes omt notation 

transformation concepts transformation mapping domain object models range object models 
think transformation accepting source object model pattern yielding target object model pattern 
pattern excerpt object model parameters placeholders classes associations 
apply transformation object model aligning source pattern model substituting instantiated target pattern 
shows transformations 
top portion specifies transformations depending direction read diagram 
read left right shows transformation partitioning class 
designer may choose split class smaller classes replicating information 
read right left shows merge transformation 
circumstances combined form bottom portion shows example transformations 
database may store personal business information person represent information single class split information classes 
models correct choice models depend purpose scope application 
personal business information idea separate 
modest amount personal business information may easier just combine 
angle brackets denote placeholder class instantiated transformation 
substitute person example 
arrow notation indicate transformation gains loses information 
transformation direction arrow yields model equal semantic content 
designer need add information allow transformation proceed direction arrow 
conversely transformation direction arrow yields model increased semantic content 
designer assert additional information allow catalog object model transformations transformations 


note attribute association replicated 
subclass generalization subclasses generalization 
superclass subclasses multiply inherit 
example person personname personname personname sample transformations example transformation proceed 
bidirectional arrow denotes equivalence transformation 
classify transformations categories depending gain lose information 
equivalence transformation 
source target object models describe sets instances source instance corresponds exactly target instance 
similarly target instance corresponds exactly source instance 
equivalence transformation may lose gain incidental information object model association names role names 
information losing transformation 
source model constrained target model 
instances source model described target model instances target model described source model 
transformation loses information applied left right partition transformation 
class implicit relationship attributes may enforced separate classes 
information gaining transformation 
source model constrained target model 
instances target model described source model instances source model described target model 
transformation gains information applied right left merge transformation 
software developer assert correspondence merge transformation occur 
transformations local effect model 
transformation affects constructs align source pattern associations generalizations connect classes 

transformations software engineering transformations purposes software engineering 
forward engineering 
applying series transformations designer simplify optimize model 
transformations allow consider implementation needs language database independent manner 
reverse engineering 
reverse engineer takes implementation artifacts deduces underlying logical intent 
transformations allow explicitly note assumptions processing implementation artifacts 
schema integration 
transformations useful mapping enterprise model application models 
mappings prerequisite allowing common data flow applications 
schema evolution 
transformations facilitate data conversion 
transformation associated commands migrate data source target 
software development tools currently provide little support transformations 
describes exception 
useful think terms transformations 
eventually tools capable 

catalog primitive transformations primitive transformation transformation decomposed lesser transformations 
section presents primitive transformations 
claim list complete presentation informal 
transformations single construct type 

remove add construct 

assert construct derived derived 

degrade restrict multiplicity 

transform multi valued attribute 

reorder attributes 

transform enumeration attribute 

partition construct merge constructs 

compose associations 
transformations multiple construct types 

combine associated classes partition class 

move attribute association 

move attribute generalization 
page michael blaha william premerlani catalog object model transformations 
move association generalization 
modifying inheritance 

remove add subclass 

push subclass information specialize 

fragment multiple inheritance 

factor multiple inheritance 
conversions 

convert generalization exclusive associations 

convert qualifier link attribute 

convert link attribute object attribute 

convert association class 
remove add construct transformations modify model removing adding construct 
may remove add class association object attribute link attribute 
transformations especially helpful reverse engineering rigorously track decisions 
class note attributes associations superclasses subclasses 
association note association ary aggregation 
association qualifiers link attributes multiplicity possible 
attribute 
remove add construct assert construct derived derived transformations allow mark construct derived derived 
transformations helpful fine adjustments model 
degrade restrict multiplicity 
note applies object attributes link attributes 
shows may degrade restrict multiplicity association object attribute link attribute 
example reverse engineering may class association note association ary aggregation 
attribute 

note applies object attributes link attributes 
assert construct derived derived association multiplicity note 
associations ary aggregation qualifiers link attributes 
attribute multiplicity 

note 
applies object attributes link attributes 
degrade restrict multiplicity prior understanding application able reduce multiplicity association 
notation denotes multiplicity range 
see appendix 
transform multi valued attribute shows transformations multi valued attribute 
may concatenate multi valued attribute single attribute longer length may replace multivalued attribute parallel attributes 
transformations equivalence transformations 
example transformation consider street number attribute class address stores street location person 
represent page michael blaha william premerlani catalog object model transformations concatenation 
transform multi valued attribute ber array lines characters single string characters parallel attributes characters long 
reorder attributes 
note 
length length 
applies object attributes link attributes 
parallel attributes 

note 
applies object attributes link attributes 
interchanges attributes 
may change order object attributes link attributes 
transformation equivalence transformation useful making model understandable 


note applies object attributes link attributes 
reorder attributes transform enumeration attribute shows transformations enumeration attributes 
substitutes multiple boolean attributes object attribute link attribute enumeration 
example replace enumeration attribute color values red green blue attributes green 
transformation left right loses information boolean attributes constrained mutually exclusive 
transforms association enumerated qualifier multiple associations 
enumeration attribute 
en 
note enumeration values en 
applies object attributes link attributes 
enumeration qualifier transform enumeration attribute partition construct merge constructs may transformations partition construct merge constructs shows 
general merge gains information designer assert merge logically meaningful allowed occur 
example earlier 
illustrate respectively 
compose associations 
note enumeration values en 
associations multiplicity transformation equivalence transformation 
associations may aggregations assembly component aggregations 
form new association composing associations 
add composed association derived association object model 
may remove constituent association composed association longer derived 
similar partition merge transformations 
difference forward transformation partitions set links link left side described associations right 
contrast combines links form new link 
shows example 
divisions employs persons 
represent persons directly working 
combine associated classes partition class shows combine classes intervening association 
equivalence en page michael blaha william premerlani catalog object model transformations class 
association 

note attribute association replicated 
subclass generalization subclasses generalization 
superclass subclasses multiply inherit 
note 
associations ary aggregations qualifiers link attributes 
xz compose associations note association may formed arbitrary number associations 
associations ary may link attributes aggregations 
division person attribute 

division person example note 
applies object attributes link attributes 
partition construct merge constructs parent person child person personname mother person child example example child father person personname transformation special case attribute association generalizations 
illustrates 
address located city state 
choose simplify model combine cityname 
basic transformation 



note transformation right adds attributes associations generalizations association qualifiers link attributes 
special case attribute association generalizations 


combine associated classes partition class moving attribute association move attribute class shows 
alternatively just add migrated attribute mark derived 
transformation equivalence transformation equal association qualified 
page michael blaha william premerlani catalog object model transformations address city state basic transformation cityname statename 


address cityname example 
moving attributes generalization levels transformations move attribute generalization level 
special case attribute promoted superclass 
illustrates 
asset portfolio 
shift attributes generalization levels reverse engineering part optimizing model 
moving associations generalization levels transformations move association generalization level 
special case association promoted superclass 
illustrates 
distribution list electronic mail may contain addresses address turn may electronic mail address person distribution list 
remove add subclass state statename 

note association may aggregation qualifiers link attributes 
transformation equivalence transformation equal 
move attribute association removes adds subclass 
successively applying left right transformation push information superclass subclasses 
superclass superclass successive applications collapse inheritance hierarchy direct superclass 


note generalization exhaustive 
may arbitrary number subclasses 
special case move attribute subclass 





note may arbitrary number subclasses 
move attribute generalization name description asset portfolio example description asset name portfolio name push subclass information specialize eliminate generalization level pushing attributes associations generalizations subclasses superclass 
helpful eliminate generalization manipulating object model opposed eliminating generalization implementation 
transformation equivalence transformation special case subclasses attributes associations 
page michael blaha william premerlani catalog object model transformations basic transformation note generalization exhaustive 
may arbitrary number subclasses 
class may subclasses 




associations ary aggregations may qualifiers link attributes 
associations qualifiers link attributes transformation left 
special case move association subclass note may arbitrary number subclasses 
class may subclasses 
association ary aggregation may qualifiers link attributes 
move association generalization 
note source generalization may may exhaustive 
may arbitrary number subclasses 
transformation right attributes associations superclasses added 
transformation left attributes associations superclasses match 
remove add subclass basic transformation note source generalization may may exhaustive 
may arbitrary number subclasses 
special case subclasses attributes associations 
en enum 
note enumeration domain values en 
subclasses may attributes associations generalizations 
address address push subclass information specialize multiple inheritance arounds personal address distribution list personal distribution address list example similarly normally prefer address arounds multiple inheritance implementation object model 
helpful eliminate multiple inheritance transforming object model 
show transformations fragmenting factoring subclass 
deal multiple inheritance converting generalizations exclusive associations transformation 
page michael blaha william premerlani catalog object model transformations 

note generalizations may may exhaustive 
generalizations may arbitrary number subclasses 
attributes associations generalizations 
fragment multiple inheritance note generalization exhaustive 
may arbitrary number subclasses 
exclusive associations may qualifiers link attributes 
equivalence transformation single subclass 
convert generalization exclusive associations note 

association may aggregation 
convert qualifier link attribute factor multiple inheritance note generalizations may may exhaustive 
generalizations may arbitrary number subclasses 
classes attributes associations class 
classes attributes associations class 

association may aggregation 
conversions category transformations deals conversions kind object modeling construct 
converts generalization exclusive associations 
converts qualifier link attribute 
converts link attribute object attribute 
consequently composition transformations convert qualifier object attribute 
converts association class 
transformation left right loses derivation identity association class 
convert link attribute object attribute note association ary 
convert association class page michael blaha william premerlani catalog object model transformations illustrates successive application transformations reverse engineering 
transformations reverse engineering data dictionary relational database 
apply convert table object attribute link attribute 
apply convert table qualifier 
cluster 
transformations key concept improving rigor software engineering 
transformations allow developer perform design remaining realm models 
listed transformations data discovered industrial 
list extensive seen literature 
presentation informal believe important contribution literature 
promising areas deepen theoretical base develop formal treatment transformations better document catalog transformations 
encountered difficulties formalism 
topic transformations heavy reading formal mathematical treatment difficult read 
secondly full theory transformations intrinsically complex 
find difficult fully specify preconditions postconditions invariants transformations easy overlook details 
sure define completeness prove set transformations complete 
related table table cluster table table cluster table table example written excellent papers transformations 
describes database software development tool 
notable semantic support simple transformations 
discusses philosophy db main tool successor 
db main supports forward engineering progression analysis design implementation reverse engineering evolution populated databases 
db main incorporates transformations replay transformations model replay transformations helpful model changes developer wishes reconsider evolution model 
papers describe equivalence transformations transformations loss gain information 
rosenthal equivalence transformations designer lose information analysis 
contrast adopt permissive viewpoint designers may transformations add lose information aware consequences 
transformations add information especially needed reverse engineering compensate optimizations imperfect decisions missing information 
presents comprehensive list transformations seen literature 
presents additional transformations 
cross transformations 
presents transformations mapping simple attributes compound attributes regard minor list 
description transform number batini transform number remove add class remove add association remove add attribute partition merge class partition merge association partition merge attribute compose decompose association combine partition classes association remove add subclass push subclass specialize convert enum attribute generalization cross transformations batini chapter discusses schema transformations orm approach modeling 
orm extension niam approach modeling 
page michael blaha william premerlani catalog object model transformations explanation benefit transformations dealing database applications 
carlo batini stefano ceri navathe 
conceptual database design entity relationship approach 
redwood city california benjamin cummings 
rosenthal david reiner 
theoretically sound transformations practical database design 
proceedings entity relationship conference 
jl marchand 
tra mis transformation base database case tool 
proceedings th international conference software engineering applications toulouse december ec publish 
jl jm hick roland 
database evolution db main approach 
proceedings entity relationship conference manchester uk 
terry halpin 
conceptual schema relational database design second edition 
sydney new south wales prentice hall australia 
rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design 
prentice hall englewood cliffs new jersey 
michael blaha william premerlani 
object oriented modeling design database applications 
prentice hall englewood cliffs new jersey published early 
van 
niam information analysis method 
unpublished 
information systems department control data netherlands 
appendix 
summary omt notation summarizes omt constructs included 
class describes objects common attributes behavior semantic intent 
class denoted rectangle 
attributes may suppressed displayed second portion class box 
may specify attribute multiplicity brackets attribute name 
lower value attribute multiplicity usually nulls allowed nulls allowed 
upper value attribute multiplicity usually single valued infinite multi valued 
generalization organizes classes similarities differences denoted triangle 
simple generalization superclass instances subclasses 
may optionally list discriminator attribute generalization triangle discriminator indicates subclass instance applies superclass instance 
omt supports forms multiple inheritance 
class class class attribute 
association link attribute association class class qualified association association class qualifier rolename multiplicity associations class class class 
zero generalization subclass class zero multiplicity range superclass subclass class exactly omt syntax association relates instances classes indicated line 
multiplicity specifies instances class may relate instance associated class 
multiplicity range describe multiplicity lower multiplicity usually zero upper multiplicity usually infinite 
association may qualified case qualifier attribute refines multiplicity 
example directory files combination directory file name corresponds file 
role association may assigned explicit name shown class qualified association 
instances association may described attributes call link attributes 
box attached association loop denotes link attribute 
page michael blaha william premerlani 
