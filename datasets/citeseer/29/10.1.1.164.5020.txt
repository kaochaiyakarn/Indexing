controller synthesis timed automata eugene asarin oded maler amir pnueli joseph sifakis institute information transmission problems bol 

moscow russia 
asarin ras ru verimag av 
de france 
maler joseph imag fr department computer science weizmann institute science rehovot israel 
amir wisdom weizmann ac il tackle problem timed automaton restrict transition relation systematic way remaining behaviors satisfy certain properties 
extension problem controller synthesis discrete event dynamical systems addition choosing actions controller option doing time pass 
problem formulated notion real time game winning strategy constructed xed point operator space states clock con gurations 

problem synthesizing controllers discrete event systems studied extensively di erent titles computer science bl tb pr control rw kg communities 
extend basic synthesis algorithm treat systems quantitative timing information modeled powerful model timed automata ad 
rest section give short tutorial game theoretic formulation synthesis problem 
section de ne formally solve problem discrete systems 
essence just state language reformulation ramadge wonham theory 
section devoted introducing model timed game automaton formulation synthesis problem solution proof correctness 
discuss implications results 
preliminary topic reported authors mps amp extensive bibliography appear 
game theoretic view controller synthesis interaction controller plant supposed supervise seen research supported part european community projects hybrid ec vhs research russian foundation basic research 
variant ofthe person antagonistic games introduced von neumann morgenstern nm 
strategy game rule tells controller choose possible actions game position 
strategy winning controller rules wins de nition winning matter environment 
strategy extraction nite state games done max min principle nm disguised searching trees elimination alternating pair logical quanti ers principle illustrated game depicted gure 
game starts position 
controller choose actions environment choose 
winning condition speci ed subset 
run game winning ends element suppose case controller winning strategy state chooses adversary take reach state 
chooses adversary reach state 
winning position 
consider game transition structure winning strategy controller making force environment 
fig 

simple game 
trivial essence synthesis algorithm fact obscured fancy technicalities 
mathematical formulation notion game statespace operator assigning set denoting controllable predecessors set states controller force adversary example 
calculating operator set theoretical operations constitutes core synthesis algorithm 
formalizing solving discrete problem section turn timed case state space contains continuous clocks see passage time adds problem complexity 

untimed systems assume players controller environment play state space instant game player chooses admissible action game progresses mutual choice players 
strategy restriction set admissible actions state order remaining runs system meet certain criteria 
game automata bea nite sets actions 
de nition 
game automaton 
game automaton ga tuple enabling conditions types actions transition function indicates state reached performing joint action 
assume de ned de nition 
steps runs 
joint step 

run sequence nite nite joint steps form 

denote set runs starting set states reachable arun denoted reach set states reachable run denoted reach 
automaton non blocking non blocking automaton nite run extended nite 
denote set states de ned 
restriction denoted jq ga de nes arena players play 
winning run de ned di erent acceptance condition 
conditions classify run bad number times certain states visited 
strategy restriction remaining runs accepting 
amp focus basic condition safety essentially means avoid forbidden states 
mps forthcoming additional acceptance criteria discussed corresponding synthesis algorithms 
safety games safety game goal player keep game inside subset winning states game states properly chosing actions prevent game going outside straightforward solution restrict automaton remove choices lead outside procedure lead blocking situation iterative procedure needed order assure winning states state automaton proceed inde nitely leaving de nition 
controller synthesis games 
ga tb set controller synthesis problem synth nd maximal subset maximal jg automaton ta tb jq non blocking 
fact im reach plied 
relation called winning strategy set set corresponding winning states 
usually smaller states leaving unavoidable removed 
smaller jq transitions lead bad consequences removed 
calculation performed iterative process removes bad transitions states operator de nition 
controllable predecessor 
ga operator de ned 
words doing forces game matter 
algorithm calculating proceeds calculating sequence automata asfollows algorithm 
winning strategy games 
jg repeat claim 
properties algorithm 
automaton de ned nonblocking chosing drive automaton outside steps 
proof induction base case follows trivially initialization algorithm 
suppose true 
de nition exists unavoidable step leading induction hypothesis runs extended length state unavoidable run length greater leaving nite set sequences monotone decreasing algorithm converges nite number steps 
corollary 
correctness algorithm 
result algorithm 
non blocking reach subset satisfying included real time games 
timed system real time games outcome players actions depend timing performing action completely di erent consequences 
games take model timed automata ad automata equipped auxiliary continuous variables called clocks grow uniformly automaton state 
clocks interact transitions participating pre conditions guards certain transitions possibly reset transitions taken 
continuous time setting player choose moment wait time take transition 
case consider adversary action possibility wait time perform action synthesizing controller timed automata careful letting players win preventing time progressing race achilles 
timed nite set states ir integer clock space 
denote elements xd zero vector 
elements called con gurations 
subset called zone obtained boolean combination form xi xi xi xj kg 
set zones denoted 
properties subsets extend naturally subsets say zone written nite union sets form pi pi zones 
function reset function sets coordinates argument leaves intact 
set functions denoted 
assume nite sets actions special empty action de nition 
timed game automaton 
timed game automaton tga tuple tb zone state clock spaces distinct action alphabets timing constraints types actions functions indicate state reached performing possibly joint action clocks reset occasion 
requirements state action set fx ag zone 
assume xed largest constant de nition tga 
similar requirements hold assume identity function sides refrain action happens 
require automaton strongly non zeno cycle transition graph automaton induced transition resets clock variable xi zero transition xi 
important condition prevents controller environment toachieve goals unrealistic tricks time 
restriction set con gurations denoted jz set con gurations de ned denoted 
intuitively automaton con guration time progress long players agree take action 
transition taken 
formalized follows de nition 
steps runs 
joint step tga 
time step duration 

discrete step 

run tga starting sequence joint steps 

nite arbitrarily large time steps enabled con guration nite sum durations time steps diverges 
note means agree time progress amount 
hand possible reach state permitted players case thing happen transition 
tga non blocking nite run extended full run 
set runs starting denoted 
set con gurations reachable discrete step con gurations reachable run reach union reachable con gurations steps 
reach denote con gurations reachable runs starting notation 

timed safety games de nition 
controllers timed games 
tga zone controller synthesis problem synth nd maximal subset maximal automaton ta tb jz non blocking reach calculation winning strategy set winning con principle similar untimed case 
predecessor operator adapted treat passage time 
single operator untimed case operators indicating active transition take force game indicating safe wait 
non trivial combination iterative procedure 
de nition 
timed controllable predecessor 
tga 
operators active predecessors passive predecessors de ned follows 

intuition de nition 
operator untimed small technical subtlety third line considered active transition transition 
operator de nes con guration con guration take transitions lead con gurations force game stay true true point active transition taken 
con gurations gain amount time losing 
motivates de nition 
de nition 
operator 
operator de ned follows uz words con guration uz letting time pass guaranteed leave reaching 
de nition 
timed predecessors 
operator de ned lemma 
properties 
run discrete transition starting making reachable unavoidable run discrete step leaving algorithm calculating algorithm 
strategy timed games 
jg repeat claim 
properties algorithm 
run having steps starting doing keep automaton inside chosing drive automaton outside steps 
proof induction base case follows trivially initialization algorithm 
suppose true lemma know step leaves automaton inside unavoidable step leading induction hypothesis runs length greater starting stay state unavoidable run length greater leaving corollary 
partial correctness algorithm 
suppose algorithm jz associated tga 
reach subset satisfying included closure zones remains show algorithm converges 
claim 
properties zones 
nitely zones 
set zones closed boolean operations 
zone reset inverse image fx zone 
zone projection past past fx zone 
zones zone 
rst properties standard context timed automata see ad 
operation statement novelty introduced operator 
order prove statement claim rewrite set fx cg distance note past 
leave reader prove second third terms correspond boundary ects zones 
concentrate main rst term formula order state zone nd special representation distance function auxiliary notion 
de nition 
call function ir piecewise trivial represented form di xk di nite set di stand integer constants di zones 
lemma 
piecewise trivial functions min max piecewise trivial set fx zone 
proof suppose di xk di ej xl ej di max ej di ej fij di ej fij fij fx di xk ej xl course zone 
de nition closure zones intersection max piecewise trivial 
proof min similar 
consider fij 
desired set union sets form di ej fij 
lemma 
distance zone piecewise trivial 
zone 
function piecewise trivial 
proof 
consider rst case convex 
represented intersection halfspaces xi xi xj stands proceed induction number half spaces number faces 
consider rst single half space cases fx xi cg fx xi xj cg 
case past case 
fx xi cg 
xi suppose result holds consider zone faces 
represented ci faces 
easy see past max past virtue lemma max piecewise trivial 
piecewise triviality ofd immediate 
arbitrary non convex nite union convex zones ci 
case min ci result immediate convex case lemma 
concludes proof claim 
closure properties zones imply zone 
corollary 
termination 
algorithm terminates nite number steps 
proof previous claim set zones nite closed operator 
iterations nite set xed point guaranteed 
theorem 
main result 
controller synthesis timed safety games decidable solved algorithm 
results timed controller synthesis models correspond roughly timed automaton 
exception aware wh ramadge wonham approach applied nite state quotient timed automaton region graph ad 

discussion timed automata model variety phenomena including approximations continuous dynamical systems digital circuits delays scheduling problems manufacturing multimedia timing analysis embedded software 
algorithm described useful application domains 
prototype version implemented verimag experimental results reported 
techniques applied principle general classes hybrid systems continuous dynamics complicated clock 
cases course hope algorithm guaranteed terminate 
wong toi describes similar procedure linear hybrid systems systems state continuous variables evolve xed derivative 
lts authors combine approach concepts optimal control order treat general hybrid systems 

ad alur dill theory timed automata theoretical computer science 
amp asarin maler pnueli symbolic controller synthesis discrete timed systems hybrid systems ii lncs springer 
bl buchi landweber solving sequential conditions finite state operators trans 
ams 
kg kumar garg modeling control logical discrete event systems kluwer 
mps maler pnueli sifakis 
synthesis discrete controllers timed systems proc 
stacs lncs springer 
nm von neumann morgenstern theory games economic behavior princeton university press 
pr pnueli rosner 
synthesis reactive module proc 
th acm symp 
princ 
prog 
lang pages 
rw ramadge wonham supervisory control class discrete event processes siam control optimization 
lts tomlin sastry synthesizing controllers nonlinear hybrid systems hybrid systems computation control lncs springer 
tb trakhtenbrot barzdin finite automata behavior synthesis north holland amsterdam 
wong toi synthesis controllers linear hybrid automata proc 
cdc 
wh wong toi ho mann control dense real time discrete event systems technical report stan cs stanford university 
