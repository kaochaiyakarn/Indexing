traceability fine grained constraints interactive inconsistency management pieter van gorp frank dirk janssens pieter dirk janssens ua ac department mathematics computer science universiteit antwerpen belgium frank gmail com database information systems university paderborn germany 
software engineering multi person activity creating multiversion software 
model driven methodology software artifacts expressed variety languages variety tools 
manage inconsistencies arise software models needs means describe consistency constraints detect violations correct models accordingly 
presents lessons learned building platform development interactive consistency maintenance software 
established requirements engineering case study illustrates need developer interaction controlled tolerance inconsistencies 
motivates fine grained consistency constraints detailed traceability metamodel 
specification software system embedded control software large information system monolithic 
consists contributions different disciplines requirements engineering security enterprise architecture 
models system development different perspectives different levels abstraction 
parts overlap contain redundant information case interdependent 
software system results specification free errors parts specification need consistent 
consistency ieee degree uniformity standardization freedom contradiction documents parts system component 
uses definition narrow sense focussing software models need kept free contradiction 
software models treated graphs nodes represent model elements 
nodes attributes name author visibility edges represent links model elements 
object oriented model edges represent associations method calls type declarations treat text documents models nodes case sections chapters set relationships various models part specification perceived interconnection graph joins independent models 
fig 

consistency relationships objects illustrates relationships differ expressiveness generic related relationships precise relationships formal constraints defined 
note ieee defines traceability degree relationship established products development process especially products having predecessor successor master subordinate relationship 
relationships definition established mind software developer 
defines traceability links software artifacts relations explicit interconnection graphs called traceability models 
union traceability model models connects called integrated model 
illustrate role traceability models tools interactive consistency maintenance 
consistency achieved manually reviews inspections automatically tools evaluate constraints restore consistency constraints satisfied 
maintaining consistency course development important intensive time consuming automation desirable 
degree automation achieved highly dependent development environment existing processes tools 
trade costs degree automation developers obtain 
want discuss spectrum consistency maintenance approaches introduce instances specifically cavit representatives manual automatic consistency maintenance respectively 
portray carried combine approaches icons tool supports interactive consistency maintenance 
structured follows section presents models case study motivate need consistency maintenance techniques 
section introduces reader functionality implementation challenges tools tool net 
section presents side tool spectrum discussing cavit framework 
section contains core contribution 
illustrates need interaction controlled inconsistencies fine grained consistency constraints tools icons 
obviously concludes summarizing lessons learned 
case study give realistic idea models need kept consistent section presents domain specific models sample application 
application meeting scheduler problem statement proposed van lamsweerde benchmark requirements elicitation software specification techniques 
problem statement benchmark published deliberately imprecise incomplete :10.1.1.53.2348:10.1.1.70.7884
part problem statement reads follows meetings typically arranged way 
meeting initiator asks potential meeting attendees information personal agenda set dates attend meeting referred exclusion set set dates prefer meeting take place referred preference set 
meeting date defined pair calendar date time period 
exclusion preference sets contained time interval prescribed meeting initiator referred date range 
initiator asks active participants provide special equipment requirements meeting location overhead projector workstation network connection telephones 
may ask important participants state preferences meeting location 
actual goal system propose optimal meeting location date streamline communication participants meeting 
proposed meeting date belong stated date range exclusion sets furthermore ideally belong preference sets possible 
date conflict occurs date 
requirements specification distinguishes different conflict types describes ways resolving 
subsection presents conceptual model formalizes concepts associations multiplicities problem domain 
subsection presents robustness model confirm meeting case scenario 
fragments merely illustrate realistic dependencies models different languages regarded complete stable specification meeting scheduler 
sample models meant constraints subsections concrete 
contraints violations designed application modeled conceptual robustness diagrams examples meeting scheduler assist reader bridging gap application model layer language model layer mof metadata architecture 
conceptual model shows conceptual model cm meeting scheduler application specified uml syntax 
conceptual level analysts free constructs association classes views language features 
features may supported directly implementation language allow represent problem domain way close possible perception reality 
fig 

conceptual model meeting scheduler application 
complete conceptual model contains relevant nouns verbs problem domain classes operations 
establish traceability paragraph describing natural language words relate requirements specification 
adequate basis automating consistency maintenance models 
developers may want tool support navigating model element related elements model 
robustness model model view controller mvc pattern beneficial system evolvability 
rosenberg scott propose move analysis design creating robustness models 
user interface screens represented boundary objects interfaces persistent classes conceptual model represented entities application behavior encapsulated control objects services 
set architectural rules services allowed access entities assists developers create evolvable design 
shows robustness model rm application study 
note entity schedule corresponds class schedule 
model describes way meeting confirmed initiator 
logging initiator directed main user interface screen application 
select particular meeting click confirm meeting button 
action triggers update meeting status booking meeting location 
fig 

robustness model meeting scheduler application 
success case confirmed sending mail meeting attendees 
manual consistency maintenance section illustrates tools assist developers manual construction traceability links 
discuss may want restrict tool support low level automation 
user experience manual traceability tool allows create navigate links model elements 
shows user may request links related word meeting requirements document 
popup shows word related model element name meeting application model 
model stored uml tool contains conceptual robustness model 
developers perform completeness checks set traceability links 
may example check class conceptual model traces word requirements document 
underlying rationale check artificial concepts conceptual model avoided possible 
implementation challenges traceability tool models residing commercial shelf cots development tools 
basili boehm define cots components software characteristics buyer access source code vendor controls development nontrivial user base 
unfortunately features component may match buyer requirements completely usually supports part development process 
fig 

screenshot operating requirements document meeting scheduler 
poses number integration challenges 
extension adaptation component limited mechanisms provided vendor 
secondly components unaware 
thirdly vendor bound adhere standards focuses implementing set features gain competitive edge competitors 
lastly buyer limited influence development component 
visions specific buyer vendor may diverge forcing buyer exchange component 
needs common language reason model elements traceability links 
metamodel language originally supported directed undirected binary links 
ocl code formalizes constraint described previous subsection metamodel undirected ary traceability links classes cm trace word requirements document boolean cm forall link select class word node select role word size note constraint doesn need actual content text processor repository 
illustrates useful constraints enforced knowing precise metamodels integrated tools 
exploits observation implementing minimalistic metamodel basis bus integration cots tools doors word matlab stateflow 
exposing jmi interfaces traceability models repository integrated seamlessly expressive repositories containing conceptual robustness model elements 
ocl constraint executed federated repository integrated model 
automatic consistency maintenance model driven engineering stepwise refinement supported means automatic model transformations increase developer productivity enforce consistency 
cavit mof compliant framework extends principles design contract implementation model transformations 
allows architects formalize relationship transformation rules consistency constraints maintain object oriented manner 
transformation rules implemented methods class holds input output models 
consistency constraints implemented transformation contracts 
contract defined pair constraints postcondition describes effect transformation method set models provided precondition satisfied 
cavit extends traditional design contract requiring postcondition corresponds invariant transformation class contained :10.1.1.70.7884
implementing desired consistency constraints invariants postconditions instance transformation class maintain consistency contained models 
specifically time invariant violated transformation object cavit engine call transformation method postcondition corresponds invariant precondition holds point time 
user experience suppose developer completed conceptual model meeting scheduler doing noun verb analysis requirements specification 
wishes optimize robustness application building design model respects model view controller principles 
wants construct robustness model main cases 
developer wants conceptual model basis persistent entities robustness model 
want clutter conceptual model upcoming design details 
decides copy classes conceptual model robustness model mark entities 
ideally construction initial robustness model conceptual model supported development tool 
cavit software architects build library transformations developers apply black box manner 
section illustrates conceptual model transformed automatically minimalistic robustness model 
application developers launch transformation click button 
implementation challenges cavit built integration cots modeling tools 
particular challenge repositories tools changed 
suitable guidelines design transformation model transformation repository wrapped seamlessly application model repositories 
specifically associations transformation class metaclass application models specified 
summary software architect needs provide artifacts mof compliant definition transformation class declarative consistency contract stating transformation method establish kind consistency constraint constructive body satisfying contract 
context running example discusses detail 
constraint section expresses classes conceptual model correspond entities robustness model 
sample consistency contract boolean cm forall cc classifier rm exists rc classifier traces exists node exists content cc node includes content rc cc name rc name rc entity cc attributes forall ca cc rc attributes rc attributes exists ra note attributes defined class ca name ra name ca type name ra type name represent type ca type ra type different class copied take care potentially built types cm includes ra type constraint complex asserts existential qualitative properties variety concepts models classes attributes 
acceptable automatically establishing global model property particular constraint violation scenario particular precondition 
coarse grained associated set small transformations maintain parts constraint interactive manner 
decomposed section 
interactive consistency maintenance previous sections create impression inconsistencies corrected automatically 
number authors argued inconsistencies tolerated certain circumstances overly strict consistency maintenance foolish 
nuseibeh argue inconsistency treated differently 
reflected proposed consistency maintenance process consisting phases monitor inconsistencies diagnose inconsistencies means locating identifying classifying handle inconsistencies 
proposed actions ignore tolerate resolve inconsistency 
tolerating inconsistency mean defer circumvent ameliorate 
user experience icons supports consistency maintenance process combining facilities previous sections 
cavit monitor consistency constraints formalized ocl 
diagnosis supported automatically semiautomatically 
specifically model transformation automatically assess particular violation repair developer intervention 
added value cavit icons enables transformations set violating model elements developer 
developers transform elements manually provide parameters cavit backend 
specify particular inconsistency ignored manipulating property traceability link 
transformation multiple constraints satisfied violated ignored 
state visualized means traffic light analogy 
constraint arbitrary number traceability links may constraints 
state individual traceability links computed demand 
specifically developers request highlight model elements cause particular inconsistency 
infrastructure icons allows developers query links related elements 
implementation challenges pointed transformation metamodel needs enable developers ignore inconsistencies 
secondly icons offer interactive user experience constraints checked fine grained manner 
synchronization finegrained constraints realized means different classes traceability links 
specifically illustrates subclass link provided set related model element types 
string ac ua transformations fix violated boolean boolean transformation link ac ua metamodels traceability boolean false transformation model cm rm class attribute attribute fig 

mof instance representing transformation model defines structure transformation traceability links 
navigability associations ensures model class uml metamodel remains unaffected transformation 
link unaffected association 
subclasses link defined transformation model stored proper repository 
ocl fragment illustrates part consistency classes entities checked fine grained constraints evaluate class conceptual model traces entity robustness model boolean rm undefined cm forall cmc rm exists rmc select class entity exists node contains cmc node contains rmc evaluate classifiers including entities nodes related class entity link name name match boolean select class entity forall relevant links user marked name ignored node forall couple nodes content elements name content name content name models cavit backend icons contains callbacks interacting developers 
transformation iteratively selects classes related entities different name traceability link allowed ignored 
pair class entity system prompts user interaction 
specifically user indicate inconsistency solved automatically ignored solved manually 
automatic case user indicate class name precedence entity name 
manual case system highlights conflicting pair model editor 
behavior states modeled story patterns primitive graph rewriting rules 
contain callback mof compliant user interaction methods 
detailed discussion thereof left due space restrictions extended version 
icons platform development interactive consistency maintenance software 
consists code generators interfacing repositories java metadata interface jmi standard minimalistic jmi library methods implementing interaction model transformations software developers proof concept plugin modeling tool 
parts icons application maintaining consistency conceptual models robustness models requirements documents written natural language 
case study demonstrated complex consistency constraints decomposed smaller ones 
enables tool check fine grained consistency color conventions related control flow name match related interaction loop select violating classes entities select violating classes constraint name name name match true time code name reconciled name new object auto ignore manual auto equals manual equals ignore equals code topdown set link status ignore set link status ignore code reconcile names manually new object equals topdown equals topdown set name entity name class set name entity name class set name class name entity set name class name entity fig 

story diagram models class reconciled related entity different name 
constraints fragments models coarse grained constraints violated model fragments 
coupling decomposed constraints consists navigation traceability links type 
group constraints expresses particular type traceability link exist number model elements group constraints expresses properties need satisfied related model elements 
interplay consistency constraints enabled elaborating traceability metamodels cavit 
specifically icons transformation model extends generic cavit traceability metamodel subclassing link metaclass set related model element types 
additionally case study illustrates inconsistencies tolerated controlled manner 
fact boolean attribute link metaclass sufficiently enables check link consistent developer allowed inconsistent 
attributes exposed developers dedicated user interface working traceability links 
project investigated user interface approaches interacting artifacts application model centric approach tabular representations traceability data graph approach traceability model elements treated uniformly application model elements 
experience initial icons tool prototype realized plugin realizes application centric tabular representation traceability links 
summarizing case study illustrated traceability links treated class software artifacts 
allows manage inconsistencies checking fine grained constraints may violated controlled manner 
traceability links support developers navigation inconsistent models 
essential data structure communication interactive model transformations software developers 
sponsored belgian national fund scientific research fwo formal support transformation software models 
sponsoring provided european research training network syntactic semantic integration visual modeling techniques 

ieee editor 
ieee standard computer dictionary compilation ieee standard computer glossaries 
institute electrical electronics engineers 

lamsweerde darimont massonet 
meeting scheduler system problem statement 
technical report universit catholique de louvain partement ing informatique louvain la neuve belgium 

feather fickas finkelstein van lamsweerde 
requirements specification exemplars 
automated software engineering 

object management group 
meta object facility mof specification 
object management group 
version 
available download url cgi omg org doc formal 

object management group 
unified modeling language uml march 
version 
document id formal 

nakatani atsushi 
constructing class evolution model 
fourth asia pacific software engineering international computer science conference page clear water bay hong kong december 
ieee computer society 

doug rosenberg kendall scott 
case driven object modeling uml practical approach 
addison wesley longman publishing boston ma usa 

victor basili barry boehm 
cots systems top list 
computer 

pieter van gorp dirk janssens 
cavit consistency maintenance framework visual model transformation transformation contracts 
cordy mmel winter editors transformation techniques software engineering number dagstuhl seminar proceedings 
internationales und forschungszentrum informatik schloss dagstuhl germany 

pieter van gorp hans dirk janssens 
copying subgraphs model repositories 
th international workshop graph transformation visual modeling techniques lncs vienna austria april 
springer 

anthony finkelstein 
foolish consistency technical challenges consistency management 
proceedings th international workshop database expert systems applications 

nuseibeh steve easterbrook russo 
leveraging inconsistency software development 
computer pp 


frank pieter van gorp dirk janssens 
icons interactive consistency maintenance platform 
technical report universiteit antwerpen department mathematics computer science antwerpen belgium 

