reasoning conditional ceteris paribus preference statements craig boutilier dept computer science university british columbia vancouver bc cs ubc ca ronen brafman department math cs ben gurion university beer israel brafman cs bgu ac il holger hoos david poole dept computer science university british columbia vancouver bc cs ubc ca domains desirable assess preferences users qualitative quantitative way 
representations qualitative preference orderings form important component automated decision tools 
propose graphical representation preferences reflects conditional dependence independence preference statements ceteris paribus equal interpretation 
representation compact arguably natural 
describe search algorithms dominance testing representation algorithms quite effective especially specific network topologies chain treestructured networks polytrees 
preference elicitation important aspect automated decision making 
space possible actions decisions available fixed understood dynamics variable component decision making process preferences user behalf decision 
case domains product configuration medical diagnosis name 
extracting preference information users generally arduous human decision analysts developed sophisticated techniques help elicit information decision makers 
key goal study computerbased decision support construction allow preference elicitation process automated partially fully 
particular methods extracting representing reasoning preferences naive users especially important ai applications users expected patience ability provide detailed preference relations utility functions 
applications ranging collaborative filtering recommender systems product configuration medical decision making typical users may able provide qualitative rankings fairly circumscribed outcomes 
ideally preference representation applications capture statements natural users assess reasonably compact support effective inference particularly deciding outcome preferred dominates 
explore network representation conditional preference statements ceteris paribus equal assumption 
semantics local preference statements capture classical notion conditional preferential independence cp network conditional preference network representation allows statements organized precise way 
describe inference algorithms dominance queries show efficient certain classes networks general network structures 
conditional ceteris paribus semantics requires user specify specific interest features impact preferences values 
instantiation relevant features parents user specify preference ordering values parents assuming instantiated values instance may preferred tof andh hold 
preference ceteris paribus interpretation preferred tof andh equal 
words fixed instantiation remaining features outcome wheref holds preferred wheref holds andh 
statements arguably quite natural appear places commerce applications 
instance product selection service offered active buyer guide asks unconditional ceteris paribus statements assessing user preference various products 
conditional expressions offer greater flexibility 
generally tools representing reasoning ceteris paribus preferences important aid elicitation process naive users 
see www com 
tools ask semi quantitative information preferences 
preference elicitation complex task key focus decision analysis especially elicitation users 
automating process preference extraction difficult 
straightforward approaches direct comparison pairs outcomes generally infeasible number reasons including exponential number outcomes number relevant features preferences indicated complexity questions asked comparison complete outcomes 
considerable exploiting structure preferences utility functions way allows appropriately decomposed :10.1.1.31.4716
instance certain attributes preferentially independent assign degrees preference attribute values worrying attribute values 
furthermore assumes stringent conditions construct additive value function attribute contributes preference certain degree weight attribute 
instance common engineering design problems assumptions simply require users assess weights 
allows direct tradeoffs values different attributes assessed concisely 
case approaches considered 
models preference elicitation process easier imposing specific requirements form utility preference function 
consider representation offer appropriate tradeoff allowing flexible preference expression imposing particular preference structure 
specifically cited conditional preference statements permitted 
remainder organized follows 
section describe necessary background preference functions 
define graphical preference model section describe semantics terms ceteris paribus conditional preferential independence statements 
cp semantics local preference statements considered somewhat weak surprisingly strong regarding dominance drawn network structure 
section consider task answering dominance queries search sequence preferred preferred alternatives leading potentially dominating dominated outcome 
formally define search space describe completeness preserving pruning techniques 
section describe search strategies heuristics designed effectively certain types problems 
show heuristics backtrack free certain types networks backtrack types 
describe view problem planning problem 
conclude section briefly describe cp nets applications 
sorting product database preferences product features allowing preferred products identified consumer 
second cp nets constraint optimization 
offer thoughts research 
preference relations focus attention single stage decision problems complete information ignoring issues arise multi stage sequential decision analysis considerations risk arise context uncertainty 
outline relevant notions decision theory 
assume world number number performed 
action performed state specific outcome concern uncertainty action effects knowledge state 
set outcomes denoted preference ranking total preorder set outcomes means equally preferred decision maker 
aim decision making certainty knowledge specific state choose action preferred outcome 
note ordering different different decision makers 
instance different customers radically different preferences different types computer systems sales program helping configure 
states certain outcomes result actiona outcomes obtain called feasible outcomes givens 
instances mapping states actions outcomes quite complex 
decision scenarios actions outcomes may equated user allowed directly select feasible outcome select product desirable combination features 
states may play role single state 
decision problem difficult fact outcomes actions preferences usually represented directly 
focus preferences 
assume set features variables attributes ff decision maker preferences 
associated domain feature ffi take 
product set outcomes 
direct assessment preference function usually infeasible due exponential size 
denote particular assignment values concatenation partial assignments ifx complete outcome 
fortunately preference function specified partially specified concisely exhibits sufficient structure 
issues include assigning preferences sequences outcome states assessing uncertainty beliefs system dynamics assessing user attitude risk 
iff describe certain types structure referring detailed description structural forms discussion implications 
notions standard multi attribute utility theory 
set preferentially independent complement ziff words structure preference relation assignments tox features held fixed matter values features take 
relation holds say preferred ceteris paribus 
assess relative preferences assignments knowing preferences change attributes vary 
define conditional preferential independence analogously 
letx set nonempty conditionally preferentially independent ziff words preferential independence holds assigned relation holds assignments conditionally preferentially independent 
decomposability preference functions allows identify preferred outcomes readily 
unfortunately ceteris paribus component definitions ensures statements relatively weak 
particular imply stance specific value tradeoffs 
instance suppose bare preferentially independent preferences values assessed separately andb 
clearly preferred outcome anda feasibility constraints impossible satisfied ofa ora 
tell preferred separate assessments 
stronger conditions mutual preferential independence construct additive value function weights assigned different attributes attribute groups 
especially appropriate attributes take numerical values 
refer discussion problem 
specification preferences number different techniques search space feasible outcomes preferred outcome 
cp networks section describe network representation allows compact generally incomplete representation preference relation 
describe basic model semantics describe inference procedures dominance testing 
representation preferences graphical nature exploits conditional preferential independence structuring user preferences 
model similar bayes net surface nature relation nodes network generally quite weak compared probabilistic relations bayes nets 
defined graphical representations preference relations instance bacchus grove shown strong results pertaining undirected graphical representations additive independence :10.1.1.31.4716
representation semantics distinct main aim graph capture statements conditional preferential independence 
note reasoning ceteris paribus statements explored ai context network representations 
ask user identify set parent affect preference 
particular value assignment top user able determine preference order values things equal 
formally denoting features aside independent 
information ask user explicitly specify preferences values 
information create annotated graph set parents 
annotated condition preference table cpt describing user preferences values combination parent values 
call structures conditional preference networks cp networks 
note semantics forces graph acyclic argue natural networks acyclic 
cyclic cp networks express possible total preference orderings bb shown simple counting argument 
illustrate network semantics consequences series examples 
examples features boolean semantics defined features arbitrary finite domains 
example asking user describe preference told preference depends value value ceteris paribus 
ask preference value ofa 
may say ceteris paribus 
written assume preorder provided domain equally preferred 
ease presentation ignore indifference algorithms treatment straightforward 
assume relation fully specified see section 
aa bb bb example suppose ais parent parents 
assume conditional preferences somewhat surprisingly information sufficient totally order outcomes notice judge outcome terms conditional preferences violates 
violates preference constraints 
conditional preference forb 
preference fora 

surprising ceteris paribus semantics implies violating worse 
aa bb bb cc cc parent preferences higher priority child preferences 
example suppose andc suppose preference dependency graph disconnected 
assume bb 
information conclude preferred outcome abc 
ordered information provided 
preferred 
preferred outcome 
example suppose andc conditional preference graph forms chain witha having parents parent ofb parent ofc 
suppose dependence information preference constraints imply ordering totally orders outcomes 
notice get outcome chain flip exchange value exactly feature preference dependency information 
element chain derive 
outcomes totally ordered 
example saw violations preference constraints parent features worse violations constraints child preferences 
unordered outcomes violate preference important feature outcome violate preference important features band 
semantics cp networks specify tuples preferred 
important things notice examples 
chain flipping feature values show outcome better 
example conditional preferences value aa aa bb bb cto flipped value flipped 
second violations worse larger negative impact preference higher network compare lower level violations violation single ancestor constraint 
observations underly inference algorithms 
mentioned semantics cp nets preclude cyclic networks 
instance variable network consistently quantified follows preferences user simply value preferred 
acyclic graphs unique outcome 
note cyclic preference graphs inconsistent example simply reverse conditional preferences value 
acyclic graphs consistent correspond defined preference ordering 
rarely need cyclic structures wants express indifference certain assignments subsets variables 
case cluster variables maintain acyclicity 
follows assume cp nets acyclic 
searching flipping sequences assume acyclic cp network fn 
convention assume ordering features respects topology network parents 
yi denote values 
basic inference problem address zn cp network xn yn preferences cp network 
words toy 
treat inference problem search flipping sequence purported preferred series preferred outcomes purported preferred value flip sequence sanctioned 
conversely view problem search opposite direction preferred outcome preferred outcome 
improving search cp network define improving search tree follows 
search tree rooted yn children search tree outcomes reached changing feature note possible improving values readily determined inspecting cpt cc cc ff ff gg gg dd dd ee ee hh hh aa bb preferred generate sequence abcdefgh example conditional preference graph 
preference statements explicitly represented network captured cpts clear implied exists path improving search tree 
complete search procedure procedure guaranteed examine branch search tree sound complete query answering procedure 
procedures discussed sense sound complete 
example consider preference graph 
suppose conditional preferences suppose want compare violates violates 
order show abcdefgh 
intuitively constructed sequence increasingly preferred outcomes valid conditional independence relations represented cp network flipping values features 
allowed change value higher priority feature higher network preferred value introduces new preference violation lower priority feature descendent network 
instance flip ofa value sequence preferred state repairs violation preference constraint introducing preference violation respect toc 
process repeated conditionally preferred value expense violating preference ford single preference violation target outcome shown preferred single preference violation ofa initial outcome 
demonstrates violation conditional preference feature violation descendent preferences 
suppose violates violates 
turn comparable preferred 
sequence flips extended change values preference constraints violated 
sole violation dominated violation descendents chain 
want violates thee preference preference violates sequence abcdefgh 
violation preferred violation ofa intuitively absorbed violation path starting atd 
consider comparison violates violates 
sequence flips show 
shows violations ancestor features covers violations descendents 
examples illustrate certain preference violations priority determining relative ordering outcomes 
intuitively dominance shown constructing sequence legal flips initial outcome target 
worsening search answered search worsening search tree defined follows 
search tree rooted atx xn children node search tree outcomes reached changing feature note possible worsening readily determined inspecting cpt 
clear implied exists path worsening search tree 
clearly path exists worsening search tree corresponds path improving search tree vice versa search space may searching improving search tree effective queries searching worsening search tree appropriate 
example consider cp network described example 
suppose wish test 
root worsening tree path generate 
words worsening tree branch leads directly positive answer query 
contrast improving search tree rooted branches maximum length nodes path leads solution see 
improving search tree example example network consider query 
root improving search tree path tree 
contrast worsening search tree rooted branches maximum length nodes path leads solution 
reason believe parallel search improving worsening search trees generally appropriate 
illustrated positive queries considerations apply negative queries fact exploiting small search trees especially important order quickly fail 
suffix fixing extension haven detailed specific search procedures remainder section suppose complete necessarily sound search procedure 
regardless uses improving worsening search simple rules allow deterministic moves search space choose flips need backtracked reconsidered impacting completeness search procedure 
rule suffix fixing 
define suffix subset values zn 
suffix defined legal ordering features 
suppose improving search root node zn 
suppose suffix ofz matches suffix zj 
suffix fixing rule requires features making suffix flipped 
proposition ensures need reconsider decision flip features matching suffix 
proposition path improving search matching suffix created reordering features consistent partial ordering acyclic cp network 
tree suffix 
path passes path node path values features suffix 
effectively restricts search tree paths retain suffix values 
may backtrack choices lead consider full search tree 
suffix fixing rule applies worsening search 
second completeness preserving rule suffix extension rule 
suppose path intermediate matches suffix 
furthermore suppose values suffix extended target improved xi 
flip chosen reconsidered 
proposition exist path improving search tree suffix suffix extended legal move 
exists path passes exists path node path values asz features extended suffix 
example consider cp network conditional preferences example 
suppose consider query improving search 
suffix fixing means consider reordering features rightmost features 
suffix extension rule means asd ff backtracking choice 
immediately context ofc suffix extension applicable flipped 
forward pruning section describe general pruning mechanism carried 
quickly shows flipping sequence possible prunes domains features reduce flipping search space doesn compromise soundness completeness relatively cheap time iso number features ris maximum number conditional preference rules feature size biggest domain 
general idea sweep forward network pruning values feature appear suffix feature reordering 
vd improving worsening flipping sequence validate query 
intuitively consider set flips possible ignoring interdependence parents number times parents change values 
consider feature order consistent network topology parents node considered node 
build graph nodes corresponding possible values forf conditional preference relation consistent pruned values parents include arc successive values 
ab ab prune value isn directed path value value 
implemented running dijkstra algorithm twice find nodes reachable value feature fand find nodes value 
sets nodes intersected find possible values forf 
nodes remaining domination query fails legal flipping sequence 
results quick failure straightforward cases carry search non obvious cases 
example consider cp network conditional preferences example 
consider query form 
draw find path values pruned 
draw paths query fails quickly looking features 
imagine extending pruning phase include information sequences values parents pass 
determine possible sequences values child feature pass 
generally combinatorics maintaining sequences prohibitive binary case path set values completely determined starting value count number times value flips 
pruning ignores possible interdependencies values parents networks guarantee sequences values parents pass independent pruning complete sense stops failing flipping sequence 
basis counting algorithm singly connected binary 
example changed slightly third third value pruned simplifying tables children ofa 
search strategies heuristics previous section search space formally defined completeness preserving rules pruning search space defined 
leaves open issue effective procedures searching 
section describe heuristics exploring search tree 
describe simple heuristics effective networks fact backtrack free certain classes networks 
show search problem recast planning problem briefly describe potential benefits view 
rightmost improving heuristics rightmost heuristic requires variable value flips deciding child move rightmost variable legally flipped 
instance consider improving search tree example illustrated 
target see rightmost heuristic leads directly target steps 
target outcome different rightmost heuristic potential lead astray 
incorporate suffix fixing rule search see rightmost heuristic defined flipping bb bb bb rightmost value doesn destroy suffix match lead directly target outcome search tree 
example target rightmost heuristic discovers shortest path target notice suffix fixing prevents exploring longest length path target 
example suggests chains rightmost heuristic lead proof exists backtracking 
may case variables binary 
example consider cp network parent boolean 
conditional preferences ba rightmost heuristic improving search construct reaching dead requiring backtracking 
direct ba ba ba bis consistent rightmost heuristic 
example rightmost heuristic permitted jump preferred moving intermediate 
prevented discovering correct flipping sequence 
multivalued domains useful heuristic improving heuristic worsening searches worsening heuristic rightmost value flipped improving values parents improving value preferred adopted 
allows greater flexibility movement downstream variables 
improve value variable question improving value preferred value provided parent values maintained skipping values may prevent setting descendents desired values 
rightmost improving heuristics viewed embodying form commitment 
flipping values rightmost possible variable variable smallest number descendents network seen leaving maximum flexibility flipping values variables 
aa upstream variable limits possible flipping sequences drastically downstream variable specifically altering specific variable limit ability flip values 
reasons cc cc described improving heuristic cast similar light 
unfortunately commitment approach works practice allow backtrack free search general example shows 
example consider cp network variables parent parent ofc 
ag cg conditional preferences consider cab improving search 
improved context ofb 
improved tob context ofa leads dead 
right thing tob 
queries chain structured networks multivalued variables reliably searched rightmost improving heuristics search approach backtrack free chains vari cc cc aa bb bb ables binary 
intuitively case changing value rightmost allowable variable impact ability flip parent value furthermore changing variable prevent child flipped child needed different value flipped flipped earlier 
similar reasons binary tree structured networks variable parent multiple children searched backtrack free 
example consider binary tree structured preference graph conditional preferences ee ee dd dd tree structured conditional preference graph consider 
suppose searching improving flipping sequence 
suffix fixing 
value flip isc 
way get binary value 
remain untouched 
fix suffix fixing ordering part fixed suffix 
value flip point isa gives abcde 
done 
proposition rightmost search heuristic conjunction suffix fixing suffix extension complete backtrack free chain tree structured cp nets binary variables 
polytrees singly connected networks containing undirected cycles searched backtracking general variables binary 
due fact parents node may allowed values flipped choices may lead target outcome lead deadends 
instance suppose consider example restricted 
improving search rooted choice 
chosen start clearly lead target way tob 
deadend reached backtrack leading solution 
essentially means may consider different variable orderings ancestors node 
turns backtrack points binary polytrees 
general multiply connected cp nets complex interdependencies exist parents variables parents may share ancestors 
lead complex search paths successful search flipping sequence 
don provide examples construct networks specific queries fixed ordering variables allows rightmost heuristic backtrack free 
note shortest flipping sequence certain queries exponential length maximally connected acyclic network require sequences ann variable binary network 
believe sequences required singly connected networks 
noted generate example networks queries require complicated vd search involving considerable backtracking simple heuristics examples tend intricate obscure 
invariably require tight interaction network structure conditional preference statements quantifying ofd network specific query 
natural examples seen require search 
flipping sequences plans considered searching directly flipping sequences 
seen case state space search 
possible think answering dominance queries type planning problem 
conditional preference statement form converted set strips actions improving value variable 
particular conditional preference statement converted set strips operators form preconditions vi id add list vi delete list vi corresponds action context ofc 
different set actions created worsening 
start state goal state 
readily apparent query consequence cp network plan associated planning problem 
plan corresponds flipping argument 
previous algorithms viewed state forward planners 
case domain specific heuristics easily added forward search expect 
planning techniques regression partial order planning planning satisfiability stochastic local search methods problem 
application regression planners generally backchaining planners provide support reasoning changes ancestor values required specific descendent flip value target 
note planning problems generated cp queries generally look quite different form standard ai planning problems actions action directed achieving particular proposition requires specific preconditions 
concluding remarks introduced cp networks new graphical model representing qualitative preference orderings reflects conditional dependence independence preference statements ceteris paribus semantics 
formal framework allows compact arguably natural representations preference information 
argued cp network basic inference problem determining vectors feature values preferred equivalent task finding connecting sequence flipping individual feature values 
characterized corresponding search space described strategies heuristics significantly reduce search effort allow solve problem instances efficiently 
see various applications cp networks dominance testing strategies heuristics 
sorting product database user specified preferences 
problem highly relevant context electronic commerce 
conceptually simplistic implementations available world wide web active buyers guide 
general idea assist user selecting specific product database preferences 
important compact natural representations preference information 
cp networks extend current models typically don allow conditional preference statements 
important aspect problem database precisely defines items represented vectors feature values available preference information required extent choice sufficiently narrowed small selection products database 
dominance testing strategies important context find set pareto optimal choices conditional preference information extracted user 
interactive dynamic approach appears promising user prompted additional preference statements ordering items database sufficiently constrained preference information offer reasonably small selection products 
dominance algorithms important part database sorting task problem generally require pairwise comparisons run completion 
certain preprocessing steps taken exploit network structure database values high priority attributes 
application area constraint configuration task assemble number components user preferences compatibility constraints satisfied 
simple example assembly components computer systems instance type system bus constrains choice video sound cards 
cp networks represent user preferences compatibility constraints search preferred feasible configurations 
contrast database sorting application set possible vectors feature values configurations explicitly implicitly specified compatibility constraints 
dominance testing required finding preferred solutions combined mechanisms limit search feasible configurations 
currently extending directions 
search strategies heuristics dominance testing implemented order empirically assess performance various types problem instances including real world problems handcrafted examples exhibiting uniform regular structures theoretical interest 
secondly working various extensions framework 
include cases conditional preference statements contain small amount quantitative information 
particular existing applications online interactive consumer guides suggest limited amount quantitative preference information relatively easy extract user natural way useful inducing stronger preference orderings 
interesting issue extension representation reasoning system incompletely specified conditional preference information incomplete cp tables taken account 
motivated fact full preference information cp tables required deciding particular dominance query 
useful consider mechanisms allow incompletely specified cp tables dynamically prompt user additional preference information needed 
intend investigate tradeoffs amount user interaction required extracting preference information amount computation needed determining preferred feature vectors 
asking specific questions particular potentially complex preferences finding preferred feature vectors easier 
hand asking questions especially really necessary establishing relevant preferences annoy user system usable 
finding tradeoffs amount user interaction computation time answering queries finding preferred items database optimal configurations promising direction research 
related motivation underlying goal programming 
representations search techniques form starting point investigations 
research supported iris iii project interactive optimization preference elicitation bou 
fahiem bacchus adam grove :10.1.1.31.4716
graphical models preference utility 
proceedings eleventh conference uncertainty artificial intelligence pages montreal 
fahiem bacchus kabanza 
temporal logic control search forward chaining planner 
proceedings rd european workshop planning 
available url ftp logos uwaterloo ca pub tlplan tlplan ps craig boutilier ronen brafman chris geib david poole 
constraint approach preference elicitation decision making 
aaai spring symposium qualitative decision theory stanford 
getoor norman shahar 
utility elicitation classification problem 
proceedings fourteenth conferenceon uncertainty artificial intelligence pages madison wi 
thomas cormen charles ronald rivest 
algorithms 
mit press cambridge ma 
joseph ambrosio william birmingham 
preference directed design 
journal artificial intelligence engineering design analysis manufacturing 
jon doyle michael wellman 
preferential semantics goals 
proceedings ninth national conference artificial intelligence pages anaheim 
dyer 
interactive goal programming 
management science 
simon french 
decision theory 
press new york 
vu ha peter haddawy 
case preference elicitation similarity measures preference structures 
proceedingsof fourteenth conferenceon uncertainty artificial intelligence pages madison wi 
ronald howard james matheson editors 
readings principles applications decision analysis 
strategic decision group menlo park ca 
james 
linear programming single multiple objective systems 
prentice hall englewood cliffs 
keeney raiffa 
decisions multiple objectives preferences value trade offs 
wiley new york 
lashkari max metral pattie maes 
collaborative interface agents 
proceedingsof twelfth national conference artificial intelligence pages seattle 
nguyen peter haddawy 
decision theoretic video advisor 
aaai workshop recommender systems pages madison wi 
