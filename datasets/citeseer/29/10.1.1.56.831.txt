widening pos efficient scalable groundness analysis logic programs michael andy andy king abo pat hill department mathematics computer science ben university pob beer israel cs ac il 
school computer studies university leeds ls jt uk scs leeds ac uk 
computing laboratory university kent ct nf uk ac uk 

domain positive boolean functions os established analysis variable dependencies arise logic programs 
analyses os binary decision diagrams shown efficient wide range practical programs 
interpreted representing propositional formula atoms rotate append respectively 
illustrates goal independent analysis 
goal dependent analyses supported applying magic sets similar techniques 
interpreter basis various efficient implementations semi naive evaluation strongly connected components optimisation techniques 
details see :10.1.1.55.9748
iterate operator fail iterate retract flag iterate iterate cond assert database cond assert assert cond assert flag database functor functor call subsumes control operator user clause head body prove body cond assert fact head prove prove builtin call prove bs prove fact prove bs logic fig 

prolog interpreter bottom evaluation 
non scalability pos analyses scaling problems arise analysis interpreter depicted stem representation formula sets atoms evaluation strategy analyser solving possible ways clause body facts derived far calls 
practice iff predicates body clause solved deterministically iteratively account solving predicate may cause deterministic 
put way perform local fixpoint computation terminating iff predicates deterministically reduced 
course approach introduce additional approximation iff predicates reduced 
applying scheme entire evaluation clause fully deterministic 
call wpos analysis applies evaluation method implementation experimental results experiments analyser coded prolog uses induced magic sets eager evaluation perform efficient goal dependent bottom evaluation :10.1.1.27.9594
induced magic implementation technique avoids re computation arise magic clause bodies 
affect similar obtained supplementary magic avoids re computation maintaining reusing partial solutions clause bodies 
overhead considerably reduced partial solutions maintained implicitly underlying prolog implementation 
technique implemented simple meta interpreter goal directed bottom evaluation 
affect similar obtained supplementary magic avoids re computation maintaining reusing partial solutions clause bodies 
overhead considerably reduced partial solutions maintained implicitly underlying prolog implementation 
technique implemented simple meta interpreter goal directed bottom evaluation 
magic set transformation needed dependencies calls answers expressed directly interpreter 
eager evaluation described :10.1.1.27.9594
approach iteration strategy close semi naive obtained follows new atom derived recursive procedure invoked ensure clause atom body reevaluated 
contrast semi naive evaluation means overhead required distinguishing old new atoms 
eager evaluation involve slightly re computation semi naive strategy applications eager evaluation faster semi naive due simplified data structures 
preprocessing time reduced magic sets transformation required strongly connected components need computed eager evaluation performs depth traversal call graph 
