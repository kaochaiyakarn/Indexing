automated compositional iterative deadlock detection chaki edmund clarke jo ouaknine carnegie mellon university pittsburgh usa chaki emc ouaknine cs cmu edu algorithm detect deadlocks concurrent message passing programs 
deadlock inherently non compositional absence preserved standard abstractions framework employs abstraction compositional reasoning alleviate state space explosion problem 
iteratively construct increasingly precise abstractions basis spurious counterexamples detect deadlock prove deadlock exists 
approach inspired counterexample guided abstraction refinement paradigm 
notion abstraction schemes verification abstraction refinement differ key respects existing abstraction refinement frameworks 
algorithm compositional abstraction counterexample validation refinement carried component wise require construction complete state space concrete system consideration 
approach completely automated provides diagnostic feedback case deadlock detected 
implemented technique magic verification tool encouraging results times speed time times memory consumption concurrent message passing programs 
report bug real time operating system micro os version 
research sponsored semiconductor research src contract tj national science foundation nsf 
ccr ccr office naval research onr naval research laboratory nrl contract 
army research office aro contract 
daad conducted part project software engineering institute sei 
views contained document authors interpreted representing official policies expressed implied src nsf onr nrl aro government entity 
ensuring standard software components assembled way guarantees delivery reliable services important task system designers 
ensuring absence deadlock composite system example stringent requirement satisfied system deployed real life 
especially true safety critical systems embedded systems plant controllers expected service requests fixed time limit responsive external stimuli 
case deadlock detected highly desirable able provide system designers implementers appropriate diagnostic feedback 
despite significant efforts validating absence deadlock systems realistic complexity remains major challenge 
problem especially acute context concurrent programs communicate mechanisms blocking semantics synchronous message passing semaphores 
primary obstacle known state space explosion problem size state space concurrent system increases exponentially number components 
paradigms usually recognized effective state space explosion problem abstraction compositional reasoning 
approaches widely studied context formal verification find deadlock detection :10.1.1.116.9247
possibly consequence fact deadlock inherently non compositional absence preserved standard abstractions see example 
compositional abstraction deadlock detection scheme article especially significant 
counterexample guided abstraction refinement cegar short methodology uses abstraction automated manner successful verifying real life hardware software systems 
cegar scheme iteratively computes precise abstractions starting coarse target system basis spurious counterexamples real counterexample obtained system correct 
approach article combines abstraction compositional reasoning cegar framework verifying absence deadlocks concurrent message passing systems 
precisely suppose system composed components 
mn executing concurrently 
technique checks deadlock step iterative process 

create abstraction deadlock done componentwise having construct full state space 
verify 
check deadlock 
report absence deadlock exit 
counterexample leads deadlock 
refine 
check corresponds deadlock achieved component wise 
corresponds real deadlock report presence deadlock counterexample derived exit 
refine basis obtain precise abstraction repeat step 
approach systems components represented finite labeled transition systems ltss form state machines 
note verification stage step technique requires explicit composition systems 
stages performed component time 
verification performed abstractions usually smaller corresponding concrete systems technique able significantly delay state space explosion problem 
deadlock detected scheme provides useful diagnostic feedback form counterexamples 
best knowledge counterexample guided compositional abstraction refinement scheme perform deadlock detection concurrent systems 
implemented approach verification tool magic extracts lts models programs automatically predicate abstraction :10.1.1.103.5769
experiments variety benchmarks yielded encouraging results times speed time times memory consumption 
discovered bug real time operating system micro os version 
rest article organized follows 
section summarize related 
followed preliminary definitions results section 
section abstraction scheme followed counterexample validation abstraction refinement section section respectively 
deadlock detection algorithm described section 
experimental results section conclude section 
related formalization general notion abstraction appeared 
abstractions approach conservative 
guaranteed preserve undesirable properties system 
conservative abstractions usually lead significant reductions state space general require iterated abstraction refinement mechanism cegar order establish specification satisfaction 
cegar iterative procedure spurious counterexamples specification repeatedly eliminated incremental refinements conservative abstraction system 
cegar non automated form 
cegar schemes verification safety reachability liveness properties 
compositionality extensively studied process algebra particularly conjunction abstraction 
abstraction compositional reasoning combined single level cegar scheme verify safety properties concurrent message passing programs 
techniques attempt detect deadlock 
fact abstractions schemes preserve deadlock freedom directly approach 
deadlock detection widely studied various contexts 
earliest deadlock detection tools process algebra csp fdr see 
corbett evaluated various deadlock detection methods concurrent systems developed deadlock detection tools concurrent java programs 
best knowledge approaches involve abstraction refinement compositionality automated form 
background section preliminary definitions results originate csp rest article 
definition labeled transition system labeled transition system lts quadruple init finite non empty set states ii init initial state iii finite set actions alphabet iv transition relation 
lts init write mean respectively 
write say ex mean transition labeled successor function succ defined succ 
remainder article denote sequences denote concatenation sequences 
notions paths traces standard 
definition path path lts finite nonempty sequence 
sn ai init ii si si 
write path denote set paths definition trace lts 
finite sequence 
trace iff exist 
sn 
sn path 
paths traces usually represented letters respectively 
state said refuse action iff transition labeled refusal state set actions refuses 
suppose sequence actions set actions 
said failure lts iff participate sequence actions trace reach state refusal deadlock iff reach state refuses entire alphabet 
notions formally 
definition refusal lts 
ref 
definition failure lts 
pair failure iff condition holds writing 
exist 
sn 
sn path ii ref sn 
write fail denote set failures definition deadlock lts said deadlock iff fail example shows ltss 

paths traces failures 
deadlock 
paths traces failures deadlock 
notion parallel composition central approach 
assume components executed concurrently synchronize shared actions 
sample ltss 
initial states doubly circled 
proceed independently local actions 
notion parallel composition csp anantharaman 
definition parallel composition init 
mn sn init tn ltss 
parallel composition denoted 
mn lts init 
sn ii init init 
init iii iv 
sn 
iff condition holds si ti si example shows lts ltss shown 

parallel composition ltss 
trace concurrent system construct projections restricting trace alphabets components 
definition projection consider ltss 
mn 

mn 
projection function proj mi defined inductively follows write mean proj 

mi 

mi definitions immediately lead lemma essentially highlights compositional nature failures 
proof proofs related results known 
lemma 
mn ltss 
fail 
mn iff exist 
fn fi ii fi fail mi 
abstraction section notion abstraction 
framework employs quotient ltss abstractions concrete ltss 
concrete lts obtain quotient lts follows 
states quotient lts obtained lumping states alternatively view equivalence classes equivalence relation 
transitions quotient lts defined existentially 
definition quotient lts init lts equivalence relation 
arbitrary denote equivalence class induce quotient lts init ii init init iii iv 
write mean clear context 
called existential abstraction states referred concrete states called states 
greek letter represent states continue denote concrete states roman letter quotient ltss studied verification literature 
particular result known 
proposition lts equivalence relation quotient lts induced 
sn path 
sn path 
example note facts ltss deadlocks ii deadlock iii deadlock deadlock deadlock iv deadlock deadlock deadlock deadlock quotient lts obtained lumping states single equivalence class deadlock 

sample ltss 
initial states doubly circled 
example highlights deadlock non compositional absence preserved existential abstractions preserved universal abstractions 
far known definitions results prepare background 
constitute core technical contributions article 
introducing notion refusals 
definition refusal lts equivalence relation quotient lts induced refusal function defined follows ref parallel composition quotient ltss extend notion refusal follows 
rn 
mn quotient ltss 


rn 

introduce notion failures similar failures refusals replaced refusals 
definition failure lts refusals defined quotient lts parallel composition 
pair said failure iff condition holds writing 
exist 

path ii 
write denote set failures lemma essentially states failures lts subsumed failures quotient lts lemma lts equivalence relation quotient lts induced fail exists 
proof 
fail definition 

sn path ref sn 

proposition 
sn path 

definition sn 

definition sn ref sn 

sn get result 
lemmas show failures compositional failures concurrent system decomposed naturally failures components 
proofs lemmas follow lines lemma 
lemma rn 
mn quotient ltss 
ak path 
rn 

ak 

ri 
lemma rn 
mn quotient ltss 

rn iff exist 
fn fi ii fi ri 
rest article implicit facts 
rn 
quotient ltss 

rn ri mi mi 
mn 
notion failures leads naturally notion deadlocks 
definition deadlock rn 
mn quotient ltss 
rn said deadlock iff rn 
mn quotient ltss 
rn clearly deadlock iff exists 
path 
call path counterexample deadlock freedom simply counterexample 
easy devise algorithm check deadlock generate counterexample case deadlock detected 
call algorithm 
explores reachable states say breadth manner 
state checks 
generates counterexample initial state standard techniques reports presence deadlock terminates 
state reports absence deadlocks terminates 
finite number states transitions terminates correct answer 
lemma shows deadlock freedom composition quotient ltss entails deadlock freedom composition corresponding concrete ltss 
lemma 
mn ltss 
rn equivalence relations 
mn respectively 

rn deadlock 
mn deadlock 
proof suffices prove contrapositive 
denote 
mn 
rn 
suppose deadlock 

definition fail 
ak 
lemma exist 
fn fi ii fi fail mi 

ii lemma fi ri mi 

fi 

lemma 

definition deadlock 
unfortunately converse lemma hold counterexample difficult find leave task reader 
suppose reports deadlock 
rn counterexample 
decide leads deadlock 
mn 
process called counterexample validation section 
counterexample validation section approach check validity counterexample returned 
definition valid counterexample rn 
mn quotient ltss 
ak counterexample returned 
rn write 
ak 

say valid counterexample iff fail mi 
counterexample said spurious iff valid 
arbitrary lts 
easy design algorithm takes inputs returns true fail false 
call algorithm give pseudo code 
starting initial state failure repeatedly computes successors sequence actions 
set successors obtained point process empty fail returns false 
set states obtained actions processed fail iff exists ref correctness clear definition 
algorithm lts suppose init 
init succ ai return false return ref 
algorithm returns true fail false 
lemma rn 
mn quotient ltss counterexample returned 
rn valid counterexample 
mn deadlock 
proof denote 
mn 
rn 

ak 
ak 


counterexample 

definition 

counterexample valid fail mi 

lemma fail 

definition deadlock 
abstraction refinement case counterexample returned spurious wish refine abstraction basis re attempt deadlock check 
section abstraction refinement scheme 
notion successors 
definition successor lts equivalence relation 
succ 
words successor action iff labeled transition element 
framework abstraction refinement involves refining existing equivalence relation basis successors 
precisely denote split equivalence relation obtained sub partitioning equivalence class scheme belong sub partition iff 
note equivalence classes states left unchanged 
easy see split refinement addition split proper refinement iff split piece condition holds pr exist 
approach abstraction refinement involves computing proper refinements equivalence relations successors 
achieved algorithm 
precisely takes inputs lts ii equivalence relation iii trace iv set actions 
addition inputs obey conditions ar ar fail 
computes returns proper refinement algorithm lts equivalence relation suppose 
ak find 
ak path exists condition ar succ ai return split ai return split 
algorithm doing abstraction refinement 
establish correctness 
consider possible scenarios 

suppose returns line value know exists 
denote value previous iteration 

note terminated 
exists 
call split line satisfies condition pr returns proper refinement 
suppose returns line 
know point 
pick arbitrary clear exist 
sk 
sk ak path 
condition ar ref way chosen line 
definition ref pick ref 

exists ref 

call split line satisfies condition pr returns proper refinement algorithm section iterative deadlock detection algorithm establish correctness 

mn arbitrary ltss 
mn 
algorithm takes 
mn inputs reports deadlock 
deadlock reports trace mi lead deadlock state 
gives pseudo code 
iterative algorithm uses equivalence relations 
rn ri mi mi 
algorithm 
mn mi ltss ri mi mi forever verify 
rn deadlock report deadlock exit suppose 
ak counterexample reported suppose 
ak 
validate counterexample find 
mi report deadlock counterexample refine abstraction ri mi ri 
pseudo code algorithm 
theorem algorithm correct terminates 
proof argue ar ar satisfied time invoked line 
case ar follows lemma fact 
ak path 
rn 
case ar trivial line definition failure 
show terminates correct answer 
possible cases 
suppose exits line 
know 
rn deadlock 
lemma 
mn deadlock 

suppose exits line 
know fail mi 
definition valid counterexample 
lemma 
mn deadlock 
termination follows fact routine invoked line produces proper refinement equivalence relation ri 
mi finitely states process proceed indefinitely 
fact ltss converge bisimulation quotients concrete counterparts time performs unit step paige tarjan algorithm practice deadlock freedom established disproved bisimulation quotient achieved 
experimental results implemented technique magic tool 
magic extracts finite lts models programs predicate abstraction 
ltss analyzed deadlock approach article 
real counterexample level ltss magic analyzes necessary creates refined models inferring new predicates 
actual implementation level cegar scheme 
elide details outer predicate abstraction refinement loop similar previous 
summarizes results 
abb benchmark provided industrial partner abb 
implements part interprocess communication protocol ipc mediate communication multi threaded robotics control automation system developed abb 
implementation required satisfy various safety critical properties particular deadlock freedom 
ipc protocol supports multiple modes communication including synchronous point point broadcast publish subscribe asynchronous communication 
modes implemented terms messages passed queues owned different threads 
protocol handles creation manipulation message queues synchronizing access shared data various operating system primitives semaphores cleaning internal state communication fails times 
particular analyzed portion ipc protocol implements primitives synchronous communication approx 
loc multiple threads 
type communication sender sends message receiver blocks answer received times 
receiver asks message blocks message available times 
receiver gets synchronous message expected send response sender 
magic successfully verified absence deadlock implementation 
ssl benchmark represents deadlock free system approx 
loc consisting openssl server openssl client 
benchmarks derived micro os version real time operating system embedded processors consist threads approx 
loc executing concurrently 
access shared data protected locks 
implementation suffers deadlock 
contrast benchmarks deadlock free 
rw benchmarks implement deadlock free reader writer system loc readers writers controller 
controller ensures writer access critical section 
dpn benchmarks represent implementation dining philosophers loc dpd implements dining philosophers loc deadlock 
shows implementations moderate size total state space quite large due exponential blowup 
experiments carried amd athlon xp machine gb ram 
values iter deadlock refer measurements approach plain correspond naive approach involving predicate abstraction refinement 
note iter deadlock outperforms plain cases exception dining philosophers deadlock 
cases able establish deadlock deadlock freedom plain runs time 
approaches succeed yield times speed time require times memory rw 
novel algorithm detect deadlocks concurrent blocking message passing programs 
strength approach leverages powerful paradigms abstraction compositional reasoning despite fact deadlock non compositional absence preserved standard abstractions 
addition technique automated employs iterative abstraction refinement scale real life examples 
experimental results demonstrate effectiveness approach industrial benchmarks 
believe improved assume guarantee style reasoning plan investigate issue 
abb website 
www abb com 
anantharaman clarke foster mishra 
compiling path expressions vlsi circuits 
proc 
popl 
ball rajamani 
automatically validating temporal safety properties interfaces 
proc 
spin volume 
springer lncs 
brookes roscoe 
deadlock analysis networks communicating processes 
distributed computing 
name plain sm sr sm sr abb ssl rw rw rw rw rw rw dpn dpn dpn dpn dpd dpd 
experimental results 
sm maximum states sr reachable states iterations time seconds memory mb time limit sec indicates negligible value indicates time notable figures highlighted 
chaki clarke ouaknine sinha 
state event software model checking 
proc 
ifm 
appear 
chaki clarke jha veith 
modular verification software components proc 
icse 
ieee computer society 
chaki ouaknine clarke 
automated compositional abstraction refinement concurrent programs level approach 
proc 

entcs 
clarke veith wang 
automated abstraction refinement model checking large state spaces sat conflict analysis 
proc 
fmcad 
clarke grumberg peled 
model checking 
mit press 
clarke grumberg jha lu veith 
counterexample guided abstraction refinement 
proc 
cav volume 
springer lncs 
clarke grumberg long 
model checking abstraction 
proc 
toplas 
clarke gupta 
sat abstraction refinement ilp machine learning techniques 
proc 
cav 
corbett 
evaluating deadlock detection methods concurrent software 
software engineering 
cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
proc 
sigplan conference programming languages 
iosif 
deadlock detection tool concurrent java programs 
software practice experience 
formal systems europe website 
www com 
grumberg long 
model checking modular verification 
acm trans 
programming languages systems 
henzinger majumdar 
lazy abstraction 
proc 
popl 
henzinger qadeer rajamani 
decomposing refinement proofs assume guarantee reasoning 
proc 
iccad 
hoare 
communicating sequential processes 
prentice hall 
kurshan 
analysis discrete event coordination 
proc 
rex workshop volume 
springer lncs 
kurshan 
computer aided verification coordinating processes automata theoretic approach 
princeton university press 
lakhnech bensalem owre 
incremental verification abstraction 
proc 
tacas volume 
springer lncs 
magic website 
www cs cmu edu chaki magic 
martin 
parallel algorithms deadlock livelock analysis concurrent systems 
proc 
comm 
process architectures 
martin 
tool proving deadlock freedom 
proc 
th world occam transputer user group technical meeting 
mcmillan 
compositional rule hardware design refinement 
proc 
cav volume 
springer lncs 
milner 
communication concurrency 
prentice hall 
clarke osterweil dwyer 
verification concurrent software 
proc 
icse 
acm press 
paige tarjan 
partition refinement algorithms 
siam journal computing 
dwyer visser 
finding feasible counter examples model checking abstracted java programs 
proc 
tacas 
roscoe 
theory practice concurrency 
prentice hall 
roscoe 
pursuit deadlock freedom 
information computation 
graf sa di 
construction state graphs pvs 
proc 
cav volume 
springer lncs 
