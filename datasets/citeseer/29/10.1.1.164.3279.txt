distributed programming dummies shifting transformation technique carole hugues rachid guerraoui liafa institute distributed programming laboratory universit denis epfl paris ch lausanne perfectly synchronized round model provides powerful abstraction crash failures atomic message delivery 
abstraction distributed programming easy 
implementation abstraction distributed system general message omissions 
protocols devised abstraction perfectly synchronized round model automatically transformed protocols omission model 
transformation achieved round shifting technique constant time complexity overhead 
transformation precise sense optimal 
furthermore surprisingly automatic transformation weaker model say traditional crash model atomic message delivery stronger model general omission say send omission model provide better time complexity performance 

motivations 
distributed programming easy assume perfectly synchronized round model processes round view distributed system state 
basically computation proceed round round way guarantee round message sent correct process received processes message sent faulty process received processes 
unfortunately programmers fortunately research community assumption processes view global distributed system state rarely hold practice 
particular illusion perfectly synchronized world breaks messages sent network subject partial delivery typically buffer overflow router crash computer hosting processes involved distributed computation 
course legitimate provide programmer simplistic view perfectly synchronized world translate scenes distributed protocols devised ideal model realistic weaker models 
job computer scientist usually providing programming abstractions hide low level details try provide job programmer really easy 
fact abstraction available programmers popular programming middleware decades research distributed computing indicate implementation turn significantly involved 
closer look semantics perfectly synchronized round model psr abstraction reveals needs implemented succession instances agreement algorithm precisely algorithm solving interactive consistency ic problem 
observation highlights issues 
feasibility 
implement psr abstraction model needs synchrony assumptions model coverage assumptions simply sufficient certain distributed environments 
second issue performance 
psr abstraction implemented cost implementation high 
devising distributed protocol psr relying implementation psr automatically generate distributed protocol weaker model significant overhead respect devising protocol directly model 
lack evidence motivation 
precisely motivation come efficient implementation terms time complexity psr abstraction general omission model simply omission model 
model processes proceed round round manner messages lost 
psr abstraction implemented model inherent cost implementing model unclear 
background 
lack evidence cost implementing psr surprising amount devoted devising optimal agreement algorithms various models including omission model implementing weaker forms psr 
particular know terms time complexity tight lower bound implementing interactive consistency omission model processes fail 
rounds omission model needed correct processes reach decision new global state distributed system decision vector 
pretty state machine replication implement psr sequence instances interactive consistency cost add 
words rounds needed implement rounds psr 
wonder algorithms early deciding decrease cost :10.1.1.150.1948
algorithms need fewer rounds processes decide failures occur total number failures tolerated 
tight lower bound rounds failure free runs 
rounds anyway needed implement rounds psr actual failures 
implementing synchronous round model crash failures crash model various weaker models omission model subject investigations byzantine failures considered 
viewed implementing abstraction weaker psr 
idea underlying implementation proposed models consider doubling rounds 
roughly speaking round crash model simulated rounds omission model 
rounds omission model needed simulate rounds crash model 
cases multiplicative factor overheads 
multiplicative factor inherent implementing psr omission model 
de psr prevents message received processes crash model case sender crashes 
try implement weaker crash abstraction lines 
fact implement psr directly crash model intermediate model transformation cost rounds omission model rounds psr model actual failures 
vise shifting implementation additive factor glance counter intuitive mean devising efficient implementation abstraction strictly stronger 
contributions 
presents time efficient shifting technique implement psr abstraction omission model rounds psr require rounds omission model failures occur 
clearly optimal psr solves interactive consistency round costs omission model 
words shifting transformation technique psr model omission model pay cost 
furthermore interestingly show surprising shifting optimality result tried devise shifting technique implement weaker abstraction psr say crash synchronous model stronger model general omissions say send omissions gained terms time complexity 
particular means technique optimal implement crash model abstraction 
precisely define notion shifting transformation describe technique 
introduce necessary machinery formulate definitions simulation transformation 
key idea technique round omission model involved simulation round psr 
source tricky algorithmic issues address 
conclude discusses applicability technique models byzantine failures :10.1.1.12.1697
space limitation proofs omitted 

model processes 
consider finite set processes communicate message passing 
assume processes fully connected 
process characterized local state denote set possible states process 
processes interact synchronous round computational way 

set round numbers strictly positive integer numbers 
denote set messages sent acb aed set messages received 
special value indicates message received 
primitive send allows process send message processes primitive receive allows process receive message sent received 
assume process receives input value external world round primitive 
denote set input values received processes 
input pattern function process round number represents input value receives round set input values denote set composed input patterns sake simplicity assume input values depend state processes 
section discuss extension assumption relaxed 
roughly speaking synchronous round process goes non atomic steps 
step process receives external input value 
second step process sends message processes including 
third step process receives messages sent 
fourth step local computation determine local state process 
failure patterns 
failure pattern function round number 
returns set processes fails send message set processes fails receive message crashes round assume processes recover crashing process crashes round send receive message subsequent round 
process round failure pattern considered implicitely satisfies condition process correct round process correct round failure pattern fail sending receiving messages crash including round process correct sends receives correctly process correct set correct processes process faulty 

failure pattern 
set faulty processes failure pattern failure pattern denote effective number faulty processes consider types failures atomic failure process crashes round correct round round crashes crash sending message sending message 
precisely corresponding failure pattern 
crashes round correct round round crash failure process crashes send message subset processes crash receive message ii send message receive subset messages sent crash 
precisely corresponding failure pattern send omission failure process commits send omission round fails send message round subset processes system 
precisely bf general omission failure process commits general omission round fails send receive message subset processes system 
bf precisely models 
model defined set failure patterns 
define distinct models perfectly synchronized round defined failure patterns processes po processes subject atomic failures remaining processes correct 
model defined failure patterns processes processes subject crash failures remaining processes correct 
model fq defined failure patterns processes xo processes subject crash failures send omission failures remaining processes correct 
model qw defined failure patterns processes processes subject crash failures general omission failures remaining processes correct 
model yz say model stronger model bjc write jc say model strictly stronger jd fe write gj weaker strictly weaker relations de fined accordingly 
yz equations clear fq qw protocols 
processes execute protocol process executes state machine defined triple respectively initial state state transition function message output function 
assume process corresponding state machine initialized message output function aq generates message sent process round current state external input value round number 
state transition function outputs new state process current state messages received round processes possibly message received current round number 
variable appears local state processes denote variable process value executed round started executing round convenience notation denotes value process initialization takes step 
runs problem specifications 
tern failure pattern subsets denotes variable maintaining current state process initialized 
round input pat sends message receives message sent changes state run corresponds execution protocol defined tuple input pattern observed run failure pattern observed run function process round state process round keeps state case function process round message sent round fails send message round denote set runs produced protocol failure patterns model input pattern problem problem specification defined predicate runs 
runs correctly weak model example fq avoid ambiguities call round weak model phase 
transformation protocol jd protocol jd defined simulation function simulates run run lx executing lx protocol jc lp simulating process local state contain variables maintain simulated states protocol set round numbers 
precisely phase round gives th simulated state simulated state round give formal definitions transformation notions arbitrary set input values definition algorithm called transformation jd model jc model input pattern corresponding simulation function function property protocol run mp lp running input pattern maps run hk corresponding simulated run jm ii 
iii iv vi ak vii bf 

jk 
definition protocol solves problem model input pattern dm satisfies 
simulation transformation notions simulation transformation intuitive require precise definition 
particular problems model transformed model simply solved second model 
consider models qj transformation takes protocol designed run strong model converts protocol assume presentation simplicity processes value send reserve symbol case message received result failure 
property states simulated run runs simulated protocol 
property ii forces correct process correct simulated run faulty process may appear correct simulated run 
property iii states input pattern preserved simulation 
property iv states simulated state correct lp property forces simulation accomplish progress 
property vi states state lz authors problem called strong dependent decision sdd problem solvable synchronous model show problem admit solution asynchronous model augmented perfect failure detector process crash 
contradict fact algorithms designed model run 
contradiction depends define notion simulation 
contrary doubling technique state run simulates state run restrict transformation simulate state run state run simulated 
property vii forces process simulate states sequentially apart property iii definition encompasses notion simulation 
definition recall notion effectively solving problem indicate resolution obtained simulation function 
definition kn function effectively solves problem jd model input pattern lx jc satisfies proposition follows definitions 
proposition protocol solves specification model function transformation protocol effectively solves model 
shifting transformation algorithm transform protocol written protocol weaker model simulates simulation function give 
distinct processes simulating protocol necessarily assume assume state machine knows executed relax assumption 
transformation works round basis transforms single round phases key efficiency phase involved simulation round simultaneously 
start giving general definition notion shifting transformation giving 
transfor protocol model mation transformed protocol 
roughly speaking shifting transformation process simulates round lz bounded number phases counting phase precisely definition transformation model model shifting transformation exists constant call shift transformation 
algorithm 
transformation processes collaborate reconstruct failure input patterns run accomplish reconstructions parallel round 
processes terminate notion input pattern appear 
transformation round transformed phases defined 
implies reconstruction patterns round locally execute step simulated protocol 
process realizes faulty simulated failure pattern process simulates crash lk simulate round lk processes solve exactly instance interactive consistency ic problem 
ic problem process supposed propose initial value input value round eventually decide vector values termination correct process eventually decides uniform agreement decided vectors different validity decision vector component value proposed fails 
assume model consider exists constant processes decide decide rounds 
typically fq model 
ic algorithm requirements derived relatively easily extending existing uniform consensus algorithm model transformation jo requires yz considering model 
phase processes start new instance ic propose instance input values received phase 
decision vector corresponds time round failure pattern input pattern 
gives transformed protocol pro terms input pattern cess sake simplicity protocol operational manner pseudo code 
phase ic instances running 
condition loop line th instance ic decided true phase process denote 
qw decision vector instance ic line uj value variable updated line 
qw mp value 
variable updated lines uj value variable qw qw updated lines 
proposition defines simulation function transformation 
defined follows 
vq 
process halt lines 
consider simulation round process 
value th instance ic 
ii 
iii iv 
hq qw 

corresponds round failure pattern vu hl 
wk instance decided current simulated round number 
aj round round receive input value corresponding sg number propose decided hl 
decided set rounds protocol simulated current set states protocol simulated current phase execute round pending ic instances ic instance start ic instance th instance ic state protocol process round ensure failure pattern atomic halt process previous failure messages bfe generate ikl 
na transitions bb perform state 

hl 
hl 
uv simulated round counter faulty increment halt process 
transformation algorithm code process qw yz ao resp 
fq qw proposition algorithm fig 
shifting transformation resp 
shift number rounds needed solve interactive consistency yz message remember current state parameter message output function 
precisely consider process simulating run idea ex tended transformation maintain simulated states coherent previous terminated simulations 
states called extended transformation extension 
transformation fig 
processes need send input value phase protocol locally simulated processes 
assume processes know state machine simulated process 
result process needs send addition message previous transformation content message normally send simulated protocol output function previous transformation start simulation round decision previous simulations known 
know precise state protocol time generate set states denoted processes simulating execution protocol denote message sends round round simulation phase know decision value corresponding proposal long including receives decided value able start instance received decided value value phase generates new extended set states 
generate set states computes pd state current set states possible combination messages received phase values successively substituted value received pb value successively substituted 
state extended set states corresponds message sent round messages gathered set called extended message wu denoted example consider case fq model phase process gathers received values vector possible combinations messages process generates extended set states applying function combination messages 
presents extended transformation algorithm 
sake clarity ignore possible optimizations algorithm process reduce number possible states receives values processes 

denote messages instance received phase assume process sends phase underlying ic algorithm value proposes instance 
detailed description 
pd consider process simulating state machine phase simulated run phase extended set states gathers possible states phase describe message generation simulation 
message generation 
wu ou phase receives input value computes new extended set states corresponding extended message set tuples 
tuple form contains identifier possible state ou 

ou pd ning round ii combination messages received phase iii identifier state phase iv message sent round state cur rent extended set states combination messages extended messages phase computes state includes new state associates unique ou identifier corresponding mes extended messages running ic instances phase sage sends 
uj qw uj uj qw uj simulation 
variable denotes round simulated consider simulation performed round 
process maintains simulated state machine round denoted identifier associated state currently simulated process round qw denoted qw condition loop line qw uj th 
qw uj qw uj instance ic decided true phase process denotes decided vector messages line value variable value variable updated line 
process uses decided vector update simulated state machine adds computes precisely updated line 
qw qw computes messages searches tuple extended message generated phase set messages received round qw previous value qw 
tuple 
updated qw 
updates uj state pd qw uj mp 
qw value qw vector corresponding process added process adds stops 
propositions assert correctness extension transformation 
proposition simulation run 
defined follows 
process halt lines 
consider simulation round process 

ii 
hq 
iii process including state round 
iv proposition algorithm fig 
shifting fq resp 
transformation lk yz ao qw shift number rounds needed solve interactive consistency fq qw resp 
idea applied input values depend state processes finitely possible input values fo 
technique described process anticipates different input values receive start simulations 
preceding simulations terminate input value correctly anticipated state process determined messages states input value kept 
algorithm fig 
easily adapted case input values depend state processes 
note cases number messages generated may high 
yz 
performance analyze performance transformation technique prove optimality introducing intermediate models processes omit messages bounded number rounds crashing 
complexity 
denote number phases needed processes respectively decide terminate ic run failures 
define phase complexity overhead number additional phases executed transformed protocol jc original protocol jd transformations overlap simulation rounds phase interval 
phase complexity overhead number phases needed obtaining result simulation round corresponds model tight lower bound reaching fq global decision phases run failures 
phase complexity overhead failure free runs exactly phase 
terms messages transformation generates bit message process phase ic instance process sends bit message phase run failures 
extended transformation process maintains states round simulation 
state tuple coded bits pro failures 
cess sends bit message phase run proposition shifting optimality automatic shifting transformation model weaker model weaker introduces shift phases 
proof sketch introduce notion model faulty process may exhibit faulty behavior phases crashes 
precisely process round model 
fq qw yz model de model defined failure patterns satisfy previous equation 
note note qw equivalent yz qw yz lk transformations require phases simulate round consider problem exists algorithm solves rounds 
show algorithm requires phases solved round 
solving problem consider consists determining phase number process fails time 
precisely process supposed propose value corresponding phase number appears faulty time eventually decide phase number termination correct process eventually decides validity decided phase number proposed agreement difference decisions exceed phases 
need phases solve problem solve binary consensus phases contradicting 
assume algorithm solve defined follows 
process proposes change proposed value unchanged problem phases 
consider algorithm execute algorithm new proposed value 
decision decide decide argue algorithm implements binary consensus algorithm 
validity termination follow validity termination 
consider agreement 
validity decision value agreement difference decisions exceed decision values binary consensus algorithm runs contradicting 
definition problem solved rounds just shown phases required 
bounded number rounds observe protocol seen model 
shown problem loss efficiency term time complexity simulate model 
shifting optimality 
determining exact overhead terms message size complexity open issue 
corresponds round failure pattern instance current simulated round number processes start th convention possible combination messages possible state propose start instance execute phase running instances extended messages instance decision vector instance 
reconstruct patterns process halt perform vector previous failure compose messages faulty gf step process halt perform 
extended transformation algorithm code process 
concluding remarks concentrated different models shifting transformation technique translate protocols perfectly synchronous model weaker models 
minor modifications possible shifting technique translate protocols byzantine model :10.1.1.12.1697
roughly speaking byzantine model faulty byzantine process may arbitrarily deviate protocol sending relaying spurious messages necessarily protocol 
need modify definition simulation definition required properties hold complete set processes possible byzantine model 
properties refer set correct processes original run restriction 
transformation algorithm fig 
slightly modified uniform agreement ic turned non uniform agreement correct processes decide different vectors 
uniform agreement ensured byzantine model 
note generally speaking byzantine model processes need know protocol possibly validate received messages simulated protocol 

simplifying fault tolerance providing abstraction crash failures 
journal acm jacm 
chandra toueg 
unreliable failure detectors reliable distributed systems 
journal acm jacm 
charron bost guerraoui schiper 
synchronous system perfect failure detector solvability efficiency issues 
proceedings ieee international conference dependable systems networks dsn pages 
charron bost schiper 
uniform consensus harder consensus 
technical report dsc epfl may 
guerraoui 
distributed programming dummies shifting transformation technique 
technical report ic epfl july 
available ic epfl ch publications documents ic tech report pdf 
fischer lynch 
lower bound time assure interactive consistency 
information processing letters ipl june 
fischer lynch paterson 
impossibility distributed consensus faulty process 
journal acm jacm 
hadzilacos 
byzantine agreement restricted types failures telling truth different telling lies 
technical report department computer science harvard university 
keidar rajsbaum 
simple proof uniform consensus lower bound 
information processing letters ipl 
lamport fischer :10.1.1.150.1948
byzantine generals transaction commit protocols 
technical report sri international 
lamport shostak pease :10.1.1.12.1697
byzantine generals problem 
acm transactions programming languages systems toplas 
moses tuttle 
programming simultaneous actions common knowledge 
algorithmica 
toueg 
automatically increasing faulttolerance distributed algorithms 
journal algorithms 
pease shostak lamport 
reaching agreement presence faults 
journal acm jacm 
raynal 
consensus synchronous systems concise guided tour 
technical report irisa 
schneider 
replication management state machine approach 
mullender editor distributed systems 
addison wesley 
