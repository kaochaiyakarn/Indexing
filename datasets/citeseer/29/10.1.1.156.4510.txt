mixin gilad bracha department computer science university utah salt lake city ut inheritance william cook hewlett packard laboratories page mill road palo alto ca diverse inheritance mechanisms provided smalltalk beta clos interpreted different uses single underlying construct 
smalltalk nd beta differ primarily direction class hierarchy growth 
inheritance mechanisms subsumed new inheritance model ba sed composition mixins subclasses 
form inheritance encode clos multiple nce hierarchy changes encoded hierarchy violate encapsulation difficult 
practical applica tion mixin inheritance illustrated sketch extension modula 
variety inheritance mechanisms developed object oriented programming languages 
systems range classical smalltalk single inheritance safer prefixing beta lo complex powerful multiple inheritance combinations clos 
languages similar object models share view inheritance mechanism incremental programming 
differ widely kind incremental changes supported 
smalltalk subclasses add additional methods replace existing methods parent class 
result ry relationship behavior instances class instances subclasses 
subclass methods invoke original superclass methods super 
beta pattern subclass definition viewed extension previously defined prefix pattern 
supported ccr national science foundation 
permission copy fee part material granted provided copies distributed direct commercial advantage acm copyright notice title publication date appear notice copying permission association computing machinery 
copy republish requires fee specific permission 
acm smalltalk new methods may defined 
prefix methods replaced prefix may command inner invoke extended method code supplied subpattern 
code prefix executed extensions beta enforces degree behavioral consistency pattern subpatterns 
underlying mechanism inheritance beta smalltalk 
difference lies extensions existing definition precedence may refer previous definitions smalltalk inherited definition precedence may refer extensions beta 
model shows beta smalltalk inverted inheritance hierarchies smalltalk subclass refers parent super just beta prefix refers subpatterns inner 
common lisp object system clos predecessor flavors multiple parent classes may merged inheritance 
class ancestor graph linearized ancestor occurs 
standard method combination primary methods function call method invoke method inheritance chain 
clos supports mixins useful technique building systems attributes 
mixin subclass subclass definition may applied different superclasses create related family modified classes 
example mixin defined adds border window class mixin applied kind window create bordered window class 
semantically mixins closely related beta prefixes 
linearization criticized violating encapsulation may change parent child relationships classes inheritance hierarchy 
mixin technique clos depends directly linearization modification relationships 
avoid mixins violate encapsulation argue linearization implementation technique mixins obscures true nature abstractions 
modest generalization inheritance models october ecoop oopsla smalltalk beta form inheritance composition mixins derived 
mixin inheritance supports flexibility smalltalk security beta 
supports direct encoding clos multiple inheritance hierarchies duplication subclass definitions 
hierarchy encoded explicit collection linearized inheritance chains single inheritance graph changes hierarchy especially violate snyder notion encapsulation easily 
section discusses single inheritance languages smalltalk beta shows support different uses single underlying construct 
section analyzes multiple inheritance linearization clos special focus support mixins 
section presents generalized inheritance mechanism supports style inheritance beta smalltalk clos explicit support mixins 
section sketch extension modula illustrates generalized inheritance 
section summarizes 
single inheritance languages smalltalk inheritance inheritance smalltalk mechanism incremental derivation classes 
smalltalk inheritance adapted simula serves prototypical inheritance mechanism 
primary subtlety process inheritance interpretation special variables self super 
self represents recursion self object instance defined 
interpretation self addressed previous focus interpretation super 
consider pair smalltalk classes 
class person instance variables name method display name display class graduate superclass person instance variables degree method display super display 
degree display class person defines name field method displaying name 
subclass graduate extends display method include person academic degree 
example graduate name smith degree ph respond display method invoking graduate display method invokes person display method super display display name displays degree 
net effect print smith ph possible prefix name case titles dr printing title calling super 
subclass graduate specifies graduates differ persons 
difference may indicated explicitly set changes 
case set changes simply new display method 
original definition just display method 
combined new display method replaces original 
formalize process objects represented records fields contain methods 
expression 
wn represents record fields 
associated values 

expression represents selection field record record combination binary operator forms new record fields arguments value left argument case field records 
example true replaces right value produce 
interpret super necessary delta modifications access original method inherited person 
achieved supplying parent class methods parameter delta 
resulting inheritance mechanism asymmetric combination parametric delta parent specification definition form single inheritance refers inherited parent explicit set changes 
occurrences indicate instantiated twice information contexts interpretation super provide methods subclass 
suppressing interpretation hidden instance variables example form 
display name display pi display degree display au pi name display degree display deltas introduced specification inheritance mechanism clear deltas independent elements smalltalk program stand part subclass definition explicit parent class 
smalltalk subclass person may completely replace display method example routine displays time day 
smalltalk inheritance subclass control way define person forces subclasses invoke display method part display operation 
ecoop oopsla proceedings october beta inheritance inheritance beta designed provide security replacement method completely different method 
inheritance supported beta prefixing definitions 
beta employs single definitional construct pattern express types classes methods 
generality confusing simpler syntax distinguishes different roles 
example easily recoded beta person class name string display virtual proc name display inner graduate class person degree string display extended proc degree display inner definition graduate said prefixed person 
person graduate correspondingly subpattern person 
display declared virtual means may extended subpattern 
mean may arbitrarily redefined object oriented languages 
behavior display method person display name perform inner statement 
plain person instance inner behavior inner statement null operation skip op 
wh en subpattern person defined inner statement execute corresponding display method subpattern 
subpattern graduate extends behavior person display method supplying inner behavior 
graduate instance initial effect display person original method person executed 
name displayed inner procedure supplied graduate executed display graduate degree 
inner graduate interpreted 
effect display method extended subpattern graduate 
impossible arrange printing title dr name inheriting person choice invoke inner name built person display method 
beta prefixing prefix controls behavior result 
interpretation person pattern parametric definition attributes 
parameter rep syntax implementors beta tutorial purposes ll 
resents inner definitions supplied subpatterns 
instance person inner part bound record null methods 
subpattern specifies additional attributes may refer inner behavior subpatterns 
attributes defined subpattern specified result prefixing composition inner inner inner inner means interpretation subpattern supplied inner parameter result combining specification changes specified 
applying inner inner inner specification bound fields subpattern combined fields supplied subpatterns 
prefix methods take precedence suffix 
bove equation greatly simplified examining actual uses inner pl name display display pl degree display display display name display degree display display formulation directly encode restriction inner method refer suffix method named sense inner general smalltalk super construct restriction justified desire security 
alternative formalization captures restriction involves representing method function inner behavior 
prefixing defined combination records duplicated fields composed 
calling method applied null command inner effect 
resulting formalism equivalent condition fields pi access corresponding fields inner 
comparing smalltalk beta inheritance mechanisms smalltalk beta different orientations common underlying mechanism 
underlying mechanism non associa tive binary operator performs application super inner combination attributes 
relationship beta smalltalk demonstrated comparing interpretations inheritance languages 
behavior subclass instance compa red concisely framework 
october ecoop oopsla proceedings smalltalk beta multiple inheritance mixins parent la self child super var inner suffix var inverse hierarchies smalltalk beta 
abp smalltalk beta equations represents new explicit information supplied subclass subpattern represents original attributes contributed superclass 
combination operator favors values left argument case duplicate attribute 
clear mechanism direction growth different 
smalltalk new attributes favored may replace inherited ones beta original attributes favored 
beta inheritance works opposite direction inheritance object oriented languages due role reversal subpatterns subclasses superclasses 
show inversion illustrating semantic relationships smalltalk beta superclass placed subclasses 
includes interpretation self implicit beta variable var 
direction inheritance able express advantages disadvantages 
clos inheritance clos supports rich mechanism multiple inheritance 
significant aspects clos inheritance focus standard method combination primary methods 
example recoded clos 
defclass person name defmethod display self person display slot value self name defclass graduate person degree defmethod display self graduate call method display slot value self degree defclass construct includes name new class list superclasses list instance variables 
argument list defmethod form defines class method defined 
simple effective method combination supported method plays role super smalltalk 
inner beta call method provides access method inheritance chain message selector 
clos class may inherit parent 
result ancestor may inherited 
example classes result person inherited twice research doctor 
doctor person defmethod display self doctor display dr call method defclass research doctor doctor graduate care taken display method person executed twice research doctor display dr 
smith ph 
remedy situation clos linearizes ancestor graph class produce inheritance list ancestor occurs 
graph ancestors research doctor linearized research doctor doctor graduate person 
solves problem method invocation order ancestor classes placed linear order 
collection method definitions may invoke methods linearized sequence call 
specification parents pi proceedings october interpretation defmethod display self graduate mixin subclass defined iteration inheritance oper call method ator list 
display slot value self degree 
specification list applied result previous specification combined 
complex method combination mechanisms clos modeled framework 
example methods distinguished base class methods called methods arrange method call primary method primary method call method 
process linearization criticized violating encapsulation 
argument relationship class declared parents ma modified linearization 
demonstrated example linearization class graduate placed doctor person contradiction explicit declaration doctor inherits directly person 
aware entire class hierarchy programmer foresee 
linea clos multiple inheritance hierarchy reduced collection inheritance chains interpreted single inheritance 
slight change original clos hierarchy may result different collection inheritance chains 
especially true changes violate snyder notion encapsulation base class factored classes new factors may interact classes linearization 
severe problem class may occur chains collection implemented single inheritance language subclasses duplicated 
order eliminate duplication single inheritance model generalized allow explicit naming reuse deltas defined subclasses 
mixin programming section discuss common programming technique clos called ma mixin subclass may specialize behavior variety parent classes 
defining new methods perform actions call corresponding parent methods 
mixins similar deltas introduced informally section 
example notion graduate degree part name written independent mixin 
defclass graduate mixin degree example illustrates characteristic mixins invoke call method appear parents 
obviously lead error instance mixin created 
linearization places mixin inheritance chain classes support method 
occurs new definition graduate listed person person display method invoked graduate mixin display 
defclass graduate graduate mixin person clos mixins simply coding convention formal status 
locally unbound uses call method clear indication class mixin concept formal definition class mixin contributes partial behavior 
graduate mixin possible define different kinds classes graduated behavior 
exa mple guard dog school degree 
defclass guard dog graduate mixin dog sma beta fully support mixins 
smalltalk effect mixin achieved explicitly creating subclasses copying mixin code subclass preventing code sharing abstraction 
beta individual class closely resembles mixin 
attached independently defined classes 
client class built mixin prefix 
family mixed versions class needed entire class copied prefixed mixin 
smalltalk mixin copied beta base cla ss copied 
consistent ana direction growth beta smalltalk 
mixin programming takes advantage multiple inheritance subtle unintuitive way mixins depend linearization place appropriate location inheritance chain insert classes mixin parents 
mixins viewed subclasses class definitions parameterized parents clear tion plays role application binding mixin formal parent parameter specific class 
cess abstraction application explicit generalizing inheritance mechanism common smalltalk beta 
october ecoop oopsla proceedings inheritance composition mixins mixins basis compositional inheritance mechanism generalizes smalltalk beta supporting encoding encapsulated version clos multiple inheritance hierarchy 
basic idea take mixins primary definitional construct 
inheritance formulated composition mixins 
new attributes may composed smalltalk beta style overwriting extending 
mixins composition explicit need implicit linearization programmer explicitly select order mixin components 
component composed appear multiple copies result duplication avoided explicitly applying components shared parent 
mixin composition operator beta inheritance operator slightly general form 
mixin composition takes mixins parameters returns new mixin result 
ml fun ml mz mz case conflict gives priority parameter 
ml super inner bound inheritance operation ma 
mz super inner bound formal parameter result 
assuming basic attribute combination operator associative associative 
addition commutative commutative 
ordinary classes viewed degenerate mixins inner super parameter 
mixins generalize smalltalk classes beta patterns clos style mixins 
classes viewed mixins refer fields defined self 
mixin complete refer parent parameter defines fields refers 

complete mixins may instantiated meaningfully 
application existing language choice language chosen modula basis extension incorporating mixin inheritance 
modula suited extension supports single inheritance strongly typed 
single inheritance naturally generalizes mixin inheritance 
strong typing provides framework mixins safely efficiently 
modula inheritance modula supports inheritance object types 
object types roughly analogous classes objectoriented languages 
example object types modula type person object name string methods display type graduate person object degree string methods display procedure self person self name display procedure self graduate person display self self degree display example person defines instance variable name method display 
method defined providing name followed signature formal parameter list 
case signature empty 
method assigned separately defined procedure 
object type person display interpreted definition graduate parts preexisting definition person modification object 
methods clause 
graduate subtype person super type 
graduate inherits person includes method override display 
method override names method overridden assigns new value 
signature identical signature corresponding method supertype 
overridden methods person may referred graduate syntax person methodname 
similar super smalltalk general 
object 
methods 
clause corresponds notion delta discussed 
smalltalk deltas may defined independently parent 
section presents extension deltas independent constructs 
modula uses text character strings 
assume string defined 
proceedings october extending modula extend modula generalizing object types mixins 
mixin may explicit modification form object 
methods 

alternately mixin may result combining previously defined mixins 
mixin object 
methods mixin concrete syntax examples differs notation respects 
order operands mixin operator reversed priority right hand operand 
second mixin operation written explicitly implicit pair mixins mixin definition 
optional super clause added modifications 
changes reflect existing modula syntax modification written right base definition composition operator 
adopting changes helps extension upwardly compatible 
third change typechecking purposes explained 
resulting syntax object 
methods 
object 
methods 
super mix mixin 
equivalent clos mixin example 
type object degree string methods display super display op mixin procedure self super display self degree display procedure op self root op type graduate person defined independently parent signature display inferred special super clause 
similarly display overridden value known may assigned default 
case default value op procedure type defined root root type hierarchy 
display refers overridden display method pseudo variable super syntax super methodname 
procedures super distinguished keyword mixin procedure 
code plays role similar subclass smalltalk 
reversing position definition graduate reverses role beta subpattern 
illustrated functions 
type object name string methods display super display op type graduate mixin procedure seif self name display super display control combined 
graduate display invokes super display calls 
super display default value op corresponding empty inner clause beta 
examples important advantage smalltalk beta counterparts parts definition reused textually copied 
final example recode earlier clos multiple inheritance example type doctor object methods display super display op type doctor mixin procedure self doctor display dr super display october ecoop oopsla proceedings note linear sequence definitions explicitly reliance linearization 
typing certainly differ details 
basic strategy generalizing object types classes languages ins fundamental extension 
section presents typing rules mixins modula extension 
typing mixins addressed prior mixins introduced strongly typed language 
inheritance mechanisms languages beta type identity defined modula 
types smalltalk clos representative identical iff expanded definitions identical 
ent design choices inheritance 
mech subtyping relation mixins read surface dissimilar identify subtype supertype defined common underlying structure 
underlying anism combines sets attributes duplicate attribute definitions value set 
object 
root 
mixins subtypes value may refer value root 
eliminated 

ti tz ti tz ti beta smalltalk support single inheritance sign denotes type identity 
single existing definition may extended new attributes 
smalltalk new attributes 
reflexive transitive 
may replace existing attributes accessed example doctor re directly super 
contrast beta prohibits tensions replacing existing attributes new 
obvious tion existing attribute effect invoked original attribute executes inner command 
mechanisms inverse relationships inherited definition extensions 
follows smalltalk subclass superclass relationship fact doctor relationship definition type identity 
recall mixin com beta super analogous inner 
bination operator associative 
reflected clos supports multiple inheritance subtyping rules 
existing definitions may combined 
avoid additional rules mixin composition include duplication components clos linearizes set method mentioned super clause primitive components inherited definitions 
type overridden 
practice linear list components combined method override may omitted super mechanism underlying smalltalk beta signature inferred context 
tribute values appearing earlier list replace example definition graduate may refer appearing 
disadvantage section 
exception linearization relationships existing modula code 
itive components may changed 
show linearization basis useful technique pseudo variable super may mixin programming 
procedures declared mixin procedures 
pro propose underlying inheritance parameter type nism appears different restricted forms cludes method override method refer beta smalltalk hidden super 
tion clos foundation general inheritance construct 
formulation mixins bel mixin procedure invoked come basic definitional construct inheritance method 
guarantees way interpreted mixin composition 
overridden methods mixin instance sition mixins explicit problem linearization accessed outside instance 
violating encapsulation arise 
rules section statically en appear difficult extend beta forced 
necessary condition safety smalltalk support mixins generalized efficient implementation 
rules re spe tance 
applied clos modula extension ge ready supports mixins explicit proceedings october susceptible encapsulation problems 
sketch extension modula illustrates possible design mixins generalized inheritance 
pi pi cook denotational semantics inheritance 
phd thesis brown university 
pi pi pi pi po wi cardelli semantics multiple inheritance 
semantics data types vol 
lecture notes computer science springer verlag pp 

cardelli donahue glassman jordan kalsow nelson modula report revised 
tech 
rep digital equipment systems research center dec 
cook palsberg 
denotational semantics inheritance correctness 
proc 
acm conf 
object oriented programming systems languages pp 

dahl nygaard simula common base language 
tech 
rep norwegian computing center oslo norway 
publication 
demichiel 
gabriel common lisp object system overview 
european conference object oriented programming june pp 

algorithms multiple inheritance object oriented programming 
european conference object oriented programming pp 

goldberg robson smalltalk language implementation 
addison wesley 
keene object oriented programming common lisp 
addison wesley 
kristensen madsen 
moller pedersen nygaard beta programming language 
research directions object oriented programming 
mit press pp 

kristensen madsen 
moller pederson nygaard beta programming language scandinavian approach object oriented programming oct 
tutorial notes 
wi wi kristensen madsen 
moller nygaard abstraction mechanisms beta programming language 
information control 
moon object oriented programming flavors 
proc 
acm conf 
object oriented programming systems languages applications pp 

papazoglou georgiadis outline programming language simula 
computer language 
reddy objects closures semantics object oriented languages 
proc 
acm conf 
lisp functional programming ss pp 

snyder encapsulation inheritance object oriented programming languages 
proc 
acm conf 
object oriented programming systems languages applications pp 

snyder inheritance development encapsulated software systems 
research directions object oriented programming 
mit press pp 

wand type inference record concatenation multiple inheritance 
proc 
ieee symposium logic computer science pp 

wegner inheritance mechanism incremental modification 
european conference object oriented programming pp 

october ecoop oopsla proceedings 
