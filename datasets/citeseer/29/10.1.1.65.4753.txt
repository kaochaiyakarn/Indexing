agent oriented software engineering state art michael wooldridge paolo ciancarini department computer science university liverpool liverpool zf uk wooldridge csc liv ac uk dipartimento di scienze dell informazione university bologna bologna italy ciancarini cs unibo 
software engineers continually strive develop tools techniques manage complexity inherent software systems 
article argue intelligent agents multi agent systems just tools 
reviewing meant term agent contrast agents objects 
go examine number prototype techniques proposed engineering agent systems including methodologies agent oriented analysis design formal specification verification methods agent systems techniques implementing agent specifications 
past decades software engineers derived progressively better understanding characteristics complexity software 
passive objects hand undergo state change explicitly acted 
active objects essentially agents necessarily ability exhibit flexible autonomous behavior 
summarize traditional view object view agent distinctions agents embody stronger notion autonomy objects particular decide perform action request agent agents capable flexible reactive pro active social behavior standard object model say types behavior multi agent system inherently multi threaded agent assumed thread control 
agent oriented analysis design main strand consider approaches developing agent systems involves principled informal development methodologies analysis design agent system 
broadly divided groups take inspiration object oriented development extend existing oo methodologies adapt oo methodologies purposes aose adapt knowledge engineering techniques :10.1.1.25.9807:10.1.1.19.3327:10.1.1.103.1632:10.1.1.90.5855
remainder section review representative samples 
representatives category survey aaii methodology kinny gaia methodology wooldridge summarise adapting uml 
representatives second category survey methodology collinot desire framework treur specifying agent systems :10.1.1.25.9807:10.1.1.19.3327
kinny aaii methodology australian ai institute aaii developing agent systems decade 
agent oriented analysis design main strand consider approaches developing agent systems involves principled informal development methodologies analysis design agent system 
broadly divided groups take inspiration object oriented development extend existing oo methodologies adapt oo methodologies purposes aose adapt knowledge engineering techniques :10.1.1.25.9807:10.1.1.19.3327:10.1.1.103.1632:10.1.1.90.5855
remainder section review representative samples 
representatives category survey aaii methodology kinny gaia methodology wooldridge summarise adapting uml 
representatives second category survey methodology collinot desire framework treur specifying agent systems :10.1.1.25.9807:10.1.1.19.3327
kinny aaii methodology australian ai institute aaii developing agent systems decade 
primary development environment carried belief desire intention technology procedural reasoning system prs successor distributed multi agent reasoning system dmars 
prs originally developed stanford research institute agent architecture explicitly embody belief desire intention paradigm proved durable agent architecture developed date 
applied significant multi agent applications far built including air traffic control system called oasis currently undergoing field trials sydney airport simulation system royal australian air force called business process management system called single point contact currently solutions 
define objects entities capabilities tables entities capable supporting things 
agents defined objects goals sense active autonomous agents defined agents motivations 
idea chair viewed goal supporting am viewed agent view chair autonomous agent motivations easily attributed 
starting basic framework luck inverno go examine various relationships exist agents different types 
examine agent system specified framework implemented :10.1.1.25.9807
natural relationship hierarchical agent specification framework object oriented systems formal definitions agents autonomous agents rely inheriting properties lower level components 
notation achieved schema inclusion 
easily modelled deriving class 
move principled theoretical framework detailed formal model system object oriented implementation preserving hierarchical structure stage 
natural relationship hierarchical agent specification framework object oriented systems formal definitions agents autonomous agents rely inheriting properties lower level components 
notation achieved schema inclusion 
easily modelled deriving class 
move principled theoretical framework detailed formal model system object oriented implementation preserving hierarchical structure stage 
luck inverno formalism attractive particularly way captures relationships exist agents :10.1.1.25.9807
emphasis placed notion agents acting agents rational systems discussed 
types agents approach allows develop inherently different rational agents discussed 
example approach help construct agents interleave pro active reactive behaviour 
largely result chosen specification language language inherently geared specification operation functional systems 
discussion section updated modified version examined possibility logic engineer agent systems 
article published authors proposed agents software engineering see 
structured informal refinement techniques real world software engineering 
agent oriented techniques widely outside academic community informal structured methods agent development essential 
possibility techniques followed luck inverno standard specification technique case traditional refinement methods case object oriented development transform specification implementation :10.1.1.25.9807
approach advantage familiar larger user base entirely new techniques suffers disadvantage presenting user features particularly suited agent specification 
certain manual refinement techniques agent systems immediate exactly form techniques take clear 
respect possibility directly executing agent specifications number problems suggest 
finding concrete computational interpretation agent specification language question 
