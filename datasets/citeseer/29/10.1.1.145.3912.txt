htn planning complexity expressivity erol james hendler dana nau cs umd edu hendler cs umd edu nau cs umd edu computer science department institute systems research institute advanced computer studies university maryland college park md practical ai planning systems fteen years hierarchical task network htn decomposition little analytical properties htn planners 
describes complexity htn planning varies various conditions task networks 
ai planning research planning practice embodied implemented planning systems tends run far ahead theories explain behavior systems 
analysis properties total partial order planning systems strips style planning operators planning systems developed years ago practical ai planning systems fteen years hierarchical task network htn decomposition noah sacerdoti nonlin tate sipe wilkins vere 
little analytical properties htn planners 
primary obstacles impeding lack ofa clear theoretical framework explaining htn planning system papers yang kambhampati provided important rst steps direction 
primary goal current correctly de ne analyze explicate features design htn planning systems 
progressed far complexity analyses htn planning similar analyses erol 
performed planning strips style operators 
particular table shows complexity telling plan exists depends factors restrictions existence ordering non primitive tasks task networks tasks task supported part nsf cdr institute systems research nsf iri onr computer science department 
networks required totally ordered variables allowed 
table draw 
htn expressive strips style operators 
contradicts idea held htn just ciency hack 

htn planning undecidable severe set constraints 
particular undecidable variables allowed possibility task network contain non primitive tasks specifying order performed 

general restrictions put tasks bigger ect complexity allow variables require tasks totally ordered 

achieve decidability su cient place restrictions non primitive tasks ordering tasks 
restriction removed individually planning remains decidable removing simultaneously planning undecidable 

restrictions non primitive tasks require tasks totally ordered bigger ect decidability vs undecidability 
presence restrictions tasks bigger ect require tasks totally ordered 
overview basics htn planning provide intuitive feel htn planning deliberately ed description 
details section gives precise description 
input planner consists initial task network representing problem solved 
task network set tasks representing things need done 
task name list arguments complexity htn planning restrictions htn variables allowed 
non primitive tasks totally ordered 
undecidable undecidable exptime pspace hard dexptime expspace hard regularity doesn matter pspace complete expspace complete non primitive np complete np complete tasks polynomial time np complete non primitive task follow primitive tasks 
planning domain xed advance 
variables constants 
tasks primitive performed directly non primitive planner needs gure perform 
task networks include constraints tasks variables bound order tasks performed set operators op telling ects primitive task action 
set methods telling perform various non primitive tasks 
method pair task task network 
says way toachieve perform tasks speci ed network provided done way satis es constraints 
planning proceeds starting initial task network doing steps repeatedly non primitive tasks left nd task method inm uni es modify reducing replace tasks incorporate constraints 
tasks left problem nd totally ordered ground instantiation satis es constraints 
done successful plan original problem 
practice htn planning aspects 
particular functions provided debug partially reduced task networks eliminate potential problems 
critic functions handle ordering constraints resource limits provide domain speci guidance 
formalization described erol explains critics relationship constraints described 
purposes critics ect worst case behavior omit detail 
details language htn planning rst order language extensions 
representations world actions htn planning similar strips style planning 
contains set constant symbols represent objects set predicate symbols represent relations objects 
contains set primitive task symbols represent actions 
constructs called operators associate ects primitive task symbols 
de ne plan sequence ground primitive tasks designate initial state world list ground atoms 
fundamental di erence strips style planning htn planning representation desired change world 
htn planning replaces strips style goals tasks task networks show 
types tasks goal tasks goals strips properties wish true world example having new house 
primitive tasks tasks directly achieve executing corresponding action block turning switch 
compound tasks denote desired changes involve goal tasks primitive tasks building house requires tasks performed laying foundation building walls 
compound tasks allows represent desired changes represented single goal task primitive task 
example compound task building house di erent goal task having house buying house achieve goal task compound task 
example compound task making round trip new york easily expressed single goal task initial nal states 
formally vocabulary htn language tuple hv ni fv nite set variable symbols nite set constant symbols nite set predicate symbols nite set primitive task symbols nite set compound task symbols fn term strips style planning refer planner total partial order planning operators strips style operators operators consisting lists atoms precondition list add list delete list 
atoms normally assumed contain function symbols 
achieve clear achieve clear move clear clear achieve clear achieve clear clear move clear task network graphical representation 
nite set symbols labeling tasks 
xk terms primitive task form xk task form achieve literal compound task form perform xk refer goal tasks compound tasks tasks 
tasks connected htn planning task networks collections tasks constraints tasks 
formally network form nm task labeled ni boolean formula constructed variable binding constraints temporal ordering constraints asn truth constraints literal means task labeled precedes labeled mean needs true immediately immediately respectively 
negation disjunction allowed constraint formula 
example fig 
shows blocks world task network graphical representation 
task network tasks clearing clearing moving 
task network includes constraints moving done remain clear variable bound location moved 
specify actions change world form vk lm primitive task symbol vk variable symbols lm literals denoting primitive task ects called postconditions 
htn operators contain strips style preconditions preconditions realized goal tasks called procedural nets literature sacerdoti drummond 
task networks fig 

clear toachieve primitive task execute corresponding action 
non primitive tasks need tell planner toachieve constructs called methods 
method non primitive task task network 
states way achieving task achieve task network achieve subtasks task network violating constraint formula task network 
example blocks world method achieving look achieve task network fig 

empty plan achieve goal task goal true 
goal task implicitly method achieve contains dummy primitive task ects constraint goal true immediately planning domains problems planning domain pair hop mei op set operators set methods 
planning problem triple hd di planning domain initial state task network need plan 
language htn language generated constant predicate task symbols appearing nite set variables nite set node labels 
set constants predicates tasks part input 
primitive task network contains primitive tasks 
regular task networks methods contain non primitive task non primitive task ordered occur rst task 
propositional variables allowed 
totally ordered tasks task network totally ordered 
plan existence problem hd di plan solves 
problem nding optimal plan solves di cult problem determining plan exists 
analysis strips style planning erol 
analyzed problem transforming decision problem called plan length usual complexity theoretic technique asking input integer exists successful plan length 
address plan optimality problem reasons 
htn planners usually worried optimality di cult verify cases optimality guaranteed method decomposition 
second erol 
strips style planning cases complexity length misleadingly low 
particular plan length exptime complete cases plan optimality problem harder input plan length includes integer encoded binary con nes planner plans length exponential length input 
operational semantics section give syntactic characterization set solutions htn planning problem 
description equivalent model theoretic semantics appear erol 
primitive task network containing primitive tasks initial state 
plan completion denoted comp total ordering primitive tasks ground instance satis es constraint formula non primitive task network contains non primitive node 
bea method general uni er de ne reduce task network obtained replacing task nodes incorporating constraint formula constraint formula set reductions red reductions formalize notion task decomposition 
precise de nition completions reductions reader referred erol 
inference rules nd plans 
comp conclude sol 

red sol conclude sol 
rule says set plans achieve primitive task network consists completions task network rule says reduction plan achieves achieves need de ne set plans derived inference rules 
de ne function sol follows sol comp soln soln red soln sol soln intuitively soln set plans derived steps sol set plans derived nite number steps 
erol proved sol set solutions inference rules sound complete 
decidability results easy show simulate context free grammars htn planning 
interesting fact simulate context free grammars help task interleavings constraints check grammars common string languages generate 
intersection languages context free grammars non empty problem hopcroft 
theorem plan existence strictly restricted tasks task network totally ordered input task network 
way plan existence decidable restrict methods acyclic 
case task expanded nite depth problem decidable 
level mapping function level ground instances tasks set kg method expand ground task task network containing ground task level level 
furthermore level primitive task intuitively level assigns levels ground task sure tasks expanded lower level tasks establishing acyclic hierarchy 
case task expanded depth theorem plan existence decidable level mapping nite integer way plan existence decidable restrict interactions tasks 
restricting task networks totally ordered limits interactions occur tasks 
tasks need achieved serially interleaving subtasks di erent tasks possible 
interactions tasks limited input output state tasks protection intervals literals need preserved 
conditions create table entry task input output state pair set protected literals tells possible achieve task conditions 
dynamic programming techniques compute entries table double exptime exptime problem restricted propositional 
easy show strips style planning modeled htn satisfy conditions complexity results planning erol establish lower bound complexity htn planning 
theorem plan existence expspace hard double exptime restricted tobe totally ordered 
plan existence pspace hard exptime restricted 
restrict planning problem regular non primitive task network initial input task network proofs appear erol 
obtain expansions 
subtasks expansions di erent tasks interleaved similar happens theorem 
theorem non primitive tasks task network needed keep track table 
planning problem regular need keep track single non primitive task input nal states protected literals 
size state exponential problem solved exponential space 
regularity restrictions possible reduce strips style planning problem described erol htn framework 
theorem plan existence expspace complete restricted 
restricted tobe totally ordered non primitive task symbol planning language task networks containing tasks 
restrict problem propositional complexity level theorem plan existence pspace complete restricted propositional 
pspace complete restricted tobe totally ordered non primitive task symbol planning language task networks containing tasks 
suppose planning problem primitive propositional totally ordered 
problem membership np easy see nondeterministically guess total ordering variable binding check constraint formula task network satis ed polynomial time 
furthermore require planning problem totally ordered propositional constraint language enables represent satis ability problem hardness 
theorem plan existence np complete restricted tobe primitive primitive totally ordered primitive propositional 
plan existence time restricted tobe primitive totally ordered propositional 
expressivity informally observed htn approaches need completely specify conditions action ects strips style statebased plan structures typically require complete speci cation intermediate states 
describing relationships actions argued htn approaches appropriate 
lansky example argument claims largely responsible general strips style systems planning practice 
despite claims demonstrated encode situations strips style planning operators lack formalism htn planning left unclear expressed 
formalism directly compare expressive power htn strips style planning operators 
compare strips observe htn approach provides concepts states actions goals strips 
fact domain encoded set strips operators transform htn planning domain low order polynomial time 
straightforward transformation declare primitive task symbol strips operator ect operator declare method similar fig 

method contains preconditions operator goal tasks primitive task corresponding operator 
instructive transformation demonstrates relationship planning htn planning analogous relationship right linear regular grammars context free grammars 
summarize transformation details see erol 
transformation htn representation uses constants predicates strips representation 
strips operator declare primitive task ects dummy primitive task fd ects 
declare single compound task symbol primitive task construct method form perform 
lk 
perform lk preconditions action associated declare method perform fd note expanded sequence actions fd provided preconditions action satis ed 
input task network form perform gm gm strips style goals note transformation produces regular htn problems exactly style planning 
just restricting context free grammars right linear produces regular sets restricting htn methods regular produces strips style planning 
express situations impossible express unmodi ed strips operators 
intuitively thisis strips lacks concept compound tasks notion goals limited 
provide means declaring goals constraints intermediate states 
furthermore contrast strips provide rich constraint language express types interactions 
formally theorem htn planning function symbols nitely ground terms semi decidable 
require domain description xed advance part input htn planning domains planning semi decidable 
function symbols strips style planning decidable regardless planning domain xed advance erol 
theorem exists htn planning domains represented nite number operators 
way comparing expressive power languages model theoretic semantics erol 
power htn planning comes things allowing multiple tasks arbitrary constraint formulas task networks compound tasks 
allowing multiple tasks arbitrary formulae provides exibility tasks primitive goal strips style tasks probably expressed strips operators albeit exponential number operators predicates 
compound tasks provide representation sets primitive task networks similar way nonterminal symbols provide representation sets strings context free grammars 
results show handling interactions non primitive tasks di cult part htn planning 
particular subtasks expansions di erent tasks interleaved planning undecidable variables allowed 
investigated conditions planning problem restricting task networks contain single non primitive task totally ordered 
restrictions reduced complexity signi cantly limited interactions tasks 
comparison complexity htn planning strips style planning demonstrates htn planners represent broader complex set planning problems planning domains 
transformations htn planning problems strips style planning problems revealed strips style planning special case htn planning relation analogous relation context free languages regular languages 
erol includes complexity results similar case xed 
strips style planning include methods strips style planning domain simply set operators 
proving theorem standard assumption strips operators contain function symbols htn operators 
kambhampati barrett insightful comments 
chapman planning conjunctive goals 
arti cial intelligence 
drummond re ning extending procedural net 
proc 
ijcai 
erol nau subrahmanian complexity decidability undecidability results domain independent planning 
arti cial intelligence appear 
detailed version available tech 
report cs tr umiacs tr src tr university maryland college park md 
erol hendler nau semantics hierarchical task network planning 
technical report cs tr umiacs tr computer science dept university maryland march 
erol hendler nau complexity results hierarchical task network planning 
appear annals mathematics arti cial intelligence available technical report cs tr umiacs tr computer science dept university maryland march 
fikes nilsson strips new approach application theorem proving problem solving 
arti cial intelligence 
hopcroft ullman 
automata theory languages computation 
addison wesley publishing california 
kambhampati hendler validation structure theory plan modi cation reuse arti cial intelligence may 
lansky localized event reasoning multiagent domains 
computational intelligence journal 
sacerdoti nonlinear nature plans allen hendler tate editors readings planning 
morgan kaufman 

tate generating project networks allen hendler tate editors readings planning 
morgan kaufman 

vere planning time windows durations activities goals 
ieee transactions pattern analysis machine intelligence pami 
wilkins practical planning extending classical ai planning paradigm morgan kaufmann 
yang formalizing planning knowledge hierarchical planning computational intelligence vol 
