analysis indexing schemes joseph hellerstein division computer science uc berkeley berkeley ca cs berkeley edu elias department computer science ucla los angeles ca elias cs ucla edu christos papadimitriou division computer science uc berkeley berkeley ca christos cs berkeley edu consider problem indexing general database workloads combinations data sets sets potential queries 
define framework measuring efficiency indexing scheme workload characterizations storage redundancy times item data set stored access overhead times blocks necessary query retrieve 
framework initial results showing upper lower bounds trade offs case multi dimensional range queries set queries 
success ubiquity relational data model arguably tree access method breakthrough accompanied timing 
access methods continue play important role largely determine viability novel data models currently intense scrutiny database research community 
tree widely recognized inadequate data structure novel contexts clear successor emerged view diversity applications requirements 
important technological parameter usually ignored data structures literature center stage 
interestingly size instance enter statements results 
related extensive data structures see example occasionally focuses external memory aspects problem 
workloads optimized line occasionally considered data structure literature see example 
survey trees variants appears variant common database systems tree stores data leaf nodes fits model :10.1.1.96.6637
variety external memory multidimensional data structures exists including hash structures see example tree structures see example :10.1.1.104.4340:10.1.1.131.7887
generalized search tree gist extensible data structure simplifies development tree indexing schemes 
framework studying new previous results fit naturally 
analyses lines suggesting emerging past years notably late paris kanellakis collaborators :10.1.1.156.2115
interestingly size instance enter statements results 
related extensive data structures see example occasionally focuses external memory aspects problem 
workloads optimized line occasionally considered data structure literature see example 
survey trees variants appears variant common database systems tree stores data leaf nodes fits model :10.1.1.96.6637
variety external memory multidimensional data structures exists including hash structures see example tree structures see example :10.1.1.104.4340:10.1.1.131.7887
generalized search tree gist extensible data structure simplifies development tree indexing schemes 
framework studying new previous results fit naturally 
analyses lines suggesting emerging past years notably late paris kanellakis collaborators :10.1.1.156.2115
involves upper bounds mainly concerned analysis searching aspect problem 
survey trees variants appears variant common database systems tree stores data leaf nodes fits model :10.1.1.96.6637
variety external memory multidimensional data structures exists including hash structures see example tree structures see example :10.1.1.104.4340:10.1.1.131.7887
generalized search tree gist extensible data structure simplifies development tree indexing schemes 
framework studying new previous results fit naturally 
analyses lines suggesting emerging past years notably late paris kanellakis collaborators :10.1.1.156.2115
involves upper bounds mainly concerned analysis searching aspect problem 
exceptions 
version argument proof lemma anticipates theorem access overhead special case blocks restricted rectangular 
second section interesting lower bound shown extending result chazelle case block accesses storage redundancy log log log necessary additive opposed multiplicative access overhead remain polynomial log log question lower bounds multi dimensional searching addressed emphasis block accesses 
exceptions 
version argument proof lemma anticipates theorem access overhead special case blocks restricted rectangular 
second section interesting lower bound shown extending result chazelle case block accesses storage redundancy log log log necessary additive opposed multiplicative access overhead remain polynomial log log question lower bounds multi dimensional searching addressed emphasis block accesses 
lower bounds multidimensional searching studied bounds derived model involving binary trees certain restrictions block size considered function number points 
database literature analyses worst case expected case empirical access methods multi dimensional searching see example :10.1.1.45.9015:10.1.1.33.4521
emphasis ratios storage access salient performance parameters indexing scheme reflects influences area line algorithms 
framework definitions section set simple framework defining indexing problem measuring efficiency particular indexing scheme problem 
workload access methods evaluated context particular workload 
workload consists finite subset domain set queries 
probabilistic distribution queries set query weighted subset dataset weights representing relevance 
interested efficient access methods return large portion weight query high probability 
varying size blocks 
model block size presupposes items domain storage requirements 
clearly simplification case set workloads case simpler workloads tree typically key compression schemes possible :10.1.1.96.6637
items require storage structures allow empty space blocks 
index structures blocks required items 
immediate extension consider workloads element domain associate weight size sum weights block bounded constant gives rise interesting weighted versions problems studied 
acknowledgments authors wish reviewers feedback 
faloutsos 
estimating selectivity spatial queries correlation fractal dimension 
proc 
st international conference large data bases pages zurich september 
comer :10.1.1.96.6637
ubiquitous tree 
computing surveys june 
finkel bentley 
quad trees data structure retrieval composite keys 
