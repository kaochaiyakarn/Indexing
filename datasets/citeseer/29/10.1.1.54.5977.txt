quantitative modeling complex environments keith decker victor lesser department computer science university massachusetts umass computer science technical report april formal approaches specifying mental state agent entails particular actions perform 
approaches put agent center analysis 
questions purposes realistic convenient center analysis task environment domain society agents part 
presents task environment oriented modeling framework hand hand agent centered approaches 
approach features careful attention quantitative computational interrelationships tasks information available update agent mental state general structure task environment single instance examples 
task environment model analysis simulation avoids methodological problems relying solely single instance examples provides concrete meaningful characterizations state general theories 
execution methods interruptible multiple methods single task available agent may switch typically alternative methods tradeoff time quality 
model effect interruptions reuse partial results non local effects see section 
current amount progress execution interruptible execution start time finish time respectively gamma gamma typically model quality produced method linear growth function lin lin models linear quality functions proposed concave quality functions execute task quality begins accumulate convex quality functions quality achieved early method small increases occur mandatory optional parts quality functions 
desired easily defined 
example power representation consider main schools thought quality accumulation anytime algorithm camp design time approximate processing camp :10.1.1.42.5409
represent ideas succinctly anytime algorithm model partial results available definition lin design time model results available quality accrue task complete definition dtt ae difference design time dtt approaches show generative subjective additions model dtt assume fixed known estimator actual method response 
deadlines associated task groups individual tasks quality accumulation defined done task deadline increase quality 
non local effects task containing method starts executing execution method finishes may potentially affect execution non local effect write relation respectively satisfy semantic requirements basic classes aggregation operators 
boddy assumption monotonically decreasing gain 
clear specification concepts benefits framework 
non local effect examples non local effects important part ms framework supply characteristics task environment unique different 
typically parameters channel reliability considered 
description agent control coordination algorithms describe communication occurs see communication actions section concept agency section 
model define different classes effects causes facilitates cancels constrains inhibits enables :10.1.1.35.6511
section contains definitions common classes effects useful modeling different environments 
non local effects occur methods associated different agents call coordination relationships 
enables 
task enables method maximum quality completed result available maximum quality change initial maximum quality 
follow discussion dtt lin section simple state models 
basically non interruptible single processor method executions agent enters method execution state method time remains state time gamma 
method execution actions similar shoham terms private actions 
considered pre method execution method execution action set upper time limit computation proceed meta state 
agent monitor execution long methods interleave execution actions pre entirely :10.1.1.42.5409
communication 
actions agent affect agents 
communication actions allow agents affect beliefs limited extent 
people worked formalizing aspects communication semantics communication actions freely defined environment 
track subjectively spans multiple agents sensor regions agent potentially identify track point imagining agent controller environment notices vlm method takes unusually long realizes sensor faulty accordingly 
communication agents may belief track agent suffers 
general having different subjective mappings different agents classes agents allows model situations agents simply differently informed 
turn control agents environment 
example simple static control algorithm uses meta level communication information algorithms :10.1.1.49.5163
static organization agents divide overlapping areas responsibility evenly possible resulting new areas responsibility agent overlap avoid redundant processing 
subjectively believed task structure described section communicated task results received information gathering actions agent time build list currently executable methods set precedence constraints 
time agent build list methods need executed precedence constraints met 
communication action algorithm broadcast highest level results task groups agent worked 
represent largest amount low level data task group seen agent total number agents see task group amount time take agent construct complete solution equal amount time take initial information gathering action plus amount time local vlm gamma vtm communicate get agents results plus amount time combine results gamma agents gamma vtm plus time produce final complete task group result vcm plus communicate result 
explained objective subjective levels modeling framework example moderately complex task structure simple control algorithm agent accomplish task 
turn generative level specify statistical properties environment episodes 
generative level objective subjective levels ms model individual situation adding generative level model allows go determine expected performance algorithm long period time individual problem solving episodes 
previous created generative models task interarrival times exponential distribution amount task group poisson task durations exponential likelihood particular non local effect tasks :10.1.1.42.5409:10.1.1.49.5163
generative level statistical parameters agents subjective reasoning example agent may control decisions knowledge expected duration methods 
generative level model constructed careful analysis real environment modeled observing statistical properties real episodes possible 
certain parameters real world unknown variables model ask questions affect things care 
approach far verify assumptions environment simple statistical approaches 
validated mathematical models simulation capabilities ms briefly showed section predict performance system objective subjective models particular episode 
useful explaining predicting assume agents start square geometry agents theta square agents arranged theta 
agent behavior particular episode scenario episodes real environment 
build probabilistic models relevant objective subjective parameters viewed random variables generative level parameters 
details process shows distributions objective parameters number vlm methods seen maximally loaded agent max number task groups seen agent defined just generative parameters :10.1.1.49.5163

example total time termination agent receiving initial data set size time local combine results agents build completed results plus communication information gathering actions discussed section sd vlm gamma vtm gamma nd vtm nd vcm eq 
predictor combining probabilities values refer interested reader derivations verification applications results :10.1.1.49.5163
note assumptions generative model change instance assume agents initially line side side square vehicles loop exiting sensed area probability distributions change form eqn 
build probabilistic models relevant objective subjective parameters viewed random variables generative level parameters 
details process shows distributions objective parameters number vlm methods seen maximally loaded agent max number task groups seen agent defined just generative parameters :10.1.1.49.5163

example total time termination agent receiving initial data set size time local combine results agents build completed results plus communication information gathering actions discussed section sd vlm gamma vtm gamma nd vtm nd vcm eq 
predictor combining probabilities values refer interested reader derivations verification applications results :10.1.1.49.5163
note assumptions generative model change instance assume agents initially line side side square vehicles loop exiting sensed area probability distributions change form eqn 

agent coordination algorithm changes eqn 
change see :10.1.1.49.5163
predictor combining probabilities values refer interested reader derivations verification applications results :10.1.1.49.5163
note assumptions generative model change instance assume agents initially line side side square vehicles loop exiting sensed area probability distributions change form eqn 

agent coordination algorithm changes eqn 
change see :10.1.1.49.5163
coordination algorithm discussed section results static organization dynamic organization responsibilities agents reassigned developing view problem hand 
due uncertainties explicitly represented task environment model may clear performance tradeoff static dynamic organizational structures 
agents dynamic organization option meta level communication communicating current state problem solving opposed communicating solving problem 
way information resolves uncertainties current environment available agents allowing agents create efficient organization situation 
coordination algorithm discussed section results static organization dynamic organization responsibilities agents reassigned developing view problem hand 
due uncertainties explicitly represented task environment model may clear performance tradeoff static dynamic organizational structures 
agents dynamic organization option meta level communication communicating current state problem solving opposed communicating solving problem 
way information resolves uncertainties current environment available agents allowing agents create efficient organization situation 
equations similar eq :10.1.1.49.5163
show potential benefits dynamic reorganization arbitrary environment discuss overhead meta level communication worthwhile 
simulation simulation useful tool learning parameters control algorithms quickly exploring behavior space new control algorithm conducting controlled repeatable experiments direct mathematical analysis complex 
simulation system built direct execution models ms framework supports example collection paired response data different coordination local scheduling algorithms compared identical instances wide variety situations generated generative level model 
simulation explore effect exploiting presence facilitation tasks multi agent real time environment quality accrued task deadline 
simulation system built direct execution models ms framework supports example collection paired response data different coordination local scheduling algorithms compared identical instances wide variety situations generated generative level model 
simulation explore effect exploiting presence facilitation tasks multi agent real time environment quality accrued task deadline 
environmental generative characteristics included mean interarrival time tasks likelihood task facilitating strength facilitation oe 
ms framework limited experimentation distributed problem solving 
garvey lesser framework describe effects various task environment agent design features performance real time design time algorithm :10.1.1.42.5409
manipulate objective subjective mapping examine questions monitoring execution tasks true method durations known 
show monitoring provide reduction missed deadlines reduction may significant medium loads 
garvey complex model enabling hindering task structures design optimal design time algorithm certain task environments 
contrast previous analytical example section consider ms simulator explore hypotheses interactions environmental agent structural characteristics 
ms provides environmental behavioral structures features state test theories control agents complex computational domains decisions scheduling task affect utility performance characteristics tasks 
ms mathematical framework simulation language executing experimenting models directly 
ms simulator supports graphical display generated subjective objective task structures agent actions statistical data collection clos ti explorer dec alpha 
features help model building stage verification stage 
ms simulator research coordination distributed problem solvers research real time scheduling single agent scheduling agent parallel processing resources available soon learning coordination algorithm parameters :10.1.1.42.5409
ms time automatically learn models automatically verify 
taken initial steps designing methodology verification see open area research :10.1.1.49.5163
include building new models different environments include physical resource constraints airport resource scheduling 
extensions envision include specifying dynamic objective models change structure result agent actions models add important source uncertainty factor influencing agent organization 
ms simulator supports graphical display generated subjective objective task structures agent actions statistical data collection clos ti explorer dec alpha 
features help model building stage verification stage 
ms simulator research coordination distributed problem solvers research real time scheduling single agent scheduling agent parallel processing resources available soon learning coordination algorithm parameters :10.1.1.42.5409
ms time automatically learn models automatically verify 
taken initial steps designing methodology verification see open area research :10.1.1.49.5163
include building new models different environments include physical resource constraints airport resource scheduling 
extensions envision include specifying dynamic objective models change structure result agent actions models add important source uncertainty factor influencing agent organization 
wish expand analyses questions scheduling coordination questions negotiation strategies emergent agent society behavior organizational self design 
acknowledgments authors marty humphrey alan garvey reviewers helpful comments suggestions 
international journal pattern recognition artificial intelligence 
keith decker alan garvey marty humphrey victor lesser 
real time control architecture approximate processing blackboard system 
international journal pattern recognition artificial intelligence 
keith decker victor lesser :10.1.1.35.6511
generalizing partial global planning algorithm 
international journal intelligent cooperative information systems june 
keith decker victor lesser 
analyzing quantitative coordination relationship 
international journal intelligent cooperative information systems june 
keith decker victor lesser 
analyzing quantitative coordination relationship 
group decision negotiation 
keith decker victor lesser :10.1.1.49.5163
approach analyzing need meta level communication 
proceedings thirteenth international joint conference artificial intelligence ery france august 
keith decker victor lesser 
shot dynamic coordination algorithm distributed sensor networks 
addison wesley reading ma 
alan garvey marty humphrey victor lesser 
task interdependencies design time real time scheduling 
proceedings eleventh national conference artificial intelligence pages washington july 
alan garvey victor lesser :10.1.1.42.5409
design time real time scheduling 
ieee transactions systems man cybernetics 
special issue scheduling planning control 
les gasser 
