vldb 
invited contribution 
hans 
schek editor vldb aditi deductive database system vaghani ramamohanarao david kemp peter stuckey tim james harland received april revised version december 
deductive databases generalize relational databases providing sup port recursive views non atomic data 
aditi deductive system client server model inherently multi user capable exploiting par shared memory multiprocessors 
optimization methods require optimizer know arguments call known call processed 
flag declarations tell compiler optimizations evaluation algorithms 
flags shown aditi differential semi naive evaluation answering queries relations list magic set optimization 
diff flags omitted differential evaluation default 
set flags supported current version aditi allows users request naive evaluation differential semi naive evaluation ramamohanarao predicate semi naive evaluation ramakrishnan evaluation magic set interpreter port magic set transformation bancilhon beeri ramakrishnan supplementary magic set transformation sacca zaniolo context transformations linear rules kemp parallel evaluation top tuple time evaluation section quite long list :10.1.1.45.1472
users may specify flags predicate 
example request differential evaluation magic set transformed program list ask context transformed program evaluated parallel implementation predicate semi naive algorithm 
combinations flags sense various magic set variants context transformation mutually exclusive 
flexibility offered flag mechanism selecting set optimizations applied predicate essential researchers investigate optimization methods evaluation algorithms 
bodies necessary flags establish sip 
bodies allow different modes completely different rule bodies just ordering variations rule body applications put capability 
assignment sips rule bodies completed call body mode number associated compiler views mode predicate separate procedure mode number part procedure name seen section 
hds hds level compiler implements optimizations defined terms source source transformations 
optimizations fit include magic set transformation bancilhon beeri ramakrishnan supplementary magic set transformation sacca zaniolo counting set transformation bancilhon sacca zaniolo constraint propagation kemp mumick context transformations linear rules kemp :10.1.1.45.1472
currently compiler performs magic supplementary magic context transformations 
help guide implementation transformations compiler uses predicate call graph graph node mode relation edges represent caller callee relationships 
strongly connected components sccs graph represent sets mutually recursive predicates 
call graph imposes partial order sccs predicates higher sccs calling lower sccs vice versa 
