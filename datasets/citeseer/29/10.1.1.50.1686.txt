effective hash algorithm mining association rules jong soo park ming chen philip yu ibm thomas watson research center yorktown heights new york fc park watson ibm com examine issue mining association rules items large database sales transactions 
mining association rules mapped problem discovering large itemsets large itemset group items appear sufficient number transactions 
problem discovering large itemsets solved constructing candidate set itemsets identifying candidate set itemsets meet large itemset requirement 
generally done iteratively large itemset increasing order large itemset large itemset items 
determine large itemsets huge number candidate large itemsets early iterations usually dominating factor data mining performance 
address issue propose effective hash algorithm candidate set generation 
important devise efficient algorithms conduct mining data 
requirement process large amount data distinguishes data mining database context study ai context 
important data mining problems mining association rules 
example database sales transactions interesting discover associations items presence items transaction imply presence items transaction 
problem mining association rules context database explored :10.1.1.40.6984
pioneering shown mining association rules decomposed subproblems 
need identify sets items itemsets contained sufficient number transactions minimum support requirement 
itemsets referred large itemsets 
large itemsets obtained desired association rules generated straightforward manner 
mention passing discovery association rules studied ai context various aspects data mining explored literature 
classification approach trying develop rules group data tuples certain common characteristics 
explored ai domain context databases 
source data mining ordered data stock market point sales data 
interesting aspects explore include searching similar sequences stocks similar movement stock prices sequential patterns grocery items bought set visits sequence :10.1.1.45.9405
organized follows 
detailed problem description section 
algorithm dhp proposed generating large itemsets described section 
performance results section 
note part part step building hash table pass unique feature dhp 
part basically part employ hash table 
note dhp particularly powerful determine large itemsets early stages improving performance bottleneck 
size decreases significantly stages rendering little justification filtering 
reason shall part early iterations part iterations number hash buckets count larger equal part minimum support set buckets zero hash table forall transaction insert count items occurrences hash tree forall subsets count leaf node hash part database large itemsets large hash table gen candidate gamma set buckets zero oe forall transactions count support tj tj tg fc jc count sg part gen candidate gamma jc oe forall transactions count support tj tg fc jc count sg jd break apriori gen refer main program algorithm dhp procedure gen candidate gamma oe forall delta delta gamma delta gamma delta gamma gamma jc gamma fcg insert hash tree procedure procedure count support explained section forall delta delta delta count jtj procedure procedure forall subsets delta delta delta subsets tj procedure algorithm dhp part pre defined threshold large :10.1.1.45.9405
note part procedure apriori gen generate essentially method algorithm apriori determining candidate itemsets omit details 
part included dhp completeness method 
setting part part consists phases 
phase generate set candidate itemsets hash table described procedure gen candidate 
take closer look transaction size trimmed dhp 
transaction contains large itemsets item contained itemsets appear candidate itemsets result item transaction trimmed appear candidate itemsets concept procedure count support trim transaction size 
certainly necessary condition sufficient condition item appear candidate itemset 
procedure check item transaction covered itemset transaction itemsets contained example trim reduce transactions 
note support itemset increased long subset transaction member described procedure count support keep occurrence frequency th item transaction subset containing th item member increase index item subset transaction corresponds corresponds corresponds :10.1.1.45.9405
procedure hashing subset transaction test subsets checking values corresponding buckets hash table reduce transaction size check item see item included itemsets eligible hashing item discarded meet requirement 
example transaction single candidate itemset ac 
occurrence frequencies items :10.1.1.45.9405
values transaction deemed useful generating large itemsets discarded 
procedure check item transaction covered itemset transaction itemsets contained example trim reduce transactions 
note support itemset increased long subset transaction member described procedure count support keep occurrence frequency th item transaction subset containing th item member increase index item subset transaction corresponds corresponds corresponds :10.1.1.45.9405
procedure hashing subset transaction test subsets checking values corresponding buckets hash table reduce transaction size check item see item included itemsets eligible hashing item discarded meet requirement 
example transaction single candidate itemset ac 
occurrence frequencies items :10.1.1.45.9405
values transaction deemed useful generating large itemsets discarded 
hand transaction candidate items occurrence frequencies items corresponding corresponding corresponding corresponding :10.1.1.40.6984:10.1.1.45.9405
keeps items discards item example transaction subsets ac ae af cd ef exist hash tree built get values array occurrences item :10.1.1.40.6984
large itemsets items count larger 
procedure hashing subset transaction test subsets checking values corresponding buckets hash table reduce transaction size check item see item included itemsets eligible hashing item discarded meet requirement 
example transaction single candidate itemset ac 
occurrence frequencies items :10.1.1.45.9405
values transaction deemed useful generating large itemsets discarded 
hand transaction candidate items occurrence frequencies items corresponding corresponding corresponding corresponding :10.1.1.40.6984:10.1.1.45.9405
keeps items discards item example transaction subsets ac ae af cd ef exist hash tree built get values array occurrences item :10.1.1.40.6984
large itemsets items count larger 
keep items transaction procedure count support discard items useless passes 
clearly items contribute large itemset generations 
example transaction single candidate itemset ac 
occurrence frequencies items :10.1.1.45.9405
values transaction deemed useful generating large itemsets discarded 
hand transaction candidate items occurrence frequencies items corresponding corresponding corresponding corresponding :10.1.1.40.6984:10.1.1.45.9405
keeps items discards item example transaction subsets ac ae af cd ef exist hash tree built get values array occurrences item :10.1.1.40.6984
large itemsets items count larger 
keep items transaction procedure count support discard items useless passes 
clearly items contribute large itemset generations 
fact belong large itemset ac cd ad large itemsets 
proposed effective algorithm dhp initial candidate set generation 
dhp hash algorithm especially effective generation candidate set large itemsets number candidate itemsets generated orders magnitude smaller previous methods resolving performance bottleneck 
addition generation smaller candidate sets enables effectively trim transaction database earlier stage iterations reducing computational cost stages significantly 
extensive simulation study conducted evaluate performance proposed algorithm 
agrawal faloutsos swami :10.1.1.45.9405
efficient similarity search sequence databases 
proceedings th intl 
conf 
foundations data organization algorithms october 
foundations data organization algorithms october 
agrawal ghosh imielinski iyer swami 
interval classifier database mining applications 
proceedings th international conference large data bases pages august 
agrawal imielinski swami :10.1.1.40.6984
mining association rules sets items large databases 
proceedings acm sigmod pages may 
agrawal srikant 
mining sequential patterns 
