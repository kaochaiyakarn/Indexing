transactional coordination agents composite systems hans jorg schek alonso institute information systems swiss federal institute technology eth eth ch zurich switzerland schek inf ethz ch proceedings international database engineering applications symposium ideas montreal canada august 
composite systems collections autonomous heterogeneous distributed software applications 
systems data dependencies continuously violated local operations coordination processes necessary guarantee correctness consistency 
coordination processes endowed form execution guarantees require participating subsystems certain database functionality atomicity local operations order preservation compensation operations commit 
functionality applications implemented transactional coordination agent coupled application 
discuss requirements met applications associated transactional coordination agents 
data dependencies making old ones disappear 
fundamental aspect interoperability keep track dependencies consistency necessary 
different subsystems involved dependencies may arbitrarily complex suggest coordination processes 
believe transactional execution guarantees coordination processes crucial purpose 
transactional execution guarantees include correctness case failures partial compensation appropriate alternative executions concurrency instance different processes try access shared resources simultaneously previous elaborated correctness criteria transactional coordination processes identified prerequisites met underlying subsystems order support transactional coordination :10.1.1.30.7027
coordination processes rely underlying subsystems provide key transactional functionality functionality deal database management systems dbmss arbitrary applications 
functionality provided top subsystems transactional coordination agents tca 
main contribution detailed discussion architecture principles generic tca functionality provide basic prerequisites necessary support endeavor 
furthermore implementation issues agent transactional coordination selected application system 
guaranteed termination compensation may provided subsystems may want compensate activities process failure occurred 
suppose test newly designed product fails 
deleted corresponding activities compensated wise keep done cad construction 
construction step removed occur compensation documented depicted 
behavior captured replacing atomicity coordination processes notion guaranteed termination guarantee process reach consistent state terminates :10.1.1.30.7027
order preservation consistent interaction coordination processes allowed 
example production process runs parallel construction process order minimize delays 
activities write bom get parts conflict arbitrary interleavings processes need avoided 
coordinator easily establish interleavings ordering operations accordingly order needs respected underlying systems 
case failures concurrent access shared resources coordinator provide certain execution guarantees processes 
firstly execution guarantees include guaranteed termination general notion atomicity standard semantics realized partial compensation alternative executions 
secondly correct parallelization concurrent processes required 
continues respect process coordination 
starting idea focused previous provision execution guarantees transactional processes elaborated correctness criterion prefix reducibility pred details :10.1.1.30.7027
correctness criterion addresses concurrency control recovery simultaneously considering special structure transactional processes 
furthermore allows high degree parallelism applying ideas composite systems theory 
discussion important understand key aspects transactional process management coordinator acts kind transaction scheduler general traditional database scheduler 
knows semantic commutativity activities ii 
blocking processes possible 
subsystem solution commitment activity deferred safe proceed 
imposes strongest requirements subsystems support xa interface open distributed transaction processing standard 
functionality exists phase commit pc protocol commit non activities process 
subsystems agreed commit successfully prepare commit message global commit determined coordinator deferred restrictions correctness criterion transactional coordination :10.1.1.30.7027
pc agent method subsystems directly support xa interface provide strict schedules pc functionality added tca pc agent method 
blocking solution restrictions execution activities trivially achieved blocking process non activity scheduled 
achieved subsystem leads worst case serialization coordination processes feasible solution 
commits imposes strongest prerequisites subsystems noted met compensation activities possible 

schek weikum ye 
unifying theory concurrency control recovery 
proceedings acm symposium principles database systems pods pages june 
alonso :10.1.1.30.7027
schek 
concurrency control recovery transactional process management 
proceedings acm symposium principles database systems pods philadelphia pennsylvania usa may june 

