alternating fixpoint logic programs negation allen van gelder computer science center university california santa cruz ca february alternating xpoint logic program negation de ned constructively 
underlying idea monotonically build set negative xpoint reached transformation related de nes stable models 
xed set negative positive follow deriving negative ones traditional horn clause semantics 
union positive negative called alternating xpoint partial model name alternating chosen transformation runs passes rst pass transforms underestimate set negative intermediate overestimate second pass transforms overestimate new underestimate composition passes monotonic 
principal contributions alternating xpoint partial model identical founded partial model alternating xpoint logic expressive xpoint logic structures 
nite structures xpoint logic expressive alternating xpoint logic 
background relation program completion semantics rst attempt put negation failure sound footing original program completion approach due clark discussed detail shepherdson lloyd 
completion logic program replaces set rules rules formalize intuition facts true follow rules 
mentioned works nicely nonrecursive rules 
researchers observed serious anomalies arise recursion 
thing completion produce inconsistent program shown example leads completed get problems program completion interpreted valued logic fitting kunen de ned valued logical consequence semantics :10.1.1.39.4588
approach failure prove means nite depth proof searches failed 
developments overcome objection raised minker workshop usual rules de ne transitive closure directed graph yield value false pairs nodes transitive closure 
transitive closures arise naturally applications parser generation type inference circuit design theorem proving 
example graph node search path keeps going cycle inde nitely completely failing 
converging 
precisely ap sp sp 
ap monotonic xpoint positive portion founded partial model positive induction xed set negative facts 
preliminaries section covers notational conventions preliminary facts operators models 
follow established terminology logic programming far possible standards works :10.1.1.64.9246
assume logic programs normal lloyd terminology stated de nition repeated 
de nition normal rule body conjunction literals normal logic program nite set normal rules 
herbrand universe logic program set ground variable free terms language terms composed function symbols constants appear herbrand set atoms atomic formulas formed relations program terms herbrand universe 
shall distinguish classes relations described section 
total model ph observe satisfaction rule expressed terms truth value ini simply asp negations 
condition rule value unde ned 
rules truth value unde ned satis ed 
particular value unde ned ifi false unde ned rule satis ed 
authors introduce valued logic give special meaning able de ne satisfaction terms truth rules prefer simply de ne satisfaction separately :10.1.1.39.4588
de nition motivated theorem example 
theorem instantiated normal logic program partial model extended total model minimum de ned partial model 
example example shows theorem hold reasonable looking alternative de nitions satisfaction 
partial model extend total model rule body evaluated unde ned considered satis ed 
manuscript 
elkan 
rational reconstruction nonmonotonic truth maintenance systems 
arti cial intelligence 
fitting :10.1.1.39.4588
kripke kleene semantics logic programs 
journal logic programming 
fitting ben jacob 
strati ed valued logic programming semantics 
