layer architectures erann gat jet propulsion laboratory california institute technology oak grove drive pasadena ca appears artificial intelligence mobile robots david kortenkamp peter robin murphy eds aaai press 
historical background mid rodney brooks touched interest autonomous robots subsumption architecture brooks 
time dominant view ai community control system autonomous mobile robot decomposed functional elements sensing system planning system execution system nilsson 
job sensing system translate raw sensor input usually sonar vision data world model 
job planner take world model goal generate plan achieve goal 
job execution system take plan generate actions prescribes 
sense plan act spa approach significant architectural features 
flow control components unidirectional linear 
information flows sensors world model plan effectors reverse direction 
second execution spa plan analogous execution computer program 
built primitives composed partial orderings conditionals loops 
executing plan program easy uninteresting compared generating 
information content composition structure primitives 
intelligence system lives planner programmer execution mechanism 
research efforts focused exclusively planning world modeling 
clear spa numerous shortcomings 
planning world modeling turned hard problems open loop plan execution clearly inadequate consensus definition word architecture context software systems 
chapter word mean set constraints structure software system 
face environmental uncertainty unpredictability 
researchers mid suggested different execution mechanism needed firby agre payton 
spa approach dominant time new labeled self contradictory reactive planning 
subsumption best known departure spa 
popularly perceived radical time 
ironically brooks seminal subsumption compatible extension spa individual layer 
don need decompose single layer traditional manner 
true extent key difference don need account desired perceptions processing generated behaviors single decomposition 
original presentation subsumption ostensibly radical departure spa attempt spa efficient applying task dependent constraints subsumption layers 
view reinforced canonical diagram subsumption shows information flowing sensors actuators just spa 
subsumption departs radically spa repudiation plans symbolic representations general brooks :10.1.1.110.6657
details brooks examples clear subsumption layers decomposed traditional manner 
simple networks small finite state machines joined wires connect output ports input ports 
subsumption provides mechanism composing basic building blocks produce complex control mechanisms ability override contents wire value wire 
process called suppression inhibition depending takes place input output port 
subsumption advocates development methodology consisting layering progressively complex task specific control programs called behaviors top 
subsumption provides architectural mechanism enforce support methodology 
subsumption achieved dramatic early success area collision free robot navigation 
robots pondering plans subsumption robots zipping lab 
common metric speed equals intelligence subsumption appeared major breakthrough 
subsumption reached robot called herbert programmed find retrieve soda cans office environment connell 
brooks launched ambitious project called cog writing results published 
herbert capabilities impressive today standards appeared represent limits achieved subsumption 
herbert unreliable record having performed complete retrieval task subsumption robot matched capabilities 
possible cause subsumption apparent capability ceiling architecture lacks mechanisms managing complexity 
quoting hartley important problem subsumption architecture sufficiently modular 
problems described really side effects 
upper layers interfere internal functions lower level behaviors designed independently increasingly complex 
means small changes low level behaviors vehicle redesigning controller 
brooks proposes solve problem reducing eliminating direct communications modules 
behaviors communicate world 
cases find approach useful 
problem similar states world mean different things depending context 
determining behavior highlevel completely artificial 
subsumption low level behaviors high level ones appropriate 
low level override higher levels 
note hartley issue fundamental tenet subsumption design methodology saying effect central architectural mechanism subsumption provides doesn 
noted hartley critique addresses subsumption engineering methodology model human intelligence brooks 
critique see kirsh 
years subsumption saw profusion new robot control architectures developed independently kaelbling arkin georgeff simmons introduced direct response subsumption shortcomings rosenblatt 
robots built alternatives tooth gat completed summer angle 
tooth small robot cm cm simple sensors limited computation bit microcontroller bytes memory capable robot 
tooth programmed search small objects coffee cups pick gripper return light bulb beacon 
similar capability demonstrated year outdoor robot miller gat control methodology 
contrast herbert tooth rocky iii extremely reliable running dozens trials failing 
fair herbert ambitious robot finding soda cans structured light vision system 
software controlled tooth rocky iii refer iii confused architecture described chapter layered design subsumption 
subsumption iii embraced abstraction rejecting 
subsumption higher level layers interface lower level ones suppressing results lower level computations results 
iii higher level layers interfaced lower level ones providing input advice lower level layers cf 
payton agre 
words layers iii provided layers computational abstraction layers functionality 
tooth rocky iii autonomous robots capable reliably performing complex task simply moving place place serious drawback possible change task performed rewriting control program 
different groups researchers working independently came similar solutions problem time connell gat bonasso 
solutions consisted control architectures comprised main components reactive feedback control mechanism slow deliberative planner sequencing mechanism connected components 
connell sequencer subsumption bonasso kaelbling rex system kaelbling gat firby reactive action packages raps system described thesis firby 
bonasso group adopted raps sequencing component gat sequencer developed new language esl gat 
aside technical advances items historical interest firby thesis 
title catch phrase changed reactive planning reactive execution clean break spa tradition 
second contains earliest description layer architecture de facto standard firby figures 
original architecture briefly implemented jpl robot wilcox record results 
raps control number real robots including uncle bob slack homer gat chip firby 
rap layer architecture come called 
connell subsumption architecture called sss 
gat architecture called atlantis 
implemented robby gat implemented number robots 
see section 
main differences atlantis atlantis different representation sequencing layer designed programming convenience planner representation sequencer controlled operation planner vice versa 
atlantis extended existing raps action model real time processes atomic operators feature incorporated back de facto standard 

role internal state point question naturally arises independently designed architectures turn similar structure 
components necessary sufficient just aesthetically pleasing number coincidence 
believe sound architectural rationale having exactly major components 
role internal state 
way motivation consider classic spa architecture associated difficulties 
planning time consuming world may change planning process way invalidates resulting plan 
problem exists world modeling 
second unexpected outcome execution plan step cause subsequent plan steps executed inappropriate context 
problem manifests running researcher syndrome characterized having chase robot push emergency button wrong turn 
fair consider problem associated brooks style reactive architectures 
reactive robot ultrasonic sensors control motions collide obstacles specular mirror reflections produce readings fail indicate obstacle presence 
problems viewed result method manage stored internal state information gat 
time consuming computations planning world modeling generate internal state semantics reflect world states past case world models case plans 
plan execution involves internal state program counter implicitly encodes planner expectations state world execution proceeds 
spa gets trouble internal state loses sync reality intended represent 
reactive solution problem minimize internal state possible 
state lose sync world sentiment expressed slogan world best model 
unfortunately extracting information world model requires sensors unreliable subject occlusions 
robot remember wall front little ago conclude wall probably despite fact vanished sonars 
eliminating internal state reactive approach avoids problem associated maintaining state runs problem extracting reliable information world sensors 
layer architectures organize algorithms contain state contain state reflecting memories past contain state reflecting predictions 
stateless sensor algorithms inhabit control component 
algorithms contain memory past inhabit sequencer 
algorithms predictions inhabit 
abstraction tool isolate aspects reality tracked predicted reliably ignore aspects 

anatomy layer architecture layer architecture consists components reactive feedback control mechanism reactive plan execution mechanism mechanism performing time consuming deliberative computations 
components run separate computational processes 
easily accomplished multi tasking multithreaded operating system done carefully coding algorithms manually interleaved single computational process 
components called skill layer sequencing layer planning layer respectively 
atlantis layers called controller sequencer 
discussion uses atlantis terminology possible description generic incarnations layer architecture 
controller controller consists threads computation implement feedback control loops tightly coupling sensors actuators 
transfer function computed controller changed run time 
usually controller contains library hand crafted transfer functions called primitive behaviors skills 
ones active time determined external input controller 
distinguish code implements transfer function physical behavior produced transfer function running robot environment shall capitalize 
behavior piece code produces behavior running 
primitive behaviors designed produce simple primitive behaviors composed produce complex behavior job done naturally sequencer 
classic examples primitive behaviors wall moving destination avoiding collisions moving doorways 
important architectural constraints algorithms go controller 
computing iteration transfer function constant bounded time space complexity constant small provide bandwidth afford stable control desired behavior 
second algorithms controller fail designed detect opposed avoid failure perform function designed noreils 
attempt design algorithms fail impossible real robots design algorithms fail detect failure 
allows components system sequencer take corrective action recover failure 
third internal state avoided possible 
important exception rule filtering algorithms rely internal state controller 
internal state purposes ephemeral expire constant bounded time 
way semantics internal state reflect true state affairs environment time error manifest bounded 
internal state controller introduce discontinuities mathematical sense behavior 
words behavior transfer function continuous function respect internal state 
responsibility sequencer manage transitions regimes continuous operation 
number special purpose languages developed programming controller gat brooks language long architectural constraints observed 
special purpose languages programming controller developed time robots support small processors development tools available 
current trend simply program controller sequencer sequencer job select primitive behavior transfer function controller time supply parameters behavior 
changing primitive behaviors strategic moments robot performing useful tasks 
problem course outcome selecting particular primitive particular situation intended simple linear sequence primitives unreliable 
sequencer able respond conditionally current situation 
approach problem enumerate possible states robot precompute correct primitive state particular task 
clever encoding daunting task tractable certain constrained domains schoppers 
universal plan approach serious drawbacks 
possible robot know current state especially unexpected contingencies arise 
second approach disregards robot execution history contains useful information 
alternative approach called conditional sequencing complex model plan execution motivated human instruction 
humans achieve tasks concise instructions face wide variety contingencies agre suchman 
conditional sequencing provides computational framework encoding sort procedural knowledge contained instructions 
differs traditional plan execution control constructs composing primitives limited partial ordering conditionals loops build spa plans 
conditional sequencing systems include constructs responding contingencies managing multiple parallel interacting tasks 
possible construct conditional sequencing system traditional programming language control constructs complex provided languages conditional sequencing effectively done special purpose language raps firby prs georgeff behavior language brooks rex kaelbling kaelbling bonasso esl gat 
major approaches design conditional sequencing languages 
complete languages right specialized execution semantics 
raps prs take approach 
layered top syntactically extensible programming language lisp 
approach taken behavior language esl 
furthermore structure language treat possible outcomes action homogeneous fashion language structured recognize privileged nominal result action treat outcomes failures 
raps prs take approach esl takes second 
approach chooses depends trying 
raps prs approach results circumscribed language suitable representation automated planner 
esl approach subsumes traditional programming language convenient easier extend difficult analyze 
sequencer perform computations take long time relative rate environmental change level abstraction controller 
exactly long long time depends environment repertoire behaviors 
usually constraint implies sequencer perform search temporal projection constrain example certain vision processing algorithms appearing sequencer especially computational resources limited 
locus time consuming computations 
usually means things planning exponential search algorithms noted include polynomial time algorithms large constants certain vision processing algorithms face limited computational resources 
key architectural feature behavior transitions occur time deliberative algorithm invoked time produces result 
runs separate threads control 
architectural constraints algorithms invariably written standard programming languages 
interface rest system different ways 
produce plans sequencer execute respond specific queries sequencer 
raps architecture takes approach bonasso 
esl atlantis architecture takes second approach 
natural result fact raps designed specifically serve plan representation automated planning system esl 
approaches mutually exclusive 
raps permit deliberative algorithms called rap experts invoked runtime answer specific queries atlantis sequencer ask give complete plan executes 
done application esl autonomous spacecraft pell 
discussion architectural guidelines govern design layer architecture derived fundamental theoretical considerations 
derived empirical observations properties environments robots expected perform algorithms proven useful controlling 
robot algorithms tend fall major equivalence classes fast stateless reactive algorithms hard realtime bounds execution time slow deliberative algorithms planning intermediate algorithms fairly fast provide hard real time guarantees 
fast slow measured respect rate change environment 
principle rate change environment sufficiently slow equivalently planner available sufficiently fast controller contain planner 
note situation essentially equivalent spa architecture 
empirically turns possible build planners fast operate manner realistic environments 

case study date half dozen different robots programmed variation layer architecture gat gat nourbakhsh slack connell firby bonasso firby slack 
describe detail 
alfred robot built real world interface rwi 
cylindrical robot twelve inches diameter mobility mechanism 
encoders drive steering motors provide fairly reliable odometry dead reckoning robot heading tends due slight misalignments wheels 
development enclosure houses computer radially symmetric ring twelve sonars biber 
sonars mounted panels allow easily reconfigured 
sonar configuration rotated degrees default factory configuration resulting sonar pointing straight forward direction motion sonar pointing directly side 
see 
turned empirically wall reliable 
schematic top view alfred showing sonar directions radial arrows relative direction motion dark central arrow obstacle detection regions 
alfred macintosh running macintosh common lisp mcl mounted top robot 
connect board rs serial port running baud 
alfred controller ran board 
sequencer programmed lisp ran 
alfred programmed compete events aaai mobile robot contest nourbakhsh 
event called escape office involved finding route room filled furniture large open area filled boxes 
second event called deliver coffee involved self localization maze 
alfred placed second event robot complete second event 
contest specific code robot written days person 
sections describe control sequencing deliberative layers alfred 
descriptions faithful actual implementation contest doubt improved 
control layer alfred control layer implemented alfa language action gat language designed structure enforce control layer architectural constraints 
alfa dataflow language looping constructs 
state variables making 
possible implement arbitrary algorithms alfa alfa constraint enforcement far perfect 
language impossible violate rules just difficult 
unfortunately turns alfa design difficult things allowed control layer 
longer advocate alfa preferring lisp little self discipline enforce architectural constraints 
alfred control layer interesting behaviors obstacle avoidance wall finding wall alignment wall wandering 
number uninteresting useful behaviors turning place 
obstacle avoidance done follows 
sonar data preprocessed indicate presence absence obstacle regions front robot 
rear facing sonars 
near field hard obstacle regions close front robot dark shading soft obstacle regions away 
hard obstacle region divided left right regions overlapped front sonar 
robot able detect collisions monitoring motor current 
obstacle regions egg shaped extending robot front sides 
core controller code safety algorithm running collision moving forward back slowly seconds collision moving backwards seconds obstacle hard obstacle regions obstacle soft obstacle regions set current speed slow obstacles gradually increase forward speed maximum value 
code effect slowing robot presence obstacles stopping robot imminent danger collision 
allowing detected obstacle immediately slow robot succession clear readings speed back robot reliably slowed cluttered areas lot specular reflection 
note code uses internal state remember collisions seconds happen keep track current maximum speed 
internal state obeys controller architectural constraints ephemeral second case part filtering algorithm 
filtering algorithm appear violate prohibition state dependent discontinuities case 
output controller continuous function state value state changes discontinuously time 
ideally collision response routine put sequencer robot detected collisions monitoring motor current time collision detected quite bit mechanical stress built robot drive mechanism 
simply stopping robot caused robot motor servo controller attempt maintain motor velocity zero maintained mechanical stress 
relieving stress required backing accomplish quickly possible response implemented controller 
example lines components layer architecture blurred accommodate reality 
obstacle avoidance done algorithm obstacle soft left obstacle region soft right region turn slowly right obstacle soft right obstacle region soft left obstacle region turn slowly left go straight turn commanded heading 
algorithm avoids obstacles choice turning direction clearly dictated situation 
obstacle directly front robot turn 
control layer information base choice turning direction choice deferred sequencer 
wall finding done turning sonar shortest range reading shortest reading forward sonar simultaneously moving forward forced obstacle hard obstacle region 
reliably leave robot facing nearest object 
initiated near wall robot turn wall 
wall alignment done slowly turning robot discontinuity caused onset specular reflection seen range reading returned forward sonar 
procedure begun facing smooth wall angle discontinuity occurred reproducible better degree 
wall done servoing robot heading reading side facing sonar moving forward 
conceptually simple actual implementation complicated number factors 
main problem straightforward servo loop side facing sonar unstable robot turns far wall cause specular reflection side sonar 
happens appears robot wall suddenly far away continue turn wall eventually collide safety module stops 
similar effect happens robot passes open door intersecting corridor 
possible solutions problem 
servo shortest reading side facing sonar adjacent sonars 
second model estimation algorithm filter compute distance wall 
solution alfred modelbased estimator filter 
estimator simply rejected sonar reading greater known distance wall 
estimator kept track robot heading odometer reading drive motor encoder reading time valid sonar reading taken 
invalid sonar reading occurred robot turned heading valid reading 
robot traveled meters valid reading robot stopped 
primitive behaviors implemented lines alfa code 
sequencing layer alfred sequencing code written macintosh common lisp version exception see set macros evolved esl gat 
mcl single threaded lisp impossible implement multithreaded task management directly 
mcl version multithreaded code infrastructure described section improved alfred code written 
contest event required robot search office environment door traverse obstacle area finish line 
door opened minutes start event different locations 
robot told initial orientation size room initial position locations obstacles 
alfred determined location wandering randomly minute keeping track maximum minimum positions axes 
wandering done augmenting code algorithm choosing turn direction choice clear current situation 
done care robot get stuck infinite loop 
alfred algorithm ambiguous obstacle avoidance situation encountered robot angular scan turning way 
angle turn gradually increased robot able move forward threshold distance triggering scan 
scan angle reset initial value 
alfred wander behavior written alfa stored internal state produce discontinuous behavior indicates considered part sequencing layer 
alfred attempted escape office trying door locations turn 
move center office point doors turn heading obstacle avoidance primitive 
wait escaped office indicated dead reckoning position case headed finish line time limit reached case tried door 
task required planning 
second contest interesting challenging 
robot put maze complete accurate map 
robot information initial position orientation 
robot task search hidden maze deliver destination 
robot partial information location 
course alfred sensors capable detecting told nearby alfred completed task cheating 
key alfred success combination behaviors allowed reliable navigation environments rich walls mazes creative representations 
addition representing priori map maze terms open space robot description maze terms wall assemblies comprised 
little time robot programmed convert representation automatically 
robot self localized locating wall 
invoking wall finding primitive verifying wall obstacle attempting follow distance meters 
began follow wall turning wall turned keeping track sequences turns 
turn checked see sequence turns created unambiguous match priori knowledge shapes wall assemblies maze 
done 
soon match robot knew 
began systematic search possible locations followed traversal delivery location 
note algorithms sequencer extensive internal state keeping track door location tried maintaining records robot position search temporal projection 
deliberative layer deliberative layer matching alfred self localization sequence priori map planned paths traveling locations 
algorithms simple exhaustive searches tractable fact search space bounded size maze 
standards ai deliberative layer trivial uninteresting precisely layer architecture non trivial interesting 
sequencing layer possible fact easy trivial uninteresting algorithms control real robots performing complex tasks 

layer architecture arises empirical observation effective algorithms controlling mobile robots tend fall distinct categories reactive control algorithms map sensors directly actuators little internal state algorithms governing routine sequences activity rely extensively internal state perform search timeconsuming relative rate change environment search algorithms planners 
layer architecture premise algorithms second type provide effective computational abstractions constructing interfaces algorithms second third type 
apparently reached independently different groups researchers 
algorithms third type programmed conventional programming languages 
algorithms second type appear benefit significantly specialized languages sophisticated control constructs 
attempts construct languages enforce constraints imposed algorithms type largely unsuccessful 
retrospect story layer architecture may learned research methodology robot control architectures 
years field bogged assumption planning sufficient generating intelligent behavior situated agents 
sufficient clearly justify planning unnecessary 
lot effort spent defending extreme positions 
may result hidden conviction part ai researchers root intelligence lies single simple elegant mechanism 
true architecture intelligence relies techniques layer architecture offers way help organize mess 
layer architecture means word architectures organizational tools 
largely ignores example issues sensor processing learning world modeling 
algorithms may turn fit nicely existing structure may prove necessary extend architecture incorporate 
promises fertile ground research 
acknowledgments pete bonasso robin murphy provided extensive thoughtful comments early draft chapter 
david miller marc slack provided useful comments early draft section 
conducted jet propulsion lab california institute technology contract national aeronautics space administration 
agre phillip agre david chapman 
pengi implementation theory activity 
proceedings international joint conference artificial intelligence ijcai 
agre phillip agre david chapman 
plans 
robotics autonomous systems vol 
pp 

angle colin angle tooth docs unpublished manuscript 
arkin ronald arkin 
integrating behavioral perceptual world knowledge reactive navigation 
robotics autonomous systems 
balch tucker balch io multiagent robot trash collecting team 
ai magazine summer 
biber biber ultrasonic ranging system 
proceedings th conference audio engineering society 
bonasso peter bonasso 
integrating reaction plans layered competences synchronous control 
proceedings internation joint conference artificial intelligence ijcai 
bonasso peter bonasso 
parallel program specifications reactive control underwater vehicles 
journal applied intelligence june 
bonasso peter bonasso experiences architecture intelligent reactive agents 
journal experimental theoretical ai 
brooks rodney brooks 
robust layered control system mobile robot 
ieee journal robotics automation vol ra march 
brooks rodney brooks 
behavior language user guide 
mit ai lab internal publication 
brooks rodney brooks :10.1.1.110.6657
elephants don play chess 
robotics autonomous systems 
brooks rodney brooks 
intelligence representation 
artificial intelligence 
connell jonathan connell 
colony architecture artificial creature 
technical report massachusetts institute technology artificial intelligence laboratory 
connell jonathan connell sss hybrid architecture applied robot navigation proceedings ieee conference robotics automation icra 
slack chris marc slack 
integrating deliberative planning robot architecture 
proceedings aiaa conference intelligent robots field factory service space 
firby james firby 
investigation reactive planning complex domains 
proceedings international joint conference artificial intelligence ijcai 
firby james firby 
adaptive execution dynamic domains 
technical report yaleu csd rr yale university 
firby james firby programming chip ijcai robot competition 
ai magazine spring 
firby slack james firby marc slack 
task execution interfacing reactive skill networks 
working notes aaai spring symposium lessons learned implemented architectures physical agents 
gat erann gat 
reliable goal directed reactive control real world autonomous mobile robots 
ph thesis virginia polytechnic institute state university blacksburg virginia 
gat erann gat 
alfa language programming reactive robotic control systems 
proceedings ieee conference robotics automation icra 
gat erann gat integrating planning reaction heterogeneous asynchronous architecture controlling mobile robots proceedings tenth national conference artificial intelligence aaai 
gat erann gat 
role stored internal state control autonomous mobile robots 
ai magazine spring 
gat erann gat behavior control robotic exploration planetary surfaces 
ieee transactions robotics automation 
gat erann gat greg 
robot navigation conditional sequencing 
proceedings international conference robotics automation icra 
gat erann gat 
esl language supporting robust plan execution embedded autonomous agents 
proceedings ieee aerospace conference 
georgeff michael georgeff amy reactive reasoning planning proceedings aaai 
hartley ralph hartley frank 
experiments subsumption architecture 
proceedings international conference robotics automation icra 
kaelbling leslie pack kaelbling 
rex symbolic language design parallel implementation embedded systems 
proceedings aiaa conference computers aerospace 
kaelbling leslie pack kaelbling 
goals parallel program specifications 
proceedings aaai 
kirsh david kirsh 
today tomorrow man artificial intelligence 
latombe jean claude latombe 
robot motion planning 
kluwer academic publishers 
miller david miller reactive navigation rough terrain experimental results 
proceedings aaai 
nilsson nils nilsson 
principles artificial intelligence 
palo alto tioga 

noreils fabrice noreils 
integrating error recovery mobile robot control system 
ieee international conference robotics automation 
nourbakhsh nourbakhsh winning robots robot competition 
ai magazine winter 
payton david payton 
architecture reflexive autonomous vehicle control 
proceedings international conference robotics automation icra 
payton david payton kenneth rosenblatt david plan guided reaction ieee transactions systems man cybernetics vol 
pp 

pell barney pell remote agent prototype autonomous spacecraft 
proceedings spie conference optical science engineering instrumentation 
rosenblatt kenneth rosenblatt david payton fine grained alternative subsumption architecture 
proceedings aaai stanford spring symposium series 
schoppers marcel schoppers 
universal plans reactive robots unpredictable domains 
proceedings international joint conference artificial intelligence ijcai 
simmons reid simmons 
architecture coordinating planning sensing action 
proceedings darpa workshop innovative approaches planning scheduling control 
simmons reid simmons 
aai robot competition exhibition 
ai magazine summer 

reactive control mobile robot 
proceedings international conference robotics automation icra 
suchman lucy suchman 
plans situated action 
cambridge university press 
wilcox wilcox vision system mars rover procedings spie mobile robots ii vol 

