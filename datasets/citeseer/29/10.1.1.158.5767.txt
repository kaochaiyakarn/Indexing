sequence matching learning anomaly detection computer security lane carla brodley school electrical computer engineering electrical engineering building purdue university west lafayette phone email ecn purdue edu problems importance computer security detect presence intruder masquerading valid user detect abusive actions part innocuous user 
approach problems examines sequences user actions unix commands classify behavior normal anomalous 
explore matching function needed compare current behavioral sequence historical pro le 
discuss di culties performing matching human generated data show exact string matching insu cient domain 
demonstrate number partial matching functions examine behavior user command data 
particular explore methods weighting scores adjacency matches growth functions polynomial exponential scoring similarities 
nd empirically optimal similarity measure user dependant measures assumption causal linkage user commands superior domain 
keywords application sequence learning partial matching classi cation recognition computer security anomaly detection behavioral modeling 
long standing problem eld computer security intrusion detection 
goal detect violations security policy computer site outsider 
possible approaches intrusion detection received considerable attention anomaly detection anderson lunt heberlein dias levitt mukherjee wood 
kumar anomaly detection attempts quantify usual acceptable behavior ags irregular behavior potentially intrusive 
de nition scope anomaly detection encompasses violations outsider anomalies arising violations part authorized user 
important note anomaly detection omits class security policy violations occur bounds normal behavior system site 
detecting anomalous behavior viewed binary valued classi cation problem measurements system activity system log les resource usage command traces audit trails produce classi cation state system normal abnormal 
lane brodley sented system intended address anomaly detection domain 
system learns user pro le subsequently employs detect anomalous behavior 
sequences actions unix commands current user input stream system current behavior consistent anomalous past behavior 
anomaly detection domain presents problems including learning positive examples handling concept drift measuring sequences human actions 
demonstrated closed world assumption address positive training examples di culty user behaviors distinguished particular de nition behavioral similarity lane brodley 
explore issue similarity measurement matching current behavioral pattern historical behavior 
demonstrate number possible matching functions examine behavioral di erences 
capturing causal nature user actions traditionally computer security user pro les built characteristics resources consumed typing rate command issue rate counts particular commands employed denning lunt frank 
approaches observation human computer interaction essentially causal process 
typically user goal achieve computer causes person issue certain commands causing computer act certain manner 
computer response turn keys actions part human 
user pro ling widely studied problem literatures computer security machine learning 
area security applications behavioral modeling anomaly detection described previously software forensics spa ord 
spa ord examined topic authorship analysis set software metrics mean line length placement syntactic structures ratio global local variable counts ratio white lines code lines identify program authors 
metrics focus global statistics address causal sequences actions 
furthermore allow encoding domain knowledge terms higher level features employed may overlook characteristics data 
machine learning researchers studied modeling human behavior contexts example automatic tutoring ba es mooney 
models student understanding subject set horn clauses de nes deviations correct theory subject 
system domain theory su ciently understood induce rules behavior case context arbitrary command processing systems su ciently thorough domain theory context include complete model system state computationally infeasible proposition 
form user pro le approach learns characteristic sequences actions generated users 
underlying hypothesis user responds similar manner similar situations leading repeated sequences actions 
existence command alias mechanisms unix command interpreters supports idea users tend perform repeated sets actions sequences di er user basis 
di erences characteristic sequences approach uses di erentiate valid user intruder masquerading user 
note detection anomalous behavior di cult informed malicious intruder may attempt emulate valid user behavior including alias command usage 
represent characteristic patterns actions system uses sequence ordered xed length set temporally adjacent actions fundamental unit comparison 
research actions taken unix shell commands arguments approach developed general extended stream discrete events operating system calls graphical user interface events 
set behavioral sequences gathered presumably intruder free history collected dictionary sequences 
dictionary system parameters sequence length instance selection policy noise suppression function classication threshold forms user pro le 
new sequence scrutiny compared dictionary described yield measure familiarity similarity past behavior 
similarity measure basis classi cation sequence anomalous normal 
envision anomaly detection system part personal software assistant helps monitor user account penetrations 
hope conjunction techniques employ knowledge rule base systems systems employing user selected higher level features techniques provide basis greater security privacy users sites 
privacy issues fact impossible characterize full space user behaviors positive examples account owner behavior available training 
norton explored sequence learning dna sequences norton data positive negative training examples 
anomaly detection domain di ers traditional concept formation tasks characterize user behavior positive examples 
di culty invoked closed world assumption seen historical data represents di erent user 
intuitively reasonable assumption terms anomaly abnormal unusual imply divergence past behavior important indication trouble 
interesting note separate research group independently developed anomaly detection technique examination sequences forrest hofmeyr somayaji forrest hofmeyr somayaji 
similar intent focuses monitoring behavior privileged programs unix system daemons detect exploitation services malicious users 
monitoring processes entails di erent set problems goals monitoring users 
system examines sequences system calls emitted running processes 
set possible system calls possible orderings calls restricted set space user level commands command sequences strict equality matching higher probability yielding useful results 
furthermore system calls emitted system services quickly commands users potentially times quickly 
fewer resources devoted processing sequence system calls devoted processing sequence user commands 
particularly intriguing research group arrived sequence detection system model human immunological system system origins behavioral model 
degree convergence systems suggests possibility congruences underlying models original human systems 
detecting anomalous behavior user pro le formed basic action detection system compare incoming input sequences historical data form opinion represent user 
fundamental unit comparison anomaly detector system command sequence 
dietterich michalski studied problem learning predict sequences tting sequence data model space possible models 
goal create system predict subsequent actions sequence goal classify sequences new actions consistent inconsistent sequence history 
input token streams segmented overlapping sequences tokens length sequence parameter system xed single run 
sequences compared similarity measure 
computing sequence similarity approach learning sequence data convert data feature vectors accumulating measures individual sequences hirsh japkowicz salzberg 
apply shelf classi er construction algorithm neural network decision tree feature vectors describe sequence data 
contrast approach uses measure sequences compare current input historical data 
direct analysis user command stream avoids domain knowledge required construct higherlevel features 
hypothesis classes approaches complimentary system incorporating may ective individually 
anumber possible methods exist measuring similarity 
straightforward equality function yields true sequences position false 
similarity function employed string matching algorithms advantage widely studied highly 
example unix diff program employs form matching 
srikant agrawal modi ed equality matching function detect frequently occurring sequences large data sets allow gaps intervening non matching elements sequence detection 
spite presumed causal nature human generated command sequences expect exact matches reasonably long sequences unpredictable asynchronous events arrival mail telephone calls viewed noise distorting causally driven process 
equality function viable choice particular domain 
equality matching viable technique aspects anomaly detection computer security demonstrated forrest 

system computes numerical similarity measure returns high value pairs sequences believes close resemblance pairs sequences believes largely di er 
individual elements sequences unordered set creates matching problem identical symbolic features ibl 
ibl similarity measure judging similarity sequences feature vectors 
initially examined similarity measure simply assigns score equal number identical tokens locations sequences 
consideration hypothesized measure assigns higher score adjacent identical tokens separated identical tokens preferable 
intuition token matches separated interleaving non matching tokens occurred chance adjacent matches occurred due causal process 
sequence seq tokens common seq common tokens adjacent seq similarity measure property sim seq seq sim seq seq 
requirement pair sequences shown onthe left higher similarity value pair right 
ls foo vi ls foo ls foo cat bar ls foo cat axis di erentiation similarity measures detect match adjacency vs detects match adjacency 
second axis bound maximum similarity measure function sequence length 
similarity measure scores sequences count matches regardless adjacency upper bound polynomial length sequences 
speci cally sequences length measure similarity measure mc match count polynomial bound 
examine hypothesis detecting match adjacency useful task modi ed mc bias similarity score favor adjacent matches described 
measure denoted mca match count adjacency polynomial bound bounded 
polynomial bound appropriate considering central hypothesis adjacent tokens produced causal process display high degree correlation 
stream independently generated tokens exponentially bounded function appropriate 
intuition causal linkage user generated tokens evidence deviation independence assumption 
test hypothesis reject independence hypothesis examined sim mc sim mca sim mc sim mca sim table scoring update functions similarity measures behavior exponentially bounded measures analogous polynomially bounded ones just described 
mc measure modi ed score exponentially number matches considering adjacency labeled mc 
mc measure upper bound mca measure adapted similar fashion create mca upper bound 
similarity measures encompassed algorithm operating sequences seq seq set adjacency counter value measure sim 
position sequence length seq seq sim sim 
positions examined return measure value 
di erences measures determined nature scoring function sim adjacency update function summarized table 
de ne similarity single sequence seq set sequences sim seq max seq seq seq similarity sequence user dictionary measure sequence compared similar sequence dictionary 
classifying user behavior input stream command tokens parsed data collection module described lane brodley detection module classi es current user normal anomalous token 
output detection module stream binary decisions indicating point input command data believes input stream point generated pro led user 
decisions detection module rst calculates similarity input sequence user dictionary yielding stream similarity measures 
intuitive sense stream represents familiarity input commands time step knowledge previous behavior user 
similarity stream smoothed reduce noise lane brodley classi cation performed time step 
current implementation classi cation threshold decision current smoothed similarity measure maximum minimum allowable bounds classify current time step normal classify abnormal 
thresholds system parameters selected empirically examining independent parameter selection data set drawn command history pro led user 
computing sequence similarity user pro le currently selected similarity measure item parameter selection data set thresholds selected proportion err rate samples fell outside thresholds speci cally err rate minimum threshold err rate maximum threshold 
smaller allowed error rate corresponds wider range acceptable similarities 
classi cation scheme relatively unsophisticated turns perform surprisingly cases 
currently investigating employing non parametric classi cation techniques clustering parzen windows fukunaga task 
examination similarity measures examine degree class separation produced similarity measures classify user command history traces 
data command histories collected members purdue millennium lab course slightly academic semester sets donated students 
user data set thirds tokens devoted training initial dictionary construction remaining third divided testing instances rest instances dictionary instance selection parameter selection 
user pro les initialized available training data pruned desired testing sizes sequences lru instance selection algorithm described lane brodley 
lru analogy page replacement algorithm name prunes instances dictionary examining timestamps point selected similar instance examination removing oldest timestamps 
experiments employed sequence length tokens smoothing window length sequences 
values selected previous experimentation lane brodley 
pro les created users test data users classi ed pro les similarity measure 
classi cation thresholds selected achieve false negative er ror rate parameter selection data detailed 
results experiments displayed tables 
results typical generally re ective trends data 
value table reports percentage instances tested user identi ed pro led user 
goal minimize rows pro led user maximize row corresponding pro led user user table user table 
table symbol indicates position best value occurs user 
mc mca denote match count match count adjacency bias similarity measures respectively su xes indicate similarity measure upper bound polynomial exponential length sequence 
table indicates de nite superiority mc task identifying pro led user user somewhat inferior behavior task distinguishing users user 
contrast algorithms perform spectacularly distinguishing users pro led user unacceptably high false negative rate 
unfortunately behaviors similarity measures nearly identical large parts tested space di cult identify relative merits data 
user mc similarity measure preferable 
result provides evidence hypothesis detecting adjacent matches desirable 
results table indicate mca preferable similarity measure user followed mca 
strong preference adjacency measures supportive hypothesis causality command sequences 
user preference polynomial bounded similarity measure supports hypothesis 
noteworthy mc algorithm poorest performance user dramatically 
indicates cases equality matching addition don care positions insu cient task user modeling context 
results user user demonstrate di erent similarity measures appropriate di erent users 
indicates need method detect similarity measure appropriate particular user research take account 
issue complicated possibility optimal similarity measure may time variant context single user 
possibility exists supported certain degree data table optimal similarity measure depends nature anomaly identity masquerading user 
presents di culty mentioned previously data available training valid user 
note signi cant disparity optimal dictionary sizes users vs sequences 
indicate user behavior characterized smaller set actions user 
possibility remains similarity measures investigated really appropriate measuring user behavior di erent measure fewer characteristic sequences required 
examination note instance selection lru algorithm described performed tokens data user pro le tokens available dictionary initialization 
small number sequences rated highly characteristic instance selection algorithm dictionary instances touched selection ectively random sequences strongly characteristic ones 
turns case user approximately instance selection sequences devoted selecting nal dictionary sequences 
hypothesize user lru instance selection algorithm concentrates undue attention sequences necessarily re ective true behavior selecting majority instances ectively randomly 
large number sequences required nal pro le obtain reasonable accuracy 
contrast lru select important instances successfully user fewer needed nal pro le 
sequences pro le characteristic behavior represent noise lead decreased performance degraded performance seen case user pro le larger nal dictionary sizes 
behavior demonstrated highlights interaction similarity measure instance selection algorithm choice similarity measure ected identity pro led user intruder possibly time concept drift choice instance selection technique 
examined issues involved similarity matching user behavior sequences 
nd best measure user dependent indications may depend choice instance selection technique identity anomalous intrusive user 
indications polynomially bounded measures measures biased support adjacent matches preferable 
adjacency polynomial bound evidence support hypothesis user behavioral sequences characterized strong correlations temporally close command tokens 
mc mca mc mca user user user user user user user table detections users similarity measures user pro le dictionary sequences mc mca mc mca user user user user user user user table detections users similarity measures user pro le dictionary sequences directions include examination forms similarity measures 
examining possibility replacing simple threshold classi cation system employed non parametric clustering classi cation system parzen windows fukunaga classi cation system hidden markov models rabiner user behavior 
classi cation schemes problem selection optimal similarity measure user needs examined 
issue concept drift addressed including uence concept drift optimal similarity measure 
issue kept mind dealing concept drift informed malicious users 
users presumed aware security measures place including anomaly detection system user pro les 
anomaly detection system resistant deliberate training ideally able distinguish genuine concept drift part legitimate user distortions introduced malicious user subvert security measures 
anderson 

computer security threat monitoring surveillance technical report washington pa james anderson ba es mooney 

novel application theory re nement student modeling 
proceedings thirteenth national conference onarti cial intelligence pp 

portland aaai press 
denning 

intrusion detection model 
ieee transactions software engineering 
dietterich michalski 

learning predict sequences 
michalski carbonell mitchell eds machine learning arti cial intelligence approach 
san mateo ca morgan kaufmann 
forrest hofmeyr somayaji 

sense self unix processes 
proceedings ieee symposium computer security privacy 
forrest hofmeyr somayaji 

computer immunology 
communications acm 
frank 

machine learning intrusion detection current directions 
proc 
th national computer security conference 
fukunaga 

statistical pattern recognition second edition 
san diego ca academic press 
heberlein dias levitt mukherjee wood 

network security monitor 
proceedings ieee symposium research security privacy pp 

hirsh japkowicz 

bootstrapping training data representations inductive learning case study molecular biology 
proceedings twelfth national conference onarti cial intelligence pp 

seattle wa 
spa ord 

authorship analysis identifying author program csd tr west lafayette purdue university department computer sciences 
kumar 

classi cation detection computer intrusions 
doctoral dissertation department computer sciences purdue university lafayette 
lane brodley 

detecting abnormal machine learning computer security tr ece west lafayette purdue university 
lunt 

ides intelligent system detecting intruders 
proceedings symposium computer security threat countermeasures 
rome italy 
norton 

learning recognize promoter sequences coli modelling uncertainty inthe training data 
proceedings twelfth national conference arti cial intelligence pp 

seattle wa 
rabiner 

tutorial hidden markov models selected applications speech recognition 
proceedings ieee 
salzberg 

locating protein coding regions human dna decision tree algorithm 
journal computational biology 


haystack intrusion detection system 
proceedings fourth aerospace computer security applications conference pp 

spa ord 

software forensics track code authors 
th national computer security conference pp 

srikant agrawal 

mining sequential patterns generalizations performance improvements proc 
fifth int conference extending database technology edbt 
avignon france 
acknowledgments tim gene spa ord ronny kohavi paul craig anonymous reviewers helpful comments 
grateful members purdue millennium lab data donors contributions data insight 
portion research funded commercial government sponsors supporters coast laboratory cisco systems hp schlumberger mitre sprint sun microsystems hughes research laboratories thompson consumer electronics department defense 
