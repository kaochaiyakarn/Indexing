multiple view consistency data warehousing yue zhuge janet wiener hector garcia molina computer science department stanford university stanford ca usa wiener cs stanford edu db stanford edu pub zhuge mvc ps data warehouse stores integrated information multiple distributed data sources 
effect warehouse stores materialized views source data 
problem ensuring data consistency warehouse divided components ensuring view reflects consistent state base data ensuring multiple views mutually consistent 
study problem guaranteeing multiple view consistency mvc 
identify define formally layers consistency materialized views distributed environment 
scalable architecture consistently handling multiple views data warehouse implemented whips warehousing information project stanford prototype 
identify define formally layers consistency materialized views distributed environment 
scalable architecture consistently handling multiple views data warehouse implemented whips warehousing information project stanford prototype 
develop simple scalable algorithms achieving mvc warehouse 
data warehouse stores integrated information multiple distributed data sources 
storing cleaned summarized analytical data storing historical data backup data caching query results fast query response time mediation system :10.1.1.11.8981
data warehouse usually read seen materialized views defined base data sources 
base data sources change views warehouse need updated accordingly 
computing new view states may done periodical recomputation entire view incremental main partially supported rome laboratories air force contract equipment digital equipment ibm 
view 
aspects making warehouse consistent making individual view consistent making views mutually consistent 
study call multiple view consistency mvc problem 
example multiple view consistency problem suppose views warehouse defined contents base relations views shown table 
time table changes base relations views time relation empty empty 
tuple inserted changes computed joining tuple relation result inserted view changes computed result inserted view view maintenance steps correct :10.1.1.91.5064
contents correctly updated reflect change base relation time reflects new state relation 
views consistent 
notice computing consistent values view inserting tuple simple may appear :10.1.1.91.5064:10.1.1.56.375
example computing tuple base relation updated leading insert tuple really existed join algorithms developed ensure view reflect consistent data :10.1.1.41.3787:10.1.1.19.5246
time table changes base relations views time relation empty empty 
tuple inserted changes computed joining tuple relation result inserted view changes computed result inserted view view maintenance steps correct :10.1.1.91.5064
contents correctly updated reflect change base relation time reflects new state relation 
views consistent 
notice computing consistent values view inserting tuple simple may appear :10.1.1.91.5064:10.1.1.56.375
example computing tuple base relation updated leading insert tuple really existed join algorithms developed ensure view reflect consistent data :10.1.1.41.3787:10.1.1.19.5246
algorithms ensure consistency individual view 
algorithms develop single view consistency algorithms ensure updates multiple views applied mutually consistent fashion 
single multiple view maintenance algorithms deal consistency see quite different 
tuple inserted changes computed joining tuple relation result inserted view changes computed result inserted view view maintenance steps correct :10.1.1.91.5064
contents correctly updated reflect change base relation time reflects new state relation 
views consistent 
notice computing consistent values view inserting tuple simple may appear :10.1.1.91.5064:10.1.1.56.375
example computing tuple base relation updated leading insert tuple really existed join algorithms developed ensure view reflect consistent data :10.1.1.41.3787:10.1.1.19.5246
algorithms ensure consistency individual view 
algorithms develop single view consistency algorithms ensure updates multiple views applied mutually consistent fashion 
single multiple view maintenance algorithms deal consistency see quite different 
particular multiple view algorithms independent data model single view ones depend model particular type views defined 
may involve queries back sources base data cached warehouse 
desirable process different updates different views concurrently 

delta computation takes time may intertwined subsequent updates 
instance example times computed join new tuple updated read may get fewer tuples wanted :10.1.1.91.5064:10.1.1.91.5064
way dilemma combine updates original new single atomic unit need machinery combine updates 
simplest solution mvc problem create single integrator process handles updates sequentially 
update receives sequentially computes changes views result update 
updates intertwined pulled computation 
possible design specific view managers handle new non traditional types views affecting existing system 
example specialized view manager predict new results data mining tests view changes integrated view 
architecture easy add delete views fly 
related organization believe mvc important problem addressed previous research 
previous papers defined single view consistency data warehousing environment :10.1.1.41.3787:10.1.1.19.5246
hull zhou defined single view consistency system data warehouse materializes intermediate views uses incremental view maintenance 
system possible achieve mvc sequencing propagation source update 
definitions materialized view consistency literature database state global clock timestamps transaction isolation properties 
definitions adapted obtain levels consistency define section single views 
hull zhou defined single view consistency system data warehouse materializes intermediate views uses incremental view maintenance 
system possible achieve mvc sequencing propagation source update 
definitions materialized view consistency literature database state global clock timestamps transaction isolation properties 
definitions adapted obtain levels consistency define section single views 
view maintenance algorithms centralized distributed :10.1.1.91.5064:10.1.1.56.375
system view manager may implement existing algorithms 
merge process needs know consistency level provided view manager run proper merge algorithm 
multi database system updating global view global transaction reading source base data multiple views updated consistently single global transaction 
consider loosely coupled system data sources autonomous 
state ss state transaction commits ss final state commit 
say seq consistent source state sequence equivalent defined previous paragraph 
view consistency consider view warehouse 
view maintained warehouse goes warehouse states seq ws ws ws definition say ws consistent source state ss written ws ss ws content ss result evaluating expression source state ss possible levels view consistency 
defined levels :10.1.1.41.3787
focus common levels strong consistency completeness 
definition warehouse state sequence seq strongly consistent exists consistent source state sequence seq ss ss ss mapping warehouse source states ws ss ffl warehouse state reflects consistent source state 
ws ws ws 
ffl order warehouse states matches order corresponding source states 
example fifth update received 
update just arrived 

integrator determines relevant views rel view relevant needs modified example relational model integrator determine source relation modified include rel views definition 
selection conditions view definitions rule irrelevant updates :10.1.1.144.2606
optimizations done discussed 

integrator sends rel merge process 
subscript implicitly sent merge process knows update rel refers 
line rows apply actions wt single warehouse transaction 
line 
line vut gray call 
line purge rows entries black gray vut return true 
procedure algorithm painting algorithm section develop merge algorithm underlying view managers strongly consistent necessarily complete strobe view managers :10.1.1.41.3787
showed strongly consistent view managers usually efficient easier implement complete view managers distributed warehouse environment :10.1.1.41.3787:10.1.1.19.5246
resulting painting algorithm pa strongly consistent prompt 
algorithm pa mentioned section strongly consistent view manager sends sequence als merge process 
brings view state gamma state represent intertwined source updates spa breaks shown example 
line 
line vut gray call 
line purge rows entries black gray vut return true 
procedure algorithm painting algorithm section develop merge algorithm underlying view managers strongly consistent necessarily complete strobe view managers :10.1.1.41.3787
showed strongly consistent view managers usually efficient easier implement complete view managers distributed warehouse environment :10.1.1.41.3787:10.1.1.19.5246
resulting painting algorithm pa strongly consistent prompt 
algorithm pa mentioned section strongly consistent view manager sends sequence als merge process 
brings view state gamma state represent intertwined source updates spa breaks shown example 
example strongly consistent view management example suppose views source updates assume merge process receives rel 
resulting painting algorithm pa strongly consistent prompt 
algorithm pa mentioned section strongly consistent view manager sends sequence als merge process 
brings view state gamma state represent intertwined source updates spa breaks shown example 
example strongly consistent view management example suppose views source updates assume merge process receives rel 
receives update separate point spa vut color equal red :10.1.1.56.375
vut color red apply row assume vut color red 
merge process receives als corresponding shown table entries 
time spa apply rows entries red black 
incorrect arrived apply row combined apply row 
example source transaction inserts tuple tuple new tuples appear views time 
scenario mvc means sources transactions local global involving update updates transaction reflected views 
assume source transactions serializable sequenced tn execution source transaction corresponds consistent source state 
source state executing ss words base data commit comprise source state ss source source state seen vector element source representing state source instant time 
detailed description possible transaction scenarios :10.1.1.41.3787
define ss result evaluating definition source state ss defining source states definition view consistency mvc section 
spa pa unchanged occurrence update algorithm need replaced transaction 
merge process receives information transactions updates row vut represents transaction update 
relevant views update re defined relevant view set source transaction rel includes views affected update performed transaction types view managers focused commonly types view managers previous discussion framework developed idea algorithms adapted easily handle type view managers 
ieee data engineering bulletin special issue materialized views data warehousing june 
hull zhou 
framework supporting data integration materialized virtual approaches 
sigmod pages montreal quebec canada june 
blakeley :10.1.1.144.2606
larson 
updating derived relations detecting irrelevant autonomously computable updates 
vldb pages kyoto japan aug 
labio quass 
sigmod pages montreal quebec canada june 
staudt jarke 
incremental maintenance externally materialized views 
vldb pages bombay india sept 
wiederhold :10.1.1.11.8981
mediators architecture information systems 
ieee computer march 
wiener gupta labio zhuge garcia molina widom 
system prototype warehouse view maintenance 
ieee computer march 
wiener gupta labio zhuge garcia molina widom 
system prototype warehouse view maintenance 
workshop materialized views pages montreal canada june 
zhuge garcia molina hammer widom :10.1.1.19.5246
view maintenance warehousing environment 
sigmod pages san jose california may 
zhuge garcia molina wiener :10.1.1.41.3787
strobe algorithms multi source 
workshop materialized views pages montreal canada june 
zhuge garcia molina hammer widom :10.1.1.19.5246
view maintenance warehousing environment 
sigmod pages san jose california may 
zhuge garcia molina wiener :10.1.1.41.3787
strobe algorithms multi source 
pdis pages miami beach florida dec 
zhuge wiener garcia molina 
multiple view consistency data warehousing 
