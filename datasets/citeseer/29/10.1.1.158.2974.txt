modelling dynamic web data gardner sergio maffeis department computing queen gate south kensington campus imperial college london sw az uk 
introduce xd calculus peer peer model reasoning dynamic web data 
web data just stored statically 
referenced indirectly example hyperlinks service calls scripts dynamically accessing data require complex coordination data processes sites 
xd calculus models coordination integrating xml data structure process orchestration techniques associated distributed pi calculus 
study behavioural equivalences xd analyze various possible patterns data process interaction 
key words dynamic web data process orchestration calculus xml web services semi structured data web data xml plays fundamental le exchange information globally distributed applications 
applications naturally fall sort mediator approach systems divided peers mechanisms xml interaction peers 
development analysis techniques languages tools web data means straightforward 
particular web services allow interaction processes data direct interaction processes supported 
extended revised version :10.1.1.158.2974
corresponding author maffeis acknowledges support microsoft research cambridge epsrc science 
email addresses pg doc ic ac uk gardner maffeis doc ic ac uk sergio maffeis 
preprint submitted elsevier science december peer peer data management systems decentralized distributed systems component offers set basic functionalities acts producer consumer information 
model systems peer consists xml data repository working space running processes 
processes regarded agents simple set functionalities communicate query update local repository migrate peers continue execution 
process definitions included documents selected execution processes 
functionalities express dynamic behaviour web data web services distributed replicated documents distributed query patterns hyperlinks forms scripting 
idea embedding processes scripts web data new examples include javascript calls web services 
web applications general provide direct communication active processes process coordination requires specialized orchestration tools 
contrast distributed process interaction describing communication coordination central model inspired current research distributed process calculi 
introduce xd calculus provides formal semantics systems described 
network locations peers containing data model processes modelling process interaction process migration interaction data :10.1.1.53.4500
data model basic model semi structured data unordered labelled trees explicit pointers urls referring parts network embedded processes querying updating data example hyperlink external pointer referring site light weight trusted process retrieving information associated link 
embedding processes data provides alternative patterns exchanging information web 
study behavioural equivalences xd 
particular define processes equivalent way processes put position network resulting networks equivalent 
stages 
define means xd networks equivalent 
second translate xd simpler calculus core xd location structure pushed inside data processes 
translation technique enables separate reasoning processes reasoning data networks 
define process equivalence study examples 
companion analyze alternative notions network process equivalence give proof method process equivalence regard process definitions documents atomic piece data consider queries modify definitions 
labelled bisimulation 
simple example illustrative example hyperlink consists external pointer remote location process follows pointer gets target subtree 
consider picture picture represents distinct locations location contains data tree triangles working space active processes processes 
location contains hyperlink node identified path external pointer data identified path location working space location process activate hyperlink click hyperlink firing request copy tree identified path write result give specific processes show activating hyperlink firing request modelled 
hyperlink written xml notation lhs notation rhs form link code code link link code link code hyperlink consists parts external pointer scripted process activates mechanism fetch subtree process form link code triggers execution working space 
process form link load read command reads external pointer link tree substitutes values parameters continuation evolves output process load output process records target location target path position result tree go 
output process call corresponding input process inside calculus interaction 
possible candidate qs load go copy go paste replication denotes input process times requested 
interaction load load replaces parameters values continuation 
process goes copies tree comes back tree process qs mimic happens practice 
process acting service call sends request location tree process service definition request 
processes defined load go get paste get copy go process receives parameters load splits parts process go get sends output message get information particular target path return location private channel name created calculus restriction operator process paste waiting paste result delivered unique channel process receives parameters get copies appropriate subtree returns unique channel definition process equivalence show processes qs interchangeable 
related models distributed systems distributed data access quite entirely separate research topics 
data models tend describe data manipulation modelling underlying distribution layer 
contrast process models describe exchanges data processes peers tend actual data 
xd calculus attempt integrate study mobile processes semi structured data web data sharing applications characterized emphasis dynamic data 
xd calculus probably related active xml model data integration developed independently abiteboul 
introduce peer peer model peer contains data model similar service calls scripted documents documents service calls migrate locations service definitions working space data resulting service call return position service call underlying distribution layer modelled 
contrast process approach flexible 
example define auditing process assessing university course goes government site selects assessment criteria appropriate particular course consideration moves information service definition university assessment 
database process algebra communities studied data models web 
tree model extends dynamic behaviour stronger emphasis links 
distributed query languages extend traditional query languages facilities distribution awareness 
approach closest sahuguet tannen introduce query language streaming large amounts distributed data partly motivated ideas calculus 
xd processes extension asynchronous processes explicit locations lines :10.1.1.53.4500
core xd uses polyadic synchronization 
propose proof technique equivalence xd processes higher order bisimulation techniques studied example :10.1.1.158.2974
study alternative notions network process equivalence give proof method order bisimulation exploits technique translating higherorder order labels 
process calculi study web features security properties web services mobile resources sketch distributed query language 
bierman sewell extended small functional language xml primitives order program home area network devices :10.1.1.158.2974
believe xd provide useful challenging framework study applications 
model dynamic web data model peer peer system set interconnected locations networks content location consists term tree representing local data term process representing services provided peer agents executing behalf peers local agents waiting answers remote queries 
processes query update local data communicate named channels migrate peers 
migration interpreted prescription possible implementations conceptual device distinguish clearly local non local interaction useful express remote communication advanced protocols involving code mobility 
trees data model unordered edge labelled rooted tree leaves containing internal external pointers embedded static processes may activated process working space 
semi structured data models unordered contrast ordered trees xml documents 
choice edge labelled rooted trees compared node labelled forests merely matter style 
choice embed processes pointers tree just leaves 
ideas depend choices 
set trees generated set edge labels elements denoted set path expressions elements identify data tree set locations generic elements denoted special element denotes enclosing location 
set data trees empty rooted tree composition trees joining roots edge labelled subtree edge labelled scripted process edge labelled pointer composition trees total analogous tag labels unique xml 
scripted process static process awaiting command run 
pointer refers data identified path expression location processes path expressions described 
structural congruence trees states trees unordered scripted processes identified structural congruence processes see table 
processes process orchestration techniques associated calculus coordinate movement data processes sites 
model exchange data channels processes calculus communication model private channel creation restriction operator extend processes explicit migration primitive moving processes locations 
model local interaction data tree processes working space simple update operation rewriting data simple run command activating processes embedded data 
denote channel names channels variables 
channel names partitioned public session channels disjoint sets cp cs respectively 
public channels denote channels intended meaning location finger restricted 
session channels process interaction free scripted processes occurring data 
values consist channel names forms data trees scripted processes locations path expressions 
formally set values ranged 
denote tuple values denote tuple variables values 
set processes nil process composition processes declare new channel name output values channel input parameterized distinct variables replication input process go migrate continue run processes identified path expression update update command described channel name bound distinct variables bound assume simple sorting discipline channels ensure number values sent channel matches number variables expected receive values 
write tuples values variables empty 
migration primitive go common calculi describing distributed systems see example 
enables process go alternative choice incorporate location information inside process commands example denote output message addressed channel location fact terms study process equivalence section 
command activates scripted processes identified path expression local tree 
update command update simple rewriting command locally update data tree pattern matching data identified path expression pattern 
patterns form matches tree assigns variable matches pointer assigns matches embedded process assigns data term ranges trees pointers scripted processes extended variables associated patterns 
variables bound update command finds values vi path expression pattern matches values obtain substitution exists 
successful pattern matching replaces vi starts parallel may derive simple commands general update command standard copy paste commands def read pointer location path def copy tree def cut tree def free paste tree evolve structural congruence processes similar calculus table 
notice depends structural congruence trees trees passed values 
networks model networks composition unique locations location contains tree process 
set networks continuing process alternative choice continue substitution obtained joining values obtained update pattern matching 
techniques robust respect choice 
chosen simple update rewriting command interaction processes data 
envisage combining imperative language updating trees 
trees values processes fn update update networks fn table structural congruence xd congruence satisfying alpha conversion commutative monoidal laws trees processes networks axioms reported 
network composition partial location names associated disjoint 
location denotes location containing tree process formed tree process closed tree contains free session channels 
hyperlink example saw session channel shared processes different locations 
lift restriction network level structural congruence networks defined table analogous processes 
path expressions semantic model robust respect choice mechanism expression identifies set nodes tree regard path function trees sets nodes structural congruence denotes tree nodes identified selected 
simplicity show node identifiers explicitly underline selected nodes 
simple subset xpath expressions denotes step edge labelled denotes path composition step back node appear inside trees denotes path root tree current node 
example underlined nodes selected path pattern matching pattern matching xml values active research topic 
just consider basic form pattern matching merely matches trees pointers scripted processes 
pattern matching carried partial function match takes arguments tree pointer scripted process second pattern 
argument matches pattern second match returns substitution binding variables occurring pattern 
definition match match match match reduction update semantics reduction relation describes movement processes locations interaction processes processes interaction processes data 
reduction axioms reported table 
reduction closed structural congruence reduction contexts rules process movement locations rule stay describes case process target location rule go allows process go leave reach rule depends existence location contrast migration rule assume migration possible 
choice profound effect behavioural equivalences studied section 
associate security check operation 
rules com com describe standard calculus interaction 
generic update rule provides interaction processes data depends auxiliary updating function table 
path expression rule selects update data denoted applies updating function order obtain new data set bindings spawns copy continuation 
function parameterized essentially matches underlined data pattern obtain substitution exists updates data records 
rule subtle 
matches selected underlined obtain substitution reduction axioms stay go go go com com 
update run updating function update 
xt pn 
pn zero link script node par match table reduction axioms updating function 
reduction relation networks smallest relation closed respect reduction contexts structural congruence reduction axioms 
updating function multiset substitutions denotes multiset union parameters update run command 
exists continues updating contain selected underlined nodes obtain data set substitutions replaces adds substitution current location path substituted actual values give example illustrating derived cut command cut operation cuts subtrees identified path expression spawns copy subtree 
example illustrates run substitution local go go cut go go data affected run operation effect spawning processes path note local path resolved completed path substituted ability select nested nodes introduces difference updating tree top bottom order 
particular resulting tree different set processes collected 
chose top approach bears closer correspondence intuition copy created update visible final tree outcome 
example update top bottom giving giving 
dynamic web data web services described hyperlink example 
generalize example arbitrary web services 
web services defined web sites computers words language independent interfaces web sites function similarly remote procedure calls 
define web service parameters body concatenation prefixes type result specified distinct variables bound def def 
go fixed parameters specify return location channel 
example process described written def get copy specify service call service sending actual parameters expecting return result specified distinct bound variables call ret def go process establishes private session channel passes web service unique return channel 
returning hyperlink example process running load 
call get ret paste notice easy model subscription continuous services model simply replicating input session channel sub ret def go note web services may take parameter return result data containing service call example see intensional parameters 
system choice invoke nested services completely open left service designer 
xlink base look refined example linking lines xlink 
xlink xml standard describing hyperlinks intended general sense 
simplifying say xlink entity denotes set sources set destinations describes relation sets 
html tag href url interpreted xlink single source associated url single implicit destination current browser window implicit relation get document source display destination 
mentioned links specify endpoints stored external repository example xlink code xlink 
xlink 
suppose want download xlink server links associated node local repository define function takes parameter requests xlink service originating order paste location sub ret paste link code service defined xlink server 
takes parameters components making endpoint link returns pairs code defined database def copy copy xlink xlink code xpath syntax xlink identify node son node xlink sibling similarly 
forms forms enhance documents ability input data user send server processing 
simplest common example form interface favourite search engine consist text field user write search criteria button clicked causes input text sent server execute search 
example assuming server location form path code process form result called handler form input submit copy input go handler reset cut input form submit form reset event generated clicking submit reset button 
user input provided process paste form input server handler ready deal received data handler 
example suggests usefulness embedding processes just service calls document code handle submission may vary form form example input validation performed client side 
behaviour dynamic web data hyperlink example stated processes qs basically intended behaviour context containing section provide formal analysis justify claim 
stages 
define means xd networks equivalent 
indicate translate xd equivalent calculus called core xd easier separate reasoning processes reasoning data 
define process equivalence core xd terms 
network equivalence apply standard technique reasoning processes distributed locations non standard setting 
define barbed congruence relation networks reduction closed closed respect reduction contexts satisfies additional observation relation described barbs 
case barb describes path update command affect data 
definition barb form location name path 
observation relation denoted binary relation xd networks barbs defined iff update contains location update command 
weak observation relation denoted defined iff observing barb corresponds observing points data tree process capability read write data 
notice barb gives information data modified ignores run commands 
additional information observed indirectly contexts 
definition barbed congruence largest symmetric relation xd networks implies weak barbs reduction closed closed network contexts 
companion studied alternative notions network equivalence different observation relations looking example shape tree data presence outputs existence locations 
alternative notions coincide yield equivalence relation liberal 
study specific equivalence order distinguish processes attempts interact data tree equivalent processes equivalent permissions access data 
examples example illustrates network equivalence imply initial data trees need equivalent 
example consider networks paste paste state reachable network reachable vice versa 
similarly network equivalence imply initial processes need structurally congruent 
example consider process defined continuously replaces vice versa 
update update processes barbs contains subtree simulate 

example shows equivalence sensitive interactions data effect 
example minimal example non equivalence update despite particular update copy command having effect data continuation process currently regard observable capability modify data 
networks equivalent chose structure trees observable see 
conclude section web service related example 
example place definition web service section generic context order show equivalent specification 
consider simple networks call ret ns go go def appear free ns special case example hyperlink example discussed 
restriction prevent context providing competing service clearly appropriate service name private 
alternative approach introduce linear type system studied example ensure service uniqueness 
core xd aim define processes equivalent way processes put position network resulting networks equivalent 
order able analyze processes directly introduce core xd calculus location structure pushed locally data processes 
translate xd core xd equate xd equivalence core xd equivalence 
core xd trees paths values defined xd exception scripted processes core xd processes 
located processes core xd processes asynchronous processes extended update run operations interacting trees 
set pro trees values processes fn update update stores networks table structural congruence core xd congruence satisfying commutative monoidal laws trees processes axioms reported 
cesses denoted update constructs line grammar correspond calculus nil composition restriction standard output process denotes vector values waiting sent channel location input process waits receive values output process channel replicated input standard 
run update commands located versions commands xd 
structural congruence analogous xd reported table 
notation parallel composition processes output input replicated input run update explicitly located appear free abbreviation tau action def networks stores network represented pair component store finite partial function location names trees second component process 
interaction processes data local shown rules update run table 
write dom denote domain store write union stores com com update run update xt pn pn table reduction relation core xd smallest relation closed respect reduction contexts structural congruence axioms reported 
disjoint domains 
network formed contain free variables scripted processes free session names 
reduction semantics networks closed respect network contexts cs cp store contexts cs cs process contexts cp cp cp network context cs cp write composition example cs cp 
composition involving stores defined stores disjoint domains 
omit subscripts contexts ambiguity arise 
reduction semantics reduction relation table depends updating function table describes process interaction interaction processes data implicitly movement processes locations 
rules com com basically standard communication rules calculus processes communicate location store 
rule update provides interaction processes data analogous xd 
barbed congruence core xd definition barbed congruence xd simply adapted core xd 
definition define observation relation networks barbs iff update contains location update command 
weak observation relation denoted defined iff definition barbed congruence largest symmetric relation core xd networks implies barbs reduction closed closed network contexts 
see section positive negative examples barbed congruence xd section translated examples core xd 
separation data processes encoding xd core xd described table 
hyperlink example explain link code load go get paste get copy go translation core xd involves pushing location structure case inside data processes 
denote translation network denote translation tree translation process depends location hyperlink example link code load 
get paste get copy points notice 
network translation assigns locations translated trees remain scripted processes translated self location 
necessary location scripted process run pre determined 
hyperlink example runs html form example network translation value translation table encodings xd core xd 
process translation go update update known form embedded scripted process required 
process translation embeds locations processes 
example embeds location location non trivial case migration command 
example process go translates located tau actions test existence source location destination location final located output obtained translating continuation network equivalence preserved translation xd core xd 
theorem full abstraction 
proof 
proof long reported appendix 
idea split translation steps translation xd core xd hybrid calculus retaining explicit migration reductions tight correspondence xd translation core xd core xd proper subset migration translated terms tau actions 
process equivalence analyze process equivalence core xd 
equivalence depends locations network network connectivity 
consider replacing definition service location uses local data equivalent depending data location connected behaviour services 
hand location fail behaviour services different 
network equivalences reliable locations domain store 
process equivalences necessary state explicitly minimum set reliable locations 
example consider olds def cut news def 
processes equivalent reliable context process delete second move consequence process equivalence indexed domain locations 
definition set location names define induced domain barbed congruence closed processes dom example consider process example 

order able replace process sub term equivalent extend process equivalence open terms terms free variables 
definition full process contexts defined update definition substitution closing substitution iff closed 
equivalence closed processes open processes say iff closing substitutions 
results implicitly stated open processes hold trivially closed processes special case 
theorem ii congruence full process contexts 
example strict inclusion consider processes olds news 
olds news olds news 
equivalent processes located location remove assumptions location domain 
lemma congruence result stated point ii theorem strengthened larger class contexts hole occur inside values processes 
lemma update update reinforced congruence property processes allows derive important property network equivalence equivalent scripted processes substituted inside store 
proposition proof 
update update 
lemma 
definition particular 
reduction closure case 
contextuality conclude 

core xd extension asynchronous calculus accordingly asynchrony law stating presence communication buffer observed holds core xd 
hand law hold def context read fresh location equator defined 
section show distributed possible regard different names interchangeably designated locations 
conclude subsection bigger examples equivalence web services 
example recall web service example example 
call ret go go def specification equivalent refinement example give example possible replicate web service transparently users 
internal nondeterminism represented def occur free define service calls interchangeable services service channel channel call ret call ret pm def go pn def go call call define provide call define provide call show regardless service invoked system built processes behaves way pm pn pm pn show result analogous single web service example 
nondeterministic specification process qs go go go go equivalent service calls 
example pm pn qs pm pn restriction avoids competing services channel 
consider case barb go go equivalence pm pn pm pn shows client aware service replicated 
bisimulation proof methods type equivalences defined previous section known difficult 
particular condition closure contexts involves universal quantification processes complicates proofs 
studied proof methods labelled bisimulation relations congruence derived property 
particular defined bisimulation equivalence property processes proof technique complete strong prove process equivalences shown 
main difficulties involved defining equivalences core xd caused having scripted processes values barbed equivalence sensitive presence locations 
technique defined higher order bisimulation concurrent processes studied example :10.1.1.158.2974
noted problem inherently connected higher order technique chosen requiring bisimilarity restrictive 
fact case run inside context 
define alternative notion bisimulation solve problem just mentioned translating messages containing scripts ones script replaced uniquely named trigger placeholder placing parallel definitions associating trigger code scripted process 
approach possible analyze interaction scripts contexts 
discussion technique see applied higher order calculus 
solve problem location sensitivity adaptation bisimulation approach families relations indexed sets locations call bisimilarity 
introduces xd simple calculus describing interaction data processes distributed locations 
simple data model consisting unordered labelled trees embedded processes links parts network processes extended explicit migration primitive update command interacting data 
alternative approach encode data processes 
xd calculus models data processes level abstraction enabling study properties data affected process inter action 
studied behavioural equivalences xd 
plan reason formally alternative patterns exchanging information web example ones discussed 
alex ahern developed prototype implementation adapting ideas xml standards 
implementation embeds processes xml documents uses xpath query language 
communication peers provided soap web services working space location endowed process scheduler ideas pict :10.1.1.127.1777
aim continue implementation incorporating ideas languages calculus 
active xml probably closest system xd calculus 
web services service calls embedded data processes 
key difference approach active xml focusses modelling data transformation delegates role distributed process interaction implementation contrast process interaction fundamental model 
similarities model features active xml implementation process doing depth comparison projects 
security central concern systems sharing dynamic data web 
currently studying fine grained access control web services documents type systems statically guaranteeing structure xd data extending techniques studied distributed calculus semistructured data 
summary provides step adaptation techniques associated process calculi semi structured data reason dynamic evolution data web 
serge abiteboul alex ahern omar luca cardelli giorgio ghelli tova milo val tannen nobuko yoshida stimulating discussions 
anonymous referees suggestions helped improve presentation 
serge abiteboul omar tova milo ioana manolescu roger weber 
active xml data centric perspective web services 
verso report number 
serge abiteboul angela gr gory ioana manolescu tova milo 
dynamic xml documents distribution replication 
proceedings acm sigmod 
serge abiteboul peter buneman dan suciu 
data web relations semistructured data xml 
morgan kaufmann 
serge abiteboul active xml primer 
inria report number 
alexander ahern 
language updating web data 
master thesis imperial college london 
martin berger kohei honda nobuko yoshida 
linearity bisimulation 
proceedings fossacs pages 
lncs 
gavin bierman peter sewell :10.1.1.158.2974
iota concurrent xml scripting language application home area networks 
university cambridge technical report cl tr jan 
reinhard markus kemper donald kossmann alexander kreutz stefan konrad 
ubiquitous query processing internet 
appear vldb journal special issue services 
cristiano gardner uri 
context logic tree update 
popl appear 
marco sergio maffeis 
expressive power polyadic synchronisation calculus 
nordic journal computing 
luca cardelli giorgio ghelli 
query language ambient logic 
proceedings esop volume lncs pages 
springer 
sylvain fabrice le 
jocaml mobile agents objective caml 
proceedings asa ma palm springs ca usa 
damiani de di vimercati stefano paraboschi samarati 
fine grained access control system xml documents 
acm trans 
inf 
syst 

william ferreira matthew hennessy alan jeffrey 
theory weak bisimulation core cml 
journal functional programming 
gardner laneve :10.1.1.158.2974
linear forwarders 
proceedings concur volume lncs pages 
springer 
gardner sergio maffeis 
modelling dynamic web data 
proc 

gardner sergio maffeis 
modelling dynamic web data 
georg lausen dan suciu editors proc 
dbpl volume lncs september 
gardner sergio maffeis :10.1.1.158.2974
modelling dynamic web data 
imperial college london technical report oct 
jens thomas hildebrandt sassone 
calculus mobile resources 
proceedings concur lncs 
andrew gordon riccardo pucella 
validating web service security abstraction typing 
proceedings acm workshop xml security pages 
matthew hennessy james 
resource access control systems mobile agents 
inf 
comput 
kohei honda mario tokoro 
object calculus asynchronous communication 
proceedings ecoop volume lncs pages berlin heidelberg new york tokyo 
springer verlag 
kohei honda nobuko yoshida 
reduction process semantics 
theoretical computer science 
alan jeffrey julian :10.1.1.127.1777
contextual equivalence higher order revisited 
computer science report university sussex 
kemper christian 
dynamic distributed query processing internet 
proceedings vldb pages 
sergio maffeis gardner 
behavioural equivalences dynamic web data 
proc 
ifip tcs august 
draft long version available www doc ic ac uk maffeis 
world wide web consortium 
xml path language xpath version 
available org tr xpath 
robin milner joachim parrow david walker 
calculus mobile processes ii 
information computation september 
benjamin pierce david turner :10.1.1.127.1777
pict programming language pi calculus 
proof language interaction essays honour robin milner 
mit press 
arnaud sahuguet 
distributed query language program distributed query systems 
phd thesis university pennsylvania 
arnaud sahuguet benjamin pierce val tannen 
distributed query optimization mobile agents help 
unpublished draft 
arnaud sahuguet val tannen 
resource sharing query process migration 
university pennsylvania technical report ms cis 
davide sangiorgi 
expressing mobility process algebras order higher order paradigms 
phd thesis university edinburgh 
davide sangiorgi robin milner 
techniques weak bisimulation 
revised version article appeared proc 
concur lncs 
davide sangiorgi walker 
calculus theory mobile processes 
cambridge university press 
bent thomsen 
theory higher order communicating systems 
inf 
comput 
full abstraction order study formal relation xd core xd find helpful consider slightly bigger language core xd retains explicit migration 
way possible tighter correspondence reductions xd core xd possible directly core xd 
relating network equivalence languages relate exploiting fact core xd proper subset core xd xd core xd core xd obtained core xd extending grammar processes production 
go extending reduction rules axioms stay go go go effect rule go verify existence locations rule stay seen special case structural congruence core xd analogous core xd 
definitions results section section hold analogously core xd interesting additional laws holding core xd state initial migration step location domain store observed independently store domain migration step equivalent subsequent tau actions located source target migration 
justifies informally rule encoding process migration xd core xd 
lemma migration existing location observed go 
ii migration step equivalent checking existence source target locations go encoding xd core xd case migration go go 
slight abuse notation section reserve encodings networks processes trees xd core xd denote encoding networks xd core xd denoted precedence simply 
order establish operational correspondence xd core xd need auxiliary lemmas 
lemma shows encodings respect structural congruence 
lemma 
proof 
cases follow structural induction order show encodings preserve substitutions need extend notion data translation substitutions sets substitutions obvious way 
lemma 
proof 
follows structural induction updating querying trees preserved encodings 
lemma ii proof 
cases follow founded induction nesting depth nesting depth defined inductively max clarity state explicitly reduction rules dealing structural congruence reduction contexts xd ones core xd analogous 
ctx struct lemma strong operational correspondence xd network ii exists proof 
rule induction derivation base cases stay go com com update run inductive cases struct ctx 
stay rule stay go definition encoding go derive rule ctx instance axiom stay go premise 
conclude definition encoding 
go similar previous case 
com previous case point lemma justify results communication translation equals encoding 
com similar previous case 
update similar previous cases point lemma relate premises axiom update calculi 
run similar previous case 
ctx suppose 
want show implies 
simple induction structure follows exists core xd context 
allows conclude rule ctx 
struct follows point lemma rule struct core xd term 
ii cases axioms derive show detail case stay 
axiom derive stay case go dom dom 
go definition 
point ii lemma implies 
conclude struct derive cases axioms similar point ii lemma point ii lemma 
lemma weak operational correspondence xd network ii exists proof 
cases follow induction number reduction steps lemma 
lemma observational correspondence 
proof 
definition lemma show follows easily definition encodings 
analogous previous case 
note core xd processes obtained translation xd processes example consequently core xd sense reduction contexts xd order relate contextual equivalence languages need relate contexts 
lemma core xd process exists xd process proof 
structural induction show inductive case input process 
core xd process want show xd process go hypothesis go 
congruence property process equivalence analogous lemma core xd holds point ii theorem get 
point lemma obtain go conclude transitivity 
cases similar 
lemma contextual correspondence xd network core xd context exists xd context 
proof 
sketch 
induction structure 
inductive case uses hypothesis non emptiness build context xd process equivalent exists lemma placed inside location domain building blocks show encoding preserves barbed congruence 
theorem full abstraction 
proof 
showing relation core xd networks included relation preserves observables lemma reduction closed lemma 
show preserves contexts 
suppose need show arbitrary contextuality get 
lemma transitivity get suitable 
similarly derive conclude deriving contextuality 
showing relation xd networks included 
cases similar previous point 
relation preserves contexts definition encoding 
core xd core xd formally related xd core xd subsection relate core xd core xd order justify core xd core calculus study behavioural equivalences 
consider encoding core xd core xd networks homomorphic terms case process migration specified go informally suggested point ii lemma 
encoding processes respects process equivalence 
lemma core xd processes 
proof 
structural induction homomorphic cases trivial 
weak bisimulation weak bisimulation valid proof technique weak observation relation clause barbed congruence see 
show inductive case migration process 
go hypothesis want show go 
applying congruence property process equivalence get point ii lemma get transitivity conclude 
substitutivity process equivalence previous lemma tell encoding trees preserves equivalence 
corollary analogous proposition core xd lemma follows 
lemma core xd network 
proof 
structural induction base case trivial 
inductive cases stores processes 
inductive case stores suppose 
want show contextuality corollary transitivity conclude case processes similar goes induction structure process context lemma corollary 
clarity denote network barbed equivalence core xd networks core xd 
observation definition encoding core xd network core xd context exists core xd context 
theorem core xd networks 
proof 
follows easily lemma fact core xd context core xd context 
follows lemma observation relating contexts 
corollary theorem theorem theorem follows xd networks 

