query decomposition view maintenance query languages unstructured data dan suciu research usa suciu research att com query languages proposed querying information sources data constrained schema schema unknown 
examples include lorel querying data combined heterogeneous sources qs querying world wide web unql querying unstructured data 
natural data model languages rooted labeled graph 
main novelty ability express queries traverse arbitrarily long paths graph typically described regular expression 
queries may prove difficult evaluate case data distributed sites edges going sites 
typical case collection www sites links pointing freely site forming cycles 
example suppose want fetch publications computer science department university california san diego home page www ucsd edu 
html structure need search illustrated 
convenient view html data rooted directed graph nodes correspond pages edges links page set outgoing links prob ignore node content trees labeled edges nodes 
case html data justify choice fact focus structural content queries 
see bdhs justification model :10.1.1.32.3916
www cs ucsd edu academic people researches papers papers papers papers ee department schools papers papers papers cs department departments papers papers fragment www ucsd edu result query lem expressing query relational objectoriented query language don know advance links follow root cs department link papers link 
slightly modified unql syntax query expressed select papers cs department papers db db stands database example www ucsd edu site 
symbol denotes label placed label means repeated times 
means sequence labels 
course query applied university sites retrieve papers published computer science departments 
example illustrates main feature separating query languages unql lorel qs relational object oriented query languages ability follow arbitrarily long sequences links 
typically sequences described regular expressions 
particular compute transitive closure link relation 
bdhs call languages unstructured query languages :10.1.1.32.3916
natural data model rooted directed graph labels attached vertices edges 
traditional relational databases captured model special case trees fixed depth bdhs see section :10.1.1.32.3916
relational databases expressive power languages powerful relational algebra bdhs :10.1.1.32.3916
discuss problems connection languages query decomposition view maintenance 
typically sequences described regular expressions 
particular compute transitive closure link relation 
bdhs call languages unstructured query languages :10.1.1.32.3916
natural data model rooted directed graph labels attached vertices edges 
traditional relational databases captured model special case trees fixed depth bdhs see section :10.1.1.32.3916
relational databases expressive power languages powerful relational algebra bdhs :10.1.1.32.3916
discuss problems connection languages query decomposition view maintenance 
describe problems 
query decomposition information sources reside number different sites 
particular compute transitive closure link relation 
bdhs call languages unstructured query languages :10.1.1.32.3916
natural data model rooted directed graph labels attached vertices edges 
traditional relational databases captured model special case trees fixed depth bdhs see section :10.1.1.32.3916
relational databases expressive power languages powerful relational algebra bdhs :10.1.1.32.3916
discuss problems connection languages query decomposition view maintenance 
describe problems 
query decomposition information sources reside number different sites 
database fragment site may large number links leading sites 
laws additional ones dealing cyclic data order derive query decomposition techniques 
need add additional operations uncal consider labeled graphs roots class objects language trees cou pp extend uncal graph juxtaposition see section 
equations associated new operations spirit cou pp simpler gext 
applicability assumptions limitations query language describe techniques context query language unql bds bdhs apply equally decomposing queries certain fragments lorel qs 
important notice query decomposition view maintenance critical way particular language constructs unql tree concatenation denoted bdhs :10.1.1.32.3916
note techniques apply unql queries expressible lorel qs 
restrictions query language query decomposition technique works unql queries satisfying restrictions 
requires query monotone 
particular handle set difference incremental deletions 
hand reader may noticed site site distributed database 
sense redundant rooted graph edges shown bisimilar rooted graph edges bds bdhs 
works graphs markers 
tree fag represented edge fa fg xg equivalent tree edges 
notation bdhs abuse notation call trees graphs cycles :10.1.1.32.3916
tree denotes set databases single anonymous input outputs tree databases inputs outputs tree tree tree tree canonical form database db tree expressed necessarily uniquely rec xm set fx cycle free 
representing distributed databases illustrate distributed database represented notation example db stored sites start cutting cross links inserting markers place input old root 
fragments database residing sites tree tree def fx def fx def fx denotes root db 
db tree rec juxtaposition disjoint graph union 
sent client updates view replace 
correct decomposable 
note new view computed old increment delta depend directly db 
possible join free 
calculus uncal bdhs introduces language unql query language browsing unstructured data data structure partially known :10.1.1.32.3916
shown unql equivalent calculus called uncal way certain fragment sql equivalent relational algebra 
briefly review uncal 
dry formalism refer reader bdhs presentation equivalent unql language :10.1.1.32.3916
lists constructs monotone fragment uncal call uncal uncal obtained restricting uncal ways emptiness test isempty removed gext construct replaced restrictive vext 
possible join free 
calculus uncal bdhs introduces language unql query language browsing unstructured data data structure partially known :10.1.1.32.3916
shown unql equivalent calculus called uncal way certain fragment sql equivalent relational algebra 
briefly review uncal 
dry formalism refer reader bdhs presentation equivalent unql language :10.1.1.32.3916
lists constructs monotone fragment uncal call uncal uncal obtained restricting uncal ways emptiness test isempty removed gext construct replaced restrictive vext 
show queries expressed uncal monotone way formal bun 
briefly describe constructs queries label variables constants user defined predicate 
db stands input database fg returns empty set node edges fa qg returns singleton tree label constant label variable returns union trees 
case oid external oid query access 
allow exception rule query database named inputs may unique marker denoting root input db query db def db legal db db fag 
main construct language vext 
explain vext interacts input output markers recall fa inputs outputs assume inputs fx xm outputs fy yn definition vext returns tree delta inputs delta outputs 
name denote delta new distinct marker markers require operation injective delta delta definition inputs vext delta def fa delta outputs delta convention single anonymous input vext inputs illustrate vext detailed example refer bdhs general definition vext :10.1.1.32.3916
example recall query example returns papers computer science department 
consider variant stops path finds papers edge cs department intuitively optimization assumes department edge occurs papers edge 
expressed follows vext db fa cs department fx papers fg fx fx fx best visualized graphically 
contains example database outputs fx zg 
query decomposition method recall need replace rec rec decomposable cost evaluating method method efficient rec may avoid accessing parts database needed 
query decomposition method cost computing db centralized version db method may expensive db method 
call uncal expression constant doesn mention input database db 
note example sub query vext db constant expression 
call query join free sub query form vext constant additional output markers easy extend results bdhs show relational algebra operations union selection projection relational databases expressed trees expressed join free uncal queries intersection cartesian product expressed uncal join free queries :10.1.1.32.3916
condition imposed want disallow self concatenation db db order theorem hold 
direct self concatenation possible uncal db output markers query 
rule self concatenation form vext db db uses marker place deep db leave 
purpose results section call unql query positive iff translation uncal bdhs uncal doesn isempty :10.1.1.32.3916
call query join free sub query form vext constant additional output markers easy extend results bdhs show relational algebra operations union selection projection relational databases expressed trees expressed join free uncal queries intersection cartesian product expressed uncal join free queries :10.1.1.32.3916
condition imposed want disallow self concatenation db db order theorem hold 
direct self concatenation possible uncal db output markers query 
rule self concatenation form vext db db uses marker place deep db leave 
purpose results section call unql query positive iff translation uncal bdhs uncal doesn isempty :10.1.1.32.3916
similarly call join free iff translation join free 
difficult design syntactic conditions sufficient unql queries positive join free 
decomposition rules sketch proof theorem describing decomposition rules applied query transform ff rules apply inductively sub queries note vext constant expression need transformed 
consequence inductive transformation rules reach gamma gamma construct 
db inputs tagged private marker case inspect form db adopt meaning db copy common part db 
illustrate correctness rules vext consider query vext 
apply induction hypothesis get ff recall constant 
defines def vext ff def vext ff 
equations vext vext vext vext vext vext equation bdhs direct consequence definition vext :10.1.1.32.3916
check ff follows equation 
equations induction hypothesis decomposable easily check decomposable 
consider case apply induction hypothesis get ff 
cs dept papers cs dept papers papers papers papers db papers papers db papers cs dept papers db papers cs dept illustration vext db 
bd thomas ball fred douglis 
internet difference engine applications 
procs 
compcon february 
bdhs peter buneman susan davidson gerd hillebrand dan suciu :10.1.1.32.3916
query language optimization techniques unstructured data 
sigmod 
bdhs peter buneman susan davidson gerd hillebrand dan suciu 
query language optimization techniques unstructured data 
