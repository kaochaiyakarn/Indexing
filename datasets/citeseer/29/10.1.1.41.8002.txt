distributed rational decision making tuomas sandholm automated negotiation systems self interested agents increasingly important 
reason technology push growing standardized communication infrastructure internet www nii edi kqml fipa concordia voyager odyssey telescript java separately designed agents belonging different organizations interact open environment realtime safely carry transactions 
second reason strong application pull computer support negotiation operative decision making level 
example advent small transaction electronic commerce internet purchasing goods information communication bandwidth 
industrial trend virtual enterprises dynamic alliances small agile enterprises take advantage economies scale available respond diverse orders individual agents suffer scale 
multiagent technology facilitates negotiation operative decision making level 
cooperative distributed problem solving system designer imposes interaction protocol strategy mapping state history action 
protocol mean low level communication protocol negotiation protocol determines possible actions agents take different points interaction 
sealed bid price auction example protocol bidder free submit bid item awarded highest bidder distributed rational decision making way protocol agent 
main question social outcomes follow protocol assuming agents imposed strategies 
hand multiagent systems agents provided interaction protocol agent choose strategy :10.1.1.30.9028
self interested agent choose best strategy explicitly imposed outside 
protocols need designed noncooperative strategic perspective main question social outcomes follow protocol guarantees agent desired local strategy best agent agent 
approach required designing robust non manipulable multiagent systems agents may constructed separate designers may represent different real world parties 
rest chapter discusses protocols voting auctions bargaining markets contracting coalition formation 
row player payoff listed 
computational efficiency clearly mechanisms designed agents little computation needed possible 
classically mechanisms designed lead domain solutions satisfy evaluation criteria 
mechanisms ones lowest computational overhead preferred 
advanced approach explicitly trade cost process solution quality :10.1.1.72.5760
distribution communication efficiency equal distributed protocols preferred order avoid single point failure performance bottleneck reasons 
simultaneously minimize amount communication required converge desirable global solution 
cases goals conflict 
rest chapter discusses different interaction protocols evaluation criteria far 
second agents need waste effort agents matter making bidding decision 
vickrey auctions widely advocated adopted computational multiagent systems 
example versions vickrey auction allocate computation resources operating systems allocate bandwidth computer networks computationally control building heating 
hand vickrey auctions widely adopted auctions humans protocol invented years ago 
limitations vickrey auction protocol especially computational multiagent systems discussed :10.1.1.7.7424
pay auctions family auction protocols 
mechanisms participating bidder pay amount bid amount auctioneer 
schemes computational multiagent systems tool reallocation 
methods susceptible infinite bids discussed 
methods susceptible infinite bids discussed 
efficiency resulting allocation isolated private value common value auctions auction protocols english dutch price sealed bid vickrey allocates auctioned item pareto efficiently bidder values 

bidders know values result depend bidders risk 
hand bidder uncertainty valuation result holds risk neutral bidder risk averse bidder better bidding expected valuation :10.1.1.7.7424

private value auctions vickrey auction strategically equivalent english auction 
produce allocation prices 
hand correlated value auctions agents bids english auction provide information agent valuation 
dai perspective crucial 
issues arise computation auctions discussed computationally complex lookahead arises auctioning interrelated items time implications costly local marginal cost valuation computation information gathering single shot auction 
auctions inefficient allocation lying interrelated auctions addition single item auctions vickrey auctions widely studied allocation multiple items homogeneous dominance maintained 
case auctioning heterogeneous interrelated goods received attention 
setting real world problems including computational agents :10.1.1.30.9028:10.1.1.72.5760
section discusses cases heterogeneous items auctioned time agent valuations items interdependent additive 
occurs example task allocation transportation problems 
presents simple example problem delivery tasks task auctioned auctioneer wants get tasks handled agent agent small example problem agents delivery tasks 
paying agents little possible handling 
agents need return initial locations 
costs handling tasks subscripted name agent measured ft ft ft ft ft ft 
say costs common knowledge agents 
clearly globally optimal allocation agent handles tasks 
allocation reached agents treat auctions independently bid truthfully :10.1.1.7.7424
auction example task allocated 
agent bids ft agent bids ft 
task allocated agent 
second auction task allocated 
agent takes ownership account bidding bid ft gamma ft gamma 
case may allocated agent 
cases resulting allocation tasks suboptimal 
alternatively agents incorporate full lookahead auction strategies 
way optimal allocation reached agents bid true item costs :10.1.1.7.7424
auction example agent distributed rational decision making best bidding costs takes account tasks agent 
look auction agent bid ft gamma ft gamma ft 
agent bid ft gamma ft gamma ft 
agent win price get payoff gamma second auction agent gets zero 
put lookahead key feature auctions multiple interrelated items 
date adequately addressed computational multiagent systems vickrey auctions common misunderstanding vickrey auctions promote single shot truth telling interrelated auctions 
auctions humans interrelationships addressed allowing bidder pool interrelated items entirety bid 
method enhancing efficiency interrelated auctions allow agents backtrack commitments paying penalties 
allows winning agent decommit auctioned item case agent get items related auctions :10.1.1.30.9028:10.1.1.2.7819:10.1.1.72.5760
question revisited section 
avoidance counterspeculation original reasons suggested adopting vickrey auction lookahead requires speculation sense trying guess items going auctioned agents going win auctions 
speculative issues sequential vickrey auctions discussed example 
complete information computational cost full lookahead searching game tree deep items auctioned sequentially may prohibitively great 
complete information computational cost full lookahead searching game tree deep items auctioned sequentially may prohibitively great 
required devise methods controlling search advantages partial lookahead traded cost 
counterspeculation computing valuation vickrey auction protocol fails avoid counterspeculation single shot auction 
look situation agent uncertainty regarding valuation auction item pay remove uncertainty 
situation occurs computational agents value task contract determined carrying costly computation solution combinatorial auctions problem :10.1.1.30.9028:10.1.1.72.5760
alternatively payment viewed cost solving prediction problem cost performing information gathering action cost paid expert oracle 
theorem incentive single shot private value vickrey auction uncertainty agent valuation risk neutral agent best deliberation information gathering action depend agents :10.1.1.7.7424
follows counterspeculation cheap worth 
proof example 
counterspeculation computing valuation vickrey auction protocol fails avoid counterspeculation single shot auction 
look situation agent uncertainty regarding valuation auction item pay remove uncertainty 
situation occurs computational agents value task contract determined carrying costly computation solution combinatorial auctions problem :10.1.1.30.9028:10.1.1.72.5760
alternatively payment viewed cost solving prediction problem cost performing information gathering action cost paid expert oracle 
theorem incentive single shot private value vickrey auction uncertainty agent valuation risk neutral agent best deliberation information gathering action depend agents :10.1.1.7.7424
follows counterspeculation cheap worth 
proof example 
bidders 
valuation auctioned item uniformly distributed agent know valuation exactly 
desirable properties solution called axioms bargaining solution postulated solution concept satisfies axioms sought 
nash bargaining solution historically early solution concept uses approach 
nash analyzed agent setting agents decide outcome fallback outcome fallback occurs agreement reached 
utility function 
agent :10.1.1.21.1591
assumed set feasible utility vectors jo og convex 
occurs example outcomes include possible actual alternatives 
deals individually rational higher utility fallback agents multiple nash equilibria exist 
example agents bargaining split dollar splits give agent zero equilibrium 
search may involve iteratively parts solution agreed desirable light newer agreements regarding parts solution 
search model proposed similar real time search agent trade thorough deliberation real world actions 
similarly modeling bargaining settings require nontrivial computations agent strategy incorporate negotiation actions deliberation actions 
bargaining setting complex single agent setting real time multiple self interested agents agents strategies equilibrium 
general equilibrium market mechanisms section presents general equilibrium theory microeconomic market framework successfully adapted computational multiagent systems application domains :10.1.1.31.779
general equilibrium theory provides distributed method efficiently allocating goods resources agents striking best tradeoffs moderately complex multidimensional search space market prices 
market commodity goods commodities coffee meat parameters airplane design flows traffic network electricity power network mirror sites internet :10.1.1.31.779
amount commodity unrestricted commodity assumed arbitrarily divisible continuous opposed discrete 
different elements commodity distinguishable different commodities distinguishable 
similarly modeling bargaining settings require nontrivial computations agent strategy incorporate negotiation actions deliberation actions 
bargaining setting complex single agent setting real time multiple self interested agents agents strategies equilibrium 
general equilibrium market mechanisms section presents general equilibrium theory microeconomic market framework successfully adapted computational multiagent systems application domains :10.1.1.31.779
general equilibrium theory provides distributed method efficiently allocating goods resources agents striking best tradeoffs moderately complex multidimensional search space market prices 
market commodity goods commodities coffee meat parameters airplane design flows traffic network electricity power network mirror sites internet :10.1.1.31.779
amount commodity unrestricted commodity assumed arbitrarily divisible continuous opposed discrete 
different elements commodity distinguishable different commodities distinguishable 
market prices pn price market types agents consumers producers 
consumer utility function encodes preferences different consumption bundles ig consumer allocation consumer initial endowment ig endowment commodity producers commodities produce 
consumption externalities agent consumption affects agent utility 
production externalities agent production possibilities set directly affected agent actions 
glance hogg examples computational ecologies general equilibrium theory externalities dominant adding resources system operate efficiently 
hogg shown problems common computational ecosystems 
evolutionary aspects systems discussed behaviors incomplete delayed information analyzed :10.1.1.187.8072
mechanisms attack problems include taxes viewing issues commodities 
distributed search general equilibrium operational motivation market mechanisms agents find efficient joint solution takes account tradeoffs agents fact values different goods single agent may interdependent general equilibrium market mechanisms algorithm price pg set positive number gamma repeat broadcast consumers producers receive production plan producer broadcast plans consumers receive consumption plan consumer gamma pg pg ig gamma ig gamma jg ig gamma ig gamma jg ffl inform consumers producers equilibrium reached algorithm consumer repeat receive receive production plan announce consumption plan maximizes budget constraint delta delta ij delta informed equilibrium reached exchange consume algorithm producer repeat receive announce production plan maximizes delta informed equilibrium reached exchange produce algorithm distributed price algorithm 
information control 
algorithms search general equilibrium centralized decentralized 
potential solution problem dynamically adjust step size newton method dp dt gamma gamma ig gamma ig gamma jg gammae gamma delta delta delta gammae gamma pn 
xin gammae gamma jn delta delta delta xin gammae gamma jn pn newton method requires fewer iterations steepest descent iteration computationally intensive requires computation communication derivative information consumers producers 
conceptually take information communication limit having producers consumers submit entire production consumption functions plans function possible price vectors price run centralized search known efficient algorithms equilibrium 
conflicts original motivations market mechanisms decentralization 
process walras simulation differs algorithm :10.1.1.31.779
walras uses asynchronous declarations agents agent change plan regarding subset goods time 
similarly agents take arbitrary turns making new declarations 
certain conditions process converges general equilibrium 
trades walras occur market process arrived close general equilibrium 
results negative sense agents need price ratios trading advance protocol designer designer know agents preferences capabilities 
beneficial trades occur solution usually pareto efficient 
sequential protocols strengthen nash equilibrium solution concept multiple ways requiring strategies stay equilibrium step game 
market speculation analysis section far nash equilibrium outcome specific market protocol 
important factors impacting outcome order bids submitted see vs models bids sealed open protocol iterative agents change excess demand iterations agents decommit agreements paying penalty games nash equilibrium exists market pure strategies :10.1.1.30.9028:10.1.1.72.5760:10.1.1.7.7424
simple example illustrates 
consumer agents engage market reveal excess demand functions simultaneously single round 
agent choose strategies choose 
provided knows choose choose chooses 
tasks inherently handled agent 
hand tasks negative interactions case better allocate different agents 
furthermore different agents may different resources leads different capabilities costs handling tasks 
section discusses task allocation self interested agents model captures considerations 
definition task allocation problem defined set tasks set agents cost function :10.1.1.72.5760
states cost agent incurs handling particular subset tasks initial allocation tasks agents ht init init jaj init init init original contract net variants lacked formal model making bidding awarding decisions 
formal model introduced gives rise negotiation protocol provably leads desirable task allocations agents 
model contracting decisions marginal cost calculations model invokes concept individual rationality contract basis implies individual rationality sequences contracts 
contract individually rational ir agent agent better contract 
convergence globally optimal task allocation contract net implementations contract regards task task moved agent payment 
original contract understood particular search operator global hill climbing contracting algorithm task reallocation 
contracting protocol equipped contracts may get stuck local optimum contract individually rational task allocation globally optimal 
solve problem new contract types introduced cluster contracts set tasks atomically contracted agent swap contracts pair agents swaps pair tasks multiagent contracts agents involved atomic exchange tasks 
contract types avoids local optima theorem contract types exist task allocations ir contract contract types possible ir contract fourth type :10.1.1.72.5760
unfortunately contracting protocol equipped contract types globally optimal task allocation may reached ir contracts oracle choosing sequence contracts distributed rational decision making theorem instances task allocation problem ir sequence initial task allocation optimal exists contracts :10.1.1.72.5760
clearly subset contract types suffices 
problem oracle contracting may get stuck local optimum ir sequence exists agents may choose ir sequence 
address shortcoming new contract type contract defined combines characteristics contracts contract type ideas earlier contract types applied simultaneously atomically definition contract defined pair ht aei jaj theta jaj matrices 
original contract understood particular search operator global hill climbing contracting algorithm task reallocation 
contracting protocol equipped contracts may get stuck local optimum contract individually rational task allocation globally optimal 
solve problem new contract types introduced cluster contracts set tasks atomically contracted agent swap contracts pair agents swaps pair tasks multiagent contracts agents involved atomic exchange tasks 
contract types avoids local optima theorem contract types exist task allocations ir contract contract types possible ir contract fourth type :10.1.1.72.5760
unfortunately contracting protocol equipped contract types globally optimal task allocation may reached ir contracts oracle choosing sequence contracts distributed rational decision making theorem instances task allocation problem ir sequence initial task allocation optimal exists contracts :10.1.1.72.5760
clearly subset contract types suffices 
problem oracle contracting may get stuck local optimum ir sequence exists agents may choose ir sequence 
address shortcoming new contract type contract defined combines characteristics contracts contract type ideas earlier contract types applied simultaneously atomically definition contract defined pair ht aei jaj theta jaj matrices 
element set tasks agent gives agent element ae amount pays contracts allow moving task allocation task allocation single contract 
algorithm run ir contracts optimum reached 
finite jaj jt finite number task allocations 
algorithm hill task allocation contract nets repeated 
optimum reached finite number contracts 
contracts necessary weaker set contract types suffices oracle choose order apply theorem contract protocol allow instances task allocation problem ir sequence exists initial allocation optimal :10.1.1.72.5760
contracts necessary general case may cost functions delta special structure guarantees global optimum reached powerful contract types 
theorem gives powerful tool problem instances number possible task allocations relatively small 
hand large problem instances number contracts optimal task allocation reached may large albeit finite 
example large scale realworld distributed vehicle routing problem instance traconet marginal cost contracting system reached local optimum just contracts multiple hours negotiation unix machines 
distributed rational decision making deals enabled contingency contracts sense full commitment contract agents prefer fallback positions contingency contract agent prefers fallback 
problems regarding contingency contracts automated negotiation self interested agents 
useful anticipating small number key events contingency contracts get cumbersome number relevant events monitor increases 
limit domain events changes domain problem new tasks arriving resources breaking negotiation events contracts negotiations affect value obligations original contract conditioned 
furthermore events may affect value original contract independently value original contract may depend combinations events :10.1.1.42.237
potential combinatorial explosion items conditioned 
second feasible cumbersome contingency contracts computerized agents impossible enumerate possible relevant events advance 
third problem verifying events 
event observable agents 
third problem verifying events 
event observable agents 
agent may incentive lie party contract event case event associated disadvantageous contingency directly observing agent 
viable contingency contracts require event verification mechanism manipulable prohibitively complicated costly 
leveled commitment contracts method advantage possibilities provided probabilistically known events :10.1.1.30.9028:10.1.1.72.5760
conditioning contract events mechanism built contract allows unilateral decommitting point time 
achieved specifying contract decommitment penalties agent 
agent wants decommit freed obligations contract simply paying decommitment penalty party 
contracts called leveled commitment contracts decommitment penalties choose level commitment 
agent wants decommit freed obligations contract simply paying decommitment penalty party 
contracts called leveled commitment contracts decommitment penalties choose level commitment 
method requires explicit conditioning events agent conditioning dynamically 
event verification mechanism required 
leveled commitment contracting protocol intuitive appeal practical advantages obvious beneficial :10.1.1.72.5760
gain may smaller breach victim loss 
second agents decommit 
truthful agent decommit best outside offer plus decommitting penalty better current contract 
rational self interested agent reluctant decommitting 
truthful agent decommit best outside offer plus decommitting penalty better current contract 
rational self interested agent reluctant decommitting 
take account chance party decommit case agent gets freed contract obligations pay decommitting penalty collect decommitting penalty party 
due reluctant decommitting contracts may kept breaking best social welfare perspective 
coalition formation issue analyzed formally :10.1.1.30.9028:10.1.1.72.5760
nash equilibrium analysis carried contract parties decommitting strategies characterized agent outside offer induce agent decommit best responses 
agents decommitting motivated change extent lie change 
shown decommitting leveled commitment protocol outperforms full commitment protocol 
enables contracts making ir settings full commitment contract ir reverse happen 
satisfying goals nonmembers may move world closer coalition goal state 
coalition reach goals actions nonmembers 
settings externalities coalitions nonmembers modeled normal form games 
cfgs strict subset 
real world multiagent problems happen cfgs :10.1.1.100.9946
coalition formation cfgs includes activities 
coalition structure generation formation coalitions agents agents coalition coordinate activities agents coordinate coalitions 
precisely means partitioning set agents exhaustive disjoint coalitions 
partition called coalition structure cs 
classically argued games superadditive worst agents composite coalition solutions separate coalitions 
games superadditive cost coalition formation process 
example coordination overhead communication costs possible anti trust penalties 
similarly solving optimization problem composite coalition may complex solving optimization problems component coalitions 
costly computation component coalitions may better forming composite coalition :10.1.1.100.9946
time limited agents may time carry communications computations required coordinate effectively composite coalition component coalitions may advantageous 
games superadditive coalitions best merging 
settings social welfare maximizing coalition structure varies coalition structure generation highly nontrivial 
goal maximize social welfare agents finding coalition structure cs arg max cs partitions cs cs cs vs problem number coalition structures large theta jaj jaj coalition structures enumerated number agents extremely small practice 
practice domains complex combinatorial viewpoint solve problem exactly 
approximate solution 
settings self interested agents want strike optimal tradeoff solution quality cost associated computation 
affect values coalitions turn affect coalition structure gives highest welfare 
issue related questions studied detail :10.1.1.100.9946
coalition formation activity payoff division payoff division strives divide value chosen coalition structure agents fair stable way agents motivated stay distributed rational decision making 
deciding part coalition structure graph search 
decided advance dictated central authority randomly chosen agent decided form negotiation 

chapter touched 
implications computational limitations special emphasis topic traditionally received adequate attention 
clear limitations fundamental impact strategies agents want protocols desirable im possible 
area computer science fruitfully blend 
area substantial current potential cross relaxation common knowledge assumption underlies nash equilibrium solution concept refinements :10.1.1.16.8097
systems increasingly designed built operated distributed manner 
larger number systems multiple real world parties 
problem coordinating parties avoiding manipulation tackled technological economic methods 
successful solutions emerge deep understanding careful hybridization 
level program transfer scheme core 
run example problem instance core nonempty 
happens run problem instance core empty 

level question :10.1.1.100.9946
agents 
unit cost computation day supercomputer time 
algorithms performance profiles cpu delta gammat cpu cpu delta gammat cpu cpu delta gammat cpu cpu delta gammat cpu cpu delta gammat cpu cpu delta gammat cpu cpu delta gammat cpu note different coalitions different amounts computation 
social welfare maximizing coalition structure 
