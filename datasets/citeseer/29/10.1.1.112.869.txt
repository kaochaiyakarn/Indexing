optimal aggregation algorithms middleware ronald fagin naor assume object database grades scores attributes 
example object color grade tells red shape grade tells round attribute sorted list lists object grade attribute sorted grade highest grade 
monotone aggregation function rule min average combines individual grades obtain grade 
determine top objects best grades naive algorithm access object database find grade attribute 
fagin algorithm fagin algorithm fa efficient 
monotone aggregation functions fa optimal high probability worst case 
furthermore data wish access combine may reside variety data repositories may want database system serve middleware access data 
fundamental difference small character strings multimedia data multimedia data may attributes inherently fuzzy 
example say image simply red red 
degree ranges red totally red 
approach fag deal fuzzy data aggregation function xm interval grades object attributes xm grade object shall discuss aggregation functions useful contexts :10.1.1.55.2172
large literature choices aggregation function see zimmermann textbook discussion fag :10.1.1.55.2172:10.1.1.55.2172
popular choice aggregation function min 
fact standard rules fuzzy logic object grade attribute attribute grade fuzzy conjunction min 
popular aggregation function average sum contexts care resulting grade longer lies interval 
fundamental difference small character strings multimedia data multimedia data may attributes inherently fuzzy 
example say image simply red red 
degree ranges red totally red 
approach fag deal fuzzy data aggregation function xm interval grades object attributes xm grade object shall discuss aggregation functions useful contexts :10.1.1.55.2172
large literature choices aggregation function see zimmermann textbook discussion fag :10.1.1.55.2172:10.1.1.55.2172
popular choice aggregation function min 
fact standard rules fuzzy logic object grade attribute attribute grade fuzzy conjunction min 
popular aggregation function average sum contexts care resulting grade longer lies interval 
say aggregation function monotone xm xi certainly monotonicity reasonable property demand aggregation function attribute grade object high object expect grade high notion query different multimedia database system traditional database system 
popular aggregation function average sum contexts care resulting grade longer lies interval 
say aggregation function monotone xm xi certainly monotonicity reasonable property demand aggregation function attribute grade object high object expect grade high notion query different multimedia database system traditional database system 
query traditional database system relational database system unordered set answers 
contrast multimedia database system answer query thought sorted list answers sorted grade 
fag shall identify query choice aggregation function user typically interested finding top answers parameter :10.1.1.55.2172:10.1.1.55.2172
means want obtain objects may refer top objects highest grades query grades ties broken arbitrarily 
convenience think constant value consider algorithms obtaining top answers databases contain objects 
applications applications multimedia databases aggregation function combine grades want find top answers 
important example information retrieval sal objects interest documents attributes search terms sm grade xi measures relevance document shall abuse notation write grade xm course relational database result query may sorted way convenience presentation sorting department members salary logically speaking result simply set defined collection members 
sorted accesses random accesses sorted access cost scs random access cost rcr middleware cost scs rcr sum sorted access cost random access cost 
algorithms obvious naive algorithm obtaining top answers 
looks entry sorted lists computes grade object returns top answers 
naive algorithm linear middleware cost linear database size efficient large database 
fagin fag introduced algorithm fagin algorithm fa better naive algorithm :10.1.1.55.2172:10.1.1.55.2172:10.1.1.55.2172
case orderings sorted lists probabilistically independent fa finds top answers database objects middleware cost arbitrarily high probability 
fagin proved independence assumption assumption aggregation function correct algorithm high probability incur similar middleware cost worst case 
shall threshold algorithm ta 
algorithm discovered independently groups including nr publish ntzer :10.1.1.31.9882:10.1.1.31.9882
fagin fag introduced algorithm fagin algorithm fa better naive algorithm :10.1.1.55.2172:10.1.1.55.2172:10.1.1.55.2172
case orderings sorted lists probabilistically independent fa finds top answers database objects middleware cost arbitrarily high probability 
fagin proved independence assumption assumption aggregation function correct algorithm high probability incur similar middleware cost worst case 
shall threshold algorithm ta 
algorithm discovered independently groups including nr publish ntzer :10.1.1.31.9882:10.1.1.31.9882
information comparison see section related 
shall discuss probability model including notion independence track 
details see fag :10.1.1.55.2172:10.1.1.55.2172
second author defined ta extensive simulations comparing fa project database course taught michael franklin university maryland college park fall 
shall threshold algorithm ta 
algorithm discovered independently groups including nr publish ntzer :10.1.1.31.9882:10.1.1.31.9882
information comparison see section related 
shall discuss probability model including notion independence track 
details see fag :10.1.1.55.2172:10.1.1.55.2172
second author defined ta extensive simulations comparing fa project database course taught michael franklin university maryland college park fall 
shall show ta optimal stronger sense fa 
define notion optimality consider interesting right 
instance optimality class algorithms class legal inputs algorithms 
important scenario give theorem says optimality ratio ta best possible 
section discuss dependence optimality ratio various parameters 
section show turn ta approximation algorithm prove instance optimality approximation algorithms 
show user prematurely halt ta precise sense treat current view top answers approximate answer 
section consider situations suggested bruno gravano marian sorted access impossible certain sorted lists :10.1.1.1.5089
section focus situations random accesses impossible expensive 
section nra random access algorithm show instance optimality algorithms random accesses 
give theorem says optimality ratio nra best possible 
section ca combined algorithm result combining ta nra order obtain algorithm intuitively minimizes random accesses 
way ask major search engine web internal score document choice query 
measure cost corresponds intuitively cost incurred middleware system processing information passed subsystem qbic 
sorted accesses random accesses middleware cost taken scs rcr positive constants cs cr 
fact cs cr may different reflects fact cost middleware system sorted access random access may different 
fagin algorithm section discuss fa fagin algorithm fag :10.1.1.55.2172
algorithm implemented garlic chs experimental ibm middleware system see interesting details implementation performance practice 
chaudhuri gravano cg consider ways simulate fa filter conditions say example color score :10.1.1.14.3533
fa works follows 

sorted accesses random accesses middleware cost taken scs rcr positive constants cs cr 
fact cs cr may different reflects fact cost middleware system sorted access random access may different 
fagin algorithm section discuss fa fagin algorithm fag :10.1.1.55.2172
algorithm implemented garlic chs experimental ibm middleware system see interesting details implementation performance practice 
chaudhuri gravano cg consider ways simulate fa filter conditions say example color score :10.1.1.14.3533
fa works follows 

sorted access parallel sorted lists li 
parallel mean access top member lists sorted access access second member lists 

object seen random access lists li find ith field xi 
compute grade xm object seen 
set containing objects seen highest grades ties broken arbitrarily 
output graded set fairly easy show fag algorithm correct monotone aggregation functions algorithm successfully finds top answers :10.1.1.55.2172
objects database orderings sorted lists probabilistically independent middleware cost fa arbitrarily high probability fag :10.1.1.55.2172
important lists accessed 
practice may convenient allow sorted lists accessed different rates batches algorithms sorted access parallel remain correct sorted access 
furthermore instance optimality results continue hold sorted access long rates sorted access lists constant multiples 
object seen random access lists li find ith field xi 
compute grade xm object seen 
set containing objects seen highest grades ties broken arbitrarily 
output graded set fairly easy show fag algorithm correct monotone aggregation functions algorithm successfully finds top answers :10.1.1.55.2172
objects database orderings sorted lists probabilistically independent middleware cost fa arbitrarily high probability fag :10.1.1.55.2172
important lists accessed 
practice may convenient allow sorted lists accessed different rates batches algorithms sorted access parallel remain correct sorted access 
furthermore instance optimality results continue hold sorted access long rates sorted access lists constant multiples 
graded sets sorted order sorted grade 
important lists accessed 
practice may convenient allow sorted lists accessed different rates batches algorithms sorted access parallel remain correct sorted access 
furthermore instance optimality results continue hold sorted access long rates sorted access lists constant multiples 
graded sets sorted order sorted grade 
aggregation function strict fag xm holds precisely xi aggregation function strict takes maximal value precisely argument takes maximal value :10.1.1.55.2172
certainly expect aggregation function representing conjunction strict see discussion fag :10.1.1.55.2172:10.1.1.55.2172
fact reasonable think strictness key characterizing feature conjunction 
fagin shows algorithm optimal high probability worst case aggregation function strict intuitively dealing notion conjunction orderings sorted lists probabilistically independent 
fact access pattern fa oblivious choice aggregation function fixed database middleware cost fa exactly matter aggregation function true constant aggregation function case course trivial algorithm gives top answers objects middleware cost 
practice may convenient allow sorted lists accessed different rates batches algorithms sorted access parallel remain correct sorted access 
furthermore instance optimality results continue hold sorted access long rates sorted access lists constant multiples 
graded sets sorted order sorted grade 
aggregation function strict fag xm holds precisely xi aggregation function strict takes maximal value precisely argument takes maximal value :10.1.1.55.2172
certainly expect aggregation function representing conjunction strict see discussion fag :10.1.1.55.2172:10.1.1.55.2172
fact reasonable think strictness key characterizing feature conjunction 
fagin shows algorithm optimal high probability worst case aggregation function strict intuitively dealing notion conjunction orderings sorted lists probabilistically independent 
fact access pattern fa oblivious choice aggregation function fixed database middleware cost fa exactly matter aggregation function true constant aggregation function case course trivial algorithm gives top answers objects middleware cost 
fa optimal sense monotone aggregation functions interesting example aggregation function max strict shown fag simple algorithm mk sorted accesses random accesses finds top answers :10.1.1.55.2172:10.1.1.55.2172
certainly expect aggregation function representing conjunction strict see discussion fag :10.1.1.55.2172:10.1.1.55.2172
fact reasonable think strictness key characterizing feature conjunction 
fagin shows algorithm optimal high probability worst case aggregation function strict intuitively dealing notion conjunction orderings sorted lists probabilistically independent 
fact access pattern fa oblivious choice aggregation function fixed database middleware cost fa exactly matter aggregation function true constant aggregation function case course trivial algorithm gives top answers objects middleware cost 
fa optimal sense monotone aggregation functions interesting example aggregation function max strict shown fag simple algorithm mk sorted accesses random accesses finds top answers :10.1.1.55.2172:10.1.1.55.2172
contrast shall see algorithm ta instance optimal monotone aggregation function weak assumptions 
cases fa optimal optimality holds worst case high probability 
leaves open possibility algorithms better middleware cost fa certain databases 
algorithm ta discuss algorithm 
noted earlier algorithms wild guesses normally implemented practice interesting consider 
interpretation instance optimality algorithm saying cost essentially cost shortest proof database really top answers 
consider algorithms allow wild guesses allowing larger class proofs 
example fact object grade proof top answer 
say aggregation function strictly monotone xm xi average min strictly monotone aggregation functions suggested literature representing conjunction disjunction monotone strictly monotone see fag examples :10.1.1.55.2172
say database satisfies distinctness property objects grade list grades list li distinct 
show conditions guarantee optimality ta algorithms wild guesses 
theorem assume aggregation function strictly monotone 
class databases satisfy distinctness property 
user decide process point 
grade kth bottom object current top list current threshold value algorithm stopped early 
easy see similarly situation theorem current top list approximation top answers 
user current top list number told approximation top answers 
restricting sorted access bruno gravano marian discuss scenario possible access certain lists sorted access :10.1.1.1.5089
give nice example user wants get information restaurants 
user aggregation function gives score restaurant inexpensive close example review web site gives ratings restaurants review web site gives prices web site gives distances 
review web site accessed sorted access best restaurants top list 
set indices lists li accessed sorted access 
shall see example objects possible seeing grade object list having done sorted access object list objects grade equal final threshold value situation say taz halts seen grade object list 
situation happen ta 

set containing objects seen highest grades 
output graded set case algorithm taz essentially algorithm ta adapt :10.1.1.1.5089
footnote noted algorithms sorted access parallel remain correct sorted access 
algorithm taz provides extreme example sorted lists accessed sorted access remaining sorted lists accessed random access 
show theorem says ta instance optimal wild guesses allowed theorem says optimality ratio ta wild guesses allowed best possible generalize hold ta theorem instance optimality ta theorem says aggregation function strictly monotone class legal databases satisfies distinctness property ta instance optimal 
interestingly shall show example theorem generalize taz 
notion optimality weaker 
assumption essentially equivalent aggregation function min 
assumption aggregation function satisfies lower bounding prop erty 
property says xm 
ntzer define algorithm equivalent ta :10.1.1.31.9882:10.1.1.31.9882
call algorithm quick combine basic version distinguish algorithm interest call quick combine 
difference algorithms quick combine provides heuristic rule determines sorted list sorted access 
intuitive idea wish speed ta advantage skewed distributions grades 
claims optimality 
heuristics potentially lead speedup ta number sorted accesses decrease factor number lists 
unfortunately problems heuristic quick combine 
problem involves partial derivative defined certain aggregation functions min 
seriously easy find family examples shows result heuristic quick combine instance optimal 
note heuristics modify ta deciding list accessed sorted access forced instance optimal simply list accessed sorted access steps constant ntzer consider situation random accesses impossible :10.1.1.26.169
define basic algorithm called stream combine basic version modified algorithm stream combine incorporates heuristic rule tells sorted list li sorted access 
version stream combine instance optimal 
reason basic version stream combine instance optimal considers upper bounds grades objects algorithm nra considers upper lower bounds 
require top objects grades discussed require grades case random accesses impossible 
framework appropriate analyzing comparing performance algorithms provides strong notion optimality 
considered approximation algorithms provided positive negative results instance optimality 
hard see aggregation function satisfies lower bounding property xm min fx 
note particular natural assumption xm min fx 
claim optimality results proven fag fa hold skewed distribution grades uniform distribution :10.1.1.55.2172:10.1.1.55.2172
claim incorrect probabilistic assumption fag orderings sorted lists probabilistically independent :10.1.1.55.2172:10.1.1.55.2172
open problems say algorithm tightly instance optimal instance optimal optimality ratio best possible 
theorem says nra tightly instance optimal theorem says case wild guesses strict aggregation function ta tightly instance optimal 
case wild guesses aggregation functions ta tightly instance optimal 
considered approximation algorithms provided positive negative results instance optimality 
hard see aggregation function satisfies lower bounding property xm min fx 
note particular natural assumption xm min fx 
claim optimality results proven fag fa hold skewed distribution grades uniform distribution :10.1.1.55.2172:10.1.1.55.2172
claim incorrect probabilistic assumption fag orderings sorted lists probabilistically independent :10.1.1.55.2172:10.1.1.55.2172
open problems say algorithm tightly instance optimal instance optimal optimality ratio best possible 
theorem says nra tightly instance optimal theorem says case wild guesses strict aggregation function ta tightly instance optimal 
case wild guesses aggregation functions ta tightly instance optimal 
possible optimality ratios 
ieee acm transactions networking december 
el 
online computation competitive analysis 
cambridge university press new york 
bruno gravano marian :10.1.1.1.5089
evaluating top queries web accessible databases 
proceedings th international conference data engineering 
ieee computer society 
cg chaudhuri gravano :10.1.1.14.3533
bruno gravano marian :10.1.1.1.5089
evaluating top queries web accessible databases 
proceedings th international conference data engineering 
ieee computer society 
cg chaudhuri gravano :10.1.1.14.3533
optimizing queries multimedia repositories 
proc 
acm sigmod conference pages 
chs carey haas schwarz arya cody fagin flickner niblack petkovic thomas williams wimmers 
dlm munro 
adaptive set intersections unions differences 
proc 
th acm siam symposium discrete algorithms soda pages san francisco 
fag fagin :10.1.1.55.2172
combining fuzzy information multiple systems 
comput 
system sci 
fagin halpern moses vardi 
meyer auf der 
infinity lower bounds parallel computation 
proc 
th acm symposium theory computing stoc pages providence 
ntzer :10.1.1.31.9882

optimizing multi feature queries image databases 
proc 
th large databases vldb conference pages cairo egypt 
