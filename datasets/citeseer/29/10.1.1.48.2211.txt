query optimization selections bitmaps ming chuan wu database research group computer science department technische universitat darmstadt germany wu dvs informatik tu darmstadt de bitmaps popular indexes data warehouse dw applications database management systems offer today 
proposes query optimization strategies selections bitmaps 
continuous discrete selection criteria considered 
query optimization strategies categorized static dynamic 
static optimization strategies discussed optimal design bitmaps algorithms tree logical reduction 
dynamic optimization discussed approach inclusion exclusion bit sliced indexes encoded bitmap indexes 
query optimization strategies categorized static dynamic 
static optimization strategies discussed optimal design bitmaps algorithms tree logical reduction 
dynamic optimization discussed approach inclusion exclusion bit sliced indexes encoded bitmap indexes 
bitmap indexing promising technique query processing dws 
variations bitmap indexes include bit sliced indexes encoded bitmap indexes join indexes range bitmap indexes :10.1.1.100.5223
query operations selections aggregates joins query evaluation algorithms bitmaps proposed years 
explore issues query optimization bitmaps concentrate optimizing selections 
indexes speed evaluation selection conditions followed retrieval desired data 
pipelining parallelism applied query response time expressed sum time index processing plus time data retrieval 
solutions include compressing bitmaps run length encoding transforming bitmap representation tuple id lists 
methods quite efficient reducing space requirements bitmap indexes sacrifice advantages bitmap indexing query processing low cost bitwise operations index processing capability multiple index scans discuss approaches preserve advantages bitmap indexing 
encoded bitmap indexing bit slicing 
combining multiple index structures evaluate logical conjunction disjunction selection predicates 
bit slicing revisited bit slices bit sliced index named binary bit sliced index attribute bitwise projection attribute :10.1.1.100.5223
example suppose attribute example defined byte short integer 
binary bit sliced index consists bit vectors defined shown bits delta delta delta delta delta delta delta delta delta delta delta delta delta delta delta binary bit sliced index attribute store internal binary representation corresponding attribute values 
zeros 
number bit vectors equal length attribute data type bits length bit vector equal cardinality indexed table 
query processing theorems defined guidelines finding bases time optimal space optimal component indexes 
defined follows space optimum integer space optimal component bit sliced index component index base gammar gamma gamma smallest positive integer gamma gammar jaj 
time optimum integer time optimal component bit sliced index index base gamma jaj gamma 
points need stated 
optimal time calculated index processing algorithms proposed :10.1.1.100.5223
second optimal time true subset selection types continuous range selections discussed section 
third optimal space time defined subject number components describe local optimum 
example component space optimal index perform better component time optimal index respect time space vice versa 
globally bit sliced indexes binary uniform bases delta delta delta 
resulting bitmap precomputed stored system 
approach increases space requirement space optimal bit sliced indexes space expansion 
worst cases time function considering effect defined encoding logical reduction discussed binary bit sliced index time space dlog denotes indexed attribute 
algorithm design subsection discuss static query optimization better design evaluation algorithms 
tree reduction opt algorithm opt proposed improve version proposed :10.1.1.100.5223
introduce improvement opt execution tree reduction 
example component range bit encoded bit sliced index decimal base attribute predicate 
algorithm opt evaluate predicate results execution tree shown 
original tree reduced tree transformation execution tree denotes denotes suppose certain running state database second digit values larger component index bit vectors set 
time complexities algorithms derived 
ffl defined global time function bit sliced indexes types selections breakeven point defined minimum point function 
break point serves new design criterion global time optimal bit sliced indexes respect types selections 
ffl effect space constraints finding global time optimal index studied 
ffl algorithm opt proposed improve version proposed :10.1.1.100.5223
proposed improvements opt tree reduction technique 
ffl optimize processing time propose known methods ordered binary decision diagram obdd binary decision diagram bdd tabular method minimize retrieval boolean function 
dynamic optimization ffl principle inclusion exclusion introduced application indexes discussed 
ffl cost models analytical probabilistic defined select better execution plans 
minimisation boolean functions bell system technical journal 
neil model architecture performance springer verlag lncs nd intl 
workshop high performance transactions systems asilomar ca 
neil graefe multi table joins join indices sigmod record 
neil quass improved query performance variant indexes sigmod tucson arizona may :10.1.1.100.5223
problem simplifying truth functions american mathematical monthly 
sarawagi indexing olap data bulletin technical committee data eng vol 
mar 
shapiro join processing database systems large main memories acm tods 
