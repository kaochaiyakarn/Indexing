journal global optimization kluwer academic publishers boston 
manufactured netherlands 
greedy randomized adaptive search procedures thomas feo feo emx utexas edu operations research group department mechanical engineering university texas austin tx usa mauricio resende research att com mathematical sciences research center bell laboratories murray hill nj usa received june editor panos pardalos 
today variety heuristic approaches available operations research practitioner 
methodology strong intuitive appeal prominent empirical track record trivial efficiently implement parallel processors grasp greedy randomized adaptive search procedures 
grasp iterative randomized sampling technique iteration provides solution problem hand 
incumbent solution grasp iterations kept final result 
phases grasp iteration intelligently constructs initial solution adaptive randomized greedy function second applies local search procedure constructed solution hope finding improvement 
define various components comprising grasp demonstrate step step develop heuristics combinatorial optimization problems 
intuitive justifications observed empirical behavior methodology discussed 
concludes brief literature review grasp implementations mentions industrial applications 
keywords combinatorial optimization search heuristic grasp computer implementation 
optimization problems involve large finite number alternatives arise industry government science 
common examples include designing efficient telecommunication networks scheduling operations semiconductor manufacturing plant designing effective school zoning locating strategic energy reserves routing delivery vehicles troop deployment airline crew scheduling designing large experiment 
examples theoretically possible enumerate combinations solutions evaluate respect stated objective 
ones provide favorable outcome deemed optimal 
practical perspective infeasible follow strategy complete enumeration number combinations grows exponentially size problem 
done years develop optimal seeking methods explicitly require examination alternative 
research rise field combinatorial optimization see papadimitriou steiglitz increasing capability solve larger real world problems 
notable successes reported linear programming specialized versions traveling salesman problem bus driver scheduling name 
feo resende procedure grasp grasp stopping criterion satisfied solution localsearch solution solution rof return grasp 
generic grasp pseudo code procedure solution solution solution construction done rcl rcl solution solution rof 
grasp construction phase pseudo code problems industry government computationally intractable nature sufficiently large preclude exact algorithms 
cases heuristic methods usually employed find necessarily optimal solutions 
effectiveness methods depends ability adapt particular realization avoid local optima exploit basic structure problem network natural ordering components 
furthermore restart procedures controlled randomization efficient data structures preprocessing beneficial 
building notions various heuristic search techniques developed demonstrably improved ability obtain solutions difficult combinatorial optimization problems 
promising techniques include simulated annealing tabu search genetic algorithms grasp greedy randomized adaptive search procedures :10.1.1.26.7748:10.1.1.26.7748
define various components comprising grasp demonstrate step step develop heuristics combinatorial optimization problems 
intuitive justifications observed empirical behavior methodology discussed 
concludes brief literature review grasp mentions industrial applications 
grasp iterative process grasp iteration consisting phases construction phase local search phase 
best solution kept greedy randomized adaptive search procedures procedure local locally optimal find better solution rof return local optimal local 
grasp local search phase result 
generic grasp pseudo code 
line pseudo code corresponds problem input 
grasp iterations take place lines terminate termination criterion maximum number iterations occured solution sought satisfied 
line grasp construction phase line local search phase 
improved solution incumbent updated line 
high level description phases 
section delve detail 
construction phase feasible solution iteratively constructed element time 
construction iteration choice element added determined ordering elements candidate list respect greedy function 
function measures myopic benefit selecting element 
heuristic adaptive benefits associated element updated iteration construction phase reflect changes brought selection previous element 
probabilistic component grasp characterized randomly choosing best candidates list necessarily top candidate 
list best candidates called restricted candidate list rcl 
choice technique allows different solutions obtained grasp iteration necessarily compromise power adaptive greedy component method 
displays pseudo code construction phase grasp 
solution initialized line pseudo code 
loop line repeated solution constructed 
line restricted candidate list built 
candidate list selected random line added solution line 
effect selected solution element benefits associated element taken consideration line greedy function adapted 
case deterministic methods solutions generated grasp construction guaranteed locally optimal respect simple neighborhood definitions 
beneficial apply local search attempt improve constructed solution 
local search algorithm works iterative fashion successively replacing current solution better solution neighborhood current solution 
terminates better solution neighborhood 
neighborhood structure problem relates solution problem subset solutions 
solution said locally optimal better solution 
neighborhood structure local search algorithm general form feo resende size solution values rcl 
sample distributions grasp iteration solutions size rcl mean 
means sample distributions grasp iteration solutions stated 
key success local search algorithm consists suitable choice neighborhood structure efficient neighborhood search techniques starting solution 
local optimization procedures require exponential time arbitrary starting point empirically efficiency significantly improves initial solution improves 
customized data structures careful implementation efficient construction phase created produces initial solutions efficient local search 
result grasp solutions generated amount time required local optimization procedure converge single random start 
furthermore best grasp solutions generally significantly better single solution obtained random starting point 
difficult formally analyze quality solution values grasp methodology 
intuitive justification views grasp repetitive sampling technique 
grasp iteration produces sample solution unknown distribution obtainable results 
mean variance distribution functions restrictive nature candidate list 
example cardinality restricted candidate list limited solution produced variance distribution zero 
effective greedy function mean solution value case probably suboptimal 
restrictive cardinality limit imposed different solutions produced implying larger variance 
greedy function compromised case mean solution value degrade 
intuitively order statistics fact samples randomly produced best value outperform mean value 
best solutions sampled optimal 
figures show results simulation experiment illustrates intuition 
figures show different cardinality restriction values candidate list size distribution observed solution values obtained iteration replications grasp greedy randomized adaptive search procedures iterations 
simulation uses code grasp resende feo solve satisfiability instance ssa nd dimacs algorithm implementation challenge :10.1.1.145.1638
optimization problem wants maximize number satisfied clauses 
problem instance ssa satisfiable variables clauses literals 
consequently optimal solution value 
simulation shows greedy solution rcl highest mean solution value smallest variance zero 
restriction increasingly relaxed mean values decrease variances increase 
increase variance number samples drawn set optimal solutions increases 
optimal solution drawn rcl 
drawn rcl drawn largest list size 
especially appealing characteristic grasp ease implemented 
parameters need set tuned candidate list size number grasp iterations development focus implementing efficient data structures assure quick grasp iterations 
grasp trivially implemented parallel processor mimd environment 
processor initialized copy procedure instance data independent random number sequence 
grasp iterations performed parallel single global variable required store best solution processors 
remainder organized follows 
section grasp methodology described detail 
grasp implementations summarized section 
summary discussion section 
methodology section describe general framework grasp classical combinatorial optimization problems set covering maximum independent set illustrate various components methodology 
define problems describe phases grasp respect problem class 
examples procedures described 
conclude section describing computational testing grasp codes set covering maximum independent set 

problem definitions defining combinatorial optimization problems section illustrate phases grasp set covering problem maximum independent set problem 

set covering problem finite sets pn feo resende 
set covering problem example 



independent set problem example pi 
set cover pi set covering problem want find minimum cardinality cover 
consider example sets 
valid covers example 
optimal covers size 

maximum independent set problem graph vertex set edge set independent set vertex packing stable set set vertices elements pairwise nonadjacent 
maximum independent set problem want independent set maximum cardinality 
consider example graph vertices edges 
independent sets example 
maximum independent sets 

grasp construction phase construction phase grasp solution built element time element selected random list candidates determined adaptive greedy function 
subsection illustrate construction phase defining adaptive greedy randomized adaptive search procedures procedure pn pj rof max select random rof rof 
construction phase pseudo code set covering greedy functions candidate list restriction mechanisms examples described 

set covering problem set pi said cover set pi 
greedy choice set covering problem select set pi covers largest number uncovered elements set adaptive greedy function construct solution problem 
making greedy choice allow set restricted candidate list number uncovered elements covered set chosen percentage number covered greedy choice 
type candidate list limitation referred value restriction 
similarly limit size candidate list including best elements 
limitation referred cardinality restriction 
note may apply types restrictions simultaneously form candidate list 
illustrates pseudo code value restricted construction phase set covering problem 
procedure takes input dimension sets pn parameter returns cover steps initialize sets steps repeated sets empty 
step largest cardinality sets determined 
cardinality step restricted set candidates built 
element set selected random step added cover step 
step greedy function adjusted elements set removed set consider example percent 
numbers bottom row number uncovered elements covered corresponding set top row selected 
greedy choices cover elements 
percent value restricted candidate list rcl 
suppose random set selected 
feo resende 
set covering example construction phase 
set covering example construction phase 
set covering example construction phase elements covered left situation depicted rcl 
choosing leave remaining choice resulting constructed cover size 
hand initially chosen place situation depicted choosing results smaller optimal cover size 

maximum independent set problem case maximum independent set problem grasp builds independent set vertex time guided adaptive greedy function 
denote independent set constructed 
grasp begins 
vk ek greedy randomized adaptive search procedures 

maximum independent set construction phase plausible greedy choice maximum independent set select vertex smallest degree respect graph induced unselected vertices adjacent previously selected vertex 
dv denote degree vertex graph gk vk ek 
greedy choice select vertex smallest degree 
selecting greedy choice grasp construction phase builds restricted candidate list vertices having small degree necessarily smallest degree 
smallest degree vertices vk min dv vk restricted candidate parameter 
value restricted candidate list rcl vk dv 
candidate list vertex say selected random placed independent set 
greedy function adaptive addition new vertex independent set gk different gk consequently vertex degrees change 
gk defined follows vk vk set vertices gk adjacent ek 
consider example 
case 
vertices degree vertex degree 
value restricted candidate list rcl 
suppose vertex selected random rcl 
initial independent set resulting graph depicted 
graph vertices identical degree consequently rcl 
vertex selected resulting independent set size 
initially chosen resulting graph depicted 
case restricted candidate list rcl 
selecting vertex vertex results optimal independent set 
feo resende 
maximum independent set construction phase 
maximum independent set construction phase 
set covering local search phase cover 
grasp local search phase turn attention local search phase examples 
local search procedure set covering problem describe procedure maximum independent set 

set covering problem set covering problem define exchange follows tuples cover possible exchange tuple tuple consider example cover 
applying exchange replaces tuple tuple results optimal cover depicted 
greedy randomized adaptive search procedures 
set covering local search phase optimal cover procedure local tuple vi vi vi vi vi vi apply exhaustive search graph induced find local fi rof local 
local search pseudo code maximum independent set 
maximum independent set problem describe exchange search procedure maximum independent set graph 
idea take input independent set size consider tuples vertices parameter tuple vi vi apply exhaustive search find maximum independent set graph induced vertices adjacent vertices set vi vi 
resulting independent set larger set vertices independent set larger procedure applied new independent set 
procedure 
consider example exchange carried independent set 
set exhaustive enumeration done graph consisting vertices edges resulting maximum independent set 
set size new larger independent set built 
applying local search new independent set produce improvement halting procedure local minimum 
feo resende 



old new 
local search example maximum independent set size best known problem columns rows cover optimal 
unknown unknown unknown 
experimental results set covering problem statistics 
experimental results conclude section describe experimental results running grasp implementations classes problems described section 
codes implemented feo resende set covering problem feo resende smith maximum independent set problem :10.1.1.145.1638
codes run single mhz mips processor silicon graphics challenge computer 
codes written fortran compiled compiler flags 
running times computed system routine etime 

set covering problem fulkerson nemhauser trotter proposed class small difficult set covering problems arise computing width incidence matrices steiner triple systems 
illustrate grasp set covering consider instances class 
summarizes statistics problems 
instances smallest known optimal solution 
grasp run values restricted candidate list parameter 
parameter setting runs carried instance varying initial seed random number generator 
local search phase consisted exchanges grasp eliminated superfluous columns 
greedy randomized adaptive search procedures cover times iterations cpu seconds size min avg max min avg max 
experimental results grasp solution statistics cover times iterations cpu seconds size min avg max min avg max 
experimental results grasp solution statistics feo resende cover times iterations cpu seconds size min avg max min avg max 
experimental results grasp solution statistics greedy randomized adaptive search procedures cover times iterations cpu seconds size min avg max min avg max 
experimental results grasp solution statistics feo resende 
maximum independent sets figures summarize grasp runs instances respectively 
grasp best known solutions instances considered 
running times smaller instances cpu seconds run longest run largest class took seconds 
varying parameter changes behavior grasp randomized greedy procedure purely random procedure purely greedy 
instances grasp parameter value best performer 
slightly better 

maximum independent set problem testing grasp maximum independent set problem consider family undirected random graphs graphs vertices edge set edges complete graph vertices appears independently inclusion edge probability family graphs studied extensively 
consider instances random graphs parameters class 
xk stochastic variable denoting number independent sets size instance 
shows values expectation xk bounds probability xk 
indicates independent sets size abundant sets size rare 
initial set runs search set larger set 
second set runs independent sets size larger sought 
examples introduce way decompose grasp 
idea condition favorable pairs vertices independent set solve series smaller easier problems contracted graph having vertices 
consider vertices having smallest degrees vlow vi vi vi 
pairs vi vj vlow vi vj compute vi vj number vertices adjacent vi pairs ordered decreasing value pairs kept consideration 
problems contracted graphs solved order conditioning pairs independent set 
consider example graph choose condition pairs vertices set vertices having degree vertices 
pairs condition greedy randomized adaptive search procedures 






preprocessing maximum independent set condition condition 

condition 
preprocessing maximum independent set 
pairs 
shows contracted graphs induced conditioning pairs maximum independent sets graph 
conditioned pairs get independent sets set size optimal 
experiments conditioned instance grasp iterations performed candidate list parameter 
local search carried independent set node graph size greater 
exchange local search described section parameter 
summarizes grasp runs instances maximum independent set problems 
entries sorted increasing order running times summarized sets runs row summarizes runs instances fastest running times second row second fastest times table lists minimum average maximum cpu times setting conditioning tuples seconds minimum average maximum number tuples examined set size greater minimum average maximum cpu times seconds taken grasp find independent sets 
runs stopped grasp set size greater independent sets size instances size instances 
half runs grasp took minute cpu time terminate 
code run instances search sets size greater 
code size sets set runs set size totaling instances independent sets size tested 
feo resende seconds tuples examined grasp seconds instances min avg max min avg max min avg max 
experimental results grasp maximum independent set solution statistics runs preprocessing times seconds number tuples examined grasp running times seconds 

applications turn attention number grasp implementations appeared literature covering wide range applications including set covering production planning scheduling graph problems location problems quadratic assignment problems problems logic 
industrial implementations grasp discussed 

set covering feo resende describe grasp solving set covering problems arise computing width incidence matrix steiner triple systems 
construction mechanism local search strategy grasp described section 
computational results described grasp quickly produces best known solutions instances considered 
bard feo describe unified framework product process demands related manufacturing system requirements 
objective determine flexible manufacturing environment machine purchase fraction time piece equipment configured particular type operation 
nonlinear cost minimization model developed solved depth branch bound routine employs grasp set covering find feasible solutions 
solutions obtained grasp permit early greatly contribute efficiency algorithm 
greedy randomized adaptive search procedures feo bard grasp solve sequence set covering problems approach renders approximate solution minimum cost multicommodity network flow problem integral constraints airline flight scheduling maintenance base planning 
demonstrate procedure data american airlines boeing fleet show new approach significant improvement current solution techniques 

production planning scheduling bard feo apply grasp computer aided process planning specifically selection tools cutting paths milling metal flexible manufacturing machines 
underlying optimization problem modeled integer program solved branch bound 
lower bounds calculated means lagrangian relaxation technique 
feasible solutions upper bounds grasp applied specialized set covering problem 
performance method including quality solutions cpu requirements judged examining wide variety instances derived actual manufacturing data 
laguna gonz lez consider scheduling parallel machines just time production environment 
optimization problem possesses weighted earliness penalty deadlines identical parallel machines 
authors hybrid heuristic combines elements tabu search grasp methodologies uses branch bound postprocessor 
compare performance method modified smith heuristic concluding method succeeds finding solutions average percent better modified smith heuristic 
feo venkatraman bard develop grasp single machine scheduling problem flow time earliness penalties 
method compares favorably methods previously reported literature 
dynamic programming dp algorithm yields optimal solutions problems jobs 
fraction time required dp implementation grasp code provides optimal solutions instances tested providing solutions extremely close optimal remaining instances 
feo write single machine scheduling problem sequence dependent setup costs linear delay penalties 
develop grasp quickly finds optimal solutions job problems previously reported literature 
method favorably compared tabu search implementation instances ranging jobs 
authors take advantage mutation concept genetic algorithms enhance performance local search phase grasp implementation 
rajan describe grasp heuristics solve component grouping problem type set partitioning problem arises number manufacturing material logistics applications 
computational results real manufacturing data grasps produce solutions having objective function values percent percent average lower bound combinatorial argument 
compared feo resende previously methods network flow heuristic grasp produced better solutions test problems second grasp produced better solutions 
feo bard holland grasp implementation scheduling printed wiring board assembly 
combinatorial optimization problem possesses multiple machines precedence relationships start dates due dates capacity constraints set times processing times resource constraints 
objective considered includes minimizing weighted tardiness maximizing revenue weighted throughput minimizing cycle times balancing 
grasp empirically validated industrial setting processing stations product types components shifts boards wip boards demand 
heuristic shown outperform rule methods previously 
highlights ease effectiveness grasp applied extremely large complex optimization problems practice 

graph problems feo resende smith describe grasp finding large independent sets sparse random graphs :10.1.1.145.1638
construction local search phases grasp described section 
grasp implemented parallel mimd computer assigning different processors different contracted graphs induced pairs strategy described subsection 
efficiency speedup divided ratio processors going processors average percent 
grasp tested graphs nodes edges compared implementations simulated annealing tabu search exact method 
grasp larger independent sets substantially cpu time simulated annealing implementation 
grasp compared tabu search code classes random graphs having vertices 
tabu search code times faster node graphs times times slower node node graphs respectively 
node graphs exact method pardalos produced optimal solutions instances tested grasp rarely produced optimal solutions 
produce certificate optimality exact method required times cpu time needed grasp produce independent sets having vertex optimal size 
node graph exact method failed find optimal solution cpu days computing grasp quickly probably optimal sets size instances tested 
feo smith offer grasp coloring sparse graphs 
construction phase builds color class time identifying maximal independent sets 
local search phase uses simulated annealing approach starting relatively cold temperature 
starting condition keeps search vicinity constructed solution allowing wander away local minima 
grasp implementation performs wide range instances including random graphs graphs known chromatic number 
greedy randomized adaptive search procedures laguna feo develop grasp implementation network partition problem :10.1.1.145.1638
heuristic conceptually simple straightforward program 
grasp empirically compared kernighan lin method stood years dominating heuristic procedure 
instances compare running times solution values provided methods 
instances include wide variety random geometric graphs smaller examples optimal solutions branch bound 
comparative study empirically confirms effectiveness grasp implementation 

location problems compares tabu search grasp solving instances discrete hub location problem problem applications airline package delivery systems certain telecommunications network design problems 
problem node graph matrix traffic asked choose nodes serve hubs fully interconnected 
nodes determine hub node connected making possible route traffic nodes graph 
objective minimize total cost sending traffic demand pairs 
computational testing carried real data airline hub design packet network design problem 
author concludes tabu search implementation twice fast grasp code producing best solution grasp solutions having best known value 

quadratic assignment problems feo gonz lez apply grasp quadratic assignment problem qap models positioning highway trailers 
grasp heuristic branch bound scheme provide optimal solutions 
heuristic observed extremely fast finds optimal solutions problem instances furnished year period consolidated rail 
li pardalos resende propose grasp classical quadratic assignment problem wants assign minimum cost facilities flow demands sites 
cost assigning facility site facility site fi dk fi flow facilities dk distance sites grasp tested instances qap library qap test problems 
grasp best known solution instances improved best known solution cases 
fortran subroutines grasp described 
feo resende 
problems logic resende feo describe grasp implementations satisfiability problem logic 
satisfiability problem wants find truth assignment boolean variables boolean formula evaluate true prove assignment exists 
grasps tested attempt find assignment capable proving unsatisfiability 
codes tested satisfiable instances benchmark collection second dimacs algorithm implementation challenge compared gsat code received attention due ability find satisfying truth assignments large formulae :10.1.1.145.1638:10.1.1.34.6853
grasps satisfiable assignments instances tested 
grasps faster gsat problem classes tested 
furthermore gsat failed produce satisfiable assignments formulae grasps successful 

industrial applications grasp directly applied practice part large scale decision support systems developed implemented optimization alternatives information systems development firm austin texas 
tm integrated scheduling inventory throughput evaluation system provides facility wide planning scheduling functions printed wire board assembly operations 
grasp described feo bard holland 
success management information system texas instruments discussed feo bard holland 
oasis tm optimization alternatives strategic scheduler controls logistics operations rail terminal 
system tracks inventory yard directs parking activities maximize utilization terminal parking areas 
issues orders radio frequency rf interface speed operations handle greater volumes traffic equipment personnel 
optimizes load plans trailers containers improves utilization 
grasp oasis optimizing load plans part feo gonz lez discussed previously 
oasis currently terminals deployed major union pacific yards 

concluding remarks grasp possesses characteristics shared heuristic search methodologies 
close analogies drawn simulated annealing tabu search genetic algorithms 
implementations various approaches certainly quite different practice 
share grasp fundamental heuristic concepts classify operations 
paragraphs give terse description simulated annealing tabu search genetic algorithms 
remainder conclu greedy randomized adaptive search procedures sion offers thoughts regarding classification schema heuristic methodologies 
tabu search simulated annealing contain local search procedures explore neighborhood current solution improvements solution 
ability remove local optima order find better optimal solutions 
simulated annealing uses straightforward randomization technique 
tabu search simplest form uses short term memory strategy intelligently direct search away neighborhoods considered 
medium long term memory strategies respectively tabu search allow search intensification diversification regard known set promising solutions 
genetic algorithms ga apply crossover mutation operations population solutions 
crossover mates solutions population combining attributes solutions form offspring 
offspring mutated randomly altering attributes 
offspring added population solution value compares favorably solution values population resembling natural selection theory evolution 
categories fundamental heuristic concepts include solution construction solution perturbation procedure repetition restart criteria problem decomposition conditioning procedure stopping rules 
illustrative purposes consider category solution perturbation 
local search mechanism exchange technique mutation operation genetic algorithm examples solution perturbation 
basic principle move solution 
categories wide variety mechanisms devised combined form hybrid techniques 
guiding design mechanisms category goals 
find optimum near optimum solution 
second arrive solution minimal amount computational effort 
combinatorial optimization problems classified intractable enormous solution spaces ineffective apply brute force technique exhaustive enumeration 
strategically search solutions biasing search consider minuscule fraction possibilities 
biases heuristic mechanisms referred intelligence 
grouped follows random lexicographic bias indiscriminate selection alternatives greedy simple decent bias selection problem objective function memory bias selection prior selections experience target bias selection prior performance 
consider partial illustrations 
grasp uses greedy bias guide construction new solution 
simulating annealing uses random bias perturb current solution 
tabu search employs short term memory bias genetic algorithms possess subtle experience bias analogous natural selection 
explicit examples experience bias apparent mechanisms employing dynamic application target analysis 
grasp methods discussed contributed enormously ability empirically find solutions unsolved instances practical combinatorial optimization problems 
fortunately methodologies 
possess characteristics combined enormous num feo resende procedure grasp grasp stopping criterion satisfied solution local search stopping criterion satisfied localsearch solution solution solution rof solution rof return grasp 
adding mutation concept grasp local search phase ber ways explored 
example consider hybrid procedure developed feo depicted 
framework mutation introduced phase borrowed ga methodology 
direction research design heuristics include expansion classification schema started 
motivation abundant 
improve ability describe define heuristic methodologies allow conceptually compare different approaches 
second guide enhancement efforts existing procedures lead improved hybrid methods 
may evolve theoretical framework capable currently limited discipline probabilistic analysis heuristics 

bard feo 
operations sequencing discrete parts manufacturing 
management science 

bard feo 
algorithm manufacturing equipment selection problem 
iie transactions 

bollob random graphs 
academic press 

burkhard rendl 
quadratic assignment problem library 
european journal operational research 

pardalos 
exact algorithm maximum clique problem 
operations research letters 


single machine scheduling minimize earliness subject tardy jobs 
european journal operational research 

feo bard holland 
facility wide planning scheduling printed wiring board assembly 
technical report operations research group department mechanical engineering university texas austin austin tx february 

feo bard holland 
grasp scheduling printed wiring board assembly 
technical report operations research group department mechanical engineering university texas austin austin tx december 
greedy randomized adaptive search procedures 
feo bard 
flight scheduling maintenance base planning 
management science 

feo bard 
cutting path tool selection problem computer aided process planning 
journal manufacturing systems 

feo gonz lez 
trailer assignment problem 
technical report operations research group department mechanical engineering university texas austin austin tx april 

feo resende 
probabilistic heuristic computationally difficult set covering problem 
operations research letters 

feo resende smith 
greedy randomized adaptive search procedure maximum independent set 
operations research 

feo 
grasp single machine scheduling sequence dependent setup costs linear delay penalties 
technical report operations research group department mechanical engineering university texas austin austin tx january 

feo venkatraman bard 
grasp difficult single machine scheduling problem 
computers operations research 

fischetti martello toth 
fixed job scheduling problem spread time constraints 
operations research 

hertz de werra 
technique finding stable sets large graphs tabu search 
computing 

fulkerson nemhauser trotter jr computationally difficult set covering problems arise computing width incidence matrices steiner triple systems 
mathematical programming study 

glover 
tabu search part orsa journal computing 

glover 
tabu search part ii 
orsa journal computing 

goldberg 
genetic algorithms search optimization machine learning 
addison wesley 

johnson trick editors 
second dimacs algorithm implementation challenge maximum clique coloring satisfiability 
dimacs series discrete mathematics theoretical computer science 
american mathematical society 

karmarkar ramakrishnan 
computational results interior point algorithm large scale linear programming 
mathematical programming 

kernighan lin 
efficient heuristic procedure partitioning graphs 
bell system technical journal 

kirkpatrick 
optimization simulated annealing quantitative studies 
journal statistical physics 


avoiding local optima hub location problem tabu search grasp 
annals operations research 

rajan 
grasp solve component grouping problem 
technical report bell laboratories holmdel nj 
appear naval research logistics 

laguna feo 
greedy randomized adaptive search procedure partition problem 
operations research 

laguna gonz lez 
search heuristic just time scheduling parallel machines 
journal intelligent manufacturing 

lawler lenstra rinnooy kan shmoys 
traveling salesman problem 
john wiley 

li pardalos resende 
greedy randomized adaptive search procedure quadratic assignment problem 
pardalos wolkowicz editors quadratic assignment related problems volume dimacs series discrete mathematics theoretical computer science pages 
american mathematical society 

papadimitriou steiglitz 
combinatorial optimization algorithms complexity 
prentice hall 

rajan segal 
assigning components robotic electronic assembly 
technical journal 

resende feo 
grasp satisfiability 
technical report bell laboratories murray hill nj 
feo resende 
resende pardalos li 
fortran subroutines approximate solution dense quadratic assignment problems grasp 
technical report bell laboratories murray hill nj 

selman levesque mitchell 
new method solving hard satisfiability problems 
proceedings tenth national conference artificial intelligence aaai pages july 

smith feo 
grasp coloring sparse graphs 
technical report operations research group department mechanical engineering university texas austin austin tx january 
