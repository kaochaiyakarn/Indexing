creating customized access method blobworld thomas computer science division university california berkeley cs berkeley edu design analysis customized access method content image retrieval system blobworld 
amdb access method analysis tool analyze existing multidimensional access methods support nearest neighbor search context blobworld application 
analysis propose variants tree tailored address problems analysis revealed 
implemented access methods propose generalized search trees gist framework analyzed amdb tool enables visualization performance analysis access methods 
access methods better performance characteristics blobworld application traditional multi dimensional access methods examined 
experience draw nearest neighbor access method design task constructing custom access methods tailored particular applications 
experience draw nearest neighbor access method design task constructing custom access methods tailored particular applications 
particular top bites bounding predicate performed better access methods tested 
millions images available proprietary databases internet 
consequence content image searching applications multiplying number images expected handle 
example university california berkeley digital library gb images line collection :10.1.1.34.5977
estimated tb images www estimates place amount image data line orders magnitude higher 
users domains medical imaging weather prediction tv production retrieve images collections contents images 
ability efficiently execute content image queries important image databases grow 
blobworld system addresses content querying breaking images blobs homogeneous characteristics searching images specifying characteristics blobs desired images 
blobworld system addresses content querying breaking images blobs homogeneous characteristics searching images specifying characteristics blobs desired images 
full blobworld query examines entire data set perform computationally complex comparisons high dimensional feature vectors blobs images currently blobs images order answer query 
approach scale increasing data set size access methods ams required speed queries 
focuses ams studied developed blobworld system 
implemented ams generalized search tree gist framework :10.1.1.144.2507
gist frameworks enables am designers create new tree structured ams minimum design coding effort 
gist provides tree maintenance concurrency control infrastructure 
am designer needs implement code specific particular am 
amdb tool visualization profiling debugging ams implemented gist :10.1.1.34.5977
implemented ams generalized search tree gist framework :10.1.1.144.2507
gist frameworks enables am designers create new tree structured ams minimum design coding effort 
gist provides tree maintenance concurrency control infrastructure 
am designer needs implement code specific particular am 
amdb tool visualization profiling debugging ams implemented gist :10.1.1.34.5977
addition amdb incorporates am analysis framework 
amdb access method analysis takes input gist am data set workload set queries outputs set metrics characterizing observed performance access method relative idealized tree 
allows am designer find areas potential access method improvement 
analyzing performance traditional ams blobworld queries amdb identified characteristics ams contributed am inefficiency 
gist provides template algorithms navigating modifying tree structure node splits deletes 
secondary index trees gist stores key rid pairs leaves rids record identifiers point corresponding records data pages 
internal nodes contain predicate child page pointer pairs predicate evaluates true keys contained reachable associated child page 
captures essence tree index structure hierarchy predicates predicate holds true keys stored hierarchy 
tree known example properties entries internal nodes represent minimum bounding rectangles data nodes tree :10.1.1.131.7887
predicates internal nodes search tree subsequently referred bounding predicates bps 
apart structural requirements gist impose restrictions key data stored tree organization nodes 
particular key space need ordered allowing multidimensional data 
nodes single level need partition cover entire key space 
am disk accesses random os flat file scan sequential am os theta slower sequential scan os am hit fifteen leaf level pages am query 
blobworld image processing compute intensive time consuming done line batch processing 
blobworld data set static ignore data insertion deletion am development 
importantly bulk load data drastically improves clustering data items leaf nodes ams 
standard index alternatives str algorithm sort data bulk loading tree canonical multidimensional am variety research commercial systems :10.1.1.101.1700:10.1.1.131.7887
shown table sorting bulk loading data minimized utilization clustering loss query workload leaving largest performance losses tree excess coverage 
essentially problem bulk loaded tree sloppy bps 
bulk loaded previously proposed reader invited examine cs berkeley edu photos blobworld 
seagate ultra wide scsi drives measures throughput mb windows nt 
seagate ultra wide scsi drives measures throughput mb windows nt 
average seek time rotational delay drive ms ms respectively 
kb transfers results ratio sequential os random past raw drive throughput increased faster seek times rotational delay decreased ratio random sequential os increase 
image processing takes twelve minutes image sun ultra mb memory 
lambda trees considered better trees dynamic data sets bulk loading data eliminates difference ams :10.1.1.129.3731
losses number os bulk loaded insertion loaded excess coverage loss utilization loss clustering loss table performance losses trees tree sr tree ss tree percent workload leaf level os clustering loss excess coverage loss access method performance losses relative total workload leaf level os shows percent leaf level os due excess coverage utilization clustering loss 
remaining percentage represents os necessary answer queries 
tree sr tree ss tree total leaf level os useful loss utilization coverage loss access method performance losses number leaf level os shows number leaf level os due excess coverage utilization clustering loss 
remaining os necessary answer queries 
losses number os bulk loaded insertion loaded excess coverage loss utilization loss clustering loss table performance losses trees tree sr tree ss tree percent workload leaf level os clustering loss excess coverage loss access method performance losses relative total workload leaf level os shows percent leaf level os due excess coverage utilization clustering loss 
remaining percentage represents os necessary answer queries 
tree sr tree ss tree total leaf level os useful loss utilization coverage loss access method performance losses number leaf level os shows number leaf level os due excess coverage utilization clustering loss 
remaining os necessary answer queries 
ams multi dimensional data sr tree ss tree see different bps helped performance :10.1.1.146.2508
ss trees spherical bps sr trees minimum bounding rectangles plus bounding spheres 
shows majority losses trees excess coverage losses ss tree performance worst ams 
shows ss tree performs unnecessary leaf level os query workload tree sr tree perform total 
tree sr tree performance comparable spheres sr tree bps saving small amount leaf level excess coverage loss relative tree 
visualization suggests queries may incur os checking contents empty corners mbr top queries 
combined intuition importance reducing spherical intersections bp regions near bp edges leads focus attempting remove empty areas corners mbr bp volume bp corners 
map alternate bp consider minimum area predicate map bp variant standard tree stores hyper rectangles bp 
map constructs rectangles total hyper volume enclose minimal 
volume precisely want minimize gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma amdb visualization tree leaf nodes heuristic number earlier ams :10.1.1.131.7887
conjecture map rectangles form shapes include empty corners reduce excess coverage loss 
problem finding rectangles bound set data points addressed tree node splitting heuristics 
heuristics aimed finding rectangles overlap little possible bound data set 
rectangles map bp part bp overlap beneficial 
kris creating jb problem np construction 
carson experiments possible 
joe hellerstein patient advisor 
research supported fellowship stipend support national physical sciences consortium lawrence national laboratory 
beckmann kriegel schneider seeger :10.1.1.129.3731
lambda tree efficient robust access method points rectangles 
proc 
acm sigmod international conference management data pages 
belongie carson greenspan malik 
gribble brewer 
system design issues internet middleware services deductions large client trace 
proc 
usenix symposium internet technologies systems monterey ca december 
guttman :10.1.1.131.7887
trees dynamic index structure spatial searching 
proc 
acmsigmod international conference management data pages boston ma 
hafner sawhney equitz flickner niblack 
analysis indexing schemes 
proc 
acm sigact sigmod sigart symp 
principles database systems pages tucson az may 
hellerstein naughton pfeffer :10.1.1.144.2507
generalized search trees database systems 
proc 
st vldb conference zurich switzerland 
thomas 
karypis aggarwal kumar 
multilevel hypergraph partitioning applications vlsi domain 
proc 
acm ieee th design automation conference 
satoh :10.1.1.146.2508
sr tree index structure high dimensional nearest neighbor queries 
proc 
acm sigmod international conference management data pages tucson az may 
shah hellerstein 
acm sigmod international conference management data pages tucson az may 
shah hellerstein 
analysis framework access methods 
technical report ucb csd university california berkeley 
lopez :10.1.1.101.1700
str simple efficient algorithm tree packing 
proc 
th international conference data engineering pages new orleans la april 
rastogi shim 
th international conference data engineering pages new orleans la april 
rastogi shim 
similarity retrieval algorithm image databases 
sigmod philadelphia pa 
ogle june :10.1.1.34.5977
cs berkeley edu arch data stats html 
riedel 
performance study sequential windows nt 
proc 
riedel 
performance study sequential windows nt 
proc 
nd usenix windows nt symposium seattle wa 
shah hellerstein :10.1.1.34.5977
amdb visual access method development tool 
appear user interfaces data intensive systems 
eric 
crc concise encyclopedia mathematics 
