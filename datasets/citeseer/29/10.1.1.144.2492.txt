tor second generation onion router roger dingledine free haven project arma net nick mathewson free haven project net paul syverson naval research lab syverson itd nrl navy mil tor circuit low latency anonymous communication service 
second generation onion routing system addresses limitations original design 
tor adds perfect forward secrecy congestion control directory servers integrity checking configurable exit policies practical design rendezvous points 
tor works real world internet requires special privileges kernel modifications requires little synchronization coordination nodes provides reasonable tradeoff anonymity usability efficiency 
briefly describe experiences international network dozen hosts 
close list open problems anonymous communication 

overview onion routing distributed overlay network designed anonymize tcp applications web browsing secure shell instant messaging 
clients choose path network build circuit node onion router path knows predecessor successor nodes circuit 
traffic flows circuit fixed size cells unwrapped symmetric key node layers onion relayed downstream 
onion routing project published design analysis papers :10.1.1.42.7881:10.1.1.34.4633
wide area onion routing network deployed briefly long running public implementation fragile proof concept ran single machine 
simple deployment processed connections distinct ip addresses world rate day 
critical design deployment issues resolved design updated years 
describe tor protocol asynchronous loosely federated onion routers provides improvements old onion routing design perfect forward secrecy onion routing originally vulnerable single hostile node recording traffic compromising successive nodes circuit forcing decrypt 
single multiply encrypted data structure onion lay circuit tor uses incremental telescoping path building design initiator negotiates session keys successive hop circuit 
keys deleted subsequently compromised nodes decrypt old traffic 
side benefit onion replay detection longer necessary process building circuits reliable initiator knows hop fails try extending new node 
separation protocol cleaning anonymity onion routing originally required separate application proxy supported application protocol written applications supported 
tor uses standard near ubiquitous socks proxy interface allowing support tcp programs modification 
tor relies filtering features privacy enhancing applicationlevel proxies trying duplicate features 
mixing padding traffic shaping onion routing originally called batching reordering cells arrived assumed padding ors designs added padding onion proxies users ors :10.1.1.42.7881
tradeoffs padding protection cost discussed traffic shaping algorithms provide security expensive padding concrete padding scheme suggested 
research deployment experience suggest level resource practical economical full link padding vulnerable :10.1.1.13.5636
proven convenient design traffic shaping low latency mixing improves anonymity realistic adversary leave strategies 
tcp streams share circuit onion routing originally built separate circuit application level request required multiple public key operations request threat anonymity building circuits see section 
tor multiplexes multiple tcp streams circuit improve efficiency anonymity 
leaky pipe circuit topology band signaling circuit tor initiators direct traffic nodes circuit 
novel approach allows traffic exit circuit middle possibly frustrating traffic shape volume attacks observing circuit 
allows long range padding research shows worthwhile 
congestion control earlier anonymity designs address traffic bottlenecks 
unfortunately typical approaches load balancing flow control overlay networks involve inter node control communication global views traffic 
tor decentralized congestion control uses acks maintain anonymity allowing nodes edges network detect congestion flooding send data congestion 
directory servers earlier onion routing design planned flood state information network approach unreliable complex 
tor takes simplified view distributing information 
certain trusted nodes act directory servers provide signed directories describing known routers current state 
users periodically download 
variable exit policies tor provides consistent mechanism node advertise policy describing hosts ports connect 
exit policies critical volunteer distributed infrastructure operator comfortable allowing different types traffic exit tor network node 
integrity checking original onion routing design integrity checking data 
node circuit change contents data cells passed example alter connection request connect different webserver tag encrypted traffic look corresponding corrupted traffic network edges :10.1.1.107.2563
tor hampers attacks verifying data integrity leaves network 
rendezvous points hidden services tor provides integrated mechanism responder anonymity location protected servers 
previous onion routing designs included long lived reply onions build circuits hidden server reply onions provide forward security useless node path went rotated keys 
tor clients negotiate rendezvous points connect hidden servers reply onions longer required 
freedom tor require os kernel patches network stack support 
prevents anonymizing non tcp protocols greatly helped portability deployability 
implemented features rendezvous points 
source code available free license tor covered patent affected distribution earlier versions onion routing 
deployed wide area alpha network test design get experience usability users provide research platform experimentation 
writing network stands eighteen nodes thirteen distinct administrative domains continents 
review previous section describe goals assumptions section address list improvements sections 
summarize section design stands known attacks talk early deployment experiences section 
conclude list open problems section onion routing project section 
related modern anonymity systems date chaum mix net design 
chaum proposed hiding correspondence sender recipient wrapping messages layers public key cryptography relaying path composed mixes mix turn decrypts delays re orders messages relaying onward 
subsequent relay anonymity designs diverged main directions 
systems babel mixmaster mixminion tried maximize anonymity cost introducing comparatively large variable latencies :10.1.1.107.2563
decision high latency networks resist strong global adversaries introduce lag interactive tasks web browsing internet chat ssh connections 
tor belongs second category low latency designs try anonymize interactive network traffic 
systems handle variety bidirectional protocols 
provide convenient mail delivery high latency anonymous email networks remote mail server provides explicit timely delivery confirmation 
designs typically involve packets delivered quickly difficult prevent attacker eavesdrop ends communication correlating timing volume traffic entering anonymity network traffic leaving 
protocols similarly vulnerable active adversary introduces timing patterns traffic entering network looks correlated patterns exiting traffic 
done frustrate attacks designs protect primarily traffic analysis traffic confirmation see section 
simplest low latency designs single hop proxies anonymizer single trusted server strips data origin relaying 
designs easy analyze users trust anonymizing proxy 
concentrating traffic single point increases anonymity set people user hiding vulnerable adversary observe traffic going proxy 
complex distributed trust circuit anonymizing systems 
designs user establishes medium term bidirectional circuits tunnels data fixed size cells 
establishing circuits computationally expensive typically requires publickey cryptography relaying cells comparatively inexpensive typically requires symmetric encryption 
circuit crosses servers server knows adjacent servers circuit single server link user communication partners 
java anon proxy known jap web mixes uses fixed shared routes known cascades 
single hop proxy approach aggregates users larger anonymity sets attacker needs observe ends cascade bridge system traffic 
java anon proxy design calls padding users head cascade :10.1.1.25.5586
demonstrated current implementation padding policy improves anonymity 
low latency design proposed time onion routing gave stronger anonymity allowed single user shut network sending :10.1.1.24.6256:10.1.1.24.6256
systems isdn mixes designed environments different assumptions 
designs participants generate traffic relay traffic 
systems aim conceal peer originated request just relayed peer 
layered encryption crowds simply assumes adversary observe initiator uses public key encryption node circuit read circuit traffic :10.1.1.30.3785
crowds uses multicast responses hide initiator 
herbivore go requiring broadcast 
systems designed primarily communication peers herbivore users external connections requesting peer serve proxy 
systems freedom original onion routing build circuits layered onion publickey encrypted messages layer provides session keys address server circuit 
tor described anonymity network build circuits stages extending hop time 
section describes approach enables perfect forward secrecy 
circuit anonymity designs choose protocol layer anonymize 
may choose intercept ip packets directly relay stripping source address circuit 
alternatively tor may accept tcp streams relay data streams circuit ignoring breakdown data tcp segments 
may accept application level protocols relay application requests circuit 
making protocol layer decision requires compromise flexibility anonymity 
example system understands crowds strip identifying information requests take advantage caching limit number requests leave network batch encode requests minimize number connections 
hand ip level anonymizer handle nearly protocol ones unforeseen designers systems require kernel level modifications operating systems complex portable 
tcp level anonymity networks tor middle approach fairly application neutral long application supports tunneled tcp treating application connections data streams raw tcp packets avoid known inefficiencies tunneling tcp tcp 
distributed trust anonymizing systems need prevent attackers adding servers compromising user paths 
tor relies small set known directory servers run independent parties decide nodes join 
allow unknown users run servers limited resource ip addresses prevent attacker controlling network 
crowds suggests requiring written requests potential crowd members 
anonymous communication essential systems eternity free haven publius :10.1.1.20.417:10.1.1.125.3017
tor rendezvous points enable connections mutually anonymous entities building block location hidden servers needed eternity free haven 

design goals assumptions goals low latency anonymity designs tor seeks frustrate attackers linking communication partners linking multiple communications single user 
main goal considerations directed tor evolution 
deployability design deployed real world 
expensive run example requiring bandwidth volunteers willing provide place heavy liability burden operators example allowing attackers implicate onion routers illegal activities difficult expensive implement example requiring kernel patches separate proxies protocol 
require non anonymous parties websites run software 
rendezvous point design meet goal non anonymous users talking hidden servers see section usability hard system fewer users anonymity systems hide users users system fewer users provides anonymity 
usability convenience security requirement :10.1.1.13.5636:10.1.1.24.6256
tor require modifying applications introduce prohibitive delays require users configuration decisions possible 
tor easily implemented common platforms require users change operating system anonymous 
current tor implementation runs windows assorted unix clones including linux freebsd macos 
flexibility protocol flexible tor serve test bed research 
open problems low latency anonymity networks generating dummy traffic preventing sybil attacks may solvable independently issues solved tor :10.1.1.17.1073:10.1.1.17.1073
hopefully systems need reinvent tor design 
simple design protocol design security parameters understood 
additional features impose implementation complexity costs adding unproven techniques design threatens deployability readability ease security analysis 
tor aims deploy simple stable system integrates best accepted approaches protecting anonymity 
non goals favoring simple deployable designs explicitly deferred possible goals solved solved 
peer peer aim scale completely decentralized peer peer environments thousands short lived servers may controlled adversary 
approach appealing open problems 
secure attacks tor claim provide definitive solution timing intersection attacks 
approaches having users run onion routers may help see section discussion 
protocol normalization tor provide protocol normalization anonymizer 
senders want anonymity responders complex variable protocols tor layered filtering proxy hide differences clients protocol features leak identity 
note separation tor provide services anonymous network authenticated responder ssh 
similarly tor integrate tunneling non stream protocols udp provided external service appropriate 
steganographic tor try conceal connected network 

threat model global passive adversary commonly assumed threat analyzing theoretical anonymity designs 
practical low latency systems tor protect strong adversary 
assume adversary observe fraction network traffic generate modify delete delay traffic operate onion routers compromise fraction onion routers 
low latency anonymity systems layered encryption adversary typical goal observe initiator responder 
observing ends passive attackers confirm suspicion alice talking bob timing volume patterns traffic connection distinct active attackers induce timing signatures traffic force distinct patterns 
focusing traffic confirmation attacks aim prevent traffic analysis attacks adversary uses traffic patterns learn points network attack 
adversary try link initiator alice communication partners try build profile alice behavior 
mount passive attacks observing network edges correlating traffic entering leaving network relationships packet timing volume externally visible user selected options 
adversary mount active attacks compromising routers keys replaying traffic selectively denying service trustworthy routers move users compromised routers denying service users see traffic network stops introducing patterns traffic detected 
adversary subvert directory servers give users differing views network state 
additionally try decrease network reliability attacking nodes performing activities reliable nodes trying get taken making network unreliable flushes users anonymous systems may easier attack 
summarize section tor design defends attacks 

tor design tor network overlay network onion router runs normal user level process special privileges 
onion router maintains tls connection onion router 
user runs local software called onion proxy op fetch directories establish circuits network handle connections user applications 
onion proxies accept tcp streams multiplex circuits 
onion router side circuit connects destinations tcp streams relays data 
onion router maintains long term identity key short term onion key 
identity key sign tls certificates sign router descriptor summary keys address bandwidth exit policy directory servers sign directories 
onion key decrypt requests users set circuit negotiate ephemeral keys 
tls protocol establishes short term link key communicating ors 
short term keys rotated periodically independently limit impact key compromise 
section presents fixed size cells unit communication tor 
describe section circuits built extended truncated destroyed 
section describes tcp streams routed network 
address integrity checking section resource limiting section 
section talks congestion control fairness issues 

cells onion routers communicate users ops tls connections ephemeral keys 
tls conceals data connection perfect forward secrecy prevents attacker modifying data wire impersonating 
traffic passes connections fixed size cells 
cell bytes consists header payload 
header includes circuit identifier specifies circuit cell refers circuits multiplexed single tls connection command describe cell payload 
circuit identifiers connection specific single circuit different op connection traverses 
command cells control cells interpreted node receives relay cells carry stream data 
control cell commands padding currently keepalive usable link padding create created set new circuit destroy tear circuit 
relay cells additional header relay header cell header containing stream identifier streams multiplexed circuit checksum integrity checking length relay payload relay command 
entire contents relay header relay cell payload encrypted decrypted relay cell moves circuit bit aes cipher counter mode generate cipher stream 
relay commands relay data data flowing stream relay open stream relay close stream cleanly relay teardown close broken stream relay connected notify op relay succeeded relay extend relay extended extend circuit hop acknowledge relay truncate relay truncated tear part circuit acknowledge relay congestion control relay drop implement long range dummies 
give visual overview cell structure plus details relay cell structure describe cell types commands detail 
cmd bytes data relay digest 
circuits streams data onion routing originally built circuit tcp stream 
building circuit take tenths second due public key cryptography network latency design imposed high costs applications web browsing open tcp streams 
tor circuit shared tcp streams 
avoid delays users construct circuits preemptively 
limit streams users ops build new circuit periodically previous expire old circuits longer open streams 
ops consider making new circuit minute heavy users spend negligible time building circuits limited number requests linked exit node 
circuits built background ops recover failed circuit creation delaying streams harming user experience 
constructing circuit user op constructs circuits incrementally negotiating symmetric key circuit hop time 
creating new circuit op call alice sends create cell node chosen path call bob 
chooses new cab currently connection bob 
create cell payload contains half diffie hellman handshake encrypted onion key call bob 
bob responds created cell containing second half dh handshake hash alice link tls encrypted link tls create created relay extend relay extended relay website relay connected relay data get relay data response 
create created relay website relay connected relay data get relay data response legend rsa encryption aes encryption cn get 
unencrypted tcp handshake 
response 
alice builds hop circuit begins fetching web page 
negotiated key xy circuit established alice bob send relay cells encrypted negotiated key 
detail section 
extend circuit alice sends relay extend website cell bob specifying address call carol encrypted gx 
bob copies create cell passes carol extend circuit 
bob chooses new cbc currently connection carol 
alice needs know bob associates cab connection alice cbc connection carol 
carol responds created cell bob wraps payload relay extended cell passes back alice 
circuit extended carol alice carol share common key gx extend circuit third node alice proceeds telling node circuit extend hop 
circuit level handshake protocol achieves unilateral entity authentication alice knows handshaking doesn care opening circuit alice uses public key trying remain anonymous unilateral key authentication alice agree key alice knows learns 
achieves forward secrecy key freshness 
formally protocol follows ep encryption bob public key secure hash function concatenation alice bob ep gx bob alice handshake second step bob proves received chose pk encryption step say steps sts negotiated key derive symmetric keys direction 
signature second step single cell small hold public key signature 
preliminary analysis nrl protocol analyzer shows protocol secure including perfect forward secrecy traditional dolev yao model 
relay cells alice established circuit shares keys circuit send relay cells 
recall relay cell indicates stream cell belongs 
receiving relay cell looks corresponding circuit decrypts relay header payload session key circuit 
cell headed away alice checks decrypted recognized corresponds open stream circuit control zero 
recognizes accepts relay cell processes described 
looks step circuit replaces appropriate sends decrypted relay cell 
circuit receives unrecognized relay cell error occurred cell discarded 
ops treat incoming relay cells similarly iteratively unwrap relay header payload session keys shared circuit closest farthest 
stage op recognizes cell originated encryption just removed 
construct relay cell addressed alice iteratively encrypts cell payload relay header payload symmetric key hop 
encrypted different value step targeted meaningful value 
leaky pipe circuit topology allows alice streams exit different ors single circuit 
alice may choose different exit points exit policies keep ors knowing streams originate person 
replies alice relay cell encrypts cell relay header payload single key shares alice sends cell back alice circuit 
subsequent ors add layers encryption relay cell back alice 
tear circuit alice sends destroy control cell 
circuit receives destroy cell closes streams circuit passes new destroy cell forward 
just circuits built incrementally torn incrementally alice send relay truncate cell single circuit 
bits cell probability accidental collision far lower chance hardware failure 
sends destroy cell forward acknowledges relay truncated cell 
alice extend circuit different nodes signaling intermediate nodes limited observer changed circuit 
similarly node circuit goes adjacent node send relay truncated cell back alice 
break node see circuits go attack weakened 

opening closing streams alice application wants tcp connection address port asks op socks connection 
op chooses newest open circuit creates available chooses suitable circuit exit node usually node due exit policy conflicts see section op opens stream sending relay cell exit node zero recognize containing relay payload new random destination address destination port 
exit node connects remote host responds relay connected cell 
receipt op sends socks reply notify application success 
op accepts data application tcp stream packaging relay data cells sending cells circuit chosen 
catch socks applications pass alphanumeric hostname tor client resolve ip address pass ip address tor client 
application dns resolution alice reveals destination remote dns server sending hostname tor network resolved far 
common applications mozilla ssh flaw 
mozilla flaw easy address filtering proxy called gives hostname tor client alice computer dns resolution 
portable general solution needed ssh open problem 
modifying replacing local nameserver invasive brittle 
forcing resolver library resolution tcp udp hard portability problems 
provide tool similar dig perform private lookup tor network 
currently encourage privacy aware proxies possible 
closing tor stream analogous closing tcp stream uses step handshake normal operation step handshake errors 
stream closes abnormally adjacent node simply sends relay teardown cell 
stream closes normally node sends relay cell circuit 
side sent back relay cell stream torn 
relay cells layered encryption destination knows relay cell request close stream 
step handshake allows tor support tcp applications half closed connections 

integrity checking streams old onion routing design stream cipher integrity checking traffic vulnerable malleability attack attacker decrypt cells changes encrypted data create corresponding changes data leaving network 
weakness allowed adversary change padding cell destroy cell change destination address relay cell adversary webserver change ftp command dir rm 
adversary guess encrypted content introduce corruption stream 
external adversary link encryption similarly stream cipher 
tor uses tls links integrity checking protects data modification external adversaries 
addressing insider malleability attack complex 
integrity checking relay cells hop including hashes authenticating cipher mode eax problems 
approaches impose message expansion overhead hop leak path length waste bytes padding maximum path length 
second solutions verify traffic coming alice ors able produce suitable hashes intermediate hops ors circuit know ors session keys 
third accepted design vulnerable timing attacks tagging attacks performed circuit provide additional information attacker 
check integrity edges stream 
alice negotiates key new hop initialize sha digest derivative key randomness know 
incrementally add sha digest contents relay cells create include relay cell bytes current digest 
keeps sha digest data received verify received hashes correct 
sure removing modifying cell attacker able deduce current digest state depends traffic alice bob starting negotiated key 
attacks sha adversary incrementally add hash produce new valid hash don hashes encrypted circuit 
computational overhead computing digests minimal compared doing aes encryption performed hop circuit 
bytes cell minimize overhead chance adversary correctly guess valid hash acceptably low alice bob tear circuit receive bad hash 

rate limiting fairness volunteers willing run services limit bandwidth usage 
accommodate tor servers token bucket approach enforce long term average rate incoming bytes permitting shortterm bursts allowed bandwidth 
tor protocol generates roughly number outgoing bytes incoming bytes sufficient practice limit incoming bytes 
tcp streams correspondence relaying single incoming byte require entire byte cell 
just wait bytes local application may waiting reply 
treat case entire cell size read regardless fullness cell 
inspired design circuit edges heuristically distinguish interactive streams bulk streams comparing frequency supply cells 
provide latency interactive streams giving preferential service giving throughput bulk streams 
preferential treatment presents possible attack adversary observing ends stream learn information timing attacks 

congestion control bandwidth rate limiting need worry congestion accidental intentional 
users choose connection circuits connection saturated 
example attacker send large file tor network webserver runs refuse read bytes webserver circuit 
congestion control mechanism bottlenecks propagate back entire network 
don need reimplement full tcp windows sequence numbers ability drop cells re full retransmit tcp guarantees order delivery cell 
describe response 
circuit level throttling control circuit bandwidth usage keeps track windows 
packaging window tracks relay data cells allowed package incoming tcp streams transmission back op delivery window tracks relay data cells willing deliver tcp streams outside network 
window initialized say data cells 
data cell packaged delivered appropriate window decremented 
received data cells currently sends relay cell op zero 
receives relay cell zero increments packaging window 
cells increments corresponding window 
packaging window reaches stops reading tcp connections streams corresponding circuit sends relay data cells receiving relay cell 
op behaves identically track packaging window delivery window circuit 
packaging window reaches stops reading streams destined 
stream level throttling stream level congestion control mechanism similar circuit level mechanism 
ors ops relay cells implement flow control individual streams circuits 
stream begins packaging window currently cells increments window fixed value receiving relay cell 
returning relay cell soon cells arrived stream level congestion control check data successfully flushed tcp stream sends relay cell number bytes pending flushed threshold currently cells worth 
arbitrarily chosen parameters give tolerable throughput delay see section 

rendezvous points hidden services rendezvous points building block services known responder anonymity tor network 
location hidden services allow bob offer tcp service webserver revealing ip address 
type anonymity protects distributed dos attacks attackers forced attack onion routing network know bob ip address 
design location hidden servers goals 
access controlled bob needs way filter incoming requests attacker flood bob simply making connections 
robust bob able maintain long term pseudonymous identity presence router failure 
bob service tied single bob able tie service new ors 
resistant social attacker offers illegal location hidden service able frame rendezvous router making observers believe router created service 
application transparent require users run special software access location hidden servers require modify applications 
provide location hiding bob allowing advertise onion routers points contact points 
may robust efficient keyvalue lookup system authenticated updates distributed hash table dht cfs alice client chooses rendezvous point :10.1.1.159.9358
connects bob points informs rendezvous point waits connect rendezvous point 
extra level indirection helps bob points avoid problems associated serving unpopular files directly example bob serves material point community finds objectionable bob service tends get attacked network 
extra level indirection allows bob respond requests ignore 
appendix provide detailed description rendezvous protocol integration issues attacks related rendezvous 

design decisions 
resource management denial service providing tor public service creates opportunities denial service attacks network 
flow control rate limiting discussed section prevent users consuming bandwidth routers willing provide opportunities remain users consume network resources fair share render network unusable 
cpu consuming denial ofservice attacks attacker force perform expensive cryptographic operations 
example attacker sends create cell full junk bytes force perform rsa decrypt 
similarly attacker fake start tls handshake forcing carry comparatively expensive half handshake real computational cost attacker 
implemented defenses attacks approaches possible 
ors require clients solve puzzle new tls handshakes accepting create cells 
long tokens easy verify computationally expensive produce approach limits attack multiplier 
additionally ors limit rate accept create cells tls connections computational processing symmetric cryptography operations keep cells flowing 
rate limiting allow attacker slow users build new circuits 
rely external infrastructure onion routing network run dht 
run simple lookup system directory servers 
adversaries attack tor network hosts network links 
disrupting single circuit link breaks streams passing part circuit 
users similarly lose service router crashes operator restarts 
current tor design treats attacks intermittent network failures depends users applications respond recover appropriate 
design tcp acknowledgment protocol streams lost entry exit point disrupted 
solution require buffering network edges performance anonymity implications extra complexity require investigation 

exit policies abuse exit abuse serious barrier wide scale tor deployment 
anonymity presents opportunity hide origins activities 
attackers harm tor network exit servers abuse 
applications commonly ip authentication institutional mail fooled fact anonymous connections appear originate exit 
stress tor enable new class abuse 
spammers attackers access thousands misconfigured systems worldwide tor network far easiest way launch attacks 
onion routers mistaken originators abuse volunteers run may want deal explaining anonymity networks administrators block limit abuse travels tor network 
mitigate abuse issues tor onion router exit policy describes external addresses ports router connect 
spectrum open exit nodes connect 
middleman nodes relay traffic tor nodes private exit nodes connect local host network 
private exit exists secure way client connect host network external adversary eavesdrop traffic private exit final destination sure alice destination activities 
onion routers current network function restricted exits permit connections world large prevent access certain abuse prone addresses services smtp 
additionally cases authenticate clients prevent exit abuse harming anonymity 
administrators port restrictions support limited set services ssh aim 
complete solution course abuse opportunities protocols known 
encountered abuse deployed network consider proxies clean traffic certain protocols leaves network 
example abusive behavior exploiting buffer overflows known script vulnerabilities detected straightforward manner 
similarly run automatic spam filtering software email exiting network 
ors may rewrite exiting traffic append headers information indicating traffic passed anonymity service 
approach commonly email anonymity systems 
ors run servers hostnames anonymous alert abuse targets nature anonymous traffic 
mixture open restricted exit nodes allows flexibility volunteers running servers 
having middleman nodes provides large robust network having exit nodes reduces number points adversary needs monitor traffic analysis places greater burden exit nodes 
tension seen java anon proxy cascade model node cascade needs handle abuse complaints adversary needs observe entry exit cascade perform traffic analysis cascade users 
hydra model entries exits presents different compromise exit nodes needed adversary needs harder watch clients see section 
note exit abuse dismissed peripheral issue system public image suffers reduce number diversity system users reduce anonymity system 
usability public perception security parameter 
sadly preventing abuse open exit nodes unsolved problem probably remain arms race foreseeable 
abuse problems faced princeton project give glimpse issues 

directory servers generation onion routing designs network status updates router flooded signed statement neighbors propagated onward 
anonymizing networks different security goals typical link state routing protocols 
example delays accidental intentional cause different parts network different views link state topology inconvenient give attackers opportunity exploit differences client knowledge 
worry attacks deceive client router membership list topology current network state 
partitioning attacks client knowledge help adversary efficiently deploy resources target :10.1.1.107.2563
tor uses small group redundant known onion routers track changes network topology node state including keys exit policies 
directory server acts server clients fetch current network state router lists ors upload state information 
onion routers periodically publish signed statements state directory server 
directory servers combine information views network liveness generate signed description directory entire network state 
client software preloaded list directory servers keys bootstrap client view network 
directory server receives signed statement checks identity key recognized 
directory servers automatically advertise unrecognized ors 
adversary take network creating servers :10.1.1.17.1073
new nodes approved directory server administrator included 
mechanisms automated node approval area active research discussed section 
course variety attacks remain 
adversary controls directory server track clients providing different information listing nodes control informing certain clients node 
external adversary exploit differences client knowledge clients node listed directory server vulnerable 
directory servers synchronized redundant agree common directory 
clients trust directory signed threshold directory servers 
directory servers tor modeled mixminion situation easier :10.1.1.107.2563
simplifying assumption participants agree set directory servers 
second mixminion needs predict node behavior tor needs threshold consensus current state network 
tor directory servers build consensus directory simple round broadcast protocol 
round server dates signs current opinion broadcasts directory servers round server rebroadcasts signed opinions received 
point directory servers check see server signed multiple opinions period 
server broken cheating protocol stops notifies administrators remove cheater wait broken server fixed 
discrepancies directory server locally computes algorithm described set opinions resulting uniform shared directory 
round servers sign directory broadcast round servers rebroadcast directory signatures 
directory server drops network signature included final directory 
rebroadcast steps ensure directory server heard servers links assuming directory servers talk directly third 
broadcasts feasible relatively directory servers currently expect network scales 
computing shared directory locally straightforward threshold voting process include majority directory servers believe 
avoid attacks router connects directory servers refuses relay traffic routers directory servers build circuits anonymously test router reliability 
unfortunately defense designed implemented 
directory servers simpler flexible flooding 
flooding expensive complicates analysis start experimenting non clique network topologies 
signed directories cached onion routers directory servers performance bottleneck users aid traffic analysis forcing clients periodically announce existence central point 

attacks defenses summarize variety attacks discuss design 
passive attacks observing user traffic patterns 
observing user connection reveal destination data reveal traffic patterns sent received 
profiling user connection patterns requires processing multiple application streams may operating simultaneously series single circuit 
observing user content 
content user encrypted connections responders may responding website may hostile 
filtering content primary goal onion routing tor directly related filtering services anonymize application data streams 
option distinguishability 
allow clients choose configuration options 
example clients concerned request rotate circuits concerned traceability 
allowing choice may attract users different needs clients minority may lose anonymity appearing distinct gain optimizing behavior :10.1.1.13.5636
timing correlation 
tor minimally hides correlations 
attacker watching patterns traffic initiator responder able confirm correspondence high probability 
greatest protection currently available confirmation hide connection onion proxy tor node running op tor node firewall 
approach requires observer separate traffic originating onion router traffic passing global observer limited observer capabilities 
size correlation 
simple packet counting effective confirming endpoints stream 
padding limited protection leaky pipe topology means different numbers packets may enter circuit exit 
website fingerprinting 
effective passive attacks traffic confirmation attacks puts outside design goals 
passive traffic analysis attack potentially effective 
searching exit connections timing volume correlations adversary may build database fingerprints containing file sizes access patterns targeted websites 
confirm user connection site simply consulting database 
attack shown effective 
may effective tor streams multiplexed circuit fingerprinting limited granularity cells currently bytes 
additional defenses include larger cell sizes padding schemes group websites large sets link padding long range dummies 
active attacks compromise keys 
attacker learns tls session key see control cells encrypted relay cells circuit connection learning circuit session key lets unwrap layer encryption 
attacker learns tls private key impersonate tls key lifetime learn onion key decrypt create cells perfect forward secrecy hijack established circuits compromising session keys 
periodic key rotation limits window opportunity attacks 
hand attacker learns node identity key replace node indefinitely sending new forged descriptors directory servers 
iterated compromise 
roving adversary compromise ors system intrusion legal coercion coercion march circuit compromising nodes reaches 
adversary complete attack lifetime circuit note fingerprinting attack confused complicated latency attacks require fingerprint latencies circuits network combined network edges target user responder website :10.1.1.24.6256
ors discarded necessary information attack completed 
perfect forward secrecy session keys attacker force nodes decrypt recorded traffic circuits closed 
additionally building circuits cross jurisdictions legal coercion harder phenomenon commonly called arbitrage java anon proxy project experienced need approach german court forced add backdoor nodes 
run recipient 
adversary running webserver trivially learns timing patterns users connecting introduce arbitrary patterns responses 
attacks easier adversary induce users connect webserver advertising content targeted users holds connection 
danger application protocols associated programs induced reveal information initiator 
tor depends similar protocol cleaners solve problem 
run onion proxy 
expected users nearly run local onion proxy 
settings may necessary proxy run remotely typically institutions want monitor activity connecting proxy 
compromising onion proxy compromises connections 
dos non observed nodes 
observer watch tor network increase value traffic attacking non observed nodes shut reduce reliability persuade users trustworthy 
best defense robustness 
run hostile 
addition local observer isolated hostile node create circuits alter traffic patterns affect traffic nodes 
hostile node immediately adjacent endpoints compromise anonymity circuit 
adversary run multiple ors persuade directory servers ors trustworthy independent occasionally user choose ors start circuit 
adversary controls nodes correlate traffic way adversary possibly attract disproportionately large amount traffic running permissive exit policy degrading reliability routers 
introduce timing messages 
simply stronger version passive timing attacks discussed earlier 
tagging attacks 
hostile node tag cell altering 
stream example unencrypted request web site garbled content coming appropriate time confirm association 
integrity checks cells prevent attack 
replace contents unauthenticated protocols 
relaying unauthenticated protocol hostile exit node impersonate target server 
clients prefer protocols authentication 
replay attacks 
anonymity protocols vulnerable replay attacks 
tor replaying side handshake result different negotiated session key rest recorded session 
attacks 
attacker tor network socially acts bring network get operators shut 
exit policies reduce possibilities abuse ultimately network requires volunteers tolerate political heat 
distribute hostile code 
attacker trick users running subverted tor software fact anonymize connections worse trick ors running weakened software provided users anonymity 
address problem solve completely signing tor releases official public key including entry directory lists versions currently believed secure 
prevent attacker subverting official release threats insider attacks provide releases source code form encourage source audits frequently warn users trust software comes source 
directory attacks destroy directory servers 
directory servers disappear decide valid directory 
long directory servers remain operation broadcast views network generate consensus directory 
half destroyed directory signatures clients automatically human intervention necessary clients decide trust resulting directory 
subvert directory server 
directory server attacker partially influence final directory 
ors included excluded majority vote corrupt directory worst cast tie breaking vote decide include marginal ors 
remains seen marginal cases occur practice 
subvert majority directory servers 
adversary controls half directory servers include compromised ors final directory wishes 
ensure directory server operators independent attack resistant 
encourage directory server 
directory agreement protocol assumes directory server operators agree set directory servers 
adversary persuade directory server operators distrust split quorum mutually hostile camps partitioning users directory 
tor address attack 
trick directory servers listing hostile 
threat model explicitly assumes directory server operators able filter hostile ors 
convince directories malfunctioning working 
current tor implementation directory servers assume running correctly start tls connection 
hostile easily subvert test accepting tls connections ors ignoring cells 
directory servers actively test ors building circuits streams appropriate 
tradeoffs similar approach discussed 

early experiences tor wild mid january tor network consists nodes europe joining week code matures 
node kb kb connection mb 
number users varies course hard tell sure users administrators companies begun sending entire departments web traffic tor block divisions reading traffic 
tor users reported network web browsing ftp irc aim kazaa ssh 
tor node currently processes roughly relay cells bit half gigabyte week 
average byte payload full cells going back client full cells coming client 
difference arises network traffic web browsing 
interactive traffic ssh brings average lot experience assuming resolve anonymity issues may partition traffic relay cell sizes handle bulk traffic interactive traffic 
part restrictive default exit policy reject smtp requests low profile abuse issues network deployed october 
slow growth rate gives time add features resolve bugs get feel users want anonymity system 
having users anonymity sets eager attract kazaa communities feel build reputation privacy human rights research socially activities 
performance profiling shows tor spends cpu time aes fast 
current latency attributable factors 
network latency crit comparison current remailer network reliable nodes 
haven asked planetlab provide tor nodes wouldn allow exit nodes see aim build long term community node operators developers 
ical intentionally bouncing traffic world times 
second congestion control algorithm focuses protecting volunteer servers accidental dos optimizing performance 
quantify effects informal tests network nodes machine heavily loaded ghz athlon 
downloaded megabyte file debian org minutes hours sample points 
arrived seconds average compared direct download 
ran similar test production tor network fetching front page cnn com kilobytes direct download consistently took performance tor highly variable 
downloads fast median finishing 
network expands chance building slow circuit includes slow heavily loaded node link increasing 
hand users remain satisfied increased latency address performance incrementally proceed development 
tor design aims foremost provide security research platform performance needs sufficient retain users :10.1.1.13.5636:10.1.1.24.6256
tweak congestion control parameters provide faster throughput cost larger buffers node adding heuristics mentioned section favor low volume streams may help 
research remains find right balance 
tor clique topology full visibility directories scaling problems expect network support nodes users re forced distributed 
luck experience gain running current topology help choose alternatives time comes 

open questions low latency anonymity addition non goals section questions solved confident tor security 
open issues questions balance 
example users rotate fresh circuits 
frequent rotation inefficient expensive may lead intersection attacks predecessor attacks infrequent rotation user traffic linkable 
opening fresh circuits clients exit middle circuit truncate re extend circuit 
analysis needed determine proper tradeoff 
choose path lengths 
alice uses hops ors certain colluding learn alice bob 
current example just begun pushing pipelining patch production network decrease latency medium large files revised benchmarks available 
approach alice chooses nodes unrelated destination 
alice choose random path length say increasing geometric distribution foil attacker uses timing learn fifth hop concludes alice responder ors 
assumed traffic confirmation immediately automatically defeat low latency anonymity system 
high latency anonymity systems vulnerable traffic confirmation traffic volumes high users habits sufficiently distinct 
done low latency systems resist attacks high latency systems 
tor effort conceal starts ends streams wrapping long range control commands identical looking relay cells 
link padding frustrate passive observers count packets long range padding observers hop circuit 
research remains find efficient practical approach 
volunteers prefer run constant bandwidth padding convincing traffic shaping approach specified 
long range padding shows promise 
try reduce correlation packet timing batching re ordering packets unclear improve anonymity introducing latency render network unusable 
cascade topology may better defend traffic confirmation aggregating users making padding mixing affordable 
hydra topology input nodes output nodes better adversaries 
going get hydra anyway nodes middleman nodes 
common wisdom suggests alice run best anonymity traffic coming node plausibly come 
mixing approach need 
immediately beneficial real world adversaries observe alice router run routers 
scale users prevent attacker observing network may necessary support far servers tor currently anticipates 
introduces issues 
approval central set directory servers longer feasible mechanism prevent adversaries signing colluding servers 
second clients longer complete picture network perform discovery preventing attackers manipulating exploiting gaps knowledge 
third servers server constantly communicate non clique topology network 
restricted route topologies promise comparable anonymity better scalability topology choose need way keep attackers manipulating position 
fourth central authority tracking server reliability unreliable servers making network unusable 
fifth clients receive anonymity running ors expect need incentive structure motivate :10.1.1.13.5636
possible solutions 
tor node goes circuits streams break 
users abandon system brittleness 
method section allow streams survive node failure 
affected users rebuild circuits immediately anonymity lost 
problem worse peer peer environment systems don provide incentive peers stay connected re done retrieving content expect higher churn rate 

directions tor brings innovations unified deployable system 
immediate steps include scalability tor emphasis deployability design simplicity led adopt clique topology directories full network visibility model client knowledge 
properties scale past servers 
section describes promising approaches deployment experience helpful learning relative importance bottlenecks 
bandwidth classes assumes ors bandwidth latency 
adopt model nodes advertise bandwidth level dsl alice avoids bottlenecks choosing nodes match exceed bandwidth 
way dsl users usefully join tor network 
incentives volunteers run nodes rewarded publicity possibly better anonymity :10.1.1.13.5636
nodes means increased scalability users mean anonymity 
need continue examining incentive structures participating tor 
need explore approaches limiting abuse understand people don bother privacy systems 
cover traffic currently tor omits cover traffic costs performance bandwidth clear security benefits understood 
pursue research link level cover traffic long range cover traffic determine simple padding method offers provable protection chosen adversary 
caching exit nodes exit node run caching web proxy improve anonymity cached pages alice request leaves tor network improve speed reduce bandwidth cost 
hand forward security weakened caches constitute record retrieved files 
find right balance usability security 
better directory distribution clients currently download description entire network minutes 
state grows larger clients numerous may need solution clients receive incremental updates directory state 
generally find scalable practical ways distribute date snapshots network status introducing new attacks 
implement location hidden services design appendix implemented 
doing encounter additional issues resolved terms usability anonymity 
specification review public byte level specification needs external review 
hope tor deployed people examine specification 
interoperability currently working designer unify specification implementation common elements systems 
far relatively straightforward 
interoperability allow testing direct comparison designs trust scalability 
wider scale deployment original goal tor gain experience deploying anonymizing overlay network learn having actual users 
point design development start deploying wider network 
actual users better able evaluate design decisions including robustness latency tradeoffs performance tradeoffs including cell size mechanisms usability 
acknowledgments peter geoff adam joseph john brown editing comments andrei serjantov marc design discussions cohen congestion control discussions adam back suggesting telescoping circuits cathy meadows formal analysis extend protocol 
supported onr darpa 
dingledine syverson :10.1.1.13.5636
economics anonymity 
wright editor financial cryptography 
springer verlag lncs 
anderson 
eternity service 

anonymizer 
anonymizer com 
back goldberg 
freedom systems security issues analysis 
white zero knowledge systems may 
back ller :10.1.1.24.6256
traffic analysis attacks trade offs anonymity providing systems 
moskowitz editor information hiding ih pages 
springer verlag lncs 
bellare rogaway wagner 
conventional authenticated encryption mode 
manuscript april 
berthold federrath :10.1.1.25.5586
web mixes system anonymous unobservable internet access 
federrath editor designing privacy enhancing technologies workshop design issue anonymity unobservability 
springer verlag lncs 
goldberg 
freedom systems architecture 
white zero knowledge systems december 
brown 
pragmatic ip anonymity 
ottawa linux symposium june 
chaum 
untraceable electronic mail return addresses digital pseudo nyms 
communications acm february 
dabek kaashoek karger morris stoica :10.1.1.159.9358
wide area cooperative storage cfs 
th acm symposium operating systems principles sosp chateau lake louise banff canada october 
dai 

usenet post august 
www eskimo com txt mentioned post list feb 
danezis 
mix networks restricted routes 
dingledine editor privacy enhancing technologies pet 
springer verlag lncs 
danezis 
statistical disclosure attacks 
security privacy age uncertainty sec pages athens may 
ifip tc kluwer 
danezis dingledine mathewson :10.1.1.107.2563
mixminion design type iii anonymous remailer protocol 
ieee symposium security privacy pages 
ieee cs may 
dean 
client puzzles protect tls 
proceedings th usenix security symposium 
usenix aug 
allen 
tls protocol version 
ietf rfc january 
dingledine freedman molnar 
reputation system increase mix net reliability 
moskowitz editor information hiding ih pages 
springer verlag lncs 
dingledine freedman molnar :10.1.1.20.417
free haven project distributed anonymous storage service 
federrath editor designing privacy enhancing technologies workshop design issue anonymity unobservability 
springer verlag lncs july 
dingledine mathewson 
tor protocol specifications 
net tor tor spec 
txt 
dingledine syverson 
reliable mix cascade networks reputation 
blaze editor financial cryptography 
springer verlag lncs 
douceur :10.1.1.17.1073
sybil attack 
proceedings st international peer peer systems workshop iptps mar 
federrath pfitzmann 
mixes mobile communication systems location management privacy 
anderson editor information hiding international workshop pages 
springer verlag lncs may 
freedman morris 
peer topeer anonymizing network layer 
th acm conference computer communications security ccs washington dc november 
goel robson sirer 
herbivore scalable efficient protocol anonymous communication 
technical report tr cornell university computing information science february 
goldberg 
pseudonymous communications infrastructure internet 
phd thesis uc berkeley dec 
goldschlag reed syverson 
hiding routing information 
anderson editor information hiding international workshop pages 
springer verlag lncs may 
lc tsudik 
mixing mail babel 
network distributed security symposium ndss pages 
ieee february 

fingerprinting websites traffic analysis 
dingledine syverson editors privacy enhancing technologies pet pages 
springer verlag lncs 
ller pfitzmann pfitzmann waidner 
real time mixes bandwidth efficient anonymity protocol 
ieee journal selected areas communications may 
agrawal 
limits anonymity open environments 
petitcolas editor information hiding workshop ih 
springer verlag lncs october 

socks 
unix security iii symposium usenix security symposium pages 
usenix 
levine reiter wang wright 
timing analysis low latency mix systems 
juels editor financial cryptography 
springer verlag lncs forthcoming 
levine shields 
multicast protocol anonymity 
journal computer security 
meadows 
nrl protocol analyzer overview 
journal logic programming 
ller cottrell 
mixmaster protocol version 
draft july 
www com mixmaster spec txt 
pai wang park pang peterson 
dark side web open proxy view 
cs princeton edu 
pfitzmann pfitzmann waidner 
untraceable communication small bandwidth overhead 
gi itg conference communication distributed systems pages february 

www org 
reed syverson goldschlag 
protocols anonymous connections mobile applications 
christianson lomas roe editors security protocols th international workshop pages 
springer verlag lncs april 
reed syverson goldschlag 
anonymous connections onion routing 
ieee journal selected areas communications may 
reiter rubin :10.1.1.30.3785
crowds anonymity web transactions 
acm june 
plattner 
practical anonymity masses 
juels editor financial cryptography 
springer verlag lncs forthcoming 
rafaeli plattner hutchison 
analysis anonymity network web browsing 
ieee th intl 
workshop enterprise security wet ice pittsburgh usa june 
serjantov sewell 
passive attack analysis connection anonymity systems 
computer security esorics 
springer verlag lncs forthcoming october 
sherwood bhattacharjee srinivasan 
protocol scalable anonymous communication 
ieee symposium security privacy pages 
ieee cs 
smith 
caching browsing anonymity 
acm exchanges sept 
syverson reed goldschlag 
onion routing access configurations 
darpa information survivability conference exposition discex volume pages 
ieee cs press 
syverson tsudik reed landwehr 
analysis onion routing security 
federrath editor designing privacy enhancing technologies workshop design issue anonymity unobservability pages 
springer verlag lncs july 
tannenbaum 
computer networks 
project 
german police proceeds anonymity service 
press release september 
www de material anon htm 

tcp tcp bad idea 
sites de sites devel tcp tcp html 
waldman mazi res 
publishing system document 
th acm conference computer communications security ccs pages 
acm press 
waldman rubin cranor :10.1.1.125.3017
publius robust tamper evident censorship resistant source anonymous web publishing system 
proc 
th usenix security symposium pages august 
wright adler levine shields 
defending anonymous communication passive logging attacks 
ieee symposium security privacy pages 
ieee cs may 
rendezvous points hidden services appendix provide specifics rendezvous points section 
steps performed behalf alice bob local ops application integration described fully 
bob chooses points advertises dht 
add 
bob builds circuit points waits requests 
alice learns bob service band bob told website 
retrieves details bob service dht 
alice chooses rendezvous point rp transaction 
builds circuit rp gives rendezvous cookie recognize bob 
alice opens anonymous stream bob points gives message encrypted bob public key telling rp rendezvous cookie start dh handshake 
point sends message bob 
bob wants talk alice builds circuit alice rp sends rendezvous cookie second half dh handshake hash session key share 
argument section alice knows shares key bob 
rp connects alice circuit bob note rp recognize alice bob data transmit 
alice sends relay cell circuit 
arrives bob op connects bob webserver 
anonymous stream established alice bob communicate normal 
establishing point bob provides onion router public key 
hash public key identifies unique service bob signs messages prevents anybody bob point 
bob uses public key establish points service periodically refreshes entry dht 
message alice gives point includes hash bob public key optional initial authorization token point example block replays 
message bob may include authorization token bob choose respond 
authorization tokens provide selective access important users get uninterrupted access 
normal situations bob service simply offered directly mirrors bob gives tokens high priority users 
mirrors knocked users switch accessing bob service tor rendezvous system 
bob points subject dos open points risk attack 
provide selected users current list schedule points practical stable large group points available 
bob give secret public keys consulting dht 
approaches limit exposure selected users collude dos 

integration user applications bob configures onion proxy know local ip address port service strategy authorizing clients public key 
bob publishes public key expiration time current points service dht indexed hash public key 
bob webserver unmodified doesn know hidden tor network 
alice applications unchanged client interface remains socks proxy 
encode necessary information fully qualified domain name alice uses establishing connection 
location hidden services virtual top level domain called onion hostnames take form onion authorization cookie encodes hash public key 
alice onion proxy examines addresses re destined hidden server decodes key starts rendezvous described 
previous rendezvous rendezvous points low latency anonymity systems described isdn telephony 
low latency designs rendezvous points hiding location mobile phones low power location trackers 
rendezvous low latency internet connections suggested early onion routing published design ian goldberg 
design differs ways 
goldberg suggests alice manually hunt current location service gnutella approach lookup transparent user faster robust 
second tor client server negotiate session keys diffie hellman plaintext exposed rendezvous point 
third design minimizes exposure running service encourage volunteers offer rendezvous services 
tor points output bytes clients rendezvous points don know client server read data transmitted 
indirection scheme designed include authentication authorization alice doesn include right cookie request service bob need acknowledge existence 

