strobe algorithms multi source warehouse consistency yue zhuge hector garcia molina janet wiener computer science department stanford university stanford ca usa hector cs stanford edu db stanford edu warehouse warehouse data repository containing integrated information efficient querying analysis 
maintaining consistency warehouse data challenging especially data sources autonomous views data warehouse span multiple sources 
transactions containing multiple updates sources batch updates complicate consistency problem 
identify discuss fundamental transaction processing scenarios data warehousing 
define levels consistency warehouse data new family algorithms strobe family maintain consistency warehouse updated various warehousing scenarios 
algorithms incremental handle continuous overlapping stream updates sources 
assume integrator tightly coupled warehouse 
view maintenance computation done integrator actual view operation done warehouse term warehouse wh denote combination integrator warehouse 
example view maintenance anomaly multiple sources view defined relations residing sources respectively 
initially relations materialized view warehouse mv 
consider source updates insert delete :10.1.1.56.375:10.1.1.56.375
conventional incremental view maintenance algorithm events may occur wh 

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375
initially relations materialized view warehouse mv 
consider source updates insert delete :10.1.1.56.375:10.1.1.56.375
conventional incremental view maintenance algorithm events may occur wh 

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source current view empty action taken deletion :10.1.1.56.375

consider source updates insert delete :10.1.1.56.375:10.1.1.56.375
conventional incremental view maintenance algorithm events may occur wh 

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source current view empty action taken deletion :10.1.1.56.375

wh receives source final answer pending queries updates answer inserted mv mv 

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source current view empty action taken deletion :10.1.1.56.375

wh receives source final answer pending queries updates answer inserted mv mv 
final view incorrect 
example interleaving query updates arriving sources causes incorrect view 
distributed transactions require global concurrency control mechanism spanning sources may exist 
sources may unwilling tolerate delays come global concurrency control 
approach queries appear atomic processing intelligently warehouse requiring warehouse copies relations 
example warehouse notes deletion arrived warehouse processing query answer may contain tuples reflect deleted tuple 
contains exist deleted warehouse removes tuple leaving empty answer :10.1.1.56.375
materialized view left empty correct state updates take place 
example gives flavor solution details explain algorithms 
note intelligent processing updates warehouse depends sources run transactions 
sources run transactions need treat updates came source multiple sources atomic units 
believe requiring keys reasonable assumption keys easier applications inter handle warehouse data 
furthermore user specified view contain sufficient key information warehouse simply add key attributes view definition 
developed view maintenance algorithms case key data discussed 
substantially complex ones reason including keys view 
previous considered restricted scenario warehouse data arrived single source :10.1.1.19.5246
simple case consistency problems developed algorithms solving 
realistic scenario significantly complex maintain consistent views 
instance eca eca key algorithms provide consistency example lead incorrect execution shown :10.1.1.19.5246
particular complexities covered earlier follows 
substantially complex ones reason including keys view 
previous considered restricted scenario warehouse data arrived single source :10.1.1.19.5246
simple case consistency problems developed algorithms solving 
realistic scenario significantly complex maintain consistent views 
instance eca eca key algorithms provide consistency example lead incorrect execution shown :10.1.1.19.5246
particular complexities covered earlier follows 
ffl update source may need integrated data sources 
gathering data corresponding view update atomic operation 
matter fast warehouse generates appropriate query sends sources receiving answer atomic parts come different autonomous sources 
variety concurrency control schemes suggested years environments 
provide weaker notions consistency exploit semantics applications 
algorithms exploit semantics materialized view maintenance obtain consistency traditional distributed concurrency control 
furthermore offer variety consistency levels useful context warehousing 
incremental view maintenance algorithms developed centralized database systems overview materialized views maintenance :10.1.1.40.2254:10.1.1.40.2254
solutions assume single system controls base relations understands views intelligently monitor activities compute information needed updating views 
showed example centralized algorithm applied warehouse warehouse user may see inconsistent views source data 
inconsistent views arise regardless centralized algorithm computes changes old base relations new base relations 
crux warehouse problem exact state base relations old new incremental changes computed sources unknown algorithms filter add modifications dynamically 
assume warehouse needs query sources data consistency problems address 
warehouse processes updates transactions batch mode 
conventional algorithms way ensure entire transaction reflected view time batch representing entire day hour week minute updates propagated view simultaneously 
view maintenance algorithms address problems 
mentioned section showed provide consistency restricted single source environment :10.1.1.19.5246
study general case multiple sources transactions may span sources 
warehouse transaction environment complexity designing consistent warehouse algorithms closely related scope transactions sources 
larger scope transaction complex algorithm 
section define common transaction scenarios increasing order complexity spell assumptions warehouse environment 
section discuss implications different schemes 
event ordering source action plus resulting message sent warehouse considered event 
example evaluating query source sending answer back warehouse considered event 
assume events atomic ordered sequence corresponding actions 
discuss assumption hold :10.1.1.41.3787
assume messages sent source warehouse delivered order sent 
enforced numbering messages 
place restrictions order messages sent different sources warehouse delivered 
discussion practice update transaction scenario seen warehouse depends primarily capabilities underlying sources 
serial schedule result refer source state vector results execution 
levels consistency assume view warehouse initially synchronized source data ss ws 
define levels consistency warehouse views 
level subsumes prior levels 
definitions generalization ones multi source warehouse environment :10.1.1.19.5246

convergence finite executions ws ss 
update activity ceased view consistent source data 

completeness addition strong consistency ss defined exists ws ws ss complete order preserving mapping states view states sources 
hull zhou definition consistency replicated data similar strong consistency require global timestamps sources 
strong consistency restrictive theirs require fixed order non conflicting actions 
definition compatible standard serializability theory 
fact consistency definition rephrased terms serializability theory treating warehouse view evaluation read transaction sources :10.1.1.41.3787
completeness nice property states view tracks base data exactly believe may strong requirement unnecessary practical warehousing scenarios 
cases convergence may sufficient knowing eventually warehouse valid state passes intermediate states invalid 
cases strong consistency desirable knowing warehouse state valid respect source state 
section show algorithm may achieve different levels consistency depending update transaction scenario applied 
simplicity consider insertions deletions algorithms 
conceptually modifications tuples updates sent warehouse treated warehouse simply deletion old tuple followed insertion new tuple 
consistency performance delete insert handled time 
algorithms easily extended type processing 
discussion treat modification insert delete may :10.1.1.40.2254:10.1.1.40.2254
strobe strobe algorithm processes updates arrive sending queries sources necessary 
updates performed immediately materialized view mv generate list actions performed view 
update mv sure applying actions single transaction warehouse bring view consistent state 
occurs outstanding queries received updates processed 
warehouse initially set empty receipt update ffi deletion uqs add pending add key delete mv ffi insertion hu set pending source evaluate pending apply key delete add insert mv uqs apply mv single transaction adding duplicate tuples mv reset algorithm example applies strobe algorithm warehouse scenario example 
specifically shows deletion needs applied answer previous query previous query answer arrives warehouse deletion 
example strobe avoids deletion anomaly example view defined relations residing sources respectively 
initially relations materialized view mv 
consider source updates insert delete apply strobe algorithm :10.1.1.56.375:10.1.1.56.375

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

example strobe avoids deletion anomaly example view defined relations residing sources respectively 
initially relations materialized view mv 
consider source updates insert delete apply strobe algorithm :10.1.1.56.375:10.1.1.56.375

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source adds pending adds key delete mv resulting delete mv :10.1.1.56.375
wh receives source pending empty wh applies key delete resulting answer 
initially relations materialized view mv 
consider source updates insert delete apply strobe algorithm :10.1.1.56.375:10.1.1.56.375

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source adds pending adds key delete mv resulting delete mv :10.1.1.56.375
wh receives source pending empty wh applies key delete resulting answer 
added pending queries wh updates mv applying delete mv resulting mv 

wh receives insert source generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source adds pending adds key delete mv resulting delete mv :10.1.1.56.375
wh receives source pending empty wh applies key delete resulting answer 
added pending queries wh updates mv applying delete mv resulting mv 
final view correct strongly consistent source relations 
example demonstrates strobe avoids anomaly caused eca key conventional view maintenance algorithms incorrect remembering delete query strobe able correctly apply query result updating view mv deletion received sent source empty extra action necessary 
added pending queries wh updates mv applying delete mv resulting mv 
final view correct strongly consistent source relations 
example demonstrates strobe avoids anomaly caused eca key conventional view maintenance algorithms incorrect remembering delete query strobe able correctly apply query result updating view mv deletion received sent source empty extra action necessary 
strobe algorithm provides strong consistency single update transaction environments 
correctness proof :10.1.1.41.3787
intuition time mv modified updates view contents obtained evaluating view expression current source states 
source states reflected view view reflects consistent set source states 
transaction strobe transaction strobe strobe algorithm adapts strobe algorithm provide strong consistency source local transactions 
strobe collects updates performed transaction processes updates single unit 
strobe algo algorithm transaction strobe algorithm warehouse initially receipt ul transaction ffi ul insertion deletion key key remove ul 
ffi deletion ul uqs add pending 
add key delete mv ffi il hu set pending ffi source evaluate ffi pending apply key delete ffi add insert mv uqs apply mv adding duplicate tuples mv reset algorithm rithm understand transactions may provide view corresponds middle transaction source state 
strobe eventually provide correct view transaction commits convergent 
example strobe provides stronger consistency strobe consider simple view source defined assume attribute key relation originally relation initially mv :10.1.1.56.375
consider source transaction insert strobe algorithm applied scenario warehouse adds deletion pending updates applied mv mv updated mv consistent warehouse processes insertion updates mv correct view mv :10.1.1.56.375
strobe algorithm hand updates mv updates transaction processed 
mv updated directly correct view mv 
strobe algorithm inherently strongly consistent respect source states defined source local transaction 
ffi deletion ul uqs add pending 
add key delete mv ffi il hu set pending ffi source evaluate ffi pending apply key delete ffi add insert mv uqs apply mv adding duplicate tuples mv reset algorithm rithm understand transactions may provide view corresponds middle transaction source state 
strobe eventually provide correct view transaction commits convergent 
example strobe provides stronger consistency strobe consider simple view source defined assume attribute key relation originally relation initially mv :10.1.1.56.375
consider source transaction insert strobe algorithm applied scenario warehouse adds deletion pending updates applied mv mv updated mv consistent warehouse processes insertion updates mv correct view mv :10.1.1.56.375
strobe algorithm hand updates mv updates transaction processed 
mv updated directly correct view mv 
strobe algorithm inherently strongly consistent respect source states defined source local transaction 
strobe pro note incidentally modifications treated delete insert pair strobe process pair single transaction easily avoiding inconsistencies 
case strobe guarantees strong consistency define consistent source states corresponding batching points sources 
common practice today send updates sources periodically batches believe probably useful algorithm 
single update transactions strobe reduces strobe algorithm 
global strobe strobe algorithm strongly consistent source local transactions weakly consistent global transactions 
example illustrates develop new algorithm global strobe strobe guarantees strong consistency global transactions :10.1.1.41.3787
strobe updates mv actions conditions met 
strobe requires condition 
tt set transaction identifiers warehouse received updated mv 
uqs 
reason changes subtract updates seen compensate deletes inserts 
may tuples key added compensation delete deleted compensate inserts 
algorithm strobe source behavior remains strobe algorithm describe actions warehouse 
strobe complete mv updated update resulting warehouse state corresponds source state update 
prove correctness strobe :10.1.1.41.3787
algorithm complete strobe warehouse initially delta 
updates arrive placed holding queue 
process update order arrival ffi deletion apply key delete mv 
ffi insertion hu source evaluate repeat uqs ffi add delta adding duplicate tuples 
course maximum number queries occurs extreme conditions continuous stream updates 
apply strobe algorithm warehouse scenario example show strobe processes scenario differently strobe algorithm shown example 
example complete strobe examples view defined relations residing sources respectively 
initially relations materialized view mv 
consider source updates insert delete apply strobe algorithm :10.1.1.56.375:10.1.1.56.375
possible orderings events warehouse 
consider example discuss 

delta 
possible orderings events warehouse 
consider example discuss 

delta 
wh receives source insert :10.1.1.56.375
generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source saves update queue :10.1.1.56.375
consider example discuss 

delta 
wh receives source insert :10.1.1.56.375
generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source saves update queue :10.1.1.56.375


delta 
wh receives source insert :10.1.1.56.375
generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source saves update queue :10.1.1.56.375

wh receives source final answer received deletion wh generates query sends source adds delta delta :10.1.1.56.375:10.1.1.56.375
wh receives source insert :10.1.1.56.375
generates query evaluate wh sends query source :10.1.1.56.375
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source saves update queue :10.1.1.56.375

wh receives source final answer received deletion wh generates query sends source adds delta delta :10.1.1.56.375:10.1.1.56.375

wh receives tries add delta 
wh receives source query sent source evaluation :10.1.1.56.375

wh receives delete source saves update queue :10.1.1.56.375

wh receives source final answer received deletion wh generates query sends source adds delta delta :10.1.1.56.375:10.1.1.56.375

wh receives tries add delta 
duplicate tuple delta remains 

example strobe applied different timing updates view definition initial base relations source updates example 
consider different set events wh 

delta 
wh receives source insert :10.1.1.56.375
generates query evaluate wh sends query source :10.1.1.56.375
wh receives delete source saves update queue :10.1.1.56.375

wh receives source implies 
consider different set events wh 

delta 
wh receives source insert :10.1.1.56.375
generates query evaluate wh sends query source :10.1.1.56.375
wh receives delete source saves update queue :10.1.1.56.375

wh receives source implies 
received wh generates compensating query sends source adds delta delta empty :10.1.1.56.375:10.1.1.56.375

delta 
wh receives source insert :10.1.1.56.375
generates query evaluate wh sends query source :10.1.1.56.375
wh receives delete source saves update queue :10.1.1.56.375

wh receives source implies 
received wh generates compensating query sends source adds delta delta empty :10.1.1.56.375:10.1.1.56.375

generates query evaluate wh sends query source :10.1.1.56.375
wh receives delete source saves update queue :10.1.1.56.375

wh receives source implies 
received wh generates compensating query sends source adds delta delta empty :10.1.1.56.375:10.1.1.56.375

wh receives adds delta 
delta 

process answers queries uqs strobe apply action list view mv strobe algorithm complete periodic similar way 
call algorithm describe 
identified fundamental transaction processing scenarios data warehousing developed strobe family algorithms consistently maintain warehouse data 
summarizes algorithms discussed correctness 
conventional refers conventional centralized view maintenance algorithm eca eca key algorithms :10.1.1.19.5246
conventional single update local trans 
global trans single source consistent eca key conventional eca eca key transaction scenarios centralized strobe inconsistent convergent strobe strobe strobe strobe strobe strobe complete correctness multiple sources consistency spectrum algorithm shown particular scenario level consistency achieves consistency scenario furthermore algorithm achieves lower levels consistency achieves consistency scenarios restrictive scenarios left 
example strobe strongly consistent single update transactions multiple sources 
weakly consistent convergent definition scenario 
improving performance replicated databases relaxed coherency 
vldb pages sept 
jan 
personal correspondence ibm data warehouse customer needs 
gupta mumick :10.1.1.40.2254
maintenance materialized views problems techniques applications 
ieee data engineering bulletin june 
gupta mumick subrahmanian 
maintaining views incrementally 
sybase command manual release edition 
wiener gupta labio zhuge garcia molina widom 
system prototype warehouse view maintenance 
workshop materialized views pages june 
zhuge garcia molina hammer widom :10.1.1.19.5246
view maintenance warehousing environment 
sigmod pages may 
zhuge garcia molina wiener :10.1.1.41.3787
strobe algorithms multi source warehouse consistency 
workshop materialized views pages june 
zhuge garcia molina hammer widom :10.1.1.19.5246
view maintenance warehousing environment 
sigmod pages may 
zhuge garcia molina wiener :10.1.1.41.3787
strobe algorithms multi source warehouse consistency 
technical report stanford university sept 
available anonymous ftp host db stanford edu pub zhuge strobe full ps 
