delta relations optimize condition evaluation active databases baralis jennifer widom politecnico di torino torino italy baralis stanford university stanford usa widom cs stanford edu 
give method improving efficiency condition evaluation rule processing active database systems 
method derives rule condition new conditions place original condition previous value true false original condition known 
derived conditions generally efficient evaluate original condition incremental replace entire database relations delta relations typically smaller 
delta relations accessible rule conditions current active database systems making optimization broadly applicable 
describe attribute grammar approach implement condition rewriting technique 
adapting method active oodb planned see section 
rule processing cycle rule processor may aware previous value rule condition true false rule evaluated earlier rule processing rule enforcing integrity constraint consistent transaction 

rule language permits delta relations contain data modified relation time rule evaluated transaction 
assumptions may appear strong note prominent relational active database systems satisfy assumptions including ariel starburst :10.1.1.107.4220:10.1.1.46.2504
furthermore active database systems exactly satisfy paradigm postgres relatively straightforward modifications method applicable 
rule condition method statically derives optimized conditions pt previously true condition pf previously false condition 
rule selected run time known condition previously true pt evaluated similarly known condition previously false pf evaluated pt pf delta relations entire relations pt pf efficient evaluate generality ease proving correctness method rule condition language relational algebra 
adaptation method condition language sql quel straightforward 
rule condition method statically derives optimized conditions pt previously true condition pf previously false condition 
rule selected run time known condition previously true pt evaluated similarly known condition previously false pf evaluated pt pf delta relations entire relations pt pf efficient evaluate generality ease proving correctness method rule condition language relational algebra 
adaptation method condition language sql quel straightforward 
specify method attribute grammar allows direct implementation method compiler generator yacc 
previous related clear connection studied problem incremental evaluation especially addressed :10.1.1.56.9912
proposes incremental optimization technique rule conditions similar goals 
rule conditions restricted select project join spj expressions relations required user accessible tuple identifiers 
contrast rule conditions general spj expressions see section user level tuple identifiers required 
proposes set transformations compute incremental changes arbitrary relational expressions :10.1.1.56.9912
previous related clear connection studied problem incremental evaluation especially addressed :10.1.1.56.9912
proposes incremental optimization technique rule conditions similar goals 
rule conditions restricted select project join spj expressions relations required user accessible tuple identifiers 
contrast rule conditions general spj expressions see section user level tuple identifiers required 
proposes set transformations compute incremental changes arbitrary relational expressions :10.1.1.56.9912
methods apply small variation problem consider application direct difficult understand :10.1.1.56.9912
furthermore method determines additions deletions expression fact net effect changes null :10.1.1.56.9912
produces unnecessary relational expression assume delta relations accessed efficiently systems delta relations stored indexed main memory 
assume delta relations typically smaller corresponding entire relations 
proposes incremental optimization technique rule conditions similar goals 
rule conditions restricted select project join spj expressions relations required user accessible tuple identifiers 
contrast rule conditions general spj expressions see section user level tuple identifiers required 
proposes set transformations compute incremental changes arbitrary relational expressions :10.1.1.56.9912
methods apply small variation problem consider application direct difficult understand :10.1.1.56.9912
furthermore method determines additions deletions expression fact net effect changes null :10.1.1.56.9912
produces unnecessary relational expression assume delta relations accessed efficiently systems delta relations stored indexed main memory 
assume delta relations typically smaller corresponding entire relations 
method correctly detects change 
rule conditions restricted select project join spj expressions relations required user accessible tuple identifiers 
contrast rule conditions general spj expressions see section user level tuple identifiers required 
proposes set transformations compute incremental changes arbitrary relational expressions :10.1.1.56.9912
methods apply small variation problem consider application direct difficult understand :10.1.1.56.9912
furthermore method determines additions deletions expression fact net effect changes null :10.1.1.56.9912
produces unnecessary relational expression assume delta relations accessed efficiently systems delta relations stored indexed main memory 
assume delta relations typically smaller corresponding entire relations 
method correctly detects change 
presents partial differentiation technique derive incremental rule conditions 
produces unnecessary relational expression assume delta relations accessed efficiently systems delta relations stored indexed main memory 
assume delta relations typically smaller corresponding entire relations 
method correctly detects change 
presents partial differentiation technique derive incremental rule conditions 
approach may produce superset actual changes extra filtering step introduced eliminate extra changes :10.1.1.56.9912
update modifications modeled deletions followed insertions :10.1.1.56.9912
handle update modifications directly cases produces efficient incremental expressions particularly certain attributes updated see fl transformation section :10.1.1.56.9912
note attribute grammar specification unique approach leads directly implementation 
classification techniques optimize performance transaction execution transactions include active rules 
assume delta relations typically smaller corresponding entire relations 
method correctly detects change 
presents partial differentiation technique derive incremental rule conditions 
approach may produce superset actual changes extra filtering step introduced eliminate extra changes :10.1.1.56.9912
update modifications modeled deletions followed insertions :10.1.1.56.9912
handle update modifications directly cases produces efficient incremental expressions particularly certain attributes updated see fl transformation section :10.1.1.56.9912
note attribute grammar specification unique approach leads directly implementation 
classification techniques optimize performance transaction execution transactions include active rules 
suggested techniques detect advance rule effect database rule condition guaranteed false 
method correctly detects change 
presents partial differentiation technique derive incremental rule conditions 
approach may produce superset actual changes extra filtering step introduced eliminate extra changes :10.1.1.56.9912
update modifications modeled deletions followed insertions :10.1.1.56.9912
handle update modifications directly cases produces efficient incremental expressions particularly certain attributes updated see fl transformation section :10.1.1.56.9912
note attribute grammar specification unique approach leads directly implementation 
classification techniques optimize performance transaction execution transactions include active rules 
suggested techniques detect advance rule effect database rule condition guaranteed false 
optimization effective applicable applies special cases requires compile time analysis transaction code method 
note attribute grammar specification unique approach leads directly implementation 
classification techniques optimize performance transaction execution transactions include active rules 
suggested techniques detect advance rule effect database rule condition guaranteed false 
optimization effective applicable applies special cases requires compile time analysis transaction code method 
active database systems methods rete treat networks efficient condition evaluation :10.1.1.46.2504
unfortunately methods apply rule languages relation implicitly delta relations rule conditions restricted spj expressions 
consider general conditions determine scenarios replaced delta relations 
commercial active rule languages appear model techniques applicable practical settings 
note suggest techniques similar restricted case described :10.1.1.143.7196
active database systems methods rete treat networks efficient condition evaluation :10.1.1.46.2504
unfortunately methods apply rule languages relation implicitly delta relations rule conditions restricted spj expressions 
consider general conditions determine scenarios replaced delta relations 
commercial active rule languages appear model techniques applicable practical settings 
note suggest techniques similar restricted case described :10.1.1.143.7196
elaborate suggestions general context :10.1.1.143.7196
outline section give rigorous description active database rule processing formalize notion delta relations 
section define condition specification language provide examples 
section core technical section contains method rule condition rewriting examples method 
unfortunately methods apply rule languages relation implicitly delta relations rule conditions restricted spj expressions 
consider general conditions determine scenarios replaced delta relations 
commercial active rule languages appear model techniques applicable practical settings 
note suggest techniques similar restricted case described :10.1.1.143.7196
elaborate suggestions general context :10.1.1.143.7196
outline section give rigorous description active database rule processing formalize notion delta relations 
section define condition specification language provide examples 
section core technical section contains method rule condition rewriting examples method 
section specifies implementation method attribute grammar 
pseudo code describes general behavior initial db state user application modifications new db state repeat rules triggered select triggered rule evaluate condition delta relations true execute action delta relations new db state fig 

active database system behavior system 
note issues granularity rule processing rule processing invoked relative triggering events method selecting multiple triggered rules affect method 
furthermore method applies rule languages triggering events implicit explicit :10.1.1.107.4220:10.1.1.46.2504
rule condition evaluated action executed occurs respect database transition changes occurred previous database state 
consider semantics rule uses transition rule selected original state state rule selected rule processing 
semantics taken active database systems systems slightly different semantics may require corresponding modifications method 
delta relations encapsulate changes occurred rule transition may referenced rule condition action 
need restriction explained section 
active database rule languages permit explicit delta relations rule conditions 
technically include rexp productions inserted deleted grammar 
need attempt optimization clarity simplicity omit grammar adding trivial 
examples give examples conditions expressed language adapted case study involving electrical power distribution network restriction reduce expressive power condition language respect relational algebra see :10.1.1.143.7196
examples relations wire wire id voltage tube tube id protected abbreviate respectively 
example informally tube contains high voltage 
wire 
condition language oe 
explains simple relational expressions simple relational expressions exclude difference aggregate operators non monotonic 
observe points convenience applied rexp gamma expression rexp rexp equivalent rexp theta rexp selection condition equating corresponding attributes appropriate projection 
computation aggregate function relational expression requires entire relational expression result just incremental portion aggregate expressions optimized general case 
conditions containing aggregate function expressions operands may optimized operands 
note treatment projection union substantially simpler general incremental query evaluation :10.1.1.56.9912
cartesian products refers old relational expression sr sr abbreviation sr relation names replaced denoting old value 
recall old relations directly accessible derived delta relations described section 
applied projections attribute list contains key expression sr case formula simplified sr 
expect sizes delta delta gamma pf pt small smaller reduce sizes delta delta gamma ignoring updates attributes influence outcome condition 
example tube contains high voltage 
wire 
condition language oe 
oe voltage theta oe protected false optimized conditions pf oe join oe incr theta oe oe theta oe incr pt join voltage protected false incr delta incr delta 
note example optimized method :10.1.1.143.7196
example tube contains wires 
condition language gamma schema oe 
theta example difference operator transformation 
recall refer pre transition old states respectively 
theta example difference operator transformation 
recall refer pre transition old states respectively 
note delta relations restricted updates specific attributes difference operator applying simplified formula applied projections projected attributes form key 
optimized conditions pf delta gamma oe theta oe delta gamma theta theta delta gamma pt schema 
example condition optimized method :10.1.1.143.7196
numerous additional examples 
attribute grammar implementation address issue implementing approach 
suppose new rule condition added database existing rule condition optimized 
steps followed 
