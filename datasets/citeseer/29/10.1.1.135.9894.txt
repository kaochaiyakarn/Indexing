algorithmica algorithmica springer verlag new york efficient bulk operations dynamic trees arge hinrichs vitter 
years interest spatial databases 
major issue manipulate efficiently massive amounts spatial data stored disk multidimensional spatial indexes data structures 
construction spatial indexes bulk loading studied intensively database community 
continuous arrival massive amounts new data important update existing indexes bulk updating efficiently 
simple efficient technique performing bulk update query operations multidimensional indexes 
years interest spatial databases commercial research database communities 
spatial databases systems designed store manage manipulate spatial data points polylines polygons surfaces 
geographic information systems gis popular incarnation 
spatial database applications involve massive data sets example eos satellite data 
need efficient handling massive spatial data sets major issue large number disk multidimensional index structures data structures proposed database literature see surveys :10.1.1.22.3293:10.1.1.104.894:10.1.1.147.3224
typically multidimensional index structures support insertions deletions updates number proximity queries window nearest neighbor queries 
research database community focused supporting bulk operations large number operations performed lars arge supported part army research office muri daah national science foundation ess eia career ccr ri eia 
jeffrey scott vitter supported part army research office muri daah national science foundation ccr eia ccr 
center geometric computing department computer science duke university durham nc usa 
communicated battiti 
online publication february 
efficient bulk operations dynamic trees index time 
increased interest bulk operations result increasing size manipulated spatial data sets fact performing large number single operations time simply inefficient practical 
common bulk operation create index data set scratch called bulk loading :10.1.1.104.894
simple lazy buffering technique performing bulk operations multidimensional indexes show efficient theory practice 
results terms tree variants emerged especially practically efficient indexing methods spatial data :10.1.1.85.3008:10.1.1.178.5499:10.1.1.131.7887:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
technique applies trees large class hierarchically structured multidimensional indexes called class grow post trees 

efficient bulk operations dynamic trees index time 
increased interest bulk operations result increasing size manipulated spatial data sets fact performing large number single operations time simply inefficient practical 
common bulk operation create index data set scratch called bulk loading :10.1.1.104.894
simple lazy buffering technique performing bulk operations multidimensional indexes show efficient theory practice 
results terms tree variants emerged especially practically efficient indexing methods spatial data :10.1.1.85.3008:10.1.1.178.5499:10.1.1.131.7887:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
technique applies trees large class hierarchically structured multidimensional indexes called class grow post trees 

model computation previous results efficient algorithms 
objects stored spatial database complex approximated simpler objects spatial indexes built approximations 
theoretical considerations standard level model define parameters number rectangles number rectangles fitting internal memory number rectangles disk block 
input output operation simply consists reading block contiguous elements disk internal memory writing block internal memory disk 
computations performed rectangles internal memory 
measure efficiency algorithm number os performs amount disk space uses units disk blocks internal memory computation time 
sophisticated measures disk performance involve analysis seek rotational latencies caching issues simpler standard model proven quite useful identifying order effects :10.1.1.117.39
efficiency key issue database design central area investigation algorithms community 
aggarwal vitter developed matching upper lower bounds variety fundamental simplicity concentrate measures 
shown asymptotic internal memory computation time new tree algorithms traditional algorithms 
arge hinrichs vitter problems sorting permuting 
arge hinrichs vitter problems sorting permuting 
example showed sorting items external memory requires log os 
subsequently efficient algorithms developed problem domains including computational geometry graph theory string processing 
practical merits developed algorithms explored number authors 
surveys :10.1.1.22.3293:10.1.1.147.3224
uses transparent parallel environment tpie set functions classes allow simple efficient portable implementation algorithms 

previous results bulk operations trees 
tree originally proposed guttman height balanced multiway tree similar tree :10.1.1.178.5499:10.1.1.131.7887:10.1.1.96.6637
surveys :10.1.1.22.3293:10.1.1.147.3224
uses transparent parallel environment tpie set functions classes allow simple efficient portable implementation algorithms 

previous results bulk operations trees 
tree originally proposed guttman height balanced multiway tree similar tree :10.1.1.178.5499:10.1.1.131.7887:10.1.1.96.6637
leaf nodes contain data rectangles internal nodes contain entries form ptr ptr pointer child node minimal bounding rectangle covering rectangles subtree rooted child 
example tree depicted 
tree occupies disk blocks height log insertions performed log os 
unique tree set data rectangles minimal bounding rectangles stored tree node overlap 
tree occupies disk blocks height log insertions performed log os 
unique tree set data rectangles minimal bounding rectangles stored tree node overlap 
order query tree find rectangles containing point internal nodes minimal bounding rectangle contains visited 
intuitively want minimal bounding rectangles stored node overlap little possible 
insertion new rectangle increase overlap heuristics choosing leaf insert new rectangle splitting nodes rebalancing proposed :10.1.1.85.3008:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
bulk loading tree rectangles naive method repeated insertion takes log os recognized slow 
bulk loading algorithms log os proposed :10.1.1.85.3008:10.1.1.178.5499:10.1.1.104.894
algorithms factor faster repeated insertion algorithm 
proposed algorithms basic way input rectangles sorted global dimensional criterion coordinate hilbert value center rectangle order obtained rectangular tiling space placed leaves order :10.1.1.178.5499:10.1.1.104.894
order query tree find rectangles containing point internal nodes minimal bounding rectangle contains visited 
intuitively want minimal bounding rectangles stored node overlap little possible 
insertion new rectangle increase overlap heuristics choosing leaf insert new rectangle splitting nodes rebalancing proposed :10.1.1.85.3008:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
bulk loading tree rectangles naive method repeated insertion takes log os recognized slow 
bulk loading algorithms log os proposed :10.1.1.85.3008:10.1.1.178.5499:10.1.1.104.894
algorithms factor faster repeated insertion algorithm 
proposed algorithms basic way input rectangles sorted global dimensional criterion coordinate hilbert value center rectangle order obtained rectangular tiling space placed leaves order :10.1.1.178.5499:10.1.1.104.894
rest index built recursively fig 

insertion new rectangle increase overlap heuristics choosing leaf insert new rectangle splitting nodes rebalancing proposed :10.1.1.85.3008:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
bulk loading tree rectangles naive method repeated insertion takes log os recognized slow 
bulk loading algorithms log os proposed :10.1.1.85.3008:10.1.1.178.5499:10.1.1.104.894
algorithms factor faster repeated insertion algorithm 
proposed algorithms basic way input rectangles sorted global dimensional criterion coordinate hilbert value center rectangle order obtained rectangular tiling space placed leaves order :10.1.1.178.5499:10.1.1.104.894
rest index built recursively fig 

tree constructed rectangles 
efficient bulk operations dynamic trees bottom level level manner 
rest index built recursively fig 

tree constructed rectangles 
efficient bulk operations dynamic trees bottom level level manner 
algorithm developed builds index recursively bottom utilizes lazy buffering strategy :10.1.1.85.3008
method proposed works recursively top way repeatedly trying find partition data 
algorithm designed point data rectangle data transforming rectangles points higher dimensional space rectangle data 
major motivation designing bulk loading algorithms slowness repeated insertion algorithm important motivation possibility obtaining better space utilization query performance 
bulk loading algorithms mentioned capable obtaining space utilization meaning disk blocks empirical results show average utilization repeated insertion algorithm :10.1.1.129.3731
algorithm developed builds index recursively bottom utilizes lazy buffering strategy :10.1.1.85.3008
method proposed works recursively top way repeatedly trying find partition data 
algorithm designed point data rectangle data transforming rectangles points higher dimensional space rectangle data 
major motivation designing bulk loading algorithms slowness repeated insertion algorithm important motivation possibility obtaining better space utilization query performance 
bulk loading algorithms mentioned capable obtaining space utilization meaning disk blocks empirical results show average utilization repeated insertion algorithm :10.1.1.129.3731
empirical results indicate packing tree lead poor query performance especially data uniformly distributed :10.1.1.104.894
bulk loading algorithms typically produce trees better query performance repeated insertion algorithm 
algorithm best cases data distributions mildly skewed low dimensional data algorithm outperforms algorithm opposite case highly skewed low dimensional data :10.1.1.178.5499
algorithms perform poorly higher dimensional point data algorithm developed achieves best query performance 
method proposed works recursively top way repeatedly trying find partition data 
algorithm designed point data rectangle data transforming rectangles points higher dimensional space rectangle data 
major motivation designing bulk loading algorithms slowness repeated insertion algorithm important motivation possibility obtaining better space utilization query performance 
bulk loading algorithms mentioned capable obtaining space utilization meaning disk blocks empirical results show average utilization repeated insertion algorithm :10.1.1.129.3731
empirical results indicate packing tree lead poor query performance especially data uniformly distributed :10.1.1.104.894
bulk loading algorithms typically produce trees better query performance repeated insertion algorithm 
algorithm best cases data distributions mildly skewed low dimensional data algorithm outperforms algorithm opposite case highly skewed low dimensional data :10.1.1.178.5499
algorithms perform poorly higher dimensional point data algorithm developed achieves best query performance 
interestingly terms repeated insertion algorithm produces index similar query performance algorithm 
major motivation designing bulk loading algorithms slowness repeated insertion algorithm important motivation possibility obtaining better space utilization query performance 
bulk loading algorithms mentioned capable obtaining space utilization meaning disk blocks empirical results show average utilization repeated insertion algorithm :10.1.1.129.3731
empirical results indicate packing tree lead poor query performance especially data uniformly distributed :10.1.1.104.894
bulk loading algorithms typically produce trees better query performance repeated insertion algorithm 
algorithm best cases data distributions mildly skewed low dimensional data algorithm outperforms algorithm opposite case highly skewed low dimensional data :10.1.1.178.5499
algorithms perform poorly higher dimensional point data algorithm developed achieves best query performance 
interestingly terms repeated insertion algorithm produces index similar query performance algorithm 
terms total running time repeated insertion performs worse probably algorithm produces index blocks containing neighboring nodes tree stored close disk 
van den independently developed bulk loading method uses lazy buffer technique similar :10.1.1.85.3008
algorithm best cases data distributions mildly skewed low dimensional data algorithm outperforms algorithm opposite case highly skewed low dimensional data :10.1.1.178.5499
algorithms perform poorly higher dimensional point data algorithm developed achieves best query performance 
interestingly terms repeated insertion algorithm produces index similar query performance algorithm 
terms total running time repeated insertion performs worse probably algorithm produces index blocks containing neighboring nodes tree stored close disk 
van den independently developed bulk loading method uses lazy buffer technique similar :10.1.1.85.3008
describe algorithm detail section 
common see example algorithm produces tree index identical index obtained repeated insertion 
reality tree indexes quite different van den report empirical results performance construction multiversion trees order elements leaves unique buffer algorithm construct order repeated insertion algorithm :10.1.1.85.3008
equivalence hold tree construction quality tree index produced method studied 
terms total running time repeated insertion performs worse probably algorithm produces index blocks containing neighboring nodes tree stored close disk 
van den independently developed bulk loading method uses lazy buffer technique similar :10.1.1.85.3008
describe algorithm detail section 
common see example algorithm produces tree index identical index obtained repeated insertion 
reality tree indexes quite different van den report empirical results performance construction multiversion trees order elements leaves unique buffer algorithm construct order repeated insertion algorithm :10.1.1.85.3008
equivalence hold tree construction quality tree index produced method studied 
algorithms mentioned inherently static sense bulk load index static data set 
efficiently supports bulk updates 
perform batch updates run bulk loading algorithm combined datasets perform insertions simple approach building tree os form leaves grouping input rectangles time build tree bottom level level manner 
data sets standard benchmark data set spatial indexes tiger line data 
experiments designed efficient bulk operations dynamic trees test theoretical predictions compare performance algorithms previously known bulk update algorithms investigate general effects technique conjunction standard tree heuristics bulk load tree 
compared performance repeated insertion algorithm 
experiments show obtain huge speed construction time time query performance remains 
bulk loading technique yield index obtained repeated insertion contrary popular belief quality index remains :10.1.1.85.3008
discussed special purpose bulk loading algorithms produce significantly better indexes obtained repeated insertion especially terms space utilization 
able capitalize certain laziness algorithm simple modification achieve dramatically improved space utilization 
modification uses heuristic lines :10.1.1.178.5499:10.1.1.104.894
bulk loading experiments modified algorithm show obtain space utilization maintaining improving query performance 
experiments show obtain huge speed construction time time query performance remains 
bulk loading technique yield index obtained repeated insertion contrary popular belief quality index remains :10.1.1.85.3008
discussed special purpose bulk loading algorithms produce significantly better indexes obtained repeated insertion especially terms space utilization 
able capitalize certain laziness algorithm simple modification achieve dramatically improved space utilization 
modification uses heuristic lines :10.1.1.178.5499:10.1.1.104.894
bulk loading experiments modified algorithm show obtain space utilization maintaining improving query performance 
added benefit modification improves construction time 
order investigate practical efficiency technique performing general bulk operations performed experiments bulk insertion large set rectangles existing large tree 
compared performance algorithm previously best known bulk update algorithm 
section technique performing bulk operations trees analyze theoretically 
section review standard tree insertion query algorithms general idea buffer technique 
section discuss details tree index bulk loaded section bulk insertions queries performed existing index technique 
section discuss perform bulk deletions 
final remarks including discussion method compares previously proposed buffer technique section :10.1.1.85.3008
arge hinrichs vitter 
tree basics sketch technique 
presenting main idea buffering technique review algorithms inserting new rectangle tree querying tree rectangle 
queries handled similar algorithms 
internal node root children 
children contains rectangle covers rectangles child 
assume leaf internal node fits disk block 
tree height log occupies blocks 
guttman introduced tree researchers subsequently proposed different update heuristics designed minimize overlap rectangles stored node :10.1.1.85.3008:10.1.1.178.5499:10.1.1.131.7887:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
variants tree insertion algorithms heuristics conceptually way similar tree algorithms utilize basic functions route tree node rectangle inserted returns best heuristic subtree vs insert :10.1.1.85.3008:10.1.1.178.5499:10.1.1.131.7887:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
necessary function updates extends rectangle stored corresponds vs split node splits new nodes function updates entry parent correspond inserts new entry corresponding 
root new root children created 
queries handled way tree variants basic function search rectangle node returns set subtrees vs associated rectangles intersect algorithms inserting new rectangle tree querying tree rectangle 
children contains rectangle covers rectangles child 
assume leaf internal node fits disk block 
tree height log occupies blocks 
guttman introduced tree researchers subsequently proposed different update heuristics designed minimize overlap rectangles stored node :10.1.1.85.3008:10.1.1.178.5499:10.1.1.131.7887:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
variants tree insertion algorithms heuristics conceptually way similar tree algorithms utilize basic functions route tree node rectangle inserted returns best heuristic subtree vs insert :10.1.1.85.3008:10.1.1.178.5499:10.1.1.131.7887:10.1.1.131.7887:10.1.1.129.3731:10.1.1.45.9180:10.1.1.141.6518
necessary function updates extends rectangle stored corresponds vs split node splits new nodes function updates entry parent correspond inserts new entry corresponding 
root new root children created 
queries handled way tree variants basic function search rectangle node returns set subtrees vs associated rectangles intersect algorithms inserting new rectangle tree querying tree rectangle 
performing query subtrees may need visited 
queries handled way tree variants basic function search rectangle node returns set subtrees vs associated rectangles intersect algorithms inserting new rectangle tree querying tree rectangle 
performing query subtrees may need visited 
possible give better linear bound worst case complexity query 
insertion performed log os nodes single root leaf path visited routing rebalancing algorithm 
technique efficiently performing bulk operations trees variant general buffer tree technique introduced arge :10.1.1.33.324
modify general fig 

algorithms inserting querying tree rooted node efficient bulk operations dynamic trees fig 


algorithms inserting querying tree rooted node efficient bulk operations dynamic trees fig 

buffered tree normal tree buffers log th level 
technique novel way straightforward application technique result tree large fan :10.1.1.85.3008
main idea attach buffers tree nodes log th level tree 
precisely define leaves level assign buffers size blocks nodes level log 
see 
call node associated buffer buffer node 
having discussed bulk loading algorithm easy describe bulk inserts performed efficiently existing tree simply attach buffers tree insert rectangles lazily perform final emptying buffers 
arguments proofs theorem obtain 
efficient bulk operations dynamic trees theorem 
set rectangles bulk inserted existing tree containing rectangles log operations 
order answer large set queries existing tree situation arises performing called spatial join simply attach buffers tree perform queries lazy manner way perform insertions perform query insert query rectangle buffer root :10.1.1.43.2358
buffer emptied query needs recursively performed subtrees simply route copy query relevant buffers 
query rectangle reaches leaf relevant data rectangles reported 
theorem 
set queries performed existing tree containing rectangles log operations log number nodes tree normal tree query algorithm visit 
able extremely important line environments queries answered index updated 
buffers attached operations performed inserting block block buffer root 
buffer emptying basically performed discussed previous sections 
buffer emptying process nodes level log modified slightly 
modifications similar ones basic buffer tree refer interested reader details :10.1.1.33.324
mentioned exists variety approaches bulk loading multidimensional indexes 
algorithms optimized specific application area geographic information systems vlsi design multimedia databases data processed specific distributions dimensionality 
goal design general technique bulk update operations multidimensional indexes regard proposed technique competitor specialized bulk loading algorithms 
build algorithms way bulk loading multidimensional tree scratch choose best bulk loading algorithm heuristic problem hand build index technique re attach buffers order perform subsequent bulk operations efficiently 
goal design general technique bulk update operations multidimensional indexes regard proposed technique competitor specialized bulk loading algorithms 
build algorithms way bulk loading multidimensional tree scratch choose best bulk loading algorithm heuristic problem hand build index technique re attach buffers order perform subsequent bulk operations efficiently 
apart new technique known methods efficient bulk operations dynamic trees table 
comparison different bulk processing techniques 
bulk operation technique loading insertions deletions queries intermixed berchtold kamel faloutsos kamel van den roussopoulos directly rectangular data see section :10.1.1.85.3008:10.1.1.45.9180
method derived original algorithm involves bulk loading new data structure 
performing bulk operations bulk loading algorithms kamel method derived algorithm roussopoulos 
discussed amortized update cost method high 
algorithm hand amortized performance include practical comparison bulk insertion performance algorithm proposed technique section 
performing bulk operations bulk loading algorithms kamel method derived algorithm roussopoulos 
discussed amortized update cost method high 
algorithm hand amortized performance include practical comparison bulk insertion performance algorithm proposed technique section 
table contains comparison capabilities different bulk techniques 
mentioned buffering method similar approach previously van den :10.1.1.85.3008
approach supports kinds bulk operations approach supports bulk loading :10.1.1.85.3008
bulk load tree algorithm constructs tree fanout attaching buffers nodes performing insertions way similar algorithm :10.1.1.85.3008
leaves tree leaves tree fanout eventually constructed 
rest tree produced bottom manner successively applying buffer algorithm set rectangles obtained replacing rectangles node just constructed level minimal bounding rectangle 
discussed amortized update cost method high 
algorithm hand amortized performance include practical comparison bulk insertion performance algorithm proposed technique section 
table contains comparison capabilities different bulk techniques 
mentioned buffering method similar approach previously van den :10.1.1.85.3008
approach supports kinds bulk operations approach supports bulk loading :10.1.1.85.3008
bulk load tree algorithm constructs tree fanout attaching buffers nodes performing insertions way similar algorithm :10.1.1.85.3008
leaves tree leaves tree fanout eventually constructed 
rest tree produced bottom manner successively applying buffer algorithm set rectangles obtained replacing rectangles node just constructed level minimal bounding rectangle 
number os performing bulk loading dominated construction leaf level asymptotically algorithm develop 
algorithm hand amortized performance include practical comparison bulk insertion performance algorithm proposed technique section 
table contains comparison capabilities different bulk techniques 
mentioned buffering method similar approach previously van den :10.1.1.85.3008
approach supports kinds bulk operations approach supports bulk loading :10.1.1.85.3008
bulk load tree algorithm constructs tree fanout attaching buffers nodes performing insertions way similar algorithm :10.1.1.85.3008
leaves tree leaves tree fanout eventually constructed 
rest tree produced bottom manner successively applying buffer algorithm set rectangles obtained replacing rectangles node just constructed level minimal bounding rectangle 
number os performing bulk loading dominated construction leaf level asymptotically algorithm develop 
practice additional passes data involve data geometrically decreasing size represent significant percentage total time 
leaves tree leaves tree fanout eventually constructed 
rest tree produced bottom manner successively applying buffer algorithm set rectangles obtained replacing rectangles node just constructed level minimal bounding rectangle 
number os performing bulk loading dominated construction leaf level asymptotically algorithm develop 
practice additional passes data involve data geometrically decreasing size represent significant percentage total time 
bulk loading method corresponds leaf level phase algorithm efficient practice :10.1.1.85.3008
furthermore bottom construction inherently line data needs known start algorithm algorithm unsuitable bulk operations bulk loading 
advantage bulk loading technique line illustrated considering pipelining consider relations indexed tree 
order process multiway join perform way joins join resulting data sets 
join operator requires input relations indexed indexes constructed intermediate results technique construction started joins processed line algorithms need arge hinrichs vitter wait joins computed 
furthermore bottom construction inherently line data needs known start algorithm algorithm unsuitable bulk operations bulk loading 
advantage bulk loading technique line illustrated considering pipelining consider relations indexed tree 
order process multiway join perform way joins join resulting data sets 
join operator requires input relations indexed indexes constructed intermediate results technique construction started joins processed line algorithms need arge hinrichs vitter wait joins computed 
summary method proposed method utilize lazy buffering approach technique efficient line allows general bulk operations :10.1.1.85.3008

empirical results 
section discuss implementation algorithms section give empirical evidence efficiency compared existing methods 
section describe implementation experimental setup 

empirical results 
section discuss implementation algorithms section give empirical evidence efficiency compared existing methods 
section describe implementation experimental setup 
section dedicated empirical analysis effects buffering section discuss improve algorithms heuristics similar ones :10.1.1.178.5499:10.1.1.104.894
section compare cost query performance bulk insertion algorithm proposed 

implementation 
order evaluate practical significance buffer algorithm implemented original repeated insertion algorithm tree construction bulk insertion algorithm developed proposed buffered bulk insertion algorithm :10.1.1.178.5499:10.1.1.131.7887
section dedicated empirical analysis effects buffering section discuss improve algorithms heuristics similar ones :10.1.1.178.5499:10.1.1.104.894
section compare cost query performance bulk insertion algorithm proposed 

implementation 
order evaluate practical significance buffer algorithm implemented original repeated insertion algorithm tree construction bulk insertion algorithm developed proposed buffered bulk insertion algorithm :10.1.1.178.5499:10.1.1.131.7887
implemented standard query algorithm :10.1.1.178.5499:10.1.1.131.7887
implementations done tpie 
tpie supports stream oriented block oriented style accessing secondary storage 
tpie stream represents homogeneous list objects arbitrary type system provides efficient algorithms scanning merging distributing sorting streams 
section compare cost query performance bulk insertion algorithm proposed 

implementation 
order evaluate practical significance buffer algorithm implemented original repeated insertion algorithm tree construction bulk insertion algorithm developed proposed buffered bulk insertion algorithm :10.1.1.178.5499:10.1.1.131.7887
implemented standard query algorithm :10.1.1.178.5499:10.1.1.131.7887
implementations done tpie 
tpie supports stream oriented block oriented style accessing secondary storage 
tpie stream represents homogeneous list objects arbitrary type system provides efficient algorithms scanning merging distributing sorting streams 
block oriented part tpie supports random accesses specific blocks 
experiments method memory mapping refer number os performed algorithm refer tpie count operations performed reads writes involve mapping block 
actual physical number os performed count operating system choose keep block internal memory 
conceptual benefit algorithms point view similar normal algorithms operations performed 
algorithms admit nice modular design access underlying tree standard routing restructuring procedures 
block oriented part tpie implement standard tree served base realizing different update approaches :10.1.1.178.5499:10.1.1.131.7887
stream oriented part tpie stored buffers index separate stream 
consequence modular design able attach buffers existing index regardless created 
bulk operations performed buffers emptied decide buffers affecting updated index 
buffer algorithm regarded generic black box takes arbitrary index returns updated version accessing public interface index 
buffer algorithm regarded generic black box takes arbitrary index returns updated version accessing public interface index 
experiments performed machine block size kbytes sun sparcstation running solaris allowed tree fanout 
efficient bulk operations dynamic trees table 
characteristics test data 
state category size mb objects category queries results rhode island ri roads connecticut ct roads new jersey nj roads new york ny roads recommendations previous empirical studies maximal fanout :10.1.1.178.5499:10.1.1.131.7887:10.1.1.129.3731
similarly minimal fanout previously give best query performance 
simplicity added buffers implementation nodes nodes log th level 
theoretically buffer size blocks obtain bulk loading bound log 
practice significantly different theoretical log bound obtained section 
reason wise choice bulk loading discussed section construct index best bulk loading heuristic specific problem hand attach buffers speed bulk insertions bulk queries bulk deletes 

improving space utilization 
discussed special purpose bulk loading algorithms produce significantly better indexes ones obtained efficient bulk operations dynamic trees repeated insertion especially terms space utilization 
exist heuristics improving space utilization dimensional trees :10.1.1.178.5499:10.1.1.129.3731:10.1.1.104.894
key question take advantage heuristics buffer algorithm order improve space utilization sacrificing conceptual advantage having know updates start algorithm 
turns modifying buffer emptying algorithm nodes level just leaves able combine advantages buffering method called hilbert heuristic algorithm discussed section start loading leaves internal memory :10.1.1.178.5499
repeatedly inserting rectangles buffer standard algorithm sort rectangles buffer leaves hilbert values center 
rectangles grouped new leaves replace old ones 
improving space utilization 
discussed special purpose bulk loading algorithms produce significantly better indexes ones obtained efficient bulk operations dynamic trees repeated insertion especially terms space utilization 
exist heuristics improving space utilization dimensional trees :10.1.1.178.5499:10.1.1.129.3731:10.1.1.104.894
key question take advantage heuristics buffer algorithm order improve space utilization sacrificing conceptual advantage having know updates start algorithm 
turns modifying buffer emptying algorithm nodes level just leaves able combine advantages buffering method called hilbert heuristic algorithm discussed section start loading leaves internal memory :10.1.1.178.5499
repeatedly inserting rectangles buffer standard algorithm sort rectangles buffer leaves hilbert values center 
rectangles grouped new leaves replace old ones 
recommendations careful fill leaves completely :10.1.1.104.894
fill capacity include candidate rectangle increases area minimal bounding rectangle rectangles leaf 
key question take advantage heuristics buffer algorithm order improve space utilization sacrificing conceptual advantage having know updates start algorithm 
turns modifying buffer emptying algorithm nodes level just leaves able combine advantages buffering method called hilbert heuristic algorithm discussed section start loading leaves internal memory :10.1.1.178.5499
repeatedly inserting rectangles buffer standard algorithm sort rectangles buffer leaves hilbert values center 
rectangles grouped new leaves replace old ones 
recommendations careful fill leaves completely :10.1.1.104.894
fill capacity include candidate rectangle increases area minimal bounding rectangle rectangles leaf 
space utilization tree mainly determined leaves filled modification improves space utilization significantly 
main reason selecting hilbert heuristic heuristic suited kind dimensional data working :10.1.1.178.5499
general idea improvement works heuristics 
rectangles grouped new leaves replace old ones 
recommendations careful fill leaves completely :10.1.1.104.894
fill capacity include candidate rectangle increases area minimal bounding rectangle rectangles leaf 
space utilization tree mainly determined leaves filled modification improves space utilization significantly 
main reason selecting hilbert heuristic heuristic suited kind dimensional data working :10.1.1.178.5499
general idea improvement works heuristics 
high dimensional point data example easily replace hilbert heuristic variant method berchtold 
order evaluate modified algorithm repeated bulk loading experiments section 
results experiments encouraging buffer sizes improved space utilization approximately time improve construction time compared original algorithm 
having implemented buffering algorithms combine efficient existing index implementation problem class hand 
aggarwal vitter 
input output complexity sorting related problems 
communications acm 
arge :10.1.1.33.324
buffer tree new technique optimal algorithms 

editors algorithms data structures th international workshop volume lecture notes computer science pages 
springer verlag berlin 
arge 
external memory algorithms applications geographic information systems 
van nievergelt widmayer editors algorithmic foundations gis volume lecture notes computer science pages 
springer verlag berlin 
arge :10.1.1.22.3293
external memory data structures 
abello pardalos editors handbook massive data sets 
kluwer academic dordrecht 
arge vengroff 
acta informatica 
becker seeger widmayer 
asymptotically optimal multiversion tree 
vldb journal 
beckmann :10.1.1.129.3731
kriegel schneider seeger 
tree efficient robust access method points rectangles 
garcia molina jagadish editors proceedings acm sigmod international conference management data volume sigmod record pages 
acm press new york june 
improving query performance high dimensional index structures bulk load operations 

schek alonso editors advances database technology edbt th international conference extending databases technology volume lecture notes computer science pages 
springer verlag berlin 
comer :10.1.1.96.6637
ubiquitous tree 
acm computing surveys june 

intelligent information fusion system handling archiving querying terabyte sized spatial databases 
acm computing surveys june 

intelligent information fusion system handling archiving querying terabyte sized spatial databases 
tate editor report workshop data image compression needs uses scientific community technical report series tr pages 
efficient bulk operations dynamic trees dewitt kabra luo patel :10.1.1.104.894
yu 
client server paradise 
jarke zaniolo editors proceedings th international conference large data bases vldb pages 
morgan kaufmann san mateo ca 
yu 
client server paradise 
jarke zaniolo editors proceedings th international conference large data bases vldb pages 
morgan kaufmann san mateo ca 
gaede nther :10.1.1.104.894
multidimensional access methods 
acm computing surveys june 
gray chaudhuri bosworth layman pirahesh 
data cube relational aggregation operator generalizing group cross tab sub totals 
gray chaudhuri bosworth layman pirahesh 
data cube relational aggregation operator generalizing group cross tab sub totals 
data mining knowledge discovery 
preliminary version appeared proceedings twelfth international conference data engineering pages 
greene :10.1.1.131.7887
implementation performance analysis spatial data access methods 
proceedings fifth international conference data engineering pages 
ieee computer society press los alamitos ca 
guttman :10.1.1.178.5499:10.1.1.131.7887
greene :10.1.1.131.7887
implementation performance analysis spatial data access methods 
proceedings fifth international conference data engineering pages 
ieee computer society press los alamitos ca 
guttman :10.1.1.178.5499:10.1.1.131.7887
trees dynamic index structure spatial searching 
editor sigmod proceedings annual meeting volume sigmod record pages 
acm press new york june 
kamel faloutsos :10.1.1.178.5499
guttman :10.1.1.178.5499:10.1.1.131.7887
trees dynamic index structure spatial searching 
editor sigmod proceedings annual meeting volume sigmod record pages 
acm press new york june 
kamel faloutsos :10.1.1.178.5499
packing trees 
proceedings nd international conference information knowledge management cikm pages 
kamel faloutsos :10.1.1.45.9180
hilbert tree improved tree fractals 
acm press new york june 
kamel faloutsos :10.1.1.178.5499
packing trees 
proceedings nd international conference information knowledge management cikm pages 
kamel faloutsos :10.1.1.45.9180
hilbert tree improved tree fractals 
jarke zaniolo editors proceedings th international conference large data bases vldb pages 
morgan kaufmann san mateo ca 
kamel 
springer verlag berlin 
nievergelt widmayer 
spatial data structures concepts design choices 
van nievergelt widmayer editors algorithmic foundations gis volume lecture notes computer science springer verlag berlin 
patel dewitt :10.1.1.43.2358
partition spatial merge join 
jagadish mumick editors proceedings acm sigmod international conference management data volume sigmod record pages 
acm press new york june 
roussopoulos kotidis roussopoulos 
roussopoulos 
direct spatial search pictorial databases packed trees 
navathe editor proceedings acm sigmod international conference management data volume sigmod record pages 
acm press new york december 
ruemmler wilkes :10.1.1.117.39
disk drive modeling 
ieee computer 
sellis roussopoulos faloutsos :10.1.1.85.3008:10.1.1.141.6518
tree dynamic index multi dimensional objects 
acm press new york december 
ruemmler wilkes :10.1.1.117.39
disk drive modeling 
ieee computer 
sellis roussopoulos faloutsos :10.1.1.85.3008:10.1.1.141.6518
tree dynamic index multi dimensional objects 
kent editors proceedings th international conference large data bases pages 
morgan kaufmann san mateo ca 
tiger line tm files technical documentation 
morgan kaufmann san mateo ca 
tiger line tm files technical documentation 
prepared bureau census washington dc july 
accessible url www census gov geo www tiger doc html accessed feb 
van den seeger widmayer :10.1.1.85.3008
generic approach bulk loading multidimensional index structures 
jarke carey dittrich lochovsky jeusfeld editors vldb proceedings rd international conference large data bases pages 
morgan kaufmann san mateo ca 
arge hinrichs vitter vengroff 
proceedings dags symposium 
vengroff vitter 
efficient scientific computation tpie 
proceedings goddard conference mass storage systems technologies nasa conference publication volume ii pages 
vitter :10.1.1.147.3224
external memory algorithms data structures dealing massive data 
acm computing surveys june 
