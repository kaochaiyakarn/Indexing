mining generalized association rules ramakrishnan srikant rakesh agrawal ibm almaden research center san jose ca srikant almaden ibm com introduce problem mining generalized association rules 
large database transactions transaction consists set items taxonomy hierarchy items find associations items level taxonomy 
example taxonomy says outerwear clothes may infer rule people buy outerwear tend buy shoes 
rule may hold rules people buy tend buy shoes people buy clothes tend buy shoes hold 
obvious solution problem add ancestors item transaction transaction run algorithms mining association rules extended transactions basic algorithm fast algorithms cumulate run times faster basic times faster real life dataset 
new interest measure rules uses information taxonomy 
user specified minimum interest level measure prunes large number redundant rules rules pruned real life datasets 
department computer science university wisconsin madison 
permission copy fee ot part material granted provided copies ot distrib ed direct commercial advantage vldb copyright notice title publication date appear notice copying ia permission large data base endowment 
copy ot republish requires fee special endowment 
proceedings st vldb conference zurich data mining known knowledge discovery databases recognized new area database research 
area defined efficiently discovering interesting rules large collections data 
problem mining association rules introduced :10.1.1.40.6984
set transactions transaction set items association rule expression sets items 
intuitive meaning rule transactions database contain items tend contain items example rule customers purchase tires auto accessories buy automotive services called confidence rule 
rule percentage transactions contain problem mining association rules find rules satisfy user specified minimum support minimum confidence 
applications include cross marketing attached mailing catalog design loss leader analysis store layout customer segmentation buying patterns 
cases taxonomies hierarchies items available 
example taxonomy shown taxonomy says jacket outerwear ski pants outerwear outerwear clothes users interested generating rules span different levels taxonomy 
example may infer rule people buy outerwear tend buy hiking boots fact people bought hiking boots ski pants hiking boots 
support rule outerwear hiking boots may sum supports rules hiking boots ski pants hiking boots people may bought ski pants hiking boots transaction 
outerwear hiking boots may valid rule hiking boots clothes hiking boots may clothes footwear outerwear shirts shoes hiking boots ski pants example taxonomy 
may minimum support may minimum confidence 
earlier association rules consider presence taxonomies restricted items association rules leaf level items taxonomy :10.1.1.40.6984:10.1.1.40.6757:10.1.1.40.2201
finding rules different levels taxonomy valuable rules lower levels may minimum support 
people may buy hiking boots people may buy outerwear hiking boots 
significant associations may discovered restrict rules items leaves taxonomy 
department stores supermarkets typically hundreds thousands items support rules involving leaf items typically upc codes tends extremely small 
taxonomies prune uninteresting redundant rules 
discuss section 
multiple taxonomies may 
example taxonomy price items cheap expensive category 
multiple taxonomies may modeled single taxonomy dag directed acyclic graph 
common application uses multiple taxonomies loss leader analysis 
addition usual taxonomy classifies items brands categories product groups second taxonomy items sale considered children items sale category users look rules containing items sale item 
introduce problem mining generalized association rules 
informally set transactions taxonomy want find association rules items may level taxonomy 
give formal problem description section 
drawback users experience applying association rules real problems tend get lot uninteresting redundant rules interesting rules 
introduce uses taxonomy prune redundant rules 
obvious solution problem replace transaction extended transaction contains items ancestors items example transaction contained add outerwear clothes get extended transaction 
run algorithms mining association rules pi pi pi extended transactions get generalized association rules 
basic algorithm fast sophisticated algorithms propose run times faster basic times faster real life dataset 
describe basic algorithm algorithms section evaluate performance synthetic real life data section 
summarize conclude section 
expanded version see :10.1.1.144.4956
problem statement letz ii iz 
im set literals called items 
directed acyclic graph literals 
edge represents relationship represents set 
edge call parent child 
represents generalization 
model taxonomy dag forest allow multiple taxonomies 
lower case letters denote items upper case letters sets items itemsets 
call ancestor descendant edge transitive closure 
note node ancestor graph acyclic 
set transactions transaction set items 
expect items leaves require 
say transaction supports item ancestor item say transaction supports supports item generalized association rule implication form rl item ancestor item rule holds transaction set confidence transactions support support rule support transaction set transactions support reason condition item ancestor item rule form ancestor trivially true confidence redundant 
call rules generalized association rules contain items level taxonomy possibility entertained formalism introduced :10.1.1.40.6984
problem statement tentative set transactions set taxonomies problem mining generalized association rules discover rules support confidence greater user specified minimum support called minsup minimum confidence called minconf respectively 
definition problem redundant rules may 
formalize notion redundancy modify problem statement accordingly section 
introduce tentative problem statement order explain redundancy 
example footwear shoes hiking boots clothes outerwear ski pants shirts taxonomy shown 
consider database shown 
minsup transactions minconf 
sets items minimum support frequent itemsets rules corresponding itemsets shown 
note rules ski pants hiking boots hiking boots minimum support rule outerwear hiking boots 
observation pr denote probability items contained transaction 
support pr confidence pr 
note pr probability items transaction 
set minimum support 
eno ancestor 
rule confidence rule guaranteed minimum support confidence 
rules minimum support may minimum confidence 
support item taxonomy equal sum supports children children single transaction 
directly infer rules items higher levels taxonomy rules leaves 
interesting rules previous quantifying usefulness interest rule focussed support rule expected support support antecedent consequent 
database transaction items bought shirt jacket hiking boots ski pants hiking boots shoes shoes jacket frequent itemsets itemset jacket outerwear clothes shoes hiking boots footwear outerwear hiking boots clothes hiking boots outerwear footwear clothes footwear support rules rule support conf 
outerwear hiking boots outerwear footwear hiking boots outerwear hiking boots clothes example piatetsky shapiro argues rule interesting support support support 
implemented idea chi square value check rule statistically significant 
measure prune rules real life datasets described set tion rules redundant statistically significant 
section information taxonomies derive new interest measure prunes rules redundant rules 
motivate approach consider rule milk cereal support confidence milk parent skim milk quarter sales milk skim milk expect rule skim milk cereal support confidence 
actual support confidence skim milk cereal respectively rule considered redundant convey additional information general rule 
capture notion interest saying want find rules support times expected value confidence times expected value user specified constant formalize intuition 
call ancestor 
sets items get replacing ace items ancestors number items 
reason condition compute expected support number items 
instance support clothes give clue expected support outerwear shirts 
call rules 
ancestors rule set rules call 
close ancestor rule xl ancestor ancestor 
similar definitions apply consider rule support support rule pr denote expected value pr pr ancestor zj zn ancestor zi 
define pr zj ez pr 
pr pr 
expected value pr itemset easily enhance definition say want ford rules minimum support support confidence expected value 
rules support expected minimum support 
fact deviation expected value support rule 
interesting rules may minimum support 
applies confidence 
suppose wanted ford rules support expected irrespective minimum support 
consider typical database items average items transaction transactions 
average probability item transaction items transaction 
average expected number transactions specific items bought just 
may millions rules say items bought rules significant 
alternate definitions possible 
example define 
similarly ez pr denote ence rule rule yr 
yj yj ancestor yi 
define pr yj pr 
ji prg note pr pr ji 
rule interesting ancestor support ru times expected support dence times expected confidence definition interesting rules set rules minimum interest rule interesting ancestors interesting respect close ancestors interesting ancestors 
say rule partially interesting ancestors interesting respect close ancestor interesting ancestors 
motivate reason considering close ancestors interesting ancestors example 
consider rules shown 
support items antecedent shown alongside 
assume taxonomy previous example 
rule ancestors interesting 
support rule twice expected support rule interesting 
support rule exactly expected support rule twice support 
rule 
want consider rule interesting support predicted rule support expected ignore rule look rule 
problem statement set transactions user specified minimum interest called min interest problem mining association rules taxonomies find interesting association rules support confidence greater user specified minimum support called minsup minimum confidence called minconf respectively 
applications may want find partially interesting rules just interesting rules 
note min interest rules regardless interest 
algorithms problem discovering generalized association rules decomposed parts rule rule support clothes footwear outerwear footwear footwear example interest 
find sets items support greater user specified minimum support 
itemsets minimum support called frequent itemsets 

frequent itemsets generate desired rules 
general idea say abcd ab frequent itemsets determine rule ab cd holds computing ratio conf support abcd support ab 
conf minconf rule holds 
rule abcd frequent 
prune uninteresting rules set 
rest section look algorithms finding frequent itemsets items level taxonomy 
frequent itemsets algorithm generate rules :10.1.1.40.6984:10.1.1.40.6757
describe obvious approach finding frequent itemsets algorithms 
algorithm basic consider problem deciding transaction supports itemset take raw transaction involves checking item descendant transaction 
task simpler add ancestors item call extended transaction 
supports superset straight forward way find generalized association rules run algorithms finding association rules pi pi extended transactions 
discuss generalization apriori algorithm :10.1.1.40.6757
gives overview algorithm notation 
pass algorithm simply counts item occurrences determine frequent itemsets 
note items itemsets come leaves taxonomy interior nodes 
subsequent pass say pass consists phases 
earlier papers itemsets minimum support called large itemsets :10.1.1.40.6984:10.1.1.40.6757:10.1.1.40.6757
readers associated large number items itemset support 
switching terminology frequent itemsets 
itemset having items 
notation frequent itemsets represents pass number lk ck new candidates size generated lk 
forall transactions add ancestors item removing duplicates 
increment count candidates ck contained lk candidates ck minimum support 
answer lk algorithm basic frequent itemsets lk th pass generate candidate itemsets ck apriori candidate generation function described paragraph 
database scanned support candidates ck counted 
fast counting need efficiently determine candidates ck contained transaction reuse hash tree data structure described purpose :10.1.1.40.6757
candidate generation lk set frequent itemsets want generate superset set frequent ic itemsets 
candidates may include leaf level items interior nodes taxonomy 
intuition procedure itemset minimum support subsets simplicity assume items itemset kept sorted lexicographic order 
join step join lk lk insert ck select 
lk lk prune step delete itemsets ck subset lk 
algorithm cumulate add optimizations basic algorithm develop algorithm cumulate 
name indicates itemsets certain size counted pass stratify algorithm section 
filtering ancestors added transactions 
add ancestors items transaction just need add ancestors candidate itemsets counted current pass 
fact original item itemsets dropped transaction 
example assume parent jacket outerwear parent outerwear clothes 
clothes shoes itemset counted 
transaction containing jacket simply replace jacket clothes 
need keep jacket transaction need add outerwear transaction 

pre computing ancestors 
finding ancestors item traversing taxonomy graph pre compute ancestors item 
drop ancestors candidates time 

pruning itemsets containing item ancestor 
lemmas justify optimization 
lemma itemset contains item ancestor itemset 
lemma sel frequent itemsets nol include itemset contains item ancestor ihe se candidates ck generated candidate generation procedure include itemset contains item ias ancestor 
proofs lemmas :10.1.1.144.4956
lemma shows need count itemset contains item ancestor 
add compute set ancestors item 
optimization li frequent itemsets represents pass number ck new candidates size generated lk 
delete candidate cz consists item ancestor 
optimization delete ancestors candidates ck 
optimization forall transactions foreach item add ancestors remove duplicates increment count candidates ck contained lk candidates ck minimum support 
answer lk algorithm cumulate optimization pruning candidate itemsets size consist item ancestor 
lemma shows pruning candidates sufficient ensure generate candidates subsequent passes contain item ancestor 
gives overview cumulate rithm 
stratification motivate algorithm example 
clothes shoes outerwear shoes jacket shoes candidate itemsets counted jacket child outerwear outerwear child clothes 
clothes shoes minimum support count outerwear shoes jacket shoes 
counting candidates size pass cumulate may faster count support clothes shoes count outerwear shoes clothes shoes turns minimum support count jacket shoes outerwear shoes minimum support 
course extra cost making multiple passes database may benefit counting fewer itemsets 
discuss tradeoff detail shortly 
develop algorithm presenting straight forward version stratify ing sampling increase effectiveness estimate versions 
optimizations introduced cumulate algorithm apply algorithm 
stratify consider partial ordering induced taxonomy dag set itemsets 
itemsets parents considered depth 
itemsets itemset defined parent 
count itemsets cc depth 
deleting candidates descendants itemsets cc minimum support count remaining itemsets depth cl 
deleting candidates descendants itemsets cr minimum support count itemsets depth candidates depth count candidates different depths 
reduce overhead making multiple passes 
tradeoff number itemsets counted cpu time number passes database io cpu time 
extreme pass database candidates depth 
result minimal number itemsets counted may waste lot time scanning database multiple times 
extreme just pass candidates cumulate 
result counting itemsets minimum support parents minimum support 
implementation heuristic empirically determined count candidates pass 
estimate hoping candidates include items higher levels taxonomy minimum support resulting having count candidates include items lower levels sampling estimate support candidates 
count candidates expected minimum support candidates expected minimum support parents minimum support 
call set cl candidates size 
expect candidates minimum support count descendants candidates 
candidates turn minimum support support extra pass count descendants 
call set candidates cl count candidates expected minimum support pass count children sure children minimum support count 
implementation included candidates support sample times minimum support candidates parents times minimum support cl order reduce effect sampling error 
discuss effect changing sampling error margin shortly discuss sample size chosen 
example example consider candidates shown 
jacket child outerwear outerwear child clothes 
minimum support support candidates sample database shown 
sample expect clothes shoes minimum support database 
find support clothes shoes outerwear shoes entire database 
count outerwear shoes expect minimum support know sure minimum support clothes shoes minimum support expect clothes shoes minimum support 
scenario find support jacket shoes outerwear shoes minimum support entire database 
scenario extra pass count jacket shoes 
estimate sample candidates minimum support error estimate usually second pass counts support candidates ct descendants candidates ck wrongly expected minimum support 
number candidates counted pass usually small 
making separate pass count candidates count count candidates ck know candidates cf minimum support assume candidates frequent generating ck consider lk candidates cl minimum support candidates generating ck generate candidates ck generated estimate affect correctness 
tradeoff extra candidates counted extra pass estimate 
overview algorithm 
optimizations introduced cumulate algorithm ap candidate support support database itemsets sample scenario scenario clothes shoes outerwear shoes jacket 
shoes example estimate frequent itemsets generate ds sample database pass represents pass number represents candidates size counted candidates size lk ck new candidates size generated lk cz 
estimate support candidates ck making pass candidates ck expected minimum support candidates parents expected minimum support 
find support candidates cl making pass delete candidates ck ancestors ci minimum support 
cz remaining candidates ck ca 
lk candidates cl minimum support 
add candidates ct minimum support lk 
answer uk lk algorithm ply omitted 
size sample discuss select sample size estimating support candidates 
support fraction itemset consider random sample replacement size database 
number transactions sample contain random variable binomial distribution trials having success probability abbreviation extreme defined pn chernoff bounds probability fractional support sample extreme bounded pr jn table presents probabilities support itemset sample real support various sample sizes example sample size transactions probability estimate candidate support real support 
equation suggests sample size increase minimum support decreases 
probability estimate certain fraction real support depends sample size database size 
experiments showing effect sample size running time section 
performance evaluation section evaluate performance algorithms synthetic real life datasets 
describe synthetic data program section 
preliminary results comparing variants stratification algorithm effect changing sample size section 
give performance evaluation algorithms data section 
reality check results synthetic data running algorithms real life data sets section 
look effectiveness interest measure pruning redundant rules section 
performed experiments ibm rs workstation mb main memory running aix 
data resided aix file system stored local gb scsi drive measured sequential throughput mb second 
synthetic data generation synthetic data generation program generalization algorithm addition incorporation taxonomies :10.1.1.40.6757
various parameters default shown table 
describe extensions data generation algorithm detail 
essential idea synthetic data generation program generate table potentially frequent itemsets generate table pr support sample values sample size real support parameter default value idi number transactions iti average size transactions average size maximal potentially frequent itemsets lz number maximal potentially frequent itemsets number items number roots number levels fanout probability item rule comes level item comes level table parameters synthetic data generation default values transactions picking itemsets inserting transaction :10.1.1.40.6757
details :10.1.1.40.6757
extend algorithm build taxonomy items simplicity modeled taxonomy forest dag 
internal node number children picked poisson distribution mean equal fanout assign children roots nodes depth till run items 
algorithm possible leaves taxonomy different levels allows change parameters fanout number roots small increments 
item taxonomy tree including non leaf items weight associated corresponds probability item picked frequent itemset 
weights distributed weight interior node equals sum weights children divided depth ratio 
high depth ratio items picked leaves lower levels tree low depth ratio items picked higher tree 
itemset weight associated corresponds probability itemset picked 
weight picked exponential distribution unit mean multiplied geometric mean probabilities items itemset 
weights normalized sum weights itemsets 
itemset put transaction parameters need specified determine fourth parameter 
chosen tossing ill sided weighted coin weight side probability picking associated itemset 
itemset picked adding transaction specialized 
item leaf taxonomy descend subtree rooted till reach leaf replace node decide branch follow tossing sided weighted coin number children weights correspond weights children 
see tion program :10.1.1.144.4956
preliminary experiments details candidate genera stratification variants results comparing variants stratification algorithm default synthetic data shown 
high minimum support rules time spent scanning database performance variants nearly identical 
low minimum support rules slightly better estimate significantly better stratify 
reason counts candidates estimate stratify fewer passes database resulting better performance 
show performance stratify estimate graphs section results similar 
estimate stratify somewhat worse estimate beating stratify 
str rrr minimum variants stratify mm 
trans 
changing sample size size sample changed size sample 
running time higher low sample sizes high sample sizes 
case decrease performance due greater error estimating itemsets minimum support 
case due sampling overhead 
notice curve quite flat minimum time significant difference performance sample little little 
comparison basic cumulate est merge performed experiments synthetic datasets changing different parameter experiment 
results shown 
parameters varied set default values 
minimum support experiment varies minimum support 
obtained similar results levels support gap algorithms typically increased lowered support 
minimum support changed minimum support 
cumulate times faster basic performance gap increasing minimum support decreased 
high support cumulate took time rules time spent scanning database 
low support faster cumulate 
number transactions varied number transactions 
showing elapsed time graph shows elapsed time divided number transactions normalized time taken cumulate transactions unit 
cumulate perform better basic 
ratio time taken time taken cumulate decreases number transactions increases sample size constant percentage accuracy estimates support candidates increases number transactions increases 
fanout changed fanout 
corresponded decreasing number levels 
better cumulate fanout performance advantage deceased fanout increased algorithms high fanout 
reason fanout leaves taxonomy level level 
percentage candidates pruned sampling small able count significantly fewer candidates cumulate 
performance gap basic algorithms decreases somewhat high fanout fewer rules greater fraction time spent just scanning database 
number roots increased number roots 
shown increasing number roots effect similar decreasing minimum support 
reason number roots increases probability specific root transaction decreases 
number items levels varied number items 
main effect change number levels taxonomy tree leaves level level items leaves level level items 
changing number items significantly affect performance cumulate increased minimum support basic sy rt number transactions cumulate number 

number roots basic cumulate 
basic fanout number roots number items depth ratio basic number items ooo experiments synthetic data supermarket data department store data basic iit ii fr minimum support support comparison algorithms real data time taken basic 
items frequent itemsets come leaves taxonomy number frequent itemsets change lot algorithms 
basic find candidates contained transaction transaction size adding ancestors increased proportionately number levels 
time taken basic increased number items time taken algorithms remained roughly constant 
depth ratio changed depth ratio 
high depth ratios items frequent itemsets tend picked leaves lower levels tree low depth ratios items picked higher tree 
shown performance gap algorithms increased depth ratio increased 
depth ratio better cumulate times better basic 
reason able prune higher percentage candidates high 
summary results synthetic data 
cumulate times faster basic synthetic datasets 
faster cumulate datasets 
advantage decreased high fanout items rules came top levels taxonomy able prune candidates 
increase performance gap cumulate number transactions increased constant percentage sample size accuracy estimates support candidates increases number transactions increases 
cumulate exhibits linear scale number transac tions 
reality check see results synthetic data held real world ran algorithms real life datasets 
supermarket data data grocery purchases customers 
total items 
taxonomy levels roots 
transactions average items transaction 
shows time taken algorithms minimum support decreased 
results similar obtained synthetic data little faster cumulate times fast basic 
department store data data department store 
total items 
taxonomy levels roots 
transactions average items transaction 
shows time taken algorithms minimum support decreased 
axis uses log scale 
surprisingly basic algorithm times slower algorithms 
taxonomy deep ratio number frequent itemsets contained item ancestor number frequent itemsets high 
fact basic counted times frequent itemsets algorithms resulting poor performance 
effectiveness interest measure looked effectiveness interest measure pruning rules real life datasets confidence levels 
supermarket data rules pruned interest level pruned department store data interest level 
contrast interest measure statistical significance prune rules confidence pruned rules confidence datasets 
details experiments :10.1.1.144.4956
example rule beverages ti dairy milk pruned support confidence times expected support confidence respectively ancestor beverages milk milk ancestor dairy milk 
summary introduced problem mining generalized association rules 
large database customer transactions transaction consists set items taxonomy hierarchy items find associations items level taxonomy 
earlier association rules consider presence taxonomies restricted items association rules leaf level items taxonomy 
obvious solution problem replace transaction extended transaction contains items original transaction ancestors item original transaction 
run earlier algorithms mining association rules extended transactions get generalized association rules 
basic approach fast 
new algorithms cumulate 
empirical evaluation showed algorithms run times faster basic real life dataset performance gap times 
algorithms performs somewhat better cumulate performance gap increasing size database increases 
merge cumulate exhibit linear scale number transactions 
problem users experience applying association rules real problems uninteresting redundant rules generated interesting rules 
developed new interest measure uses taxonomy information prune redundant rules 
intuition measure support confidence rule close expected values ancestor rule rule considered redundant 
measure able prune rules real life datasets 
contrast interest measure statistical significance taxonomies able prune rules 
acknowledgment insightful wish jeff naughton comments suggestions 
agrawal imielinski swami :10.1.1.40.6984
mining association rules sets items large databases 
proc 
acm sigmod conference management data pages washington may 
agrawal srikant :10.1.1.40.6757
fast algorithms mining association rules 
proc 
vldb conference santiago chile september 
expanded version available ibm research report rj june 
alon spencer 
method 
john wiley new york 
hagerup 
guided tour chernoff bounds 
information processing letters 
swami 
set oriented mining association rules 
id conference engineering taipei taiwan march 
mannila toivonen verkamo :10.1.1.40.2201
efficient algorithms discovering association rules 
kdd aaai workshop knowledge discovery databases pages seattle washington july 
park 
chen yu 
effective hash algorithm mining association rules 
proc 
acm sigmod conference management data san jose california may 
piatetsky shapiro 
discovery analysis presentation strong rules 
piatetsky shapiro frawley editors knowledge discovery databases pages 
aaai mit press menlo park ca 
srikant agrawal :10.1.1.144.4956
mining generalized association rules 
research report rj ibm almaden research center san jose california june 

