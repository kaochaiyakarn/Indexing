expect scripts controlling interactive processes don libes national institute standards technology libes cme nist gov contemporary shells provide minimal control starting stopping programs leaving interaction users 
means run programs non interactively passwd 
programs run loss flexibility fsck 
philosophy unix begins break 
expect crosses line solving number long standing problems unix environment 
expect uses tcl language core 
addition expect unix program interactive 
result classic example little language synergistically generating large power combined rest unix workbench 
previous papers described implementation expect compared tools 
concentrates language primarily presenting variety scripts 
scripts demonstrate brand new features expect 
keywords expect interaction posix programmed dialogue shell tcl unix reprint computing systems vol 
university california press berkeley ca november 

fsck unix file system check program run shell script options 
manual defines option follows assume response questions asked fsck extreme caution free license continue severe problems encountered option safer 
kind interface bad programs style 
ftp file transfer program option disables interactive prompting run script 
provides way take alternative action error occur 
expect tool controlling interactive programs 
solves fsck problem providing interactive functionality non interactively 
expect specifically designed fsck handle ftp errors 
problems fsck ftp illustrate major limitation user interface offered shells sh csh generically referred shell rest 
shell provide way reading output writing input program 
means shell run fsck missing useful features 
programs run 
example passwd run user interactively supplying input 
similar programs automated shell script telnet crypt su rlogin large number application programs written fault demanding user input 
expect designed specifically interact interactive programs 
expect programmer write script describing dialogue 
expect program run interactive program non interactively 
writing scripts interactive programs simple writing scripts non interactive programs 
expect automate parts dialogue control passed script keyboard vice versa 

brief overview expect implementation philosophy expect described length libes 
briefly scripts written interpreted language 
library available programmers discussed 
commands provided create interactive processes read write output input 
expect named specific command waits output program 
language expect tcl 
tcl subroutine library embedded application provides language services 
resulting language looks typical shell language 
commands set variables set control flow 
readability times roman bold display file program names helvetica keyword language elements courier literal strings code fragments 
don libes continue perform usual math string operations 
course unix programs called exec 
facilities available tcl application 
tcl completely described ousterhout 
expect built top tcl provides additional commands 
spawn command invokes unix program interactive 
send sends strings process 
expect waits strings process 
expect supports regular expressions wait multiple strings time executing different action string 
expect understands exceptional conditions timeout file 
expect command tcl case command matches string number strings 
possible new commands modeled existing tcl commands language remained coherent set tools 
definition expect paraphrased manual page expect action action 
waits patterns matches output current process specified time period passed file 
final action null may omitted 
consists single pattern list patterns 
pattern matched corresponding action executed 
result action returned expect 
exact string matched read unmatched timeout occurred stored variable expect match 
eof timeout corresponding action executed file timeout respectively 
default timeout period seconds may example set command set timeout 
fragment script involves login 
abort procedure defined script actions tcl primitives similar 
expect welcome break busy print busy continue failed abort timeout abort patterns usual shell style regular expressions 
patterns match entire output current process previous expect interact reason surrounded wildcard 
bytes output force earlier bytes forgotten 
may changed setting variable match max 
expect demonstrates best worst expect 
particular flexibility comes price occasionally confusing syntax 
pattern lists contain multiple patterns keyword patterns eof timeout appear 
provides guaranteed way distinguishing 
breaking lists requires second scan interpret whitespace correctly quoted 
exacerbated tcl providing forms string quoting braces double quotes 
unambiguous tcl require strings quoted 
separate section expect manual page explain complexity 
fortunately healthy set examples held back complaints 
aspect probably revisited release 
readability scripts double quotes sufficed 
expect scripts controlling interactive processes characters individually quoted backslash 
continue statements terminated line 
inherent tcl 
tcl continues scanning open brace double quote 
addition semicolons separate multiple statements single line 
sounds confusing typical interpreters bin sh 
elegant aspects tcl 

callback surprising little scripting necessary produce useful 
script dials phone 
reverse charges long distance phone calls charged computer 
invoked expect callback exp script named callback exp phone number 
give user time logout exec sleep spawn tip modem expect connected send atd index argv modem takes connect set timeout expect connect line comment 
second illustrates unix command interaction called 
sleep cause program block seconds giving user chance logout modem presumably call back phone number user 
line starts tip spawn tip output read expect input written send 
tip says connected modem told dial number 
modem assumed hayes compatible easy expand script handle 
matter happens expect terminates 
call fails possible expect retry point 
call succeeds getty detect dtr line expect exits prompt user login 
actual scripts usually error checking 
script illustrates command line parameters available script list named argv style language 
case element phone number 
brackets cause enclosed text evaluated command result substituted original text 
similar way csh 
script replaced program written thing 

passwd conformance testing earlier passwd mentioned program run user interaction 
passwd ignores redirection embedded pipeline input comes program file 
insists performing directly real user 
passwd designed don libes way security reasons result way test passwd non interactively 
ironic program critical system security way reliably tested 
passwd takes username argument interactively prompts password 
expect script takes username password arguments run non interactively spawn passwd index argv set password index argv expect password send password expect password send password expect eof line starts passwd program username passed argument 
line saves password variable convenience 
shell variables declared advance 
third line expect looks pattern password 
asterisk allows match data input useful shortcut avoid specifying detail 
action specified expect just waits pattern continuing 
receiving prompt line sends password current process 
indicates carriage return 
usual conventions supported 
sequences passwd asks password typed twice spelling verification 
point non interactive passwd script passwd assumes interacting human type consistently 
lastly line expect eof searches file output passwd demonstrates keyword patterns 
pattern timeout denote failure pattern match amount time 
eof necessary passwd carefully written check succeeds including final newline produced password entered second time 
script sufficient show basic interaction passwd command 
complete script verify behaviors 
example script checks aspects passwd program 
complete prompts checked 
correct handling garbage input checked 
process death unusually slow response unexpected behavior trapped 
spawn passwd index argv expect eof exit timeout exit user exit new password send index argv expect eof exit timeout exit password long exit password short exit expect scripts controlling interactive processes new password send index argv expect timeout exit mismatch exit password unchanged exit expect timeout exit exit eof script exits numeric indication happened 
indicates passwd ran normally died unexpectedly locked 
numbers simplicity expect just easily pass back strings including messages spawned program 
typical save entire interaction file deleting command test behaves expected 
log available examination 
passwd testing script designed driven script 
second script reads file arguments expected results 
set calls script compares results expected results 
task non interactive plain old shell interpret second script 
example data file passwd look passwd exp bogus passwd exp fred passwd exp fred passwd exp fred abc passwd exp fred foobar bar passwd exp fred field names regression script run 
second field exit value match result script 
third field username 
fourth fifth fields passwords entered prompted 
hyphen just placeholder values read 
test bogus username invalid passwd respond user 
expect exit script value appears second element line regression suite data file 
test control sent program verify aborts gracefully 
way expect testing debugging interactive software required ieee posix shells tools conformance testing 
described detail libes 

rogue pseudo terminals unix users familiar processes connected processes pipes shell pipeline 
expect uses pseudo terminals connect spawned processes 
provide terminal semantics programs think performing real terminal 
don libes example bsd adventure game rogue runs raw mode assumes terminal exists connection 
expect programmed play rogue human interface comes 
rogue adventure game presents player various physical attributes strength rating 
time strength games get unusually strength 
lot rogue players know right mind restarts game times find really configurations 
script 
spawn rogue expect str break str close wait interact line loop control arguments rogue started strength checked see 
dialogue terminated close wait respectively closes connection pty waits process exit 
rogue reads file goes away loop restarted creating new game rogue test 
strength control breaks loop drops line script 
interact passes control user play particular game 
imagine running script 
see initial configurations fly screen second stopping great game play 
way play rogue better debugger 
important realize rogue graphics program uses 
expect programmers understand necessarily create screens intuitive manner 
fortunately problem example 
enhancement expect may include builtin terminal emulator order support understanding character graphics regions 

ftp script written expect print hello world 
useful 
ran ftp user interaction 
ftp program performs file transfer tcp ip networks internet 
ubiquitous implementation requires user provide input simple uses 
script retrieves file host anonymous ftp 
hostname argument script 
filename second argument 
spawn ftp index argv expect name expect scripts controlling interactive processes send anonymous expect password send exec expect ok ftp send get index argv expect ftp dedicated programs written perform background ftp 
underlying mechanism expect programmability leaves desired 
expect provides high level language customize needs 
example add persistence connection transfer fails retry minute hour aperiodic intervals depend factors user load 
notification notified transmission mail write mechanism choice 
notified failure 
initialization user initialization file high level language customization csh uses 
expect sophisticated things 
example mcgill university archie system 
archie anonymous telnet service provides access database describing contents entire internet anonymous ftp repositories 
script ask archie file download system 
requires lines ftp script 
known background ftp programs provide features mentioned 
expect implementation trivial 
persistence requires loop expect script 
notification exec mail write 
initialization file read command source just right thing expect command 
features added hooks existing programs guarantee needs met 
way confidence provide general purpose language 
solution integrate tcl directly ftp applications 
original intent tcl design 
done expect provides benefit tcl applications rewriting 

fsck fsck example program inadequate user interface 
fsck provides way answering questions advance 
say answer answer 
fragment shows script automatically answer questions rest 
script begins spawning fsck answering types questions 
expect eof break don libes file clear 
send bad inode fix 
send 
send version questions answered differently 
script sees doesn understand executes interact command passes control back user 
user keystrokes go directly fsck 
done user exit return control script triggered pressing plus key 
control returned script continues automated processing left 
expect eof break file clear 
send bad inode fix 
send 
interact expect fsck run non interactively reduced functionality 
barely programmable critical system administration tools 
tools similarly deficient user interfaces 
fact large number precisely inspired original development expect 

controlling multiple processes job control expect concept job control usual implementation difficulties 
issues involved expect handles classic job control occurs press terminal 
second expect handles multiple processes 
answer issue ignore 
expect doesn understand classic job control 
example spawn program send courtesy pty driver expect wait forever 
practice problem 
reason expect script send process 
doesn process se 
expect simply ignores process turns attention 
expect idea job control works quite 
user view follows process started spawn variable spawn id set descriptor referring process 
process described spawn id considered current process 
descriptor exactly pty file descriptor user treats opaque object 
expect send interact current process 
switch jobs necessary assign descriptor process variable spawn id 
example showing job control chess processes interact 
spawning process told move 
loop move sent process vice versa 
read move send move procedures left exercise reader 
easy write long include 
expect scripts controlling interactive processes spawn chess set id spawn id expect chess send read move spawn chess set id spawn id expect chess start player force go start player send move read move set spawn id id send move read move set spawn id id applications chess game players alternate moves lock step 
script implements spoofer 
control terminal user able log normally 
system prompts password login expect begins recording keystrokes user presses return 
effectively collects just logins passwords user usual spoofer problem seeing incorrect password try 
plus user connects host additional logins recorded 
spawn tip dev tty set tty spawn id open connection tty spoofed spawn login set login spawn id open connection login process log user set ready select tty login case login ready set spawn id login expect password login send user expect match set log ignore set spawn id tty send expect match 
usual defense spoofer disallow write access spoofer open public terminals 
don libes case tty ready set spawn id tty expect log send user expect match set log log send user expect match set spawn id login send expect match script works follows 
connections login process terminal 
default entire session logged standard output send user 
interest disabled command log user 
variety commands available control exactly seen logged 
loop select waits activity terminal process returns list spawn ids pending input 
case executes action value list 
example string login appears output login process prompt logged standard output flag set script recording user keystrokes return pressed 
received echoed terminal 
corresponding action occurs terminal half script 
examples demonstrated expect form job control 
interposing dialogue expect build arbitrarily complex flow processes 
multiple fan multiplexed fan dynamically data dependent process graphs possible 
contrast shell extraordinarily difficult just read file line time 
shell forces user press control characters keywords fg bg switch jobs 
shell scripts 
similarly shell running non interactively deal history features designed solely interactive 
presents similar problem passwd earlier 
impossible build shell scripts test certain shell behavior 
result aspects shell inevitably rigorously tested 
expect possible drive shell interactive job control features 
spawned shell thinks running interactively handle job control usual 
solve problem testing shells programs handle job control enables shell handle job expect necessary 
processes manipulated shell style job control backed shell 
means shell spawned command sent shell start process 
process suspended example sending 
select calls poll systems retrospect called biased meaningful 
expect scripts controlling interactive processes process stops control returns shell 
far expect concerned dealing process original shell 
expect approach flexible avoids duplicating job control software shell 
shell get job control choice pick shell spawn 
need testing really drive shell thinks running interactively 
useful programs change way buffer output detecting running interactively 
pin things interact expect puts controlling terminal expect invoked pty raw mode characters pass spawned process verbatim 
expect executing interact terminal mode time shell job control expect 

expect interactively earlier shown scripts interactively interact 
interact essentially gives user free access dialogue finer control desired 
achieved expect read standard input just easily reads process 
predefined spawn id maps standard input standard output 
alternatively commands expect user send user perform standard input standard output changing spawn id 
script reads line standard input amount time 
script named timed read called example csh script set answer timed read 
usr local bin expect set timeout index argv expect user send user expect match third line accepts newline terminated line user 
line returns standard output 
typed timeout returned 
line allows systems support 
magic invoke script directly saying expect script name execute permission set 
course script invoked explicitly expect script 
options preceded flag executed commands script 
example expect script traced invoking expect trace script ellipsis represents tracing option 
multiple commands may strung single script line braces separated semi colons 
naturally extends argument 
example command runs program foo seconds 
expect set timeout spawn foo expect don libes timeout set program spawned expect waits file seconds pass 
file seen program certainly exited expect returns 
timeout passed expect returns 
case expect exits implicitly killing current process 
educational try solve examples expect 
cases usual approach fork second process sleeps signals original shell 
process read finishes shell kills sleeper 
passing pids preventing background process start message stumbling block expert shell programmers 
providing general approach starting multiple processes way complicates shell script immensely 
invariably programmer writes special purpose program 
expect user send user send error writing standard error frequently longer expect scripts translate complex interaction process simple user 
libes describes adb securely wrapped script preventing system administrator needing master intricacies adb time dramatically lessening likelihood system crash due errant keystroke 
simpler example automating ftp retrieve files personal account 
case password supplied 
storing cleartext password file avoided file permissions heavily restricted 
supplying passwords arguments script security risk due ability ps retrieve 
solution call expect user script password script supply 
password available script script retry ftp hour 
technique useful information entered immediately 
example write script changes password machine account machines share common password database run unix 
hand telnet machine enter new password 
expect enter password script rest 
expect user interact mixed single script 
imagine debugging program fails iterations loop 
expect script drive debugger setting breakpoints running program appropriate number loops returning control keyboard 
alternate looping testing condition returning control 

programming expect interactively expect may programmed interactively 
example expect run arguments prompts commands 
similar normally interactively shell 
interactive mode may entered pressing user defined string interact 
prompted interpreter type expect commands executed immediately 
call defined procedures perform job control recursively invoke interact 
example suppose running script automate fsck 
answer questions decide rest answered 
escape interact expect scripts controlling interactive processes expect interpreter invoke procedure answer remaining questions interaction 
complex 
arguments interact string action pairs 
default action invoke interpreter interactively 
generalized mechanism support usual styles escapes 
tip prefixed commands csh single character job control keys 
actions may expect command 
example line maps strings characters 
interact send exec date send user hello world cc exit cz exec kill typed procedure called invoked 
automate fsck interaction just described user explicitly start interpreter type 
invokes complex action 
typed hello world seen terminal current date sent process user typed 
pairs exit suspend expect session interacting spawned process 
map characters passed uninterpreted current process 
appropriate maps simulate csh style job control actions 
instance pass control interactive expect interpreter analogous shell change jobs spawned shell resume interaction 
unrealistic amusing application character mapping script runs shell dvorak keyboard 
brevity lowercase letters mapped 
don libes proc dvorak interact return continue send send send send send send send send send send send send send send send send send send send send send send send send send send send send send log user scan exec shell shell spawn shell log user send user dvorak qwerty default send user enter sequences qwerty keys interact dvorak script interacts 
user switches typing dvorak qwerty 
dvorak translation occurs procedure dvorak defined proc 
dvorak interact gives character action corresponds sending dvorak counterpart 
sent user character echoed necessary current process 
return continue action causes dvorak interact return value continue caller 
interact caller happens earlier interact bottom script evaluates continue literally continues 
isn magical 
just tcl commands appropriately handled 
script chooses desired shell examining shell environment variable 
appends newline output stripped done scan equivalent scanf programming language 
script excessive feature interact intended 
works demonstrates number interesting aspects 

non interactive programs controlled differently interactive programs non interactive alternatives 
case alternatives controlled way quite original interactive program 
need learn ways doing things interactively non interactively 
example suppose want locate printer server 
described rm value file 
interactively editor search file correct printer scanning rm field 
automate switch completely different program awk 
alternatively just translate interaction doing hand send expect sequences 
fragment exactly 
larger script manipulated printers running lpc interactive interface bsd line printer system 
spawn ed expect discard character count send printer expect rm rm get value set string rm expect match scan range expect match expr server break look line entry send lines entry give expect scripts controlling interactive processes break script uses ed editor 
ed directed search printer 
printer returns sent get successive lines value located lines remain 
specialized tool awk better alternative aren familiar awk style processing 
claim expect script illustrates idea ignoring syntax differences automate procedure know interactively simply translating send expect sequences 

expect fast 
previous example demonstrated expect editor read file 
expect simpler ways reading files 
instance command send exec cat writes contents current process 
calling unix program read file may fast method lot faster having user type 
window environment cutting pasting alternative takes large amount time 
realistically speed hardly needed program simulates users 
speed expect operations described libes 
side effect discussed expect overrun input buffers designed human 
send supports slow option send specifically avoid problem 
controlled parameters describe number bytes send atomically length time wait packet 
send supports simulation actual human typing speed send modified weibull distribution common statistical tool simulate interarrival times 
algorithm driven random number generator user chosen parameters 
parameters describe average character interarrival times default word endings minimum maximum interarrival times variability shape 
errors simulated done user directly 
simplistic errors may generated embedding typing mistakes corrections desired send argument 
sophisticated approach expert system coroutine 

security passwd script shown earlier designed solely conformance testing 
system administrators want script embed comprehensive script set generic new user needs including account password 
unfortunately calling passwd script script problem passwd program designed solve 
passwords arguments programs seen ps similar programs 
don libes solution expect script generate passwords directly 
closes hole time forcing computer generated passwords generally difficult guess human generated passwords 
technique extend programs telnet ftp su human really need provide password 
solution expect script prompt password interactively expect user 
contrast program shell script prompting password needed expect prompt script passwords needed 
password programs user need enter script remember needed 
convenient run scripts background 
starting processes asynchronously shell prevents reading keyboard input 
expect scripts started synchronously 
fork disconnect commands move expect background 
example script reads password disconnects terminal sleeps hour goes execute commands require password 
system echo disable echoing send user password expect user send user echo newline system echo scan expect match pass strip terminating fork exit disconnect exec sleep spawn su expect password send pass commands follow script begins disabling echo password typed unseen 
exec manipulates standard accessible expect system command manipulation allowing affect terminal 
fork literally causes expect fork 
unix system call name returns child process id parent 
parent immediately exits 
shell detect normal program termination 
disconnect breaks association child process terminal rest script continue immune user logging 
paradigm provides secure way starting long running background processes require passwords 
works security schemes mit kerberos system 
order run process authenticated kerberos necessary spawn get ticket similarly ticket longer needed 
expect way achieve results 
choice inflexibility insecurity 
expect choice unnecessary best worlds 
expect scripts controlling interactive processes 
expect provides means automating interactive programs 
great programs unix domain lack non interactive alternatives 
expect leverages programs small amount programming effort 
expect solves variety problems programs don run non interactively rlogin telnet know re running interactively change behavior csh rn bypass stdio open dev tty crypt passwd don provide full functionality non interactively fsck ftp don provide user interface adb rogue 
new noninteractive versions result usefully called shell scripts return meaningful error codes longer require user interaction 
expect provides help want run programs interactively 
lack programmable interface partially automate interaction share control 
course ideal solution rewrite application programmable front 
new applications excuse tcl 
small efficient easy probably suffices tools 
building tcl application better fact solution expect 
tools don warrant tcl library old rewritten expect fast solution 
expect quite small 
sun current version 
includes entire tcl language 
expect built functions 
example expect doesn communications protocol know sophisticated file access methods 
doesn need 
invoke program 
time gives flexibility software 
need communicate serial line 
tip cu 
tcp socket 
telnet 
choice 
building block philosophy keeping unix tradition hooking small programs build larger ones 
respect expect functions new kind glue shell 
unfortunately shell job control designed interactive mind automatically control interactive processes 
expect job control generalized restriction 
forms job control interfere 
expect runs unix useful managing non unix sites long networked unix host 
telnet tip script login play usual interactive games 
site scripts exactly vms symbolics lisp machines 
vms wizards avoid unix entirely know see 

acknowledgments supported national institute standards technology nist automated manufacturing research facility 
funded nist navy manufacturing technology program 
don libes scott paisley wrote callback script 
john ousterhout responsible tcl expect written 
john expect 
am indebted 
people important observations wrote early scripts developing command semantics 
rob ken eric newton scott paisley steve ray sandy harry ira fuchs craig warren barry warsaw keith eberhardt jerry friesen dan bernstein 
mike cole andy alan help porting expect various unix platforms 
steve simmons joe gorman fixing bugs 
morris chuck sue anonymous computing systems reviewers gave extensive suggestions improving 
certain trade names products mentioned order adequately specify procedures equipment 
case identification imply recommendation endorsement national institute standards technology imply products necessarily best available purpose 

availability design implementation paid government expect public domain 
author nist credit program documentation portions 
expect may anonymously pub expect expect shar ftp cme nist gov request email delivery mailing library cme nist gov contents message subject line send pub expect expect shar august sites retrieved expect 

fsck unix programmer manual section sun microsystems mountain view ca september 
don libes expect uncontrollable fits interaction proceedings summer usenix conference anaheim california june 
john ousterhout tcl embeddable command language proceedings winter usenix conference washington january 
john ousterhout tcl overview tool command language facilities unpublished manual page university california berkeley january 
don libes expect user manual published nist ir national institute standards technology gaithersburg md don libes regression testing conformance testing interactive programs proceedings summer usenix conference san antonio texas june 
expect scripts controlling interactive processes don libes expect automate systems administration tasks proceedings fourth usenix large installation systems administration lisa conference colorado springs colorado october 
norman johnson samuel kotz continuous univariate distributions vol 
houghton mifflin new york ny 
don libes 
