pdfmef multi entity knowledge extraction framework scholarly documents semantic search jian wu jason killian huaiyu yang kyle williams sagnik ray choudhury suppawong tuarob cornelia caragea c lee giles information sciences technology computer science engineering pennsylvania state university university park pa usa computer science engineering university north texas denton tx usa abstract introduce pdfmef multi entity knowledge extrac tion framework scholarly documents pdf format implemented framework encapsulates open source extraction tools currently leverages pdfbox tet full text extraction scholarly document lter described document classi cation grobid header extraction parscit citation extraction pdffig ures gure table extraction algorithm extrac tion can run whole extraction tool module highly customizable users can sub stitute default extractors extraction tools prefer writing thin wrapper implement abstracts framework designed scalable capable running parallel using multi processing technique python experiments indicate system default setups cpu bounded leaves small footprint memory makes best run multi core machine best performance using dedicated server cores takes seconds average process one pdf document used index extracted information help users quickly locate relevant results published scholarly docu ments e ciently construct large knowledge base order build semantic scholarly search engine part running citeseerx digital library search engine categories subject descriptors h information search retrieval information ltering h digital libraries systems issues h systems software performance evaluation e ciency e ectiveness general terms metadata extraction introduction permission make digital hard copies part work personal classroom use granted without fee provided copies made distributed pro t commercial advantage copies bear notice full citation rst page copyrights components work owned others author s must honored abstracting credit permitted copy otherwise republish post servers redistribute lists requires prior speci c permission fee request permissions permissionsk cap october palisades ny usa copyright held owner author s publication rights licensed acm acm doi digital libraries completely changed way re searchers search relevant work almost knowledge domains estimated total number scholarly articles web english least million unprecedented growth publication papers authors nd di cult read relevant papers order locate useful results cases author cites paper just interested particular entity conclusion approach re sults table gure scholarly search engine can utilize entities help search foundation semantic scholarly search engine general scholarly document consists several entities header text body bibliogra phy gures tables math algorithms even chemical mulae header encapsulates title author names author liations author emails abstract publication year venue conference proceedings journals vol ume number pages series text body contains descriptive text including ascii non ascii charac ters bibliography list publications cited current paper usually appearing end scholarly document can named bibliography references even notes figures illustrative entities used present results certain trends used fre quently modern papers tables e ective presenting structured data experimental results algorithms usually expressed pseudo codes e ective present way solve computational problem math appears equations algorithms appear computer science papers also science domains mathe matics physics goal construct knowledge base scholarly document can encoded scholarly document ontology great deal e ort developing meth ods extracting speci c entities scholarly documents example apache pdfbox widely used ex tract text attributes pdf documents similar tools include poppler pdflib tet crawl based digital libraries title authors important clus tering near duplicate papers based assumption research papers exactly title authors existing open source header parsers include svmheaderparse grobid bibli ography parsers parscit grobid parses cita tions well existing table extraction tools include tabula automatic table extractors pdffigures gure extraction tool developed general aca demic documents captions gures biomedical pdf documents algorithm extraction tool developed addition crawl based digital li brary search engine needs lter returned documents classifying scholarly many existing tools extracting seman tic entities framework proposed integrate together unstructured information management architecture uima provides framework text based analysis converting unstructured data structured data however focuses text mining analyzing logs clinical notes automatic annotations framework aimed e ciently per forming multi entity extraction using existing open source software including limited plain text header ci tations gures tables algorithms framework designed modular scalable built wrap pers selection extraction tools pdfbox others can easily substituted another text extrac tor e g pdflib tet writing simple wrapper im plement interface parallelization also con gurable specifying number concurrent processes allowing code process large corpus scholarly documents multi core machine paper organized section describing typi cal metadata extraction system citeseerx illustrates challenges design new extraction framework including modules choose implement extraction tool section discuss design implemen tations section run framework random sample data show performance section de scribes applications potentially make use framework section summarizes discusses future work design current design metadata extraction system citeseerx includes following modules text extraction academic document lter citation extraction header extraction four modules assembled perl script java wrap per wrapper acts like job dispatcher started creates job folder launches multiple threads works batch job retrieving list un extracted documents crawl database pro cessing perl script text extraction module uses pdflib tet plain text extraction academic docu ment lter implements rule based classi er looks keywords phrases bibliography references variants full text citation extraction module uses parscit header extraction module em ploys svmheaderparse hereafter svmhp parscit svmhp require plain text input output parscit svmhp compiled single xml le used ingestion ingestion populates production database new document metadata adds documents production repository indexes full text extraction process limited logging function current extraction module following drawbacks limitations perl script di cult maintain poor portability python better although rule based document lter achieves generally high accuracy recall indicating misses signi cant fraction scholarly documents sophisticated clas si cation algorithm one developed based structural features supervised machine learning better svmhp evaluated header extraction tools results indicate grobid outperforms competitors dependent evaluation performed verify supe rior extraction performance grobid see current extraction limited textual content desirable integrate multiple extraction tools gures tables algorithms current extraction module limited logging function making di cult trace reason causing failed extraction current design optimized tet svmhp parscit making di cult switch extrac tion tools ad hoc design signi cantly limits applicability extraction system new design redesigning extraction framework faces several chal lenges first framework highly portable modular e relatively easy t another extraction tool framework plug unplug one modules framework example us ing tet plain text extraction instead pdfbox remove academic document lter cases requires developing adapter thin wrapper speci c extraction tool di erent tools writ ten di erent programming languages di erent api input output requirements etc accomplish framework de ne abstract interface implement wrapper deals input output les re turning standard extraction status speci cally wrap per makes system call run application api either command line service output error messages retrieved parsed wrapper deter mine status successful fail used control work ow logged pluggable feature requires centralized design module change needs minimal modi cation source code con gurations second de sign consider information shared modules make sure dependencies generated used framework waste time duplicate workload across multiple modules requires us de ne required optional modules arrange certain order example grobid takes pdf le input header extraction tools accept plain text full text prerequisite many extraction tools framework default always extracts full text rst place another example grobid used header citation extraction needs run extracting headers citation extrac tion module can work directly tei output third figure proposed architecture pi represents dividual process blue boxes enclose frame works framework must handle exceptions di erent extraction tools results appropriately example full text contains zero line treated failure extraction even empty text le generated high level design proposed framework de picted figure b similar except support di erent input modes mode job loader loads documents directly le system e folder containing pdf documents extracted convenient way run batch extraction job without setting crawl database repository job loader creates job pool works like set dictionary document paths derived equivalents keys pro cess job controller j ends job cleaner r cleans temporary les integrates extraction re sults writes extraction status log les j mod ule switches process o central job control works like commander reads external command e g stop command users periodically checking settings con guration le signal passed job controller stops fetching new documents current job list nished soft termination feature especially helpful framework running mode b retains integrity extraction jobs avoiding partially extracted documents framework brought shutdown rerun documents run deal documents partially extracted without status updated database mode b document list retrieved database job cleaner reports extraction status document database working mode b requires extra coding depends speci c database schemas focus design experiments framework database queries usually much faster extraction generally bottlenecks extraction framework process executes num ber extraction modules ems current default set figure pdfmef owchart tings include text extraction module tx scholarly doc ument lter sdf header extraction module hx ci tation extraction module cx table extraction module tbx gure extraction module fx algorithm extraction module agx two design options consid ered rst design option within process ems arranged sequentially e em invoked one previous one nished second design option within process em called subthread ems executed parallel choose rst substantial time di erence costs execute di erent ems example depending extractor citation extraction can ten times slower header ex traction see experiment results choose second design option subthread executing header extraction will idle citation subthread work ing contrast sequential arrangement utilizes cpus e ciently easier scale adding cores sequential arrangement also easier imple ment need deal synchronization issues example table extraction based full text keep idle full text extracted owchart sequential design depicted figure job controller job cleaner displayed full text header ems required ems op tional next section discuss default extraction tools em full text extraction commercial text extraction tools pdflib tet believed perform better open source counter part e g apache pdfbox however active development reasonable evalu ate based current versions testing sample comprised pdf documents randomly selected crawl database citeseerx sample contains non academic documents building ground truth text extraction feasible figure tet vs pdfbox numbers extracted characters words lines due extremely complicated formatting pdf les lack standard transformation schema pdf les text les perform baseline comparison one paper compare number extracted pdf les number lines characters words extracted pdf le use recent releases tet version pdfbox version time writing use linux built wc command count lines characters words results tabu lated table table implies pdfbox better performance terms number extractable pdf les although les neither can extract fact one le tet can ex tract pdfbox les otherwise figure compare number characters nchars words nwords lines nlines les extractable chart indicates pdfbox extracts characters lines tet extracts less words documents given current results dif cult conclude whether tet pdfbox can absolutely beat implement frame work tet paid software pdfbox free license will experiment pdfbox either tet pdfbox can executed launching system call successfully extracted document passed sdf otherwise dropped logged table tet vs pdfbox extractable les pdfbox pdfbox tet fail success overall tet success tet fail pdfbox overall successful extraction output contains least one line academic document filter rule based classi er discriminates academic non academic documents identifying textual patterns bibliography references terms full text sophisticated approach developed based set structural features using super vised machine learning algorithms four types struc tural features examples tabulated table table examples structural features file speci c features file size kilobytes page number text speci c features document length characters words lines ratio reference mentions tokens section speci c features appearance section names e g abstract etc content features appearance paper book etc enhance classi cation quality re train classi er new sample new sample extends training sam ple described adding manually labeled documents randomly selected crawl repository existing digital library also supplement sample set manually curated sets theses resume slides books labeling performed three people dependently veri ed domain expert revised training data yield excellent testing results precision recall fold cross validations knowledge best classi cation approach separate scholarly documents corpus crawled pdf documents given document lter takes full text pdf le lter needs obtain structural features directly pdf le input output boolean value header extraction lipinski et al compares list metadata extrac tion tools scienti c pdf documents based sample selected arxiv digital library partial score scheme used assess performance individual tools follow ing metadata elds title authors abstract also evaluate authors last names year information second third round evaluation evaluation grobid delivers best results signi cantly beats svmhp competitors attempt verify conclusion using heterogenous sample selected citeseerx goal investigate best performance grobid svmhp sample comprised papers whose titles authors mistakenly extracted svmhp corrected end users manually extract paper ti tles authors ground truth extract titles authors using grobid compare automatically extracted metadata ground truth focus titles authors essential elds crawl based digital library search engine evalua tion performed three people independently visually compares ground truth automat ically extracted metadata guideline user study consistent judging criteria posterior survey indicates users generally follow two principles words must parsed correctly qualify correct title extraction exceptions letters accent ligatures authors must parsed cor rectly qualify correct author extraction exceptions letters accent ligatures nal judgements reported based majority vote eld table shows evaluation results results general con sistent given heterogeneous property sample clear grobid outperforms svmhp signi cantly terms titles authors least best senario sample biased svmhp results table represent best performance grobid svmhp empirically cases grobid achieves comparably quality svmhp extracts well overall performance svmhp strongly motivates us employ grobid header extraction academic documents header extraction executes research papers corresponding em arranged sdf grobid can executed either stand alone service latter e cient loads required library les em handles errors output grobid appropriately service responding rst run grobid generate tei le ex tracts elds corresponding prede ned customizable metadata schema xml le table grobid vs svmhp title extraction grobid grobid svmhp incorrect correct overall svmhp correct svmhp incorrect grobid overall author extraction grobid grobid svmhp incorrect correct overall svmhp correct svmhp incorrect grobid overall citation extraction parscit citation extraction tool developed since grobid parses citations perform baseline com parison looking numbers ref erence items can extract quality ex tracted titles authors years three elds appear almost reference items regardless conference papers journal articles books exceptions citing website authors eld empty citing forthcoming paper year information missing existing datasets used benchmarking cita tion extraction cora dataset cite seerx dataset used however usually provide original pdf les input grobid therefore build ground truth manually extracting citations list selected papers rst experiment randomly select scholarly documents citeseerx compare number au tomatically parsed reference items real numbers comparison results tabulated table results indicate parscit grobid similar numbers parsed papers grobid tends parse citations table parscit vs grobid number parsed items parser parse match parse parscit grobid parse number pa pers automatic parsed items less real numbers meanings number match parse self explanatory comprehensive comparison citation extraction qual ity requires large number manually extracted references papers accurate automatic title author matching algorithm another issue align reference items automatic parsed items manually extracted results beyond scope paper focus papers cover typical citation styles conference journal papers plain text well extracted di erences grobid parscit minor however cases can make parsing results di erent first seems grobid work well reference items starting acronyms e g kh parsing references tends combine two consecutive titles form wrong title hand paper contains appendix following reference section parscit treats appendix part last reference string make mis takes control characters inserted among textual content basically grobid parscit ap plies conditional random eld explains cases work nearly equally well di erences likely due training samples one advantages parscit extracts cita tion context snippets text around location reference mention grobid extract cita tion context directly output tei le contains labels text body correspond labels reference items thus still possible extract citation context extra coding project use parscit default cita tion extracting tool table figure extraction one improvements new framework compared current one integration table gure algorithm ems couples existing open source tools extract tables gures table extrac tion algorithm proposed gure extraction algorithm proposed recently developed pack age called pdffigures can extract gures tables one command independent evaluation suggests takes seconds page can achieve f measure therefore arguably one best open source gure table extraction tools besides integrates gure table extractions need implement individual ems pdffigures executed calling compiled binary output directories gures json les set time seconds case program hangs pro cessing unusual le output json les concate nated single json le wrapper extracted gures tables saved png les output folder paper algorithm extraction algorithm extraction automatically extracts pseudo codes reference context papers generates synopsis pseudo code handful open source software dedicated algorithm extraction recent successful one developed hereafter algex core program written perl java wrapper takes text le output directory input pa rameters writes xml le supplied directory set timeout seconds extraction one goals framework abstract away logic coordinating running extraction process let user focus de ning actual logic extracting metadata framework implemented python python shown usable perl widely used academics one challenges python global interpreter lock gil present python s stan dard implementation e cpython gil prevents python interpreter executing one thread time result gil essentially prevents cpu bounded jobs able gain performance bene ts multi threading however multi processing su er gil limitations allows multi ple instances python interpreters therefore multi processing used instead multi threading order meet performance goals framework code split four main modules core module responsible main functionality frame work runs overall extraction process contains extractionrunner class users software library con gure execute extractions core module internally manages parallelization runnables module lets users de ne runnables contains base runnable class inherited extractor filter classes de ne extractors l ters user extends either extractor filter class overrides extract filter method respectively utils module contains various useful tools ex ample function called external process provides users easy way start pass data get result external process specifying time limit process finally log module contains logging han dlers extraction framework uses default full source code extraction framework available online github experiments validate framework run dedicate virtual server logical cores intel xeon e ghz server gb ram rst experiment set run pdf documents randomly selected existing digital library https github com seerlabs new csx extractor single process goal experiment investigate overall performance framework terms runtime module system resource consumed aver age runtime one document seconds figure illustrates distribution average runtime across ems among submodules algorithm extraction currently slowest followed citation extraction header extraction fastest taking sec onds per document average perform algo rithm extraction takes average seconds process one pdf le using single thread framework handles exceptions produced speci c extraction tools runs without hang crash average cpu usage less peak cpu usage happening two spikes runtime distribution depends actual extraction tools numbers reported give guide line terms ems opted time sensitive jobs figure average runtime per document sec onds distribution ems second experiment run framework dataset varying number processes goal investigate system resources cpu memory average runtime pdf change figure shows cpu usage increases lin early starting less asymptotically increases around keeps steady even increases clearly cpu fully used rest used operating system memory however increases slowly starting mb used less average runtime per document malized single thread runtime decreases quickly power law fashion less asymptotically reaches limit around sec onds respect single thread runtime coherence cpu usage average runtime im plies default implementation framework cpu bounded cpu usage follow strict lin ear relation processes total number cores believe due resources used speci c extraction tools may contain internal processes using multiple cores memory cache stacks overhead processes slow increase memory indicates framework leaves negligible footprint mem ory memory occupied library modules figure overall performance multiple pro cesses applications pdfmef can viewed knowledge capture framework capable encapsulating runnable knowledge capture tools organizing results usable maintainable modular scal able features can applied many knowledge capture projects case citeseerx digital library search engine provides free access six million academic docu ments metadata project frequently requested widely used various projects metadata quality urgent need improved due mistak enly extracted titles authors citations also fraction mis classi ed documents e non academic classi ed academic digital library hosts crawl database million pdf les signif icant improve metadata quality running pdfmef big repository build knowledge search engine extracted entities using automatic knowledge index ing technique can valuable platform authors quickly locate existing experimental results related work long proposed next generation search engine semantic e g cur rent solution google uses knowledge graph bil lions entities gathered wide variety sources entities logically linked answer user ques tions actually recent works attempted develop systems extract simple knowledge statements plain text science textbooks slight modi ca tion pdfmef can t system framework use plain text input knowledge extraction like wise useful build semantic academic search engine large knowledge base populated entities extracted academic documents allenai launched project called semantic scholar published number works knowledge extraction e g pdfmef framework can appropriate e cient solution projects obtain collection metadata paper knowledge entities summary future work developed pdfmef framework extracting multiple knowledge entities within scholarly documents consists following modules plain text extractor us ing pdfbox scholarly document lter header extractor using grobid citation extractor using parscit gures tables extractors using pdffigures algorithm extractor designed easily used maintainable modular scalable except full text extraction header extraction modules modules pluggable users can easily substitute default extraction tools preferred alternatives tested dedicated server cores takes aver age seconds per document run default extraction tools single thread minimum seconds launching processes framework leaves small footprint memory rst step constructing knowledge base scholarly ontology uses scholarly big data future work will build semantic scholarly ontol ogy scale also extended work scholarly related documents e g scholar resumes slides syllabi integrating system hadoop spark framework signi cantly boost system e ciency acknowledgments thank zhaohui wu useful discussions gratefully acknowledge support national science foundation references pd ib tet accessed poppler accessed tabula accessed s bhatia s tuarob p mitra c l giles algorithm search engine software developers proceedings rd international workshop search driven development users infrastructure tools evaluation suite pages new york ny usa acm c caragea j wu k williams s d gollapalli m khabsa c l giles automatic identi cation research articles crawled documents wsdm workshop web scale classi cation classifying big data web v k chaudhri b e john s mishra j pacheco b porter spaulding enabling experts build knowledge bases science textbooks proceedings th international conference knowledge capture k cap pages new york ny usa acm s choudhury p mitra kirk s szep d pellegrino s jones c l giles figure metadata extraction digital documents th international conference document analysis recognition icdar pages s r choudhury s tuarob p mitra l rokach kirk s szep d pellegrino s jones c l giles gure search engine architecture chemistry digital library jcdl pages c clark s divvala looking beyond text extracting gures tables captions computer science paper aaai workshop scholarly big data p clark p harrison large scale extraction use knowledge text proceedings fifth international conference knowledge capture k cap pages new york ny usa acm p clark p harrison n balasubramanian o etzioni constructing textual kb biology textbook proceedings joint workshop automatic knowledge base construction web scale knowledge extraction akbc wekex pages stroudsburg pa usa association computational linguistics t consortium tei p guidelines electronic text encoding interchange tei consortium councill c l giles m y kan parscit open source crf reference string parsing package proceedings sixth international conference language resources evaluation lrec marrakech morocco may european language resources association elra g councill c l giles h han e manavoglu automatic acknowledgement indexing expanding semantics contribution citeseer digital library proceedings rd international conference knowledge capture k cap pages new york ny usa acm o etzioni search needs shake nature d ferrucci lally uima architectural approach unstructured information processing corporate research environment natural language engineering r guha r mccool e miller semantic search proceedings th international conference world wide web www pages new york ny usa acm h han c l giles e manavoglu h zha z zhang e fox automatic document metadata extraction using support vector machines proceedings rd acm ieee cs joint conference digital libraries jcdl pages m khabsa c l giles number scholarly documents public web plos one e may p larsen m von ins rate growth scienti c publication decline coverage provided science citation index scientometrics m lipinski k yao c breitinger j beel b gipp evaluation header metadata extraction approaches tools scienti c pdf documents proceedings th acm ieee cs joint conference digital libraries jcdl pages new york ny usa acm y liu p mitra c l giles k bai automatic extraction table metadata digital documents proceedings th acm ieee cs joint conference digital libraries jcdl pages new york ny usa acm l d lopez j yu c n arighi h huang h shatkay c wu automatic system extracting gures captions biomedical pdf documents ieee international conference bioinformatics biomedicine p lopez grobid combining automatic bibliographic data recognition term extraction scholarship publications proceedings th european conference research advanced technology digital libraries ecdl pages berlin heidelberg springer verlag k seymore mccallum r rosenfeld learning hidden markov model structure information extraction aaai workshop machine learning information extraction b sun p mitra c lee giles k t mueller identifying indexing ranking chemical formulae chemical names digital documents acm trans inf syst apr s tuarob s bhatia p mitra c l giles automatic detection pseudocodes scholarly documents using machine learning icdar pages l wang p pfei er qualitative analysis usability perl python tcl proeedings tenth international python conference j wu k williams h h chen m khabsa c caragea ororbia d jordan c l giles citeseerx ai digital library search engine twenty sixth annual conference innovative applications arti cial intelligence iaai