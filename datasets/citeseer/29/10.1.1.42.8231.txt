quantitative modeling complex computational task environments keith decker victor lesser may department computer science university massachusetts amherst ma email decker cs umass edu phone fax technical report formal approaches specifying mental state agent entails perform particular actions 
approaches put agent center analysis 
questions purposes realistic convenient center analysis task environment domain society agents part 
presents task environment oriented modeling framework hand hand agent centered approaches 
approach features careful attention quantitative computational interrelationships tasks information available update agent mental state general structure task environment single instance examples 
task environment model analysis simulation avoids relying solely single instance examples provides concrete meaningful characterizations state general theories 
examples environments distributed sensor networks distributed design problems complex distributed simulations control processes distributed parallel ai application 
job shop scheduling application computational task environment 
control multiple distributed large grain parallel processors jointly responsible solving job shop scheduling problem computational task environment 
distributed sensor networks resources sensors resources typically primary scheduling consideration 
computational task environments problem domain control algorithms real time parallel local scheduling algorithms distributed coordination algorithms :10.1.1.42.5409
reason created tms framework rooted desire produce general theories ai 
consider difficulties facing experimenter asking environmental conditions particular local scheduler produces acceptable results overhead associated certain coordination algorithm acceptable frequency particular subtask interrelationships 
framework provides characterization environmental features concrete meaningful language state correlations causal explanations forms theories 
careful specification computational task environment allows strong analytic experimental methodologies including paired response studies ablation experiments parameter optimization 
local effects method quality method time potentially produce executed agent see section maximum quality amount elapsed time defer definition functions discuss non local effects section 
execution methods interruptible multiple methods single task available agent may switch typically alternative methods tradeoff time quality 
current amount progress execution interruptible execution start time finish time respectively gamma gamma typically model quality produced method linear growth function lin lin models linear quality functions proposed concave quality functions execute task quality begins accumulate convex quality functions quality achieved early method small increases occur mandatory optional parts quality functions 
desired easily defined 
example power representation consider main schools thought quality accumulation anytime algorithm camp design approximate processing camp :10.1.1.42.5409
represent ideas succinctly anytime algorithm model partial results available definition lin design time model results available quality accrue task complete definition dtt dtt including mean triangular including max summation general families binary functions respectively satisfy semantic requirements basic classes aggregation operators 
model effect interruptions reuse partial results non local effects see section 
boddy assumption monotonically decreasing gain 
difference design time dtt approaches show generative subjective additions model dtt assume fixed known estimator actual method response 
organizational structure agents imply portions vehicle track sensed agent 
model dsn problems vehicle track modeled task group 
simplest objective model task group associated track length objective structure dvmt vehicle location methods vlm represent processing raw signal data single location resulting single vehicle location hypothesis gamma vehicle tracking methods vtm represent short tracks connecting results vlm time results vlm time vehicle track completion method vcm represents merging complete vehicle track hypothesis 
non local enablement effects exist shown enable vtm enable lone vcm 
model develop expressions expected value confidence intervals time termination set agents arbitrary dsn environment static organizational structure coordination algorithm :10.1.1.49.5163
model analyze dynamic shot reorganization algorithm shown extra overhead worthwhile versus static algorithm 
case predict effects adding agents changing relative cost communication computation changing agents organized 
results achieved vtm vcm vlm vlm vlm vlm min vtm vtm min min min min method executable task task quality accrual subtask enables objective task structure associated single vehicle track 
direct mathematical analysis model verified simulation tms 
follow discussion dtt lin section simple state models 
basically non interruptible single processor method executions agent enters method execution state method time remains state time gamma 
method execution actions similar shoham terms private actions 
considered pre method execution method execution action set upper time limit computation proceed meta state 
agent monitor execution long methods interleave execution actions pre entirely :10.1.1.42.5409
communication 
actions agent affect agents 
communication actions allow agents affect beliefs limited extent 
people worked formalizing aspects communication semantics communication actions freely defined environment 
initial data sensed modeled lowering subjectively perceived value maximum quality weakly sensed data 
ghost track subjectively complete task group appearing agent actual vehicle track subjectively quality agent executes vcm method point true zero quality known 
track subjectively spans multiple agents sensor regions agent potentially identify track communication agents may belief track agent suffers 
turn control agents environment 
example simple static control algorithm uses meta level communication information algorithms :10.1.1.49.5163
static organization agents divide overlapping areas responsibility evenly possible resulting new areas responsibility agent overlap avoid redundant processing 
subjectively believed task structure described section communicated task results received information gathering actions agent time build list currently executable methods set precedence constraints 
time agent build list methods need executed precedence constraints met 
communication action algorithm broadcast highest level results task groups agent worked 
particular episode environment described tuple 
random variable drawn poisson distribution expected value extend generative model cover feature added objective subjective models sections need add likelihood sensor faulty noisy likelihood ghost track analysis summary briefly showed section predict performance system objective subjective models particular episode 
useful explaining predicting agent behavior particular episode scenario episodes real environment 
need build probabilistic models relevant objective subjective parameters viewed random variables generative level parameters 
companion details process assume agents start square geometry agents theta square agents arranged theta :10.1.1.49.5163
shows distributions objective parameters number vlm methods seen maximally loaded agent max number task groups seen agent defined just generative parameters 

total time termination agent receiving initial data set size time local combine results agents build completed results plus communication information gathering actions discussed section sd vlm gamma vtm gamma nd vtm nd vcm eq 
predictor combining probabilities values refer interested reader derivations verification applications results :10.1.1.49.5163
companion details process assume agents start square geometry agents theta square agents arranged theta :10.1.1.49.5163
shows distributions objective parameters number vlm methods seen maximally loaded agent max number task groups seen agent defined just generative parameters 

total time termination agent receiving initial data set size time local combine results agents build completed results plus communication information gathering actions discussed section sd vlm gamma vtm gamma nd vtm nd vcm eq 
predictor combining probabilities values refer interested reader derivations verification applications results :10.1.1.49.5163
note assumptions generative model change instance assume agents initially line side side square vehicles loop exiting sensed area probability distributions change form eqn 

agent coordination algorithm changes eqn 
change see :10.1.1.49.5163
predictor combining probabilities values refer interested reader derivations verification applications results :10.1.1.49.5163
note assumptions generative model change instance assume agents initially line side side square vehicles loop exiting sensed area probability distributions change form eqn 

agent coordination algorithm changes eqn 
change see :10.1.1.49.5163
simulation simulation useful tool learning parameters control algorithms quickly exploring behavior space new control algorithm conducting controlled repeatable experiments direct mathematical analysis complex 
simulation system built direct execution models tms framework supports example collection paired response data different coordination local scheduling algorithms compared identical instances wide variety situations generated generative level model 
simulation explore effect exploiting presence facilitation tasks multi agent real time environment quality accrued task deadline 
environmental generative characteristics included mean interarrival time tasks likelihood task facilitating strength facilitation oe 
simulation system built direct execution models tms framework supports example collection paired response data different coordination local scheduling algorithms compared identical instances wide variety situations generated generative level model 
simulation explore effect exploiting presence facilitation tasks multi agent real time environment quality accrued task deadline 
environmental generative characteristics included mean interarrival time tasks likelihood task facilitating strength facilitation oe 
tms framework limited experimentation distributed problem solving 
garvey lesser framework describe effects various task environment agent design features performance real time design algorithm :10.1.1.42.5409
manipulate objective subjective mapping examine questions monitoring execution tasks true method durations known 
show monitoring provide reduction missed deadlines reduction may significant medium loads 
garvey complex model enabling hindering task structures design optimal design time algorithm certain task environments 
tms framework modeling computationally intensive task environments 
tms provides environmental behavioral structures features state test theories control agents complex computational domains decisions scheduling task affect utility performance characteristics tasks 
tms mathematical framework simulation language executing experimenting models directly 
tms simulator supports graphical display generated subjective objective task structures agent actions statistical data collection clos ti explorer 
features help model building stage verification stage 
tms simulator research coordination distributed problem solvers research real time scheduling single agent scheduling agent parallel processing resources available soon learning coordination algorithm parameters :10.1.1.42.5409
tms time automatically learn models automatically verify 
taken initial steps designing methodology verification see open area research :10.1.1.49.5163
include building new models different environments may include physical resource constraints airport resource scheduling 
existing framework may extended somewhat handle consumable resources 
tms simulator supports graphical display generated subjective objective task structures agent actions statistical data collection clos ti explorer 
features help model building stage verification stage 
tms simulator research coordination distributed problem solvers research real time scheduling single agent scheduling agent parallel processing resources available soon learning coordination algorithm parameters :10.1.1.42.5409
tms time automatically learn models automatically verify 
taken initial steps designing methodology verification see open area research :10.1.1.49.5163
include building new models different environments may include physical resource constraints airport resource scheduling 
existing framework may extended somewhat handle consumable resources 
extensions envision include specifying dynamic objective models change structure result agent actions 
wish expand analyses questions scheduling coordination questions negotiation strategies emergent agent society behavior organizational self design 
appear journal group decision negotiation 
keith decker victor lesser 
generalizing partial global planning algorithm 
international journal intelligent cooperative information systems june 
keith decker victor lesser :10.1.1.49.5163
approach analyzing need meta level communication 
proceedings thirteenth international joint conference artificial intelligence chambery august 
keith decker victor lesser robert 
extending blackboard architecture approximate processing 
ieee transactions systems man cybernetics september 
alan garvey marty humphrey victor lesser 
task interdependencies design time real time scheduling 
proceedings eleventh national conference artificial intelligence washington july 
alan garvey victor lesser :10.1.1.42.5409
design time real time scheduling 
ieee transactions systems man cybernetics 
special issue scheduling planning control 
les gasser 
