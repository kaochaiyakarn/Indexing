incremental updates materialized oql views dieter torsten marc scholl university department mathematics computer science germany mail uni de 
discusses approach maintenance problem materialized views 
database application speci ed collections type extents classes need materialized 
exchange system maintains redundant views application data help minimize query response time 
understand views functions database objects examine algebraic properties functions particular linearity incremental update plans 
turns feasible employ odmg oql view de nition language inventing specialized majority clauses represent linear functions 
demands homomorphism linear parameters obviously su cient 
take 
de nition linearity 
usual zero zero denote monoids function 
linear th parameter denoted zero zero just set homomorphic mappings hom follows non linear functions self join known view maintenance results approaches relational algebras view de nition languages covered expressions relational algebra act homomorphic mappings monoid sets bags tuples monoid :10.1.1.144.2606
consider example 
de ne typical view qc ci types ii respectively 
denote predicates attribute list nal projection 
linear linear respect collection typed arguments composition linear functions linear 
interpretation choose expression inv bag remove elements multiplicity inv bag removal impossible contains expression inv bag undergoes interpretation represents element precise 
come back shortly 
lists remember commutative 
interpretation inv list list delete su resp 
pre consider inv list inv list inv list inv list :10.1.1.144.2606
su pre removal impossible expression interpreted 
ut key advantage approach monoid homomorphism de nes unique homomorphism corresponding groups group embed range destination monoids simple algebraic fact 
inv inv homomorphic mapping particular fold inv inv fold completes fold constructor wise de nition applied group elements 
considerations previous sections immediately apply destructive updates 
