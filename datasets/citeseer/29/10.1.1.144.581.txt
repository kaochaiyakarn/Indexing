university patras asynchronous iterative computations web information retrieval structures pagerank case gallopoulos daniel august technical report scg laboratory high performance information systems laboratory pythagoras ii nsf ccf 
repository gr ref conf malaga spain september 
final version appear conference proceedings 
computer engineering informatics department university patras gr patras greece www gr asynchronous iterative computations web information retrieval structures pagerank case gallopoulos daniel computer engineering informatics department university patras greece department mathematics temple university philadelphia usa 
ideas today web information retrieval specifically web search engines 
pagerank algorithm introduce content neutral ranking function web pages 
ranking applied set pages returned google search engine response posting search query 
pagerank part simple common sense concepts page important important pages include links 
ii page containing links reduced impact importance pages links 
focus asynchronous iterative schemes compute pagerank large sets web pages 
elimination synchronizing phases expected advantageous heterogeneous platforms 
motivation possible move large scale distributed platforms lies size matrices representing web structure 
orders magnitude pages nonzero elements bytes just store small percentage web crawled distributed memory machines necessary computations 
research part general objective explore potential asynchronous computational models underlying framework large scale computations grid 
area internet algorithmics appears offer occasions computations dimensionality candidates framework 
giving formulation pagerank common interpretations section treatment synchronous computational models 
consider asynchronous approach comment key aspects specifically convergence termination detection implementation 
section describe experimental framework preliminary numerical experiments section draw discuss topic 
common practice address effects finite precision arithmetic roundoff error 

formulation interpretations order appreciate pagerank computation standard formulation set matrices number pages modeled 
adjacency matrix obtained web crawl synthetically generated statistical results 
aij iff page points page aij 
transition matrix nonzero elements pij aij deg deg zero case page called dangling page deg aij outdegree page stochastic matrix pt wdt ne size vector dangling index vector nonzero elements di iff deg 
google matrix vet random web surfer visit page relaxation parameter probability choosing link accessible page 
choosing probability complete web page set vector contains respective conditional probabilities 
typically 
pagerank vector solution linear system gx matrix irreducible stochastic matrix largest eigenvalue magnitude max 
pagerank vector eigenvector corresponding max normalized stationary probability distribution pages random walk web invariant measure markov process modeled matrix computed solution system linear equations 
fact normalized unity equation yields relaxed stochastic matrix 

synchronous pagerank computation practical problem sizes considering necessary employ iterative method executing convergence suitable operator initial vector 
vector denotes approximation obtained iterations 
process needs mapped specific execution environment corresponding computational model typically preserves semantics mathematical model 
environment constitutes virtual machine computation largely characterized types units execution ue processes threads communication mechanisms shared memory message passing readily supports especially hardware 
execution communication entities ultimately hosted actual machines typically attached nets clusters internets internet 
single ue case aforementioned mapping execution environment straightforward 
multiple ues requires care shared memory case semantics preserving mapping involve synchronized access shared memory cells cooperating ues protected locks message passing case synchronization achieved barrier mechanism implemented atop collective blocking communication 
pagerank computation easily turn simple iteration gx 
amounts matrix vector multiplication 
known power method finding eigenvector corresponding eigenvalue largest magnitude step normalization needs performed 
normalization needed stochastic matrix alter danger overflow underflow 
single ue implementations emphasis convergence acceleration support personalization different teleportation vectors utilization naturally occurring block structure adjacency matrix 
multiple ues message passing computation pagerank formulation see 

asynchronous pagerank unfortunately necessary step synchronization synchronous algorithm described grows significant overhead especially governed rate slowest ue costs lock barrier management 
radical transformation harness problem reduce requirement synchronization non blocking access shared memory cells network buffers 
central theme investigate effect transformation convergence speed effectiveness computations 
environment ues denote set indices assigned ith ue iterative computation set times updated ith ue finishes computation time fragment available time ith ue produced respective jth ue 
ith ue updates fi times 
delays due omission synchronization phases expressed differences 
relation asynchronous analog fi expresses distributed operator component executing ith ue 
obviously form fi independent introduced 
follows normalization free power method pagerank computation ith ue reads gi xt ip times gi set rows google matrix indexed 
alternatively synchronous linear system equation approach lead iterative scheme form rx seen identical asynchronous formulation lead slightly different computational kernel ri xt ip bi times th ue 
ri set rows relaxed stochastic matrix indexed bi corresponding set elements vector interest computations pagerank fall multiple ues message passing category asynchronous nature 
important novelty studies dynamically generated link information notification protocol proposed integrated host web servers 
lack synchronization semantics original mathematical algorithm 
necessary discuss convergence properties asynchronous scheme 
discuss related issues remainder section 

convergence convergence asynchronous iterative algorithms usually established constructing sequence nested boxed sets spirit theorem theorem conditions 
synchronous convergence condition yk yk limit points yk fixed points box condition xn 
limit points fixed points 
process involves nonnegative matrix unit spectral radius proved corresponding asynchronous iteration converges true solution multiplicative factor easily factored renormalization 
discussion misconception authors nonnegative matrix spectral radius necessary condition convergence asynchronous normalization free power method 
hand process involves matrix 
asynchronous iterations matrices known converge true solution 
computing ue converged converged true pc pc send converge monitor recv monitor converged converged false send diverge monitor pc monitor ue recv converge diverge converged converged true pc pc send converged converged false pc 
pc persistence counter max value reaching triggers converge messages 
different values monitor computing ues computing ues 
termination detection termination asynchronous iterative algorithms non trivial matter local convergence ue automatically ensure global convergence 
extreme case ues locally converged devise scenarios messages delivered destroy local convergence 
centralized distributed protocols termination detection literature 
centralized approach special ue acts monitor convergence process computing ues keeps log convergence status issues messages computing ues signaled local convergence 
fact computing ues issue converge achieving local convergence diverge exiting state messages monitor ue 
distributed protocols global convergence detection see flexible complex implement 
typically assume specific underlying communication topology 
example leader election protocol turn assumes tree topology 
draft version practical centralized protocol part inspired 
enforces persistence convergence computing ues issuing converge message monitor ue issuing message 
persistence introduced provide time pending divergence causing messages delivered 

implementation focus multiple ues message passing environments case experiments 
case need non blocking communication primitives 
implemented multithreading thread communication channel multiplexing channels probing single thread select type mechanisms new data 
multiple messages received messages kept queues organized common discipline 

numerical experiments 
application structure application consists scripts steering java classes 
scripts written implementation python programming language java 
mixed language approach facilitates writing portable interactive easily extensible flexible systems performance critical operations isolated compiled class code 
scripts build objects 
configuration objects load store parameters configuration files accessible objects partition distribute matrix vector data optionally send code launch processes cluster nodes 
computation objects perform computations exchange information related convergence status monitor objects implementing termination detection protocol cf 

communications established communication objects set suitable communicators instantiation communicators expose communication primitives invoked step 
multithreading order implement non blocking communications 
asynchronous send recv just blocking counterpart wrapped thread object submitted thread pool endowed suitable task handling strategy 
data imported exported read write channels locks synchronizing concurrently executing threads happen managing messages identical source target ids 
access thread pool queues pending communication task handles provided customized thread management policy applied 
startup single file containing computation parameters available 
file configuration object generation node specific configuration files script distributing files optionally data updated source code files cluster nodes initiating computation 
option automatic report generation provided 

numerical results beowulf cluster pentium class machines mhz mb ram running linux version connected mbps ethernet lan 
java matrix toolkits java composing scripts classes freely available web 
report results ongoing 
transition matrix experiments stanford web matrix generated actual web crawl 
contains connectivity info pages non zero elements dangling nodes 
computational kernel local convergence threshold note case blocks consecutive rows distributed computing machines 
termination detection monitor computing ues 
configurations machines tested synchronous asynchronous computations 
results table encouraging 
synchronous asynchronous procs iters sec tmin tmax sec table numerical results asynchronous case iteration ranges computation time ranges max min values local convergence threshold simultaneously reached nodes 
column average speedup offered asynchronous computation synchronous averages extreme values asynchronous case 
hand fair note correspond reaching local convergence threshold 
assembling vector fragments resulting asynchronous computations monitor ue checking global convergence reveals threshold order reached 
preliminary results timing respect reaching common global threshold local reveals modest speedup asynchronous vs synchronous computation range 
responsibility degradation performance increasing number ue appears lie large communication computation ratio current algorithm 
observe important accurate values pagerank vector components relative ranking 
issue investigations effect relaxed global threshold criterion computed page ranks 
asynchronous iterative algorithms naturally adapt heavy communication demands computation current send receive threads block computation thread free advance step iteration 
contrary synchronous mode option exists blocking threads computation data emitted nodes reach destinations synchronization completes matter supporting network characteristics suffice 
case asynchronous computation exhibit low message import ratio respect iteration count obviously increased relative synchronous setting see table 
sender receiver id id id id completed imports id id id id table completed imports computing ues asynchronous case 
rows contain number different vector fragments received computation peers respective ids 
diagonal numerical entries contain total number locally computed locally vector fragments 
completed imports column contains percentage averages imports completed synchronous case 

major performance bottleneck experiments date due large volume data frequency produced 
caused small computation time iteration sparse matrix vector multiplication 
note communication pattern scheme step factors conspire surpass available network bandwidth build memory consuming buffers pending messages sending ends 
case asynchronous iterations data produced rate higher synchronous case part time gained eliminating synchronization phases production extra messages favorably advance local iteration counters unfortunately overload network guard cancelling send recv threads having completed time window 
hardly surprising experiments asynchronous iterative algorithms alternative computation methodology distributed environments 
black box methodology effectively utilized iterative methods heavy computational component light communication 
frequent fat message passing saturate network infrastructure capacity modest dedicated cluster environments heterogeneous environ ments grid sensitive message passing scenarios 
avoid communication schemes flexibility asynchronous iterations gives choice targets produced messages 
furthermore advisable employ adaptive communication scheme message sending receiving tasks fail complete number local iterations reduce rate message exchanges responding node 
ongoing explore adaptive schemes asynchronous computation pagerank 
experiment select implementations order amortize thread management costs 
trees naturally occurring internetwork topologies plan study performance moving clique synchronous iterative method asynchronous tree counterpart 
considering suitable permutations cf 
larger data sets 
acknowledgments authors partially supported pythagoras ii research 
third author partially supported nsf ccf 
authors professor providing access computational facilities physics department university athens 
java language website 
java sun com 
website 
www org 
matrix toolkits java website 
www math uib 
python language website 
www python org 
stanford web matrix 
nlp stanford edu data stanford web tar gz 
vernier 
decentralized convergence detection algorithm asynchronous parallel iterative algorithms 
ieee trans 
parallel distrib 
syst 

java environment distributed asynchronous iterative computations 
euromicro pdp pages 
ieee 
el baz 
method terminating asynchronous iterative algorithms message passing systems 
parallel algorithms applications 
bertsekas tsitsiklis 
parallel distributed computation 
prentice hall englewood cliffs nj 
broder kumar maghoul raghavan rajagopalan stata tomkins wiener 
graph structure web experiments models 
th int www conf 
choi 
application threshold partitioning sparse matrices markov chains 
pages 
ieee 
de jager 
pagerank distributed algorithms 
master thesis imperial college science technology medicine london sept 
del corso 
fast pagerank computation sparse linear system 
lecture notes computer science vol 
pages 

foster kesselman editors 
grid blueprint new computing infrastructure 
morgan kaufmann elsevier san francisco 

asynchronous iterations 
comput 
appl 
math 

fast parallel pagerank linear system approach 
technical report yahoo 

haveliwala kamvar jeh 
analytical comparison approaches personalizing pagerank 
technical report stanford univ july 
kamvar haveliwala manning golub 
exploiting block structure web computing pagerank 
technical report stanford univ march 
kamvar haveliwala manning golub 
extrapolation methods accelerating pagerank computations 
proc 
th int www conf may 
langville meyer 
survey eigenvector methods web information retrieval 
siam rev 
mitra 
chaotic algorithm computing fixed point nonnegative matrix unit spectral radius 
acm jan 
page brin winograd 
pagerank citation ranking bringing order web 
technical report stanford univ 
browne 
distributed pagerank systems 
th int symposium high performance distributed computing 
bertsekas 
finite termination asynchronous iterative algorithms 
parallel computing 

shi yu yang wang 
distributed page ranking structured networks 
icpp 
ieee 
stewart 
numerical solution markov chains 
princeton univ press 

mystery asynchronous iterations convergence spectral radius 
technical report department mathematics temple univ philadelphia oct 
tanenbaum van steen 
distributed systems principles paradigms 
prentice hall upper saddle river nj 

distributed pagerank comparisons simulation peer peer implementation algorithm 
master thesis imperial college science technology medicine london sept 
