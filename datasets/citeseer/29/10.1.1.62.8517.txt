logic programming multi agent systems robert kowalski sadri department computing imperial college london uk fs doc ic ac uk extension logic programming lp suitable rational component single agent reactive component encompass multi agent systems 
modify earlier abductive proof procedure embed agent cycle 
proof procedure incorporates abduction definitions integrity constraints dynamic environment changes observed inputs 
definitions allow rational planning behaviour integrity constraints allow reactive condition action type behaviour 
agent cycle provides resource bounded mechanism allows agent thinking interrupted agent record assimilate observations input execute actions output resuming thinking 
argue extensions lp accommodating multi theories embedded shared environment provide necessary multi agent functionality 
example intended models valued models clark equality theory cet definitions iff form open predicates 
correctness completeness proofs iff proof procedure adapted variant proof procedure relative semantics 
similar semantics proof procedure somewhat weaker completeness results 
discuss completeness proof procedure relative semantics 
restricted locally stratified logic program unique perfect model taken intended model :10.1.1.39.634
proof soundness proof procedure adapted proof procedure :10.1.1.39.634
top level semantics non restrictions imposed formulae variety different restrictions investigated 
fung kowalski mentioned return answers iff definitions ground positive atoms 
obtained generating disjunction equivalent initial problem statement disjuncts irreducible 
correctness completeness proofs iff proof procedure adapted variant proof procedure relative semantics 
similar semantics proof procedure somewhat weaker completeness results 
discuss completeness proof procedure relative semantics 
restricted locally stratified logic program unique perfect model taken intended model :10.1.1.39.634
proof soundness proof procedure adapted proof procedure :10.1.1.39.634
top level semantics non restrictions imposed formulae variety different restrictions investigated 
fung kowalski mentioned return answers iff definitions ground positive atoms 
obtained generating disjunction equivalent initial problem statement disjuncts irreducible 
positive atoms disjunct instantiated contain variables consistent formulae disjunct 
obtained generating disjunction equivalent initial problem statement disjuncts irreducible 
positive atoms disjunct instantiated contain variables consistent formulae disjunct 
ground positive atoms rewritten definitions iff form 
denecker hand construct general answers containing variables 
kowalski wetzel construct answers containing variables restricted conjunctions atoms negations positive atoms :10.1.1.39.634
focus agent application modified proof procedure refer reader technical details semantics :10.1.1.39.634

proof procedure proof procedure thinking component unified agent cycle 
combines backward reasoning means iff definitions forward reasoning means goals observations 
positive atoms disjunct instantiated contain variables consistent formulae disjunct 
ground positive atoms rewritten definitions iff form 
denecker hand construct general answers containing variables 
kowalski wetzel construct answers containing variables restricted conjunctions atoms negations positive atoms :10.1.1.39.634
focus agent application modified proof procedure refer reader technical details semantics :10.1.1.39.634

proof procedure proof procedure thinking component unified agent cycle 
combines backward reasoning means iff definitions forward reasoning means goals observations 
backward reasoning reduce goals subgoals logic programming forward reasoning check integrity constraint satisfaction deductive databases check integrity constraints consistent 
proceedings international workshop logic databases san italy springer verlag 
robert kowalski marek sergot 
logic calculus events 
new generation computing 
robert kowalski toni gerhard wetzel :10.1.1.39.634
executing suspended logic programs 
fundamenta informatica 
levesque reiter lesperance lin scherl 
golog logic programming language dynamic domains journal logic programming special issue reasoning action change 
