safe kernel extensions run time checking george peter lee school computer science carnegie mellon university pittsburgh pennsylvania cs cmu edu describes mechanism operating system kernel determine certainty safe execute binary supplied untrusted source 
kernel defines safety policy public 
policy application provide binaries special form called proof carrying code simply pcc 
pcc binary contains addition native code formal proof code obeys safety policy 
kernel easily validate proof cryptography consulting external trusted entities 
validation succeeds code guaranteed respect safety policy relying run time checks 
brief overview process generating validating safety proofs 
concrete showing safety policy defined proofs created generic assembly language 
followed description main experiment involving safe network packet filters 
benchmark results provide preliminary indication pcc methodology potential surpass traditional approaches safety point view maintaining improving performance 
particular show pcc leads faster safer packet filters previous approaches code safety systems software including berkeley packet filters software fault isolation programming safe subset modula :10.1.1.123.1419
conclude discussion remaining difficulties speculate necessary approach practical scale 
cpu code process untrusted client code kernel network server safety policy pcc enable validation source program compilation code safety binary native certification proof proof overview proof carrying code 
proof carrying code depicts process generating pcc binary 
process begins code consumer defining safety policy 
possible course eliminate need interpretation 
example replace packet filter interpreter compiler 
approach taken researchers 
problem startup cost complexity compilation especially serious optimizations performed 
approach safe code execution software fault isolation sfi :10.1.1.123.1419
sfi inexpensive method parsing binaries inserting run time checks memory operations 
flavors sfi depending desired level memory safety 
entire code runs single protection domain size power memory writes checked run time cost sfi relatively small 
hand untrusted code interacts frequently code consumer untrusted components residing different protection domains read operations checked overhead run time checks amount :10.1.1.123.1419
approach safe code execution software fault isolation sfi :10.1.1.123.1419
sfi inexpensive method parsing binaries inserting run time checks memory operations 
flavors sfi depending desired level memory safety 
entire code runs single protection domain size power memory writes checked run time cost sfi relatively small 
hand untrusted code interacts frequently code consumer untrusted components residing different protection domains read operations checked overhead run time checks amount :10.1.1.123.1419
serious disadvantage sfi ensure memory safety 
believe level safety general important able check abstraction boundaries representation invariants shown resource access example section 
order accommodate sfi packet filters allowed packet filter semantics 
example assumed kernel allocates packets byte boundary 
note packet filter semantics followed experiments specifies filter terminated tries access packet boundary 
means working packet filters semantics behave expected sfi semantics packet filters vice versa 
common way performing sfi code producer site usually part code generation phase compiler 
case code consumer performs load time checking sfi done correctly 
load time sfi validator simple deal binaries run time checks inserted potentially dangerous memory operation :10.1.1.123.1419
hand case validator accept binaries number run time checks optimized program analysis validator redo analysis led optimization 
means complex slower validation fact sfi validator presently exist 
inserted run time checks memory operations assembly language packet filters implemented pcc experiment 
process done simple easy trust implementation sfi 
available ftp ftp javasoft com docs ps zip 
cheng stone harper lee til type directed optimizing compiler ml 
conference programming language design implementation may pp 

anderson graham efficient software fault isolation :10.1.1.123.1419
th acm symposium operating systems principles dec acm pp 

kaashoek applicationspecific handlers high performance messaging 
acm sigcomm oct vol 
