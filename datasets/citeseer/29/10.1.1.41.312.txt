distributed environment centered agent framework john graham keith decker department computer information sciences university delaware newark delaware usa cis edu 
discuss internal architecture agent framework called decaf distributed environment centered agent framework 
decaf software toolkit rapid design development execution intelligent agents achieve solutions complex software systems 
research community perspective decaf provides modular platform evaluating disseminating results agent architectures including communication planning scheduling execution monitoring coordination diagnosis learning :10.1.1.36.7025
user programmer perspective decaf distinguishes removing focus underlying components agent building socket creation message formatting agent communication :10.1.1.36.7025
users may quickly prototype agent systems focusing domain specific parts problem graphical plan editor reusable generic behaviors various supporting middle agents :10.1.1.109.7954
briefly describe key portions decaf toolkit internal details agent execution framework 
modules completely realized decaf teaching purposes allowing student teams initially agent systems quickly build prototype multi agent information gathering systems 
decaf distributed environment centered agent framework toolkit allows defined software engineering approach building multi agent systems 
toolkit provides stable platform design rapidly develop execute intelligent agents achieve solutions complex software systems 
decaf provides necessary architectural services large grained intelligent agent communication planning scheduling execution monitoring coordination eventually learning self diagnosis :10.1.1.36.7025:10.1.1.36.7025
essentially internal operating system software agent application programmers strictly limited access 
control programming decaf agents provided gui called plan editor 
plan editor executable actions treated basic building blocks chained achieve larger complex goal style material supported national science foundation 
iis 
iis 
htn hierarchical task network 
provides software component style programming interface desirable properties component reuse eventually automated planner design time error checking 
chaining activities involve traditional looping constructs 
part decaf extension retsina taems task structure frameworks :10.1.1.19.714:10.1.1.42.8231
traditional software engineering action attached performance profile updated internally decaf provide real time local scheduling services 
reuse common agent behaviors increased execution behaviors depend specific construction task network dynamic environment agent operating 
example particular agent allowed search result achieved application instance agent executing behavior result available certain time application instance 
construction allows certain level non determinism agent action building blocks 
example particular agent allowed search result achieved application instance agent executing behavior result available certain time application instance 
construction allows certain level non determinism agent action building blocks 
part decaf design design criteria scheduling umass 
goals architecture develop modular platform suitable research activities allow rapid development third party domain agents provide means quickly develop complete multi agent solutions combinations domain specific agents standard middle agents take advantage object oriented features java programming language 
decaf distinguishes agent toolkits shifting focus away underlying components agent building socket creation message formatting details agent communication :10.1.1.36.7025
sense decaf provides new programming paradigm writing lines code include system calls native operating system read socket decaf provides environment allows basic building block agent programming agent action 
conceptually think decaf agent operating system 
code action calls decaf framework send messages search agents implement formally specified coordination protocol 
interface framework strictly limited set utilities remove possible need understand underlying structures 
jack extensive tool set development 
capabilities decaf described user matchmaker agent 
currently developing protocol standard advertisement 
similar decaf jack analyze plans decisions sequential execution respond event failure decide sufficient conditions exist enable action 
functionally decaf retsina taems :10.1.1.36.7025:10.1.1.19.714
decaf restructured provide platform rapid development agents platform researching specific areas agent interaction 
decaf written java extensive java threads capabilities improve performance agent runs concurrently thread 
decaf supports general way map kqml messages achieve arbitrary plan fragments associated precondition values provisions 
decaf currently uses retsina agent name server compatible middle agents released 
decaf written java extensive java threads capabilities improve performance agent runs concurrently thread 
decaf supports general way map kqml messages achieve arbitrary plan fragments associated precondition values provisions 
decaf currently uses retsina agent name server compatible middle agents released 
decaf migrating htn task structure representation hybrid taems retsina 
example taems task relationships enables explicitly modeled task provisions parameters :10.1.1.19.714
terms basic functionality agents able provide decaf supports newell description architecture set processing units realize symbol processing system 
case decaf operating system symbols processed kqml messages 
having structure may easier compare architecture capabilities fashion wallace laird 
new feature decaf toolkit relationships agent actions easy specify plan editor 
new feature decaf toolkit relationships agent actions easy specify plan editor 
temporal logical relationships defined graphically 
currently temporal relationship happens 
compares complicated language specification concurrent metatem 
metatem system may contains number concurrently executing agents communicating broadcast message passing :10.1.1.36.7025
decaf retsina java 
agents parallel ability accomplish point point messaging java threads 
agent specification formalism desire 
desire explicitly models knowledge interaction coordination complex tasks reasoning capabilities agent systems 
briefly describe key portions decaf toolkit internal details agent execution framework 
decaf operation basic operation decaf requires components agent name server ans agent program plan file decaf framework purpose ans similar name servers dns domain name server generic unix systems 
idea new agent register existence ans 
registration consists socket number host name 
agent registered agents wishing communicate contact ans determine recipient currently working :10.1.1.36.7025
ans respond address communications carried directly agents :10.1.1.36.7025
looking name phone book white pages making call 
name phone book able call 
similarly agent registered ans agent able communicate :10.1.1.36.7025
decaf operation basic operation decaf requires components agent name server ans agent program plan file decaf framework purpose ans similar name servers dns domain name server generic unix systems 
idea new agent register existence ans 
registration consists socket number host name 
agent registered agents wishing communicate contact ans determine recipient currently working :10.1.1.36.7025
ans respond address communications carried directly agents :10.1.1.36.7025
looking name phone book white pages making call 
name phone book able call 
similarly agent registered ans agent able communicate :10.1.1.36.7025
agent ans interaction shown 
agent registered agents wishing communicate contact ans determine recipient currently working :10.1.1.36.7025
ans respond address communications carried directly agents :10.1.1.36.7025
looking name phone book white pages making call 
name phone book able call 
similarly agent registered ans agent able communicate :10.1.1.36.7025
agent ans interaction shown 
agent programmer perspective interactions ans occur automatically scenes 
capability fairly routine implemented agent systems 
decaf currently uses cmu retsina ans 
startup module part plan file initialization module add task queue immediate execution 
lastly plan file may incomplete sense portions plan known results previous actions complete interleaved planning execution 
case initialization module build place holders order complete action tree 
specific task structures read plan file listed plan library currently changed agent lifetime see discussion decaf planner 
thing agent initialization module register ans set socket network communication :10.1.1.36.7025
dispatcher agent initialization done control passed dispatcher waits incoming kqml messages placed incoming message queue 
incoming message contains kqml performative associated information 
incoming message result actions dispatcher 
message attempting communicate part ongoing conversation :10.1.1.36.7025
thing agent initialization module register ans set socket network communication :10.1.1.36.7025
dispatcher agent initialization done control passed dispatcher waits incoming kqml messages placed incoming message queue 
incoming message contains kqml performative associated information 
incoming message result actions dispatcher 
message attempting communicate part ongoing conversation :10.1.1.36.7025
dispatcher distinction recognizing kqml reply field designator indicates message part existing conversation 
case dispatcher find corresponding action pending action queue set tasks continue agent action 
second message may indicate part new conversation 
case message reply field 
returned agenda queue completion 
action exists pending action queue error message returned sender 
agent construction major goals building decaf framework enable rapid development agent actions agent programming 
accomplished removing agent interaction requirement programmers hands 
developer need write communications code worry multiple invocations agent parse schedule incoming messages learn application programmer interface api order write program agent decaf architecture :10.1.1.36.7025
note plan file incorporates data flow agent programmer write code data flow actions 
plan file represents agent programming leaf node program represents program user write 
action takes inputs parameters list provisions produces output result classified exactly outcome 
writing agent code java method corresponding entry point agent action 
