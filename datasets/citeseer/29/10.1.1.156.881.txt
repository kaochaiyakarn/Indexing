comparison peer peer search methods dimitrios computer science department university maryland cs umd edu nick roussopoulos computer science department university maryland nick cs umd edu peer peer networks major research topic years 
object location major part operation distributed systems 
overview search methods unstructured peer peer networks 
popular file sharing applications enormous amounts data daily exchanged operate networks 
analyze performance algorithms relative success rates bandwidth consumption adaptation changing topologies 
simulation results empirically evaluate behavior direct comparison 

peer peer computing represents notion sharing resources available edges internet 
initial success resulted subsequent appearance numerous systems emerges dominant model networks 
paradigm dictates fully distributed cooperative network design nodes collectively form system supervision 
advantages cases include robustness failures extensive resource sharing self organization load balancing data persistence anonymity today popular applications operate unstructured networks 
networks peers connect ad hoc fashion location documents controlled system guarantees success search offered users 
bandwidth consumption attributed applications amounts considerable fraction total internet traffic 
obvious nature data discovery retrieval great importance user broad internet community 
examine problem object discovery unstructured networks 
nodes requests ob copyright held author owner 
international workshop web databases webdb 
june san diego california 
jects want retrieve local repositories 
search process includes aspects query forwarding method set nodes receive query related messages form messages local processing locally stored indices maintenance current search algorithms aim bandwidth efficient adaptive object discovery networks 
search methods categorized blind informed 
blind search nodes hold information relates document locations informed methods exists centralized distributed directory service assists search requested objects 
describe current approaches categories analyze performance 
focus behavior algorithms metrics efficiency object discovery bandwidth consumption adaptation rapidly changing topologies 
metric measures search accuracy number discovered objects request 
important applications gives users broader choice object retrieval 
minimizing message production represents high priority goal distributed systems 
important search algorithm adapts dynamic environments networks users frequently enter leave system update collections 
evaluate analysis simulate described methods quantitative comparison performance 
identify conditions method effective 
section related 
section categorizes describes current search techniques section simulation results 

related peer peer networks studied lot years 
large amount information computing taxonomies definitions current trends applications related companies obtained individual sources 
computing described basic terminology taxonomies description systems 
brief summarization gnutella napster search approaches structured networks included 
gnutella napster focus measurement studies attempts detailed characterization participating hosts measures locality stored transferred documents 
traffic measurement popular networks conducted border routers large isp 
extensive results traffic attributed akamai systems 
quantitative comparisons search methods original gnutella algorithm papers :10.1.1.12.3389
main comparison metric bandwidth consumption 
presents thorough comparison proposed algorithm blind search schemes variety metrics 
focuses exclusively search unstructured networks experimental comparison methods certain criteria 

search algorithms framework general framework peers communicate search object share 
examine proposed algorithms part 
peer retains local collection documents requests wishes obtain 
documents stored various nodes network 
peers documents objects assumed unique identifiers object ids specify query target 
search algorithms way dictate object placement replication system 
allowed alter topology overlay 
nodes directly linked overlay neighbors 
node aware existence identity neighbors 
nodes keep soft state information erased short amount time query process 
search assigned identifier soft state enables peers distinction new queries duplicate ones received due cycle 
search successful discovers replica requested object 
ratio successful total searches called success rate accuracy 
search result multiple discoveries hits replicas object stored distinct nodes 
global ttl parameter represents maximum hop distance query reach gets discarded 
search taxonomy possible strategies search unstructured network search blind fashion trying propagate query sufficient number nodes order satisfy request utilize information document locations perform informed search 
semantics information range simple forwarding hints exact object locations 
placement information vary centralized approaches central directory known peers exists 
distributed approaches individual peer holds piece information :10.1.1.12.3389:10.1.1.123.8939
categorize search algorithms model network designed operate 
pure systems participating peers play roles client server 
algorithms operate hybrid architectures certain nodes assume role super peer rest leaf nodes 
super peer acts proxy neighboring leaves indexing documents servicing requests 
blind search methods gnutella original gnutella algorithm uses flooding bfs traversal underlying graph object discovery contacts accessible nodes value 
simple manages discover maximum number objects region approach scale producing huge overhead large numbers peers 
modified bfs variation flooding scheme peers randomly choosing ratio neighbors forward query :10.1.1.12.3389
algorithm certainly reduces average message production compared previous method contacts large number peers 
iterative deepening similar approaches consecutive bfs searches increasing depths described 
algorithms achieve best results search termination condition relates user defined number hits possible small flood satisfy query 
different case produce bigger loads standard flooding mechanism 
random walks random walks requesting node sends query messages equal number randomly chosen neighbors 
messages follows path having intermediate nodes forward randomly chosen neighbor step 
queries known walkers 
walker terminates success failure 
failure determined different methods method checking method walkers periodically contact query source asking termination conditions satisfied 
algorithm important advantage significant message reduction achieves 
produces messages worst case number seldom depends underlying network 
simulation results show messages reduced order magnitude compared standard flooding scheme 
achieves kind local load balancing nodes favored forwarding process 
serious disadvantage algorithm highly variable performance 
success rates number hits vary greatly depending network topology random choices 
finding object depends slightly hop distance 
drawback method inability adapt different query loads 
queries popular unpopular objects treated exact manner 
random walkers learn previous successes failures displaying high variability ranges requests 
new search protocols operate hybrid networks appearance guess algorithm builds notion ultrapeers 
ultrapeer connected ultrapeers set leaf nodes peers shielded nodes acting proxy 
search conducted iteratively contacting different ultrapeers necessarily neighboring ones having ask leaf nodes number objects 
order ultrapeers chosen specified 
gnutella gnutella super peer hub receives query leaf forwards relevant leaves neighboring hubs 
hubs process query locally forward relevant leaves 
nodes visited algorithm 
neighboring hubs regularly exchange local repository tables filter unnecessary traffic 
details protocols formulating observe rely dynamic hierarchical structure network 
similar solutions reducing effects flooding utilizing structure hybrid networks 
number leaf nodes super peer kept high node arrivals departures 
important condition order reduce message forwarding increase number discovered objects 
informed search methods intelligent bfs informed version modified bfs algorithm :10.1.1.12.3389
nodes store query tuples answered requests neighbors order rank 
peer identifies queries similar current query similarity metric forward set number neighbors returned results queries 
hit occurs query takes reverse path requester updates local indices 
approach focuses object discovery message reduction 
cost increased message production compared modified bfs update process algorithm increases number hits 
achieves high accuracy enables knowledge sharing induces overhead node arrivals departures 
hand message production large increases time knowledge spread nodes 
shows easy adaptation object deletions peer departures 
happens algorithm utilize negative feedback searches forwarding ranking 
accuracy depends highly assumption nodes specialize certain documents 
aps aps node keeps local index consisting entry object requested neighbor 
value entry reflects relative probability node neighbor chosen hop request specific object 
searching deployment independent walkers probabilistic forwarding 
intermediate node forwards query neighbors probability local index 
index values updated feedback walkers 
walker succeeds fails relative probabilities nodes walker path increased decreased 
update procedure takes reverse path back requester take place walker optimistic update approach hit pessimistic update approach 
aps exhibits plausible characteristics result learning feature 
node deployed walkers updates indices search results peers eventually share refine adjust search knowledge time 
walkers directed objects redirected object deletion occurs 
aps bandwidth efficient achieving similar levels random walks 
induces zero overhead network join leave update operations displays high degree robustness topology changes 
aps modification adaptively switches optimistic pessimistic approaches reduces amount messages 
showed algorithm majority discovered objects located close requesters 
advantages mainly seen different peers contribute big workloads 
aps gains knowledge build increased peer cooperation 
local indices node indexes files stored nodes certain radius answer queries behalf 
search performed bfs manner nodes accessible requester certain depths process query 
minimize overhead hop distance consecutive depths 
approach resembles search schemes hybrid networks 
method accuracy hits high contacted node indexes peers 
hand message production comparable flooding scheme processing time smaller node processes query 
scheme requires flood node joins leaves network updates local repository overhead larger dynamic environments 
routing indices ri documents assumed fall number thematic categories 
node knows approximate number documents category retrieved outgoing link neighbor nodes accessible 
query termination condition relates minimum number hits 
forwarding process similar dfs node satisfy query condition local repository forward neighbor highest goodness value 
different functions rank links expected number documents discovered defined 
algorithm backtracks results needed 
keyword search approach trades index maintenance overhead increased accuracy 
search bandwidth efficient ris require flooding order created updated method suitable highly dynamic networks 
stored indices inaccurate due thematic correlations counts counts document partitioning network cycles 
node holds bloom filters neighbor 
filter depth summarizes documents hops away specific link 
nodes forward queries neighbor smaller depth bloom filter matches hashed representation object id certain number steps search unsuccessful handled deterministic algorithm backtracking 
method exhibits characteristics previous ones 
scheme expectation find replica object high probability 
index maintenance requires flooding messages initiated nodes arrive update collections 
distributed resource location protocol nodes information location file forward query neighbors certain probability 
object query takes reverse path requester storing document location nodes 
subsequent requests nodes indexed location information directly contact specific node 
node currently obtain document just initiates new search described 
algorithm initially spends messages find locations object 
subsequent requests take message discover 
obviously small message production achieved large workload enables initial cost amortized searches 
rapidly changing networks approach fails nodes perform blind search 
affects number hits blind searches results direct queries take place replica retrieved 
scheme dependent network application parameters 

simulation results section results described methods guess random walks modified bfs intelligent bfs aps 
simulated methods representative blind search schemes 
rest informed methods require user initiated index updates 
due space limitations briefly summarize simulation model 
details 
random graph nodes average degree generated gt itm simulate overlay structure 
assume pure model peers equally forward requests 
results comparing aps guess hybrid topologies 
queries objects object popular object 
qualitatively similar results produced larger number objects simulations 
objects stored network replication distribution nodes requests query distribution popular objects get requests unpopular ones 
zipfian distribution parameter model achieve workloads similar observations highest ranked objects amount total number stored objects receive requests 
requester nodes randomly chosen represent total number nodes 
requester queries 
parameter set algorithms larger values produced similar results 
simulate dynamic network behavior insert line nodes remove active ones varying frequency 
keep approximately network nodes active arriving nodes start functioning prior knowledge 
objects re distributed frequently model file insertions deletions 
object re location follows initial distribution parameters 
intelligent bfs method modified allow object id requests 
index values peers represent number replies object neighbor 
nodes simply choose highest ranked neighbors query forwarding 
modified bfs blind search nodes randomly choose half neighbors average forward query 
guess implementation peers deploy random walkers 
nodes paths walkers forward query neighbors 
simulations random walks aps guess 
simulate algorithms different environments static case dynamic operations 
dynamic setting topology changes average times objects relocated times run 
highly dynamic setting topology changes times objects relocated times run 
figures results methods 
expected modified intelligent bfs show extremely high accuracy return hits 
message production order magnitude original gnutella scheme produce orders magnitude schemes 
informed method produces times messages manages find times objects 
algorithms affected changing environment achieve similar results settings 
environments similar setup modified method preferred intelligent performance equally high simpler 
expect informed method perform better specialized environments described mainly number hits algorithm goals :10.1.1.12.3389
random walks displays low accuracy finds object query average 
bandwidth consumption quite low messages performance hardly affected dynamic operations 
guess behaves similarly exception steadily accurate discovering objects query 
hand produces twice number messages random walks 
general algorithms appear robust increased network variability 
reasonable walkers randomly directed regard topology previous results 
aps achieves success rate static run number drops settings 
metric reasonably affected number discovered objects cut third 
happens takes time learning feature adapt new topology success rate static dynamic highly dynamic messages request static dynamic highly dynamic mod bfs int bfs guess aps mod bfs int bfs guess aps success rate messages query hits request static dynamic highly dynamic mod bfs int bfs guess aps hits query paths discovered objects frequently disappear 
hand manages keep messages levels producing search 
aps exhibits performance compared non bfs related schemes bandwidth efficient bfs related techniques 
algorithm exhibits interesting characteristics 
message production low messages request small increase network dynamic 
simulations count direct contact node message link exist overlay 
dynamic behavior causes stored addresses frequently stale initial flooding performed 
reason decrease accuracy static case respectively 
produces amount messages initial search modified bfs needs successful requests amortize initial cost 
number objects discovers small ranging 
forced flooding times number hits increases 
successful produces messages finds replica request 
despite fact notice proves bandwidth efficient expect increase justify flooding requests 
due fact nodes making requests obtain pointer object 
node initiates flood neighbors forward node 
scheme ideal relatively static environments large workloads exception number hits close 
observation affected object relocation node departures 
shows object popularity affects accuracy schemes highly dynamic environment 
results similar settings 
popular objects stored nodes receive requests 
popularity decreases move right axis 
data point represents accuracy methods objects second objects bfs methods exhibit high accuracy intelligent bfs performing marginally better modified bfs 
random walks guess aps show decreasing accuracy popularity drops aps clearly outperforming 
difference large medium popular objects 
exhibits increasing accuracy popularity drops 
explained fact popular objects receive considerably fewer queries 
object relocations node departures affect algorithm happen frequently requests objects 
shows number hits affected number requests object 
object uniformly stored network nodes 
bfs schemes show stable performance previous simulations exception modified bfs produces messages discovers objects intelligent bfs messages hits respectively 
notice guess random walks gain increased workload exhibit results similar previous simulations 
aps takes advantage increased requests discover times objects 
hand discovers decreasing number documents nearly times fewer hits final run requests object increase 
happens requests fewer nodes perform flooding object discovered search 
time message production drops reason 
success rate int bfs mod bfs aps guess hits request guess aps object popularity requests object success rate vs object popularity 
popularity decreases left right number hits number requests object increases static network 
presents overview current search techniques unstructured networks 
analysis simulations focus metrics accuracy bandwidth production discovered objects 
flood schemes int bfs mod bfs exhibit high performance high cost 
blind methods random walks guess simple greatly reduce bandwidth production generally fail adapt different workloads environments 
conversely informed methods achieve great results incur large overheads due index updates 
aps require costly updates 
performs best relatively static environments uses adaptive nature achieve performance low cost 
aps particularly favors nodes prolonged stay network discovery popular objects 
plan giving emphasis index update process imposed overhead network 
allow thorough comparison informed search methods 

impact file sharing service provider networks 
industry white openp website www openp com 
peer peer working group www peer org 
project jxta www jxta org 
microsoft net www microsoft com net 
milojicic lukose pruyne richard rollins xu 
peer peer computing 
technical report hpl hp 
gnutella website gnutella wego com 
napster website www napster com 
saroiu gummadi gribble 
measurement study peer peer file sharing systems 
technical report uw cse un 
washington 
chu levine 
availability locality measurements peer peer file systems 
spie 
sen wang 
analyzing peer peer traffic large networks 
sigcomm internet measurement workshop 
saroiu gummadi dunn gribble levy 
analysis internet content delivery systems 
osdi 
gunopulos :10.1.1.12.3389
local search mechanism peer peer networks 
cikm 
lv cao cohen li shenker 
search replication unstructured peer peer networks 
ics 
roussopoulos 
adaptive probabilistic search aps peer peer networks 
technical report cs tr un 
maryland 
daswani fisk 
gnutella udp extension scalable searches guess 
crespo garcia molina 
routing indices peer peer systems 
icdcs july 
yang garcia molina 
improving search peer peer networks 
icdcs 

ultrapeers step gnutella scalability 
stokes 
gnutella specifications part www gnutella com gnutella search htm 
rhea kubiatowicz 
probabilistic location routing 
infocom 

probabilistic scalable resource location services 
sigmetrics perf 
eval 
review 
zegura calvert bhattacharjee 
model internetwork 
infocom 
