information flow analysis logical form torben anindya banerjee department computing information sciences kansas state university manhattan ks usa ab cis ksu edu 
specify information flow analysis simple imperative language hoare logic 
logic facilitates static checking larger class programs checked extant type approaches program deemed insecure contains insecure subprogram 
logic interpretation program traces independence program variables explicit 
precise approaches hoare logic approach require theorem prover generate invariants 
demonstrate modularity approach showing frame rule holds logic 
insecure terminating program show strongest postconditions employed statically generate failure explanations 
specifies information flow analysis hoare logic considers application logic explaining insecure flow information simple imperative programs 
system high secret low public inputs outputs security lattice classic security problem enforce confidentiality policy protect secret data prevent leaks secrets public output channels 
information flow analysis checks program satisfies policy 
denning denning formulate information flow analysis confidentiality 
subsequent advances comprehensively summarized survey sabelfeld myers :10.1.1.10.3979:10.1.1.152.7398
oft approach specifying static analyses information flow security type systems :10.1.1.152.7398
security types ordinary types program variables expressions annotated security levels 
security typing rules prevent leaks secret information public channels 
example security typing rule assignment prevents data assigned variable 
typed program protects secrets information flows program execution 
security literature protects secrets formalized noninterference described terms indistinguishability relation states 
supported nsf ccr ccr program states indistinguishable agree values variables 
noninterference property says runs program starting initial states indistinguishable yield final states indistinguishable initial states may differ values variables values variables final states agree current values variables 
reading noninterference property form dependence output independent inputs 
notion independence explicit information flow analysis specified 
shortcoming usual type approaches information flow type system imprecise :10.1.1.40.1122:10.1.1.101.441:10.1.1.152.7398
consider sequential program type type program rejected security type system account assignment 
program obviously satisfies noninterference final states runs program value indistinguishable admit programs 
inspiration comes interpretation viewed method statically computing approximations program invariants 
benefit view static abstraction program invariant annotate program preand postconditions annotated program checked logic 
information flow analysis invariant interest independence variables notation denote independent idea holds provided runs called traces formalized section initial value variables agree current value just convenient restatement noninterference tie static notion variable independence 
set program traces potentially infinite approach statically computes finite abstraction set independences describes set traces formalized section 
formulate section hoare logic checking independences show section checked program satisfies noninterference 
assertion language logic decidable just language finite sets independences subset inclusion 
specifications logic form 
precondition show section compute strongest postconditions programs loops necessitates fixpoint computation show logic deems program secure strongest postcondition program contains independence 
approach falls type analysis full verification verification conditions loops depend loop invariants generated theorem prover 
approximate invariants fixpoint computation 
approach modular show logic satisfies frame rule sec initial value variable value execution program 
set independences finite lattice fixpoint computation terminate 
tion 
frame rule permits local reasoning program relevant independences program occurs program 
larger context frame rule allows inference describing independences store modifications holds provided modify variable appears reason slice store touches 
analogy start specification initial specification show section strongest postconditions statically generate failure explanations insecure terminating program 
program fragment precondition contains strongest postcondition contain know statically offending fragment 
may expect find initial values produce different values consider ways may happen consider termination timing leaks covert channels 
reason failure strongest postcondition assigns data variable 
reason conditional loop guard depends high variable updates low variable body 
consider example 
failure explanation conditional modulo interpretation function distinct variables map true false 
interpretation execution program produces different values explains independent static analysis false positives may generated consider program deemed insecure clearly 
false positives ruled instrumented semantics tracks constant values precisely 
contributions 
summarize contributions 
foremost formulate information flow analysis logical form logic 
approach deems programs secure extant type approaches 
secondly describe relationship information flow program dependence explored direct manner computing independences program variables :10.1.1.34.3298
independences static descriptions noninterference property 
section show logic conservatively extends security type system smith volpano showing typed program system satisfies invariant :10.1.1.152.7398
thirdly program deemed insecure annotated derivation facilitates explanations program insecure statically generating counterexamples 
development considers termination insensitive noninterference assume attacker observe nontermination 
complete proofs theorems appear companion technical report selected proof subcases appear appendix 
language syntax traces semantics section gives syntax simple imperative language formalizes notion traces gives semantics language terms sets traces 
syntax 
consider simple imperative language assignment sequencing conditionals loops formalized bnf 
commands cmd syntax var infinite set variables var range variables exp ranges expressions 
expressions left unspecified shall assume existence function fv computes free variables expression commands fv defined obvious way 
define function modified cmd var command returns set variables potentially assigned command 
traces 
trace trc associates variable initial value current value values val unspecified assume exists predicate true 
val 
instance val set integers true defined 
shall trc range sets traces 
basic operations traces include ini returns initial value recorded cur returns current value recorded returns trace property var ini ini cur cur cur predicate initial sets traces holds iff traces variables ini cur 
instance represent trace mapping var val val vi vc ini vi cur vc 
shall write denote cur cur shall write denote hold 
set variables shall write denote ini ini holds 
initial values variables equal 
shall write 
semantics 
assume exists semantic function trc val satisfies property property 
fv 
definition contain clause cur 
define true false lfp trc trc trc trc true false fig 

trace semantics 
true true false true 
semantics command functionality trc trc defined fig 

see clause fig 
defined notice monotone function complete lattice trc trc 
independences interested finite abstraction possibly infinite set concrete traces 
values termed independences independence var var set pairs form denoting current value independent initial value formalized definition independence correctly describes set traces 
intuition independent iff traces initial values agree current value words initial value influence current value 
definition 
holds iff implies holds iff holds definition 
ordering holds iff motivated desire subtyping rule stating subset replaced 
cf 
fact 
rule sound provided removing information 
clearly forms complete lattice wrt 
ordering denote greatest lower bound set union 
expected properties obtainable fact 
facts proof correctness theorem theorem section 
fact fact holds write concretization function trc easy verify completely multiplicative exists galois connection trc concretization function 
fact initial sets traces 
fact initial static checking independences statically check independences define fig 
hoare logic judgements form 
judgement interpreted saying independences hold execution provided terminates independences hold execution context context var control dependence denoting superset variables test surrounding depends 
example static checking takes place context contains variables dependent 
crucial especially may depend high variable 
explain rules fig 

checking assignment context involves checking postcondition 
appears postcondition provided variables referenced independent appear control dependent checking conditional involves checking context includes old context variables depends variables modified control dependent 
equivalently free variables cases 
appear precondition independent appear precondition checking loop similar checking conditional 
difference requires guessing invariant precondition postcondition loop body 
section define strongest postcondition select conditional loop 
guessing invariant show compute fixpoints 
fv example 
derivations assign fv seq fv fv sub fig 

hoare logic 
intuition stands low public stands high sensitive derivation asserts independent execution provided program halts independent execution 
definition traces program different initial values agree current value program secure contains insecure sub program 
example 
reader may check informally annotated program gives rise derivation logic 
initially empty variables pairwise independent write abbreviate 
remarks preamble assigned independences carried holds holds free variable guard independent implying judgement suppose means assignment control dependent suppose independent postcondition implies assigned dependent assigned independent precondition 
intuitions collected lemma 
note interpreted low high lemma essentially says low variables may written high guard 
lemma counterpart write rule underlies information flow control term property 
value low variables remains execution lemma write confinement 
assume modified correctness position prove correctness hoare logic respect trace semantics 
theorem 
assume initial implies 
case initial set correctly describes set concrete traces obtained executing command correctness theorem seen noninterference theorem information flow 
interpreted low high respectively suppose appears traces set traces resulting execution command initial set initial values differ agree current value note correctness result deals terminating traces 
example judgement showing deemed secure logic observer able observe non termination detect initially 
prove theorem claim general lemma 
theorem follows lemma fact 
appendix gives proofs cases assign lemma 
lemma 
lemma 

computing independences fig 
define function sp context cmd intuition formalized control dependence command precondition sp computes postcondition holds largest set wrt 
subset ordering judgement hold 
compute strongest provable postcondition differ strongest semantic postcondition largest set 
companion technical report show compute weakest precondition conjecture development sects 
carried weakest precondition strongest postcondition 
explain cases fig 

assignment postcondition carries independences precondition independences unaffected assignment suppose occur context control dependent variables referenced independent postcondition assignment 
case best explained means example 
example 
consider program 
column table 
example entry row shows goal compute sp doing involves fixed point computation sketched 
iteration second third example 
strongest semantic postcondition cur strongest provable postcondition 
sp fv sp sp sp sp fv sp sp sp fv sp lfp fig 

strongest postcondition 
example entry column marked second second row bottom denotes sp note iteration takes second iteration filter detect insecurity 
third iteration affirms fixed point functional ht defined fig 

theorem states correctness function sp computes postcondition 
theorem states postcondition computed sp strongest postcondition 
shall rely property lemma monotonicity 
holds 
sp sp 
sp sp 
theorem 
holds sp 
theorem 
judgements sp case proof dealing appendix result useful developments sections lemma 
modified 
implies sp modularity frame rule define lhs 
theorem frame rule 


lhs modified sp sp 
lhs fv sp sp note weaker premise imply stronger consequence playing role sp sp 
separation logic frame rule motivated desire local reasoning modify disjoint regions heap reasoning performed independently reasoning :10.1.1.11.5322
setting consequence frame rule analyzing command occurring larger context relevant independences ones left hand sides occur theorem proved observing part follows lemmas part follows result lemma 
lhs fv 
sp sp consequence theorem get result corollary frame rule ii 
assume modified 
lhs 
proof 
theorems get sp theorem result follows sub 
sp sp traditional view modularity security literature hook property programs secure composition secure 
logic satisfies hook property sequential composition context secure program invariant precondition strongest postcondition 
interpretation sabelfeld sands hook theorem holds theorem 
smith volpano security type system smith volpano type system variables labelled security types example means type security level :10.1.1.152.7398
security typing rules fig 
appendix handle implicit flows due conditionals technical development requires commands typed com intention variables assigned commands level 
judgement com says security type context binds free variables security types command type com 
show conservative extension command typed smith volpano system traces current values low variables independent initial values high variables 
simplicity consider command variables level level theorem 
assume security type wrt 
environment 
sp 
upshot theorem typed program invariant appears precondition appears strongest postcondition 
theorem straightforward consequence lemma facilitates proof induction 
commands assumption lemma says commands control dependent guards 
proof part case appears appendix lemma 
suppose com 
sp 

suppose com 
sp 
counter example generation assume program deemed secure logic sp 
expect find witness different initial values produce different final values shall see examples false positives programs deemed insecure logic immediately satisfy property 
ideally strengthen analysis rule false positives immediately feasible order arrive suitable result shall modify semantics false positives genuine positives 
program writing high expression low variable reveal high variable 
deal assume expressions unevaluated kept symbolic trees formal requirement expressed property 
program writing low variable high guard immediately enable observer determine value high variable 
deal tag assignment statement observer detect branch taken 
program different final values simple way fix rule loops effect considering programs fixed bound run time loop unfolded repeatedly eventually replaced sequence conditionals handle loops low guard 
remember cf 
discussion section program deemed secure logic may really secure non termination observed similarly program deemed insecure may really insecure non termination observed 
modifications existence witness amenable compositional proof 
example consider program expressions 
inductively assignment find different values resulting values different 
need extremely strong property concerning assignment exists different values evaluating wrt 
values produces respectively 
shall settle result says pairs different initial values witnesses resulting values different 
course need introduce extra assumptions establish stronger property 
example consider program different values say may cause branch taken deal result say values exists interpretation true 
wrt 
interpretation different values result 
stipulate true true 
turns convenient interpretation depend guard question shall tag guards distinguish different occurrences guard 
shall formalize changes suggested 
assume existence tags tag functions tg tag val val get tg val tag un tg val val get tg tg un tg tg commands syntax introduced assignment tags guard tags 
write tg get tg cur write occurs syntactically write var tg shall assume tags unique tag occurs twice program mentioned purposes section shall rely property 
exists fv 
concerning modify semantics commands observe definition fig 
holds programs loops applied singleton set returns singleton set follows simple structural induction simultaneously proving 
motivates define semantics function trc trc powersets mentioned shall need interpretation functions interpretation function partially defined predicate values 
say covers defined exactly exists guard tag tg 
semantics command functionality trc trc defined follows tg cond tg 
state result concerning counter examples discussed best hope 
theorem 
assume sp assume exists covering 
theorem straightforward consequence lemma stated 
definition 
say reveals exists interpretation function covering 
lemma 
assume sp assume exists reveals example 
consider adaptation password checking example loop unfolded twice 
theorem exists interpretation function distinct values assumes different values 
provided proof theorem satisfy tg true tg false 
result value tagged result value tagged depending value tg 
particular branch taken computation revealed 
discussion perspective 
specifies information flow analysis confidentiality hoare logic considers application logic explaining insecurity simple imperative programs 
program traces potentially infinitely abstracted finite sets variable independences 
variable independences statically computed strongest postconditions statically checked logic 
giacobazzi consider attackers interpretations generalize notion noninterference parameterizing wrt 
attacker analyze input output information flow 
instance assume attacker analyze parity odd values 
secure contains update low variable high guard 
try model approach framework parameterizing definition wrt 
parity clear alter proof rules accordingly 
envision logic put top interpretations 
parity example program abstracted logic deems secure 
related 
closely related clark hankin hunt consider language similar extend idealized algol requiring distinguishing identifiers locations 
analysis idealized algol split stages stage controlflow analysis specified flow logic 
second stage specifies acceptable information flow analysis respect control flow analysis 
precision control flow analysis influences precision information flow analysis 
flow logics usually come frame rule unclear modularity properties analysis satisfies 
statement program compute set dependences introduced pair set different values prior execution may result different values execution complete program expected compute essentially information information computed locally different estimate different initial values values prior execution program may result different values execution approach analysis termination sensitive 
logic termination analogous spirit define mean tuples initial values equal tuples give rise terminating computations tuples give rise infinite computations 
instance belong belong subsequent assertion different values may result different values different termination properties 
prove semantic correctness revised logic need revise semantics currently facilitate reasoning infinite computations 
joshi leino provide elegant semantic characterization noninterference allows handling termination sensitive noninterference 
notion security command equationally characterized hh hh hh hh means arbitrary value assigned high variable 
show express notion security dijkstra weakest precondition calculus 
consider synthesizing loop invariants certainly done fixpoint computation weakest preconditions 
concerned computing dependences consider generating counterexamples 
sands dynamic logic express secure information flow javacard 
discuss ways noninterference expressed program logic follows consider program variables consider copy program relabeled fresh variables respectively 
noninterference holds situation running original program copy sequentially initial state satisfies yield final state satisfying interested showing insecurity exhibiting distinct initial values high variables give distinct current values low variables look actual runtime values 
achieve accuracy need power general purpose theorem prover helpful express declassification treat exceptions approaches static analysis easily extended deal 
barthe argenio idea self composition composing program copy investigate noninterference languages 
parameterizing noninterference property able handle general information analysis protecting timing leaks special case attackers observing termination behavior see 
flow policies including form declassification known delimited information release :10.1.1.11.1670
show self composition formulated logics describing languages hoare logic separation logic linear temporal logic discuss results model checking programs finite state spaces check satisfaction generalized definition noninterference 
hoare style semantics reason information flow andrews reitman 
assertions keep track security level variables able deal parallel programs 
formal correctness result stated 

reported remains done 
inspired part presentations roberto giacobazzi reiner dagstuhl seminar language security october 
reported step goal formulate general definitions noninterference terms program dependence definitions support modular reasoning 
direction consider repeat richer language methods pointers objects dynamic memory allocation obvious goal interprocedural reasoning variable independences higher order version frame rule 
dagstuhl presentation inspired look explaining insecurity showing counterexamples 
plan experiment model checkers supporting linear arithmetic example blast establish independences logic find cf 
false positives sect 
ii provide genuine counterexamples counterexamples wrt 
original semantics 

reiner peter hearn david sands yang participants open software quality meeting santa cruz may anonymous reviewers sas useful comments draft report 

mart abadi anindya banerjee nevin heintze jon riecke 
core calculus dependency 
acm symposium principles programming languages popl pages 

johan 
transforming timing leaks 
popl boston massachusetts pages 
acm press 

torben anindya banerjee 
information flow analysis logical form 
technical report cis tr kansas state university april 

andrews reitman 
axiomatic approach information flow programs 
acm transactions programming languages systems january 

anindya banerjee david naumann 
secure information flow pointer confinement java language 
ieee computer security foundations workshop csfw pages 
ieee computer society press 

gilles barthe pedro argenio 
secure information flow self composition 
ieee computer security foundations workshop csfw 
appear 

bell lapadula 
secure computer systems mathematical foundations 
technical report mtr mitre 

david clark chris hankin sebastian hunt 
information flow algol languages 
computer languages 

ellis cohen 
information transmission sequential programs 
richard demillo david dobkin anita jones richard lipton editors foundations secure computation pages 
academic press 

patrick cousot radhia cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
acm symposium principles programming languages popl pages 
acm press new york ny 

patrick cousot radhia cousot 
automatic synthesis optimal invariant assertions mathematical foundations 
proceedings acm symposium artificial intelligence programming languages sigplan notices volume pages 
acm press august 

reiner dave sands 
theorem proving approach analysis secure information flow 
technical report department computing science chalmers university technology teborg university 
fuller version appearing workshop issues theory security 

dorothy denning peter denning 
certification programs secure information flow 
communications acm 

roberto giacobazzi 
non interference parameterizing non interference interpretation 
acm symposium principles programming languages popl pages 

goguen meseguer 
security policies security models 
proc 
ieee symp 
security privacy pages 

nevin heintze jon riecke 
slam calculus programming secrecy integrity 
acm symposium principles programming languages popl pages 

thomas henzinger majumdar 
software verification blast 
tenth international workshop model checking software spin volume lecture notes computer science pages 
springer verlag 

sebastian hunt david sands 
binding time analysis new perspective 
partial evaluation semantics program manipulation pepm volume sigplan notices pages 

peter hearn 
bi assertion language mutable data structures 
acm symposium principles programming languages popl pages 

rajeev joshi rustan leino 
semantic approach secure information flow 
science computer programming 

mccullough 
specifications multi level security hook 
ieee symposium security privacy april pages 

flemming nielson hanne riis nielson chris hankin 
principles program analysis 
springer verlag 
web page www imm dtu dk riis ppa ppa html 

peter hearn john reynolds yang 
local reasoning programs alter data structures 
computer science logic volume lncs pages 
springer 

peter hearn yang john reynolds 
separation information hiding 
acm symposium principles programming languages popl pages 

peter rb jens palsberg 
trust calculus 
journal functional programming november 

fran ois pottier vincent simonet 
information flow inference ml 
acm transactions programming languages systems january 

john reynolds 
separation logic logic shared mutable data structures 
ieee symposium logic computer science lics pages 
ieee computer society press 

andrei sabelfeld andrew myers 
model delimited information release 
proceedings international symposium software security isss 
appear 

andrei sabelfeld andrew myers 
language information flow security 
ieee selected areas communications january 

andrei sabelfeld david sands 
model secure information flow sequential programs 
higher order symbolic computation 

dennis volpano geoffrey smith 
type approach program security 
proceedings tapsoft number lecture notes computer science pages 
springer verlag 
correctness main goal prove lemma bit preparation 
lemma 
holds exists var modified 
lemma assume 
proof 
perform induction derivation case analysis rule applied 
list cases assign show 
definition know exists ti cur ti infer ti 
split cases 
infer gives desired 
fv implies property holds 
get desired relation cur cur 

assume show 
essentially apart symmetry cases implies fv 
belong true 
fact see true induction hypothesis tells implies desired 
true 
belongs true belongs false 
lemma exists true false ti var ti infer modified ci 
holds 
assume contrary 
fv implies property holds contradicting fact belongs true 
having established lemma infer modified modified 
infer infer 
implies desired relation 
com int com com com com com com int com com com com fig 

smith volpano type system rules commands strongest postcondition theorem judgements sp proof 
perform induction derivation case analysis rule applied 
list case 

assume implies fv assume sp show 
definition sp lfp 
inductively sp 
sp fv 
note 
lemma sp sp shows reductive tarski theorem infer desired relation lfp ht 
smith volpano type system lemma part suppose com 
sp 
proof 
go induction derivation cases rule list case 

com 
sp 
lfp ht 
ht 
sp fv sp 

inductively get 
monotone function get ht ht 
combining get ht ht shows reductive tarski theorem lfp 
