multiparadigmen programmiersprachen martin ller bericht nr 
issn technische universit berlin fakult iv und informatik institut und theoretische informatik und programmiersprachen multiparadigmen programmiersprachen martin ller einf hrung motivation 


multiparadigmen programmiersprachen 
paradigmen 
design 
funktionale und imperative programmierung 
standard ml 
haskell 
logische und imperative programmierung 

alma 
funktionale und logische programmierung 
curry 
del 
escher 
mercury 
prolog 

constraint logische programmierung 
akl agents kernel language 
constraint funktionale programmierung 
goffin 
falcon 
constraint imperative programmierung 
kaleidoscope 
turtle 
nebenl und verteilte sprachen 
erlang 
eden 
nebenl anderen sprachen 


leda 
mp 
und 
oz 
life 

syntax und semantik syntax 

ans tze 
semantik 
semantik sprachen 
semantik und sprachen 
str 
continuations 
typen 

imperative erweiterungen des kalk ls 

und 

praktische 
implementierung 
reflection 
sentation 
andere arbeiten 

arbeiten und arbeiten 

index index ii dieser bericht untersucht programmiersprachen die verschiedene sich 
dabei wird ein ber die ans tze und bei entwurf und implementierung sprachen 
die der einzelnen werden und die glichkeiten zur kombination dieser paradigmen der programmiersprachen erl 
nach einer und programmiersprachen werden ge zum entwurf von programmiersprachen welche die programmierung paradigmen entwickelt 
einf hrung verschiedene zur sung von ein und kann es sein dass ein verschiedene tze 
die probleme es die sung und es sich der oder der das problem st die wahl zu wie er oder sie am mit einer 
daher ist es den einsatz von programmiersprachen diese die zu form cken zu nnen 
eine mathematische sst sich am durch den einsatz einer mathematischen notation den sen da auf diese weise keine eine andere ist 
wird ein nebenl programm einer sprache entwickelt die prozesse zur verf gung stellt als einer sprache der prozesse durch einen anderen werden ssen 
wenn man dass der einsatz programmiersprachen ist um probleme zu stellt sich die wie werden sollen die durch den einsatz sprachen zur sung von gel st werden nnen als durch die verwendung einer einzelnen sprache 
sollen sprachen werden zu bei der integration der hrt oder soll eine sprache zur sung werden zu und damit und hrt 
ein ansatz der diesem bericht untersucht werden soll ist der einsatz von multiparadigmen programmiersprachen 
multiparadigmen programmiersprachen die glichkeiten wie zum beispiel der logischen funktionalen oder programmierung einer programmiersprache 
die dass dieser paradigmen bei der sung probleme zur forschung und zu dieser 
mit die durch die paradigmen gut werden sollen sich durch die verwendung einer sprache sen lassen ohne durch die verwendung sprachen und die sung zu ssen 
als paradigma ich dabei die die zur sung eines problems mittels einer programmiersprache wird 
beispielsweise der einer funktionalen programmiersprache ein programm er funktionen definiert und diese hrend ein die einzelnen die ausgef hrt durch des zur sung des problems 
diese nicht nur dass ein zur sung wird es werden algorithmen entwickelt budd dass der zwischen einzelnen paradigmen sich nicht nur auf die syntax sondern dass es sich dabei um 
der paradigma sst sich daher nur sehr pr und noch ist es multiparadigmen programmiersprachen zu 
diesem bericht soll daher auch keine pr von programmiersprachen und sprachen werden wie sprachen einem paradigma werden 
soll der verschiedene programmiersprachen sich und sie sich sowie ob sich bei sehr sprachen diese unter einem lassen 
dieser bericht soll eine ausf ber die ans tze die zu gef hrt haben 
weiterhin ich die dieser rfe und schlie zu gen die arbeit zu einer hrt 
diese sprache soll und verschiedene paradigmen dass sie zur implementierung gro er systeme mit ist als eine lose kombination sprachen 
motivation dieser abschnitt soll zur einf hrung das einige aus forschung und einsatz en die eine mit dem und die einer 
und 
alle gr aus einer von die unter sehr verschiedene probleme sen beispielsweise besteht ein nicht nur aus der sondern auch aus zur mit den und 
da diese oft sehr verschiedene tze werden nat auch diverse programmiersprachen zur implementierung 
die verwendung und einen zur und integration 
der einsatz einer zwischen den einzelnen die nicht aber die notation bzw 
implementierung werden muss 

krishnamurthi felleisen und wie die verwendung sowohl als auch objekt die von ht 
und klassen sich gut zum 
wenn allerdings erweiterungen dieser zur eines programms werden sich zwei glichkeiten dem werden neue gt oder neue funktionen zum dieser werden gt 
zur hrung erweiterung wird eine der folgenden beim entwurf des programms verwendet 
der des programms ist vor funktional auf funktionen die mittels pattern matching die oder objekt dass die einzelnen eines die 
der erste dieser ans tze hat den dass neue gt werden nnen es ist aber neue die zu weil dann alle funktionen werden ssen 
beim objekt ansatz das problem neue nnen als gt werden ohne klassen zu ssen es ist aber neue funktionen zu 
ren allen klassen die die einzelnen repr 
eine die sowohl und objekt design als auch die kombination dieser unterst erm daher die entwicklung von die zu und zu sind als einer sprache programme 
wissenschaft und entwicklung 
auch die wissenschaft und die von sich vom einsatz von 
der wird dass beispielsweise die und programmiersprachen die probleme sen weil es zwischen den einzelnen zu lloyd 
es sowohl auf seite beschreibung der semantik als auch auf implementierung viele die bei forschung auf dem der werden 

viele die von der placer lloyd westbrook 
da von der informatik wird dass sie oder er sowohl die prinzipien der als auch der programmierung wird von einer dass dies ohne die verschiedene zu zum hrt 
die zeit soll werden die den paradigmen prinzipien zu und zu dass ein paradigma nicht von der programmiersprache abh ngt sondern von der auf eine und sung 
der forschung 
das multiparadigmen programmierung sich nicht nur auf einige der informatik 
das sich einer und workshops die sich unter dieses haben international conference functional programming icfp european conference object oriented programming ecoop international workshop multiparadigm programming declarative programming context object oriented languages dp cool oder sind workshop multiparadigm logic programming chakravarty ternational workshop multiparadigm constraint programming languages hanus 
das der forschung kann nat nur ein ein diesem sein und stellt sich keine dar sich mit diesem zu 
es ist aber auch ein daf dass die forschung auf den gro hat ohne allerdings alle probleme die bei der entwicklung gro er zu sen nat lassen sich auch gegen 
ist zu ob es nicht ist wenn sie fr sich eines mit systemen zu da diese sp sehr sein wird 
sst sich die dass forschung auf aber aus auch zu kann die bei einer nicht werden nnen 
nat kann diesem bericht nur ein sich unter multiparadigmen programmierung sst werden 
der auf den programmiersprachen die und die multiparadigmen programmierung unterst 
zum beispiel multiparadigmen die die verwendung programmiersprachen einem durch und zwischen den einzelnen sprachen sollen nur werden wenn sie allgemeine konzepte die auch auf sind 
der dieses besteht einer der forschung und entwicklung von der konzepte der programmiersprachen um ans tze einer integration dieser sprachen 
da nur arbeiten zum der multiparadigmen programmiersprachen und zur budd 
budd sollen die hier untersuchungen die als die und die arbeiten 
dieser bericht stellt auch das einer ausf zum multiparadigmen programmierung und sprachen dar 
die ans tze die von den einzelnen wurden werden im text gegen und und das soll arbeit als zu untersuchungen 
ich mir von der sprachen ein von programmiersprachen und sowie der implementierung und integration paradigmen 
werden die definiert die diesem bericht verwendet werden 
die beschreibung paradigmen und sowie eine ausf beschreibung multiparadigmen programmiersprachen 
dabei sollen die ans tze auf ihre vor und untersucht sowie die der integration werden 
die und und eine ge ab die bei dem entwurf sprachen werden 
einige die integration und programmierung werden auch ausf da sie der sind 
wird dieser bericht mit dem arbeiten auf dem der multiparadigmen programmiersprachen werden und dem der des wird 
multiparadigmen programmiersprachen im folgenden sollen verschiedene programmiersprachen auf die untersucht werden durch die sie sich zur multiparadigmen programmierung 
einige der sprachen wurden als kombination paradigmen entwickelt andere haben sprachen wenn dies 
nach der definition der dieser arbeit wird ein ber die 
werden abschnitt zum entwurf sprachen 
die folgenden sich mit multiparadigmen ans 
dabei werden die paradigmen dann werden abschnitt die konzepte aus als zwei paradigmen haben 
alle paradigmen werden durch aus programmiersprachen 
wird dieses durch eine und der ans tze 
ist es zu 
die paradigma und werden diesem bericht um einen ber das zu soll eine definition dieser die und dieses 
definition ein paradigma ist ein 
berlin akademie der wissenschaften damit repr ein paradigma eine klasse von 
fall es um ein paradigma repr eine auf ein problem 
da diese definition zu ist um im mit programmiersprachen damit zu arbeiten wir uns im folgenden auf definition ein ist eine die zur sung eines problems mittels einer programmiersprache wird 
eine programmiersprache wird einem paradigma wenn sie zur verf gung stellt um die der cken 
sich die definition definition eine multiparadigmen programmiersprache ist eine programmiersprache die zur sung mit die 
abbildung programmiersprachen programmiersprachen constraint funktional paradigmen diesem abschnitt werden alle diesem bericht die im der definition die sprachen 
abbildung stellt die von programmiersprachen dar 
lassen sich programmiersprachen und sprachen 
programmierung alle sprachen bei daten neu und im ver werden hrend bei der programmierung daten werden aber ller 
haben sie auch durch programmiersprachen werden die programmierung dem der welt hrend die programmierung vor durch formale methoden zu ist beispielsweise durch die formale definition der semantik und die durch 
programmiersprachen sind imperative programmiersprachen wie fortran algol pascal modula ada pl cobol sowie objekt orientierte imperative sprachen wie simula smalltalk eiffel java und 
die sprachen auch oft deklarative sprachen werden im funktionale logische und constraint programmiersprachen 
dabei werden die logischen und constraint sprachen als eine der constraint logischen sprachen 
als funktionale sprachen sollen lisp standard ml miranda und haskell die logischen sprachen prolog sowie wie eclipse sicstus prolog oder mercury 
reine constraint sprachen es nur constraints sussman und steele 
hrend die vor mit algorithmen zur sung werden lassen sich programmiersprachen aber auch wie werden 
dabei werden und nebenl nat auch von programmiersprachen unterst wird 
erweiterungen der nebenl sind die und die bei nicht nur sondern bzw 
auf ller 
diesem auch von und berechnungen 
abbildung paradigmen funktional constraint objekt intentional nebenl literate access oder ausgef hrt werden 
da das der bzw 
programmierung von nebenl oder ist von allen sowohl als auch nebenl oft auch verteilte 
es sei aber dass einige paradigmen sich erweiterungen 
lassen sich sprachen parallel da die deklarative von auf eine 
die objekt orientierte programmierung sowohl imperative als auch deklarative programmiersprachen erweiterungen 
bei der sollen die paradigmen abbildung werden 
nat lassen sich programmiersprachen einem paradigma wie alle programmiersprachen eines haben beispielsweise werden funktionale sprachen strict und lazy programmiersprachen objekt orientierte sprachen nnen klassen oder sein oder gar keine zur verf gung 
die sprachen zu soll daher auf sowie wie sie von wurden 
im folgenden sollen die werden 
einer beschreibung ihrer sollen auch ihre vor und sowie einige programmiersprachen die sich den einzelnen paradigmen lassen hrt werden 
funktionale programmierung unter dem der funktionalen programmiersprachen sollen alle sprachen werden bei die definition und von funktionen sowie funktionen ordnung zur verf gung und die zur programmierung sind 
als funktionale sprachen werden der grad der von sowie der von aus dr cken strict bzw 
call value lazy bzw 
call need oder call name 
der funktionalen sprachen oft als ein von funktionalen sprachen da es und 
den funktionalen sprachen die seiteneffekte dieses nicht 
sabry definiert ein pr rein funktionale sprachen language purely functional includes simply typed calculus term ii call name call need call value implementations equivalent modulo divergence errors 
sabry funktionale programme werden im durch ausgef hrt dass das programm aus einer von sowie einem besteht zum werden soll 
dann werden glich der ausgef hrt bis der eine form hat die nicht werden kann 
eine form wird 
ein sprachen ist die verwendung das sind die durch ihre definiert werden und oder sein nnen 
durch pattern matching nnen funktionen der der zu daten definiert werden 
die der funktionalen programmierung im auf ihrer mathematischen die zur und werden kann 
au erdem lassen sich funktionale programme der ausf hanus 
die sprachen systeme ist ihrer da die abh der auf das programm werden muss 
abschnitt wird wie dieses problem gel st wird 
gegen ber der logischen programmierung hat die funktionale programmierung den dass sie nur und werden muss bei die haben nnen oder zu hrt als bei logischen sprachen 
programmiersprachen sind backus fp backus haskell peyton jones standard ml milner common lisp steele scheme kelsey und opal pepper 
logische programmierung die logische programmierung auf die pr auf 
programme dabei aus einer von und das system die erf bzw 
von kann 
bei dieser berechnung werden variable die dann das der berechnung 
im der berechnung kann es tig sein alternative nge um nach einer sung zu bzw 
um alle zu 
den sprache wird dies ber eine mittels backtracking 
dabei wird engl 
choice point der und beim einer berechnung wieder 
das verfahren das zur auswertung sprachen verwendet wird hei resolution und wird durch und substitution 
wie hanus ausf hrt die logische programmierung die dass durch die verwendung von logischen variablen mit werden kann sowie dass mittels der eines problems werden nnen 
gegen ber der funktionalen programmierung sind logische programmiersprachen des inh 
implementierung werden der programme hrt um und diese dann zu 
bei logischen sprachen hat der die durch im den pr zu bei mercury siehe abschnitt 
weiterhin nat die probleme auf die mit systemen wie bei funktionalen sprachen 
prolog war die erste logische programmiersprachen dieses sind die prolog prolog ii und prolog iii colmerauer sowie mercury somogyi 
constraint programmierung bei der constraint programmierung programme im aus der von bzw 
engl 
constraints die das zu problem 
ist es die des aus dieser die sung en zu 
da constraint programmiersprachen oft werden um probleme zu sen und alle systeme den die und zu 
werden die logischen programmiersprachen als eine der constraint logischen sprachen 
dabei die logischen programmiersprachen auf dem constraint system der ume 
die prolog mercury eclipse wurden um die zum mit constraints 
reine sind selten ein beispiel ist constraints sussman und steele 
imperative programmierung die imperative programmierung dass programm bei der ausf hrung einen zustand der hrend des durch wird 
der besteht zum einen aus dem auf dem das programm zum anderen schlie er aber auch die mit ein 
diese des wird durch seiteneffekte ver von ein 
die programmierung erm das von zu bzw 

diese nnen dann von des programms werden zur ausf hrung der im hrt 
da alt sind wie die programmierung sind alle sprachen auch die diesem bericht synonym verwendet werden 
imperative sprachen haben den dass es ihrer und compiler 
weiterhin es sehr viele und algorithmen 
das zur sprachen ist die von sprachen im nicht werden kann 
okasaki 
im zu sprachen ist vor das der eines programms weil die programme ist und durch ver variablen zu und zu pr fen sind 
dass es die semantik der sprachen formale definition die das verhalten eines programms dieser sprache 
algol pascal modula ada pl cobol und fortran hlen zu den programmiersprachen es aber fast alle dieser sprachen auch objekt orientierte erweiterungen 
objekt orientierte programmierung objekte der objekt programmierung sind die einen zustand und ein verhalten 
der zustand besteht im aus einer von ver variablen hrend das verhalten ber definiert wird welche zustand methoden 
ein objekt programm besteht aus einer von die durch die anwendung von methoden mit anderen 
der wird diese oft als 
da objekte die attribute objekte nur durch und nnen objekte eine die nur auf den zustand eines 
ein objekt sprachen ist die verhalten objekte durch die definition von klassen 
eine klasse eine von und methoden und kann als die objekte werden 
objekt orientierte sprachen die werden 
andere sprachen oft als das klasse nicht bei sprachen wird verhalten objekte erm dass neue objekte aus durch das von und methoden werden cloning oder dass objekte zur andere objekte delegation 
sowohl bei klassen als auch sprachen ist es glich von klassen neue klassen objekte als diese klassen das verhalten der erben aber einige der methoden bzw 
neue methoden gen viele ist allerdings die und als argument gegen deklarative sprachen nicht 
objekte werden weiterhin passive und objekte 
passive objekte ver nur dann zustand und berechnungen aus wenn sie durch werden hrend objekte von anderen berechnungen ausf und mit anderen 
oft werden objekte auch als 
werden wo durch die verwendung die mit kommunikation und ihrer auf ein problem arbeiten probleme gel st werden nnen 
sich der die auch sehr verteilte siehe 
die von objekte die mit arbeiten und ber mit anderen zu einer und gut und 
au erdem lassen sich objekte der welt oft auf objekte einer objekt sprache 
werden klassen sprachen nicht nur zur beschreibung von sondern auch zur von verwendet 
dies hrt nicht zu einer klassen und 
ein besteht dass sich nicht alle probleme durch objekte lassen 
beispielsweise ist die von relationen zwischen als methoden einer klasse nicht die nat da eine relation ihrer oder werden kann 
als erste objekt orientierte sprache wird der simula dahl und nygaard die erste auch noch re sprache dieses ist smalltalk goldberg und robson 
von fast allen programmiersprachen objekt orientierte erweiterungen common lisp cobol und fortran 
und objective sind aus der sprache und aus dieser sind java und 
orientierte programmierung zu probleme werden den paradigmen funktional gel st und dann diese zu einer sung des 
bei der programmierung kiczales man nicht nur die funktionalen nge sondern auch andere abh die bei einer nach funktionalen zur 
lassen sich beispielsweise viele programme gut funktionen bei der eine funktion das einer anderen 
man aber eine gen ssen alle funktionen werden dass sie diese ber nnen 
auf diese weise wird die funktionale des problems und un 
der programmierung werden und 
aus funktional abh die einer sprache werden 
werden einer und es ein das aus den und den das vollst programm 
die der programmierung unterst verschiedene synchronisation nebenl prozesse und verteilten aspectj einer erweiterung von java 
sich die durch aus 
die kombination einem programm ist der 
access orientierte programmierung die access orientierte programmierung stefik um engl 
annotations 
diese sind engl 
property lists oder engl 
active values und nnen variablen werden 
nnen informationen die den variablen sein sollen 
sind funktionen bzw 
die werden wenn der der variablen oder wird 
sind bei der access programmierung die folgenden 
sind programme die nicht mit arbeiten st ren nicht den 
weiterhin haben nur auf die 
ein ist die dass sein nnen dass sie auch wieder nnen 
um die programmierung mit zu nnen sie und von den variablen auf die sie sich werden 
es sind keine zu die variablen und 
schlie sind normale objekte die werden nnen und die durch attribute einen zustand nnen 
access orientierte programmierung wird beispielsweise durch das loops stefik unterst 
dieses auf lisp und damit auf der funktionalen programmierung und wurde um und objekt orientierte programmierung 
ein beispiel die anwendung access sprachen ist eine simulation bei der das interne modell durch mit einer wird die bei des werden kann 
aus man die access orientierte programmierung der programmierung als wenn man die zwischen variablen und von den abh objekte als 
programmierung die programmierung ip stellt die eines das zentrum der entwicklung 
die verhalten auf und debugging sollen dem zu und 
ip daher nicht nur eine programmiersprache sondern ein das sich durch sich lassen soll 
die nnen und debugging funktionen oder neue compiler 
die die ip zur verf gung stellt werden 
nnen durch gen von methoden werden allerdings werden diese methoden im zu objekt sprachen zur ausgef hrt um auf den des programms repr als graph zu 
ein ip stellt keine paradigmen zur programmierung zur verf gung 
es aber die um das system verschiedene zu nnen beispielsweise durch die integration von oder verschiedene paradigmen 
im mit diesem bericht ist der ansatz sich bei entwicklung nicht auf wie oder sondern auf die des zu 
da ip aber alle paradigmen sst aber nicht definiert wird dieser ansatz im folgenden nicht 
nebenl programmierung der nebenl programmierung str nge eines programm und 
ab 
der implementierung kann diese nebenl auf einer oder aber parallel auf werden 
bei der man noch bei der ein programm auf daten und bei der programme werden 
bei der ssen die einzelnen programme zu hrt wie bei der verteilten programmierung siehe 
die synchronisation nebenl einen nicht zu 
au erdem ist der eines programms bzw 
vor bei der 
ist dabei dass am programm eine zur des das verhalten nebenl nge ver kann dass ein nicht oder form 
verteilte programmierung verteilte programme werden nicht nur auf einem einzelnen sondern auf oder auch auf ausgef hrt 
die einzelnen verteilten nnen dabei oder auch programme ausf und auf den oder daten 
ist bei der verteilten programmierung die kommunikation zwischen den verteilten die den programm und bzw 
hrt 
diese kommunikation kann durch den von oder durch die verwendung von der von den einzelnen und werden kann 
sich wenn die einzelnen eng sind bei der verwendung eines zur werden 
wie bei der nebenl programmierung muss ein zur synchronisation nge zur verf gung 
der der verteilten programmierung besteht der da nat ein problem sen nnen als ein 
ist dass sich das problem form sst und dass bei der sung kommunikation zwischen den ist um den durch hardware nicht durch den zu 
die eines programms verteilte ist sehr und unter neue algorithmen 
wie bei der nebenl programmierung ist auch bei der verteilten programmierung der von details bei der verteilten programmierung die zeit zur und im abh und 
programmierung programmierung backhouse jansson soll programme auf einem sehr erm glichen dass beispielsweise funktionen auf arbeiten nnen 
der dieses besteht der und der algorithmen 
polyp ist eine programmiersprache zur bzw 
programmierung jansson 
die programmierung der definition funktionen die beispielsweise auf werden nnen ohne zu ssen 
wird dies die funktionen nicht durch pattern matching ber der der definiert werden sondern ber ein matching der den 
ein beispiel die programmiersprachen ist ein der von backhouse 
wird 
dieser lt die der terme die er soll als parameter und kann terme 
da dieses sich wie oder nebenl orthogonal zu den paradigmen lt wie nicht 
generative programmierung die generative programmierung czarnecki und eisenecker ist ein das der programmierung wird 
die generative programmierung alle programmiersprachen und systeme die die von software aus erm glichen 
ein ist dabei die und der 
dieser ansatz soll diesem bericht nicht werden da der auf und damit der von algorithmen und nicht auf den ein 
literate programming literate programming wurde von knuth entwickelt um ihm die ar tex system zu 
bei diesem verfahren die eines programms bei der programmierung im das programm wird dass es glich zu und zu ist 
um die zu unterst wird die und der und es ist die aus diesem text die den zur durch einen compiler zu 
das erste programm der tex dass sie zu einer gut werden kann 
das programm die aus und das aus den die das programm zur und der werden kann 
die beschreibung von haskell peyton jones eine aber stark form des literate programming vor 
haskell code nnen haskell compiler auch literate haskell scripts 
diese aus atex code dem haskell durch werden durch das en code 
code oder das eines vor 
auch das literate programming sst sich mit anderen paradigmen da es die von nicht aber ausf hrung 
design wir den zu der paradigmen sollen einige zum entwurf von multiparadigmen programmiersprachen werden 
auf einige dieser prinzipien und konzepte wird bei der beschreibung der paradigmen 
werden sie und wenn die syntax und semantik von werden 
zum design von und sowohl ein objekt auf dem eine sprache werden kann als auch zur erweiterung auf andere paradigmen funktionale und logische programmierung 
das von budd sich ausf mit den und den die zum design der programmiersprache leda budd gef hrt haben 
eine die sich beim entwurf einer stellt ist ob es ist eine neue programmiersprache zu oder ob es nicht 
ist eine programmiersprache durch um ein paradigma zu 
nat die eines 
beispielsweise wurde unter verwendung von operator durch die constraint ilog puget dass mit constraint programmierung wenn auch glich ist 
common lisp sich der syntax von lisp und dem system erweiterungen 
screamer siskind und mcallester ist ein common lisp das die sprache um und constraint programmierung 

sich mit multiparadigmen und nicht mit sprachen aber einige 
eine der multiparadigmen programmierung dem von system die und sung probleme notation 
paradigma die notation verf sein um das paradigma zu und die von diesem paradigma zu 
ausf hrung 
lassen alle paradigmen sich als turing daher ist eine integration problem 
relevant sind aber 

paradigmen eines systems werden durch interpretation andere durch wieder andere durch eine 
ein muss diese unterst 
paradigmen 
die integration sich nicht nur auf paradigmen die 
gut 
weiterhin muss die integration transparent sein dass es den einer ist paradigma diese wurde 
weiterhin auf ein hin diese sen nur ein und sind beispielsweise nicht auf paradigmen 
ein den das die einer sprache stark kann ist die der die der sprache werden kann 
backhouse 
den class citizen ein class citizen ist das ist und mit diesem verwendet werden kann als parameter werden kann und ohne dass es mit einem werden muss verwendet werden kann 
dies funktionen ordnung higher order higher order constraint programmierung standard ml class continuations scheme programmiersprachen werden wenn order konzepte auf higher order werden die semantik und implementierung aber unter und 
ordnung 
im folgenden sollen einige paradigmen untersucht werden die abbildung sind 
abbildung paradigmen funktional und und funktional und constraint constraint funktional constraint nebenl und funktionale und imperative programmierung funktionale programmiersprachen sind lassen sich nicht eine wie sie durch wird 
ist ein diese paradigmen zu 
einige funktionale programmiersprachen ver zustand der form variablen welche oft als werden die repr 
standard ml werden diese 
cells ver und lisp und scheme nnen alle variablen werden 
funktionale sprachen dieser art werden von funktionalen sprachen wie haskell da sie ein der funktionalen programmierung dieses dass ein den haben muss durch werden kann 
berechnungen ssen rein funktionalen sprachen auf eine andere art und weise werden 
haskell wird das eines durch hrt welche den dass die 
standard ml standard ml milner ist eine funktionale programmiersprache 
wie scheme kelsey oder common lisp steele standard ml aber auch seiteneffekte wie nicht deklarative ein und sowie ver variablen 
damit ist standard ml keine rein funktionale sprache wie haskell peyton jones oder opal pepper 
standard ml werden ver variablen als die eine cell repr 
diese werden mit einem 
zum muss der aus der zelle werden und er kann mit einer ver werden 
das beispiel die einer eine und die des 
das des ist 
ref dass ver variablen die ren kann es auch zu bei der dieser variablen 
leroy und weis ein beispiel bei dem der normale standard ml um typen rde ref head 
das problem ist dass der typ list ref auf liste vom typ wird da ist 
dieser typ ist sowohl die als auch head wurde ung auf int list ref bzw 
bool list ref 
die ver von rt die da werden 
zur sung nnen algorithmen verwendet oder die der des ref werden 
haskell ein programm wie das beispiel standard ml kann haskell en werden 
ssen auch haskell werden 
diesem beispiel wird die die io die die eines haskell programms ist 
import ioref main ref ref ref putstr show ich noch ausf auf die der kombination und sprachen 
logische und imperative programmierung bei der integration und sprachen vor das und der damit im 
ein backtracking und erm glichen vor algorithmen zur sung von 
die leda siehe abschnitt auf weise das logische paradigma die imperative 
ist eine pascal die prolog logische programmierung 
die erweiterung besteht aus folgenden bzw 
split statements 
ein split statement lt eine oder die quasi parallel ausgef hrt werden 
nach dieser prozesse die hrung mit der auf das split statement folgenden fort 
prozesse die im nicht die prozesse die durch ein split statement wurden 
split statements 
diese die von pascal mit den split statements 
bei der ausf hrung dieser lt eine variablen die einem und dieser wird ein der den der ausf hrt 
erweiterungen funktionen und 
die programmierung wurden die funktionen und gt 
sie zu das bzw 
gr te element und nnen beispielsweise die ber alle eines sollen werden 
weiterhin wurden die ein und dass sie mit nnen 
die logischen und sind im zu standard pascal nicht 
hrung 
anders als bei pascal systemen wird nicht vollst 
nach der und funktionen sowie der ausf hrung des ein dialog dass der wie prolog systemen das system kann 
mit dem ansatz eine imperative sprache durch gen bzw 
mit logischen zu sehr der sp ter sprache alma 
allerdings bei alma die integration da diese sprache backtracking unterst und auch mit constraints werden soll siehe 
alma alma ist die erste sprache die von apt im des alma entwickelt wurde apt und schaerf 
das dieses ist die kombination der und programmierung 
der entwurf der sprache auf einer programmiersprache modula die um deklarative werden soll 
die erste version von alma alma wurden nur und und backtracking gt 
und sind cke die alma die von werden nnen 
wenn das der auswertung eines der ist schl gt die und das programm wird am engl 
choice point ausgef hrt 
durch einige nnen werden um beispielsweise zu die sprache modula auf der alma zwischen cken die und die nur ihrer seiteneffekte ausgef hrt werden 
fen ob es eine sung ein problem oder um einer alle zu 
mit den sich alma gut zur sung probleme sich der apt und schaerf apt 
die auf einer programmiersprache unter gung eines trail der die das backtracking werden nnen 
sp ist die integration von constraint programmierung apt und schaerf 
eine beschreibung dieser pl ne und eine implementierung allerdings noch nicht 
alma ist eine imperative sprache hrend als constraint werden 
funktionale und logische programmierung funktionale und logische programmiersprachen lassen sich gut da es sich bei um deklarative sprachen die sich ein lassen wie es von hanus wird 
die funktional logische programmierung im dass freie variablen werden 
der sprachen muss daf durch den sprachen resolution werden 
dabei wird das bei funktionalen sprachen pattern matching durch die aus der logische programmierung der und parameter eines 
der wird narrowing 
ein wird als residuation 
bei der residuation werden bei variablen als parameter verz gert bis alle variablen von parallel wurden bzw 
bis die variablen wurden dass eine glich ist 
dies auch eine nebenl 
der dieser besteht dass sie ist und terme keine sung kann wenn die variablen nicht zur sung 
narrowing ist vollst da es die sprachen mit bei der parameter 
es nnen auch werden die variablen 
einige funktional logische sprachen funktionen die werden und pr die werden wie escher siehe abschnitt 
anderen sprachen wie curry abschnitt keine die form der ber 
den im folgenden ausf sprachen sind noch die sprachen alf ein nger von curry und babel zu 
sind funktional logische sprachen die auswertung von alf auf resolution rewriting und narrowing hanus wie curry 
babel moreno navarro und rodriguez artalejo prolog mit einer ordnung 
babel narrowing als der verz semantik und damit sowohl als auch resolution 
curry curry hanus ist eine funktional logische erweiterung der funktionalen programmiersprache haskell peyton jones 
sie wurde entwickelt um einen standard im bereich der funktional logischen sprachen zu 
das das curry zu sowohl das funktionale als auch das logische modell hanus 
ein curry programm besteht aus einer von mit hrt werden nnen und der form function 
tn pn die terme pi sind pattern ber die beim eine hlt wird 
dabei wird eine nur dann zur wenn die ist 
da freie variablen wird dieser hrt der curry ig mit wird die variablen werden mit allen glichen und wenn die gt wird ein backtracking st es ist aber auch glich zu 
wenn eine funktion wird werden die und die parameter 
muss das programm die 
zur um zu nnen welche der einer zu den 
werden mit narrowing ausgef hrt es ist aber auch glich durch die von funktionen zu 
eine wie die hat beispielsweise zur dass beim der funktion append das erste argument wird eine diese funktion wird eval append rigid ein parameter der als rigid wird lt sich wie bei sprachen die durch residuation werden parameter werden dass des des werden kann welche hlen ist 
die logischen glichkeiten von curry es nach funktionen zu 
unterst curry eine der ordnung durch eine ber die funktionen eines programms auch funktionen werden nnen 
au erdem kann eine funktion auch werden dass alle funktionen des hlt werden 
ein und werden curry durch ein modell 
wie haskell wird ein 
der compiler die um zu pr fen dass keine ein oder ausgef hrt werden ein programm eine hrt die 
ausgef ein ung 
die von prolog wie der cut oder assert retract nicht zur verf gung 
und mit die auswertung eines definiert werden nnen die nach dieser auswertung nicht 
del die logische programmiersprache del hill und lloyd wurde als von prolog 
del verf gt sowohl ber ein typ als auch ein und alle nicht nicht logische pr wie ein und der cut operator durch deklarative 
das auf logik mit 
weiterhin werden del pr und funktionen 
ist auch constraint programmierung ber und rationale constraints glich 
constraints werden lange verz gert bis variablen sind dass die der ist 
des sind erweiterungen zum von meta die analyse transformation und das debugging von del 
escher auch escher lloyd ist eine und programmierung 
allerdings es escher keine funktionen sondern alle funktionen ein das allerdings eine ergebnisse sein kann 
auf diese weise wird escher 
funktionen die einen als werden escher auch als pr 
die ist residuation durch die eines 
modus funktion werden kann auf welche art und weise verz gert werden 
wenn einen parameter der modus wird werden alle dieser funktion verz gert bis der parameter ist 
auf diese weise sst sich der beim von pr 
eine von escher sind die und welche als und freie variablen 
als seite einer funktion hrt dass es die variablen im eine dass alle glichen auch sind 
escher auch einige und erweiterungen die aus funktionalen programmiersprachen sind 
zu haskell unterst escher list comprehensions zur pr von listen sowie funktionen ordnung und funktionen cke 
mercury mercury somogyi ist eine rein deklarative logische programmiersprache 
sie wurde nicht als sprache entwickelt aber einige die funktionale programmierung unterst 
ist es beispielsweise glich prolog pr pr einer notation wie funktionalen sprachen zu fibonacci fibonacci fibonacci 
mercury unterst auch funktionen ordnung 
nnen durch cke werden und auf werden 
dies durch verwendung des pr apply oder durch die anwendung einer variablen auf parameter die variable einem sein muss 
durch ein typ und modus system nnen weiterhin alle typen und parameter modi werden 
der compiler pr ft diese und die informationen zur optimierung 
den parameter modi nnen pr als semi oder sowie nicht werden 
der compiler kann dieser informationen semi als nicht 
die integration von ein und die deklarative sprache wird ber ein das den zustand des programms und repr 
pr das ein oder hrt lt dieses objekt als parameter diese parameter daf dass der zustand auf einem durch den wird und backtracking ber ein siehe auch abschnitt 
prolog prolog nadathur und miller ist eine logische programmiersprache die funktionen ordnung sowie 
die erweiterung um terme gegen ber prolog eine und ordnung zur berechnung von funktionen 
im zu prolog die funktional logische sprache miller keine ordnung da sie das von 
der dieser ist dass die diesem fall ist und ein wird falls dieser 
die motivation zur entwicklung von ist die meta programmierung die von durch programme 
ist die manipulation programme typen und 
die den mit die berechnung der modulo und 
constraint logische programmierung die constraint logische programmierung clp jaffar und lassez fr jaffar und maher constraint und logische programmierung 
clp sprachen werden als der logischen programmiersprachen wie prolog da eine clp sprache die auf herbrand einer logischen sprache 
der clp eine clp von sprachen die einzelnen constraint systeme clp die constraint logische programmierung mit engl 
finite domain clp constraints 
die prolog wie eclipse ciao prolog gnu prolog diaz den mit constraints und lassen sich daher den constraint logischen sprachen 
von constraint domains sich diese sprachen sehr und werden nicht im detail 
akl agents kernel language akl janson wurde den einsatz und entwickelt mit auf die glichkeiten computer 
daher wurde dass die sprache glichkeiten zur ausf hrung 
diese zum entwurf einer logischen programmiersprache welche sowohl als auch die beschreibung von erm glichen soll 
syntax und ausf von akl auf der concurrent constraint programmierung saraswat 
diesem modell besteht eine berechnung aus einer von und einem 
nnen diesem informationen gen bzw 
auf die verf von informationen im 
auf diese weise werden die einzelnen parallel 
die informationen werden durch constraints repr es ist glich mit informationen zu 
akl unterst sowohl don care als auch don know durch die verwendung 
einem fr janson und haridi janson und haridi von der verwendung paradigmen 
es sich dabei allerdings nicht um eine integration sehr paradigmen sondern um sich der logischen programmierung prolog und guarded horn clauses sowie der constraint programmierung 
constraint funktionale programmierung die erweiterung von constraint sprachen um funktionen wird programmierung 
dies wird durch die erweiterung des constraint systems einer constraint programmiersprache um funktionen diese integration von funktionen eng sein kann 
werden funktionen dass der constraint der ist funktionen aus constraints zu werden funktionen als berechnungen 
als dieser paradigmen kombination sollen die sprachen goffin und falcon werden 
goffin goffin chakravarty ist eine constraint funktionale erweiterung der programmiersprache haskell peyton jones bei der funktionen eine nebenl constraint programmiersprache sind zu akl siehe abschnitt 
die dieser integration auf der eine programmiersprache aus einer und einer 
die hrt die berechnungen aus hrend die berechnungen und die kommunikation der einzelnen berechnungen 
der constraint teil von goffin der sprache ist vom funktionalen teil und diesem als stellt zur organisation zur verf gung 
im constraint teil nnen logische variablen werden hrend die von funktionen verz gert werden bis ein parameter ist 
funktionen nnen constraints und damit die definition 
constraints werden und logische variablen werden logische variablen werden durch als exp exp 
dieser constraints nnen durch zu werden foo bar goffin nnen logische variablen nur sein die keine funktionen wird ordnung 
nat ist es damit goffin nicht glich funktionen zu wie dies curry siehe abschnitt 
die durch funktionen constraints zu wird um berechnungen zu da die einzelnen constraints einer nebenl werden nnen 
weiterhin nnen funktionen aus constraints andere constraints als 
falcon falcon guo und pull funktionale und logische programmierung mit constraints 
falcon programme aus guarded funktionalen sowie aus relationen ber funktionalen cken 
ist falcon eine constraint logische programmiersprache bei der das constraint system mit funktionalen werden kann 
guo diese kombination mit der falcon clp cf die constraint funktionale programmierung stellt das constraint system ein constraint system siehe abschnitt dar 
die funktionale programmierung sich gut zur definition eines constraint systems da sie objekte und die constraints ber cken zu sen zur verf gung stellt 
die integration der funktionalen programmierung als constraint system einer constraint logischen sprache stellt den ansatz von falcon dar 
constraint imperative programmierung die constraint imperative programmierung alle programmiersprachen die sowohl constraint als auch imperative 
im sich es dabei um imperative bzw 
objekt orientierte sprachen bei es glich ist zwischen den variablen des programms und oder den von constraints zu 
ein das constraint ser ist daf die variablen zu welche die constraints erf 
die programmiersprache kaleidoscope lopez ist eine objekt orientierte sprache die die definition von constraints auf objekt 
die sprache alma apt soll um constraints werden apt und schaerf auch sie sich zu einer constraint sprache wird 
turtle ller ist eine sprache bei der constraints zwischen variablen werden nnen um diese zu 
der constraint sprachen besteht der hrung und 
dieses problem wird gel st bei der sprache kaleidoscope werden alle auf constraints die dann von dem constraint ser werden 
turtle wurde der ansatz hlt constraints nur zur berechnung und pr fung von constraints zu hrend au dieser normal wird 
der constraint solver wird zur berechnung und der imperative die zeit dieser berechnung 
kaleidoscope kaleidoscope lopez ist eine objekt orientierte sprache mit constraints 
constraints nnen zwischen den objekte werden und das system durch die der daf dass die constraints werden 
kaleidoscope nnen constraint definiert werden diese methoden werden aber um neue constraints zu 
beispielsweise kann ein zwischen zwei durch die attribute definiert werden 
das system der klassen der parameter eines constraints den constraint und hrt aus 
die semantik von kaleidoscope von einer aus die constraints kann 
alle der sprache werden zur ausf hrung auf dieser constraints beispielsweise 
turtle turtle ller ller und eine imperative mit funktionalen durch vier neue konzepte zu einer constraint sprache variable constraint constraints und constraint ser 
variable sich von variablen dass sie ihre nicht durch sondern dass constraints diese variablen definiert werden 
dies mittels constraint welche die variablen mit anderen variablen oder 
constraint aus einer constraint und einem 
die constraints der werden vom system durch erf llt bis der ist 
am des blocks werden die constraints den constraint die daf sind die erf der constraints zu pr fen und zu 
constraints als constraints wie funktionen nnen constraints constraint und andere berechnungen werden um dann constraint den constraint zu werden 
constraints werden turtle vor um variablen zu 
da bei der constraints st werden die vom programm und werden nnen lassen sie sich aber auch um den zu 
nebenl und verteilte sprachen die diesem abschnitt sprachen als zur nebenl und verteilten programmierung 
wie abschnitt sind nebenl oder verteilte sprachen nebenl oder verteilte paradigmen 
diesem abschnitt sollen sprachen werden die nebenl bzw 
ist 
erlang erlang ist eine nebenl und verteilte funktionale sprache 
die syntax sich die von prolog werden gro prolog es sich aber um keine logische programmiersprache 
erlang eine wie prolog oder lisp dass nicht die variablen werden sondern die die zur diese variablen werden 
die nebenl wird durch unterst die primitive funktion spawn einen der operator 
send einen als und der wird durch receive hrt 
bei der eines kann optional auch noch der der erlang werden auf dem der soll 
durch diese erweiterung wird erm die kommunikation abbildung nebenl sprachen deklarative prozesse prozesse bei verteilten systemen durch ab wie bei nicht verteilten 
die erlang ist und variablen nnen nur einen und nicht ge werden 
daher ist der der sprache funktional 
ein und sind aber nicht und es ber die standard die und ver variablen zu 
eden eden ist eine nebenl deklarative sprache zur programmierung systeme und algorithmen auf systemen mit 
dabei es sich um eine erweiterung von haskell 
die funktionale sprache als programme welche um eine zur von nebenl wurde 
die zwei zur berechnung und wie bei goffin siehe abschnitt die der rein funktionalen semantik der und erweiterung 
nebenl wird eden durch prozesse 
der sprache nnen definiert werden lambda cken sind 
durch die der eines lambda werden dann prozesse die nebenl ausgef hrt werden 
nnen prozesse ber kan le die als verz listen werden 
prozesse auf zu hrend prozesse 
die kommunikation und ist die prozesse transparent 
es ist aber prozesse glich kan le zu und zu um die kommunikation zwischen 
nebenl anderen sprachen die nebenl constraint programmierung engl 
concurrent constraint programming cc saraswat die constraint programmierung nebenl werden 
eines nebenl constraint programms verschiedene 
dieser programmierung sind akl und goffin siehe 
abbildung ist dieses 
die nn repr prozesse die einem dick und durch den constraint 
die der abbildung en das programm 
abbildung stellt einen anderen ansatz dar eine nebenl erweiterung von haskell concurrent haskell peyton jones 
werden nebenl prozesse als berechnungen siehe dieser berechnungen nicht nebenl ist 
der besteht dass die einzelnen berechnungen rein funktional sind und keine seiteneffekte haben 
die welche die prozesse dies und nnen damit mit anderen 
den wurden sprachen untersucht die zwei paradigmen 
dieser abschnitt soll sprachen bei als zwei paradigmen wurden 
dies ist eine sprache die verz funktionale programmierung logische programmierung und constraint sen mit zahlen kobayashi 
damit ist die sprache sowohl von higher order verz funktionalen sprachen als auch der constraint logischen programmierung 
die auf lazy narrowing und dem sen von constraints 
der name sich die allgemeine constraint logische programmierung clp nur dass diesem fall die funktionale programmierung eine 
leda leda ist eine streng programmiersprache die sowohl objekt orientierte imperative als auch funktionale und logische bzw 
einer sprache 
der logische wird durch ein die relation die sprache 
relationen und funktionen werden aber als eine art der und allerdings durch backtracking wird um zu 
sind relationen funktionen die des relation als haben 
relationen werden mit dem eine variable werden 
dieser operator sich von der dass die variable auf den zur wird das backtracking diese operation 
cke nnen verwendet werden wo relationen werden und relationen nnen dann durch dis und von relationen werden 
wenn eine relation als einer oder als bereich einer wird der 
einer die als falls die relation erf llt ist einer nnen alle einer relation werden 
die ist call value es ist aber auch glich durch call und call name funktionen zu 
werden um beim von relationen variablen zu 
durch die verwendung von call name ist es glich nicht leda zu 
die unterst programmierung auf funktionen ordnung und der klassen und funktionen mit zu 
objekt orientierte programmierung wird durch und dem von methoden durch erm 
relationen sich sehr gut um iteration cken 
wenn eine relation alle einer hlt kann eine die alle diese ausgef hrt werden ohne dass der interne der sein muss 
die klasse list eine liste die kann 
der sowie wurden aus 
class list var value int list function items val int relation return unify val value defined items val da der parameter val call ist wird er beim der items funktion mit dem 
da relationen mit backtracking ausgef hrt werden wird das erste element der liste mit val dann das die daher ber alle der liste alist var alist list val int alist items val 
diese anwendung von relationen ist eine und der wie es sie anderen sprachen zur von einer wie der standard template library stl von oder der java standard 
schl gt budd als glichen ansatz zum mit einer sprache vor die ist objekt 
objekte einen zustand und methoden die zustand und oder ver 
auf den nnen auch funktionen sein die den zustand nicht ver und die der funktionalen programmierung 
die logische programmierung sich nicht nur sondern auch als 
durch die verwendung und als parameter kann die bzw 
iteration werden 
nat ist auch ein beim entwurf glich 
beispielsweise kann der entwurf funktional sein und im der anwendung von funktionen auf objekte 
mp die konzepte die budd leda hat wurden arbeiten von ihm auf java budd 
die sprache mp stellt eine erweiterung von java zur multiparadigmen programmierung dar 
nf erweiterungen wurden java gt funktionen klasse funktionen die als parameter funktionen von funktionen zur werden und werden nnen 
diese funktionen werden au von klassen definiert normale nnen nicht der form werden 
operator die die von java klassen 
dies ist eine erweiterung 
pattern matching wie funktionalen sprachen 
der instanceof operator wurde dass damit nicht nur die zu einer klasse sondern die eines werden nnen 

relationen wurden als gt und kombination mit und einer backtracking und ist prolog logische programmierung glich 
die der von leda nach java wurde hrt dass die von java wurden 
die implementierung besteht aus einem pr der alle von mp java 
auf diese weise sind mp programme ma zu java und hig wo eine java implementierung 
und war der von placer eine von auf 
die wurde placer und die version der hei 
allen ist dass sie auf einer programmierung mit verz auswertung wie nicht funktionale programmiersprachen 
stream cke werden zu einer verz liste 
das dass die einzelnen der liste werden wenn ihre auswertung den ist 
die auswertung stream cke ist placer hi 
hi local der sst dass es glich ist eines stream variablen zu 
die im design der sprache im zu ist das block 
block cke den stream cken sie aber andere 
eines blocks werden alle berechnungen ausgef hrt und die im des blocks werden von links nach ausgef hrt 
weiterhin sind bl cken im zu stream cken imperative variablen und die auswertung eines block einem nicht einem strom von 
das beispiel soll dies 
local 
die von stream cken und bl cken definiert placer vier die den folgenden glichkeiten zur dieser 
stream stream 
stream block 
block stream und 
block block 
die lle werden das die variablen und des diese aber nicht durch 
im fall der block die variablen des blocks ver 
dies erm auch die objekt orientierte programmierung objekte als bl cke repr werden 
und objekt programmierung unterst auch die logische programmierung streams als relationen werden die durch cke werden nnen 
ein ist ein dem ein pr wird 
alle die das pr nicht erf sind dem stream nicht 
aus der wird nicht wie von bl cken mit streams werden soll da alle verz werden 
dies ein problem zu sein wenn ein programm auf ein block ist beispielsweise die mit dem aber verz streams verwendet werden sollen 
westbrook einige zur programmierung paradigmen mit der der 
alle ein zum eines aus einer liste list 
werden listen die liste und ist der listen 
die erste imperative sung eine und eine um die func delete list local foreach list 
die funktionale ist definiert func delete list list head list delete tail list head list delete tail list 
die logische implementierung wird eine logische delete definiert 
die die variable temp mit element der liste temp als die liste list verwendet wird 
dann wird ft ob temp mit dem zu element ist 
wenn nicht ist temp ein und wird der gt 
die die durch den hlt wurden und sind werden einer liste und als zur 
func delete list local temp list temp temp temp 
zur illustration der objekt wird eine klasse definiert die eine liste repr und eine methode zum eines elements 
wird eine von list definiert dann wird ein sowie eine methode zum gen eines elements und die methode zum gt 
diesem beispiel ist der zur objekt programmierung vor die paradigmen 
die des programms ist objekt es werden aber auch imperative funktionen wie der append operator und logische zum von listen list verwendet 
list local list 
func init list func add list list 
func delete list list list 
oz oz smolka logische funktionale sowie objekt orientierte programmierung 
die sprache auf akl siehe abschnitt 
die erweiterungen aus funktionen ordnung sowie einem zustand der objekt orientierte programmierung erm 
die programmierung mit oz wird von ller 
en eine berechnung ist als ein nebenl objekte die und mit der welt ein 
der objekte werden funktionen und pr verwendet um wissen oder form zu 
berechnungen werden oz durch logische sowie die 
durch die nebenl und die zur ist es glich prolog programme keine sung mit oz alle zu 
objekte oz sind die eine zelle die den zustand des repr 
nnen einer operation werden 
da objekte sind das einer einem bei dem die methode mit dem zustand und einer logischen variable die den zustand zum wird 
der einer methode wird ausgef hrt dass der zustand von einer zur wird dass er alle und 
haridi van roy und smolka haben oz zu einer verteilten distributed oz haridi 
durch die einf hrung von objekte nnen sein und kommunikation zur kommunikation zwischen verteilten nnen verteilte werden ohne dass die der werden muss 
life life kaci und podelski ist eine von prolog 
im zu prolog life nicht auf ordnung sondern auf 

terme von und term rt zu einer einer ordnung die durch eine definiert ist 
die gr te hei top die die die bottom 
werden wie prolog durch resolution die auf terme wurde 
hrend terme prolog durch den des und die der werden haben terme keine terme nnen um attribute erg werden die einen oder schl mit einem 
dem folgenden beispiel wird ein term definiert der attribute 
der des number wheels ist eine der int und durch der anderen string und real lie en sich aus dem term car terme die autos 
auf diese weise stellt life einen zur zur verf gung der objekt orientierte programmierung werden kann 
car number wheels manufacturer string maximum speed real der programmierung durch pr wie prolog unterst life auch die definition von funktionen 
funktionen werden die einen durch pattern matching hlt wird 
wenn ein parameter nicht ist wird der wie oz siehe abschnitt verz gert 
eine der funktionen life ist dass diese mit als den werden nnen currying wie funktionalen sprachen 
dar ist es aber auch glich nicht nur ein oder parameter am ende der sondern auch am oder der 
da und terme sind nnen parameter ber oder die werden 
der term eine funktion die zu argument sie die funktion parameter 
die bin ren und funktionen stellt life eine zur verf gung 
diese funktionen sind sind aber dar der einen der parameter zu wenn der andere parameter und das 
hrt die ausf hrung des dass und werden 
diese erm eine form der constraint programmierung 
life die logische und funktionale programmierung und stellt einen zur verf gung der objekt orientierte programmierung unterst 
dar ist ma constraint programmierung glich 
life kann als werden 
diesem wurden programmiersprachen die als entwickelt wurden oder die der integration oder paradigmen als werden nnen 
von programmiersprachen lassen sich aus den sprachen zum deklarative sprachen die logische funktionale und auch sprachen zum sprachen welche deklarative und imperative paradigmen auf die eine oder andere weise und die der da als multiparadigmen programmiersprachen 
die sprachen sst sich dass die integration sowohl auf als auch ist allerdings der der einzelnen sprachen nicht ist wie bei den anderen 
bei der kombination und sprachen lassen sich zwei wird die deklarative von der ausf um die rein deklarative semantik durch die verwendung von oder es wird eine semantik zu die den siehe boehm 
die integration der sprachen ist da die einzelnen die semantik der sprachen formal definiert wurde und die und vollst sind 
die und es formale seiteneffekte standard ml integration von ein wurden imperative aber auch ad hoc ohne die zu 
die leda mp und keine formale definition die die diese nach sich sind wenn nur hrt 
die der semantik von soll werden 
fall ist zu dass die glichkeiten zur ausf hrung von der computer der programmiersprachen ber werden 
einige sprachen einen zur von exceptions semantik ist aber selten definiert 
ein beispiel diese ist ein einer verz funktionalen sprache da der bei der auswertung eines verz kann ist es zu einem zu 
diese dass es eine programmiersprache ist auch zu die und sind 
syntax und semantik im sprachen untersucht wurden sollen diesem allgemeine und von multiparadigmen programmiersprachen und werden 
syntax sst sich alle programmiersprachen dass sie eine bzw 
pr und sprachen orientierte syntax zur verf gung 
dies nat im ma die allerdings eine die sprachen ins llt nicht nur verschiedene paradigmen auf der diese paradigmen ssen sich auch cken lassen 
im konzepte und als die sich unter 
die integration ist die und bei der 
die programmiersprachen bei der 
zum einen die daf aber mit den glichkeiten zur verf gung um ein und der sprache zu 
die funktional logische sprache curry siehe abschnitt keine zwischen und vor und daher aus wie eine funktionale sprache 
ob eine berechnung oder abl ngt ab ob der term freie variablen lt oder nicht 
auf der anderen seite es sprachen welche die der paradigmen auch auf um die 
ein beispiel daf ist die sprache del siehe abschnitt welche zwischen pr und funktionen 
ein dieser ist ein da durch eine das verhalten wird 
weiterhin das wissen das der durch die verwendung das programm dem compiler beim und beim und bei der des 
den nnen ein tze werden die beim im aber auch im bei ber werden 
die syntax einer programmiersprache erf die syntax welche ein hat es sich um eine relevant zur oder eine ausgef hrt zur welche seiteneffekte hat eine im ma der syntax sein paradigma bei der eines einzelnen im stand um die zu 
der zwischen und ausf muss werden dass die sprache sich sowohl gut als auch gut sst 
alle die mit gleicher sprachen zur verf gung auch sprachen keine mit anderen 
dies das der sprache und vor 
die syntax auch einer die programmierung einem einzelnen paradigma und mit der unterst die von wird 
ob die programmiersprache ausf ist und viele schl oder ob sie zur von sst sich unter ber der geschichte der entwicklung von programmiersprachen nicht 
ist eine zu sehr abh von den und dem des 
die nnen nur die des und keine pr 
ans tze der sich ans tze zum multiparadigmen syntax entwurf 
den sprachen wie curry wurden im aus sprachen aber auch 
budd leda siehe abschnitt die die integration und objekt programmierung 
leda ist es glich normale funktionen und methoden beim zu dass es ist welche der man 
wenn ein der form receiver method param wird pr ft der compiler ob der klasse von receiver eine methode method definiert ist 
diesem fall wird ein 
eine funktion welche als parameter einen der klasse receiver wird ein und receiver als parameter gt nat die anderen parameter zum typ der funktion 
der ist zu method receiver param verf hrt der compiler bei einem func param param keine funktion definiert sein die klasse von param aber eine methode func wird diese methode ein param func param diese sowohl eine objekt orientierte als auch eine funktionale notation und damit eine integration der zwischen und funktionen 
die sprachen und sind daf dass sprachen mit und auf den eine wurden 
die und werden sowohl als als auch als und zur von cken 
und als sowie zur 
diese hrt zur von 
ein konzepte und cke auch der 
semantik die programmiersprachen ssen einer und sowohl als auch sein 
dabei paradigma einem der anderen beispielsweise imperative nur durch werden nnen wie dies funktionalen sprachen der fall ist 
paradigmen nur form einer der repr sein 
sst sich dass paradigmen sich sehr gut zur kombination mit anderen paradigmen 
dies vor dann zu wenn die zu paradigmen auf verschiedene der sung sind 
ist beispielsweise die erweiterung paradigmen um objekt orientierte konzepte wie objekte klassen und oder die integration von nebenl durch das gen aus gut untersucht 
fast alle funktionalen constraint logischen oder sprachen erweiterungen 
deklarative sprachen lassen sich ihrer gut sich arbeiten zur constraint logischen und programmierung gt 
da noch nicht untersucht ist die kombination und programmiersprachen 
glichkeiten sollen den folgenden untersucht werden 
semantik sprachen die integration und sprachen ist es und albert lloyd ller 
funktional logische sprachen die sprachen und sich vor bei der 
zwei haben sich residuation wird escher le fun life prolog und oz verwendet 
werden durch das dass die sind dass eine glich ist 
wenn ein argument nicht einen ist wird die verz gert 
ein das argument kann die berechnung werden 
diese verz dass durch pr oder werden muss wenn sie ist 
narrowing wird curry und verwendet 
beim narrowing wird das pattern matching sprachen durch 
nnen auch ausgef hrt werden die parameter werden diesem fall die variablen welche die nicht parameter 
da durch die informationen nicht nur eine sondern auch en nnen sind gr ere der sprachen als bei der residuation 
der des narrowing besteht dass die funktionen mit den glichkeiten und dem mit informationen sprachen wird 
der sprache curry ist es durch glich mit diese sind 
dies erm bei der eine zwischen residuation und narrowing zur anwendung 
hanus hat ein deklarative sprachen entwickelt hanus das funktionale und logische formal 
sowohl als auch nicht sowie residuation und narrowing werden 
der dieses ist dass sowohl die funktionale auswertung als auch die glichkeiten sprachen werden nnen 
die integration von constraint programmierung und der logischen sowie der funktionalen programmierung wurde 
der von der logischen zur constraint logischen programmierung besteht im aus der erweiterung terme herbrand terme um terme des engl 
domain discourse chakravarty 
sst sich die funktionen der von der constraint logischen zur funktional constraint logischen programmierung terme werden von funktionen auf cke auch funktionen 
chakravarty 
ein ansatz wird beim definitional constraint programming guo und pull 
dieser ansatz wird der sprache falcon verwendet siehe abschnitt 
semantik und sprachen die kombination und berechnungen ist ihrer glich des eines programms 
deklarative programme sind von der zeit die auswertung dieser programme ist 
dies hrt zu einer reihe von wie der zur verz auswertung die gegen ber sprachen neue erm glichen beispielsweise den mit 
durch die integration berechnungen die durch seiteneffekte sind diese glichkeiten bei einer kombination da der einsatz von eine der 
wenn man die die mit der von stellt sich die ob eine paradigmen kombination und ist 
viele gr aber daf ist die welt und eine programmiersprache welche keine mit ihrer kann nicht programme werden 
imperative seiteneffekte sind zur programme 
weiterhin seiteneffekte aber auch einem wie swarup 
ausf die imperative programmierung eine daten die abbildung sich 
engl 
shared data weiterhin verschiedene auf ein und 
werden allen die auf die daten haben 
auf diese weise lassen sich viele prozesse als rein 
oft sind seiteneffekte auch die probleme sprachen zu sen wie dies sprachen glich ist 
launchbury als beispiel wie oder 
swarup 
dass die integration von deklarative sprachen sein muss die deklarative und die imperative sollen werden nnen 
berechnungen lassen sich zwei launchbury berechnungen sind au des programms und ssen daher auf fall und der werden 
diese berechnungen sind im oder die mit oder anderen 
interne berechnungen die von bei der pseudo oder hash haben nur eines des 
der zustand auf dem die ver ausgef hrt werden wird nach der berechnung 
da die von au nicht sind ssen diese berechnungen auch nur dann ausgef hrt werden wenn sie zum 
von berechnungen nnen werden interne berechnungen lassen sich aber nicht ausgef hrt werden 
zur integration und sprachen werden verschiedene ans tze welche im folgenden werden eines programms werden durch str verz listen ein strom wird die des programms und ein strom die 
die der einzelnen berechnungen wird durch die den rest des programms als continuation als parameter 
die welt wird durch typen die durch ihre eine ausf von 
die deklarative hrung und die ausf hrung werden zwischen berechnungen engl 
calculations und engl 
actions wird 
dieser ansatz auf 
deklarative kalk le werden um primitive 
ein ansatz besteht eine programmiersprache der seiteneffekte die haben nnen zu und 
zwischen es auch und man kann auch dieser ans tze stellt die und auch eine dar 
im folgenden sollen aber die der ans tze die sich auch der der praxis werden 
str wadler die integration von durch str bei der modellierung von durch str ist ein programm eine funktion die auf 
diese funktion wird auch dialog 
sowohl ein als auch werden als verz listen str 
haskell syntax ist ein programm eine funktion des type dialogue response request request zur und response die der 
ein programm mit es diese stellt und die als 
das problem dieser modellierung ist dass die request und response von sind und alle glichen ssen 
weiterhin ist es beim die synchronisation der str schlie muss zu der zu 
str wurden den der programmiersprache haskell sowie rein funktionalen sprachen sind aber ihrer sprachen nicht verwendet worden 
continuations im continuation modell wadler lt operation ein argument die continuation die den rest der berechnung 
dieses argument kann ein oder auch eine funktion sein die wird um den rest der berechnung 
werden continuations durch den answer der das einer berechnung 
die zum bzw 
eines haben typen putc char answer answer getc char answer answer das eines hrt die operation aus und lt sich wie die continuation hrend das eines die funktion mit dem welche den rest der berechnung 
continuations wurden die funktionale sprache hope burstall verwendet 
das ist auch als compiler verwendet worden da der wird appel 
wie bei den str men ist die programmierung mit continuations aber un sie sprachen nicht verwendet wurde 
typen typen auch typen sind eine erweiterung welche die verwendung eines engl 
single threadedness 
auf diese weise werden berechnungen die mit dieser typen dass sie sich zum cken berechnungen 
dieser ansatz wurde bei der entwicklung sprachen von wir uns zwei die logische sprache mercury und die funktionale sprache clean 
mercury die ein und bei mercury wird ber ein das den zustand der welt repr 
pr ein oder hrt dieses objekt als ein und 
beispiel main io io io write string hello world io io 
da das dieses ist und die definition des pr tig wenn ein einem pr ausgef hrt werden mercury eine alternative notation pr definite clause grammars dcg 
dieser notation werden die alle pr ngt dass pr sich wie sst main io write string hello world 
den fall dass ein pr eines dcg pr nicht das soll ist es wie im folgenden beispiel 
main io write string factorial factorial io write int io nl 
clean die rein funktionale programmiersprache clean verf gt ber ein das typen eng 
unique types unterst smetsers 
dieser typen haben die single threaded zu sein nicht verwendet werden zu nnen 
wie die und typen bei mercury nnen diese werden um den zustand der welt zu repr 
plasmeijer und van eekelen typen en wenn ein argument einer funktion als wird ist dass zur das ist keine auf dieses objekt 
da keine von au einer funktion auf das objekt kann eine auf andere berechnungen haben und kann hrt werden ohne die des programms zu ren 
typen clean werden mit einem stern 
als beispiel die anwendung typen soll eine funktion zum eines eine werden plasmeijer und van eekelen char file file das argument ist als kann ver werden 
das das der operation das verwendet werden kann um auf der file file file wenn eine operation keine seiteneffekte auf argument ausf hrt sind keine 
die funktion welche ein aus einer ist ein beispiel daf file char file eine die wird kann sowohl als auch nicht sein 
bei der modellierung von durch das deklarative programm eine welche die lt und einer ausf werden diese unter ausf hrung der seiteneffekte 
da diese gro sein nnen diese ausf nur der werden ausgef hrt 
die die durch die der ausf wird kann vom compiler werden um seiteneffekte die ausf hrung der sprachen ohne dass beispielsweise die 
diese zur integration sich sowohl bei der implementierung von ein durch verz streams als auch durch sabry 
andere imperative oder berechnungen mit sprachen zu sind 
die verwendung von deklarative ein und wadler sowie berechnungen sich bei rein sprachen zu haben beispielsweise der funktionalen sprache haskell peyton jones 
haskell auch haskell werden seiteneffekte durch ein den zustand der welt die deklarative sprache 
allerdings wird hier nicht dieses objekt als parameter bzw 
sondern durch ein und 
ein und werden haskell durch ein ausgef hrt das sind funktionen die den zustand der welt als und ein sowie den ver zustand der welt zur 
haskell notation haben diese folgenden typ type io world world da haskell funktionen ordnung unterst werden ein und aus den funktionen sowie 
diese hei en bind und return 
io io io return io einen sowie eine funktion die einen und einen hrend return einen einen des 
wie man den typen von und return kann der typ der welt bei gar nicht auf und kann ein haskell programm auf zustand nicht 
ein programm haskell ist eine funktion vom typ io und wird ausgef hrt dass diese funktion auf den zustand der welt wird 
durch die wird dass der zustand durch das programm wird ohne einer oder zu werden 
er eine repr sentation der welt und die ein 
haskell das dass abschnitt mercury wurde en aus main io main putstr hello world semantik seiteneffekte als der ein und stellt der ansatz ein der programmiersprachen integration dar 
aus diesem soll im folgenden die semantik ein und formal werden 
diese dem der abl berechnungen und soll die zu einf 
die ist peyton jones 
da sich nicht nur zur ein und sondern auch zur modellierung sich auch erweiterungen dieser semantik auf nebenl und mit engl 
exceptions 
die semantik ist keine vollst beschreibung der semantik sprachen mit sondern sich auf die 
wird eine welche die semantik der rein funktionalen der sprache definiert 
um die zu muss der des engl 
evaluation context hrt werden 
ein ist ein term mit einer cke engl 
hole 
der das wenn das im term mit llt wird 
das ist einem dass es teil des terms als anderen programmiersprachen diese auch andere wie yield bzw 
lift return 
abbildung syntax von und variable constant constructor ch char integer values cm 
mn ch return putchar getchar terms mn evaluation contexts werden muss 
dies ist um die der ausf hrung der seiteneffekte einem term zu 
abbildung stellt die syntax einer funktionalen sprache mit dar 
die werden als und das funktionale programm diese um die ausf hrung von zu 
die sind abbildung 
der zustand des programms wird durch einen noch term 
die auswertung des programms besteht der hrung eines der einen dem keine werden nnen 
eines soll die ausf hrung eines programms werden 
sei das programm main getchar putchar zu diesem term der putchar durch anwendung der sich getchar putchar ch return ch putchar putchar ch putchar ch ch return die den berg die seiteneffekte die durch die ausf hrung des programms wurden 
dabei ch die eines ch und ch die 
ariola und sabry imperative und funktionale programmiersprachen sie durch zustand 
durch die verwendung term und typ wird die von 
ist ein programm mit zustand zu einem funktionalen programm das den zustand und um zu 
die implementierung abbildung putchar ch getchar ch return ch return ch return ist dass code die von werden muss und code das des 
im die arbeit die erweiterung des call need kalk ls um imperative variable 
anderen programmiersprachen werden nicht nur zur beschreibung rein sprachen wie haskell 
die sprache standard ml imperative berechnungen durch 
daher lassen ml programme sich nicht gut wie beispielsweise haskell programme 
auf zustand wurde eine ml sprache mit und einem operator zur von entwickelt und sabry 
dieser ansatz ein mit und dem von lucassen und gifford siehe abschnitt 
imperative erweiterungen des kalk ls einige funktionale sprachen standard ml oder lisp keine um die rein sprachen zu 
seiteneffekte werden durch primitive die der berechnung eines die hrt 
es gab aber auch seiteneffekte art und weise das funktionalen sprachen zu kalk und ein zu 
die folgenden arbeiten sich von erweiterungen des kalk ls dass sie nicht durch werden 
felleisen den cs kalk der eine erweiterung des kalk ls um und 
wie der var kalk von odersky 
es sich bei diesem kalk nicht um die erweiterung des kalk ls durch einen sondern um eine erweiterung der bei alle terme die durch das einer variablen werden mit dem werden 
ein ansatz seiteneffekte form besteht sie die von en zu lassen und die abbildung glichkeiten von und ra ra nen ber das verhalten des programms zu 
sind des von cken 
typen welche werden und wie sie werden 
im zu typen lt die dabei nicht nur zur eines sondern es werden die seiteneffekte ber die durch die auswertung eines werden 
gifford und lucassen cke nach 
allocate eine ver wird 
read eine ver wird 
write eine ver wird mit sst sich ein wie er abb 
ist 
die glichkeiten wurden von gifford und lucassen vier 
ra procedure ra observer function pure reine funktion die einzelnen eine ordnung procedure das gr te element und pure das element 
ein der klasse procedure seiteneffekte ein observer diese seiteneffekte nur eine function ver aber noch 
ein der klasse pure seiteneffekte sen daf ist er aber transparent und muss parameter nur ein mal werden kann dieser werden memoization 
der sprache wird eine dieser und wie ein programm auf ft wird wird ft dass cke nur cke die zur oder einer ren 
abbildung sprache abstraction application polymorphic abstraction proj polymorphic application new allocation read write descriptor function type type abstraction ref type locations eine erweiterung des besteht terme nicht nur mit zu sondern auch ber zu 
dies mit den von lucassen und gifford die zur von wurden 
sie ein mit engl 
kinds typen und 
typen die die eine operation als haben kann die seiteneffekte einer operation und den teil des der von den ist 
zum operational seiteneffekte 
ein ist die sind die auch als parameter funktionen werden nnen 
die sprache die lucassen und gifford als typ und ist abbildung 
im folgenden soll nicht das sondern nur der erl werden 
die pr sei auf die lucassen und gifford 
werden definiert welche die typen und von variablen und 
pure pure einen typ zu hrend eine art typ region 
weiterhin werden alle definiert die zu auch auf werden nnen 
bei werden der des sowie argument und zu einem 
der des ist ein da er bei der der funktion zum siehe 

abstraction der einer sich aus den des sowie des und aus dem des 
der wird dabei von der funktion die die der 
bei der die wird typen und werden den der funktion der bei der die berechnung application die des den hier 
eine erweiterung des dar 
wird die syntax der cke abbildung um private cke private dieser eine private region die nur des ver werden 
da diese au des nicht sind ssen sie nicht den des private werden 
von typen die sind und daher sowohl typ als auch 
dies ist ein gegen ber funktionalen sprachen die der compiler typen kann 
jouvelot und gifford einen zur der typen und von cken einer sprache der kann 
im zu dem ansatz von lucassen und gifford sind bei diesem ansatz keine typ oder sie werden vom system 
wie bei lucassen und gifford bzw 
funktionen welche die des einer von der definition zu den des 
und die den alle auf einer kombination paradigmen 
ein ansatz besteht einer st der 
gelernter und carriero die von 
sie einem das und das 
das die und beschreibung einer einzelnen berechnung 
das der berechnungen 
dabei programmiersprachen das hrend das das zum von berechnungen und zur kommunikation zwischen muss durch wird 
diese zwischen sprachen einem system sich programmiersprachen und systemen oder weise wieder 
einige constraint funktionale sprachen goffin abschnitt falcon abschnitt eine funktionale sprache als und constraints zur der dieser sprache berechnungen 
auch zur programmierung die zwischen einer sprache und einer 
dabei unter zur von 
aber auch die integration von und sprachen diese wieder 
die ein und den zwei werden einer funktionalen sprache ein dann werden diese ausgef hrt 
die deklarative sprache diesem fall als 
sst sich die integration und programmierung aber auch dass imperative deklarative berechnungen um diese einzelnen berechnungen dann durch zu 
die kombination dieser auf die imperative programmierung hrt dann zu der dass sich lassen und die freie kombination dieser paradigmen erm wird 
gelernter und carriero auch 
als beispiel sie linda eine die zu fast programmiersprache gt werden kann 
ihrer argumentation ist der des ensembles das eine ist 
eine kann dabei ein thread agent aber auch ein sein und ein ensemble 
ensembles aber 
ist orthogonal zur berechnung daher daf eine notation verwendet werden 
weiterhin eine wie glich sein nicht eine sprache 
berechnungen bed der ein und zur ssen werden wie die parameter zwischen funktionen und threads 
programmiersprachen werden diese ad hoc die sprache 
eine bei der von berechnungen auf neue und systeme 
paradigmen ein schl gt zave vor das gen paradigmen durch mit 
zave untersucht verschiedene ans tze der paradigmen kombination die sie bzw 
entwickelt hat 
werden und grundlagen auf paradigma werden kann 
der dieses ist dass man wissen muss wie die einzelnen paradigmen auf der sind um zu wie sie 

der wird oft um anders als diesem bericht die integration aber zu die kombination sprachen und arrays 
nach es sich dabei nicht um die integration paradigmen sondern um 
paradigmen sich um verschiedene 

ansatz besteht der paradigmen durch die der als nebenl 
dabei die der paradigmen auf den grundlagen der paradigmen 
das und zur programmiersprachen ist nach der 
sie ansatz aber noch zwei str streams und events 
str der verz von daten zwischen den einzelnen paradigmen hrend events 
die diesem abschnitt von deklarative sprachen viele bzw 
auf 
wurden sprachen entwickelt auf sprachen mit verz lassen sie sich nicht ohne 
allerdings sind zwischen den der die seiteneffekte sollen und der seiteneffekte mittels launchbury zu 
interne seiteneffekte zu dass berechnungen werden nnen 
seiteneffekte die von wie sie durch str und continuations wird mit dem des information hiding die den return und werden 
weiterhin wird bei der zustand der welt als auf den nicht werden kann 
dies die single threadedness des die als seiteneffekte werden nnen 
nnen durch str werden wie wenn auch 
continuations und nnen hrt werden 
die modellierung von durch typen ist glich nicht seiteneffekte und nnen sprachen mit auswertung werden 
diese wadler dass alle ans tze ihrer sind und die ber einsatz 
zur zeit der ansatz der der und des am 
auch arbeiten werden die nge untersucht 
benton 
barthe 
sehr ausf den ansatz sowohl von seite als auch die der sprache haskell 
weiterhin erl sie sehr und die nge dieser dar 
praktische den dieses wurden vor theoretische der 
im folgenden sollen kurz einige praktische probleme und glichkeiten werden die eine integration mit sich 
implementierung die implementierung seiteneffekte kann durch verschiedene verfahren peyton jones 
werden die einzelnen die die mit der au repr als primitive die der compiler oder werden als funktionen die vom compiler werden wie alle anderen funktionen 
bei der methode ist es allerdings dass der compiler bei einer sprache mit verz auswertung keine cke da dies die semantik die ausf hrung seiteneffekte rt 
reflection unter reflection kiczales sun microsystems man die eines systems die und zu nnen 
ist es beispielsweise ein programm einem system das reflection unterst glich typ eine funktion oder ein 
reflection kann zur paradigmen werden wenn zur hrung eines oder zur interpretation einer einem anderen paradigma informationen ber diese sind 
sind sentation oder andere meta informationen beispielsweise ob eine funktion ist oder nicht 
sentation paradigmen und programmiersprachen auch verschiedene auf die mit wird 
arbeiten imperative programme oft mit arrays hrend deklarative sprachen mit wie listen 
dies hrt dass diese werden um die das paradigma zu erm glichen 
bei einer einer kann man im entwurf auf die bei der erweiterung einer sprache sind unter 
eine methode um sprachen und systeme zu ist die definition einer sentation zum 
alle programme die diesem ssen dann nat beim ihrer daten die repr sentation die und beim eine 
ist nat wenn von alle mit sentation arbeiten 
beispielsweise wurden microsoft net pr die definiert die alle diese ssen 
andere arbeiten andere arbeiten auf dem der multiparadigmen programmierung sich mit dieses wie der funktional logischen programmierung oder der integration von eine deklarative sprache 
diese arbeiten wurden den dieses 
der abschnitt soll die arbeiten die sich mit der multiparadigmen programmierung sich sowie mit dem einsatz von 
budd sich mit der multiparadigmen programmierung mit der von ihm programmiersprache leda lt aber allgemeine zu diesem die auf den entwurf von leda haben 
aber auch zum beispiel der einsatz sprachen oder die verwendung von logischen relationen als werden erl 
zu software entwicklung und dabei vor auf ein die sich paradigmen wie auf die orientierte programmierung 
westbrook und placer sich mit dem einsatz von der 
sie dass sprachen den haben keine neue zu um die prinzipien paradigmen zu 
glich der syntax von sst sich im dieses keine von den 
zur semantik programmiersprachen ist zu dass die kombination sprachen sehr hrt wurde und arbeit sich auf die und sprachen 
die ans tze sind oder sich auf theoretische kalk le die der praxis wurden 
der konzepte sich bei der integration und programmiersprachen wird ist noch nicht allerdings ist aus der ansatz am da er die der anderen ans tze von ausf hrung mit dem der abl 
beim entwurf sprachen ist dass es sich dabei nicht um ein sondern um die integration paradigmen einem modell ller 
ein modell em dem die semantik der programmiersprache vollst zu um und programme zu ohne einer un glichkeiten der sprache die zu 
arbeiten und den und die zu sowie wurden soll ein auf arbeiten werden die sich den bericht en 
arbeiten die forschung auf dem der multiparadigmen programmierung sehr zu sein 
zum beispiel zur integration und programmiersprachen und zur integration von funktionale sprachen aber zum problem der kombination dieser und 
aus diesem ich forschung diesem bereich die 
dabei der auf der der und und und freier paradigmen kann dann die integration eine semantik 
diese entwicklung eines zur multiparadigmen programmierung die definition eines kalk ls mit formale ber die sprachen werden nnen 
diese sind um mit programme und zu nnen 
weiterhin eine semantik dieser sprache entwickelt werden die als einer implementierung kann 
mir dass diese zu einer definition einer repr hrt auf der untersuchungen und erweiterungen nnen ohne neue einf zu ssen 
den einsatz von zur erweiterung von programmiersprachen generative programmierung oder meta programmierung entwickelt werden 
dieser wurde beim entwurf der diesem bericht sprachen nicht ber aber den einsatz sehr zu sein siehe auch hill und lloyd lloyd 
dieser bericht einen ber verschiedene und sowie ber ans tze zur integration paradigmen programmiersprachen 
werden verschiedene zur unterst der forschung auf dem der multiparadigmen programmierung 
im wird erl unter der wird und wie sie zu sind 
weiterhin werden die funktional objekt 
und programmiersprachen 
oder paradigmen der werden und und schlie werden sprachen die als wurden 
das untersucht von sprachen zur und zum entwurf von 
diesem werden au erdem forschung zur multiparadigmen programmierung 
die multiparadigmen programmierung stellt eine sung und probleme dar wie sie gro en 
sind die ans tze zur multiparadigmen noch die programmiersprachen multiparadigmen sprachen entwickelt um sowohl als auch die durch zu 
diese eine programmiersprache die sowohl eine syntax zur programmierung als auch eine semantik um eine formale zu nnen 
dieser bericht den um auf der der arbeiten eine sprache zu 
kaci und podelski 
meaning life 
journal logic programming 
albert hanus huch oliver und vidal 
operational semantics declarative multi paradigm languages 
proc 
th international workshop functional constraint logic programming italy 
research report rr universit degli studi di udine 
appel 
compiling continuations 
cambridge university press 
apt und schaerf 
alma imperative language supports declarative programming 
acm toplas 
apt und schaerf 
search imperative programming 
conference record popl th acm sigplan sigact symposium principles programming languages paris france 
apt und schaerf 
alma project order logic help imperative programming 
correct system design lecture notes computer science 
springer verlag 
ariola und sabry 
correctness monadic state imperative call calculus 
proceedings th acm sigplan sigact symposium principles programming languages 
backhouse jansson jeuring und meertens 
generic programming 
lecture notes computer science volume 
springer verlag 
revised version lecture notes afp 
backus 
programming liberated von neumann style 
functional style algebra programs 
communications acm 
barthe pinto und 

applied semantics 
lecture notes computer science 
springer verlag 
benton hughes und moggi 
applied semantics monads effects 
lecture notes computer science 
springer verlag 
berlin akademie der wissenschaften das der deutschen sprache des 

world wide web 
www de ft 
boehm 
logic expressions side effects 
proceedings th acm sigplan sigact symposium principles programming languages 
acm press 
ortega mall und pe 
eden coordination model distributed memory systems 
chakravarty 

van eekelen van plasmeijer und barendregt 
clean language functional graph rewriting 
kahn proc 
conference functional programming languages computer architecture fpca portland oregon usa lecture notes computer science 
springer verlag 
budd 
blending imperative relational programming 
ieee software 
budd 
multiparadigm programming leda 
addison wesley 
budd 
functional programming fragile base class problem 
sigplan notices 
acm budd 
return jensen device 


budd justice und pandey 
general purpose multiparadigm programming languages enabling technology constructing complex systems 
technischer bericht oregon state university department computer science 
cabeza hermenegildo lopez und 
ciao prolog system 
technischer bericht clip clip group school computer science technical university madrid 
clip dia fi upm es software ciao ciao pdf ft 
burstall macqueen und sannella 
hope experimental applicative language 
conference record lisp conference stanford university stanford california august 
acm press 
chakravarty guo und ida 

multi paradigm logic programming des informatik 
technische universit berlin 
chakravarty guo hler und lock 
goffin higher order functions meet concurrent constraints 
elsevier science 
special issue science computer programming 
colmerauer 
prolog iii 
communications acm 
czarnecki und eisenecker 
generative programming methods tools applications 
addison wesley 
dahl 
und nygaard 
simula algol simulation language 
communications acm 
diaz 
gnu prolog native prolog compiler constraint solving finite domains 
world wide web 
pauillac inria fr diaz gnu prolog manual index html ft 
felleisen 
cs extended calculus scheme 
proceedings acm conference lisp functional programming 
acm press 
fr le provost lim und wallace 
constraint logic programming informal 
technischer bericht ecrc ecrc 
gelernter und carriero 
coordination languages significance 
communications acm 
gifford und lucassen 
integrating functional imperative programming 
proceedings acm conference lisp functional programming 
goldberg und robson 
smalltalk language implementation 
addison wesley 
ller 
constraint imperative programming 
diplomarbeit technische universit berlin 
ller und 
turtle constraint imperative programming language 
third international conference innovative techniques applications artificial intelligence xx research development intelligent systems 
british computer society springer verlag 
guo und pull 
falcon functional logic language constraints language definition 
technischer bericht imperial college london 

design multiparadigm language 
proceedings twentieth annual hawaii international conference system sciences 
hanus 
compiling logic programs equality 
proc 
nd int 
workshop programming language implementation logic programming lecture notes computer science 
springer verlag 
hanus 
unified computation model functional logic programming 
proc 
st acm symposium principles programming languages popl 
hanus fr und wolf 

workshop multiparadigm constraint programming languages fourth workshop rule constraint reasoning programming 
workshop proceedings 
hanus und moreno navarro 
curry truly functional logic language 
proc 
ilps workshop visions logic programming 
haridi van roy und smolka 
overview design distributed oz 
chakravarty 

hill und lloyd 
del programming language 
mit press 
jaffar und maher 
constraint logic programming survey 
journal logic programming 
jaffar und lassez 
constraint logic programming 
conference record fourteenth annual acm symposium principles programming languages volume 
acm press 
janson 
akl multiparadigm programming language 
phd thesis uppsala university 
available sics dissertation series 
janson und haridi 
programming paradigms andorra kernel language 
saraswat und ueda 
logic programming proceedings international symposium san diego usa 
mit press 
jansson 
functional polytypic programming 
phd thesis computing science chalmers university technology teborg university sweden 
jouvelot und gifford 
algebraic reconstruction types effects 
proceedings th acm sigplan sigact symposium principles programming languages 
acm press 
kelsey clinger rees 
revised report algorithmic language scheme 
acm sigplan notices 
kiczales rivi res und bobrow 
art metaobject protocol 
mit press 
kiczales lamping mendhekar maeda lopes loingtier 
und irwin 
aspect oriented programming 
proceedings european conference object oriented programming ecoop 
knuth 
web system structured documentation 
technischer bericht cs stanford university stanford ca 
kobayashi marin ida und che 
open open system collaborative constraint functional logic programming 
proc 
th international workshop functional constraint logic programming research report rr 
university udine 
krishnamurthi felleisen und friedman 
synthesizing object oriented functional design promote re 
european conference object oriented programming 
launchbury 
lazy imperative programming 
proceedings acm sigplan workshop state programming languages copenhagen dk 
leroy und weis 
polymorphic type inference assignment 
proceedings th acm sigplan sigact symposium principles programming languages 
acm press 
lloyd 
declarative programming escher 
technischer bericht cstr department computer science university bristol 
lopez freeman benson und borning 
kaleidoscope constraint imperative programming language 
und 
constraint programming proc 
nato asi estonia 
springer verlag 
lucassen und gifford 
polymorphic effect systems 
proceedings th acm sigplan sigact symposium principles programming languages 
acm press 
miller 
logic programming language lambda abstraction function variables simple unification 
journal logic computation 
milner tofte harper und macqueen 
definition standard ml 
mit press 

moreno navarro und rodriguez artalejo 
logic programming functions predicates language babel 
journal logic programming 
ller ller und van roy 
multiparadigm programming oz 
smith und van roy 
visions logic programming laying foundations modern successor prolog workshop association ilps 
nadathur und miller 
overview lambda prolog 
bowen und kowalski 
proceedings fifth international logic programming conference seattle washington 
mit press 
odersky rabin und hudak 
call name assignment lambda calculus 
proceedings th acm sigplan sigact symposium principles programming languages 
acm press 
okasaki 
purely functional data structures 
cambridge university press 
pepper 
funktionale programmierung opal ml haskell und gofer 
springer verlag 
peyton jones 

haskell language libraries revised report 
cambridge university press 
auch von www haskell org definition ft 
peyton jones 
engineering theories software construction tackling awkward squad monadic input output concurrency exceptions foreign language calls haskell 
nato asi 
placer 
integrating destructive assignment lazy evaluation multiparadigm language 
acm sigplan notices 
placer 
promise multiparadigm languages pedagogical tools 
proceedings acm conference computer science 
acm press 
plasmeijer und van eekelen 
clean language report version 
technischer bericht university nijmegen 
puget 
implementation clp 
proceedings second singapore international conference intelligent systems singapore 

integration imperative logic programming paradigms horn clause programming pascal environment 
acm sigplan notices 
sabry 
purely functional language 
journal functional programming 

concurrent functional programming language erlang overview 
chakravarty 

saraswat 
concurrent constraint programming 
mit press 
und sabry 
monadic encapsulation ml 
conference functional programming 
international 
death computer languages birth intentional programming 
technischer bericht msr tr microsoft research 
siskind und mcallester 
nondeterministic lisp substrate constraint logic programming 
fikes und lehnert 
proceedings eleventh national conference artificial intelligence menlo park california 
aaai press 
smetsers barendsen van eekelen und plasmeijer 
guaranteeing safe destructive updates type system uniqueness information graphs 
schneider und ehrig proc 
graph transformations computer science international workshop dagstuhl castle germany lecture notes computer science 
springer verlag 
smolka 
oz programming model 
van leeuwen 
computer science today trends developments volume lecture notes computer science 
springer verlag berlin 
somogyi henderson und conway 
mercury efficient purely declarative logic programming language 
australia 
drossopoulou und eisenbach 
objects structuring multiparadigm programming environments 
journal object oriented programming 
steele 
common lisp language 
digital press massachusetts 
stefik bobrow und kahn 
integrating access oriented programming multiparadigm environment 
ieee software 
davis und smaragdakis 

multiparadigm programming object oriented languages nic series 
john von neumann institute computing nic 
sun microsystems reflection 
world wide web 
java sun com se docs guide reflection 
sussman und steele 
constraints language expressing descriptions 
artificial intelligence 
swarup reddy und ireland 
assignments applicative languages 
hughes 
conference functional programming computer architecture lecture notes computer science 
springer verlag 

multi paradigm software development 
technischer bericht university bratislava 
wadler 
declare imperative 
acm computing surveys 
westbrook 
multiparadigm language approach teaching principles programming languages 
th ieee frontiers education 
zave 
compositional approach multiparadigm programming 
ieee software 
dieser erl die diesem bericht 
sind auf andere ge des 
der index ab seite die der im 
access orientierte programmierung der und auf daten um sen die eine algebra 
aus dem alle terme durch substitution werden nnen 
orientierte programmierung auf ein und separate sung der durch 
backtracking um alternative 
ein wird bis er gt dann wird mit der alternative am 
call need siehe verz auswertung 
call value siehe auswertung 
call name parameter einer funktion werden nicht beim sondern wenn der des parameters ben wird 
choice point siehe 
constraint programmierung programmierung durch die von die die sung en ssen 
continuation passing style bei der funktion als argument der rest des form einer funktion wird 
einen zur wird die continuation mit dem als argument 
continuation eine continuation ist eine funktion welche den rest des 
continuations werden verwendet um die von funktionen 
eager evaluation siehe auswertung 
typen engl 
unique types typen die nicht werden nnen sondern nur einem verwendet werden nnen 
es ist nicht glich ein objekt mit einem typ einer oder funktionen als parameter zu 
funktionale programmierung programmierung durch die definition und von funktionen 
oft mit verz auswertung und 
programmierung bei der programmierung werden berechnungen ber dass funktionen durch die ihrer parameter definiert werden nnen 
auch programmierung 
zustand der von ver werden kann dass die allen anderen die auf den haben werden engl 
shared data 
imperative programmierung programmierung bei der der interne zustand des programms durch wird bis der zustand das repr 
kleisli element 
der kleisli 
kleisli funktionen die typen haben durch einen 
teil eines software oder das ber mit anderen 
lazy evaluation siehe verz auswertung 
typen siehe typen 
logische programmierung programmierung durch den von durch und die von 
das hei resolution 
logische variable nnen sowohl ohne oder einen sein 
logischen programmiersprachen werden durch logische variablen 
memoization um eine zu 
siehe auch verz auswertung 
aus der das der funktionalen programmierung wird 
eine besteht aus einem und zwei die die kleisli und die kleisli multiparadigmen programmierung anwendung zur sung eines problems bzw 
einer kombination von 
sprache die die programmierung mit paradigmen 
multiparadigmen die die programmierung mit programmiersprachen paradigmen einem programm durch einen zur verwendung von funktionen relationen und methoden aus anderen paradigmen 
von daten die zwischen eines systems wird ein objekt ein verhalten zu 
narrowing funktional programmiersprachen 
dabei wird das pattern matching sprachen durch 
objekt von verhalten und zustand 
objekt orientierte programmierung programme werden als von objekt einen zustand hat und mit anderen durch den von kann 
paradigma 
der programmierung eine auf ein problem sowie eine 
pattern matching pr fen der terme mit von variablen 
der funktionalen programmierung zur definition von funktionen 
programmierung siehe programmierung 
auf ein problem zur sung mittels einer programmiersprache 
siehe zustand 
programmierung erweiterung der programmierung bei der eines programms werden die durch verwendet werden nnen 
programmiersprachen 
terme werden durch die substitution von teil durch bis keine glich sind 
residuation funktional programmiersprachen 
werden verz gert bis die parameter sind um eine zu 
resolution programmiersprachen 
terme werden durch pr hlt werden durch definition der term nach der durch die parameter werden kann 
ein hat seiteneffekte wenn er der des den zustand einer art ver die die cke im 
single threaded ein ist single threaded wenn es nicht wird 
siehe auch typen 
auswertung werden wenn sie als parameter funktionen oder werden 
auch call value und eager evaluation substitution funktion die einem term variable durch terme 
str ein programm dass es eine funktion ist welche einen strom verz liste als und einen anderen als 
element der einem element der sind die str 
trail um zu sie sind 
der implementierung und constraint sprachen 
ver einer variablen durch das von verhalten der objekt programmierung 
terme cke oder durch der variablen den 
substitution die zwei terme 
unique type siehe typen 
variable der programmierung name einen oder term der programmierung 
von verhalten und zustand von klassen oder 
verhalten der die eines auf eine 
verteilte programmierung programmierung mit einer verteilten programmiersprache 
verteilte programmiersprache programmiersprache welche die verteilte ausf hrung eines programms auf bzw 

ein programm ist wenn verschiedene des programms auf bzw 

verz auswertung die auswertung von eines programms wird verz gert bis das zur ausf hrung ben wird 
oft mit memoization 
im eines programms zu dem im fall einer berechnung zur wird um einen anderen 
zustand variablen eines programms oder eines 
eine programmiersprache ist wenn sich der zustand eines programms dieser sprache durch ver daten ver 
eine programmiersprache ist wenn daten nicht ver sondern nur neu werden nnen 
ver des durch 
einer variablen durch 
index dieser index alle programmiersprachen und die im dieses verwendet werden 
sind durch 
bottom kalk prolog calculus cs kalk var kalk term top access programmierung access access orientierte programmierung actions active value ada agent agents kernel language akl objekte alf algol alma alma annotation apt ariola art aspectj orientierte orientierte programmierung kommunikation ensemble axiom babel backhouse backtracking backus benton constraints berechnungen block budd calculation call name call need call call value carriero cc choice point ciao prolog clean cloning clp clp clp clp cobol common lisp concurrent constraint programming concurrent constraint programming concurrent haskell variablen constraint sprache system ser programmierung constraint constraint constraint programmierung constraint constraint funktional constraint funktionale programmierung constraint constraint imperative programmierung constraint constraint ser constraint constraint logische programmierung constraint programmierung higher order constraint sprache constraint system constraints continuation continuation passing style continuations curry system definition multiparadigmen programmiersprache paradigma definitional constraint programming deklarative und imperative sprachen delegation dialog distributed oz dp cool eager evaluation eclipse ecoop eden latent system system eiffel typ ensemble erf erlang escher evaluation context event exception falcon felleisen finite domain class citizen fortran fp function funktion ordnung funktional funktional constraint funktional funktional imperative programmierung funktional funktional logische programmierung funktionale funktionale programmierung gelernter generative programmierung programmierung berechnung gifford gnu prolog del goffin ller guarded horn clauses hanus haridi haskell herbrand term higher order constraint programmierung hole hughes icfp ilog funktionale programmierung logische programmierung imperative constraint programmierung imperative programmierung implementierung informatik integration intention intentional programmierung term ip mp janson java jouvelot kaleidoscope kind klasse kleisli kleisli knuth krishnamurthi prolog atex launchbury lazy lazy evaluation le fun leda leroy life linda typen typ lisp literate literate haskell script literate programming funktionale imperative programmierung logische programmierung logische variable lucassen memoization mercury meta programmierung methode ml modula modula moggi ller multiparadigmen programmiersprache multiparadigmen multiparadigmen programmierung multiparadigmen narrowing nebenl nebenl constraint programmierung nebenl programmierung nebenl sprachen nebenl notation prolog objective objekt objekt objekt orientierte programmierung observer odersky opal oz paradigma paradigmen pascal passive objekte pattern matching pl placer polyp programmierung pr pr procedure programmierung access orientierte orientierte constraint constraint funktionale constraint imperative constraint logische funktional imperative funktional logische funktionale generative imperative literate logische nebenl objekt orientierte verteilte prolog prolog ii prolog iii property list programmierung term pure redex reflection region rein funktionale sprache relational residuation resolution sabry scheme screamer semantik sicstus simula single threaded single threadedness smalltalk smolka standard ml str stream stream strict auswertung strom substitution subsystem swarup synchronisation str tex thread trail turtle typ berechnung higher order term unique type van roy variable verhalten verteilte programmiersprache verteilte programmierung verteilte sprachen verz auswertung verz liste weis westbrook wissenschaft zave arbeiten zustand 
