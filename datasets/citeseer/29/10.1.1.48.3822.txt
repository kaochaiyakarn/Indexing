algebraic framework physical oodb design fegaras david maier department computer science engineering oregon graduate institute science technology walker road box portland usa email cse ogi edu physical design object oriented databases infancy 
implementation decisions conceptual design inverse links object decomposition 
furthermore query optimizers take full advantage physical design information 
proposes formal framework physical database design automates query translation process 
framework physical database design specified declarative manner 
specification generating efficient query transformer translates logical queries programs manipulate physical database 
conceptual schema oodb set physical design directives automated method generating physical schema abstraction function plan transformers optimizer generation component 
method focus 
expressed rule form requiring rule physical design directive allows extensions complex physical design methods 
physical design framework requires conceptual physical data structures operations defined language 
language called monoid comprehension calculus monoids monoid comprehensions :10.1.1.30.1904
logical collection types sets lists bags physical data types trees hash tables captured monoids 
logical queries equivalent queries conceptual database built internal database abstraction function 
logical query transformed program manipulates physical database replace conceptual database state query logical view physical database state 
query translation process framework consists substituting db occurrences db logical query normalizing resulting program db conceptual database state db physical database state abstraction function composition component 
query translation architecture background queries framework transformed physical plans number refinement steps 
need compiled algebraic form captures logical physical operators 
importantly algebraic forms derived query translation need normalized way intermediate logical structures constructed evaluation forms 
section give brief overview monoid comprehension calculus fulfills requirements 
complete formal description calculus includes advanced data structures vectors matrices object identity reader referred previous :10.1.1.30.1904
monoid comprehension calculus data type calculus expressed monoid unit function zero unit merge function merge type theta associative left right identity zero 
addition merge commutative idempotent merge monoid commutative idempotent 
example set ff fg fxg commutative idempotent monoid int commutative monoid 
necessary distinguish components particular monoid qualify zero unit merge th international workshop database programming languages gubbio italy algebraic framework physical oodb design zero unit merge list list ff set set ff fg fag ci bag bag ff sorted list ff merge ci zero unit merge sum int max int max ci bool false ci bool true ci table examples collection primitive monoids types monoids collection primitive monoids 
monoid type forms class name class primitive type int bool type type constructor set bag list record type type monoid types monoid 
collection types freely nested 
monoid comprehension monoid takes form mf expression called head comprehension 
term term sequence called qualifier ffl generator form variable expression ffl filter predicate 
scope variable mf limited rest comprehension head comprehension modern programming languages scope textual typical scoping rules name conflicts scope left mf scope right example join sets join setf join predicate function constructs output set element elements example comprehension setf monoid comprehension defined reduction rules formal definition monoid homomorphisms :10.1.1.30.1904
mf unit mf false zero mf true mf mf zero zero mf unit mf mf merge merge mf mf th international workshop database programming languages gubbio italy algebraic framework physical oodb design rules reduce comprehension leftmost qualifier filter rules reduce comprehension leftmost qualifier generator 
definition comprehension provides equational theory allows prove soundness various transformations including translation comprehensions efficient joins 
monoid comprehension form bulk manipulation collection types supported calculus 
monoid comprehensions expressive 
calculus semantic formedness requirement comprehension idempotent commutative monoid generators idempotent commutative monoids 
example valid monoid comprehension maps set commutative idempotent list commutative idempotent ff gg valid bag sum commutative requirement easily checked compile time 
convention represent variable bindings comprehension mf gamma 
mf expression substituted free occurrences equivalent 
term form called binding binds variable expression example setf setf th international workshop database programming languages gubbio italy algebraic framework physical oodb design program normalization monoid calculus put canonical form efficient rewrite algorithm called normalization algorithm described detail :10.1.1.30.1904
evaluation canonical forms generally produces fewer intermediate data structures initial unnormalized programs 
normalization algorithm improves program performance cases 
normalization algorithm query evaluator canonical forms convenient program representation facilitate program transformation 
physical design framework described section uses algorithm eliminate value introduced mapping logical queries physical programs 
example program normalization requires variable renaming 
program filter filter computed setf setf setf setf renaming variable normalized gamma 
setf rule gamma 
setf rule path path name identifier bound variable identifier persistent variable name class extent expression path name name attribute name record path path 
generator domains comprehension expressions contain non commutative merges list append domains normalized paths :10.1.1.30.1904
section shorthand path expression defined expression form db path db conceptual database state interpretation calculus setf vn db vn vn gamma addition normalization rules important program transformations explore commutativity properties monoids 
particular commutative monoid join commutativity rule mf gamma 
mf holds term depend transformation valid monoid pushes selection join pred depend mf pred gamma 
mf pred physical design section show translate queries conceptual database queries physical database way reflects user specified physical design 
approach physical oodb independence proposed system 
includes language called sdl storage definition language allows specify mapping logical physical schema form similar physical design directives 
mappings supported vertical horizontal partitioning classes object clustering 
physical schema computed automatically specifications logical operations mapped physical operations 
approaches physical oodb design include oodb query optimization graph physical design language gmap system uses search algorithm match applicable access paths query :10.1.1.50.3586
object oriented database systems long criticized supporting sufficient levels data independence 
main reason criticism early oodb systems simple pointer chasing perform object traversals allow opportunities optimization 
system proposals gemstone odmg sophisticated methods object traversals 
systems support declarative language express queries advanced physical structures alternative access paths speed bulk manipulation objects 
sigmod record march 
fegaras 
uniform calculus collection types 
oregon graduate institute technical report 
available anonymous ftp cse ogi edu pub ps fegaras maier :10.1.1.30.1904
effective calculus object query languages 
acm sigmod international conference management data san jose california may 
available anonymous ftp cse ogi edu pub sigmod ps fegaras 
type transformation database system implementation 
morgan kaufmann publishers august 
wadler 
improving list comprehension database queries 
proceedings bombay india pp november 
tsatalos solomon ioannidis :10.1.1.50.3586
gmap versatile tool physical data independence 
proceedings th vldb conference santiago chile september 
valduriez copeland 
implementation techniques complex objects 
