string tree new data structure string search external memory applications 
paolo roberto grossi dipartimento di informatica dipartimento di sistemi informatica universit di pisa universit di april introduce new text indexing data structure string tree seen link traditional external memory string matching data structures 
short phrase combination trees patricia tries internal node indices effective adding extra pointers speed search update operations 
consequently string tree overcomes theoretical limitations inverted files trees prefix trees suffix arrays compacted tries suffix trees 
string trees worst case performance trees manage unbounded length strings perform powerful search operations ones supported suffix trees 
string trees effective main memory ram model improve online suffix tree search dynamic set strings 
need external storage build main memory having unbounded capacity single cycle access time 
ongoing research trying improve input output subsystem introducing hardware mechanisms disk arrays disk caches investigating arrange data disks means efficient algorithms data structures minimize number external memory accesses 
believe design analysis external memory text indexing data structures important theoretical practical point view 
surprisingly scientific literature worst case bounds obtained algorithms data structures manipulating arbitrarily long strings external memory 
far traditional external memory data structures concerned inverted files trees variations prefix trees known ubiquitous tools manipulating large data worst case performance efficient keys arbitrarily long :10.1.1.96.6637
far string matching data structures concerned suffix arrays patricia tries suffix trees particularly effective handling unbounded length strings small fit main memory 
longer efficient text collection large changes time considerable external memory 
worst case inefficiency mainly due fact packed disk pages order avoid pages remain empty updates 
worst case situation seriously degenerate external memory 
support worst case searching updating operations 
inefficiency mainly due methods packing lot data disk pages order avoid pages empty updates 
worst case performance seriously degenerate external memory 
go survey popular tools manipulating external memory text strings point theoretical limitations applied problems 
tools grouped main classes kind explicitly designed external memory contains inverted files trees variants known prefix trees :10.1.1.96.6637
kind useful indexing text main memory aim performing string matching 
contains compacted tries suffix trees suffix arrays 
easily adapted external memory price performance main memory 
ffl inverted files important indexing technique secondary key retrieval roles records attributes reversed 
