complexity revising logic programs russell greiner department computing science university alberta edmonton alberta greiner cs ca january rule program return set answers query 
impure program includes prolog cut delta operators return different answers rules re ordered 
reasoning systems return answer query answers depend rule order pure rule systems 
theory revision algorithm seeking revised rule base expected accuracy distribution queries optimal consider modifying order rules 
shows polynomial number training labeled queries query paired correct answer provides distribution information necessary identify optimal ordering 
proves task determining ordering optimal distributional information intractable trivial situations query atomic literal seeking perfect theory rule base propositional 
initial theory accurate typically case part deployed system ilp algorithm effect re learn wasteful 
efficient correct theory revision process correctly answered queries modify initial theory produce new accurate theory 
implemented theory revision systems hill climb space theories operators simple theory theory transformations adding deleting rule adding deleting antecedent rule 
alternative class transformations rearrange order rules antecedents 
transformations effectively modify performance knowledge system written shell uses operators corresponding prolog cut delta system returns answer class shells includes fault hierarchy systems prioritized default theories production systems prolog :10.1.1.79.8458
goal theory revision process improve accuracy reasoning system performance task answering queries 
section defines objective precisely identifying revision sequence transformations produces theory expected accuracy distribution queries maximal 
section proves polynomial number training samples specific query paired correct answer sufficient provide information needed identify revision accuracy arbitrarily close optimal arbitrarily high probability 
section presents main results showing task tractable initial theory syntactically close optimal theory task intractable trivial situations query atomic literal seeking perfect ordering returns correct answer query knowledge base propositional horn 
debugging logic programs earlier revision task improving deployed knowledge system obvious application debugging code general people able directly write perfect code write code right try test cases behavior wish match 
exactly task considered 
results specify test cases classes modifications considered show task trivially feasible current program bugs 
prove underlying task extremely difficult original program proving theory reviser computer program human programmer efficiently find near optimal revision situations 
may better simply throw original program start see negative results inductive logic programming :10.1.1.50.4663
complexity revising logic programs specific evidence people write logic programs debugging techniques please note essential step building rule systems shown effectively cf texts knowledge acquisition 
related research theory revision process learns examples uses labeled samples queries produce accurate theory 
resulting concept logic program processes fits sub topic inductive logic programming ilp 
ilp systems consider adding new information initial empty starting theory contrast theory revision systems consider ways modifying existing necessarily empty initial theory including rule antecedent deletion 
complexity revising logic programs specific evidence people write logic programs debugging techniques please note essential step building rule systems shown effectively cf texts knowledge acquisition 
related research theory revision process learns examples uses labeled samples queries produce accurate theory 
resulting concept logic program processes fits sub topic inductive logic programming ilp 
ilp systems consider adding new information initial empty starting theory contrast theory revision systems consider ways modifying existing necessarily empty initial theory including rule antecedent deletion 
implemented theory revision systems including delta :10.1.1.29.2069
system deal essence pure horn clause framework seeking answers query consider particular class transformations described 
delta system exception reorder rules 
empirical results discussed show transformations effectively 
variety related complexity results 
ling considers computational complexity modifying theory 
papers deal different type modifications viz adjusting numeric weights network altering certainty factors associated rules changing structure arranging rules antecedents 
wilkins ma show intractability determining best set rules delete context weighted rules believed specified function weights supporting rules exceeds threshold 
results show optimal deletion task just intractable fact non propositional case rules unit weight single successful rule sufficient establish 
number results complexity pac learning logic programs scratch ilp task cf :10.1.1.50.4663
outlined framework different 
note focus horn theories syntactically close initial theory contrast ilp systems return horn theory 
construction tend return theories syntactically close empty theory small programs 
bergadano considers challenges learning impure logic programs include prolog cut delta operators noting difficult learning pure programs 
general succeeds argument fails fails succeeds 
theory differs exchanging order clauses fail 

query succeed query fail 
borrowing view theory function maps query proposed answer :10.1.1.27.6663
possibly infinite set queries set possible answers 
theories defined 
assume single correct answer question represent real world oracle 
meaning hold 
upsilon del gammarules refer theories formed deleting clauses similarly define upsilon add gammarules resp upsilon ord gammarules upsilon ord set theories formed adding new clauses resp moving clauses new positions moving antecedents new position clause 
slight abuse notation function jtj size initial theory negative results hold horn theories small constant case bounded 
consider consistent training samples case horn theory correctly label training complexity revising logic programs queries 
theory space theories considered 
third upsilon add gammarules upsilon add gammarules tasks involve adding new rules clearly resemble typical inductive logic programming task known hard :10.1.1.50.4663
results apply consider adding atomic literals general clauses 
note computing implicitly requires computing expensive expressive theories 
results follow assume efficient way compute 
true propositional horn theory atomic main focus 
table summary computational complexity results negative results deal computational hardness tasks involve simpler additions hold function free theories 
easy show claims apply tasks adding deleting antecedents pure context trivial determine form perfect theory adding deleting antecedent propositional case tasks np hard impure case 
terms finding optimal theory space adding resp deleting antecedents task np hard easily pure contexts impure contexts 
proofs isomorphic ones appearing appendix 
contributions theory revision systems deal particular set theory modification techniques adding deleting rule antecedent implicitly assumes underlying theory pure user seeking answers :10.1.1.29.2069
reasoning contexts violate assumptions theories impure users seek subset answers 
presents additional types modifications meaningful impure contexts viz re ordering rules re ordering antecedents describes complexities inherent 
particular shows polynomial number training samples sufficient acquire information needed determine transformation sequence best 
unfortunately task complexity revising logic programs information produce optimal near optimal ordering rules resp ordering antecedents intractable efficient algorithm produce approximation optimum 
