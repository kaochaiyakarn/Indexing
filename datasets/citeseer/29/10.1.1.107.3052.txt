analytical study object identifier indexing rv ag bratbergsengen department computer information science norwegian university science technology trondheim norway idi ntnu object identifier index object oriented database system typically size database large databases small part index fits main memory 
avoid index retrievals bottleneck efficient buffering strategies needed minimize number disk accesses 
report develop analytical cost models find optimal sizes index page buffer index entry cache different memory sizes index sizes access patterns 
existing buffer hit estimation models applicable index page buffering case tree indexes developed analytical model index page buffer performance 
cost gain results report typically order 
results valuable optimizers tools configuration tuning object oriented database systems 
report develop analytical cost models find optimal sizes index page buffer index entry cache different memory sizes index sizes access patterns 
existing buffer hit estimation models applicable index page buffering case tree indexes developed analytical model index page buffer performance 
cost gain results report typically order 
results valuable optimizers tools configuration tuning object oriented database systems 
large oodb logical object identifiers oids oid index oidx quite large typical order size database :10.1.1.29.5597
means general small part oid index fits main memory oid index retrieval bottleneck efficient access buffering strategies applied 
report study oid index retrieval analytically results reduce average number disk accesses needed retrieve index entry 
reduce cost oid mapping considerably cases fraction original cost 
traditionally index pages kept buffer pool oid mapping efficient usually managed lru chain 
disk page object resides directly oid necessary index find page object resides 
physical oid potential performance benefit major drawbacks relocation migration objects difficult schema change difficult 
logical oids generally preferred choice 
oidx usually realized hash file tree 
simulation results comparison study study oid indexing believe trees variants best suited oid indexing limit discussion tree indexing :10.1.1.29.5597
noted report relevant hash file indexing difference index access equations simpler hash files 
number oids large fast efficient index structure needed 
oidx special properties exploited achieve goal keys index oids uniformly distributed domain keys commonly supposed 
unique part oid usually integer assigned object pages index pages buffer page server oodb 
ieee transactions knowledge data engineering 
effelsberg haerder 
principles database buffer management 
acm transactions database systems 
kossmann :10.1.1.29.5597
performance evaluation oid mapping techniques 
proceedings st vldb conference 
gardarin 

