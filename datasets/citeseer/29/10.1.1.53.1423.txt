knowledge discovery client server databases neil simon lavington department computer science university essex park sq uk neil essex ac uk lavington essex ac uk www home page essex ac uk research datamining welcome html 
subject implementation knowledge discovery databases 
specifically assess requirements interfacing tools client server database systems view architecture systems knowledge discovery processes 
introduce concept query frontier exploratory process propose strategy optimizing current query frontier individual knowledge discovery algorithms 
approach advantage enhanced genericity interoperability 
demonstrate small set query primitives show example tool known decision tree induction algorithm rewritten function environment 
secondly server network shared resources subject variable loading 
query optimization adjust dynamically increased load server transferring processing client busy network fetching data server probably implies doing processing server 
related idea exploited optimizing database access answering queries results larger related materialization selected views described 
view materialization problem set queries optimized known advance problem select knowledge discovery set queries generally emerges runtime generated dynamically 
client side caching speed processing general database queries long history :10.1.1.128.9102
generally idea cache query result sets client indexed structure supports query matching quickly determined new query answered cache 
key concept query inclusion query includes query answered applying unspecified operation result set 
similar approach implement knowledge base management system top object oriented database 
address problem balancing done server client 
implementation database queries summarize relevant background 
relational database query expressed sql 
typically client side caching query parsed processed entirely server 
philosophy simple division labour server client server implements database operations client implements user interface 
point means client reasonably powerful modern workstation tends utilised :10.1.1.128.9102
parsed form sql query tree objects corresponding physical database operations called iterators :10.1.1.108.3178
individual iterator example implement table scan hash join sort consolidation 
iterator object sense word implementing methods open fetch close 
open operation includes limited calling open iterator children fetch retrieves row operation result set close terminates operation 
relational database query expressed sql 
typically client side caching query parsed processed entirely server 
philosophy simple division labour server client server implements database operations client implements user interface 
point means client reasonably powerful modern workstation tends utilised :10.1.1.128.9102
parsed form sql query tree objects corresponding physical database operations called iterators :10.1.1.108.3178
individual iterator example implement table scan hash join sort consolidation 
iterator object sense word implementing methods open fetch close 
open operation includes limited calling open iterator children fetch retrieves row operation result set close terminates operation 
time taken perform query may split phases open phase client idle fetch phase rows transferred server client machines working 
