empirical studies software engineering roadmap perry adam porter lawrence votta electrical computer engineering computer science motorola university texas austin university maryland dr austin tx college park md arlington heights il perry ece utexas edu cs umd edu votta cig mot com article summarize strengths weaknesses empirical research software engineering 
argue order improve current situation create better studies draw credible interpretations 
roadmap improvement includes general structure software empirical studies concrete steps achieving goals designing better studies collecting data effectively involving empirical enterprises 
keywords empirical studies software engineering empirical study really just test compares believe observe 
tests wisely constructed executed support scientific method play fundamental role modern science 
specifically help understand things allow understanding materially alter world 
software engineering research empirical studies success 
odd wide sciences 
problem widely discussed articles pointed possible causes 
argue articles implementation oriented 
suggest biggest barriers empirical studies lie details conducting 
example norman fenton point empirical studies poor statistical designs don scale large systems conducted short time 
victor basili suggests differences individual software projects comparison difficult 
philip johnson remarks practitioners may resist measured 

surely factors affect empirical studies 
believe issues disappeared empirical studies fail impact fields 
gap studies goals want studies achieve 
experience attempting empirical studies change development group builds software convinced take view 
think harder experiments really effectively improve software development 
came trying improve software inspection process lucent development setting 
greatest difficulties designing conducting individual studies means easy 
greatest difficulties conceptualizing organizing body relied basis changing organization long practiced development processes 
believe problem defining executing studies change software development done greatest challenge facing empirical researchers 
essay examine nature purpose empirical studies discuss currently offer suggestions improving 
empirical studies 
large software projects follow underlying development process includes stages requirements definition functional design unit implementation integration 
way stages conducted tools support rationale doing varies widely 
companies rigid processes projects follow 
allow individual managers decisions personal expertise 
simply follow institutional traditions lack suitable alternatives 
matter approach taken cases little hard evidence inform decisions costs benefits rarely understood 
reason software engineering research failed produce deep models analytical tools common sciences 
situation indicates serious problem research practice software engineering 
don know fundamental mechanisms drive costs benefits software tools methods 
information tell basing actions faulty assumptions evaluating new methods properly inadvertently focusing low payoff improvements 
fact understand specific factors cause tools methods cost effective development particular technology essentially random act 
empirical studies key way get information move founded decisions 
empirical studies take forms 
realized formal experiments case studies surveys prototyping exercises 
matter form essence empirical study attempt learn useful comparing theory reality improve theories result 
empirical studies involve steps formulating hypothesis question test observing situation abstracting observations data analyzing data drawing respect tested hypothesis 
step drawing important done 
important get information enable guide change push field 
pinpoint inefficiencies identify large improvements determine forming ideas track 
reason empirical studies 
steps indispensable prologue 
course doing steps difficult 
done payoffs large including knowledge encoded rapidly low payoff erroneous research ideas discarded quickly high payoff areas recognized correctly valued important practical issues considered 
state empirical research said empirical studies compare believe see 
ideally tests allow positively affect practice software development 
section explore degree research community living ideal 
current strengths empirical software engineering matured considerably years 
consider example software engineering sub fields empirical validation considered standard part powerful addition research papers 
especially notable testing community 
quality average empirical study rising 
researchers better educated empirical studies conduct 
consequently seeing increasingly comprehensive studies conducted increasingly realistic programs processes 
funding agencies recognizing value empirical studies 
example national science foundation nsf programs experimental integrative activities program supports research decidedly experimental flavor 
proposed information technology research itr program stresses proposals include strong validation component 
examples include national academy sciences sponsored workshop topic statistics software engineering 
talks currently active researchers interested empirical studies 
empirical tutorials panels state art presentations major software engineering conferences icse fse icsm 
course factors contribute situation 
researchers practitioners tackled problem increasing effectiveness empirical studies 
example influential widely quoted articles attempting raise consciousness state empirical studies software engineering 
tichy wallace zelkowitz argue empirical studies software engineering relative areas engineering 
software engineering researchers validating research ideas invaluable making high profile issue 
growing awareness software engineering researchers educated conducting empirical studies 
pfleeger wrote series articles acm sigsoft software engineering notes 
articles covered variety topics including logical foundations design empirical studies operation techniques collecting analyzing interpreting data 
research groups instrumental increasing researcher access industrial data 
today find papers significant detailed accounts industrial experience industrial data 
approach software engineering laboratory nasa computer sciences university maryland 
fine researchers done empirical studies 
systemic problems despite strengths listed serious problems 
stem misunderstandings empirical studies 
improve empirical studies eliminate problematic practices beliefs 
says need empirical studies software engineering really mean research results empirically validated 
want researchers demonstrate value new ideas early possible 
idea reasons 
believe important remember empirical studies retrospectively validate ideas created proactively direct research 
example compiler optimization research empirical studies identified common code usage patterns 
knowing instance branching behavior usually random helps identify justify potential value research branch prediction aggressive prefetching short empirical studies drive research program committee meetings hear lengthy discussions exact statistical tests study wouldn better done thing 
discussions reflect vain search perfect study 
done studies done perfectly 
course want see proper statistics 
discuss shortly important study textbook perfect study taken credible 
empirical studies study obvious 
shows obvious isn obvious wouldn discourage doing 
wonder empirical studies just confirm intuitively obvious wrong argument intuition 
clearly believe things true intuitively obvious 
furthermore believe findings valuable software research practice 
need think harder questions studying empirically 
papers selling point lots data 
data 
just presenting data simply applying curve fitting algorithms may useful 
don usually help understand data data answer questions just fill graphs 
fundamental aspect problem empirical studies simply lack hypotheses 
pose questions serve defined 
study researcher observations data 
studies case studies designed answer question 
said earlier important part doing empirical study drawing 
papers fail results 
need learn study relate things theory practice 
researchers reluctant draw data easy imagine aren happy generalize 
speaking results words 
say 
obviously balance reached don want researchers generalize hand discuss study results mean hard progress 
challenges empirical studies goal research just empirical studies improve state research practice 
want empirical studies improve software engineering research practice things need better 
said simply need create better studies need draw credible 
creating better empirical studies creating better studies means doing studies chance directing research 
implies clear goals studies design effectively maximize information get 
consider issues 
studies strive establish principles causal actionable general 
factor cause outcome necessary correlated precedes time constructive testable theory explaining affects causality ability control situation 
principle actionable causal agent effectively controlled 
example knowing larger systems normally bugs may actionable principle developer system smaller 
principles applicable wide variety circumstances possible 
causal relationship know happens 
agent actionable knob turned control outcome 
general useful wide range people wide set contexts 
studies try address important questions 
questions answer 
answering cheaper answering answers significance cases 
consideration implies need spend deal time understanding re doing studies results come 
individual studies rarely unequivocal 
trying solve large issues single study attack examining different complementary aspects 
critical issue new study generate refine hypotheses 
empirical studies expensive take time 
multiple studies find ways get information need low cost 
may mean take shortcuts experimental designs tackle smaller focused problems 
need enlist help 
empirical studies gain credibility redone 
need find ways help reproduce results 
credible interpretations credibility study refers degree confidence 
studies aren credible time spent doing wasted 
improve credibility studies consider issues 
trying establish existence causal relationships need design experiments high validity 
validity explain characteristic empirical study basis establishing credible 
types validity particularly important internal external construct validity 
studies matter done hypotheses 
study define comparing 
study won powerful show causal relationship 
cases posit alternative explanations data data 
doesn show causality remove obvious alternative explanations consideration 
avoid temptation measure finest possible precision 
identify upper lower bound times measure gross resolution 
definition adequate precision depend problem coarse measurements may way limit study costs getting important information 
data procedures need public understand analyze possibly replicate studies 
really difficult haven managed keep believe worth effort 
designing empirical study careers designed conducted number studies 
flaws 
study perfect real challenge create design conduct high impact credible studies 
involves managing trade offs way maximize accuracy interpretation results see really result unknown influence relevance results tell important software engineering impact results affect practice research software engineering subject resource constraints studies expensive resource limitations risk studies especially done industry disrupt put risk industrial partners minimize problems 
structure empirical study section discuss structure components empirical studies 
expect empirical studies components papers written studies discuss 
components research context hypotheses experimental design threats validity data analysis presentation results 
research context studies focus problem 
problem defined terminology explained 
section links study goals currently understood problem 
section parts 
problem definition define problem explain important terminology 
research review 
provide historical context surrounding problem 
describe know problem done previously questions remain answered questions focusing 
hypotheses hypotheses essential 
state research questions asking 
confusion surrounding term hypothesis 
fact really kinds hypotheses 
trick think study procedure making comparison 
start highlevel questions refine low level concrete questions 
hypotheses high level natural language statements usually stated everyday terms 
say things meetings indispensable part inspection process 
concrete hypotheses stated terms study design 
may say things teams inspections meetings find defects teams inspections stating hypotheses everyday terms 
translate terms exist study design 
degree mapping done comparisons level concrete hypotheses mapped back comparisons level hypotheses 
study design study design detailed plan creating data test hypotheses 
components component set variables link causes effects 
typically kinds variables dependent independent 
independent variables attributes define study setting 
cases especially comparing situations variables actively manipulated 
dependent variables process outputs values expected vary predictably values independent variables change 
study design may include plan systematically manipulating independent variables observing dependent variables 
final component operational context study 
description physical intellectual cultural surroundings study takes place 
included study users better interpret data 
threats validity threats validity influences may limit ability interpret draw study data 
kinds validity protected threats 
construct validity means independent dependent variables accurately model hypotheses 
internal validity means changes dependent variables safely attributed changes independent variables 
external validity means study results generalize settings outside study 
data analysis presentation general approaches presenting analyzing data called quantitative qualitative analysis 
quantitative analyses name suggests deal mainly comparing numeric data 
comparisons typically aimed rejecting rejecting null hypothesis 
tools quantitative analysis hypothesis testing power analysis 
hypothesis testing determines confidence level null hypothesis rejected 
confidence level measure probability null hypothesis erroneously rejected 
people believe confidence level result significant 
doesn 
situations data plentiful measurements precise higher confidence levels may called 
data limited measurement imprecise studies software engineering lower confidence levels may justified 
event suggest researchers report confidence level significance level reader decide significance 
power analysis determines likelihood null hypothesis rejected really 
analysis depends magnitude effect amount data 
isn quite standard practice consider 
qualitative analysis hand tends data readily quantified observations interviews diaries 
techniques tend want understand people perspectives situation 
typically researchers careful biases affect data 
technique doing qualitative analysis call grounded theory software engineering research qualitative analysis widely quantitative analysis expect see 
strauss point instances forms data necessary quantitative test qualitative supplements mutual verification important different forms data subject results analyzing data sense 
steps leads back original questions 
need focus things 
understand explain limits study 
draw 
limited drawing 
influenced results 
understanding validity limits information data really say 
ambiguities interpretation 
think explanations data see 
results really believable 
tie results back initial questions 
try explain questions answered don simply data 
discuss practical significance results 
results proved general manager developer 
ensure information help repeat study want 
concrete steps argued software engineering researchers thinking goals empirical studies improve conduct evaluate 
section discuss concrete strategies doing 
designing studies asking insightful questions ultimately important thing researchers ask insightful questions 
just software development clear requirements improve likelihood high quality outcome 
note important question isn necessarily insightful especially difficult answer 
instance certainly important ask object oriented programming effective hard see small number studies expected answer 
narrower questions precise ask ones lead important answers 
knight leveson study version programming example insightful question :10.1.1.29.363
version programming refers software redundancy hopes achieving high reliability 
knight leveson noted hope depends heavily assumption redundant modules fail independently 
reliability total system high expected 
studied independently developed modules fail independently 
module failures independent version programming deliver promise high reliability 
sparked great deal discussion raising questions validity study exact effect dependent failures reliability calculations failure dependence avoided 
exactly study 
families studies question lends single empirical study version programming 
issues studies 
cases design conduct just study family studies 
think range questions ask design individual studies support goals 
schneiderman family studies value flowcharts programming aid 
began determining flowcharts theoretically useful 
decided flowcharts support program composition program comprehension program debugging program modification 
studied possibilities isolation 
cases demonstrate having flowchart better having 
concluded flowcharts useful people believed 
cases know range questions find conduct experiments 
may raise questions answer need sequential family studies resolve related issues arise 
key observation thought design conduct series studies help answer larger question 
building partnerships kinds experiments re suggesting difficult single individual 
deepening questions broadening number studies person required information resources 
way handle problem create partnerships 
kind partnership involves placing students industrial environments 
serves purposes 
student conduct monitor study time learning practice software engineering developing professional contacts 
important benefit student handle study relieving developers burden 
powerful benefit fear extra reason industrial partners wanting participate studies 
kind partnership involves creating interdisciplinary research teams 
problem large different areas expertise needed 
cases useful create partnerships people outside software engineering 
example code decay project lucent technologies 
long term multidisciplinary project examining fundamental causes symptoms remedies code decay 
primary data source lucent ess switching system 
composed subsystems contains lines code 
source data includes system change control history past years covering code changes implementing change requests 
data planned actual development milestones effort testing data organizational history development policies coding standards 
goals project define response variables document existence code decay develop code decay indices identify factors causing create evaluate prevention strategies 
obviously person carry project 
fact project team contains researchers statistics experimentation organizational theory programming languages software engineering visualization 
long running vivo experiments people argue empirical studies done live software developments vivo situ 
reasoning different groups asked build copies system controls 
isn false example assumes want study entire development projects doing project twice way controls 
assumptions aren correct 
development tasks bug fixing testing inspections lend vivo studies 
executed frequently short duration relative entire project inexpensive 
establish controls insuring tasks randomly assigned different treatments 
care taken study preserve rights subjects 
problem harder vivo studies studies longer subjects subjects responsibilities 
thing done vitro vivo studies give study participant bill rights reminding right withdraw study anytime researchers management 
ask participant acknowledge right study signing release form 
important problem knowing study 
studies professional developers creating professional products strong validity put participating project risk 
solution problematic treatment observations convince unlucky happen 
require statistical modeling definitely require closely monitoring study 
getting data studies get data measuring subjects perform predetermined tasks 
costly way get data 
explore methods collecting data 
retrospective artifact analyses resource haven paid attention version control system vcs 
analyses long term effects different processes tools depend ability recreate snapshots software different points time 
version control system vcs tracks change developer system result recreate consistent snapshot point time 
examples include rcs sccs 
basic functionality essential version control data vcs ignored simply extract snapshots source code 
instance vcs tags change substantial amount additional contextual information 
knowing code changed changed change yield valuable insights went course code development better developers memories 
vcs data amenable automated analysis 
furthermore large software development organizations employ form vcs 
analysis methods built widely applicable software projects 
furthermore kind data ways 
basis building program testbeds publicly available artifacts researchers better study system evolution help understand patterns creating benchmarks example study fault failure models new programming languages 
simulation mathematical modeling way generate data may simulations mathematical models 
approaches powerful limitations 
see greater simulation modeling directed studies 
interesting example study system integration strategies done 
study researchers built number artificial systems shells systems rudimentary code inside failure characteristics alter 
tested systems different integration strategies measured fault detection ability system reliability 
examples include mathematical models examine cost effectiveness certain maintenance changes experimental design theory generate test cases 
involving meta analysis single study gives unequivocal results 
imperative research community integrates compares studies address common hypotheses 
way gain confidence empirical results real just due random variation 
outline approaches 
integrating multiple studies credible way isn simple 
studies address issue conceived executed quite differently 
direct comparison results impossible studies differ considerably designs instrumentation subject population analysis methods 
classic approach understanding studies say phenomenon conduct literature review qualitatively summarize existing results manually synthesize 
drawback approach lacks precise methods combining different results 
statistical approach integrating multiple studies called meta analysis 
approach steps 
experimenters attempt reconcile primary experiments define common framework compare different studies 
involves defining common terms hypotheses metrics characterizing key differences 
data primary experiments transformed recalculated agreed definitions 
second step transformed primary data combined 
unfortunately clear meta analysis appropriate statistical models acceptable combine data disparate sources 
course ad hoc approaches fall 
reconcile experiments combining data 
process highlight similarities differences experiments allowing better understand data comparable 
educational laboratories authors claim quality cs experiments poor 
agree assessments clear quality cs experiments needs improved 
factor contributing situation researchers rarely trained perform high quality experiments 
easy way remedy integrate experimental methods cs graduate curriculum 
way create short say week teaching modules students perform experiments collect analyze data test hypotheses part graduate software engineering courses 
teaching modules support primary objectives 
show experiments evaluate hypotheses concerning open research issues teach students design conduct experiments evaluate research teach basic statistical procedures collecting analyzing data experiments 
modules captured form educational laboratories 
educational laboratory exercises standard part physical science education 
labs require students learn apply scientific method examine physical principles 
conducting lab student monitors physical process gathers analyzes data process uses data test hypotheses challenge intuition 
construct labs researchers package empirical studies laboratory manual manual contains training materials lectures articles sample specifications data collection forms description experimental procedures survey take home assignment 
lab performed instructor data recoding ensure anonymity participants 
hypotheses experiment fully explained students taught statistical rationale experimental design learn statistical procedures data analysis hypothesis testing 
final step involve take home assignment students required propose experiment evaluate hypotheses interested 
summary article provided overview current state empirical studies delineated strengths weaknesses 
discussed important issues addressed creating rigorous credible empirical discipline software engineering 
improve current state create better designs draw credible interpretations 
background need go outlined general structure software empirical studies 
concluded concrete steps achieving goals designing better studies getting data involving empirical enterprises 
relatively immature empirical discipline compared sciences engineering disciplines progress optimistic achieve needed rigor underpin development deep understandings software engineering 

fenton pfleeger glass science substance challenge software engineers 
ieee software 


basili editorial 
empirical software engineering journal 


johnson project leap lightweight empirical anti measurement dysfunction portable software developer improvement department information computer sciences 
university hawaii honolulu 

pregibon statistical software engineering national academy sciences washington 
tichy lukowicz prechelt heinz experimental evaluation computer science quantitative study 
journal systems software 


zelkowitz wallace experimental validation software technology 
information software technology 


basili software engineering laboratory operational software experience factory 
th international conference software engineering 

melbourne australia 

strauss discovery grounded theory strategies qualitative research 
chicago publishing 

knight leveson experimental evaluation assumption independence multi version programming 
ieee transactions software engineering 
se 

schneiderman mayer mckay heller experimental investigations utility detailed flowcharts programming 
communications acm 


eick code decay 
assessing evidence change management data 
ieee transactions software engineering appear 

judd smith research methods social relations 
fort worth tx holt rinehart winston 
tichy design implementation evaluation revision control system proceedings sixth international conference software engineering 
tokyo japan 


source code control system 
ieee transactions software engineering 


empirical study testing integration strategies artificial software systems 
ieee transactions software engineering 


harrison 
change prone modules limited resources maintenance 
wess 

monterey ca 

dalal mallows factor covering designs testing software 
technometrics 


glass smith social research 
beverly hills ca sage 

porter johnson assessing software review meetings results comparative analysis experimental studies 
ieee transactions software engineering 

