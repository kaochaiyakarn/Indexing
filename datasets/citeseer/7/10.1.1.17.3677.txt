integrated congestion management architecture internet hosts hari balakrishnan rahul srinivasan seshan mit laboratory computer science technology square cambridge ma hari rahul lcs mit edu srini watson ibm com presents novel framework managing network congestion perspective 
motivated trends traffic patterns threaten long term stability internet 
trends include multiple independent concurrent flows web applications increasing transport protocols applications adapt congestion 
system architecture centered congestion manager cm ensures proper congestion behavior allows applications easily adapt network congestion 
framework integrates congestion management applications transport protocols 
cm maintains congestion parameters exposes api enable applications learn network characteristics pass information cm schedule data transmissions 
internally uses stable rate control algorithm scheduler regulate transmissions lightweight loss resilient protocol elicit feedback receivers 
scheme uses additive increase multiplicative decrease combined novel exponential aging scheme receiver feedback infrequent obtain stable network behavior application performance 
describe tcp adaptive real time streaming audio application implemented cm 
simulation results show ensemble concurrent tcp connections effectively share bandwidth obtain consistent performance adversely affecting network flows 
results show cm enables audio applications adapt congestion conditions having perform congestion control bandwidth probing 
conclude cm provides useful pragmatic framework building adaptive internet applications 
ibm watson research center yorktown heights ny success internet date large part due sound principles additive increase multiplicative decrease dominant transport protocol tcp :10.1.1.154.9133
traffic internet dominated long running tcp flows network shown relatively stable behavior undergone large scale collapse past decade 
internet traffic patterns changing rapidly certain different 
web workloads stress network congestion control heavily unforeseen ways 
typical web transfers characterized multiple concurrent short tcp connections 
short web transfers give tcp time information adapt state network concurrent connections pair hosts compete cooperate scarce resources 
second commercial products developed today accelerate web downloads usually turning changing tcp congestion control unknown potentially dangerous ways 
third importantly increasingly popular real time streaming applications run udp user level transport protocols application performance cases today adapt react properly network congestion 
trends coupled unknown nature applications threaten long term stability internet 
large portions network suffer congestion triggered collapse due unresponsiveness face congestion aggressive mechanisms probe spare bandwidth 
sound overly pessimistic applications able track adapt congestion available bandwidth varying network conditions obtain best possible performance 
unfortunately protocol stacks today provide right support desire network citizen forces applications single tcp connection transport model ill suited application hand 
single tcp connection mismatched requirements application result proliferation flows behaved deleterious rest network 
attempts overcome problems developing novel framework managing network congestion perspective 
past bandwidth management focuses mechanisms network provide qos flows reduce adverse interactions competing flows focus developing architecture hosts ensure proper stable congestion behavior building proven principles additive increase multiplicative aimd :10.1.1.146.1122
enable applications transport protocols adapt easily network congestion varying bandwidth providing adaptation apis 
resulting framework independent specific applications transport protocol instances provides ability different flows perform shared state learning 
flows learn share information state congestion common network paths 
increasingly trend internet unicast data servers transmit wide variety data ranging best effort unreliable real time streaming content reliable web pages applets 
result logically different streams different transport protocols share path server client 
streams incorporate control protocols dynamically probe spare bandwidth react congestion internet stable 
furthermore different reliability requirements implies general congestion management architecture separate functions loss recovery congestion control coupled protocols tcp 
core architecture congestion manager cm maintains network statistics data transmissions governed robust control principles 
stream act isolation adversely interact cm coordinates host domain specific path information 
path properties shared different streams applications transport instances perform transmissions cm consent 
internally cm ensures stable network behavior sender reacts congestion carefully passively probes spare bandwidth implements robust lightweight protocol elicit feedback receivers losses status schedules data transmissions available capacity different active flows 
cm internal algorithms protocols described section motivate ns simulation experiments analysis 
cm api designed enable easy application adaptation congestion variable bandwidth accommodating heterogeneous flows 
api includes functions query path status schedule data transmissions notify cm data transmission update variables congestion successful transmission 
includes callbacks applications rate change 
motivated argument principle application level framing alf cm api permits application final say deciding transmit especially available bandwidth smaller application desires :10.1.1.35.4167
discuss design decisions details api section 
section discuss applications web server audio server implemented cm api adapt efficiently congestion 
section discusses actual performance results different applications 
resulting network architecture viewpoint data sender shown 
cm frees transport protocols applications having re implement congestion control management scratch discourages applications inappropriate transport protocol tcp high quality audio simply transport implements congestion control scheme 
cm provides required support simple api adaptive internet applications developed 
ftp applications tcp tcp udp ip rtp video rtsp audio transport instances datapath control path congestion manager new sender architecture centered congestion manager 
believe aspects cm novel suggest aggregating congestion control information flows 
rfc touch proposes scheme called tcp control block interdependence goal share part tcp control block connections improve transient tcp performance maintaining existing implementations :10.1.1.154.9133
authors integrated approach tcp tcp control block state shared better congestion control loss recovery concurrent connections :10.1.1.154.9133
proposals restrict simultaneous tcp connections consider types applications 
provide apis application adaptation primarily maintain tcp api 
see rest mechanisms probe bandwidth react congestion accommodate heterogeneous flows significantly harder multiplexing tcp flows 
section discusses compares approaches 
main contributions congestion manager cm 
design congestion manager perform integrated congestion management ensemble unicast flows application transport independent manner 
ensure stable network behavior shared state learning cm incorporates rate aimd scheme ii loss resilient protocol periodically elicit feedback receivers iii exponential aging mechanism regulate transmissions stable manner feedback infrequent iv loss segregation mechanisms inferring existence routers implementing differential services scheduler bandwidth flows 
cm adaptation api 
api applications transport protocols adapt network congestion varying bandwidth 
describe tcp adaptive layered audio application implemented api 
cm applications performance 
simulations application performance demonstrate cm ensures stable network behavior 
greatly improves performance predictability consistency enables applications audio servers effectively transmit best available source encodings 
cm algorithms protocols section cm internal algorithms protocols 
cm rate control algorithm aimd discuss experimental data showing stable behavior tcp friendliness 
address issue receiver feedback motivating needed obtained cm ensure stability infrequent 
discuss extensions cm perform differentiated services network segregating flows observed loss rates throughputs 
conclude section description cm scheduler schedules transmissions ensures proper rate allocations different flows 
stable congestion control key features cm ensures proper congestion behavior 
implies mechanisms reacting network congestion probing spare capacity sound robust 
current implementation cm achieves rate aimd control scheme 
rate changes cm learns active flows state network carefully increases rates allocated probe spare capacity 
additive increase component aggressive comparable tcp flow number bytes successfully transferred round trip time estimate taken account determining rate increase 
lead bias long round trip flows congested network felt accurate emulation tcp increase algorithm currently safest deployment alternative 
loss rate reduces factor persistent congestion occurs tcp timeout rate drops small value forcing slow start occur 
chose implement rate tcp window scheme main reasons 
carefully designed rate schemes avoid bursts transmissions window schemes tcp prone overwhelm bottleneck router buffers path receiver 
second applications tcp provide relatively scarce infrequent receiver feedback received data experiments showed stable rate scheme provides consistent performance situations 
sequence number tcp newreno tcp cm time seconds sequence traces tcp newreno tcp cm showing tcp cm true emulation tcp conducted experiments validate soundness cm algorithm tune perform tcp friendly manner 
re sults set experiments connections tcp newreno tcp cm running network random web background traffic shown :10.1.1.154.9133
shows sequence traces tcps large range bottleneck capacities 
clear results tcp cm closely emulates vanilla tcp 
packets received tcp newreno tcp cm packets received packets dropped cm rate control tcp friendly 
argue experimental data consistent tcp friendly congestion scheme 
performed sequence independent experiments different bottleneck bandwidths tcp newreno tcp cm 
ex periment number successfully received packets number dropped packets show data experiments consistent tcp friendliness relationship throughput packet loss rate observed constant depends packet size round trip time total number transmitted packets 
clearly 
experimental data tcp cm consistent tcp friendly relationship hold 
linear 
measurements consistent shown plots tcp cm tcp newreno 
best fit lines points similar slopes protocols packet size rtt 
receiver feedback fundamental requirements stable congestion control receiver feedback 
sender able know current transmission rate higher lower available capacity 
furthermore feedback successfully received data observed congestion needs communicated sender way 
sender cm uses standard congestion indicators packet losses explicit congestion notification ecn bits set routers echoed receiver 
address issues feedback frequency feedback mechanism exponential aging perform feedback frequency lower optimal 
feedback frequency tcp feedback mechanism acks provides sender feedback times round trip receiver generates ack packet 
contrast streaming protocols reliable inform sender transmission status frequently 
cm function applications need determine appropriate feedback frequency 
loss probability probe frequency rtts variation packet loss probability feedback frequency shows performance cm congestion control different feedback frequencies plotting packet loss probabilities 
results show adaptation feedback obtained twice round trip period 
feedback mechanism cm uses forms feedback adjust rate react congestion implicit feedback explicit feedback 
receiver application transport protocol provides feedback sender application implicit feedback possible extra traffic need generated 
sender application notify cm number transmitted received bytes losses occurred ecn information received 
example tcp cm uses method cm design situations require changes receiver 
unfortunately applications tcp providing frequent feedback 
moves incorporate explicit feedback protocol cm architecture modifications receiver respond periodic probe messages cm sender report loss ecn information sender 
protocol generate traffic resilient losses 
describe lightweight probing protocol 
sender cm periodically sends probes receiver cm elicit responses 
current frequency probes twice round trip 
probe includes incrementing unique sequence number 
receiver cm receiving probe responds numbers probe received current probe responded number packets received flow probes 
receipt response sender estimate flow loss rates keeps track number packets sent flow total loss rate network update round trip time estimate 
sender maintains information probes response received protocol robust losses probes responses 
shows pseudocode probing protocol sender receiver 
simplicity exposition assume sender receiver maintain information aggregated flows 
sender maintains indexed probe number 
entry array structure elements time probe sent number bytes sent previous probe 
variable sequence number probe sent 
exponential aging shows problems infrequent feedback allow cm adapt changing network conditions 
probing protocol described addresses periodically eliciting receiver feedback 
times congestion probe messages responses lost sender accurate estimate network state 
possible way handle clamp sender transmissions round trip time elapses receipt response 
conservative response lead instability 
comes significant cost flows stall hear response sending probe receiver message probe send message probe responding probe message response send message sender action receiving response response probe delete entries probe sender receiver side pseudocode handling probes responses sequence number srtt time seconds sequence traces showing exponential aging mean roundtrip time significantly inferior minimum 
take quite longer low probe frequency 
second possible way handle exactly opposite continue transmit rate response arrives may indicate packets successfully received losses happened 
cm increase decrease rate time 
overly aggressive behavior sender transmits data open loop fashion multiple round trips attention true state network 
forced search compromise avoids complete stalls transmits prudent rates open loop mode 
solution technique call exponential aging triggered cm receive response probe message round trip time 
subsequent round trip period starting point open loop transmission rate halved current value 
leads exponential fall rate function time open loop mode 
hard see algorithm stable worst case subsequent round trip congested 
rate reduction appropriate action happen easy verify throughput loss relationship behavior tcp 
exponential aging permits flows continue transmitting data stalls albeit lower rates 
important parameter exponential aging time intervals rate reduction done half life algorithm 
choice sender smoothed round trip estimate 
shows choice half life aggressive 
onset congestion sender smoothed round trip estimate increases increased queueing delays decay exponent governed true mean round trip time decay occurs slower rate 
leads unstable behavior induces large number losses 
fortunately easy solution problem significantly improves things ensuring conservative behavior 
problem caused sender transmitting rapidly long open loop mode decrease time constant exponential decay 
cm keeps track minimum round trip samples obtained duration activity decays openloop rate 
improvements mean round trip estimate apparent shows sequence traces transfers mode 
better best effort networks far design cm architecture assumes underlying network provides best effort service model 
internet infrastructure incorporate mechanisms differentiated services integrated services prioritization flow identifiers port numbers non trivial fraction internet traffic enhancements 
situations previously described approach aggregating congestion information peer host address general incorrect different flows experience different bandwidths loss rates depending routers treat 
fortunately solution problem flow segregation api flow cm keyed host address combination address port numbers flow identifiers 
application knows flows treated differently best effort traffic inform cm 
function absence explicit information cm incorporates segregation algorithm classify flows aggregates loss rates perceived receiver throughputs 
combination probing protocol application hints cm obtains flow loss rates bandwidths segregate cluster flows properties different 
point implemented experimented plan soon 
flow scheduling cm internally schedules requests hierarchical round robin hrr scheduler 
scheduler bandwidth flows proportion pre configured weights receiver hints 
scheduler invoked application call cm 
scheduler satisfy pending request current bandwidth estimate cm time performs application callback informing appropriate number bytes allowed 
notifies application point time minimum number bytes requested application sending rate 
notify call described greater detail section 
scheduler currently implemented performs bandwidth allocation delay bounds scheduling 
adequate flows tcp 
investigating mechanisms provide combined bandwidth delay guarantees 
shows flows starting different times eventually achieving sequence number time seconds cm scheduler bandwidth simultaneous flows 
rate allocation scheduler 
cm api network congestion property path traversed flows sender receiver 
cm frees applications having maintain information state congestion available bandwidth path 
api flows determine share available bandwidth request data transmissions scheduled inform cm successful transmissions informed cm estimate path bandwidth changes 
design rationale simply cm api justification motivate design choices discuss api terms guiding principles 

put application control cm decides rate application flow transmit data follows argument puts application firm control critical decisions deciding transmit point time ii deciding relative fraction available bandwidth allocate flow :10.1.1.35.4167
achieve cm buffer application data allows applications opportunity adapt unexpected network changes possible instant 
design decision buffer data direct consequence application level framing alf approach protocol design leads api described 
cm queue data eventually transmit rate send ing api consist simply cm send call bsd sockets api 
preclude applications pulling data learning rate change 
decide design non blocking request callback notify api 
application wishing bytes request 
time depending rate cm invokes application callback app notify application send bytes 
application expected transmit bytes soon matter bytes different ones original request 
addition application notifies cm notify telling bytes transmitted update internal state 
learn flow available bandwidth round trip time applications cm scm query rate srtt call fills desired quantities 

accommodate traffic heterogeneity cm benefit variety traffic types including tcp bulk transfers short transactions real time flows transmit continuum rates layered streams transmit discrete rate intervals 

accommodate application heterogeneity design cm api force particular application style api flexible accommodate different styles 
particular api accommodate common styles transmitters asynchronous style synchronous style 
asynchronous transmitters transmit periodic clock triggered asynchronous events file reads captured frames 
transmitters typically bytes ready transmitted request callback notify api described appropriate transmissions scheduled cm 
hand synchronous transmitters implement timer driven cm adapt frequency internal timers 
applications benefit cm callback informing changes rates provide change rate function 
callback functions implemented cm app notify response previous request call rate flow share available rate changes 
second method provided types transmitters knowledge sustainable rate useful asynchronous applications asynchronous web server disseminating images tcp app notify schedule transmissions change rate decide send low resolution high resolution image 

learn application api includes functions applications provide feedback cm 
addition cm notify inform cm transmission update duration loss occurred rtt call inform cm bytes received seconds observed rtt losses occurred 
feedback acks tcp rtcp case real time applications protocol 
cm uses hint internally update sustainable sending rate round trip time estimates 
application close flow terminated allowing cm destroy internal state associated flow repartition available bandwidth 
cm api summarized 
api section describe applications transport protocols cm api 
focus applications web server disseminating objects tcp adaptive audio server disseminates objects user level transport protocol udp 
web server tcp clients request index files sets objects server 
cm enables sender decide fraction bandwidth flow hints receiver 
helps sender choose multiple representations available objects low high resolution images best application performance 
receiver cm api client expresses relative interest objects vector tuples form th object relative fraction available bandwidth allocate stream 
sender takes account bandwidth transmitting objects 
similar protocol 
multiple representations different sizes exist objects 
sender uses query call rate handler adapt changing available bandwidths tracked cm pick representation maximizes receiver quality incurring high latency 
currently extending content negotiation protocol incorporate ideas 
really matter version see section persistent connections drawbacks 
struct cm entry addr dst double rate double mean rtt double rttvar typedef int cm id data structures query void cm query cm entry entry addr dst control cm id cm open addr src addr dst void cm request cm id id int nbytes int double latency void cm notify cm id id int void cm update cm id id int bool loss occured double rtt void cm close cm id id application callback void app notify int void change rate double rate data structures functions sender side cm api web server uses tcp disseminate data turn uses cm perform congestion management tcp cm performs loss recovery connection management 
outline tcp congestion control written cm application 
normally tcp congestion management keeps track congestion window connection basis 
acks arrive tcp updates congestion window transmits data congestion window allows detects losses window reduced factor 
cm supposed read tcp cm modify tcp call cm open establishes connection 
bytes data arrive application web server tcp cm calls cm request schedule transmission bytes data 
ack arrives network acknowledging bytes data tcp cm calls cm update useful hint update congestion state cm 
request receiver advertised flow control window opened data queued transmission 
cm decides service tcp cm request performs callback notify tcp cm send routine accepts parameter indicating maximum amount data allowed transmit 
tcp send routine transmits minimum flow control window amount allowed cm callback 
immediately transmitting data tcp cm uses cm notify call update cm actual amount data sent 
smaller amount permitted may zero points time tcp cm sender performs silly window syndrome avoidance 
notice eliminated need tracking reacting congestion tcp cm proper congestion behavior ensured cm callback transmission api 
notice duplicate ack timeout loss recovery remain unchanged flow control advertised windows remain unchanged 
implementation experiments newreno flavor tcp cm performs better tcp reno conditions :10.1.1.154.9133
result cm permits ensemble tcp connections behave manner deleterious health network 
audio server layered audio streams internet audio servers support variety audio sampling rates audio encodings 
fundamentally purpose supporting selection provide client tradeoff quality network bandwidth 
typically user forced manually select appropriate encoding current network conditions 
cm enables audio server correctly adapt choice audio encoding congestion state network 
requested transmit audio client server performs acm open call 
uses query call determine quickly may transmit data 
begins transmitting audio highest quality encoding exceed rate returned query 
immediately transmitting data server notify inform cm amount sent 
realtime servers solicit feedback network conditions clients 
chosen model server monitor network ity 
result congestion feedback provided cm probing protocol 
cm identifies change available bandwidth arrival probe response notifies audio server change change rate callback 
audio server implementation rate adjust data encoding new rate information 
simple interactions cm audio server capable automatically adjusting audio quality reflect quality client server communications 
application performance implemented cm vint ns framework 
implemented tcp agent audio server application cm 
web performance section presents results experiments simple web workload consisting concurrent connections significant tcp constant bitrate cross traffic network mbps bottleneck link round trip propagation delay ms 
results shown demonstrate cm ensures proper behavior face congestion improves consistency application performance 
tcp newreno performance connections varies kbps kbps nearly difference transfer time fastest slowest connections 
lack shared state learning competitive cooperative congestion control ensemble connections 
contrast connections tcp cm progress similar consistent rates sharing bandwidth 
connections achieve throughputs kbps incurring losses way 
cm enables ensemble connections effectively share bandwidth learn network 
note aggregate throughput obtained tcp cm kbps lower aggregate throughput obtained independent tcp newreno connections kbps 
hardly surprising cm forces concurrent connections behave point congestion control effective decrease increase coefficients independent connections significantly larger single tcp 
cm ensure group connections hosts behaves socially proper way 
observed throughput degradation unfortunate consequence cor sequence number sequence number time seconds time seconds top chart shows sequence traces web workload concurrent tcp newreno connections 
performance transfers highly variable inconsistent 
bottom graph shows workload tcp cm demonstrating consistent predictable performance web workload cm connections indistinguishable 
rect congestion control 
tcp applications directly benefit significant ways obtain improved performance consistency predictability definite incentive adoption 
layered audio performance section discusses results experiments testing interactions adaptive audio applications cm tcp traffic 
experiment consisted performing test transfers competing tcp constant bit rate cross traffic bottleneck link mbps round trip delay ms 
test traffic consisted single audio transfer cm single tcp cm transfer host tcp newreno transfer 
expected desired result combined bandwidth tcp cm audio transfer equal bandwidth tcp newreno transfer 
addition audio transfer choose encoding closely matched bandwidth tcp cm transfer 
experiment audio application choose encodings kbps 
performed transmissions kb packets 
sequence number audio cm tcp cm tcp newreno time seconds performance adaptive audio application results experiment shown confirm cm tcp cm adaptive audio perform expected 
tcp newreno transfer obtained approximately kbps 
combination audio kbps tcp cm kbps quite close traditional tcp performance 
audio primarily kbps encoding occasionally switching kbps encodings 
fact audio application deal coarse grained adaptation performance sufficiently similar associated tcp cm connection 
results clear cm allows streaming applications perform correct adaptation congestion network 
related web sessions today multiple concurrent tcp connections 
connection performs slow start irrespective connections currently active client 
furthermore experiencing congestion path client subset connections ones experience losses reduce window 
resulting multiplicative decrease factor ensemble connections larger value individual tcps unfair relative clients fewer connections concurrent connections equal windows experience loss decrease factor worse lead instability network clients operate fashion 
developing application specific congestion control schemes real time multimedia streams 
discuss classes solutions unicast congestion control problem application level solutions transport level solutions 
application level solutions application level solutions web transport multiplex logically distinct streams single transport tcp connection overcome adverse effects independent competing tcp transfers 
examples include part application specific session control protocol scp mux protocol 
drawbacks class solutions 
architectural problems solutions application specific attempt avoid poor congestion management support provided protocol stacks today 
congestion property network path right point system manage inside protocol stack application 
right support provided system need solutions eliminated 
application specificity solutions require class applications web real time streams file transfers reimplement machinery force protocols tcp suited task hand 
undesirable coupling solutions typically multiplex logically distinct streams single byte stream abstraction 
packets belonging streams lost stream stall packets lost 
order delivery provided tcp forces linear order transferred bytes partial order desired 
violation alf principle states independent application data units adus independently receivers independent order received 
proposal aims develop receiver oriented approach handling concurrent web transactions 
includes maintaining congestion parameters receivers easy incorporate equivalent receiver hints bandwidth partitioning flows 
hand eventual transmissions performed sender believe cm design sound achieves benefits 
cm heavily motivated alf protocol design principle 
developing congestion control protocols real time multimedia streaming applications 
context multicast video ivs rlm 
numerous congestion control proposals various reliable multicast applications survey see 
contrast efforts applicationspecific aim develop substrate manages congestion allows applications implement adaptation policies 
closer spirit goal rap protocol rate congestion control scheme intended streaming applications :10.1.1.154.9133
internal algorithms cm fact rate architecture radically different rap 
particular independent transport protocol permits information shared transports coherent manner integrates congestion management concurrent rate audio flows window tcp flows 
transport level solutions motivated part drawbacks solutions desire improve web transfer performance various researchers proposed modifications tcp :10.1.1.154.9133
approaches solve problems associated web scenario transport specific 
handle tcp transfers applications protocols take advantage 
prominent examples applications include various real time streaming media services 
transport protocol heterogeneous packet flows hpf described 
key difference cm hpf cm integrates congestion management ensemble flows provides different adaptation api hpf consider interactions concurrent active flows 
concluding remarks system architecture centered congestion manager cm ensures proper congestion behavior allows applications easily adapt network congestion 
cm incorporates rate control protocol lightweight loss resilient protocol receiver feedback exponential aging scheme regulate transmissions feedback infrequent 
provides simple api applications adapt conveniently network congestion varying bandwidth availability 
enables multiple concurrent flows cooperate compete network resources performing function trusted intermediary resources 
simulated tcp adaptive audio application top cm 
results show ensemble vanilla tcp newreno connections variation slowest fastest connections ensemble tcp cm connections bottleneck bandwidth cross traffic shares bandwidth equally consistently little variation rates different connections 
furthermore ensemble cm modulated flows displays social stable network behavior achieving 
adaptive audio application able cm api transmit encoding closely matches varying available bandwidth having constantly probe network excess capacity 
results demonstrate cm ensures stable network behavior improving application performance ways 
balakrishnan padmanabhan seshan stemm katz tcp behavior busy web server analysis improvements 
proc 
ieee infocom mar 
bennett zhang hierarchical packet fair queueing algorithms 
proc 
acm sigcomm aug 
bolot turletti scalable feedback multicast video distribution internet 
proc 
acm sigcomm london england aug 
chiu jain analysis increase decrease algorithms congestion avoidance computer networks :10.1.1.154.9133
computer networks isdn systems 
clark shenker zhang supporting real time applications integrated services packet network architecture mechanisms 
proc 
acm sigcomm august 
clark tennenhouse architectural consideration new generation protocols 
proc 
acm sigcomm september 
demers keshav shenker analysis simulations fair queueing algorithm 
internetworking research experience 
ferrari verma scheme real time communication services wide area networks 
ieee journal selected areas communications apr 
floyd tcp explicit congestion notification 
computer communications review oct 
floyd fall router mechanisms support congestion control 
tech 
rep lbnl 
gettys mux protocol specification wd mux 
www org pub www protocols mux wd mux html 
gupta user centric receiver driven web transport protocol 
university california berkeley berkeley ca 
hashem analysis random drop gateway congestion control 
tech 
rep lcs tr laboratory computer science mit 
hoe improving start behavior congestion control scheme tcp :10.1.1.154.9133
proc 
acm sigcomm aug 
transparent content negotiation 
rfc march 
rfc 
jacobson congestion avoidance control 
proc 
acm sig comm august 
kanakia keshav rate controlled servers high speed networks 
proceedings ieee conference global communications dec 
lakshman madhow window error recovery flow control slow channel study tcp ip performance 
proc 
infocom april 
li dwyer bharghavan transport protocol heterogeneous packet flows 
proc 
ieee infocom mar 
mccanne jacobson vetterli receiver driven layered multicast 
proc acm sigcomm aug 
ns network simulator 
www mash cs berkeley edu ns 
ott mathis stationary distribution ideal tcp congestion avoidance 
padhye firoiu towsley kurose modeling tcp throughput simple model empirical validation 
proc 
acm sigcomm sept 
padmanabhan addressing challenges web data transport :10.1.1.154.9133
phd thesis univ california berkeley 
preparation 
parekh gallager generalized processor sharing approach flow control integrated services networks single node case 
ieee acm transactions networking june 
ramakrishnan floyd proposal add explicit congestion notification ecn ipv tcp 
internet draft draft ecn txt nov 
progress 
rejaie handley estrin rap congestion control mechanism realtime streams internet :10.1.1.154.9133
appear proc 
infocom 
reliable multicast research group 
www east isi edu 
saltzer reed clark arguments system design :10.1.1.35.4167
acm transactions computer systems nov 
session control protocol scp 
www org pub www protocols ng ng scp html 
stevens unix network programming 
addison wesley reading ma 
stevens tcp slow start congestion avoidance fast retransmit fast recovery algorithms jan 
rfc 
stoica zhang hierarchical fair service curve algorithm link sharing real time priority services 
proc 
acm sigcomm 
touch tcp control block interdependence :10.1.1.154.9133
rfc april 
rfc 
wright stevens tcp ip illustrated volume 
addison wesley reading ma jan 
zhang new architecture packet switching network protocols 
tech 
rep lcs tr laboratory computer science mit aug 
zhang deering estrin shenker zappala rsvp new resource reservation protocol 
ieee network magazine sept 

