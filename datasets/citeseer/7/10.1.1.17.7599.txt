discovering frequent structures summaries department computer science university maryland college park cs umd edu sudarshan chawathe institute advanced computer studies university maryland college park cs umd edu study problem finding frequent structures semistructured data represented directed labeled graph 
frequent structures graphs isomorphic large number subgraphs data graph 
frequent structures form building blocks visual exploration data mining semistructured data 
overcome inherent computational complexity problem summary data structure prune search space provide interactive feedback 
experimental study methods operating real datasets 
implementation methods freely available capable operating datasets orders magnitude larger described prior 
technological factors falling prices increasing capacities storage media practical organizations store extremely large amounts data generated operations 
apart secrecy legal protection little motivation permanently deleting data cost storing negligible compared potential impact decision making operations 
storing data easy making effective difficult amount data orders magnitude larger human expert analyze 
result pressing need data mining term denote semiautomatic extraction interesting patterns large amounts data 
considerable data mining research product communities focused relational structured data time series high dimensional data 
hand recognized significant portion information vital enterprise structured unstructured semistructured 
term semistructured data mean data structure irregular incomplete dynamic 
example collection memos legal documents significant structure sender name subject dates outcomes structure regular reliable traditional structured databases 
address problem mining semistructured data 
data mining tasks important frequently time consuming task discovery enumeration frequently occurring patterns informally sets related data items occur frequently potential interest detailed data analysis 
precise interpretation term depends data model dataset application 
best studied framework data mining uses association rules describe interesting relationships sets data items ais 
framework typically applied market basket data checkout registers indicating items purchased critical operation determining frequent itemsets defined sets items purchased pass threshold called support 
time series data analogous concept subsequence series occurs frequently 
defines analogous concept called frequent structures semistructured data represented labeled directed graph presents efficient methods computing frequent structures large datasets 
data mining iterative process human expert refines parameters data mining system intermediate results mining system 
unreasonable expect expert select proper values mining parameters priori selection requires detailed knowledge data mining system expected enable 
frequent meaningful feedback important data mining system particular importance data semistructured addition data dependent relationships unknown priori schema known fixed 
rapid frequent feedback human expert important requirement system designed mine semistructured data 
prior discussed section mining data falls short requirement 
main idea method called seus structure extraction summaries phase process phase summarization preprocess dataset produce concise summary 
summary abstraction underlying graph data indicates types relationships nodes identified labels 
summary similar data guides approximate typing mechanisms semistructured data gw nam 
noted confirmed experiments section summaries typically dramatically smaller underlying database 
second phase candidate generation method interacts human expert iteratively search frequent structures refine support threshold parameter 
search uses summary typically fits main memory performed rapidly interactive response times additional disk accesses 
results phase approximate set final results accurate permit uninteresting structures filtered 
discuss nature approximation section expert filtered potential structures approximate results search phase accurate count number occurrences potential structure produced third phase counting 
shall see section phase accounts majority time spent mining process 
users willing sacrifice quality faster response 
example preliminary exploration dataset prefer get quick approximate insight data base exploration decisions insight 
order address need introduce approximate version method called seus 
method returns top frequent structures frequent structures 
methods significant advantages prior operate efficiently datasets orders magnitude larger handled prior aware 
second large datasets methods provide approximate results quickly enabling interactive exploratory data analysis 
third applications scenarios interested frequent structures necessarily exact frequencies expensive counting phase completely skipped resulting great performance benefits 
order evaluate ideas implemented method data mining system semi structured data called seus 
addition serving testbed experimental study section system useful right tool exploring semi structured data 
discover intuitively meaningful structures applied datasets domains 
implementation seus uses java se programming environment freely available www cs umd edu projects seus terms gnu gpl license 
rest organized follows section define structure discovery problem formally phase solution called seus 
sections describe summarization candidate generation counting phases 
section presents approximate method called seus 
section discuss quality solutions produced complete approximate methods 
section summarizes results detailed experimental study 
related discussed section conclude section 
structure discovery seus represents semistructured data labeled directed graph 
representation objects mapped vertices relations objects modeled edges 
structure defined connected graph isomorphic subgraph database 
illustrates graph representation small xml database 
subgraph input database isomorphic structure called instance structure 
number instances structure called structure support 
allow instances overlap 
data graph structure instances shown 
say structure frequent support higher threshold problem statement frequent structure discovery graph representation database threshold find set frequent structures 
naive approach finding frequent structures consists enumerating subgraphs partitioning set subgraphs classes graph isomorphism returning representative classes cardinality greater support threshold 
unfortunately number subgraphs graph database exponential size graph 
naive approach tests pair subgraphs isomorphism worst case 
book title year author name book title year author name title title book journal year title volume title conference book volume title year child child child child child child child child child idref idref child child cite child child child cite child child cite child child child child child cite child example input graph child child book title year structure child child subgraph child child subgraph child child subgraph structure instances graph isomorphism known np hard difficult problem approach relying exponential number isomorphism tests practical large databases 
proof hardness frequent structure discovery problem closely related problem finding support frequent vertex structure np hard 
hardness result follows reduction np hard problem deciding exists vertex clique vertex graph purpose construct new graph consisting copy disjoint copy kn complete graph vertices 
clearly frequent vertex subgraph clique vertices 
sized cliques sized cliques occur exactly times sized clique sized cliques occur times 
count support frequent vertex subgraph decide clique 
practical systems way avoid examining possible subgraphs calculate support structures partitioning set possible subgraphs 
enumerating subgraphs level level expansion subgraphs similar itemset approach adopted apriori market basket data 
start subgraphs size single vertex try expand adding vertices edges 
subgraph expanded anymore soon reason support fall threshold downward closure property structure support higher threshold subgraphs support higher threshold 
agm fsg kk systems adopt strategy find structures support higher threshold 
subdue ch greedy method finds frequent structures graph database minimum description length mdl principle 
method complete sense may obtain frequent structures 
subdue uses level level expansion 
expanding subgraphs iteration subdue expands subgraphs belonging isomorphism class highest score mdl principle 
bound running time subdue uses beam search computationally constrained 
details see section 
results reported kk ch experiments suggest methods scale large databases 
graph vertices smaller datasets interest consisting vertices kk reports agm needs days fsg take seconds thresholds 
subdue takes seconds process dataset experiments show scale easily larger datasets 
example takes subdue longer hours mine megabyte dataset 
experiment run pc class machine serial implementation subdue 
details see section 
main factor hurting performance methods need go database determine support structure 
number structures support calculated decreased significantly compared naive approach due downward closure properties mdl heuristic calculation support remaining structures expensive 
systems operate batch mode providing input database user wait structure discovery process terminate output produced 
intermediate partial approximate results making exploratory data analysis difficult 
batch mode operation cause major problems especially user domain knowledge guess proper values mining parameters support threshold 
order operate efficiently seus uses data summaries database 
summaries provide concise representation database expense accuracy 
representation allows system approximate support structure scanning database 
level level expansion method discover frequent structures 
seus major phases phase summarization responsible creating data summary described section 
second phase candidate generation seus finds structures estimated support threshold described section 
second phase reports candidate structures user early feedback useful exploratory 
exact support structures determined third phase counting described section 
summarization data summary estimate support structure number subgraphs database isomorphic structure 
summary similar spirit representative objects graph schemas dataguides gw 
summary graph characteristics 
distinct vertex label original graph summary graph labeled vertex 
labeled edge original graph labeled edge labels respectively 
summary associates counter vertex edge indicating number vertices respectively edges original graph represents 
example depicts summary generated input graph 
vertices database label map vertex summary summary typically smaller original graph 
example graph vertices labeled book summary vertex representing vertices 
simple example summary slightly smaller original data 
noted gw common datasets characterized high degree structural replication giving greater space savings 
details see table appendix 
space savings come cost reduced accuracy representation 
particular summary tells labels possible edges vertices labeled may incident vertex original graph 
example journal conference vertices connect vertex summary contain information 
partly overcome problem creating richer summary 
storing set edges leaving vertex label frequencies create counting lattice similar nam vertex distinct set edges leaving create node store frequency set book title year author name journal volume conference child child child child child child cite idref child child cite child cite child child summary graph child title child journal child year cite book child title child con erence child title counting lattice vertex outgoing edges 
example consider vertex label 
counting lattice vertex depicted 
input graph different types vertices respect outgoing edges 
single outgoing edge labeled child leading title vertex 
instance outgoing edges title conference vertices 
outgoing edges 
lattice represents types vertices label separately simple summary distinguish 
node lattice stores support vertex type represents 
call original summary level summary summary obtained adding lattice structure level summary 
level summary reason vertex database connects journal conference vertices possible level summary 
process enriching summary differentiating vertices labels outgoing edges carried labels vertices edges reachable paths lengths 
refer summaries level summaries level summary differentiates vertices labels edges vertices outgoing paths length building level summaries considerably difficult building level level summaries 
level summaries essentially data guides level summaries built additional cost file containing graph edges sorted identifiers source vertices 
summaries higher levels additional passes graph required 
experiments show level summaries accurate datasets study section additional benefit higher summary levels unclear 
rest focus level level summaries 
assume graph database stored disk sequence edges sorted lexicographic order source vertex 
inputs formats ones sample datasets section easily converted format 
building level level summaries requires single sequential scan edges file 
build summary incrementally memory scan file 
edge increment counters associated summary nodes representing labels respectively 
similarly counter associated summary edge incremented denotes summary node representing label 
summary nodes edges exist created 
edges file sorted lexicographic order source sure get outgoing edges vertex encountering source vertex 
processing outgoing edges vertex level summary construction add appropriate node corresponding lattice increase counter existing lattice node 
algorithm threshold input support threshold defining frequent structure output set possible frequent structures 
candidate 
open 
summary support threshold 
create structure consisting single vertex 
open open 
open 
structure open 
open open 
candidate candidate 
children expand 
children 
support threshold candidate 
open open 
return candidate simplified candidate generation algorithm level summary estimate support structure follows construction subgraph say isomorphic summary subgraph exists estimated actual support 
set counters consists counters nodes edges 
support estimated minimum value construction summary estimate upper bound true support level summary estimate support structure follows vertex set lattice nodes represent set edges superset set edges denote sum counters nodes 
support estimated min 
estimate upper bound true support tighter bound corresponding level summary 
example consider structure consisting vertex edges conference vertex journal vertex 
level summary depicted structure support estimated minimum counters node subgraph summary isomorphic structure summary lower left corner min 
data graph clear true support structure 
level summary estimates support accurately expense book keeping 
section presents experimental evaluation estimates real datasets 
candidate generation simplified version candidate generation algorithm outlined returns list candidate structures estimated support higher 
maintains lists structures open candidate 
open list store structures processed checked 
algorithm begins adding structures consist vertex pass support threshold test open list 
rest algorithm loop repeats structures consider open list empty 
iteration select structure open list generate larger structures called children calling expand subroutine described line 
new child structures estimated support added open list 
qualifying structures accumulated candidate result returned output algorithm terminates 
structure expand subroutine produces set structures generated adding single edge termed children 
description expand subroutine denote set vertices label vertex data graph denote set data vertices label vertex vertex create set addable edges leaving vertex 
set easily determined data summary set edges summary vertex representing 
shall discuss section ability generate structures memory summary disk resident database results large savings running time 
edge addable candidate expanding set vertices label destination vertex empty add new vertex label new edge new structure created adding edge edge vertices 
labeled edge vertices add new structure obtained adding vertex label edge 
example consider graph 
assume want expand structure consisting single vertex labeled author 
set addable child book author idref book author child name author child edges leave author labeled vertex database 
vertex expanded adding edges 
edge addable set new structure obtained adding new book labeled vertex connecting new vertex child edge 
edges addable give rise structures manner 
support counting user satisfied structures discovered candidate generation phase may interested frequent structure list getting exact support structures 
recall candidate generation phase provides quick approximate support structure memory summary 
task performed support counting phase describe 
define size structure number nodes edges contains refer structure size structure 
method generating candidates section follows structure candidate list exists structure size candidate list subgraph refer parent context 
clearly instance subgraph instance differs having fewer edge optionally fewer vertex 
properties support counting process 
determining support structure single vertex consists simply counting number instances labeled vertex database 
counting phase store support structure determined set pointers structure instances disk 
determine support structure revisit instances parent saved pointers 
instance check neighboring edge optionally node added generates instance recorded instance operation growing instance instance similar expand operation candidate generation phase difference 
counting phase expand subgraphs database candidate generation phase expand structures referring disk resident data summary 
second counting phase need find edge vertex database added instance satisfies constraints imposed expansion created structure label edge 
candidate generation phase add possible edges vertices structure 
key operation procedure finding edges vertices database potentially satisfy expansion constraints instance 
scanning database information inefficient vertex create auxiliary file containing edges vertex 
files similar path indexes access support relations object semistructured databases km created single pass database counting phase begins 
quality speed tradeoff seus method described significantly faster methods aware 
see section 
applications concerned exact supports frequent structures structured browsing data exploration counting phase skipped resulting interactive response times seconds input parameters output results 
presents options tradeoff running time accuracy supports stopping search phase case estimate upper bound true support structure running counting phase case exact supports produced 
section method called seus allows user tune quality speed tradeoff finer granularity 
seus seus discover frequent structures returns top structures input parameter 
top mean structures rank highest scoring metric define 
may tempted support scoring metric doing result structures consisting single node structures receiving highest scores structure support includes number structures supports smaller 
example database frequent structure structure single vertex labeled title support 
technically correct definition frequent structures useful application convey little information database 
need scoring metric balances support structure size 
analogous problem occur seus returns frequent structures just ones 
purpose product support size structure size refers sum number vertices number edges structure refer metric structure score 
difference seus seus filtering scheme candidate generation phase 
seus global threshold structure compared threshold 
model suffers usual problem absolute thresholds user familiar dataset situation data exploration system run guessed values thresholds usable values 
seus approximate method order suitable preliminary explorations local comparison scheme method 
model structure frequent score higher adjusted score children regardless score structures 
adjusted score structure simply score times parameter called structure complexity measure scm scm support size scm 
structure considered frequent score structures parent structure structures generated adding edge optionally vertex 
seus system datasets described section scm convenient tuning parameter 
large values scm favor complex structures scm values near zero support important 
scm value imposes size constraints discovery process 
implemented slider control seus system allows quickly pick value returns structures large frequent 
able achieve interactive response times essential slider control return candidate structures generated search phase fast need perform counting phase 
modifications affect candidate generation phase 
see 
termination condition line changes incorporate early termination structures 
candidate set updated line children pass scm test score scm score 
line children passing test added open list 
structure selection line changed 
new method greedy soon structures discovered process structures higher scores 
choosing arbitrary structure process structure highest score open list 
section experimental results studying effects changes semantics running time solution quality 
seus similar subdue system functionality solution strategy 
methods return top frequent structures ranking metric 
subdue ranks structures compression ratio minimum description length mdl principle 
higher scoring structure results greater compression database encoding replaces instance structure node representing structure stored separately 
seus ranks structures score metric described size times support 
seus score metric closely related subdue compression ratio simply compression ratio ignore space needed store mapping nodes replace instance structure structure 
seus easily modified exact compression ratio ranking metric 
seus subdue complete greedy methods guaranteed return frequent structures 
seus method complete 
algorithm analysis candidate generation process seus uses estimated support measurement 
estimation higher actual value seus structure support higher threshold 
overestimation hand cause structures support lower threshold added candidate list 
structures removed frequent structure list support count phase effort spent count support wasted 
experimental study overestimation section 
hand approximate method seus guaranteed produce optimal solutions 
solution optimal consists highest scoring structures 
discuss factors contributing nonoptimal solutions seus overestimation structure support early termination condition local comparison model 
seus greedy method returns structures identifies frequent order structures considered expansion important 
recall order structure expansion important correctness seus structure eventually considered 
structures ordered scores candidate generation phase seus 
structure score depends support estimated summary 
estimates guaranteed lower actual supports amount overestimation vary structures 
example structure estimate large overestimate may cause structure higher score lower estimate bumped candidate list 
described section seus uses local model comparing structures 
local model scm parameter benefits outline occasionally lead unintuitive results 
structure excluded consideration solely comparison parent 
structure parent high score compared structures excluding child comparing rest normal structure population fair 
example suppose structures considered expansion different iterations candidate generation phase scm 
suppose support support size size 
structures resulting expanding support equal size size additional edge vertex added open list considered 
decision despite fact score score 
inconsistency occurs local comparison model global 
problem affects seus seus method 
experimental evaluation order evaluate running time method quality solutions produces performed number experiments 
implemented seus seus java se programming environment 
graph isomorphism tests nauty package mck derive canonically labeled isomorphic graphs 
levels summaries append sd system name show level summary method particular experiment seus seus method summary level 
experiments described pc class machine mhz intel pentium iii processor gigabyte ram running redhat distribution gnu linux 
possible compared results subdue version serial version implemented programming language 
table presents characteristics datasets experiments sources 
compares running time seus seus subdue datasets table 
running times seus seus levels summaries depicted 
important notice seus versions run longer time looking frequent structures seus subdue return frequent structures experiments 
running times seus seus increase monotonically size datasets increases 
irregularities running time subdue due fact size dataset factors number vertex edge labels significant effect performance subdue 
referring table clear credit datasets labels diabetes datasets 
credit credit datasets smaller diabetes datasets takes subdue longer mine tries expand subgraphs possible edges iteration 
subdue decides isomorphism class better considering number subgraphs size subgraphs 
subdue sets isomorphic subgraphs manipulated bags subgraphs 
large number different vertex edge labels larger number subgraphs choose subdue accesses database subgraph running time increases considerably 
number edge vertex labels affects seus seus similar way access main database find support structure summary number significantly affect running time 
subdue seus seus seus seus credit credit diabetes diabetes small datasets seconds vote credit chemical credit chess medium datasets seconds medical medical medical medical large datasets seconds running time seus seus phase data summary generation subdue perform 
small datasets additional effort comparable running time 
example running diabetes datasets seus takes longer subdue mainly summary generation overhead 
section show dataset size grows overhead negligible 
note running time seus seus increases level summary level summary 
increase running time mainly due overhead creating richer summary 
see additional effort result accurate results 
comparing java implementation seus implementation subdue 
difference efficiency programming environments significant large datasets factor smaller ones 
datasets grow running time subdue grows quickly seus show sharp increase 
experimental setup unable obtain results subdue datasets larger mb running hours 
reason presents running time seus seus methods large datasets 
best knowledge complete structure discovery methods handle datasets sizes comparable 
mentioned earlier agm fsg methods take respectively days seconds process chemical dataset seus needs seconds kk 
unfortunately unable obtain fsg system perform detailed comparison 
note small thresholds methods better performance thresholds large number structures frequent summary provide significant pruning introducing overhead creating summary 
dataset size average percentage total overestimation number level level cases credit credit diabetes diabetes vote credit chemical credit chess medical medical medical medical table average overestimate support structures experiments studying running time fixed scm value seus methods recall return top structures 
similar strategy fixed threshold absolute relative database size impractical seus methods return frequent structures 
support threshold returns reasonable number structures dataset results far 
raising threshold fix problem second dataset results frequent structures 
experience exemplifies need interactive system gives user rapid feedback enable selection parameters characteristics dataset 
seus methods interactive procedure select threshold values result roughly frequent structures dataset 
thresholds mentioned table 
shows large datasets seus methods faster seus methods 
seus methods take twice long approximate seus methods 
result supports suggested strategy exploring datasets magnitude seus method counting phase initial interactive explorations order select proper thresholds seus get accurate results 
recall section estimated support structures course discovery estimation underestimates actual support 
table summarize average overestimation test datasets level level summaries 
zero entries level summary absolute zero average overestimation percentage medical rounded 
number structures dataset indicates experiments threshold values relatively high resulting roughly structures 
structures small 
credit dataset maximum size discovered structures 
small structures overestimation absolute zero reasonable 
note overestimation increase structures grow larger 
table indicates level summary gives sufficient accuracy saving lot effort compared level summaries summaries 
recall seus subdue complete methods 
return frequent structures ranked metrics described section 
performed series experiments evaluate quality structures returned seus subdue 
metric structure quality general domain dependent 
purposes objective evaluation compression gain metric 
score metric described section efficient approximation compression gain quality metric 
precisely denote respectively size support structure denote top structures scoring function 
denote top structures produced method seus subdue 
compression loss method defined measure loss quality method compared optimal solution 
order get optimal solution run complete seus method parameters set return structures datasets rank structures score 
compare percentage compression loss seus subdue 
plotted compression loss frequent structures 
combinations methods datasets bar signifies zero compression loss 
shows datasets subdue performs worse subdue seus seus credit credit diabetes diabetes vote credit chemical credit chess datasets increasing size compression loss compression loss comparison count search summarize credit credit diabetes diabetes vote credit credit chess aviation medical medical medical medical datasets increasing size time spent algorithm phases seus chemical dataset subdue error percentage high 
expect better quality 
seus greedy algorithm assumption correct 
method stops soon structures guarantee better estimate produce results higher scores 
discussed section seus system provides real time feedback user quickly displaying frequent structures resulting different choices threshold scm parameter 
interactive feedback possible time spent candidate generation search phase small 
justifies claim 
depicts percentage time phases processing different datasets 
datasets get larger fraction running time spent summarizing graph falls rapidly 
time spent candidate generation phase relatively small 
strategy creating summary running candidate generation phase multiple times different input parameters order determine suitable values proceeding expensive counting phase effective 
important note counting phase performed find exact support structures 
step necessary output system input complex mining method user wishes know exact supports 
hand user interested primarily structures exact supports counting phase completely skipped 
skipping phase affect actual structures produced output quality structures remains running time decreases substantially 
appendix additional experimental results 
table summarizes sensitivity running time seus support threshold parameter 
note worst case size output grows size exponential size input database threshold lowered unavoidable methods produce complete output seus experience rapid rise running time falling thresholds 
figures summarize effect scm parameter running time seus 
expected running time tends rise threshold value increases increase dramatic supporting suitability seus preliminary exploratory data analysis 
related prior structure discovery domain dependent win lev fis glf cg detailed comparison methods appears con 
consider domain independent methods 
system clip discovers patterns graphs expanding combining patterns discovered previous iterations 
guide search clip uses estimate compression resulting efficient representation repetitions candidate structure 
estimate linear time approximation graph isomorphism 
subdue ch performs structure discovery graphs 
uses minimum description length principle guide beam search 
subdue uses inexact graph matching algorithm process find similar structures 
subdue discovers structures differently clip 
subdue produces single structures evaluated minimum description length clip produces set structures collectively compress input graph 
clip ability grow structures merge operator previously structures subdue expands structures edge time 
system similar subdue respect structure expansion 
second clip estimates compression resulting structure subdue performs expensive exact measurement compression new structure 
expensive task causes subdue system slow operating large databases new concept discovered system goes input graph calculates gain compression new structure 
issues scaling subdue system implementing method parallel environment addressed ch presents approaches distribute original algorithm parallel environment 
agm apriori algorithm mining frequent structures 
main idea similar market basket analysis algorithm itemset candidate frequent itemset item subsets frequent 
agm graph size considered candidate frequent structure subgraphs size frequent 
agm induced subgraphs considered candidate frequent structures 
graph subgraph called induced subgraph 
restriction reduces size search space means interesting structures induced subgraphs detected agm 
producing generation candidate frequent structures agm counts frequency candidate scanning database 
subdue need database scan generation limits method 
contrast method limited induced subgraphs scan database generation 
fsg kk system finds connected subgraphs appear frequently large graph database 
similar agm system uses level level expansion adopted apriori 
key features fsg compared agm uses sparse graph representation minimizes storage computation restriction structure topology induce subgraph restriction connectivity incorporates number optimizations candidate generation counting scalable transaction id lists counting 
system scans database order find support generation structures 
experimental results kk show fsg considerably faster agm 
note agm fsg operate transaction database transaction graph definition frequent structure support applicable 
seus restriction seus applied transaction database large connected graph database 
mentioned section common chemical dataset fsg needs seconds seus returned frequent structures seconds 
problem finding frequent structures related problem finding implicit structure approximate typing semistructured databases 
nam authors propose method infer approximate classification objects hierarchical collection types 
method uses counting lattice similar level summary summarize graph database heuristic function called jump identify candidate types 
builds type hierarchy candidates infers typing rules 
nam authors address problem greatest fixpoint semantics monadic datalog programs 
define type object database datalog program 
technique similar clustering merge similar types types left 
merge done distance function defined datalog programs representing types 
papers detailed performance analysis clear methods scale large datasets focus 
furthermore important differences problems type inference frequent structure discovery 
type inference structures typically limited rooted trees structure depth 
frequency structure metric type inference 
instance type occurs infrequently may important occurrences regular structure 
despite differences may interesting investigate possibility adapting methods problem 
motivated need data mining methods large semistructured datasets modeled labeled graphs nodes edges 
focused important building block data mining methods task finding frequent structures structures isomorphic large number subgraphs input graph 
seus method finds frequent structures efficiently phase approach phase builds structural summary second uses summary generate candidate frequent structures third generates frequency structure 
faster approximate method returns approximate results suitable rapid exploratory analysis 
implemented methods seus system exploring semistructured data implementation freely available gnu gpl terms 
results detailed experimental study running time seus seus quality approximate solutions produced seus 
methods main distinguishing features due summary data structure operate datasets orders magnitude larger prior 
second methods provide rapid early feedback delay seconds form candidate structures permitting interactive data exploration system 
rapid feedback stages methods invaluable selecting suitable value support threshold parameter 
applications system data exploration third time consuming phase methods skipped interested qualitative characteristics frequent structures exact frequencies 
ongoing exploring application methods finding association rules correlations semistructured data 
applying methods problems classification clustering frequent structures build predictive model 
acknowledgments subdue team providing subdue code datasets experiments 
uci repository machine learning university york machine learning group national library medicine oxford university computing laboratory datasets 
complexity analysis finding support frequent structure due aravind srinivasan 
ais agrawal imielinski swami 
mining associations sets items massive databases 
sigmod record june 
agrawal srikant 
fast algorithms mining association rules 
proc 
th international conference large data bases pages 
morgan kaufmann 
buneman davidson fernandez suciu 
adding structure unstructured data 
proc 
th international conference database theory 
bm blake merz 
uci repository machine learning databases 
cg conklin glasgow 
spatial analogy subsumption 
proc 
ninth international conference machine learning pages 
ch cook holder 
graph data mining 
intelligent systems applications 
ch cook holder approaches parallel graph knowledge discovery 
journal parallel distributed computing 
con conklin 
structured concept discovery theory methods 
technical report queen university 
fis fisher jr knowledge acquisition incremental conceptual clustering 
machine learning 

graph isomorphism problem 
technical report university alberta 
glf gennari langley fisher 
models incremental concept formation 
artificial intelligence 
gw goldman widom 
dataguides enabling query formulation optimization semistructured databases 
proc 
third international conference large data bases pages 
inokuchi washio motoda 
apriori algorithm mining frequent substructures graph data 
proc 
th european conference principles practice knowledge discovery databases pages 
kk karypis 
frequent subgraph discovery 
proc 
st ieee conference data mining 
km kemper moerkotte 
access support object bases 
proc 
international conference management data pages 
lebowitz 
experiments incremental concept formation 
machine learning 
lev levinson 
self organizing retrieval system graphs 
proc 
national conference artificial intelligence pages 
mchugh indexing semistructured data 
technical report stanford university computer science department 
mck mckay 
nauty user guide version 
med medical citation databases 
nam nestorov abiteboul motwani 
inferring structure semistructured data 
proc 
workshop management semistructured data 
nam nestorov abiteboul motwani 
extracting schema semistructured data 
proc 
acm sigmod international conference management data pages 
nestorov ullman wiener chawathe 
representative objects concise representations semistructured data 
proc 
international conference data engineering pages 
predictive toxicology evaluation challenge datasets 
win winston 
learning structural descriptions examples 
psychology computer vision pages 

yoshida motoda indurkhya 
unifying learning methods colored digraphs 
proc 
international workshop algorithmic learning theory volume pages 
yor university york machine learning group 
name description vertices edges vertex edge graph summary labels labels size size credit credit card application db bm credit credit card application db bm diabetes diabetes patient records bm diabetes diabetes patient records bm vote congressional voting records bm credit credit card application db bm chemical chemical compounds credit credit card application db bm chess chess relational domain yor medical medical publication citations med medical medical publication citations med medical medical publication citations med medical medical publication citations med table datasets experiments threshold percentage graph size dataset credit credit diabetes diabetes vote chemical chess seus seus dataset credit credit medical medical medical medical seus seus table thresholds generate roughly frequent structures appendix credit credit diabetes diabetes datasets increasing size seconds seus running time sensitivity scm small datasets dataset thresholds percentage graph size credit credit diabetes diabetes vote credit chemical credit chess medical medical medical medical table seus running time sensitivity threshold milliseconds vote credit chemical credit chess datasets increasing size seconds seus running time sensitivity scm medium datasets medical medical medical medical datasets increasing size seconds seus running time sensitivity scm large datasets credit credit diabetes diabetes datasets increasing size seconds seus running time sensitivity scm small datasets vote credit chemical credit chess datasets increasing size seconds seus running time sensitivity scm medium datasets medical medical medical medical datasets increasing size seconds seus running time sensitivity scm large datasets snapshot seus candidate generation phase 
