brics rs cattani categorical axiomatics bisimulation brics basic research computer science categorical axiomatics bisimulation gian luca cattani john power glynn winskel brics report series rs issn september copyright brics department computer science university aarhus 
rights reserved 
reproduction part permitted educational research condition copyright notice included copy 
see back inner page list brics report series publications 
copies may obtained contacting brics department computer science university aarhus ny munkegade building dk aarhus denmark telephone telefax internet brics brics dk brics publications general accessible world wide web anonymous ftp urls www brics dk ftp ftp brics dk document subdirectory rs categorical axiomatics bisimulation gian luca cattani john power glynn winskel brics university aarhus denmark lfcs university edinburgh scotland september give axiomatic category theoretic account bisimulation process algebras idea functional bisimulations open maps 
monads cat 
operations processes nondeterministic sum pre xing parallel composition modelled functors kleisli category monad may de ne notion open map monad examples interest agrees exactly usual notion functional bisimulation 
condition dense kz monad de ne follows functors kl preserve open maps respect functional bisimulation 
investigate structures kl exist axiomatic reasons primarily dense kz monad study structures help model operations processes 
outline analysis gives ideas modelling higher order processes 
conclude making comparison presheaves profunctors model process calculi 
supported epsrc gr frameworks programming language semantics logic 
basic research computer science centre danish national research foundation 
seek category theoretic axiomatic account bisimulation studied concurrency instance milner 
category theoretic approaches bisimulation :10.1.1.37.1418
initiated joyal nielsen winskel uses notion open map de ne functional bisimulation de nes bisimulation span open maps 
partly axiomatic developed particular construction presheaf construction studied properties category generated 
adopt de nition open map consider class constructions de ned axiomatically 
essentially generalising theirs suggests ways modelling higher order processes size problems presheaf approach contrary directly include natural way representing higher order processes terms internal homs suggested presheaf models 
shall expand section 
model bisimulation open maps presheaf categories starts notion observation trace 
de nes small category path objects observation shapes arrow understood witnessing extension path 
considers presheaf category op set 
de nes open map op set relative category yoneda embedding op set 
key example category synchronisation trees set labels presheaves partial order category nite non empty strings ordered pre ordering 
case open maps correspond called zig zag morphisms functional bisimulations 
induced bisimulation relation obtained considering spans open maps coincides park milner strong bisimulation 
discussion applies equally notions observation arising non interleaving models 
various questions arise 
typically concurrency consider arbitrarily branching trees 
usual consider nitely branching trees trees branching limited instance countable 
second case combined presence higher order names higher order calculus clear presheaf construction sucient see detailed discus sion third clear model weak notions bisimulation 
give axiomatic account relevant constructions better position address issues 
axiomatic account clari es reasoning various decisions 
take presheaf categories granted give axiomatic development precisely structure want order model concurrency constructions arise manipulating structure 
concreteness restrict attention bulk operations needed modelling ccs processes synchronisation trees 
occasionally refer involved examples treated presheaf categories :10.1.1.120.180
rst observe category observations basic operations ccs lead consider free completion category countable colimits choice equivalent category countably branching trees shall see section 
construction countable colimit completions extends monad cat strong category theoretic properties explained sections 
constructions wish consider nondeterministic sum parallel composition arise maps kl kleisli category typical basic constructions categories observations 
condition monad dense kz monad shall de ne holds leading examples de ne notion open map tc small category prove maps kleisli category preserve open maps 
notion open map agrees leading examples usual notion functional bisimulation 
forms content section 
consider structure kl monad cat satis es various conditions true examples 
particular show kl nite coproducts nite products agree symmetric monoidal structure 
facts follows various constructions processes nondeterministic sum applying parallel operator pre xing preserve open maps 
gives candidate higher order structure outside kl allowing possible way model process passing extension ccs 
analysis forms sections 
section compare especially far higher order concerned presheaves profunctors model process calculi suggest directions research :10.1.1.120.180
address weak bisimulation 
way suggest unimportant 
large issue requires full devoted 
delicate points involved 
ideas approach directly amounts operation takes tree representing strong bisimulation replacing tree essentially quite quotient representing weak bisimulation 
hope axiomatics may allow sure 
second clear directly modelling weak bisimulation interesting development 
may better develop notion contextual equivalence strong bisimulation technique lines development testing equivalence 
defer detailed analysis issues 
induce bisimulation functional bisimulation suces consider spans functional bisimulations 
careful constructions respect spans consider explicitly course 
motivating example concreteness consider process calculus ccs assuming xed set labels models labelled synchronisation trees analysis holds generally see 
de nition set including letter elements 
lg de ne category objects strings arbitrary length possibly nite elements map pre xing composition composing inclusions 
category full subcategory non empty strings restriction strings nite length 
computation trees ccs processes generated operations freely applied computation paths 
processes nondeterministic sum computation tree determined disjoint sum computation trees second processes action computation tree identifying computation trees rst step 
represent computation trees nondeterministic sum pre xing extend category freely adding nite coproducts model nondeterministic sum allow computation paths agree proceed 
equivalent freely adding nite colimits 
proposition example category nitely branching synchronisation trees nitely maximal branches equivalent free nite colimit completion category gives limited account recursion allowed nitely branching trees nitely maximal branches 
order add value passing ccs approach extend binary nondeterministic operator countable 
yields category countably branching trees proposition example 
category countably branching synchronisation trees st equivalent free countable colimit completion 
category nitely branching synchronisation trees st full subcategory st 
generally proposition example regular cardinal category synchronisation trees branching free completion colimits size 
line argument applies strings range notions path objects giving reason consider small category path objects categories generally free colimit completions nite countable size colimits respectively 
shall soon reasons consider tc various just restricting attention trees needed model sorted operations trees represent nondeterministic sum 
seek axiomatic account constructions 
general setting order rst observation need de nitions 
de nition monad cat functor cat cat functor sends natural transformations natural transformations respecting domains codomains composites natural transformations natural transformations id natural transformations respect categorical structure cat subject axioms expressing associativity fact acts left right unit 
considerable detail monads category theoretic constructions associated appears shall try reasonably self contained regard monads 
reason monads interest proposition regular cardinal extends monad cat 
returning ccs modelled synchronisation trees operation nondeterministic sum respects structure computation trees precisely functor tl tl tl strictly preserves colimits speci ed size 
shall show general particular tc tc form td small category 
led consider strict colimit preserving functors td tc arrows kleisli category de ned follows 
de nition monad cat kleisli category objects categories form tc arrows functors tc td composition usual composition functors 
arrow kl may equivalently described functor td cells natural transformations proposition category countably branching synchronisation trees xed set labels st functors nite products category st preserve tree structure form full subcategory kleisli category kl 
result extends directly synchronisation trees bounded degree branching say respect kl regular cardinal strictly bigger 
situation straightforward operators pre xing parallel composition 
fact expect directly represented arrows kl 
instance parallel composition processes distribute sum jq jr 
careful analysis carry section represent key operators terms arrows kl allow deduce axiomatically respect bisimulation 
analysis conducted far gives idea model higher order structure 
consider extension ccs allows passing processes 
model consider process may accept process produce process abstraction cf 

want notion higher order object 
consideration kl immediately provides possibility natural isomorphism category kl te cat cat te 
consider category cat te te short possible higher order construct 
note kl symmetric monoidal closed rare construction kl 
may monoidal closed subcategory kl mimicking way profunctors considered monoidal closed 
example suppose giving countable colimit completion category 
category countable strong sense objects maps form countable sets countable colimit completion td equivalent op set full subcategory presheaves set countable 
full subcategory kl consisting objects tc countable monoidal closed countable te isomorphic op function space op countable 
analogous observation holds colimit completions nite cardinal size replacing countability 
object te equivalent functor td te kl case nitely branching trees model operators processes nondeterministic sum 
shall return construction analyse functional bisimulation section 
functional bisimulations open maps show notion functional bisimulation examples may identi ed notion open map 
holds generally explained concreteness shall continue restrict attention ccs modelled synchronisation trees notion functional bisimulation 
monad cat de ne notion open map tc arbitrary cf 
de nition monad cat small category arrow tc open commuting square exists map triangles commute 
note diagonal map need unique typically unique 
working de nition examples veri es open maps correspond functional bisimulations 
fundamental property process calculi ccs constructions involved modelling process constructors preserve functional bisimulations functionally bisimilar functionally bisimilar dually 
exactly say modelling ccs nitely branching trees open maps preserved functor tc tc tc want condition satis ed examples functors kl preserve open maps 
rst major result gives condition 
need de nitions 
de nition kz monad monad multiplication left adjoint counit adjunction identity unit monad small category functor tc left adjoint functor tc tc adjunctions preserved functors equivalent ask right adjoint identity unit see 
notion kz monad introduced study particular features monads free completions classes colimits 
characterise free completions example shows 
example consider monad cat sends category object arrow category 
kz monad trivially give free completions class colimits typically full subcategory 
notation monad cat tc op set denote functor sends object functor tc op set 
functors left kan extension functor lan natural transformation lan universal natural transformations functor natural transformation kj exists unique natural transformation lan exists left kan extension unique coherent isomorphism 
fully faithful left kan extension exists necessarily isomorphism 
left kan extension exists small category cocomplete see detail left kan extensions see applications concurrency 
de nition monad cat dense small category functors tc tc op set fully faithful functor lan op set op set op set yoneda embedding restricts th tc td coherent isomorphism 
examples inclusion category free colimit completion speci ed size shall need explicit description tc fully faithful follows general theorem object tc colimit diagram functor tc op set fully faithful functor functor lan op set op set restricts th tc td coherent isomorphism 
proposition regular cardinal dense kz monad 
state rst major theorem 
theorem monad cat tc tc op set fully faithful dense kz monad functor tc td kl restriction lan op set op set coherent isomorphism 
equivalent conditions kl left kan extension td tc proof suppose dense kz tc td functor kl 
td density condition applied de nition kz monad fact left kan extensions cocomplete categories op set colimits preserved functors right adjoints gives result 
converse th 
naturality op set fully faithfulness follows dense 
see kz rst observe tc functor kl monad laws respects structure isomorphism restriction lan tc tc lan tc fully faithfulness functor tc tc restriction functor sending op set op set functor right adjoint lan tc tc fully faithful follows left adjoint tc nal statement theorem tc td follows fully faithfulness tc op set isomorphic lan fully faithful yoneda embedding op set equals natural transformation induces natural transformation df op set lan de nition left kan extension natural transformation lan tc lan result follows immediately fully faithfulness coherent isomorphism 
corollary dense kz monad cat left kan extension id tc tc tc tc restriction set op set op set 
corollary dense kz monad cat 
functor kl preserves open maps 
proof small category may de ne open maps op set just tc openness relative yoneda embedding op set 
stated proof appear forthcoming phd thesis rst author functors form lan op set op set preserve open maps 
fully faithful map tc open image open 
putting theorem yields result 
regard corollary fundamental reasons outlined 
order account bisimulation higher types need extend notion open map categories form tc categories form te 
construction cat te isomorphic kl te 
putting considering isomorphism maps categories see give map te give natural transformation functors kl tc td weakest plausible de nition de nition map te natural transformation open component corresponding natural transformation kl def open te 
corollary gives proposition functor te kl composition sends open maps te open maps 
trivially composition kl composition respect preserves open maps 
suggests notion functional bisimulation higher types arising category theoretic principles 
obviously tested concerns arising naturally concurrency defer investigations 
tempting de nition de ne open component object open te 
de nition signi cant drawback 
choice meant open maps longer closed horizontal composition kl open te open tf implied open tf 
words restricting cells kl open choice de nition yielded sub category kl 
computational terms de nition enforced bisimilar abstractions acted input process give bisimilar outputs 
surely minimal requirement expects bisimulation higher order processes requirement obviously satis ed de nition 
note de nition open map bisimulation arising monoidal closed structure profunctors stricter way ensure horizontal composition preserves openness condition de nition 
theorem fundamental importance 
characterise dense kz monads cat 
notion dense kz monad central new mathematical notion introduce 
includes monads arise free completions class colimits possible theorem characterise dense kz monads terms 
scope see precise statement subtle 
instance example exists dense kz monad class small categories small category category tc free completion colimits diagrams shape consider empty category tc freely adding initial object suppose claim false 
empty follows category nonempty 
free completion colimits diagrams shape trans nite induction 
step construction adds new colimit 
category nonempty new colimit added arrow pre existing object ultimately object point trans nite induction introduce initial object contradiction 
structure kl dense kz monads results previous sections particular corollary section investigate structure categories form kl dense kz monads course includes size bounded colimit completions illustrated section 
routinely monad category coproducts proposition monad cat category kl coproducts coproduct tc td kl construction cat 
immediately appear computational interest generalise domain theoretic property cpo model conditional statements 
shall soon show mild extra condition isomorphic tc td important construction de ning nondeterministic sum example 
follow kl nite products product kl tc td 
rst theorem dense kz monad cat kl symmetric monoidal category tc td 
proof give symmetric monoidal structure kl extends nite product structure cat equivalent showing strength corresponding cat enrichment commutative 
means follows 
object consider functor determined composed functor choosing object map determines natural transformation isomorphism kl cat isomorphism categories obtain functor td 
dually obtain functor tc 
obtain symmetric monoidal structure kl suces show ways constructions obtain functor tc td rst applying applying applying dually give result 
see recall functor td lifting kl isomorphism restriction lan 
tc restriction isomorphism set op set op set 
result follows tedious calculation extension composites presheaf categories 
proof theorem shown proposition dense kz monad cat object td tc tc id tc td kl 
opens second category theoretically natural candidate modelling process passing ccs 
monad cat kleisli category kl embeds fully category alg major construction studies monad see 
follows theorem dense kz monad cat subject size condition leading examples satisfy category alg symmetric monoidal closed 
closed structure candidate modelling higher order structure 
clear de ne notion open map setting restrict attention categories kl categories generated applying higher order construction may possible de ne open maps category similarly previous section leave 
regular cardinal alg category small categories colimits size functors preserve strictly 
promised consider constructions form tc td rst mention kz monad th strictly preserves class colimits functor small categories follows functor kl preserves class colimits 
particularly subtle important di erence category theory notions strict preservation ordinary preservation colimit need follow functor kl strictly preserves class colimits 
avoid analysing distinction statement theorem resolutions known 
suce say follows routine category theory examples satisfy hypotheses theorem 
theorem dense kz monad cat suppose tc nite coproducts restriction op set functor kl strictly preserves nite coproducts 
category tc td isomorphic naturally coherently respect associative commutative unitary structures binary product coproduct 
proof universal property kleisli construction universal properties products coproducts order de ne functor tc td give functors tc td tc td de ne constant initial object td duality 
de ne tc td sending left right respectively 
show mutually inverse 
obviously natural see kh id rst see kh may checked component 
follows routinely strictly preserves initial object dually 
nite coproducts restriction op set routine manipulation diagrams commutativity extends 
see hk id tc td verify hk hk rst second projections tc td respectively 
de nition lie kl preserve nite coproducts strictly 
restricting attention case dual suces show sends initial object tc amounts 
rst observe yields identity monadic unit laws giving desired commutativity 
second similar calculation suces show lifting constant functor tc td constant functor initial object tc theorem lifting left kan extension tc tc check calculation necessarily constant 
promised theorem allows consider constructions form tc tc tc required model nondeterministic sum example functors form td tc kl 
functors preserve open maps functional bisimulations desired 
theorem instance limit colimit coincidence 
particular categorical folklore coproduct kl version product kl kl coproducts preserved composition tc right adjoints projections product 
result allows conclude product sense strict sense asserting limit colimit coincidence deduce principle equivalence tc td isomorphism proof theorem 
link theorem general question limits colimits certain diagrams adjoint pairs coincide worth exploring greater detail see condition obtain limits usual categorical sense 
parallel composition pre xing mentioned section parallel composition pre xing modelled directly sum 
prompted desire give axiomatic treatment operations carry analysis kl 
concentrate rst class examples free completions colimits certain size 
de nition monad cat freely adds small category strict initial object 
de nition regular cardinal monad cat takes small category free completion connected colimits size 
proposition monad cat takes small category free completion colimits size factored corollary small categories kl kl proof kl kl cat kl way representing connected colimit preserving functors arrows kl 
consider pre xing parallel composition ccs 
pre xing de ne pre 
follows 

ap post composing pre obtain functor 
connected colimit preserving functor re de nes precisely usual pre xing operator trees 
parallel composition starts functor jj 

induces arrow jj 
kl 
order get needs embed 
recall commutative note unit monad 
unit 
monad lan 
exists form embedding lan lan 
call composite de ne jj proposition preserves colimits arguments separately preserves connected colimits arguments separately 
explicit descriptions decomposition results presheaves pre xing parallel composition 
suggested recover explicit descriptions terms replaced presheaf completion 
turning bisimulation proposition connected colimit preserving functor preserves open maps 
corollary pre xing parallel composition functors synchronisation trees preserve bisimulation 
conclude section showing way situation just described composite monads gives rise third congruence properties respect bisimulation open maps 
dense kz monad cat monad cat necessarily kz 
distributive law mean natural transformation sr rs preserves multiplications ad units monads 
distributive law monad structure induced composite functor rs 
cf 
corollary kl tc td kl sc td particular obtains functor kl functor tsc td kl sc tc rsc tsc id unit sc sends open maps respect sc open maps respect ssc saw corollary 
tc open respect implies open respect sc functor kl domain tc preserves open maps respect case specialises may heavy way axiomatise substantial example note single case easier check satis es needed requirements provide direct proof 
considered dense kz monads cat deduced existence various structures category kl allow give axiomatic account functional bisimulation showing various constructors pre xing nondeterministic sum parallel operator may axiomatically seen preserving functional bisimulations 
proved additional condition kl nite products coproducts agree symmetric monoidal structure supports higher order structure 
axioms hold kz monads induced free colimit completions outlined section 
obvious closely related fact theorem depends considered categories presheaves profunctors 
fact free completion colimits small category equivalent category op set 
proof appears 
fundamental theorems category theory 
free completion colimits examples section form monad cat 
reason size small category op set object cat 
pass larger universe sets 
doing allows see results presheaf categories profunctors terms 
speci cally gives independent proofs category free completions colimits strict colimit preserving functors nite products coproducts agree symmetric monoidal symmetric monoidal structure 
fact true particular category known bicategory profunctors 
particular examples dense kz monads general symmetric monoidal closed provides models higher order processes see 
light paragraph construction seen axiomatically considering full subcategory kl particular dense kz monad section axiomatisation appropriate kz monad form nite cardinal monoidal closure profunctors cut monoidal closed structure full subcategories kl objects td subject size restriction major goals study bisimulation higher order processes depth 
main goal study weaker forms equivalence 
obvious class equivalences consider weak bisimulation 
involves construction takes tree tree broadly precisely quotienting operation 
obvious class equivalences contextual equivalence instance testing failures equivalence 
hope pursue equivalences 
seek operational account structures developing 
may provide new versions process passing calculi rm semantic foundation 
blackwell kelly power 
dimensional monad theory 
journal pure applied algebra 
barr wells 
toposes triples theories 
springer verlag 
borceux 
handbook categorical algebra vol 

cup 
cattani fiore winskel 
theory recursive domains applications concurrency 
proceedings lics pages 
cattani stark winskel 
presheaf models calculus 
proceedings ctcs lncs pages 
cattani winskel 
presheaf models concurrency 
proceedings csl lncs pages 
cattani winskel 
bisimulation higher order processes 
manuscript 
jacobs rutten 
tutorial algebras induction 
bulletin 
joyal moerdijk 
completeness theorem open maps 
annals pure applied logic 
joyal nielsen winskel 
bisimulation open maps 
information computation 
kelly 
basic concepts enriched category theory 
london math 
soc 
lecture note series cup 
kelly street 
review elements categories 
proceedings sydney category theory seminar lnm pages 
springer verlag 
kock 
monads structures adjoint units 
journal pure applied algebra kock 
closed categories generated commutative monads 
journal australian mathematical society 
mac lane 
categories working mathematician 
springerverlag 
milner 
communication concurrency 
prentice hall 
power cattani winskel 
representation result free 
submitted publication 
sangiorgi 
bisimulation higher order process calculi 
information computation 
scott 
continuous lattices 
lawvere editor toposes algebraic geometry logic lnm pages 
springerverlag 
smyth plotkin 
category theoretic solution recursive domain equations 
siam journal computing 
street 
fibrations bicategories 
cahiers de topologie eom etrie di erentielle xxi 
winskel 
presheaf semantics value passing processes 
proceedings concur lncs pages 
brics report series publications rs gian luca cattani john power glynn winskel 
categorical axiomatics bisimulation 
september 
ii pp 
appears sangiorgi de simone editors concurrency theory th international conference concur proceedings lncs pages 
rs john power gian luca cattani glynn winskel 
representation result free 
september 
rs riis 
uniformly generated submodules permutation modules 
september 
pp 
rs riis 
generating hard tautologies predicate logic symmetric group 
september 
pp 
rs ulrich kohlenbach 
things things done pra 
september 
pp 
rs roberto jos meseguer ugo montanari sassone 
comparison petri net semantics collective token philosophy 
september 
pp 
appear th asian computing science conference asian proceedings lncs 
rs stephen theis 
marked ancestor problems 
september 
rs jung kim yi olivier danvy 
assessing overhead ml exceptions selective cps transformation 
september 
pp 
appear proceedings acm sigplan workshop ml baltimore maryland september 
rs sandeep sen hardness speeding knapsack 
august 
pp 
rs olivier danvy morten 
compiling actions partial evaluation revisited 
june 
pp 
rs olivier danvy 
functional unparsing 
may 
pp 
report supersedes earlier report brics rs 
extended version article appear journal functional programming 
