prolog implement case shell object oriented development zim anyi university brussels av 
roosevelt cp brussels belgium mail ulb ac 
manuel university louvain place des louvain la neuve belgium mail ucl ac 
shows prolog programming language constructing flexible case shell environment supporting tasks object oriented development 
explain important role played prolog entire design architecture case shell sophisticated graphic user interface 
advantages facilities prolog developing environment illustrated respect system called case 
keywords prolog object oriented development case 
recognition software crisis mid huge amount done devise methods help analysts develop systems increasing complexity 
structured methods developed functional decomposition paradigm system functionality specified black box approach 
technique appropriate transformational systems mainly driven data transformations appropriate cope sophisticated hardware software technologies networks distributed computing real time systems sophisticated man machine interfaces 
object oriented paradigm developed alleviate problems 
initially context programming languages rapidly clear initial phases software development lifecycle benefit approach 
different methods objectoriented development appeared object oriented methods represent system complementary views models capturing particular type information viewpoint system 
example object models describe structure objects system 
dynamic models state driven point view describe aspects system concerned time control sequencing operations 
functional models describe aspects system concerned transformations 
case models describe interaction system environment 
due complexity software development significant research activity development computer aided software engineering case tools supporting multiple tasks software development lifecycle 
case tools aim increase part evaluation research object oriented strategies project principally university louvain university brussels 
productivity quality software care tedious tasks consistency checking diagram storage project management allowing code generation 
new objectives oo development methods continually arise 
particular technological aspects client server architectures distributed computing raise new requirements altering methodological basis software development leads area computer aided method engineering came creation adaptation design methods fit development situation 
area method engineering covers specification syntax semantics modeling notations specification tasks dependencies modeling organization tasks various actors 
context developed prolog flexible case shell supporting task method engineering task oo development 
known oo development methods implemented tool 
tool characterized high degree flexibility permits user configure methods supported ways methods supported 
supports approach incremental method engineering methods gradually expanded refined formalized users experiences learning changing demands development situation 
important feature achieve flexibility representational independence separation conceptual representational constructs flexible combination modeling environment 
prolog completely building case environment essential approach 
declarative nature prolog gives advantages clarity modularity legibility conventional programming languages suitable case prototype design 
second important prolog language development gui core system 
concretely show contrary currently believed prolog development entire application better consistent alternative approach implementing gui imperative language implementing inference engine prolog 
rest structured follows 
section presents general architecture case environment 
subsequent sections explain illustrate main components system 
sections deals respectively model method management 
section presents knowledge base kb management section devoted graphics management section gui management 
section briefly describe examples implemented modules section gives points 
system architecture shows general layout case 
sophisticated gui graphic user interface including graphical schema editors dialog boxes mdi multiple document interface windows button palettes 
shown shell seen compound system consisting integrated layers 
general layout case 
layer engine core system 
implements primitives common models methods 
composed subsystems explained 
model defines primitives defining concrete models entityrelationship statechart models 
similarly method defines primitives defining concrete methods omt fusion 
graphics provide primitives define graphical representation models 
gui provide basic primitives manipulation gui components dialogue boxes list boxes 
knowledge base manager charge repository 
application manager takes charge management projects schemas reports 
second layer models layer implements specific concrete models er statecharts dfd object interaction graphs 
concrete model defines conceptual language describe particular aspect system 
example er model defines abstractions generalization aggregated relationship subset relationship derived relationship addition basic er constructs 
third layer methods layer implements concrete methods fusion omt booch jacobson relational db design 
methods uses models defined models layer 
instance omt integrates er statecharts dfd models respectively static dynamic functional model 
shown dashed lines concrete method model defined providing concrete components corresponding components 
examples concrete model concrete method respectively sections 
abs mode graphics method primitives gu application manager know ledge base manage eng ine booch jacobson re db design om fusion state charts cases method layer ca se mode layer er graphics definition model definition customized gu te mode components def customized gu te hod ts system architecture case 
main components case explained 
refer detailed description system 
models management concrete model associated set concepts defined predicate 
example entity relationship model defines concepts concept entity entity name er 
concept relationship relationship name er 
concept participates relationship name participant name minimal cardinality maximal cardinality role er 
different predicates define attributes predicates 
example predicates follows domain participates min cardinality integer 
participates minimal cardinality 
participates maximal cardinality 
participates role 
concept associated set integrity constraints 
integrity checking models realized different levels constraints associated arguments predicate constraints associated predicate constraints associated consistency model 
shown section additional fourth level defines constraints associated consistency different models method 
give examples constraints associated levels 
entity entity name name entity name name relationship name 
participates rn pn maximal cardinality greater equal minimal cardinality 
relationship findall part participates rel part role length relationship rel participating objects 
constraint attached attribute checks name entity name relationship 
second constraint attached concept predicate participates states maximal cardinality greater equal minimal cardinality 
third constraint model consistency verifies relationship participating objects 
notice constraint violated appropriate messages displayed dialogue boxes predicate 
addition model define set cascade rules enforced knowledge base modified 
rules defined 
consider rules entity entity newname attribute attr minc maxc attribute newname attr minc maxc 
entity name attribute name attr minc maxc 
rule fired entity name changed replaces cascade new entity name corresponding attribute predicates 
second rule fired entity name deleted deletes cascade corresponding attribute predicates 
er model explained example concrete model defined primitives model component engine 
said primitives applicable different models 
examples primitives checking avoiding referential integrity predicates 
examples primitive domain defining attributes associated concepts 
cascade rules attached model component 
example tests fact entered twice repository 
method management concrete method associates phase development lifecycle set models 
example fusion method associates analysis phase object model system object model operation model 
concrete methods determine fourth level integrity checking constraints checking consistency models 
example constraint statechart attached class statechart attached class object model 
checks statechart defined dynamic model attached class defined object model 
concrete method customize set models method users specificities 
instance fusion method derived relationships defined er model relational database design method integrates essential mechanism detect relational redundancies 
concrete method determine concepts supported models 
method determine operations performed phase model 
example relational database design method operation allows automatically generate er conceptual schema relational database schema inclusion normal form 
way rumbaugh omt method operation allows generate statechart specification code realizes corresponding functionality 
operations briefly described section 
concrete methods define realize report containing knowledge repository particular phase analysis model object model 
reports constitute textual representation graphical models 
method component defines primitives general methods 
examples primitives firing consistency check models 
primitives change current phase model 
knowledge base management component charge management knowledge base 
matter fact different knowledge bases 
concept repository contains facts entity employee relationship 
graphics repository contains graphical representation repository concepts contains predicate pen rect font fore text employee keeping list graphical commands draw rectangle text employee graphical window 
graphical representation entity employee 
necessary predicate correspondance concept graphical representation 
predicate user clicks right button object determine corresponding repository concept modified 
modify contents concept repository predicates addelement 
concept repository modified ensured remains consistent 
explained levels integrity checking defined 
knowledge base manager component contains primitives firing integrity checking predicates 
contains primitives firing cascade rules predicates 
modification concept repository creating new entity connecting entity relationship implies graphical primitive executed corresponding window 
graphical operations imply modification repository moving relationship schema 
predicate predicate modify contents graphics repository 
side effect predicates draw delete graphical objects windows 
graphics management graphics application needs maintain logical representation image window necessary 
operations moving scrolling resizing windows cause portions graphics regions uncovered newly exposed areas redrawn 
requires applications store copy graphics operation repeated demand 
information kept graphics repository explained previous section 
context prolog offers important advantages conventional programming languages 
prolog knowledge base coupled unification backtracking mechanisms allows realize graphical manipulation conceptual level 
realizing equivalent manipulations imperative languages necessary dynamic memory allocation lists traversals pointers manipulation 
graphics component define primitives manipulating graphics objects independently shape 
concrete graphics components defined model defining objects moved selected 
graphics primitives explained 
predicate extent returns physical extent graphics sequence predicate shifts graphics elements specified offsets 
predicates manipulating select corners 
predicate determines set graphics object enclosed rectangle screen 
predicates show store status information include position cursor moved graphics window scroll image move resize set selected objects magnify reduce scale zoom window 
primitive select objects enclosed area drawn screen selected objects moved deleted 
illustrates concrete graphics components 
user selects area screen mouse cursor 
objects enclosed selected area selected 
primitive selecting area defined component determine graphical objects selected 
defined concrete com ponents 
example entity relationship selected corners lie inside select rectangle 
contrary lines connecting selected entities relationships selected lines dragging operation completed 
steps dragging operation 
dragging operation applied shown 
dragging operation mouse move outlines objects moved 
dragging operation defined component determine objects outlined 
defined concrete components 
example name entities relationships cardinalities omitted outlines 
dragging operation completed objects shifted shown 
shifting primitive uses definition different objects shifted defined concrete components gui management gui component comprise primitives manipulating gui elements menus dialogue boxes palettes 
includes adding removing selecting retrieving elements listboxes editing retrieving edit controls selecting radio buttons creating manipulating palettes 
addition gui component defines generic dialogue boxes ary predicates 
example dialogue box associated predicate participates 
generic dialogue boxes provide basic functionalities modifying knowledge base 
extremely useful stages method definition 
method designer define customized dialogue boxes specific concepts enhancing basic functionality 
example er model defines customized dialogue boxes generalization virtual relationships 
dialogue boxes er editor 
concrete gui component associated model 
example statechart palette defined follows palette 


line defines having theta buttons theta pixels 
buttons defined predicate 
defines bitmap paint button button state predicate execute button pressed 
shown actions graphical manipulations executed mouse button clicked palette button defined gui component 
examples implemented modules section briefly presents examples models er statecharts models method relational database design implemented case 
refer complete description implementations :10.1.1.17.4533
implementation er model takes consideration basic er concepts entity relationship attribute identifier cardinality important abstraction mechanisms subset relationship generalisation aggregated relationship derived relationship 
way subsumes object model known development method 
er schemas drawn screen gui validated integrity constraints defining syntax semantics er abstractions 
prolog predicates encoding graphical schemas automatically generated processed chosen method translating conceptual model comprising er schemas normalized relational database described relational database design method 
statecharts extension finite state machines diagrams formal syntax semantic describing system dynamics 
statecharts originally proposed hardware devices dynamic models oo methods omt booch statecharts formalism modeling temporal behaviour system 
implementation statecharts model takes account statecharts concepts events states super substates transitions simple merging concurrent splitting conditions actions enforcement 
module functionalities 
dynamic behaviour system specified collection interacting statecharts attached class 
er model statecharts drawn screen gui validated integrity constraints 
addition module allows simulate dynamic behaviour application test behaves expected 
system generates code implementing behaviour application 
explain relational database design method 
nowadays relational database design typically goes conceptual er schema design second translation relational schema 
method consists generating relational database schemas normalized inclusion normal form nf 
classical normal forms characterize individual relation schemas lesser known relational design criteria remove redundancies relational database schema considered 
practice method works case follows 
application specified set er schemas customizing er module briefly exposed 
relational translation process takes input prolog predicates encoding er specifications generates relational database nf 
method uses integrated steps algorithm er relational mapping individual relations normalization third normal form database normalization inclusion normal form 
object oriented methods developed way cope inadequacy structured methods developing software 
due increasing complexity software development researchers focused providing case came environments helping designers build application high flexible way 
context goal show prolog completely constructing case shell supporting object oriented development including sophisticated gui 
explained declarative nature prolog programming turned extremely powerful implementation 
showed case conceived high modular architecture 
different abstraction mechanisms models customized combined user respectively model method 
system provides incremental software engineering environment describe application entire development lifecycle 
context important feature case representational conceptual constructs graphical representation 
second showed prolog development language building entire gui viable 
case declarative implementation approach prolog developing core system gui appears coherent prolog inference engine conventional language gui 
issues need addressed 
case currently developed pc platform windows lpa prolog compiler 
planning port system windows sun unix workstations 
prolog code especially code concerning engine primitives fact far possible independent hardware software configuration 
way os function calls modified 
case provides powerful testing environment develop implement new modeling abstractions conceptual languages describing application development lifecycle 
instance formalized mechanism description object models called materialization 
formally studying properties aggregation abstraction part relationship 
plan implement primitives order combine abstraction mechanisms implemented er model 
concerns aggregation dynamic abstraction interaction statecharts formalism 
booch 
object oriented analysis design applications 
benjamin cummings second edition 
coleman arnold hayes 
objectoriented development fusion method 
prentice hall 
harel 
statecharts visual formalism complex systems 
science computer programming 
jacobson jonsson 
object oriented software engineering case driven approach 
addisonwesley 
zim anyi 
relational database design er approach prolog 
appear proc 
th conf 
information systems management data 
ling goh 
logical database design inclusion dependencies 
proc 
th ieee int 
conf 
data engineering tempe arizona feb 
lyytinen 
editors 
generation case tools 
ios press 
zim anyi massart 
materialization powerful ubiquitous abstraction pattern 
jarke zaniolo editors proc 
th int 
conf 
large databases pages 
acm press 
rumbaugh blaha premerlani eddy lorensen 
object oriented modeling design 
prentice hall 
zim anyi 
statecharts object oriented development case perspective 
proc 
rd int 
conf 
practical application prolog pages apr 
zim anyi 
prolog architecture building object oriented case shell 
technical report rr universit libre de bruxelles belgium sept 


