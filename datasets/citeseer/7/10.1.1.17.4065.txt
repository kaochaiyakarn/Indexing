viceroy scalable dynamic emulation butterfly malkhi school computer science engineering hebrew university jerusalem israel cs huji ac il moni naor dept computer science applied mathematics weizmann institute science rehovot israel naor wisdom weizmann ac il david university california berkeley ca usa cs berkeley edu propose family constant degree routing networks logarithmic diameter additional property addition removal node network requires global coordination constant number linkage changes expectation logarithmic number high probability 
randomized construction improves existing solutions balanced search trees ensuring congestion network logarithmic factor optimum high probability 
construction derives advances study peer peer lookup networks rapid changes require cient distributed maintenance lookup ciency impacted lengths paths requested data presence elimination bottlenecks network 

viceroy network construction tackles fundamental problem practical distributed systems discovery location data resources dynamic network 
functions distributed hash table dht managing distribution data changing set servers allowing clients contact participating server network find stored resource name 
primarily intended environments scale dynamism great require performance metrics outside scope classical routing network research 
motivation research stems emergence peer peer applications internet apparent order share resources supported part israeli ministry science supported part ist rand apx 
permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
podc monterey california usa copyright acm xxxxx xx xx xx 
access services large dynamic networks users means locate cient manner 
level applications implement employ distributed hash table maps names values functions supporting lookup service 
domain name system dns known example lookup service static su ers congestion problems root dns tree 
contrast aim build completely distributed scalable lookup service suitable deployment peer peer networks set participating servers particularly dynamic central control information easily maintained 
main challenges large scale dhts overcome distributing data way remains nearly balanced set active servers small changes necessary servers join leave 
second maintain network connection information servers lookup data routed servers intended target servers may join leave requiring hash information propagated entire network 
viceroy algorithm manages problem employing consistent hashing manner nearly identical chord 
viceroy improves existing solutions second problem maintaining connection graph constant degree logarithmic diameter approximation butterfly network 
objectives primarily interested viceroy behavior networks extreme scale dynamism tra able cope large volumes client lookups wish ensure bottlenecks lookups stagger 
joining leaving single server impair availability service want changes small local impact network 
capture design goals performance metrics congestion server bottleneck performance service 
load incurred lookups routing system evenly distributed confine second aspect viceroy refer reader citations thorough analysis consistent hashing desirable qualities subtleties involved distributed implementation 
participating lookup servers 
define formally section 
cost join leave service accommodate changes easily 
particular servers join leave small number servers change state 
lookup path length forwarding path lookup involve machines possible 
aim minimize maximum path length network 
sections referred dilation network 
clearly tradeo associated objectives 
creating network greater connectivity may reduce lookup path length increase number linkage updates joins leaves opposite extremes simple ring complete graph 
similarly schemes optimize criteria 
balanced binary tree example desirable locality properties logarithmic path length congestion root 
case constant degrees developing viceroy primary motivation achieve algorithm constant linkage cost logarithmic path length best achievable congestion constraints 
emphasize constant linkage cost reasons 
believe practical cost updating links far exceeds normal lookup costs involves coordination multiple machines change require new session information propagate machines require multiple machines acquire locks order rigidly maintain consistency network 
second reducing number edges graph reduces ambient tra associated pings control information maintaining constant degree network concerns cost open connections servers 
third cases desirable server notify outgoing incoming connections leaving degree network directly relates load incurred joins leaves 
justifiable concern low degree networks unsuitable failure prone environments feel issues fault tolerance handled separately routing design choices clustering techniques 
section describes scheme presents justification making design choice 
framework order distribute key value pairs set participating servers treat servers keys points specially chosen metric keys close metric reside servers close metric 
particular key value pair resides server closest key 
choice hop route calculated comparison point target key current server point 
framework captures proposals including consistent hashing chord rings specifically variants constant linkage cost shown communication necessary construct dht atomic data semantics 
see thorough examination approach 
dimensional tori plaxton oceanstore hypercubes 
see section mapping identical chord map keys servers unit ring 
set active servers server manages key value pairs names counter clockwise neighbor name name 
say key mapped successor ring 
routing viceroy networks uses links successors predecessors ring short distances 
borrowing ideas kleinberg augment ring construction constant number long range contacts chosen appropriately localized routing strategy produces short paths 
inspiration long range contacts chosen randomly particular bias closer points 
attempting improve worst case performance scheme arrived approximation classical butterfly network described 
kleinberg resulting topology logarithmic dilation polylogarithmic 
viceroy topology viceroy networks composition approximate butterfly network connected ring predecessor successor links mentioned previously 
addition predecessor successor links server includes outgoing links chosen long range contacts 
node selects level random way servers operational log levels selected nearly equal probability 
level node edges added connecting nodes level right edge added long range contact level distance roughly away left edge close distance ring level 
addition edge close node level included 
level ring links added previous nodes level 
depicts ideal viceroy network 
simplicity link ring level ring links depicted 
routing proceeds stages consists climb connections level node 
second stage routing proceeds levels tree links moving level level follows edge close link far away link depending distance greater 
continues node reached links presumably vicinity target 
vicinity search performed ring level ring links target reached may leaf tree 
show process requires log steps high probability random network construction formalizing proving result measuring performance metrics focus remainder 
contributions simple ef kleinberg descriptive explaining social network allowing cient routing may develop construction readily follows 
butterfly network described 
term high probability mean probability 
level level level level node real identifier viceroy butterfly link ideal viceroy network 
ring links omitted simplicity 
ficient network construction maintains constant degree networks dynamic environment 
routing achievable networks log hops nearly optimal congestion 
proposal decentralized dynamic network properties achieved simultaneously 
events server joining leaving system induce log hops require servers change states 
related proliferation internet scale services advent peer peer applications focused considerable attention resource lookup problem 
popular services dns ldap file sharing services napster gnutella rely partitioning data dynamic network 
schemes proposed address scalability dynamic requirements world wide lookup service 
chord lookup service presents solution greatly influenced approach 
specifically borrow design maps name servers resources domain doubly connected ring underlying structure 
solution di ers important ways 
chord node maintains logarithmic number long range links yielding logarithmic number join leave linkage updates expectation high probability 
contrast viceroy constant degree yields constant expected linkage cost high probability random sequence log updates total log linkage cost 
second chord way network maintained appropriately lifetime system fully described deferred background maintenance process 
contrast placed emphasis fully describing way network evolves server joins leaves analyzing worst case behavior 
algorithm plaxton originally devised route web queries near caches employed tapestry naming service 
similar chord basic scheme distributed hash table efficient request routing lookup servers cient dynamic routing structure 
routing algorithm randomized approximation hypercube 
compared scheme method logarithmic expected join leave complexity 
ratnasamy places similar stress constant degree network routing lookup requests 
content addressable network dynamically maintains approximation dimensional torus chosen constant expected routing complexity dn compared logarithmic construction 
table provides snapshot performance methods viceroy scheme chosen performance metrics 
data structures produced related results 
example lend distributed construction similarly employ randomization cient routing 
compared method nodes skiplist su er load linear lookup scheme dilation congestion linkage chord log log log tapestry log log log dn dn small worlds log log viceroy log log table comparison expected performance measures lookup schemes 
total tra load construction balanced 
certain types constant linkage cost data structures competitive scheme way congestion 
proposals distributed data structures typically address problem join leave complexity state partitioning require centralized control address congestion 
works looked problem dynamic network construction di erent emphases 
address problem dynamically constructing low degree logarithmic diameter network probabilistic model arrival departure construction provide routing scheme intended application disseminate queries server route particular server 
method fully distributed employs central server newly connected nodes 
view viceroy improvement scheme logarithmic diameter achieved distributed fashion desirable congestion properties means viceroy dissemination 
lin concerned building graphs remain connected face failure scenarios 
fiat concerned constructing logarithmic diameter routing network remains connected despite attacks large fraction nodes 
constructions static logarithmic degree node 

system model preliminaries terminology notation system consists varying set participating servers simply servers 
refer active set servers configuration 
servers real identifiers chosen uniformly random range join 
slight abuse notation refer server identifiers simply servers 
arithmetic range done modulo refer ring 
real values stretch clockwise region non inclusive stretch 
measures interest related stretches length number servers distance clockwise distance density number servers stretch 
denote succ clockwise neighbor ring current configuration pred counterclockwise neighbor 
matter convenience term clockwise closest shorthand closest clockwise direction server additional positive integer identifier called level denoted level 
meaning levels apparent discuss network construction intuitively indicates server placement butterfly network construct 
denote clockwise closest level server server level closest clockwise direction similarly denotes server level closest counter clockwise direction define shorthand level closest server level clockwise direction likewise level 
level density denotes number level servers stretch 
system model assumptions server maintains certain information servers facilitate routing distribution data network 
say server link means established connection may forward requests 
practice means physical address information known internal state kept incoming outgoing connections 
purposes assume server establish connection knows server identifier merely say connection elaborate done protocol level 
server may voluntarily leave system new servers may spontaneously join 
assume joins leaves correlated server identifiers server identifiers active set servers appear randomly distributed ring 
assume multiple join leave operations overlap servers fail refer reader techniques achieve concurrency handle failures system 
principle system capable handling parallel joins leaves high probability servers change state overlap avoid dealing issues locking assumption 
lastly important feature client may invoke lookup operation active server 
mechanism client joining server initially advised active server discussed 

viceroy network participating server associated values determine connectivity rest system identity id level positive integer 
identity server fixed participation system level changed course network evolution 
link routing structure viceroy network determined entirely identity level information currently active servers ected historical configurations sources randomness 
identity fixed simplify notation refer server identity drop id 
network consists sets links general ring node connected successor predecessor level rings nodes level connected ring butterfly nonleaf node level points nodes level node level points level node 
left link chosen node level clockwise closest right link chosen node level clockwise closest 
link chosen level node clockwise closest 
depicts relationship ring id butterfly links 
remains discuss levels chosen joins leaves ect construction routing performed established connections 

identity level selection ideal conditions algorithm occur equal fraction servers select level log server identifiers particular level evenly distributed ring 
achieving conditions exactly require knowledge log require server identifiers possibly levels change server joins leaves 
precise knowledge altering server identifiers goal select levels approximate ideal conditions way requires level changes possible join leave occurs 
section examine properties random identity selection describe way selecting levels achieves goal 
model server picks identifier independently uniformly id change active system 
practice concerned choosing id infinite precision su ces generate fixed number random bits plausibly avoid collisions 
describe distributed level selection algorithm show provides dispersal levels servers 
basic idea follows server estimates estimate chooses level 
log uniformly random 
course best way estimate simply count servers exist time estimation 
precisely accounting size network require information propagated server time size changes costly 
goal provide estimate keeping estimation procedure reasonably localized 
estimation procedure utilizes identifier information servers vicinity estimating server select level 
succ 

select level 
log uniformly random return 
level selection algorithm simple algorithm 
noticing expected distance estimating server successor roughly get case collisions detected merely performing lookup chosen identity 
estimate elegance scheme server level successor changes 
sane networks identity level selection designed achieve dispersal servers level ring 
precise properties need sanity goodness follows recall servers denotes number servers stretch denotes number servers level stretch sanity servers server running select level algorithm estimated log log log log say level log log sane 
goodness servers satisfied logarithmic length stretch contains logarithmic number servers servers log log 
finding server particular level takes logarithmic number ring steps expectation square log worst servers log log expectation log log 
finding server sane level log log takes logarithmic number ring steps servers min log log log 
stretch logarithmic length contains server expectation non negligible probability servers log log expectation log probability holds log 
level selections evenly interleaved logarithmic factor servers log log expectation log 
claim state sanity goodness construction 
proof technique standard omitted due space constraints 
claim 
network identity level selection scheme sane 

section describe viceroy lookup network constructed maintained dynamically completely decentralized manner 
describe operations join leave call lookup subroutine 
discuss variants lookup operation section 
server maintains variables initially undefined level identity level chosen predecessor successor ring pointers 
improve saying new level chosen log changes current random selection 
log changes new level chosen put place level didn exist increases current level longer exists decreases level ring pointers lef right butterfly pointers 
join operation main operation describe server joins network 
server join network performs steps 
server level changes repeat steps 
select identity identity selection mechanism described section 
find lookup subroutine succ 
update predecessor successor pred successor succ predecessor insert place ring 

transfer successor key value pairs key predecessor 
select level level level selection mechanism section 
find single stepping ring 
update insert place level ring 

find level single stepping clockwise direction assign left 
find lookup clockwise closest find single stepping clockwise direction level clockwise closest 
assign right 
find level assign 
join algorithm 
leave operation server leaves remove outbound connections notify servers inbound connections find replacement find lookup subroutine transfer resources successor 
level selection algorithm levels log may su cient gap servers level single stepping take unreasonable amount time 
order account account possibility certain levels existing choosing links level ring links leave unspecified requires log steps initial lookup find 
note goodness properties level selection levels log ected detail 

simple lookup section introduce slightly simplified routing protocol performs competitively average case illustrates basic principles refine section yield stronger high probability bounds 
simplified performed ciently noticing replacements point successor general level rings level changes 
routing level ring links successor predecessor butterfly links 
generally lookup subroutine maintaining structure network updates join leave looking keys 
purpose subroutine lookup find starting server server clockwise closest value routing occurs distinct phases 
phase level root server links 
second phase lookup routed root connections 
phase node level distance target 
target distance greater traverse right link left link 
phase terminates reaches node links node overshoots target 
third phase ring traversed clockwise direction counter clockwise direction desired target 
describes procedure 
couple things worth pointing second stages sophisticated lookup scheme third phase di erent 
distributed version lookup algorithm require state denoting current phase follow lookup request 
require choice return value returned originator lookup directly backward chaining lookup path 
lookup initialization set cur proceed root cur level goto traverse tree phase 
set cur cur exists cur cur successor repeat phase 
traverse tree cur cur level cur cur left go left exists 
cur cur level cur cur right go right exists 
required link exist exists overshoots target goto traverse ring phase 
repeat phase 
traverse ring cur clockwise closest server compute response lookup 
set cur cur successor cur cur predecessor whichever closer repeat phase 
simple lookup algorithm 
simple viceroy analysis section preliminary analysis viceroy lookup network performance metrics introduced section 
recall definition sanity claim guarantees levels log immediately implies traversing tree takes log steps lemma 
servers phases take log steps 
identifier level choice 
proof 
main point notice starting node level higher log log may exist links follow 
goodness property claim traversing successors st phase finds node level log log log steps 
step phase decreases level phase takes log 
sanity log network levels step second phase increases level takes log 
third phase involves single stepping ring links 
simple version takes log steps expectation worst log steps 
optimize step level ring links bring worst case cost log 
lemma 
servers phase takes expected log steps log steps 
identifier level choice 
proof 
traverse tree phase time link followed maximum possible distance target halved 
level greatest possible distance target goodness property claim links exist nodes level log log 
node level log log reached phase maximum distance target log goodness property claim log steps away target overshoot target expected log servers log servers goodness property claim 
phase takes expected log worst log total single steps 
lemmata hold regardless originating server target server get result corollary 
servers viceroy network expected source destination dilation simplified lookup scheme log log 
identifier level choice 
define load lookup server probability involved search random value random starting point congestion network maximum load server 
measure gives indication substantial bias number routes particular nodes normal random tra assignment keys considered su ciently random hotspots periods heavy tra nearly route traversed 
bounded degree network ork servers take part lookup random value best load expect 
hand theorem 
servers viceroy network server expected load log maximum load servers log 
address issue hotspots traditional mechanisms multiple replica placement adapted distributed hash table framework 
proof 
evaluate load consider possibilities server participate lookup server corresponding phases routing 
straight forward see phase induces expected log load move bound worst case load 
proof strategy concentrate single type walk leading type walk mean particular upward downward sequence link selections left left left right left 
order bound worst case prove lemma nodes leading particular type walk distance log property bound phases separately follows node path root phase looking phase node path root upward path 
strict distance upward links zero sources leading upward paths distance log paths log go phase 
node route level lowest level proof divided parts 
count number root nodes path goes calculate probability path 
lemma particular type walk level source roots log distance turn probability particular walk root chosen 
assumption targets distributed uniformly ring 
server level receives walks go particular root 
fact load may somewhat lower due overshooting point butterfly path abandoned ring traversed 
putting node level types walks roots 
log load selected probability induces load log final routing stage stage involves single stepping ring expected log steps worst log lemma 
expected log source nodes log nodes paths 
total randomly selected sources targets expected log routes go log routes load inflicted 
lemma 
node nodes particular type upward downward walk left left right leads distance log proof 
look reverse walk starting define strict place walk ends rm rm th move right 
turn bound distance walk ends strict place 
goodness property claim probability case walk starts left link distance log likewise probability right link distance log 
desired link probability link desired level additional log distance 
find link continue series experiments looking link dictated move 
geometric experiment continues log levels 
probability log link walk log log log distance strict distance determined walk 
get origins path satisfy log connectivity properties viceroy follows theorem 
servers viceroy network degree node simple version expected indegree largest degree log 
identifier level choice 
proof 
fix node nodes may point level level level stretch stretch level 
result immediately follows goodness property claim 

improved lookup simple routing achieves expected behavior yield desired log dilation high probability 
section show extend lookup subroutine achieve goal 
main problem resides third phase lookup algorithm traverse ring log servers current server target 
alternative approach describe maintains decentralized spirit viceroy network allows leave basic construction unaltered 
idea combination global level rings yield better local routing mechanism global ring 
definition 
hopping path obtained starting cur setting cur cur cur stretch cur cur cur cur stretch cur setting cur cur successor cur cur predecessor minimize distance process repeated clockwise closest node 
hopping length denoted hops number servers hopping path 
show hopping allows route poly logarithmic number nodes logarithmic number steps routing scheme third phase lookup algorithm achieve stronger bound aim 
modify third phase lookup algorithm 
lookup third phase traverse ring cur clockwise closest server compute response lookup 
cur stretch cur cur cur cur stretch cur cur cur set cur cur successor cur cur predecessor whichever closer repeat phase 
modified third phase lookup algorithm 
improved lookup analysis lemma 
consider stretch log servers sane network 
high probability hopping length satisfies hops log 
proof 
consider hopping path stretch 
appear sequence hops level level nodes stretch sequence hops level 
remainder consider hopping path gets log single steps target show length log high probability 
final log single steps take log hops 
ll call set hops hopping phase second set stepping phase 
task bound number times level changes hopping phase 
notice level occurs stepping phase part hopping phase 
assume levels servers stepping phase chosen sequentially log distinct levels selected denote number trials necessary occur 
point fewer log levels selected probability selecting new level point 
expected value clearly log 
cherno bound pr log log high probability log levels stepping phase hopping phase 
consider event ith server hopping path 
ll principle deferred decisions assume levels selected hopping path proceeds removing candidate level time level change occurs 
nodes path level change occurs log log occurs selects level occur 
selection uniform levels haven hopping phase far 
bound number di erent levels hopping probability occurs log bound number successful events type cherno bounds 
stretch log servers pr log log high probability log level changes log continuation steps type log steps stepping phase 
analysis dilation full viceroy network di ers simple phase 
obtain immediate result 
theorem 
servers viceroy network worst case dilation network log 
identifier level choice 
note hopping harm load incurred third phase lookup reduces chance server hopping path 
load phases leaves expected load 
bounding indegrees bucket solution far concentrated fixing outdegree nodes creating sparse network 
obviously yields small average indegree 
largest indegree network large log single server leaving cause log linkage changes 
combat add background process system call buckets 
unfortunately details bucket mechanism involved rest viceroy sketch operation 
approach improve identifier level selection procedures stretches length log constant number servers fixed sane level 
achieve maintaining distributed coordination mechanism contiguous non overlapping sets servers ring buckets consisting log servers 
inside bucket maintain simple ring overlaps general ring points bucket connected 
buckets maintained properties hold size size bucket log size bucket drops log merges neighbor bucket size exceeds log bucket splits 
merging splitting involve reassignment levels members bucket 
bucket precise estimate log maintained 
diversity levels inside bucket assigned random assured level 
log member members 
assures indegree server bounded 
maintain property necessary reassign new level remaining server bucket server leaves system bucket 
overhead note node leaves cause nodes change level selection 
join leave cause bucket log steps involves log changes amortized complexity 
buckets natural units maintaining replicated data routing information fault tolerance 
acknowledgments udi wieder careful reading john mitchell useful discussions 

alon dietzfelbinger petrank tardos 
linear hashing 
journal acm vol 
pp 

kranakis 
cient routing networks long range contacts 
th international symposium distributed computing disc lecture notes computer science vol 
springer pp 

fiat 
censorship resistant peer peer content addressable networks 
proceedings th acm siam symp 
discrete algorithms 
gribble brewer hellerstein culler 
scalable distributed data structures internet service construction 
proc 
fourth symposium operating system design implementation osdi october 
karger lehman leighton levine lewin panigrahy 
consistent hashing random trees distributed caching protocols relieving hot spots world wide web 
proceedings th annual acm symposium theory computing stoc pp 
may 
kleinberg 
small world phenomenon algorithmic perspective 
proceedings nd acm symposium theory computing may pp 

shorter version available navigation small world nature august pp 

kubiatowicz bindel chen czerwinski eaton geels gummadi rhea weatherspoon weimer wells zhao 
oceanstore architecture global scale persistent storage proceedings ninth international conference architectural support programming languages operating systems asplos november 
lynch malkhi 
atomic data access distributed hash tables proceedings international peer peer symposium march 
lai wood 
adaptive heuristics binary search trees constant linkage cost 
proceedings nd acm siam symposium discrete algorithms pp 
san francisco ca 

lin marzullo masini gossip versus deterministically constrained flooding small networks proceedings th international conference distributed computing pp 

lipton naughton 
clocked adversaries hashing 
algorithmica vol 
pp 

litwin neimat schneider 
lh scalable distributed data structure 
acm transactions database systems vol 
pp 

motwani raghavan 
randomized algorithms 
cambridge university press 
ottmann wood 
updating binary trees constant linkage cost 
international journal foundations computer science pp 

raghavan upfal 
building low diameter networks 
proceedings nd annual ieee symposium foundations computer science focs 
plaxton richa 
accessing nearby copies replicated objects distributed environment 
proceedings ninth annual acm symposium parallel algorithms architectures spaa pp 
june 
pugh 
skip lists probabilistic alternative balanced trees 
communications acm vol pp 

ratnasamy francis handley karp shenker 
scalable content addressable network 
proceedings acm sigcomm technical conference 
august 
siegel 
interconnection networks simd machines 
computer 
stoica morris karger kaashoek balakrishnan 
chord scalable peer peer lookup service internet applications 
proceedings sigcomm august 
zhao kubiatowicz joseph 
tapestry infrastructure fault tolerant wide area location routing 
berkeley technical report ucb csd april 
