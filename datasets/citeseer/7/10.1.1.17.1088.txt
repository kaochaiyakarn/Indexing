ieee transactions software engineering vol 
xx 
month measurement analysis software changes mockus stephen eick todd graves alan karr software better worse changes 
change legacy software expensive risky potential generating revenues desired new functionality cost savings maintenance 
important understand quantify change properties order business deci sions 
particularly sources historical information changes especially legacy software generated change management systems large software organizations 
describes measure change properties information identify cost quality drivers software production 
methodology codified system called 
developed lucent gies software projects widespread version control systems 
defines constructs presents essential measures software change size complexity developer expertise 
provides tools purpose effort required change generates predictions quality change 
methodology uses measurements changes benefit software development process generate insights software evolution 
mockus bell laboratories 
eick bell laboratories 
graves national institute statistical sciences bell laboratories 
karr national institute statistical sciences 
ieee transactions software engineering vol 
xx 
month legacy software development organizations constantly pressure new hardware changing business environment modify software 
changes software hard accomplish software age size limited number expert developers available 
despite landmark studies software evolution started decades ago little research measurement quantitative analysis software changes 
stark contrast extensive literature exists source code complexity complexity object oriented design functional complexity 
analyze large scale software production essential extensive reliable sources information 
underutilized rich source information data generated automatically version control change management systems 
illustrate change management data measure properties software changes measures making inference cost quality drivers software production 
automate change measurement analysis process built collection tools refer 
great variety studies depended measures change properties embodied 
developed tools studying problem code decay context ess tm large legacy switching software system 
change properties measured help demonstrate existence code decay 
interviews key personnel data instrumental studying interdependencies software development organizational structure legacy organizations 
change properties quantify increases fault incidence due past changes increased complexity parallel changes 
includes methodology reliably inferring purpose changes iterative algorithm described identifying factors affect effort required individual changes 
presence quite straightforward perform analyses measurements changes expect advances understanding software production follow 
main sources information system version control configuration management databases 
way data stored collected tends uniform time different parts software 
addition large software projects similar databases 
important note version control systems allow tagging different versions code help large teams developers code base 
change data collected side effect version control systems keep track versions 
methods collecting information surveys experiments 
resulting information mockus eick graves karr measurement analysis software changes valuable detailed limited scope time data gathering prohibitively expensive 
act performing experiment alter developers behavior bias results 
susceptible difficulties data gathered automatically part normal processes 
change measures provide new information infrastructure managers research large software systems 
new insights generated measures software change underline importance studying changes source code 
system knowledge large scale commercially successful software currently transferred software products 
ess tm sixteen year old real time software product telephone switches initial focus investigation 
currently product comprises lines source code major subsystems modules files 
source code changed times 
sheer size version management database precludes unsupported analysis 
provide comprehensive information entire software product entire lifetime system change history data analysis able handle size addition confronting difficulties 
important pieces information available indirectly change history 
version control system designed maintain versions source code data key variables quality purpose difficulty change 
second geographically distributed development leads distributed data sources need distribute results 
development product occurs locations countries 
address challenges developed implemented techniques augmenting change data estimating purpose change estimating change effort drivers constructing exploring measures assess change size complexity developer expertise 
ii describe specifics software product consideration change management process structure change data 
iii describes measurements obtained data analyses performed 
iv illustrate descriptive exploratory tools 
describe architecture designed address technical challenges 
ess terminology module collection files stored directory files tend related functionality 
ieee transactions software engineering vol 
xx 
month ii 
change management data commercial software rarely static evolve satisfy new business needs ac new hardware new standards 
sections investigate evolution large software product 
describe change process data specific product 
medium large software development projects similar processes collect similar data 
examined ess tm large switching software project rich change history spans sixteen years comprises lines source code proprietary state description language lines header files organized major subsystems modules 
generic release system involves lines code 
change process changes source code follow defined process 
new software releases software updates customer deliveries contain new functionality features fixes improvements code 
features example call waiting credit card billing fundamental design unit system extended 
large changes implement feature solve problem decomposed development managers initial maintenance requests 
associated number maintenance requests information representing done module 
problem associated part solution problem 
perform changes developer opens required modifications code checks changes satisfactory limited context full system build submits code inspections integration system tests follow 
largest unit change normally performed single developer 
supervisor responsible distributes developers 
editing change individual file embodied delta file checked edited checked 
change data simplified description data collected source code control system sccs extended configuration management system 
addition fairly standard change management data information proprietary fault feature numbers approximate 
mockus eick graves karr measurement analysis software changes tracking system 
structure changes illustrated 
number sites feature 
description time date type adaptive corrective delta file module developer lines sccs fig 

change hierarchy properties 
changes aggregated different levels 
coarser levels deltas features correspond requirements traditional models software development typically require hundreds software releases software updates correspond features fix went particular software release software update 
smaller products typically levels hierarchy 
information level merged features software updates releases collapsed single level smaller products 
version control systems operates set files containing text lines source code 
atomic change delta program text consists lines deleted added order change 
deltas usually computed file differencing algorithm unix diff invoked sccs compares older version file current version 
data delta list parent date time change submitted version management system numbers lines added deleted unmodified change 
keeps file id find file name module relations 
records attributes change file associated date time change checked name name developer 
additionally sccs database records delta tuple including actual source code changed lines deleted lines added name developer number see date time change 
due extensive size software sccs databases separate instance subsystem instances located different computers 
size sccs ieee transactions software engineering vol 
xx 
month database average subsystem mb 
database averages mb subsystem 
subsystems total volume change management data approximately gb 
iii 
analysis tools performing data analyses necessary augment summary data constructing number change measures 
examples size changes complexity measures expertise developers worked changes measure purpose change 
describing important measurements discuss data analyses include identifying factors drive effort necessary implement changes predicting quality change measuring modularity properties software 
data preparation part analysis tools implemented perl scripts modelling tools implemented language 
obtaining change size complexity developer expertise addition data available directly sccs constructed explored number measures change size complexity developer expertise 
measuring change properties essential understand analyze software evolu tion 
computes set software change properties useful applications 
basic properties change recorded simplest change management system include ownership change object changed product subsystem mod ule file set lines time change performed 
estimate additional measures changes 
group measures classes size measures duration measures complexity measures expertise measures change purpose measures 
size measures include numbers lines code loc added deleted loc files touched change 
change size measured number sub changes 
example size feature may measured numbers deltas size may measured number deltas 
duration measures indicate temporal interval spanned change example difference time delta open close times change 
change complexity interaction measures include total numbers files modules subsystems touched change numbers developers organizations involved change 
change expertise measures average expertise developers performing change 
developer expertise determined number deltas completed developer change mockus eick graves karr measurement analysis software changes started 
modifications developer expertise measures computed expertise deltas weighted heavily delta performed long time ago subsystem expertise deltas subsystems change touches included calculating developer expertise 
obtaining change purpose primary driving forces evolution software adaptive changes introduce new functionality corrective changes eliminate faults changes restructure code order improve understanding simplify changes see 
quantitative modeling software evolution take account significant differences purpose implementation types changes see 
ideally delta classified adaptive corrective perfective 
version management system capture information directly records short abstracts describing purposes changes level 
textual analysis abstracts impute adaptive corrective perfective labels changes 
developers write short description purpose change classified adaptive corrective perfective depending key words appear descriptions 
classification scheme able tag ess software done implement recommendations code inspection meetings 
easy identify abstracts 
purposes dicult fit categories inspection performed new feature inspection recommendations involve cosmetic perfective maintenance example better comments naming conventions fixes potential errors 
due reasons classified separate inspection class 
detailed description classification procedure assessment precision reported 
measurements software change properties changes dicult estimate change management data esti mates large uncertainty 
properties obtained surveys augment estimates change management data 
surveys relatively expensive small subset changes measured 
subset changes chosen appropriately measures may provide invaluable resource calibrate validate improve precision analysis tools automat past activity experience measure expertise 
ieee transactions software engineering vol 
xx 
month ically derived change measures 
examples direct measurements analysis examples 
example uses change effort survey changes set developers 
second example uses root cause analysis faults reported post release failures subset releases 
analysis shows changes considered subset cause post release failure 
random selection failures root cause analysis traditional way select subset faults perform root cause analysis capable identifying changes lead post release failure 
see examples data obtainable interviews 
analysis strategies iii iii discuss additional measures improve inference cost quality drivers 
estimating effort particularly important quantity related software cost making changes 
great interest understand factors historically strong effects cost approximate amount time developers spend working change 
performing historical studies cost necessary change important study changes fine level case 
studying larger units change features impossible sort effects important factors 
example features typically contain mixture types changes especially new code bug fixes perfective maintenance relative difficulties different types changes estimable feature level 
larger change units involve multiple developers distant parts code making difficult estimate developer effects measure example decay single subsystem 
measurements change effort directly recorded change management system necessary algorithm described implemented effect divide developer monthly effort changes worked month 
doing number measurements change records 
measurements include size type change 
measures related amount effort required change 
applied procedure learn bug fix required effort comparable additions new code effort increases sublinearly size change subsystem appeared decaying rapid rate 
applied effort modeling methodology problem quantifying labor saving effect development mockus eick graves karr measurement analysis software changes tool 
validate model surveyed developers rate effort required perform done past 
results indicated models predictions line developers experiences 
effort estimation tools provide valuable cost driver data planning making decisions reduce expenses software development 
prediction change quality predicting modeling possibility post release failure active area software research 
approach referred software reliability aims estimate number faults remaining software order generate likelihoods failure periods time see example 
post release failure rates typically small modeled entire releases 
addition source code centric measures typically model probability failure example 
historic fault rates code units predict fault rates see 
effort models large size releases confounds number factors contribute failure 
factors include experience individual developers complexity type size characteristics individual changes 
analysis example modeled probability failure software updates sus small releases designed rapid deployment patches small new features 
due frequency nature software updates requirements quality extremely high sus fail 
development organization consequently performs depth root cause analysis involves finding reason failure lessons prevent repeated occurrences similar failures post release faults changes submitted software updates 
provided perfect environment modeling quality properties extracted submitted sus root cause analyses indicating sus caused failures 
perform modeling prediction change measures described computed sus 
generalized linear models predict probability failure su fit available predictors 
models fit oldest sus predictive power tested sus 
change measures needed obtain best predictor su failure 
failure probability sus increased complexity software update measured numbers subsystems touched size su measured number added lines 
failure probability sus decreases ieee transactions software engineering vol 
xx 
month developer expertise 
methodology successful fine level 
failure probability increases complexity measured numbers modules touched 
written de large amounts expertise fail 
details reported 
provides interactive web tools developers calculate probability failure particular software update 
quality prediction analyses provided valuable insights causes failures software deliv 
led number process changes designed improve inspection testing risky sus set general improvements su processes 
iv 
descriptive presentation tools presentation layer designed integrate deliver summary analysis results user 
implemented live documents see framework includes tools explore visualize various aspects change data 
provide simple examples presentation layer 
presentations change trend iv explores time patterns change data subsystem summarizer iv provides statistical summaries change properties subsystems source code 

web delivery live documents web choice presentation medium extensive simplicity deploy ment 
live documents world wide web tools documents manner facilitates interactive reader guided analysis visualization real time data bases 
accomplish tasks data represented interactive tables histograms accessible stan dard web browser 
case architecture share results researchers working related project developers managers responsible maintenance analyzed software system 
time trends time trends change measures provide valuable information quality effort interval making informed decisions managing software project 
change trend part designed current status number predetermined trends change measures 
allows web presentation arbitrary trends specified sql queries change measures 
mockus eick graves karr measurement analysis software changes illustrate change trend total numbers changes time 
time trends change data number hierarchies example subsystem module file developer manager organization line delta different time scales includ ing hour day day week month year annual 
example shows yearly time trends 
see average size changed files grows decreases 
numbers changes peaks 
yearly averages added deleted lines peaks 
peak deleted lines code time 
peaks numbers changes lag peaks numbers added lines years 
largest changes attributed primarily adaptive maintenance peaks added lines correspond significant enhancements functionality 
enhancements generate large number minor problems fixed causing peak corrective maintenance generates large numbers changes major release occurs years 
fig 

yearly submission changes sizes 
file sizes grow decrease 
peaks adaptive maintenance large changes followed peaks corrective maintenance large numbers changes 
interactive tables figures show numeric textual data variable names top values observation row ordered cells 
representations data values possible depending available screen space textual numeric digits thin bars lengths proportional values combination digits bars 
rows table sorted show relationships variables 
scrollbars shown left side view control available screen space scroll tables 
numbers changes exhibit strong trends smaller time scales including months year due yearly project cycle days week hours day 
shows hourly time patterns 
hours midnight am shown contain small numbers changes 
clear hourly trend activity peak lunch decreases activity night lunch time 
column average numbers added lines shows largest changes submitted just midnight 
investigation developers single time zone 
ieee vol 
xx 
month revealed changes associated adaptive maintenance timing ensures access late shifts testing laboratory peak development periods 
fig 

hourly submission changes sizes 
changes done working hours largest changes occur pm 
columns show hours midnight numbers changes average size file changed 
fourth fifth columns show average changes hour numbers added deleted lines 
section shows source code may characterized properties changes code 
subsystem summarizer describe subsystem summarizer tool automatically generates interactive web page summarizes important characteristics code units 
calculates properties changes code units derived change history 
began study software concentrating single subsystem code unit large tractable 
choice possible establish strong contacts managers programmers charged developing subsystem leading improved understanding code organizational events affected 
product study subsystem understanding analyses appropriate data 
understanding embodied subsystem summarizer applied automatically subsystems incorporate changes 
abridged version output summarizer applied relatively small subsystem shown 
summarizer reports demographics subsystem number modules files lines code classified terms programming languages subsystem 
code subsystem depicted written subsystem contains files types files headers various types tend smaller files 
change summaries display summary live document iv allowing exploration modules numbers files lines various types 
names code units numerical values changed protect proprietary information 
mockus eick graves karr measurement analysis software changes fig 

extracts output subsystem summarizer 
proprietary numbers altered 
may sort modules values variables restrict attention subsets modules may ask questions complex modules file strong relationship number lines code number deltas 
summarizer output includes regression relationships different measurements mod ules identifies outliers relationships 
regression procedure includes evaluating linear model appropriate running weighted regressions yield sensible fits pres ence variance heterogeneity 
see typical module deltas required implement average number developers touch module increases slowly linearly approximately rate power length module 
module sys shows outlier regression relationships affecting required unusually large numbers deltas module relatively long number developers worked 
deltas restricted affect single files large numbers deltas may indicate changes module tend spread large numbers files difficult implement 
supporting hypothesis fact relatively developers modify module 
expert developers allowed modify module may decayed candidate restructuring 
summarizer implements fault potential models described 
numbers modules involved subsystem small results reliable results shown 
ieee transactions software engineering vol 
xx 
month system architecture facilitate extensions portability system modular structure consisting principal parts see 
access engines described extract summary data underlying software databases see www bell labs com project 
discussed summary engine stores queries extracted data analysis tools augment model software data 
fi nally user interface layer provides visualization navigation aids 
access engine extract cms ary engi storage updates summaries analysis tools presentation layer measurement web server modeling web pages prediction java applets fig 

main parts system 
access engine runs periodically update primary tables changes change management system 
summary engine augments data analysis analysis tools updates sql database 
user interface layer includes web server java applets set web pages 
access engine role access engines obtain primary tables configuration management data logical changes atomic changes deltas files developers faults features 
access engine implemented number shell perl scripts 
inputs specify location sccs fault feature databases organizations record faults features database 
outputs primary tables 
stage process script launched rsh remote computers storing sccs databases 
minimize load critical machines shell script simply packs remote data tar files copies server running system 
second stage process mockus eick graves karr measurement analysis software changes sccs files selected relations processed generate tables fault feature database processed fifth table 
periodically merge updates change history existing summaries 
new deltas extracted classified merged existing databases 
access engine performs data cleanup activities 
version control system keeps track releases software creating branch deltas thought assignment common label particular set file version pairs 
deltas add delete source code reflect release history software obtained directly configuration management data sources 
consequently branch deltas included atomic change table 
facilitate classification see ill access engine processes abstracts textual descriptions purposes written developer 
converts text lower case replaces delimiters single space removes non alphanumeric symbols uses wordnet remove suffix word 
description primary tables logical change relation contains change identifier open date short describing change name developer 
atomic change delta relation contains version number file id date time atomic change submitted numbers lines added deleted unmodified change name developer implemented atomic change logical change 
file relation maps file identifier subsystem module file name 
developer relation maps developer login full name organization 
table lists estimated purpose release incorporated login full name developer geographic location developer time stamp opened 
developer full name may spelled different ways changes keep full name associated delta table contains file identifier date time version lines added deleted unchanged developer login identifier 
developer table lists logins possible spellings full names developers 
file table lists file ids paired file module names 
tracking system records number fields 
extracts fields containing release number software update number feature number indicator describing org relations abstracts developer names gm relation map file ids file names 
ieee transactions software engineering vol 
xx 
month point development process originated coding testing post release indicator bug fix new feature 
summary engine summary engine stores data provides summaries subsets data example list changes month list developers added lines module 
tables stored fiat files sql database 
summary engine responsible updating tables newest data configuration management system 
essential update tables incrementally complete retrieval summaries ess version control data takes days 
additional tables precomputed speed certain queries store additional values com puted analysis tools 
important additional values change purpose change effort developer expertise 
information extracted sccs databases linked provide faster access simpler analysis 
information type propagated delta table number deltas time delta list modules files touched propagated table 
additional tables computed delta feature release levels 
delta summaries include information 
purposes include bug new cleanup inspection rework unknown details see section iii 
examples geographic locations indian hill illinois netherlands united kingdom 
mockus eick graves karr measurement analysis software changes file id file version time stamp delta numbers lines added numbers lines deleted numbers lines unchanged login developer number subsystem module file file extension number purpose release information login open geographic location timestamp open list release numbers release list bug new classification pipe separated list features originated coding testing field software updates included information feature levels includes lists files modules sub systems touched change list developers participating change time delta 
developer expertise summary table lists total number deltas completed login particular month particular subsystem 
fields login month subsystem number delta done month subsystem 
additional tables imported relational database oracle windows nt pc enable easy calculation data roll ups subsystems modules developers features releases 
vi 
discussion main contribution define construct essential measures software changes automate measurement process integrate measurements analysis tation tools 
change measures include change complexity size purpose developer expertise 
basic set extracted estimated variety version control databases augmented ieee transactions software engineering vol 
xx 
month derived measures predict change quality cost 
system provides web user interface display trends change measures access analysis tools summary results 
system demonstrates version control databases invaluable resources un software evolution software production process 
points importance studying individual source code changes opposed differences entire versions software study static source code 
able study software changes essential handle large complex data sets 
volume complexity lack structure software change data overwhelm standard statistical analysis tools 
developed special purpose analysis tools tuned software engineering data analysis scale data volumes associated large scale systems cope error patterns encountered analyzing data 
tools include new visualization methods understand software changes 
important point results intuition insights come investigating software product service years 
product high quality production process example software products learning applying system products 
system knowledge collected years study large commercially successful software product 
knowledge embedded portable system currently transferred software products 
belady lehman programming system dynamics meta dynamics systems maintenance growth tech 
rep ibm thomas watson research center 
halstead elements software science elsevier north holland 
mccabe complexity measure ieee transactions software engineering vol 
pp 

chidamber kemerer metrics suite object oriented design ieee trans 
software eng vol 
pp 

albrecht john jr software function source lines code development effort prediction software science validation ieee trans 
software eng vol 
pp 

eick graves karr marron mockus code decay 
assessing evidence change management data ieee transactions software engineering appear 
graves marron mockus votta perry adapting new environment legacy software organization copes volatility change th international product development conference como italy 
graves karr marron predicting fault incidence software change history ieee transactions software engineering appear 
perry votta parallel changes large scale software development observational case study proceedings international conference software engineering kyoto japan april 
mockus eick graves karr measurement analysis software changes mockus votta identifying reasons software changes historic databases tech 
rep bell laboratories 
graves mockus inferring change effort configuration management databases metrics fifth international symposium software metrics bethesda maryland november pp 

ball graves mockus version control data evaluate effectiveness software tools international conference software engineering 
acm press 
software errors complexity empirical investigation communications acm vol 
pp 
january 
basili weiss methodology collecting valid software engineering data ieee transactions software engineering vol 
pp 

source code control system ieee trans 
software engineering vol 
pp 

software configuration management st century bell labs technical journal vol 
winter 
becker chambers wilks new language wadsworth brooks cole 
swanson dimensions maintenance proc 
nd conf 
software engineering san francisco pp 

melton model software maintenance proceedings conference software maintenance austin texas september pp 

musa software reliability mcgraw hill publishing 
models measurements quality assessment software acm computing surveys vol 
pp 
september 
eick loader long votta estimating software fault content coding proceedings th international conference software engineering melbourne australia may pp 

huang estimating fault content software fix fix model bell labs technical journal vol 
pp 
summer 
melton model software maintenance proceedings conference software maintenance austin texas 
september pp 
ieee computer society press 

hoffman experiment software error data collection analysis ieee trans 
software engineering vol 
se pp 
may 
predicting fault prone software modules telephone switches ieee trans 
software engineering vol 
pp 
december 
shen 
yu identifying error prone software empirical study ieee trans 
software engineering vol 
se pp 
april 
munson regression modelling software quality empirical investigation information software technology pp 

yu shen analysis software defect models ieee trans 
software engineering vol 
pp 
september 
mccullagh nelder generalized linear models nd ed chapman hall new york 
mockus chen graves role change size complexity developer expertise predicting quality software update tech 
rep bell laboratories 
eick mockus graves karr web laboratory software data analysis world wide web vol 
pp 
see www baltzer nl www html 
mockus graves flexible information visualization components authoring www live documents tech 
rep bell laboratories 
beckwith miller implementing lexical network international journal lexicography vol 
pp 

