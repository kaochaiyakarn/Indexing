extending jml speci cations temporal logic kerry 
marieke huisman automated reasoning group australian national university inria sophia antipolis france kerry anu edu au marieke huisman sophia inria fr 
proposes extension java modeling language jml temporal speci cations 
extension inspired patterns speci cation language bandera project especially tailored specify properties java card programs example allows exceptional behaviour methods speci ed 
tradition jml extension designed simple easy intuitive software engineers 
example show jml extension specify temporal aspects javacard api 
semantics extension discussed 
show subset extension translated back standard jml allowing re existing veri cation techniques jml 
new part language state semantics 
feasibility program veri cation acknowledged labour intensive complex requiring appropriate speci cation language understanding underlying semantics 
see examples veri cation java programs theorem proving 
design contract number roads area assertions incorporate speci cation information program code 
ei el rst programming language design contract assertions describing code implicit contracts specifying requirements preconditions client meet method invoked postconditions method meet executes invariants preserved method 
approach speci cation languages designed java developed java modeling language jml 
veri cations java programs speci cation languages design contract consequence nature necessarily restricted functional behaviour 
supported australian research council france apa scholarship visiting fellowship inria sophia antipolis 
time eld model checking attention shifting veri cation software particular interactions different components program 
see examples model checkers applied java 
drawback approaches speci cations complicated logic dicult understand java programmers 
speci cations usually separately part program contrast ei el jml speci cations 
get closer integration functional temporal speci cations di erent speci cation techniques integrated 
java assertions jass developed university oldenburg rst attempt bridge gap 
jass allows java classes annotated speci cations form assertions :10.1.1.16.800
particular jass features trace assertions monitor ordering method invocations returns 
trace assertions semantics csp specify order methods invoked conditions method invoked 
jass trace assertions integrated jass speci cations speci cation stating particular method call certain variable positive allowed 
jml designed gary leavens iowa state university 
jml specify java classes interfaces 
standard assertion features jml similar jass 
jml ability handle interfaces classes feature model variables described detail section expressive propose extension jml temporal logic easier understand jass trace assertions specify temporal behaviour interactions di erent objects java card program 
extension jml inspired santos speci cation pattern project branch bandera project 
goal bandera project development tool automatically extracts mathematical models speci ed properties java source code 
tool render models input language di erent modelchecking tools 
bandera employs program analysis abstraction transformation techniques order get nite state models 
speci cations java source code bandera speci cation language bsl implements called speci cation patterns 
speci cation pattern language independent set commonly speci cation constructs nite state veri cation mappings di erent temporal logics 
implementation bsl independent source code speci es 
bsl allow properties exceptions speci ed di ers jml 
develop better understanding kind speci cation constructs necessary extension language looked javacard api 
fact designers jass currently considering switching jml assertion language 
part loop project university nijmegen speci cations javacard api written jml 
goal eventually verify speci cations respect implementation api 
speci cations temporal aspects order method invocations speci ed model variables simulating state automaton 
section shows similar speci cations look jml extension 
temporal speci cations standard jml inadequate specify directly 
temporal extension jml designed goals mind language intuitive easy understand software engineers familiar java card language tailored specify properties java card programs language integrated standard jml possible existing jml expressions temporal logic formulae language provide speci cation constructs identi ed important speci cation patterns project relevant java language clear semantics appropriate veri cation techniques 
subset speci cations allowed language extension translated back standard jml speci cations veri ed standard veri cation techniques jml advocated loop project :10.1.1.15.9976
subset describes safety properties bad happen meaning program gets particular state certain property satis ed 
speci cations translated back standard jml liveness properties eventually happen meaning certain program states reached 
describes semantics safety liveness properties appropriate veri cation techniques liveness properties topic 
outlined follows section jml described detail section outlines speci cation patterns section informally introduces speci cation language presents example featuring transaction mechanism javacard section discusses semantics speci cation language nally section draw discuss 
java modeling language jml designed easy java programmers little experience logic 
allows class invariants pre post conditions methods constructors written program code 
speci cations formulated making side ect free boolean java expressions written java comments enclosed 
additional noti es jml tool jml speci cation ordinary comment 
jml tool pre compiler translates speci ed programs java programs explicitly monitor assertions runtime 
speci cation violations throw java exceptions 
simple jml method speci cation described public normal behavior requires ensures speci cation states precondition holds invocation public method method terminates normally throw exception postcondition hold method invocation 
comparable total correctness formula hoare logic 
variation normal behavior speci cation behavior speci cation 
conditions method may may throw exception speci ed 
behavior speci cation follows public behavior requires ensures signals 
signals precondition holds public method invocation method terminates normally corresponding postcondition satis ed 
method terminate normally throws exceptions listed exception respective condition hold 
speci cations translated formulae extended hoare logic dealing abrupt termination outlined :10.1.1.15.9976
exceptional postconditions expressions form old denoting value expression evaluated pre state method 
method speci cations contained class speci cations 
class speci cations include additional clauses model initially invariant constraint 
model clause allows declaration called model variables variables exist speci cation 
refer internal state object 
example typical speci cation object model variables size max size denoting examples section taken 
size maximum size respectively 
model variables may initialisation initially clause size may initialised speci cation initially size 
invariant clause declares properties true publicly visible reachable states object state outside public method execution 
invariant supposed established class constructors preserved public method 
example speci cation invariant means value size bound max size 
method execution invariant may broken method terminates invariant re established method terminates exceptionally 
constraint clause relates pre state post state method restricting variables may changed method 
example constraint max size old max size speci es value max size change value post state max size equal value pre state old max size 
speci cation patterns derived christopher alexander zen approach architecture design patterns means capturing solutions re occurring software architectural design problems 
alexander architectural structures spatial arrangements aesthetically psychologically pleasing inhabitants classi ed groups underlying structure pattern 
software designers discovered re occurring design problems mention solutions fell groups underlying structure 
matthew dwyer speci cation pattern project santos laboratory kansas state university proposed speci cation pattern approach nite state veri cation 
speci cation patterns describe structure aspect program behaviour provide expressions behaviour common formalisms linear temporal logic ltl computational tree logic ctl 
patterns capture experience base expert speci ers temporal logic users need depth knowledge underlying semantics speci cation language just need look relevant pattern match requirement speci ed 
project website houses large number commonly occurring speci cation patterns 
explained section speci cation patterns form basis bsl input language model checker front tool bandera 
patterns include occurrence patterns universal existence absence bounded existence ordering patterns precedence response 
pattern scope gives extent program execution pattern hold 
intents di erent patterns follows 
universal state event occurs scope existence state event occur scope existence property pattern intent describe part program execution contains instance certain events states 
known eventually 
example mappings ctl true globally af af ag ag ltl true globally 

examples known uses common example existence specifying termination executions terminal state eventually reached 
relationships pattern dual absence pattern 
fig 

existence property pattern absence state event occur scope bounded existence state event occur times scope precedence state event preceded state event scope response state event followed state event scope main scopes describing time intervals closed left open right 
global entire program execution execution state event execution state event part execution designated state events execution state event state event rest program subsequent occurrence state event eventually called normal exceptional terminates enabled enabled fig 

temporal speci cation syntax notice scope describes known weak necessary state event mentioned happens 
tradition design patterns speci cation pattern form package comprising name precise statement intent mappings common speci cation formalisms ctl ltl examples known uses relationships patterns 
existence pattern illustrated 
number mappings weak operator strong operator temporal speci cations jml inspired bandera patterns experiences specifying temporal behaviour javacard api propose extension jml temporal speci cations 
syntax proposed temporal speci cations 
speci cations easy understand able hide technicalities temporal logic 
intention written class invariant occur 
section informal intuition di erent speci cation constructs discuss example 
section discuss semantics underlying jml extension formally 
basis logic trace properties describe property true part program execution 
temporal formula describes part program execution trace property hold certain event happened particular events 
notice distinction known strong execution event happen describe nite behaviour event may happen 
formula describes behaviour describes behaviour trace delimiter speci ed property hold right start 
trace delimiter set events arguments means events happen 
special temporal formula seen syntactic sugar false ellipsis stands occurrences meaning state reachable event occurs times 
method events distinguish called normal exceptional terminates 
event describes state change trace properties describe properties hold sequence states 
essentially eventually properties describe property true state sequence state sequence respectively 
syntax keyword introduced abbreviation java jml logical operator 
properties hold particular state ordinary jml properties jml expressions type boolean extensions enabled enabled 
method property enabled true particular state called state terminates terminates normally 
property enabled expresses contrary called terminates throw exception known terminate expresses enabled 
jml java logical connectives combine trace state properties 
example class extension jml discussed experiences writing speci cations temporal aspects javacard api 
example proposed temporal speci cations javacard class 
class includes methods control applet execution resource atomic transaction management inter applet object sharing sharing java smart card 
temporal aspects api relate transaction management crucial importance card 
transaction mechanism works follows application creates updates data java smart card integrity data needs preserved communication 
data updated communication case interruption reverts back initial state 
call method begintransaction initiates set updates 
object update point conditionally updated eld may appear updated update committed 
conditionally updated elds stored commit bu er 
data committed persistent storage cleared bu er applet called committransaction 
case power loss system failure method called conditionally updated elds revert back original values 
method called applet encounters internal problems exception thrown decides cancel transaction 
quoted directly api documentation speci cations describe temporal aspects class begintransaction throws progress transaction progress throws progress transaction progress committransaction throws progress transaction progress 
firstly begintransaction throws exception transaction progress 
transaction progress describes state begintransaction successfully called committransaction invoked 
begintransaction called called committransaction throw exception 
write terms proposed speci cation language begintransaction called begintransaction enabled called committransaction called api speci cations suggest complementary behaviour begintransaction called transaction progress method normal behaviour 
transaction progress describes state committransaction successfully called begintransaction invoked proposed speci cation language write complement called committransaction called begintransaction enabled begintransaction called course begintransaction enabled initially 
similar way documentation speci cations describe committransaction enabled 
combining speci cations speci cation begintransaction results class speci cations begintransaction called begintransaction enabled enabled committransaction enabled called committransaction called called committransaction called begintransaction enabled enabled committransaction enabled begintransaction called members loop group hans meijer erik poll jml speci cation transaction methods class outlined 
speci cation relies model variable assigned values 
transaction said progress transaction progress 
example speci cations committransaction methods contain clause ensures speci cation begintransaction includes ensures 
transaction depths long complicated speci cation 
believe hiding unwieldy speci cations beneath temporal extension jml speci cations transaction mechanism simpler intuitive 
semantics presenting informal meaning proposed language extension necessary describe formal semantics 
discussed subset temporal formulae language extension translated back standard jml 
section discuss done show resulting proof obligations speci cation transaction mechanism previous section 
rst section describes temporal formula specify set states formula true 
state semantics give semantics temporal jml extension de ne temporal formula set states formula true 
mentioned section keywords expressed need consider cases 
similarly explicitly give semantics expressed terms 
assume nite state machine describing program behaviour 
assume state transitions method called method terminates 
labelled appropriately called normal exceptional 
state transitions denoted meaning transition state state event assume state incoming transition unique way get event occurs event result di erent state rst event possibly nite path state machine describes possible execution program 
state machine easily constructed standard static analysis techniques bandera project 
note event terminates said happen event normal event exceptional occurs 
discussing semantics temporal formulae rst give auxiliary de nitions 
de nition transitive closure transition relation 
denotes transitive closure transition relation 
def de nition transition 
lift notion transitions sets events 
def de nition transition 
denotes transition labelled events mentioned set def denotes transitive closure de nition trace 
trace denotes nite state trace trace def trace trace expected meaning 
denotes singleton trace concatenation 
denote empty trace 
de nition nite trace 
nite trace denotes set nite traces starting nite trace def fs nite trace nite trace denotes nite traces transitions 
de nitions de ne functions tf tp sp describing semantics temporal formulae trace properties state properties respectively 
de nition tf 
de ne tf di erent temporal formulae grammar denotes temporal formula denotes trace property 
denotes outgoing transition tf def fs tf tf def fs tp trace tf def fs 
tp trace fs nite trace tp tf def fs 
tp trace fs nite trace tp temporal formula holds exactly states reachable transition state transition temporal formula holds 
formula true states transition reachable trace property satis ed trace transition 
addition true trace property holds nite nite traces starting containing speci ed trace property hold reachable nite nite traces 
semantics trace properties de ned nite nite traces 
simple recursive de nition 
de nition tp 
de ne tp di erent trace properties grammar denotes state property state state trace 
tp def true tp def sp tp eventually tp def false eventually tp def sp eventually tp semantics conjunction disjunction trace properties standard 
means state property true satis ed states trace eventually true state trace true 
lastly de ne state property satis ed state 
de nition sp 
de ne sp di erent state properties grammar assuming semantics jml java expressions statements 
see example semantics allows express predicates term method terminates norm method terminates normally excp method terminates exceptionally 
denotes method name denotes jml property 
sp def jml enabled sp def term jml norm jml enabled sp def term jml excp jml semantics conjunction disjunction negation state properties standard 
speci cation begintransaction called begintransaction enabled called committransaction called set states true simpli cation bt ct ct 
trace ct term 
bt jml excp 
bt jml ct nite trace term bt jml excp bt jml translating temporal formulae back jml discussed subset language extension translated back standard jml expressions 
subset expresses safety properties program reaches certain state property satis ed guaranteed program reach state 
safety properties formed syntactic variations state properties 
speci cation transaction mechanism example safety property 
subsection example illustrate readability bt ct denote method event method called 
translation back jml 
translation verbose performed tool importance 
order translate speci cations transaction mechanism back jml number model variables called normal exceptional declared relevant method model variables boolean value initially false trace behaviour program 
rst line method jml set statement added setting called 
set called true speci cation method contains normal exceptional postconditions 
ensures normal exceptional signals exception exceptional normal state method terminates normally abruptly model variables appropriately set 
methods principle ect model variables 
top level expression speci cation transaction mechanism temporal formula 
provided safety property means event happened property satis ed 
general safety property expresses property holds forever holds event happens event happens ensure longer true 
add invariant stating holds true 
invariant psi ensure moment occurs set false add additional set assertion moment happens 
example speci cation called called additional needs added method set called false case transaction mechanism state properties speci ed declare methods normal exceptional behaviour 
expressed class invariant expressed specifying case particular postcondition established 
example express called enabled method requires additional speci cation stating called method terminate normally 
ensures called false jml set annotation allows assignment model variable 
class behavior ensures old begintransaction called false signals exception old called old committransaction called false begintransaction set begintransaction called true set called false set committransaction called false 
behavior ensures old called old committransaction called false signals exception old begintransaction called false set called true set begintransaction called false 
committransaction specification identical fig 

jml speci cation transaction mechanism shows relevant parts jml speci cation constructed way 
speci cation committransaction included identical 
interesting compare speci cation speci cation loop project 
speci cation method begintransaction features clauses ensures signals exception 
enforce example method terminate normally transaction progress 
solve speci cation additional ensures clause additional signals clause 
additional speci cations see loop speci cation begintransaction called speci cation similar results apply called committransaction called speci cations equivalent 
extension jml temporal logic 
extension speci cation patterns proposed bandera project tailored especially java 
speci cations language extension translated back standard jml believe syntax speci cations readable intuitive 
language extension allows speci cation liveness properties eventually happen currently speci ed standard jml 
described semantics language discussed temporal properties veri ed translated back standard jml 
integrate language extension grammar standard jml develop appropriate veri cation technique liveness properties 
extend language allowing trace properties state events eventually happen integrate subset language extension run time assertion generator done trace assertions jass project java path explorer project 

alexander 
timeless way building volume center environmental structure series 
oxford university press new york ny 

java card 
platform application programming interface api speci cation 
java sun com products javacard 

bandera project 
www cis ksu edu santos bandera 

fischer oller 
jass java assertions 
havelund ro su editors entcs volume 
elsevier publishing 

corbett dwyer laubach robby zheng 
bandera extracting nite states models java source code 
nd international conference software engineering pages june 

corbett dwyer robby 
expressing checkable properties dynamic systems bandera speci cation language 
technical report kansas state university department computing information sciences 

dwyer avrunin corbett 
property speci cation patterns finitestate veri cation 
nd workshop formal methods software practice pages march 

esc java speci cations javacard api 
www cs kun nl publications jc specs html 

havelund ro su 
java runtime veri cation tool 
th international symposium ai robotics automation space june 

huisman 
reasoning java programs higher order logic pvs isabelle 
phd thesis university nijmegen 

huisman jacobs 
java program veri cation hoare logic abrupt termination 
fundamental approaches software engineering number lncs pages 
springer 

huisman jacobs van den berg 
case study class library veri cation java vector class 
software tools technology transfer 

jacobs poll 
logic java modeling language jml 
hussmann editor fundamental approaches software engineering fase number lncs pages 
springer 

jass project 
semantik informatik uni oldenburg de jass 

javacard technology 
java sun com products javacard 

leavens baker ruby 
preliminary design jml behavioral interface speci cation language java 
technical report iowa state university department computer science 
latest revision august 

leavens leino poll ruby jacobs 
jml notations tools supporting detailed design java 
oopsla companion pages october 

loop project 
www cs kun nl bart loop 

meijer poll 
full formal speci cation java card api 
jensen editors smart card programming security smart number lncs pages 
springer 

meyer 
object oriented software construction 
prentice hall nd rev edition 

robby 
bandera speci cation language speci cation language software model checking 
master thesis kansas state university 

speci cation pattern system 
www cis ksu edu santos spec patterns 

