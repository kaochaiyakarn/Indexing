rate execution abstraction multimedia computing kevin jeffay david bennett university north carolina chapel hill department computer science chapel hill nc usa jeffay cs 
unc 
edu process models multimedia computing allow applications adapt pattern execution resources scarce abundant 
processes adapt natural express desired performance terms processing rate application defined data units events 
propose process model processes execute general rate specification process executions time units 
addition separate parameter specify desired response time completion execution 
cases real time performance rate process predictable 
model general encompass extend existing models proposed multimedia systems 
model rate execution described implementation detects processes adapt execution rate minimizes latency interprocess communication 

effective distributed multimedia applications require operating system support ensure real time low latency acquisition processing delivery playout audio video streams 
domain process management numerous proposals thread process models scheduling algorithms ipc mechanisms supporting multimedia computing 
discussions themes preliminary requirements emerged 
include deterministic execution 
level services provided applications execute predictable manner 
typically manifested guarantees bounded response time events interrupts message arrivals form periodic execution 
adaptive resource management 
processing communications resources saturated face demands multimedia applications 
mechanisms allocating resources processes allow applications dynamically alter desired service parameters optimize execution current perceived state system 
implicit assumption applications provide acceptable user performance range resource requirements 
feedback actual performance 
best adapt changing execution conditions applications able determine actual execution performance terms desired service parameters 
operating systems supported intel ibm corporations 
proceedings fifth international workshop network operating system support digital audio video durham nh april published lecture notes computer science little editors volume pages springer verlag heidelberg germany 
support mechanism application kernel dialog performance parameters 
integrated resource allocation ipc 
real time performance application function process structure 
principle guaranteed real time performance application application structured set communicating sequential processes single monolithic process 
implies processes communicate peer peer client server basis desired service parameters initiator propagated inherited recipient 
ensure example priority inversions occur interprocess communication 
high level specification service parameters 
general desire allow applications specify desired service parameters context removed low level operating system mechanisms priority ideally tied application system level concepts capacity utility added value function real time execution 
note describe new process model concept rate execution rbe addresses requirements 
rbe system processes specify desired rate progress terms number events desire process interval specified duration 
examples rate specifications include processing audio frames ms video frame ms packets second 
rbe model formal resource allocation model indicates line scheduling admission control algorithms 
process rbe system guaranteed progress specified rate exists process 
insufficient resource capacity exists admit rbe process process negotiate operating system reduced rate progress wait sufficient resources available 
resources available ways 
user explicitly reduce performance expectations application request application scale back resource usage lower frame rate videoconference 
alternatively operating system request process reduce resource requirements system perceives process continually resources reserved 
conjecture notion processing rate natural useful abstraction multimedia systems 
particular rbe model general encompass majority traditional real time task models periodic sporadic tasks models previously proposed multimedia computing 
allows specification integration soft non real time activities hard real time activities 
model implemented experimental microkernel presently ported real time mach kernel 
initial experiences rbe indicate easy support provides simple effective means applications communicate monitor adapt desired service 
panacea believe rbe process model simple powerful paradigm process execution suitable generic real time computing general multimedia computing particular 
provide overview rbe abstraction briefly compare existing real time multimedia process models 
discuss rbe processes manage latency applications rbe processes adapt execution rates resources scarce abundant 

rate execution concept formulation rate execution designed integrate paradigms repetitive real time execution 
concept software phased locked loops embodied synthesis kernel 
operating system monitors process event queue uses control theoretic scheduling policy schedule processes minimize event queue length 
mechanism demonstrated execute processes soft real time 
execution soft real time sense resource allocation best effort guarantees performance possible 
second paradigm linear bounded model defined dash system 
processes specify desired execution rate number messages processed second size buffer pool store bursts messages arrive process 
independent possible state conditions collection execute desired rate 
third paradigm real time producer consumer rtp process model kernel 
applications expressed networks processes execute response message arrivals 
arrival rate messages assumed uniform difference expected message interarrival time minimum interarrival time small 
assumption holds possible state conditions rtp processes execute real time process process message arrives 
model rate execution takes starting point linear bounded arrival process model generalizes include generic specification rate adds independent response time deadline parameter enable precise realtime control execution rbe processes 
rbe process described parameters rate parameters number events processed length interval events expected arrive 
response time parameter specifies desired maximum elapsed time delivery event process completion processing event 
informally rbe process execute rate sufficient ensure events consumed time units event processed time units arrival possible 
actual execution rate rbe process determined rate events generated process 
example events generated rate time units events generated interval length event processed time units arrival 
events generated higher rate unanticipated burst arrives worst case events processed arrived desired rate 
case unexpected bursts dash 
precisely tj arrival time jth event rbe process event guaranteed processed deadline time tj max tj events generated rate events time units event processed time units arrival 
events arrive faster rate guaranteed completion time previous events directly parameter developed general theory rate execution gives conditions set rbe processes guaranteed execute real time 
real time means th event rbe process guaranteed processed time 
theory operating system admission control programmer understand rate specifications result admissible process resources scarce 
model rate execution general encompass traditional real time process models 
example events separated time exactly time units reduces commonly held definition periodic task 
primary distinction rate process periodic rate case assumptions interarrival times events required implementation rbe process set allowable execution rates process limited number event buffers available process 
secondary distinction models rate process assumption distribution processes execution time interval length rbe processes emulate software phased locked loops function rbe model se function implementation model 
described 

supporting rate execution implemented rbe processes real time operating system kernel 
describe interesting aspects implementation admission control rbe processes manage latency paradigms mechanisms adapting execution rate 
programming model admission control supports simple data flow model computation 
processes receive events process generate events processes 
distinguish types rbe processes internal source processes 
source rbe process process receives events directly external device 
rate parameters expected rate device generate specified process created 
internal rbe process process receives events generated rbe processes 
example server process internal rbe process 
internal rbe processes created rate specification run time transitively inherit rate specification event generators 
internal process deadline processing event computed rate specification event generator 
inheritance rate parameters done ensure internally generated events transitivity externally generated events processed rates generated 
source rbe process created specifying program execute response event arrivals event type input descriptor port specifying logical device generate events process rate specification parameters optional event queue length number buffers allocated events execution cost estimated worst case execution time processing event rate adaptation callback function called kernel suggest process speed slow 
event queue source process contains events processed 
default process executes rate events time units queue entries 
events process generated higher rate events time units events lost 
event generators devices expected ill behaved larger queues specified 
internal rbe process created specifying program execute response event arrivals event type input descriptor port specifying rbe process es generate events process execution cost estimated worst case execution time processing event 
port descriptors processes kernel construct directed graph interprocess communication admission control 
new process created topological sort performed graph internal process internal node graph assigned rate equal sum rates immediate predecessors graph 
resulting set rate specifications execution cost parameters processes input schedulability test described 
result test positive rbe process created 
result negative creator reduce rate specification case source rbe process reduce rate specification source rbe process generate events process created 
general useful strategies gaining admission rejected process relax lengthen response time parameter process source processes source rbe process generate events rejected process reduce execution rate process event generators 
process rejected kernel provide hints calling process form possible reduced rates relaxed response times 
support non real time processing allowing processes created event queue lengths zero 
case system enqueue events process space available basis schedule process minimize event queue length 
event queue grows adaptive rbe process system increases rate process executes possible queue shrinks rate decreased 
size frequency rate manipulations controlled simple control theoretic model borrowed synthesis kernel 
minimizing response time second benefit having internal processes inherit rate specifications event generators enables kernel minimize guarantees worst case response time processing events propagate chain rbe processes 
response time guarantees event processing response time parameters source rbe processes contingent accuracy rate specifications processes 
source rbe process admitted system rate response time parameters long events arrive faster events time units event guaranteed processed time units arrival 
response time guarantees internal rbe processes determined follows 
receives event generates event internal rbe process processing events guaranteed completed time units arrival worst case guaranteed response time processing events propagate processes worst case guaranteed response time process combined functions processes rbe parameters 
guaranteed response time event propagates response time parameter general case worst case guaranteed response time event propagates chain rbe processes function length chain response time parameter source rbe process head chain 
note strictly speaking technique minimizing response time orthogonal concept rate execution 
applied non rate systems related concept priority inheritance 
demonstrated applicable rate framework 
minimizing response time particularly important rate system important able control throughput response time independently 
adapting execution rate admitted rbe processes guaranteed execute rate sufficient process events real time 
interpretation real time ultimately set rate specifications describe expected behavior processes external computer 
external environment deviates significantly rate specifications source rbe processes adapt execution rates reflect changes environment 
generated faster source rbe process rate specification event queue overflow events lost 
event queue overflows system source process callback function suggest process increase execution rate 
rate adjustments performed affected processes interpretation rate process application dependent 
rate decreases accepted provided response time parameter reduced rate increases subject admissibility test guaranteed succeed 
system monitor execution rate source process simply keeping count number times process scheduled past system parameter 
rbe process admitted system kernel check exists source process rate specification higher rate currently generated process process executing rate specification lack events 
process contacted requested reduce rate specification 
internal rbe processes reactive mechanism needed adapt execution rate 
rate re negotiations naturally handle case processes need adapt rate input processing 
slightly different form rate adaptation required output performed fast rate satisfy rbe processes 
example consider videoconferencing system 
point time video frames may generated camera faster rate transmitted network network congestion 
symptom problem input case queue overflows way output handled real time system queue event queue 
predictable real time system possible general synchronize individual output devices input devices 
example video digitizer ntsc video generate video frame ms application videoconferencing ideally transmit video frame ms current local area networks guarantee possible times 
variability sustainable network transmission rates determinism ntsc video generation process possible synchronize camera network video frames transmitted generated 
events generated camera guaranteed processed network real time 
events generated camera treated events network process 
generic inability synchronize input output devices camera network exist set buffers written process execution rate derived events generated camera digitizer vertical interrupts read processes execution rate derived events generated network transmission complete interrupts 
operations buffer non blocking ensure response time guarantees met 
buffer overflows frames produced faster transmitted 
buffer serve event queue network process separate mechanism required detect respond overflows buffer 
general difficult interactions 
buffer constructed return current length items deposited removed case processes learn rate mis matches system processes device drivers designed report buffer overflows operating system turn notify appropriate processes 
applications may choose adapt execution rates 
example videoconferencing application able sustain suboptimal frame transmission rate may attempt increase frame rate hopes producing higher quality conference 
similarly application may receive application level feedback conference receiver data lost network application may elect reduce frame transmission rate 

rate execution rbe system re implement desktop videoconferencing system 
original system traditional hard real time process model sporadic tasks 
system events required minimum inter arrival time order guarantee real time performance 
conferences spanned internetworks existing local area networks possible general guarantee network packets containing conference data arrived receiver non zero minimum interarrival time 
ensure packet processing consume available processing cycles system effectively polled network interface packet arrivals variation periodic server concept 
immediate benefits rbe processes application 
rbe system resulted substantially lower latency media playout times severe network congestion 
compares latency media playout simulated conference rbe processes read data network interface versus periodic server 
trace packet arrival times recorded actual conference simulate arrival events conference receiver rbe processes periodic server sporadic application tasks 
systems executed variety system loads 
conference processes cases consumed approximately processor 
rbe system rate specification network source process arrivals ms response time parameter ms periodic server system server executed period ms rate adaptation rbe system period adaptation periodic server system 
latency ms oo oo oo latency ms oo oo average latency minimum latency cpu utilization latency periodic server system 
maximum latency average latency minimum latency cpu utilization latency rate execution 
performance periodic server system consistent system loads 
average latency approximately second significant deviation 
relatively high latency due fact periodic server serve event queue constant rate 
queue builds continues arrive expected rate server backlog 
environment periods bursty arrivals led formation queue packets server 
fact queue overflowed occasions resulting approximately packets lost 
rbe system average latency desired response time ms cpu utilization reached approximately arrival rates exceeded rate specification caused events processed latencies close second 
packets lost rbe system 
periodic server system processing events arrive burst spread time events arrived periodically 
contrast rbe system schedules events assigns deadlines arrive 
possible events deadlines far processed time periodic server see event 
second benefit rbe processes pessimistic admission control policy 
typically achieve low response times events configure periodic server execute higher rate expected arrive 
excess cpu capacity reserved server rarely allocated processes 
rbe system specifying desired aggregate processing rate process reserves capacity expects 

related model rate execution borrows concepts systems including rt mach dash synthesis 
system amalgam believe primary contribution demonstration rbe processes simple effective primitive constructing multimedia systems conjecture holds generic realtime applications 
rbe model encompasses related works 
formal underlying model resource allocation accommodates interprocess communication synchronization 
believe rbe natural easy abstraction previously proposed 
example reserve abstraction task proposed mercer essentially specification processor utilization task 
claim concept execution rate notion reserve inherently natural portable hardware platforms application level concept 
represents counter point imprecise computation lin 
imprecise model computation developed primarily deal case insufficient processing resources 
model provides framework real time tasks dynamically control sections code executed system overloaded 
executing fragments complete task imprecise useful partial result obtained statically defined interval 
directly controlling execution task code rbe system manipulates interval task executes 

summary process models multimedia computing allow applications adapt pattern execution best resources currently available sacrificing ability execute predictably time 
applications able express desired performance terms application defined data units events 
proposed new process model processes execute general rate specification process executions time units 
addition separate parameter specify desired response time completion execution 
model general encompass extend existing models proposed multimedia systems 
implemented prototype processes adhere rate execution rbe model 
implementation system identifies processes input events arriving faster slower rate expected requests processes modify rate specification 
interprocess communication implemented response time guaranteed processing event worst case function number processes involved processing event 
preliminary experiences rate execution kernel indicate rbe rate specification provides convenient means expressing desired performance videoconferencing system allows system easily adapt execution response changes environment changes network congestion 
conjecture hold multimedia applications 
comparison performance rbe processes traditional periodic processes shows rbe model offers significant advantages terms accuracy admission control average worst case response time processing events 
presently primitive rate process model implemented real time mach kernel working expanding implementation comparing rbe processes threads mach real time threads mach effort confirm initial findings rbe performance 

integrated management priority inversion real time mach nakajima tokuda proc 
th ieee real time systems symp durham nc december pp 

processor capacity reserves operating system support multimedia applications mercer savage tokuda ieee intl 
conf 
multimedia computing systems boston ma may 
scheduling ipc mechanisms continuous media govindan anderson proc 
acm symp 
operating systems principles acm operating systems review vol 
october pp 

kernel support live digital audio video jeffay stone smith computer communications vol 
july august pp 

support continuous media dash system anderson wahbe govindan andrews proc 
tenth intl 
conf 
distributed computing systems paris france may pp 

adaptive real time resource management supporting modular composition digital multimedia services jones network operating system support digital audio video proceedings fourth intl 
workshop lancaster uk november shepherd 
eds 
lecture notes computer science vol 
pp 
springer verlag heidelberg 
dynamic qos control real time threads tokuda network operating system support digital audio video proceedings fourth intl 
workshop lancaster uk november shepherd 
eds 
lecture notes computer science vol 
pp 
springer verlag heidelberg 
system support time critical applications network operating system support digital audio video proceedings second intl 
workshop heidelberg germany november ed 
lecture notes computer science vol 
pp 
springer verlag heidelberg 
scheduling algorithms multiprogramming hard real time environment liu layland journal acm vol 
january pp 

fine grain adaptive scheduling feedback massalin pu computing systems vol 
winter pp 

real time producer consumer paradigm paradigm construction efficient predictable real time systems jeffay proc 
acm symposium applied computing indianapolis acm press february pages 
dimensional scaling techniques adaptive rate transmission control live audio video streams jeffay proc 
second acm international conference multimedia san francisco ca october pp 

transport display mechanisms multimedia conferencing packet switched networks jeffay stone smith computer networks isdn systems vol 
july pp 

theory rate scheduling jeffay university north carolina department computer science technical report submission 
imprecise results utilizing partial computations real time systems lin natarajan liu proc 
eighth ieee real time systems symp san jose ca december pp 

latency management time shared operating systems jeffay proc 
th ieee workshop real time operating systems software seattle wa may pp 

enhanced aperiodic responsiveness hard real time environments lehoczky sha proc 
eighth ieee real time systems symp san jose ca december pp 

