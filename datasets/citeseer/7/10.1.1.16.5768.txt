imperial college science technology medicine university london department computing policy framework management distributed systems damianou thesis submitted partial fulfilment requirements degree doctor philosophy faculty engineering university london diploma imperial college science technology medicine london february parents sofia policy management latest developments network distributed systems management 
academic commercial settings standardisation bodies concentrating policy management promising solution managing large scale distributed systems 
policy management areas security particularly attractive 
new technologies active networks mobile agents internet providing services customers increase security concerns associated today networked environments 
security management involves specification deployment access control policies activities registration users logging auditing events dealing access critical resources security violations 
management actions performed event occurs depend enterprise policy 
need evident policy language support specification access control management policies 
thesis propose policy framework support security management distributed systems 
framework consists policy specification language architecture deploying policies language set tools specifying managing policies 
conjunction language toolkit permits integrated administration resources people policy information automated policy deployment 
toolkit comprises integrated development environment ide policy compiler tools managing policies roles runtime 
policy language declarative object oriented language specifying security management policies distributed object systems 
language flexible expressive extensible cover wide range requirements implied current distributed systems paradigms 
includes support access control policies delegation cater temporary transfer access rights agents acting behalf client 
language supports policies express management activity take form event triggered rules called obligation policies 
domains facilitate specification policies relating large systems millions objects policies specified collections objects stored domains individual objects allowing scalability flexibility 
composite policies included allow basic security management policies relating roles organisational units specific applications grouped 
composite policies essential cater complexity policy administration large enterprise information systems 
application specific constraints groups policies specified meta policies 
language easy policy users structural operational semantics approach specify formal semantics 
iii foremost go supervisor professor morris sloman 
thesis possible inspiration constructive criticism experienced guidance 
morris arranging financial support phd studies 
am grateful dr emil lupu guidance support critical analysis extremely important completion thesis 
special go dr dulay contributed great deal thesis useful comments advice 
friends colleagues distributed software engineering section stimulating pleasant discussions 
include roberto leonidas sebastian oscar dan 
members dse section making memorable experience 
special siv took time read thesis provide invaluable comments 
profound gratitude goes family timeless source inspiration pursue doctorate especially parents sofia thesis dedicated 
opportunity undertake constantly supporting years 
iv statement contribution thesis result author participation imperial college distributed systems policy management years 
ideas developed thesis result group discussions professor morris sloman dr emil lupu dr dulay 
thesis motivated policy driven management model researched sloman model includes management domains management policies role management ideas described chapter credited accordingly 
thesis develops ideas presents complete policy management framework includes policy specification language architecture deploying policies 
policy specification language exist previous main contribution thesis 
true architecture deploying enforcing policies includes automated policy distribution enforcement points dynamic adaptation changes domains managed objects system 
formal semantics policy language chapter author individual 
implementation management tools components management framework described thesis author individual exception domain browser implemented interfaces designed author interact management tools 
table contents iii iv statement contribution table contents vi list figures list abbreviations xiii chapter motivation policy framework requirements policy specification language policy deployment contribution thesis structure chapter background related security policy overview access control models security management policy specification approaches logic authorisation languages high level policy languages security trust specification management policy specification network policy specification policy management architectures security architectures tool support background domains policy concepts role management framework problems vi table contents vii chapter basic policy constructs information model domain scope expressions access control policies authorisation policies basic policy constraints information filtering delegation policies subject policies obligation policies refrain policies common elements specification event definitions constraint definitions constant definitions external specifications security policy examples chapter composite policy features groups roles type specialisation role relationships management structures management structures example security quality assurance sla management meta policies constraint policy examples additional language features example composite policy specification chapter structural operational semantics structure operational semantics lookup functions state store object operations viii table contents modelling runtime commands authorisation policy semantics program execution types instantiation action execution access control decision constraints subject target evaluations policy life cycle commands delegation policies mapping delegation authorisation policies semantic rules obligation policies events obligation policy execution composite policies groups roles domain system model chapter policy compiler scenario design choices policies runtime objects compiler design implementation policy specification support chapter policy management platform deployment model overview policy administration toolkit main console policy distribution management console tool domain membership changes policy management component evaluating constraints enforcing refrains handling events access control enforcement table contents ix composite policy enforcement groups role management chapter critical analysis relationship relevant critical evaluation framework policy language design management architecture critical evaluation implementation chapter review discussion achievements language specification deployment model implementation management toolkit closing remarks bibliography appendix information model class diagram appendix syntax specification grammar predefined libraries appendix formal semantics syntax structural operational semantics alloy model domain system list figures policy survey areas classification access control models policy levels specification approaches uml meta model enterprise viewpoint language ietf policy core information model ietf policy architecture security architecture graphical display domain structure domain browser role model basic policy object class hierarchy domain scope expressions syntax authorisation policy syntax authorisation types instantiations filters positive authorisation actions partial departmental information class diagram delegation policy syntax delegation policy example cascaded delegation relation authorisation delegation policies hypothetical domain structure delegation actions involved printing payroll file colour printer obligation policy syntax refrain policy syntax syntax constant definitions mapping label bell lapadula policy domain structure mapping bell lapadula policy domain structure composite policy object class hierarchy group construct syntax role construct syntax inheritance syntax role hierarchy relationship construct syntax management structure syntax list figures xi management structure components security quality assurance system architecture roles relationships management structures single tn region meta policy syntax example policy specification semantics system configurations transition rules policy life cycle access control model example constraint target state delegation hops configurations transition rules obligation policies obligation policy execution graphical alloy domain system model research institution partial domain structure runtime basic policy object classes domain scope expression class hierarchy domain scope expression runtime representation constraint class hierarchy constraint runtime representation event class hierarchy events runtime representation obligation actions class hierarchy obligation action runtime representation positive authorisation actions runtime representation expression class hierarchy compiler framework compiler implementation generated java code snapshot policy editor management system architecture management system architecture implementation policy management cycle toolkit main console configuration tool tool implementation interfaces policy deployment steps management console tool xii list figures managing policy life cycle domain membership monitoring domain parent changes policy management component refrain filter tables event handler adapters event consumers access control enforcement user role management steps user role management tool list abbreviations ac aco ast cim cops corba dac dmtf dse ec ic ide ietf ldap mac ocl oco omg access controller authorisation control object authorisation enforcement object syntax tree common information model common open policy service common object request broker architecture discretionary access control distributed management task force domain scope expression enforcement component intermediate code integrated development environment internet engineering task force java dynamic management kit java management application programming interface java management extensions java naming directory interface lightweight directory access protocol mandatory access control object constraint language obligation control object obligation enforcement object object management group orb pdp pep pmc rat rco rpt rbac rbm sla snmp urd object request broker policy core information model policy control object policy decision point policy enforcement point policy management component refrain action table refrain control object refrain enforcement object refrain policy table role access control role management service level agreement simple network management protocol user profile object user representation domain xiii chapter policy management widely employed promising solution managing enterprise wide networks distributed systems 
systems driven business needs require management solutions self adapting dynamically change behaviour managed system 
today internet environments security concerns tend increase programmable mechanisms introduced enable adaptation 
furthermore heterogeneity security mechanisms implement access control render security management important difficult task 
focal point area policy management notion policy means driving management procedures 
technologies building management systems available specification deployment policies scarce 
precise explicit specification implementable policies important order achieve organisational goals currently available technologies 
thesis address problem policy specification enterprise wide distributed systems 
propose policy specification language show guides design strongly distributed management architecture 
chapter discuss motivation ideas thesis identify requirements policy management framework conclude highlighting contribution presenting outline structure thesis 
motivation typical enterprise network system consists large number heterogeneous network devices routers servers running variety applications offering services large number users 
devices services applications servers users relationships targets management systems manage enterprise networks 
complexity managed systems results high administrative costs long deployment cycles business initiatives imposes requirements management systems 
requirements long recognised importance increasingly critical management distributed order scalable cope size enterprise networks ii management procedures automated reduce administrative section 
motivation costs 
manual management expensive effort time needed management increases exponentially system expands 
networked systems increasingly driven changing business needs management complex 
order adapt changing business requirements distributed systems switch traditional client server model service driven model network new approach provision network computing concentrates services want provide 
services range low level services manage relationships networked devices value added services provide users sun 
networked environments designed highly adaptable support rapid deployment customised services 
management needs dynamic flexible deal evolution systems managed 
requirements management systems identified facilitated policy management approaches support distribution automation dynamic adaptation behaviour managed system achieved policies 
main benefits policy improved scalability flexibility management system 
scalability improved uniformly applying policy large sets devices objects flexibility achieved separating policy implementation managed system 
policy changed dynamically changing behaviour strategy system modifying implementation interrupting operation 
policy management largely supported standards organisations internet engineering task force ietf distributed management task force dmtf network equipment vendors 
enterprises increasingly leveraging internet technologies adopt business practices expose internal resources customers require enterprise wide authorisation policies easily established implemented 
authorisations enforced application level network elements explicit authorisation policies precisely unambiguously stated define set acceptable requests 
various techniques emerged programming network elements support adaptive services active networks mobile agents management delegation 
approaches support programming new functionality network elements host devices increase security concerns regarding access network resources services 
authorisation policies specify users permitted program network elements services users permitted access circumstances 
plethora mechanisms enterprise computing systems provide security different levels application level databases object middleware level level network level 
addition access control typically distributed chapter 
heterogeneous components enforce authorisation policies variety target objects 
proliferation non integrated security mechanisms products independent administration application development interfaces leads separate authorisation policy implementations individual application system 
difficult support global security policies accordance enterprise access control goals 
possible provide consistent security distributed object system associated legacy systems 
policy separated security mechanisms enforce access control order enable specification integrated administration global policies 
delegation access control systems cater temporary transfer access rights users agents 
secure delegation administrative functions common organisational systems security management delegated hierarchical basis 
user ability delegate access rights tightly controlled security policies especially systems allow cascaded delegation access rights 
management security distributed systems interdependent needs services hyland 
catering security management involves specification deployment access control policies providing support user registration logging auditing access critical resources responding security violations repeated attempts delete sensitive file 
security specifications cover obligation policies assign responsibility performing actions related security management enforcement 
addition policy system self managed policies specified authorised modify policies 
managing security heterogeneous distributed environments expensive errorprone requires security administration distributed multiple policy administrators difficult provide consistent security policies entire system 
necessary analyse security policies conflicts inconsistencies may lead system insecure states 
analysis policy specification important order ensure enterprise security goals met 
large scale systems large numbers users policies possible analyse policies order check existence policies implement high level security goals organisation 
involves subject target review policy identify policies apply certain subjects target objects assumes things policy notation analysed ii centralised access deployed policies 
security administration large intra inter enterprise systems requires management access controls roles relating permissions organisational positions groups individual identities 
role administration proven important technique section 
policy framework requirements reducing administrative costs 
addition large constantly changing population managed objects systems requires policies specified terms groups objects individual ones 
policy specification individual objects scale large enterprise systems 
management policy evolutionary process 
policy resource allocation association policy devices entities implemented policies subject frequent reviews changes 
decentralised administration large complex organisational structures difficult error prone administrators isolated details underlying implementations policy representations 
achieved tools allow integrated administration hide heterogeneity devices complexity policy deployment 
thesis define policy persistent declarative specification derived management goals rule defining choices behaviour system definition policy moffett sloman 
definition identifies various properties policy persistent sense command perform action policy 
addition policies relatively static compared state managed system 
declarative sense policies define choices behaviour terms conditions predefined operations actions invoked changing functionality actual operations specify behaviour desired behaviour achieved maintained 
derived management goals view policies derived business goals service level agreements trust relationships 
refer management goals high level policies thesis 
policy framework requirements section identify requirements need addressed defining policy management framework 
main requirement design language specify security management policies 
framework address issue policy deployment variety application areas variety platforms systems 
requirements identified section derived experience gained policy group imperial college past years survey literature policy management 
chapter 
policy specification language lot greater scope distributed systems management resulted architectures technologies provide basic infrastructure tools required implement policy management solutions 
includes mechanisms protocols models management paradigms proprietary solutions problems involved area 
need integrate various solutions enable engineering integrated management systems acknowledged years emphasis placed policy specification stone information models managed objects 
believe common high level language different applications policy management related security network management important 
list requirements language specification support authorisation policies explicitly specify set acceptable requests system 
request subject defined terms action object authorisation policies define relationship subjects actions target objects 
authorisation policy specification allow positive negative authorisations order conveniently support exceptions samarati 
negative authorisations supported security platforms windows nt temporarily remove access rights subjects 
implementation independent authorisation policies map various access control mechanisms firewalls operating systems object middleware databases programming languages java 
delegation policy specification cater temporary transfer access rights agents acting behalf client 
delegation policies enable decentralised privilege administration permitted discretionary access control models allow users delegate privileges 
constraint authorisations including temporal authorisation bertino restricting validity policy state system state policy targets 
constraints set policies order restrict policies specified system certain conditions prioritise policies model known constraints separation duty user role role permission assignment constraints 
event condition action rules define management actions need performed periodically triggered events 
policies specify security management actions quality service rules general context constrained form programming network elements user agents 
section 
policy framework requirements structuring techniques facilitate specification policies relating large systems millions objects 
requires ability apply policies large collections objects specifying policy individual objects 
possible specify policies heterogeneous target objects grouped arbitrary applicationspecific criteria 
composite policies allow basic security management policies relating roles organisational units specific applications grouped 
composite policies essential cater complexity policy administration large enterprise information systems 
reuse parameterisation policy specifications 
analysis policies conflicts inconsistencies specification 
includes ability determine policies apply object objects particular policy applies 
declarative languages analysis easier 
self management treating policies objects order enable specification policies targets policies 
provides policy control access policies automated activation deactivation policy objects events support security managed system self adaptation 
addition requirements design policy language address extensibility cater new types policy may arise 
ease language comprehensible easy policy users 
case errors inevitable 
policy deployment architectures enforcing policies moving strongly distributed paradigms technologies mobile code distributed objects intelligent agents programmable networks 
borrowing terminology martin paradigms management task delegated distributed entities actively participate management decision making called strongly distributed 
entities interpret enforce policies behaviour dynamically changed policies 
contrast weakly distributed paradigms management decision making concentrated managers distributed agents entities acting merely data collectors 
example osi management framework iso iec 
thesis aim design strongly distributed management architecture generic policy language satisfies requirements discussed previous section 
identify requirements policy deployment enforcement chapter 
support compilation policies different runtime representations requirements underlying services applications storage distributed directory services 
centralised access policies stored distributed repositories possible order allow analysis deployed policies 
flexible distributed enforcement access control policies variety security platforms mechanisms 
need application developers code customised security application avoided integration existing new applications access control enforcement mechanisms possible minimum overhead 
automated distribution policies enforcement components dynamic adaptation management system changes stored policies managed objects policies apply 
include ability easily enable disable deployed policies retract enforcement components 
support role management existing access control mechanisms 
includes assignment subjects roles automated enforcement role policies subject assigned role selective activation deactivation assigned roles subjects 
implementation tools enable administrators manage policy large scale systems 
tools hide low level implementation details support specification deployment coordination policies system allow easy user device review policy 
contribution thesis define framework specification deployment policies support security general management enterprise wide distributed systems 
main contribution thesis generic policy specification language design strongly distributed architecture deploying policies 
propose language specifying security management policies declarative simple policy administrators 
language builds experience gained policy management imperial college past years sloman sloman marriott lupu lupu 
refined elaborated concepts resulting experience integrated policy management framework presents significant engineering challenge constitutes main contributions thesis 
policy language designed closely requirements identified section novel aspects lie fact includes support wide range policy requirements section 
contribution particular emphasis flexibility scalability extensibility 
existing concentrates specific application areas specification methodologies scale provide needed flexibility 
proposed language borrows documented typing inheritance features object oriented languages provide reusability 
policy types instantiated multiple times allowing parameterisation policies application system specific parameters 
addition types extended specialisation infinite depth permitting scalability preserving structured specification 
language introduces flexibility different policy instances created cater special conditions 
example similar service control policies may applied servers different sites organisation different times 
policies instantiated common policy type servers policies apply time interval policies apply specified instantiation parameters 
language includes policies range single basic rules access control management adaptation organisational policies structure responsibility organisational models 
roles relationships configurations management structures enable specification policies large enterprise wide systems 
reflect management responsibilities access rights users roles organisation configurations roles departments divisions organisational structures 
issues delegation policies information filtering access controls specification application specific constraints separation duty addressed language 
deployment architecture novel allows automated distribution policies enforcement components avoiding need manually manage associations policies entities implement 
facilitated fact policies explicitly identify subjects targets terms domains actual objects system 
domains unit management similar file directories operating systems provide hierarchical structuring objects 
domains enables consistent state deployment maintained membership objects domains change 
deployment architecture addresses issue compiling policies variety underlying specifications access control enforcement support uniform implementation policies heterogeneous systems storage policies distributed repositories enforcement policies specified roles 
proposed policy framework directly suitable security management focus thesis applied areas management quality service storage configuration management 
enforcement architecture meant model chapter 
guide management proposed language 
restricted specific communication protocols mechanisms information models simple ideas implemented existing technologies protocols 
proof concept describe prototype implementation enforcement architecture covers subject management policies roles 
implementation includes policy administration toolkit supports specification management policies 
comprises integrated development environment ide policy compiler tools managing policies roles runtime 
thesis structure chapter provide survey related concentrating policy specification 
give account security management approaches including models languages 
concentrate area policy management discuss advances related ideas thesis 
conclude account background thesis 
chapters proposed policy specification language syntax usage 
chapter describe basic policy features language include authorisation delegation policies access control obligation refrain policies subject management specifications 
features language enable composition basic policies reusability allow role management described chapter 
chapter includes description meta policies specify application specific constraints specified individual policies 
chapter operational semantics policy language term rewrite system 
semantics provide unambiguous description execution various elements policy specification enable policy analysis 
chapter devoted description policy compiler design implementation 
approach generating java objects policy specifications supporting multiple back ends mapping policies variety underlying representations 
describe tool support specifying policies 
chapter describe enforcement architecture deployment policies 
architecture includes storage policies distribution enforcement automated distributed entities 
provide overview prototype implementation 
comprises section 
thesis structure enforcement obligation refrain policies enforcement composite policies roles policy management toolkit 
chapter give critical evaluation chapter conclude suggest directions 
chapter background related chapter give account related area policy specification deployment followed description concepts thesis 
choose describe related policy management imperial college separately related forms basis policy framework thesis 
start providing overview security policy models follow description related areas policy specification focus survey policy management architectures tool support 
shows areas related layered approach building policy management systems 
note lot related discussed chapter carried concurrently thesis 
tool support policy specification approaches policy management architectures policy management practical specify policy deploy policy policy survey areas security policy overview definitions frequently proposed computer security identify primary objectives security confidentiality called secrecy related disclosure information integrity related modification information availability related denial access information 
achieve objectives mutually supportive technologies authentication access control audit 
access control concerned limiting activity legitimate users successfully authenticated process ensuring access system resources controlled accesses authorised take place 
basic components access control system subjects targets rules specify ways subjects access targets 
set high level rules access control regulated traditionally called access control policy samarati 
study access control identified number useful access control models provide formal representation security policies allow section 
security policy overview proof properties access control system 
note term policy literature refer high level security policies defined actual authorisation rules enforced 
access control models access control policies traditionally divided discretionary mandatory policies 
discretionary policies concerned specification authorisation rules govern access users information mandatory policies concerned controlling information flow objects system 
information flow policies described separate type policy directly related issue data confidentiality 
role access control policies attracting increasing attention particularly commercial applications seen alternative traditional discretionary mandatory access control 
shows relationship generic models mentioned 
view role policies closely applying principles discretionary access control 
hand information flow policies closely related mandatory access control 
discretionary policies information flow policies discretionary access control policies mandatory access control policies role access control policies classification access control models discretionary access control dac policies restrict access objects identity subjects groups belong 
dac access control discretion user controls discretionary sense subject certain access permissions pass permissions subject 
notion delegation access rights important part system supporting dac 
basic definitions dac policies access matrix model framework reasoning permitted accesses 
access matrix model state system defined triple set subjects set objects access matrix rows correspond subjects columns correspond objects entry reports privileges access matrix model remains main mechanism reasoning dac extensions proposed 
abadi abadi calculus access control formalises access control lists theories deciding requests granted 
calculus notion principals sources requests chapter 
background related includes simple composite principals principals defined potentially nested groups 
view delegation basic primitive define ability principal give principal authority act behalf 
specification rules define conditions delegation access rights take place neglected security policy specification languages proposed calculus able support temporal constraints authorisations delegations 
bertino bertino propose formal model extending authorisations temporal constraints 
temporal expression associated authorisation specify periodic authorisations restrict validity specific time periods 
addition model includes derivation rules enable runtime derivation new authorisations presence absence authorisations specific periods time 
discretionary policies samarati acknowledges need attach general conditions authorisation rules specify validity system state state objects authorisation defined accesses previously executed history authorisations 
researchers identify need positive negative authorisations way conveniently specify exceptions authorisation rules samarati 
negative authorisations specify accesses granted temporarily remove access rights subjects positive authorisations applied 
combined positive negative policies brings problem potential inconsistencies positive negative policy apply access lupu 
mandatory policies mandatory access control mac policies enforce access control basis fixed regulations mandated central authority 
mandatory security policies typified bell lapadula lattice model 
lattice models defined deal issue data confidentiality concentrate restricting information flow computer systems 
achieved assigning security classification subject active entity execute actions object passive entity storing information system 
subjects objects form lattice classification enforce fixed mandatory policies regarding actions subjects execute objects 
bell lapadula model inspired lattice access control models summarised 
bell lapadula identifies objects subjects defines operations subjects perform objects execute observation alteration read observation alteration append observation alteration section 
security policy overview write observation alteration model defines set totally ordered classifications top secret secret classified unclassified set categories partially ordered set inclusion nato nuclear 
level defined level components classification set subset set categories subset levels related ordered relation specified symbol denote relation levels 
object assigned exactly level called classification object subject assigned levels maxl 
maxl called clearance subject static level maximum level subject current security level subject 
note true maxl 
bell lapadula defines properties constitute mandatory access rules model observed simple security property subject read access objects clearance subject able observe object true maxl 
property star property subject able read object true 
subject able write object true 
subject able append object true 
conceptual framework bell lapadula model forms basis derived models biba model see description anderson 
biba model uses similar controls bell lapadula model providing integrity data 
non discretionary policies administrative policies sandhu determine authorised modify allowed access rights exist discretionary policies 
mandatory policies access control determined entirely basis security classification subjects objects 
administrative policies divided centralised single group allowed revoke authorisations users 
ii hierarchical central responsible assigning administrative responsibilities administrators 
administrators revoke access authorisations users system chapter 
background related organization chart 
iii cooperative special authorisations resources granted single needs cooperation 
iv ownership user considered owner objects creates 
owner revoke access rights users object decentralised owner administrator object users privilege administering authorisations object 
discussion gives rise form access control called non discretionary access control abrams addition traditional classifications discretionary mandatory 
identifies situations authority vested users controls delegation propagation authority 
abrams graphically explains envisions authority tree routed security administrator mandatory case tree branches discretionary case branches extend user non discretionary case branches extend user 
global persistent access control policy relying access control decision information directly controlled security administrator non discretionary policy delegating authority explicit 
type mixing dac mac enriching discretionary policies military restrictions achieve control information flow commercial applications database systems samarati 
discretionary policies enforce control flow information information acquired process making possible processes leak information users allowed read 
myers myers extend idea multi level lattice security policies mechanisms allow owners information declassify information 
role policies idea role specification policies existed time approaches related collection privileges assigning authorisation database systems date back early named protection domains way grouping policies needed accomplish specific task baldwin 
role access control rbac acknowledged separate model gligor sandhu 
role models regulate access users information basis activities users execute system 
rbac role defined set access rights associated particular position organisation particular working activity 
rbac models simplify authorisation management including mechanisms assigning access rights users roles specifying access rights terms users permissions users assigned roles user assumes permissions associated roles user assigned 
section 
security policy overview sandhu sandhu specified conceptual rbac models effort standardise rbac 
discuss models order provide overview features supported rbac implementations 
rbac contains users roles permissions sessions 
permissions attached roles users assigned roles assume permissions 
user establish session activate subset roles user assigned 
rbac includes rbac introduces role hierarchies sandhu 
hierarchies natural means structuring roles reflect organisation lines authority responsibility specified inheritance roles 
role inheritance enables reuse permissions allowing roles specified junior senior roles inherit permissions 
example member research staff role academic institution inherits permissions employee role considered junior research staff member 
propagation permissions role hierarchies simplifies administration reducing considerably number permissions system desirable 
organisational hierarchies correspond permission inheritance hierarchies employee role may permissions research staff role inherit specific employee role 
situations lead exceptions complicate specification role hierarchies moffett 
rbac includes rbac introduces constraints restrict assignment users permissions roles activation roles sessions 
constraints specify application depended conditions satisfy defined control principles principles privilege separation duties 
rbac combines rbac rbac provides role hierarchies constraints 
sandhu sandhu propose updated set rbac models effort formalise rbac 
models called flat rbac hierarchical rbac constrained rbac symmetrical rbac correspond rbac rbac models 
updated models define precisely basic features implemented rbac system description remains informal 
number variations rbac models developed proposals extend model notion relationships roles barkley idea team allow team access control set related roles belonging team activated simultaneously thomas 
security models years sophisticated security models proposed formalise security policies required commercial applications 
known clark wilson model clark attempts formal way commercial data processing practices 
main goal ensure integrity organisation accounting system chapter 
background related improve robustness insider fraud 
clark wilson model recommends enforcement main principles principle formed transactions data manipulation occur constrained ways preserve ensure integrity data principle separation duty 
reduces possibility fraud damaging errors partitioning tasks associated privileges cooperation multiple users required complete sensitive tasks 
authorised users assigned privileges lead execution conflicting tasks 
principle adopted important constraint security systems 
models include security policy model specifies clear concise access rules clinical information systems anderson 
model access control lists authors claim express bell lapadula lattice models 
chinese wall policy see description anderson developed formal model security policy applicable financial information systems prevent information flows cause conflict interest individual consultants 
basis model people allowed access information held conflict information possess 
model attempts balance commercial discretion mandatory controls hierarchical organisation data 
falls category lattice access control models 
access control policy specification trends proposals include trend languages able express different access control policies single framework order provide common mechanism able enforce multiple policies 
enables uniform specification composition access control policies administrative domains number different platforms 
give account area sections 
direction certificate access control aimed specifying trust policies access resources un trusted sources internet 
trust long tied authorisation access control consists deciding agent statement trusted statement example user may trusted obeyed says files deleted abadi 
certificate authorisation part trust management systems see section 
security management security models access control specification major research topics long time relatively little exists support specification operational network security section 
security policy overview management 
traditionally security management considered sub function network management identified functional areas osi management framework defined osi management framework security management concerned actual provision encryption authentication techniques management including reports concerning attempts breach system security 
important aspects identified managing security environment network including detection security violations maintaining security audits ii performing network management task secure way 
sloman sloman defines security management support specification authorisation policy translation policy information security mechanisms control access management key distribution monitoring logging security activities 
hyland define security management real time monitoring control active security applications implement security services 
manages risk ensuring security measures operational balance current conditions compliant security policy 
janson janson notes main objective security management create delete activate suspend query update maintain status managed security objects continuous gathering distribution information ongoing security relevant activities 
define access control management sub area security management concerned maintenance privilege control attribute lists distribution network 
ietf defines security policies policies dealing verification client identities permitting denying access resources selecting applying appropriate authentication mechanisms performing accounting auditing resources moore 
active aspects security policy specification identified definitions security management reported include stipulation actions performed events security violations detected 
aspects specified notion event rules proposed approaches management policy specification see section 
rules called obligations bound authorisation policies 
minsky minsky identify obligation conjunction authorisation policies execution actions permitted authorisations requires triggers execution obligation perform certain actions 
type policy considered expressed approaches examine section 
chapter 
background related policy specification approaches definition policy see section identified management goals policies derived termed high level policies 
literature find different opinions number levels policy specification 
called policy hierarchy moffett weis represents different views policies relationships policies different levels hierarchy abstractions policies purpose refining high level management goals low level policy rules enforcement fully automated 
number levels arbitrary accept levels policy specification high level policies referred management goals business goals service level agreements trust relationships natural language statements 
high level policies enforceable realisation involves refining policy levels outside scope thesis 
specification level policies referred network level business level policies high level policies researchers 
policies specified human administrator provide abstractions low level policies precise format 
policies relate specific services objects interpretation automated 
low level policies configurations device configurations security mechanism configurations access control entries firewall rules directory schema entries 
line separating low level policies device configuration clear directly specifying policies level bottleneck scalability interoperability 
summarises approaches specification level policies indicated order ease specification flexibility top bottom 
divide approaches main categories policy specification languages rule specifications formal logic languages 
human input standpoint best way specify policies policy language provides considerable flexibility compared approaches 
generic high level language compromises ability analyse policy specifications process considerably simpler design declarative languages 
rule approach policies specified sequences rules form condition action applied quality service management ip networks 
logic approaches driven need analyse policy specification generally fail directly map implementation easily interpreted humans 
formal logic specification security policies 
section 
policy specification approaches policy levels high level policies specification level policies low level policies configurations policy specification approaches policy specification language rule approach formal logic approaches policy levels specification approaches ease specification flexibility higher abstraction difficulty analysis ways divide discussion various policy specification approaches granularity specification functionality application domain 
start presenting approaches specify security polices including logic languages high level languages specification trust 
area management policy specification followed approaches specific network management policies quality service traffic routing 
logic authorisation languages formal logic approaches specify security policies generally intuitive easily map implementation mechanisms 
assume strong mathematical background difficult understand 
authorisation specification language asl jajodia example formal logic language specifying access control policies 
provides support role access control language scale large systems way grouping rules structures reusability 
authorisation rules identify actions authorised specific users groups roles composed roles provide reusability explicit mechanism assigning authorisations roles specified part condition authorisation rules 
example authorisation rule asl states subjects belonging group employees soft developers authorised read file 
file read employees soft developers predicate specify negative authorisations sign front action predicate indicates modality authorisation 
explicit specification delegation way specifying authorisation rules groups target objects related type 
predicate defined language specify derived authorisations existence absence rules authorisations system 
addition predicates done specify history dependent authorisations actions previously executed subject 
language includes form meta policies called integrity rules specify application dependent conditions limit range chapter 
background related acceptable access control policies 
jajodia language extended predicates evaluate hierarchical relationships elements system membership users groups inclusion relationships objects supervision relationship users 
type logic asl called stratified clause form logic 
barker barker adopts similar approach express range access control policies stratified clause form logic emphasis rbac policies 
author form logic appropriate specification access control policies due simple high level declarative nature 
function free normal clause logic adopted barker defines normal clause expression form lm 
head clause atom lm conjunction literals constitutes body clause 
conjunction literals lm true proved true proved 
literal atomic formula negation normal theory defined finite set normal clauses 
stratified theory extends normal theory eliminating forms recursion negation computation theory efficient 
negation literals specify negative permissions barker show policies specified stratified logic automatically translated subset sql protect relational database unauthorised read update requests 
example barker demonstrates approach permitted ura activate senior rpa clause specifies user permission object assigned role active inherits permission 
expression assumes predicates defined activate denote active ura assign user role rpa assign permission object role denote role senior 
describes language express security policies information systems logic permissions obligations type modal logic called deontic logic 
standard deontic logic static dynamic centres impersonal statements personal see specification policies relationship explicitly stated subjects targets 
approach accepts axiom pp permitted equivalent obliged suitable definition permission 
axiom appropriate modelling obligation authorisation policies need separated 
obligation policy requires relevant authorisation policy permit actions defined obligation having obligation action imply permission execute action 
section 
policy specification approaches role definition language rdl hayton formal language horn clauses defined oasis architecture secure interworking services defined cambridge university 
rdl sets rules indicate conditions client may obtain name role role synonymous named group 
conditions entry role described terms credentials establish client suitability enter role constraints parameters credentials 
rdl falls category certificate access control adopted trust management systems described separately section 
example authorisation rule rdl establishes right clients assigned role invoke append method possess certificate called km issued login service trusted server logged km trusted machine 
append field login km roles rdl considered credentials assign clients roles example user belongs roles rdl ill defined notion delegation roles delegated individual access rights order enable assignment users certain roles 
notion election introduced enable client delegate role possess clients 
believe assignment users roles controlled user assignment constraints 
example hayton specifies chief examiner may elect logged user belongs group staff examiner examination subject examiner login role access control researchers concentrated formal specification languages implement specific concepts described rbac models emphasis specification constraints 
chen chen introduce language set theory specifying rbac constraints translated order predicate logic language 
define rbac system state collection attribute sets describing roles users privileges sessions assignments users roles permissions roles roles sessions 
define constraints rbac specification restrictions rbac states called chapter 
background related invariants state changes called preconditions 
model specify constraints rbac ways treating invariants hold times ii treating preconditions functions assigning role user 
define set global functions model operations performed rbac system specify constraints include conflicting roles users conflicting roles sessions users prerequisite roles roles respect users 
example chen invariant precondition user role assignment indicate assigned roles conflicting role set 
rn user set 
um check condition role set role set non deterministic functions introduced language replace explicit quantifies 
selects element set returns set element input 
rsl ahn formal language extends ideas introduced chen specifying separation duty properties role systems 
language covers static dynamic separation duty constraints grammar simple expressions complicated inelegant 
time defined part state rbac system defined chen proposed languages described specify temporal constraints 
specification temporal constraints role activations addressed bertino bertino extends rbac models temporal model called 
propose expression language specify types temporal constraints periodic activation deactivation roles periodic expressions ii specification temporal dependencies role activations role triggers 
role activated deactivated means role triggers specified rules automatically detect activations roles 
role triggers time external requests allow administrators explicitly activate deactivate role specified form prioritised event expressions 
example bertino shows periodic expressions pe pe role triggers rt rt 
periodic expressions state role doctor night duty active night 
role triggers state role nurse night duty active role doctor night duty active 
example symbols vh stand high high respectively denote priorities execution rules 
section 
policy specification approaches pe night time vh activate doctor night duty pe day time vh deactivate doctor night duty rt activate doctor night duty activate nurse night duty rt deactivate doctor night duty deactivate nurse night duty general logic approaches policy specification allow formal reasoning specified policies enable properties specification proved aimed human interpretation directly map implementation 
logic important area policy refinement high level policy specifications refined formats amenable direct implementation analysis 
example michael michael describe suite tools serve expert database management system automate process mapping natural language policy statements equivalent order predicate calculus 
proposal maps statements valid password issued authorised user allow user logon 
user logon obtain access system 
access granted valid password entered complete logon modal logic shown answers queries policies password character part member size high level policy languages security efforts security policy specification focus formal logic approaches proposed high level security languages 
security policy language spl ribeiro event driven policy language supports access control history obligation policies 
spl implemented event monitor event decides allow disallow ignore event 
events spl synonymous action calls target objects queried determine subject initiated event target event called attribute values subject target event 
spl supports types sets group objects policies apply groups categories 
groups sets defined explicit insertion removal elements categories sets defined classification entities properties 
building blocks policies spl constraint rules composed specific tri value algebra logic operators 
simple constraint rule comprised logical binary expressions establish domain applicability decide acceptability event 
extract ribeiro shows examples simple rules composition 
note conflicts positive negative authorisation policies avoided tri value algebra prioritise policies combined demonstrated composite rule example 
keyword ce examples refer current event 
chapter 
background related event object owned author event allowed ce target owner ce author true payment order done owner payment order ce target type ce action name approve ce author ce target owner implicit deny rule 
deny true false simple rule conjunction default deny value deny higher priority spl defines sets called specify history policies restricted form obligation policy 
type obligation supported spl conditional form obligation triggered pre condition event principal action principal done action enforceable transform policy dependency event shown supported way similar history policies principal action principal action spl obligations additional constraints access control system enforced security monitors ribeiro obligations managers agents execute specific actions occurrence system events independent access control system 
notion policy spl group set definitions rules specify security policies parameterised policies defined classes allow parameterised instantiation 
instantiation policy spl means activation policy instance control policy life cycle provided 
re specifications supported inheritance policies 
policy inherit specifications policy override certain rules sets 
policy constructs model roles case sets policy specify users allowed play role playing role 
rules nested policies inside role policy specify access rights associated role 
spl provides ability hierarchically compose policies instantiating inside policies enabling specification libraries common security policies building blocks complex policies 
authors claim hierarchical composition helps restrict scope conflicts policies clear may conflicts policy hierarchies 
note spl cater specification delegation access rights subjects explicit support specifying roles 
example ribeiro defines policy allows members clerks section 
policy specification approaches team access objects type invoice 
actual policy permits access specified acl separately instantiated keyword new policy clerks usually role simplicity group team clerks invoices object type invoice collection invoices doctype invoice simple policy clerks perform action invoices new acl clerks invoices tower language designed specify rbac policies 
language supports basic rbac model elements extended target objects access controlled 
tower provides structures define objects privileges permissions users roles allows definitions multiple structures blocks bounded statements enable reusability common elements 
note privileges define specific access type object permissions composed privileges roles contain set permissions 
simple set variables defined block enable system values id user time access object structures defined block 
variables enables fine grained authorisations ability base access control decisions past events 
example specifies dynamic separation duty policy demonstrates definition structures tower 
example considers class cheque objects may accessed members role user permitted issue cheque 
variable issuing user represent id user issues check specification condition separation duty 
issuing user variable assigned user executes issue privilege user executes privilege 
issuing user userid issue privilege privilege issuing user user issue privilege privilege privilege issuing user user privilege check permission permission cheque class privilege issue privilege privilege permission role permissions check permission role chapter 
background related specification privileges tower allows conditions restrict validity privilege actions executed invocation methods identified privilege allowed 
privileges specified class objects restrictive realistic applications privileges normally specified sets objects grouped reasons class type objects 
addition need explicitly define object structures object needs referred permissions language impractical large scale systems objects described interface definition languages 
addition tower concept ownership object structure owner control object structure making language unnecessarily complicated 
specification roles tower problematic 
role defines roles mutually exclusive role conditions role active session 
restricts role specific application roles organisation may defined mutually exclusive department mutually exclusive 
constraints mutually exclusive roles role activation assignment users roles separated specification role specified form meta rules meta policies sets roles 
roles tower inherit permissions roles arbitrarily specify permissions exclude 
results messy system inheritance relationships roles difficult maintain 
proposals express access control policies xml documents exemplified xacml oasis 
xacml xml specification expressing policies information access internet defined organisation advancement structured information standards oasis technical committee 
language provides xml sophisticated access control mechanism enables initiator securely browse xml documents securely update document element 
similar existing policy languages xacml specify subject target action condition oriented policy context particular xml document 
notion subject comprises identity group role granularity target objects fine single elements document 
language supports roles groups defined collections attributes relevant principal 
xacml includes conditional authorisation policies policies external post conditions specify actions executed prior permitting access 
physician may read record write medical element designated primary care physician provided email notice sent patient parent guardian case patient 
example policy specified xacml shown xml version encoding utf xmlns www oasis open org committees docs schema policy xsd xmlns xsi www org xmlschema instance section 
policy specification approaches xmlns rec com record xmlns www org committees security docs draft sstc schema assertion xsi www oasis open org committees docs draft policy xsd issuer com researchers may read medical elements patient date birth gender target com record medical www oasis open org committees docs transforms read target target com record patient www oasis open org committees docs transforms read target target com record patient patient gender www oasis open org committees docs transforms read target policy equal rec role value xsi type string researcher value equal policy policy assumes xml schema describe medical records specifies researcher may read medical element patient date birth gender 
granularity access control xacml fine policy verbose really aimed human interpretation 
addition language model include way grouping policies 
note xacml intended conjunction security assertion markup language assertions messages applied certificate authorisations 
discuss certificate authorisations section 
xacml includes architecture enforcing policies extends ietf policy architecture described section 
graphical approach specifying security constraints objects policy consists parts domain assumptions system requirement allowed assuming domain satisfied 
policies defined appearance conditional statements express authorisations objects system stated policy graphs 
policy graph annotated directed graph annotations domain requirement predicates 
nodes policy graph represent sort objects described associated domain predicate 
collectively nodes edges domain predicates form domain policy graph 
domain describes policy effect applies 
part policy graph requirement consists requirement predicates nodes edges 
node requirement predicate expression met object constitutes authorisation policy 
chapter 
background related specify form obligation policies way composing policies specifying policies groups objects apart defined classes objects 
scope approach limited satisfy requirements security management 
addition graphs conjunction textual version specify details easily expressed graphical format 
lacking making language difficult restricting expressiveness 
note graphical approach specifying policies attractive human users interesting research direction 
trust specification applications commerce internet enabled services require connectivity entities know 
situations traditional assumptions establishing enforcing access control hold subjects requests remote previously unknown users making separation authentication access control difficult 
possible solution problem digital certificates credentials representing statements certified entities establish properties holder identity 
access control decision party execute access properties party may prove presenting certificates 
approach called certificate authorisation adopted specification trust 
trust management frameworks combine authentication authorisation applications web labelling signed email active networks commerce 
blaze blaze trust management applications policymaker successor keynote 
applications answer signed queries form set requested actions supported credential set comply policy credentials public key certificates anonymous identity 
policies credentials predicates specified simple regular expressions 
context policy trust assertion local system unconditionally trusted system 
trust management systems provide interesting framework reasoning trust unknown parties assigning authorisations keys may result authorisations difficult manage samarati 
addition providing common solution authentication access control system complex 
trust policy language tpl ibm herzberg provides clearer separation authentication subjects certificates assignment authorisations subjects successfully authenticated 
tpl credentials result client assigned role specifies client permitted role section 
policy specification approaches group entities represent specific organisational units employees managers auditors 
assignment access rights roles outside scope tpl philosophy tpl extend role access control mechanisms mapping unknown users defined roles 
certificate intended format independent current implementation system uses certificates defines language xml syntax verbose 
note keynote tpl permits negative certificates interpreted suggestions trust user assign user role 
example taken demonstrate tpl 
summary policy states customer retailer employee department partner 
group defined originating retailer 
stated entities partner certificates signed original retailer placed group partners 
group department defined user having partner certificate signed partners group 
customer group consists employee certificate signed member departments group rank greater 
policy group name self group group name partners rule inclusion id partner type partner self inclusion rule group group name departments rule inclusion id partner type partner partners inclusion rule group group name customers rule inclusion id customer type employee departments inclusion function gt field id customer name rank field const const gt function rule group policy management policy specification policy description language pdl event language originating network computing research department bell labs lobo 
pdl action rule paradigm active databases define policy function maps series events set actions 
language described real time specialised production rule system define policies 
syntax pdl simple policies described collection types expressions policy rules policy defined event propositions 
policy rules expressions form chapter 
background related event causes action condition reads event occurs condition action executed 
policy defined event propositions expressions form event triggers policy defined event condition reads event occurs condition policy defined event triggered 
events primitive complex types primitive events policy defined events generated policy defined event propositions system events generated environment 
primitive event classes define attributes instances classes take actual values attributes referenced events actions conditions rule 
primitive events composed form complex events enable policies enforced situations events occur simultaneously 
event occur 
event immediately follows event 
event occurs event 
example different features language define policy service provider network rejects call requests excessive number network signalling timeouts calls overload state time rate goes reasonable number 
policy policy defined event propositions policy rule proposition 
events normal mode policy defined event restricted mode policy defined event call system event time system event power system event actions restrict calls accept calls policy description system starts primitive event normal mode triggered 
system starts normal mode power triggers normal mode normal mode sequence call time events trigger restrict mode overload threshold exceeded 
overload ratio signalling timeouts calls 
sign denotes sequence zero events 
normal mode call time triggers restricted mode count time count call restricted mode causes restrict calls mode sequence call time events trigger normal mode normal threshold exceeded 
considered reasonable timeout rate restricted mode call time triggers normal mode count time count call assumes timeout event epoch normal mode causes accept calls section 
policy specification approaches despite expressiveness pdl support access control policies support composition policy rules roles grouping structures 
language clearly defined semantics architecture specified enforcing pdl policies 
conflict resolution policies written pdl described chomicki extensions language specify workflows network management 
language program lucent switching products proves powerful variety network operations management scenarios 
group working international standards organisation iso open distributed programming model odp rm defining enterprise language part rm odp enterprise viewpoint iso iec incorporates concepts policies roles community 
community rm odp terminology defined configuration objects formed meet objective 
objective expressed contract specifies objective met configuration collection objects defined relationships 
community defined terms elements enterprise objects comprising community roles fulfilled objects relationships policies governing interactions enterprise objects fulfilling roles policies governing creation usage deletion resources policies governing configuration enterprise objects assignment roles enterprise objects policies relating environment contract governing system 
policies constrain behaviour enterprise objects fulfil actor roles communities designed meet objective community 
policy specifications specify behaviour allowed contain prescriptions case rule violated 
policies odp enterprise language cover concepts obligation permission prohibition 
odp enterprise language language sense prescribe particular notation 
number attempts define precise languages implement concepts enterprise language 
approaches concentrate uml graphically depict static structure enterprise viewpoint language exemplified steen see languages express policies uml models 
steen steen steen propose language support enterprise viewpoint policy statements specified grammar shown 
statement applies role subject policy represents permission obligation prohibition role 
grammar language concise allow composition policies constraints groups policies 
chapter 
background related constraints specified restrict activation deactivation roles assignment users permissions roles 
note object constraint language ocl omg express logical conditions clauses defined grammar 
role permitted obliged forbidden action condition satisfy condition condition condition see number 
uml meta model enterprise viewpoint language authors specify semantics policy language translating object objectoriented extension specification language examples steen demonstrate proposed language 
borrower permitted borrow item item fines pound 
forbidden borrow item item item periodical 
borrower obliged return item item today duedate loans exists loan loan item item duedate loans select loan loan item item duedate see 
policy statements specify permission prohibition respectively 
permits member borrower role borrow item fines borrower pounds 
forbids undergraduate student belonging role borrow periodicals 
obligation specifying borrower return item duedate item 
conditional item returned loan borrower specified clause 
clause constrains logic variable duedate equal duedate loan question clause contains condition obligation fulfilled 
obligations contain explicit specifications events actions executed implementation difficult 
note section 
policy specification approaches clause exception mechanism indicates happen obligation violated 
actions executed violation specified policy 
policy management applied configuration management builds monitoring software enable automation network system administration event paradigm policy configuration languages associate occurrence specified events conditions responses carried agent 
language administration system targeted bsd system operating systems connected tcp ip network burgess 
grew need replace complex shell scripts automation administration tasks unix systems allows creation single central configuration files describe host network configured 
uses idea classes group hosts dissect distributed environment overlapping sets 
host classes essentially labels document attributes different systems 
classes meaningful context particular host identity machine including hostname address network ii operating system architecture host iii user defined group host belongs iv result proposition system including time date 
policies specified classes hosts define sequence actions regarding configuration host 
example demonstrates language configuration management burgess files linux solaris hr exception host passwd mode action inform true line simply defines name files action 
second line identifies class hosts action executed followed actual command 
command line specifies agent subject policy search password files invalid mode fix inform administrator 
class membership expression specifies hosts type linux solaris time interval am am apart host labelled class exception host 
note second line specifies information single clause making interpretation policy complicated 
identifies target policy hosts falling classification condition execution policy time interval trigger specifies action executed hour 
policies stored central repository accessible host active agent host executes policies apply host 
achieved original goals scripting language suitable system administrators automates common administrative tasks unix systems 
chapter 
background related lacking functionality enable scalable policy configuration management creators admit need extensions enable enterprise level policy specification burgess 
focus specification policies full power general purpose scripting interpreted language tcl java loaded network components agents implement policies 
approaches leveraging mechanisms area active networks tennenhouse enable control resources low level 
example bos bos programs specify application policies resource management small virtual networks larger virtual network 
general approaches security concerns increased malicious improperly tested code potentially damage network 
addition difficult determine computer programs specifying different policies contradictory conflict way 
network policy specification area network policy specification seen lot attention research commercial communities 
call network policy rules define relationship clients network resources network elements provide resources 
main interest network policies manage control quality service qos experienced networked applications users configuring network elements policy rules 
notable area internet engineering task force ietf policy model considers policies rules specify actions performed response defined conditions condition action condition part rule simple compound expression specified conjunctive disjunctive normal form 
action part rule set actions executed conditions true 
type policy rule prescribes similar semantics obligation form event condition action explicit event specification trigger execution actions 
assumed implicit event particular traffic flow user request trigger policy rule 
addition ietf considering specification admission control policies rule approach suitable specifying policies 
simple admission control policies specified action allow deny request condition policy rule satisfied 
simple examples types rules administrators may want specify 
rule assures bandwidth servers share database directory section 
policy specification approaches information 
second rule gives high priority multicast traffic corporate management sub network monday nights pm pm important sports broadcasts set rate kbps monday set priority ietf define specific language express network policies generic objectoriented information model representing policy information rule approach described early attempts defining language abandoned 
policy core information model moore extends common information model cim dmtf defined dmtf classes represent policy information 
cim defines generic objects managed system elements logical physical elements systems service users provides abstractions representations entities involved managed environment including properties operation relationships 
specification information models important enable common way specifying policy 
independent actual policy specification task solve problem specifying policies 
apart ietf defining information model represent policies administer manage control access network qos resources integrated differentiated services qos management snir 
philosophy ietf business policies expressed high level languages combined network topology qos methodology followed refined policy information model mapped number different network device configurations 
vendors ietf approach graphical tools specify policy tabular format automate translation 
provide overview commercial tools section 
shows classes defined main associations 
policy rules grouped nested policy groups define policies related application specific way mechanism exists parameterising rules policy groups 
note actions conditions stored separately policy repository reused policy rules 
special type condition time period policy valid 
class covers complex specification time constraints 
policy rules associated priority value resolve conflicts conflicting rules 
approach scalable large networks large number rules specified number different administrators 
addition policy rules tagged roles 
role represents functional characteristic capability resource policies applied backbone interface frame relay interface bgp capable router web server firewall chapter 
background related role labels essentially mechanism associating policies network elements policies apply 
core policy ietf policy core information model system core core advantage information modelling approach followed ietf model easily mapped structured specifications xml policy analysis distribution policies networks 
mapping cim xml undertaken dmtf dmtf 
ietf define mapping form implemented directory uses ldap access protocol 
approaches network policy specification try extend ietf rule approach specify traffic control concrete language 
example path policy language ppl naval postgraduate school described stone 
language designed support differentiated integrated services model idea providing better control traffic network constraining path links traffic take 
rules language format userid paths target conditions action item action item condition actions action items ppl rule correspond condition action rule ietf approach 
informal semantics rule created userid dictates target class traffic may paths conditions true action items performed 
examples ppl rules stone policy net manager class faculty priority policy betty traffic class accounting day friday priority section 
policy management architectures policy states path starting node traversing node node provide high priority faculty users 
policy uses wild card character specify partial path 
states paths node node accounting class traffic lowered priority friday 
policy action items field temporal information influence priority class traffic 
note userid needed specification rules unnecessarily complicates grammar 
id creator policy information time creation priority labels attached rule better specified meta information analysis policies 
ppl provide way composing policies groups roles 
policy management architectures shows policy management architecture defined ietf framework basis efforts designing policy architectures including commercial vendors 
policy management tool expected provide graphical user interface allow administrators specify policies active network translate input ldap schema store policy repository 
tool determine association policies different devices policies applicable monitor changes stored policies inform relevant policy consumers 
policy repository store policies generated management tools 
assumed policies objects stored ldap lightweight directory access protocol directory service 
policy management tool policy decision point policy enforcement point policy repository network element ietf policy architecture policy decision point pdp referred policy consumer retrieves policies policy repository interprets policies sends policy enforcement points pep routers bridges enforce 
pdp may need translate set rules receives repository format understood corresponding pep uses policy role attribute policy rule identify policy enforcement points needs send rule 
chapter 
background related functions pdp include receiving policy decision requests returning policy decisions 
send asynchronous policy decisions updates external requests 
policy enforcement involves pep applying actions pdp decision current network conditions 
conditions static source destination ip address dynamic current bandwidth availability time day 
pep enforces policy example permitting forbidding requests allocating packets connection particular queue 
pep pdp combined single component 
current ietf concentrates protocols different components efforts focusing ldap storing policies common open policy service cops protocol communication pdp pep 
note explicit event trigger ietf policy implicit event packet arrival router may trigger search applicable policies 
done characteristics packets roles attached device 
practical pep query pdp decision comparatively infrequent packets 
ietf architecture supports distribution policies push model pdp pep pull model pep request policies implicit events system 
addition automation distribution policies changes network topology changes characteristics network devices policy rules adequately addressed 
verma verma provides detailed description concepts implementation ietf framework including policy validation translation algorithms policy distribution mechanisms policy enforcement point algorithms 
security architectures architectures deploying security policies role trust management communities reported emphasis authentication techniques support authorisation 
open architecture secure interworking oasis originating university cambridge hayton example category architectures address issue enforcing access control policies roles access rights principal grouped roles principal assigned credentials 
architecture rdl language described section 
concentrating implementing rbac models existing middleware platforms 
discuss issues related implementing rbac models corba security service omg conclude possible minimal extensions corba security service 
section 
tool support carried relation keynote management system university pennsylvania define security policy architecture keromytis 
philosophy architecture illustrated 
interesting aspect architecture compilation various global high level policy specifications common lower level policy interoperability layer implemented keynote 
common policy layer implement high level policies variety mechanisms network devices 
idea identifies important requirements need common language policy interoperability layer architecture uniform enforcement policies variety mechanisms ii need enforce policies specified higher level abstraction credential authorisation system 
high level policy language compiler network information compiler policy interoperability layer keynote high level policy language firewall host router security architecture global policy local enforcement note security architectures briefly described largely ignore issues related storage policies repositories distribution policies enforcement components large scale distributed systems 
tool support verma verma describes qos tool specify service level agreements slas manipulate sla related information tabular format 
tool transforms high level policy information device configurations stores ldap directory 
tool mont focuses solely template refinement policies high level goals 
existing rbac community limited specifying access control configurations terms roles 
centralised tool thomsen translates access control configuration rbac framework target native security mechanism transported target 
web tool barkley allows administrators specify roles role hierarchies constraints implement rbac networked servers web protocols order manage access organisation web information 
chapter 
background related policy networking tool support comes industry ietf policy framework 
majority commercial tools specific quality service management include access control configuration 
list vendor products big list major commercial policy network management products nortel policy services hp cisco policy networking communications open policy system lucent technologies rules visual policy management network security novell computer associates infrastructure management solutions tivoli management framework product suite 
surveys commercial products comparisons available web see www dse doc ic ac uk research policies information 
common feature commercial tools graphical user interface typically allows administrator visually select network device managed element hierarchically arranged tree view policy targets specify policies form condition action rules selected targets 
different products allow specification varying degrees conditions policy rules including number time attributes source destination ip addresses ip type service tcp udp port numbers higher level user defined data allow user permit deny traffic conditions 
important effort common solutions support multi vendor platforms adequately supported currently available products 
addition different standards protocols implemented varying degrees different vendors 
lot products support cops main communication protocol policy information components architecture support cli configuration routers switches 
addition vendors support ldap storing policies directories major component products storing policy rules network user information order enable scalability third party interoperability 
support security available commercial products includes access control configuration firewalls routers unix windows operating systems databases web access 
products tivoli computer associates focusing enterprise level management security commerce applications support management user access rights 
section 
background background described chapters relies heavily concepts tools techniques policy management developed imperial college past years 
section aims describe concepts thesis relies 
means extensive complete description restricting scope concepts fundamental design policy framework thesis necessary understanding follows 
domains large scale systems practical specify policies individual objects need able group objects policy applies sloman 
example bandwidth management policy may apply routers particular region particular type 
authorisation policy may specify members department access particular service 
domains provide means grouping objects policies apply partition objects large system geographical boundaries object type responsibility authority convenience human managers sloman sloman 
benefits domain approach twofold policy applying domain propagate sub domains applying large numbers objects providing scalability ii moving object domain policies automatically replaced applying new domain need modify policies manually manage association policy managed objects 
membership domain explicit defined terms predicate object attributes 
domain encapsulate objects contains merely holds object interfaces similar concept file system directory may hold type object including person 
domain member domain called subdomain parent domain 
sub domain subset parent domain object included sub domain direct member parent domain indirect member file sub directory direct member parent directory 
object sub domain may member multiple parent domains 
example sub domain staff member academic employees overlap 
path names identify domains domain staff referred academic staff engineering dept employees staff object may different local names multiple parent domains delimiter domain path names 
policies normally propagate members sub domains policy applying domain engineering dept academic resources apply members domains engineering chapter 
background related dept academic resources servers engineering dept academic resources printers 
domain scope expressions combine domains form set objects applying policy union intersection difference operators scope expression employees secretary engineering dept employees admin apply members domains engineering dept academic engineering dept employees applies direct indirect members overlap domains 
symbol selects non domain objects nested domains 
thesis domain concepts unchanged apart semantics unary operators slightly modified original semantics marriott see section 
accounts engineering dept academic employees resources staff servers printers computing file domain browser colour labs red grey civil eng fred urd alice urd fred alice admin secretary resources servers accounts graphical display domain structure file printers domain browser provides common user interface aspects integrated management environment 
group select objects applying policy monitor perform management operations current implementation supports policy management 
domain browser reads data domain service provides graphical tree structured view data 
administrators domain browser manage domain structure group objects domains apply common policy modify create new objects 
objects represent users roles network components manager agents 
domain structure large terms number objects domain depth hierarchy 
domain browser implementation adopts hyperbolic tree mapping algorithm lamping allows display large numbers nodes providing effective navigation hierarchy see 
addition hyperbolic view allows domain browser display part tree uniformly 
gives users better feel entire domain structure making easier perceive context 
labs grey red colour section 
background domain browser navigation realised moving domain tree hyperbolic plane 
objects nearer centre display enlarged come focus 
example administrator focus policies sub tree domain structure selecting pol sub tree dragging near centre viewer shown right side 
implementations domain browser api available uses program module developed imperial college uses inxight star tree software development kit inxight software 
current version uses ldap directories information repository browser implementation dependent ldap data loaded sources 
policy concepts separating policies managers interpret permits modifying policies change behaviour strategy management system recoding managers 
management system adapt changing requirements disabling policies replacing old policies new ones shutting system 
imperial college concentrates types policies authorisation policies specify activities subject permitted forbidden perform set target objects obligation policies specify activities subject set target objects sloman 
policies system specified domains objects 
default policy propagates applies direct indirect members domain propagation optionally disabled 
policies establish relationship subjects perform operations target objects operations performed 
subjects interpret obligation policies authorisation chapter 
background related policies enforced access control components target host 
note subjects refer human managers automated managers entity initiating operations system 
managers subjects set policies may turn managed managers set policies target managed objects 
notation specifying policies section give overview notation specify policies marriott marriott 
notation essentially aimed specifying policies interpreted automated agents specify high level policies goals interpreted humans 
policies interpreted compiled code agents changed dynamically 
notation precise analysed conflicts tools known logic 
authorisation policies define activities subject perform set target objects essentially access control policies protect resources unauthorised access 
constraints specified limit applicability authorisation obligation policies time values attributes objects policy refers 
project managers defer activate tasks modification requests status approved project managers authorised defer activate modification requests approved 
separate permitted actions 
note constraint limit scope applicability policy objects target domain status approved 
test engineers commit edit repository db time time test engineers forbidden commit new changes edit repository database hours pm am day time constraint 
separate forbidden actions 
note default negative authorisation policy actions forbidden explicitly authorized negative authorization converted positive authorisation constraint time 
obligation policies define activities manager agent perform set target objects 
positive obligation policies triggered events 
new request mri project analysts investigate mri propose solution mri project tasks modification requests positive obligation policy triggered external event signaling new modification request issued analysts investigate propose solution modification request 
separate sequence actions obligation policy 
backup repository db positive obligation policy triggered internal event night am backup repository database 
test engineers analysts developers testing sequence progress negative obligation policy specifies test engineers disclose test results analysts developers testing sequence performed subject progress constraint state subjects 
section 
background negative obligation policies equivalent negative authorisations 
main difference lies fact obligation policies interpreted subjects authorisation policies interpreted access control components target host 
negative obligation policies act subject filters specifying actions managers refrain performing 
general format policy optional attributes brackets braces semicolon main syntactic separators 
attributes policy trigger subject action target constraint may comments comment case policy considered high level able directly interpreted 
identifier mode trigger subject action target constraint exception parent child xref identifier label refer policy 
mode policy distinguishes positive obligations negative obligations positive authorisations negative authorisations 
trigger applies positive obligation policies 
specify internal timer event clause external event clause new request event passes parameter mri agent 
examples external events temperature exceeding threshold component failing 
detected monitoring service 
marriott policy notation specifies simple events generalised monitoring service combine event sequences generate simple events mansouri 
subject policy defined terms domain scope expression specifies human automated managers agents policies apply interpret obligation policies 
target policy defined terms domain scope expression specifies objects actions performed 
actions specify performed obligations permitted authorisations 
consists method invocations comment may list different methods different object types 
multiple actions authorisation policy indicate set actions operations permitted forbidden 
multiple actions positive obligation policy imply performed sequentially policy triggered 
constraint defined clause limits applicability policy particular time period policy making valid particular date time june 
addition constraint attribute values subject policy target objects 
label prepended subject referenced constraint indicate subject attribute 
constraints evaluated time obligation chapter 
background related policy triggered authorisation policy checked see policy applies attribute values may change 
action obligation policy may result operation remote target object 
fail due remote system network failure exception mechanism provided positive obligations permit specification alternative actions cater failures may arise distributed system 
high level policies refined implementable policies 
order record hierarchy policies automatically contain parent children policies 
addition cross xref policy inserted manually obligation policy indicate authorisation policies granting permission activities 
meta policies meta policies policies permitted policies specify application specific constraints groups authorisation obligation policies person approve payment sign check 
experimentation specifying prolog lupu 
example separation duties principle specifying policies allow managers subjects payment sign payment check written prolog 
policies accounting subjects subjects actions sign actions payment targets cheque targets mode mode conflicts role management framework role framework management distributed systems defined lupu concepts section 
framework takes account organisational structure partition policy specification 
organisational structure specified terms organisational positions regional site departmental network manager service administrator service operator vice president 
specifying organisational policies people terms role positions persons permits assignment new person position re specifying policies referring duties authorisations position 
tasks responsibilities corresponding position grouped role associated position essentially static concept organisation 
position correspond manager user network services 
role position set authorisation policies defining rights position set obligation policies defining duties position 
definitions correspond concepts classic role theory section 
background postulates individuals occupy positions inside organisation associated position set activities including required interactions constitute role position 
organisational positions represented domains role considered set authorisation obligation policies position domain subject illustrated top 
person automated agent assigned removed position domain changing policies explained lupu 
urd adapter object fred auth policy role pd role pd user role agent relationship authorisation obligation policies interaction protocols user role agent subject authorisation obligation policies role model target target managed objects constraints concurrency constraints meta policies urd user representation domain pd position domain role framework contains relationships model ways roles organisation related 
relationship may group roles specifies rights duties related parties scope authorisation obligation policies valid interactions managers acting roles order achieve tasks share information agree commitments 
lupu defines rule notation specification interaction protocols managers assigned roles 
notation aims regulate exchange messages enables protocols changed runtime need recompile agents 
definition roles relationships groups policies allows specification global constraints set policies specified roles relationships 
constraints concurrency constraints variety application specific constraints specified meta policies 
lupu suggests object oriented extensions specification roles relationships enable reuse specifications 
roles relationships specified classes contain policy templates actual policy instances 
policy templates parameterised policies may chapter 
background related elements unspecified 
reuse role relationship specifications achieved inheritance 
inheritance allows role class specialised particular rights duties enables incremental refinement organisational structure specific management needs 
role management model summarised differs rbac models important ways lupu introduces obligation policies model duties managers assigned roles considered rbac models ii uses inheritance implementation specialisation role classes rbac models inheritance means reusing permissions 
rbac inheritance role instances limits ability reuse role specifications parameterising roles targets policies assigned role 
problems policy specification described suffers problems number addressed thesis 
important issue providing uniform language specifying basic role policies 
role management follows modelling approach include notation specifying roles relationships 
suggests object oriented extensions specification explored 
note classes templates discussed lupu ignores typing issues ad hoc inconsistent 
notation described provide way grouping policies reusability 
need shared declarations groups policies 
support specifying delegation policies discussed 
delegation policy allow administrators specify access rights delegated ii delegate access rights possible iii access rights delegated possible iv special restrictions delegation time constraints maximum delegation period maximum number delegation hops number different types constraints apply policy different levels specification 
single notation constraints set policies constraints activities policy specified policy constraints apply roles person may activate role role time achieved 
section 
notion positive obligation policy allowed simple events triggers assumed separate event specification tool generate simple events complex combinations events 
proven cumbersome need extend notation cope defining event sequence compositions triggers 
described notation simple variables constraint select subset subjects targets limit applicability policy example policies section generalised solution variables parameters needed 
example parameter received event useable action constraint variable reflects current resource usage policy agent accessible policy 
described notation assumes actions pre loaded policy agents similar internal methods invoked policy level 
obligation policy interpreter actions predefined order tailor particular application security fault configuration management 
action specified interpreted language java dynamically loaded agent order change extend functionality 
action script specify conditional execution sub actions execution sub action dependent result previous 
area policy specification distributed systems management received considerable attention different areas management 
approaches exist address security various management issues lack policy languages adequately cover security management policy specification built scalability features enable enterprise level management re policy specifications different situations 
policy specification languages divided main categories concentrating security specification emphasis role access control specifying actions executed response events term management policies 
security specification derives formal security models lot approaches area formal logic languages concentrating proving properties security system 
formal specifications particularly useful area security allow reasoning specified policies enable detection conflicts inconsistencies generally non intuitive directly translated implementation 
highlevel security policy languages concentrate providing user tool expressing policies environment independent way 
trust specification chapter 
background related combines authorisation authentication certificates users identities 
management policy specification covers areas configuration management network management enterprise modelling follows event condition action paradigm 
network policy management influenced condition action rule approach advocated ietf concentrates qos specification ip networks 
lot vendors implementing policy management systems ietf framework policies specified graphical tools translated ldap schema stored distributed policy repositories 
lot policy management triggered done imperial college early 
provided detailed description separately rest survey concentrated concepts techniques thesis relies 
identified issues remain resolved past imperial college motivated ideas chapters 
chapter basic policy constructs chapter describes basic features ponder policy specification language 
description language damianou damianou guide 
ponder declarative borrows features object oriented world 
language flexible expressive extensible cover wide range requirements implied current distributed systems paradigms identified list section 
chapters concentrate policy specification language formal semantics centre management architecture 
chapter basic policy features 
structures compose basic policies additional features language chapter 
language syntax simple examples 
conventions syntax chapter bold language keyword figures presenting syntax including symbols 
choices enclosed round brackets separated optional elements specified square brackets repetition specified braces 
features language left stage order discussion clearer 
complete syntax language written sablecc gagnon available appendix sablecc specify lalr grammars subset lr grammars subset context free grammars specified bnf 
concrete syntax language described ebnf damianou 
information model describing various elements language syntax define model represent information relevant management framework 
includes policies objects participate management process targets subjects policies 
shows partial class diagram information model define framework 
diagram partial composite policy classes included chapter 
define managed object 
chapter 
basic policy constructs includes domains policies enforcement components 
domain may include number managed objects domain parent 
basic policies defined sets objects formed applying set operations union intersection difference objects domains 
subjects targets policies defined terms domains indicated dependency line 
enforcement components responsible enforcement policies runtime management system 
authorisation policies components access controllers play role monitor targets host 
policy management components automated components responsible enforcing subject obligation refrain policies 
basic policies distributed enforcement components usage path line enforcement component class basic policy class 
details enforcement architecture chapter 
parent domain policy enforces enforcement component subject target grantee auth auth child authorisation delegation assoc 
policy assoc 
policy deleg deleg oblig refrain basic policy object class hierarchy various subclasses policy class shown defined discussion basic policy features language follows 
note policy classes 
users implicitly define concrete subclasses define new basic policy new positive authorisation policy 
basic policies defined parameterised types instantiated case subclasses corresponding base class information model 
shortcut user define single policy instance directly 
case corresponds instantiation unnamed policy type parameters 
define semantics language chapter 
assume policies relate objects interfaces defined terms methods interface definition language 
term subject refer users principals automated manager components management responsibility 
subject accesses target objects resources service providers invoking methods visible target interface 
section 
domain scope expressions granularity protection access control ponder interface method 
authorisations refer methods contrast elementary access 
subject target objects stored domains maintained domain service 
domains provide means grouping objects policies apply partition objects large system geographical boundaries object type responsibility authority convenience human managers described section 
facilitates policy specification largescale systems millions objects 
domain scope expressions domain scope expressions dse introduced combine domains form set objects applying policy specification subjects targets policies 
modify extend domain object library calls enhance usage 
explanation domains partitioning objects system management purposes described earlier section 
set objects domain scope expression policy applies evaluated time policy interpreted domain membership change dynamically 
note practice implementation optimisations minimise run time evaluation 
cover details deployment architecture chapter 
shows syntax adopt domain scope expressions thesis table explain different domain scope expression operators 
set union difference intersection operators equal precedence evaluated left right 
unary operators higher precedence 
note semantics unary operators modified original semantics marriott 
domain scope expression domain object domain object int value domain object int value domain object domain scope expression domain scope expression domain scope expression domain object identifier path 
domain scope expressions syntax action call collections defined ocl version specification 
included domain scope expressions allow selection subsets subject target specifications show examples chapter 
domain scope expressions composed domain objects path chapter 
basic policy constructs name defined scope type domain set assigned domain path domain library call name type domain declared scope call evaluates domain 
get evaluates domain relative domain assigned name 
syntax explanation returns non domain members domain object distinct non domain members nested sub domains recursively traversed levels domain structure 
nd nd domain returns set contains non domain members domain 
integer constant specifies domain structure traversed levels specifies direct members include distinct members sub domains 
omitted nested sub domains recursively traversed 
non domain object returns set contains non domain object 
returns set contains non domain domain members domain including domain 
integer constant specifies domain structure traversed levels 
omitted nested sub domains recursively traversed 
returns set contains object returns set contains distinct members set union 
returns set contains members set intersection returns set contains members set difference access control policies table domain scope expressions access control concerned limiting activity legitimate users successfully authenticated abrams sandhu 
emphasis access control defined abrams administrators authority specify security policies enforced access control system 
delegation propagation authority permitted scope defined security policy 
exclude language specify discretionary mandatory security policies 
ponder supports access control providing authorisation delegation information filtering policies described 
term access control policies refer types policies 
assume policies relate objects interfaces defined terms methods interface definition language 
granularity protection ponder interface method contrast elementary access read write append 
authorisation policies access rights called permissions privileges ponder specified authorisation policies 
authorisation policies define activities member subject domain perform set objects target domain terms interface method calls 
positive section 
access control policies authorisation policy defines actions subjects permitted perform target objects 
negative authorisation policy specifies actions subjects forbidden perform target objects 
authorisation policies implemented target host access control enforcement component access controller traditionally called monitor 
inst auth auth subject type domain scope expression target type domain scope expression action action list constraint expression authorisation policy syntax syntax authorisation policy shown 
constraints optional types policies specified limit applicability policies time values attributes objects policy refers 
constraints discussed detail section 
elements policy specified order 
note subject target elements optionally include interface specification specified domain policy applies 
check objects support specified operations locate interface specification 
name policy specified path identifying domain policy stored 
inst auth subject target nregion switches action load remove enable disable members domain authorised load remove enable disable objects type nregion switches domain 
inst auth subject trainee action performance test target routers trainee test engineers forbidden perform performance tests routers 
policy stored domain 
examples show direct declaration policy instances keyword inst 
language provides reuse supporting definition policy types policy element passed formal parameter 
multiple instances created tailored specific environment passing actual parameters 
shows syntax authorisation policy types instantiations 
type auth auth subject type domain scope expression target type domain scope expression action action list constraint expression inst auth auth authorisation types instantiations chapter 
basic policy constructs authorisation policy shown previously specified type subject target parameters shown example 
type auth subject target action load remove enable disable inst auth nregion switches inst auth nregion routers instances allow members execute actions profile objects nregion switches nregion routers domains respectively 
authorisation policy type specifies subject target elements policy formal parameters 
shortcut specifying body policy type 
type specification 
type auth set set subject target action load remove enable disable set type sets objects type compatible dse result sets objects evaluated runtime 
argued specification negative authorisation policies complicates enforcement authorisation system 
reasons support provision negative authorisation policies 
administrators express high level access control terms positive negative policies retaining natural way people express policies important provides greater flexibility 
negative authorisation policies temporarily remove access rights subjects need arises 
addition systems support negative access rights windows nt 
existence positive negative authorisation policies system may result conflicts 
adds need analyse policies conflict detection kind conflict may indicate potentially unforeseen problems specification 
discussion conflicts policies see lupu 
usefulness negative access rights discretionary access control policies acknowledged researchers samarati 
basic policy constraints important element policy set conditions policy valid 
information explicit specification policy 
subset object constraint language ocl omg specify constraints ponder 
ocl simple understand declarative ocl expression conceptually atomic state objects system change evaluation 
basic policy constraints limit applicability policy expressed terms predicate evaluate true section 
access control policies policy apply 
policy constraints considered conjunctions basic constraints time state 
analysis set policies substantially improved time constraints compared possible overlap state constraints simultaneously satisfied mutually exclusive relate states system component 
separate different types constraints subject target state constraints object state reflected terms attributes object interface 
action event parameters constraints event parameter values obligations action parameter values authorisations refrains 
look obligation refrain policies section 
time constraints specify validity periods policy 
time library object provided language specify time constraints 
specification constraints time predefined object operations invoked related current time 
policy compiler resolve different types constraints compile time separate constraints order aid policies 
information runtime representation policy objects implementation compiler described chapter 
inst auth subject action performance test target routers role trainee execute performance tests routers trainee 
role attribute subject constraint 
inst auth subject bgroup target action bw priority time priority members plus bgroup set video conference usa staff new york group 
constraint policy composite 
time constraint limits policy apply pm pm action constraint specifies policy valid priority parameter nd parameter action greater 
information filtering filtering policies needed transform values input parameters action information returned action 
example location service permit access detailed location information person specific room users department 
external users determine person 
databases support similar concepts views selective information records example payroll clerk chapter 
basic policy constructs permitted read personnel records employees particular grade 
positive authorisation policies may include filters transform input parameters associated actions attributes subject target system parameters time 
cases practical provide different operations means selecting information 
form authorisation policy differ normal ones possible external authorisation agent access control decision operation specified interface target object permitted 
essentially operation performed decision allow results returned subject results need transformed 
filters applied positive authorisation actions 
filter filter condition expression result expression filters positive authorisation actions action associated number filter expressions see 
filter contains optional condition filter applied 
condition evaluates true transformations assignment statements body filter executed 
keyword indicate input parameter action filter specified result transform return value action 
inst auth filter subject bgroup target action bw priority time bw priority bw priority default filter members plus bgroup set video conference usa staff new york group 
time pm video conference takes parameters bandwidth mb priority 
filter restricts parameters bandwidth mb priority 
elaborate example 
consider hypothetical class diagram information stored departmental server shown 
ssn method returns employee object ssn number 
assume authorisation policy subjects execute method ssn objects type department departmental file server 
depending subject authorisation filter allows subject see part information returned general manager see information 
departmental manager see agenda employee 
fellow employee see salary agenda budget projects employee assigned 
section 
access control policies person outside organisation see name project names meeting topics employee 
department employees resources funds reports fund report employee name ssn salary agenda meetings expenses projects resource project pname duration budget status participants partial departmental information class diagram authorisation policies specify 
inst auth subject general manager target server action ssn inst auth subject dept manager target server action ssn result result reject agenda inst auth domain employees domain external subject target server agenda meeting expense action ssn subject result reject result salary agenda projects budget subject result select result name project pname meeting topic note functions reject select reject select respectively certain attributes parameter case result action execution 
assume actions available part standard library 
delegation policies delegation access control systems cater temporary transfer access rights 
ability user delegate access rights tightly controlled security policies 
requirement critical systems allowing cascaded delegation access chapter 
basic policy constructs rights 
delegation policy permits subjects privileges possess due existing authorisation policy subjects called perform action behalf passing read rights printer order print file 
delegation ponder transfer access rights continue retain access rights delegation performed 
inst deleg associated policy name grantee type domain scope expression subject type domain scope expression target type domain scope expression action action list constraint expression valid constraint expression hops int value delegation policy syntax delegation policy associated authorisation policy specifies access rights delegated 
negative delegation policies forbid delegation certain actions 
note delegation policies meant assignment rights security administrators 
shows syntax positive delegation policy 
required part body policy grantee 
rest parts subject target action subsets associated authorisation policy specified default policy 
constraining delegation delegation constraints specify restrictions delegation performed valid cascaded delegation valid 
positive delegation policies contain delegation constraints sense negative delegation policies 
syntax negative delegation policy positive policy valid hops clauses specify delegation constraints 
delegation constraints time restrictions specify duration period delegation valid revoked 
arbitrary constraint system attributes subject target grantee action attributes 
maximum number cascading delegations allowed maximum number delegation hops levels types constraints specified valid attribute delegation policy maximum number cascading delegations allowed specified hops attribute 
see example follows 
section 
access control policies deleg delegation policy example inst deleg grantee target nregion switches action enable disable valid time duration auth nregion switches implicit auth policy delegation policy associated auth policy section 
states subject authorisation policy implicit policy delegate enable disable actions policies domain nregion switches domain 
note policy restricts target subset policy target see 
valid clause specifies delegation valid hours time creation revoked 
delegation policy specifies authority delegate control actual delegation revocation access rights 
delegation policies map authorisation policies implemented authorisations 
formalise mapping delegation authorisation policies chapter 
cascaded delegation runtime cascaded delegation allowed provided grantor grantee grantee scope delegation policy 
demonstrated authorisation policy allows objects subject scope execute actions objects target scope 
delegation policy allows objects subject scope delegate access rights assumed authorisation policy objects grantee scope 
delegate cascaded delegation subject scope target scope grantee scope cascaded delegation subject executes delegation access rights object automatically right execute delegated actions objects target scope 
furthermore delegate access rights object grantee scope 
call chapter 
basic policy constructs cascaded delegation cascaded execution delegate action counts delegation hop 
cascaded delegation take place specification time 
case delegation policy passed parameter delegation policy 
specifies grantee delegated access rights delegation policy delegate grantee second grantee scope specified second delegation policy 
passed parameter associated auth deleg deleg action lista delegate action delegate action action action relation authorisation delegation policies summarises relation authorisation delegation policies elements 
top shows positive authorisation policy subject target list actions action lista actions execute called associated policy passed parameter positive delegation policy allows objects delegate actions action objects objects actual delegation access rights runtime create implicit authorisation policy execute actions action target objects 
note true action action lista 
associated policy second delegation policy objects delegate actions action objects objects 
relations true action action 
action delegated may filter attached executed action invoked grantee target 
delegation policies allowed override filters delegated actions 
authorisation policy delegation derives access rights may constraint limits applicability 
constraint taken account delegation action executed 
grantee execute action original constraint authorisation policy access rights derived evaluates true 
section demonstrate enforcement delegation policies mapping authorisation policies show constraints taken account 
examples slightly extended examples demonstrate concepts delegation policies 
consider hypothetical domain structure 
section 
access control policies bob employees servers printers files managers general departmental fred print alice file colour red grey hypothetical domain structure suppose authorisation policies place domain policies delegation type auth subject target files action read write inst auth employees managers files inst auth employees employees managers files files type auth subject target printer action print domain man employees managers inst auth man printers inst auth employees printers printers inst auth subject employees target servers fileserver action actions inst auth subject employees target servers action actions examples notice domain statements 
changes current working domain 
relative domain paths specified statement current working domain 
policies stored policies delegation 
default current working domain root 
second domain statement declares constant called man assigns path 
constant specification 
declaring constants reusing specifications described section 
actual delegation policies inst deleg subject employees managers grantee employees employees managers delegation policy specifies departmental managers allowed delegate access rights specified policy employees managers 
payroll filea chapter 
basic policy constructs inst deleg subject employees managers grantee employees employees managers action write delegation policy specifies general managers authorised delegate write access right specified policy 
inst deleg subject employees managers grantee employees managers action print time hops allow cascading delegation policy specifies general managers authorised delegate print access right specified departmental managers 
note maximum delegation hop constraint specified policy hops keyword 
maximum number cascading hops allow disallows cascaded delegation policy 
scenario see hypothetical domain structure 
scenario deliberately complicated needed real situations just demonstrate different aspects delegation policy 
order fileserver permitted access requested file delegated access rights subject requires access file 
true 
order able print particular printer delegated access right user requesting print 
consider general manager fred wants print payroll file filea color printer red 
fred needs delegate access right print right access fileserver request read payroll filea right access payroll files 
needs delegate right read fileserver order file server able read filea 
fred delegate print colour printers delegate read file server delegate read payroll files print filea red file server print server delegate read payroll files read filea read filea print filea delegation actions involved printing payroll file colour printer delegation policies place order fred able print filea red 
type deleg action subject employees managers grantee servers action filea red section 
subject policies inst deleg print deleg read deleg read delegation policy states general manager delegate right print colour printers coming authorisation policy 
second call action read file server third read payroll files 
inst deleg subject servers grantee servers fileserver action read delegation policy states print server delegate right read payroll files file server 
attempt access control system check print server delegated access right 
delegation policy states general manager authorised delegate print server referenced access right automatically mean print server right 
subject policies access control aspect policy specification system 
second aspect involves management subjects system 
interested specification policies control operation automated subjects system deal human users 
subsections describe additional types policy 
obligations specify subjects refrains form subject access control restrict execution actions subject 
obligation policies obligation policies specify actions performed managers system certain events occur provide ability respond changing circumstances 
example security management policies specify actions specified security violations occur execute actions auditing logging activities performed 
obligation policies relate management qos storage systems software configuration obligation policies considered general context constrained form programming network elements user agents 
active networks mobile agents management delegation techniques transferring executable content automated agents enhancing agents capabilities 
techniques offer limited control execution transferred code 
obligation policies complementary approaches allow specify actions performed response events dependent means transfer code implements actions managers 
chapter 
basic policy constructs obligation policies event triggered define activities automated manager components subject domains perform objects target domains 
event condition action rules prove flexible approach specifying management policy exemplified pdl language implemented lucent switching products lobo 
order carry obligation manager know perform action implementable obligation policies explicitly specify event actions performed 
events simple internal timer event external event notified monitoring service components temperature exceeding threshold component failing 
composite events specified event composition operators 
inst oblig event specification subject type domain scope expression target type domain scope expression obligation action list catch exception specification constraint expression obligation policy syntax syntax obligation policies shown 
note required event specification keyword 
table specifies event composition operators event expressions 
event operators equal precedence evaluation strictly left right 
operator explanation occurs occur irrespective order time period occurs specified period time occurrence event occurs occurs followed interleaving occurs occurs irrespective order occurs occurs occurs occurs times integer value table event composition operators target element optional obligation actions may internal subject authorisation actions relate target object 
action prefixed name object action called actions may target internal subject part subject interface 
prefix specified action assumed internal subject part subject interface default 
concurrency operators specifying actions executed sequentially parallel separate actions obligation policy 
optional catch clause specifies exception executed actions fail execute reason 
concurrency operators obligation policy actions table table 
concurrency operators equal precedence evaluation strictly left right 
parenthesis change default precedence 
section 
subject policies operator explanation follow 
actions fails allowed refrain policy execution stops 
may performed concurrently 
execution continues finished 
may performed concurrently 
execution continues finished 
actions fails allowed refrain policy execution stops 
performed 
fails allowed refrain policy performed 
succeeds execution stops 
table action concurrency operators formal treatment event composition operators action concurrency operators section 
simple examples demonstrate features obligation policies 
inst oblig userid subject nregion target nregion users select userid disable log userid policy triggered consecutive events userid 
example simple event composition 
nregion security administrator disables user userid nregion users domain logs failed userid means local operation performed object 
operator separate sequence actions obligation policy 
names assigned subject target 
reused policy 
example prefix actions order indicate action interface target local subject 
type oblig string msg userid filename subject target ms servers ms mailto userid filename msg types external policy specification specified assuming corresponding specifications accessible type repository 
demonstrated policy 
obligation type accepts parameters external type called 
interface specification printer queue manager object 
parameter parameter call local 
concurrency operator allows actions performed parallel 
examples demonstrate complicated domain scope expressions ocl collection operations select subjects targets involved action execution obligation policies 
type oblig set domain int print job sender subject sender target select state idle print job sender mail job re directed job pages inst oblig domain timer subject select target backup log chapter 
basic policy constructs policy sender print job executes job targets printers domain idle 
second obligation policy backup administrators backup files located day pm 
want administrators execute backup 
select operation subject domain selects object set subject objects 
indicated empty select expression 
select operation form select select objects set non empty expression bar select subject objects expression evaluates true 
note basic policies define constants reused specification 
policy defines domain constant specification subject policy 
scripted actions script externally defined code object imported ponder specification domain 
obligation action defined script suitable scripting language specify complex sequence activities procedures conditional branching 
scripts provide flexibility including complex actions expressed single object method invocations contain conditional statements supported scripting language 
example script defined update software computers target domain atomic transaction rolls back old version updates fail 
action script specify conditional execution sub actions execution sub action dependent result previous 
similar conditional policy rules defined ietf notation limits condition ored set anded conditions anded set ored conditions moore 
scripts implemented objects stored domains 
authorisation policies specified control access scripts shown example inst auth subject action execute target scripts users gold users silver inst oblig user subject scripts users gold users silver user authorisation policy permits domain administrators execute script object parameters users gold users silver 
script moves object domain domain considered security sensitive operation domain administrators permitted execute downgrade gold service users silver service users 
obligation policy specifies domain administrators move user gold service domain users gold silver service domain users silver user requested access web page considered offensive 
interpreted language java program scripts scripts updated mobile code mechanisms change functionality automated manager agents suffers usual security vulnerabilities mobile code chess 
extending functionality manager agent operation agent management interface restricted authorisation policies 
section 
subject policies scripts primarily obligation policy actions invoked actions positive authorisation action filters clause constraint basic policy exceptions obligation policies meta policies see section 
refrain policies refrain policies define actions subjects refrain performing execute target objects may permitted 
words refrain policies act restraints actions subjects perform 
similar syntax negative authorisation policies enforced subjects target access controllers 
refrains situations negative authorisation policies inappropriate targets trusted enforce policies may wish protected subject may possible enforce access control policy decision depends attributes state values subject performing action 
addition action specified obligation policy internal subject part interface script action loaded agent implementing subject 
calls actions restricted refrain policies involve method calls target objects making impossible control execution authorisation policies 
syntax refrain policies negative authorisation policies 
inst refrain subject type domain scope expression target type domain scope expression action action list constraint expression refrain policy syntax simple examples refrain policies 
inst refrain subject test engineers target analysts developers action testing sequence progress refrain policy specifies test engineers disclose test results analysts developers testing sequence performed subject progress constraint state subjects 
analysts developers probably object receiving results policy candidate negative authorisation 
inst refrain subject nregion target nregion users action disable nregion users exists refrain policy relates obligation section 
instructs subjects security administrators disable targets users part nregion users domain 

chapter 
basic policy constructs common elements specification elements common policy specification defined separately reused 
include events constraints variety constants 
examples section show common elements single policies definition reuse event constant constraint specifications useful larger specifications groups policies see chapter 
event definitions events ponder trigger obligation policies 
convenient able define events separately re multiple obligation policies 
definition event may parameterised 
event parameters map event attributes define new names scope policy object event specified 
names referenced policy see example follows 
event timer event timer hours event inst oblig subject target get example timer object generating time events 
event occurs particular date dec time second event occurs hours 
third event demonstrates parameters definition event 
named event receives parameters referenced obligation policy uses event 
parameter corresponds parameter second third parameters 
events event expression assigned new event 
see parameter specification target obligation policy 
similarly events trigger obligation policies required 
constraint definitions constraints limit applicability basic policies part clause policy section defined separately named reused 
similar events defined constraints parameterised 
constraint active isactive constraint time type oblig subject target reset active example constraints specified specification constraint obligation policy 
constraint takes parameter specification 
second constraint time constraint valid am pm 
section 
common elements specification constant definitions constants defined ponder shown 
type identifier indicate user defined type constant predefined types int real string boolean 
user defined types policy types 
external types define constants part policy specification 
idl types objects managed system 
set type defines domain scope expression specify subject target grantee elements basic policies 
set followed definition type objects set 
usually idl type subjects targets 
constant definition int identifier expression real identifier expression string identifier expression boolean identifier expression set type name identifier domain scope expression user type name identifier expression extern type name identifier expression syntax constant definitions examples defining constants 
int string getname string str string set routers set objects type user roles role extern router router routers router give name router object constants described including constraints events described earlier parameterise policy types 
external specifications external specifications embed non ponder text ponder specification 
comments un named ignored policy compiler external specifications named preserved compiler runtime system 
specifications accessed external tools compile time run time 
external specifications typically develop ponder variants extensions attach non ponder definitions code scripts performance protocol requirements structured documentation ponder specification 
enforcement implementation dependent 
external specifications enclosed angle brackets preceded keyword spec shown example 
inst auth net config subject action target spec refs related net config net config parent config chapter 
basic policy constructs child router config refs example external specification named refs associated authorisation policy specifies related obligation policies required parent policy refined child policies derived 
analysis tool extract specification parse interpret accordingly 
security policy examples additional examples indicate expressiveness language security policies 
focus non discretionary access control language specify variety security policies 
revisit issue expressiveness chapter composite features language allow role policies specified 
closed open policies closed policy allows access exists positive authorisation denies 
similarly open policy denies access exists negative authorisation allows 
simple case classical closed open policies simulated language allowing positive negative authorisation policies specified 
implemented simple authorisation policies control modality policies added system 
closed policy implemented positive authorisation policy shown allows positive authorisation policies specified 
implement open policy single positive authorisation policy allows action subject target sub tree domain hierarchy open policy enforced act default case 
negative policy specified prevent specification additional positive authorisation policies involving subjects targets 
negative authorisations allowed 
inst auth subject target services action policy permits security administrators add authorisation policies system calling method authorisation service modality authorisation policy added positive 
authorisation classes objects general advocate specifying policy terms instances classes objects believe idea specifying authorisation terms classes types objects restrictive infeasible large scale systems millions instances class 
practical applications policies specified sets objects related class objects normally section 
security policy examples grouped geographical distribution convenience human managers application specific reasons 
may useful define policy apply instances particular class target domain 
knowing class target object enables interface specification located checking policy actions correspond methods interface 
consider examples type auth subject target string endtime action print time endtime inst auth new staff inst auth new students example define positive authorisation policy type 
policy type parameterised subject target policy string indicating time parameter time constraint policy 
string parameter specify endtime expression time endtime constrains validity time policy 
instance creates positive authorisation policy members staff domain print printers objects domain am pm 
second instance creates positive authorisation policy members students domain print black white printers objects domain am pm 
type auth subject string endtime type target type action print time endtime inst auth new staff inst auth new students example shown creates positive authorisation instances similar semantics previous example 
case ability restricting type target objects achieve parameterisation target object 
target objects different types belong different classes objects grouped different domains 
authorisation type parameterised target policy 
target union printers domain domain 
class target objects policy applies parameter 
note specification type class objects target keyword 
instance creates positive authorisation policy members staff domain print laser printers am pm 
second instance creates positive authorisation policy members students domain print printers am pm 
ownership central idea dac owner object usually creator discretionary authority access object 
owner revoke access rights users object sandhu 
consider idea ownership problematic show simulated ponder 
main problem ownership basis allowing access objects fact users access data create 
addition large scale systems impractical allow individual users create objects full control access object 
ownership complicates access control management large systems compromises security users may abuse misuse power 
language access rights correspond authorisation policies owner create system assign permissions objects owns 
constraints target object attributes creator owner attribute control access chapter 
basic policy constructs existing objects shown example 
delegation policies allow owner domain objects delegate access rights objects subjects 
inst auth subject users target file payroll action delete read case assume default negative authorisation policy forbidden explicitly authorised 
policy user finance department delete read payroll files user owner file 
dynamic separation duty dynamic separation duty members group authorised perform potentially conflicting actions performing action perform conflicting 
implemented constraints relating attributes subject target objects 
static separation duty restricted form separation duty certain sets accesses allowed subject 
involves constraints groups policies restrict specification conflicting policies 
handle meta policies chapter 
revisit dynamic separation duty context role management chapter 
inst auth subject action target id inst auth subject action issue target id user domain issue approve payment cheque 
assumes identity issuer stored attribute cheque object 
derived authorisations derivation rules express dependencies authorisations allow derivation new authorisations basis existing ones validity jajodia bertino 
derivation rules increases complexity access control enforcement complicates specification policies making difficult identify time access rights subject system 
introduce explicit derivation rules ponder specify rules part constraint authorisation policy inst auth subject staff action read target files time inst auth subject staff technical action write target files technical time date exists staff read files section 
security policy examples policy specifies dependency technical staff authorised write technical files staff granted right read file date greater 
constraint assume access authorisation service interface method called exists check subject specific access right target 
authorisation policies derive authorisation inst auth subject staff action write target files time time date example derived authorisation policy inferred syntactic analysis policy specification case 
access control require evaluation authorisation policies runtime order derive new authorisations 
addition insertion new policies deletion policies may change derived authorisations 
ponder avoid specifying dependencies authorisation policies 
backing policies backing policies introduced rowley usually needed security sensitive situations subject requires backing number principals order perform action chairman backing majority board members order call extraordinary meeting 
ponder authorisation obligation policies specify backing assuming backing condition specified monitored underlying monitoring service specified event trigger obligation policies 
inst auth action target shareholders inst oblig votes agent enable policies target inst oblig target shareholders chairman example need authorisation policy chairman call extraordinary meeting obligation triggered event generated majority vote events received 
authorisation policy enabled trusted agent enables 
trusted agent obligation policy triggered backing event 
acknowledge fact arbitrary backing policies probably require separate scripting language specify backing condition 
lattice policies subsection demonstrate specify lattice policies particular bell lapadula model framework 
bell lapadula model assigns security level subjects targets totally ordered lattice security levels 
subjects read target chapter 
basic policy constructs object level dominates target write object object level dominates subject 
precise definition bell lapadula model see section 
informal solution start considering bell lapadula model just labels categories 
case subject permitted write target objects label greater equal label subject 
hand subject read target objects label equal subject 
label example map domain structure 
divide domains sub trees subjects target objects shown 
level tree corresponds label starting minimum label 
subjects targets min label max label subjects targets mapping label bell lapadula policy domain structure arrows labelled subject target domains show write read policies specified domain structure 
policies 
rest similar 
inst auth subject action write target inst auth subject action read target domain scope expressions provided grammar restrict propagation policies sub domains desired level 
adding categories model complete version bell lapadula just increases number domains need created 
way model follows approach 
consider case labels addition set categories subsets possible 
divide domains level previous solution separate domains subset set categories shown 
domain shown corresponding level text shows subset set categories corresponds 
arrows correspond policies representing read append write access 
bell lapadula model domain read access lightly shaded target domains shown policies label classification lower equal section 
domain categories proper subsets domain categories 
shows write policy shows append policy 
policies write append realised exactly way stopping propagation sub domains necessary 
subjects subj targ targets min classification max classification mapping bell lapadula policy domain structure possible formalise solution 
important process modelling bell lapadula security model policies domains set labels classifications set categories automated 
translate sensitivity levels domain structures changes adding category level requires re computing domain structure 
note see value specifying lattice policies ponder proves inefficient lengthy process 
addition extensive research approaches techniques suitable mandatory policy implementation 
chapter basic policy types language called ponder designed requirements described section mind 
basic policy types supported language authorisation policies specify list actions subjects permitted prohibited perform targets system 
language allows support negative authorisation policies explicitly forbid access 
positive authorisation policies extended filters transform input values action calls return values actions allowed 
basic policies defined sets objects formed applying set operations union intersection difference objects domains 
domains include domains sub domains set operations restricted apply top level members domain applied recursively desired level chapter 
basic policy constructs including nested levels domain 
constraints restrict applicability policies 
delegation policies specify permission delegate access rights implied authorisation policies members grantee scope 
language supports constraints delegation policies negative delegation policies cascaded delegation 
authorisation delegation policies constitute access control policies specified proposed policy language 
designed protect target objects conceptually enforced target 
obligation policies event triggered condition action rules define actions subjects human automated manager components perform usually relation objects target domain 
refrain policies form subject access control policy restricts actions subjects execute negative authorisations appropriate specified 
policies specified parameterised types corresponding classes object oriented language 
policy instances created user defined policy types tailored specific situations 
events constraints constants defined reused policy specifications enhance reusability 
language allows specifications external policy language embedded policy text 
simple examples language order demonstrate expressiveness evaluate applicability specifying certain policies 
examples identify changes need language grammar policies language suitable 
specifically clear ponder specify lattice information flow policies typified bell lapadula model results complex specification see section 
general policy languages specify lattice policies inappropriate lattice models assume fixed set policies regulate access subjects targets 
examples ponder policies specify security policies available literature including classical open close policies dynamic separation duty policies backing policies execution action backed number subjects dac policies authorisations presence authorisations system 
need concentrate evaluation language large scale scenarios real life applications 
chapter composite policy features need group set related policy specifications syntactic scope shared declarations order simplify policy specification task large distributed systems 
common concept programming environments main motivation composite policy types ponder 
ponder composite policies facilitate policy management large complex enterprises 
provide ability group policies compose reflect organisational structure preserve natural way system administrators operate simply provide reusability common definitions 
simplifies task policy administrators adds management features language 
run time set policies defined composite policy constraints applying composite policy stored domain 
parent subject domain domain child group operates role policy relationship mstruct composite policy object class hierarchy extend information model composite policy classes 
includes classes necessary illustrate relation new classes described previous chapter 
types composite policies detail chapter 
composite policy features chapter groups roles relationships management structures 
composite policy includes basic policies nested groups possibly meta policies specify application specific constraints policies specified scope composite policy 
role associated domain specifies common subject policies inside role 
relationships specified roles management structures mstruct group related role relationship configurations model organisational units 
groups group packaging construct group related policies purposes policy organisation reusability common concept programming languages 
different potential criteria grouping policies policies may targets relate department apply application 
shows syntax group instance group type 
group contain zero basic policies nested groups meta policies order 
meta policy specifies constraints policies scope group discussed section 
inst group common element specification basic policy definition group definition meta policy definition type group formal parameters common element specification basic policy definition group definition meta policy definition group construct syntax reusability achieved specifying groups types parameterised policy element system attribute instantiating multiple times 
example policies related login process grouped instantiated 
inst group inst auth subject dept users staff target dept computers research action login inst oblig subjects dept computers userid target dept computers log userid userid inst oblig userid subject nregion target nregion users select userid disable log userid section 
roles login group policies staff access computers research domain log login attempts load users environment computer deal login failures 
roles roles provide semantic grouping policies common subject generally pertaining position organisation department manager project manager analyst 
specifying organisational policies human managers terms manager positions persons permits assignment new person manager position re specifying policies referring duties access rights position see section 
role specify policies apply automated component acting subject system network device router 
represent organisational positions domains call subject domains associate roles 
role set authorisation obligation refrain delegation policies subject domain role subject 
inst role rolename common element specification basic policy definition group definition meta policy definition subject domain type role rolename formal parameters common element specification basic policy definition group definition meta policy definition role construct syntax roles include number basic policies groups meta policies 
subject domain role optionally specified sign role instances pre created 
specified subject domain name role created default role instance created 
type role roles inst oblig userid investigate complaint userid target calls register inst oblig 
inst auth 
policies inst role roles area roles area sd area role type models role mobile telecommunications service responsible responding customer complaints service requests 
role type parameterised calls database database subscribers system calls 
obligation policy triggered event mobile number customer event attribute 
event subject role execute sequence actions calls database order check information subscriber passed complaint event check phone list investigate complaint 
note obligation policy specify subject policies role implicit subject 
role instantiated calls database area create role instance area 
domain roles chapter 
composite policy features store role type role instance definitions 
subject domain role instance sd area 
users assigned role included domain see section description user role assignments 
type specialisation ponder allows specialisation policy types mechanism inheritance 
type extends inherits policies may add new policies overrides policies name 
inheritance defined composite policy types 
terms role construct groups relationships management structures section 
type role extends role body inheritance syntax type extends base type pass parameters base type order parameterise base type 
language currently support polymorphism dynamic binding 
thesis define multiple inheritance role policy types 
problem multiple inheritance multiple policies name coming different base types lupu 
solved ways policy compiler warn policy writer situation policy writer choose inherit base types change names policies base types possible 
prefixing names policies name type inherited 
common way resolving similar name conflicts multiple inheritance object oriented languages 
show example inheritance extend role type domain roles type role vlr extends cdb inst oblig ms mobile station target equipment identity registry service engineer role extends role specified previous example 
inherits policies parent role adds obligation policy updates equipment record equipment identity registry target mobile station signals failure event 
role hierarchies role organisational hierarchies specified specialisation 
role hierarchy specified ponder extending roles shown example 
section 
role relationships management structures employee secretary role hierarchy type role type role extends employee type role extends employee type role extends type role extends type role extends role relationships management structures managers acting organisational positions roles interact 
relationship groups policies defining rights duties roles 
include policies related resources shared roles 
provides abstraction defining policies part role specifications part interaction roles 
inst rel common element specification basic policy definition group definition role definition meta policy definition type rel formal parameters common element specification basic policy definition group definition role definition meta policy definition relationship construct syntax syntax relationship similar role 
addition relationship includes definitions roles participating relationship 
alternatively roles passed parameters relationship types 
example shown type rel pm inst oblig timer day monday subject target pm policies roles participating relationship relationship type specified role type secretary role type 
obligation policy specifies subject role mail report subject role monday 
roles place subjects targets implicitly refers subject corresponding role 
relationships introduced lupu syntax interaction protocol specification proposed define interactions managers assigned roles relationship terms permitted sequences messages managers exchange 
important part relationship specification cover thesis 
chapter 
composite policy features need revisit issue extend grammar interaction protocols part relationship syntax 
management structures large organisations structured units branch offices departments hospital wards similar configuration roles policies 
ponder supports notion management structures define configuration terms instances roles relationships nested management structures relating organisational units 
example management structure type define branch bank department university instantiated particular branches departments 
inst mstruct common element specification basic policy definition group definition role definition relationship definition meta policy definition type mstruct formal parameters common element specification basic policy definition group definition role definition relationship definition meta policy definition management structure syntax management structure composite policy containing definitions roles relationships nested management structures 
basic policies refer roles relationships defined management structure constraints form meta policies included 
consider management structure different concept community defined rm odp enterprise viewpoint iso iec 
community rm odp terminology semantic concept defined configuration objects formed meet objective objective expressed contract specifies objective met 
management structures structuring mechanisms compose policy specifications organisational network structure order cope large scale policy specifications 
refrain specifying relationships interaction protocols management structures allow composed syntactical inclusion 
role relationship role relationship role management structure components policies meta policy constraints section 
role relationships management structures example demonstrate roles relationships configurations management structures 
example security quality assurance sla management service level agreement sla implies certain guarantees customer sla 
content guarantees roughly broken areas stability availability guarantee failsafe operations failure performance response times guaranteed capacity security protection form system attacks support hotline availability times section borrow ideas case study involves security area quality assurance sla management networked environments 
deal telecommunications network constructed interconnected networks digital switching nodes sns 
network divided regional networks consist number local network sites digital switching network 
console central log archive console archive computers disk array attack pattern archive computer attack pattern fddi ring gateway gateway local network site token ring local log evaluation computer log receive unit local network site token ring local log evaluation computer log receive unit isdn router isdn router security quality assurance system architecture digital switching network illustrates operation security quality monitoring assurance system regions telecommunications network 
goal monitor operations executed switching nodes digital switching network order able detect trace security attacks 
switching nodes digital switching network generate specialised log data stored log files 
experts familiar structure log data chapter 
composite policy features generated various sns editor tool create uniform structured log file raw log file generated sn initially 
log data collection implemented log receive units collect data isdn routers 
log receive units part site interconnected token rings 
local log databases store data site networks 
data transferred fddi ring archived centrally 
evaluation manager region responsible specifying called attack patterns analyse archived log data stored centrally 
attack patterns compared data logs order identify security attacks 
function analysing log data takes place site networks regional network level 
security inspector evaluation evaluation security inspector local network site archive evaluation manager inspection archive administrator log data expert inventory administrator collection collector roles relationships management structures single tn region access various archiving systems log databases tools restricted authorised users assigned appropriate roles 
illustrates various roles involved operation system identifies relationships exist enable coordination cooperation 
security inspector authorised access log evaluator tool check log data 
security inspector role defined local network sites regional domain network 
security inspectors interact evaluation managers notify detected security attacks 
evaluation manager responsible specifying attack patterns attack pattern editor 
second function role plan measures take attacks detected 
evaluation manager interacts security inspectors receive information detected attacks 
section 
role relationships management structures archive administrator responsible archiving data central log repository 
may interact regional security inspector case problems anomalies archiving system 
inventory administrator responsible provision log data various domain networks 
collector role exists local network sites 
occupants role authorised access log receive units collect data received sns 
interacts security inspector local network site level inspection relationship involving collection data 
log data expert local network site required 
data expert authorised structure editor tool create structured format raw log data received various sns 
demonstrates formation management structures roles relationships described 
management structure type defined model configuration roles relationships site network instantiated sites appropriate parameters 
second management structure model configuration roles relationships regional network 
outer management structure includes instances management structure site networks region 
outline policy specification management structures assuming site networks regional network 
individual policies part roles relationships 
roles contain appropriate authorisation policies enable occupant role access parts network tools required 
obligations part relationships obligations role occupant specified roles needed 
relationships include obligations role reporting functions certain events time periods authorisations role methods occupant role execute occupant role order request functions information 
management structure models security quality assurance system part single site network 
structure parameterised domain representing site log database network type mstruct domain site define role types type role domain site type role domain site type role domain site define relationships types type rel role role col type rel role role create instances roles inst role site inst role collector site inst role site chapter 
composite policy features inst role site create instances relationships inst rel inspection collector inst rel inst rel roles management structure type parameterised site domain log database local data logs 
parameters passed management structure instantiation instantiation roles inside management structure 
act target policies inside roles 
note role type requires type switch nodes monitored 
obligation policy actions inside role may depend type node logs received 
log data expert roles relationships instantiated security inspector log experts 
management structure models security quality assurance system part single region telecommunications network 
structure parameterised domain representing region type mstruct domain region paths site domain networks site domain site region site domain site region site domain site region site define role types type role db type role db domain net domain net domain net type role db define relationships types type rel role role type rel role role type rel role role col create instances roles inst role site get inst role site get inst role site get inst role site get region region region create instances relationships exist roles level site network inst rel inst rel archive instances site management structures management structures parameterised site part relative region parameter formal parameter current management structure inst mstruct site struct site site get inst mstruct site struct site site get inst mstruct site struct site site get create relationships roles involve inner management structures inst rel evaluation site struct inst rel evaluation site struct inst rel evaluation site struct inst rel collection site struct collector inst rel collection site struct collector inst rel collection site struct collector notice regional security inspector region management structure instantiated role definition security inspector defined 
section 
meta policies meta policies validity policy may depend policies existing running system scope context 
conditions usually impossible impractical specify part policy need specified part group policies 
meta policies specify constraints set policies permitted types policies policy elements 
constraints apply policies specific scope limit permitted policies system disallow simultaneous execution conflicting policies 
meta policies defined composite policy apply policies scope composite policy 
alternatively may apply policies domain sub tree 
syntax meta policy syntax object constraint language ocl 
body meta policy specifies constraint series ocl expressions separated semicolons 
expressions boolean navigation expressions 
boolean expressions evaluates true execution stops action raises clause executed 
way series related constraints specified meta policy 
note result ocl expression named passed exception action parameter see examples reused subsequent constraint expressions 
meta policy specify concurrency constraints mandatory sequencing permitted parallelism activities forbid overlap certain activities 
concurrency constraint specification meta policy specify raises clause body consists series concurrency constraint expressions 
concurrency constraint expression specifies sequence activities separated concurrency constraints 
concurrency constraints semantics obligation policy actions see section 
activity action obligation policy obligation policy case implies actions obligation policy subject concurrency constraint specified see examples follow 
inst meta raises exception parameters ocl expression identifier ocl expression concurrency expression concurrency expression activity concurrency expression activity path identifier 
identifier meta policy syntax examples subsection indicate meta policies specify application dependent constraints groups policies 
chapter 
composite policy features constraint policy examples examples chapter show ponder represent security policies available literature 
show additional examples policies expressed language related specifying constraints sets policies specified composite structures complement section 
constraints elements policies example shows meta policy role specify simple constraint policies role case constraint instantiation role number patients nurse responsible 
type role set patient inst auth target action inst oblig administer target time inst meta raises size static separation duty examples show specify static separation duties prevent person authorised perform actions marked conflicting 
inst meta raises policies select pa pb pa subject intersection pb subject notempty pa action exists act act name submit pb action exists act act name approve pb target intersection pa target budget notempty prevents conflict duty person approves submits budget 
searches policies subject acting target budget action submit approve 
specify generic meta policy type shown create various instances static separation duty principle involving actions 
type meta act act raises policies select pa pb pa subject intersection pb subject notempty pa action exists act act name act pb action exists act act name act pb target intersection pa target notempty inst meta dc execute payment meta service section 
meta policies inst oblig subject notify manager actions target type passed parameters meta policy 
body meta policy checks pairs policies scope possible conflicts 
exists pair policies common subjects actions act act respectively action entry target intersection conflict conflict action called 
action takes set pairs policies resulting conflict result ocl expression parameter act 
order check type target intersection method defined ocl 
example instance static separation duty involves assignment users roles 
type meta role role raises users users intersection users notempty inst meta roles roles roles specific organisation marked conflicting user assigned 
meta policy type checks subject domains roles common elements 
self management policy manager retract policies subject lupu 
happens single authorisation policy overlapping subjects targets 
meta policy specify follows inst meta raises pol pol authorisations select action exists name retract parameter exists name policy subject subject pol notempty body policy contains ocl expressions 
operates set authorisations meta policy container composite policy referred 
selects policies characteristics action set contains action named retract parameters include policy object subject subject policy second ocl expression boolean expression returns true pol variable returned ocl expression empty 
result expression true exception specified raises clause executes 
receives pol set conflicting policies parameter prerequisite roles prerequisite roles type constraint identified sandhu user assigned role user assigned role translated user member subject domain role member subject domain role specified meta policy type meta role role raises users users users notempty inst meta roles roles roles professor roles professor university setting prerequisites 
user assigned head department role user assigned professor role 
meta policy type defined checks subject domain role contains elements users subject domain chapter 
composite policy features professor role 
set empty resulting set users erroneously assigned role 
assume attribute called accessed role object get subject domain role 
user role assignment cardinality constraints kind constraint restricts number users assigned role sandhu 
specified inside role know specification time maximum number users assigned role 
specified outside role 
type meta role int max raises users users size max inst meta maxusers roles example shows single meta policy instance created generic meta policy type handles assignment cardinality constraints 
example specifies user assigned role 
concurrency constraints example demonstrates meta policy specify concurrency constraints involve set policies 
meta policy example specifies concurrency constraints involve individual actions different policies 
inst role inst oblig target payments registry inst oblig target db db inst meta register payment issuing cheque update backup records time history access control history access control policies acharya expressed language assuming existence event history monitoring system policies access information events happened past 
examples policies include joint action authorisation policies users possess certain role vote favour subject permitted execute action 

section 
meta policies form backing policy section specified combination authorisation obligation policies 
ponder type policy specified constraint authorisation policy involves single access right inst role doctor inst auth target servers action doctor size example allows occupant doctor role admit patient hospital half doctors users possess doctor role agree 
limiting resource usage disk partitions back activities 
lupu 
policy restrict specification policies system execution actions object attribute values 
type role inst auth action backup target server backup backup administrator permitted perform backup operation certain backup server number partitions server 
server object provides information backing process passed parameter role 
previous actions program open local files reading opened socket 
similar dynamic separation duty policy specified constraint authorisation policies 
examples section 
closed open policies meta policies way modelling classical closed open policies described section 
meta policies specify closed open policy similar way integrity rules asl jajodia 
example demonstrates simple meta policy customise access control decision mechanism existence positive negative authorisation policies 
type meta domain path raises accept path exists type auth subject exists target exists action exists type meta domain path raises accept path exists type auth subject exists target exists action exists true meta policy raises accept exception set authorisations path contains positive authorisation policy allows execution action subject target raises accept exception set authorisation policies path contain negative authorisation policy disallows execution action subject target note path root policy hierarchy apply closed open policy domains system 
meta policies chapter 
composite policy features distributed relevant access control agents instantiate interpret time access decision requested 
additional language features ponder framework self managed policies constructs roles relationships implemented objects stored domains 
authorisation policies specify permitted add delete edit policies demonstrated examples 
furthermore obligation policies specify actions performed policy objects certain events occur 
example obligation policies specified enable new policies disable existing ones order adapt new circumstances failures emergency conditions addition human managers automated components subjects set policies may turn managed managers different set policies targets 
avoid administrative roles proposed rbac models sandhu manage set roles 
roles composite policies objects managed policies specified roles 
class hierarchy language see appendix allows new policy types may identified defined sub classes existing policy types 
includes basic policies composite policies easier extend language design goal identified section 
addition model provides convenient means translating policies structured representation languages xml 
xml representation viewing policy information standard browsers means exchanging policies different managers administrative domains 
dmtf engaged specification mapping cim xml dmtf 
import statements import definitions constants constraints events external ponder specifications stored domains current specification 
allows reuse common specifications minimises errors arise due multiple definitions 
example shows event specification reused 
inst group groups event userid userid common specifications basic policies inst group import groups inst oblig userid userid subjects nregion target nregion users userid log userid section 
additional language features imports specification groups domain stored reuses specification event userid defined 
event new obligation policy consecutive events event triggered user takes long enter password prompt 
example composite policy specification example demonstrates structure policy specification 
import domain statements placed specification 
deliberately show small example specified different files demonstrate import statements 
note type instance definitions nested 
example extract chapter lupu 
example help desk role type defined cellular gsm network 
suppose network divided regions region subdivided branches 
region database called eir equipment identity database equipment region 
branch database called hlr home location register subscribers network 
role includes obligation policy customer complaints handle customer complaints group hlr specifying policies relate management hlr database branch group billing abnormal contains policies related cases bills stolen equipment group created type instantiated various hlr databases corresponding branch 
authorisation policies access hlr eir databases specified directly role 
specified group hd outside role 
case need reuse authorisations roles policy specification 
role imports hd group instantiates different hlr eir databases needs access 
file domain policies groups types set current working domain type group hd set hd hlr type hlr eir type eir inst auth hd auth hlr subject hd target hlr action add new customer update record inst auth hd auth eir subject hd target eir action hd file domain tr rr rc hd set current working domain type role eir type eir import policies groups types hd import hd group inst oblig customer complaints chapter 
composite policy features customer complaint complaint investigate complaint complaint type group hlr hlr type hlr inst oblig record update new service subscription customer service target hlr inst oblig consistency loss customer hlr hlr hlr inst group hlr hlr hlr group hlr hlr hlr inst group billing abnormal inst oblig notify subscriber bills target inst oblig stolen equipment reported stolen target eir billing abnormal inst group hlr auth hd pd hlr eir group hlr auth hd pd hlr eir domain roles change current working domain inst role eir pd hd hd role eir pd hd hd example policy specification chapter features language allow composition basic policies chapter 
reasons composing basic policies twofold reusability related policy specifications modelling organisational concepts roles relationships management structures 
composite policy types group syntactic scope group related policies 
role semantic grouping policies subject 
roles provide means grouping policies related position organisation staff member customer support manager chief executive officer ceo 
role group policies relating specific automated agent registers new users adaptively manages quality service network 
relationship grouping policies pertaining interactions roles 
section 
management structure configuration roles relationships organisational units 
introduced simple inheritance composite policy types demonstrated model organisational role hierarchies 
revisited issue expressiveness presenting series application specific constraints specified groups policies meta policies 
meta policies constraints set policies policies policy grouping policies domain prove powerful specifying large range application specific constraints 
self management extensibility important features language 
policies specified control operations policies domains 
new types policy may identified added language object model extend language 
examples new types policies include freedom policies permit subject override obligation policies operator override obligation policy thinks safety reason doing 
important human policies automated systems specified safety critical systems 
ii resource allocation policies specify limits resources allocated session service available bandwidth allocated single request 
remains done area interaction protocol specification complete definition relationships 
significance roles relationships management structures modelling organisational policies structuring large scale policy specifications demonstrated examples 
information policy language applications published damianou lupu damianou lupu damianou dulay dulay 
chapter structural operational semantics give operational semantics policy language previous chapters exploring object oriented nature language 
formal semantics divided different phases execution ponder specification referred program demonstrated 
policy specified syntactically semantically analysed type checked stored domain system policy object 
stored policy objects distributed components responsible enforcement 
runtime execution policy takes place scope enforcement component management components access controllers policy runs involves accessing domain system 
specification policy specification program compiler domain storage managed objects runtime execution policy objects management components access controllers semantics system structural operational semantics type inference system formal domain system model structural operational semantics chapter specify static semantics language type inference system perform compile time type checking ponder programs leave 
structural operational semantics approach specify dynamic semantics policy specifications 
dynamic semantics address execution policies including evaluation expressions execution commands policy system 
operational semantics cover specification policy types instantiation 
formalise domain system alloy jackson object modelling notation 
alloy suitable describing structural properties dynamic interactions objects particularly suitable describing hierarchical systems file systems graphs clearer specify semantics domain system alloy 
structural section 
structure operational semantics operational approach suitable dynamic semantics ponder 
structural operational semantics operational method specifying semantics syntactic transformations programs 
enables describe execution ponder policies syntax language making easier relate specification semantics actual implementation ponder 
approach inspired drossopoulou specifies operational semantics type inference system large subset java 
choose small step semantics hennessy believe specification semantics intuitive enables detailed description execution features authorisation filters concurrency constraints 
necessary specify restrictions syntax ponder simplify specifications compromise change semantics language way 
straightforward transformation turns ponder program syntax chapter 
distinguish restrictions features language cover indicate text 
semantics specified syntax ponder included appendix clarity reasons omit rules operational semantics discussion chapter 
complete set rules appendix structure operational semantics configuration ponder term state store state store deny configuration configuration state ident value store path path typedef state enabled disabled type configurations transition rules operational semantics transition system maps configurations new configurations ponder program 
configurations consist ponder term state store just state store 
deny special terminal configurations introduced 
state defined flat structure consists mappings identifiers primitive values objects runtime objects policies 
eliminate block structure local variables order avoid additional structures program counters higher order functions specifying semantics 
store repository policy objects policy types managed objects system 
maps domain paths policy objects policy type definitions 
term path refer domain path chapter 
chapter 
structural operational semantics policy object represented sequence labels associated expressions corresponding elements policy object subject target action 
apart standard policy elements additional label called state added hold state object enabled disabled 
see syntax appendix specification types expressions assigned labels policy object element expressions 
policy object annotated full path type instantiated 
policy type definition retained textual format specified syntax stored rule format shown consists sequence propositions pi horizontal line transition relation line holds propositions pi true 
note propositions transitions 
rules assigned names purposes 
pn rule name rules propositions existential quantifiers 
format pn true propositions pi true element finite set true propositions true elements finite set transition relation config config config config configurations defined indicate finite number applications transition relation takes config 
formally defined follows config config finite sequence configurations satisfying config config config config execution obligation policies involve events introduce second transition system include event histories associated obligation policies section 
refrain policies evaluated transition system seen filters execution obligation policies context management components 
lookup functions state store object operations define operations states stores policy objects 
program state store policy object pol nv type define new state obj obj section 
structure operational semantics new state val access element object stored state access policy element pol ife pol undefined pol subject dse new policy object pol pol new state pol val pol pol ife ix access policy object pol nv type stored path store path pol path undefined path pand policy object 
new store path pol path path path path new store path typedef path path path path new policy object pol pol new store path pol path path path path functions useful operational semantics policies returns policies store type auth auth deleg deleg oblig refrain 
object path returns runtime object managed object stored store path 
modelling runtime commands order describe dynamic semantics ponder programs model additional commands called runtime commands directly related execution ponder policies 
view commands part extended version ponder called order specification semantics complicated ponder ponder 
transition system specify semantics relation ponder terms 
describe commands want model informally formal description appendix enable path enables policy stored path store 
disable path disables policy stored path store 
exec models execution action parameters vi subject target chapter 
structural operational semantics exec sett models execution action parameters vi subject targets target set sett 
exec sets sett models execution action parameters vi subjects set sets targets target set sett 
filter exec command 
difference filter expression argument applied result method execution 
filter access control system indicate filter expression argument applied parameter values execution method field hides details accessing field runtime object allows pol indicate policy auth allows execution action parameters vi subject target result false policy doesn explicitly allow action true 
policy filter expression associated action command returned policy explicitly allows action execution 
disallows pol indicate policy auth disallows execution action subject target result false policy doesn explicitly disallow action execution true 
delegate executes delegation actions parameter subject grantee object 
note subject target actual runtime objects stored 
simplify policy life cycle introduced marriott model enabling disabling ponder policies shown 
words consider policies enabled distributed enforcement components 
disabled policy retracted enforcement components responsible enforcing 
simplifies specification semantics 
describe policy life cycle management detail chapter 
policy type dormant loaded enabled instantiate load unload disable enable policy life cycle policy type dormant enabled instantiate disable enable section 
authorisation policy semantics authorisation policy semantics place special restrictions access control system 
consider classical model access control enforced monitor mediates attempted access user program executing behalf user objects system sandhu 
sandhu shows enforcement access control system logical level 
ponder concerned authentication ideally exists separately access control security system 
line ponder terminology term subject refer principals users programs running behalf users attempt access objects system 
call objects accessed managed objects target objects simply targets refer monitor access controller 
assume single access controller entire system number distributed access controllers responsible specific set targets 
access control database repository authorisation policy objects store 
administration important part access control system 
aspects specification policies control access existing policies 
handled implicitly fact policies objects managed objects 
second aspect management policy life cycle addressed semantics see section 
subject security administrator administration authentication access control database monitor access controller access control model access control program execution types instantiation managed objects simplify syntax policy language order simplify task specifying semantics follows 
note full ponder translated subset defined restrictions allow constants specified outer level syntax language 
scope basic composite policies 
elements policy specified order require specified fixed order 
chapter 
structural operational semantics require constraint omitted true specified 
require paths absolute paths 
require policy instance instantiated policy type 
assume identifier assigned subject target domain scope expression 
replace constant definition type set 
subject id dse set id dse subject dse convert specification type subject target constraint follows subject router path subject path subject router allow subject target specified part formal parameters type 
set specified assigned subject target element policy 
assume filter condition associated 
true 
filters cause ambiguity policies overlap subjects targets actions filter action 
case application filters execution action non deterministic depends policy evaluated 
specification assume positive authorisation policies overlap subjects targets actions filter action 
provided analysis policies specification time prevent definition second policy 
handle change definition constants user external types just paths expressions 
omit prefixes actions specify specific object subject target domain objects omit import statement needed paths absolute 
omit domain statement declare current working domain needed paths absolute 
handle definition events constraints 
execution ponder program proceeds sequentially statement time indicated rules program program shown appendix type definition stored store specified path described type auth rule shown 
instantiation retrieves type store evaluates expressions passed parameters instantiation replaces evaluated values parameters body type stores result policy object store appropriate path 
state policy object set disabled 
note term meaning replacing variable term term inst auth rule replace parameter identifiers section 
authorisation policy semantics actual values parameters body authorisation policy 
rules apply negative authorisation obligation refrain policies 
path type auth path tn xn type auth path tn xn zi new identifiers new path type auth path tn xn ei vali val zn valn zn xn state disabled path path path inst auth path path en action execution access control decision type auth inst auth rules show access controller decision deny action execution 
assume global store policies introduce explicit configurations represent deny states system 
system reaches configuration execution action means execution granted 
similarly deny configuration means execution denied 
called terminal configurations words provide details execution system states 
exists positive authorisation policy store allows action execution negative policy disallows action execution granted described exec rule 
execution command allows determine positive authorisation allows specific action execution 
similarly evaluate execution disallows command determine negative authorisation policy disallows action execution 
describe execution commands detail section 
exists filter associated authorisation policy allows action execute access controller evaluates command simple shown exec filter 
execution described indicates action granted specified filter applied parameters execution 
pol policies auth allows pol vn true pol policies auth disallows pol false exec vn pol policies auth allows pol vn vn pol policies auth disallows pol false exec vn vn exec exec filter chapter 
structural operational semantics exists negative authorisation policy store disallows action execution execution action evaluates deny exec deny 
true policy specified action words action execution denied default shown exec default 
pol policies auth disallows pol true exec vn deny exec vn deny applying authorisation filters exec deny exec default rules show execution filters execution command 
filters evaluated order shown rule execution stops filter condition evaluates true 
second rule shows condition expression filter evaluates true expressions inside filter applied parameter values action execution 
evaluation filter returns command filters applied result execution 
command indicates action execution granted elaborated transition system shown rule auth exec filter done 
see affects execution exec command transition system obligation policies section filters applied result execution 
filter expr pn result false ba vn filter ba vn filter zi new identifiers filter expr pn result true pn vn expr expri vi pi expr vn filter vn auth exec filter auth exec filter auth exec filter done describe detail execution command allows determines auth policy allows action execution disallows determines auth policy disallows action execution 
evaluation commands rules described access control decision 
execution involves evaluation subject target domain scope expressions evaluation policy constraints 
introduce helper function filter pol return filter expression action positive authorisation policy pol 
section 
authorisation policy semantics allows command filter associated action allows command evaluates true false 
filter evaluates command action allowed false 
rule allows true specifies policy pol allows execution action true policy positive authorisation ii enabled iii belongs subject set policy iv belongs target set policy belongs set actions policy vi constraint policy evaluates true 
note rule filter associated action specified proposition line 
filter associated action execution evaluate command 
described rule allows true filter appendix pol policies auth pol state enabled pol subject sets sets pol target sett sett pol action new pol constraint true filter pol allows pol vn true allows true propositions described false execution allows evaluates false 
described rules shown 
pol policies auth allows pol vn false pol subject sets sets allows pol vn false pol target sett sett allows pol vn false pol action allows pol vn false new pol constraint false allows pol vn false allows false allows false allows false allows false allows false rules allows true allows false evaluate constraint policy add target subject objects current state 
constraint may require target subject object evaluated 
constraint subject target chapter 
structural operational semantics policy valid invalid 
may valid invalid targets target domain independently 
example shows authorisation policy valid target objects 
inst auth subject target action status active disallows command inactive inactive active example constraint target state policy valid object evaluation disallows command similar evaluation allows command 
difference case action parameters irrelevant concerned filters negative authorisation policies filters 
interested reader see appendix rules describing execution disallows command 
constraints subject target evaluations evaluation constraint subject target elements policy equates evaluation corresponding expression domain scope expression 
constraint rule specifies order evaluate constraint policy evaluate constraint expression return value execution 
similarly targets subjects evaluated set objects corresponding domain scope expression evaluates shown rules subject target 
pol constraint expr expr val pol constraint val pol subject dse dse set pol subject set pol target dse dse set pol target set expressions constraint subject target describe rules provide operational semantics basic expression types syntax 
complete set rules evaluation expressions appendix call ground terms terms rewritten 
term ground iff primitive value set value setvalue ri 
show constant definitions add new bindings state 
demonstrated section 
authorisation policy semantics rule expression assigned primitive type identifier integer string 
rule evaluates expression adds identifier state bound value expression evaluates 
rest constant types evaluated way appendix 
expr val id expr syntax expressions defines expression types see appendix value var expr methodname expr dse expr fieldname 
evaluation values variables simple 
values need evaluation variables evaluate value variable bound state 
expressions ocl syntax version omg 
assume function evaluates state store 
cover operational semantics execution function 
operational semantics ocl number papers richters 
val val ocl expr remaining expression types method calls field accesses 
discuss rules describe execution method call field access rules similar 
thing required execution method call evaluation parameters 
parameters expressions evaluated time left right shown rule method call 
ground expr expr val valk expr val valk expr method call parameters evaluated method call essentially translated action execution modelled exec command 
means execution method call evaluation expression constraint policy results actual calls system subject access control enforcement described previously 
types rules prefix expression method call evaluates 
prefix expression evaluates target action call object stored state evaluated policy object subject object target object shown rule method call 
prefix expression evaluates path target action call object stored path runtime object shown rule method call 
prefix expression evaluates identifier target object identifier bound shown rule method call id 
note subject chapter 
structural operational semantics method call current object context expression evaluated 
example access controller expression evaluated part constraint authorisation policy access check 
identifies object context call expr ri expr val valn exec ri val valn identifies object context call expr path obj object path expr val valn exec obj val valn identifies object context call expr id expr val valn exec id val valn method call method call method call field access rules evaluate field command see section similarly way method calls map action executions exec command 
prefix expression evaluates ri field access simply evaluates ri 
note execution field command change state store 
complete set rules field access expressions appendix domain scope expressions introduce functions help evaluating domain scope expressions eval path returns set objects path 
eval path returns set objects path navigating levels deep excluding domain objects 
eval path returns set objects path navigating levels deep including domain objects 
set set applies set operator sets objects set set 
evaluation domain scope expressions type path path path proceeds calling corresponding eval method defined 
action call domain object identified path executed exec command similar method call executed shown rule dse action call 
feature call expression evaluated function described rule dse feature call 
includes expressions form subject path select state idle obj object path path val valn exec obj val valn path obj path obj dse action call dse feature call section 
delegation policies evaluation composite domain scope expressions form dse dse proceeds evaluating dse dse calling function defined resulting sets 
complete set rules domain scope expressions appendix policy life cycle commands rules show execution enable disable commands control policy life cycle 
enable operation accesses policy path changes state policy enabled stores back store 
disable operation executed way changes state disabled 
note rules shown apply types policies thing changes proposition rule 
pol policies auth pol path pol pol enable path pol policies auth pol path pol pol disable path delegation policies enable auth disable auth proceed specification semantics delegation policies identify restrictions syntax delegation policies 
note restrictions change semantics ponder elements delegation policy specified predetermined order 
specification valid clause hops clause positive delegation policy required 
specified true assumed valid constraint hops 
assume means restriction number cascading delegation hops 
investigate case passing delegation policies parameters derive access rights delegation policies 
mapping delegation authorisation policies section describe informally delegation policy maps authorisation policies transition rules operational semantics 
main problem mapping delegation policy authorisations handling delegation constraints 
reminder various types delegation constraints see section chapter 
structural operational semantics time restrictions duration validity period specify duration period delegation valid revoked 
arbitrary constraint system attributes subject target grantee action attributes 
maximum number cascading delegations allowed maximum number delegation hops levels types constraints specified valid clause delegation policy 
third specified separately number hops clause 
simple example demonstrate mapping delegation policy authorisation policies 
assume delegation policy associated positive authorisation shown pseudo format deleg actions auth actions 
inst auth subjects target action auth actions inst deleg subjects target action deleg actions valid hops specification assume authorisation service interface delegate executes delegation actions grantee object revoke executes revocation actions object 
cascading returns number delegation hops performed respect delegation policy starting grantee object delegation policy may different cascaded delegation paths demonstrated 
requires book keeping authorisation service 
delegate hops starting grantee subject scope target scope grantee scope delegation hops hops starting grantee authorisation policy ad shown created delegation instance compiled 
ad subject grantor execute method delegate authorisation service grantee parameter method order delegate set access rights section 
delegation policies specified delegation policy grantee 
note number hops specified constraint generated policy ad clause constraint delegation policy anded constraint ad restrict validity validity delegation policy 
negative delegation policy maps similarly negative authorisation policy 
case don need map delegation hops negative delegation policy specify hops 
inst auth ad subject target action delegate includes deleg actions includes cascading grantor may exercise right delegate actions grantee 
doesn access control existing authorisation policies 
second authorisation policy ad dynamically created authorisation service action delegate action list executed 
true positive delegation policies 
note constraint original authorisation policy part constraint ad anded constraint 
specifies grantee execute access rights original subject access rights valid long valid clause constraint delegation policy true 
inst auth ad subject target action authorisation policy created allow cascaded delegation enable grantee delegated access rights delegate members grantee scope 
inst auth ad subject target action delegate includes deleg actions includes cascading execution revocation action causes authorisation service delete generated authorisation policy instances ad ad 
semantic rules type definitions positive negative delegation policies similar specified authorisation policies see section type stored store instantiation delegation policy different generate chapter 
structural operational semantics authorisation policy informally described previously 
rule inst deleg shows execution instantiation positive delegation policy 
delegation instance created authorisation policy constructed described purely syntactical process 
semantics require instantiation policies policy types generate authorisation policy type parameters instantiated get desired authorisation policy instance 
execution instantiation delegation policy amounts executing instantiation generated authorisation policy type indicated rule 
authorisation policy stored path delegation instance stored 
note delegation policy instance stored domain store need construct authorisation policies execution delegate method 
rule negative delegation policy similar 
thing changes syntactic construction corresponding delegation policy require constraint delegation hops 
zi new identifiers new path path type deleg path tn xn ei vali val zn valn zn xn state disabled path ri path type auth path subject subject target action delegate constraint action includes cascading path hops inst deleg path path path en inst auth path path delegating access rights inst deleg execution delegate command formalised way similar described instantiation delegation policy inst deleg rule 
difference rule delegation generates authorisation polices described informally previous subsection 
delegate rule appendix omit description clarity 
note assume delegation policy particular delegation actions subject grantee 
delegation policy allows delegation actions subject target assume analysis specification time selects specificity prioritisation 
section 
obligation policies obligation policies semantics obligation policies described section cover specify semantics catch clause exception mechanism obligation policies 
include case path prefix obligation action indicate action specific object target set entire target set 
assume action prefix 
prefix omitted assign subject prefix 
simplify semantics allowing keyword subject target specified prefix action 
subject means current subject target means target set policy 
events obligation policies event triggered rules 
requires different transition system semantics authorisation delegation policies include event histories trigger obligation policies 
adopt approach similar described lobo specify semantics pdl event policy language 
interpret policies event histories event history sequence event instances defined 
named event event form ident parameters set attribute names associated denotes class events 
event instance includes values attribute names event class 
adopt syntax named event event class instance denote event history stand event composite basic 
denote empty history 
sake simplicity ignore timer events 
timer event associated named event parameters timer assume named event occurs pm everyday 
table describes operators compose events ponder see section 
check event occurred event history checking exists minimal event history borrowing idea lobo define minimal history event follows event history minimal history conditions true basic event fk 
case 
history contains event instance vk event fk define trace chapter 
structural operational semantics exists minimal history hi ei hc hc hc minimal history 
trace trace trace exists minimal history hi hi 
ti trace ei ti trace exists minimal history hi ei hc hc hc hc minimal history 
trace trace trace minimal history 
trace trace 
equivalent satisfaction second case 
time 
define named event parameters occurs time seconds 

satisfaction second case 
exists minimal history minimal history hc hc minimal history 
trace trace trace define function determines event occurs event history occ event history event true false occ true exists minimal history trace minimal history 
occ false 
define list attribute names event list values attributes event instances trace event history assume event service es maintains event history hi obligation policy oi system policies oblig 
introduce transition system runtime execution obligation policies includes event histories 
terminal configuration fail introduced denote failure execution obligation actions 
ponder term state store event history state store event history fail configurations transition rules obligation policies notation semantics refer manipulate event histories denotes list event histories 
section 
obligation policies denotes fact history hk changed new history denotes updated history list 
denotes fact history hi updated retrieve event history associated obligation policy calling es 
es obligation policy object elements subject dse target dse event action constraint expr state true false type obligation policy execution section discuss execution enabled obligation policy event occurs triggers policy 
rules discussion range ba range 
subject set target set obligation policy event 
target action exec subject set target set action exec target set action exec action obligation policy execution illustrates execution obligation policy precisely execution single target action obligation policy assume action element policy target ba 
event occurs triggers policy subject target sets policy evaluated 
execution action form target action proceeds follows subjects asked execute action targets 
subject translates series action calls target 
different variations exec command model action executions described section 
obligation triggered subject target sets evaluated term target ba executed command form exec sets sett ba execution action ba set target objects set subjects command translated series exec si sett ba set commands turn executed series exec chapter 
structural operational semantics ba ti sett commands 
rule event exec target shows execution evaluation term target ba 
occ function determine current event history results addition newly occurring event triggers obligation policy 
event history associated triggered obligation policy emptied 
note state updated values names event introduces evaluation constraint subject target happen updated state access values 
execution action take place updated state see rule 
new event instance occurs hi hi hi ei pol policies oblig pol action target ba pol state enabled hk es pol occ hk pol event true tk trace pol event history hk xi vali xi pol event vali tk pol constraint true pol subject sets pol target sett hk ei vi target ba en hi exec sets sett ba vn event exec target execution happens similarly action subject term subject ba 
case term evaluates exec sets sets ba command executed series exec si si ba 
commands hides details executing ba action internal subject subject object subject evaluated subject set policy 
rules describe execution proceeds subject target actions illustrated appendix failure action execution obligation context management component means action denied access control system shown rule exec fail refrain policy action executed refrain disallows action execution shown rule exec refrain fail 
success means action allowed shown rule exec success 
note deal failure executing action due reasons specification network failures 
introduce explicit error configuration called fail model dynamic errors execution actions 
pol policies refrain disallows pol ba true exec ba vn fail exec refrain fail section 
obligation policies exec ba vn deny exec ba vn fail exec ba vn exec ba vn val exec ba vn ba vn exec ba vn ba vn exec fail exec success exec success filter access control decision may return command configuration execution granted filter applied result execution see section 
case execution action evaluates execution command shown rule exec success filter 
rules show execution filter expressions evaluation 
filters evaluated order described rules exec filter 
execution stops filter condition evaluates true return expression filter applied value val normal execution returns described rule exec filter 
resulting value val returned result filter execution 
filter expr pn result false exec ba vn filter exec ba vn filter zi new identifiers filter expr pn result true exec ba vn val val val ba vn filter val execution composite actions exec filter exec filter execution composite policy actions semantics concurrency operators informally section see table 
transition rules formalise description appendix omit discussion reasons clarity 
refrain policies disallows command executed context policy management agent determines action execution disallowed refrain policy filtered execution obligation policy demonstrated rule exec refrain fail described previously 
rules show execution disallows command refrain policies chapter 
structural operational semantics similar section allows command authorisation policies transition system different 
example rule corresponding rule allows false specifies refrain apply action execution constraint evaluates false forcing execution disallows return false 
complete set rules interested reader see appendix new pol constraint false disallows pol false composite policies refrain false section provide semantics composite policy types presenting semantics groups roles relationships management structures executed similar way 
basic policies types instances inside composite policy stored directory entry representing composite policy 
path specification prefix name basic policy discarded 
assume single inheritance composite policy types overriding common policy instances policy types 
policy instances name policy types name parameters overridden 
define functions enable specification semantics path creates new domain path store 
override overrides definitions composite policy type body type base type adds bodies account inheritance rules described 
path replaces path prefix name policies types instances body composite policy path 
path replaces subject element policies inside body composite policy path 
roles 
groups composite multiple statements group executed sequentially described rules program program 
notation represent composite policy objects components composite policy type policy type definitions policy objects typedef type section 
composite policies group type stored store extend group type shown rule type group 
type extends type bodies types combined common elements policies extending type overriding base type 
described rule group type extends uses override function combine group bodies 
rules apply composite policy structures 
path type group path tn xn bgroup type group path tn xn bgroup zi new identifiers path type group path tn xn bgroup extends ei vali val zn valn bgroup bgroup zn xn bgroup override bgroup bgroup path type group path tn xn bgroup type group path tn xn extends path en bgroup type group group type extends instantiation group type replaces values actual parameters inside body group creates new domain entry group function changes domain paths policies inside group body domain group function evaluates body resulting group instance indicated transition bgroup 
executes statements body time creates stores policy instances types new domain entry 
group instance created added state placed store 
inst group rule shows body group policies inside group evaluated respect new state resulting parameters group added state val val zi new identifiers new path type group path tn xn bgroup ei vali val zn valn bgroup bgroup zn xn bgroup bgroup path path bgroup path inst group path path en roles inst group role type stored way described groups 
instantiation rule role similar described group role inst 
difference subject policies inside role set subject domain role function 
chapter 
structural operational semantics zi new identifiers new path type role path tn xn ei vali val zn valn zn xn path path path path inst role path path en path domain system model inst role alloy jackson specify model domain system analysed alloy constraint analyser jackson demonstrate doesn suffer constraint 
include graphical representation alloy model complete textual representation included appendix appropriate comments 
managed object root 
contents parent children name name entries graphical alloy domain system model model consists managed objects non domain objects domain objects 
classifications managed objects static indicated vertical line left corresponding boxes 
means object domain non domain object preventing non domain object domain object lifetime vice versa 
filled arrowhead indicates partition managed objects domain non domain objects 
root domain object root indicated exclamation mark word root 
root particular type domain object fixed indicated vertical lines sides root box 
section 
domain objects contain domain entries accessed entries relation domain objects 
domain entry unique name assumed drawn fixed set predefined names unique contents 
contents domain entry managed object accessed contents relation 
diagram express operations part alloy specification included appendix specify operations op es add set entries es domain op create object name create new object name domain op name delete entry name domain assertions ensure execution operations leave system inconsistent state see appendix 
note operation moving object domain performed sequence create delete operations 
chapter structural operational semantics policy specification language chapters 
semantics treats policies objects predefined set attributes corresponding elements policy type 
semantics separating execution authorisation delegation policies access control enforcement execution obligation refrain policies subject policy enforcement 
operational semantics term rewrite system maps configurations consisting ponder terms new configurations shows step step execution terms 
policy specifications evaluated context domain store state list event histories specification involves subject policies 
handle policy specification instantiation storage domain service runtime execution policies 
semantics demonstrate simple execution model dictated declarative nature policy language 
note current specification handle meta policies include type inference system left 
formal treatment domain system alloy object modelling notation 
includes operations domain system proof consistency domain operations 
chapter policy compiler main motivation design common high level language different applications policy management ability uniformly specify policies enforced multiple heterogeneous application domains mechanisms 
chapter describe automated support compiling policies implementable specifications 
simple scenario backup archiving system computer research institution explain design choices chapter 
scenario scenario consider management backup archiving system research institution autonomous operating units corresponding departments inspired scenario 
certain services including backup archiving servers available centrally periodic backups month departments may backup servers frequent evening 
file servers available department possible specify backup strategies individual users requirements frequency data backup life backed data 
important administration managed data delegated hierarchical basis 
domains model hierarchical structure system enable policy specification logically centralised system administration 
shows partial view domain structure system 
staff subtree contains system administrators research development staff subdivided division department 
staff admin subtrees subdivided department shown due space limitations reflect fact departmental administrators responsible users corresponding department 
system subtree contains resources files data partitioned reflect departmental structure system servers backup account mail 
subtree group policies management specific information 
policy administrators staff admin policy security administrators staff admin sec permitted access management information 
section 
design choices root staff system div admin res dev sec policy power internet parallel graphics formal ai backup staff ids profiles resources servers pol res dev backup acc ac man 
resources divided department 
servers research institution partial domain structure roles urd management info security important aspect system 
authorised users able access files shared department explicitly granted access 
account servers hold account information user system 
users normally allowed execute actions carried administrators regular backups setting backup parameters 
administrators delegate actions users administer 
management system includes role management features 
security manager role specified defines authorisation obligation policies associated account security manager 
similarly backup administrator role defined backup administrators assigned 
design choices ponder policies mapped low level representations suitable enforcement security mechanisms underlying system deployed management agents formats appropriate shipping manipulating policies xml 
obligation refrain policies enforced automated management components agents act subjects system enforcement code policies suitable interpretation execution distributed enforcement components 
attractive solution java code distributed networks executed system java virtual machine 
alternative generate java program obligation refrain policies specified loaded agent execution agent ponder policy aware case 
java code accept requests administrators possibly agent code loaded provide interaction underlying event domain services order enforce policy 
chapter 
policy compiler generated java program way java mobile code extend functionality agents system plug play fashion 
approach attractive disadvantages modifications interfaces underlying services render generated java policy objects unusable dependencies java code services 
deployed policies need retracted recompiled redistributed expensive operation 
distributing policies mobile code increases security risks chess 
size generated policy objects need stored policy repositories large problem large scale management systems 
code generation authorisation policies different implementation requires close interaction underlying access control mechanism 
expect able map authorisation policies variety heterogeneous security platforms mechanisms firewalls operating systems security database security java authorisations 
direct mapping available access control mechanisms possible cases support features ponder authorisation policies 
means authorisation policies enforced access control entities term access controllers architecture see chapter important distribute authorisation policies format suitable interpretation access controllers 
choose follow approach decouples implementation policies runtime architecture code generated policy compiler enabling easy interpretation policy objects distributed enforcement components 
policy ponder compiler generates java object maintains data structure representation policy 
subsection define interfaces standard representation policies runtime objects 
runtime representation reflects analysis performed policy specification compiler easier evaluate different elements policy runtime 
policies runtime objects policy implemented runtime system object policy compiler generates object policy stores domain service 
policy object accessed domain service distributed enforcement components responsible enforcing policy enables objects components system query determine subject target elements policy 
representation policies runtime objects follows class hierarchy 
annotated class diagram basic policy classes shown 
policy compiler creates appropriate subclass class section 
design choices hierarchy user defined policy types 
user defined positive authorisation policy example compiled subclass auth class 
class instantiated policy object standard object oriented techniques 
authorisation auth actions auth actions name string string subject target constraint constraint delegation string grantee actions deleg deleg validity constraint hops int oblig actions event event exception exception runtime basic policy object classes refrain actions outline representation various elements basic policies subsections 
domain scope expressions dse type see model subjects targets basic policies 
type contains string indicating idl type specification dse 
dse represented tree non leaf node leaf node 
leaf dse node contains 
domain scope expression class hierarchy classes models domain scope expression models dse form represents single domain models dse form intvalue returns non domain objects intvalue levels domain hierarchy starting chapter 
policy compiler models dse form intvalue returns objects intvalue levels domain hierarchy starting models dse form subclasses model simple domain objects models path 
models method call domain object get 
models attribute subject target policy object subject example dse runtime representation 
get constraints get domain scope expression runtime representation constraints divided different classes part basic policy specification apply models constraint subject policy 
models constraint target policy 
models constraint parameter event policy obligation policies 
models constraint parameter action policy policies 
models constraint form time methodname parameters 
model type constraint 
call system get state information 
constraint constraint class hierarchy section 
design choices example composite constraint positive authorisation policy 
note subject target constraints contain relational expressions 
general constraints composed expressions describe subsection 
inst auth subject target action idle events idle action param constraint runtime representation classes model events include models event form event time models event form event models event form event event event models event form timer methodcall parameters 
models named event userid event event class hierarchy simple example composite sequential event shown timer events runtime representation event specifies sequential event composed events specifying occurrences event 
second timer event occurs secs pm 
composite event detected secs pm occurred times 
chapter 
policy compiler obligation policy actions obligation actions composite single actions 
single actions contain indication action executed subject target policy shown example 
obligation actions class hierarchy note example parameters action maintained object represents action runtime 
parameters instance expression 
inst oblig subjects target true subject target target obligation action runtime representation positive authorisation policy actions positive authorisation policy contains list positive authorisation actions 
actions contains filter list 
filter contains condition true specified expression result list parameter filter expressions 
objects contains expression applied parameter position parameter action call 
simple example type auth subject target action lookup belongs maths abs result result external script call filter attached lookup action executed subject policy belongs group external users restricts values input parameters method call result method call 
lookup method called return location target object electronic badge system 
parameter specifies system update location sending result meaning update requested external user 
second parameter id user requesting information filter section 
design choices expression just sure integer value 
result filtered external script specify reply granularity building called external users 
filter lookup belongs subject condition result result abs positive authorisation actions runtime representation negative authorisation refrain delegation policies action specification just list names modelled simple list data structure 
exceptions obligation policies single action calls contain action call expression 
describe runtime representation expressions 
expressions classes model expressions runtime models action call object 
models object attribute expression attribute object system including policy objects 
models feature call expression method call collection set literal 
models expression form math methodcall parameters call predefined math library object 
value type pair 
expressions composed composite expressions logical expression multiplication expression relational expression additive expression 
complete class hierarchy expressions shown 
addop relop expression expression class hierarchy chapter 
policy compiler compiler design implementation dedicated code generators compiler back ends implemented translate ponder specification variety runtime representations required 
shows main modules policy compiler framework 
main phases compiler generate intermediate code passed code generators added compiler 
code assembler module responsible storing generated code policy domain service appropriate domain entry 
implementation specific domain service implementation 
entry policy contain representations policy 
particularly true authorisation policies 
default representation java code implementation interfaces described section rest representations termed auxiliary accessed domain entry policy 
policy source text syntax analysis ast syntax tree ic intermediate code ast scope type analysis syntax analyser semantic analyser ic code assembler compiler framework java policies code generator xml code generator firewall filters generator 
call policy service store policy code directory compiler lalr parser generated sablecc gagnon objectoriented java parser generator 
components compiler implementation illustrated 
generated sablecc grammar language appendix parses policy specification syntax tree ast java objects 
ast passed semantic analysers 
semantic analysis performed passes 
handles definition names scope analysis checks basic policies contain required elements completeness checks 
completes scope analysis performs type analysis generates intermediate code ic 
ic tree structure java objects corresponding composite basic policies specification 
allows navigation specification access individual policies policy elements implements interfaces section 
ic passed component responsible coordinating code generation phase 
main module compiler maintains list code generators implement standard interface dynamically added compiler plug play fashion recompiling system passes ic code generators section 
compiler design implementation enabled user generate code 
code generators call store generated code directory 
implementation specific underlying domain service implementation interfaces defined allow customisation code assembler need modify rest components 
added compiler 
implements predefined interface receives copy ic policy analysis selected 
perform modality conflict detection implemented colleague imperial college tested successfully current compiler implementation 
parse compile set parameters compiler main add code generator set policy analyser ast ic compiler implementation main compiler module exposes interfaces standard interface set compilation parameters parsing compilation policy specification interface add code generators set policy analyser 
java code generator included default generate java object representation policies defined section 
policy types compiled java policy classes stored domain hierarchy 
instantiation basic policy type creates initialises java policy object 
predefined classes exist implement basic functionality classes corresponding basic policy types see 
user defined basic policy types generated java classes extend appropriate basic policy class 
basic policies specified directly instances unnamed java class generated background instantiated 
example obligation policy type example scenario generated java code 
type oblig subject uid target ms system servers ms uid obligation policy requires backup administrators subject policy parameter policy type send notification user user disk space quota exceeded 
java code generator receives intermediate code constructed main phases compiler obligation generates java class shown subclass predefined obligation class 
obligation class maintains various policy elements allows access 
objects various elements chapter 
policy compiler constructed java code generator simply reconstructs class instantiated set super class 
import java io import java util linkedlist import compiler codegen import compiler codegen events import compiler codegen constraints public class extends obligation implements serializable public string name set name domain path policy super name pol man actual parameters instantiation stored linked list linkedlist new linkedlist add super set subject object super target policy element bytes serialised target object byte 
reconstruct target object target null try new ois new target ois catch ioexception system println catch system println set target object super target action policy element bytes serialised action object byte 
reconstruct action object action null try new ois new action ois catch ioexception system println catch system println set action object super action event policy element bytes serialised event object byte 
reconstruct event object event event null try new ois new event event ois catch ioexception system println catch system println set event object super event generated java code snapshot enforcement authorisation policies probably require mapping additional auxiliary representations 
scenario servers store data ai research group section 
policy specification support linux servers departments windows appropriate access control code generated type server 
compiler evaluated various projects resulted preliminary implementations translating ponder policies various access control platforms 
include java back transform ponder authorisation policies access control policies java platform 
required extensions java security model order enable run time ponder policy evaluation constraint checking filtering 
code generators translating ponder authorisation policies windows security templates firewall rules 
experimentation mapping ponder authorisation policies linux access controls 
system level scripts specified program linux security kernel 
code generator translates ponder policies calls scripts 
compiler handles predefined libraries timer time domain objects defined appendix policy specification support policy editor implemented integrated development environment ide specification ponder policies 
policy editor tool integrated policy compiler provides easy development environment specifying reviewing modifying chapter 
policy compiler policies 
templates create policies easily domain browser invoked select subject target domains policies 
existing policies policy types selected directory aid domain browser loaded editor modified recompiled stored back directory 
code generators added compiler framework accessible enabled editor select type code generated 
examples policies specified backup archiving scenario include inst auth pol ac subject staff admin sec target ds system servers action ds ds inst auth pol ac subject staff admin sec target bs system servers backup action bs bs bs policy security administrators add delete users domain service 
security administrators create delete user accounts enterprise backup system institution 
allows setting backup restore preferences individual users 
domain pol ac type auth subject set target system servers action delete data read data data inst auth staff admin backup dev system resources dev policy type backup administrators read delete certain backup data servers 
policy instantiated type backup administrators development division read delete backup logs stored system resources dev directory 
domain pol man type oblig subject set resources timer resources inst oblig system servers backup dev internet system resources dev internet type oblig subject set resources timer fri resources inst oblig system servers backup res parallel system resources res parallel examples obligation policy types specified refer automated agents system human users 
specifies backup servers perform daily backup set resources pm day 
specifies backup servers perform weekly backup resources parameter policy type 
backup takes place pm 
instantiation statement creates instance policy type 
internet department development division institution may require daily backups carried corresponding backup server 
hand research departments parallel department specific example may require backup data weekly basis 
backup performed appropriate backup servers 
section 
policy editor specification policies easy template dialog boxes create skeleton bodies policies event dialogs select triggers obligation policies interaction domain browser select domain paths specification 
chapter described design implementation policy compiler generate enforcement code ponder policies 
fact language high level imposes requirements design compiler ability generate variety low level representations policy mechanisms enforce policy 
important authorisation policies enforced mapping policies target security mechanisms ii design runtime representation policies enable distribution enforcement components interpretation policies easy 
compiler implemented java satisfies requirement allowing addition customised back ends generate code application 
default java code generator included generate java object policy order satisfy second requirement 
described interfaces implemented generated java code enable easy interpretation policy objects enforcement components 
compiler integrated policy editor simplifies policy specification policy templates interaction domain browser 
chapter show code generated compiler deploy policies 
performance results compiler implementation chapter critically analyse policy framework 
chapter policy management platform previous chapters described formally formally proposed policy specification language 
chapter complete description policy management framework introducing architecture deploying policies 
deployment architecture supports instantiation distribution life cycle management policies enforcement automated enforcement components 
assume object oriented view underlying distributed system interaction occurs remote object invocations asynchronous event notifications 
overview architecture dulay 
implementation architecture integrated policy administration toolkit 
examples scenario described section discussion clearer 
deployment model overview illustrates architecture management system 
includes supporting services domain service policy service event service 
policy service acts interface policy management stores compiled policy classes creates distributes new policy objects 
domain service manages distributed hierarchy domain objects supports efficient evaluation subject target sets run time 
domain object holds managed objects policy objects currently apply domain 
concept domain service similar directory service ldap extensions allow changes membership directory distributed interested parties events 
domain service implemented database systems 
event service collects composes system events managed objects system forwards registered policy management components trigger obligation policies 
call objects generate events event publishers 
event service exposes publish subscribe interface clients subscribe receive certain types events 
user policy administrator interacts policy domain services design domain structure specify new policies compile store domain service 
management section 
deployment model overview tools interface services provide graphical environment specifying managing policies 
distribution policies initiated policy service 
policy control objects generated maintained policy service manage policies runtime 
includes distribution policies enforcement components handling dynamic domain membership changes objects policies apply 
fact ponder policies explicitly define subjects targets automated distribution policies possible 
obligation refrain policies distributed subjects authorisation policies targets corresponding 
domain service event publishers policy management component subscribe notify publish subscribe event service management tools oblig refrain control objects middleware policy service middleware access controller authorisation control objects subject target system security management system architecture target managed objects entities enforce policies called enforcement components potentially distributed 
enforcement components implement policy enforcement interface support loading unloading enabling disabling policy objects disseminated 
authorisation policy enforcement delegated enforcement components intercept actions target objects perform checks access permitted 
model enforcement components authorisation policies termed access controllers acs typically interface lower level access control mechanisms really carry access control example firewall protecting services network operating system protecting resources database manager protecting databases 
access controller normally protect targets location enforce authorisation policies relating 
subjects authorisation policy objects initiate invocations 
subjects refrain obligation policies instances special enforcement components called policy management components behaviour defined refrain obligation policies apply real world entity represent 
policy management components directly enforce refrain obligation policies subject chapter 
policy management platform architecture generic targeted specific applications qos security storage management 
enforcement obligation policies requires pmc subscribe event specifications enabled obligation policies event service 
event service notifies pmc events trigger obligation policies pmc responsible executing actions defined policies constraints valid refrain policies apply executions 
refrains similar negative authorisations enforced subject pmc act filters actions subject invokes 
policy administration toolkit overview ponder architecture implementation shown 
implementation uses ldap wahl realise domain service java rmi sun middleware communication various system components 
tools implemented java swing graphical user interfaces 
policy management components access controllers implemented java rmi remote objects 
policy domain services implemented java rmi 
policy control objects remote objects bound ldap directory persistence 
execution policy lifecycle operations occurs direct interaction rmi policy control objects 
java naming directory interface sun api provides directory naming functionality java applications interface ldap directory 
current implementation event service elvin segall arnold publish subscribe messaging system implements content event notification 
mgmt console policy editor user role mgmt tool enforcement components elvin event service compiler domain browser java rmi policy control objects java rmi ldap domain storage policy service domain service java objects swing java rmi objects management system architecture implementation domain browser implemented colleague related project imperial college see section provides common user interface management interaction objects stored domain service 
tools interact domain browser section 
policy administration toolkit select objects domain service 
shows steps involved managing policy system 
policies roles created policy editor see section compiled stored domain service 
management console user role management tools distribute policies manage roles activation deactivation assignment 
tools distributed manner number administrators 
automated enforcement management tools policy editor domain browser policy domain storage compiler policy management cycle domain service implemented ldap version directory wahl extensions allow objects members multiple domains 
define ldap schema object class hierarchy language appendix extends schema representing java objects defined ryan add object ldap class represent multiple parents directed acyclic graphs 
note ldap storing policies grouping subject target objects ietf framework moore uses directories policy repositories 
main console gui component toolkit consists main console accessing individual tools implementation allows easy customisation addition new tools 
operation tools requires connection policy domain services 
configuration parameters specified configuration manager tool shared tools system 
snapshots main console configuration management tool shown 
chapter 
policy management platform toolkit toolkit main console configuration tool defined interfaces enable addition new tools main console 
illustrate interaction tools main console role interfaces 
tool needs implement interface order enable main console invoke tools display information 
main console domain browser tool implementation interfaces domain browser key component aspects integrated management environment 
external tools invoked domain browser specific managed resource policy depending current selected context interface domain browser allow navigation selection objects domain service 
example policy editor see section allows specification policy subject target domains selecting domain browser 
order enable kind interaction invocation interface specified domain browser tools interface 
invocation interfaces implemented domain browser described section 
existing ldap browsers long extended implementation interfaces shown 
tool tool ii section 
policy distribution policy distribution key aspect architecture automation distribution policies enforcement components need manually manage associations policy objects enforcement components 
associations explicitly defined policies subject target enforcement components responsible implementing policies identified runtime 
obligation refrain policies set policy management components subject scope policy 
authorisation policies set access controllers responsible enforcing access control set managed objects target scope policy 
illustrates steps involved deploying policy instance shows interactions components architecture 
policy administrator interacts policy service specify new policy compiled policy object stored domain repository policy service 
administrator select stored policy objects interacting policy service 
policy service accesses domain repository creates corresponding policy control object selected policy coordinate run time access dissemination policy authorisation control object aco authorisation policies refrain control object rco refrains obligation control object oco obligations 
policy administrator load unload specify select enable disable ec ec policy service create store access evaluate subjects targets notify domain changes ec add associations domain service po policy object policy control object ec enforcement component po monitor policy deployment steps dormant loaded enabled policy states policy object loaded enforcement components loaded enabled disabled unloaded enforcement components see possible policy states 
unloaded dormant policies re loaded deleted 
policy control object ordinates life cycle policy operations acts centralised control point managing concurrent possibly conflicting requests multiple policy administrators 
note replication policy control objects possible enhance scalability 
administrator interacts corresponding manage policy 
administrator executes load request evaluates set objects policy applies chapter 
policy management platform subject set refrain obligation policies target set authorisation policies distributes corresponding policy object enforcement components responsible enforcement 
enable disable unload operations similarly forwarded enforcement components 
addition distributing policy object associates policy domain objects policy applies 
enables domain service notify changes occur domains order automate process loading policies newly added enforcement components remove policy enforcement components policy longer applies 
describe process detail section 
enabled policy object active runs enforcement components policy distributed 
details execution obligation refrain policies described section 
authorisation policies distributed way access controllers discuss enforcement access control detail section 
management console tool implemented management console tool dynamically managing policies interfaces domain browser select policies enforcement components directory policy compiler interactively instantiate policies 
management console tool steps involved tool demonstrated 
tool main views section 
policy distribution management console select policy query load unload enable disable domain browser 
enforcement components managing policy life cycle ldap domain service policy control object policy objects view policy instance selected domain service domain browser loaded management console 
similarly domain selected policy instances domain loaded management console expandable tree navigator 
policies loaded unloaded enabled disabled needed transparently interacting 
details selected policy status displayed 
note groups managed way domains 
group selected directory get access policies inside group 
policies managed individual basis groups merely syntactic structures 
management components view policy management components selected domain service domain browser information policies loaded displayed tabular format 
includes policy information status policies 
command line window included type single line commands policy compiler 
allows interactive instantiation policy types 
note multiple management consoles manage domain policy objects distributed fashion 
ldap implementations support concurrency control problem case management consoles modifying contents ldap server 
management console accessing concurrent requests handled level policy control rmi object 
domain membership changes domains static object added domain deployed policies applying domain automatically apply new object 
similarly policies cease apply objects removed domains policies refer 
consider example archiving scenario obligation policy applies backup servers research division 
servers perform self check available disk space st month 
new server installed system added system serv backup res chapter 
policy management platform domain policy automatically loaded enabled server 
domain service detects addition new server notifies policy 
loads enables policy new server 
true policies applying domain 
note backup servers scenario act subjects obligation policies implement pmc interface 
inst oblig timer subject system servers backup res similarly authorisations automatically loaded access controller responsible protecting newly added backup server 
inst auth subject staff admin backup target system servers backup action config inst auth subject staff admin sec target system servers backup action shutdown positive authorisation policies specify access rights backup servers security backup administrators respectively 
security administrators authorised shutdown servers backup administrators access rights relating configuration backup restore job management operations 
order enable process policies loaded enabled state need informed changes memberships domains policy refers 
domain service detects changes domain membership notifies affected changes 
domain service includes monitoring components different types objects added removed domain service distribute load monitoring notifying changes illustrated 
copy policy administrator update get info removed objects management actions domain service policy control objects single object change parent change pmc listener target listener domain listener monitor domain membership monitoring domain storage set update attribute pmc listeners monitor changes involve policy management components target listeners monitor changes involve type object apart pmc domain objects domain listeners monitor changes involve domains including additions removals multiple section 
policy distribution parents object 
obligation refrain policies interested changes involving subject domains policy receive notifications pmc listeners 
authorisation policies interested changes involve target domains receive notifications target listeners domain listeners 
note implementation domain service listeners distributed 
process attribute added domain object entries call 
attribute contains list policies affected changes domain interested informed changes affecting domain 
responsible updating attribute receives load unload requests policy administrators 
obligation policy loaded corresponding oco evaluates list domains scope subject dse obligation policy changes attribute domains include obligation policy 
inversely unload method oco removes policy attribute subject domains 
happens authorisations domains involved scope target dse policy 
change notifications received domain listeners may require updating domains notifications involve addition removal parent domains 
identify different types changes affect policy control objects 
involves addition removal single non domain object domain 
second termed involves addition removal new parent object 
single object change notified pmc listener obligation policies target listener authorisation policies 
parent change notified domain listener 
describe cases obligation policies similar algorithm authorisations 
single object change easy pmc listeners identify domain pmc added pmc removed send notification policy control objects included list domain 
notification includes object pmc added removed addition removal 
addition oco simply load enable necessary obligation policy new pmc 
removal oco remove policy disable unload pmc 
parent changes complicated may result addition removal new parent object 
note domains overlap objects sub domains members multiple domains 
changes membership domain result change set objects policy applies domain may set union operation set difference operation 
example demonstrates issues involved 
chapter 
policy management platform consider domain structure obligation policy subject addition link shown domain structure policy applies pmc object loaded new link added shown pmc longer scope obligation policy policy unloaded exact opposite happen link removed go domain structure 
addition situation different subject domain case pmc scope subject dse addition link domain structure part subject set addition link domain domain domain structure 


domain parent changes 
cases handled oco receives notification oco re evaluates subject dse identifies objects added removed comparing new set old change received accordingly proceeds load enable disable unload obligation policy set resulting comparison 
question policy receive notification 
domain listener sends notification policy appears list domain receives new parent example domain 
sends notification policy appears list domain new parent domain 
happens links removed 
naming listeners implement domain service listeners 
listener registers interest certain events filters restrict change notifications receives responsible 
listeners process events access ldap get information policies affected events 
request policy control objects corresponding policies notify appropriate 
issues new domain added inherits attribute parent domain 
policies list parent may candidates inheritance dse caused addition restricts propagation 
handle case section 
policy management component entries attribute include policy object number indicating number levels propagate domain hierarchy 
includes copy domain storage maintained domain service 
domain repository implementation provide ability get information removed objects domain service need maintain minimal copy domain storage including information may required removal certain types objects 
example managed object removed domain service authorisations applied object need notify access controller responsible object change 
order need get information object accessible copy domain storage 
section describe architecture policy management component explain issues involved enforcing subject policies 
policy management component policy management components enforce enabled refrain obligation policies subject 
act proxies user allow access resources permitted authorisation policies act automated agents interpreting obligation policies user behalf 
created stored directory domains specify subjects obligation refrain policies 
overview operation pmc shown 
policy management interface management actions exec main module obligation policy table script actions management interface refrain tables dynamically loaded refrain filter actions execute evaluate subject action execute executor event handler constraint handler policy management component subscribe event evaluate targets actions event service domain service target managed objects obligation refrain policy objects loaded corresponding policy control objects oco rco policy management interface exposed pmc 
policy objects encapsulated appropriate enforcement objects stored locally 
obligation policy chapter 
policy management platform encapsulated obligation enforcement object stored obligation policy table refrain policy encapsulated refrain enforcement object stored refrain filter component 
enforcement objects removed deleted tables corresponding policy retracted 
policy life cycle operations executed pmc policy management interface 
operations forwarded appropriate enforcement object 
obligation policy enabled corresponding registers obligation event specification event service 
enabling refrain policy simply changes status corresponding enabled 
composed event handler constraint handler executor component 
event handler component subscribes obligation event event service 
event service processes events received event publishers disseminates obligation policy event handlers subscriptions 
numbered interactions illustrate steps involved obligations triggered 
receiving event event handler initiates execution obligation policy requesting evaluation constraint specification 
constraint handler component called evaluate constraint 
constraint target evaluation constraint performed target objects scope policy may true targets 
case constraint handler evaluates set target objects target dse performs evaluation constraint targets returns set targets policy valid 
step evaluation refrain policies may apply set targets returned constraint handler 
refrain filter component pmc identifies refrain policies valid set targets actions obligation returns table filtered actions associated set target objects action executed 
initiates execution actions delegating task executor component 
executor component executes target actions associated target sets subject actions calling main module pmc name parameters action 
pmc provides script actions management interface allows action objects dynamically loaded pmc extend functionality stored locally table 
pmc executes subject internal action identifying table stored actions calling exec method start execution action 
executor component multithreaded component responsible execution composite obligation actions 
structured specification obligation actions executor creates threads handle execution nodes obligation action tree 
subsections describe detail evaluation constraints execution refrain policies event handling part obligation policy execution 
section 
policy management component evaluating constraints constraints obligation refrain policies evaluated context set target objects identify targets policy 
runtime policy objects loaded policy management components contain structured constraint specification compiler section resolves different types constraints generates corresponding constraint object hierarchy 
constraint evaluation performed type constraint 
separate subcomponent constraint handler delegated task evaluating type constraint 
apart target constraints types constraints evaluate true false 
false indicates policy valid target 
target constraints evaluated target objects result set targets policy valid 
set empty policy valid targets 
composite constraints evaluated combining results individual constraints logical operator composite constraint 
case conjunction result composite constraint set intersection targets evaluated individual constraints 
case disjunction result composite constraint set union target sets evaluated individual constraints 
enforcing refrains refrain filter component pmc responsible applying enabled refrain policies execution actions obligation policy order filter actions pmc refrain performing 
left side shows tables maintained refrain filter right side shows table returned refrain filter called evaluate refrains obligation policy 
action name target notify hashtable refrain name target dse staff admin refrain name hashtable refrain filter refrain enforcement object refrain filter tables action name target notify hashtable execute 
subject log target set staff staff admin new refrain policy loaded pmc corresponding passed refrain filter added refrain policy table rpt 
addition refrain filter extracts names actions refrain policy target dse policy fills refrain action table rat 
actions refrain policy refrain filter adds target dse chapter 
policy management platform policy list targets action executed 
refrain policy may refer action action associated list prohibited target 
consider policies loaded enabled security administrator pmc inst oblig uid subject staff admin sec target staff notify log uid inst refrain subject staff admin sec target staff admin action notify obligation policy specifies security administrators send notification staff user quota exceeded remind space availability measure accidental denial service attacks log event 
refrain policy specifies notification send administrators 
illustrates contents rat rpt refrain loaded pmc 
assume refrain policy applies action notify list refrain targets action contains entry 
entry identifies target action specified staff admin target 
refrain filter called apply refrains obligation policy returns table identifying actions obligation policy set targets action executed refrains applied 
actions obligation policy refrain filter subtracts targets may appear rat action refrain policy valid constraint policy evaluates true 
note refrain policy may valid subset targets targets subtracted obligation policy targets 
action appear rat action allowed targets 
example action obligation policy notify identified rat 
refrain policy associated entry action valid constraint defined action notify allowed execute targets scope staff staff admin 
second action obligation policy appear rat allowed execute restrictions 
subject action targets associated 
refrain filter identifies target subject actions 
subject action contains empty refrain target list rat refrain policy applies valid action allowed 
handling events order architecture adaptable variety event service implementations minimum change isolate implementation component handles registration event specification main event handler component obligation enforcement object 
shows architecture event handlers 
section 
policy management component policy management component interface event handler event event event handler handler handler adapter adapter adapter interface event handler adapters event service event service event service contains event handler interacts implementation specific event handler adapter 
event handler adapter implements standard interface interact event handler specific underlying event service 
interacts event service subscribe event specification passed event handler object receives notifications event triggers event service 
event handler adapters perform event filtering correlation supported underlying event service 
event correlation event correlation performed utilising runtime representation event specifications see section 
event handler adapter creates tree event consumer objects correspond runtime event specification created compiler 
event consumers responsible node event tree 
event consumers appearing leaf nodes tree correspond single events responsible subscribing event service receive notification events 
simple example demonstrate idea 
event specification notify subscribe event service event consumers notify notify event handler adapter tree right side illustrates tree event consumers correspond runtime event representation left side 
composite event consumers responsible enforcing semantics event operator representing 
composite consumer operator send notification level receives notification event chapter 
policy management platform 
similarly composite consumer operator notify event handler adapter receives notification events 
event consumers handle subscription single events add values event parameters received event service corresponding events 
consequence composite event detected root consumer tree enriched actual parameter values event instances required rest process deploying policy described previously 
elvin realise event service prototype implementation supports event filtering subscription language current release support combination events 
implemented event handlers realise elvin notification listener java interface provide composition events management component consumer side explained 
access control enforcement access controllers enforce authorisation policies target objects normally located targets protect 
require close interaction underlying access control mechanism example host operating system firewall method dispatch mechanism programming language means interact mechanism vary 
access controllers provide methods load enable disable unload authorisation policy objects similarly 
previous sections concentrated enforcement subject policies obligations refrains 
policies default runtime representation policies objects sufficient enforce policies 
policy objects distribute manage life cycle objects including domain membership changes 
policy management components runtime representation loaded policy objects enforce 
authorisation policies variety representations may required policy depending underlying security platform target objects run 
distribution authorisation policies described obligation policies 
policy service creates corresponding authorisation control object aco authorisation policy administrator selects distribute 
aco uses authorisation policy object evaluate set target objects policy distributed 
target object associated access controller responsible enforcing access control object 
associated access controller accessible entry target domain service 
aco accesses access controller section 
access control enforcement targets target set policy distributes policy object identified access controllers 
subject trusted environment application policy management access controller ac decision filtering platform security mechanisms ponder ac api ponder ac api 
application ac decision interface subject access control enforcement policy management access controller configure ac enforcement policy management interface application target objects ways implementing access control ponder illustrated 
approach requires ponder aware applications interface local trusted access controller enforce authorisation policies behalf 
call ponder aware applications implement ponder ac interface allow interaction access controllers 
action requested ponder aware application application forwards call local access controller 
access controller uses enabled authorisation policies decide action permitted implementing access control decision process formalised section 
addition access controller applies authorisation filters action call parameters returned values 
second approach illustrated right side configure security mechanisms underlying platform enabled authorisation policies 
target security platform access controller aco may need request additional representation policy stored policy entry domain service pass access controller 
specialised code generators implemented map authorisation policy specification appropriate format access controllers configure underlying security platform 
features ponder authorisation policies supported security mechanisms available include constraints filters 
cases possible map specified authorisation policies available security mechanisms approach access control enforcement preferred 
note combination approaches possible 
chapter 
policy management platform composite policy enforcement groups group syntactic scope significance restricted specification time 
groups specified compiled stored domain service group entries domains 
policies inside group stored group entry 
allows navigation group contents way domains navigated 
instantiating group type creates domain entry group instance instantiates policies contained group type places policy instances inside newly created domain entry 
enforcement individual policies stored inside group entry happens independently policy described section 
relationships management structures compiled stored domain service similarly groups 
deal enforcement relationships require specification interaction protocols haven included language 
role management roles specified compiled stored domain service way groups 
roles provide semantic grouping abstraction mechanism simplifies management maintained runtime role control object created policy service manage operations role 
management console select role directory load tool perform control operations need access individual policies role 
corresponding role control object takes care loading unloading enabling disabling policy instances inside role enforcement components members subject domain role 
addition role control object handles updating domain associations domain membership changes behalf policy objects contained inside role 
specify roles scenario 
apply humans automated agents run user behalf third applies backup servers 
role type backup administrators type role roles set set set users inst oblig uid target ms system servers ms uid type auth set target system servers action delete data read data data inst auth section 
composite policy enforcement inst auth target action config inst deleg users target action config backup administrator development division inst role system servers backup dev system resources dev staff div dev system admin backup dev backup administrator development division inst role system servers backup res system resources res staff div res system admin backup res backup administrator roles created divisions departments institution 
role specified type specification reused 
note delegation policy specified role allows backup administrators assigned instance role delegate certain access rights users administer 
access rights configuration backup parameters viewing job details backup servers backing files corresponding users 
role security administrators inst role roles inst auth target ds system servers action ds ds inst auth target bs system servers backup action bs bs bs inst auth target system serv backup action shutdown roles single security administrator role institution role specified type 
role type backup server components type role roles set type auth set resources target resources action read inst oblig timer type oblig set resources timer fri resources inst oblig backup server parallel department research division inst role roles system resources res parallel system servers backup res parallel role type backup server components type role roles set extends chapter 
policy management platform type oblig set resources timer resources inst oblig backup server internet department development division inst role roles system servers backup dev internet system servers backup dev internet role types specified backup servers 
backup servers research division obliged backup data weekly basis 
second role extends role inheriting policies adds obligation perform daily backup parameterised data 
role backup servers responsible data development departments institution require daily backups addition weekly backups 
show examples instantiating roles departments research division development division 
role assignment important dimension role management assigning users roles activating deactivating roles 
user representation domain urd persistent representation human user system lupu 
model defined thesis urd contains different kinds objects policy management components user profile object 
act proxies user allow access resources permitted authorisation policies act automated agents interpreting obligation policies user behalf 
user assigned role including pmc user urd subject domain role 
application specific different support different management functions security management backup administration user assigned different roles different automated management needs 
contains information roles domains user assigned 
note automated agents implementing policies assigned roles represent human user 
shows steps involved assigning users roles 
steps summarised relation user role management tool manage users policies specified system 
tool requires interaction domain browser select users user representation domains roles domain service 
tool consists sub views user management view new users created assigned removed domains 
creating user means creating urd user stored inside urd 
assigning user domain implicitly creates selected domain points pmc urd 
corresponds steps 
section 
composite policy enforcement user role assign user profile object urd subject domain role policy management component user role management steps user management domain hierarchy management components view new policy management components created deleted users stored users urd 
related step 
stored domains domains started stopped remotely host user management tool 
requires pmc server running remote host 
example new backup administrator research division scenario added system corresponding urd created urd backup enabled pmc instantiated urd 
administrator assigned staff admin backup res pmc started research network 
user role management view users assigned removed roles 
simply updates list roles user assigned steps 
assigning user role requires selection pmc user urd represent user role 
roles assigned user selectively activated deactivated 
activating role creates role subject domain points associated pmc user urd step 
implements rbac concept sessions sandhu 
new backup administrator scenario assigned role selecting administrator urd backup enabled pmc urd role domain browser 
role activated deactivated click button selecting list roles assigned user 
current implementation users interact 
implementations pmc prompt user actions taken may require input user certain actions 
prototype implementation includes graphical interface viewing status pmc policies run need extended allow users remotely interact 
chapter 
policy management platform user role management tool chapter proposed architecture deploying ponder policies discussed issues involved deployment process 
key aspect deployment model automated distribution ponder policies enforcement components 
ponder policies explicitly define subjects targets enabling distribution policies need manually manage associations policies enforcement components 
addition avoid need pull architecture enforcement components query policy repository policies apply 
easy provide functionality dynamically reacting domain membership changes enable automated distribution loaded policies new enforcement components retraction enforcement components removed domains policies apply 
obligation refrain policies enforced generic policy management components operation depend platform system implemented 
described architecture policy management components serve specific implementations agents enforcing obligation refrain policies 
access control policy enforcement requires close interaction underlying access control mechanism example host operating system firewall method dispatch mechanism programming language 
distribution authorisation policies enforcement components termed access controllers may involve alternative representations policy generated policy compiler stored domain service 
access section 
controllers responsible configuring underlying security mechanisms policies receive 
ponder aware applications interaction local trusted access controller possible provide generic access control decision mechanism enabled authorisation policies apply applications 
includes enforcement features may supported current access control mechanisms constrained authorisations filters 
architecture includes support role management 
role control object created handle distribution policies specified inside role way done basic policy objects 
dimension role management assignment subjects roles implementation sessions subset roles assigned subject activated 
handle role activation placing policy management components subject domain role 
policy management components proxies human users stored inside user urd 
provided evidence feasibility policy framework presenting implementation deployment architecture described 
implementation includes policy administration toolkit providing graphical user interface managing policies specification deployment 
toolkit includes policy specification ide management console tool managing distribution policies user role management tool managing users roles automated management components 
extensibility build toolkit allowing easy customisation new tools integration domain management tool designing accessing domain service 
implementation toolkit summarised damianou 
chapter critical analysis thesis motivated need support policy specification deployment distributed systems generic policy specification language integrated environment 
chapter examine limitations deficiencies proposed framework indicate aspects improved 
place framework context relevant provide critical evaluation language proposed deployment architecture implementation 
relationship relevant section compare important relevant chapter outline relationship ponder framework related areas 
ponder framework directly applicable security management emphasis non discretionary access control abrams administrators authority specify security policies delegation propagation authority permitted scope defined policies 
demonstrated examples ponder specify dac mac policies see sections 
addition rbac role management rbm policy specifications intrinsic ponder identified part design requirements language 
rbac subset rbm described section models take different approaches 
rbm model supported ponder extends rbac models duties subjects assigned organisational positions form obligation refrain policies 
addition ponder role model provides class level inheritance defined object oriented concepts opposed instance level inheritance supported rbac models means reusing permissions 
class level inheritance allows specialisation roles parameterisation policy targets providing flexibility reusing specifications 
see lupu comparison rbac rbm 
lot policy specification relates security includes range policies available ponder lack extensibility features necessary abstractions support large scale policy specifications 
formal logic approaches see abadi jajodia section 
relationship relevant barker generally intuitive easily map implementation mechanisms 
assume strong mathematical background difficult understand 
graphical security specification approaches see heydon attractive limited scope satisfy requirements security management apply specific situations file system security scale 
similarly approaches limited specific types policy 
examples include rsl ahn specific separation duty constraints rbac systems language rbac constraints described chen 
shown languages subsets ocl specify constraints ponder meta policies 
believe design specialised languages complicates policy specification leads multiplicity incompatible policy specifications need applied application domain 
increases possibility policy conflicts inconsistencies requires complex enforcement architectures need cater enforcement various forms policy 
ponder combines security management policy driven network management specification single specification language 
considerable interest approaches specify higher level policies sla trust statements 
see ponder complementary approaches ponder act lower level specification implementation sla trust specifications 
related issue policy refinement haven addressed thesis high level specifications refined ponder policies 
particular consider trust specifications authorisation security management policies implemented access control authentication mechanisms 
possible refine trust specifications ponder security policies 
addition ponder authorisation policies specify conditions trust relationships established mont 
approaches problem refinement mont michael 
trust management frameworks combine authentication authorisation seeing increasing application design security architectures 
compare ponder framework security policy architecture keromytis section example approach draw 
keromytis acknowledge need single method policy specification results survey internet security howard 
universal high level language complex clumsy susceptible mistakes 
addition see approach inappropriate presumes chapter 
critical analysis homogeneity handle mixtures multiple mechanisms different parts network 
ponder designed specifically avoid problems ponder specify security policies map heterogeneous security mechanisms platforms 
approach allows multiple application specific policy languages specify security policies particular applications 
languages map compilers common policy interoperability layer implemented keynote blaze 
disadvantage approach certain features want uniformly provide architecture delegation specified lower level keynote making specification complicated 
believe interoperability best provided higher level specification single language 
note ponder map keynote take advantage security mechanisms application domain requires 
general trust management frameworks couple access control policies authentication specification time 
ideally access control policy specification enforcement decoupled mechanisms enforce authentication users system 
binding users public keys specification credentials done separately 
credentials ponder system restrict assignment users domains roles approach similar trust policy language tpl approach described herzberg 
users users inadequate credentials allowed members certain domains restricting access rights limiting policies apply 
note ponder currently support similar functionality tpl authorisation policies restrict assignment users domains roles 
different perspective ponder complement approaches concentrate lowlevel policy specification 
examples include directly specifying java policies control mobile code security compiled interpreted programs specify policies programs described bos information modelling approach qos policy specification prescribed ietf moore 
policies conveniently specified ponder mapped lower level specification automated software tools backends ponder compiler thesis 
information modelling approach followed ietf storing distributing ponder policies network boundaries 
implementation experiments shown easy map ponder policies moore snir information models defined ietf 
policy networking tool support comes industry ietf policy framework 
ponder framework tools specific quality service bandwidth management providing access control configuration section 
critical evaluation framework focuses managing individual network elements 
scalability enterprise wide management obvious dissemination policies specific elements performed manually ponder automated domain membership subjects targets explicitly specified policies 
addition commercial products support role management features 
products optimised networks implemented manage vendor specific hardware working hardware independence 
ponder motivated need manage heterogeneous networks framework described thesis enables implementation multi vendor policy management products 
fundamental problem remains unsolved policy management issue referred policy validation verma policy instrumented existing hardware software configuration possible check validate case deploying policy 
answer questions form interesting research direction ponder framework 
critical evaluation framework section discuss aspects policy framework need improved describe shortcomings 
start policy language feedback users tried apply language specific management scenarios experience identify features language hard understand 
policy language design specification constraints powerful features language 
ocl enables specification complex constraints features ocl defined complicate formalisation language 
process analysing policies complicated 
current syntax allow specification prioritisation rules simplified sub types meta policies defined documented constraints separation duties user role assignments concurrency constraints identified examples section 
experimentation specifying policies network level firewall rules ip traffic control results need ip addresses subjects targets policies similarly authorisation systems access rights specified terms public keys owned principals subjects targets conveniently defined keys certificates 
investigation identify need extend grammar alternative ways specifying chapter 
critical analysis subjects targets specification time mapping domains ip addresses public keys 
users find hard domains situations 
general situations mobile systems users resources explicitly identified difficult map entities domains 
creates additional burden ponder framework assumes specification policies domains objects 
definition relationship structures current version grammar raises questions necessity relationships certain situations policies specified relationship specified roles involved relationship 
results fact addressed specification interaction protocols current grammar 
addition interaction protocols relationships define permitted message exchanges occupants roles important complete definition relationships 
related question roles relationships model enforce policies apply humans 
ponder specify policies order support reasoning behaviour system 
current restricted policies apply implemented automated components 
policies applying human users partially supported implementations extending policy management components functionality prompt user actions perform specified obligation policies apply user 
delegation fairly ill defined term abadi area policy specification lacking 
ponder delegation policies results confusion 
users misuse delegation way specifying access rights way controlling delegation revocation system 
delegation policies ponder simply specify authorisation delegate access rights 
actual delegation revocation access rights separate issue 
runtime api need designed allow users interact underlying authorisation service control delegation revocation access rights 
literature delegation associated ability specify principals act behalf principal binding delegation specification specific access rights abadi 
addition arguments exist favour specifying sequence cascading delegations allowed simply number cascading levels 
issues easy specify ponder may require additional research application ponder delegation policies specific security scenarios 
idea refrain policies form subject negative authorisation addressed access control specification approaches queried users 
question ask useful specify subjects refrain performing assume subjects behaved order expect enforcement policies 
negative section 
critical evaluation framework authorisation policies distributed subjects refrains subjects 
need specify refrain negative authorisation policies implementation issue better addressed deployment architecture 
answer questions stage need distinguish subject enforced target enforced policies 
addition refrain policies filter executions internal subject actions negative authorisations restrict execution target actions 
issue scalability language addressed thesis important design goal identified section 
scalability successfully achieved ways object model see appendix allows language specification easily extended new types policy added sub classes existing policy types ii domains group objects policies apply composition policies composite policy structures cater large scale organisational policy specifications allows scalability large systems iii parameterised instantiations policy types inheritance composite policy structures permits reuse specifications enhances scalability flexibility 
provide comprehensive summary achievements regarding design language section management architecture policy deployment model domains means grouping objects policies apply 
provides scalability enables handling changes managed objects deployed policies 
algorithms involved domain membership evaluation offer scope optimisations 
algorithm deciding membership object dse need re calculate dse detailed 
addition haven investigated possibility runtime changes policy structures stored domain service 
current model assume policies need changed retracted distributed removed domain service modified recompiled stored back re distributed enforcement components 
process complicated modifications stored policy types number policy instances created deployed 
note changes deployed policies may result modifications domain structure 
example addition newly created domain parent domain requires policies subject target changed enforcement ponder authorisation policies various security platforms needs investigated different security platforms different enforcement semantics may include restrictions prevent direct mapping certain features ponder policies platforms 
platforms support enforcement constrains authorisation chapter 
critical analysis filters 
java implementation access control service maps ponder policies java code demonstrates difficulty mapping authorisation policy filters existing mechanisms case java security 
filters directly applicable database systems case enforced externally implemented access controllers trusted application described section 
formalised implementation delegation policies authorisations section enforcement implemented current version 
enforcing delegation policies assumes authorisation service ability keep track delegation steps grantor 
authorisation delegation rely authentication achieved authentication protocols 
goal decouple specification authorisation policies authentication system need extend enforcement architecture mechanisms providing authentication subjects integrity secrecy policy information communicated system 
ponder framework distributed objects including policies target managed objects policy control objects policy management components maintained distributed domain servers 
enforcement components distributed normally located objects manage making policy decision require components query policy servers order identify policies apply current request 
policies distributed enforcement components policy decision process performed locally enforcement component 
scalability provided fact addition new enforcement components ponder system require change code management system effort activate new enforcement components 
inclusion enforcement component domain automatically applies existing policies component 
heart management architecture definitions concrete managed objects respective information model 
define simple object oriented model management architecture 
model includes definition policy objects domains policy enforcement entities subclasses generic managed object class 
information model include detailed definitions target objects system elements logical physical network elements services exists underway dmtf dmtf 
easily extended include models ponder applied cim defined managed objects 
acknowledge existence available technologies implement policy management solutions refrain specifying new technologies protocols management framework 
architecture simple ideas implemented existing protocols 
define new protocols communication management section 
critical evaluation implementation information policies 
depending implementation architecture requirements application assume management information communicated existing mechanisms 
object middleware corba distributed java java rmi protocols common open policy service protocol cops internet management architecture simple network management protocol snmp network level enforcement policies 
critical evaluation implementation main purpose prototype thesis evaluate feasibility implementing proposed framework 
experience gained implementation order identify issues remain unsolved improved implementations framework 
important aspect implementation policy compiler generate enforceable policy representations 
important feature compiler customisation multiple backends map policies variety representations 
feature appreciated various uses compiler projects involving mapping ponder authorisation policies various access control mechanisms translation ponder policy specifications xml transmission network 
implementation compiler contain optimisations enable faster evaluation policy elements runtime 
sablecc parser generator build compiler proved flexible way extending syntax analysis semantic checks generates large number classes making execution compiler slow 
current implementation java code generator inefficient generation java code policies slow 
compared java code generator access control policy generator maps authorisations xml code compile store authorisation policies ldap server 
file lines long tests executed mhz pentium iii machine mb ram running windows 
cpu time measured windows task manager indicates cpu time processes precision seconds 
code generation selected compilation parsing semantically analysing policies required seconds 
code generation experimental access control code generator required secs cpu time compile policies minutes store policies entries ldap server 
accessing ldap server proves slow 
generating java code java code generator took considerably longer cpu time required minutes elapsed time minutes 
java code chapter 
critical analysis generator creates java file policy stores local hard disk executes java compiler javac generate bytecodes file 
reads bytecodes stores ldap 
reason long elapsed time mainly due accessing disk executing java compiler 
performance significantly improved code generator directly creates bytecodes ponder specification bytecode manipulation tools need create java files running java compiler 
tool byte code engineering library open source project provides api create classes scratch runtime apache 
lack formal specification ocl part ponder grammar difficult implement features ocl current version compiler 
addition compiler check domain service validate domain paths target method calls referenced policy specification 
assumed policy administrator specifies valid policies respect 
feature added compiler customisable component perform requested checks domain service underlying implementation service 
ponder deployment model toolkit implemented java ldap interface ldap directories 
netscape directory server version netscape restricted implementation single server 
important experiment multiple servers order provide replication fault tolerance target objects policies 
multiple ldap servers enhance scalability implementation important enterprise wide networks access servers different sub networks slow possible 
technologies widely implement distributed systems implementation deployment model 
include middleware solutions corba omg orbs communication middleware tspaces lehman called creators intelligent component 
java web management technologies java dynamic management kit sun sun jini network technology arnold technology implementation federated management architecture monday java message service sun solutions 
corba middleware solutions jini increasingly enabling infrastructures distributed systems 
important assess practical contribution ponder framework implementing top technologies support section 
critical evaluation implementation management corba jini applications 
corba security services omg provide support authorisation role access control philosophy security unaware applications able run securely secure orb active involvement site application objects 
orb services package requires implementation access control interceptor determines invocation permitted 
request level interceptor substituted interface access controllers order enforce ponder authorisation policies corba application objects 
addition java web management technologies provide management java applications 
agent functionality provided technologies allows implementation agents accessed variety protocol apis snmp cim tmn 
functionality implement managed web browsers communication protocols application domain 
evaluated variety existing solutions provide event service management system cambridge event service bacon haven able find solution satisfies requirements service 
include publish subscribe functionality event filtering event correlation java client interfacing chosen elvin segall arnold mainly due java api implementation 
elvin accept deliver packets information called notifications programs part elvin network 
elvin developers claim single elvin server handle event volumes events second client connections 
multiple elvin servers setup share load notification distribution elvin federation increase availability reliability management performance 
single elvin server current implementation haven implemented faulttolerance elvin consumers 
elvin provides easily programmable api common languages provides subscription language giving programmer freedom create complex expressions receiving notifications required 
problem current elvin implementation support composition events see section 
implementation event composition inefficient composes events consumer site pmc results lot unnecessary notification delivery elvin server 
chapter 
critical analysis execution time obligation refrain policies implemented policy management components depends evaluation domain scope expressions target element policies 
efficiency algorithms considered detail shown formalisation section computation hard guaranteed terminate 
note considered network failures action execution evaluation domain scope expressions 
chapter evaluated ponder framework ways placed proposed framework context relevant tried answer question relation thesis exists underway area policy distributed systems management 
includes policy specification approaches management architectures trust management solutions 
ponder framework significant solving problems approaches related specification enforcement policies complementing approaches 
described problems shortcomings ponder language proposed management architecture current implementation identified issues hard provide need resolved 
ponder framework uses number services considers available directory service event service monitoring service implementations services serious limitations functionality performance discussed ldap elvin service implementations ponder framework 
causes performance components compiler relatively disappointing 
note major efforts undertaken optimise implementation components line components 
compilation policies example frequent operation takes place line influence performance system 
implementation needs provided complex elements language language extended integrate complementary approaches 
chapter chapter provide summary thesis identify achieved 
conclude account resulting evaluation framework previous chapter 
review discussion achievements policy network management turned difficult put practice 
early adopters developing deploying policies simple cheap quick 
time intensive complex expensive process 
additionally demanded enterprise organisation mutate match technology technology meeting enterprise management needs 
solutions tend single vendor approaches readily employed existing networks michael jude march jude 
quotes common describing policy management solutions drawn experience users tools promise allow policy control simple graphical interfaces enable enforcement rules network traffic management access control instructions 
useful tools developed vendors improving policy management products lack complete solutions problem policy management 
thesis helps direction defines complete framework policy management area benefit 
comprehensive survey security models policies policy specification approaches policy management architectures platforms acknowledged need generic policy specification language 
proposed definition policy identified requirements design policy specification language effort help understanding concept policy management literature ad hoc manner 
believe common high level declarative language different applications policy management right approach policy specification important technique simplifying management complex distributed systems 
keeping language simple chapter 
focussing implementable policies believe language integrated effectively management frameworks govern behaviour large scale distributed systems 
furthermore shown ponder policies specify situations currently described specialised languages access control models available 
ponder framework derived experience learnt policy management imperial college past years 
experience gained earlier attempts defining policy notation implementing various different standalone tools components define complete policy management framework support policy life cycle relating specifying managing deployed policies 
design language architecture implementation integrated toolkit solid defined management ideas concepts developed imperial college number projects years 
summarise relation ponder framework domains unit object grouping ponder domain sloman 
domains unit management akin file directories operating systems provide hierarchical structuring objects 
policies apply domains domain holds objects domain policies currently apply domain 
domains objects included domains 
allows hierarchical structuring self management policies apply domains 
order increase flexibility objects domains members domain supports scenarios objects members different groups 
policies meta policies define policy persistent declarative specification derived management goals rule defining choices behaviour system definition policy moffett sloman 
policies interpreted compiled code agents changed dynamically changing behaviour strategy system modifying implementation interrupting system operation 
application specific conflicts arise semantics policy detected automatically specification conflict conflicts specified terms constraints attribute values permitted policies 
call constraints introduced moffett policies policies coexist system permitted attribute values valid policy 
roles relationships lupu roles provide means grouping policies related position organisation staff member customer support manager chief executive officer ceo 
role group policies relating specific agent registers new users adaptively manages quality service network 
conveniently groups section 
review discussion achievements policies specify rights duties agent position 
person agent assigned removed role acquires policies applying role 
relationships roles define additional policies part individual roles specify roles interact manager agent permitted perform specific actions worker agent worker needs periodically report status manager agent 
concepts designed ponder language specifying policies management security distributed systems directly mapped implementation 
important contribution thesis refined elaborated concepts integrated policy management framework 
ponder designed requirements identified chapter includes authorisation information filtering delegation policies specifying access control obligation refrain policies specifying subject management actions 
ponder provides uniform means specifying policy relating wide range management applications network storage systems application service management 
access control policies allow capture wide range access control rules typical distributed system implement rules firewalls access controls users services databases web standard operating system controls 
addressed issue delegation access rights formalised implementation delegation policies authorisations 
ability automatically take appropriate actions particular events occur distributed system addressed ponder obligation policies allow define management actions need taken specific events occur 
advantage approach single language specify policies policy writer model specification leaving translation ponder policies underlying mechanisms software tools 
ponder managed objects distributed system organised hierarchical domains 
policies written terms domains domain membership evaluated policy enforcement performed 
means normally need write policies specific object 
object added domain policies apply domain automatically applied object object removed domain policy disabled 
unified model access control automated management allows easily group different types policies roles group roles management structures 
policy grouping important powerful technique large scale policy specification lacking languages 
ponder composite policies groups roles relationships management structures allow structured reusable specifications cater complex large chapter 
scale organisations 
ponder object oriented features allow user defined types policies specified instantiated multiple times different parameters 
provides flexibility extensibility maintaining structured specification large part checked compile time 
meta policies ponder provide powerful tool specifying application dependent constraints sets policies separation duties self management declarative notation ocl 
allow global constraints system preserved restricting applicability policies 
ponder declarative aids analysis policies 
demonstrated language examples show range policies specified ponder including variety application specific constraints shown ponder model examples described specialised languages 
formal level structural operational computation semantics hennessy called small step operational semantics literature precisely define language provide unambiguous definition various policy constructs 
semantics define execution policy specifications including instantiation storing domain service runtime execution policies 
ponder simply specification approach complete management framework 
runtime object model deploying managing ponder policies distributed system supports enforcement authorisation policies multiple heterogeneous access control mechanisms ii enforcement obligation refrain policies generic policy management components implementation largely independent underlying system iii enforcement composite policy structures groups roles 
management includes assignment users roles activation deactivation assigned roles dynamic enforcement policies specified roles 
architecture handles dynamic changes domain structures dynamic adaptation system changes 
domain membership dynamic objects added removed domain needed 
object added domain policies currently apply domain subsequently apply newly added object 
conversely object removed domain policies domain longer applied object 
objects managed modifying policies applying domains objects members ii adding removing objects domains specific policies apply 
deployment model cleanly separates dissemination management policies enforcement act model implementations 
strongly section 
review discussion achievements influenced ponder policy specification language believe policy systems benefit adopting deployment model similar 
proof concept integrated implementation management toolkit ponder language 
described consider minimum requirements toolkit policy life cycle management high level language graphical editor specifying policies compiler translating policies formats enforcement components targeted specific platforms tools support automated approach dynamically deploying enabling disabling replacing policies distributed components interpret 
management tools integrated domain browser access domain service support specification dissemination control policy 
proven straightforward provide java implementation deployment model toolkit 
ponder compiler written sablecc experimental backends generating xml syntax windows nt access control firewall rules linux pam modules pluggable authentication modules java security policies 
quite easy produce backends ponder compiler targeted different platforms current experience demonstrates design implementation compiler successful 
progress produce backend diffserv quality service management backend compiles parts ponder field programmable gate arrays fpgas 
different implementation maps ponder agent system developed university bologna 
ponder compiler policy editor available public domain www dse doc ic ac uk research policies software number organisations sun microsystems cisco nortel networks siemens ag hitachi europe research institutions 
thesis examples related security management describe concepts language 
framework applicable wider range management applications 
current past projects investigating ponder framework manage qos diffserv enabled network experimented specifying policies storage management system 
dulay applicability ponder managing distributed agent systems examined lupu ponder realise enterprise viewpoint concepts 
chapter 
issues identified discussion chapter 
list important section extend additional issues 
language specification language specification leaves room additions syntax relationship structures 
relationships extended interaction protocols specify permitted required message exchanges occupants roles 
addition current inheritance mechanism composite policy types allow multiple inheritance relationships management structures 
directed examining inheritance model possible extensions 
investigation possible sub types meta policies cover specific classes constraints concurrency constraints user role assignment constraints specify policy priorities result restricted syntax specifying constraints 
addition formal specification language extended type inference system compile time type checking policy specifications operational semantics meta policies 
application language complex management scenarios identify need extend library objects time timer domain additional functions new library objects 
similarly application delegation policies scenarios needed determine syntax delegation policies needs extended 
interesting aspect examine graphical notation specifying ponder policies 
graphical approaches easier non technical users language enable faster creation large scale policy specifications simple diagrams created aid editing tools 
special symbols represent various types policies ponder connectors applied group policies composite structures create associations policy objects 
tool support translation extension graphical model text version easy simplifying specification policy large systems 
deployment model implementation model needs developed interesting requirement cater consistent updates presence concurrent operations domains policies system 
operations performed parallel detection possible conflicts difficult potentially slow 
interesting aspect may help policy section 
system subject policy control policies may written enforced prevent undesirable actions domains hold enabled policy objects policy objects 
interesting examine possibility propagating changes deployed policies runtime api dynamically modify policies particular composite policies roles 
api allow administrators extend roles new policies remove policies specific roles stored deployed system users assigned 
needs evaluate closely degree authorisation policy enforced variety security architectures platforms 
additional needed enforcement delegation policies assume authorisation service specific interface described section 
addition current framework cover enforcement meta policies 
meta policies supported back ends architecture extended deployment management meta policies 
thesis cover issues relating refinement high level enterprise goals service level agreements trust specifications ponder 
process considered requirements engineering aspect policy life cycle addressed related project imperial college 
furthermore needs concentrate interoperability policies administrative domains area adequately covered literature examine ponder policies proposed framework solving problem 
research needed defining interfaces exchange policies organisational networks 
implementation improved discussed section 
implementations need evaluate integrate existing monitoring solutions current system 
investigation extend event service implementations better satisfy requirements identified section 
current implementation single ldap server centralised needs extended multiple servers better fault tolerance replication data 
management toolkit management toolkit needs developed 
tools refinement high level policy specifications goals sla primary objective 
refinement process expected fully automated require interactive tool support 
tools policy analysis reasoning need developed 
possibility providing analysis simulating execution policies interesting aspect 
integrated environment chapter 
animating simulation viewing results part task 
integrating management tools generic domain browser give common look feel toolkit interesting approach needs developed ponder framework 
closing remarks problem policy specification deployment complex addressed imperial college past years resulting significant theoretical advances understanding problem solutions 
thesis shown concepts resulting past experience utilised refined elaborated concepts integrated policy management framework implementation currently outside imperial college 
process significant engineering challenge tackled successfully thesis area policy management benefit 
policy framework includes design policy specification language architecture deployment enforcement policies novel constitute main contributions thesis 
bibliography abadi burrows lampson plotkin 
calculus access control distributed systems 
acm transactions programming languages systems vol 
pp 
september 
abrams 

renewed understanding access control policies 
proceedings th national computer security conference baltimore maryland pp 
september 
acharya 
history access control mobile code 
proceedings th acm conference computer communications security san francisco california usa acm press new york november 
ahn 
sandhu 
rsl language role separation duty constraints 
proceedings fourth acm workshop role access control fairfax virginia usa acm press pp 
october 
anderson 
lee stajano 
security policies 
book chapter advances computers academic press 
vol 

anderson 

security policy model clinical information systems 
proceedings ieee symposium security privacy oakland california pp 
may 
apache software foundation byte code engineering library project available jakarta apache org index html december 
arnold boot henderson phelps segall elvin content addressed messaging client protocol internet draft process june 
arnold sullivan scheifler waldo wollrath 
jini tm specification addison wesley june 
bacon moody bates hayton ma mcneil seidel 
generic support distributed applications 
ieee computer vol 
pp 
march 
baldwin 

naming grouping privileges simplify security management large databases 
proceedings ieee symposium computer security privacy oakland california ieee cs press pp 
may 
barker 

security policy specification logic 
proceedings international conference artificial intelligence las vegas nevada usa pp 
june 
barker rosenthal 
flexible security policies sql 
proceedings fifteenth annual ifip wg working conference database application security niagara lake ontario canada july 
barkley kuhn rosenthal 
role access control web 
proceedings expo international st century commerce global business solutions new millennium long beach ca usa october 
barkley 
supporting relationships access control role access control 
proceedings fourth acm workshop role access control fairfax virginia usa pp 
october 
bertino bettini ferrari samarati 
access control model supporting periodicity constraints temporal reasoning 
acm transactions database systems vol 
pp 
september 
bibliography bertino ferrari 
temporal role access control model 
proceedings th acm workshop role access control berlin germany pp 
july 
deng 
framework implementing role access control corba security service 
proceedings fourth acm workshop role access control acm press pp 
october 
blaze feigenbaum ioannidis keromytis 
role trust management distributed systems security 
secure internet programming security issues mobile distributed objects 
new york ny usa springer verlag pp 

blaze feigenbaum keromytis 
keynote trust management key infrastructures 
proceedings security international workshop cambridge england springer verlag lncs pp 
april 
bos 

application specific policies domain boundaries 
proceedings sixth ifip ieee international symposium network management im boston ma usa may 
burgess 

site configuration engine 
usenix computing systems vol 
summer 
burgess 

developments 
proceedings unix nl conference hague 
burgess 
predictable configuration management randomized scheduling framework 
proceedings ieee ifip workshop distributed systems operations management nancy france october 
knapp 
expressive power pure ocl 
technical report ludwig maximilians universit nchen munich germany 
chen sandhu 
constraints role access control 
proceedings acm nist role access control workshop gaithersburg maryland usa acm press november 
chess 

security issues mobile code systems 
mobile agents security 
vigna eds springer verlag pp 
june 
chomicki lobo naqvi 
logic programming approach conflict resolution policy management 
proceedings th international conference principles knowledge representation reasoning breckenridge colorado usa morgan kaufmann publishers pp 
april 
clark wilson 
comparison commercial military computer security policies 
proceedings ieee symposium security privacy 
dulay montanari stefanelli 
policy driven management agent systems 
proceedings policy workshop hp labs bristol uk springer verlag january 
montanari lupu sloman stefanelli 
flexible access control service java mobile code 
proceedings annual computer security applications conference acsac new orleans louisiana usa ieee press december 
damianou dulay lupu sloman 
managing security object distributed systems ponder 
proceedings th open european summer school netherlands september 
damianou dulay lupu sloman 
ponder language specifying security management policies distributed systems 
language specification version 
research report doc imperial college science technology medicine department computing london october 
damianou dulay lupu sloman 
ponder policy specification language 
proceedings policy workshop hp labs bristol uk springer verlag january 
bibliography damianou dulay lupu sloman 
tools domain policy management distributed systems 
proceedings network operations management symposium appear italy april 
dmtf distributed management task force common information model cim specification version available www dmtf org spec cims html june 
dmtf distributed management task force specification representation cim xml version available www dmtf org download spec cim xml mapping php july 
drossopoulou eisenbach operational semantics proof type soundness java available www dse doc ic ac uk projects slurp pubs html march 
dulay damianou lupu sloman 
policy language management distributed agents 
proceedings invited 
agent oriented software engineering workshop aose montreal canada may 
dulay lupu sloman damianou 
policy deployment model ponder language 
proceedings th ifip ieee international symposium integrated network management im integrated management strategies new millennium seattle washington usa may 
gagnon 

sablecc object oriented compiler framework 
msc thesis school computer science mcgill university 
montreal canada march 
gligor 

characteristics role access control 
proceedings acm nist role access control workshop gaithersburg maryland usa acm press november 
sloman 
survey trust internet applications 
ieee communications surveys tutorials vol 
oct dec 
kent 
interpreting object constraint language 
proceedings asia pacific conference software engineering ieee press july 
hayton bacon moody 
access control open distributed environment 
proceedings ieee symposium security privacy oakland california pp 
may 

integrated management network systems concepts architectures operational application morgan kaufmann publishers august 
hennessy 

semantics programming languages elementary structural operational semantics john wiley sons 
herzberg mass naor ravid 
access control meets public key infrastructure assigning roles strangers 
proceedings ieee symposium security privacy oakland california usa may 
heydon tygar wing 
miro visual specification security 
ieee transactions software engineering vol 
pp 
october 
yao bacon moody 
architecture distributed oasis services 
proceedings middleware new york usa lecture notes computer science springer verlag pp 
april 

elements language role access control 
proceedings information security global information infrastructures ifip tc sixteenth annual working conference information security beijing china kluwer pp 
august 

tower language role access control 
proceedings policy workshop hp labs bristol uk springer verlag january 
bibliography pandey levitt 
security policy specification graphical approach 
technical report cse uc davis computer science department july 
howard 

analysis security incidents internet 
phd thesis department engineering public policy carnegie mellon university 
pittsburgh pennsylvania usa april 
hyland sandhu 
management network security applications 
proceedings st national information systems security conference crystal city arlington virginia usa october 
inxight software 
inxight star tree software development kit available www inxight com 
iso iec information processing systems open systems interconnection basic model part management framework 
iso iec jtc sc wg information technology open distributed processing model enterprise viewpoint iso iso iec itu recommendation january 
jackson 

alloy lightweight object modelling notation laboratory computer science massachusetts institute technology boston july 
jackson schechter 
alcoa alloy constraint analyzer 
proceedings international conference software engineering limerick ireland june 
jajodia samarati subrahmanian 
flexible support multiple access control policies 
acm transactions database systems vol 
pp 
june 
jajodia samarati subrahmanian 
logical language expressing authorisations 
proceedings ieee symposium security privacy pp 
may 
janson 

security management management security 
chapter network distributed systems management sloman ed pp 

jude 
policy management hype 
business communications review available www com asp pp 
march 
keromytis ioannidis greenwald smith 
scalable security policy mechanisms 
technical report ms cis university pennsylvania cis dept january 
lobo 
policy management telecommunication networks 
proceedings policy workshop hp labs bristol uk november 
lamping rao pirolli 
focus context technique hyperbolic geometry visualizing large hierarchies 
proceedings conference human factors computing systems chi available www acm org sigchi chi electronic papers jl htm 


osi management model standards 
chapter network distributed systems management sloman ed pp 

lehman wyckoff 
tspaces wave 
proceedings hawaii international conference system sciences hicss hawaii january 
lobo bhatia naqvi 
policy description language 
proceedings sixteenth national conference artificial intelligence eleventh innovative applications ai conference orlando florida usa july 
lupu dulay damianou sloman 
structuring responsibilities network systems management 
networking information systems journal issue multimedia management 
invited vol 
pp 

bibliography lupu sloman dulay damianou 
ponder realising enterprise viewpoint concepts 
proceedings th international enterprise distributed object computing conference edoc japan september 
lupu 

role framework distributed systems management 
phd thesis department computing imperial college 
london july 
lupu sloman 
reconciling role management role access control 
proceedings second acm nist role access control workshop fairfax virginia usa acm press november 
lupu sloman 
role framework distributed systems management 
journal network systems management vol 
pp 

lupu sloman 
conflicts policy distributed systems management 
ieee transactions software engineering special issue inconsistency management vol 
pp 
november 
mansouri sloman 
gem generalised event monitoring language distributed systems 
distributed systems engineering journal vol 
pp 
june 
marriott 

policy service distributed systems 
phd thesis department computing imperial college 
london october 
marriott sloman 
implementation management agent interpreting obligation policy 
proceedings th ifip ieee international workshop distributed systems operations management aquila italy october 
martin 
hubaux 
survey distributed enterprise network systems management paradigms 
journal network systems management vol 
pp 
september 
michael ong rowe 
natural language processing support developing policy governed software systems 
proceedings th international conference technology object oriented languages systems santa barbara california ieee computer society press pp 
july 
solutions available www com products 
minsky 
ensuring integrity adding obligations privileges 
proceedings th international conference software engineering london pp 
august 
moffett 

control principles role hierarchies 
proceedings third acm nist role access control workshop fairfax virginia usa acm press october 
moffett sloman 
policy hierarchies distributed systems management 
ieee jsac special issue network management vol 
pp 
december 
monday connor 
technology programmer guide federated management architecture addison wesley 
mont baldwin goh 
role policies distributed trust framework 
technical report hpl extended enterprise laboratory hp laboratories bristol uk th 
mont baldwin goh 
power prototype integrated policy management 
technical report hpl extended enterprise laboratory hp laboratories bristol uk october 
moore policy core information model version specification rfc available www ietf org february 
bibliography myers liskov 
decentralized model information flow control 
proceedings th acm symposium operating system principles sosp saint malo france pp 
october 
netscape netscape directory server version available home netscape com directory 
oasis organization advancement structured information standards xacml language proposal version available www oasis open org committees xacml january 
omg object management group common object request broker architecture specification revision october 
omg object management group object constraint language specification version chapter omg unified modelling language version june 
omg object management group corba security service specification version march 


flexible method information system security policy specification 
proceedings th european symposium research computer security esorics louvain la neuve belgium springer verlag september 
ribeiro ferreira 
spl access control language security policies complex constraints 
proceedings network distributed system security symposium ndss san diego california february 
ribeiro ferreira 
enforcing obligation security monitors 
proceedings third international conference information communications security china november 
richters gogolla 
formalising uml object constraint language ocl 
proceedings th international conference conceptual modelling er singapore springer verlag november 
rowley 

security architecture distributed groupware 
phd thesis department computer science queen mary westfield college 
london september 
ryan seligman lee schema representing java tm objects ldap directory rfc october 
samarati bertino vimercati ferrari 
exception information flow control object oriented systems 
acm transactions information system security vol 
pp 
november 
samarati vimercati 
access control policies models mechanisms 
foundations security analysis design tutorial lectures 
focardi gorrieri eds springer verlag pp 
september 
sandhu kuhn 
nist model role access control unified standard 
proceedings th acm workshop role access control berlin germany pp 
july 
sandhu samarati 
access control principles practice 
ieee communications magazine vol 
pp 

sandhu 

role activation hierarchies 
proceedings third acm nist role access control workshop fairfax virginia usa acm press october 
sandhu coyne feinstein 
role access control models 
ieee computer vol 
pp 

sandhu samarati 
authentication access control intrusion detection 
part appeared title access control principles practice ieee communications vol 
pp 

bibliography segall arnold 
elvin left building publish subscribe notification service quenching 
proceedings queensland auug summer technical conference brisbane australia available www dstc edu au elvin doc papers auug auug html 
sloman 
domains framework structuring management policy 
chapter network distributed systems management sloman ed pp 

sloman 

policy driven management distributed systems 
journal network systems management vol 
pp 
december 
sloman jeff magee kramer 
architecture managing distributed systems 
proceedings fourth ieee workshop trends distributed computing systems lisbon portugal ieee computer society press pp 
september 
kurtz 
formal syntax semantics programming languages 
laboratory approach addison wesley publishing 
snir cohen moore policy qos information model available www ietf org internet drafts draft ietf policy qos info model txt november 
steen derrick 
formalising odp enterprise policies 
proceedings rd international enterprise distributed object computing conference edoc university mannheim germany ieee publishing september 
steen derrick 
odp enterprise viewpoint specification 
computer standards interfaces vol 
pp 
september 
stone xie 
network policy languages survey new approach 
ieee network vol 
pp 
january 
moore policy core ldap schema ietf internet draft progress available www ietf org january 
policy framework definition language version ietf internet draft progress available www ietf org november 
sun microsystems getting started java dynamic management kit available java sun com docs index html december 
sun microsystems java management extensions instrumentation agent specification available java sun com docs index html december 
sun microsystems remote method invocation specification available java sun com docs index html september 
sun microsystems java naming directory interface application programming interface available java sun com docs index html july 
sun microsystems java message service version available java sun com docs index html december 
tennenhouse smith wetherall 
survey active network research 
ieee communications magazine vol 
pp 
january 
thomas 

team access control primitive applying role access controls collaborative environments 
proceedings second acm nist role access control workshop fairfax virginia usa acm press pp 
november 
thomsen brien 
role access control framework network enterprises 
proceedings th annual computer security applications conference december 

hyperbolic domain browser implementation available doc ic ac uk policies software html october 
bibliography allen 
joint action authorisation schemes 
acm operating systems review vol 
pp 
july 
jackson 
shortcomings ocl object constraint language uml 
response object management group request information uml mit laboratory computer science december 
verma jennings 
policy sla management enterprise networks 
proceedings policy workshop hp labs bristol uk springer verlag january 
verma 

policy networking architecture algorithms new riders publishing 
lobo 
network management 
proceedings ieee ifip network operations management seminar hawaii april 
wahl howes lightweight directory access protocol rfc available www ietf org december 
wahl howes lightweight directory access protocol attribute syntax definitions rfc available www ietf org december 
weis 

policy definition classification aspects criteria examples 
proceedings ifip ieee international workshop distributed systems operations management toulouse france october 


domain security distributed object systems 
phd thesis department computing imperial college 
london august 
class diagram parent subject domain domain policy enforcement component subject target grantee auth auth authorisation delegation assoc 
policy enforces child operates group assoc 
policy deleg deleg appendix model role oblig refrain relationship mstruct assigned enabled grammar appendix specification syntax policy language specified sablecc gagnon 
package compiler syntax root java package generated java files helpers helpers 
digit 
non digit 

case 
case 
letter case case cr lf tab eol cr lf crlf non eol star quotes star slash star brace path seq non digit digit non digit comment non eol eol eof matter comment star star slash star gt spec chars gt gt gt digit seq digit fractional seq digit seq 
digit seq sign exponent part sign 
digit seq float seq fractional seq exponent part 
digit seq exponent part integer seq digit digit string seq quotes boolean seq true false true false states states normal default state 
ocl expression 
ocl entered ocl expression pre ocl entered enter ocl expression tokens tokens keywords auth plus auth auth minus auth section 
grammar boolean boolean catch catch deleg plus deleg deleg minus deleg domain domain extends extends extern extern grantee grantee group group hops hops import import int int inst inst meta meta mstruct mstruct oblig oblig real real refrain refrain rel rel result result role role spec spec string string type type user user valid valid keywords normal state take pre ocl state normal pre ocl raises raises normal pre ocl constraint constraint recognised normal pre ocl state 
recognised ocl state 
ocl identifiers normal pre ocl ocl subject subject normal pre ocl ocl target target normal pre ocl ocl event event normal pre ocl ocl action action keywords ocl grammar 
recognised normal state normal ocl pre ocl ocl endif endif xor xor implies implies keywords recognised ocl state apart set type ponder set set ocl bag bag ocl sequence sequence ocl collection collection characters special symbols normal pre ocl ocl ocl equals sign blank eol tab par par normal pre ocl ocl ocl normal pre ocl takes ocl state bra ocl takes normal normal pre ocl ocl normal ocl takes normal state bra brk brk dot comma appendix syntax specification normal pre ocl ocl normal ocl takes normal state semicolon excl mark arrow bar bar bar symbols ocl grammar eq lt gt plus minus star slash colon dot dot useful tokens comment comment comment spec seq spec chars ident letter letter digit abs path 
path seq path seq path seq 
rel path path seq 
path seq 
path seq path seq int value integer seq real value float seq string value string seq boolean value boolean seq ignored tokens blank comment productions productions kinds entities defined types instances 
preceded general command ponder specification specification specification import domain import domain type instance type instance commands specified outside structures import statement domain statement declare working domain import domain import import statement domain domain statement structure specified type instance 
forces specify type inst keyword structure group outer definition 
type instance type section type type definition instance section inst inst declaration types possible structure types specified policy type grouping structure type meta policy meta pol type type definition policy policy type group group type section 
grammar role role type rel rel type mstruct mstruct type meta meta type basic simple policy types specified authorisation obligation refrain delegation policy type auth plus pos auth type oblig oblig type neg neg pol type auth refrain deleg deleg type instances inst declaration policy policy inst group group inst role role inst rel rel inst mstruct mstruct inst meta pol meta inst policy inst auth plus pos auth inst oblig oblig inst neg neg pol inst auth refrain deleg deleg inst instantiation command instantiation ident path equals actual call decl semicolon basic policies positive authorisation policy pos auth type auth plus formal call decl bra pos auth type body bra definition instance positive authorisation directly specified instantiation command 
true types structures pos auth inst def auth plus ident path bra pos auth type body bra instantiation auth plus instantiation pos auth type body common policy elements action action pos auth actions semicolon positive auth actions filters associated pos auth actions pos auth action decl pos auth action tail star actions authorisation actions separated commas 
pos auth action tail comma pos auth action decl positive auth actions filters associated pos auth action decl auth action filter auth parameters omitted action action may parameters 
indicates don care parameters action prefixed name object action called 
target 
auth action auth action prefix 
ident auth parameters decl auth action prefix ident path dot appendix syntax specification authorisation parameters identifiers labels placeholders 
restriction placed parameter action identifier constraint policy condition shall placed 
auth parameters decl par ident list 
par ident list ident ident list tail ident list tail comma ident specification filter positive authorisation policy filter filter condition 
bra filter body bra filter condition expression filter body ident equals expression semicolon result result equals expression semicolon negative authorisation refrain policy neg pol type neg sign formal call decl bra neg type body bra neg pol inst def neg sign ident path bra neg type body bra instantiation neg sign instantiation neg type body common policy elements action action neg pol neg pol actions auth action neg pol action tail star actions neg pol action tail comma auth action neg sign auth minus auth minus refrain refrain obligation policy oblig type oblig formal call decl bra oblig type body bra oblig inst def oblig ident path bra oblig type body bra instantiation oblig instantiation oblig type body pol policy elements aux semicolon common common element spec oblig type body aux semicolon oblig type body aux event event spec action oblig actions exception catch exception spec obligation action consists sequences actions separated concurrency constraints 
oblig actions basic oblig action oblig action oblig action concurrency op oblig actions basic oblig action single oblig action decl section 
grammar par oblig actions par oblig action decl oblig action name par actual parameters 
par oblig action name object prefix 
ident object prefix path ident path dot concurrency operators obligation actions follow performed fails performed execution stops may performed concurrently 
execution continues finished may performed concurrently 
execution continues finished concurrency op seq arrow bar parallel bar bar specification events body obligation policy event spec event expr exception single action 
script action 
exception parameter runtime exception system passed argument exception action 
exception spec ident par actual parameters 
par delegation policy heading delegation policy type declaration format deleg del name auth deleg policy formal parameters policy deleg constraints validity actual delegation plus maximum number delegation hops specified 
deleg type pos deleg plus deleg formal call decl bra deleg plus type body bra neg deleg minus deleg formal call decl bra deleg type body bra deleg formal call decl ident path lp par type ident 
ident rp par lp par formal parameters 
rp par delegation policy instance deleg inst def deleg inst def instantiation deleg instantiation deleg inst def pos deleg plus id ident path par auth plus 
id ident path par bra deleg plus type body bra neg deleg minus id ident path par auth plus 
id ident path par bra deleg type body bra delegation policy instantiation statement authorisation policies delegate specified rest parameters deleg instantiation pos deleg plus deleg actual call decl neg deleg minus deleg actual call decl deleg actual call decl id ident path equals id ident path deleg actual params semicolon deleg actual params lp par ident path rp par lp par actual parameters 
rp par delegation policy allow specification target override target authorisation policies 
separate grantee entry 
deleg type body common policy elements appendix syntax specification grantee grantee set type 
subj target semicolon access rights access rights semicolon body positive delegation policy allows specification valid clause indicate delegation constraints 
deleg plus type body deleg type body valid valid constraint spec semicolon hops hops deleg hops access rights delegated 
just actions negative authorisation policy filters deleg access rights neg pol actions policy deleg maximum number delegation specified 
integer value deleg hops ident ident int value int value common basic policy body contents common single policy body contents 
individual policies contain definition common elements constants constraints 
obligation policies contain event declarations 
command separated semicolon 
policy elements policy elements aux semicolon common elem basic common element spec policy elements aux subject type 
subj target target target set type 
subj target constraint constraint spec subject domain scope expression assigned name subj target dse subj target name 
domain scope expr subj target name ident equals composite policies group group type group comp type formal call decl bra group body bra group inst def group ident path bra group body bra instantiation group instantiation group body common comp pol body nesting comp nested elem role role type role comp type formal call decl bra role body bra role inst def role ident path bra role body bra subject domain 
instantiation role role instantiation role body common comp pol body nesting comp nested elem role instantiation ident path equals actual call decl subject domain 
semicolon subject domain sign ident path section 
grammar relationship relationship contain nested role types instances addition may contain composite policy sub type 
rel type rel comp type formal call decl bra rel body bra rel inst def rel ident path bra rel body bra instantiation rel instantiation rel body common comp pol body nesting rel nested elem rel nested elem type type rel type nested elem inst inst rel inst nested elem rel type nested elem common comp type nested elem role role type rel inst nested elem common comp inst nested elem role role inst management structure management structure contain nested role relationship types instances addition may contain composite policy sub type 
mstruct type mstruct comp type formal call decl bra mstruct body bra mstruct inst def mstruct ident path bra mstruct body bra instantiation mstruct instantiation mstruct body common comp pol body nesting mstruct nested elem mstruct nested elem type type mstruct type nested elem inst inst mstruct inst nested elem mstruct type nested elem common comp type nested elem role role type rel rel type mstruct mstruct type mstruct inst nested elem common comp inst nested elem role role inst rel rel inst mstruct mstruct inst common body contents composite policies composite structures contain nested basic policies groups meta policies 
comp pol body common element spec comp nested elem type type comp type nested elem inst inst comp inst nested elem comp type nested elem comp type nested elem aux comp type nested elem aux group group type policy policy type meta meta type comp inst nested elem comp inst nested elem aux appendix syntax specification comp inst nested elem aux group group inst policy policy inst meta meta inst meta policies meta policy meta ident formal parameters raises action raises clause meta policy contains concurrency constraints meta type meta formal call decl raises action call bra meta body bra concurrency meta formal call decl bra meta body conc bra meta body meta expression meta expression semicolon meta expression expression assign brk ident brk equals expression meta expression semicolon meta expression meta inst def meta ident path raises action call bra meta body bra def conc meta ident path bra meta body conc bra instantiation meta instantiation meta body conc concurrency expression concurrency expression semicolon concurrency expression semicolon concurrency expression concurrency expression consists sequences activities separated concurrency constraints 
concurrency expression activity activity 
activity concurrency op concurrency expression activity single activity decl par concurrency expression par activity decl activity prefix 
activity prefix ident activity prefix path dot activity prefix ident dot parameters formal parameters formal parameters call declaration definition types name path identifier need specify domain definition go 
composite types include extends clause inheritance 
formal call decl ident path par formal parameters 
par comp type formal call decl formal call decl extends type 
formal parameters formal param formal param tail formal param tail section 
grammar comma formal param type parameter indicating don care situation formal parameters event expressions formal param type decl 
ident possible types specified declared 
user defined types name type specified optionally type decl int int real real string string boolean boolean domain domain set set set type 
subject type 
target target set type 
grantee type 
event event action action constraint constraint auth plus auth plus auth minus auth minus oblig oblig refrain refrain deleg plus deleg plus deleg minus deleg minus role role rel rel group group mstruct mstruct meta meta type ident type qualifier 
type ident type type ident ident path type qualifier user defined user user defined policy type extern extern external idl type set type lt ident gt type extended specified path syntax extends clause actual call decl extends type extends extends clause extends clause extends clause params actual call decl path ident path extends clause comma extends clause actual parameters actual parameters call declaration definition instances name path identifier need specify domain definition go 
actual call decl ident path par actual parameters 
par actual parameters actual param actual param tail actual param expr expression dse brk domain scope expr brk actual param tail comma actual param common elements specification appendix syntax specification common elements defined defined structures types instances 
common elements specified events constraints constants int real string boolean domains basic common elements specified authorisation delegation refrain policies events sense policies basic common element spec constraint constraint constraint def spec spec external spec constant constant def import domain import domain common element spec basic basic common element spec event event event def event definition definition event 
event def ident event params 
equals event expr semicolon event expression basic event occurs occur irrespective order occurs occurs occurs occurs time occurs specified period time occurs occurs occurs followed interleaving occurs occurs times event expr basic basic event basic event event multiple int value star event expr inter bra event expr semicolon event expr bra excl mark event expr event op event op event expr time plus int value event op bar bar arrow arrow basic event name event optional parameters 
method call timer object specify time event basic event par event expr par ident ident auth parameters decl 
authorisation parameters timer ident dot action call event params par formal parameters 
par constraint definition constraint def ident constraint params 
equals constraint spec semicolon constraint params par formal parameters 
par constraint spec expression constants definition constant def constant def aux constant def aux int int basic const assign real real basic const assign section 
grammar string string basic const assign boolean boolean basic const assign set set set type 
set const assign extern type extern type ident type const assign external type user type user type ident type const assign user defined type basic const assign ident equals expression semicolon set const assign ident equals domain scope expr semicolon type const assign ident equals expression semicolon external specification specification external ponder 
external spec ident spec seq semicolon import domain statements import statement meaning import specified domain path import statement import import path import path path path semicolon ident ident semicolon domain statement domain domain statement body domain statement body var decl ident equals path semicolon decl path semicolon lib action ident dot action call semicolon expressions domain scope expressions domain scope expr basic basic domain scope expr composite basic domain scope expr domain scope expr domain scope expr domain op domain scope expr basic domain scope expr domain object domain object single obj bra domain object bra star star int value 
domain object sign sign int value 
domain object par par domain scope expr par domain op plus plus minus minus intersect domain object ident path domain object domain object obj attr dot object attr action call dot action call domain library objects arrow arrow feature call object attr subject subject target target ident path ident ident appendix syntax specification path path path abs abs path rel rel path expressions expressions ponder follow ocl syntax version expression logical expression expression branch expression branch expression branch expression endif logical expression relational expression logical expression logical expression logical operator relational expression relational expression add expression relational expression 
relational expression relational operator add expression add expression mult expression add expression add expression add operator mult expression mult expression unary expression mult expression mult expression mult operator unary expression unary expression unary unary operator postfix expression postfix postfix expression postfix expression primary expression postfix expression postfix expression action call dot action call arrow arrow feature call primary expression lit col literal collection literal literal action action call par expression par expression feature call parameters par declarator 
expression par literal path path added 
part ocl grammar 
string string value real real value int int value boolean boolean value subject subject target target simple type specifier ident path literal collection collection kind bra expression list range 
bra expression list range section 
grammar expression expression list range tail 
expression list range tail list expression list tail range dot dot expression expression list tail comma expression feature call ident qualifiers 
feature call parameters 
action call ident action call params 
action call params par actual parameters 
par qualifiers brk actual parameter list brk iterate alternative added missing ocl specification declarator standard ident declarator tail declarator type declaration 
bar iterate iterator ident iter type declarator type declaration semicolon accumulator ident acc type declarator type declaration equals expression bar declarator tail comma ident declarator type declaration colon simple type specifier actual parameter list expression actual parameter list tail actual parameter list tail comma expression logical operator xor xor implies implies collection kind set set bag bag sequence sequence collection collection relational operator equals equals eq eq gt gt lt lt add operator plus plus minus minus mult operator mult star div slash unary operator minus minus appendix syntax specification predefined libraries timer timer library object specify events 
contains functions specify time point events repeated events duration repeated events specific timepoints 
timer time objects true date string form dd mm 
sub strings date specified wildcard character 
means st month year 
time string form hh mm ss 
period string msec sec min hour day week year 
string mon tue wed thu fri sat sun 
month string jan feb mar apr may jun jul aug sep oct nov dec function name parameters operation date time specifies event occurs specific date time 
date include wildcard characters mean date 
function overloaded version time parameter 
timer specifies event occurs am 
number duration period specifies event occurs repeatedly specified period time 
timer min specifies repeats minutes 
date specifies event occurs repeatedly specific date 
timer specifies event occurs st month 
everyday date specifies event occurs repeatedly specific day week 
date parameter left blank indicate date 
timer everyday mon specifies event occurs monday january 
number duration period time specifies event occurs repeatedly specified period time specific time 
timer day specifies event occurs day pm 
date time specifies event occurs repeatedly specified date specific time 
timer specifies event occurs december noon 
date time specifies event occurs repeatedly specified day week specific time 
timer wed specifies event occurs wednesday noon 
section 
predefined libraries time time library object provide utility functions time constraints 
function name parameters operation date time specify time point date time specify second time point specifies time range 
function overloaded 
accepts parameters type time dates ignored 
time range st january am st may am date time specifies time range specified time point 
function overloaded accept parameter time date 
time means pm date time specifies time range specified time point 
function overloaded accept parameter time date 
time means st october am 
date returns string current date month returns string current month returns string current day time returns string current time duration number period specifies duration 
time duration hour indicate duration hours 
domain functions defined domain object 
function name parameters operation get string name object domain string relative path sub domain current domain returns object current domain name 
printers get printer returns object printer domain called printers 
returns sub domain current domain relative path 
printers get floor color returns sub domain printers floor color 
syntax appendix semantics keywords appear bold keyword non terminals start capital letter 
program statement program statement typedef inst typedef type auth path id id type auth path id id action action subject dse target dse expr type deleg path id path id id type deleg path id path id id valid expr hops intvalue subject dse target dse grantee dse action expr type oblig path id id subject dse target dse expr type refrain path id id subject dse target dse action expr type group path id id bgroup extends path id expr dse bgroup typedef inst bgroup type role path id id extends path id expr dse id expr set id id dse domain id path typename id path section 
syntax id id expr id expr result expr id id int int id id timer methodname expr dse prefix expr dse prefix subject target inst inst auth path id path id expr dse inst auth path id path id expr dse inst deleg path id path id path id expr dse inst deleg path id path id path id expr dse inst oblig path id path id expr dse inst refrain path id path id expr dse inst group path id path id expr dse inst role path id path id expr dse path int double char string boolean typename id path set id domain typename expr value var expr methodname expr dse expr fieldname value setvalue intvalue path setvalue ri dse dse dse path path path path methodname expr dse path expressions assigned policy elements expr dse commands runtime manage system 
added grammar enable path disable path exec id id id expr exec id id id expr exec id id id expr id id id expr expr field id id id id id expr expr allows id id id id disallows id id id id delegate id id id appendix formal semantics structural operational semantics program statement execution sequential ps ps type instantiation described auth 
rules apply auth oblig refrain 
path type auth path tn xn type auth path tn xn zi new identifiers new path type auth path tn xn ei vali val zn valn zn xn state disabled path path path inst auth path path en rules showing action execution granted pol policies auth allows pol vn true pol policies auth disallows pol false exec vn pol policies auth allows pol vn vn pol policies auth disallows pol false exec vn vn rules showing action execution denied pol policies auth disallows pol true exec vn deny exec vn deny rules showing application authorisation filters access decision process filter expr pn result false ba vn filter ba vn filter zi new identifiers filter expr pn result true pn vn expr expri vi pi expr vn filter vn program program type auth inst auth exec exec filter exec deny exec default auth exec filter auth exec filter auth exec filter done section 
structural operational semantics rules describe auth policy allows action execution pol policies auth pol state enabled pol subject sets sets pol target sett sett pol action new pol constraint true filter pol allows pol vn true pol policies auth pol state enabled pol subject sets sets pol target sett sett pol action new pol constraint true filter pol allows pol vn vn filter pol pol policies auth allows pol vn false pol subject sets sets allows pol vn false pol target sett sett allows pol vn false pol action allows pol vn false new pol constraint false allows pol vn false rules describe auth policy allows action execution pol policies auth pol state enabled pol subject sets sets pol target sett sett pol action new pol constraint true disallows pol true allows true allows true filter allows false allows false allows false allows false allows false disallows true appendix formal semantics pol policies auth disallows pol false pol subject sets sets disallows pol false pol target sett sett disallows pol false pol action disallows pol false new pol constraint false disallows pol false constraint subject target evaluations pol constraint expr expr val pol constraint val pol subject dse dse set pol subject set pol target dse dse set pol target set constant definitions expr val id expr dse obj set id id dse idx obj domain id path id path expressions val val id val id val val val disallows false disallows false disallows false disallows false disallows false constraint subject target settype domain typename value var ocl expr section 
structural operational semantics expr ri expr ri expr path obj object path expr field obj expr id expr field id field rt ground expr expr val valk expr val valk expr identifies object context call expr ri expr val valn exec ri val valn identifies object context call expr path obj object path expr val valn exec obj val valn identifies object context call expr id expr val valn exec id val valn domain scope expressions eval path obj path obj eval path obj path obj eval path obj path obj obj object path path val valn exec obj val valn path obj path obj dse dse dse dse dse dse dse obj dse dse dse dse obj dse dse obj dse obj field access field access field access field access method call method call method call method call dse path dse path dse path dse action call dse feature call comp dse comp dse comp dse appendix formal semantics policy life cycle commands rules apply types basic policies pol policies auth pol path pol pol enable path pol policies auth pol path pol pol disable path delegation rules apply negative delegation policies 
path type deleg path tn xn type deleg path tn xn zi new identifiers new path path type deleg path tn xn ei vali val zn valn zn xn state disabled path ri path type auth path subject subject target action delegate constraint action includes cascading path hops inst deleg path path path en inst auth path path policies deleg path subject sets sets grantee action returns associated policy type auth path subject target target action valid constraint type auth path subject target action delegate constraint action includes cascading path hops delegate inst auth path path inst auth path path enable auth disable auth type deleg inst deleg delegate section 
structural operational semantics obligation new event instance occurs hi hi hi ei pol policies oblig pol action target ba pol state enabled hk es pol occ hk pol event true tk trace pol event history hk xi vali xi pol event vali tk pol constraint true pol subject sets pol target sett hk ei vi target ba en hi exec sets sett ba vn new event instance occurs hi hi hi ei pol policies oblig pol action subject ba pol state enabled hk es pol occ hk pol event true tk trace pol event history hk xi vali xi pol event vali tk pol constraint true pol subject sets hk ei vi subject ba en hi exec sets sets ba vn si head sets set tail sets exec si si ba vn exec sets sets ba vn exec set set ba vn si head sets set tail sets exec si sett ba vn exec sets sett ba vn exec set sett ba vn si head sets tail sets exec si sett ba vn exec sets sett ba vn ti head sett set tail sett exec ti ba vn exec sett ba vn exec set ba vn event exec target event exec subject exec subject exec exec exec appendix formal semantics ti head sett set tail sett exec ti ba vn fail exec sett ba vn exec set ba vn ti head sett tail sett exec ti ba vn exec sett ba vn ti head sett tail sett exec ti ba vn fail exec sett ba vn pol policies refrain disallows pol ba true exec ba vn fail exec ba vn deny exec ba vn fail exec ba vn exec ba vn val exec ba vn ba vn exec ba vn ba vn filter expr pn result false exec ba vn filter exec ba vn filter zi new identifiers filter expr pn result true exec ba vn val val val ba vn filter val exec exec exec exec refrain fail exec fail exec success exec success filter exec filter exec filter section 
structural operational semantics execution concurrency operator fail fail fail fail execution concurrency operator fail execution concurrency operators 
symbol denote operators 
exec seq exec seq exec seq fail exec seq fail exec exec exec exec conc exec conc exec conc exec conc appendix formal semantics additional rules execution concurrency operator 
fail fail fail fail additional rules execution concurrency operator rules show refrain policy disallows action execution pol policies refrain pol state enabled pol subject sets sets pol target sett sett pol action new pol constraint true disallows pol true pol policies refrain disallows pol false pol subject sets sets disallows pol false pol target sett sett disallows pol false pol action disallows pol false new pol constraint false disallows pol false exec conc fail exec conc fail refrain true exec conc exec conc refrain false refrain false refrain false refrain false refrain false section 
structural operational semantics group composite policy 
type definition rules types composite policy structures 
path type group path tn xn bgroup type group path tn xn bgroup zi new identifiers path type group path tn xn bgroup extends ei vali val zn valn bgroup bgroup zn xn bgroup override bgroup bgroup path type group path tn xn bgroup type group path tn xn extends path en bgroup zi new identifiers new path type group path tn xn bgroup ei vali val zn valn bgroup bgroup zn xn bgroup bgroup path path bgroup bgroup path inst group path path en role instantiation zi new identifiers new path type role path tn xn ei vali val zn valn zn xn path path path path inst role path path en path signatures runtime commands enable path path void disable path path void exec subject target action name value exec sett subject target set action name value void exec sets sett subject set target set action name value void filter subject target action name value filter subject target action name value field target fieldname allows pol policy subject target action name value true false disallows pol policy subject target action name true false delegate subject grantee action name void type group group type extends inst group inst role appendix formal semantics alloy model domain system model model consists managed objects called objects domain entries names assumed drawn fixed set names domain object fixed name managed objects partitioned non domain objects domain objects root domain structure domain object entries relation returns set entries domain object name relation domain entry returns name entry contents relation domain entry returns actual object contents entry parent relationship returns domain objects parents object children gives children objects domain state partition static object root fixed 
entries name static name 
contents static object 
parent children object define parent get domain entries object entry get domain objects contain entries def parent parent contents entries entries domain distinct names inv entries name name root parent 
objects excluding multiple parents inv parents root parent sure graph acyclic 
follow parent relation domain ancestor inv acyclic nod dind parent object reachable root 
means root specified state paragraph inv reachable object root children sure structures level deep ruled cond root children children non domain object entry domain object assert nd entries contents operation add set entries es domain op es es entries entries es section 
alloy model domain system entries entries operation create new object name domain op create object name entries name contents name operation delete entry name domain op name entries name name entries entries specify properties operation assert specify properties create operation assert create children specify properties operation assert name name 
