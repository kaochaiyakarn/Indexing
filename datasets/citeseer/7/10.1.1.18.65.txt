exploration evolutionary model generarive design process 
john gero vladimir kazakov key centre design computing department architectural design science university sydney nsw australia 
mail john kaz arch 
su 
edu 
au exploration model design proposed 
shape grammars framework representation model 
routine design problem state space generated fixed shape grammar creative design problem extended state space generated extended shape grammar family shape grammars includes original formulated 
evolutionary algorithms produce superior designs shape grammars 
method exploration search processes occur simultaneously whilst second explicitly separated 
design activity primarily concerned changing physical world 
design characterized initially intentional purposeful activity concerned developing suggestions changing physical world 
implies design modelled goal oriented problem solving activity goals designing fixed determining part designing 
design constrained activity constraints limit designer ability achieve goals 
constraints behaviour physical world designer perceptions interpretations design situations implicit representations processes utilized 
design conceived decision making activity 
implies choices exist choice structure design space set decision variables model describes valid designs choice behaviour space objectives describes quality design choice particular design point particular structure design space 
search finding improved design terms pre defined objectives structure design space 
process determining space search objectives direct search called exploration gero 
addition exploration search design appear microcomputers civil engineering involves learning learning implies restructuring knowledge 
suggested exploration important idea design creativity 
creativity ability produce novel solutions qualitatively better previous solutions critical aspect designing 
creativity designing involves incremental improvement existing designs 
developing support designers creative directions design research lies 
search design search computational process defined process finds new points better previous ones 
assumed belong space compared objectives 
space state space particular design style state space design styles possess distinguishing feature possible designs space objectives 
nature search space kind objectives significance 
conditions need met search space contains points defined priori objectives compare points 
search structure design space contribute design 
aspect designing variables level granularity produced relationships known structure design space objectives defined search appropriate process 
whilst search structure design space provide adequate paradigm design situations occur base design activities 
search form basis classes design comprehensive model called routine design 
sense search foundational necessary sufficient process computational model design 
search structure design space fails deal process producing variables determining relationships changing structure design space 
address process producing new objectives behaviour variables 
exploration design exploration design characterized process creates new design state spaces modifies existing design state spaces 
new state spaces rarely created de novo design existing design state spaces modified 
result exploring design state space altered state space 
exploration maps concept creative design gero 
spaces associated behaviour objective structure decision variables model changed general design structure space changed 
creative design process complicated exploration structure behaviour spaces proceed simultaneously separated may produce feedback 
similarly search exploration may occur simultaneously sequential stages 
assume formulation design problem depend time external processes 
stationary problem corresponds picture closed world 
case search high level space mimic exploration viewed low level 
instance exists search search single state space search extended state space union state spaces sx algorithm operates space union number different state spaces subspace space structure state spaces search union state spaces looks exploration process observer constituent state spaces fig 

moving constituent state space effectively converting formulation design problem 
computational model exploration meta search 
similarly search method operates union number behaviour spaces interpreted exploration 
world open strictly structure behaviour spaces time external process dependent due instance human intervention get different mathematical problem 
just possible formulations creative design problem considered 
formulating problem exploration extended structure design state space fixed behaviour 
extended state space defined space contains original 
simplest case may just union potential structure design state spaces 
evolution behaviour space nonstationary evolution open world model left consideration 
remainder commences formalizing routine design shape grammars knowledge representation formalism 
goes develop extended formulation design creative design modeled closed world form exploration maps meta search 
example results derived discussed 
shape grammars design shape grammars generate design systems mitchell mitchell fleming knight consist finite set possible initial shapes finite set shape transformation rules applied recursively 
particular design grammar represented choice initial shape finite sequence transformation rules 
soon shape grammar defined state space designs generated implicitly defined 
design problem formulated optimization problem quantifiable objective function set design constraints 
framework shape grammar formalized optimization problem discrete time integer control subject constraints min 
state vector uniquely characterizes particular shape vector objectives control belongs finite set different shape trans formation rules function represents rules set initial shapes functions represents constraints design 
shape grammar defined 
fixed sets transformations fixed 
denote space shapes generated grammar 
solution problem optimization method bryson ho 
instance simulated annealing method formulated shape grammar terms mitchell 
similarly genetic algorithm technique applied successfully gero 
learning design interpret shape grammar existing available knowledge design space 
search solution problem occurs predefined sub space space possible shapes 
interpreted model routine design process gero 
want simulate non routine creative design come model utilizes additional knowledge obtained search process 
effect grammar changed intermediate results search 
restructuring knowledge corresponds learning new shape grammar 
newly learned grammar properties produce improved designs terms defined objectives 
important aspect creative design case involves learning new grammars 
extended design problem write formally model creative design closed world extension routine design problem 
assume exists parameterization shape grammars qb functional parameter 
extended problem stated min subject constraints gx 
control xo 
search space union feasible grammars 
computational method solve extended problem 
iterative method solve structure algorithm 
set counter iteration 
take qb 
calculate 
set 
calculate new qb value 
repeat step conditions met 
formulas calculate new qb step algorithm depend method chosen solve problem 
set points qb just point iteration 
trial points th iteration search located different general sets subspaces subspaces different populations 
presumably search process wi information obtained current spaces select new set grammars iteration 
processes search optimal design search optimal grammar qb occur simultaneously 
terms gero proposed algorithm consists mixture search exploration processes separated explicitly 
order illustrate algorithms assume parameter qb take finite set values qb qb 
subsets partially overlap 
search process algorithm shown schematically fig 
grammar searched parallel 
assuming number trial points constant iteration distribution population changes automatically algorithm proceeds 
sets lose population drop current set may gather population join 
separated extended design problem define solution problem grammar qb 
problem rewritten equivalent form min qs ar min subproblems high level problem finding optimal grammar control qb low level problem finding optimal design fixed grammar qb control 
generation generation search process algorithm total population current sets si constant generation 
separate extended problem high level subproblem lowlevel solution process structure algorithm take 
set counter iteration 
find solution qb low level problem grammar qb 
calculate qb set 
calculate qb value repeat steps conditions met 
different methods solve high level problem finding optimal grammar formulas computation qb different 
set ll trial points iteration qb qb 
step algorithm contains iteration process produces solu tion design problem current grammar terms gero algorithm interpreted repetition routine search exploration steps search results 
low high level sub problems solved standard method instance mitchell gero 
similar traditional implementations bertsekas execute iterations find approximate solution low level problem algorithm algorithm fixed population current set 
step algorithm search solution low level problem occurs trial points moves inside set step fig 
step set current grammars replaced constant populations fig 
search new set proceeds reason introducing algorithm reduce effective size search generation generation search process step algorithm trial points moved set current sets kx iteration counter solution low level design problem fixed set grammars generation generation search process step algorithm number current grammars gi generations constant 
populations sets constant 
transformation rules example space intuitively natural cases reduces computational cost search extended state space efficient 
closer algorithm intuitive picture design process designer tends investigate current state space prior attempting explore example example take problem beam section design gero 
beam component engineering structure transmits load bending 
addition bending behaviour stiffness behaviour interest beam exposed total exposed area interest 
stiffness directly related moment inertia beam cross section total area directly related perimeter cross section beam uniform length 
geometric properties beam cross section calculate behaviours associated moment inertia perimeter 
shape grammar generates beam cross sections producing cells grid 
joining elementary cells grid cells shape grammar executed produces beam cross section 
state vector 
weight elementary square cell grid point maximum weight elementary cell represents cell positions second component represents called marker elementary cell transformation rules applied 
shape grammar set transformation rules rm gi kl 

choice defines rule 
rules shown fig 

assume initial shape feasible elementary cells marker 
particular grammar consists finite set transformation rules 
parameter vector variable length kl objective vector function dimensional moment inertia perimeter min oo loo perimeter pareto set 
genetic algorithm solve extended problem subproblems algorithm order handle multiobjective optimization simple pareto ranking procedure 
take positive number set counter 
find points current population belong pareto set assign fitness value equal set 
consider rest population points just single pareto set reduced population set fitness values members set equal 
set 
cycle continues points ranked 
assume maximal weight elementary cell 
number feasible rules equals 
pareto set generation problem shown fig 

measure convergence sequence current grammars optimal grammar indirectly measuring convergence total number rules generate population generation number previous generations fig 

plotting density distribution rules various generations fig 
see distribution rules tends concentrate small part rule space number rules converges 
result applying model exploration example production set optimal grammars generation beam cross sections 
optimal grammar defined grammar generate optimal design 
entire computational process treated evolution initial grammar selection specialised grammar possible grammars 
case behaviour entire system seen producing optimal formulation specified design problem formulation means selection appropriate design variables determination relationship order completely describe design problem 
density distribution rules 
density rule generation defined ratio number applications rule total number rule applications generation discussion number interesting additional results emerge example 
examination figs 
shows possible rules uniformly seed generation shift pattern usage generations proceed preference small subset possible rules increasingly 
indicates primacy certain rules production final solutions 
ramifications knowledge design systems utilise grammars 
knowledge level recast finding optimal grammar 
model exploration considered weak model maps directly meta search 
requires knowledge parameterization variables 
form basis stronger model exploration state spaces defined priori new state dependent done 
occur open world human designer forms part fitness evaluation fitness grammars dependent external variable 
extended problem allows take account evolution shape grammars consider possible dependence objective grammar possible nonstationarity objective grammar depend external variable time 
assume dependencies exist problem takes form max get richer model exploration 
cases may design problem finding optimal design exploring possible state spaces interesting designs 
evolutionary model provides useful computational engine 
acknowledgments supported australian research council 
bertsekas 

constrained optimization lagrange multiplier method aca press new york 
bryson ho 

applied optimal control mass mitchell 

optimally directed shape generation shape annealing environment planning 
fleming 

sum parts grammar queen anne houses environment planning 
gero 

model exploration computer aided design gero sudweeks eds formal design methods cad preprints ifip university sydney pp 

gero louis kundu 

evolutionary learning novel grammars design improvement artificial intelligence engineering design analysis manufacturing 
knight 

transformations motif greek geometric design computing 


language frank lloyd wright houses environment planning 


shape shape grammars environment planning 
mitchell 

grammar environment planning 
mitchell 

grammar paradise generation gardens environment planning 
captions fig 
search single state space search extended state space union state spaces sx fig search process algorithm current set si denoted hatching 
total population current sets si constant generation 
fig search process step algorithm trial points moved set current sets si 
kx iteration counter solution low level design problem fixed set grammars gi 
fig search process step algorithm number current grammars gi generations constant 
populations sets si constant 
fig 
transformation rules example 
fig 
pareto set 
fig 
density distribution rules 
density rule generation defined ratio number applications rule total number rule applications generation fig 
dependence total number rules number previously generation number 

