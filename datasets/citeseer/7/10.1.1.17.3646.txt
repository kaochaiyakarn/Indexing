eighth annual omar conference signals systems computers october mapping multiple independent synchronous dataflow graphs heterogeneous multiprocessors jos luis pino thomas parks edward lee department eecs university california berkeley ca pino parks eal eecs berkeley 
edu detail method facilitate prototyping real time applications heterogeneous multiprocessors 
introduce new model computation allows nondeterminate communication independent dataflow graphs 
graphs may communicate manner introduce data dependencies 
examine implications model introduce communication actors required discuss scheduling techniques multiple independent graphs 
illustrate model detailing real time examples constructed ptolemy 
dataflow natural representation signal processing algorithms 
strengths exposes parallelism expressing actual data dependencies exist algorithm 
applications specified dataflow graph nodes represent computational actors data tokens flow arcs graph 
ptolemy framework supports dataflow programming computational models discrete event program graphs different semantics 
ptolemy allows computation models mixed specification complete systems 
code generation consists phases scheduling synthesis 
scheduling phase dataflow graph partitioned parallel execution 
splice send receive actors graph interprocessor communication 
actors synchronization necessary self timed implementation 
target processor ordering actor invocations determined 
synthesis phase code segments associated actor stitched order specified scheduler 
commercial systems threading technique include dpc descartes 
techniques describe complementary dpc descartes principle combination 
forms dataflow defined ptolemy 
synchronous dataflow sdf number tokens produced consumed firing actor constant 
property possible determine execution order memory requirements compile time 
systems overhead runtime scheduling contrast dynamic dataflow predictable run time behavior 
introduce new model computation allows multiple independent dataflow graphs 
allow nondeterminate communication graphs introduce new communication actors call peek poke 
perspective independent dataflow schedulers peek actor data source poke actor data sink 
section discuss heterogeneous target specified ptolemy 
section explain new model interconnect independent dataflow graphs 
section study implications static run time scheduling multiple graphs 
detail applications run heterogeneous platform consisting unix workstation dsp card 
target specification key property ptolemy specification heterogeneous targets easier object oriented programming techniques 
describing multiprocessor target specification individual processor build multiprocessor targets hierarchically spare dsp card 
simple sdf graph 

heterogeneous target specification 
objects 
target specification ptolemy manages flow design process defines methods schedule graph compile run generated code account target resources 
detailed description code generation framework ptolemy emphasis single processor targets 
fundamental building block multiprocessor target single processor target 
example ariel card installed workstation 
target describes dsp cards 
target specifies memory resources available card download code program memory dsp 
target generates assembly code allocates target specific resources private memory 
target describes resources workstation generates code programming language 
target general type target target 
code generates run general purpose computers 
multiprocessor target built targets contains children hierarchy 
children type target simple single processor complex heterogeneous multiprocessor 
parent multiprocessor target specifies shared resources ipc mechanisms children form send receive peek poke actors 
homogeneous multi dsp target description detailed 
model computation section define new model computation allows nondeterminate communication dataflow graphs 
describing synchronous dataflow sdf define means multiple independent sdf graphs 
introduce peek poke actors necessary implement nondeterminate communication 
mechanism useful user controls displays 
model allows user specify systems largely determinate manageable nondeterminate communication 
synchronous dataflow shows simple sdf graph 
graph actor produces tokens actor consumes tokens firing 
valid sdf schedule fifo buffers arc return initial state schedule period 
balance equations written arc integral repetitions vector solves system equations 
simple example balance equation arc xr xr repetition vector er nl 
valid schedules graph 
sdf specification find schedule compile time iteratively repeated run time 
multiple independent sdf graphs model allow multiple independent dataflow graphs shown 
independent graphs communicating dotted arcs 
arcs add data dependencies 
simplicity assume actor produces consumes token arc firing 
schedule graph ab schedule second graph cde 
think independent graphs separate communicating processes 

independent sdf graphs 
dotted arcs represent communication graphs introduce data dependencies 
introducing nondeterminism peek poke actors dotted arcs splice peek poke actors 
done way send receive actors spliced self timed sdf multiprocessor implementations 
peek poke actors similar send receive actors block state buffer see 
send receive pair blocking fifo buffer actors 
send actor block write fifo full receive actor block read fifo empty 
contrast peek actor reuse old data new data available poke actor overwrite old data new data available 
peek actor appears data source poke actor appears data sink independent sdf schedulers 
furthermore sdf send receive interprocessor communication peek poke pair processor 
various properties peek poke actor pairs useful allow updating link implicit rate graphs updating link user specified rate transferring block consecutive tokens update optionally aligning transfers property peek poke actors link updated 
simplest configuration peek poke actors pair updated implicit rate graphs 
peek poke actors scheduled link updated possible computed schedules 
peek poke actors useful separating user settable run time parameters sdf graph doing hard real time computation 
useful configuration peek poke actors updated user specified rate 
useful updating displays 
properties peek poke actors number alignment data transferred 
transferring multiple number tokens update gives user window signal 
advantage controlling alignment fold enables user download multiple number run time parameters simultaneously enables downloading signal computed fft alignment crucial 
send receive poke 
peek 
target spliced communication actors 
scheduling implications section study scheduling implications result model 
mapping multiple sdf graphs architectures allows possibility independent graphs may mapped single processor 
assign relative firing rates graph ensure fair scheduling 
discuss methods scheduling multiple graphs processor define means fire graph 
define firing sdf graph schedule period sdf schedule actors fired number times specified minimal repetitions vector 
example graph schedule 
iteration schedule firing 
valid sdf schedule obey firing definition 
schedule valid sdf schedule returns arc initial number tokens 
schedule contains repetitions actor required 
static scheduling map multiple independent graphs single processor want determine firing order graphs compile time know relative rates graph 
explicitly user implicitly actors independent graphs 
explicit case user specifies times graph fired relative 
example user specify graph ab fire times times graph cde fire 
valid static schedule processor ab cde 
implicit case graphs contain actors require firing certain rate relative global clock 
example actor reads samples khz actor reads writes samples khz 
ab fire times times cde fired 
possible valid static schedule processor ab cde 
timing requirements ab may allow long delay firings cde th st firings graph 
schedule ab abcde reduces delay firing cde 
timing requirements may strict complete firing cde allowed firings ab 
fine grain interleaving ab may required case 
dynamic scheduling relative firing rates different graphs may known exactly 
timing graphs ab cde controlled separate hardware clocks may fine tolerances exactly synchronized 
case possible exactly determine relative firing rates statically dynamic run time scheduling 
uncertainty relative rates small example ab fires times firings cde methods described 
set static schedules constructed task system 
case schedules ab cde ab cde 
measurements hardware timer determine schedules executed 
major drawback approach complexity grows exponentially number tasks 
general dynamic scheduling scheme real time operating system provides prioritized preemptive scheduling 
rate monotonic priority assignment tasks higher rates higher priority operating system provide necessary run time interleaving way deadlines met possible 
firing rates execution times tasks known possible guarantee deadlines met 
preemptive rate monotonic scheduling useful incomplete timing information 
priorities fixed possible predict tasks deadlines overload situation 
firing rates need known exactly long ordering rates 
execution times difficult accurately estimate programs written high level languages priority assignments 
solution attractive simplicity large overhead incurred operating system 
avoid overhead simple non preemptive multitasking kernel rate monotonic priorities 
examples section detail simple applications 
examples running heterogeneous platform consisting workstation dsp card described earlier 
applications synthesized workstation tcl tk workstation graphical user interface motorola assembly code dsp card 
example fm synthesis application 
application independent sdf graph components 
furthermore graphs running dsp independent graphs running workstation 
second example acoustic modem 
independent graphs graphs spans workstation dsp 
example requires send receive actors 
fm synthesis fm synthesis graphical specification shown 
stated application independent graphs 
top level description shown middle 
subgraph enclosed dotted line runs dsp 
application specification hierarchical 
actors expanded expose hierarchy actors top level description outside peek poke 
fm specification 
graph enclosed dotted line runs dsp card 
peek poke actors arcs crossed dotted line 
remaining part graph runs workstation 
dotted arcs expand graphs similar top 
note peek poke actors graph 
icon suggests provide disconnection dataflow graphs 
actors expanded peek poke pair shown 
peek poke actors disconnect top subgraph subgraph runs dsp 
actors run workstation similarly disconnect graph running dsp 
allows dsp subgraph run fast necessary 
case sound generated khz 
disconnected graph send receive forced dsp workstation run lock step 
able run high rate 
acoustic modem example shown simple acoustic modem 
pseudo random sequence bits generated workstation 
sequence sent dsp transmits receives bit stream speaker microphone channel 
received bits fed back workstation errors displayed user see 
example independent sdf graphs 
note graph spans actors running workstation dsp 
peek poke communication schemes afford loose bits channel 
graph allows user adjust phase incoming signal slider 
spectrum scale range zoo time signal scale zoo volume quit 
graphical user interface generated fm sound application 
extended sdf allow communication independent sdf graphs 
communication mechanism ideal interfacing user run time controls displays 
implement multiple independent graphs introduced new actors called peek poke appear independent sdf schedulers source sink actors 
described useful properties peek poke actors 
discussed scheduling implications mapping independent graphs single processor 
case able statically schedule independent graphs possible showed priority assignment conjunction real time operating system 
model analogous homogeneous sdf repetitions vector ones 
looking extending model way multirate sdf extends homogeneous sdf 
buck ha lee messerschmitt ptolemy framework simulating prototyping heterogeneous systems international journal computer simulation special issue simulation software development appear 
lee ha scheduling strategies multiprocessor real time dsp globecom vol 
powell lee newman direct synthesis optimized dsp assembly code signal flow block diagrams icassp vol 
san francisco ca ieee 
random dsp error bits modem display variable transmitter channel delay receiver 
acoustic modem specification 
dotted line encloses portion running dsp 
modem block expands graph shown 
ritz meyr high level software synthesis signal processing systems proceedings international conference application specific array processors berkeley ca usa ieee 
sec 
press 
lee messerschmitt synchronous data flow proceedings ieee vol 

pine ha lee buck software synthesis dsp ptolemy journal vlsi signal processing synthesis dsp appear 
pine software synthesis single processor dsp systems ptolemy master thesis memorandum ucb erl university california berkeley 
sriram lee design implementation ordered memory access architecture icassp minneapolis mn ieee 
liu layland scheduling algorithms multiprogramming hard real time environment journal association computing machinery vol 

asynchronous multirate system design programmable dsps icassp vol san francisco ca ieee 
parks lee non preemptive real time scheduling dataflow systems submitted icassp detroit mi ieee 
control panel go number iterations quit bit errors scale dismiss 
acoustic modem graphical user interface 
