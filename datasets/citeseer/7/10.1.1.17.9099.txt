generic broadcast fernando pedone andr schiper informatique ecole polytechnique de lausanne ch lausanne epfl switzerland fernando 
pedone andre 
schiper epf 
ch 
message ordering fundamental abstraction distributed systems 
usual ordering guarantees purely syntactic message semantics taken consideration despite fact cases semantic information messages leads efficient message ordering protocols 
define generic broadcast problem orders delivery messages needed semantics messages 
semantic information messages introduced system conflict relation defined messages 
show reliable atomic broadcast special cases generic broadcast propose algorithm solves generic broadcast efficiently 
order assess efficiency introduce concept delivery latency 
message ordering fundamental abstraction distributed systems 
total order causal order view synchrony examples widely ordering guarantees 
ordering guarantees purely syntactic sense take account seman tics messages 
active replication example called state machine approach relies total order delivery messages active replicated servers 
considering semantics messages sent active replicated servers total order delivery may needed 
case example distinguish read messages write messages sent active replicated servers read messages need ordered respect read messages 
message ordering cost sense avoid ordering messages required 
define generic broadcast problem defined primitives broadcast deliver establishes partial order research supported epfl ethz dragon project contract number part esprit broadcast wg number 
message delivery 
semantic information messages introduced system conflict relation defined set messages 
roughly speaking messages delivered order conflicting messages 
definition message ordering conflict relation allows powerful message ordering abstraction 
example reliable broadcast problem instance generic broadcast problem conflict relation empty 
atomic broadcast problem instance generic broadcast problem pair messages conflict 
algorithm solves atomic broadcast trivially solves stance generic broadcast specified conflict relation ordering messages necessary 
define generic broadcast algorithm strict orders messages necessary 
notion strictness captures intuitive idea total order delivery messages cost cost paid necessary 
order assess cost generic broadcast algorithms introduce concept delivery latency message 
roughly speaking delivery latency message number communication steps broadcast deliver 
give strict generic broadcast algorithm expensive known atomic broadcast algorithms runs messages conflict algorithm ensures delivery latency message equal known atomic broadcast algorithms delivery latency equal 
rest structured follows 
section defines generic broadcast problem 
section defines system model introduces concept delivery latency 
section presents solution generic broadcast problem 
section discusses related section concludes 
generic broadcast problem definition generic broadcast defined primitives broadcast deliver 
process invokes broadcast message say broadcasts returns execution deliver broadcast relation primitive defined isis sys tem 
message say delivers message taken set messages belong 
central generic broadcast def symmetric conflict relation denoted 
say conflict 
generic broadcast specified conflict relation conditions gb validity correct process broadcasts message eventually delivers gb agreement correct process delivers message correct processes eventually deliver gb integrity message correct process delivers previously broadcast process 
gb partial order correct processes deliver messages conflict delivers delivers conflict relation determines pair messages sensitive order pair messages deliver order processes deliver messages 
conflict relation renders specification generic shown section 
reliable atomic broadcast instances generic broadcast consider special cases conflict relations empty conflict relation denoted conflict relation denoted 
case pair messages conflict partial order property gb imposes constraint 
equivalent having conditions gb gb gb called reliable broadcast 
case pair messages conflict partial order property gb imposes pairs messages ordered called atomic broadcast 
words reliable broadcast atomic broadcast lie ends spectrum defined generic broadcast 
conflict relation defines instance generic broadcast 
conflict relations lying extremes conflict spectrum better illustrated example 
consider replicated account object defined operations deposit withdraw 
clearly deposit operations commute withdraw operations deposit operations 
denote set messages carry deposit operation set messages carry withdraw operation 
leads conflict relation trl trl trl trl 
generic broadcast accot conflict relation broadcasting invocation deposit withdraw operations replicated account object defines weaker ordering primitive atomic broadcast messages required ordered stronger ordering primitive reliable broadcast imposes order 
strict generic broadcast algorithm specification obvious algorithm solving atomic broadcast solves instance generic broadcast problem defined 
solution orders messages conflict 
interested strict algorithm algorithm order messages required conflict relation idea ordering messages cost terms number messages number communication steps cost kept low possible 
formally define algorithm solves generic broadcast conflict relation denoted ac strict satisfies condition 
strictness consider algorithm ac set runs ac 
exists run correct processes deliver non conflicting messages different order 
informally strictness condition requires algorithm ac allow runs deliver non conflicting messages totally ordered 
ac order messages happen total order spontaneously ensured 
require violation total order observed run require run ac 
case instance consider withdraw operation performed current balance larger equal system model definitions processes failures failure detectors consider asynchronous system composed processes pl 
pn 
processes communicate message passing 
process fail crashing consider byzantine failures 
pro cesses connected reliable channels defined primi tives send receive 
assume asynchronous system augmented failure detectors allowing solve consensus class failure detector allows consensus solved maximum number failures smaller 
delivery latency introduce delivery latency parameter measure efficiency algorithms solving broadcast problem defined primitives broadcast deliver 
deliver latency variation latency degree introduced modified lamport clocks 
send event local event process modify local clock rs send timestamp send event rs timestamp carried message rs rs send timestamp receive process maximum rs current clock value 
delivery latency message broadcast run algo rithm solving broadcast problem denoted dlr defined difference largest timestamp deliver events process run timestamp broadcast event run rr set processes deliver message run deliver event process deliver latency run formally defined dl max ts ts broadcast 
example consider broadcast algorithm process wish ing broadcast message sends processes process receiving sends acknowledge message ack processes soon receives nack messages type ack delivers run algorithm broadcast 
dlr 
solving generic broadcast overview algorithm processes executing generic broadcast algorithm progress sequence stages numbered 
stage terminates conflicting messages broadcast delivered stage delivery non conflicting messages 
message 
process receives stage conflict message received stage inserts set sends ack message processes 
soon receives ck messages nack processes nack delivers delivery conflicting messages 
conflict detected consensus launched terminate stage consensus decides sets messages denoted nc stands non conflicting stands conflicting 
set set messages delivered stage messages delivered messages messages may delivered process stage executes th consensus 
set contain conflicting messages messages may conflict 
messages delivered deterministic order 
process starts stage delivered messages properties 
correct algorithm satisfy prop erties messages conflict delivered stage consensus 
message delivered stage process con sensus set 
set contain conflicting messages 
property ensured condition 
property ensured fol lows 
starting consensus process sends set processes message type checking denoted chk waits messages type chk exactly ncn processes 
message ncn messages type chk inserted initial value consensus decides ncnb messages type chk inserted condition hack holds delivered stage sus 
understand notice nn ncnb number processes knows 
ncn messages type chk processes knows sent ack ack messages delivered process stage consensus 
property ensured fact inserted ncn messages type chk received majority condition 
messages majority condition messages set process possible conflict 
minimal number correct processes 
generic broadcast algorithm waits ha messages delivering non conflicting messages ncn messages conflict detected starting consensus 
algorithm requires max na ncn correct processes 
minimum expression happens ha 
property follow 
take example messages ra conflict delivered stage cost consensus property property applies 
generic broadcast algorithm provided number correct processes max nack nac nac ncn algorithm solves generic broadcast conflict relation tasks algorithm execute concurrently task entry points lines 
process stage manages sets 
contains messages delivered current time contains messages delivered stages contains message sent ack message stage current time set non conflicting messages delivered stage current time executes th consensus 
wants broadcast message executes broadcast line 
delivering message actions taken depend conflicts message del edp conflict 
conflict exists includes line sends ack message processes acknowledging deliver line 
receives nac ack messages message line includes line delivers line 
conflict 
case conflict starts terminating procedure stage process sends message type chk processes line waits information exactly processes line 
builds set line 
proved contains message process starts consensus line decide pair line 
deci sion process delivers order messages delivered lines delivers deterministic order messages delivered lines 
delivering messages decided consensus execution starts stage lines 
ra ra algorithm generic broadcast initialisation delivered delivered pending deliver execute broadcast task broadcast deliver occurs follows deliver delivered delivered lj task delivered delivered pending task delivered delivered conflict pending delivered delivered send pending ack send pending chk wait ncn processes received pending chk define chk received pending chk pending nn propose delivered delivered wait decide ncg deliver deliver delivered cg deliver delivered deliver messages ncg deliver order deliver messages cg deliver deterministic order delivered deliver ncg deliver cg deliver delivered pending deliver receive ack define ack received ack delivered deliver deliver deliver messages order proof correctness due space limitations included proofs section 
proofs agreement partial order validity integrity 
prove properties section hold 
lemma states set pending contain conflicting messages 
prove lemmata 
lemma 
process messages conflict 
proof suppose way contradiction process conflict delivered assume delivers time delivers evaluates statement line time hypothesis delivered delivered lines 
statement line evaluated delivered delivered conflict condition evaluates false included contradiction concludes proof 
lemma proves property 
lemma 
messages conflict delivered stage consensus 
proof proof contradiction 
assume mes sages conflict delivered stage con sensus 
lack generality consider delivered pro cess delivered process generic broadcast algorithm lines received hack messages type pending ack pending pending 
rac process sends message pending ack processes pending contradicting lemma 
lemma relates set ack processes send ac message stage set processes process receives chk messages stage set processes receives chk message containing stage lemma 
set processes execute statement send ack line stage pending set processes process receives mes sages type pending chk stage line hack ncnb hack nch processes ch ch ac 
proof prove contrapositive nch hack 
definitions ack follows ncnb 
see notice set contains processes set sent message process know remaining processes ii acknowledged message number acknowledges equal ncnb 
fact ncnb 

nac rich fact hack integers nack 
conclude hack 
lemma proves property section 
states message delivered process stage exe consensus stage included set decided consensus lemma 
processes executes decide set set proof message show ifp executes statement propose maj setp maj received hack messages type pending ack line pending hack processes sent processes send statement line 
lemma chk ncn algo rithm line process exe propose value decided consensus execution uniform validity consensus process executed propose lemma proves property 
lemma 
messages conflict proof proof contradiction 
assume mes sages conflict validity property consensus process exe propose algorithm re messages type pending chk pending receives nch messages type pending chk pending waits messages type pending chk exist process contradicting lemma 
strictness cost generic broadcast algorithm proposition states generic broadcast algorithm section strict implementation generic broadcast 
proposition 
algorithm strict generic broadcast algorithm 
discuss cost generic broadcast algorithm 
main result messages conflict generic broadcast algorithm deliver messages delivery latency equal messages conflict delivery latency equal 
known atomic broadcast algorithms deliver messages delivery latency results shows tradeoff generic broadcast algorithm messages conflict frequently generic broadcast algorithm may atomic broadcast algorithm conflicts rare generic broadcast algorithm leads smaller costs compared atomic broadcast algorithms 
exception optimistic atomic broadcast algorithm deliver messages delivery latency equal spontaneous total order property holds 
propositions assess cost generic broadcast algorithm messages conflict 
order simplify analysis delivery latency concentrate results runs message results extended general runs 
tion defines lower bound delivery latency algorithm proposition shows bound reached runs process failures 
consider particular implementation reliable broadcast appears 
proposition 
assume algorithm uses reliable broadcast implementation 
tc set runs generated gorithm message broadcast delivered runs tc run tc dlr 
proposition 
assume algorithm uses reliable broadcast implementation 
tc set runs generated gorithm runs tc message broadcast delivered process failures run tc dll 
results follow define behaviour generic broadcast algorithm runs conflicting messages broadcast 
proposition establishes lower bound cases messages conflict proposition shows best case conflicts reached process failures failure suspicions 
proposition 
assume algorithm uses reliable broadcast implementation consensus implementation 
tc set runs generated algorithm messages broadcast delivered tc 
conflict run tc dlr dlr 
proposition 
assume algorithm uses reliable broadcast implementation consensus implementation 
tc set runs generated algorithm messages broadcast delivered tc process failures failure suspicions 
conflict run tc delivered dl dl 
process wants broadcast message ra sends ra processes 
process receives ra sends ra processes delivers related group communication aim extending traditional communication insufficient settings 
communica tion typically needed handle replication replicated data replicated objects 
classical techniques manage replicated data voting quorum systems cite 
early quorum systems distinguish read operations write operations order allow concurrent read operations 
ideas extended data types 
increasing concurrency ing strong consistency guarantees replicated data standard way increase performance system 
lazy replication approach aims increasing performance reducing cost replication 
lazy replication distinguishes read write operations relaxes requirement total order delivery read operations 
consistency ensured cost managing timestamps outside set replicated servers timestamps ensure causal order delivery replicated servers 
approach aims increasing performance replication increasing concurrency context group communication 
similarly quorum systems generic broadcast algorithm allows concurrency possible traditional replication techniques atomic broadcast 
perspective seen way integrate group communications quorum systems 
stronger similarity quorum systems generic broadcast algorithm 
algorithm sets set checking set 
sets play role similar quorum systems 
quorum systems require weaker conditions keep consistency condition required checking sets 
reason discrepancy probably related guarantees offered quorum systems question requires investigation 
introduced generic broadcast problem defined conflict relation set messages 
notion respectively delivering non conflicting messages stage de non conflicting messages delivered termination stage 
nr size read quorum size write quorum 
quorum systems usually requires nr 
conflict derived semantic messages 
conflicting messages delivered processes order 
generic broadcast powerful message ordering abstraction includes reliable atomic broadcast special cases 
advantage generic broadcast atomic broadcast cost issue cost defined notion delivery latency messages 
different issue generic broadcast algorithm uses mechanisms similarities quorum systems 
interesting investigate point better understand differences replication protocols group communication atomic broadcast generic broadcast replication protocols quorum systems 
noted section generic broadcast algorithm re quires correct processes 
condition usual context byzantine failures surprising context crash failures 

birman joseph 
reliable communication presence failures 
acm transactions computer systems february 

chandra toueg 
unreliable failure detectors reliable distributed systems 
journal acm march 

gifford 
weighted voting replicated data 
proceedings th symposium operating systems principles pages december 

hadzilacos toueg 
fault tolerant broadcasts related problems 
distributed systems chapter 
addison wesley second edition 

herlihy 
quorum consensus replication method data types 
acm transactions computer systems february 

jajodia 
dynamic voting 
proc 
acm sigmod int 
conference management data pages may 

lamport 
time clocks ordering events distributed system 
communications acm july 

pedone schiper 
optimistic atomic broadcast 
proc 
th international symposium distributed computing pages september 

pedone schiper 
generic broadcast 
technical report ssc epfl communication systems department april 

ghemawat ladin liskov 
providing high availability lazy repli cation 
acm transactions computer systems november 

schiper 
early consensus asynchronous system weak failure detec tor 
distributed computing 

schneider 
implementing fault tolerant services state machine approach tutorial 
acm computing surveys december 
