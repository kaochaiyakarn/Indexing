obliq language distributed scope luca cardelli digital equipment systems research center obliq lexically scoped untyped interpreted language supports distributed object oriented computation 
obliq computation may involve multiple threads control address space multiple address spaces machine heterogeneous machines local network multiple networks internet 
obliq objects state local site 
obliq computations roam network maintaining network connections 
pm page contents 

language overview 
distributed semantics 

local objects 
objects fields 
object operations 
simple examples 

remote objects 
state 
transmission 
distributed computation 
self inflicted operations 
protected objects 
serialized objects 
name servers 
execution engines 

local techniques 
recursion iteration 
object oriented numerals 
prime numbers sieve 
calculator 
surrogates 

distributed techniques 
serialized queue 
compute servers 
database server 
remote agents 
application partitioning 
agent migration 
object migration 
application servers 

syntax overview 


acknowledgments 
language 
syntactic structures 
data identifiers 
definitions 
terms 
term sequences 
built operators 
operator precedence 
structures 
value identity 
constants 
operators 
arrays 
options 
objects 
protection serialization 
object engine servers 
page pm processor file system enablers 
control structures 
definitions 
assignment 
sequencing 
procedures methods 
conditionals 
case 
iteration 
concurrency 
exceptions 
errors 
methodology 
type comments 
lexicon 
syntax 
system 
executables 
top level 
program files 
modules 
network objects daemon 
built libraries 
sys 
bool 
int 
real 
math 
ascii 
text 
array 
net 
thread 
rd 
wr 
pickle 
lex 
fmt 
process 
color 
form 
programming 
package hierarchy 
interfaces 
libraries 
embedding obliq application 
extending obliq sys calls 
extending obliq new packages 
building customized obliq interpreter 

index 
page 
obliq lexically scoped untyped interpreted language supports distributed object oriented computation 
obliq computation may involve multiple threads control address space multiple address spaces machine heterogeneous machines local network multiple networks internet 
obliq objects state local site 
obliq computations roam network maintaining network connections 
language overview guiding principle separates obliq distributed procedural languages adherence lexical scoping distributed higher order context 
principle conceptually simple number interesting consequences supports natural consistent semantics distributed computation enables elegant techniques distributed programming 
lexically scoped languages binding location identifier determined simple analysis program text surrounding identifier 
sure meaning program identifiers easily reason behavior programs 
distributed language obliq lexical scoping assumes role 
ensures computations precise meaning migrate network meaning determined binding location network site identifiers execution sites 
network wide scoping issue presence higher order distributed computation example remote sites acting compute servers accept procedures execution 
question happens free identifiers network transmitted procedures 
obliq takes view identifiers bound original locations prescribed lexical scoping locations belong different network sites 
principal way structuring distributed computations obliq notion objects 
network services normally accept variety messages natural see service network object neutrally network interface 
obliq supports objects spirit relying implementation modula network objects birrell obliq object primitives designed simple powerful coherent relationship local distributed semantics 
obliq objects collections named fields basic operations selection invocation updating overriding cloning redirection 
class hierarchies complex method lookup procedures 
object potentially transparently network object 
object may accessible network mediation name server simply argument result remote method 
framework objects distributed sites critical decide mobility duplication state 
normally piece data transmitted site implicitly copied 
duplication objects state easily results havoc state handled consistently sites 
avoid problems state duplication objects obliq local site automatically copied network 
contrast network objects transmitted site site restrictions 
alternative approach allow objects state migrate site site making sure integrity internal state maintained act migration 
chosen support migration directly requires coordination sites policy decisions optimal time migration 
atomic object migration coded primitives specifically cloning redirection 
addition distribution data distribution computations designed carefully 
clearly desirable able transmit agents remote execution 
page satisfied transmitting just program text agents 
program text carry live connections originating site data service site 
process transmitting program text network implies complete network disconnect current distributed computation 
addition unpredictable dynamic scoping results transmitting running program text containing free identifiers 
obliq computations form procedures methods freely transmitted network 
actual computations closures source text transmitted lexically scoped free identifiers retain bindings originating sites 
free identifiers migrating computations maintain connections objects locations residing various sites 
disconnected agents represented procedures free identifiers agents need rely prolonged network connectivity 
order concentrate distributed computation issues reduce complexity obliq designed untyped language 
decision leads simpler smaller language processors easily embedded applications 
untyped programs somewhat easier distribute avoid problems compatibility types multiple sites 
obliq run time strongly typed erroneous computations produce clean errors correctly propagated sites 
run time data space heterogeneous meaning different kinds run time values provisions discriminate heterogeneity discourages writing programs difficult typecheck typed languages 
heterogeneity lexical scoping obliq principle suitable static typing 
importantly obliq compatible disciplined approach programming inspired statically typed languages 
lexical scoping interesting implications distributed context 
strong run time typing interpreted execution provide network security guarantees 
consider situation server executing incoming foreign agents 
lexical scoping agents access data resources free variables explicitly receive form procedure parameters 
particular foreign agents access data resources server site explicitly 
example operations files obliq require file system handles available global lexically bound identifiers site 
foreign agent operate file system handle originating site simply referring free identifier 
file system handle server site outside lexical scope unobtainable cooperation server 
degrees file protection represented file system handles special access rights 
distributed semantics obliq distributed semantics notions sites locations values threads 
sites address spaces contain locations locations contain values 
location belongs unique site 
talk local site relative terms remote sites meaning site local site 
sites explicit syntax implicit operations produce new locations 
threads virtual sequential instruction processors 
multiple threads may executed concurrently site different sites 
thread may executing site continue executing site 
threads may jump site site retaining conceptual identity 
current site execution thread control takes place moment 
obliq syntax constant identifiers denote values variable identifiers denote locations 
location containing value may updated assignment variable denoting location 
obliq values include basic values strings integers objects arrays closures results evaluating methods procedures values need discuss point 
page value may contain embedded locations 
array value embedded locations elements updated 
object value embedded locations fields methods updated overridden 
closure value may embedded locations free variables program text refer locations surrounding lexical scope 
basic values contain embedded locations 
location created computation allocated current site 
values may transmitted network 
value containing embedded locations copied transmission 
embedded locations automatically replaced network actual locations move site originally allocated 
obliq value may contain network locations different sites 
particular closure value may contain program text executed accesses data bound free identifiers network 
obliq object consists collection locations spanning single site object bound unique site objects strong limitation objects cloned different sites procedures transmitted allocate objects different sites 
collection interacting objects dynamically allocated network moved 
migration necessary cloning provide needed state duplication redirection redirect operations clones 
stressed far obliq computations evolve webs network 
necessarily case 
example procedure free identifiers forms completely self contained computing agent 
execution agents may carried autonomously remote compute servers agents may dynamically reconnect report results 
intermediate situations possible semi autonomous agents maintain low traffic originating site 
distributed semantics obliq defined data computations network transparent meaning depend allocation sites execution sites course computations may receive different arguments different sites 
time obliq programs network aware distribution achieved explicit acts give full control communication pat terns 
lexical scoping easy distribute computations multiple sites computations behave correctly carried wrong place measure 
flexibility distribution result undesirable network traffic 
obliq relieves burden distributing data computations care planning required achieve satisfactory distributed performance 

local objects section discuss obliq object primitives context single execution site 
primitives reinterpreted section distributed meaning 
objects fields obliq object collection fields containing methods aliases values 
field containing method called method field 
field containing alias called alias field 
field containing kind values including procedure values called proper value field 
field identified afield name 
syntactically object form alt xn implementation network generated objects arrays embedded locations 
consistent significantly simpler carry discussions terms network locations 
page pm rx distinct field names 
lexical distinction field names program identifiers 
terms rai siblings object host object 
term including method alias 
value field example method field form meth yz parameter denotes self method host object 
parameters supplied method invocation 
body method term computes result invocation 
alias field contains alias alias operations field object redirected ry field object 
precise effect explained case case section 
methods procedures supported distinct concepts 
procedures start keyword proc syntax 
main differences follows 
methods manipulated values activated contained objects self needs bound host object 
contrast procedures activated normal procedure call 
procedure inserted object field recovered attempt extract method object results activation 
obliq methods stored directly objects indirectly object classes prototypes 
method lookup step process searches method name single object 
class delegation hierarchy searched iteratively notion super 
inheritance obtained cloning methods objects 
method lookup implemented nearly constant time caching technique independent caches operation instance penalize large objects 
provisions obliq private fields methods easily simulated lexical scoping 
example vat 
expression setting local variable rx returning object scope 
scope limited parentheses part program access 
addition aliases create views objects omit certain fields methods 
object operations apart object creation basic operations objects selection invocation updating overriding cloning redirection 
field aliasing affects semantics described case case 
selection invocation operation variants value selection method invocation form selects value field ra returns 
second form invokes method field supplying parameters returning result produced method ob may pm page ject ra bound self parameter method 
convenience form invocation methods parameters 
field rx alias behaves bn behaves bz bn 
field alias process continues recursively 
updating overriding deals field update method override field rx updated new value 
contains method method method override 
ordinary values field update 
possibilities allowed field turned method zero arguments vice versa 
field rx alias xz az behaves iz 
xz recursively 
cloning third object cloning generalized multiple objects clone clone 
case single argument new object created field names argument object respective locations initialized values methods aliases argument object 
note operation simulated hand attempt extract methods aliases object activates 
case multiple arguments single object produced contains values methods aliases argument objects error field name conflicts 
useful situa tions clone 
inherit fields add new fields clone multiply inherit common parameters cl prototypes classes convention prototypes objects meant repositories methods initial values 
cloning prototypes act object generators cloning prototype corresponds object 
partial prototype mixin class prototype methods refer self fields prototype 
obviously partial prototype object object generator 
clone partial prototypes obtain complete working objects 
cloning applied objects computations 
particular self cloned 
redirection final operation redirection replacement fields aliases 
section seen initialize alias fields alias 
possible assign aliases fields existing objects redirection operation syntax similar update really separate operation alias page pm operation rx ra redirected ry redirection replaces fields aliases regardless fields aliased updating rx ra alias causes rx ra ry updated 
special redirection construct redirect objects redirect effect replace field rx raz including alias fields ral ias xi cloning assemble compound redirected objects 
aliases redirection carefully circumstances best avoided 
redirection implicit notion local surrogate remote object simply lifted mechanism language level 
doing able put network redirection flexible program control shown case object migration 
simple examples examine simple examples just familiar obliq syntax semantics 
advanced examples sections 
object single method invokes self rs parameter 
declaration binds object identifier meth invocation 
results divergent computation 
divergence obtained explicit recursion self application implicit method invocation sufficient 
object components 
value field rx 
method increments rx self returns self 
method invokes self returns rx component result 
operations performed selecting rx component producing 
setting rx component zero 
invoking method parameters 
invoking method parameters valid 
clone overriding longer modifies host object 

remote objects section revisit obliq primitives context objects distributed multiple sites 
discuss distributed state general including arrays variables 
page state state local sense location forever bound site 
time state distributed sense communicating sites 
location site potentially accessed modified network 
values may contain embedded locations belonging current site network aliases remote sites 
access update remote location involves network communication handled transparently manner access update local location 
kinds entities obliq directly contain locations state objects xn field object state access update redirect arrays variables element array state access update var variables state identifiers declared access update objects arrays variables created computation locations allocated current site 
transmission discussed state set locations associated objects arrays variables duplicated transmitted network 
network locations free travel 
attempted transmission location network effect intercepted replaced transmission network location 
remote operations network reflected back original locations described section 
stateless values locations copied transmitted network 
structures copied include basic data types internal representations program text 
general case transmission may mixed situation layers stateless data structures referring location 
data structures embedded locations copied point refer locations network generated 
critical issue transmission closures values resulting evaluation procedures methods 
closure consists parts internal representation source text method procedure table associating free identifiers source text values lexical scope evaluation 
free identifiers table closure may refer variables values embedded locations 
general rule transmitting structures embedded locations applies closures closures copied locations embedded free identifier tables 
example consider obliq code declaring variable rx initialized procedure body refers free identifier page may pm var proc suppose execution line variable rx bound location loc relative current site 
execution second line identifier rp bound closure proc proc represents internal representation program code free identifier table shown 
transmission site sl location lo replaced network location site sl receives data structure proc general terms closure pair consisting piece source text pointer evaluation stack 
transmission closure view implies transmission entire evaluation stack 
implementation closures described known higher order languages effect reducing network traffic transmitting values evaluation stack may needed closure 
optimization enabled lexical scoping distributed computation reinterpret semantics operations objects case remote objects 
passing comment semantics remote arrays variables 
selection invocation value field remote object selected value transmitted network discussed section site selection 
extraction remote array element access remote variable similarly 
method remote object invoked arguments transmitted network remote site result computed remotely final value error exception returned site invocation 
interesting compare invocation remote method invocation procedure stored value field remote object 
case computation remote described 
second case procedure transmitted remote object local site semantics field selection executed locally 
updating overriding field remote object updated method overridden value transmitted network installed remote object 
field update may involve transmission procedure closure method override involves transmission method closure 
update remote array element assignment remote variable similarly 
cloning collection remote local objects cloned clone created local site 
contents including method closures may fetched network 
implementation loc modula network object access update methods 

page extraction remote subarrays concatenation remote arrays similarly 
redirection case object redirected remote remote fields replaced appropriate aliases 
case object remote aliases generated 
aliases local object field aliased remote object behaves field remote object described section case case 
self inflicted operations basic object operations performed external operations object internal operations self 
distinction useful contexts object protection serial ization discussed sections 
method operates object method host object say operation external object 
contrast method operates directly self say operation self inflicted top select update clone redirect operation top self inflicted iff object self current method 
top external iff self inflicted 
current method mean method invoked current thread control returned 
procedure calls change mask current method returned 
operation self inflicted determined simple run time test 
consider example object meth 
operation rs 
self inflicted rs self 
operation rs 
self inflicted depending rs 
returns self general determined run time 
replace rs 
procedure call rp simply performs rs 
rs 
self inflicted rp may 
notion sell self inflicted operations preserved procedure calls external method invocations thread creation 
protected objects useful protect objects certain external operations safeguard internal invariants 
protection particularly important example prevent clients overriding methods network services cloning servers 
protected objects allowed modify state clone 
notion self inflicted operations useful 
protected object object rejects external update cloning redirection operations admits operations self inflicted 
objects declared protected shown protected page pm example methods protected object update sibling fields self external operations modify fields 
note protection mechanism individual private fields address protection cloning redirection 
serialized objects obliq server object accessed concurrently multiple remote client threads 
local concurrent threads may created explicitly 
prevent race conditions possible serialize access objects entities state 
say object serialized presence multiple threads method object executing time method may call sibling self deadlock 
note requirement contradict invariant invocation self suspends method activating sibling 
obvious approach implementing serialized objects adopted concurrent languages associate mutexes objects example see bal kaashoek tanenbaum 
locked method object invoked unlocked method returns guaranteeing condition 
way deadlock method calls sibling condition 
find behavior unacceptable causes innocent programs deadlock reason 
particular object works sequentially may suddenly deadlock mutex added 
brewer waldspurger gives overview previous solutions problem 
way satisfy condition reentrant mutexes mutexes deadlock re locked thread example see fort 
hand solution liberal allows method call arbitrary method different object call back method object 
goes simple desire method allowed call siblings may objects vulnerable unexpected activations methods methods finished object invariants 
hand solution may restrictive notion thread normally restricted address space 
want consider control threads extending sites implementation reentrant locks behave appropriately 
solve dilemma adopting intermediate locking strategy call notion self inflicted operations described section 
serialized objects implicit associated mutex called object mutex 
object mutex serializes execution selection update cloning redirection operations host object 
simple rules acquisition object mutexes external operations acquire mutex object release completion 
self inflicted operations acquire mutex object 
note self inflicted operation happen activation external operation object executed thread 
external operation acquired mutex 
serialization attribute object specified follows serialized self serialization method modify state host object invoke siblings 
deadlock occurs example method invokes method different object vv 
page attempts operation original serialized object 
deadlock occurs method forks invocation sibling waits result 
form object serialization solves common mutual exclusion problems example network servers maintaining simple internal state 
complex situations require sophisticated uses explicit mutexes conditional synchronization threads wait conditions addition mutexes 
complex situations obliq supports full spectrum modula threads primitives birrell homing external interface directly syntax 
conditional synchronization implicit object mutexes 
new condition re created signaled signal 
special wat ch statement allows waiting condition conjunction implicit mutex object 
statement inside methods serialized object evaluated object mutex locked watch guard wat statement evaluates condition gu evaluates true terminates leaving mutex locked 
guard false object mutex unlocked methods object execute thread waits condition signaled 
condition signaled object mutex locked boolean guard evaluated repeating process 
see section example 
objects implicit mutexes cloned fresh implicit mutex created clone 
remote objects implicit mutexes cloned fresh implicit mutex generated cloning site 
note error reported attempt transmit explicit mutex thread condition different sites values strongly site dependent 
consider case threads blocked condition object cloned 
local cloning fresh implicit mutex created clone threads blocked 
condition shared objects 
remote cloning watch statement refers condition conditions transmitted method closure contains watch state ment transmitted remote cloning fails 
consider case threads blocked condition method overridden redirected 
thread resumes original method runs completion modified self 
blocked thread deal fact self may change non trivial ways specially insidious object serialized protected 
objects automatic serialization variables arrays 
necessary access controlled serialized objects explicit mutexes 
objects serialization compulsory default desirable 
cases may sufficient serialize server objects concurrent entry points site leave objects 
name servers obliq values flow freely site site communication channels 
channels established interaction name server 
name server obliq programs external process uniquely identified ip address simply maintains table associating text strings network birrell 
connection protocol obliq sites follows 
site registers local remote object certain name known name server 
second site asks name server network object registered name 
point second site acquires direct network object living site 
name server longer involved way holds network 
obliq values network page pm flow direct connection sites having registered name server 
protocol coded follows built met module 
obliq object exported name server command net export obj nameserver tcp ob registration name object rs te lob object string containing net ip address ip name machine running desired name server 
empty string abbreviation local ip address 
object available name server long site exports alive 
objects engines section obliq values exported name servers 
site import network object site net import obj nameserver site object operations applied rs local object discussed section 
sites communicate directly name server loop 
may told forget object redefining registration name 
site op args site tcp object may available third site transmitting established communication channel site site bj op vv 
page sea tcp site site objects garbage collected site longer referred locally network birrell 
name service operation returns status information network text string 
ping remote object affecting net communication failures raise exception met failure trapped 
failures may mean machines involved crashed obliq address space terminated 
automatic recovery network failures 
execution engines shall see soon compute servers definable simple network objects 
compute servers common useful provide primitives calling execution engines 
execution engine accepts obliq procedures procedure closures network executes engine site 
engine exported site primitive net nameserver arg parameter supplied client procedures received engine 
multiple engines exported site different names 
client may import engine specify procedure execute remotely 
engine value behaves procedure argument net nameserver proc arg implementing engines remote procedures remote objects allows self inflicted operations extend sites turns important object migration 

local techniques section discuss collection single threaded examples illustrate obliq sequential features 
collection concurrent distributed examples section impatient reader may want skip forward 
sections emphasis advanced tutorial examples 
recursion iteration start simple example illustrate definitions local variables control constructs 
factorial function defined recursive iterative style 
page pm rec proc proc var cnt var acc loop cnt exit acc cnt acc cnt cnt acc identifiers declared rl updatable variables recursive definitions obtained rec 
identity predicate called ri 
sequence statements separated semicolons returns value statement iterative factorial program returns 
object oriented numerals example illustrates expressive power object primitives encoding natural numbers purely terms objects 
zero case proc pz ps pz succ meth self clone self case proc pz ps ps self numeral rz fields 
rs cc field produces successive numerals appropriately modifying current numeral 
field discriminate zero idiom case proc proc read informally ifn zero return bind predecessor return 
code method depends heavily obliq peculiarities clones self embeds current self procedure closure 
example numeral tone computed 
succ case proc pz ps ps zero succ tone 
case pz ps correctly applies rps predecessor tone 

page show encoding fully general define successor predecessor test zero procedures proc succ pred proc case proc zero iszero proc case proc true proc proc false prime numbers sieve example shows interesting case methods overriding objects replicating cloning 
program prints prime numbers method rm rs object invoked successive integers starting 
time new prime sieve object clones objects 
clones transforms filter multiples non multiples passed clone 
sieve meth print clone meth sl nl nl print defined ok nl primes sieve re point time primes printed exists filter objects plus clone original sieve object 
calculator example illustrates method overriding store pending operations pocket calculator 
page pm calc arg acc 
enter meth visible argument display hidden accumulator entering new argument arg add addition button meth acc equals equals meth acc arg sub meth acc equals equals meth acc arg subtraction button equals result button operator stack meth arg reset reset button meth arg acc equals meth arg forexample calc reset enter equals calc reset enter sub enter equals calc reset enter add equals calc reset enter add add equals 

page surrogates create non trivial surrogate calculator object section 
original calculator object protected outside interference 
calculator fields shared aliasing hidden renamed added 
protected enter alias enter calc pi meth enter plus alias add calc minus alias sub calc equals alias equals calc reset alias reset calc 
distributed techniques section code distributed programming techniques obliq 
example typical separate class distributed programs illustrates unique features obliq 
serialized queue example ordinary concurrent programming illustrate threads primitives sequel 
implement queue accessed consistently concurrent reader writer threads 
queue implemented serialized object methods 
methods refer free identifiers hidden users queue 
object mutex implicitly protect private variable contains array queue elements 
private variable contains condition signaling state queue 
write method adds element queue signals non empty condition reader thread waiting condition wakes similar broadcast operation wakes waiting threads 
object mutex locked execution write method excluding writer reader threads 
read method starts executing object mutex locked 
instruction watch non empty condition existence elements queue 
queue non empty reader simply goes ahead removes element queue 
queue empty reader thread suspended object mutex released allowing reader writer threads execute reader suspended receives signal non empty condition object mutex locked reader thread proceeds possibly suspended reader thread emptied queue 
important reader thread may blocked inside method writer thread get access eventually allow thread proceed 
thread time run multiple threads may simultaneously object 

array array size array concatenation 
page pm queue nonempty condition var protected serialized write meth elem elem signal nonempty read meth watch nonempty hidden queue data append elem tail wake readers wait writers check size queue get elem remove queue return elem see queue 
suppose reader activated queue empty 
avoid immediate deadlock fork thread running procedure reads queue thread blocks statement 
reader thread returned primi tive bound identifier fork reader blocks fork proc queue read add element queue current thread writer thread 
non empty condition immediately signaled shortly reader thread returns queue element 
queue write cause read reader thread finished running completely dead delivered result 
obtain result current thread joined reader thread result join get general waits completion thread returns result 
compute servers compute server defined receives client procedure zero arguments rexec method executes procedure server site 
particular server cheats clients storing latest client procedure global variable rrep 
field de 

page fined similarly method field value field containing procedure value operational difference discussed 
server site var replay proc net export nameserver rexec meth replay proc replay client may import compute server send procedure execute 
procedure may free variables client site example increments global variable client site net import nameserver vat rexec proc server executes rexec method replay set closure server site set client site free lexically bound client site 
variable called server site exists different variable affected 
server may invoke setting client site 
contrast consider execution line client site client site proc results server returning procedure proc replay client semantics remote field selection replay bound server site 
client procedure argument 
time client procedure executed client site 
execution client site causes client procedure transmitted server bound repl ay variable 
final effect 
database server example describes simple server maintains persistent database 
client may add new fortune learn method may retrieve fortune entered client tel method 
server handles concurrent client access saves database file preserve data outages 
initial empty database assumed 
built libraries readers rd writers data storage de scribed section 
proc db wr open fortune pickle write db wr close page pm proc rd open fortune pickle read rd close vat fortune protected serialized db tell meth self self rib self rib self 
db learn meth self self db self db self db net export nameserver fortune remote agents compute servers section execution engines section general object servers ways allocating objects remote sites 
objects act agents initiating site 
suppose example engine exported database server site 
engine provides database argument client procedures database server site net nameserver database 

page database client simply send procedures performing queries database complex queries efficient repeatedly querying server remotely 
added flexibility client create object server site acts remote agent database client site net nameserver proc database state start meth report meth meth execution client procedure causes allocation object server site methods rs art rre ort rs rs field 
server simply returns network object longer engaged 
show example client 
client starts remote search background thread periodically request progress report 
search successful time period fine 
search takes long remote agent aborted rs top 
intermediate report proves promising client may decide wait long takes agent complete joining background thread 
database client site fork proc start var report pause report report successful report exit promising report report join exit 
client resources server site released client garbage collects search agents client site dies birrell 
technique remotely allocating objects extended multiple agents searching multiple databases simultaneously agents initiating sub agents 
page pm application partitioning technique remotely allocating objects described section application partitioning 
application organized collection procedures return objects 
application starts pick site object send respective procedure remote engine site 
way application components initially distributed dynamic criteria 
agent migration example consider case untethered agent moves site site carrying state white 
write state object agent procedure parameterized state site specific argument agent proc state arg 
completely self contained agent free identifiers state parameter long term memory needs 
agent sent new site follows assuming rat ite available remote engine proc arg agent copy state arg operation explained intent clear agent executed new site local copy state previous site 
agent state accessed locally new site 
implicitly assume agent ceases activity old site 
agent repeat procedure move site 
operation primitive produces local copies arbitrary obliq values including values span sites 
sharing circularities preserved span network 
values copied values transmitted 
protected objects cause exceptions copying site specific values threads mutexes condi tions 
techniques allows autonomous agents travel sites eventually returning original site results 
original site may go line directly affecting agent 
main copying state consistency old site new site preserved programming convention old state 
section see migrate state consistently individual objects 
object migration example uses remote execution engine migrate object sites 
define procedure object name engine name server migrates object engine site 
migration achieved phases causing engine remotely clone object redirecting original object clone 
proc obj engine net nameserver engine proc arg clone obj redirect obj 

page remote migration operations original object redirected remote site executed 
critical phases migration executed atomically preserve object state 
achieved serializing migrating object invoking procedure method object applied self serialized protected 
fields migrate meth self self remote migrate serialization object state change call 
call returns network remote clone place rob anyway redirected clone 
need explain migration protected objects objects protected external cloning redirection 
note self 
call rs bound rob 
causes execution engine proc arg clone subtly cloning rob self inflicted section happens site different site object 
general definition rc oh self inflicted rob self active method current thread 
redirection operation similarly self inflicted 
protected status rob inhibit self initiated migration 
migration permanently modifies original object redirecting operations remote clone 
particular rob asked migrate remote clone properly migrate 
example bit interesting assuming migrating object rob publicly available name server 
method register migrated object name server old name net export nameserver serialized protected migrate meth self net export ob nameserver self captain problem 
instance successfully planet 
failed disin 
unfortunate just step waste recycler 
page vv pm way old clients rob go aliasing indirections new clients acquiring rob name server operate directly migrated object 
application servers visual obliq bharat brown interactive distributed application user interface generator obliq 
distributed applications built visual obliq follow model may call application server model 
model centralized server supplies interested clients dynamically client code client user interface distributed application 
code transmitted client retains lexical bindings server site allowing communicate server clients 
client may separate local state may separate view application user 
typical example distributed tic tac toe game 

syntax overview top level phrases term definition ended def ions denoted rd identifiers denoted rx terms denoted xl 
xn rec xl 
xn var xl 
xn sequences denoted rs terms denoted ra rb rc identifiers denoted ok true false abc bl option proc xl xn bl bn 
meth xn lz az 
ln protected serialized 
ll alias 
clone 
definition constant identifiers definition recursive procedures definition updatable identifiers ra term definition executed yields ra rx rl libraries denoted identifiers assignment constants arrays array selection array update subarray selection subarray update term rs tagged procedures procedure invocation invocation rx library infix right ass 
version method self object fields named protected serialized object object redirected fields field selection method invocation field update method override object cloning 

page ll alias redirect elsif isnot case xn loop foreach foreach map exit exception exc raise try sl 
try condition signal broadcast watch sl fork join pause mutex lock wait field redirection object redirection definition conditional re re optional conditional conjunction disjunction identical identical predicates case tag rl option value binding rs re optional loop iteration successive integers iteration array yielding array results exit innermost loop foreach new exception value named raise exception exception capture re optional finalization creating signaling condition waiting signal boolean guard forking joining thread pausing current thread creating mutex locking mutex scope waiting mutex condition block structure precedence group 
obliq addresses dynamic form distributed programming objects redirect behavior network computations roam network sites 
feel kind programming infancy fundamental issues addressed 
doubt precedence flexible mechanism robust methodology hoping methodology develop experience 
spirit example obliq experiment design implementation agent place paradigms white basic techniques section 
related obliq features application domains overlap programming languages ml milner tofte harper reppy modula nelson self ungar smith scripting languages tcl apple vba mansfield telescript white distributed languages orca bal kaashoek tanenbaum fort fort facile thomsen 
languages mix features obliq particularly concerning distribution aspects 
choice features largely determined idea distributed lexi page pm cally scoped language desire simple object model scale distributed computation availability sophisticated network objects implementation technology 
obliq object primitives designed parallel type theory objects abadi cardelli distributed scoping distributed semantics treated 
status obliq available digital src year 
addition incidental programming extensively scripting language algorithm animation brown graphics najork brown basis distributed application builder visual obliq bharat brown 
obliq implementation provides access popular modula libraries homing extensive user interface tool kit brown 
obliq standalone interactive 
embedded library modula applications allowing interact remotely obliq scripts 
implementation complete documentation available world wide web www research digital com src home html 
issues authentication security authority delegation accounting remain explored 
acknowledgments network objects project src provided infrastructure obliq thought 
alan implemented layer obliq parser 

page language section describes syntax semantics obliq language 
interactions surrounding system environment described section interactions surrounding programming environment described section structures overview principles syntax obliq 
formal grammar final word section principles help predicting correct syntax programs 
obliq syntactic structures classified identifiers definitions terms term sequences 
definitions establish bindings terms denote values term sequences represent sequential evaluation 
final commas term definition lists semicolons term sequences optional 
identifiers obliq unqualified identifiers case sensitive sequences letter sequences special characters section 
convention identifiers constants variables procedures fields methods lower case letter internally capitalized word boundaries 
type identifiers section upper case letter 
qualified identifiers form library name alphanumeric rx unqualified identifier 
convention names built libraries lower case letters names user libraries upper case letter 
identifiers lexically scoped 
unqualified identifiers subject block scoping library names scoped global environment 
field names object option values lexical structure unqualified identifiers 
field names subject scoping 
definitions definitions rec followed comma separated list binders bind unqualified identifiers terms 
definition introduces constant identifiers definition introduces assignable identifiers variables 
rec definition introduces collection identifiers bound mutually recursive procedures 
terms obliq language value oriented syntactic structure term term produces value 
terms main purpose cause side effects produce value 
terms classified identifier terms data terms constructs operations 
identifier terms qualified unqualified identifiers 
data terms specialized syntax various built data structures 
constructs individual specialized syntax keyword keyword rend 
operations prefix infix 
prefix operation consists term indicating operation evaluating procedure followed parenthesized comma separated list argument terms 
infix operation consists term unqualified identifier term 
unqualified identifier denotes built binary operator binary procedure pre page pm fix infix syntax 
operator minus simply placed front term requiring parentheses 
term sequences term sequences lists terms separated semicolons indicate sequential execution terms left right 
semicolons obliq exclusively indicate sequential execution kinds lists separated commas 
definitions happen terms value constant rc may appear sequences 
definitions establish bindings scope extends sequence right 
built operators built operators available qualified names set built libraries 
example real addition rre rre built library 
common built operations available library qualification form infix operators 
rr admitted 
operator precedence operator precedence infix operators built user defined 
operators right associative evaluate arguments left right 
infix operators bind tightly procedure call object selection array indexing 
parentheses precedence grouping 
minus sign negative number literals operator part literal 
form equivalent particularly respect operator precedence 
consequence rules 
data structures network address pair consisting site address memory address site 
semantics obliq data described consistently considering addresses network addresses sense 
obliq data structures assembled network addresses just ordinary data structures assembled local addresses precisely implementation designed create illusion 
proviso obliq data structures discussed existence multiple sites 
value identity value data structure result obliq computation 
values may share substructures 
updates shared substructures may visible separate value roots 
understand sharing occurs critical know circumstances obliq values identical 
entire network semantics obliq details definition 
infix operator determines value identity 
returns boolean pair arguments including pairs different types 
negation operator lv identical isnot identical 
value maintains identity long copied copying value produces similar value identical 
basic types ok booleans integers reals chars texts 

page tions imagine single instance value copied 
types values copied specific operations object cloning array concatenation net transmission 
importantly values copied identifier definition access local assignment update local parameter passing result 
situations value may shared substructure structures 
values state objects arrays copied remote versions situation 
spell consequences ri 
basic types ri predicate corresponds semantic value equality 
example integer integer number text text contain sequence characters 
objects arrays ri predicate corresponds equality network addresses actual objects arrays network stored 
types options closures readers writers ri predicate corresponds equality local addresses values stored 
certain data types sense site local threads mutexes conditions processes forms network transmission values inhibited 
values identical stored local address 
constants constants literals listed see section lexical details 
ok true false 

trivial constant returned side effecting operations booleans see section 
integers see section 
reals see sections 
chars see section 
text strings see section 
constant mean uninitialized variable declarations 
characters strings escape sequences xxx xxx octal supported usual meaning section 
operators list predefined unqualified operators 
left list built libraries belong 
list built libraries qualified unqualified operators see section 
operators evaluate arguments left right 
bool int real text array operator prefix argument parenthesized 
rand ror infix operators evaluate arguments see section 
operators accept boolean arguments 
infix operator integer modulo 
page pm operators real numbers overloaded corresponding operators integers 
infix arithmetic operators reals accept pairs integers return integer accept mixed integer real arguments 
infix comparison operators reals similarly accept pair integer arguments mixed arguments 
prefix operators rf rr ound accept integers reals 
form equivalent 
infix 
operator text concatenation 
prefix 
operator array size infix 
operator array concatenation 
arrays arrays fixed size allocated zero indexing 
array array size array indexing array update subarray extraction index length subarray update array concatenation array operations bound checked 
array remote indexing update op eration causes network communication 
subarray extraction array concatenation produce local copies possibly remote arrays 
note array values shared explicitly copied operations copied element element 
subarray extraction subarray update array concatenation cause network communication argument 
subarray update operates correctly updating overlapping segments array 
source array long destination array longer initial segment 
see section includes operations initialize arrays values iterators 
options option value pair tag syntactically identifier value 
tag tested case statement discriminates set expected tags 
operation case defined option values 
option option tag value objects objects collections fields rx afield name term 
method field field contains method closure 
alias field field contains alias 
field called value field 
xn forn objects may attributes protected serialized section keywords may placed left brace optionally followed comma 

page aliased field denotes field object 
operations aliases redirected fields denote described section 
xi alias 
alias field object error produced object ra field rx 
describe primitive operations objects 
selection value field value returned 
method field containing method arguments method invoked supplying parameter result error exception returned 
alias field ra 
executed 
selection fails field 
bz bn method field containing method arguments method invoked supplying bn arguments evaluated left right 
computed result error exception returned 
alias field 
bn executed 
invocation fails rx field 
object serialized method executes atomically respect methods object 
updating overriding value method field contents replaced alias field 
executed 
result value 
operation fails field 
operation fails self inflicted protected 
cloning clone provided fields ai distinct names cloning produces object field names union field names rai contents identical section contents corresponding fields ai 
attributes resulting object protection serialization attributes az 
cloning fails protected 
cloning general atomic operation acts atomically serialized 
operation fails self inflicted rai protected 
redirection alias field xz replaced alias field rxz aliased 
operation fails field self inflicted az protected 
redirect page pm fields ra replaced aliases similarly named fields ra 
atomic operation serialized fields replaced aliases 
operation fails lacks fields self inflicted ra protected 
protection object attributes may may enabled protection serialization 
need definitions op select invoke update override clone redirect operation object current method thread exists method invoked thread execution returned 
object operation op self inflicted iff identical self current method 
definition remains valid circumstances threads span multiple sites object identity tests applied remote objects 
protected object non self inflicted update override cloning redirection operations produce errors 
self inflicted update override cloning redirection selection invocation operations allowed 
protected objects declared follows protected 
serialized object associated implicit mutex 
non self inflicted operations acquire mutex entry release completion 
self inflicted operations affect mutex 
serialized objects declared follows serialized 
object engine servers built met library enables initial network transmission objects engines mediation name server 
object exported name server saying net export obj nameserver object nameserver text containing ip address machine running desired name server abbreviation local machine text tm ob registration name object 
object available name server long site registered alive 
registering existing name overrides previous registration 
result operation object similarly engine registered name server net eng nameserver arg arg value passed procedure executed engine 
result ok 
separate site site object imported net import obj pa dec com object applied resulting remote object 
similarly registered engine imported vv 
page net eng nameserver resulting value procedure argument procedure argument returns result applying procedure specified 
engine execution takes place thread client 
sequential calls engine site execute sequentially 
calls multiple sites multiple threads site execute concurrently 
final operation available met library net inquiry 
applied objects engines returns string net communication failures raise exception net failure 
certain obliq built values sense local site produce errors attempt transmit 
include threads mutexes conditions processes forms see appendix 
easy bundle built operations values objects export objects network 
case forms brooks brown possible transmit textual form description generate form remotely 
readers writers appendix transmitted network operate efficient network streams 
usage significantly restricted birrell safe transmit reader writer away site receiving site retransmitted restrictions 
alternative packaging readers writers network objects efficient buffering done wrong 
packaged readers writers suffer usage restrictions transmitted 
restrictions effect remote cloning objects containing readers writers 
interfere object migration cloning plus redirection remote clones long readers writers accessed methods additional transmissions occur 
processor file system enablers site enabler local processor bound predefined lexically scoped identifier pro ce 
primitives start external processes unix processes require processor enabler parameter 
processor enablers transmitted 
site enabler local file system bound predefined lexically scoped identifier 
enabler read version local file system bound re ade 
primitives open files require file system enabler parameter 
file system enablers transmitted multiple file systems 
lexical scoping roaming agent access file system originating site referring free identifier 
enablers obtained dynamically lexically bound 
roaming agents start local processes access local file systems local enablers explicitly parameters 
control structures section describe obliq control structures including procedures methods 
page may pm definitions kinds definitions binding identifiers values locations 
local scope top level 
var stir 
st rec xn pn var definition introduces collection updatable variables initial values 
definition introduces collection non updatable identifiers values 
rec definition introduces collection mutually recursive procedures 
cases terms ra scoped context outside definition 
third case procedures rpi scoped outside context extended variables defined 
variables multiply defined rightmost precedence 
forms top level followed semicolon establish top level binding 
see section sequencing local scopes 
assignment variables introduced var denote storage location assigned result assignment value ok 
value contained storage location denoted variable accessed simply mentioning variable 
discussed section variable network 
sequencing collection definitions terms possibly causing side effects sequentially evaluated separating individual components semicolons final semicolon may added 
syntactic contexts bodies procedures accept sequences 
contexts argument lists require terms 
sequence term turned term enclosing parentheses 
sequence create local scope means definitions 
result sequence value component 
component definition ok results 
var yields procedures methods procedures methods manipulated restrictions passed arguments returned results transmitted network 

page proc xz procedure term xz method term procedure term evaluates procedure closure record procedure term value free identifiers scope evaluated 
similarly method term evaluates method closure 
free identifiers procedure method denote entities state updatable variables objects arrays corresponding closure sent network entities state stay accessed network closure activated 
procedure closure activated application provides correct number arguments value body returned 
method closures installed object invoked object selection 
correct number arguments minus self parameter value computed body returned 
cases arguments evaluated left right 
conditionals syntax conditional shown 
number re branches re branch may omitted 
boolean conditions executed sequence rt branch corresponding rt rue condition executed re branch executed absent returned 
elsif boolean connectives particularly useful ri test conditional false true case syntax case shown 
re branch may omitted 
omitted 
case 
yn xn term ra evaluate option value say tag value matches rai executed scope rx bound resulting value result case statement 
match branch ra executed value returned 
match branch error reported 
iteration statement repeatedly executes body 
statement terminates execution innermost loop causes return value ro 
loop exit statement introduces local identifier scope body iterates identifier ranging integer lower bound integer upper bound increments 
value ro returned 
page pm statement introduces local identifier scope body iterates identifier ranging elements array 
rdo version values individual iterations discarded returned 
aap version values collected array returned 
foreach foreach map re xi statement terminate innermost fo fo re ch statement 
case aap shortened array returned containing values iterations computed far 
concurrency primitives described section built top semantics modula threads primitives having similar names homing 
full thread interface described appendix 
taut primitive returns new mutex 
statement locks mutex scope returning value second expression 
primitive starts concurrent execution procedure arguments new thread returning thread second parameter stack size thread words defaults small non zero stack size 
rj primitive waits termination thread returns value procedure executed 
primitive pauses current thread number seconds expressed real number 
mutex lock fork join pause ion primitive returns new condition 
rs primitives wake threads respectively waiting condition 
primitive unlocks mutex argument condition signaled second argument locks mutex 
condition signal broadcast wait ch statement specific serialized objects operates implicit mutex 
occur method serialized object 
watch ra condition ra boolean expression 
statement waits ra true terminates 
ra false statement waits raz signaled trying 
statement equivalent az loop exit wait mu rx occur ra implicit mutex self lexically enclosing method 

page exceptions exception special value raised causes unwinding execution stack 
unwinding reaches top level error message printed 
exception created text string argument exception name 
exceptions equal names equal text strings 
exception easily trapped site different originated 
exception raise unwinding execution stack caused exception stopped try statement temporarily suspended try statement 
guards try statement left exception values exception matched corresponding branch executed re branch executed 
try statement executes ra executes ra matter ra raised exception exception raised 
try try semantics try statements respect exceptions modula 
particular exception may propagate sites unwinding stack thread 
see section behavior respect errors 
errors errors distinct exceptions produced built operations situations logical flaw judged exist program 
situations include divide zero array bad operator arguments cases produce typechecking errors typed languages 
user defined errors 
occurrence error indicates problem fixed recoding 
errors complete show obliq 
errors intercepted recovery clause try execution error reissued clause try discard error 
way example server log occurrence infrequent internal error restart detect extent errors occurring client supplied procedures 
error trapping liberally 
just exceptions errors propagated sites 
done error server caused client thread propagate back client leaving server unaffected 
methodology type comments obliq untyped language obliq program program implicitly respects type discipline programmer mind 
essential discipline explicit way programs quickly unreadable unusable 
obliq supports stylized form comments intended communicate type information enforcement 
comments parsed fixed grammar may appear types usually appear typed language type definitions type specifications identifiers procedures modules 
need write type information useful convenient type comments effect parsing 
page pm type comments section specify built libraries 
examples syntax types intended meaning top ok bool char text int real exception rd wr thread mutex condition process color form exc az 
az ep az 
az exc xi xn option xi xn self cases say ra subtype value type rb 
conventional type operator names built types 
type values 
user defined type identifier capitalized convention 
parameterized type rli st int 
infix parameterized type tint type arrays ra type arrays ra length int 
type procedures argument types ra result type exceptions 
may omitted 
type methods self type raz arg types ra ran result type ra exceptions may omitted 
methods object type rm 

stand methods rall type objects components named rx field type method type rail type options choices named rx type rail rb object type possible covariant occurrences rx 
construction give name rx type methods self objects methods return self 
rb type possible occurrences rx 
type values subtypes ra ra type rb 
rb type possible occurrences rx 
type values unspecified subtype ra type rb 
rb ra page types contexts type top level type declaration 
rx bound scope may occur ra recursive type definition 
type xn top level parametric type declaration 
rx bound may occur ra 
rx may occur ra rx 
xn scope rx 
opposed 
type comment variable rx bound similarly proc xz az 
xn exc opposed xz 
commented procedure heading ai 
exc exceptions may omitted 
required result type exception list 
similarly methods 
xl xn opposed az 
xn commented object ai 
may omitted 
proc identity function argument type rt returns argument 
self int meth element type int tation rx rn nt 
rs type self 
module export type int bool 
emphasizing intended exports module types 
rd open fs filesystem text rd rd failure describing interface library routine 
value ro considered having type initialize variables 
normal type lexicon ascii characters divided classes blank ht lf ff cr sp reserved delimiter 
special digit 
page may pm letter 
illegal pseudo characters single character illegal character characters character illegal 
characters xxx xxx octal number 
comment recursively sequence non illegal characters comments enclosed 

fictitious character character file stream 
lexemes formed characters pseudo characters space sequence blanks comments 
sequence letters digits starting letter 
symbol sequence 
char single enclosed string sequence enclosed nat sequence digits int nat possibly preceded single minus sign 
real int re int optional nat optionally re int 
delimiter single delimiter character 
single pseudo character 
stream characters divided lexemes extracting longest prefix lexeme 
note delimiters stick tokens separated space care taken symbols inadvertently merged 
lexical token char string int real delimiter identifier keyword 
stream characters split lexemes tokens extracted follows 
space lexemes produce tokens 
char string int real delimiter lexemes tokens 
symbol lexemes identifier tokens declared keywords see case keyword tokens 
syntax grammar shown ll non left recursive 
adapted minor editing obliq input 
see definition lexical tokens 
terminals double quotes 
non terminals declared followed grammar 
grammars structure gl gn gi gn ide left choice grammars sequence grammars followed zero associating left 
grouping 
recognizes identifier token 

page name char string int real eof recognizes identifier keyword token recognizes char token recognizes string token recognizes int token recognizes real token recognizes token delimiter token recognizes delimiter token identifier token recognizes identifier token identifier token declares identifier keyword recognizes keyword token obliq top level syntax open ended sequence non terminal phrase phrase name string name string flag name string name string term int load name string module name name import export establish name name reserved delete name reserved save name reserved reserved eof name type name typ typ typ typ option int typ 
name 
name self name typ name name name typ name typ typ page pm typ name name 
name name typ ide term term term termlist name termlist name termlist term term term term term ide term term term term ide ok true false char string int real termlist protected serialized option name clone termlist redirect proc meth rec vat rec case loop exit ide term term foreach ide term map exception 
term raise 
term try lock watch 
page 
name 
name self 
name term term alias ide name elsif termlist term termlist ide name ide term page pm system section contains information running obliq executables handling source files built libraries 
executables rob unix shell command script runs versions obliq linked different modula libraries providing different built obliq libraries 
network capabilities supported versions obliq 
executables currently provided supported built libraries obliq raj array ascii bool int math net real sys text minimal obliq ob min rd wr lex fmt pickle process thread standard obliq ob std color form windows obliq obj ra ui graph zeus animation obliq default means std 
reason separate versions size binaries varies greatly depending libraries linked 
size affects linking time startup time paging behavior 
typical obliq network server needs rain std 
obliq network client iq ui 
top level program executed enters interactive evaluation loop exited typing control 
prompt user input phrase terminated semicolon 
phrase try probably help provides basic line help various aspects system 
common kind input phrase term phrase causes parsing evaluation printing result expression 
examples term phrases comments question answer single text single text false text concatenation identity test definition phrases bind identifiers values top level scope 
binding values updatable variables binding values including procedures constant identifiers rec defining recursive procedures 
var 
page rec fact proc fact obliq top level statically scoped just rest language 
redefining identifier top level simply hides previous incarnation affect terms re fer 
top level phrase finishes executing interpreter pretty prints result small default depth printing ellipses depth 
require larger finite print depth inserting exclamation mark final semicolon phrase example 
larger default depth sufficient situations 
print depth rn forced saying 
closures printed printing program text 
global variables indicated oh 
followed program text 
print values global variables flags 
program files obliq programs stored files extension obl 
files may contain sequence top level phrases 
files loaded system effect typed top level 
top level phrase load foo attempts load file 
obl current search path 
alternatively explicit text string containing file name relative current search path explicit file path load foo obl load luca foo obl search path loading set environment variable changed built library see 
startup time obliq system looks file called obliq user home directory loads finds 
modules obliq modules organizing loading reloading collections definitions turning collections definitions libraries qualified names defined identifiers 
modules hide create scopes turning identifiers qualified identifiers module closed 
obliq source file normally contain single module 
general multiple modules stored file modules entered directly top level 
toplevel source files may contain definitions grouped modules 
page vv pm modules record source file dependencies loading module dependent modules automatically loaded avoiding duplicated loading 
modules help keep toplevel consistent reloading example bug fix 
reloading module rolling back time point module loaded intervening top level definitions discarded module reloaded 
recommended program file foo 
obl start line module foo line module module named terminating rend module said closed 
closing means erasing definitions current scope adding back library named rf containing definitions 
top level identifier rx declared rfo accessible rf closing 
syntax rm built libraries 
rend module omitted module said open identifiers accessible simply rx 
closed modules norm open modules useful importing definitions top level allowing pervasive unqualified definitions 
module relies definitions stored program files similarly start lines line module foo import foo foo way imported definitions depends imported modules open closed 
issuing top level command foo module declaration guarantees properties modules foo foo loaded loaded foo loaded module foo loaded foo modules loaded erased top level reloading foo 
roll back affects top level definition environment undo state changes 
form foo indicates collection definitions named generates library named rl default module closed 
module names unique top level repetition triggers roll back library names repeated 
multiple modules generate library rl definitions merged ones precedence 
mechanism possible add definitions built libraries example text text 
network objects daemon name server running ort similar operations 
obliq uses name server provided modula network objects birrell started unix command met ob 
start name server machine time obliq interpreter starts put line obl file home directory sure met ob path appropriate process new processor proj mips bin true server process exits finds copy running 

page note objects engines exported met interface inherent security risks blindly execute client code 
operating system file system server site necessarily available see section lexical scoping prevents unauthorized access 
built libraries appendix list obliq built libraries entry points popular modula libraries homing 
informal typing notation specification including specification exceptions may raised see section 
operations raise errors explicit 
type comments section exception conditions documented obvious error conditions 
provide informal english descriptions operations 
details operations look specification respective modula interfaces homing 
ys library special contains entry points implementation obliq computing environment 
sys sys copy net failure depth int ok text ok ok ok ok sys text text sys address text sys text sys text ok sys text text int sys int text sys exception sys call name text args rc op local copy value including distributed values 
print arbitrary value stdout print depth 
available line 
print text stdout 
available line 
flush stdout 
available line 
push silence stack non empty printed 
available line 
pop silence stack op empty stack 
available line 
set interactive prompts defaults 
available line 
current machine network address 
get current search path rl 
available line 
set current search path 
available line 
return value env variable name variable 
number program parameters 
return th program parameter indexed 
raised modula code sys call 
sys call pre registered modula procedure 
bool true bool false bool bool bool bool isnot bool bool bool bool bool bl bool bool bool bool bl bool bool bool constant true 
constant false 
infix ri identity predicate value equality ok bool int real char text exception pointer equality 
infix negation tm 
met infix rand infix page 
pm int int int int minus int int nl int int nl int int nl int int nl int int nl int int int nl int int int nl int int int int int int int int int int int int int int int int real int int real minus real real real minus int int real nl real real nl int real nl real real nl int real nl real real nl int real nl real real nl int real real real nl real real nl int real real real nl real real int int real real int int real real int int real real int int real int real int real real bool int int bool real real bool real nl int int real float int real real float real real real round real int real round int int real floor real int real floor int int real ceiling real int real ceiling int int math real math real math degree real math exp real real math log real real math sqrt real real math real real real real real real math cos real real math sin real real math tan real real positive integer constants 
negative integer constants 
integer negation 
integer addition 
difference 
integer multiplication 
division 
infix 
integer modulo 
integer predicate 
integer greater predicate 
integer greater predicate 
integer predicate 
positive real constants optional 
negative real constants optional 
real negation 
overloaded integer negation 
infix real addition 
infix overloaded integer addition 
infix real difference 
infix overloaded integer difference 
infix real multiplication 
infix overloaded integer multiplication 
infix real division 
infix overloaded integer division 
infix infix infix real greater predicate infix overloaded integer greater predicate infix infix infix real predicate 
infix overloaded integer pred 
float real conversion 
float overloaded identity reals 
rr ound real integer rounding 
ound overloaded identity integers 
greatest integers greater overloaded identity integers 
integers overloaded identity integers 


degree 
th power 
log base square root 
sqrt 
th power 
cosine radians 
sine radians 
tangent radians 

page math real real math asin real real math atan real real math atan real real real arc cosine radians 
arc sine radians 
arc tangent radians 
arc tangent radians 
ascii char ascii char int char ascii val char int character single quotes 
ascii character code integer code ascii character text text text new size int init char text text empty text bool text length text int text equal tl text text bool text char text int char text sub text start int size int text tl text text text tl text text bool text decode text text text encode text text text explode seps text text text text sep char text text text hash text int text toint text int text fromint int text text char text text char text text text text text text text text old text new string double quotes 
text size rs filled rin test empty text 
length text 
text equality case sensitive 
th character text exists zero indexed 
text rst art size rs exists 
infix concatenation texts 
rt rt lexicographic ascii order 
occurrence escape sequence replaced corresponding non printing formatting character rlf rcr tm rff tm rh xxx rc 
occurrence non printing formatting character replaced escape sequence 
splits input text similarly ordered array texts maximal subsequence input text containing sep chars 
empty text exploded singleton array empty text 
sep char input produces break size result number sep chars text 
explode text tm identity 
net failure concatenate array texts single text separating pieces single sep char 
zero length array im empty text 
text tm identity provided array positive size sep occur array elements 
hash function 
convert text integer see fmt 
convert integer text see lex 
int int index occurrence rc rt past rn 

int int index occurrence re rt rn 

int int index char occurrence rp tm rt past rn 

nt nt index char occurrence rp rt rn 

text text text replace occurrences told rt iterating df 
page 
pm array elt array new size int array gen size int array int array get array set array sub array upd array en init ize proc int array size filled proc ize ii net failure size array 
int net failure th element exists zero 
int ok net failure update th element exists 
int int net failure new array filled elements ri size exists 
int int ok net failure 
ii net failure infix new array filled concatenation elements tm net net failure exception net text net failure thread alerted return text indicating network object engine registered empty text argument object registered name server 
server text net failure thread alerted export object name name name server ip address 
empty text denotes local ip address 
import object name name name server ip address empty text denotes local ip address 
server text arc ok net failure thread alerted export engine name name name server ip address empty text denotes local ip address 
argument proce received engine execute 
net name text server text net failure thread alerted import object name name name server ip address empty text denotes local ip address 
net name text thread thread mutex mutex thread condition condition thread elf thread thread fork thread join th thread int mutex new mutex 
condition new condition 
current thread 
thread fork new thread executing zero default size 
th wait thread complete re turn result procedure 
page thread wait mx mutex cd condition ok thread acquire mx mutex ok thread release mx mutex ok thread broadcast cd condition ok thread signal cd condition ok thread th thread ok mx cd wait mutex condition 
acquire mutex lock 
release mutex lock cd wake threads waiting condition 
rs cd wake thread waiting condition 
re ok rp au se pause current thread seconds 
thread lock mutex body execute locked mutex lock 
thread alerted exception see threads spec 
thread alert thread ok threads spec 
thread bool see threads spec 
thread mx mutex cd condition ok thread alerted see threads spec 
thread alerted see threads spec 
real ok thread alerted see threads spec 
thread rd rd failure exception rd exception rd new text rd rd stdin rd rd open fs filesystem text rd rd getchar rd char rd eof rd bool rd rd ok rd rd int rd rd int rd getline rd text rd index rd int rd length rd int reader text modula 
standard input modula stdio stdin 
rd failure file system file name returns reader file modula open read 
local file system available predefined lexically scoped identifier 
re de read version local file system 
rd failure rd thread alerted get character reader 
rd failure thread alerted test stream reader 
put character obtained getchar back reader unfortunately may crash misused 
rd failure number characters read block ing 
text rd failure thread alerted read characters file 
rd failure rd thread alerted read line return including line character 
current reader position 
rd failure thread alerted length reader including read part 
ok rd failure thread alerted reposition reader 
rd seek rd int rd close rd ok rd failure thread alerted close reader 
rd intermittent rd bool reader stream file 
rd rd bool reader repositioned 
rd closed rd bool reader closed 
wr wr failure exception wr new wr wr wr text wr stdout wr writer text modula 
emptying writer text 
standard output modula stdio stdout 
page 
pm wr stderr wr wr open fs filesystem text wr fs filesystem wr wr wr flush wr ok char ok standard error modula stdio stderr 
wr wr failure file system file name returns writer file modula open write 
local file system available predefined lexically scoped identifier rf il text wr wr failure file system file name returns writer file modula open append 
local file system available predefined lexically scoped identifier wr failure thread alerted put character writer 
text ok wr failure thread alerted put text writer 
wr failure thread alerted flush writer buffered writes final destination 
wr index wr int current writer position wr length wr lnt wr failure thread alerted length writer 
wr seek wr lnt ok wr failure thread alerted reposition writer 
wr close wr ok wr failure thread alerted close writer 
wr buffered wr bool writer buffered 
wr wr bool writer repositioned 
wr closed wr bool writer closed 
pickle pickle failure exception pickle write wr pickle read rd ok pickle failure wr failure thread alerted copy 
pickle failure rd failure rd thread alerted 
lex lex failure exception lex scan rd text lex skip rd text ok lex match rd text ok lex bool rd bool lex int rd int lex real rd real text rd failure thread alerted read longest prefix formed characters listed return 
rd failure thread alerted read longest prefix formed characters listed discard 
lex failure rd failure thread alerted read string discard raise failure 
lex failure rd failure thread alerted skip blanks attempt read boolean lex failure rd failure thread alerted skip blanks attempt read integer lex failure rd failure thread alerted skip blanks attempt read real fmt text length int text ift shorted length pad blanks left length 

page text length int text fmt bool bool text fmt int int text fmt real real text ift shorted length pad blanks right length 
convert boolean printable form 
convert integer printable form 
convert real printable form 
process process new pt processor process process wr process process rd process err process rd process complete process int process filter pr processor text bool process create process processor process name arguments 
local processor available lexically scoped identifier rp ce rl true single pipe stdout stderr 
stdin pipe process 
stdout pipe process 
stderr pipe process 
wait process exit close pipes return exit code 
text input text text net failure create process processor process name arguments 
local processor available lexically scoped identifier rp ce rl stderr output merged stdout 
usage feed input stdin pipe close read output stdout pipe close return output 
color color named name text color color rgb real color hsv real color color color color color color color color color color color color get color name see modula interface 
real real color get color rgb 
real real color get color hsv 
real red color component 
real green color component 
real blue color component 
real hue color component 
real saturation color component 
real value color component 
total brightness 

color brightness color real form form failure exception text form form failure 
file text form form failure thread alerted reada 
fom attach fv form name text form ok ok form failure fv form name text property fv form name text property fv form name text property attach procedure event form 
procedure passed back form event happens 
text bool form failure get boolean value named property named interactor 
confuse form 
text bool ok form failure set boolean value named property named interactor 
confuse form 
text int form failure get integer value named property named interactor 
property empty text get value property 
page 
fv form name text property text int ok form failure set integer value named property named interactor 
property empty text set value property 
form fv form name text property text text form failure get text value named property named 
property empty text get value property 
fv form name text property text text append soot ok form failure set text value named property named 
property empty text set value property 
form fv form name text soot form failure get boolean value named boolean choice inter actor 
fv form name text soot ok form failure set boolean value named boolean choice interac tor 
form fv form text text form failure get choice value named radio interactor 
fv form text text ok form failure set choice value named radio interactor 
form fv form name text text form failure get reactivity named interactor 
active passive dormant vanished 
fv form name text text ok form failure set reactivity named interactor 
active passive dormant vanished 
fv form name text ok form failure pop named interactor 
fv form name text ok form failure pop named interactor 
form insert fv form parent text text int ok form failure insert form described child parent 
form move fv form parent text child text text ok form failure move child parent means means 
form delete fv form parent text child text ok form failure delete named child parent 
form fv form parent text int count int ok form failure delete count children parent child form fv form name text select ok form failure named interactor acquire keyboard focus optionally select entire text contents 
form show fv form ok show window containing form default display 
form fv form text title text ok form failure show window containing form display 
display num num default display 
title shown window header 
form hide fv form ok hide window containing form 

page programming section provide information useful programmers want call obliq mod vice versa 
package hierarchy goals obliq easily embeddable modula applications 
obliq adds small size overhead typical modula applications want minimize overhead 
obliq implementation partitioned packages modula library package application link appropriate libraries 
advantage organization generate minimal obliq interpreters act relatively small network servers 
package structure 
node package collection interfaces uses connected packages 
nodes italic represent packages external obliq implementa tion 
xx ib obliq xn 
package principal interface interface contains routine called initialize modules package 
package implements obliq run time kernel smallest part obliq usefully embedded application 
note include parsers printers separately provided 
package brings needed build stand obliq interpreters 
package linked various library packages produce various flavors obliq interpreters 
underlined package contains short main program binary interpreter bin server srv 
modula programmers extend hierarchy dotted lines 
page pm interfaces main client interface src obliq refers src parse trees src run time values 
contains routines create inspect obliq values including operations remote objects exceptions errors eval routines obliq parse trees cal registration invoke modula routines obliq 
obliq parser printer separate run time need linked application application may access evaluated objects closures network 
main interface parser src contains routines parse evaluate obliq phrases reader 
interface gives example simple read eval loop 
main interface printer performs pretty printing src 
libraries obliq client link 
parser printer 
building interpreters link 
case include libraries needed get desired obliq built packages features described array ascii bool int math net real sys text sys line extensions line help rd wr lex fmt pickle process thread color form graph zeus embedding obliq application appropriate client interfaces src obliq src src 
may refer interfaces particularly parser trees run time values 
note particularly specific current obliq implementation abstractly possible interface isolate clients dependencies 
evolve time facilities accessed safely 
obliq evaluator takes arguments syntax tree environment 
environment mapping identifiers obliq values particularly important 
manipulating environment submit values obliq evaluation recover results evaluation 
extending obliq sys calls rs ca cheap way extending functionality obliq new built operation invokes modula code 
ambitious extensions see section 
interface src obliq describes register modula procedure invoked obliq 
procedure registered name foo obliq syntax sys call foo arg argo interface src contains examples analyze argument array passed obliq modula 

page link modula code implementing foo obliq application section custom interpreter section 
extending obliq new packages interface src add new built package obliq 
extend obliq new built types exceptions operations 
built obliq packages implemented interface 
interface contains detailed example write register package 
building customized obliq interpreter new package created described section embedded customized obliq interpreter 
follow example src main line program builds standard obliq interpreter 
src main files contain versions interpreter 
page pm abadi cardelli abadi cardelli 
theory primitive objects untyped firstorder systems 
proc 
theoretical aspects computer software 
springer verlag 
apple apple language guide 
addison wesley 
brooks brown brooks brown view approach constructing user interfaces 
computer graphics 
bal kaashoek tanenbaum bal kaashoek tanenbaum orca language parallel programming distributed systems 
ieee transactions software engineering 
bharat brown bharat brown 
building distributed applications direct manipulation 
proc 
uist 
birrell birrell programming threads 
systems programming modula chapter nelson ed 
prentice hall 
birrell birrell nelson owicki wobber 
distributed garbage collection network objects 
report 
digital equipment systems research center 
birrell birrell nelson owicki wobber 
network objects 
proc 
th symposium operating systems principles 
birrell birrell nelson owicki wobber 
network objects 
report 
digital equipment systems research center 
brewer waldspurger brewer waldspurger 
preventing recursion deadlock concurrent object oriented systems 
proc 
international parallel processing symposium beverly hills california 
report mit lcs tr 
inside ole 
microsoft press 
brown brown 
report src algorithm animation festival 
report 
digital equipment systems research center 
appear 
brown brown 
manual 
unpublished 
digital equipment systems research center 
fort fort 
tool manual 
fort homing homing kalsow mcjones nelson 
useful modula interfaces 
report 
digital equipment systems research center 
mansfield mansfield visual basic applications 
press 
milner tofte harper milner tofte harper definition standard ml 
mit press 
najork brown najork brown 
library visualizing combinatorial structures 
proc 
ieee visualization 
nelson nelson ed 
systems programming modula 
prentice hall 

page tcl tk toolkit 
addison wesley 
reppy reppy 
higher order concurrent language 
proc 
sigplan conference programming language design implementation 
acm press 
thomsen thomsen leth prasad 
kuo kramer 
facile release programming guide 
ecrc 
european research centre 
ungar smith ungar smith 
self power simplicity 
proc 
oopsla 
acm sigplan notices 
white white 
telescript technology foundation electronic marketplace 
white 
general magic page vv pm index agents agent migration aliases alias fields construct application embedding array library arrays constructs operators ascii library assignment construct bool library booleans constants operators broadcast construct built libraries built operators case construct characters constants classes cloning closures color library commas comments compute server condition construct conditional construct constants control structures copy construct current method current site database servers definition phrases definitions distributed computation distributed state embedded locations enablers engines exporting importing errors exception construct exceptions executables exit construct extending obliq fields alias fields field names method fields private fields value fields file system enablers files fmt library construct foreach construct fork construct form library host object identifiers constant free qualified scoping syntax unqualified variable identity inheritance multiple int library integers constants operators interpreters invocation construct isnot construct iteration constructs join construct keywords lex library lexicon libraries load construct local site locations lock construct loop construct math library methods method fields overriding mixins modula interfaces libraries packages modules 

page closed modules module import loading open modules mutex construct mutexes name servers net library program network network objects daemon objects objects exporting importing migration mutexes new operations protected remote serialized surrogates views obliq program search path ok constant operations external self inflicted operators built precedence option construct construct overriding pause construct phrases pickle library procedures process library processor enablers program files protection prototypes partial quit raise construct rd library readers real library reals constants operators redirection remote site scoping selection self semicolons sequencing construct serialization sibling fields signal construct sites state surrogates syntactic structures syntax syntax overview sys library sys call construct term phrases term sequences terms text library texts constants operators thread library threads top level interaction transmission try construct try construct types strong typing type comments updating user interfaces values basic values value fields wait construct watch construct wr library writers page vv pm 
