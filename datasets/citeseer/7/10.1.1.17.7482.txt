prevent type flaw attacks security protocols james heather gavin steve schneider department computer science royal holloway university london egham hill egham surrey tw ex uk steve dos 
rhbnc 
ac uk department mathematics computer science university leicester university road leicester le rh uk gavin 
lowe mcs 
le 
ac uk type flaw attack security protocol attack afield originally intended type subsequently interpreted having type 
number type attacks appeared academic literature 
prove type flaw attacks prevented simple technique tagging field information indicating intended type 
type flaw attack security protocol attack field originally intended type subsequently interpreted having type 
example consider message version adapted needham schroeder public key protocol 
msg 
pk msg 
na pk msg 
msg 
pk ke msg 
na nb pk msg 
nb 
adopt standard notation protocols agents identifies identity trusted server na nb nonces functions pk sk return agent public key secret key respectively denotes encrypted key consider variables free variables instantiated different values different runs 
meadows describes type flaw attack unmodified needham schroeder public key protocol :10.1.1.51.4552
adapted version protocol vulnerable essentially attack msg 
ia pk 
msg 
pk msg 
nb msg 
vb nb msg 
nb msg 
nb pk 
attack uses runs messages labelled fi notation ia denotes penetrator faking message apparently intercepting message intended penetrator seeks impersonate run issues nonce challenge message penetrator replays message message fl interprets field nb agent identity believes message came 
tries request public key sending identity server allows learn respond nonce challenge 
consider system fields tagged extra information indicating intended type 
think tag bits attached field different bit patterns allocated different types 
example write nonce represent value tagged way indicate intended nonce 
similarly tag compound messages example write pair nonce nonce represent pair values tagged nonces assume tag pair contains information allow honest agent decompose message correctly example tag contain representation number bits component 
assume tag encryption contains type encrypting key type body tion example write nonce pubkey represent tag indicating encryption pair nonces public key 
assume honest agents tag messages create true type example introduce nonce tag nonce 
assume honest agent receives message check accessible tags tags inside encryption agent expected 
hand assume penetrator follows tagging rules allow penetrator place arbitrary tags accessible messages messages protected encryption assume honest agents detect dishonest tagging 
suppose tagging scheme attack described 
text message nonce nonce agent pubkey nonce nonce agent 
penetrator replace outermost tag type flaw attack exploits 
msg 
msg 
msg 
msg 
penetrator replays nonce message accepts form encrypts message 
precisely form message penetrator requires fake message 
adopt tagging scheme nonce message nonce 
replay nonce form message nonce tag expecting agent agent nonce shared key 
message dropping pair tag pairing parentheses ease notation agent agent agent agent nonce shared key shared key agent agent agent agent shared key message replayed instance message expecting message third field inside encryption tagged nonce 
penetrator change outer tag create nonce tag inside encryption tampered 
accept message instance message messages second field inside encryption tagged agent identity 
tagging scheme prevent attack 
example consider woo lam protocol rl 
msg 
nb msg 
msg 
nb ea msg 
nb 
shared denotes key shared note decrypt message receives message simply includes inside message 
agent agent shared key agent agent agent agent shared key penetrator change inner tag access appropriate key 
tagging scheme prevents attack 
observe type flaw attack prevented simply having participants examine tags need able tell true types fields 
prove fact tagging scheme prevent type flaw attacks 
utility result designers implementers protocols obvious 
result useful protocol analysers 
protocol analysis techniques adopt strong typing abstraction messages considered analysis assumed typed 
corresponds assumption agents magically tell true types messages 
result presents way justifying apparently unrealistic abstraction 
precisely show protocol secure strong typing abstraction secure tagging scheme 
words tagging scheme implements strong typing abstraction 
fact approach show attack protocol tagging scheme attack tagging scheme fields correctly tagged 
concept correctly tagged precise section essentially means fields tagged tag represents true type 
section describe model protocols tagged messages 
model strand space model 
strand space framework provides particularly suitable notation kind reasoning required proof 
results general applied approaches analysis security protocols context dolev yao model 
section prove claim tagging scheme prevents type flaw attacks 
sum discuss possible implementations tagging scheme section 
modelling protocols section model prove main result model strand space model 
describe model tagged facts define means tagged fact correctly tagged 
give brief overview strand space model showing model honest participants penetrator capabilities 
explain breaches security security properties expressed strand space model 
tags facts assume set atom atomic values partitioned types agent nonce publickey partitioning types way assume atomic value unique true type values introduced honest agent type honest agent intended value penetrator allowed tag values different type 
term fact messages parts messages preferring reserve word message complete messages protocol question 
tags assume tag corresponding base type adopt obvious names tags 
assume tag constructors pairing encryption 
types tags defined tag agent nonce pubkey 
pair enc tag tag 
assume tag encryption includes indication encryption algorithm des rsa public key encryption claimed produce message 
include algorithm tag want able model case key wrong algorithm 
precisely associate algorithms types keys associating rsa public key encryption type rsa public keys include tag key type encryption tag 
include type body sequence tags encryption tag 
enc tl tn kt ate tag claims accompanying fact encrypted key type kt appropriate algorithm body sequence facts tags tl abbreviate tag tl tagged facts similarly define type tagged facts 
represent tagged facts tag fact pairs tag gives claimed type fact facts built atoms constructors pairing encryption 
tag fact fact atom ir encrypt tag fact 
pair tfl tf represents fact formed concatenating tagged facts tfl tf 
example correctly tagged pair nonces written pair pair nonce nonce 
write tfl tf abbreviation pair pair tfl tf 
drop su parentheses nested pairing writing ex ample tfl tf tf drop parentheses com pletely pair forms body encryption 
encrypt kt tf represents tagged fact tf encrypted key algorithm corresponding kt ab tf tend drop kt matches type adopt version perfect encryption assumption honest agent tell correctly decrypted message decrypting key algorithm decrypt message correspond encrypting key algorithm create message 
implemented including sufficient redundancy encryption 
note type body encryption included inside outside encryption example agent agent shared key agent agent nonce shorthand enc agent agent nonce shared key encrypt shared key pair pair pair pair agent agent nonce shared 
want talk tag fact components tagged fact define projection functions follows want talk sub tagged facts tagged fact 
relation defined smallest relation tf tfl tf tf tfl tf tf tf tft tf want talk sub untagged facts tagged fact 
write tf tf tag correct tagging define means tagged fact correctly tagged 
define inductively structure tags follows tagged agent agent tagged nonce nonce tagged pair tfl tf pair tfl tf tagged tfl tagged tf tagged tsl tf fact tf tagged tf tagged kt ts get tags tf get tags returns sequence tags labelling body encryption get tags pair tfl tf get tags get tags tf get tags pair 
note encryption tag key match encryption algorithm type key 
useful characterize message correctly tagged outermost level top level tagged agent agent top level tagged nonce nonce top level tagged pair tfl tf pair tfl tf top level tagged tsl tf fact tf ts get tags tf 
note encryption key tag match algorithm encryption necessarily key 
strand spaces mentioned earlier strand space model 
give brief overview strand space model adapt deal tagged facts 
strand represents sequence communications honest agent penetrator 
formally se quence form tfl tf tfn tf rep resents transmission tagged fact tf tf represents reception tf 
node particular communication tf graph structure defined strands means types edge nodes ni ni consecutive nodes strand write ni represents chronological sequence communications strand 
node ni tf nj tf write ni nj 
captures communications strand 
bundle represents particular history network 
formally finite set edges arc set nodes appearing edge bundle 
arc negative sign exists unique nl nl 
nl nl 
acyclic 
want able talk fact tagged fact transmitted 
set tagged facts node entry point term tf tf node previous strand term tagged fact tf said originate node entry point set tf tf tf 
similarly untagged fact said originate node entry point set tf tf 
untagged fact uniquely originating bundle originates unique node honest strands assume role protocol defined strand template sequence templates sent received tagged facts defining operation agent role 
templates tagged facts set vat variables set fn function identi contain functions pk public key function 
tagged fact templates defined follows tag template template var fn var encrypt tag template 
template vl represents func tion applied variables vl denote vl 
vn 
example role played woo lam protocol defined sequence templates adopting conventions earlier temp agent nonce rib agent shared key agent agent agent agent nonce shared key shared key agent agent agent agent shared key agent agent shared key agent agent nonce nb 
note strand uses free variables nb function shared 
note encrypted component third message decrypt represented variable modelling accept value component 
strands representing execution particular role formed instantiating free variables corresponding template substituting free variables consistently facts 
example case template typical execution interference penetrator formed substitution function sub sub sub sub sub rib sub agent agent nonce aed execution attack described section formed substitution function sub sub sub sub rib sub 
argued possible produce penetrator strands complete attack 
implicit definition strand template assumption honest agent sees free variable message receives accept value variable 
formally substitution function sub var fact 
function lifted complete tagged templates follows sub sub var ub vl vn sub vl sub vn fn function application defined sub pair pair suo tfl suo tf lifted strand templates applying sub message turn 
assume strand template consistently tagged sense tags variables 
formally define type environment function vat tag fn tag tag idea recall subscript extracts fact component tagged fact 
vat gives tag receive equivalently type fn pair form tl tn honest agent tag fact encryption created encryption case encryption tag include identity algorithm tags body key encryption expected type honest agent received ill tagged key penetrator 
tl tn give types arguments gives type result 
define tagged template tagged respect follows discussion suggested bundle consideration contains honest strands single protocol 
fact necessary results apply equally consider bundles containing honest strands different protocols considered 
vat vl vn fn pair ttl tt go pair ttl tt tt get tags tt tt kt get tags defined analogously earlier 
assumption strand templates consistently tagged captured follows assumption 
strand template temp type environment tagged fact templates temp tagged respect penetrator strands assume set messages penetrator produce 
set atomic values contrast assume larger set including compound facts say set 
assume set kp keys penetrator available 
penetrator strands tagging scheme exactly analogous standard strands model addition type strand representing manipulation top level tags 
penetrator strand text message tagged 
flushing tf 
corollary assumption variable strand template receives unique tag 
assume functions fn partial defined applied arguments correct types 
example function pk intended return agent public key pk defined nonce assume arguments vl 
vn function tags tl 
tn xl xn defined tl xl 
tn xn tagged 
assume honest agents correctly follow tagging scheme 
encapsulated assumption tee tf tf tf 
concatenation tf tf pair tf tf 
separation pair tf tf tf tk tagged tk kp 
encryption tk tf ts tk tf ts get tags tf 
decryption tk tf tk tk tags representing inverse key types decrypting key corresponding considered keys types tk tk respectively 
assumption 
tagged fact originates regular strand top level tagged 
assumption number facets agent introduces atomic term variable introduces value expected type 
honest agent tag fact pair created pair 

note strand applies top level tag strands interfere tags messages 
necessarily prevent inner components example component pair separation component concatenation 
note penetrator produces fact initially correctly tagged top level lemma 
fact originates penetrator strand tag top level tagged 
proof strands origin fact case fact produced tagged top level 
course prevent penetrator changing tag fact produced lemma shows place occur strand 
lemma 
top level ill tagged fact originates strand 
proof assumption tells top level ill tagged facts originate honest strands 
argument similar previous lemma rules penetrator strands strands 
security properties attacks section consider typical security properties secrecy authentication produce generic definitions 
definitions obtained generalizing thayer consider properties specific protocols 
definitions thayer talk properties hold protocol assumption penetrator access certain sets keys 
example properties expect hold depend agent running protocol penetrator secret key compromised 
definition generalize set keys representing keys penetrator may may set func tion templates example sk sk representing secret keys agents substitution function sub particular strand key keys take value sub recall assume penetrator access set keys kp say penetrator knows keys follows vk keys sub 
secrecy give generic definition secrecy 
definition say breach security strand minimal length certain keys compromised value particular variable intended remain secret known penetrator 
definition 
temp template role tagged variable temp positive keys set function templates 
define failure secrecy holds 
strand sub temp height messages appear bundle 

vk keys sub 

node label sub 
definition parameterized temp keys protocol interested knowing property holds particular values parameters 
authentication consider property authentication 
consider means particular role role rl 
authentication hold expect strand sl rl corresponding strand strands agree identities agents involved possibly values variables session key established capture aspect specifying strands agree values variables set 
definition 
temp templates roles set variables templates hl positive integers keys set function templates 
define failure authentication holds 
strand sl subl height hl 

vk keys subl 

strand sub temp height vx subl sub 
definition parameterized temp hi keys 
tagging prevents type flaw attacks section prove main result attack protocol tagging scheme attack tagging scheme fields correctly tagged 
precisely show attack protocol tagging scheme assuming variables names different templates strictly necessary simplifies notation 
construct renaming function tagged facts uniformly renaming tagged facts function produces attack fields correctly tagged 
informally honest agent willing accept ill tagged fact agent behaviour essentially independent willing accept value place particular willing accept tagged fact tag place 
proceed follows 
section define properties satisfy show constructed 

section show honest strand renaming facts honest strand 

section similarly show penetrator strand penetrator strands having set nodes possibly slightly different strand structure 

section show bundle corresponding bundle terms tagged bundle contain set terms nodes possibly slightly different strand structure show fact uniquely originating uniquely originating 
section show attack similarly attack 
defining renaming function definition captures required properties definition 
bundle define renaming function 
preserves top level tags 
returns tagged terms tagged tf 

identity function tagged terms tagged tf tf tf 
distributes concatenations top tagged pair tfl tf pair tfl tf 

distributes encryptions top tagged tsl tk tf ts tf ts get tags tf 

respects inverses keys inverses considered keys types tk tk tk tk inverses considered keys types tk tk 
appears top level ill tagged 
recall set messages penetrator produce 

applied top level ill tagged fact tf produces fact essentially new fact common tf fact tf facts top level tagged tf tf facts tf tf tf facts facts nodes note condition implies injective facts show possible find lemma 
bundle renaming function proof method gives recipe constructing build definition bottom defining fact fact 
consider tagged fact suppose defined case analysis construct 
top level tagged pick new value condition atoms previously condition define 
proviso concerns keys define pairs inverse keys simultaneously 
kl inverses considered keys types tk pick kl tagged kl tk kl tk verses atoms kl previously 
define kl kl tk tk 

tagged define condition 

pair tfl tf define pair tfl tf condition 

tsl tk tf ts get tags tf define ts tf condition 
assumption need big need assume penetrator access sufficient supplies values produce new value step 
practice reasonable assume able produce new atomic facts create new compound facts 
regular strands section show regular strand 
definition instantiation strand template temp substitution function sub 
consider strand formed instantiating temp substitution function sub defined sub sub unique tag temp 
note regular strand definition 
lemma shows translation corresponds renaming 
lemma 
temp sub sub sub temp sub temp 
proof tt tagged template temp 
show sub tt sub tt 
assumption allows proceed induction structure tt follows case tt variable say tt sub tt sub definition sub sub tt case tt function application say tt vl vn 
sub tt defined tl sub 
tn sub vn correctly tag tl tn tags vl vn tt 
ti sub vi ti sub vi sub tt sub vl sub vn tt tagged tl sub vl 
tn sub vn definition sub sub vl 
sub vn sub tt 
case tt pair say tt pair tfl tf sub tt pair sub fl sub condition definition pair sub tfl sub inductive hypothesis pair sub tfl sub tf sub pair tfl tf 
case tt encryption say tt 
condition definition inductive hypothesis penetrator strands show penetrator strands renaming function construct correspond ing strands bundle formed replacing tagged fact tf tf 
consider possible cases giving strand corresponding strand 
case strand change strand structure keep set tagged facts 
text message 
define strand flushing tf 
define tf strand 
tee tf tf tf 
define tl tl strand 
concatenation tfl tf pair tfl tf 
define tfl tf pair tfl tf valid concatenation strand pair tfl tf pair tfl condition definition 
separation lets pair tfl tf tfl tf 
define pair tfl tf tfl valid separation strand condition definition 
lets tk tagged tk andk kp 
define tk tk strand 
encryption tk tf tsl tk tf ts get tags tf 
define valid encryption strand condition definition 
decryption tk lets tk tsl tf inverses 
define tk tk valid decryption strand condition definition tk tk inverses condition definition 
tl 
pro stages 
construct pair strands tl strand type 
top level tagged strand type condition definition done see depiction strands 
top level tagged correct tag 
negative tl tl 
replacing strands part positive nodes respectively 
see 
show earlier strand possibly initial node labelled 
tl done 
tl top level ill tagged tl originated strand lemma 
proceed similarly strand nl nl nodes term node done originated strand 
con way form sequence earlier earlier strands bundle finite process eventually reaching strand node call nk label 
predecessor nk 
nk tk nk nl tl nl tl 
replacing strands part construct new strands 
nodes nk removed negative nodes strands replaced strand positive nodes strands tk nk nl tl nl tl 
replacing strands part replaced strand nodes ill tagged corresponding facts elements successor cor responding node successor 
bundles unique origination described nodes bundle replaced nodes bundle 
graph structure edge form replaced edge exception concerns strands dealt 
consider question unique 
produce bundle honest strands term non uniquely originating new bundle non uniquely originating note fact fo originates honest node fo originates corresponding honest node circumstances fo originate penetrator strand 
fo originates strand corresponding occurrence fo corresponding strand 
fo originates strand corresponding occurrence fo corresponding strand 
fo originates strand corresponding occurrence top level ill tagged term strand fo 
possibilities raise problems term originates multiple times ways fo originates multiple times third possibility introduces origin produce new bundle replacing strands appro 
note origin fo corresponds case origins fo correspond case condition definition 
suppose multiple origins fo say number 
form replacing strands single strand strands illustrated case 






achieving unique origination results previous subsections summarized theorem theorem 
bundle tagging scheme renaming function bundle contains tagged facts considered set renamed contains honest strands modulo renaming facts uniquely originating un originating tagged facts tagged 
attacks show attacks protocol preserved transformation 
show attack corresponding attack essentially attack facts 
secrecy definition secrecy follows 
strand suppose failure sub temp height 
strand sub temp height vx subl sub 
suppose way constructed honest strands correspond strand sub temp height 
vk keys sub kp 

node label sub 
show corresponding attack 
substitution sub defined section vat sub sub unique tag temp 
sub sub unique tag temp 
subl subl sub sub 
strand sub temp sub temp height corresponding way constructed honest strands 
tag temp 
injectivity subl sub contradicting part assumption 

vk keys sub kp sub sub 
node corresponding label sub sub 
authentication definition suppose failure au follows 
strand sl subl height hl 

vk keys subl 
strand sub temp height vx subl sub 
show corresponding attack 
substitution subv defined section subl subl unique tag 

strand sl subl subl height hl corresponding sl way constructed honest strands 

vk keys subv subv subl example adapted needham schroeder public key protocol show results apply adapted needham schroeder public key protocol considered section 
roles protocol defined strand templates init nonce agent kev nonce na agent nonce nonce agent publi key nonce na nonce nb agent fl public key nonce nb pk resp nonce agent bli ke nonce na agent nonce nonce agent publi key nonce na nonce nb agent pb lc kev nonce rib 
analysis protocol establishes number properties protocol strong typing abstraction additional assumptions responder introduces value nb received na nonces uniquely originating 
example proposition establishes responder guarantee bundle responder strand sl subl resp subl sk corresponding initiator strand sub init subl sub agree na nb 
means failure authentication definition resp temp init na nb hi keys sk notation definition 
immediately main result deduce tagging scheme ensures failure authentication strong typing abstraction dropped 
shown type flaw attacks may cheaply prevented tagging field intended type having honest participants check tags incoming messages 
results generate extra implementing protocols save adding extra bits information message protocol generate extra protocol analysis protocols proved correct strong typing abstraction automatically secure scheme 
considered properties secrecy authentication expect results apply security properties anonymity non repudiation expressed terms correspondences agent strands 
key idea proof result show bundle corresponding runs protocol transformed bundle messages correctly tagged equivalent strands protocol agents equivalent information available bundle corresponding attack transformation corresponds essentially similar tagged attack demonstrating attack type flaw 
transformation possible requirement protocol agents check tags access 
ill tagged messages effect agent behaviour essential way replaced messages correct tags 
achieved renaming function implementing tagging scheme possible approach implementation follow structure tag type 
construct distinct bit patterns atomic type bit patterns indicate pair encryption 
compound types represented concatenations basic bit patterns 
somewhat inefficient especially complex types 
better approach identify different types execution protocol assign unique tag number tag number containing number bits ensure unique readability 
recall message version adapted needham schroeder public key protocol 
msg 
pk msg 
na msg 
msg 
pk msg 
na nb msg 
nb 
uses distinct types give different tag number represented bits nonce agent secret agent public nonce public pair public 
type identifiers appear initial part message inside pair types encryption types 
approach implementation 

pk 


nb 
discussed earlier need add information pair tag giving lengths components need add redundancy body encryptions implement perfect encryption assumption 
important realize results depend validity exact type structure examples 
central theorem guarantees tagging scheme prevent attacks rely type confusion types distinct tags 
different tagging schemes distinguish different types resulting different guarantees type flaw attacks prevented 
instance tagging scheme tag atom pair enc tag tag prevent attacks involving passing atoms encryptions pairs attacks nonce place agent identity 
furthermore penetrator manipulate top level tags tags protected encryption tags provide useful guarantees safely omitted 
practice protocol implementations need tag messages encryptions resulting tagging overhead 
believe tagging scheme simplified combining tags inside encrypted component single component number believe reasonably straightforward prove formally 
fact component numbers way provides protection simply tagging fields types prevent penetrator replaying component place type example replaying encrypted component message woo lam protocol message 
advantages allowing component replayed place understood see example principle 
note including message number encrypted component different components message require different component numbers 
example consider protocol aims authenticate establish na secret shared msg 
na msg 
na 
protocol correct strong typing assumption tagging scheme proposed 
encrypted message simply tagged message number appears attack exposes msg 
ns msg fla ns msg 
ns 
attack exploits fact parts message identical tags different types 
prevented replacing message numbers ent numbers 
anticipate protocol analysers model checkers techniques detect type flaw attacks 
situations simple matter decide tagging scheme tagging scheme implementation protocol match typing scheme model 
way model checker tests attacks rely type flaws tagging scheme guarantees result extended cover type confusion attacks considered model checking 
joshua guttman anonymous referees useful comments 
abadi needham 
prudent engineering practice cryptographic protocols 
eee transactions software engineering 
proceedings eee symposium security privacy digital equipment systems research center research report 
lowe 
breaking fixing needham schroeder public key protocol fdr 
proceedings tacas volume lecture notes computer science pages 
springer verlag 
software concepts tools 
clarke jha 
model checker authentication protocols 
proceedings macs workshop design formal verification security protocols 
available url dimacs 
rutgers 
edu workshops security program program html 
meadows :10.1.1.51.4552
analyzing needham schroeder publickey protocol comparison approaches 
bertino edit ors cs lncs pages 
needham schroeder 
encryption authentication large networks computers 
communications 
paulson 
inductive approach verifying protocols 
journal computer security 
schneider 
verifying authentication protocols csp 
eee transactions software september 
thayer herzog guttman 
mixed strand spaces 
th eee computer security foundations workshop 
thayer herzog guttman 
strand spaces proving security protocols correct 
journal computer security 
woo lain 
lesson authentication protocol design 
operating systems review 
