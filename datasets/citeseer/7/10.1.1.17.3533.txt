succinct representations lcp information improvements compressed suffix arrays introduce succinct data structures solve various string problems 
storing information lcp longest common prefix suffixes suffix array improvement compressed suffix array supports linear time counting queries pattern 
occupies bits text length computing lcp adjacent suffixes lexicographic order constant time bits suffixes 
data structure literature attained linear size 
size proportional text size applicable texts alphabet log space economical data structures useful processing huge amounts text data 
backgrounds size textual data grows importance indexing data structure pattern matching increases 
data structures proposed purpose example inverted files trees arrays 
trees arrays powerful indices substring quickly 
call data structures full text indices 
full text indices simple keyword search complicated queries 
find pattern arbitrary length indices 
means find occurrences keywords appear neighborhood text 
consider text data mining 
keyword search don know keywords want advance 
want find association rules keywords 
cases full text indices useful plenty amount information 
trees popular data structures pattern matching complicated queries 
pattern time proportional pattern length text constructing tree text advance 
problem tree graduate school information sciences university 


ac 
jp size 
size tree words text length large practical space reduction trees space economical alternatives arrays proposed literature 
size larger text size 
text occupies bytes size array bytes pointer occupies log bits 
difference sizes text index larger length text grows 
reduction size full text indices achieved compression array 
proved arrays compressed size linear text size cost increasing access time constant time log occ pattern ipi time fm index log time compressed suffix arrays :10.1.1.156.968
unfortunately linear bound size fm index obtained texts constant size alphabets furthermore size fm index smaller text size iei suffix tree huge size useful complicated queries 
want store part information tree 
important information length lcp longest common prefix 
especially store lengths lcp adjacent stored suffix array 
lcp information represents depths nodes tree 
simulate bottom traversal tree text data mining 
lengths lcp vary log bits necessary store value 
values usually small heuristics probabilistic analysis reduce space 
clark munro log bits field store edge lengths tree size linear 
method answer depth node quickly 
new results proposes succinct data structures full text retrieval 
propose simple compact encoding lop information lengths longest common prefixes adjacent suffixes suffix array list lexicographically sorted 
occupies bits text length value extracted constant time unit cost ram model auxiliary data structure size bits 
key idea com pact encoding lcp information information suffix array 
type suffix arrays suffix array compressed suffix array fm index 
com pressed suffix array fm index attains linear space bound takes log time extract element 
extend data structure com pute length lcp suffixes 
takes constant time log time depending data structure suffix array data structure bits 
propose additional index compressed suffix array improving time complexity pattern matching 
fm index find lexicographic order pattern suffix array time constant 
propose data structure find pattern time log may larger fm index small alphabets data structure linear size text size log bits large alphabets 
hand fm index may larger text size log size compressed array information linear text size smaller text size small 
text suffix array compressed nh bits order entropy text 
indices fast queries size nh bits lcp information size bits bits 
suffix tree bits data structure smaller original text small 
data structure occupies nh nh bits supports query pattern length log time traversal nodes suffix tree log size smaller nlog bits text size 
compared fm index size data structure larger small alphabets fm index size bits hk order entropy text holds 
data structure achieve compression text time search alphabets log proposed data structures construct suffix tree large collection texts solve problems facing 
preliminaries section review suffix arrays suffix trees succinct representations 
text length alphabet assume unique terminator smaller symbol 
th suffix defined 
expressed tj 
substring called prefix tj 
suffix array sa array integers represent tj 
integers sorted lexicographic order corresponding 
suffix trees suffix tree text compressed trie built leaves leaf corresponds suffix tsa 
details see gusfield 
shows suffix tree text 
leaf nodes shown boxes numbers boxes represent elements suffix array 
internal nodes shown circles 
hgt suffix tree balanced parentheses representation 
topology suffix tree encoded bits :10.1.1.37.6762
tree encoded nested open close parentheses follows 
preorder traversal tree write open parenthesis node visited traverse subtrees node alphabetic order edges node write close parenthesis 
navigational operations tree defined se function returns number occurrences pattern position string example function returns position th occurrence pattern functions take constant time auxiliary data structures size bits 
denote parentheses sequence denote position represents leaf suffix tree corresponding suffix ts leaf store string depths suit lx tree addition topology 
string depth internal node defined summation lengths labels path root node node 
string depth node usually logn stored bit integer 
worst case 
need logn bits store value fixed width integers 
heuristics reduce space store string depths 
clark munro bits fields store string depths edge lengths 
total size nodes log log log bits linear furthermore takes time proportional depth compute string depth node summation edge lengths root node 
leaf indices leaves suffix tree numbered preorder traversal tree indices text stored leaves coincide suffix array text 
array indices occupies log bits 
pattern length time binary search suffix array text logn time lop information suffixes 
compressed array grossi vitter reduces size array binary alphabets nlogn bits bits 
access time entry changes constant time log time constant 
showed size compressed suffix array nh bits arbitrary alphabets order entropy text 
compressed suffix array stores function sa 
function compressed suffix array defined follows definition 
sa sa sa sa sa words sa sa sa value computed constant time 
fm index reduces size suffix array bits 
precisely size expressed nll logo log log log fm index smaller compressed array iei lf sa sa sa 
fm index self indexing data structure find pattern text 
means find pattern compressed text size fm index smaller text size log 
number occurrences pattern length ra time 
faster suffix array lcp information 
computing position occurrence text takes additional log time 
showed compressed array modified form self indexing data structure 
size expressed order entropy text 
smaller original text 
character text extracted constant time lexicographic order suffix tj 
algorithm follows 
bit vector sa sa 
lexicographically sorted characters sorted alphabetically 
number represents number distinct characters text smaller sa 
computed constant time rank function 
number easily converted character codes 
bit vector occupies bits log bits 
showed inverse array suffix array expressed additional bits data structure original compressed array log access time 
inverse array important traverse suffix tree quickly original text 
algorithms lexicographic orders suffixes represent 
obtain th character edge suffix tree necessary compute 
hand inverse function takes time 
simulating suffix tree traversal suffix array height array showed bottom traversal suffix tree simulated array array storing set lengths longest common prefixes suffixes called hgt array 
hgt array stores lengths longest common prefixes adjacent suffixes array bottom traversal suffix tree 
problems solved bottom traversal tree 
bits field store element hat array 
size store values large 
values may stored 
encoding solves problem 
computing lowest common ancestors tree lowest common ancestor lea nodes tree furthest node root node exists paths root bender farach colton proposed simple data structure compute lea nodes tree nodes constant time 
data structure occupies words nlogn bits 
reduce problem compute lea range minimum query problem problem 
indices array query returns index smallest element subarray 
example array shown fig 

know positions elements correspond nodes tree element position represents lea node original algorithm tables convert node position addition tables occupy nlog bits 
new data structures lcp information section propose new data structure hat array 
show array encode string depths suffix tree 
data structures hat array length longest common prefix strings expressed lcp 
array hgt defined follows 
definition 
hgt lcp tsa tsa define hat values hat array text usually small may reach 
necessary array integers log bits width fixed width integers 
efficiently store values properties hat array 
theorem 
sa value hat computed constant time data structure size bits 
achieve space efficient data structure storing sorted integers select function compressed array 
lemma 
integers sorted order containing bits log log log bits retrieving th integer takes constant time 
encode hat array data structure directly numbers sorted 
convert sorted ones 
lemma 
hgt hat proof 
sa sa hgt lcp tp tq 
hgt inequality holds hgt consider tp tq 
definition sa sa 
suffix tq lexicographically larger suffix tp definition lexicographic order 

integer exists 
suffix tsa prefix length matches prefixes tp tq definition lexicographic order 
completes proof 
note lemma identical 
lemma relation hgt equality comes fact sa hgt value suffix unique terminator 
sorted numbers hgt range stored bits accessed constant time 
remaining task obtain hat compute easy 
definition san sa sa 
shows example creating sorted numbers 
row shows sa hat summation second third rows 
sort numbers order sa values obtain sorted sequence hat hat hgt 
lemma 
positions represent leaves tsa tsa respectively 
index hat attains minimum value hgt hgt gt computed create sorted sequence hat 
rank 
encoded sequence length bits 
blanks sequence explanation 
uniquely decode numbers sequence 
algorithm calculate hat fol lows 
extract th entry sorted numbers sa 
subtract problem encodings hat array value hat stored bit vector order sa 
access random retrieve suffix array lexicographically 
problem sa necessary compute hat 
compressed suffix array retrieving sa takes log time 
computing lcp arbitrary suffixes propose data structure compute length lcp arbitrary 
consists components store lcp values proposed store lea lowest common ancestor leaves suffix tree 
occupies bits bits 
lexicographically sorted suffix array computing lcp minimum hat hat hgt 
hat minimum value 
minimum values choose arbitrary 
exist unique node suffix tree string depth hat paths root leaf leaf 
node equal lca leaves suffix tree correspond suffixes 
lca leaf leaf lca leaf leaf 
compute lca node secondly compute index compute hat algorithm 
compute lcp tsa tsa compute node lca leaf leaf compute index hat minimum value proof 
returns position close parenthesis parentheses sequence corresponding node lea leaf leaf 
node equal lea leaf leaf 
represents depth traversal tree cially lexicographic order leaves leaves leaf appear left leaves appear right equal number leaves encoded left 
compute lea constant time algo rithm bender farach colton 
algorithm uses words nlogn bits memory propose new data structure algorithm 
original algorithm compute lea nodes node tree original algorithm stores node depths nodes array size words order depth traversal tree 
node depth node number nodes path root node usually different string depth 
example shown 
lca nodes represented minimum value subarray boundaries subarray correspond nodes 
compute index minimum value constant time log elements multiple nj minimum values log stored dimensional array 
index minimum value multiples nj computed constant time min multiple log table lookups find minimum element subarray length log data structure occupies words log elements log words stored 
algorithm store mul tiple array occupies gn 
gn bits 
compute minimum element subarray length log store dimensional table multiple log log 
table occupies lo 
log log bits 
table subarrays length log values tree stored bits follows 
difference adjacent elements encode differences sequence open close parentheses see 
compute elements constant time explicitly store log elements log elements store difference nearest elements stored explicitly 
parentheses sequence exactly encoding tree 
data structure position minimum value computed constant time 
data structure computing lcp suffixes ts necessary convert indices lemma 
position parentheses correspond leaf computed select 
proof 
occurrence corresponds leaf tree leaves appear lexicographic order suit lemma holds 
algorithm compute lcp 
compute select select 

compute rank 

compute hgt 
compute hgt takes constant time suffix array log time compressed suffix array 
wc theorem theorem 
length longest common prefix suffixes tsa tsa computed constant time data structure size bits suffix array log time data structure size bits compressed suffix array 
improved representation compressed suffix arrays fm index find pattern text length time compressed array takes ipi logn time 
unfortunately achieves ipi time query constant 
section show pattern matching compressed suffix array done ipi time loan additional data structures size bits 
search pattern fm index finds suffixes right left 
interval ri suffix array corresponding interval li ri corresponding computed constant time 
call search algorithm backward search 
compressed suffix array backward search 
lc rc interval array corresponding character store intervals characters alphabet 
lemma 
interval li ri calculated li ri li argmin li ri argmax 
proof 
suffixes lexicographically sorted suffix array interval lp corresponds character 
correspond lp character lexicographic orders defined removed characters 
li ts prefix lp means sa suffix ts prefix 
compute li ri takes log time perform binary search improved constant time data structure rank predecessor queries 
theorem 
static rank dictionary worst case constant query time supporting rank predecessor queries stored log log bits flog ill precisely constant ds log log data structure occupies bits 
calculate number elements interval smaller li data structure 
function piecewise monotone 
suffix array stores positions suffixes character monotone increasing 
divide function monotone functions qc corresponds suffixes stored data structure 
note compressed array hierarchical data structure data structure lowest level 
theorem theorem 
compressed suffix array text length alphabet logn supporting time existing counting queries pattern stored nh bits 
proof 
size data structure storing function corresponding character follows 
nc number occurrences charac ter text 
case log 
size data structure log log log og summation sizes data structure characters nh nh ok logn order entropy text defined probability occurrence character text 
note computing predecessor logn 
condition hold add dummy elements assume log il certain constant predecessor query takes constant time size data structure increased log log log nj log il nlog nc concluding remarks proposed succinct representations lcp longest common prefixes information 
sux array compressed sux arrays space economical alternatives sux trees 
proposed new encoding compressed sux array achieves time counting query pattern text length alphabet log acknowledgment author prof university jesper jansson lund university valuable comments 
author anonymous referees helpful comments 
author supported part aid ministry education science sports culture japan 
bender farach colton 
lca problem revisited 
proceedings latin lncs pages 
benoit demaine munro raman 
representing trees higher degree 
proceedings th international workshop algorithms data structures wads lncs pages 

clark munro 
efficient suffix trees secondary storage 
proceedings th annual cm siam symposium discrete algorithms pages 
elias 
efficient storage retrieval content address static files 
journal acm 
ferragina manzini 
opportunistic data structures applications 
lst ieee syrup 
foundations computer science pages 
grossi vitter 
compressed suffix arrays suffix trees applications text indexing string matching 
nd cm symposium theory computing pages 
gusfield 
algorithms strings trees se quences 
cambridge university press 
jacobson 
space efficient static trees graphs 
th ieee syrup 
foundations computer science pages 
lee arikawa park 
linear time longest common prefix computation suffix arrays applications 
proc 
th annual symposium combinatorial pattern matching cpm lncs pages 
kurtz 
reducing space requirement suffix trees 
software practice 
myers 
suffix arrays new method line string searches 
siam journal computing october 
munro 
tables 
proceedings th conference foundations software technology computer science lncs pages 
munro raman 
succinct representation balanced parentheses static trees planar graphs 
th ieee syrup 
foundations computer science pages 
fl pagh 
low redundancy static dictionaries worst case lookup time 
proceedings icalp lncs pages 

compressed text databases effi cient query algorithms compressed suffix array 
proceedings isaac number lncs pages 
arikawa 
efficient discovery optimal word association patterns large text databases 
new generation computing 
