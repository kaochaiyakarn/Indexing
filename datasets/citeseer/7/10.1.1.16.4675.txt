quality driven software architecture composition hans de bruin hans van vliet vrije universiteit amsterdam mathematics computer science department de boelelaan hv amsterdam netherlands mail hans cs vu nl shorter version appear conference proceedings 
discusses approach top composition software architectures 
ar chitecture derived addresses functional requirements 
architecture contains number variability points filled address quality concerns 
quality requirements associated architectural solution fragments captured called feature solution fs graph 
solution fragments captured graph iteratively compose architecture driven quality requirements 
versatile composition technique allows pre post refinements re involve multiple variability points functionality extensions 
addition usage fs graph supports aspect oriented programming aop architecture level 
architecture software system captures early design decisions 
early design decisions reflect major quality concerns including functionality 
order reinvent wheel time capture chunks architectural knowledge explicitly chunks deriving architecture fulfills set quality concerns 
solution capturing knowledge feature solution fs graph connects quality requirements solution fragments architectural level de bruin van vliet 
concerned systematically composing architecture solution fragments captured fs graph 
process envisage deriving architecture iterative quality driven approach soft ware architecting see instance bosch 
step process derivation software architecture meets functional requirements set 
called architec ture 
attention focuses non functional requirements iteratively applying known design solutions architectural design patterns refine software architecture 
typically requires iterations 
iterations involve backtracking steps usually deal conflicting requirements 
heart iterative quality driven process composing software architectures feature solution fs graph 
fs graph requirements connected design solutions 
basis requirements specified feature space fs graph solutions meet requirements selected solution space 
way look fs graph embodies domain knowledge expressed requirements design solutions solving par ticular problems domain 
role fs graph iterative approach discussed extensively de bruin van vliet 
focus composition technique systematically derive software architecture recursively applying design solutions architecture 
architecture contains variability points places architecture expected varied instance cater non functional requirements 
variations design solutions form patterns turn may contain variability points 
principle architecture refined indefinitely 
may call approach top approach software architecture composition contrast bottom composition top decomposition approaches known software engineering may sound contradiction terms 
bottom composition start set elementary components aggregate higher level components glue mechanism 
abstraction level raised time compose component subcomponents 
system decomposition opposite direction followed 
start top level view system recursively decompose manageable pieces 
system decomposition lowers abstraction level 
approach starting point architecture description basic functionality variability points 
variability points plug existing design solutions address certain quality concerns 
plug ins turn may contain variability points fine tune solution 
leads top approach system composition 
fs graph plays key role top iterative composition process 
fs graph supposed contain relevant domain knowledge system construction explore design alternatives system wide impact 
instance quite possible change interaction style system user centered user control system centered don call system system call 
seen architecture level counterpart aspect weaving aspect oriented programming languages kiczales 
case maps ucm buhr buhr vehicle demonstrate principles 
ucm diagrammatic modeling technique describe behavioral lesser extent structural aspects system high level abstraction 
ucm provides stubs hooks variability points behavior system varied statically construction time dynamically run time 
advantage ucm focuses larger architectural issues support plug ins stubs static dynamic 
ucm prerequisite composition technique applied instance uml 
contributions twofold 
firstly versatile composition technique software architectures 
technique offers pre post refinement functionality extension supports multiple plug ins design solution offers rules enforce formedness refinements 
secondly usage fs graph supports guided form top composition aspect oriented programming aop architecture level 
remainder organized follows 
section gives brief case maps 
section explains basics technique top composition 
section illustrate role fs graph system composition 
section illustrates fs graph realize global transformations software architecture 
section composition model extended cater functionality extensions 
section discusses concept refinement formalized 
section discusses related section contains 
brief case maps case map ucm graphical notation humans understand behavior system high level abstraction 
scenario showing cause effects traveling paths system 
ucms clearly defined semantics strong point show things globally 
basic ucm notation quite simple 
basic elements responsibilities paths components 
simple ucm basic elements shown 
path executed result receipt external stimulus 
imagine execution pointer placed start position 
pointer moved path entering leaving components touching responsibility points 
responsibility point represents place state system affected 
effect touching responsibility point defined concept state part ucm 
typically effects described natural language 
position reached execution pointer removed diagram 
ucm concurrency neutral ucm prescribe number threads associ ated path 
token said transfer control data pointer leaves component re enters 
thing guaranteed causal ordering executing responsibility points path 
necessarily strict tem ordering 
execution responsibility point may overlap execution subsequent responsibility points 
start path components pointer ucm basic elements 
realistic example shown depicting distributed client server system 
client communicates server network fail occasionally proxy server included provide transparent access real server 
proxy server modeled stub implementations transparent proxy server passes requests replies server unaltered denying possibility network failures proxy server timeout facility failures detected 
notation supposed self explanatory 
interesting note things unspecified ucms intended meaning sug strongly 
instance distribution aspects connection mechanisms amount concurrency component dealt 
client server proxy server distinct components connected network modeled component 
names natural assume components distributed number computer systems 
specified eye 
client proxy server network server transparent proxy server proxy server stub null watchdog proxy server join continuing path timeout path waiting place timeout fork entering path clearing path distributed client server ucm 
basic composition technique notation fork continuing paths failure point possible failure de bruin van vliet described simple effective way system composition successive refinements 
basic idea provide ucm stubs plug ins placed 
plug may contain stub plug placed plug 
approach secure communication web browsers web system adding encryption decryption components firewall component 
idea works fine local refinements refinements encryption firewall apply variability point ucm stub 
falls short deal refinements applied multiple variability points 
example type refinement observer design pattern affects component role subject components role observers 
solution handle refinement multiple variability points 
basic concepts refinement explained example shown 
example deals encryption decryption firewall refinement 
time model encryption decryption refinement variability points gives greater flexibility solution de bruin van vliet 
example involves components peer peer 
component peer communicates component peer 
peer pro vides socket sending data peer provides socket receiving data 
communi cation peers refined adding encryption decryption components peer peer respectively firewall component peer 
meaning ucm elements refinement table 
notice options firewall placement example 
firewall component placed component placed depending firewall placed pre stub post stub rcv receiver socket peer respectively 
basic ucm modeling peer peer communication peer provides socket refinement peer snd sender peer rcv receiver pre post pre post refinement containing plug encryption decryption encrypt snd sender decrypt rcv receiver encryptor pre post pre post result refining basic ucm encryption decryption peer snd sender rcv receiver encryptor pre post pre post peer refinement basics 
refinements obey certain rules 
rules enforce formedness transformation successive refinements architectures 
rules easily understood viewing refinement ucm applied patterns match 
rules refinement follows type matching 
sockets plug ins names type identifiers specified name type pair 
types organized type hierarchies supporting single multiple inheritance 
plug placed stub socket plug socket matching types 
type plug identical subtype stub type 
plug matching 
kinds plug ins recognized refinement containing firewall plug snd sender fw rcv receiver pre post firewall pre post result placing firewall refinement pre stub peer snd sender rcv receiver pre encryptor post firewall pre post result placing firewall refinement post stub peer peer peer snd sender rcv receiver encryptor firewall pre post pre post refinement basics continued 
mandatory 
mandatory plug ins refinement sockets match ing types 
optional 
socket provided optional plug plug placed socket discarded 
extension 
contrast optional plug socket needs provided extension discarded 
having optional extension plug ins allows capture broadly applicable design patterns quite general ucm refinements applied variety circumstances 
plug kind specified syntactically name type plug kind optional 
plug kind specified plug qualified mandatory 
boundary matching 
plug ins enclosed plug boundary placed component 
structure matching 
ucm path indicated straight curved line connects compo nents means components communicate way 
exists structural relationship components 
ways specify details relationship communication may element meaning socket stubs socket placeholder provides ucm stubs ucm plug placed 
stub called pre post 
intention pre stub provides ability pre processing 
likewise post stub offers possibility post processing 
stubs depicted diamonds 
plug plug placed pre stub post stub socket 
may contain pre stub post stub creating opportunity recursively plug plug ins 
plug placed pre stub post stub plug discarded vice versa post stub placement 
plug boundary plug boundary encloses set plug ins placed single component 
mechanism ensure plug ins belong scattered number components 
plug boundary depicted rectangle surrounding plug ins 
refinement refinement combination plug ins enclosed plug boundaries placed stubs provided sockets 
table meaning ucm refinement elements 
communication may direct indirect 
components reside plug boundaries may say relationships exist plug boundaries 
structural relations plug boundaries refinement correspond structural relations provided sockets 
path stack components denotes relation 
instance observer design pattern stack observers may connected single subject 
structural relation refinement matches relation target ucm vice versa 
distinction indirectly directly connected plug ins refinement 
case indirectly connected plug ins indicated ucm symbol attached start symbol corresponding sockets need necessarily direct connection 
required ucm path socket path may go arbitrary number intermediate components sockets 
permitted direct connections 
illustrate finer details refinement process consider example peer peer communication 
example abstracted away peers communicate 
way realizing deploying observer design pattern captured ucm refinement shown 
subject subscribe extension unsubscribe extension pre post publisher sender pre subscribe subscribers team unsubscribe post post pre continuation optional pre post observer subscriber receiver pre post observer design pattern captured ucm refinement 
shows observer refinement plugged peer peer ucm tion decryption firewall components 
firstly notice types specify plug ins placed 
plug type sender fits peer plug type receiver fits peer 
plug ins mandatory 
optional continuation plug observer design pattern depicted socket provided discarded refinement 
extension plug ins placed peer contained plug boundary contains publisher sender plug contains functionality subscribing 
structural relationship plug boundaries observer refinement indirect fits direct relationship peers 
remarks order 
firstly specific solution captured ucm refinement details added basic ucm started place 
call process abstraction lowering discussed section 
conversely observer design pattern captured general ucm refinement variety circumstances 
secondly flexible refinement mechanism provided form pre stubs post stubs 
particular case multicast interested observers positioned encryption component chosen place encryptor 
peer subscribe unsubscribe pre post post pre subscribe snd sender encryptor pre subscribers team unsubscribe post peer rcv receiver pre firewall post lowering abstraction level deploying observer pattern 
abstraction lowering refinement starting top level system structure refinement form plug placement lowers abstraction level 
example previous section observer pattern refinement resulted extension peer peer system subscription management 
approach architectural knowledge refinements quality concerns address captured feature solution fs graph 
example consider peer peer communication 
fs graph details basic peer peer ucm refined 
spaces recognized fs graph 
feature space contains requirements solution space contains solutions addressing requirements form plug ins placed basic peer peer ucm 
features solutions decomposed ex decomposition trees 
decomposition node feature solution space means constituents available requires arbitrary number constituents exor requires precisely constituent 
key idea feature space may select solution space defined directed selection links nodes indicated solid line 
possible explicitly rule particular solution 
done connecting feature solution negative selection link indicated dashed line 
example focus non functional requirements particular flexibility security perfor mance requirements 
high flexibility level desired fs graph dictates observer design pattern properties reducing coupling peers support ing multiple observers 
hand want high performance fs graph selects direct invocation style form remote procedure calls 
interesting observe high level flexibility high level performance obtained simultaneously requirements select solutions rule implied exor decomposition communica tion node 
fs graph contains trade information 
typically design process functional 
flexibility requirements exor low medium high non functional performance exor low medium high security feature space exor low medium high solution space firewall ucm security encryption decryption ucm peer peer architecture ucm observer design pattern ucm exor communication exor permanent ucm message ucm feature solution graph peer peer communication 
pc ucm cycles required arrive architectural design satisfies non functional requirements 
quality driven iterative approach architecture generation evaluation described detail de bruin van vliet 
discussed abstraction level lowered time refinement step performed generally requires detail added general solution started 
example case application observer design pattern details filled subscribe unsubscribe observers 
deduced fs graph contains information apply abstraction lowering 
suppose opted high flexibility solution resulted selecting observer design pattern 
observer design pattern node fs graph exor decomposed permanent mes sage solution stands setting connection permanently setting breaking connection message respectively 
case high performance requirements nent connection selected high security connection established message basis 
notice medium level security chosen negative selection link rules permanent con explicitly exor decomposition relation implies selection message solution 
cases especially required flexibility security performance levels set low particular solution favored 
put differently fs graph contains degrees freedom explore design alternatives iterative design process 
result abstraction lowering permanent connection shown 
plug setting permanent connection plug boundaries 
matches sub scribe socket peer matches subscriber receiver socket peer 
setting permanent connection requires initialization modeled extension plug 
applying refinement extension added result 
connection established additional functionality needed actual communication 
modeled empty plug type subscriber receiver 
empty plug needed determine plug applied 
applied leaves existing structure intact 
plug setting permanent connection subject subscribe result applying plug peer subscribe unsubscribe pre post post pre subscribe snd sender encryptor pre subscribers team unsubscribe post observer peer initialize setup extension pre subscriber receiver post pre post rcv receiver initialize setup firewall pre post filling details permanent connection 
pre post solution part fs graph contains collection ucm plug ins 
plug ins iteratively refine architectural solution guided quality requirements expressed feature part graph 
time apply refinement abstraction level architecture lowered 
crosscutting concerns means larger example show fs graph refine particular solution locally globally system level 
handle aspects perfor mance security general require adaptation components 
type refinement may called aspect oriented programming aop architectural level 
example illustrate type global refinement clients ordering goods retailer 
typical simplified scenario ordering follows 
client fills form sends form electronically retailer 
retailer checks database see goods stock 
sends report client stating price goods expected shipped 
assume basic scenario extended brokering facility 
certain goods supported retailer tries obtain 
may take time get answers especially provide line services client driven approach basic ordering scenario longer applicable 
retailer takes initiative inform client status order outstanding requests collected 
communication client retailer changed client driven mixture client driven retailer driven communication 
frequently architecture systems ordering system client server cs architec ture 
architecture shown basic scenario ordering goods contained 
client server component provide sockets refinement 
client input output server doit process pre post post pre pre post dbms client server architecture 
step extend system broker functionality 
shown 
functionality expressed brokering ucm database consulted 
certain goods delivered retailer server broker sends request number 
simultaneously broker sends message client inform brokering progress 
brokering requests collected database updated status report sent client 
basic scenario ordering goods brokering client driven reverse holds sending status report results brokering process sorted 
case system takes initiative 
consequence client adapted support system driven approach 
instance client equipped mail component alternatively may contain kind message broker 
socket notify messenger contained client component acts placeholder system driven message delivery 
plug brokering client notify messenger extension post pre resulting client server system client input pre post notify messenger post pre output post pre server server doit process pre post doit process post dbms broker pre dbms broker extending client server system broker functionality 
point extend server broker functionality extend client 
effect extension localized 
extension system wide impact 
may call aop architectural level 
knowledge system extended adapted captured fs graph illustrated 
observe effect requiring broker functionality 
selection links stemming brokering functional requirement select broker component placed server message delivery component placement client 
effectively knowledge captured fs graph ensures refinements extensions needed satisfy particular requirement 
requirements non functional functional 
cases traits 
ordering 
brokering feature space solution space 
client ucm message delivery exor client server architecture ucm message broker ucm 
server feature solution graph client server system 
functionality extensions broker ucm examples previous sections architecture contains basic func tionality variability points order offer possibility refinement satisfy non functional requirements 
approach restricted sense refine functionality expressed architecture 
obviously restriction tight 
reality systems evolve time obsolete functionality replaced new functionality added 
need support concept functionality extension 
consider example ordering goods retailer 
starting architecture database consulted start client server cs architecture gradually extended new functionality 
instance ordering broker functionality added way example 
functionality added deal instance payment goods 
cs architecture captured ucm stripped absolute minimum 
consists small pieces functionality form ucm paths connected form larger pieces functionality 
ucm paths may start named start points specified name type 
idea named point connected named start point identical types see table meaning ucm elements express extensions 
ucm path cloned order add new functionality 
done marking path refinement keyword clone 
refinement applied target ucm ucm paths marked cloned actual substitution plug ins stubs copy clone thereof retained result 
path add functionality 
client input pre post output post pre element meaning proc proc proc proc server stripped cs system 
start points start points delimit ucm paths represent small piece functionality 
idea larger piece functionality composed small pieces 
start points depicted ucm start points enclosed rectangle 
start point may marked clone refinement indicate corresponding ucm path target ucm cloned substitution takes place 
doit process table meaning ucm extension elements 
illustrate functionality extension cs architecture transformed support scenario ordering goods brokering see 
observe paths dbms refinement marked clone 
means resulting ucm clones ucm paths appear serve placeholders cater supporting functionality extension 
way functionality fixed 
keep option add new functionality system 
refinement shown brokering 
plug contrasted broker pre post dbms refinement result client input input output output client input pre output post pre post pre post pre post pre post pre proc proc clone clone proc clone proc proc proc clone server server core process core process pre dbms post dbms post pre proc proc post dbms functionality extension 
doit process plug shown 
plug ins identical way new messenger socket introduced 
case functionality extension messenger output plug substituted output socket cs architecture output socket cloned 
cloning ucm path keep option functionality extension 
notice broker refinement seen refinement extension 
actual brokering process refines core functionality server messenger plug extends functionality client 
functionality cs extended instance facilities credit card pay ment 
client decide accept offer sending back retailer credit card information 
retailer checks validity credit card infor mation went retailer confirms shipping goods transaction cancelled 
functionality defined lines discussed 
summarize concept functionality extension provides mechanism add new functionality pre post broker refinement result client input client input messenger output messenger output output output post pre proc clone pre post proc proc proc proc server server core process core process dbms pre post pre post pre dbms post pre post post pre pre post broker broker broker plug 
doit process system time 
new functionality refined refinement principles described order address non functional requirements 
techniques allow extend refine basic architecture indefinitely 
formalizing composition model refinement rules far rules 
ensure refinement con set plug ins compatible set stubs far type structure concerned 
necessary condition sufficient ensuring refined composition meets initial behavioral specification 
subtyping rules need stronger mechanism pre post captures concept behavioral subtyping 
formalizing behavioral refinement difficult achieve ucm 
particular bility points defined formally give precise component interaction spec 
seen omission ucm 
ucm simply serves purpose illustrate big picture 
overcome lack formality extended ucm interface descriptions formalize external behavior component 
describes operations component support 
specified augmented regular expression operations specifying signature operation de specific operation may invoked de bruin 
internal behavior descriptions form ucms behavior component formally captured high level abstraction de bruin 
de bruin describe components described interfaces ucms translated code re specification subjected formal analysis 
effectively interfaces ucms establish cause effect relations inside component system level 
temporal orderings events sending receiving messages analyzed 
instance shown architectural mismatch detected components perfectly isolation may fail brought garlan 
interfaces refined contra variance rules 
arrive additional matching rules include behavioral subtyping external behavior component specified interface may refined subtyping rules 
scenarios manifested ucm paths may extended new ones existing scenarios may changed 
rules ensure basic functionality remains far external behavior components concerned 
refined component reacts events emits events set events may extended new ones 
instance refinement observer pattern results extension component interfaces deal notifications subscription management extensions ucm paths subscribe unsubscribe 
basic functionality changed 
ucm components formal notion state 
interfaces introduce state sense describes operations may invoked 
ucm responsibility points provide means address issue 
principal reasons formalizing responsibility points way language akin uml object constraint language ocl 
way give precise semantics operations means pre post conditions state additional criteria refinement 
provides road executable specifications application sequence refinement steps ultimately leading executable code 
related architecture architectural styles proposed klein means capture structural behavioral aspects partial design solutions quality properties 
combines architectural style certain quality attributes 
essen tially fs graph stronger focus construction generation oriented representation architectural knowledge 
design rationale dr buckingham shum hammond moran carroll representation reasoning design artefact 
concerned capturing designers decisions 
known approach representing dr design space analysis notation called qoc questions options criteria maclean 
questions qoc key design issues options possible answers questions 
solution part fs graph contains questions options 
criteria qoc choose options resemble requirements captured feature part fs graph 
dr tool design process especially user interface design process augment design reasoning help formulating communicating arguments 
feature oriented domain analysis kang variants thereof family product line represented feature tree 
features mandatory alternative optional 
specific product composed choosing set alternative optional features express variabilities product line 
feature tree resembles feature part fs graph 
usually features product line units functionality solutions different quality concerns 
goal oriented requirements engineering relation goals requirements represented explicitly lamsweerde mylopoulos 
natural continuation line thought connect requirements high level design architecture 
done ucm liu yu 
goal oriented language combination ucm ucm lot similarities concepts 
approach link established requirements decomposition soft goals tasks design solution form ucm scenarios 
notion refinement ucm stubs plug ins supported 
approach differs respects explicit distinction feature solution space connections 
opens way recursively apply idea 
instance establish linkages requirements space software architecture space 
token establish linkages architecture detailed design solutions 
software architecture level space detailed design level space 
detailed design space turn act space implementation space 
space may contain nodes connected nodes space 
seen degrees freedom design alternatives explored 
idea refinement applied recursively plug ins provide stubs 
ucm supports hand level refinement 
support advanced refinement mechanism form multiple variability points 
allows refine patterns necessarily restricted local point 
observer pattern typical example support point 
concept refinement applied years especially field formal speci vdm known approach refinement component oriented context catalysis souza wills 
main idea catalysis concept collaboration set related actions involving multiple objects resulting goal 
collaboration seen formalization case 
specified formally terms pre post condition invariants uml object constraint language ocl 
collaboration described high level abstraction 
description serves formal specification refined sub sequent steps 
refinement key concept catalysis support notion variability points 
clues whatsoever refine 
approach refinement done automatically basis type structure matching content fs graph 
attention paid non functional quality attributes flexibility security performance 
main emphasis catalysis behavioral refinement 
surprisingly refinement main issue architectural description languages adl see medvidovic taylor classification framework survey adls 
adls favor bottom composition sense components treated black box building blocks 
sadl rapide vera noticeable exceptions 
sadl supports method stepwise refinement architecture lower level archi tecture 
refinement pattern applied refinement step maps architectural style dataflow pipes filters implicit invocation architecture architectural style refined architecture 
refinement patterns defined proved correct independent particular architecture 
sadl mappings global nature approach handle local global refinements guided fs graph 
rapide concurrent event simulation language defining simulating behavior architectures 
underlying semantical model rapide partially ordered event sets posets 
refined architecture related mapping concrete events events 
mappings provide means comparative simulations architectures different abstraction levels check refined architecture conformance architec ture 
interesting explore idea approach ucms imply ordering events 
subject currently focus attention 
idea pre post stubs derived notion composition filters programming language sina aksit 
composition filter model consists input output filters surround object affect messages sent received object 
composition filters seen objects role proxies perform additional pre post processing 
concluding remarks discussed approach top composition software architectures 
centered feature solution fs graph requirements linked design solutions 
design solutions expressed ucm provides intuitive way showing things globally 
ucm necessary prerequisite approach 
idea supporting multiple variability points plug ins combination fs graph modeling techniques uml text specification language 
fs graph serves purposes 
firstly contains knowledge solving problems particular domain 
viewed graph guide iterative quality driven process software architecture generation 
iterative process abstraction level successively lowered refinements 
secondly fs graph system wide adaptations 
en sures consistent system wide application refinements 
system wide refinements resemble aspect oriented programming albeit applied higher level abstraction 
currently fs graph codify architectural knowledge various real life ar chitecture projects 
experiences indicate promising areas research version fs graph discussed contains product knowledge 
currently investigating incorporation process knowledge fs graph 
selected process nodes guide architect finding appropriate design solutions 
process steps encoded process nodes heuristics instance form production rules particular situation encountered select solution 
alternatively process nodes may alert designer certain design choices 
small process steps embedded larger process cycles defined quality driven iterative approach 
leads content driven refinement process 
relationships currently captured fs graph strong high flexibility required select observer pattern 
actual relationships requirements solution chunks weaker kind high flexibility required suggest apply observer pattern 
represent weaker links fs graph enriched additional kinds relationships turn require additional resolution mechanisms get quality requirements acceptable architectural solutions 
started project stands quality driven software archi tecture 
goal generate software architectures implementations techniques described 
starting point fs graph domain application spe cific knowledge captured 
fs graph semi automatically generate evaluate candidate architectures 
promising architectures stepwise refined executable specifications code 
aksit bergmans 

achieving adaptability com concerns 
proceedings ecoop workshop adaptability object oriented software development pages linz austria 
bosch 

design software architectures adopting evolving product line approach 
addison wesley 
buckingham shum hammond 

argumentation design rationale cost 
international journal man machine studies 
buhr 

case maps architecture entities complex systems 
ieee transactions software engineering 
buhr 

case maps object oriented systems 
prentice hall upper saddle river new jersey 
de bruin 

grey box approach component composition 
czarnecki eisenecker editors proceedings symposium generative component software engineering erfurt germany volume lecture notes computer science lncs pages berlin germany 
springer verlag 
de bruin 

basic concurrent object oriented programming language 
software practice experience 
de bruin 

scenario analysis component compositions 
butler editors proceedings second symposium generative component software engineering erfurt germany volume lecture notes computer science lncs pages berlin germany 
springer verlag 
de bruin van vliet 

scenario generation evaluation software architectures 
bosch editor proceedings third symposium generative component software engineering erfurt germany volume lecture notes computer science lncs pages berlin germany 
springer verlag 
souza wills 

objects components frameworks uml catalysis approach 
object technology series 
addison wesley reading massachusetts 
garlan allen 

architectural mismatch reuse hard 
ieee software 
carnegie mellon university 
kang cohen hess novak peterson 

feature oriented domain analysis feasibility study 
technical report software engineering institute 
kiczales lamping mendhekar maeda lopes loingtier irwin 

aspect oriented programming 
matsuoka editors proceedings th european con ference object oriented programming ecoop finland volume lecture notes computer science lncs pages berlin germany 
springer verlag 
klein kazman bass carriere barbacci lipson 

attribute architectural styles 
editor software architecture pages 
kluwer academic publishers 
lamsweerde 

requirements engineering year research perspective 
conference proceedings icse pages limerick ireland 
acm 
liu yu 

requirements architectural design goals scenarios 
icse workshop software requirements architectures straw pages toronto ontario canada 
acm 
vera 

event architectural description language 
ieee transactions software engineering 
maclean young bellotti moran 

questions options criteria elements design space analysis 
human computer interaction 
medvidovic taylor 

classification comparison framework software architecture description languages 
ieee transactions software engineering 
moran carroll editors 
design rationale concepts techniques 
lawrence erlbaum associates hillsdale new jersey 
qian 

correct architecture refinement 
ieee transactions software engineering 
mylopoulos chung liao wang yu 

exploring alternatives requirements analysis 
ieee software 
biographies hans de bruin lecturer researcher vrije universiteit 
masters degree technical university delft phd erasmus university rotterdam 
returning university worked software engineer consultant industry 
currently teaches software engineering vrije universiteit 
research interests include software engineering particular software architecture component development programming language design 
hans van vliet professor software engineering vrije universiteit 
research interests include software architecture software measurement 
joining vrije universiteit worked researcher centrum voor wiskunde en informatica amsterdam spent year visiting researcher ibm almaden research center san jose california 
hans sc 
computer science vrije universiteit ph computer science form university amsterdam 

