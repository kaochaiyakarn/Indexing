efficient algorithms mining outliers large data sets sridhar ramaswamy rajeev rastogi kyuseok shim bell laboratories murray hill nj sridhar bell labs com rastogi bell labs com shim bell labs com number america propose novel formulation distance outliers distance point th nearest neighbor 
rank point basis distance th nearest neighbor declare top points ranking outliers 
addition developing relatively straightforward solutions finding outliers classical nested loop join index join algorithms develop highly efficient partition algorithm mining outliers 
algorithm partitions input data set disjoint subsets prunes entire partitions soon determined contain outliers 
results substantial savings computation 
results extensive experimental study real life synthetic data sets 
results real life nba database highlight reveal expected unexpected aspects database 
results study synthetic data sets demonstrate partition algorithm scales respect data set size data set dimensionality 
knowledge discovery databases commonly referred data mining generating enormous interest research software arenas 
focused finding large patterns 
phrase large patterns mean characteristics input data exhibited typically userdefined significant portion data 
examples large patterns include association rules ams classification rs clustering nh grs 
focus converse problem finding small patterns outliers 
outlier set data observation point considerably dissimilar inconsistent remainder data 
description outliers may outliers nuisance impeding inference process quickly identified eliminated interfere data analysis 
viewpoint narrow outliers contain useful information 
mining outliers number useful applications telecom credit card fraud loan approval pharmaceutical research weather prediction financial applications marketing customer segmentation 
instance consider problem detecting credit card fraud 
major problem credit card companies face illegal lost stolen credit cards 
detecting preventing critical credit card companies assume liability unauthorized expenses lost stolen cards 
usage pattern stolen card similar usage prior stolen new usage points probably outliers intuitive sense respect old usage pattern 
detecting outliers clearly important task 
similar examples industries 
mutual fund manager may interested stocks outperformed stocks market extended period time 
long distance telephone may interested identifying customers calling patterns substantially different average customer specifically customers call generate large telephone bills 
problem detecting outliers extensively studied statistics community see bl survey statistical techniques 
typically user model data points statistical distribution contact author phone fax points determined outliers depending appear relation postulated model 
main problem approaches number situations user simply knowledge underlying data distribution 
order overcome problem knorr ng kn propose distance definition outliers simple intuitive point data set outlier respect parameters points data set distance distance function metric distance function main benefit approach kn require apriori knowledge data distributions statistical methods 
additionally definition outliers considered general model statistical outlier tests normal poisson distributions 
authors go propose number efficient algorithms finding distance outliers 
algorithm block nested loop algorithm running time quadratic input size 
algorithm dividing space uniform grid cells cells compute outliers 
algorithm linear size database exponential number dimensions 
algorithms discussed detail section 
definition outliers kn advantages intuitive simple computationally feasible large sets data points 
certain shortcomings 
requires user specify distance difficult determine authors suggest trial error require iterations 

provide ranking outliers instance point neighboring points distance regarded sense stronger outlier point neighbors distance 
cell algorithm complexity linear size database scale higher number dimensions number cells needed grows exponentially dimension 
focus presenting new definition outliers developing algorithms mining outliers address mentioned drawbacks approach kn 
specifically definition outlier require users specify distance parameter distance th nearest neighbor point 
point denote distance th nearest neighbor intuitively measure outlier point example points larger values sparse neighborhoods typically stronger outliers points belonging dense clusters tend lower values 
general user interested top outliers define outliers follows point outlier gamma points data set higher value words top points maximum values considered outliers 
refer outliers pronounced dee kay en outliers dataset 
definition intuitive appeal essence ranks point distance th nearest neighbor 
new definition user longer required specify distance define neighborhood point 
specify number outliers interested definition basically uses distance th neighbor th outlier define neighborhood distance usually expected small relatively independent underlying data set making easier user specify compared contributions follows ffl propose novel definition distance outliers great intuitive appeal 
definition distance point th nearest neighbor 
ffl propose new algorithms mining outliers definition 
specifically develop nested loop index algorithms finding outliers propose new optimizations improving performance 
precise definition kn slightly different equivalent definition 
algorithms proposed assume distance points euclidean distance points 
ffl main contribution partition outlier detection algorithm partitions input points clustering algorithm computes lower upper bounds points partition 
uses information identify partitions possibly contain top outliers prunes 
outliers computed remaining points belonging unpruned partitions final phase 
typically small algorithm prunes significant number points results substantial savings amount computation 
ffl results detailed experimental study algorithms real life synthetic data sets 
results real life nba database highlight reveal expected unexpected aspects database 
results study synthetic data sets demonstrate partition algorithm scales respect data set size data set dimensionality 
performs order magnitude better nested loop index algorithms 
rest organized follows 
section discusses related research area finding outliers 
section presents problem definition notation rest 
section presents nested loop index algorithms outlier detection 
section discusses partition algorithm outlier detection 
section contains results experimental analysis algorithms 
analyzed performance algorithms real life synthetic databases 
section concludes 
related problem outlier detection extensively studied statistics community bl 
mentioned earlier typical method model underlying distribution generates data points test outliers properties postulated distribution 
approach extended structured situations involving regression models time series models bl linear regression models linear relationship exists attributes 
main problem statistical approaches assume underlying data distributions known apriori situations accurate knowledge true underlying distribution attributes making statistical tests outliers inapplicable 
determining distribution set points difficult practice 
example single distribution may model entire data data may come distributions 
problem statistical approaches applicable data single attribute value making unsuitable multi dimensional data sets 
methods developed field computational statistics overcome problems statistical methods 
class techniques data objects organized layers outliers occur shallow layers deep layers ps rr 
problem techniques rely computing ffi dimensional convex hulls inherently exponential process lower bound omega gamma dffi 
techniques infeasible dimensions 
clustering algorithms clarans nh dbscan birch cure grs consider outliers point ensuring interfere clustering process 
definition outliers sense subjective related clusters detected algorithms 
contrast definition distance outliers objective independent clusters input data set identified 
aar authors address problem detecting deviations seeing series similar data element disturbing series considered exception 
table analysis methods statistics literature employed sam attack problem finding exceptions olap data cubes 
detailed value data cube called exception differ significantly anticipated value calculated model takes account aggregates group bys value participates 
mentioned concept distance outliers developed studied knorr ng kn 
authors define point outlier points symbol description number neighbors point interested distance point th nearest neighbor total number outliers interested total number input points ffi dimensionality input amount memory available dist distance pair points mindist minimum distance point mbr mbr maxdist maximum distance point mbr mbr table notation distance point 
algorithms computing outliers 
simple nested loop algorithm worst case complexity ffin ffi number dimensions number points dataset 
outer loop considers point data set inner loop computes point outer loop number points data set distance equal order overcome quadratic time complexity nested loop algorithm authors propose approach computing outliers ffi dimensional space partitioned cells sides length ffi distance points neighboring cells guaranteed result cell total number points cell neighbors greater points cell outliers 
property eliminate vast majority points outliers 
points belonging cells cells apart distance apart 
result number points contained cells cells away cell points cell definitely outliers 
consider point belongs cell categorized containing outliers non outliers 
order determine point outlier points neighboring cells atmost cells away need considered 
properties cells outliers authors propose pass algorithm computing outliers large databases 
time complexity cell algorithm ffi number inversely proportional complexity linear exponential number dimensions 
result due exponential growth number cells number dimensions increased nested loop outperforms cell algorithm dimensions higher 
notion hot list queries gm return frequently occurring values data set somewhat related 
ranking points scalar function number occurrences consider spatial characteristics rank proximity th nearest neighbors 
note neighbors point order draw inferences properties context pattern classification dh 
data set point associated label classification problem assign label new point nearest neighbor rule classifying point assign label frequently represented nearest points data set words decision examining labels nearest neighbors vote 
nearest neighbor rule pattern classification dh 
problem definition notation section precise statement problem mining outliers point data sets 
definitions describing algorithms 
table describes notation remainder 
problem statement recall denote distance point th nearest neighbor 
rank points basis distance leading definition outliers definition input data set points parameters point outlier gamma points 
words rank points distance top points ranking considered outliers 
metrics manhattan euclidean metrics measuring distance pair points 
alternately certain application domains text documents nonmetric distance functions making definition outliers general 
definition outliers possible rank outliers distances outliers larger distances fewer points close intuitively stronger outliers 
note distance definition kn results outliers outlier definition 
important issue need address relates choice values parameters general experiments definition outliers sensitive long chosen small fraction input size value chosen number desired outliers 
larger values incur computational overhead affect quality outliers simply additional points outliers increased 
bigger values distances ranking outliers discriminate 
instance significant number outliers similar distances ranked bottom may true outliers may possible ignore 
distances points mbrs key technical tools approximation set points minimum bounding rectangle mbr 
computing lower upper bounds points mbr able identify prune entire mbrs possibly contain outliers 
computation bounds mbrs requires define minimum maximum distance mbrs 
outlier detection aided computation minimum maximum possible distance point mbr define 
square euclidean distance euclidean distance distance metric involves fewer expensive computations 
denote distance points dist 
denote point ffi dimensional space ffi ffi dimensional rectangle endpoints major diagonal ffi ffi denote minimum distance point rectangle mindist 
point distance mindist see 
definition mindist definition mindist ffi gamma gamma denote maximum distance point rectangle maxdist 
point distance exceeds maxdist point see 
maxdist calculated follows note points may satisfy definition outliers case satisfying definition considered outliers 
mindist maxdist maxdist mindist mindist maxdist mindist maxdist mindist maxdist point mbr mindist maxdist mbrs mindist maxdist definition maxdist ffi gamma gamma define minimum maximum distance mbrs 
mbrs defined endpoints major diagonal respectively 
denote minimum distance mindist 
point distance mindist point vice versa 
similarly maximum distance denoted maxdist defined 
distances illustrated calculated formulae definition mindist ffi gamma gamma definition maxdist ffi gamma jr gamma jg 
nested loop index algorithms section describe relatively straightforward solutions problem computing outliers 
block nested loop join nested loop algorithm computing outliers simply computes input point distance th nearest neighbor 
selects top points maximum values 
order compute points algorithm scans database point point list nearest points maintained point database considered check see dist smaller distance th nearest neighbor far 
check succeeds included list nearest neighbors list contains neighbors point furthest away deleted list 
algorithm point processed time database need scanned times number points database 
algorithm efficient computing multiple points say 
point requires memory keep track nearest neighbors chosen thetak total amount main memory 
case time point retrieved disk check see closer current th neighbor database needs scanned times times 
procedure 
point input data set 
tree 
contains top outliers smallest value top 
mindkdist times lower bound value outlier 
point input data set 
tree root mindkdist 
mindkdist 
insert 
numpoints 
numpoints mindkdist top 


return index algorithm computing outliers index join optimization nested loop approach requires distance computations 
expensive computationally especially dimensionality points high 
number distance computations substantially reduced spatial index tree bkss 
points stored spatial index tree pruning optimization pointed applied reduce number distance computations suppose computed looking subset input points 
value clearly upper bound actual minimum distance mbr node tree exceeds value currently points sub tree rooted node nearest neighbors optimization lets prune entire sub trees containing points irrelevant nearest neighbor search addition interested computing top outliers apply pruning optimization computation point assume step algorithm store top outliers computed 
nmin minimum top outliers 
computation point find value computed far fallen nmin guaranteed point outlier 
safely discarded 
monotonically decreases examine points 
guaranteed top outliers 
note optimization applied nested loop algorithm 
procedure computing outliers shown 
uses procedure subroutine 
points inserted tree index spatial index structure tree steps 
tree compute th nearest neighbor point 
addition procedure keeps track points maximum value point execution heap 
points stored heap increasing order point smallest value top 
value stored variable mindkdist passed routine 
initially empty mindkdist 
loop spanning steps calls point input inserting point point value top values seen far stores value point 
note uses tighter bound called minmaxdist order prune nodes 
want find maximum possible distance nearest neighbor point nearest neighbors doing 
looking nearest neighbor point tighter bound maximum distance neighbor 
heap size exceeds point lowest value removed heap mindkdist updated 
procedure root mindkdist 
nodelist root 

contains nearest neighbors sorted decreasing distance 
nodelist empty 
delete element node nodelist 
node leaf 
point node 
dist 
insert 
numpoints 
numpoints dist top 
mindkdist return 



append node children nodelist 
sort nodelist mindist 

node nodelist 
mindist node delete node nodelist 
computation distance th nearest neighbor procedure computes point examining nodes tree 
linked list nodelist 
initially nodelist contains root tree 
elements nodelist sorted ascending order mindist iteration loop spanning lines node nodelist examined 
node leaf node points leaf node processed 
order aid processing nearest neighbors points examined far stored heap 
stores points decreasing order distance stores points examined 
points examined 
time point distance inserted steps 
contains points point top discarded updated steps 
time value falls mindkdist recall monotonically decreases examine points point outlier 
procedure immediately terminates computation returns step 
way avoids unnecessary computation point moment determined outlier candidate 
hand node head nodelist interior node node expanded appending children nodelist 
nodelist sorted mindist steps 
final steps nodes minimum distance exceed pruned 
points contained nodes obviously qualify nearest neighbors safely ignored 
distances nodes computed mbrs 
partition algorithm fundamental shortcoming algorithms previous section computationally expensive 
point database initiate computation distance th nearest neighbor 
interested top outliers typically small distance computations remaining points little altogether avoided 
partition algorithm proposed section prunes points distances th nearest neighbors small possibly top outliers 
furthermore partitioning data set able determination point computing precise value 
experimental results section indicate pruning strategy result substantial performance speedups due savings computation overview key idea underlying partition algorithm partition data space prune partitions soon determined contain outliers 
typically small additional preprocessing step performed granularity partitions points eliminates significant number points outlier candidates 
consequently th nearest neighbor computations need performed points speeding computation outliers 
furthermore number partitions preprocessing step usually smaller compared number points preprocessing performed granularity partitions points overhead preprocessing low 
steps performed partition algorithm illustrated 
briefly describe steps defer presentation details subsequent sections 

generate partitions step clustering algorithm cluster data treat cluster separate partition 

compute bounds points partition partition compute lower upper bounds stored lower upper respectively points partition 
point lower upper 

identify candidate partitions containing outliers step identify candidate partitions partitions containing points candidates outliers 
suppose compute mindkdist lower bound outliers 
upper partition mindkdist points possibly outliers 
partitions upper mindkdist candidate partitions 
mindkdist computed lower partitions follows 
consider partitions decreasing order lower 
partitions maximum values lower number points partitions lower bound outlier lower lg 

compute outliers points candidate partitions final step outliers computed points candidate partitions 
candidate partition neighbors denote neighboring partitions partitions distance upper points belonging neighboring partitions points need examined computing point number points candidate partitions neighboring partitions quite large process points candidate partitions batches batch involving subset candidate partitions 
partition points clustering algorithm compute upper lower bounds partitions identify candidate partitions containing outliers candidate partitions compute outliers points overview partition algorithm generating partitions partitioning data space cells treating cell partition impractical higher dimensional spaces 
approach ineffective dimensions kn due exponential growth number cells number dimensions increase 
effective pruning partition data points close assigned single partition 
employing clustering algorithm partitioning data points choice 
number clustering algorithms proposed literature quadratic time complexity jd 
quite large interested clustering algorithms handle large data sets 
algorithms lower complexities pre clustering phase birch stateof art clustering algorithm handle large data sets 
pre clustering phase time complexity linear input size performs single scan database 
stores compact summarization cluster cf tree balanced tree structure similar tree sam 
successive point traverses cf tree find closest cluster point threshold distance ffl cluster absorbed starts new cluster 
case size cf tree exceeds main memory size threshold ffl increased clusters cf tree new increased ffl distance merged 
main memory size points data set inputs birch pre clustering algorithm 
birch generates set clusters generally uniform sizes fit treat cluster separate partition points partition simply points assigned cluster pre clustering phase 
controlling memory size input birch control number partitions generated 
represent partition mbr points 
note mbrs partitions may overlap 
emphasize clustering simply heuristic efficiently generating desirable partitions computing outliers 
clustering algorithms including birch perform outlier detection notion outliers definition outliers mathematically precise consequence operational considerations need addressed clustering process 
computing bounds partitions purpose identifying candidate partitions need compute bounds lower upper property points lower upper 
bounds lower upper partition determined finding partitions closest respect mindist maxdist number points partitions fit main memory main memory index find partitions closest partition mbr stored index 
procedure computing lower upper partition shown 
input parameters root index containing partitions mindkdist lower bound outlier 
procedure invoked procedure computes candidate partitions shown describe subsection 
procedure keeps track mindkdist passes computation bounds partition optimized 
idea upper partition mindkdist contain outliers 
computation bounds cease immediately 
similar procedure described previous section see 
stores partitions heaps decreasing order mindist maxdist respectively partitions largest values mindist maxdist appear procedure root mindkdist 
nodelist root 
lower upper 

nodelist empty 
delete element node nodelist 
node leaf 
partition 
mindist lower 
insert 
numpoints gamma top numpoints 

numpoints lower mindist top 

maxdist upper 
insert 
numpoints gamma top numpoints 

numpoints upper maxdist top 
upper mindkdist return 




append node children nodelist 
sort nodelist mindist 

node nodelist 
upper maxdist node lower mindist node 
delete node nodelist 
computation lower upper bounds partitions top heaps 
computing candidate partitions crucial step partition algorithm identify candidate partitions potentially contain outliers prune remaining partitions 
idea bounds computed previous section estimate mindkdist lower bound outlier 
partition candidate upper mindkdist 
lower bound mindkdist computed lower values partitions follows 
partitions maximum values lower containing points 
mindkdist lower lg lower bound outlier 
procedure computing candidate partitions set partitions pset illustrated 
partitions stored main memory index invoked compute lower upper bounds partition 
computing mindkdist bounds partitions computed stores heap partitions largest lower values containing points 
partitions stored increasing order lower mindkdist equal lower partition top 
benefit maintaining mindkdist passed parameter step computation bounds partition halted early upper falls mindkdist 
partition lower greater current value mindkdist inserted value mindkdist appropriately adjusted steps 
procedure pset 
partition pset 
tree 

mindkdist 
partition pset 
tree root mindkdist 
lower mindkdist 
insert 
numpoints gamma top numpoints 

numpoints mindkdist top lower 



partition pset 
upper mindkdist 
fpg 
neighbors fq pset mindist 

return computation candidate partitions loop steps set candidate partitions computed candidate partition partitions potentially contain th nearest neighbor point added neighbors note neighbors contains 
computing outliers candidate partitions final step compute top outliers candidate partitions 
points candidate partitions neighbors fit memory simply load points main memory spatial index 
index algorithm see compute outliers probing index compute values points belonging candidate partitions 
size index number candidate points general small compared total number points data set expected faster executing index algorithm entire data set points 
processing candidate partitions batches case candidate partitions neighbors exceed size main memory need process candidate partitions batches 
batch subset remaining candidate partitions neighbors fit memory chosen processing 
choice candidate partitions batch carried procedure shown 
procedure 

delete partition maximum lower 

neighbors 
number points 
delete partition number common points 
neighbors maximum 

neighbors 
generation candidate partitions batch set candidate partitions input parameter procedure candidate partitions batch neighbors returned respectively note 
interested finding points largest values candidate partition maximum value lower chosen step 
seed choosing subsequent partitions steps 
successive partitions promising heuristic select partitions neighbors large overlap partitions selected far 
intuition heuristic follows 
tries minimize number batches partition participates 
processing partition batch requires points read disk inserted main memory index expensive reducing number times steps performed partition result substantial performance improvements 
second advantage processing partitions large overlaps batch guaranteed points processed single batch relatively close result computation candidate points efficient 
process adding candidate partitions batch repeated number points selected partitions exceeds main memory size 
index algorithm procedure see computes outliers candidate partitions generated see 
uses index algorithm takes input parameter mindkdist value computed identify candidate partitions 
execution procedure keeps track top outliers mindkdist lower bound outlier 
candidate partitions neighbors batch identified step points inserted main memory index steps 
loop spanning steps executes index algorithm points candidate partitions 
consider candidate partitions decreasing order lower values 
reason find points highest values early points pruned mindkdist converge earlier value th outlier 
value mindkdist continuously refined procedure partitions upper value drops mindkdist contain outliers ignored steps 
steps point procedure compute inserted outlier heap stronger outlier current th outlier 
block nested loop algorithm index algorithm block nested loop algorithm compute outliers candidate partitions 
sense candidate partitions procedure mindkdist 



point 
tree 
dof 
delete partition maximum lower 
upper mindkdist 
point partition 
tree root mindkdist 
mindkdist 
insert 
numpoints 
numpoints mindkdist top 



delete partitions upper mindkdist 

return computation outliers candidate partitions selves contain small number points points neighbors considered data fit main memory 
block nested loop algorithm points fit memory loaded memory single pass neighboring partitions 
generate candidate points processed batch difference requiring fit main memory require points heaps heap point containing distances nearest neighbors fit memory 
points heaps stored memory single pass disk resident 
point distance point smaller distance current th nearest neighbor replaces th neighbor 
mindkdist lower bound outlier maintained execution prune points partitions th nearest neighbor known distance mindkdist index algorithm 
experiments block nested loop algorithm compute outliers final step partition algorithm implementation 
experimental results empirically compared performance partition algorithm block nested loop algorithms 
experiments partition algorithm scales data set size data set dimensionality 
addition number cases order magnitude faster block nested loop index algorithms 
describing section experience mining real life nba national basketball association database notion outliers 
results indicate efficacy approach finding interesting unexpected facts buried data 
evaluate performance algorithms class pl reb assists pts name dist norm norm norm dennis rodman rod williams karl malone pl steal blocks name dist norm norm marcus shawn bradley theo finding outliers nba statistics database synthetic datasets section 
experiments performed sun ultra workstation mb main memory running solaris 
data sets stored local disk 
analyzing nba statistics analyzed statistics nba season outlier programs see discover interesting nuggets statistics 
information nba players played nba season 
order restrict attention significant players removed players scored points course entire season 
left players 
wanted ensure columns equal weight 
accomplished transforming value column gammac oe average value column oe standard deviation 
transformation normalizes column average standard deviation 
ran outlier program transformed data 
value looked top outliers 
results runs shown 
pl perl front outliers program understands names columns nba database 
simply processes arguments calls outlier program 
addition giving actual value column output prints normalized value outlier calculation 
outliers ranked values listed dist column 
experiment focuses commonly average statistics nba average points game average assists game average game 
stands extent players having large value dimension tend dominate outlier list 
instance dennis rodman known excel assisting scoring top outlier huge nearly sigmas deviation average 
furthermore dist value higher outliers making extremely strong outlier 
players outlier list tend dominate columns 
interesting case neal outlier list due excellent record scoring quite average assists 
recall average normalized column 
rounded player appear list karl malone position 
michael jordan position 
fact list top outliers players karl malone hill positions normalized values columns 
look defensive statistics outliers dominated players having large normalized values single column 
consider average steals blocks outliers dominated shot blockers marcus 
position shows balanced player due average record respect steals blocks 
somewhat surprise outcome experiments nba data 
balanced players players average aspect game labeled outliers 
outlier lists dominated players excel wide margin particular aspects game dennis rodman 
interesting observation outliers tended interesting considered fewer attributes 
entirely surprising known fact number dimensions increases points spread uniformly data space distances poor measure similarity dissimilarity 
conducting experiments nba database realized specifying actual distances required kn fairly difficult practice 
notion outliers requires specify value calculating th neighbor distance simpler 
results fairly insensitive minor changes making job specifying easy 
note ranking players provide distance enables determine strong outlier really performance results synthetic data section briefly describing implementation algorithms 
move describing synthetic datasets 
algorithms implemented block nested loop algorithm algorithm described section 
order optimize performance algorithm implemented buffer manager performed reads large blocks 
allocated buffer space possible outer loop 
index algorithm speed execution tree find nearest neighbors point described section 
tree code developed university maryland 
tree main memory version 
page size tree set bytes 
experiments tree fit memory 
furthermore index algorithm include time build tree insert data points tree measurements execution time 
measurement running time index algorithm includes cpu time main memory search 
note gives index algorithm advantage algorithms 
partition algorithm implemented partition algorithm described section 
birch pre clustering algorithm generating partitions main memory tree determine candidate partitions block nested loop algorithm computing outliers candidate partitions final step 
final step performance block nested loop algorithm competitive index algorithm previous pruning steps job identifying candidate partitions neighbors 
configured birch provide bounding rectangle cluster generated 
mbr corresponding partition 
stored mbr number points partition tree 
resulting index identify candidate neighboring partitions 
needed identify partition birch assigned point modified birch generate information 
recall section important parameter birch amount memory allowed 
experiments specify parameter terms number clusters partitions birch allowed create 
christos faloutsos providing code 
parameter default value range values number points number clusters number points cluster number outliers data set number outliers computed number neighbors number dimensions ffi maximum number partitions distance metric euclidean table synthetic data parameters execution time sec 
block nested loop index partition execution time sec 
total execution time clustering time performance results synthetic data sets experiments grid synthetic data set employed study sensitivity birch 
data set contains hyper spherical clusters arranged theta grid 
center cluster located 
furthermore cluster radius 
data points cluster uniformly distributed hyper sphere defines cluster 
uniformly scattered outlier points space spanning dimension 
table shows parameters data set default values range values conducted experiments 
performance results number points study algorithms scale dataset size varied number points cluster 
varies size dataset approximately 
set default values 
limit number partitions partition algorithm set 
execution times algorithms varied shown log scale 
illustrates block nested loop algorithm worst performer 
number computations performs proportional square number points exhibits quadratic dependency input size 
index algorithm lot better block nested loop times slower partition algorithm 
points block nested loop algorithm takes hours compute outliers index algorithm minutes partition algorithm takes half minute 
order explain partition algorithm performs table number candidate neighbor partitions points processed final step 
table follows avg 
points candidate neighbor candidate neighbor partition partitions partitions points points table statistics approximately initial partitions candidate partitions neighbor partitions processed final phase 
partitions entirely pruned data set points data set candidates outliers points 
results tremendous savings computation enables partition scheme outperform algorithms order magnitude 
plot execution time partition algorithm number points increased see scales larger data sets 
plot time spent birch generating partitions graph follows increases linearly input size 
overhead final step increases substantially data set size increased 
reason generate number partitions points average number points partition exceeds 
result computed lower bounds partitions close mindkdist lower bound value outlier low 
pruning effective data set size increased corresponding increase number partitions 
specifically order ensure high degree pruning rule thumb choose number partitions average number points partition fairly small small compared example value 
clusters generated birch average size 
th nearest neighbor shows result increasing value 
considered index algorithm partition algorithm different settings number partitions 
explore behavior block nested loop algorithm slow compared algorithms 
value set number points data set 
execution times shown log scale 
graph confirms performance partition algorithms degrade increased 
increased number candidate partitions decreases slightly larger implies higher value mindkdist results pruning 
larger implies neighboring partitions candidate partition 
opposing effects cancel leave performance partition algorithm relatively unchanged 
hand due overhead associated finding nearest neighbors performance index algorithm suffers significantly value increases 
partition algorithms prune points data set candidates outliers generally times faster index algorithm 
note number partitions increased performance partition algorithm worse 
reason partition contains points cost computing lower upper bounds partition longer low 
instance case partition contains single point computing lower upper bounds partition equivalent computing point data set partition algorithm degenerates index algorithm 
increase number partitions execution time partition algorithm converges index algorithm 
execution time sec 
index partition partition partition execution time sec 
number dimensions block nested loop index partition performance results ffi number outliers number outliers varied default settings parameters execution time algorithms increase gradually 
due space constraints graphs experiments 
number dimensions plots execution times algorithms number dimensions increased remaining parameters set default values 
set cluster radius dimensional dataset reduced radii clusters higher dimensions 
volume hyper spheres clusters tends grow exponentially dimension points higher dimensional space sparse 
reduce cluster radius ensure points cluster relatively close compared points clusters 
radius values respectively dimensions 
dimensions partition algorithm times faster index algorithm times faster block nested loop algorithm 
note including building time tree index algorithm 
execution time partition algorithm increases sublinearly dimensionality data set increased 
contrast running times index algorithm increase rapidly due increased overhead performing search higher dimensions tree 
partition algorithm scales better algorithms higher dimensions 
proposed novel formulation distance outliers distance point th nearest neighbor 
rank point basis distance th nearest neighbor declare top points ranking outliers 
addition developing relatively straightforward solutions finding outliers classical nested loop join index join algorithms developed highly efficient partition algorithm mining outliers 
algorithm partitions input data set disjoint subsets prunes entire partitions soon determined contain outliers 
people usually interested small number outliers algorithm able determine quickly significant number input points outliers 
results substantial savings computation 
results extensive experimental study real life synthetic data sets 
results real life nba database highlight reveal expected unexpected aspects database 
results study synthetic data sets demonstrate partition algorithm scales respect data set size data set dimensionality 
furthermore outperforms nested loop index algorithms order magnitude wide range parameter settings 
acknowledgments gehani hank korth avi silberschatz encouragement 
support bansal shim impossible complete 
aar rakesh agrawal raghavan 
linear method deviation detection large databases 
int conference knowledge discovery databases data mining kdd portland oregon august 
ams rakesh agrawal heikki mannila ramakrishnan srikant hannu toivonen verkamo 
fast discovery association rules chapter 

bkss beckmann 
kriegel schneider seeger 
tree efficient robust access method points rectangles 
proc 
acm sigmod pages atlantic city nj may 
bl barnett lewis 
outliers statistical data 
john wiley sons new york 
dh richard duda peter hard 
pattern classification scene analysis 
interscience publication new york 
martin ester hans peter kriegel xu 
database interface clustering large spatial databases 
int conference knowledge discovery databases data mining kdd montreal canada august 
gm gibbons matias 
new sampling summary statistics improving approximate query answers 
proc 
acm sigmod conference management data june 
grs sudipto guha rajeev rastogi kyuseok shim 
cure efficient clustering algorithm large databases 
proc 
acm sigmod conference management data june 
jd anil jain richard dubes 
algorithms clustering data 
prentice hall englewood cliffs new jersey 
kn knorr ng 
algorithms mining distance outliers large datasets 
proc 
vldb conference pages new york usa september 
nh raymond ng jiawei han 
efficient effective clustering methods spatial data mining 
proc 
vldb conference santiago chile september 
ps preparata shamos 
computational geometry 
springer verlag 
roussopoulos kelley vincent 
nearest neighbor queries 
proc 
acm sigmod pages san jose ca 
rr rousseeuw 
computing depth contours bivariate point clouds 
computational statistics data analysis 
rs rajeev rastogi kyuseok shim 
public decision tree classifier integrates building pruning 
proc 
int conf 
large data bases new york 
sam samet 
design analysis spatial data structures 
addison wesley 
sam sarawagi agrawal megiddo 
discovery driven exploration olap data cubes 
proc 
sixth int conference extending database technology edbt valencia spain march 
tian zhang raghu ramakrishnan miron livny 
birch efficient data clustering method large databases 
proceedings acm sigmod conference management data pages montreal canada june 

