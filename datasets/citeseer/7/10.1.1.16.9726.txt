bounding worst case garbage collection time embedded real time systems kim chang shin school computer science engineering seoul national university seoul korea comp 

ac kr execution programs various data structures requires dynamic memory management garbage collection better productivity program integrity 
spite benefits garbage collection widely embedded real time systems partly causes unpredictable pause delay 
guaranteeing real time operations garbage collection aims bound estimate worst case computation time garbage collector application tasks 
introduce new technique bounding estimating worst case garbage collection time light task scheduling 
worst case live memory dominant factor determine worst case garbage collection time quantify worst case live memory states periodic tasks 
predictable real time copying collection algorithm order assess effectiveness proposed approach 
performance evaluation shows proposed approach provides safe effective bound garbage collection time reducing upper bound live memory size compared trivial bound 
demonstrates algorithm accomplish reduction memory requirement 

information technology aspect society industry distributed real time computing disciplines implemented forms component software software agents java virtual machines applets 
techniques characterized objects mobility autonomy 
execution programs various data structures requires dynamic memory management heap efficiently utilize supported part part brain korea project 
memory reclaiming unused memory space 
doing usually hold system responsible management job programmers better productivity robustness program integrity 
garbage collection process central memory reclamation 
garbage collector identifies data items spaces reuse system level 
spite advantages garbage collection widely embedded real time applications 
partly garbage collection may cause response time application unpredictable 
basic garbage collection works inherently worm fashion pause delay may intolerable applications require limited response time 
incremental garbage collection algorithms proposed distribute hide garbage collection pause time execution 
reduce intermediate pause delay provide bounded worst case performance 
real time garbage collection techniques integrated task scheduling proposed overcome limitation simple incremental collectors 
studies treat garbage collector background task highest priority task preset bandwidth 
order schedule garbage collector realtime task able predict worst case behavior garbage collector 
aims determine safe effective upper bound garbage collection time states task instances 
choose copying collector discussion automatically compacts live object areas simplifying estimation garbage collection time 
term garbage collector indicates real time copying collector specified 
call tasks created application may reachability heap objects unnoticed garbage collector 
garbage collection process copying collector consists major components traversal object evacuation memory initialization 
overhead components greatly depends amount live memory 
studies analysis pointers focus worst case live memory analysis 
study persson proposes live memory analysis annotation 
approach differs aspects require limited knowledge memory usage worst case memory allocation requirement stable live memory factor persson approach requires language modification annotations type declaration 
second consider periodic execution tasks 
introduces modification realtime copying collector previous 
derive worst case garbage collection time proposed algorithm 
effectiveness proposed approach assessed simulations trace data acquired applications written java 
rest organized follows 
section describes problem addressed 
section presents real time copying garbage collection algorithm estimation garbage collection time 
section introduce efficient live memory analysis 
evaluate effectiveness proposed algorithm section 
section briefly discuss design consideration embedded real time systems garbage collection 
concludes section 
problem formulation 
system model assumptions consider real time system set periodic priority ordered mutator tasks mn mn lowest priority task tasks follow fixed priority scheduling rate monotonic scheduling 
task model includes additional property memory allocation requirement mi 
mi characterized tuple mi ci ti di ji ai see table notations 
discussion assumptions assumption aperiodic mutator tasks 
assumption context switching task scheduling overhead negligible 
assumption precedence relations mis 
real time systems precedence constraint tasks producer consumer model 
precedence constraint easily removed partitioning tasks sub tasks properly assigning priorities tasks 
assumption loss generality 
assumption task instantly preempted higher priority task blocking factor 
assumption ci ti di ji ai known priori 
jth instance mi denoted mi released ready time ti ji assumed zero 
estimation ai generally applicationspecific problem ai specified programmer pre runtime trace driven analysis 
target system designed adopt dynamic memory allocation virtual memory 
garbage collector distinguishes memory objects longer garbage live objects reclaims spaces 
memory model model shown 
garbage collector reclaims unused memory rate fr mutator consumes available memory rate fc mi 
cumulative memory consumption mc mi defined ft monotonic increasing function 
memory consumption function fc mi various types functions depending scheduling strategy application 
hand derive upper bound mc mi worst case memory requirement task mi amounts prod uct ai worst case number time interval 
cumulative memory consumption mi amount available memory depends reclamation rate garbage collector 
mark sweep collector progressively reclaims heap area copying collector reclaims half total memory entirely flip time 
amount heap memory reproduced depends size live objects bounded lk 
garbage collector runs separate real time task runs context mutator execution depending implementations 
treats garbage collection request separate aperiodic task 
consider property real time garbage collection request 
release time completion time denoted respectively 
timing property characterized aperiodic request release time known priori 
released cumulative memory consumption exceeds amount free memory 
table 
notations symbol description mi mi periodic mutator task jth instance ci ti di ji ri worst case execution time period deadline release jitter response time mi ai maximum amount memory allocated mi ti ffi portion live memory objects ai mi inactive ffi garbage collection request coo rcc worst case execution time response time mc hi mc cumulative memory consumption hi sum hi hi lk amount live memory processed maximum value system memory requirement size semispace copying collector lcm period capacity sporadic server gk hard real time request 
tl garbage col lection request gk completed released 
suppose available memory certain threshold previous garbage collection request completed 
case heap memory fully occupied objects newly allocated objects 
garbage collector continue execute longer 
characteristics able estimate worst case garbage collection time guarantee schedulability hard real time preventing running memory 

scheduling support real time garbage collection studies started propose real time garbage collection techniques integrated task scheduling 
primary objective approaches meet deadlines hard real time mutator tasks preventing running memory 
proposes semi concurrent garbage collection scheme classifies tasks priority levels 
garbage collector medium priority runs background high priority tasks idle 
background policy may excessively reserve heap memory long response time 
kim propose scheduling technique sporadic server 
garbage collector runs highest priority task preset bandwidth overcome excessive memory reservation background policy 
assign shortest period periods sporadic server order garbage collector may run highest priority rate monotonic scheduling 
maximum server capacity reserved garbage collection determined condition 
allow aperiodic tasks capacity sporadic server garbage collection critical jobs 
objective scheduling approach reduce memory requirement 
system reserve certain amount memory prevent running memory 
define reservation interval denoted represent worst case time interval earliest time instant cpu time garbage collection available 
interval monotonic respect worst case response time gc 
aggressive scheduling employed provides shorter gc greatly reducing memory reservation 
reason base discussion aggressive scheduling scheme 
worst case amount reserved memory product worst case instances say ri worst case memory requirement mi say ai 
memory spaces live objects maximum amount denoted result total memory requirement written number periodic tasks 
shown memory reservation depends oc determined worst case garbage collection time cpu bandwidth reserved garbage collection 

estimation garbage collection time 
real time copying collector able predict worst case performance real time garbage collector ensure temporal integrity 
basic memory operations memory location modification short bounded 
synchronization overhead ptr ptr swap addr addr boolean swap addr addr ptr size ii zero fill new tospace size collect collect size true addr set forwarding pointer atomic operation return scan scan root set gc fails pt pt allocate new entry pt false set :10.1.1.39.8219
real time copying garbage collection algorithm garbage collector 
section introduces techniques incremental copying collectors brooks algorithm operations faster predictable 
due space limitations give detailed description heap structure 
reader referred 
root set scanning evacuation algorithm performs scan evacuation processes task longest period scheme 
helps avoid having garbage collector traverse floating garbage objects 
addition prevent unbounded blocking garbage collector scans root set steps just reserves tospace area objects referenced root set 
incrementally actual data adjusts forwarding pointer 
similar way normal evacuation object proceeds steps 
garbage collector reserves area new copy sets forwarding pointer new copy original object fromspace 
operation indivisible 
evacuation procedure incrementally object 
garbage collector keeps consistency heap keeping count bytes remains copied objects header modifying forwarding pointer object fully copied 
synchronization garbage collector share consistent view heap barrier methods 
studies prefer write barrier read barrier low cost 
traditional approaches immediately evacuate fromspace copy write barrier detects inconsistency caused pointer writes 
asynchronous evacuation overhead undesirable guaranteeing realtime properties 
addition aggressive approach may produce floating garbage objects increasing garbage collection time 
attempt modify lazy evacuation order reduce asynchronous evacuation floating garbage 
lazy evacuation technique requires additional data structure called update entry entry 
word long data structure entry address forwarding pointer starting address original copy pointers entries illustrated 
original lazy evacuation scheme requires separate memory area entries scheme locates entries position pointed allocation pointer tospace 
normal evacuation procedure garbage collector traverse evacuate entries traverses objects starting bottom tospace visits allocation pointer 
write barrier traps inconsistent pointer writes ptr forward 
pointer field original copy flag ptr data field original copy ptr previous entry ptr entry fromspace tospace 
write barrier structure adding new entry initializes object may misinterpret obsolete pointers result memory leak 
garbage collector initializes new tospace right flip incremental initialization 
efficient hardware support reduce initialization time 
safest ways initialization fill memory zero 
peak performance zero fill operations greatly enhanced example gbytes sec synchronous graphic ram 
realtime tasks periods hundreds microseconds require tens kilobytes memory atomic memory initialization completed flip time 

estimation records target address parameter write entries garbage collection progress 
operation indivisible 
major overhead proposed write barrier manipulation entries 
pointer writes occupy small portion total memory operations cumulative write barrier overhead may cause performance dation 
assert barrier bring intolerable overhead reason 
pointer entry modified repeatedly cases 
real time control applications utilize data produced li new input gdi sup pose garbage collector completely scans object mutator tries update fields input iteration object 
garbage collector object referenced field write barrier trap pointer write operation allocate new entry 
mutator task released garbage collection progress replace pointer entry pointer object tospace 
pointer write operation field cause manipulation entry 
garbage collection procedure garbage collector starts clean process 
clean phase involves scanning entries point live objects 
entry address forwarding pointer field original copy garbage collector safely substitute pointer new copy pointer entry clean process 
lines describe detailed operation 
memory initialization go collectors incremental copying collectors start mutator terms abstraction means thin garbage collector colored object black traverse object 
copying garbage collection process composed components traversal including root set live objects normal object evacuation cleanup process active entries memory initialization 
worst case garbage collection time may calculated follows sizeof word cos sizeof word denote maximum size root set maximum number active entries word size supported target system respectively 
component relies properties task set run time environments programmer compiler 
generally values stack global variables hold heap objects form root set 
maximum size root set known priori 
example modem embedded os enables programmers specify maximum stack size task creation 
java language specifies maximum stack size local variable size method 
global variables registered root set compiler maximum size programmer 
traversal scanning overhead depends number fields scanned object 
estimation uses number words number size field general equals sizeof word number words upper bound number fields scanned 
accurate estima tion require designed line analysis 
coefficients cl cs dependent underlying run time environment hardware os compiler support 
implementation concentrate reducing value coefficients traditional incremental approaches 
example hardware support section reduce 
eq 
indicates great influence worst case garbage collection time determines cpu utilization garbage collector safe memory requirement 
reason need effective approach estimation guarantee minimum memory requirement 

live memory analysis investigate worst case live memory 
previous sections show worst case live memory dominant factor determine garbage collection time live memory analysis provides basis worst case garbage collection time analysis 
classify heap objects global local objects suggested 
local objects reachable task allocated objects context global objects referenced tasks 
pointed amount global live object relatively stable program execution global objects significantly longer lived local objects 
hand amount local live objects continues vary time garbage collector triggered 
analysis concentrates worst case local live memory 
previous studies average execution time copying collector decreases heap size increases short lifetime objects characteristics copying collector 
non real time long running applications produce garbage interval successive garbage collections longer 
true real time periodic tasks dealt 
live memory depend heap size state task 
function ai varies execution jmi stabilized instance 
approach aims analyze live memory state periodic mutator tasks 
traditional pointer analysis techniques give useful information stable live memory factor approach entirely rely 
mainly consider periodic execution tasks 
find worst case live memory classifying states task instances categories active inactive 
order cover arbitrary live memory distribution set amount live memory active task ai 
contrary amount live memory inactive task jm converges 
consequently sum local live memory lk amounts lk loca jaj ira task running preempted higher priority tasks time task regarded active 
task regarded inactive 
active inactive denote set active tasks set inactive tasks time respectively 
max imum value toc loca max jaj 
jt jt assume amount global live memory constant stable execution application 
equals sum lo 
difficult predict task active arbitrary time instant interference garbage collector may produce periodic tasks 
live memory worst case interference occurs garbage collection starts highest priority task runs tasks preempted hi active 
trivial upper bound cal equal ein ai pessimistic 
introduce step approach order find tighter bound lo lieu trivial upper bound 
simplicity assumption hi harmonic respect vi hi harmonic respect task hi ti divisible tj 
harmonicity constraint helps prune search space 
step 
find active windows denote earliest start time latest completion time jmi respectively 
find active window si jmi follows csj denote set tasks jmn priority higher ti ltn denote lowest priority task csj worst case response time respectively 
ignore cpu bandwidth reserved garbage collection computing best case garbage collection request pending 
smallest solution recurrence relation ct le csj hp set tasks priorities higher 
equals sum ti jmi start higher priority tasks released 
contrary compute assumption total capacity sporadic server garbage collection 
words periodic task computation time period ts respectively 
denotes worst case response time total capacity sporadic server garbage collection yi ti compute smallest solution recurrence relation ci cl hp set tasks including sporadic server priorities higher mi 
ai ti rn ti step 
find transitive preemption windows pf denote time intervals mi preempts mj overlapped intervals ai 

consider immediate preemption finding preemption win dow 
mk csj mk mj released ti mn immediately preempts mi 
mi regarded inactive 
step iterates transitive preemption windows 
computational complexity step 
step 
compute worst case live memory compute live memory eq 
results step 
set maximum value loca show example clarify operation proposed algorithm 
example consider task set parameters table 
table 
example task set ai jm step 
active windows mis example step 
active windows shown step find preemption windows combinations ma 
step 
result eq 
combination maximizes amount local live memory 
case loc reduced compared trivial bound 
shown example proposed algorithm provides tighter bound trivial upper bound 
necessary prove safety algorithm 
actual preemption scenario quite different analysis know line start easily prove safety algorithm 
starts behaves periodic task period computation time completed 
proposed algorithm assumes critical instant estimate si active window algorithm completely includes actual active window mi time instant gk released 
revisit estimation worst case memory requirement 
worst case memory requirement sum memory reservation periodic mutators worst case live memory shown eq 

memory reservation depends cac vice versa need calculate amount reserved memory recurrent relation 
compute shown 
second assign amount memory allocated mi js initial value recurrence equation performs tn computation algorithm uses cad derived ems compute computation terminated result sum procedure 
vi prev compute described section compute ri compute mp 
mv 
algorithm computation memory requirement table 
general information sample applications sample applications description lms fixed point adaptive fir filter filter coefficients updated input 
ar frequency estimation point hilbert transform fir filter 
real time radar signal processing fft 
fast convolution fft 
power spectral estimation fft 
table 
worst case task sets tav ma sim anal ub lb glob ts ii ts ts 
performance evaluation evaluate effectiveness proposed approach worst case memory requirement analysis series simulation runs 
addition compare memory requirement new approach traditional background policy 
wrote sample applications java experiments 
applications lms shown table 
partly modified garbage collector personal java jvmpi java virtual machine profiler interface 
modified version personal java performs live memory traversal bytes memory allocation logs results 
currently modified version differs original version profiling mechanism 
parameters obtained trace driven analysis applica tions 
worst case memory requirement tasks ai stable live memory factor inactive tasks maximum global live memory memory allocation distribution simulation study consider sets periodic tasks sample applications 
specifications appendix 
simulations determine garbage collection time amount live memory derive cients eq 
static measurement prototype garbage collector running mhz mpc processor 
order realize actual memory allocation behavior applications trace driven memory allocation derived sample applications 
illustrates memory allocation distributions normalized execution time sample applications 
previous assumes memory allocation behavior follows uniform distribution results noticeable gap analytic memory requirement simulation results 
confirm effectiveness live memory analysis comparing analytic memory requirement simulation results 
table shows worst case memory requirement task set 
ms ma denote worst case memory requirement obtained simu lation analysis respectively 
local local denote worst case local live memory lb ub simulation analysis lower bound upper bound derived eq 
respectively 
results table demonstrate approximations analysis relatively accurate compared simulation results 
analytic results show proposed technique gives reduction amount worst case local live memory compared task set moderately low average live memory portion proposed technique reduce total system memory requirement 
memory reservation periodic dominant factor determine total memory requirement 
task sets proposed technique decrease ms compute eq 
algorithm 
reduction amount live memory decrease reduce proportionally 
proposed scheme useful dedicated systems cost performance competitiveness 
addition compare memory reservation background policy proposed policy task sets 
assume background policy identical scheme 
table shows results 
table proposed algorithm accomplish reduction amount reserved memory 
assuming identical schemes reduction system memory requirement 
results tables allocation radar processing allocation 
ll im normalized execution time normalized execution time fast allocation normalized execution time 
memory allocation distribution sample applications total execution time table 
memory reservation background policy proposed policy task set ii background ts ts ts proposed remarked optimization amount reserved memory great effect system memory require ment 

design considerations ing resource primary consideration cpu memory resource 
finds memory requirement maximum 
maximum determined timing properties ci ti periodic tasks 
contrary cpu resource primary consideration proposed algorithm finding minimum heap size 
example table memory system achieve reduction leads reduction terms total cpu utilization 
relation cpu memory resource depends characteristics task sets gives useful information design embedded real time systems garbage collection 

drawback approach aperiodic tasks cpu bandwidth reserved garbage collection garbage collection progress mentioned section 
tight constraint 
attempted find smaller minimizing memory requirement 
table shows memory requirement ts 
results show smaller may produce lower toc may accordingly reduce total memory requirement 
smaller results ac increasing memory reservation mev 
suggest determined accord table 
memory requirement ts varying proposed line analysis worst case garbage collection time embedded real time systems 
aggressive approaches real time garbage collection schedule garbage collector mutator tasks 
approach treats garbage collector hard real time aperiodic task system control invocation garbage collector 
able predict worst case garbage collection time model garbage collector real time task 
worst case garbage collection time copying collectors greatly depends worst case live memory concentrate estimation worst case live memory 
short bounded pause delay basic operations garbage collector essential guaranteeing realtime performance scheduling integrated garbage collection 
modified real time copying garbage collector provide bounded worst case formance 
performance evaluation demonstrates proposed algorithm reduce upper bound live memory size compared trivial upper bound 
accordingly proposed approach reduces total memory requirement 
simplicity assumed blocking factor 
consider blocking factor caused synchronization shared resource 
blocking factor includes synchronization heap access pointer writes 
appel :10.1.1.39.8219
garbage collection faster stack allocation 
information processing letters 
baker 
list processing real time serial computer 
communications acm apr 
barrett zorn 
lifetime predictors improve memory allocation performance 
proceedings sigplan conference programming languages design pages jun 
brooks 
trading data space reduced time code space real time collection stock hardware 
conference record acm symposium lisp functional programming pages 

study allocation behavior specjvm java benchmarks 
proceedings th european conference object oriented programming jun 

real time dsp 
prentice hall ptr 
gerber hong 
guaranteeing endto timing constraints calibrating intermediate processes 
proceedings real time systems symposium pages dec 

scheduling garbage collection embedded systems 
phd thesis lund university july 
java virtual machine profiler interface jvmpi 
ava 
sun corn product dk docs guide jvmpi html 
kim chang kim andh 
shin 
scheduling garbage collector embedded real time systems 
proceedings acm sigplan workshop languages compilers tools embedded systems pages may 
lehoczky sha ding 
rate monotonic scheduling algorithm exact characterization average case behavior 
proceedings real time systems symposium pages dec 
liu layland 
scheduling algorithms multiprogramming hard real time environment 
journal 
nilsen schmidt 
high performance hardware assisted real time garbage collection system 
journal programming languages 
persson 
live memory analysis garbage collection embedded systems 
proceedings acm sigplan workshop languages compilers tools embedded systems pages may 
rinard 
pointer analysis multithreaded programs 
proceedings acm sigplan conference programming language design implementation pages may 
sha lehoczky 
aperiodic task scheduling hard real time systems 
journal real time systems 
wilson 
uniprocessor garbage collection techniques 
technical report university texas jan 
yong horwitz reps pointer analysis programs structures casting 
proceedings acm sigplan conference programming language design pages may 

real time garbage collection general purpose machines 
journal software systems 
appendix table 
specifications task sets task set ii task cl ti ai ada ts ads ada ad ts ads ado ads ado ts 
