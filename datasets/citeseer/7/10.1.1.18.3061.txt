automated program generation model transformation systems budapest university technology economics dept measurement information systems budapest tud 
mit bme hu 
model transformation systems graph transformation systems perform translations languages defined corresponding metamodel type graph 
current proposes reflective method automatic generation implementation transformation systems derived high level specification consisting set graph transformation rules control flow graph 
program generator takes uml profile tailored model transformation systems input produces output prolog program successive model transformation steps 
respect core program generator implemented hand core provides automation additional features viatra model transformation system 
keywords model transformation graph transformation systems automated program generation model transformations system design unified modeling language uml de facto standard visual modeling language object oriented design academic investigations engineering experiments revealed shortcomings regarding especially imprecise semantics lack flexibility domain specific applications 
uml request proposal issued omg addressed single language family languages individually defined semantics kernel metamodeling language 
formal semantics different views system separate diagrams class diagrams statecharts sequence diagrams defined different semantic notations petri nets sos rules graph transformation systems integration local views consistent global view system requires precise specification transformations uml models 
practice transformations necessitated purposes model transformations language control correctness consecutive refinement supported hungarian national scientific foundation steps ii model transformations different languages provide precise means project semantic content diagram indispensable consistent global view system design iii visual uml model sentence language uml family transformed semantic domain process called model interpretation 
syntax uml models defined visually corresponding metamodel straightforward representation models rely directed typed attributed graphs underlying semantic domain 
graph transformation capturing semantics model transformations natural choice fits engineering practices consequence visual expressiveness 
formal specification transformation precise formally verified implementation highly error prone due huge abstraction gap visual uml models formal mathematical descriptions 
reason automated generation program implements transformation major requirement model transformation systems 
viatra visual automated model transformations viatra visual automated model transformations prototype tool developed budapest university technology economics provides general means specify implement various transformations models defined corresponding metamodels paradigm graph transformation 
viatra interface user interface viatra set xmi files includes descriptions metamodels models transformations phases model transformations 

metamodels uml mathematical languages defined corresponding metamodel metamodel petri nets state transition systems constructed commercial uml case tool having xmi export facilities 

transformations elementary model transformation steps defined specially structured graph transformation rules entire computation specified control flow graph 
practice graph transformation rules control flow graphs described high level uml notation transformation specific profile uml class diagrams 

models obtaining flexible general interface input output models viatra uml mathematical models xmi files conforming metamodel 
viatra features current version viatra supports main features 
xmi xml metadata interchange standard xml description format systems mof metamodeling 

automated dtd generation corresponding dtd document type definition generated automatically metamodels 

automated program generation viatra supplied input files transformation metamodels automatically generates declaration transformation prolog including implementation control flow graph graph transformation rules 

automated transformation transformation program executed arbitrary source model target model generated 
viatra currently uses prolog underlying transformation engine concrete transformation models performed prolog hidden user provides efficient solution xslt engine 
current provides overview underlying program generation method viatra detailed description 
main characteristics solution intermediate transformation steps avoid re implementing code generation executable programs input descriptions model checking tools ii reflective specification method embedded code generation process implementation model transformation systems specified model transformation systems iii bootstrapping step improve quality code generation previous version program generator generating version program generator analogy known bootstrapping techniques compiler design 
automated program generation model transformation systems theoretical background model transformations provide brief overview main concepts model transformations model graphs model transformation rules model transition systems 
definition 
model graph directed typed attributed graph 
type graph model graph called metamodel related model graph typing homomorphism 
metametamodel common language words top type graph describing metamodels reflective type graph 
model transformation systems source target models related graph fact ordinary model graph 
general graph common abstraction source target models relating corresponding nodes edges 
definition 
model transformation rule special graph transformation rule graphs model graphs applied specified mode extensible stylesheet language transformation xml technology describing mainly syntactic transformations xml files 
application host graph replaces occurrence left hand side image right hand side yielding derived graph performed 
finding occurrence image isomorphic non isomorphic 
checking negative application condition tain nodes edges prohibit presence cer 
removing nodes edges graph yielding context graph dangling edges removed point 
adding nodes edges graph attaining derived graph currently behavior viatra follows conceptually single pushout approach removing dangling edges allowing non isomorphic images graph pattern matching concrete graph manipulations defined implemented logics rewriting showing closer correspondence techniques 
entire model transformation process defined initial graph manipulated set model transformation rules micro steps executed specific mode accordance semantics macro steps hierarchical control flow graph 
definition 
model transition system respect type graph triple defines initial graph set model transformation rules compatible set control flow graphs defined follows 
types nodes cfg associated rule start try forall loop call 
types edges succeed fail 
control flow graph evaluated virtual machine traverses graph edges applies rules associated node 

execution starts start finishes node 
types nodes rules associated 

try node reached corresponding rule tried executed 
rule applied successfully node determined succeed edge case execution failed fail edge followed 

loop node associated rule applied long possible may cause non termination macro step 

forall node reached related rule executed distinct possible occurrences current host graph 

call node associated cfg rule state cfg virtual machine saved execution associated cfg started analogy function calls programming languages 
sub cfg machine terminated saved state restored execution continued accordance outgoing edge succeed fail 
case study semantics message sequence charts provide deeper insight expressiveness model transformation systems consider semantic interpretation message sequence charts abbreviated mscs sequel 
semantics mscs define partial order events semi formal description captured corresponding model transformation system 
process send precedes events event message receive fig 

message sequence charts visual syntax metamodel message sequence charts sample msc model depicted fig 
metamodel constructed processes depicted rectangles communicate sending receiving messages shown arrows 
fact message sent received represented corresponding event process line depicted vertical lines 
message supposed sent message arrow representing appears arrow semantic interpretation define partial order msc events formalize model transformation system fig 
follows 
causality 
send event receive event message precedes 
appears process line send event precedes order reflects fact send event wait events occur 
hand typically control order receive events occur 
fifo order 
send events process line precedes corresponding receive events transitivity 
precedes relation transitive precedes precedes precedes example 
select rule deeper investigations 
control flow graph rule applied loop mode semantic transformation process generates transitive closure precedes relation 
lhs send rhs lhs process rhs events events event message receive process events events send event message precedes precedes receive lhs rhs events send rec events events send rec events process events message message send rec process events lhs event rhs precedes precedes process events start precedes event event forall loop message precedes message send rec fig 

defining semantics message sequence charts process event precedes precedes precedes event event events forall forall connected edge connected tor left hand side rule connected edge negative condition edge added leading tor defined right hand side 
loop mode prescribes rule applied long possible 
rules corresponding model transformation system straightforward respect metamodel informal semantics mscs clearly demonstrates descriptive power approach 
control flow graph case study relatively simple cfgs restricting valid computations helps reduce complexity rule preconditions resulting efficient pattern matching 
case safely omit negative application conditions rules executed forall mode duplicating precedes edges rules applied single deterministic transformation step 
program generation graph transformation rules automated program generation viatra allows transformation designers focus design model transformation implementation 
previous experiments project hide demonstrated quality automatically generated executable transformation program higher manually written target program 
automated program generator completed time workload related design single transformation drastically decreased 
viatra program generation process model transformation rules divided intermediate steps 

model transition systems specified uml case tool rational rose experiments exported standard xmi format 

uml model transformed model conforming metamodel graph transformation systems 

viatra model graphs represented predicates fact database 
reason previous model projected logic model containing sequence terms rule 

bridge visual graph textual language prolog provided parse tree prolog code 
sense logic model transformed corresponding prolog parse tree target prolog code printed traversing tree order way 
importance intermediate steps threefold 
huge abstraction gap visual uml specification transformation high level programming language prolog 
splitting transformation decreases complexity individual steps eases implementation verification automated program generation 
secondly intermediate models increases reusability 
instance generating input language model checker verification model transformation ongoing research activity final step needs altered 
intermediate model provides right basis generating upcoming standard xml description graph transformation systems simple transformation xmi format gxl 
fact intermediate transformation step specified implemented model transformation means entire code generation process captured graph transformation 
sense implementation model transformation rules specified model transformation rules 
approach similar bootstrapping process compiler design instance compiler written compiled existing compiler recompiled provide efficient reliable target code 
viatra current version program generator implemented manually versions additional features efficient reliable target code generated existing version program generator 
node msc message node msc process edge msc send edge msc events node msc node msc event edge msc receive edge msc events node msc node msc add edge msc precedes 
edge msc add edge msc precedes 
node msc event edge msc precedes node msc event edge msc precedes node msc state edge msc precedes fail true add edge msc precedes 
node msc process edge msc events node msc edge msc events node msc edge msc edge msc send node msc message edge msc receive node msc edge msc send node msc message edge msc receive node msc msc forall forall forall add edge msc precedes 
loop 
fig 

program generation transformation rules example 
continue case study brief insight structure generated prolog code see fig 

discuss behavior rule details 
prolog code rules implements graph pattern matching consecutive unifications variables instantiated 
outermost terms node edge responsible instance hierarchical matching patterns node type matched event pattern case mscs 
negative part parenthesis causes failure current matching substate ofp steps matching examined backtracking 
successful pattern matching edge added 
example demonstrates generated program partially contains transformation dependent translated prolog code sequence terms representing queries model graph interpreted calls built routines tra library node edge routines implementing different modes rule application discussed upcoming section 
pc step apply rule pc exec rm forall forall rule call rule fail 
forall rule 
implementing virtual machine apply rule fig 

executing step virtual machine implementation virtual machine executes control flow graph cfg model transition system builds reflective property program generation viatra operational semantics virtual machine defined model transition systems 
respect program corresponding rule generated automatically implementation meta cfg cfg defines behavior virtual machine simple 
entire semantics virtual machine consists rules handling forall nodes depicted fig 

example 
semantics rule follows 
virtual machine execute step pc step active cfg node active graph attribute associated graph transformation rule set true order select rule execution 
program set indicating virtual machine execute rule making step represents execution mode rule set forall 
rule execution phase piece code right region fig 
called responsible executing rule possible matches current state 
obtained causing artificial backtracking rule application succeeded 
possible matches processed application rule forall mode successfully completed including case possible matches lhs 
current node control flow graph updated success rule application proceed new current node 
current automatic program generation framework implementation model transformation systems process program generation specified consecutive model transformations 
approach implemented viatra tool reflective sense versions program generator derived previous version similarly bootstrapping techniques compiler design 
fact virtual machine viatra executes control flow graph implemented automated program generator graph transformation rules 
viatra applied successfully provide automated implementation transformations specified means model transition systems 
specification implementation viatra virtual machine required graph transformation rules simple automata 
transformation uml statecharts extended hierarchical automata eha carried provides formal operational semantics statecharts 
formalized entire transformation model transitions systems rules 
original defined eha semantics kripke automata 
provided visual semantics eha model transition systems having approximately rules simple lhs graphs 
completeness uml statechart specifications dependable environment investigated 
currently automated verification program implementation viatra 
transformation uml statecharts stochastic reward nets implementation having currently rules separated subproblem provide access petri net analysis techniques 
viatra graph transformation tool state art tools graph transformation systems genged agg diagen progres fujaba evolving decade viatra naturally tool capable performing model transformations 
believe viatra tailored special needs model transformations uml semantic domains extent tool flexible powerful specific application domain graph transformation systems sophisticated general purpose graph transformation tools 
underlying model transformation methodology ii openness compliance leading industrial standards iii ongoing integration model checking tools viatra unique core graph transformation engine 
openness compliance standards viatra open environment built xmi technology de facto standard uml modeling environments 
xmi dtds non uml models generated automatically metamodels flexible solution domain specific applications tools forcing fixed set xml elements 
similarly story diagram rule descriptions fujaba viatra uses uml profile class diagrams formal specification language model transformations 
model transformations transformations uml models necessitate manipulate complex data structures large number rules see benchmark transformations java implementation uml models specified graph transformation rules graph transformation tools control condition impractical applications due increased level nondeterminism 
addition typical model transformation rule executed forall mode independent matching 
forall type rule applications directly supported general purpose graph transformation tools 
cases single language involved transformations simultaneous handling multiple metamodels flexible tools 
verifying model transformation systems ongoing research activity integrates model transformation systems existing model checking tools formal verification purposes requires kripke automata system derived intermediate semantic representation automatically generated target program 
benchmark application generate sal specifications uml statecharts statecharts semantics captured model transformation systems 
acknowledgment author andr suggesting improvements early versions anonymous referees comments 

ehrig 
conceptual model graphical editor genged visual definition visual languages 
ehrig engels 
kreowski rozenberg eds proc 
theory application graph transformations vol 
lncs pp 

springer 

bensalem ganesh lakhnech munoz owre rue rushby sa di shankar tiwari 
overview sal 
holloway ed fifth nasa langley formal methods workshop pp 



dal cin 
dependability analysis early phases uml system design 
international journal computer systems science engineering vol 
pp 


dal cin 
evaluation safety critical systems guarded statecharts 
paul meadows eds proc 
fourth ieee international symposium high assurance systems engineering 
ieee 

ehrig engels 
kreowski rozenberg eds 
handbook graph grammars computing graph transformation vol 
applications languages tools 
world scientific 

ehrig heckel ribeiro wagner corradini 
chap 
algebraic approaches graph transformation part ii single pushout approach comparison double pushout approach pp 

world scientific 

engels sauer wagner 
uml collaboration diagrams transformation java 
france rumpe eds proc 
uml unified modeling language 
standard 
second international conference vol 
lncs pp 

springer 

fischer 
story diagrams new graph transformation language uml java 
ehrig engels 
kreowski rozenberg eds proc 
theory application graph transformations vol 
lncs pp 

springer 


uml standardization odyssey 
communications acm vol 


th minas 
generating diagram editors providing free hand editing syntax directed editing 
joint workshop graph transformation systems pp 




automatic verification uml statechart diagrams spin model checker 
formal aspects computing vol 
pp 


nickel 
tool demonstration fujaba environment 
nd international conference software engineering icse 
acm press limerick ireland 

pap 
checking general safety criteria uml statecharts 
ed proc 
computer safety reliability security th international conference vol 
lncs pp 

springer 

peled 
software reliability methods chap 
message sequence charts pp 

springer 

rozenberg ed 
handbook graph grammars computing graph transformations vol 
foundations 
world scientific 

sch rr 
chap 
programmed graph replacement systems pp 

world scientific 

sch rr winter 
chap 
progres approach language environment pp 

world scientific 

taentzer 
common exchange formats graphs graph transformation systems 
padberg ed uniform approaches graphical process specification techniques vol 
entcs 



mathematical model transformations system verification 
tech 
rep budapest university technology economics 
www inf mit bme hu publication publication htm 


designing automatic transformation visual languages 
science computer programming 
print 

