brics basic research computer science believe machine checked proof robert pollack brics report series rs issn july copyright fl brics department computer science university aarhus 
rights reserved 
reproduction part permitted educational research condition copyright notice included copy 
see back inner page list brics report series publications 
copies may obtained contacting brics department computer science university aarhus ny munkegade building dk aarhus denmark telephone telefax internet brics brics dk brics publications general accessible world wide web anonymous ftp urls www brics dk ftp ftp brics dk document subdirectory rs believe machine checked proof robert pollack brics computer science dept aarhus university dk aarhus denmark suppose say machine checked proof fermat theorem flt 
putative machine checked proof evidence belief flt 
start position personal experience understanding attain belief experience engage intuition mental processes impossible formalise 
machine checked proof mean formal derivation formal system am talking derivability truth 
want talk believing actual formal proof formal proofs principle interesting approach problem feasible 
try read proof just proof journal current state art proof surely long confidence understood 
presents technological approach reducing problem believing formal proof psychological philosophical issues believing conventional proof mathematics journal 
approach entirely successful philosophically fundamental difference machine checked mathematics depends empirical knowledge physical world informal mathematics needs knowledge see section 
rest outline approach mention related 
sections discuss expect proof add details approach pointing problems arise concentrate believe primary technical problem expressiveness feasibility checking formal systems representations mathematical notions 
outline approach problem believe flt putative proof formalised logic 
assume logic believe consistent appropriate flt 
thing give computer files 
may questions physical representations files physically version appears sambin smith editors years constructive type theory oxford university press 
basic research computer science centre danish national research foundation 
author edinburgh university chalmers university 
pollack read parse proof correctness hardware software things ignore section 
approach separate problem subproblems ffl deciding putative formal proof really derivation formal system formal question ffl deciding proves really informal meaning claimed informal question 
theorem 
putative proof really derivation formal system 
formal question answered machine 
difficulty believe machine answer trust proof checking program compiler processed operating system supporting hardware usually taken crux problem believing machine checked theorems 
address problem independently check putative proof simple proof checking program logic written metalanguage programming language logical framework 
order believe putative derivation correct believe simple proof checker correct 
mind proof checking program checks explicit derivations logic verifying step derivation follows specified rule logic heuristics decision procedures proof search required checking techniques may constructing proof place 
simple proof checking program formal object smaller easier understand non trivial formal proof approach greatly simplifies problem see section 
am suggesting simple proof checker discover construct formal proofs check proofs constructed user friendly tools 
goal reduce believing formal proof issues believing conventional proof favored technique believing correctness simple proof checker read understand program light knowledge logic checked semantics metalanguage checker written 
available techniques task simple possible lcf style gordon milner wadsworth implement simple checker lines code critical correctness executable specification logic logical framework generic proof checker 
logic simple meta language simple semantics sum total conversely moore commented shankar nqthm proof godel incompleteness theorem wanted believe checked nqthm better read proofs read code nqthm code longer proofs 
lcf style architecture proof checker implementation strongly typed programming language standard ml object logic theorems form type construction theorems controlled soundness programming language type system 
pollack gives modern view variations 
believe machine checked proof required read understand longer difficult understand conventional proof belief putative derivation attained personal experience understanding simple proof checker 
approach differs conventional reading understanding proof indirect kind cut rule meta level readers understanding personal intuition believe proof personal intuition believe mechanism check proofs 
understood simple proof checker believe correctly checks derivations formal system reason believe correctness derivation accepts 
techniques gain confidence proof 
proof checker publicly available library checkers refereed experts high confidence check previous examples 
logics accepted appropriate formalisation large bodies formal mathematics developed logics independently refereed simple proof checkers necessary users may prefer different tools constructing proofs place 
techniques similar gain confidence conventional proofs reliable approach 
theorem 
having believed putative proof derivation claimed formal system ask prove flt 
meaning formal theorem really claimed 
informal question answered machine side equivalence informal bridge fundamental gap understanding want consider formal theorem light understanding formal system logic assumptions proof definitions stating formal theorem 
difficulty read formal proof decide meaning size obscure presentation formal proofs 
issue overlooked discussions reliability formal proof 
don need read entire proof order believe theorem 
reason believe putative proof correct derivation logic independent checking outstanding assumptions formal statement theorem definitions hereditarily stating formal theorem read 
formal proof partially generated machine may contain definitions lemmas need read trust correctly formulated allowed logic checked trusted proof checker 
distant 
bridging informal formal gap may done gap bridged foundational level 
mathematics done formally accepted formal definitions basic mathematical notions new definitions conjectures stated terms formal notions question arise string symbols really flt 
pollack trusted proof checker print parts formal proof need read 
necessary trust tool shows assumptions proof formal proof big ascertain really assumptions 
understanding formal system decide formal statement means informally claimed 
anyway subtask believing conventional proof second subproblem believing formal proof difficult corresponding aspect believing conventional proof 
having understanding gain confidence discussing problem knowledgeable readers step approach 
related prototypical topic demillo lipton perlis argued mathematical proofs increase confidence truth mathematical statements subjected social mechanisms mathematical community machine checked proofs 
acquire credibility gradually mathematical theorem believes blindly pure act faith 
agree statement completely disagree second means social mechanisms mathematical community operate formal proofs independent checking 
independent checking new idea 
discussed increasing confidence computer enumerative search lam see section 
considered standard approach tasks computing digits mentioned cohn 
proposal similar verify proofs programs produce detail slaney 
discussion possibility desirability pursuing formal mathematics boyer harrison 
guess technologies automated proof search highly developed economic pressure reliable hardware software applied tactics proof checking formal mathematics practical reality foreseeable 
addresses points necessary program 
expect proof 
belief held human person experiences understanding experiences understanding derive perception evidence 
certain areas discourse law mathematics precise rules kind perceptions accepted evidence 
matter precise rules evidence depends operations human consciousness apply rules experience understanding 
claiming deep operations human consciousness things say human beliefs 
believe machine checked proof truth god mathematics needs done 
bishop access truth aspect human experience including formal informal mathematics predictions world falsified experiment 
formally verify hardware software meets specification uncertainty behavior physical object specification respect model physical world completely model world 
deep claim serious limitation practice mathematics 
problem stems broad notion truth restrict comments proof suggesting approach question peano arithmetic zf set theory calculus constructions cc 
proves flt definitions natural number addition certainty moment find error brain may disappear heisenberg uncertainty principle replaced new brain thinks proof correct 
levin quoted horgan experience understanding believing proof time seeing error 
experience acknowledge happen 
notion certainty truth relevant human knowledge 
view accepted conventional mathematics practitioners talk certainty correct 
proof 
example lam talking reliability enumerative searches computer notice assertion correctness absolute nearly certain special characteristic computer result 
lam italics bold show contrast belief knowledge absolute 
useful analysis possible probability error caused software bugs big calculations don think readers proofs want 
important knowledgeable people working field attain belief 
lam commenting proof exist finite projective planes order uses hours supercomputer time running highly optimised complicated programs different cases 
clear belief argument hard come independent checking lam suggests isn absolutely certain way reader apply intuition attain belief 
aside approach raise possibility enumerative searches lam proof famous appel haken proof color theorem accepted conventional proofs pollack formal proofs believable indirect means independent checking 
example type theory construct inhabitant color theorem just believable argument formal object proving program lambda term correctly tests numbers certain properties proving certain finite set numbers properties map colorable executing program finite set showing lambda terms convertible computation 
probabilistic proofs red herring arises demillo proof uncertain abandon deterministic notions proof favor probabilistic proof 
proof systems involving random choices coin tosses smaller derivations deterministic counterparts 
carry probability error probability bounded reduced desired positive number 
probabilistic nature systems doesn mean allowed mistakes applying rules 
random choices independent trace steps probabilistic proof convincing toss coin may believe probabilistic proof see written trace proof coin toss outcomes may faked give desired result 
probabilistic approaches support claim appropriate warrant proof correctness direct understanding proof procedure probabilistic testing asks occasional random input believed proof probabilistic proof similar suggestion indirect checking 
explanation explanation purely informal pointing author proof wants reader see 
pointing kind abstraction useful formal proof informal proof 
formal mathematics explanation bearing correctness putative proof may important process constructing proof reader bridging formal informal gap see formal theorem expresses informally claims 
details approach section treats points postponed suppressed section concludes overview gained 
reading files parts approach independent checking understanding statement theorem require examining proof files 
questions arise ffl correctness hardware software read files long ascii string ffl correctness software parse ascii string proof pretty print parts read 
job software hardware platform section 
consider parsing pretty printing 
believe machine checked proof second part approach requires read formula derived verify really flt 
read concrete representation formula ascii string proof checker uses representation syntax tree 
don understand relationship representations proof checker says believed matter trustworthy checker level representation 
overlooked discussing lcf style proof checkers correctness kernel implementing proof constructors taken critical part program 
consequently language formal system simple formally explained way 
proof tools support complex user extensible syntax syntax entered control keys special editors 
may helpful users constructing proofs browsing libraries believe checker support official syntax printable 
theorem 
putative formal proof flt constructed 
users interacting proof tool alf coq hol isabelle lego nqthm 
develop file stimulates tool print qed 
proof script formal derivation contains instructions proof tool find derivation script refers heuristics decision procedures tactics particular proof tool 
programs compute derivations official formal system derivable rules arbitrary searches may fail pollack 
example proof tools support tautology checking equality rewriting tactics 
crucially need understand tactics heuristics order independently check claimed proof flt 
principle tactics succeed task check results follow official derivations definition proof checking 
proof tool write complete official derivation constructs proof script 
checking derivation simple thing able independently check official derivation flt simple proof checker trust 
questions ask ffl feasible write official derivation check ffl trust proof checker 
question addressed section consider 
hardware software stack confidence proof just machine checked 
layers hardware software involved checking proof flt 
top layer simple proof checking program specified formal system coded programming language 
bottom layer physical machine 
intermediate layers include compiler linker operating system hunt moore young show system formalised stack machines 
interfaces stack specified example programming language semantics operating system definition hardware definition 
layer implements pollack specification terms layer layer verified stack verified implementation top layer specification terms physical model machine bottom layer 

limit current technology current practice layers formally specified verified 
computer system bugs confidence behavior general purpose computing environment users testing environment time allowing consensus develop 
lower layers stack largely interchangeable allowing independent checking 
example coded lcf style proof checker standard ml sml compile different sml implementations run different operating system processor platforms proof re checked depending particular system platform 
bug computing platform causes proof checker erroneously accept proof incredible independent platforms erroneously agree bug proof checking program may cause erroneous proof accepted checked independent platforms 
practice interested validating proof checking program rest computing environment try verify independent simple proof checkers logic gained consensus trust time 
reasons people feel machine checking proof increases reliability system platform verified 
approach calls consensus random testing calls consensus readers attained belief personal intuition applied directly indirectly 
top layer stack simple proof checker program believed direct understanding small amount code discussed section 
rest stack easy believe verified discussed section 
believe proof checking program top layer hardware software stack simple proof checking program 
specification definition formal system checked job implement definition terms specification layer stack programming language coded 
want believe checking program correct understanding amount code small compared size formal proof order understand code understand semantics programming language written non trivial properties semantics attain belief checker 
example checker coded lcf style depending strong type correctness properties sml definition milner tofte harper just particular sml implementations question definition captures informal understanding logic correctness checker bridging formal informal gap treated step approach 
believe machine checked proof claim non theorem type theorems 
programming language simple formal semantics study properties needed trust proof checker language 
sml complicated see 
level approach 
suggest programming language checking program logical framework formal meta theory enabling precise concrete presentations class formal systems 
mind formalisms edinburgh logical framework elf harper honsell plotkin martin lof framework nordstrom petersson smith fs feferman isabelle paulson 
frameworks precisely concretely specified designed representing formal systems 
user gives definition object logic checked details vary implementation framework checker program checker internal language framework formally proved correct definition pollack barras 
variations seen application lcf style type systems expressive sml pollack supports lcf style tactics 
technical reasons classical lcf tactics expanded official proofs costly meta theoretically proved sound suggestion pollack allows admissible rules tactics don computed official proofs 
important feasibility checking 
considerable progress theory application logical frameworks 
mcdowell miller 
question arises find believable implementation logical framework 
classic lcf style sml programming language simpler sml 
isabelle paulson example approach lcf style implementation higher order logic logical framework get proof checker chosen object logic specifying high level logical form 
isabelle perfect realization proposal reasons 
ffl higher order unification part safe kernel suggest kernel supporting programming unification tactic terms simpler atomic actions 
ffl due style framework isabelle supports derivable rules admissible rules encoded object logics 
level approach programming language logical framework object logic places restrictions object logic frameworks restrict induction principles available defining object logics problem practice 
different proposal literature called reflection allen constable howe aitken harrison collapses framework object logic order provide admissible rules safely expansion 
reflection distorts object logic added reflection rule harder believe 
pollack believing hardware software stack philosophical claim computer system cpu operating system compiler 
complex believe direct understanding possibility attempt indirect belief verification 
think fail want clear am verification clearly improves reliability computer systems 
am questioning verification satisfy goal reduce believing formal proof psychological philosophical issues believing conventional proof 
assume verified hardware software stack top layer simple proof checking program 
formal informal gap top stack mentioned section challenge philosophical goal 
see problems ffl formal physical gap bottom stack ffl believing verification stack 
bottom stack formal model behavior physical hardware predicted quantum mechanics tested experiment 
belief machine checked mathematics depend scientific theory empirical knowledge physical world correctness believed individual understanding 
order believe conventional mathematics direct understanding believe computational platform nervous system behaves correctly identify symbols consistently short term memory correct 
question belief conventional mathematics depending empirical knowledge reasons ffl don empirical theory cognition ffl operations seek explain theory subjective invalidated failure theory 
philosophical goal met paradoxical reason demand justification indirect belief direct belief physical foundation includes non subjective aspects 
verification stack formal proof believed 
proof surely big believe directly believe indirectly independent checking trusted proof checker 
founded problem addressing trust proof checker 
problem prevent meeting philosophical goal 
philosophical claim subjective experience depends interpretation correctness assumptions experience 
believing formal proof indirectly believing proof checker shifting abstraction computational platform outside consciousness 
simply giving just careful checking experiences internally consistent match people careful computational platform compare indepen system architecture designed specifically simplicity overcome problem 
overcome simple directly believable computing platform check verification realistic platform 
believe machine checked proof dent platforms 
shift abstraction unavoidable accept correct putative proof checked person 
theorem 
file believe derivation formal system 
derived formula really flt 
interpret formula understanding 
exactly informal mathematics done matter big formal proof process tractable formal statement flt significantly different informal statement 
apparent difference informally don redefine natural numbers basic operations prove properties operations theorem want believe 
conventional mathematics rests basis mathematical knowledge previously believed formal mathematics proceed way developing libraries formal knowledge covering mathematical basis 
libraries developed independently checked widely community mathematicians 
confidence theorems provable definitions mean informally claim 
gained come 
suggested belief correctness formal proof comes engaging understanding check necessary social process knowledgeable readers independently checking 
way differs informal mathematics extra checking allow machine mechanical steps pattern matching substitution extra trivial matter due allow things proofs derivations big combinatorially complicated checked person mentioned section 
advantage hinted proofs logic shared different proof checkers logic standard syntax mechanical translations believed official proofs don depend tactics particular individual proof tools 
current practice idea worms phrase logic causes experts field roll floor laughter 
alternative suggestions cryptographic means certify theorem checked proof tool grundy break primary abstraction way proof checker accept theorem proved check proof 
necessary restrict notion proof checking program programs check derivations formal system restrict acceptable formal systems criteria feasibility communicating checking official derivations section 
crucial argument 
obvious absolute correctness attained means 
criticism formalisation formal proof pollack guarantee correctness 
formal proof attain higher confidence conventional proof arguments 
feasible formalisation correctness derivations defined ideally conventional logic size derivation bearing correctness interested checked derivations 
presentations formal systems purpose formal mathematics sensitive properties formal system large complicated distinct reasons ffl understand logic order believe theorem proves ffl derivations feasible check 
presentation formal system interests just consequence relation defines 
believe formal system 
interested believing mathematical statements formal proofs able read understand formal system checking essential part bridging gap formal property informal belief 
perspective various presentations order logic fol suitable formal systems rules organized useful principles elimination widely studied accepted 
hand nuprl logic constable satisfactory regard rules complicated side conditions 
meta mathematical study complex formal system may see related simpler better known system 
example struggled elf classes terms judgements rules realized translates subsystem cc class terms judgements rules 
theme computers tool bridge gap large formal object informal understanding formal systems studied mathematically simpler meta systems logical frameworks apply technique gain understanding formal system large complicated formally proving properties 
course limitations approach system presentations complicated nuprl sml definition may considered formal 
formal systems feasible check 
second reason care intensional properties formal system want check derivations non trivial statements size derivations generally feasibility checking derivations important 
section hilbert wittgenstein require proof perceptual intuition feasible object 
count rules constable 
pages informal mathematical text describing side conditions 
believe machine checked proof discuss styles proof feasible checking 
am interested formal system finding alternative presentations deriving judgements better intensional properties smaller derivations ones easier check 
generally look different formal system different language deriving different judgements allows feasibly check original system indirect way 
things formal system computationally expensive check derivations big side conditions non recursive premises expensive check 
example big derivations gentzen cut free system fol completely infeasible 
known adding cut rule change derivable judgements allows smaller derivations system cut better presentation formal mathematics consequence relation 
section discusses simple proof checker support metatheoretic extensibility adding admissible rules cut logic 
way reduce size derivations eliminate duplicate subderivations 
derivation tree subderivations may repeated occurrences different places tree 
linear presentation derivations line names previous lines depends occurrence subderivation required naming lines allows sharing 
extending formal system definitions allows similar kind sharing 
cases just mentioned depend ad hoc identification common substructures user formal systems duplicate uniform way give alternative presentation shares common substructures construction 
martin lof gives algorithm type synthesis transforms official derivations avoid duplication context validity checking 
idea huet constructive engine abstractly explained proved pollack 
computational expense checking formal system side conditions 
example cc rule type conversion convertibility typed terms side condition 
decidable certainly feasible general proof checking 
purpose independent checking trade derivation size computation side conditions 
example constructed proof cc annotate proof conversion paths proof checker feasible check proof 
size annotations may prohibitive find annotations 
independently re check proof checker need follow annotations checking legal discover conversion path 
way independent checking doesn depend heuristics feasibility proof discovery 
annotation judgements allow smaller derivations annotation full derivation judgement may mechanically constructed judge interesting way viewing linear derivations pointed harold simmons 
automath naming expressions lines contexts avoid duplication 
pollack ment full derivations don constructed communicated 
idea underlies decidable type checking tool proof checking proof terms annotations expanded full derivations 
equivalently think omitting parts official derivations mechanically reconstructed cc terms essentially derivations instances conversion rule variable lookup elided 
tradeoff information elide derivations making smaller easier communicate mechanically reconstructed making difficult check 
feasible formal proofs preceeding section discussed choosing formal systems suitable actual checking 
section discusses formal proofs generally bodies formal mathematics suitable actual checking 
programming known feasible functions infeasible implementations natural recursive definition fibonacci function exponential input alternative definition linear 
analogously behaved formal system proofs infeasible proof style 
example ack ackermann function trying prove ack gamma ack computing ack hopeless proving gamma trivial gives trivial proof goal 
representation proof just programming unsuitable representation objects discourse cause infeasibility 
especially representations conventional mathematics intended actual formalisation 
formalising mathematical notion choices representation reason believe single best representation leads natural statements short proofs 
definitions concept prove relationship move convenient done implicitly informal presentation 
note choice representations constrained underlying formal system fs express generalized induction martin lof framework may reason choosing framework 
example unary vs base representation natural numbers 
probably want unary representation official definition naturals base representation actual computation computational content extracted constructive proofs 
order elementary school arithmetic formalised correctness various algorithms arithmetic operations base representation numbers 
mentioned example notion hard reason formally binding representations terms literature including naive variable names total ordering variables de bruijn indexes higher order syntax pfenning elliott axiomatic approach gordon melham approach distinct believe machine checked proof classes free bound names coquand mckinna pollack 
representations isomorphic distinguish ff equivalent terms 
different theorems presentation type theory free bound names mckinna pollack thinning lemma close informal statement de bruijn indexes barras requires explicit variable lifting 
formalising relationship various representations theorems stated proved natural forms different forms needed 
may obvious official formalisation concept de bruijn terms real meaning terms just convenient representation formal mathematics doesn split hopelessly questions 
long favorite definition shown appropriately related definitions formal literature existing results 
said new different representations mathematical notions restricted 
look entirely new ways mathematics especially suited formalisation 
example formal topological models received interest type theory community 
ideas sambin persson describes formalisation completeness theorem intuitionistic order logic formal topological models 
coquand proposes program analysis non effective arguments formal topological models 
problems impossible formalise approach developed 
business formal mathematics people pursue formal mathematics seeking beauty complete concreteness contributes appreciation material formalised outside field formalisation just filling details conventional mathematics 
just infeasible serious thought representation logic formalisation mathematics formalised 
viewed annoying business formal mathematics 
view leads interested areas feasibility expressiveness formal systems power formal systems represent algorithms seriously study formal representations mathematical notions 
bibliography allen constable howe aitken 
semantics reflected proof lics proceedings ieee 
appel haken 

planar map colorable illinois journal mathematics xxi 
barras 

coq en coq rapport de recherche inria 
pollack hunt moore young 

approach systems verification journal automated reasoning 
bishop 

foundations constructive analysis mcgraw hill new york 
boyer 

mechanically proof checked encyclopedia mathematics build 
bundy ed cade th international conference automated deduction nancy france june july number lnai springer verlag 


strict feasibility leivant ed logic computational complexity 
proceedings number lncs springer verlag 
cohn 

notion proof hardware verification journal automated reasoning 


repr sentation algorithmes dans les syst ems une tude de cas phd thesis university paris 
constable 

implementing mathematics nuprl proof development system prentice hall englewood cliffs nj 
coquand 

algorithm testing conversion type theory huet plotkin eds logical frameworks cambridge university press 
coquand 

formal topology constructive type theory talk years constructive type theory venice 
demillo lipton perlis 

social processes proofs theorems programs communications acm 
feferman 

finitary inductively logics logic colloquium padova north holland 


intensional aspects function definitions theoretical computer science 
gordon melham 

axioms alpha conversion von wright grundy harrison eds ninth international conference theorem proving higher order logics turku finland vol 
lncs springer verlag pp 

gordon milner wadsworth 

edinburgh lcf mechanized logic computation vol 
lncs springer verlag 
grundy 

trustworthy storage exchange theorems technical report turku centre computer science tucs fin turku finland 
harper honsell plotkin 

framework defining logics journal acm 
preliminary version lics 
harrison 

metatheory reflection theorem proving survey critique technical report crc sri cambridge uk 
believe machine checked proof harrison 

formalized mathematics technical report turku centre computer science tucs fin turku finland 
horgan 

death proof scientific american pp 

huet 

constructive engine narasimhan ed perspective theoretical computer science world scientific publishing 
volume gift 


mistakes ambiguities definition standard ml technical report ecs lfcs university edinburgh 
addendum extends report 
lam 

reliable computer proof mathematical 
martin lof 

theory types technical report university stockholm 
mcdowell miller 

logic reasoning higher order syntax proceedings lics ieee 
mckinna pollack 

pure type systems formalized bezem groote eds proceedings international conference typed lambda calculi applications tlca utrecht number lncs springer verlag pp 

milner tofte harper 

definition standard ml mit press 
nordstrom petersson smith 

programming type theory 
oxford university press 
paulson 

isabelle generic theorem prover number lncs springer 
persson 

constructive completeness intuitionistic predicate logic formalisation type theory chalmers university technology university goteborg sweden 
licentiate thesis 
pfenning elliott 

higher order syntax proceedings acm sigplan symposium language design implementation atlanta georgia pp 

pollack 

theory lego proof checker extended calculus constructions phd thesis university edinburgh 
pollack 

extensibility proof checkers dybjer nordstrom smith eds types proofs programs international workshop types june selected papers lncs springerverlag pp 

sambin 

completeness proofs journal symbolic logic 
slaney 

crisis finite mathematics automated reasoning cause pollack cure bundy ed cade th international conference automated deduction nancy france june july number lnai springer verlag 


machine assisted proof programming language properties phd thesis university pennsylvania 
brics report series publications rs robert pollack 
believe machine checked proof 
july 
pp 
appear chapter book years constructive type theory eds 
smith sambin oxford university press 
rs peter bro 
error correcting codes perfect hashing circuits deterministic dynamic dictionaries 
june 
pp 
rs noga alon martin dietzfelbinger peter bro erez petrank tardos 
linear hashing 
june 
pp 
preliminary version appeared title linear hashing 
ninth annual acm symposium theory computing stoc pages 
rs pierre louis curien gordon plotkin glynn winskel 
linear logic 
june 
pp 
rs arne andersson peter bro riis thorup 
dictionaries ac rams query time theta log log log necessary sufficient 
june 
pp 
appears th annual symposium foundations computer science focs proceedings pages 
rs andersen kim larsen 
compositional safety logics 
june 
pp 
rs andrej peter bro ian munro 
trans dichotomous algorithms multiplication upper lower bounds 
may 
pp 
appears dehne rau sack editors algorithms data structures th international workshop wads proceedings lncs pages 
rs cer ans jens chr 
kim larsen 
timed modal specification theory tools 
april 
pp 
rs thomas hildebrandt sassone 
transition systems independence multi arcs 
april 
pp 
appears peled pratt holzmann editors dimacs workshop partial order methods verification pages 
