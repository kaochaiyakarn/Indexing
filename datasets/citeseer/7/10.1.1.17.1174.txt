essence resource discovery system semantic file indexing darren hardy michael schwartz university colorado boulder discovering different types file resources documentation programs images vast amount data contained network file systems useful users system administrators 
discuss essence resource discovery system exploits file semantics index textual binary files 
exploiting semantics essence extracts keywords summarize file generates compact representative index 
essence understands nested file structures compressed tar files recursively files generate summaries 
features allow essence number useful settings anonymous ftp archives 
measurements prototype compare related projects wide area information servers wais system mit semantic file system sfs 
demonstrate essence index data types generate smaller indexes cases index data faster systems 
prototype generates wats compatible indexes allowing wats users take advantage essence indexing methods 
past years number resource discovery tools introduced help users locate massive amount information available internet schwartz 
disks larger cheaper plentiful resource discovery problem general purpose file systems sun network file system nfs 
current set internet discovery tools apply environment reasons 
information general file systems typically irregularly organized 
internet data explicitly intended sharing people put effort organizing information coherent placing entire file system meaningful hierarchical directory anonymous ftp site 
contrast general file system data organized individual people 
resource discovery systems depend heavily users organize browse data prospero neuman berners lee gopher general purpose file system data 
automated search procedures needed 
typically means generating type index available information salton mcgill 
second general file systems contain range different types data unstructured text structured data 
systems generic indexing procedure archie deutsch wats kahle produce larger useful indexes circumstances 
example wats effective ascii text files 
wats index executables files general file systems effective 
indexes tend poor job locating information tend quite large 
third internet discovery tools typically focus information known reasonably broad interest 
example anonymous ftp archives typically contain popular documents software packages exhibit heavy sharing schwartz 
contrast general purpose file systems typically contain user specific data exhibit relatively little sharing muntz honeyman ousterhout 
current internet resource discovery tools difficulties low sharing value data 
example wats fulltext indexing mechanism may locate uninteresting files applied entire general file system keywords generated files interest users 
system supporting resource discovery general purpose file systems 
system addresses problems generating indexes understanding semantics files indexes 
technique supports compact representative summaries general collections data 
addition supporting file indexes summaries browsed help decide retrieve file slow net 
call system essence ability summarize large amounts data relatively small indexes 
discussion indexing techniques 
survey previous related winter usenix january san diego ca essence resource discovery system 
hardy schwartz semantic indexing 
discuss essence accomplishes semantic indexing uses basis resource discovery 
discuss details prototype measurements compare essence wats sfs 
full text vs filename vs semantic indexing wats supports fine grained information access building full text indexes keyword textual document appears index 
indicated approach primarily useful purely textual widely popular data 
wats large space requirements indexes comparable size data files represent 
space requirements wais distributes indexes hosts provide data 
space intensive indexing approach archie anonymous ftp files summarized name archie indexes contain information derived file content 
approach produces indexes roughly size data represent 
turn compact representation allows great deal index information collected sin gle machine supporting far reaching searches currently reaching archive sites 
archie indexes contain filenames support name searches 
searches conceptual descriptions resources possible filenames happen reflect conceptual descriptions 
range structure low sharing value general purpose file systems discussed coupled need conceptual descriptions need compact indexes motivated suggest different means indexing data 
means semantic indexing 
semantic indexing involves analyzing structure file data different ways depending file type 
example unix manual page files broken structured sections possible extract information program name description usage synopsis related programs files author information 
generating information different types files different manners semantic indexing generate representative keywords including word file 
addition saving space technique avoid including keywords muddle quality index 
example little sense include language constructs struct indexing source code keywords distinguish conceptual content different programs 
semantic indexing involves stages 
classification stage identifies promising files index file system 
type information identified file 
summarizing stage applies appropriate indexing procedure called summarizer emphasize space reduction characteristic identified file type information uncovered classification stage 
summarizers understand file types extract keyword information textual binary files 
example binary executables related textual documents describing usage keyword information extracted 
keyword information extracted knowledge high quality information located semantic indexing extracts fewer keywords full text indexing generates smaller indexes 
retains fine grained associative access capability full text indexes 
essence system essence provides integrated system classifying files defining summarizer mechanisms applying appropriate summarizers file traversing portion file system produce index contents 
essence determines file types exploiting file naming conventions common filename extensions locating identifying data common structures files unix magic numbers 
essence determines file type executes appropriate summarizer extract keywords file 
types essence understands nested file structures compressed tar files 
recursively extracts files hidden nested file indexes 
design goal wanted allow summarizers constructed quickly easily essence understand different file types individual sites customize summarizers 
accomplish goal allow summarizers simple line script containing grep command 
essence indexes allow users locate needed data 
essence produces summaries file data allow quick perusal potentially large files 
essence practical resource discovery applications systems administrators users essence locate learn resources example procedure embody site specific knowledge certain parts file tree contain uninteresting administrative information needn indexed 
current prototype select file system subsets simply indexes file trees specified 
winter usenix january san diego ca hardy schwartz essence resource discovery system contained file systems understanding details local environment 
particularly helpful environments mount points hidden amd auto mount system 
public archive administrators essence index archive contents providing compact representative descriptions files including compressed archives 
indexes allow users search information effectively examine summaries files retrieving 
people wish index data search wats essence index file types wats currently supports produce space efficient indexes 
essence generates index portion file system exports indexes wats search retrieval interface 
allows indexes context esta easy information system 
related identifying locating file resources semantic indexing depends successfully determining file types 
furthermore essence uses semantic indexing locate file resources 
systems determine file types locate file resources essence integrates aspects single system 
modules system sophisticated administrative approach locating file resources associated specific applications 
applications associated particular module easily incorporated removed user environ ment 
location identification applications file resources explicitly supplied administrator hidden user 
file system browser determines common file types exploiting filename extensions 
displays icon representative file type 
users launch specific application supplying filename application launched determined file type 
locating file resources accomplished browsing file system hierarchy 
file command attempts determine various file types file contents provides mechanism locating files usenix 
find command locates files exhaustive search portion file system 
allows predicates specified concerning files locate 
things predicates specify location file types understood file system ordinary file directory symbolic link leffler usenix 
higher level types image script source code specified 
programs file naming conventions infer file types 
compilers example assume filename source file file relocatable object file 
similarly various implicit rules file naming conventions 
exploiting file semantics semantic indexing depends ability extract keyword information files file types 
number commands extract information varying degrees quality files file types usenix 
ctags extracts procedure macro variable names source header files 
versions ctags understand programming languages lisp pascal 
strings extracts embedded ascii text strings binary files 
ps txt extract ascii text troff tex postscript files respectively 
extracts embedded source code control system sccs information files 
essence provides single cohesive system integrates determining file types locating file resources exploiting file semantics extract keyword information files 
mit semantic file system mit semantic file system sfs uses semantic file indexing provide effective storage abstraction traditional file systems gifford 
sfs exploits filename extensions determine file types runs transducers files extract keyword information building index 
sfs provides virtual directory interface search resulting index access files 
virtual directory names interpreted queries index contents virtual directories results queries 
users perceive search interface explore file systems traditional hierarchical file system interface 
essence sfs similar semantic indexing techniques differ orientation summarizer breadth space efficiency 
orientation sfs emphasizes semantic indexing storage abstraction 
contrast essence emphasizes semantic indexing basis resource discovery 
concretely systems support flexible associative access file data export data winter usenix january san diego ca essence resource discovery system 
hardy schwartz differently 
essence exports data search retrieval interface sfs exports data file system interface 
advantage sfs approach reuses existing familiar storage abstraction 
disadvantage doing leads undefined semantics 
example user tries copy data virtual directory created result sfs query semantics undefined 
summarizer breadth essence summarizers autonomous unix programs easy implement integrate maintain 
essence prototype implements summarizers file types sfs 
essence index wide variety textual binary data common network file systems 
space efficiency essence prototype provides better index compression sfs prototype 
comparative measurements appear 
filenames core filename nested file le type processor files organization essence system design essence shows essence organized 
essence operates follows users supply essence filenames select portion file system wish index 
feeder module iteratively passes filenames classification module determines file type 
summarize module chooses appropriate summarizer file type 
runs summarizer file extract keywords summary files 
modules core filename nested file processor nested file feeder allow essence support nested files 
essence saves initially supplied filename core filename 
classification modules determines file nested file type compressed file passes file nested file processor 
nested file processor extracts hidden files nested file structure passes extracted files nested file feeder 
nested file feeder module performs identical function feeder bypasses core filename module 
determining file types essence determines file types combination exploiting file naming conventions heuristically locating identified data common struc tures files 
exploiting file naming conventions observing simple conventions file naming determine file types fairly high certainty 
basic file naming convention filename extensions 
example filenames extension typically source code files filenames ps extension typically postscript image files filenames txt extension typically ascii text files 
file naming conventions include specific words filename 
example information entire source distribution application files name contains string readme 
files named makefile typically associated unix command usenix 
essence file naming conventions represented regular expressions 
example ps mm represent postscript makefile file types respectively 
expressing file naming conventions regular expressions allows sites easily integrate local semantics essence 
locating identifying data common structures addition naming conventions essence examines file contents try determine file types 
particular files identifying magic number associated 
example binary executables start hexadecimal number sun images start hexadecimal number ox 
furthermore common structures file may determine file type 
example postscript images start string unix shell programs start string source code files typically comments denoted delimiters electronic mail files distinctive header tags received winter usenix january san diego ca hardy schwartz essence resource discovery system 
sender usenet news articles dis header tags newsgroups distribu tion path 
exploiting file naming conventions locating identifying data common structures file rule technique expressed regular expressions 
sites easily integrate local semantics discovery process modifying rules 
nested file structure nested files contain hidden files 
examples include compressed files tar files files zip files shell archive files 
furthermore files arbitrarily nested file types 
example compressed tar files compressed files common 
understanding nested file structures useful file system environments anonymous ftp file systems vast majority files nested structure 
essence determines file nested structure extracts hidden files determines resulting files types summarizes 
process continues recursively nesting 
extracting hidden files nested file accomplished running corresponding extraction program unix uncompress command compressed files unix tar command flag tar files unix command files 
summarizers essence summarizers simple stand unix programs easy write integrate system 
design provides powerful paradigm exploiting file semantics 
summarizer associated specific file type understands file format extract summary information file 
example summarizer unix troff manual page understands troff syntax conventions describe unix programs 
uses understanding extract summary information title program related programs files author program brief description program 
similar techniques moderately structured file types source code 
file types easily lend automated interpretation 
example plain ascii text files typically contain unstructured data difficult exploit effectively 
similarly unix ps txt program extract ascii text postscript images resulting information unstructured text 
essence prototype section describe techniques essence prototype determine file types exploit file semantics summarizers 
discuss integrated essence wais 
determining file types described earlier file types determined understanding naming conventions locating identifying data common structures file 
prototype naming conventions expressed case insensitive regular expressions 
example shows entries configuration file holds expressions 
file field file type second field case insensitive regular expression corresponding file naming convention 
compressed postscript 
readme readme sccs prototype uses unix file command determine file types identifying data common structures file usenix 
file uses magic file specify recognizable file types 
list shows sample entries magic field offset identifying data common structure second field type data third field identifying data common structure field corresponding file type 
string program text string compressed data long binary pgm string bin peri perl program string 
image creating suitable magic file trivial identifying data common structures distinctive 
example delimiter programming language comments sufficiently distinctive appear variety types files 
lack distinctive identifying data common structures common binary formats usually depend single magic number 
distinctive magic entries difficult formulate careful selection magic file allows file accurately identify file types 
essence building magic file accomplished experimentation various entries 
summarizers prototype summarizers simple unix programs extract keyword information understanding syntax semantics specific file type 
currently prototype supports summarizers file types nested file types 
table describes file types frequencies occurrence number files average file size systems support file system environments nfs file system contains commonly shared data programs local environment fairly popular anonymous ftp file system ftp cs colorado edu 
frequent file types nfs file system text winter usenix january san diego ca essence resource discovery system 
hardy schwartz 
anonymous ftp file system frequent file types text 
essence supports file types common nfs anonymous ftp file systems wats sfs shown table 
wats sfs support frequently occurring file types text essence system supports file types contribute data size binary tar archive 
occurrence frequencies measurements 
note table list specialized file types supported wais sfs supported essence types occur common nfs anonymous ftp file systems measurements 
examples include medline new york times formats 
formats stood wats understood sfs 
indicated table sfs indexes unknown file types 
including standard attributes index owner directory group 
table briefly describes techniques essence summarizers supported file types nested types techniques discussed nested file structure section 
potential summarizers possible 
example writing summarizers types source code lisp pascal easy extension prototype source code summarizers 
writing summarizers audio image formats difficult 
sections describe techniques various summarizers representative essence supported file types 
possibility sample bitmap file icon 
easily support indexing support quick browsing retrieving entire image slow network 
file file type file types frequency average type description supported number files file size essence wais sfs nfs nfs archive library archives binary binary executable source code header files command unix shell scripts compressed compressed file directory directory dvi device indep 
tex output mail electronic mail makefile unix makefiles unix manual pages news usenet news articles object relocatable object file patch file difference listing perl perl script postscript postscript images rcs rcs version control files readme high quality information sccs sccs version control files bourne shell archive tar tar archive tex tex source docs text unstructured text troff troff source docs unknown unknown file type table supported common file types frequency average size measured file systems winter usenix january san diego ca hardy schwartz essence resource discovery system 
directory obtaining listing files directory obvious method directory summarizer 
essence strives obtain higher level understanding directory contents 
prototype attempts extract copyright information files addition directory listing 
copyright information typically contains project application author names 
keyword information readme files included directory summarizer files contain high quality information directory contents 
file type summarizer description archive extract symbol table binary extract meaningful strings manual page summary extract procedure names include filenames com ments extract procedure names included filenames comments command extract comments directory extract directory listings copyright information readme files dvi convert ascii text mail extract select header fields makefile extract comments extract author title man macros news extract select header fields object extract symbol table patch extract filenames perl extract procedure names com ments postscript convert ascii text rcs extract rcs supplied summary readme entire file sccs extract sccs supplied summary tex convert ascii text text extract lines troff extract author title man ms macro packages extract section headers topic sentences 
table essence summarizer techniques binary obvious method binary summarizer extract ascii strings binary file unix strings command 
essence filters extracted ascii strings heuristics keep strings convey binary purpose usage version copyright information 
essence uses cross obtain highquality summary information binary executables 
example binary summarizer looks associated manual pages binary executable generates keywords manual page summarizer 
formatted text formatted text tex troff word perfect structured syntax effectively summarizing files difficult semantic information available knuth usenix 
example plain troff files troff files macros difficult exploit semantically syntax associated formatting commands font size line spacing conceptual commands commands indicate author name title 
troff files ms man macros easier summarize contain conceptual commands delimiting author title 
essence supports sophisticated summarizer troff ms man troff macros 
tex summarizer extracts ascii text tex files exploiting tex semantics trivial extension methods troff summarizer 
simple text simple text difficult summarize unstructured 
essence assumes highest quality information unstructured text files near file common abstracts tables contents 
text file summarizer extracts keywords lines text file 
readme files typically contain crucial concise information distribution application 
full text index readme files provides high quality keywords occupying space 
readme summarizer uses entire file generate keywords 
dvi postscript tex summarizers extract keywords ascii text extracted files 
essence assumes file types contain generally useful information generates full text indexes 
source object code source object code highly structured contain easily exploited semantic information 
summarizer extracts procedure names header filenames comments source code file 
similarly object summarizer extracts symbol table object file 
wais interface essence exports indexes wais search retrieval interface allowing users tools windows graphical user interface 
order generate winter usenix january san diego ca essence resource discovery system 
hardy schwartz wais compatible indexes essence uses wais indexing software index essence summary files 
mechanism generates full text wais indexes essence summary files 
modified wais indexing mechanism understand format essence summary files generates meaningful wais headlines 
headlines provide users short description single file usually filename 
essence headlines represent file core filename actual filename file type 
support additional file types wais recompiled new procedures understand file types 
essence need write new summarizer add name configuration file add new heuristics identifying file type recompilation necessary 
sense essence typed file indexing exten sions wais removes keyword extraction process wais places essence 
essence better suited incor new file types quickly adapted comprehensive indexing system 
shows example search index generated essence ftp cs colorado edu anonymous ftp file system 
shows ordered list files best match keyword 
headlines fields representing matching file core filename filename different core filename file type 
internet user directory service schwartz 
consider effectiveness example search 
best match postscript discusses number techniques distributed information systems particular emphasis techniques demonstrated second match file compressed tar distribution 
ps 
tar 
third match source code interactive user interface 
fourth match readme file distribution directory fifth match file compressed tar distribution 

tar 
sixth match manual page 
remaining matches postscript papers discussed 
wais user retrieves files selecting matching headline 
essence headline represents file hidden nested file headline summary file retrieved retrieving hidden file 
headline represents plain file fourth headline file retrieved 
functionality requires allocating storage required summary files index 
allows users browse remote file systems retrieving viewing small summary files having retrieve complete files 
useful trying decide transfer large files slow network 
evaluation measurements section measurements indexing speed space efficiency essence wais sfs 
discuss usefulness wais question new question tell dd document delete document resulting 
ftp wide area ps wide area ps es ftp pg tar wide area ps es ftp tar readme es ftp tar 
readme readme stp tar 
doe cs ftp schwartz pst prj overview ps proj 
overview ps postscript cs ftp schwartz pst rd ps rd comparison ps postscript postscript ps tar 
postscript proj 
overview ps postscript schwartz postscript ps tar 
postscript rd comparison ps postscript example wais search essence index winter usenix january san diego ca hardy schwartz essence resource discovery system overhead indexing nested files 
discuss difficulties evaluating keyword quality 
presenting measurements various systems note difficult interpret time space efficiency measurements systems compared reasons 
indexing speed compression highly dependent indexing techniques 
example indexer skips data text summarizer achieve higher indexing speeds compression factors uses data text indexers sfs wats 
case salient issue recall precision effectiveness generated indices difficult quantify 
example small quickly generated index reasonable tradeoff index locate desired data 
second aggregate measurements table affected distribution different file types sample file systems 
ideally measured indexing system file system data 
wats essence sfs code available time meas 
attempted interpret measurements gifford 
notwithstanding difficulties interpreting measurements feel worthwhile quantitative comparisons systems 
table presents space time measurements essence wats file type 
show measurements nested file types indexing rate compression factor semantic file type kb min vs index exploitation essence wais essence wais overhead archive low binary high high high command high dvi high mail low makefile high high news low object low patch low perl high postscript low rcs low readme high sccs high tex low text low troff high table essence wats time space measurements file type 
indexing rate compression factor file system kb min vs index essence wais sfs essence wais sfs nfs anonymous ftp average table weighted time space averages file type frequencies winter usenix january san diego ca essence resource discovery system 
hardy schwartz 
measurements discussed table 
show measurements sfs table transducer specific information available 
note indexing costs shown essence include time space needed indices just summaries produced intermediate step 
indicated table table wats sfs index file types essence 
table shows high amount overhead associated interpreting semantics file type essence indexes slower wats file types 
essence indexing faster wats file types low amount semantic interpretation overhead 
table presents weighted averages space time measurements table file type frequencies average file sizes measured table 
weighted averages computed formula iai vi frequency associated file type ai average file size associated file type vi indexing rate compression factor value table associated file type number file types supported system 
fa normalize measurements reflect system supported file types 
particular non nested file types included aggregate measurements wats sfs systems support nested files types including nested files included essence measurements 
discuss unraveling costs dealing nested file structures table 
essence wats measurements performed sun microsystems server running sunos local disk 
sfs measurements performed microvax running version bsd gifford 
machine approximately third fast sun 
table shows essence index data fas ter wats 
account slower machine sfs measured sfs appears index data somewhat faster essence 
essence obtains index compression factor file types supports compared wats sfs archie deutsch 
measurements perfect detailed sfs measurements available 
table shows percentage data measured file systems essence wats sfs successfully able interpret index 
nfs file system contained custom file formats indexing systems unable interpret 
anonymous ftp file system contained common file formats 
essence supports relatively small number common file types index data average file system far greater wats sfs 
percent files anonymous ftp nested structure 
measurements indicate supporting nested file structures essential file systems 
contrast percent files nfs file system nested structure 
nested file structures may common represent inadequacies current file systems remote access protocols 
example tar files popular ftp file systems easier retrieve entire directory tree ftp provide recursive retrieval mechanism 
essence wais sfs anonymous ftp nfs average table percentage interpretable data table shows overhead prototype incurs indexing nested files measured anonymous ftp file system 
table original data row concerns data reside anonymous ftp file system 
processed data row concerns data essence processes indexing original data 
data include original files file nested file structure 
example file foo 
tar 
example previous nested file structure section foo tar 
foo 
tar foo 
foo 
makefile readme included pro cessed data 
summarized data row concerns data summarizers run 
exam ple foo 
foo makefile readme included summarized data 
summary output row concerns resulting summary files 
resulting index summary files consumed megabytes 
note compression ratio actual compression indexed data consumed mb 
particular indexing systems wais support nested structure leave data uncompressed 
achieve twofold space reduction 
wats need keep uncompressed data generate index size comparable uncompressed data 
essence generates smaller index function compressed data 
putting numbers wats require approximately mb space uncompressed data plus index basically twice size summarized data essence winter usenix january san diego ca hardy schwartz essence resource discovery system mb total space savings wats 
analysis keyword quality qualitative analysis information retrieval systems difficult 
recall precision measurements difficult obtain rely hand chosen sets salton mcgill scale measuring large information collections 
effective measurements obtained evaluating effectiveness system experience active user community 
essence prototype publically available allow users subjective judgements 
total total number size files mb original data processed data summarized data summary output table nested file structure overhead directions fly nested file summarizers essence prototype relies heavily file system implement nested file structure interpretation 
implementation degrades performance indexing files nested file structures shown table causes large amount disk memory implementation significantly improve performance drastically cutting file system currently considering implementation gnu tar program supports option output extracted files stdout 
summarizers prototype currently supports summarizers 
expanding essence summarizer suite support file types increase effectiveness 
anonymous ftp indexing currently essence index anonymous ftp site ftp cs colorado edu available wats cs colorado edu 
src wats source 
anonymous ftp sites available wais essence indexes 
essence index pub lic archives allows remote users search informa tion conceptual descriptions view summaries retrieving files 
help decrease network traffic unwanted files 
record level indexing support wats supports indexing retrieving information record level granularity allowing file containing electronic mail messages treated sequence mail records 
essence supports indexing retrieving information file level granularity 
improvement modify essence support record structured files 
file tree pruning design essence file classification stage includes ability identify promising files index file system addition type information file 
current prototype select file system subsets simply indexes file trees specified 
improvement add selection criteria prototype pruning files consideration location name tree names types sharing history 
refine quality indexes reduce space required indexing entire file system 
summary increasing abundance inexpensive local disks creates resource discovery problems locally distributed file systems 
internet resource discovery tools achieved popular acceptance past years suited general purpose file systems irregular organization range different degrees information structure generally low sharing value information file systems 
essence system generates file summaries understanding semantics various types files indexes 
summaries useful producing searchable indexes allowing users retrieve browse small summaries deciding retrieve large file slow network 
simple techniques exploit file semantics yield compact representative indexes textual binary files 
indexes gen erated fashion content rich archie index space efficient wats indexes 
essence provides integrated system classifying files defining summarizer mechanisms applying appropriate summarizers file traversing portion file system produce index contents 
importantly essence understands nested file structures compressed tar files recursively files generate summaries 
ability index nested files file types allows essence number useful set anonymous ftp archives 
winter usenix january san diego ca essence resource discovery system 
hardy schwartz essence index data types index data faster generate smaller indexes wats mit semantic file system 
prototype generates wais compatible indexes allowing wats users take advantage essence indexing methods 
prototype availability essence prototype including source code wats modifications publically available anonymous ftp ftp cs colorado edu pub cs essence 
prototype written perl programming languages kernighan ritchie wall schwartz 
material supported part national science foundation ncr sun microsystems collaborative research program 
sean coleman jim toole david wood usenix program committee helpful comments 
berners lee berners lee cailliau groff world wide web information universe electronic networking research applications policy publications ct spring 
budd levin budd levin bibliographic database facility tech 
rep department computer science university arizona tucson az 
deutsch deutsch archie electronic directory ser vice internet 
usenix winter conf pp 
january 
modules providing flexible user environment 
usenix large installation systems administration conf october 
gifford gifford jouvelot sheldon toole jr semantic file systems 
th acm symp 
operating syst 
prin pp 
october 
kahle kahle information system corporate users wide area information servers connexions interoperability report pp 
interop november 
kernighan ritchie kernighan ritchie programming language nd edition prentice hall englewood cliffs nj 
knuth knuth addison wesley reading ma 
lamport lamport latex document system addison wesley reading ma 
leffler leffler mckusick karels quarterman design implementation bsd unix operating system addison wesley reading ma 
internet gopher distributed server information system connexions interoperability report pp 
interop july 
muntz honeyman muntz honeyman multi level caching distributed file systems cache ain trash 
usenix winter pp 
san francisco ca january 
computer user computer redwood city ca 
neuman neuman prospero tool organizing internet resources electronic networking research applications policy pp 
publications ct spring 
da costa harrison kunze kupfer thompson trace driven analysis bsd file system 
th acm symp 
operating syst 
prin pp 
december 
salton mcgill salton mcgill modern information retrieval mcgraw hill new york ny 
schwartz schwartz ewing hall measurement study internet file transfer traffic tech 
rep cu cs university colorado boulder january 
schwartz schwartz kahle neuman comparison internet resource discovery approaches computing systems university california press berkeley ca fall 
schwartz schwartz experience semantically cognizant internet white pages directory tool internetworking research experience pp 
march 
usenix usenix association supplementary documents berkeley software distribution november 
wats wats server sources available anonymous ftp think com wais wais sources tar wall schwartz wall schwartz perl reilly associates sebastopol ca 
winter usenix january san diego ca hardy schwartz essence resource discovery system 
author information darren hardy earned computer science university colorado boulder currently completing computer science 
specializes network resource discovery distributed systems information retrieval 
systems engineer xor network engineering develops network support software internet utilities 
hardy reached mail computer science department university colorado boulder electronic mail hardy cs colorado edu 
michael schwartz received phd com puter science university washington 
currently assistant professor computer science university colorado boulder 
research focuses issues raised international networks distributed systems particular focus resource discovery network measure ment 
schwartz chairs internet research task force research group resource discovery directory service editorial boards ieee acm transactions networking internet society news 
schwartz reached mail computer science department university colorado boulder electronic mail schwartz cs colorado edu 
winter usenix january san diego ca winter usenix january san diego ca 
