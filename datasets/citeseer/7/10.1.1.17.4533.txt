relational database design er approach prolog manuel zim anyi university louvain place des louvain la neuve belgium mail ucl ac university brussels cp av 
roosevelt brussels belgium mail ulb ac 
context case tool development relational database design develops methodology maps enhanced entityrelationship er schema relational schema normalizes inclusion normal form nf 
classical normalization characterizes individual relations nf concerns redundancies 
formalizes sources redundancies er schemas 
methodology enhances proposals particular 
briefly presents implementation methodology prolog 
modern database design defined process capturing requirements applications particular domain mapping database management system implementation 
modern methodologies generally agree decomposition database design steps requirements specification conceptual design logical design physical design 
requirements specification consists eliciting requirements users 
conceptual design develop requirements conceptual model er model 
output step called conceptual schema 
logical design translates conceptual schema data model relational model supported target database management system 
physical design transforms logical schema physical schema suitable specific configuration 
deals logical database design 
traditionally activity normalization individual relations 
classical normalization characterize relational database 
redundancies update anomalies exist set normalized relations 
lesser known normal forms defined integrate interaction constraints database detect redundancies 
nowadays relational database design typically goes conceptual er schema design second translation relational schema 
part evaluation research object oriented strategies project principally universities louvain brussels 
conceptual models richer relational model provide precise higher level description data requirements constitutes starting point logical design 
methods proposed er relational translations semantic distance models lead anomalies logical schema 
order propose methodology logical relational database design taken account anomalies especially redundancies detected new normal forms formalized sources er schema 
improved er relational mapping database normalization rules take consideration enhanced er mechanisms 
database design complex significant research development adoption knowledge techniques automating design 
context computer aided software engineering case tool design implemented prolog algorithms construct normalized relational schema er enhancing proposals 
rest structured follows 
section defines version er model deals basic relational concepts 
introduces running example 
section devoted normalization theory introduces new normal forms 
section formalizes sources redundancy er schemas detected inclusion normal form relational schema 
enhancement design methodology goh thesis explained sect 

section introduces implementation mapping rules normalization algorithms prolog 
refer complete description implementation 
sect 
gives points 
er relational concepts er model describes real world concepts entities objects application domain independent existence relationships entities 
er schema shown fig 
department entity works relationship 
entity participating relationship assigned roles 
role names omitted ambiguity 
entity plays role relationship relationship said recursive role names mandatory 
shows recursive relationship supervises defined professor plays roles supervisor 
cardinality constraints model restrictions relationships 
fig 
instance department participates number instances works 
attributes properties entities relationships 
instance employee attribute 
attributes single multi valued 
relationships cardinalities attached attributes 
frequent cardinalities assumed default values omitted figures 
fig 
department dep 
contrary location multivalued 
emp em te em hea ep pn ro fe ss loca ion te nd tud ea ff ic te ce ma cou cou le ou tud emp emp dep em ra nk emp tud course de works de de lo ion rv see emp emp supervises fig 

simple er schema corresponding non normalized relations 
attribute combination attributes entity identifier entity values exactly identify instance entity 
fig 
emp identifies employee 
abstraction mechanisms added basic er model 
consider weak entities aggregated relationships derived relationships generalization subset relationships 
weak entity entity identifier 
instances identified respect instances owner entities 
weak entity connected owner entities identifying relationship cardinality relationship 
example fig 
shows weak entities segment 
weak entity usually partial identifier set attributes uniquely identify instances related owner entity ies 
identifier weak entity combination identifier owner entity partial identifier 
fig 
instances identified combination trip partial identifier date 
weak entity partial identifier define set identifying relationships combined uniquely identify weak entity instances 
fig 
instances identified combination owner entities segment instances identified combination trip seg date 
generalization abstraction mechanism involving entities called superclass es subclass es 
superclass may subclasses vice versa 
superclass may subclass superclass 
subclass inherits attributes relationships superclasses 
exhibits generalization professor employee 
aggregated relationship models relationship participant relationship 
instance aggregated relationship teaches associates student attends pairs professor course 
rest participant relationship denotes entity aggregated relationship 
relationship called derived inferred combination similar join relationships generalizations 
paths derived relationship join relationships generalizations represent association 
derived relationship labeled logical expression operator enumerating participating relationships generalizations 
fig 
isa works labels derived relationship combining works generalization professor employee 
subset relationship models constraint relationships 
instance subset relationship heads isa works models constraint professor heading department department 
differentiate generalization subset relationships correspond different abstraction mechanisms 
additional constraints modeled er mechanisms explicitly attached schemas office tel represents fd see meaning instance employee value office determines value tel 
shows relational database schema obtained applying relational mapping er schema fig 

relation associated entity non derived relationship relational view associated derived relationship 
shown schema redundancies needs normalized 
relational view allow detect 
data dependencies constraints databases relations 
deals functional inclusion dependencies fds inds 
fds defined individual relations represented fig 
continuous arrows instance fd stud relation student means value stud determines value 
denote fd holds relation inds constraints pairs relations represented fig 
dashed arrows ind attends stud student stud means set values stud attends subset values stud student 
inds involving keys referred referential integrity constraints 
typically designer specifies set data dependencies 
set data dependencies fds inds hold database satisfying dependencies set data dependencies called closure may inferred inference rules 
sound complete sets inference rules fds inds known 
sound complete set inference rules fds inds taken rule sound pullback rule xy wz specification real world constraints database schema constitutes important part conceptual design 
important integrity constraints directly modeled er mechanisms especially true fds inds 
er schema mapped relational schema dependencies transferred corresponding relations 
er schema implicitly represents set fds 
instance fd id deduced entity er schema id attributes id identifier fig 
stud holds entity student constraint holds corresponding relation fig 

way fds explicitly represented er schema hold corresponding relations 
relationships fd id id inferred relationship id identifier entity maximal participation 
fig 
fd works emp dep deduced 
similarly er schemas implicitly model set inds 
instance ind id id inferred relationship participant id set attributes identifier example ind attends stud student stud implicitly holds 
section gives mapping rules deduce implicit fds inds er schema attach corresponding relational schema 
database normalization normalization introduced relational database design avoid redundancies update anomalies due data dependencies 
process application normal forms relations databases 
forms specific type data dependency 
said deal normal forms concerning functional inclusion dependencies 
third normal form nf guarantees individual relations redundancies respect fds 
relation nf redundancies update anomalies exist database considered due inds interaction fds spanning relations 
circumvent problems ling introduced improved third normal form improved nf 
classical normal forms improved nf considers relations individual relations determines redundancies respect fds 
normalization improved nf consists detecting deleting superfluous attributes 
proven database improved nf individual relation nf 
inclusion normal form nf introduced guarantee databases redundancies respect fds inds 
proven database nf improved nf 
classical normalization theory concerns individual relations choice attribute names different relations constrained 
nf database normalization theory characterize set relations 
adopt consequence universal relation assumption attribute appears places database schema refers notion represent semantics 
motivates example inclusion normal form give formal definition 
pers pro person pro project en engineer pers pro person pro project eng engineer fig 

relational database nf normalized nf 
shows relational database nf 
person works project project associated location engineer person associated location 
suppose engineer eng location person project pers location hold meaning engineer located place project working 
attribute location engineer said eng location deduced ind fds pers proj proj location 
nonessential needed deduce information part key engineer 
superfluous deleted shown fig 

note dependencies involving location engineer removed 
inclusion normal form consider database set sigma fds inds relation attribute dependencies sigma involving denoted sigma fds sigma inds sigma relational view derived join projection relations attribute necessary perform join construction values deduced sigma precisely exists key containing infer fd sigma nonessential necessary deduce attribute formally nonessential key contains exists key containing infer sigma attribute relation superfluous nonessential 
database nf superfluous attributes relation schema main difference improved nf nf inferring fd improved nf considers fds nf considers fds inds reason call nonessential superfluous attributes called relational redundancies er cycles section consider superfluous attributes relations relate redundancies corresponding er schemas 
nf normal form account relational redundancies relative inclusion constraints 
shown sect 
constraints modeled er schemas subset derived relationships 
instance fig 
includes inclusion constraint professor heading department employee works department 
written follows language logic professor department heads employee isa works logical constraint subset relationship models implication inclusion constraint derived relationship represents conjunction predicates association relationships 
inclusion constraints associated er cycles possible sources superfluous attributes corresponding relational schemas 
cycles information deduced way intuition fig 
professor heads departement deduce department works heads isa works 
information necessary deduce information intuition fig 
department headed professor 
consequently constraint holding heads particular department determines professor 
er schema heads captures important semantics real world professor head department relational schema fig 
dep heads deduce heads emp dep heads dep emp dep emp emp dep 
nonessential part left hand side fd holds heads 
dep removed relation heads 
contrary cardinality department heads dep heads essential fd heads dep emp hold inferred dependencies involving dep heads 
er schemas sources attributes include cycles inclusion constraint kind shown fig 

entities identifiers related hand relationships hand relationships relationships direction mandatory relationships direction 
derived relationships associating respectively relationships derived subset relationships model inclusion constraint 
weakly weakly nonessential weakly superfluous attributes 
fig 

source superfluous attributes said sect 
fd id id inferred relationship id identifier entity maximal participation 
consequently generate transitivity corresponding relational schema fd holding view mapping cardinality way fd holds view mapping time 
generate inverse fd cardinalities nonessential superfluous consider redundant relations 
fig 
relation heads emp redundant contains subset professors heading department professor contains professors 
represented ind heads emp professor emp 
suppose cardinality professor heads meaning professors head department 
participation professor mandatory relationship heads inverse ind professor emp heads emp holds 
consequently relation heads redundant information contained heads contained professor relation heads deleted 
similarly suppose professor multivalued attribute major 
relation professor fig 
deleted redundant respect emp professor emp inverse professor emp emp hold meaning information contained professor represented 
notice attributes teaches included relation attends 
inds teaches course emp attends course emp attends course emp teaches course emp hold relation teaches redundant removed 
contrary relation teaches attribute semester redundant 
design methodology traditionally database design accomplished normalization 
adoption conceptual models mid normalization theory ceased main logical design step 
fact working er rich conceptual model directly produces nf relations cases 
nowadays normalization viewed verification step removing anomalies left er relational mapping 
usual er design methodologies remain focused attaining classical normal forms nf bcnf removing kinds redundancies studied 
shown sect 
er cycles sources superfluous attributes detected classical normalization 
interest enhanced er design methodologies remove anomalies due cycles inclusion constraints 
ling goh proposed integrated design methodology including normalization nf goh 
algorithms comprise main steps 
sections develop enhance steps er relational mapping er schema mapped set non normalized relations 
data dependencies generated represent implicit constraints er schema 
relation normalization key generation relation decomposed set nf relations key nf relation bernstein algorithm decomposition nf 
papers detail algorithm implementation see develop phase 
database normalization superfluous attributes relations deleted lending database nf 
er relational mapping entities entity mapped non normalized relation name comprising single valued attributes instance entity student fig 
mapped relation student fig 

said sect 
fds implicitly entity hold relation representing example student stud generated 
similarly fds explicitly added entity hold relation representing example employee office tel holds 
weak entities weak entity identifying entities add relation representing identifiers id idn id identifier consider example shown fig 

trip added relations segment 
weak entity partial identifier segment identified combination identifying entities 
fd holds belongs combination id partial identifier combination identifiers id id identifying entities 
example identifier resp segment trip date resp trip seg 
fds trip date time segment trip seg price hold 
hand partial identifier identified combination identifying entities segment 
identifiers entities added relation 
fur ce td sd ea salary ud dai ly trip se gm en dai tr se gm en dai trip se ce trip em oy ee de tud ass ist re assist em ist emp salary ud de emp tud pos post fig 

mapping weak entities relations ther trip seg date identifier fd trip seg date seats holds 
generalizations subclass direct superclasses sn add relation representing identifiers id running example relation professor inherits emp employee 
consider fig 
illustrate multiple inheritance 
direct subclass employee student emp stud added relation 
inherited attributes obtained natural join emp stud 
identifiers needed inherited relation able access inherited attributes 
necessary add 
example sa chosen 
fd id holds belongs instance fd professor emp rank holds fig 

ind id id generated subclass direct superclasses id common identifier example ind professor emp employee emp holds 
relationships non derived relationship mapped non normalized relation name comprising single valued attributes identifiers identifiers entities participating directly indirectly aggregated relationships 
consider relationship set participants entities aggregated relationships en identifier id recursively defined id id id en id follows ei entity id ei set attributes identifier ei 
ei aggregated relationship id id id 
fig 
identifier relation teaches participant entity emp hand identifier relation attends course emp identifier student identifier aggregated relationship teaches 
relationship participants fd id id inferred maximal participation 
example fds emp dep relations works heads deduced 
participant aggregated relationship propagate fds id id provided id id attributes instance suppose cardinality course teaches fd course emp generated teaches propagated attends 
recursive relationships role names introduced avoid ambiguity 
practical solution consists concatenating role identifier names relation mapping running example relation supervises obtained attributes emp supervisor emp 
fd emp supervisor emp holds relation 
multivalued attributes multivalued attribute entity relationship create new relation includes identifier id running example relation represents multivalued attribute location entity department 
ind id id holds relations mapping respectively multivalued attribute entity inverse ind holds mandatory 
example ind dep department dep inverse department dep dep obtained 
inds relationships aggregated relationship participant ind id id inferred id recursively defined shown previously 
example works dep department dep department entity attends emp course teaches emp course teaches aggregated relationship deduced 
inverse ind id id deduced minimal participation greater 
deduce fig 
ind department dep works dep 
recursive relationships role names inds taken account 
fig 
involves inds relation supervises 
derived relationships derived relationship mapped relation comprising attributes composing identifiers participants possesses proper attributes 
example derived relationship isa works mapped relation fig 

fd holds belongs closure fds valid relation representing component provided attributes example add fd emp dep valid relation works 
subset relationships relationships subset ind generated set common attributes example add relational schema inds heads dep emp dep emp 
fds valid attached fd emp dep attached heads 
minimal covers construct minimal cover fds attached relation 
relation normalization algorithm decomposition nf consists steps sure set fds minimal partition set fds groups fds group equivalent left hand sides construct relation group fds generate keys left hand sides fds 
fig 
relation employee normalized nf relations employee emp tel fds emp tel emp employee office tel fd office tel 
step relation keys added course course stud student emp teaches emp course attends emp employee office employee emp professor dep department emp heads emp emp 
database normalization specialize inds relation decomposed nf relations replace ind form resp 
set inds form resp 
intersection set attributes subset corresponding example employee replaces employee inds works emp employee emp employee emp works emp professor emp employee emp eliminate redundant attributes original decomposed relation eliminate superfluous attributes fds inds involving attributes algorithm sect 

example attribute dep relation heads heads emp dep heads dep dep removed 
add inds non normalized relation decomposed set nf relations rn add database inds form set attributes common example inclusion dependencies employee tel employee tel employee tel employee tel added 
eliminate redundant relations key nf relation redundant respect relation inds hold comprises attributes relation redundant respect relation eliminated inds relating attach fds replace inds having left right hand side 
example teaches redundant respect attends 
inds relating teaches attends removed attends replaces teaches inds 
detecting superfluous attributes relation attribute relation perform steps initialization construct set keys consists key containing attributes key attribute superfluous 
construct set keys including temporarily remove fds involving inds involving view right hand side attribute necessary perform join construction fig 
relation heads attribute dep emp fd emp dep temporarily removed 
test empty choose key deduced dependencies valid database temporarily deleted superfluous 
example fd emp dep deduced dependencies valid database 
dep 
test gamma empty previous step superfluous 
exists key containing set comprising attributes superfluous 
closure reinsert dependencies temporarily removed 
gamma fbg deduced superfluous 
superfluous insert key contained gamma fbg 
example gamma empty dep nonessential superfluous 
reinsert specialize dependencies attribute superfluous reinsert dependencies temporarily removed step 
add inds deduced transitivity attribute inds add ind attributes corresponding replace ind form gamma fag set attributes corresponding provided empty 
database design methodology prolog section briefly describe implementation logical design methodology 
complete description refer 
prolog building logical schema generator essential approach 
declarative nature prolog gives advantages clarity modularity conciseness legibility conventional programming languages suitable case prototype design 
possible integration static knowledge world facts deductive statements rules 
shows printout system 
shown er conceptual schema directly screen graphical user fig 

er editor 
interface 
graphical representation encoded set prolog predicates introduced base facts 
predicates form input logical schema generator automatically generate relational schema normalized nf 
gives encoding example er schema fig 

refer complete description predicates arguments 
er facts constituting original input logical schema generator relational facts generated er schema mapped relational schema step 
relational schema modified second step nf normalization third step nf normalization 
shows result applying er relational mapping example 
corresponds relational schema fig 

second step methodology normalizes nf relation generates keys 
respect example predicates fig 
added 
notice relation employee decomposed employee employee database schema normalization algorithms produce final base facts representing database schema nf 
referring example depno detected superfluous heads rel attrs heads empno depno replaced relattrs heads empno 
predicates removed 
fd heads empno depno 
ind heads depno depart depno 
ind depart depno heads depno 
relation teaches redundant respect relation attends predicates removed entity depart 
entity course 
attribute depart depno 
attribute course courseno 
attribute depart 
attribute course title 
attribute depart location 
attribute course 
identifier depart depno 
identifier course courseno 
entity employee 
entity professor 
attribute employee empno 
attribute professor status 
attribute employee tel 
attribute professor major 
attribute employee 
entity student 
attribute employee office 
attribute student 
identifier employee empno 
attribute student 
employee office tel 
attribute student year 
identifier student 
relationship teaches 
relationship attends 
participates teaches professor 
participates attends student 
participates teaches course 
participates attends teaches 
relationship works 
relationship 
participates works employee 
participates professor 
participates works depart 
participates depart 
relationship heads 
participates heads professor 
participates heads depart 
relationship supervise 
participates supervise professor supervisor 
participates supervise professor 
generalization employee partial exclusive isa professor employee 
professor works 
heads 
fig 

prolog facts representing schema fig 

relattrs depart depno location 
relattrs works empno depno 
relattrs employee empno tel office 
relattrs heads empno depno 
relattrs student year 
relattrs empno depno 
relattrs attends empno courseno 
relattrs professor empno major 
relattrs course courseno title 
relattrs teaches empno courseno 
relattrs supervisor 
fd employee empno 
fd depart depno 
fd employee empno tel 
fd depart depno location 
fd employee empno office 
fd student 
fd employee office tel 
fd student year 
fd course courseno title 
fd course courseno 
fd professor empno major 
fd works empno depno 
fd empno depno 
fd heads empno depno 
view professor works 
ind heads depno depart depno 
ind attends student 
ind depart depno heads depno 
ind student attends 
ind teaches courseno course courseno 
ind works depno depart depno 
ind course courseno teaches courseno 
ind depart depno works depno 
ind works empno employee empno 
ind depno depart depno 
ind employee empno works empno 
ind empno professor empno 
ind teaches empno professor empno 
ind professor empno employee empno 
ind heads empno professor empno 
ind heads empno depno empno depno 
ind attends courseno empno teaches courseno empno 
ind teaches courseno empno attends courseno empno 
fig 

er relational mapping results step 
employee 
relattrs empno tel 
employee 
relattrs tel office 
fd empno 
fd empno tel 
fd empno office 
fd office tel 
key depart depno 
key empno 
key office 
key student 
key course courseno 
key professor empno 
key works empno 
key heads empno 
key empno 
key depart depno 
key empno 
key office 
key student 
key course courseno 
key professor empno 
key works empno 
key heads empno 
key empno 
key teaches courseno empno 
key attends empno courseno 
fig 

nf relational normalization results second step 
relattrs teaches empno courseno 
key teaches empno courseno 
ind attends empno courseno teaches empno courseno 
ind teaches empno courseno attends empno courseno 
predicates ind teaches empno professor empno 
ind teaches courseno course courseno 
ind course courseno teaches courseno 
replaced ind attends empno professor empno 
ind attends courseno course courseno 
ind course courseno attends courseno 
main goal test enhance methodology relational database design especially respect viability context computer aided software engineering case tools development 
demonstrated usefulness inclusion normal form nf 
said sect 
er cycles inclusion constraints conceptual schemas nf normalization needed safely translate er schemas relational schemas 
methodology relational database design 
improved algorithm respects take account multivalued attributes weak entities recursive relationships distinguish generalization subset relationships particular able represent parallel generalizations take account identifiers entities particular due inheritance multiple generalization generate implicit fds er relational mapping minimal covers original sets fds project inds nf decompositions generate inds deduced transitivity removing superfluous attributes specialization inds removing superfluous attribute databases tested prolog code provided convincing results 
tests allowed improve mapping rules nf normalization algorithms 
important result development environment supporting relational database design 
helps detecting errors soon possible development life cycle constitutes necessity software engineering 
system er specifications introduced user performing integrity checking syntax semantics er abstractions 
errors detected user informed appropriate explanations 
system allows automatically generate corresponding relational database schema normalized nf 
carried larger project prototype case tool object oriented information systems development constructed 
system developed pc platform lpa prolog compiler generates code relational database schemes sql oracle 
integrates concepts models object oriented methods 
application described complementary models capturing static dynamic functional aspects 
case tool conceived modular architecture different abstractions selectively incorporated model allowing customize conceptual languages describe system development life cycle 
context formalized new abstraction description object models called materialization 
described module case devoted dynamic specification formalism statecharts 
issues need investigated 
concerning er formalism abstractions aggregation materialization implemented 
mapping rules produce relations keep track distinction entities relationships 
optimized rules generate fewer relations lose semantic classification 
sytem compare pros cons method 
optimization mapping rules instance realised implementing relation merging algorithm 
normalization algorithms implemented system deal fds inds 
methodology enhanced account common data dependencies multivalued join dependencies take fourth fifth normal forms consideration shed light semantics 
analyze consequences normalization boyce codd normal form bcnf 
achieved algorithm fisher 
relation database nf guaranteed nf 
known impossible reach bcnf nf relation losing dependency preservation 

armstrong 
dependency structures database relationships 
proceedings ifip congress pages geneva switzerland 

batini ceri navathe 
conceptual database design entityrelationship approach 
benjamin cummings 

beeri bernstein goodman 
database normalisation theory 
proc 
th int 
conf 
large databases pages 

bernstein 
synthesising third normal form relations functional dependencies 
acm trans 
database systems 

casanova fagin papadimitriou 
inclusion dependencies interaction functional dependencies 
journal computer system sciences 

ceri gottlob 
normalization relations prolog 
comm 
assoc 
computing machinery 

clocksin mellish 
programming prolog 
springer verlag 

coleman arnold hayes 
object oriented development fusion method 
prentice hall 

dogac spaccapietra 
generalized expert system database design 
ieee trans 
software engineering apr 

goh 
viable methodology logical relational database design 
master thesis national university 

zim anyi 
enhanced er relational database design implementation prolog 
technical report rr universit libre de bruxelles belgium apr 
submitted publication 

ling goh 
logical database design inclusion dependencies 
proc 
th ieee int 
conf 
data engineering tempe arizona feb 

ling tompa kameda 
improved third normal form relational databases 
acm trans 
database systems 

markowitz 
merging relations relational databases 
proc 
th ieee int 
conf 
data engineering tempe arizona pages 

zim anyi massart 
materialization powerful ubiquitous abstraction pattern 
jarke zaniolo editors proc 
th int 
conf 
large databases pages santiago chile 
acm press 

rumbaugh blaha premerlani eddy lorensen 
objectoriented modeling design 
prentice hall 

storey 
selective survey artificial intelligence database design systems 
data knowledge engineering 


database modeling design 
entity relationship approach 
morgan kaufmann 

fischer 
decomposition relation scheme boyce codd normal form 
acm sigact 

zim anyi 
statecharts object oriented development case perspective 
proc 
rd int 
conf 
practical application prolog pages paris france apr 
article processed macro package llncs style 
