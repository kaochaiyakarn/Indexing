failure atomic file access interposed network storage system dart ell anderson jeff chase department computer science duke university anderson chase cs duke edu presents recovery protocol block operations slice storage system architecture highspeed lans incorporating network attached block storage 
goal slice architecture provide network file service scalable bandwidth capacity preserving compatibility shelf clients file server appliances 
slice prototype virtualizes network file system nfs protocol interposing request switching filter client interface network storage system network adapter switch 
distributed slice architecture separates functions typically combined central file servers introducing new challenges failure atomicity 
presents protocol atomic file operations recovery slice architecture related support reliable file storage mirrored striping 
experimental results slice prototype show protocol low cost common case allowing system deliver client file access bandwidths approaching gigabit second network speeds 
faster interconnect standards arrival gi ethernet greatly expand capacity inexpensive commodity computers handle large amounts data scalable computing network services multimedia visualization 
advances growing demand storage increase need network storage systems incrementally scalable reliable easy administer serving needs diverse workloads running variety client platforms 
commercial systems increasingly provide scalable shared storage interconnecting storage devices servers dedicated storage area networks sans supported national science foundation ccr eia eia equipment intel 

order magnitude improvements lan performance narrowed bandwidth gap sans lans 
creates opportunity deliver competitive storage solutions aggregating low cost storage nodes servers general purpose lan storage backplane 
system possible incrementally scale capacity bandwidth shared storage resource attaching additional storage network 
variety commercial products research proposals pursue vision layering device protocols scsi ip networks building cluster file systems manage distributed block storage shared disk volume installing large server appliances export san storage lan network file system protocols 
section surveys systems 
deals network storage architecture called slice takes alternative approach 
slice places request switching filter client interface network storage system role filter wrap standard ip client server file system protocol extending incorporate incrementally expandable array network attached block storage nodes 
slice prototype implements architecture virtualizing network file system version protocol nfs 
request switching filter intercepts rewrites subset nfs packet stream directing requests network storage array associated servers slice ensemble appearing client unified nfs volume 
system compatible clients servers order leverage large installed base nfs clients high quality nfs server appliances market 
slice architecture assumes block storage model loosely proposal national storage industry consortium object storage devices obsd 
key elements obsd proposal turn inspired research network attached secure disks nasd 
storage nodes object sector meaning requesters address client storage nodes coordinator 
slice distributed storage archi tecture 
data storage node logical offsets storage objects 
storage object ordered sequence bytes unique identifier 
nasd obsd proposal allow cryptographic protection object iden network insecure 
slice architecture separates functions combined central file servers 
contribution simple solution coordination recovery issues raised structure 
approach introduces coordinator responsible preserving atomicity key nfs operations including file truncate remove extending writes write commitment 
coordinators sim ple intention logging protocol variants operation type minimize common case costs 
show protocol supports failure atomic write commitment mirrored files slice prototype 
mirroring consumes storage network bandwidth striping raid redundancy simple reliable avoids overhead computing updating parity allows load balanced reads 
structured follows 
section summa slice architecture 
section describes mecha nisms operation atomicity failure handling 
section presents experimental results slice prototype myrinet network showing slice architecture recovery protocols achieve file access performance approaching gigabit second network speeds limited primarily client nfs implementation 
section con cludes 
overview depicts slice architecture nfs clients servers 
architecture interposes client ip stack slice server ensemble 
proxy examines nfs requests responses redirecting requests transforming responses necessary represent distributed storage service unified nfs service client 
operations proxy generate new requests pair responses requests 
proxy may reside client network element communication path client servers 
current prototype proxy implemented packet filter installed client nfs udp ip stack 
proxy simple state machine minimal buffering requirements 
uses soft state proxy may fail compromising correctness 
proxy may reside outside trust boundary may damage contents specific files authority users requests routed 
limit focus aspects proxy internals policies directly related operation atomicity recovery protocol 
coordinator plays important role managing global recovery operations involving multiple sites 
slice configuration may contain number coordinators coordinator managing operations subset files 
functions coordinator may combined file server consider separately emphasize architecture compatible standard file servers 
implementation combines coordinator map service responsible tracking file block location 
coordinator servers maintain global block map file giving storage site block 
proxies read cache modify write back fragments global maps execute read write operations files 
global maps allow flexible file policies block placement striping network storage array system may deterministic block placement functions alternative global maps includes discussion maps show recovery protocol incorporates 
proxy intercepts read write operations targeted file regions configurable threshold logical file offsets threshold referred striping zone proxy redirects reads writes covering offsets striping zone array block storage nodes system striping policies block maps maintained coordinators 
policies protocols include support mirrored striping raid redundancy protect storage node failures described section 
slice storage nodes export object block storage network prototype storage nodes accept nfs read write operations flat space storage objects uniquely identified nfs file handles 
nfs file handles provide weak form protection prototype architecture compatible proposals cryptographic protection storage object identifiers insecure networks 
identifies read write operations striping zone examining request offset length 
small files striped files logical size threshold offset received write striping zone 
note large files striped entirety data written threshold offset large file stored small files 
file regions outside striping zone benefit striping performance cost progressively significant file sizes grow 
addition interactions required requests cooperate network storage nodes file coordinator allocate global maps extending write operations release storage remove truncate operations 
operations introduce recovery issues described section 
file operations pass nfs server incur additional overhead managing distributed storage 
architecture scales higher bandwidth capacity adding storage nodes nfs server outside critical path reads writes handled block storage nodes 
possible scale replicate file service functions context slice request switching architecture 
simplicity assumes single standard nfs file server manages entire volume name space 
goal mechanisms described deliver consistency failure properties weaker commercial nfs implementations 
basic approach quite similar write ahead logging taken journaling central file server distributed disks extend support operations awareness client nfs file server storage nodes 
approach committing writes assumes nfs asynchronous writes write commitment protocol described 
address issue concurrent write sharing files slice defined may provide weaker concurrent write sharing guarantees nfs implementations 
architecture compatible nfs file leasing extensions consistent concurrent write sharing defined early ietf draft proposals nfs protocol 
related cambridge universal file server proposed structuring distributed file system separate name service file block storage service 
system take approach swift 
slice similar swift client reads writes data directly block storage sites network client distribution agent maps provided third party storage mediator 
system derived swift architecture striping file system cmu nasd storage systems 
swift directly address atomicity recovery issues 
amiri show preserve read write atomicity shared storage array raid striping parity 
focuses primarily safe concurrent accesses fixed space blocks 
address file system consistency presence host failures 
number scalable file systems separate striping functions file system code building file system striped network storage volume shared disk model 
approach log structured conventional file system structures 
systems operations including truncate remove failure atomic write ahead metadata logging file server 
logstructured approach relies part separate cleaner process reclaim space 
relative systems shows factor recovery functions recovery may interposed context standard client server file system protocol modifying client server 
atomic operations network storage operation begins intercepts nfs write remove truncate setattr commit request client 
handle request may redirect request generate additional request messages nodes slice ensemble including storage nodes coordinator target file nfs server 
illustrates message exchanges opera tions discussed section 
operation complete sites passes nfs response client 
participant fails sequence storage node coordinator file server recovery protocol initiated 
recovery protocol specific particular operation progress may complete operation roll forward abort roll back 
system aborts operation delays response standard nfs client may operation retransmitting request timeout client failed 
basic protocol follows 
start operation sends coordinator intention perform operation messages 
coordinator logs intention stable disk storage responds authorizing carry operation 
enlarging commit remove read write write truncate proxy nfs server storage nodes coordinator time 
message exchanges slice nfs operations 
dotted line message exchanges avoided common cases 
square endpoints represent synchronous storage writes 
operation complete proxy notifies coordinator completion message asynchronously clearing intention messages 
coordinator receive completion specified period probes participants determine operation completed initiates recovery necessary 
failed coordinator recovers scanning intentions log completing aborting operations progress time failure 
variant standard phase commit protocol adapted file system context idempotent operations 
details operation vary significantly 
particular operation allows optimizations avoid messaging logging delays common cases described 
slice improves performance avoiding operations small files stored entirely file server files received writes configurable threshold offset 
way system amortizes costs protocol larger number bytes operations incurs costs create truncate remove large files commit groups writes large files 
subsections describe protocol applies type operation 
set protocol context conventional phase commit 
write commitment nfs commit operation stabilizes pending unstable writes file 
nfs protocol allows server failure legally discard subset uncommitted writes associated metadata provided client detect loss comparing verifier values returned file service responses write commit operations 
nfs clients buffer uncommitted writes locally may re execute writes server failure 
clients may safely discard buffered writes successful commit 
note verifier value returned write commit significant service guarantees verifier changes failure 
handle commit file unstable writes striping zone proxy executes message exchange storage node owns uncommitted writes file message 
proxy completes writes may involve exchange coordinator map service nfs server 
proxy pushes updates file map back coordinator message 
write enlarged file pushes new file size nfs server setattr message 
operations completed successfully proxy responds client valid verifier 
proxy detects failures comparing response verifiers stored copy previous verifier returned participant 
participant fails proxy reports failure changing response veri tier client 
proxy loses state may report failure commit successfully completed sites 
forces client writes harmless 
intention logging unnecessary write commit files 
file service remains legal state write sequence commit 
exact ordering operations strictly important commit complete client discarded buffered writes receiving valid response 
failure occurs client responsible restarting write sequence receiving negative response response commit request 
mirrored writes writes mirrored file replicated read model 
loss generality assume replication degree 
replication degree guarantees file available storage nodes fail concurrently file coordinator fails storage node client actively writing file 
block maps mirrored file dual entries logical block entry block replica 
proxy writes block pair storage nodes selected placement policy important purposes 
mirrored write considered complete committed storage nodes confirm block stable applicable file coordinator map service confirms covering map fragment stable 
mirrored writes intention protocol reconcile replicas event failure 
participant fails incomplete mirrored writes possible write executed replica 
practice occur client fails concurrently server failures nfs client retransmits uncommitted writes server failure described section 
mirrored write protocol piggybacks intention messages mirrored writes proxy request map fragment covering write 
returning requested map fragment coordinator logs intention record updates conservative memory active region list offset ranges map fragments held proxy may incomplete writes 
intentions cleared implicitly commit request covering region commit causes proxy discard covered map fragments mirrored file 
client proxy fails uncommitted mirrored writes guaranteed covered coordinator active region list 
coordinator reconcile replicas regions traversing region list conflict active regions may resolved selecting replica dominate 
principle system serve copy file concurrently reconciliation storage node fails 
coordinator fails recovers conservative approximation active region list intentions log 
practice intention logging activity mirrored writes may optimized away 
slice logs intentions mirrored file comes active write proxy requests map fragments intent write 
file falls write map fragment requests received commit completion coordinator marks file inactive logging entry 
protocol adds synchronous log write write open path mirrored files cost amortized writes file 
allows recover ing coordinator identify superset mirrored files may need reconciliation multiple failure 
drawback protocol buggy malicious client cause active region list grow bound issuing large numbers writes committing 
problem clients correctly buffer uncommitted writes number writes limited available memory case standard clients commit writes regular intervals control system update daemon 
malicious clients system may avoid problem weakening replica consistency guarantees mirrored files writes left uncommitted unreasonably long periods 
truncate remove protocol truncate remove relies nfs server maintain authoritative record file length link count 
proxy consults set attributes target file message attributes current second window defined nfs implementations see section 
target file logical size shows data striping zone proxy issues intention coordinator message issuing nfs operation file server message 
operation committed nfs server protocol contacts storage nodes coordinator map service release storage message registers completion coordinator message 
current prototype proxy executes entire protocol done directly coordinator simplifying proxy saving message exchange intention response completion 
intention expires coordinator probes nfs server getattr determine status operation 
operation completed nfs server coordinator rolls operation forward contacting storage nodes release orphaned storage 
enlarging writes truncate remove protocol section avoid race enlarging write special case extending write extends small file threshold offset striping zone making large file 
danger client complete enlarging write consults file logical size recognizing small file issues truncate remove operation nfs server 
occurs fail notify coordinator need release network storage allocated newly enlarged file leaving orphaned truncate remove 
way prevent race conservatively notify coordinator truncate remove operations small files 
imposes extra message latency disk fault truncates removes small files 
prefer shift costs enlarging write operation increasing creation cost large files 
enlarging write cost incurred large file amortized operations file 
approach uses variant basic intention protocol detect race occurs release orphaned storage 
trick coordinator detect executed truncate remove opera tion attributes fetched com enlarging write 
enlarging write completed file coordinator contacts nfs server validate file existence logical size 
coordinator delays validation fixed waiting period elapsed 
waiting period chosen exceed time bound staleness cached attributes nfs second rule ample slack time account clock skew operation latencies 
comparison phase commit basic intention logging protocol slice similar conventional phase commit key differences 
brought simple nature file system operations tends protocol efficient general phase commit common cases 
simplicity assumes func tions traditional commit coordinator trans requests participants gathers commit votes 
performs commit stable storage 
participants execute portion operation fixed partial order participant acting primary commit site 
purpose intention pro tocol detect recover failures inter sequence primary commit site executes part operation 
example nfs server unwittingly acts primary commit site removes truncates extending writes extending write commits 
truncate remove failure nfs server commits causes re protocol roll forward releasing orphaned storage similar conventional journaling file system file system scavenger fsck 
need notify participants coordinator operation committed 
sufficient stabilize data participants hold locks committed state 
file operations serialized necessary nfs server name space operations coordinator reads writes shared files 
prototype experimental results implemented slice prototype set loadable kernel modules freebsd operating system 
network storage nodes prototype freebsd pcs serving blocks local disks ufs ffs storage manager external hash map opaque nfs file handles local files 
coordinator implemented extension storage node module consisting total lines code 
prototype ip filter ip stack network driven may rewrite consume packets may generate new ip packets 
non blocking state machine consisting lines code 
overarching goal keep simple small fast 
section presents experimental results interposed file striping implemented slice prototype 
intent show costs interposed architecture effect costs delivered file access bandwidths 
prototype coordinator storage service implement mechanisms needed recovery normal operation including coordinator intentions log 
reflect costs recovery de scribed section 
reconciliation active re mirrored replicas implemented 
experiments clients mhz pentium iii pcs motherboard bit mhz pci bus intel bx chipset 
nfs server slice storage nodes dell systems mhz pentium iii xeon chipset 
read write mirror read mirror write storage nodes storage nodes 
single client saturation bandwidth sequential read write 
read write mirror read mirror write mirrored write write mirrored read read mirrored remove remove file size kb 
file read write remove timings kb threshold offset 
server network adapter disk controllers independent peer bit mhz pci busses 
gb seagate ultra cheetah disks 
machines equipped lanai adapters kernels built freebsd source pool 
network communication experiments uses trapeze myrinet messaging system optimized network traffic 
configuration trapeze myrinet provides mb point point bandwidth kb transfer size 
nfs traffic uses udp ip kb mtu routed trapeze device driver 
shows total time read write remove file varying file size kb kb striping zone threshold set kb 
tests start cold client storage node caches 
write timings include cost commit 
data point average trials 
slice uses storage nodes experiment 
latencies remain constant striping zone threshold interactions exclusively nfs server 
files small write entirety issuing commit server block clustering loads file read 
files indirect blocks nfs server bounding deletion time 
file size exceeds striping zone threshold latencies jump operations involve multiple sites incur costs intention logging protocol 
example read write costs increase faults block maps coordinator issuing threshold 
writes removes register intent coordinator performing extending write striping zone issuing remove nfs server respectively 
resulting discontinuities clearly shown graph cost progressively significant file sizes grow 
read write times increase linearly file size remove time remains constant 
prototype serializes sub operations commit simplicity compromising write latency slightly 
sizes mirroring negligible effect read write times 
architecture allows high bandwidth large files 
shows bandwidth delivered single client group clients varying number storage nodes 
bandwidths measured dd read write gb file kb chunks slice striping grain kb 
graph gives non redundant mirrored storage results 
left hand graph shows measured bandwidth delivered single client lanai adapter 
modified freebsd nfs client zero copy reads copy remains write path 
single client read bandwidth scales number storage nodes client cpu saturates mb copy write path saturates client writing mb mirrored read bandwidth roughly half due artifact striping policy ufs ffs block storage manager prototype 
ufs ffs aggressively prefetches local disk local memory detects sequential near sequential accesses 
case policy consumes storage band width load data client chooses read node 
replication degree clients read half blocks stored fetched node block clustering requiring disk seeks 
mirroring writes pushes twice bytes client network interface 
non mirrored case client saturates copying data user kernel space 
copy happens block replicas transmitted client yielding better half non mirrored write bandwidth 
right hand graph shows aggregate saturation bandwidth 
clients reading clients required saturate storage nodes writing due lower client write bandwidth 
storage nodes deliver sum total mb readers mb writers 
mirroring degrades read saturation bandwidth reason single client case writes consume additional transfer time space overheads storage nodes 
presents protocols reliable mirrored files failure atomic file operations slice scalable network storage system high speed lans block storage 
slice interposes request switching filter client interface network storage system provide scalable bandwidth capacity distributing file data network storage nodes 
slice architecture designed leverage emerging models object network storage allowing incremental deployment scalable network existing network file system installations 
request switching architecture presents challenges separates functions typically combined central file servers 
shows address reliability failure atomicity file system operations slice architecture related distributed network storage systems 
show provide reliable file storage support mirrored striping 
experimental results slice prototype quantify costs recovery protocol show acceptable common case 
results show slice approach low cost delivers client file access bandwidths approaching gigabit myrinet network speeds 
show need streamlining nfs client stacks respond faster networks high performance services intensive workloads including scalable computing data intensive network services multimedia visualization 
amiri gibson golding 
highly concurrent shared storage 
proceedings th international conference distributed computing systems pages april 
anderson 
object storage devices command set proposal 
technical report national storage industry consortium october 
anderson dahlin neefe patterson roselli wang 
serverless network file systems 
proceedings acm symposium operating systems principles pages december 
arpaci dusseau anderson culler hellerstein patterson 
clus ter river making fast case common 
parallel distributed systems may 
birrell needham 
universal file server 
eee transactions software engineering se september 

cabrera long 
swift distributed disk striping provide high data rates 
computing systems fall 
chase anderson lebeck 
network trapeze 
hot interconnects symposium august 
gibson nagle chang gobioff lee riedel zelenka 
file server scaling network attached secure disks 
proceedings acm cs international conference measurement modeling computer systems volume performance evaluation review pages new york june 
acm press 
gibson nagle chang gobioff hardin riedel zelenka 
cost effective high bandwidth storage architecture 
proceedings eighth international conference architectural support programming languages operating systems october 
gray 
notes database operating systems 
operating sys advanced course volume lecture notes cs page 
springer new york 
tt hartman 
zebra striped network file system 
proceedings fourteenth acm symposium operating systems principles pages 
lee thekkath 
petal distributed virtual disks 
proceedings seventh international conference architectural support programming languages operating systems pages cambridge ma oc 

quite nfs soft cache consistency nfs 
usenix association conference proceedings pages january 
keefe 
global file system shared disk file system bsd linux 
usenix technical conference freenix track june 
thekkath mann lee 
frangipani scalable distributed file system 
proceedings sixteenth acm symposium operating system principles sosp october 
