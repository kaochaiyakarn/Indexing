practical dependence testing gina ken kennedy chau wen tseng tr november center research parallel computation rice university box houston tx proceedings sigplan conference programming language design implementation toronto ca june 
practical dependence testing gina ken kennedy chau wen tseng department computer science rice university houston tx precise efficient dependence tests essential effectiveness parallelizing compiler 
proposes dependence testing scheme classifying pairs subscripted variable 
exact fast dependence tests certain classes array empirical results showing dominate scientific fortran codes 
dependence tests implemented rice university pfc parallelizing compiler parallel programming environment 
past decade high performance computing vital scientists engineers alike 
progress developing large scale parallel architectures composed powerful commodity microprocessors 
exploit parallelism memory hierarchy effectively machines compilers able analyze data dependences precisely array loop nests 
single microprocessor optimizations utilizing dependence information result integer factor speedups scientific codes 
expense scalar compilers perform dependence analysis 
parallelizing compilers traditionally relied dependence tests detect data dependences pairs array banerjee inequalities gcd test 
tests usually general necessary 
presents empirical results showing array scientific fortran programs fairly simple 
simple demonstrate suite highly exact efficient dependence tests 
feel tests significantly reduce cost performing research supported center research parallel computation national science foundation science technology center ibm cray research foundation 
dependence analysis making practical compilers 
definitions 
data dependence theory data dependence originally developed automatic proved applicable wide range optimization problems 
say data dependence exists statements path statements access location memory 
types data dependence true flow dependence occurs writes memory location reads 
anti dependence occurs reads memory location writes 
output dependence occurs writes memory location writes 
input dependence occurs reads memory location reads 
dependence analysis process computing dependences program 
dependence testing calculating data dependence arrays complicated fact array may access memory location 
dependence testing method determine dependences exist subscripted array loop nest 
purposes explication ignore control flow loops 
suppose wish test exists dependence statement model loop nest delta delta delta ln un gm enddo delta delta delta enddo enddo ff fi vectors integer indices ranges upper lower bounds loops example 
dependence exist ff fi ff lexi equal fi system dependence equations satisfied ff fi independent 
distance direction vectors data dependences may characterized access pattern loop iterations distance direction vectors 
suppose exists data dependence ff ff ff fi fi fi 
distance vector dn defined fi gamma ff 
direction vector dn dependence defined equation ff fi ff fi ff fi elements displayed order left right outermost innermost loop nest 
example consider loop nest distance direction vectors dependence definition array gamma respectively 
different values ff fi may satisfy dependence equations set distance direction vectors may needed completely describe dependence 
direction vectors introduced wolfe useful calculating level loop carried dependences 
dependence carried outermost loop direction direction vector 
instance direction vector dependence shows dependence carried loop 
carried dependences important determine loops executed parallel synchronization 
direction vectors useful determining loop interchange legal profitable 
distance vectors kuck muraoka precise versions direction vectors specify actual distance loop iterations accesses memory location 
may guide optimizations exploit parallelism memory hierarchy 
dependence testing goals 
tries disprove dependence pairs subscripted array variable 
dependences may exist tries characterize manner usually minimal complete set distance direction vectors 
dependence testing conservative assume existence dependence disprove 
validity optimizations dependence information guaranteed 
exact tests array subscripts linear expressions loop index variables dependence testing equivalent problem finding integer solutions systems linear diophantine equations np complete problem 
practice dependence tests banerjee inequalities seek efficient approximate solutions 
exact tests hand dependence tests detect dependences exist 
indices subscripts term index mean index variable loop surrounding 
assume auxiliary induction variables detected replaced linear functions loop indices 
addition term subscript refer subscripted positions pair array pair subscripts dimension array 
dependence tests consider pair array brevity refer subscript pair simply subscript 
example pair array loop nest say index occurs subscript indices occur second subscript 
classification section orthogonal criteria classifying subscripts pair array 
criterion complexity refers number indices appearing subscript 
second criterion separability describes subscript interacts subscripts purpose dependence testing 
complexity testing dependence classify subscript positions total number distinct loop indices contain 
subscript said ziv zero index variable subscript position contains index 
subscript said siv single index variable index occurs position 
subscript index said miv multiple index variable 
instance consider loop testing true dependence code subscript ziv second siv third miv 
sake simplicity ignore output dependences examples 
separability testing multidimensional arrays say subscript position separable indices occur subscripts 
different subscripts contain index say coupled 
example loop subscript separable second third coupled contain index ziv subscripts vacuously separable contain indices 
separability important multidimensional array cause imprecision dependence testing 
suggested approach called subscript testing test subscript separately intersect resulting sets direction vectors 
method provides conservative approximation set directions coupled group may yield direction vectors exist 
instance consider loop subscript subscript test yield single direction vector 
careful examination statement reveals direction vector invalid dependence exists 
hand subscripts separable may compute direction vector subscript independently merge direction vectors positional basis full precision 
example loop nest leftmost direction direction vector determined testing subscript middle direction testing second subscript rightmost direction testing third subscript 
resulting direction vector precise 
approach applied distances allow calculate exact distance vector gamma 
know linear algebra systems equations distinct variables may solved independently solutions merged form exact solution set 
previous tests property array consisting separable siv subscripts 
li formalized applied method test array containing miv coupled subscripts 
treatment constraint propagation section inspired 
dependence testing goal dependence testing construct complete set distance direction vectors representing potential dependences arbitrary pair subscripted array variable 
distance vectors may treated precise direction vectors simply refer direction vectors rest 
sake simplicity assume loops step 
non unit step values may normalized fly needed 
partition algorithm classifications previous section may naturally partition dependence testing algorithm follows 
partition subscripts separable minimal coupled groups 

label subscript ziv siv miv 

separable subscript apply appropriate single subscript test ziv siv miv complexity subscript 
produce independence direction vectors indices occurring subscript 

coupled group apply multiple subscript test produce set direction vectors indices occurring group 

test yields independence dependences exist 

merge direction vectors computed previous steps single set direction vectors 
algorithm implemented pfc automatic vectorizing parallelizing compiler parallel programming environment 
dependence testing algorithm takes advantage separability classifying subscripts pair array separable part minimal coupled group 
coupled group minimal partitioned non empty subgroups distinct sets indices 
partition achieved separable subscript coupled group completely disjoint sets indices 
partition may tested isolation resulting distance direction vectors merged loss precision 
subscripts may partitioned algorithm 
alternative algorithm union find implemented pfc 
dependence testing algorithm may halt return independence soon test separable subscript coupled group yields independence simultaneous solutions possible prove solutions exist subset entire system 
input pair dimensional array containing subscripts sm enclosed loops indices output set partitions pn containing separable minimal coupled group fs endfor index remaining partition contains discard endif endif endfor endfor subscript partition algorithm merge merge operation described test algorithm merits explanation 
separable coupled subscript group contains unique subset indices merge may thought cartesian product 
loop nest position yields direction vector 
loop 
second position yields direction vector loop 
resulting cartesian product single vector 
complex example shown subscript yields direction vector 
loop 
appear subscript assume full set direction vectors 
loop 
merge yields set direction vectors dependence test results ziv subscripts treated specially 
ziv subscript proves independence dependence test algorithm halts immediately 
independence proved ziv test produce direction vectors merge necessary 
single subscript tests consider dependence tests single separable subscripts 
tests assume subscript tested contains expressions linear loop index variables 
subscript expression linear form index loop nesting level integer constants expression possibly containing loop invariant symbolic expressions 
assume pfc direction vectors possible nonlinear subscripts 
ziv test ziv test dependence test takes expressions 
system determines expressions equal proved independence 
subscript contribute direction vectors may ignored 
ziv test easily extended symbolic expressions 
simply form expression representing difference subscript expressions 
difference simplifies non zero constant proved independence 
siv tests number authors notably banerjee wolfe published single index exact test linear siv subscripts finding solutions simple diophantine equation variables 
new exact test idea treating commonly occurring siv subscripts special cases 
provides greater efficiency easily extended handle symbolics coupled subscripts 
separating siv subscripts categories strong siv weak siv subscripts 
strong siv subscripts siv subscript index said strong form hai ai linear coefficients occurrences index constant equal 
strong siv subscripts define dependence distance gamma gamma dependence exists integer gamma loop upper lower bounds 
dependences exist dependence direction direction strong siv test exact test implemented efficiently operations 
calculate distance vectors case get test additional cost 
advantage strong siv test easily extended handle loop invariant sym bounded iteration space weak crossing siv weak zero siv strong siv geometric view siv tests expressions 
trick evaluate dependence distance symbolically 
result constant test may performed 
calculate difference loop bounds compare result symbolically 
instance consider loop strong siv test evaluate dependence distance gamma simplifies compared loop bounds symbolically proving independence gamma 
weak siv subscripts weak siv subscript form ha coefficients occurrences index different constant values 
stated previously weak siv subscripts may solved exact test 
find helpful view problem geometrically dependence equation describes line dimensional plane axes 
weak siv test formulated determining line derived dependence equation intersects integer points space bounded loop upper lower bounds shown 
particular find advantageous identify special cases 
weak zero siv subscripts 
call case weak zero siv subscript 
equal zero dependence equation reduces gamma simply need check resulting value integer loop bounds 
similar check applies zero 
weak zero siv test finds dependences caused particular iteration scientific codes usually iteration loop eliminating possible direction vector dependence 
importantly weak zero dependences caused loop iteration may eliminated applying loop peeling transformation 
instance consider simplified loop program tomcatv spec benchmark suite weak zero siv test determine causes loop carried true dependence iteration iterations 
similarly aid symbolic analysis weak zero siv test discover causes loop carried anti dependence iterations iteration 
identifying iterations cause dependences weak zero siv test advises user compiler peel iterations loop resulting parallel loop weak crossing siv subscripts 
label siv subscripts gammaa subscripts typically occur part cholesky decomposition 
cases set derive dependence equation gamma corresponds intersection dependence equation line determine dependences exist simply need check resulting value loop bounds integer non integer part equal 
weak crossing siv subscripts cause crossing dependences loop carried dependences endpoints cross iteration 
dependences may eliminated loop splitting transformation 
instance consider loop levine vector test suite weak crossing siv test determines dependences exist definition cross iteration 
splitting loop iteration results parallel loops forms weak siv tests useful testing coupled subscripts described section 
rely single index exact test handle general case 
complex iteration spaces siv tests extended handle complex iteration spaces loop bounds may functions loop indices example triangular trapezoidal loops 
need compute minimum maximum loop bounds loop index 
starting outermost loop nest working inwards replace index loop upper bound maximum value minimal value negative term 
opposite lower bound replacing index minimal value maximal negative term 
evaluate resulting expressions calculate minimal maximal values loop index repeat inner loop 
algorithm returns maximal range index needed siv tests 
miv tests banerjee gcd test may employed construct legal direction vectors linear subscripts containing multiple indices 
cases test determine minimal dependence distance carrier loop 
literature area extensive discuss 
pfc employs special version banerjee gcd test enhanced triangular loop nests 
note special case miv subscripts called restricted double index variable subscripts form ha similar siv subscripts distinct indices 
observing different loop bounds siv tests may extended exactly test subscripts 
symbolic tests pointed text perform dependence testing natural way subscripts loop invariant symbolic additive constants 
basic idea gamma difference constant terms subscript expression may formed symbolically simplified 
result may constant 
section describe special test independence subscripted variable contained different loops nesting level siv index 
pair loops general test 
assume sake simplicity greater equal zero 
dependence exists dependence equation satisfied gamma gamma value cases consider 
may sign 
case gamma assumes maximum value minimum value remember non negative 
dependence gamma gamma gamma inequality violated dependence exist 
second case different signs 
case gamma assumes maximum dependence gamma gamma gamma inequality violated dependence exist 
noted inequalities just special cases banerjee inequality 
stated form obvious formulated symbolic values furthermore test may test dependence loop empirical study section shows symbolic testing techniques significantly enhance effectiveness dependence tests pfc 
symbolic expressions remain dependence testing may user query interactive system condition break dependence run time 
delta test tests separable subscripts subscript coupled group test proves independence dependence exists 
seen subscript subscript testing input coupled siv miv subscripts output hybrid distance direction vector constrained miv subscripts initialize elements constraint vector untested siv subscripts apply siv test untested siv subscripts return independence derive new constraint vector return independence propagate constraint miv subscripts possibly creating new ziv siv subscripts apply ziv test untested ziv subscripts return independence continue endif endwhile untested subscripts test propagate constraints endwhile test remaining miv subscripts intersect resulting direction vectors return distance direction vectors delta test algorithm coupled group may yield false dependences 
research focused overcoming deficiency 
section delta test multiple subscript test designed exact efficient common coupled subscripts 
presents overview delta test algorithm 
main insight delta test constraints derived siv subscripts may propagated subscripts coupled group efficiently usually loss precision 
coupled subscripts scientific fortran codes simple practice delta test exact fast multiple subscript test 
delta test detect independence component ziv siv tests determine independence 
converts siv subscripts constraints propagating miv subscripts possible 
repeats new constraints propagates constraints coupled subscripts 
remaining miv subscripts tested results intersected existing constraints 
describe delta test algorithm greater detail sections 
constraints constraints assertions indices derived subscripts 
instance subscript ha generates constraint gamma gamma index dependence distance example simple constraint 
constraint vector ffi ffi ffi vector constraint indices coupled subscript group 
delta test store constraints generated siv tests easily converted distance direction vectors 
constraint ffi may form ffl dependence line line ci representing dependence equation ffl dependence distance value hdi dependence distance equivalent dependence line hx gamma ffl dependence point point hx yi representing dependence iteration dependence distances lines derive directly strong weak siv tests 
dependence points result intersecting constraints described section 
intersecting constraints dependence equations subscripts solved simultaneously dependences exist intersecting constraints subscript results greater precision 
result intersection empty set dependence possible 
constraint intersection employed direction vectors coupled siv subscripts 
version employed delta test equivalent exact multiple subscript siv test 
dependence distances easiest intersect simple comparison suffices 
distances equal dependences exist 
example reconsider loop nest section applying strong siv test subscript derives dependence distance 
doing second subscript derives distance 
intersect constraints perform comparison 
results empty set proving independence 
turns complex constraints siv subscripts may intersected exactly 
recall dependence equation siv subscript may viewed line dimensional plane 
intersecting constraints multiple siv subscripts corresponds calculating point intersection lines plane 
dependence exists lines intersect common point loop bounds coordinates point integer values 
dependence equations intersect single dependence point coordinates iterations cause dependence 
input constraints ffi ffi loop bounds output new constraint ffi ffi ffi ffi return ffi ffi return ffi ffi ffi dependence distances ffi hd ffi hd return hd return endif ffi ffi dependence points ffi hx ffi hx return hx return endif ffi ffi dependence lines distances ffi ha ffi ha lines parallel slopes equal return ha return endif lines intersect parallel hx intersection ffi ffi integer integer return hx return endif endif ffi dependence line distance ffi dependence point vice versa loss generality assume ffi ha ffi hx return hx return endif endif constraint intersection instance example loop testing second subscripts pair derives dependence lines hi hi gamma respectively 
dependence lines intersect dependence point indicating dependence second iteration 
calculating intersection lines plane performed precisely constraint intersection exact 
full constraint intersection algorithm shown 
note simplicity dependence distances treated lines places algorithm 
propagating constraints siv constraints major contribution delta test ability propagate constraints derived siv subscripts coupled miv subscripts usually loss precision 
resulting constrained subscript tested greater efficiency precision 
shows constraint propagation algorithm 
goal utilize siv constraints index eliminate instances index target miv subscript 
demonstrate algorithm example applying strong siv test subscript array derives dependence distance index propagate constraint second subscript eliminate occurrences resulting constrained siv subscript hj gamma ji 
apply strong siv test derive distance gamma loop subscripts tested delta test finished 
merge elements constraint vector determine dependence exists distance vector gamma 
constraint propagation example exact able eliminate instances index constrained subscript 
empirical study section shows frequently case scientific codes 
general algorithm may eliminate occurrence index 
results improved precision testing coupled groups exact 
desired additional precision may gained utilizing constraint reduce range remaining index fourier motzkin elimination 
constraint propagation algorithm incremental adaptation test heuristic selecting linear combinations subscript expressions 
extended efficiently handle constraints siv tests linearly dependent subscripts 
examples delta test 
multiple passes delta test algorithm iterates miv subscripts reduced siv subscripts may produce new constraints 
loop nest demonstrates input miv subscript form ha constraint vector hffi ffi ffi output constrained ziv siv miv subscript index nonzero ffi dependence distance hdi gamma gamma ffi dependence line fiy ci ff gamma fi fi ff ff fi ff multiply terms subscript ff retain integer coefficients result fa ff endfor fi endif ffi dependence point hx yi gamma endif endfor constraint propagation pass delta test second subscript tested producing dependence distance loop 
constraint propagated subscript resulting subscript hj ji 
new siv subscript created algorithm repeats 
second pass new subscript tested produce distance loop 
constraint propagated third subscript derive subscript hk gamma ki 
new siv subscript causes pass discovers distance gamma loop 
siv subscripts tested delta test halts point returning distance vector gamma 
improved precision delta test may improve precision dependence tests remaining constrained miv subscripts 
applied subscript example loop banerjee inequalities show possible dependence subscripts 
delta test improve converting subscript dependence distance gamma propagating second subscript produce constrained miv subscript gamma 
banerjee inequalities detect independence constrained subscript 
similarly example loop gcd test shows integer solutions subscripts 
propagating distance constraint subscript second subscript yields constrained miv subscript gamma 
gcd test detect independence gcd coefficients indices divide evenly constant term 
distance vectors delta test particularly useful analyzing dependences skewed loops including upper triangular loops skewed loop normalization 
consider simplified kernel livermore loops subscripts separable strong siv test applied calculate distance vectors dependences loop nest 
dependence information skew inner loop expose parallelism resulting loop nest point dependence tests unable calculate distance vectors due presence miv subscripts 
delta test easily propagate distance constraints subscript second subscript derive distance vectors 
dependence information may guide optimizations loop interchange loop blocking scalar replacement 
restricted div constraints previous section showed siv constraints may propagated 
propagating miv constraints expensive general case 
method handle important special case consisting coupled subscripts discussed section 
simplicity consider array form array pairs tested subscript pairs nonlin program type lines total sep coup total subs shallow water atmosphere euler unsteady euler heat heat conduction system linear algebra benchmark equations eigenfunction shear turbulence simple hydrodynamics particle transport vortex vortex simulation perfect adm aps air pollution arc srs fluid flow solver bdna nas molecular dynamics dna dyfesm sds structural dynamics flo tfs transonic inviscid flow mdg lws molecular dynamics water mg sms depth migration ocean ocs ocean simulation qcd lgs quantum spec wss weather simulation spice css circuit simulation track mts missile tracking trfd tis electron integral transform spec doduc fpppp electron integral derivative matrix matrix multiplications nasa nasa ames fortran kernels tomcatv mesh generation math libraries eigensystems library linpack linear algebra library table program characteristics ziv siv miv delta symbolics strong weak zero weak cross program euler heat shear simple vortex adm arc bdna dyfesm flo mdg mg ocean qcd spec spice track trfd doduc fpppp matrix nasa tomcatv linpack table dependence test application success independence frequencies instances index instances index constraint derived subscript may propagated second subscript employing algorithms siv subscripts discussed previously 
additional consideration bounds may differ 
commonly instances index instances index yields set dependence equations dependence equation may tested separately loss precision checking dependence 
equations considered simultaneously determining distance direction vectors possible 
propagate constraints coupled subscripts considering instances index second delta delta dependence distance occurrences index produce set dependence equations delta delta clear equations may combined result equation delta delta gamma gamma check dependence equation testing specific distance direction vector 
array transpose show constraints may array transpose example propagating constraints results dependence equation delta delta 
result distance vectors form gammad valid direction vectors 
direction vector may ignored equivalent reversed dependence direction vector 
dependences carried outer loop inner loop may executed parallel 
precision complexity precision delta test depends nature coupled subscripts tested 
siv tests applied phase exact 
constraint intersection algorithm exact calculate intersection number lines plane precisely 
delta test exact number coupled siv subscripts 
constraint propagation phase weak zero siv constraints dependence points may applied exactly assign values occurrences index subscript 
dependence distances strong siv subscripts may propagated miv subscripts loss precision coefficients corresponding index equal 
fortunately frequently case scientific codes 
constraints propagated exactly subscripts uncoupled eliminating shared indices delta test prevents loss precision due multiple subscripts 
delta test tested subscripts ziv siv tests answer exact 
separable miv subscripts remain delta test limited precision single subscript tests applied subscript 
research shown banerjee gcd test usually exact single subscripts delta test exact cases 
sources imprecision delta test 
constraint propagation dependence lines distances may imprecise index completely eliminated target subscripts 
second complex iteration spaces triangular loops may impose constraints subscripts utilized delta test 
delta test propagate constraints general miv subscripts 
result coupled miv subscripts may remain delta test 
general expensive multiple subscript dependence tests power tests may cases 
subscript coupled group tested complexity delta test linear number subscripts 
constraints may propagated subscripts multiple times 
empirical results section empirical results demonstrate dependence tests applicable scientific fortran codes 
pfc currently performs dependence tests ffl subscript classification partitioning ffl ziv test symbolic ffl strong siv test symbolic ffl weak siv test including special cases ffl miv tests gcd triangular banerjee ffl delta test constraint intersection propagation distance constraints study measured number times dependence test applied pfc processing groups fortran programs rice compiler evaluation program suite perfect spec benchmark suites math libraries linpack 
explanation table provides number lines subroutines program histogram number array dimensions pair array tested number separable coupled nonlinear subscripts pairs 
ziv siv miv delta symbolics category strong weak zero weak cross summed programs tests applied successful tests proven independences applications successful applications proved independence averaged programs tests applied successful tests proven independences applications successful applications proved independence table comparison dependence tests table describes usage success frequencies dependence tests program 
test table shows number times test applied succeeded eliminating direction vector proved independence 
note columns combined ziv test identical 
columns delta test reflect frequencies measured constraint intersection 
separate column indicates number times distance constraints propagated miv subscripts 
results dependence tests applied constrained subscripts credited test invoked 
columns table show number times symbolic additive constants manipulated tests succeeded eliminating direction vectors proved independence 
table summarizes effectiveness dependence test relative tests presenting percentage contribution test total number applications successes independences 
displayed absolute effectiveness test percentage applications test proved independence successful eliminating direction vectors 
order limit bias large small programs groups results 
group percentages calculated summing results programs 
second group percentages calculating program averaged 
analysis pfc applied dependence tests times subscript pairs 
subscript pairs tested nonlinear tests subscripts multidimensional array proven independence 
array pairs tested subscript pairs ziv strong siv 
subscripts tested miv 
ziv strong siv tests combined successful tests 
ziv test accounted pairs proven independent 
subscripts separable 
coupled subscripts concentrated programs notably coupled subscripts 
coupled groups size coupled groups size encountered 
delta test constraint intersection algorithm tested coupled groups exactly 
propagation distance constraints applied cases converting miv subscripts siv form cases 
delta test managed test coupled groups exactly constraint intersection propagation dependence distances 
expect percentage improve implement full constraint propagation including propagation constraints 
results show siv delta tests tested subscripts exactly 
miv tests banerjee gcd test needed small fraction subscripts important certain programs 
successful tests required pfc ability manipulate symbolic additive constants 
indicates importance symbolic analysis dependence testing 
related section discuss large body field dependence testing 
suite tests distinguished fact combine high precision efficiency targeting simple common subset possible subscripts 
integer linear programming testing linear subscript functions dependence equivalent finding simultaneous integer solutions loop limits approach employ integer programming methods 
linear programming techniques shostak loop residue karmarkar method applicable integer solutions guaranteed 
unfortunately integer linear programming techniques suitable solving large systems equations high initialization costs implementation complexity desirable dependence testing 
single subscript tests earliest dependence tests concentrated deriving distance vectors strong siv subscripts 
described test analyzes general siv subscripts symbolically 
banerjee wolfe developed current form single index exact test 
miv subscripts gcd test may check unconstrained integer solutions 
banerjee inequalities provide useful general purpose single subscript test constrained real solutions 
adapted provide different types dependence information 
research shown banerjee inequalities exact common cases results extended direction vectors complex iteration spaces 
test developed kong integrates gcd banerjee tests usually prove integer solutions 
gross steenkiste propose efficient interval analysis method calculating dependences arrays 
unfortunately method handle coupled subscripts unsuitable loop transformations distance direction vectors calculated 
describe symbolic dependence testing 
polychronopoulos propose flow analysis framework aid symbolic tests 
execution conditions may refine dependence tests 
wolfe equals test checks dependences invalidated control flow loop 
lu chen subdomain test incorporates information indices conditionals loop body 
kong extended banerjee inequalities 
multiple subscript tests early approaches impose simultaneity testing multidimensional arrays include intersecting direction vectors dimension linearization proved inaccurate cases 
true multiple subscript tests provide precision expense efficiency considering subscripts simultaneously 
comparison delta test propagates constraints incrementally needed 
fourier motzkin elimination earliest multiple subscript tests utilized fourier motzkin elimination linear programming method pairwise comparison linear inequalities 
kuhn represent array accesses convex regions may intersected fourier motzkin elimination 
regions may summarize memory accesses entire segments program 
techniques flexible expensive 
fourier motzkin elimination dependence testing takes times longer conventional dependence tests 
constraint matrix constraint matrix test developed wallace simplex algorithm modified integer programming 
precision expense difficult ascertain halts arbitrary number iterations avoid cycling 
simplex algorithm worst case exponential complexity takes linear time linear programming problems 
schrijver states combinatorial problems coefficients tend gamma simplex algorithm slow cycle certain pivot rules 
test li test multidimensional version banerjee inequalities checks simultaneous constrained real valued solutions 
test forms linear combinations subscripts eliminate instances indices tests result banerjee inequalities 
simultaneous realvalued solutions exist banerjee inequalities finds solutions linear combinations generated 
test test direction vectors triangular loops 
precision may enhanced applying gcd single index exact tests generated 
obvious method extend test prove existence simultaneous integer solutions 
test exact dimensions unconstrained integer solutions exist coefficients index variables gamma 
restrictions exact coupled dimensions 
delta test may viewed restricted form test trades generality greater efficiency precision 
multidimensional gcd banerjee multidimensional gcd test checks simultaneous unconstrained integer solutions multidimensional arrays 
applies gaussian elimination modified integers create compact system integer points provide integer solutions original dependence system 
extended provide exact test distance vectors 
power test wolfe tseng power test gains great precision applying loop bounds elimination dense system resulting multidimensional gcd test 
power test expensive flexible suited providing precise dependence information direction vectors imperfectly nested loops loops complex bounds non direction vector constraints 
constraint matrix tests require pretest eliminate linearly dependent subscripts 
comparison power delta tests detect discard linearly dependent subscripts part basic algorithm 
empirical studies li showed coupled subscripts multiple subscript tests may detect independence cases subscript subscript tests libraries 
results demonstrate delta test effective testing coupled subscripts 
comprehensive empirical study array subscripts conventional dependence tests performed shen 
study focuses complexity subscripted effectiveness partition dependence tests 
provide data efficacy symbolic dependence tests 
presents strategy dependence testing thesis array real codes simple subscripts 
empirical results show practice dependence tests described extremely precise fast applicable vast majority subscripts scientific codes 
cases tests inapplicable afford applying expensive tests cost may effectively amortized 
experience shown dependence analysis highly useful scalar parallel compilers 
feel dependence tests described dependence analysis efficient practical compiler 
research suite dependence tests described owes contributions 
version pfc employed subscript subscript testing banerjee gcd test extended calculate level minimum distance interchange information dependence 
strategy proved useful pfc layered vectorization algorithm 
mid eighties randy allen implemented strong siv test applied subscript subscripts siv separable change dramatically improved efficiency dependence testing 
strong siv banerjee tests enhanced deal symbolic additive constants 
simultaneity added multidimensional arrays comparing dependence distances index 
david callahan extended pfc handle weak siv subscripts general constraint intersection 
addition proposed constraint propagation algorithm conducted initial study complexity array subscripts 
paul havlak extended pfc ability test subscripts containing symbolic expressions assisted developing symbolic test described section 
unfortunately dependence testing pfc hindered due oversight original algorithm employed siv tests subscripts siv subscripts 
presence single miv subscript multidimensional array cause pfc fall back subscript subscript testing tests 
test motivated reexamine pfc test strategy exposing obvious mistake 
additional led current form delta test 
grateful people named contributions development dependence tests described pfc research groups especially paul havlak help conducting empirical study 
wish kathryn mckinley doug moore dean assistance 
allen 
dependence analysis subscripted variables application program transformations 
phd thesis rice university april 
allen 
unifying vectorization parallelization optimization compiler 
editors proceedings third international conference supercomputing 
allen kennedy 
pfc program convert fortran parallel form 
hwang editor supercomputers design applications pages 
ieee computer society press silver spring md 
allen kennedy 
automatic translation fortran programs vector form 
acm transactions programming languages systems october 
harrison 
automatic recognition induction variables recurrence relations interpretation 
proceedings sigplan conference program language design implementation white plains ny june 
banerjee 
data dependence ordinary programs 
master thesis dept computer science university illinois urbana champaign november 
report 
banerjee 
speedup ordinary programs 
phd thesis dept computer science university illinois urbanachampaign october 
report 
banerjee 
dependence analysis supercomputing 
kluwer academic publishers boston ma 
burke cytron 
interprocedural dependence analysis parallelization 
proceedings sigplan symposium compiler construction palo alto ca june 
callahan 
dependence testing pfc weak separability 
supercomputer software newsletter dept computer science rice university august 
callahan carr kennedy 
improving register allocation subscripted variables 
proceedings sigplan conference program language design implementation white plains ny june 
callahan cooper hood kennedy torczon 
parallel programming environment 
international journal supercomputer applications winter 
callahan dongarra levine 
vectorizing compilers test suite results 
proceedings supercomputing orlando fl november 

vector optimization asc 
proceedings seventh annual princeton conference information sciences systems princeton nj march 
cook 
complexity theorem proving procedures 
proceedings third annual acm symposium theory computing new york ny 
cybenko pointer kuck 
supercomputer performance evaluation perfect benchmarks 
proceedings acm international conference supercomputing amsterdam netherlands june 
dantzig 
linear programming extensions 
princeton university press princeton nj 
feautrier 
parametric integer programming 
operations research september 
gannon jalby gallivan 
strategies cache local memory management global program transformations 
proceedings international conference supercomputing 
springer verlag athens greece june 
polychronopoulos 
compiling issues supercomputers 
proceedings supercomputing orlando fl november 
gross steenkiste 
structured dataflow analysis arrays optimizing compiler 
software practice experience february 
polychronopoulos 
symbolic dependence analysis high performance parallelizing compilers 
proceedings third workshop languages compilers parallel computing irvine ca august 
little 
improved time parallel processor bounds fortran loops 
ieee transactions computers january 
karmarkar 
new polynomial time algorithm linear programming 
proceedings th annual acm symposium theory computing 
kennedy 
automatic translation fortran programs vector form 
technical report dept mathematical sciences rice university october 
kennedy 
triangular banerjee inequality 
supercomputer software newsletter dept computer science rice university october 
kennedy tseng 
analysis transformation editor 
proceedings acm international conference supercomputing cologne germany june 
kennedy tseng 
interactive parallel programming editor 
ieee transactions parallel distributed systems july 
kong 
extending banerjee wolfe test handle execution conditions 
technical report dept ee cs stevens institute technology 
kong 
perfect accuracy approximate subscript analysis test 
proceedings acm international conference supercomputing amsterdam netherlands june 
kong 
test new test subscript data dependence 
proceedings international conference parallel processing st charles il august 
kuck 
structure computers computations volume 
john wiley sons new york ny 
kuck kuhn padua wolfe 
dependence graphs compiler optimizations 
conference record eighth annual acm symposium principles programming languages williamsburg va january 
kuck muraoka chen 
number operations simultaneously executable fortran programs resulting speedup 
ieee transactions computers december 
kuhn 
optimization interconnection complexity parallel processors single stage networks decision trees 
phd thesis dept computer science university illinois urbana champaign february 
lamport 
parallel execution loops 
communications acm february 
li yew 
results exact data dependence analysis 
gelernter nicolau padua editors languages compilers parallel computing 
mit press 
li yew zhu 
data dependence analysis multi dimensional array 
proceedings acm international conference supercomputing crete greece june 

introducing symbolic problem solving techniques phases 
proceedings second international conference supercomputing st malo france july 
lu chen 
subdomain dependence test massive parallelism 
proceedings supercomputing new york ny november 
mcmahon 
livermore fortran kernels computer test numerical performance range 
technical report lawrence livermore national laboratory 
muraoka 
parallelism exposure exploitation programs 
phd thesis dept computer science university illinois urbana champaign february 
report 
porterfield 
software methods improvement cache performance 
phd thesis rice university may 
schrijver 
theory linear integer programming 
john wiley sons chichester great britain 
shen li yew 
empirical study fortran programs parallelizing compilers 
ieee transactions parallel distributed systems july 
shostak 
deciding linear inequalities computing loop residues 
journal acm october 

interprocedural analysis program restructuring 
csrd rpt 
dept computer science university illinois urbana champaign december 
irigoin feautrier 
direct parallelization call statements 
proceedings sigplan symposium compiler construction palo alto ca june 

spec benchmark suite designed today advanced systems 
spec newsletter volume issue spec fall 
wallace 
dependence multi dimensional array 
proceedings second international conference supercomputing st malo france july 
wolf lam 
maximizing parallelism loop transformations 
proceedings third workshop languages compilers parallel computing irvine ca august 
wolfe 
techniques improving inherent parallelism programs 
master thesis dept computer science university illinois urbana champaign july 
wolfe 
optimizing supercompilers supercomputers 
phd thesis dept computer science university illinois urbana champaign october 
wolfe 
loop skewing wavefront method revisited 
international journal parallel programming august 
wolfe 
optimizing supercompilers supercomputers 
mit press cambridge ma 
wolfe tseng 
power test data dependence 
technical report cs dept computer science engineering oregon graduate institute august 
appear ieee transactions parallel distributed systems 
