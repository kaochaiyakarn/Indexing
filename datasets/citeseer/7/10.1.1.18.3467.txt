overview mpi io parallel interface peter corbett dror feitelson sam hsu bill nitzberg jean pierre marc snir bernard wong watson research center yorktown heights new york usa nasa ames research center moffett field california usa mpi writing portable message passing parallel programs reality 
remaining problems file parallel file systems support similar interfaces lack standard developing truly portable program impossible 
feasible develop large scientific applications scratch generation parallel machine scientific world program considered truly portable compiles runs efficiently 
mpi io interface proposed extension mpi standard fill need 
mpi io supports high level interface describe partitioning file data processes collective interface describing complete transfers global data structures process memories files asynchronous operations allowing computation overlapped optimization physical file layout storage devices disks 
chapter parallel mpi writing portable message passing parallel programs reality 
remaining problems file parallel file systems support similar interfaces lack standard developing truly portable program impossible 
feasible develop large scientific applications scratch generation parallel machine scientific world program considered truly portable compiles runs efficiently 
define parallel support operations single spmd mimd parallel application run nodes application data distributed nodes read written single logical file spread nodes disks 
significant optimizations required efficiency grouping twophase disk directed implemented part parallel environment supports high level interface describe partitioning file data processes collective interface describing complete transfers global data structures process memories file 
addition efficiencies gained support asynchronous allowing computation overlapped control physical file layout storage devices disks 
closest thing standard unix file system interface ill suited parallel computing 
main deficiency unix unix designed foremost environment files shared multiple processes exception pipes restricted access possibilities 
parallel environment simultaneous access multiple processes rule exception 
parallel processes access file interleaved manner process accesses fragmented subset file processes access parts process access 
unix file operations provide support access particular allow access multiple non contiguous parts file single operation 
parallel file systems programming environments typically solved problems data partitioning collective access introducing file modes 
different modes specify semantics simultaneous operations multiple processes 
mode defined conventional read write operations mpi io parallel interface access data semantics determined mode 
common modes mode description examples broadcast processes collectively express reduce access data pfs global mode sync broadcast scatter processes collectively express multi gather access sequence data cfs modes blocks rank order pfs sync record sync sequential shared processes operate independently cfs mode offset share common file pointer pfs log mode independent allows programmer complete express async freedom cfs mode pfs unix mode local independent common denominator modes attempt capture useful patterns help programmer define data partitioned processes 
systems explicitly modes allow programmer define partitioning directly 
examples include vesta ncube system software 
studies show various simple partitioning schemes account observed parallel patterns 
addition commercial offerings ibm sp intel ipsc cfs paragon pfs ncube thinking machines cm sfs flurry activity research community 
petsc chameleon widely available portable parallel interfaces 
pvm parallel file interface 
files declustered disks round robin fashion 
access modes support globally shared independent file pointers file node accesses 
petsc chameleon runs top vendor file systems pvm 
file layouts supported sequential sequential files underlying file system parallel node accesses disk 
global array operations supported specific collective calls perform broadcast reduce scatter gather operations 
chapter ppfs general parallel system built top intended workbench studying issues algorithms parallel modules controlling prefetching caching data consistency access patterns file layout plugged defined procedurally order evaluate optimize parallel performance 
vesta parallel file system runs ibm sp 
provides user defined parallel views files data partitioning collective operations data access asynchronous operations 
vesta designed scale hundreds compute nodes sequential bottlenecks data access path 
vip fs target core algorithms 
panda supports collective global array interface optimizes file access making file layout correspond global array distribution array stored chunks file 
overview mpi io goal mpi io interface provide widely standard describing parallel operations mpi message passing application 
interface establishes flexible portable efficient standard describing independent collective file operations processes parallel application 
nutshell mpi io idea modeled message passing writing file sending message reading file receiving message 
mpi io intends leverage relatively wide acceptance mpi interface order create similar interface 
mpi io interface intended submitted proposal extension mpi standard support parallel file need extension arises main reasons 
mpi standard cover file second parallel machines support parallel concurrent file system interface 
traditional unix file system interface ill suited parallel computing 
mpi io interface designed goals 
targeted primarily scientific applications may useful applications 
mpi io parallel interface 
mpi io favors common usage patterns obscure ones 
tries support parallel programs easily expense making things difficult 

mpi io features intended correspond real world requirements just arbitrary usage patterns 
new features added useful real world need 

mpi io allows programmer specify high level information system low level system dependent information 

design favors performance functionality 
goals mpi io 
support message passing environments mpi 

compatibility unix file interface 

support transaction processing 

support fortran record oriented emphasis put keeping mpi io mpi friendly possible 
opening file communicator specified determine group processes get access file subsequent operations 
accesses file independent coordination processes takes place collective process group associated communicator participate collective access 
mpi derived datatypes expressing data layout file partitioning file data communicator processes 
addition read write access operates number mpi objects mpi basic derived datatype 
data partitioning mpi io defining file access modes mpi io express common patterns accessing shared file broadcast reduction scatter gather chose approach consists expressing data partitioning mpi derived datatypes 
compared limited set pre defined access patterns approach advantage added flexibility expressiveness 
chapter mpi derived datatypes mpi describe data laid user buffer 
extend describe data laid file 
distinguish potentially different derived datatypes filetype describes layout file describes layout user buffer 
addition filetype derived third mpi datatype referred elementary datatype etype 
purpose elementary datatype ensure consistency type signatures filetype enhance portability basing datatypes bytes 
offsets accessing data file expressed integral number etype items 
filetype defines data pattern replicated file part file see concept displacement tile file data 
noted mpi derived datatypes consist fields data located specified offsets 
leave holes fields contain data 
context tiling file filetype process access file data matches items filetype 
access file data falls holes see 
filetype tiling file filetype data holes etype tiling file filetype data resides holes accessed processes complementary see 
file data distributed parallel processes disjoint chunks 
mpi io provides filetype constructors help user create complementary common distribution patterns broadcast reduce scatter gather hpf distributions 
general expect mpi io programs filetype constructors exclusively needing generate complicated mpi derived datatype hand 
mpi io filetype etype specified file open time 
middle ground specifying data layout file creation filesystem mpi io parallel interface process filetype tiling file process filetype etype process filetype partitioning file parallel processes creation data access read write 
restrictive prohibits accessing file multiple patterns simultaneously 
addition static data layout information stored file metadata inhibiting file portability different systems 
specifying filetype data access time cumbersome expected changed 
order better illustrate concepts consider matrix stored row major order file transposed distributed group processes row cyclic manner see 
implement row cyclic data distribution easily defined filetype constructor 
transpose performed defining corresponds column target matrix processor memory 
processes performing transpose operation identical processes 
note elementary datatype allows generic implementation applies type matrix see appendix example code 
note mpi derived datatypes leads possibility flexible patterns 
example need distribute data rank order 
addition overlaps data items accessed different processes 
extreme case full overlap broadcast reduce pattern 
filetype allows certain access pattern established 
conceivable single pattern suitable file 
mpi io solution define displacement file access pattern start displacement 
file segments need accessed different patterns displacement pattern skip preceding segment 
mechanism particularly useful handling files header information chapter process filetype logical view partition file row cyclic pattern transpose file structure process buffer process buffer process buffer implementation etype actual layout file processes etype process filetype process filetype transposing partitioning matrix see 
file headers allow support heterogeneous environments storing standard codification file data 
second tiling file structure header displacement second displacement tiling displacements mpi io parallel interface mpi io data access functions data moved files processes issuing read write calls 
orthogonal aspects data access positioning explicit offset vs implicit file pointer synchronism blocking vs nonblocking coordination independent vs collective 
mpi io provides combinations data access functions including types file pointers individual shared 
positioning synchronism coordination independent collective explicit blocking mpio read mpio read offsets synchronous mpio write mpio write nonblocking mpio mpio asynchronous mpio mpio individual blocking mpio read mpio read file pointers synchronous mpio write mpio write nonblocking mpio mpio asynchronous mpio mpio shared blocking mpio read shared mpio read shared file pointer synchronous mpio write shared mpio write shared nonblocking mpio shared mpio shared asynchronous mpio shared mpio shared unix read write blocking independent operations individual file pointers mpi io equivalents mpio read mpio write 
positioning unix file systems traditionally maintain system file pointer specifying offset read write operation 
problem interface primarily designed files accessed single process 
parallel environment decide file pointer shared multiple processes individual file pointer maintained process 
addition parallel programs generally exhibit locality file 
tend move distinct noncontiguous regions file 
means process seek read write operation 
addition multithreaded environments performing asynchronously difficult ensure file pointer correct position read write occurs 
chapter mpi io provides separate functions positioning explicit offsets individual file pointers shared file pointer 
explicit offset operations require user specify offset act atomic seek read write operations 
individual shared file pointer operations implicit system maintained offsets positioning 
different positioning methods orthogonal may mixed program affect 
words individual file pointer value unchanged executing explicit offset operations shared file pointer operations 
mpi io data access functions accept explicit offsets extensions mpio xxx individual file pointer functions appended mpio xxx shared file pointer functions shared appended mpio xxx shared 
order allow implicit offset set seek functions provided mpio seek mpio seek shared 
general file pointer operations semantics explicit offset operations offset argument set current value file pointer 
explicit offsets mpi io uses keys describe locations file mpi datatype offset 
mpi datatypes templates tiling file offset determines initial position transfers 
offsets expressed integral number elementary datatype etype items 
etype argument associated file express filetype offset arguments 
filetype datatypes directly derived etype type signatures multiple etype signature 
view offset file global perspective absolute count individual process perspective count relative filetype 
mpi io provides views see 
absolute offset ignores file partitioning pattern canonical view file stream 
absolute offsets point file point item inaccessible process 
case offset advanced automatically accessible item 
specifying offset hole functionally equivalent specifying offset item hole 
relative offset includes parts file accessible process excluding holes filetype associated process 
mpi io parallel interface holes absolute relative offsets 
process filetype abs rel abs equiv abs abs rel disp abs rel abs rel process offsets process offsets etype process filetype absolute relative offsets file pointers file opened mpi io system creates set file pointers keep track current file position 
global file pointer shared processes communicator group 
individual file pointers local process communicator group updated independently 
shared file pointer sense processes access dataset 
means processes filetype opening file 
main semantic issue system maintained file pointers updated operations 
general operation leaves file pointer pointing data item accessed 
principle applies types offsets absolute relative types file pointers individual shared types operations 
absolute offsets file pointer left pointing etype accessed 
etype may accessible process may accessible 
operation automatically advance file pointer accessible etype 
relative offsets accessible counted 
possible formalize update procedure equation new ile position old position size theta size etype number elements type accessed size datatype gives number bytes actual data excluding holes composes mpi datatype datatype 
chapter complication unix operations system maintained file pointer normally updated operation completes 
stage known exactly data accessed different amount requested file pointer updated amount 
mpi io nonblocking accesses individual shared file pointer update delayed operation completes additional accesses initiated time process types file pointers processes shared file pointer 
file pointer updated outset amount data requested 
similarly blocking accesses shared file pointer updating file pointer completion access effect serializing blocking accesses file 
order prevent shared file pointer blocking accesses updated access amount data requested 
blocking accesses individual file pointer updating file pointer completion access perfectly valid 
order maintain semantics types accesses file pointers update file pointer case access amount data requested 
consistent semantically cleaner updating file pointer initiation operations differs accepted unix practice may lead unexpected results 
consider scenario fh buff status fh buff status read reaches file completing file pointer incremented amount data requested amount data read 
file pointer point current file write leave hole file 
problem occurs reads writes mixed checking file 
common single process workstation environment believe uncommon parallel scientific environment 
mpi io parallel interface synchronism mpi io supports explicit overlap computation hopefully improving performance nonblocking data access functions 
mpi io provides blocking nonblocking versions functions 
mpi nonblocking versions calls named mpio stands immediate 
blocking call block request completed 
nonblocking call initiates operation wait complete 
separate request complete call mpi wait mpi test needed complete request certify data read written safe user reuse buffer 
suitable hardware transfer data user buffer may proceed concurrently computation 
note just nonblocking blocking data access function completes mean data written permanent storage 
data access functions may buffer data improve performance 
way guarantee data written storage mpio file sync call 
need concerned converse problem read operation completes data available user buffer 
coordination global data accesses significant potential automatic optimization provided system recognize operation global access 
collective operations purpose 
mpi io provides independent collective versions data access operations 
independent data access function mpio xxx collective counterpart mpio xxx means processes communicator group opened file participate 
independent request request executed individually processes communicator group 
independent operation imply coordination processes completion depends activity calling process 
collective request request executed processes communicator group 
collective operations imply processes belonging chapter communicator associated opened file participate 
mpi synchronization pattern processes enforced mpi io definition 
required synchronization may depend specific implementation 
process required return collective call soon participation collective operation completed 
completion operation indicate processes completed started operation 
collective operations achieve certain semantics scatter gather operation useful advise system set independent accesses may optimized combined 
collective calls may require processes involved collective operation pass value argument mpio open requires processes pass file name 
semantic viewpoint difference collective operations independent counterparts potential synchronization 
performance view collective operations potential faster independent counterparts 
miscellaneous features file layout mpi io mpi io intended interface maps data stored memory file 
basic access functions specify data laid virtual file structure filetype file structure stored disks 
avoided expected mapping files disks system specific specific control file layout restrict program portability 
cases information necessary order optimize disk layout 
mpi io allows user provide information hints specified file created 
hints change semantics mpi io interfaces provided allow specific implementation increase throughput 
mpi io standard enforce hints particular implementation 
mpi io parallel interface read write atomic semantics concurrent data accesses involve overlapping data blocks desirable guarantee consistent interleaving accesses 
example unix read write interface provides atomic access files 
suppose process writes block starting offset process writes block starting offset see 
resulting file overlapping block starting offset come process process overlapping block intermixed data processes process process unix atomic semantics similarly process writes block starting offset process reads block starting offset process read overlapping block old data new data written process mixed data 
performance parallel file systems decluster files multiple storage servers 
environment providing atomic data access expensive requiring synchronization adding overhead merely check read write overlaps 
parallel applications rarely issue concurrent overlapping read write accesses mpi io provide atomic data access default 
guarantee atomicity mpi io provides cautious mode enabled mpio file control 
chapter note cautious mode guarantees atomicity accesses mpi application different mpi processes accessing file data 
effect limited confines mpi comm world communicator group processes opened file typically processes job 
current status currently implementations mpi io progress 
nasa ames research center working portable implementation primarily targeted workstation clusters 
ibm research working implementation ibm sp built top ibm parallel file system 
lawrence livermore national laboratory working implementations cray meiko cs 
general information copies latest draft archive mpi io mailing list obtained nas nasa gov mpi io world wide web 
join mpi io mailing list send request mpi io request nas nasa gov see web page details 
appendix transposing matrix code implements example depicted 
matrix transposed row cyclic distribution processes 
purpose example assume matrix square matrix size read matrix char fname file containing matrix int number rows columns matrix mpi datatype etype matrix element type mpi io parallel interface void target transposed matrix mpio file fh mpi datatype ftype mpi status stat mpi datatype column int rank create row cyclic filetype data distribution mpio type hpf cyclic mpi comm world etype ftype mpi type commit ftype create transpose matrix process memory mpi comm size mpi comm world mpi comm rank mpi comm world rank rank 
mpi type extent etype mpi type vector etype column mpi type column mpi type commit mpi type free column read distribute transpose matrix cleanup mpio open mpi comm world fname mpio mpio offset zero etype ftype mpio offset relative null fh mpio read fh mpio offset zero stat mpio close fh mpi type free ftype mpi type free chapter authors william gropp david kotz john may contributors mpi io mailing list helped 
robert bennett kelvin bryant alan sussman raja das joel saltz 
framework optimizing parallel proceedings scalable parallel libraries conference pages 
ieee computer society press october 
michael best adam greenberg craig stanfill lewis tucker 
parallel unix proceedings seventh international parallel processing symposium pages 
choudhary rajesh michael harry rakesh ravi singh rajeev thakur 
parallel scalable software input output 
technical report sccs ece dept npac case center syracuse university september 
peter corbett sandra johnson dror feitelson 
overview vesta parallel file system 
ipps workshop input output parallel computer systems pages 
published computer architecture news pages december 
peter corbett dror feitelson 
design implementation vesta parallel file system 
proceedings scalable high performance computing conference pages 
peter corbett dror feitelson jean pierre george sandra johnson anthony hsu julian marc snir maurice chi robert brian joseph thomas morgan anthony 
parallel file systems ibm sp computers 
ibm systems journal vol pages june 
peter corbett dror feitelson jean pierre sandra johnson 
parallel access files vesta file system 
proceedings supercomputing pages 
mpi io parallel interface erik juan miguel del rosario 
ncube parallel software 
eleventh annual ieee international phoenix conference computers communications pages april 
juan miguel del rosario rajesh choudhary 
improved parallel phase run time access strategy 
ipps workshop input output parallel computer systems pages 
published computer architecture news pages december 
juan miguel del rosario michael harry choudhary 
design vip fs virtual parallel file system high performance parallel distributed computing 
technical report sccs npac syracuse ny may 

intel paragon xp architecture software environment 
technical report zam ib central institute applied mathematics research center germany april 
dror feitelson peter corbett jean pierre 
performance vesta parallel file system 
proceedings ninth international parallel processing symposium pages april 
dror feitelson peter corbett hsu jean pierre 
parallel systems interfaces parallel computers 
chapter multiprocessor systems design integration world scientific 
appear 
gropp levine 
applications driven parallel proceedings supercomputing pages 
jay huber christopher daniel reed andrew chien david blumenthal 
ppfs high performance portable parallel file system 
technical report uiucdcs university illinois urbana champaign january 
intel supercomputer systems division 
ipsc ipsc user guide april 
order number 
intel supercomputer systems division 
intel paragon xp user guide april 
order number 
david kotz 
disk directed mimd multiprocessors 
technical report pcs tr dept computer science dartmouth college july chapter 
proceedings symposium operating systems design implementation usenix pages november 
david kotz nils 
dynamic file access characteristics production parallel scientific workload 
proceedings supercomputing pages november 
susan marshall andy nanopoulos william milne richard wheeler 
sfs parallel file system cm 
proceedings summer usenix conference pages 
message passing interface forum 
mpi message passing interface standard may 
steven moyer sunderam 
parallel system highperformance distributed computing 
proceedings ifip wg working conference programming environments massively parallel distributed systems 
steven moyer sunderam 
scalable parallel system distributed computing environments 
proceedings scalable high performance computing conference pages 
nils david kotz 
low level interfaces high level parallel proceedings ipps workshop input output parallel distributed systems pages april 
bill nitzberg 
performance ipsc concurrent file system 
technical report rnd nas systems division nasa ames december 
express version communication environment parallel computers 
paul pierce 
concurrent file system highly parallel mass storage system 
fourth conference hypercube concurrent computers applications pages 
brad david payne 
efficient file interface parallel applications 
draft distributed frontiers 
seamons winslett 
efficient interface multidimensional array proceedings supercomputing pages november 
mpi io parallel interface seamons winslett 
physical schemas large multidimensional arrays scientific computing applications 
proceedings th international working conference scientific statistical database management pages september 
seamons winslett 
data management approach handling large compressed arrays high performance computing 
proceedings fifth symposium frontiers massively parallel computation pages february 
rajeev thakur rajesh choudhary ravi singh 
runtime library parallel proceedings scalable parallel libraries conference pages october 
