making inconsistency respectable software development nuseibeh computing department open university walton hall milton keynes mk aa uk email nuseibeh open ac uk steve easterbrook department computer science university toronto king college road toronto ontario canada email sme cs toronto edu russo department computing imperial college queen gate london sw bz uk email ar doc ic ac uk development software systems inevitably involves detection handling inconsistencies 
inconsistencies arise system requirements design specifications quite descriptions form final implemented software product 
large proportion software engineering research devoted consistency maintenance geared inconsistencies soon detected 
software practitioners hand live inconsistency matter course 
depending nature inconsistency causes impact choose tolerate presence resolve immediately 
argues making inconsistency respectable avoided ignored focus learning trigger constructive development actions 
presents characterization inconsistency software development framework managing context 
draws practical experiences dealing inconsistency large scale software development projects relates lessons learned experiences 
keywords software specification requirements engineering inconsistency management inconsistency handling conflict 
revised expanded version appeared 
phrase gabbay hunter describe sentiments motivated 

software engineering described discipline description 
software engineers large number different descriptions development process including analysis models specifications designs program code user guides test plans change requests style guides schedules process models 
descriptions constructed updated different developers different times development 
establishing maintaining consistency descriptions difficult problem number reasons descriptions vary greatly formality precision 
sketchy imprecise descriptions just gain understanding times detailed precise descriptions crucial ensure correctness safety security individual descriptions may ill formed self contradictory 
descriptions continue evolve software development lifecycle different rates 
checking consistency large arbitrary set descriptions computationally expensive 
example imagine translate descriptions formal predicate logic 
problem determining consistency set logic formulae np hard practice means sets descriptions grow quickly infeasible test consistency 
furthermore incremental localized consistency strategies guarantee global consistency see appendix 
practice may possible find fast consistency checking techniques specific types description general case problem intractable 
existing approaches problem ad hoc addressed limited part software development lifecycle 
example tools exist check consistency specific documents set object models consistent testing consistency software development artifacts 
existing software development techniques assume consistency software development environments attempt enforce 
inconsistency viewed undesirable avoided possible 
inconsistency pervasive problem software development lifecycle 
practitioners recognize descriptions frequently inconsistent learn live inconsistencies view resolving time judge adverse impact inconsistencies tolerable 
systematic approach handling inconsistency helpful view inconsistency management central activity software development 
argue maintaining consistency times counter productive 
cases may desirable tolerate encourage inconsistency facilitate distributed collaborative working prevent premature commitment design decisions ensure stakeholder views taken account 
inconsistency helps focus attention problem areas may tool learning directing requirements elicitation process validation verification tool analysis testing 
presents characterization inconsistency software development framework managing context 
draws practical experiences dealing inconsistency large scale software development projects relates lessons learned experiences 

inconsistency 
term inconsistency denote situation descriptions obey relationship prescribed hold 
precondition inconsistency descriptions question area overlap 
relationship descriptions expressed consistency rule descriptions checked 
current practice consistency rules captured various project documents embedded tools captured 
table gives example consistency rules expressed natural language 
rule simple rule descriptions written notation case 
rule consistency rule different documents area overlap terms user borrower 
rule example rule development process 
program code entered sign occurred project inconsistent process policy presumably documented 
note example area overlap concerns status contents descriptions 
rules reflect common pattern consistency relationship exists descriptions third description says 
problems occur changes descriptions cross checking cases third description properly documented 
move better modeling software processes helped ensure relationships documented note relationships process oriented rule 
example consistency rules rule data flow diagram process decomposed separate diagram input flows parent process input flows child data flow diagram 
rule particular library system concept operations document states user borrower synonyms 
list user actions described help manuals correspond list borrower actions requirements specification 
rule coding systems requirement specification signed project review board 
program code repository empty srs status approved prb 
table informal examples consistency rules 
definition inconsistency deliberately broad encompasses types inconsistency occur software development 
particular notion logical inconsistency subsumed definition relationship hold possible derive contradiction set propositions defining inconsistency way provides flexibility tie particular notation allows consider different forms inconsistency development process 
example checking descriptions consistency rules may reveal stakeholder conflicts divergent goals faults running system deviations documented development processes 

tolerating inconsistency inconsistency problem software engineering leads misunderstandings errors 
problem inconsistency se inconsistency remains undetected 
cases may wish tolerate known inconsistency 
example change code module may violate assumptions modules interacts cause test scripts re written structure module lead change user manuals 
inconsistency arises change consequences addressed 
feasible carry change consequent alterations single atomic action accept times development set software descriptions inconsistent 
expect inconsistencies temporary reflect period uncertainty document evolves 
cases prefer environment permits inconsistency tracks environment prohibits 
may times development tolerating inconsistency beneficial inconsistency may indicate deviations process model 
rationale process modelling facilitates process improvement 
cugola argues achieved allowing deviations prescribed process providing support dealing resulting inconsistencies 
inconsistency may facilitate flexible collaborative working 
kaiser consider problem incremental development presence inconsistency 
argue attempting enforce total consistency difficult preferable allow inconsistencies occur resolve periodically prevent 
goldman incremental inconsistency handling solution announcing interleaving proposed changes balzer introduces notion pollution markers flag portions program code contain inconsistencies circumvented order continue development 
inconsistency identify areas uncertainty 
team developers set descriptions inconsistencies descriptions indicate areas developers shared understanding broken 
easterbrook describes cases improve understanding team 
gabbay hunter finkelstein suggest inconsistency trigger development actions hunter nuseibeh describe quasi classical logic allows reasoning presence inconsistency 
view inconsistency prevalent driver software development subject increasing research software engineering community 
logic propositions contradictory possible derive fact negation 
framework managing inconsistency clarify understanding inconsistency management research practice developed framework shown 
central framework explicit set consistency rules provide basis inconsistency management activities 
consistency rules monitor evolving set descriptions inconsistencies 
inconsistencies detected diagnosis performed locate identify cause 
number different inconsistency handling strategies chosen including resolving immediately ignoring completely tolerating 
action chosen result monitored undesirable consequences 
manage inconsistency manage inconsistency monitor inconsistency inconsistency detected apply rules diagnose handle locate identify consistency checking rules apply rules refine rules classify consistency checking rules inconsistency characterized refine rules apply rules ignore tolerate resolve defer circumvent ameliorate measure inconsistency analyze impact risk framework managing inconsistency 
apply rules inconsistency handled developers iterate consistency management process set consistency rules expanded refined 
expect obtain complete set rules covering possible consistency monitor consequences handling action relationships large project 
regard rulebase repository recording rules known discovered tracked appropriately 
consistency rules arise definitions notations 
example strongly typed programming language notation requires variable consistent declaration 
development method 
method provides set notations guidance 
guidance includes consistency rules 
example method designing distributed systems require pair communicating subsystems data items communicated defined consistently subsystem interface 
development process model 
process model typically defines development steps entry exit conditions steps constraints products step 
rule table example 
local contingencies 
specific consistency relationship occurs specific descriptions notation method process model relationship 
example particular timeout specification greater timing constraint specification needs recorded consistency relationship 
application domain 
consistency rules arise domain specific constraints 
example telecommunications domain impose constraints nature telephone call specify certain undesirable feature interactions 
constraints specified consistency rules checked development 
monitoring inconsistency explicit set consistency rules monitoring automatic unobtrusive 
certain rules high computational overhead checking monitoring need continuous checked specific points development lazy consistency strategy outlined 
case approach define scope rule edit action need checked rules include scope locus edit action 
diagnosing inconsistency may reasons particular consistency rule broken 
diagnosis process begins inconsistency detected 
diagnosis includes locating inconsistency determining parts description broken consistency rule 
identifying cause inconsistency normally tracing back manifestation consistency rule broken cause missing information misunderstanding coordination breakdown 
history edit actions available owner source action process identifying sequence actions led inconsistency 
classifying inconsistency classification important step selecting suitable handling strategy 
inconsistencies classified number different dimensions including type rule broken type action caused inconsistency impact inconsistency 
handling inconsistency choice inconsistency handling strategy depends context impact aspects development process 
resolving inconsistency may simple adding deleting information software description 
relies resolving fundamental conflicts important design decisions 
cases immediate resolution best option number choices available ignore case effort fixing inconsistency great relative low risk inconsistency adverse consequences 
cases developers may choose ignore existence inconsistency descriptions 
practice dictates decisions revisited project progresses system evolves 
defer may provide developers time elicit information facilitate resolution render inconsistency unimportant 
cases important flag parts descriptions affected development continue inconsistency tolerated 
circumvent cases appears inconsistency consistency rules regarded software developers 
may rule wrong inconsistency represents exception rule captured 
cases inconsistency circumvented modifying rule disabling specific context 
ameliorate may cost effective improve description containing inconsistencies necessarily resolving 
may include adding information description alleviates adverse effects inconsistency resolves inconsistencies side effect 
cases useful inconsistency handling strategy moves development process desirable direction inconsistencies adverse impact reduced 
measuring inconsistency analyzing impact risk measurement central effective inconsistency management number ways 
example developers need know number severity inconsistencies descriptions numbers affected various changes 
example may measures compare descriptions assess choice consistent 
developers need prioritize inconsistencies different ways example identify inconsistencies need urgent attention 
developers may need assess progress example measuring conformance pre defined development standard process model 
actions taken handle inconsistency depend assessment impact actions development project 
measuring impact inconsistency handling actions key effective action presence inconsistency 
assessment risks involved leaving inconsistency handling particular way crucial 

inconsistency management practice research inconsistency performed number case studies nasa software development projects 
helped refine framework described provided insights nature inconsistency management 
studies concern requirements specifications parts international space station iss command control software 
third case study concerns design dual redundant controller deep space probe 
case studies analysis existing evolving specifications expressed mixture prose tables flowcharts diagrams 
case study applied different techniques analyzing specifications approach case re represent re structure specifications precisely formally different levels abstraction order permit detailed analysis possible 
study formal notations scr promela verifying portions fault detection isolation recovery requirements control communications bus 
study demonstrated translating informal specifications formal notation helps identify ambiguities inconsistencies allows analysis automated 
second study concentrated requirements space station 
fragments original specification restructured viewpoints revealing explicit implicit relationships fragments 
third case study concentrated verification existing design mark rollback scheme allows hot backup processor take control spacecraft appropriate point sequence operations fault occurs main processor 
study addressed question proposed design met requirements fault tolerance 
design modeled state machine promela 
fault tolerance requirements expressed temporal logic formulae tested model spin model checker 
analysis revealed potential errors turned test cases check occurred implementation 
case studies provided number insights discuss 
inconsistencies get fixed observation counter intuitive 
argued inconsistencies tolerated process developing specifications assumed inconsistencies temporary 
example assumed eventually consistent specification needed basis implementation 
practice true 
local factors affect inconsistency handled including cost resolving inconsistency cost updating documentation shared understanding developers 
ultimately decision repair inconsistency risk 
cost fixing outweighs risk ignoring sense fix 
case study section specification contained flowchart corresponding textual requirements 
flowchart intended graphical representation text specification evolved diagram text diverged 
due cost updating documents developers chose just ameliorate inconsistency adding disclaimer text regarded definitive inconsistent diagram 
despite inconsistency diagram useful provided overview requirements expressed text 
worth examining risk analysis underlying decision leave inconsistency unresolved 
document question large page specification 
new version document passed formal technical review 
participants review write issue report problem document 
typical review issues may raised 
review panel examines issue reports decides ones need addressed 
addressing issues prohibitively expensive prioritization performed 
issues rejected quick fixes accepted 
example typical quick fix reduces risk eliminating allows issue closed immediately requiring tracked re reviewed 
small risk document misunderstood looks diagram realize inconsistent text risk relatively minor relation issues arising review 
incentives tolerating inconsistency develop techniques reduce residual risk clearly flagging unresolved inconsistencies detected imposing additional documentation overhead 
second example concerns analysis models abstracted original specifications 
typically state machine models behavior model captured behaviors described original specification 
analysis models inconsistent specification implementation cover set behaviors 
despite inconsistencies analysis models extremely useful partial checks key properties possible 
cases inconsistency fixed formal notation capture certain aspects specifications 
cases fixing formal model introduce complexities interfere analysis 
cases inconsistency need resolved sufficient just aware existence 
case decision ignore inconsistency careful analysis risk involved 
inconsistency detected risk analysis performed 
undetected inconsistencies dangerous inconsistencies safely ignored detected 
living inconsistency means continuously re evaluating risk decision tolerate inconsistency risk decision 
risk factors change development process necessary re evaluate risk periodically 
ideally done monitoring unresolved inconsistency changes factors affect decision tolerate 
practice monitoring feasible current tools 
usual approach identify key points decision needs re evaluated 
example consider ariane disaster 
ariane reused software ariane 
ariane inconsistency tolerated safety requirement exceptions handled implementation floating point exception handling turned exceptions meet memory performance requirements 
ariane risk tolerating inconsistency thoroughly analyzed 
analysis concluded correctly floating point overflow occur inconsistency tolerated 
ariane experienced larger horizontal bias trajectory differs ariane floating point overflow occur 
unfortunately risk analysis repeated software reused ariane 
problem decision wrong ariane tools available indicate risk needed re evaluated ariane 
observed similar example third case study 
inconsistency concerning behavior processors spacecraft critical sequence 
allow hardware delays fault processing logic requires second delay operation considered successfully completed 
fault occurs seconds critical sequence main processor rollback repeat section sequence 
backup processor likewise suspended 
inconsistency may matter depending critical sequences written 
example sequences written way include delay problem disappears 
performed analysis critical sequences designed 
recommendation defer resolution critical sequences written 
point risk analysis repeated 
knowing re evaluate decisions critical 
ariane example developers method warn revisit decisions design parameters changed 
spacecraft example need revisit decision explicitly recorded 
consistency checks worth performing argued act resolving inconsistency cost associated worth doing 
observation case studies application consistency check cost associated worth performing 
example case study discovered error sequencing fault diagnosis steps original specification 
need apply steps specific order described text sequencing intended 
discovered problem building formal model planned check fault handling design consistent high level requirements 
assumptions correct sequencing continued build model perform consistency checks 
authors original specification updated correct problem 
changes major consistency checking performed model relevant anymore 
effort expended perform checks wasted 
observation raises important question know apply consistency check know checking consistency 
answers questions problem specific may lie project process models 
part research guiding inconsistency management process examined conditions consistency checking performed mechanisms guiding process 
inconsistency deniable framework relies defined set relationships descriptions 
long relationships precisely defined determination consistency objective process 
practice developers debate reported inconsistency really inconsistency 
example reactions reported inconsistencies case studies included inconsistent assumed inconsistency doesn matter oh model wrong quite fixed 
factors 
face saving device 
people generally don people finding fault 
teams worked nasa strive maintain collaborative relationship developers parties feel working common goal high quality product 
inconsistency carries stigma implying poor quality 
inconsistency reported public manner formal review tendency authors defensive 
observed common face saving devices author may give argument inconsistency really issue author claim aware problem fixed process fixing 
second factor modelling issue 
possible descriptions inconsistent inaccurate vague 
formalize description say objectively inconsistent syntactic semantic levels possible deny inconsistency pragmatic level 
effect denial questions formalization description consistency rules 
results useful discussion nature descriptions may turn lead improvement descriptions models expressed 
hand denials merely obfuscation hard tell ensuing debate lead useful 

inconsistency arises software development lifecycle various development documents evolve 
arises interdependencies documents 
whilst general principles modularity information hiding help reduce dependencies eliminate 
single change document may affect different parts project difficult identify dependencies project 
dependencies captured traceability matrices interface documents typically capture existence relationship semantic content 
reasoning impact change done hand tedious error prone 
argued problems establishing maintaining consistency endemic software development 
argued possible avoid inconsistency tools tolerate manage inconsistency provide flexibility 
argued undetected inconsistency causes problems 
known inconsistencies tolerated provided managed carefully 
determining set descriptions inconsistent depends knowing relationships hold 
capture relationships set defined consistency rules basis tracking resolved unresolved inconsistencies 
number tools available detect inconsistency different phases software development 
general tool concentrates particular type description defines consistency narrowly terms integrity rules type description 
example formal specification tool scr built set consistency checks establish formedness scr specification semantics scr 
method specific consistency checking extremely useful covers fraction range consistency relationships interest software development 
checking internal consistency scr specification wish check consistency scr specification design model scr specification set test cases 
needed develop framework software development environment inconsistency management core activity development 
acknowledgments colleagues frank schneider john dan chuck worked case studies 
participants icse workshop living inconsistency lively discussions ideas 
nuseibeh russo acknowledge financial support uk epsrc projects mise gr gr 
authors nuseibeh professor computing open university director centre systems requirements engineering imperial college london uk 
previously reader department computing imperial college london head software engineering laboratory 
research interests requirements engineering software process technology software design technology transfer 
editor chief automated software engineering journal current program chair th ieee international symposium requirements engineering re held toronto canada st august 
information mcs open ac uk ban 
steve easterbrook associate professor department computer science university toronto 
previously faculty member school cognitive computing science university sussex uk research associate professor nasa independent software verification validation facility west virginia led facility research team 
research interests focus problems managing conflict change software requirements 
dr easterbrook regularly serves program committees conferences requirements engineering automated software engineering general chair international symposium requirements engineering re 
russo lecturer department computing imperial college london uk 
previously research associate phd student imperial college 
research interests mathematical logic software engineering general applications logic automated reasoning requirements engineering 
serves number international program committees investigator uk epsrc project handling inconsistency change evolving requirements specifications 
balzer tolerating inconsistency proceedings th international conference software engineering icse austin texas usa ieee computer society press 
cugola di fuggetta ghezzi framework formalizing inconsistencies deviations human centered systems transactions software engineering methodology acm press july 
easterbrook callahan formal methods partial specifications experience report proceedings rd international symposium requirements engineering re annapolis usa ieee computer society press january 
easterbrook learning inconsistency proceedings th international workshop software specification design paderborn germany mar ieee computer society press march 
finkelstein gabbay hunter kramer nuseibeh inconsistency handling multi perspective specifications transactions software engineering ieee computer society press august 
gabbay hunter making inconsistency respectable logical framework inconsistency reasoning part position proceedings fundamentals artificial intelligence research springer verlag 
gabbay hunter making inconsistency respectable logical framework inconsistency reasoning part symbolic quantitative approaches reasoning uncertainty lncs springer verlag 
ghezzi nuseibeh special issue managing inconsistency software development transactions software engineering ieee computer society press november 
ghezzi nuseibeh special issue managing inconsistency software development transactions software engineering ieee computer society press nov dec 
heitmeyer jeffords labaw automated consistency checking requirements specifications transactions software engineering methodology acm press july 
holzmann model checker spin transactions software engineering ieee computer may 
hunter nuseibeh managing inconsistent specifications reasoning analysis action transactions software engineering methodology acm press october 
jackson software requirements specifications lexicon practice principles prejudices addison wesley 
finkelstein kramer nuseibeh decentralised process modelling multi perspective development environment proceedings th international conference software engineering seattle washington usa acm press april 
littlewood learning live uncertainty software proceedings nd international symposium software metrics london ieee computer society press october 
goldman lazy consistency basis cooperative software development proceedings th international conference computer supported cooperative cscw toronto canada acm sigchi 
nuseibeh ariane ieee software ieee computer society press may 
nuseibeh easterbrook russo leveraging inconsistency software development computer ieee computer society press april 
nuseibeh kramer finkelstein framework expressing relationships multiple views requirements specification transactions software engineering ieee computer society press october 
robinson negotiation behaviour multiple agent specification need automated conflict resolution proceedings th international conference software engineering icse nice france ieee computer society press march 
russo nuseibeh kramer restructuring requirements specifications inconsistency analysis case study proceedings rd international conference requirements engineering colorado springs usa ieee computer society press 
schneider easterbrook callahan holzmann validating requirements fault tolerant systems model checking proceedings rd international conference requirements engineering colorado springs usa ieee computer society press april 
kaiser living inconsistency large systems proceedings proceedings international workshop software version configuration control germany teubner stuttgart january 
finkelstein till overlaps requirements engineering automated software engineering kluwer april 
van lamsweerde letier integrating obstacles goal driven requirements engineering proceedings th international conference software engineering icse kyoto japan ieee computer society press april 
appendix local vs global consistency checking principle global consistency proved local consistency checking 
example possible add statement set descriptions consistent description set inconsistent 
consider viewpoints shown 
expressed simple propositional logic assume terms designations viewpoint means 
suppose simple consistency relationship composed possible derive contradiction 
consistent viewpoints consider proposition proposition added viewpoint making internally inconsistent 
adding viewpoint break consistency rule holds possible derive general elaborating viewpoint preserves local consistency may introduce inconsistencies viewpoints 
furthermore possible establish consistency set descriptions just making local comparisons exhaustively compare say pair sentences 
consider viewpoints shown 
hard show consistent 
merge form note consider new piece information consistent viewpoints consistent individually consistent pairwise consistency checking viewpoints sufficient reveal 
add viewpoints turn pairwise union viewpoints consistent consistent 
note imagine important safety property checked specification composed viewpoints 
theorem prover prove holds adding viewpoints repeat proof demonstrate holds 
check global consistency notice case derive demonstrated set descriptions consistent compared pairwise inconsistent taken 
furthermore adding new statement consistent description individually set descriptions inconsistent 
important implications software engineering 
example known testing pairwise integration set software modules sufficient system level testing necessary 
