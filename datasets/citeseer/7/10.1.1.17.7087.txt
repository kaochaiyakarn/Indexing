escaping event loop alternative control structure multi threaded guis fuchs concurrent engineering research center hill rd box west virginia university wv fuchs 

edu partly supported mda event driven reactive programming style contemporary cut major reason difficult program 
compounded distributed application 
reactive style reflects mismatch multithreaded interfaces single threaded process equivalent continuation passing style source code transformation compilers 
continuations callbacks eliminates difficulty reactive style 
describe toolkit managing multiple threads control combined existing cui toolkits supports distributed applications 
keywords multithreaded user interfaces distributed programming reactive programming scheme continuations programming languages event loop developing user interface hard problem involving social psychological issues technical ones 
meyers provides list difficulties 
human computer interface graphics issues stands computer programmer interface graphical user interface cut toolkits reactive event driven style difficult programmers necessary handle increasing complexity user interface 
problem pronounced distributed applications event loops contend thread control application 
part takes careful look reactive programming underlying architectural feature event loop determine essential flexible user interface 
analysis indicate onerous aspects reactive style artifacts software technology applied inherent problem 
remainder results analysis propose alternative architecture easier programmer limiting way complexity user interface 
contrary easily expandable distributed applications multiple threads control 
done returning run time system decisions currently handled programmer 
concludes survey attempts deal issue 
event loop alters program event loop essential characteristic modern graphical user interface programming 
program sits inside tight inner loop continuously gets event dispatches appropriate returns waiting event 
event loop see memoryless 
state needed events maintained explicitly handlers 
kind information variables return addresses run time system automatically maintains process mally sits stack gone event 
loss information serious consequences programs written major reason difficulty gui programming 
reactive example start somewhat complicated example card game bridge 
bridge played persons seated table standard deck cards 
opposite persons partners 
concentrate rubber composed ames set partners win games win rubber 
game parts 
cards dealt players 
player hand cards played rounds called tricks 

players bid 
round robin fashion players claims rounds play win 
goes players pass 
highest bidder called establishes contract 
game score depend success 

tricks played 
won go rules 

play scored 
procedure rubber players returns integer array integer contract leader array game card player player deal cards od get player bid bid higher contract contract new bid current bidder leader current bidder endif passes row trick player game trick player player leader mod od leader game trick leader mod od game return endif rubber control flow shows control flow rubber leaving rules pseudo code 
serial process rubber series nested loops outermost game innermost trick 
consider parallel version number tricks played simultaneously 
suppose players sitting front screens complex gui lets consult help facilities previous games playing bridge 
sees approximately screen actions take particular time different 
cards dealt impossible program approximating simple control flow event loop 
concentrating just play single game disregarding gui elements event loop implementation callbacks enabling single player bid active start 
player clicks button indicating bid 
callback place bid globally accessible place disable 
check bid 
determine won bidding set things game 
enable bidder bid 
return event loop 
bidding finished similar process occurs round play 
callback determine play set conditions player actions 
words reactive style thread control spread callbacks 
callback ascertain current state computation react appropriately prepare state 
adds extra degree complexity straightforward control flow fig 
systematically transformed 
application little control flow drawing program chess game particularly onerous significant control flow bridge 
usual justification transformation user freedom 
graphical programs user driven user widest possible latitude traditional programming style input synchronous constrains freedom abandoned 
current case control flow follows playing hand 
event loop player wishes action involving menus help blocked doing input captured routines bidding playing cards 
radical example altering bridge allow multiple played simultaneously 
maximizing user freedom action semantics program important show solution widely event loop side effect technology chosen implementation 
essence event loop old days graphical systems rare application user interfaces variations menu choices open user point application quite limited handled case statement 
program needed information user call function prompt user 
application structured set hierarchical menus accessed nested function calls relying language keep track state applications written languages allowed nested functions pascal ada scoping help commu information level 
writing user interface straightforward 
guis inherently multithreaded leading event loop 
suppose path interface history important completing form requires results form turn requires results form needs know return needs know return 
solution lines old style menus handler creates form recursively call handler creates necessary handler likewise creates terminates hands results 
see 
group history sensitive interface objects problem 
bridge example novice user invoke interactive tutor facility choosing bid 
user free develop histories parallel working consecutively call handler stacks threads handler stack sequences interleaved 
shown inaccessible completes 
essence impossible stack control modern gui stack abandoned 
event loop control regime doesn require stack 
event loop communicate needs divided parts doing call doing 
call calls separate function passing pointer data associated current invocation object method 
stores information creates gui returns returns event loop 
terminates split pieces calls passing data 
little updating fields activating deactivating buttons returns get back event loop 
result example impossible handler call piece interface function handler return event loop event retrieved 
event loop forces application programmer explicitly maintain information applications implicitly maintained stack values variables return location event 
resulting program fact written style cps appel 
compilers functional style languages scheme ml frequently transform source code cps intermediate step 
humans normally don program directly cps quite complex 
cps function program takes extra parameter called 
functions return caller 
done piece call extra continuation parameter passing result 
function returns simply calls program cps event loop program stack 
gui programmer programs style extra complications callback directly call successor 
source code transformed cps process starts outermost functions works way eventually transforming body source code function group little continuation functions call sequence performing small amount 
gui programmer explicitly performed transformation previous example continuation functions organized user events 
creating callbacks returning event loop event driven program allows user non deterministically choose continuations jump 
objects created programmer object oriented gui replacement stack frame members local variables continuation 
goal provide best worlds approach hand allow control flow dependencies events programmed straightforward fashion support freedom user provided cps approach event loop 
tension easy specify change relationships 
resolution dilemma tried pike wholesale explicit threads 
explore equivalent flexible approach class continuations 
essential insight continuation callback desired event occurs program continue statement just blocked input 
shall see plenty usable system range behaviors user interface needs support quite complex 
section discuss class continuations mechanics callbacks 
introduce athena gui toolkit devel oped discuss gui systems taken multithreaded concurrent approach 
discuss implementation details show existing systems integrated approach approach extended distributed systems 
class continuations callbacks class continuation object represents remainder computation dybvig reynolds wand 
concrete description object containing process stack return address just execution function call fig 

continuation acts parameter function called parameter overwrites current process stack places return register appropriate position bottom stack frame jumps words continuation called original function call just terminated returning continuation parameter answer 
closest unix analog functions stores current values registers including stack pointer structure restores peeling stack back point called returning initial call 
class continuation called point computation repeatedly desired 
continuations necessarily require copying stack 
compilers interpreters cps sml nj appel stack return pointer call parameters continuations stack frames employ stack 
analogy continuations equivalence stored stack registers 
suppose start game user engaged dialog bridge tutor function 
turn bid arrives starts dialog tutor calls help facility help concerns mechanics interface game choosing bid 
number threads mixed stack 
user waiting input 
words called function beta retrieve input user 
normally input go callback 
beta take current continuation caller store list pairs mapping input events continuations fig 

user occurs passed appropriate continuation restarting thread 
user actions beta acts scheduler timer interrupt threads give control require input 
continuations called repeatedly dialog tutor started 
bidding strictly controlled prevent multiple bids 
continuation callbacks allow traditional programming style combined multiplicity events gui 
despite presence concurrent threads control continuations allowed avoid explicitly creating threads 
step simplify hiding continuations combining flow control application appearance disappearance graphical objects 
continuation user interface noted continuations considered program 
scarcely reasonable hold promise new flexibility offset new complexity 
resolve presenting user abstraction game tutor tutor help continuation continuation continuation continuation scheduler event stream juggling continuations events related api implements abstraction 
manipulating continuations pushed beneath api programmer purview 
taxonomy events order handle concurrency interface understand user generated events lead concurrency 
consider user events lead actions application lead changes state 
section give short taxonomy actions motivate description handle concurrency 
define event external stimulus application mouse click action piece application code identified name called response event 
action lifespan occur born point exist period time forever die 
lifespan action various points active inactive 
action state 
interface object comes actions born destroyed actions die 
purpose analyzing concurrency categorize live actions stand axes 
global local characterizes scope action 
global action alive comes ordinarily application 
remains continually active explicitly deactivated 
local action arises point computation due event popup menu flow application dies point 

action state changed explicitly implicitly 

sy roos roos sy roos action returns caller executes 
action 
part interface popup may synchronous called application return value just regular function 
asynchronous counterpart returns immediately may create interface components continue exist independently 
asynchronous actions similar callbacks ordinary event loop systems 

action essentially non reentrant 
unique action started completes user events trigger action 
example worksheet calculate value entry tax form application 
entry value sense calculate value twice parallel 
repeatable action number simultaneous instantiations action invoked number times instantiations complete invoices example 

bo block action inhibits group related actions 
example recalculation spreadsheet recalculation takes place values altered 
actions block simply 
certain blocking actions meaning outstanding actions active 
actions stand corners hypercube 
action arise actions outlive demise 
may possible activate repeatable actions limited number times fixed application dependent factors 
blocking actions block certain actions 
system old style menus local unique blocking actions 
obvious model available graphical interfaces actions mixture 
seen great synchronous 
application may pull menus available run application global 
local frequently synchronous 
control panels usually global unique application nonblocking 
hand applications dialog boxes entire application blocked user responds 
apply concepts simplify programming application 
techniques possible program style similar ordinary program concurrency usually implicit explicit 
fundamental concept continuations callbacks extremely powerful 
continuations allow program jump fairly arbitrary ways 
different abstractions ones developed overarching framework 
overview toolkit describing toolkit examine actions built organized connected gui components apply original example 
toolkit originally built top athena widget set 
scheme interpreter provides direct support cd classes widgets wrapped cd scheme 
migrating tk affect current discussion 
description follows attempt independent possible easily generalized 
defining actions toolkit athena usually set low level widgets put application create coarse grained objects 
significant application efforts concerned aiding manipulating larger objects 
furthermore elements application ui designed independent entities kind nested structure example event window trigger action affects appearance 
find nested scopes supporting hierarchy windows single application spread network 
actions application grouped recursive lists function scopes call lexical coordination structures 
single window may contain events triggering actions scopes parent scope parent window 
user event child window trigger application action parent window name 
scheme language nested scopes class continuations reasons parallel hierarchy scopes user interface 
may appropriate mapping organization application appearance user interface 

may significant interface management associated action displaying removing windows 
exactly kind management user interfaces typically try relieve programmer 

distributed application user interface may best way parts application communicate 
fact evident windows inter client communication mechanism 
maintain independence particular widget set gui composed layers 
widget layer job appear screen pass events layer 
event occurs particular scope called upper layer name event 

scheduling layer composed nested scopes actions action defined appropriate set attributes 
innermost scope receives call widget layer event occurred callback allowed widget layer looks action associated event 
state system attributes action determined action active 
necessary changes application state essentially setting flags callback action invoked synchronously asynchronously case may 
necessary cleanup operations performed result returned caller appropriate 
correspondance layer events gui level don corresponding action handled application 
concentrate layer 

application layer access lower layers 
prom coordination standpoint interesting communication application middle layer application needs able affect gui provide feedback user 
dependent application particular gui platform depends nature communication 
framework graphical application starts application setting callbacks coordination layer 
gui component displayed application layer passes coordination layer sets gui callbacks back coordination layer displays 
event occurs associated action application called name action client data action pointer current scope application pointer widget associated action optional system dependent event structure action called directly application component parameters included 
widget associated creation new widgets pop window new scope new widget new widget passed 
lexical coordination structure created call event scope passing optional parent scope list action descriptions 
action description attributes determine behavior action 
listed default values 
description need list attributes different defaults 
action removes associated set windows screen 
container widget part synchronous action terminal action occurs result associated action returned result call created container 
action description may contain optional parameter list action descriptions 
case action introduces new scope frequently associated popup window 
setting callbacks apply scheme original bridge problem 
start standard single threaded bridge game described relax constraints occurs simultaneously 
implementation language concur rent distributed dialect scheme fuchs purposes need assume interrupt driven scheduler computations proceed waiting current thread request input concurrency control construct 
sml nj standard ml compiler class continuations deriva tive concurrent ml logical alternatives prototype object oriented languages self chambers 
language independent structure potential advantage allowing application components different languages cooperate distributed system 
attribute default values description name name action active action active startup unique multiple single multiple action called second time finishes executing meet synch action synchronous asynchronous blocking excl action blocks actions active terminal action terminates associated interface component 
enabling introducing set callbacks active action occurs 
action attributes define play bridge player player player scope event scope scope action start rubber unique single action start tutorial action start help unique single gui bridge gui player player player player rubber lambda action data scope widget event tutor lambda action data scope widget event help lambda action data scope widget event action set 
action get scope start rubber rubber action set 
action get scope start tutorial tutor action set 
action get scope start help help initialize gui scope gui scope display playing bridge important aspect toolkit actions triggered user event invocation part application 
basic bridge example mentioned actions outermost level active 
start rubber 
action unique asynchronous 
words chosen immediately application starts rubber time return value final score discarded terminates 

start tutorial 
action multiple asynchronous allowed concur rent sessions tutor 

call help 
action asynchronous haven specified single multiple 
code 
asynchronous action separate function 
having specified initial settings alter relationships altering implementation certain degree 
tournament play bridge return score tournament manager 
accomplished changing definition scope scope synch action start rubber unique single meet synch terminal action start tutorial action start help unique single net result change display call scope return synchronously result start rubber 
tournament calls play bridge synchronously 
actual play rubber initiated players 
considered unfair tutor playing rubber 
accommodate starting game starting tutorial blocking 
current implementation calling help need placed outer scope blocked 
concisely fine tuning dependencies important area extending model 
achieve large changes behavior small effect implementation 
example shows definition scope code getting bid 
bid simplified version player states suit number tricks expects win passes 
user verify bid activating ok action 
setting suit number tricks asynchronous allowing user change mind 
calls blocking prevent race conditions 
ok synchronous terminal meaning terminates call display scope 
callback stated ok system returns line application returns get bid 
mentioned rubber composed number games returns score 
traditionally game synchronous unique 
opens possible implementations 
program entire rubber done fig 
placing calls directly function body 

create nested scopes actions take place rubber 
case actions controlled programmatically user interface 
case little changes behaviorally game action multiple number games active simultaneously 
updating score need placed monitor avoid contention games simultaneously 
effect obtained placing update unique action 
changes need source code basic scope synch action blocking client data action tricks blocking client data action pass blocking client data pass action ok meet synch terminal define get bid lambda action data scope widget event suit hum tricks map lambda action eq 
action name action ok action set 
action lambda action data stuff number 
data set 
num tricks data set 
suit data action list scope scope display eq 
suit pass pass cons suit hum tricks getting bid control flow maintained approach allows application migrate back forth serial parallel implementations major change parallelizing need rethink rules game accomodate new possibility leave question interested parties game actions normally synchronous technique parallelizing rubber parallelizing game trick tricks games played simultaneously starting trick done user application order play parallelized 
supporting extreme parallelism requires extra determine termination looking extending model support example exactly tricks trick uses cards card comes different user possible automate constraints aspect bridge game unique playing card card appear round play single game system model unique action terminates user game thirteen unique actions corresponding cards accessed synchronous action corresponding popup 
continuation associated playing card terminates synchronous action returning card playing action terminates garbage collected game combining continuation code existing systems important side effect approach combine existing applications written event loop 
event loop action functions discrete unit communicates actions shared data structures 
add new actions write structures discussing existing actions unaffected 
similarly take set actions rewrite callbacks lines laid affecting actions long update shared data structures correctly 
possible proceed reverse direction scheme code set actions rewriting cps converting 
taken advantage build cut athena tk widget sets 
callbacks handled widgets overridden scheme callbacks 
approach application long way scheme code access manipulate data language application 
complicated part interface fact relationship scheme read eval print loop cut toolkit event loop 
mutually call forever submit called routine 
athena tk give access event loop chosen replace event loops event loops scheme function threads 
event occurs passed cut 
scheme callback scheme variables set execute callback toolkit returns 
eliminates concern process stack added feature allowing toolkits coexist simultaneously 
possible give priority event loop 
continuations callbacks placed entire state computation object 
scheme inner loop needs modified call continuation 
addition scheme inner loop needs know return event loop 
inside toolkit application needs input call get events 
call terminate scheme inner loop rest scheme code need know 
distributed extensions approach originally developed support distributed multi user applications environment inherently multithreaded 
additional support distributed version requires ability send messages network model doesn distinguish local events remote ones 
partitioned system place elements distributed lexical coordination structure nodes events may occur necessary 
implementation written distributed scheme approach distributed object system 
previous previous windowing systems built concurrent processes com munication channels communicating sequential processes csp hoare 
pike describes system written application specific concurrent language 
system windowing system clients communicate typed synchronous channels bitmaps keyboard mouse events control information 
separation concerns leads enormous simplification constructing windowing system 
window manager described interface called recursively handle child windows 
describes montage windowing system built bottom lines entirely scheme 
uses continuations multithreading uses explicit threading 
heavy continuations slow system cause excessive garbage collection 
may due particular implementation con 
reppy gansner describe pegasus multithreaded user interface written parallel ml similar lines reppy describes exene similar system written concurrent ml xlib 
particular advantage cml implementation higher order concurrency including multicasting point point communications 
systems concentrated developing lower level functionality little state events concentrated client level may significant state 
threads implicit explicit concurrency channels systems integrated coordination structures advocate 
extension channels implemented pairs actions 
explicitly concurrent systems difficult integrate existing non concurrent gui toolkits applications 
user interfaces exploiting parallelism rendezvous hill patterson horn 
rendezvous interface multi user applications built clos top rendezvous uses combination constraints multithreaded dialogs erl event response language defines state machine 
current version explicitly assigns thread interface object 
hill describes rendezvous 
constraint language computation arises maintain constraints 
implicitly parallel constraints may resolved concurrently requires programming completely different style 
approach coexist quite easily constraint systems rendezvous 
constraints concerned appearance interface kept separate form application concerns 
maintaining constraints may require action application reason easily handled continuations 
hand uses constraint maintenance mechanism easily combined approach 
propositional productions systems pps olsen system state machines 
systems state machines limited expressing regular expressions 
initial analysis correct state machines popular partly don require stack require lots state variables 
system supporting recursion inherently powerful argue easier program state information implicitly maintained 
uses stacked dialogs syntax dialogue fixed sequence events corresponding handlers handlers call dialogs 
single dialog multithreaded sending event handlers single dialog 
unfortunately stack means limited current dialog situation state machine 
shown reactive event driven programming style currently forces programmer take underlying application convert representation due inability popular programming languages support multiple threads 
shown class continuations allow application written straightforward fashion 
shown combined existing systems 
toolkit described intended writing distributed multi user applications explicitly distinguish number users computers involved 
approach application side gui simpler program 
particular event loop distributed callbacks difficult manage 
concepts completely general hope support guis variety platforms 
ideas developed intended improve life application programmer side user interface orthogonal aspects user interface 
hope able integrate ideas 
appel 
compiling continuations 
cambridge university press 
chambers 
efficient implementation self dynamically typed object oriented language prototypes 
oopsla conference proceedings 
acm 
dybvig 
scheme programming language 
prentice hall bergeron 
specifying complex dialogs 
human factors computing systems graphics interface 
sigchi 
fuchs 
life net 
phd thesis nyu 
gansner reppy 
foundation user interface construction 
languages developing user interfaces 
jones bartlett publishers 

montage breaking windows small pieces 
proceedings usenix summer conference 
usenix 
hill 
supporting concurrency communication synchronization human computer interaction uims 
ac transactions graph ics 
hill 
languages construction multi media multi user synchronous applications 
languages developing user interfaces 
jones bartlett publishers 
hill 
rendezvous constraint maintenance system 
user interface soft ware technology acm 
hoare 
communicating sequential processes 
communications cm 
horn 
properties user interface systems programming language 
languages developing user interfaces 
jones bartlett publishers 
myers 
human computer interfaces difficult design implement 
technical report cmu cs carnegie mellon university 
olsen jr 
propositional production systems dialog description 
human factors computing systems sigchi 
patterson 
rendezvous architecture synchronous multi user applications 
computer supported cooperative sigchi 
pike 
concurrent window system 
usenix computing systems 
reppy 
higher order concurrency 
phd thesis cornell university 
reynolds 
discoveries continuations 
lisp symbolic computation 
wand 
continuation multiprocessing 
lisp conference 
biography dr fuchs research associate concurrent engineering research center 
received harvard university phd 
nyu 
interests include programming languages mobile objects multi user applications sgml distributed garbage collection 
