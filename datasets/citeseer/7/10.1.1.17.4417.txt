simpler minimum spanning tree verification algorithm valerie king department computer science university victoria victoria bc canada 
problem considered determining spanning tree spanning tree 
koml required linear number comparisons nonlinear overhead determine comparisons 
simplify give linear time procedure implementation unit cost ram model 
procedure uses table lookup simple functions precompute time linear size tree 
problem determining spanning tree graph mini mal spanning tree studied tarjan kom ko dixon rauch tarjan drt 
tarjan algo rithm uses path compression gives linear running time 
kom algorithm linear number comparisons linear time method deciding known 
linear implementation algorithm thought possible see ko drt 
known linear time algorithm problem drt combines techniques ko kom algorithm process small subproblems preprocessing table lookup 
verification methods method fact spanning tree minimum spanning tree iff weight non tree edge weight heaviest edge path tree methods find heaviest edge path non tree edge graph compare weight 
ree path problem finding heaviest edges paths specified pairs nodes query paths arises randomized minimum spanning tree algorithm karger klein tarjan kkt 
algorithm compute minimum spanning tree linear expected time operations allowed edge weights binary 
solution tree path problem complicated part randomized algorithms fairly simple 
kom algorithm simplified observation spanning tree simple algorithm construct full branching tree edges property denote set edges path node node denotes set edges path leaf leaf weight heaviest edge weight heaviest edge suffices version kom algorithm full branching trees simpler algorithm general trees 
second part show portion kom ss algorithm linear time implementation table lookup simple functions 
tables constructed time linear size tree 
drt algorithm model computation unit cost ram word size log 
operations edge weights binary com 
contrast drt algorithm separates tree large subtree size 
path compression large sub tree 
comparison decision tree needed implement kom ss strategy possible configuration possible set query paths precomputed stored table 
query paths input spanning tree encoded table look appropriate comparisons 
section construction described property proved 
section restate kom ss algorithm determining maximum weighted edge paths full branching tree describe implementation 
boruvka tree property spanning tree nodes 
tree tree components formed boruvka algorithm finding minimum spanning tree applied boruvka algorithm applied tree follows see initially blue trees consisting nodes edges 
repeat blue tree blue tree select minimum weight edge incident 
color selected edges blue 
repetition instructions referred phase 
construct tree nodeset adding nodes edges phase algorithm correspondence nodes blue trees created phases algorithm 
node create leaf set blue trees joined blue tree phase add new node add 
edge labeled weight edge selected phase note full branching tree rooted leaves level internal node children 
tree constructed time 
may seen follows cost executing phase proportional number uncolored edges tree phase 
number uncolored edges number blue trees tree 
number blue trees drops factor phase 
tree denote set edges path node node prove theorem 
spanning tree tree constructed described pair nodes weight heaviest edge equals weight heaviest edge 
proof 
denote weight edge 
show edge edge 
endpoint farther root 
blue tree contains weight edge selected edge exactly endpoint option selecting concludes part proof 
remains show claim heaviest edge 
edge weight 
assume simplicity unique heaviest edge 
proof easily extended general case 
ife selected blue tree contains edge labeled 
assume contrary selected blue tree contain blue tree contained endpoint intermediate node path incident edges path 
heavier selected giving contradiction 
kom algorithm full branching tree full branching tree weighted edges nodes query paths pairs leaves kom shown simple algorithm compute heaviest edge path pair log comparisons 
breaks path half paths extending leaf lowest common ancestor pair finds heaviest edge half path follows set paths contain restricted interval root 
starting root descend level level node encountered heaviest edge path set determined follows 
parent assume know heaviest edge path set 
note ordering weights heaviest edges determined length respective paths paths path includes path vice versa 
set restrictions paths interval root 
ordering weights heaviest edges known 
determine heaviest edge path need compare weights 
done binary search 
shows lg nlog gives upper bound number comparisons needed find heaviest edge half path 
heaviest edge query path determined additional comparison path 
implementation kom algorithm implementation kom algorithm requires simple functions words size shift specified number bits bit wise words multiplication words functions conventional described 
functions precomputed time stored table accessed unit time 
description data structures followed high level description algorithm implementation details 
data structures take lg bits 
node labels edge tags modification scheme schieber vishkin sv label nodes lg bit label edges bit tag label property tag edge label node path leaf located constant time 
labels constructed follows label leaves encountered depthfirst traversal tree 
label internal node label leaf subtree longest suffix 
edge endpoint farther root distance distance root index rightmost label 
tag string bits sketch argument see sv label property holds hard see label ancestor node prefix label tv possibly followed os 
nodes label connected path tree 
label tv position rightmost ancestor label determine ancestor label distance root uniquely determines ancestor identity nodes label 
lower endpoint edge unique edge parent 
lca node lca vector length th bit lca iff path endpoint distance root 
query path exactly endpoint contained subtree rooted lowest common ancestor endpoints distance root 
lca stored single word 
node longest path denoted 
weight edge denoted tv 
recall set paths restricted root denoted 
call big small 
node big keep ordered list zw element tag heaviest edge ai 
list referred 
may similarly define set paths 
stored words containing lg tags 
small nearest big ancestor keep ordered list element tag heaviest edge interval root aj 
pointer entry contains tag stored single word 
algorithm goal generate time proportional log time spent implementing algorithm node exceed worst case number comparisons needed node 
show big implementation time log small initially root 
proceed tree parent children depending ia wo generate 
compare tv weights edges performing binary search list insert tag appropriate places form 
continue leaves reached 
node parent nearest big ancestor 
compute cases small small create time 
big create lca lca time 
big big ancestor create lca lca lg lg time 
small create time lg lg 
big ancestor insert tag appropriate places list rank compared heaviest edges 
insert tag positions ia ino list data structure time small big 
implementation details computation lca straightforward 
compute lowest common ancestors pair endpoints query paths algorithm runs time see sv 
form vector lca leaf information form vector lca node distance root oring lca children setting jt bits implement remaining operations need preprocess functions may table look functions 
define bits lgn tj 
input output described stored single words 
symbol denote concatenated 
select takes input strings bits 
outputs list bits selected 
ordered list indices bits value 
list 
value ki th bit select takes input string bits list subwords 
outputs list subwords selected 
ordered list indices bits value 
list 
subword weight takes input string length outputs bits set 
index takes bit vector outputs list containing indices vector 
constant bit remaining bits 

subword set 
functions hard see preprocessing takes time size input greater lg constant 
build table inputs length building table inputs size looking result halves constant time putting results form entry 
example index table built index eas ily construct table input strings size constant number operations entry follows half input second half 
add weight subword index adding weight 

string formed 
concatenate weight subwords index weight sub words recall lg hi 
afford build table select select takes inputs bits 
explained compute functions needed constant time table lookups functions input size described 
perform operations needed data structures 
omit subscripts functions easily inferred size inputs 
determine weight lca 
create rip insert ta positions lp concatenate subwords rip subwords 
partition strings li bits store li word 
th word string li selects li hi concatenate outputs form 
subword contains tag pointer 
replace subwords positions higher 
insert level appropriate positions rip rm similar item done word list 
analysis small cost overhead performing insertions binary search constant 
ia log log log cost overhead 
implementation cost lg la proportional number comparisons needed kom algorithm find heaviest edges half paths tree worst case 
summed nodes comes log kom shown 
additional costs forming lca take processing tables takes comparing heaviest edges half path takes 
complete minimum spanning tree verification algorithm compares weight edge weight heaviest tree edge tree path connecting endpoints 
additional cost 
open problems reduced kom algorithm simpler case full branching tree 
devised novel data structure gives algorithm linear time overhead implementation 
open question find linear time algorithm pointer machine 
result imply linear time algorithm pointer machine compute lowest common ancestor 
known problem easier 
static tree sv lowest common ancestor algorithm process line query paths constant time 
open problem solve tree path problem constant time query path query paths line 
functions sense natural 
possible may useful implementing algorithms known linear implementations implementations involve specialized table lookup functions drt implementation 
see drt algorithms 
applications theorem interest 

dixon rauch tarjan verification sensitivity analysis minimum spanning trees linear time slam journal computing vol 
nov pp dec 

harel tarjan 
fast algorithms finding nearest common ancestors siam computing vol 
pp 

karger klein tarjan randomized linear time algorithm find minimum spanning trees appear ja cm 

kom linear verification spanning trees ica pp 
focs 

schieber vishkin finding lowest common ancestors simplification parallelization siam cornput 
pp 


tarjan 
applications path compressions balanced trees assoc 
cornput 
mach 
pp 

tarjan 
data structures ad network algorithms cbms nsf regional confer series applied math 
vol 
siam 
article processed latex macro package llncs style 
