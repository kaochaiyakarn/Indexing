polynomial time collision detection manipulator paths specified joint motions achim technische berlin berlin germany 
exact collision detection algorithm described analyzed 
time bound considers complexity solids number joints number distinct collision configurations 
bound number collision configurations taken directly input data 
algorithm exact treatment trigonometric expressions 
representation trigonometric constants discussed appendix 

detection intersections collisions objects related geometric planning tasks 
example collision detection methods basis standard motion planning techniques 
clearly order derive exact collision detection methods asymptotic time bounds collision detection necessary describe complexity motions 
problems distinguished context intersection detection objects configuration test objects point common intersection computation fixed objects compute intersection set points common objects collision detection objects motions decide intersection occur motions problem considered extension third problem solids motions compute time intervals intersection occur 
common points computed 
follows refer single motion objects simultaneous motions objects specified respect single common time parameter problem collision detection studied contributions :10.1.1.30.2174
considers polyhedra fixed polyhedron translated rotated case useful motion planning applications 
arbitrary motions polyhedra considered fast collision detection methods derived discretization motion discretization motion finite set sample configurations occur motion 
intersection detection method applied sample configuration 
gilbert hong describe iterative collision detection method 
method decided collision occur iterative root finding sub algorithms resolution parameter time bounds considering complexity motion derived 
fast method computing distance polyhedra lin canny 
method finds closest pair features vertices faces edges fixed polyhedra applied collision detection discrete sample configurations 
general criteria choice sample configurations available 
method reduces collision detection dimensional moving solids intersection testing higher dimensions 
extrusions moving solids additional time dimension computed 
resulting dimensional solids tested respect intersections 
extrusions approximated csg model 
method described exact sense computations performed loss accuracy decided exactly collision occur asymptotic bounds computing time bounds take account complexity motion context methods exact treatment trigonometric expressions relating joint motions spatial locations features derived 
possible methods useful applications 
bounds consider complexity objects number moving joints complexity motion bound computing time taken directly input data 
method described exact algorithm determination free sections motion 
standard collision detection methods mentioned distance computation fixed objects 
method described static distance computation 
distances objects arbitrarily small computations exact 
complexity measure number distinct contact configurations occur motion 
motions jointed mechanisms specified ways 
way consider motions solids links 
case position orientation link motion described function common time parameter 
second way specify motions mechanism functions representing displacement joints 
second type path specification allows direct execution motion transformation 
opposed representation second representation contain redundancy respect number variables required specify configurations 
simple class motions jointed mechanisms consists motions joints moved constant possibly distinct velocities 
extension class obtained ratios joint velocities constant motion 
acceleration deceleration taken account 
simple class motions generally correspond polynomial constraint functions describing incidence relations objects 
due trigonometric expressions relating joint angles coordinates physical space 
consider jointed mechanisms rotational joints 
assumed objects represented polygons polyhedra 
manipulator motions described tuple functions functions functions common time parameter component tuple describes setting single joint function time parameter 
consider motions component functions linear functions linear functions transformed appropriate common transformation function 
transformation function specifies velocity profile motion describes accelerations 
acceleration expressed strictly linear component functions 
transformation function change motion respect collisions 
assumed component functions linear functions common time parameter range possible settings joint interval carrying natural topology configuration space product intervals motions considered straight line segments space 
simple approximate motion planning schemes derived described class motions motions corresponding grid line segments analyzed path search reduced search graph 
motion planning schemes collision detection motions corresponding line segments described 

collision constraint functions incidence relations features polygonal polyhedral objects fixed position described constraint expressions 
constraint expressions linear coordinates specifying position features 
determined polygons polyhedra fixed position overlap testing signs constraint expressions 
example constraint expressions case polygons plane derived 
example consider line segments sp sq plane containing respective points 
goal derive expressions indicate intersection line segments 
points describe fixed initial position segments sp sq 
constraint expressions derived consider placements points 
moving segments positions points expressed functions depending common time parameter 
lp lq lines containing segments sp sq 
lines called supporting lines 
normal vectors equations supporting lines readily computed coordinates segment points 
fact px py coordinates supporting line lp lp py px xy py 
assumed 
coordinates depend time parameter equation lp function simple criterion describes intersection line segments sp sq 
sp sq intersect points different sides supporting line lq points different sides lp 
normal form lines lp lq constraint expression derived directly criterion points inserted equation lq 
evaluation equation gives real values 
lie different sides line signs values different values negative positive 
obviously care taken values vanishes 
case included way definition intersection segments sp sq occurs segments point common 
sp intersects line lq normal form lq different sign zero 
written single expression obtain sp intersects lq qy qx px py qx qy 
qy qx qx qy complete test remains establish sq intersects lp constraint expressions describing intersections sp sq sp sq intersect qy qx px py qx qy 
qy qx qy py qx qy px py 
py py la lb derived expressions linear functions coordinates decomposed constraint expression linear coordinates constraint la stated form qy py qx qy qy qx qy qy py qx qy qy qx qx qy la complete set constraint expressions describing intersections polygons derived intersection test line segments suffices pair constraint expressions form pair polygon edges 
derivation constraint expressions polyhedra types solids similar 
types constraint expressions describing intersection polyhedra 
spheres treated way constraint functions describing distance mid points incidence relations 
case constraint expressions quadratic coordinates 
similar constraint expressions objects described cylinders segments cylinders derived 
constraint expressions expression distance lines 
coordinates point manipulator link depend joint angles expressed sums products sine cosine functions real valued coefficients forward kinematic description manipulator 
arguments sine cosine functions specify joint settings called joint variables 
constant coefficients occurring expressions specify kinematic constants length links fixed angles joint axes 
assumed constant coefficients sums products rational numbers expressions form sin rc cos integers coordinates describing spatial location moving object features respect joint settings sums products constant coefficients sine cosine functions joint variables arguments 
joint variables replaced component functions motion 
component functions specify motion way described 
coordinates moving features inserted collision constraint expressions specifying incidence relations features 
way collision constraint functions obtained 
order determine time intervals solids overlap suffices find intervals appropriate sets constraint functions negative 
example consider planar linkages rotational joints links described line segments equal length 
points linkage assumed fixed respect plane 
static intersection links method previous example 
motion function time parameter forward kinematic equation specifies position link depending respective joint setting 
planar linkage described type links 
length 
assumed links joints form chain li connected rotational joint 
fixed point link placed origin 
initial position linkage section positive axis link coincides interval joint connecting li placed point 
variables describe settings joints respect initial configuration linkage 
position movable point link depending joint setting point sind 
points px py px py link chain px py cos dl cos dl 
cos dl dn sin dl 
sin dl dn px py cos dl cos dl 
cos dl dn sin dl 
sin dl dn similar expressions derived dimensional linkages rotational joints coordinates point link depending joint settings described trigonometric expressions 
motion variables expressions replaced functions di aft px py constraint expressions example replaced resulting expressions gives functions parameter describing intersections motion number collision constraint functions grows quadratically number features describing solids 
section integer arithmetic methods exact treatment functions determination zeros signs intervals described 

decomposition collision functions collision constraint functions sums sub expressions sub expression product rational constants trigonometric constants form sc functions time parameter form sc sc denotes sine cosine function 
factor time parameter related velocity corresponding joint called velocity parameter 
assume velocity parameters rational constants constants occurring arguments trigonometric functions rational multiples 
expression form sc rational real algebraic constant elementary arithmetic operations type constant performed loss accuracy 
representation trigonometric constants discussed appendix 
collision constraint function sum sub expressions form sc 
bl sc constant total number joints 
bound number non constant factors product form follows fact joint variable occurs product forward kinematic equation specifying coordinates features linearity collision constraint functions coordinates 
expression form decomposed trigonometric addition formulas constants removed arguments trigonometric functions 
step requires elementary arithmetic operations algebraic rational numbers expression form 
order determine zeros collision constraint function rational velocity parameters assumed velocity parameters integers rational velocity parameters normalized integer form way parameters multiplied common multiple denominators resulting integers divided greatest common divisor 
re transforming zeros resulting collision functions normalized velocity parameters yields zeros original collision constraint functions 
collision constraint functions written sums sub expressions form kl kl constants 
crn rn algebraic functions fl fl contained set sin cos 
assumed values positive cos ki cos ki sin ki sin 
values normalized velocity parameters 
expression form cos sin 
cos kt sin kt called trigonometric polynomial 
called degree term form ki ki considered trigonometric polynomial 
equations sin sin cos cos cos cos cos cos sin cos sin sin show product trigonometric polynomial degree expression form ki sin cos trigonometric polynomial degree equal coefficients trigonometric polynomial evaluated arithmetic operations coefficients expression form transformed trigonometric polynomial nk steps sum values number terms form single collision constraint function bounded transformation constraint function takes steps 
bound degree resulting trigonometric polynomial 
list isolating intervals zeros trigonometric polynomial calculated integer arithmetic 
shown intervals trigonometric polynomial degree rational algebraic coefficients positive negative determined exactly 
furthermore shown computation takes steps 
example consider planar linkages example single rotational joint single link 
joint variables variables 
links segments respectively points segments px py px py cos dl sin dl qx qy qx qy cos sin inserting expressions constraint expression example obtain inequality sind cos sin motion particular constraint expression gives rise collision constraint function sin cost cos sint decomposed trigonometric polynomial sin sint 
zeros trigonometric polynomial values 
values time points point line containing collision constraint functions describe incidence distance relations features 
zero collision constraint function may correspond collision point 
real zeros trigonometric polynomial degree interval 
trigonometric polynomials periodic suffices find zeros interval length 
bound degree collision constraint functions bound number distinct collision configurations motion sum normalized positive velocity parameters 
total time required find intervals collision constraint functions negative bounded 
number features describing solids number moving joints bound number collision configurations 
note bound take account size coefficients 
special cases constants rational fixed length 
coefficients generally algebraic arithmetic operations algebraic numbers performed polynomial time holds zero isolation trigonometric polynomials algebraic coefficients 
points interval function negative zeros function 
single function list intervals isolating zeros computed 
isolating intervals corresponding single function disjoint 
intervals corresponding distinct functions necessarily disjoint 
order decide interval corresponds overlap necessary isolate zeros set collision constraint functions compute list intervals intervals corresponding zeros functions disjoint 
equally done polynomial time may result large coefficients 
example necessary isolate zeros collision constraint functions corresponding expressions ac may necessary refine isolating intervals ensuring isolating intervals corresponding expressions ac disjoint 
algebraic coefficients approximated rational numbers large inaccuracies may result 
exact representation trigonometric coefficients occurring context discussed appendix 
methods describe complexity motions 
complexity motion measured number possible collision configurations 
computations exact distances objects arbitrarily small 
shown collision detection performed polynomial time 
measures complexity motion respect collision detection minimal distances objects 
case smaller distances lead increased computing time 
derived collision detection method polynomial number joints 
collision constraint expressions derive representation configuration obstacles representation basis exact motion planning method 
known motion planning methods exponential number joints 
bounds trigonometric zero isolation time bound modified algorithm 
improved bound og nd algebraic zero isolation modified algorithm stated denotes degree input polynomial denotes maximum absolute value integer coefficients bound bound reduced 
exact collision detection applied context design assembly 
example decided objects moving fixed relative angular velocities collide 
related problem arising context find parameter ranges correspond designs objects collide parameters describe link lengths angular velocities exact methods appear appropriate case 
appendix 
representation trigonometric constants consider constants form cos integers assumed relatively prime 
constants form rational goal determine exact computer representation constants representation allows exact elementary arithmetic operations comparison 
arithmetic operations real algebraic number represented polynomial zero integer coefficients isolating interval 
isolating interval identify zero set zeros isolating interval interval rational points containing zeros clearly useful find polynomial minimal degree 
polynomial determined known algebraic number represented occurs zero list isolating intervals zeros determined standard methods 
required identify number list isolating intervals find interval containing constant cos written form cos rc relatively prime 
minimal polynomial cos zc ern ern ti ern trn functions chebyshev polynomials degree coefficients cyclotomic polynomials order 
denotes number integers relatively prime elements set cos gcd polynomial degree 
set contains distinct values written form cos rj gcd descending order cos il cos jl interval corresponding number cos determined directly list isolating intervals example representation value cos 
cos rewritten cos cos 
cyclotomic polynomial order 
chebyshev polynomial 

zeros polynomial values cos cos cos cos 
value cos corresponds second interval list isolating intervals zeros list sorted descending order 
exact representation value cos mentioned polynomial integer coefficients second interval list isolating intervals zeros coefficients chebyshev polynomial computed directly value methods fast computation cyclotomic polynomials derived latombe monte carlo algorithm path planning degrees freedom proc 
ieee int 
conf 
robotics automation 
interference detection solids surfaces comm 
acm 
buchberger collins computer algebra symbolic algebraic computation wien new york springer verlag 
cameron study clash detection problem robotics proc 
ieee int 
conf 
robotics automation 
cameron efficient intersection tests objects defined constructively 
int 
robotics res 
cameron collision detection dimensional intersection testing ieee transactions robotics automation vol 

canny complexity robot motion planning cambridge mass london mit press 
gilbert hong new algorithm detecting collision moving objects proc 
ieee 
int 
conf 
robotics automation 
hayward fast collision detection scheme recursive decomposition manipulator workspace proc 
ieee int 
conf 
robotics automation 
johnson algorithms polynomial real zero isolation ph dissertation ohio state university dissertation preparation 
lin canny fast algorithm incremental distance calculation proc 
ieee int 
conf 
robotics automation 
computing algebraic extensions computer algebra symbolic algebraic computation buchberger 
eds wien new york springer 
lozano simple motion planning algorithm general robot manipulators ieee journal robotics automation ra 
und mannheim wien institut 
paul robot manipulators mathematics programming control cambridge mass london mit press 
requicha voelker solid modeling historical summary contemporary assessment ieee trans 
computer graphics applications vol 

canonical simplifier trigonometric expressions kinematic equation information processing letters 
real zero isolation trigonometric exponential polynomials 
acm trans 
math 
software 
exact collision detection simultaneously working robot manipulators proc 
ieee int 
workshop intelligent robots systems tokyo 
ein verfahren zur von 
hyperplane strategy multi dimensional motion planning technischer bericht fachbereich technische universitt berlin 
