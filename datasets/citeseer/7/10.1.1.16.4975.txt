brics basic research computer science temporal logic approach binding time analysis rowan davies brics report series rs issn october copyright fl brics department computer science university aarhus 
rights reserved 
reproduction part permitted educational research condition copyright notice included copy 
see back inner page list publications brics report series 
copies may obtained contacting brics department computer science university aarhus ny munkegade building dk aarhus denmark telephone telefax internet brics brics dk brics publications general accessible www anonymous ftp www brics dk ftp ftp brics dk cd pub brics temporal logic approach binding time analysis rowan davies rowan cs cmu edu january curry howard isomorphism identifies proofs typed calculus terms correspondingly identifies propositions types 
show isomorphism extended relate constructive temporal logic binding time analysis 
particular show extend curry howard isomorphism include fl operator linear time temporal logic 
yields simply typed fl calculus prove equivalent multi level binding time analysis partial evaluation 
keywords curry howard isomorphism partial evaluation binding time analysis temporal logic 
completed visit author brics basic research computer science centre danish national research foundation summer 
www www cs cmu edu rowan partial evaluation method specializing program part program input 
basic technique execute parts program depend unknown data constructing residual program parts 
offline partial evaluation uses binding time analysis determine parts program depend unknown dynamic data regardless actual value known static data 
binding time analyzes usually described typed languages include binding time annotations example nielson nielson gomard jones 
motivation particular typing rules chosen clear 
example palsberg modular proofs binding time analyzes generate annotations allow large classes partial evaluators specialize correctly 
provide direct motivation particular rules binding time type systems 
give logical construction binding time type system temporal logic 
temporal logic extension classical logic include proofs formulas valid particular times 
isomorphism relates constructive proofs typed terms formulas types 
expect extending curry howard isomorphism constructive temporal logic yield typed calculus expresses result particular type available particular time 
exactly binding time type system capture 
different temporal logics different temporal operators studied need determine exactly relevant binding time analysis 
binding time separated program stage program manipulate data code stage 
level types suggests stage type code stage 
curry howard isomorphism led consider temporal logic fl operator denotes truth stage fla valid valid time 
temporal logics generally allow unbounded number times naturally correspond binding time analysis levels studied gluck jrgensen :10.1.1.28.4059
traditional level binding time analyzes trivially obtained restriction 
binding time analysis simple linear ordering binding times consider linear time temporal logic time unique time immediately 
putting naturally suggests linear time temporal logic fl multi level binding time analysis images curry howard isomorphism 
observed previously show formally case 
development relatively straight forward main interest demonstrating direct logical relationship binding time analysis temporal logic 
structure follows 
section start fl axiomatic formulation due stirling small classical linear time temporal logic including fl :10.1.1.57.1556
formulate natural deduction system similar style modal systems martini masini prove theorems axiomatic formulation :10.1.1.57.1556:10.1.1.57.1556
allows directly apply curry howard isomorphism natural deduction system yielding typed fl calculus fl operator types 
second half consider essentially calculus fragment language multi level binding time analysis gluck jrgensen :10.1.1.28.4059
construct simple isomorphism fl preserves typing showing languages equivalent type systems 
conclude discussing practical concepts binding time analysis 
similar davies pfenning shows typed language mini ml modal logic captures powerful form staged computation including run time code generation :10.1.1.28.4059
show mini ml conservative extension level linearly ordered level languages studied nielson nielson 
note system allows programs manipulate closed code binding time type systems partial evaluation gomard jones allow manipulation code free variables 
original motivation consider extend mini ml system conservative extension bindingtime type systems partial evaluation 
achieve goal find lose features mini ml ordinary binding time analysis 
operator mini ml corresponds type closed code fl operator fl corresponds type code free variables 
operators suitable different purposes preferred depends context 
suggests desirable direction design type system correctly capturing closed code code free variables single framework 
temporal calculus section show extend curry howard isomorphism include fl operator temporal logic 
temporal logics generally formulated axiomatically classical style natural deduction intuitionistic formulation appropriate curry howard isomorphism 
start sound complete axiomatic system stirling fragment classical linear time temporal logic containing fl :10.1.1.57.1556
starting small fragment allows ignore connectives formulating equivalent natural deduction system 
drop classical reasoning natural deduction system real interest fl operator consider extension curry howard isomorphism adding proof terms yield simply typed calculus fl operator types 
axiomatic formulation axioms inference rules fragment classical lineartime temporal logic containing fl due stirling page shows sound complete models logic :10.1.1.57.1556
choose system starting point appears smallest linear temporal logic containing fl operator previously considered literature 
axioms classical tautology instance fl fl fl 
fla fla inference rules mp ro fl note inference rules require proofs assumptions 
natural deduction formulation consider natural deduction formulation fl show equivalent axiomatic 
include negation classical reasoning equivalence exact drop consider typed calculus 
presenting fl operator rule elimination rule separated negation classical reasoning allowing remove rules affecting basic properties fl 
natural deduction formulation uses judgement annotated natural number representing time assumption gamma annotated time just levels modal natural deduction systems martini masini fact system exactly rules modal linearity need restriction rule fl :10.1.1.57.1556:10.1.1.57.1556
rules non temporal fragment relatively standard natural deduction pure classical logic allow depend equivalence axiomatic natural deduction systems pure classical logic 
sequent style presentation correspond calculus typing rules 
gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma gamma fli gamma fla gamma fla fle gamma order give proof theoretic semantics fl operator need consider proof reduction rule fli immediately followed fle reduces trivially proof inference steps removed 
theorem justifies formulation theorem derive delta proof fl proof sketch direction construct derivation axiom proceed induction inference rules fl simply notice removing rules fl yields standard system pure classical logic 
axioms straightforward case inference rule ro requires showing incrementing time annotation derivation yields derivation 
direction prove induction structure derivations strengthening induction hypothesis fl fl fl provable fl fl means occurrences fl 
cases rules non trivial 
solved repeated application converse derivable classical tautology sequence cuts classical tautologies reduce corresponding cases pure classical logic equivalence natural deduction axiomatic presentations 
temporal calculus add proof terms intuitionistic fragment natural deduction system 
remove usually included typed calculi particular included binding time type systems 
justified simply removing inference rules negation classical reasoning natural deduction formulation fl operator completely captured elimination rules 
yields fl simply typed calculus fl operator types natural extension curry howard isomorphism 
syntax types fla terms prev contexts gamma delta gamma typing rules gamma expression type time context gamma 
gamma gamma gamma gamma gamma gamma gamma gamma fli gamma fla gamma fla fle gamma prev reduction rules standard fi reduction rule reduction rule natural deduction proof reduction rule analogously correspondence fi reduction proof reduction rule prev fl gamma 
elimination followed analogous reduction prev fl gamma 
equivalence binding time type system demonstrate relationship fl binding time type systems considered authors 
consider simply typed calculus essentially core standard binding time analyzes offline partial evaluation see gomard jones 
additionally allows binding times way multi level binding time analysis gluck jrgensen :10.1.1.28.4059
formulation basically calculus fragment gluck jrgensen system important differences 
separate syntactic categories types level avoiding side conditions regarding formedness types 
treat final level dynamically typed consider program statically typed 
include lifting binding time demonstrate section easily added give simple translation fl translation bijection terms types preserves typing modulo reduction prev redices 
fl equivalent type systems modulo trivial reductions 
syntax separate syntactic categories indicate type results available time 
time annotations base types function types indicate time corresponding values available 
time annotations terms indicate time application reduced corresponding variable substituted 
see gluck jrgensen semantics evaluation multi level terms multiple stages :10.1.1.28.4059
types terms contexts psi delta psi typing rules psi tpm var psi psi tpm lam psi psi psi tpm app psi equivalence translation give simple translations typed terms fl translation fl maps terms equivalence class respect prev prev reductions term 
direction translate terms fl terms redices reduced unique representatives equivalence classes 
note reduce redices number reductions bounded number prev constructors 
show translations inverses restricted representatives equivalence classes preserve typing 
shows isomorphic fl modulo prev reductions 
equivalent modulo trivial reductions 
translations functions delta delta defined follows type translation jb kbk ka ka ka flj fl ak kak term translation jx kxk ej jej kx mk ka kmk je je je km km km je mk kmk je mk kmk convenient syntax matching expressions top constructor annotated lemma delta delta inverses fragment fl redices 
proof straight forward induction 
theorem translations preserve typing ffl delta delta jm ffl delta delta kmk kak proof straight forward structural induction strengthening appropriately ffl psi psi jm ffl gamma gammak kmk kak relationship binding time analysis practice proof shows fl equivalent type systems justifying claim binding time type systems image temporal logic curry howard isomorphism 
lacks aspects real binding time type systems particular compare detail multi level binding time type system gluck jrgensen :10.1.1.28.4059
firstly verified difficulty extending fl data structures fixed points features realistic functional languages just simply typed calculus 
secondly lift coercions map values binding time missing language 
gluck jrgensen include lift coercions base types :10.1.1.28.4059
fl include particular base types primitive operations surprising include lift coercions 
refer davies pfenning shown lift coercions generally definable functions staged version language ml :10.1.1.28.4059
example language extending standard ml prev fl type natural numbers represented zero successor similar mini ml lift coercion val nat 
nat fun prev lift coercions defined appropriately identical calculus core multi level binding time analysis gluck jrgensen minor syntactic differences :10.1.1.28.4059
remaining difference gluck jrgensen allow final binding time dynamically typed 
curry howard isomorphism concerns statically typed languages surprising fl differ regard 
observe fl allows interesting perspective relationship binding time annotated language original language 
consider prev lift coercions implicit coercions original language type system including fl language reminiscent sub typing style breazu tannen 
doing type inference making coercions explicit exactly binding time analysis 
prev functions quite different implicit coercions 
fl serve basis extension statically typed language standard ml allow hand written programs generate specialized code 
shown useful technique situations gives programmer direct control bindingtime decisions forces think binding times writing code 
course comes price programmer manually annotate program 
consider fl appropriate basis language intrusive syntax 
demonstrated image small temporal logic curry howard isomorphism fl provides logical construction binding time type system equivalent partial evaluation 
particular fl allows programs manipulate code free variables 
contrast davies pfenning mini ml typed language modal logic expresses form binding time analysis :10.1.1.28.4059
example term type binding time type system corresponding typed term mini ml fl translation previous section yield corresponding term type fla fl follows fl prev manipulation code free variables comes price 
fl express closed code directly extended construct mini ml expresses evaluation generated code 
construct essential language supports general forms staged computation main novel feature mini ml consider construct type system captures closed code code free variables 
possible direction observation manipulation code free variables allowed fl single successor stage stage corresponds fact fl linear time temporal logic 
mini ml allow stage successor stages order allow general forms staged computation particular run time code generation sharing code stages see details :10.1.1.28.4059
means constructing code arbitrary successor stage variables bound possibly different successor stage 
suggests design language expresses closed code code free variables explicitly name stages provide explicit quantifier prev move stages 
similar systems labelled natural deduction gabbay de allow different logics formulated including modal logics speculative direction research 
implemented type checkers languages fl logic programming language elf see pfenning 
logic programming variables programs perform type inference 
implemented translations proof equivalence languages elf 
author gratefully acknowledges discussions andrzej filinski flemming nielson jens palsberg frank pfenning regarding subject 
author give special olivier danvy motivating inspiring 
brics offering stimulating pleasant environment visit summer 
val breazu tannen thierry coquand carl gunter andre scedrov 
inheritance implicit coercion 
information computation 
dominique cl ement despeyroux thierry despeyroux gilles kahn 
simple applicative language mini ml 
proceedings conference lisp functional programming pages 
acm press 
rowan davies frank pfenning :10.1.1.28.4059
modal analysis staged computation 
proceedings rd annual acm symposium principles programming languages january 
appear 
earlier available technical report cmu cs carnegie mellon university may 
dov gabbay de 
extending interpretation linear relevant resource logics 
journal symbolic logic 
robert gluck jesper jrgensen :10.1.1.28.4059
efficient multi level generating extensions program specialization 
swierstra hermenegildo editors programming languages implementations logics programs plilp volume lecture notes computer science pages 
springer verlag september 
carsten gomard neil jones 
partial evaluator untyped lambda calculus 
journal functional programming january 
howard 
formulae types notion construction 
seldin hindley editors curry essays combinatory logic lambda calculus formalism pages 
academic press 
hitherto unpublished note rearranged corrected annotated howard 
neil jones carsten gomard peter sestoft 
partial evaluation automatic program generation 
prentice hall international series computer science 
prentice hall 
simone martini andrea masini :10.1.1.57.1556
computational interpretation modal proofs 
wansing editor proof theory modal logics 
kluwer 
appear 
flemming nielson hanne riis nielson 
level functional languages 
cambridge university press 
jens palsberg 
correctness binding time analysis 
journal functional programming july 
frank pfenning 
logic programming lf logical framework 
erard huet gordon plotkin editors logical frameworks pages 
cambridge university press 
colin stirling :10.1.1.57.1556
modal temporal logics 
samson abramsky dov maibaum editors handbook logic computer science vol 
chapter pages 
oxford university press oxford 
morten 
efficient conversions 
thomas schubert phillip james alves foss editors th international workshop higher order logic theorem proving applications aspen grove utah volume lecture notes computer science pages 
springer verlag september 
publications brics report series rs rowan davies 
temporal logic approach bindingtime analysis 
october 
pp 
rs 
competitive line paging lookahead 
september 
pp 
rs mayer goldberg 
solving equations calculus syntactic encapsulation 
september 
pp 
rs 
simple proofs occupancy tail bounds 
september 
pp 
appear random structures algorithms 
rs 
suffix tree tree minimizing sequential transducers 
september 
pp 
rs laura 
comparison complexity string prefix matching problem 
august 
pp 
appears leeuwen editor algorithms esa second annual european symposium proceedings lncs pages 
rs sven 
dynamic maintenance majority information constant time update 
august 
pp 
rs bruno igor walukiewicz 
monadic secondorder logic unfoldings transition systems 
august 
pp 
csl 
rs noam nisan avi wigderson 
lower bounds arithmetic circuits partial derivatives preliminary version august 
pp 
appear th annual conference foundations computer science focs ieee 
rs mayer goldberg 
adequate left associated binary numeral system calculus 
august 
pp 
rs olivier danvy jens palsberg 
eta expansion trick 
august 
pp 
