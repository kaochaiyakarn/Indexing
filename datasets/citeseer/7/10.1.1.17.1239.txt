ieee transactions software engineering vol 
july august building knowledge families experiments victor basili fellow ieee forrest member ieee computer society experimentation software engineering necessary difficult 
reason large number context variables creating cohesive understanding experimental results requires mechanism motivating studies integrating results 
requires community researchers replicate studies vary context variables build models represent common observations discipline 
discusses experience authors collection experiments terms framework organizing sets related studies 
framework experiments viewed part common families studies isolated events 
common families studies contribute important relevant hypotheses may suggested individual experiments 
framework facilitates building knowledge incremental manner replication experiments families studies 
support framework discusses experiences authors carrying empirical studies specific emphasis persistent problems encountered experimental design threats validity criteria evaluation execution experiments domain software engineering 
index terms empirical software engineering experimental design software process software measurement software reading techniques 
software engineering necessary 
common wisdom intuition speculation proofs concepts reliable sources credible knowledge 
contrary progress discipline involves building models tested empirical study check current understanding field correct 
progress comes true separated believed true 
accomplish 
purpose definitions key terms 
empirical study broad sense act operation purpose discovering unknown testing hypothesis involving investigator gathering data performing analysis determine data mean covers various forms research strategies including forms experiments qualitative studies surveys archival analyses 
experiment form empirical study researcher control conditions study takes place control independent variables studied operation carried controlled conditions order test hypothesis observation 
term includes pre experimental designs 
theory possible explanation phenomenon 
theory set hypotheses 
hypothesis educated guess exists causal relation constructs theoretical interest variables measure casual construct called independent variables variables measure affected constructs called dependent variables 
amodel simplified representation system phenomenon may may mathematical formal theory 
basili computer science department university maryland college park md 
basili fraunhofer center maryland sciences surge bldg university maryland college park md 
mail basili cs umd edu 
dipartimento di informatica university bari bari italy 
mail di 
manuscript received july revised mar 
recommended acceptance ross jeffery 
information obtaining reprints article please send mail tse computer org ieeecs log number 
ieee scientific method supports building knowledge iterative process model building prediction observation analysis 
requires confidence placed theory stood rigorous deductive testing 
scientific theory falsifiable logically consistent predictive competing theories predictions confirmed observations tests falsification 
popper theory shown false false researchers confident theory survived numerous attempts falsification 
paradigm necessary step ensuring opinion desire influence knowledge 
scientific method contributed progress fields physics medicine manufacturing 
method belong subset intellectual endeavor case studies management information systems mis rigorous experiments practiced natural sciences 
unfortunately computer science specifically software engineering balance evaluation results development new models skewed favor proposals 
modeling research software products specifically models program functions mainly rooted mathematics exists large body knowledge developers 
components nonfunctional product characteristics software processes resources fair number models 
body evidence built enables project manager know great confidence software processes produce product characteristics conditions 
partly features intrinsic empirical areas 
basili building knowledge families experiments experimentation software engineering difficult 
carrying empirical complex time consuming especially true software engineering 
manufacturing software developers build product meet particular set specifications 
software developed product different 
software artifacts provide large set data points permitting sufficient statistical power confirming rejecting hypothesis 
physics technologies theories software engineering human variation human ability tends obscure experimental effects 
human factors tend increase costs experimentation making difficult achieve statistical significance 
degree credibility study depends validity drawn 
campbell stanley defined classes evaluation criteria internal validity external validity 
internal validity defines degree confidence cause effect relationship factors interest observed results external validity defines extent experimental context generalized context specified research hypothesis 
judd add class evaluation criteria construct validity defines extent variables successfully measure theoretical constructs hypotheses 
cook campbell add class validity defines extent statistically valid 
difficulties intrinsic software engineering lack data points human factors validity types satisfied time making study realistic achieve high external validity tension ability manipulate context get high internal validity 
investigators challenged design best study circumstances possible trying rule alternative explanations results generalize results setting interest 
investigators may get perfect study assuming perfect report study way verify 
researchers aware potential flaws biases effects study 
opportunities flaws empirical software engineering research numerous measurements appropriate goals experiment design avoid alternative explanations experimental findings findings generalized population different experimental sample 
drawing general empirical studies software engineering research difficult 
important reason experimentation software engineering hard results process depend large degree potentially large number relevant context variables 
priori assume results study apply outside specific environment run 
isolated studies run difficult understand widely applicable results assess true contribution field 
example consider study basili reiter 
study undertaken order characterize evaluate development processes development teams disciplined methodology 
effects team methodology contrasted control groups development teams ad hoc development strategy individual developers ad hoc 
hypotheses proposed br disciplined approach reduce average cost complexity faults rework process br disciplined team behave individual team terms resulting product 
study addressed hypotheses evaluating particular methods chief programmer teams top design reviews applied classroom setting 
study required experimenters construct models processes studied models effectiveness models context study run 
replications alter key attributes models necessary build knowledge results hold conditions 
unfortunately software engineering studies tend isolated replicated researchers 
basili reiter rigorous study unfortunately led larger body subject 
specific experiment replicated applicability hypotheses contexts studied 
investigated results hold example software developers different levels experience original experiment university students development teams composed differently original experiment person chief programming teams disciplined methodology benefits observed due particular methodology experiment observed disciplined methodology 
replications run hard know important knowledge framework relating studies 
build body software engineering knowledge requires families experiments set unifying principles allows results combined generalized 
requires framework explicit different models family experiments documents key choices experimental design rationales 
framework choose focus studies help determine important attributes models experiment held constant varied studies 
ultimate objective build unifying theory creating list specific hypotheses investigated area 
ieee transactions software engineering vol 
july august organizational framework allows experimenters understand different choices defining models hypotheses raises questions effects changes 
organizational framework provides mechanism different studies compared helps organize related studies tease true effects process studied environmental variables 
discuss set experiments performed authors suggest organizational framework set 
retroactively fit experiments framework discuss experiences software engineering experiments context framework 
show examples difficulty involved running experiments show framework better define experiments combine overcome validity problems 
show results unified laboratory manuals generated support framework 
set experiments software reading techniques illustrate framework share experiences regard particular set experiments software reading techniques 
reading techniques procedural techniques aimed specific development task software developers follow order obtain information need accomplish task effectively 
interested studying reading techniques order determine beneficial experience practices distilled procedural form effectively real projects 
felt reading techniques relevance value software engineering community reading software documents requirements design code key technical activity 
developers called read software documents order extract specific information important software tasks read requirements document order find defects inspection object oriented design order identify reusable components 
developers usually taught write software documents skills required effective reading rarely taught built experience 
fact felt research reading provide model effectively write documents understanding readers perform effectively may possible write documents way facilitates task 
concept reading techniques studied isolation 
software process reading techniques tailored environment run 
aim research generate sets reading techniques procedurally defined tailorable environment aimed accomplishing particular task specific particular document notation applied 
led series studies types reading techniques evaluated defect reading dbr focused defect detection requirements requirements expressed state machine notation called scr 
perspective reading pbr focused defect detection requirements requirements expressed natural language 
reading ubr focused anomaly detection user interfaces 
second version pbr pbr consisted new techniques procedurally oriented versions earlier set pbr techniques 
particular techniques specific steps 
scope reading sbr consisted reading techniques developed learning object oriented framework order reuse 
gqm goal template tool experimentation examples organizational frameworks appear literature 
basili proposed organizational framework consisted categories corresponding phases experimentation definition planning operation interpretation 
phase categories choices identified explicitly answered 
framework concerned allowing researchers define purpose experiment object study 
example experimental definition researcher asked identify purpose study characterization evaluation prediction motivation classify object study product process model metric theory determine scope study single project replicated project blocked subject project 
proposed similar framework provided different values dimensions classification reflecting common concerns experimenters 
example researcher asked specify concrete object study experiment product technology process technology purpose experiment evaluate outcome process vs process study focused single specific object study multiple objects 
rombach framework placed additional emphasis experimental variables 
example topic subjects researchers asked explicitly report selection criteria experience training background subjects ethical issues right withdraw study handled subjects required power statistical analysis procedure 
fenton list questions empirical studies evaluated 
questions turn suggest framework researchers specifying experiments suitable information reported answer questions 
questions concern research basili building knowledge families experiments empirical evaluation data experiment designed correctly study toy real situation appropriate measures study run long time 
organizational frameworks helpful regard purpose find goal question metric gqm goal template useful emphasizes variables attempting unify 
gqm method defined mechanism defining interpreting set operational goals measurement 
represents top systematic approach tailoring integrating goals models software processes products quality perspectives specific needs project organization 
gqm goal template tool articulate purpose study 
ties important models provides basis appropriateness study specific hypotheses dependent independent variables may evaluated 
parameters gqm goal template 
object study process product experience model 

purpose characterize evaluate predict estimate control manipulate events improve improve events 

focus model aimed viewing aspect object study interest reliability product defect detection prevention capability process accuracy cost model 

point view perspective person needing information theory testing point view usually researcher trying gain knowledge 

context models aimed describing environment measurement taken 
example goal basili reiter study previously described instantiated analyze development processes disciplined methodology team approach ad hoc team approach ad hoc individual approach characterize evaluate respect cost complexity faults rework point view developer project manager context advanced university classroom 
due nature software engineering research instantiated goals tend show certain similarities 
purpose studies evaluation researchers tend study software technologies order assess effect development 
purposes point view considered researcher 
studies run point view project manager requiring immediate feedback effects effort schedule published studies usually undergone additional post hoc analysis 
remaining fields template require construction complicated models show similarities 
object study process researchers concerned evaluating particular development process represents improvement way software built 
object oriented analysis lead meaningful models 
investment reviews lead buggy reliable systems 
reuse allow quality systems built cheaply 
object study process focus evaluation process effect 
experimenter may measure effect product process leads desired attribute software product 
experimenter may attempt capture effect people practitioners comfortable executing process tedious infeasible 
context field include large number environmental variables tends exhibit variability 
studies may run students experts time constraints wellunderstood application domains cutting edge areas 
numerous variables may influence results applying technique 
remainder illustrate concentrating studies investigate process characteristics respect effects products 
gqm template class studies analyze processes evaluate effectiveness product point view knowledge builder context particular variable set context variables 
particular studies class constructing complete gqm template requires making explicit models process object study effectiveness product focus context 
making models explicit necessary order understand study testing conditions empirical results hold 
example consider gqm templates list reading technique experiments described previous section 
ways classifying processes processes classified scope 
techniques processes require technical skill accomplish specific task 
methods processes support techniques augmented management issues technique applied 
life cycle models processes describe entire software development process 
categories subdivided turn 
set techniques example classified specific task reading testing designing 
helpful think range values organized hierarchical fashion general values top tree level tree represents new level detail fig 

selecting particular type process study gqm template analyze reading techniques evaluate effectiveness product point view knowledge builder context particular variable set 
reading technique experiments concerned studying effect reading techniques product 
model focus needs specify 
definitions technique method adapted 
ieee transactions software engineering vol 
july august fig 

portion hierarchy possible values describing software processes 
effectiveness measured product evaluation performed 
find useful divide set effectiveness measures analysis construction measures goal process analyze intrinsic properties document building new system 
categories broken specific types process goals different effectiveness measures may apply fig 

example effectiveness process performing maintenance evaluated process effects cost making change system 
effectiveness process detecting defects document measured number faults helps find 
course measures exist fit fig 

instance measure number faults defect detection process yields appropriate measure number errors amount effort required things 
similarly software document classified model software system contains relatively defined set subdivided specific notations may fig 

main purpose organizing possible values hierarchically organize conception problem space classifying experiments 
actual criteria somewhat subjective naturally multiple criteria classifying processes effectiveness measures software documents selected just contributed conception reading techniques 
terminology fig 
fig 
fig 
reading technique experiments described follows dbr 
analyze reading techniques evaluate ability detect defects scr notation requirements documents 

terms specific way ieee standard terminology 
error defect human thought process trying understand information solve problems methods tools 
context software requirements specifications error basic misconception actual needs user customer 
fault concrete manifestation error software 
error may cause faults various errors may cause identical faults 
failure departure operational software system behavior user expected requirements 
particular failure may caused faults faults may cause failure 
term defect generic term refer error fault failure 
pbr 
analyze reading techniques evaluate ability detect defects natural language requirements documents 
ubr 
analyze reading techniques evaluate ability detect anomalies screen shots user interfaces 
pbr 
analyze reading techniques evaluate ability detect defects natural language requirements documents 
note gqm template capture essential difference pbr experiment 
sbr 
analyze reading techniques evaluate ability support reuse object oriented design code 
linking goal templates hypotheses process model object study thought independent variable effect product focus dependent variable context variables variables exist environment experiment 
differences similarities experimental hypotheses described terms hierarchies values model attributes 
example consider studies dbr pbr 
cases process model focused task defect detection notation differed focused document requirements 
attributes process product context models held constant hypotheses formulated higher level abstraction 
hypothesis subjects reading technique tailored defect detection natural language requirements effective subjects ad hoc techniques task hypothesis useful subjects reading techniques tailored defect detection requirements effective subjects ad hoc techniques task 
difference hypotheses focus study described higher level abstraction second hypothesis requirements natural language requirements 
difference abstraction second hypothesis difficult test 
fact probably single study give overwhelming evidence validity lack thereof 
testing second hypothesis require idea types requirements notation basili building knowledge families experiments fig 

portion hierarchy possible values describing effectiveness software processes 
fig 

portion hierarchy possible values describing software documents 
interest practitioners 
building convincing body evidence requires combined analysis multiple studies specific reading techniques defect detection requirements 
effort required formulate hypothesis building body evidence helps advance field software engineering 
best evidence lead growth body knowledge containing basic important theories underlying aspect field 
worst effort spent specifying models forces think deeply relevant ways characterizing software engineering models researchers knowledge builders implicitly constructing anyway 
instantiating models necessity iterative process 
value attribute model process may constrain attributes second model product evaluated may turn constrain attributes original model 
order organize dealt models turn sections 
section examples experience suggest concerns taken account constructing models 
particular concentrate identifying important attributes models hidden dependencies exist attributes 
attributes need measured extent possible experimenters order fully describe models interest 
modeling process process worthy study interest value software engineering community 
definable set steps better bound set attributes properties 
means experimenters articulate steps process choose attributes scope values 
reading technique studies techniques meant satisfy certain set properties meant procedural focused document notation specific goal oriented 
properties interrelated 
follows discuss difficulty importance dealing definition scope attributes experiences 
procedural problem defines procedure followed level detail specified critical issues study process 
process specified procedurally user guided steps process process parameterized level specificity procedure 
level specificity thought spectrum possible values running detailed procedures step specified high level procedures brief descriptions user selects activities preferences experiences 
appropriate level specificity vary instance instance depends tradeoffs appropriate environment 
high ieee transactions software engineering vol 
july august level running risk providing little support user 
low level running risk process way tedious impractical follow 
vary experience user process 
description user description done 
experience questions matter 
observed differences results process followed different levels specificity sbr study subjects process reusing functionality example applications 
characteristic differences subjects followed low level detailed process step step higher level form process 
advantages disadvantages noted 
example subjects followed low level process augment process necessary implement functionality process find example application subjects able implement functionality 
followers low level process waste time unnecessary activities called process get involved gold new system 
experiments provided evidence process attribute needs tied context model discussed section particular set subjects executing process 
experiment noticed significant interaction specificity subject experience hypothesis pbr study specific procedure provide benefits experienced reviewers providing guidance 
case 
experienced readers exposed relevant concepts tended find specific procedure confusing 
subjects high levels previous experience area adversely affected greater level detail allowed opportunity usual procedures 
subjects middle range experience previously exposed concepts applied industrial projects saw benefit specific procedures 
focused reading techniques meant focused specific technique focus just aspect document require reader responsible entire document 
pbr specific techniques focused reviewing document point view particular user document readers restricted focus responsible conceivable defects 
aim full set techniques provide coverage document 
pbr technique represents particular way viewing document set pbr techniques represent important customers document uncover defects importance 
focusing may may done way aims achieve coverage entire document 
example experiences study sbr different sbr specific techniques focused different ways learning system support reuse 
goal technique achieve coverage aim learn entire system save effort learning just portions promising reuse 
attribute related attribute level specificity procedure procedural techniques focused aspects document greater accuracy 
document notation specific reading techniques discussed tailored document notation 
hand possible imagine processes meant tailored explicitly review process designed number different documents particular document regardless notation 
deciding process meant address specific class document applicable larger set probably attribute decided tailoring process particular 
process model document specific experimenters evaluate process document matches tailoring 
value process attribute match product model discussed section 
attribute highly related specificity procedure described level specificity achieved procedure somewhat dependent amount procedure tailored particular document notation 
goal oriented closer study process models reading techniques section reveal technique tailored specific task defect detection reuse design specific document 
characterizes reading techniques distinguishes 
process goals classify measures effectiveness fig 
easily adapted describe processes fig 

hypothesize distinction analysis construction process goals apply directly processes 
hypothesize analysis tasks differ sufficiently construction tasks differences way may evaluated effectiveness may different guidelines construction 
fig 
mechanism identifying process model attributes 
process attribute related focus procedure 
process goal achieved depends partly portion document procedure focused procedure focused portion document ascertained portion contains information necessary accomplish task 
advantage identifying set attributes helps specialize model object basili building knowledge families experiments fig 

portion hierarchy possible values describing values describing goal software engineering process 
study process capture essential differences similarities related models 
example process descriptions summarize objects study reading technique experiments 
emphasize differences set reading techniques process model attributes dbr 
analyzed focused reading techniques tailored detect defects scr notation requirements documents partial coverage document union meant provide close full coverage 
pbr 
analyzed focused reading techniques defined low level specificity tailored detect defects natural language requirements documents partial coverage document union meant provide close full coverage 
ubr 
analyzed focused reading techniques tailored detect anomalies screen shots user interfaces partial coverage document union meant provide close full coverage 
pbr 
analyzed focused reading techniques defined high level specificity tailored detect defects natural language requirements documents partial coverage document union meant provide close full coverage 
sbr 
analyzed focused reading techniques tailored reuse parts object oriented framework building new system partial coverage object oriented design code 
fully specifying process models way illustrates basic hypotheses evidence accumulated level specificity procedure described difference effects 
similarly helps identify areas hypotheses formulated formally usually indication studies needed set reading studies date noticed analysis tasks dbr pbr ubr pbr lend particularly union partial coverage techniques construction tasks sbr require partial coverage 
current hypothesis analysis tasks typically require entire document checked multiple quality attributes construction tasks aim focus reader attention aspects document suitable task 
studies construction tasks needed say hypothesis serve general guideline merely coincidence 
modeling effectiveness product section discuss process evaluated effectiveness 
necessary precondition discuss process conformance necessary process drawn knowing process followed 
process conformance studies emphasized assumed subjects applying expected process expected way 
subjects malicious concentrate successfully accomplishing see goal means process assigned 
cases behavior subjects affected typical habits techniques familiarity accounted process assigned 
experimenters need worry process conformance placing bounds expected behavior subjects applying process 
basic strategies monitoring execution process order understand amount process conformance reason effects discussed section attempting specify process way users conform process 
strategy successfully experiments desired evaluate particular processes 
way achieving restrict subjects access artifacts necessary executing process earlier experiment processes defined reading stepwise abstraction equivalence partitioning boundary value testing structured testing 
procedures may followed directly fact subject technique particular items needed activity specification source code reading specification executables functional testing restrict subject ability perform process supposed performing 
second alternative process include activities able checked require extra effort user executed outside process ieee transactions software engineering vol 
july august pbr study built evaluation process conformance process 
experiment confident techniques previous experiments 
motivations increasing level detail techniques better assess process conformance 
subjects required create intermediate artifacts techniques collected studied insight process executed 
asked subjects cross defects specific steps technique useful discovery 
course important keep mind process study experiment affect process conformance 
instance interesting give subjects specific process ask record intermediate results process conformance assessed detailed level 
strategy suffers problem may process tedious unpleasant subjects 
practical usefulness technique questioned 
mechanism helping user follow process defined get verbalize process performing 
way doing process performed pairs person guide 
follow original ubr study noticed giving process people perform team reading rules recording results performing process may effective finding anomalies process rigorously performed 
enforcing process conformance best strategy may reflect natural practices 
experimenters undertook study people follow processes determined users rarely follow detailed processes step step 
may internalize follow interpretation process augment process information sources order tailor process situation 
object study gather information process execution realistic conditions may appropriate monitor enforce process conformance sbr study built evaluation process conformance experiment 
previous domain reuse object oriented frameworks taught reading techniques subjects require 
spent lot time effort monitoring subjects 
way gathered lot information techniques useful difficulties experienced processes subjects useful augmenting techniques 
validity measures goal studies process process positive effect intended effect product 
define intended effect measure 
intended effect reduction cost improvement quality 
defined directly metric easy measure 
common problem intended effect fully understood defined sufficiently measured 
experimenters measure indirectly metric felt capture meant effectiveness 
common mistake choose metric reality correlated intended effect assumed 
necessary assess construct validity experiment rigorously analyze experimental metrics really capture attributes interest 
example concern occurred initial study pbr initial pbr experiment measured effectiveness defect detection processes means number faults reviewers discovered 
correct metric 
ultimate aim defect detection repair requirements document eliminate misunderstandings problem potential defects system 
faults may detailed specific dependent reviewer point view provide sufficient insight suited basis repairing requirements 
dealing higher level abstraction errors allow reviewers identify really fundamental misconceptions document repair 
initial analysis pbr study subjects reported errors convey better information correcting document helped focus reviewers important areas document gave better understanding real problems requirements 
modeling context final model suggested gqm goal template model environment factors context procedure applied may affect results 
model necessary address external validity experiment widely extrapolated 
identifying important attributes context model largest challenges empirical software engineering research section just examples context factors effects manner experimental hypotheses explored 
subject experience particularly challenging aspect software engineering research obtaining subjects experimentation 
fields study human behavior empirical software engineering constrained fact relatively small percentage human population requisite skills usefully perform software development processes study available experimentation 
representative results experimental subjects need taken small percentage 
important dimensions describing subjects experience 
experience subjects skills relevant object study match population results generalized 
ideal case experienced software professionals experimental subjects difficult achieve 
subjects borrowed development organization 
cost constraints experimenters find subjects achieve sufficient statistical power testing group differences see discussion statistical power software engineering experiments 
pbr study subjects software developers nasa sel environment estimated cost individual day maximum basili building knowledge families experiments number people able participate experiment subjects 
constraints minimized effect limited experimental subjects designing subject experiment subjects observed multiple times treatments number available data points multiple number available subjects 
address difficulty obtaining professional subjects students software engineering courses 
experiments students suited investigating certain issues require high levels industrial experience learning curve associated training new technology 
universities undergraduates relevant industrial experience 
experience level limited student experiments debug experimental protocols applying treatment expensive experimental subjects 
easy identify relevant skills measure experience way meaningful 
performing pbr subjects asked adopt point view user requirements designer tester user system constructed 
expected subjects previous experience roles important factor affecting effectiveness pbr 
measured subject experience asking years reviewer spent pbr roles designer tester user 
data analysis revealed significant relationship experience number defects reviewers years experience tend find defects reviewers experience 
better way approaching issue subject experience employ mix qualitative quantitative methods 
qualitative methods particular useful identifying subjects feel may important experiences skills affected success process 
methods elicit subject perspectives especially important experimenters correct intuition going subject process applied 
subjects correct knowledge regard intuition concerns tremendous help identifying real issues 
potential measures subject experience collected questionnaires interviews quantitative methods test correlation exist experience measures effectiveness process applied 
example pbr study quantitative analysis showed role experience simply amount experience requirements documents provided important characterization subjects 
subjects applying usual review technique longest amount time hard switch new technique especially familiar type document 

qualitative data information represented words pictures numbers 
qualitative analysis methods designed analyze qualitative data 
quantitative data hand represented numerically discrete finite scale true false 
important characterizing subjects difficult task largely large variations seen human performance 
experienced programmers similar backgrounds greatly vary respect abilities 
expected true students 
past studies measured differences programming performance high ability subjects outperform low ability subjects times 
considering software engineering treatments produce dramatic effects high subject differences easily hide treatment effects result failing obtain statistically significant effects 
context attribute related aspects process 
discussed section appropriate level specificity may related experience users 
focus process may depend user experience novices may effective concentrating different areas document experienced users 
case focusing sbr techniques discussed section 
experimental context important dimension experimental context especially affects subject motivation 
software engineering process studies try assess impact technique real practices necessary subjects perform level representative professional 
ideally experimental setting reflect organizational setting allow see professional benefit activities 
motivate put effort thought activities 
motivation problem subjects asked toy problems unrealistic processes see disconnection experiment professional experience 
context attribute related product model product model artificial context model differs increasingly realistic development environment 
purposes group factors broad heading experimental context problems occur studies performed graded classroom context motivation course grade professional need professional development 
ideal situation training session project subjects need learn build skills process project undertake 
normal circumstances classroom context process conformance expected part subjects making results representative real development environments 
especially problematic cases new technologies involve steep learning curve subjects classroom experiments typically motivation overcome learning curve experiment unable measure benefits new technology 

terminology classroom context troublesome implies graded classroom experiments studies inexperienced student subjects synonymous 
case professionals students university courses 
ieee transactions software engineering vol 
july august strategy improving classroom experiments grade subjects process conformance results 
introduces problems feel problems identified overcome order yield representative results 
unfortunately reliable way measure process conformance results account 
subjects graded situation disregard experimental protocols think hinder chances evaluated highly 
pbr study anticipated investigating type technique reviewing requirements pbr ad hoc affected number false positives items reported reviewer defects reviewers reported 
important question study professional context false positives investigated rejected attempt fix wasn incorrect 
large numbers false positives imply large amounts wasted effort 
determined post hoc interviews subjects anticipated grade assignment number correct defects 
order maximize number reported questionable defects ordinarily included 
practice increased number false positives assume count false positives experiment representative normal patterns particular review techniques 
advantage identifying set attributes helps specialize context model understand limits experimental results 
example table summarizes pertinent information context models number different experiments evaluated dbr 
information context models helps suggest new hypotheses important environmental factors dbr studies independently replicated far different contexts 
table summarizes environmental variables reports study findings supported research hypothesis dbr table status replications dbr studies effective ad hoc reading techniques 
replications software practitioners undergraduates graduate students obtained different results 
studies put allow hypothesize user experience plays role 
indications dbr sophisticated successfully applied undergraduate students dbr requires ability model aspects system reviewed 
replication practitioners allows hypothesize practitioners previously discussed section may revert back techniques familiar 
conditions appear hold graduate students satisfy skill prerequisites reading technique biased daily working practices 
consequences experimental designs threats validity previous sections looked models empirical study important components 
section discuss briefly experimental designs models fit 
meant primer run experimental studies 
interested readers find helpful guidelines task specifically software engineering domain 
section discuss impact process product context models kinds designs feasible useful software engineering experimentation 
experimental design discussed section experiments software engineering concerned assessing effectiveness useful process notation tool software development 
lack analytical models describe people software processes assessing object study absolute terms feasible 
field simply lacks objective knowledge best metrics measure range values basili building knowledge families experiments fig 

basili selby experimental design 
metrics considered kind tradeoffs necessary maximize particular metric possibly expense 
alternative adopted software engineering experiments assess effectiveness software development technique comparison similar 
cases comparison technique needs representative currently accepted practices basis comparison understood 
approach useful typically suffers lack control group 
experiments usually rely volunteers provide benefit subjects organization supports participation 
cases subjects students class experimenters responsibility provide educational benefit students part participation 
usually benefit provided terms training new approach 
new approach experimental treatment compared usual approach corresponding absence treatment 
subjects get participation experiment hard justify having group learns new asked just perform usual 
pbr experiment professional software engineers expecting learn new way review requirements documents 
unrealistic expect control group subjects learned new comparison purposes 
ideal situation experimental design similar seen basili selby experiment illustrated fig 

values controlled independent variable experimental treatments corresponding processes compared code reading functional testing structural testing experienced subjects 
subjects design mitigates lack control group subject effectively serves control improvement subject measured baseline previous performance 
reason variability subjects skills discussed section affect results 
subject provides multiple data points best subjects 
order subjects encounter treatments varied learning curve subjects get savvy applying processes experiment regardless type process applied processes look effective 
unfortunately clean design possible 
design basili selby experiment process examined required different supporting artifacts executed 
experimenters control procedures applied availability supporting documents 
cases certain attributes process model may prevent approach 
due level specificity procedure section cases learning process impact execution processes interaction explicitly controlled experimenters pbr study wanted evaluate procedurally defined technique pbr 
afraid teaching subjects new detailed procedure bias performance procedural comparison technique 
feel possible give subjects guidance ask forget freedom techniques 
especially comparison technique procedural considered ideas new technique find way application comparison technique 
specific procedure pbr provides instructions actions carried distort procedural techniques reviewers free find way accomplish required task 
ruled subjects continued earlier directions different technique assigned inspection order conform increasing scale specificity procedure 
teams chance apply procedural techniques learning procedural technique pbr 
prevents procedural techniques incorporating guidance procedural ones fig 

potential problem pbr design assumes subjects share knowledge documents 
example team group reviews document second day team members receive information document team reviewed day presumably perform effectively technique day normally 
threat assessed ieee transactions software engineering vol 
july august fig 

experimental design pbr experiment 
fig 

experimental design pbr experiment 
subject experience section primarily concern classroom experiments discussed section motivation subjects case somewhat different software professionals especially graded participation 
address problem unique documents treatment experiment see fig 
shows design pbr study 
way subjects learn information document encountering experiment results biased way 
avoid effects procedural techniques subjects review document ad hoc technique day pbr technique second day 
resulting threats internal validity previous sections discussed see real constraints imposed nature software engineering discipline empirical 
section discussed useful feasible responses part experimental design constraints 
take view foreseeable constraints live 
course changes constraints cause experimental designs price 
designs section associated threats internal validity alternative explanations differences observed process study 
submit threats result sloppy experimental design constraints unique study human performance general software engineering particular 
best strategy plan related sets studies taken increase confidence object study threats validity responsible changes observed 
basili selby design fig 
designs serious threats internal validity unfortunately hard achieve practice 
introduce variations design tend obtain realistically useful designs cost introducing additional threats 
example pbr design fig 
solves practical problem combining execution processes varying levels specificity experiment 
introduces threat effect due time completely confounded effect due technique 
learning effect especially concern subject experience low reviewers get adept finding defects requirements matter technique better normal second day resulting overestimating effect due pbr 
alternately boredom effect reviewers bored tired experiment time expend effort second day resulting underestimating effect 
point hypotheses number analogous ones dismissed exist potential explanations effect seen 
threats avoided better measured simply including control group uses pbr days 
constraints subject pool volunteer student subjects expect gain benefit experiment relatively limited time accept feasible alternative 
argue existence explanations mitigated steps 
existence learning curve increases reviewer effectiveness time mitigated providing training sessions actual treatments experiment 
way subjects chance overcome learning curve training sessions actual experiment 
aspects experiment manipulated attempt minimize learning effect pbr study subjects received feedback regarding actual defect detection success experiment presumably difficult discover aspects performance fact improving detection rate 
furthermore documents dissimilar little learned document transferred second 
similarly potential effects time boredom mitigated scheduling experiment give subjects day days experiment 
helps prevent subjects feeling overwhelmed go treatments consecutively helps avoid pressures missing consecutive days 
design shown fig 
viewed difficult case 
design effects due time effects due particular document confounded effect due review technique effect primary interest 
done mitigate damage caused effects 
primary concern documents historical baseline exists objective basis measuring relative performance techniques specific document 
basili building knowledge families experiments fig 

experimental design dbr reading technique varying subjects 
subject design deals issues shown fig 

represents design dbr study 
advantage allows isolate potential learning effects control group problems entire group get training new process requires larger pool subjects measure effects procedural process procedural 
replicating experiments raised reasons families replicated experiments necessary 
section discusses replications detail look practical considerations result 
primary strategy supporting replications practice creation lab packages collect information experiment experimental design artifacts processes experiment methods experimental analysis motivation key design decisions 
hope existence packages simplify process replicating experiment encourage replications discipline 
replications carried manner provided growing body knowledge reading techniques 
discuss replications detail 
types replications consider replications may undertaken various reasons useful enumerate various reasons requirements lab package 
view types replications need supported grouped major categories replications vary research hypothesis replications type vary dependent independent variables original experiment 
strict replications replications duplicate accurately possible original experiment 
replications necessary increase confidence validity experiment 
demonstrate results original experiment repeatable reported accurately original experimenters 
replications vary manner experiment run 
studies seek increase confidence experimental results testing hypotheses previous experiments done altering details experiment certain internal threats validity addressed 
due relatively small number subjects time constraints involved pbr study simulated number defects teams composed member different pbr techniques 
replication undertaken varied experimental design assigning team members specific teams requiring meet agree common list defects 
simulated real teams experiments measure thing replication allowed comparison results methods provide confidence statistical simulation 
attempt compensate threats internal validity may lead types changes 
example process may modified researchers assess amount process conformance subjects 
aim change may address internal validity new process evaluated order understand unanticipated effects process effectiveness resulted 
replication fall second major category discussed 
replications vary research hypotheses replications type vary attributes process product context models remain level specificity original experiment 
replications vary variables intrinsic object study independent variables 
replications investigate aspects process important systematically varying intrinsic properties process examining results 
version requirements review techniques pbr study attempted close possible version original experiment exception level detail 
pbr techniques specific attempted constrain subjects proven techniques creating models system allowing rely techniques 
comparison pbr results original experiment terms defect detection effectiveness reviewer satisfaction technique allows understand importance level detail reading techniques 
type experiment requires process supplied sufficient detail changes 
implies original experimenters provide rationales design decisions finished product 
replications vary variables intrinsic focus evaluation dependent variables 
replications type may vary ways effectiveness measured order understand dimensions task process results gain 
example replication choose effectiveness measure listed fig 
investigating defect detection process beneficial finding errors faults discussed section 
replications vary context variables environment solution evaluated 
studies ieee transactions software engineering vol 
july august identify potentially important environmental factors affect results process investigation help understand external validity 
example replications may run process product models original experiment professionals students see table discussion section see results obtained 
replications extend theory replications help determine limits effectiveness process making large changes process product context models see basic principles hold 
discussed replications previous category replacing value variable document process applied fig 
equally specific value scr requirements english language requirements 
replications category thought replacing attribute process product context model value higher level abstraction higher level hierarchy 
pbr dbr studies somewhat similar results cases family prescriptive analysis techniques particular focus effective prescriptive techniques finding defects requirements 
similarity results gave confidence effectiveness focused reading techniques finding defects requirements showed positive effects reading techniques limited requirements formal notation dbr applied natural language documents pbr 
implications lab package design software engineering research movement reuse physical artifacts processes experiments 
useful 
cost experiment greatly increased preparation multiple artifacts necessary 
creating artifacts representative real development projects difficult time consuming 
reusing artifacts reduce time cost needed experimentation 
significant benefit reuse allows opportunity build knowledge actual particular nontrivial artifacts practice fine tune artifacts learned 
replications experimentation general facilitated repositories reusable artifacts different types requirements history reuse understood 
model repositories repository system architectures relevant attributes design repository known described 
step goal construction webbased laboratory packages 
basic level packages allow independent experimenter download 
brooks distinguishes internal replications experiments repeated researchers external replications experiments repeated researchers independent original experimenters 
lab packages specifically designed support encourage external replications valuable internal replications 
experimental materials reuse better understanding 
way packages support replications type strict replications defined section require processes artifacts original experiment available independent researchers 
web lab packages designed support sophisticated types replications 
example packages assist experimenters understanding addressing threats validity order support replications type replications vary manner experiment run defined section vary aspects experimental setup 
discussed section constraints imposed setting software engineering research conducted mean possible rule single threat validity 
choosing bad set threats goal experiment necessary 
lab packages need acknowledge fact analysis constraints threats validity explicit studies may different experimental designs may threats validity rule threats 
replications vary research hypotheses defined section seek vary detailed hypotheses additional requirements lab package support 
example order experimenters effectively vary attributes object study original process model explained sufficient detail researchers draw key attributes 
unreasonable expect original experimenters determine key attributes priori lab packages provide rationales key experimental context decisions determine feasible points variation interest 
similarly lab packages specify product effectiveness context models sufficient detail feasible changes identified hypotheses effects results 
sections overview attributes importance undoubtedly exist 
order address replications extend theory defined section build body knowledge software engineering theories researchers know experiments run offer related results 
lab packages related experiments linked order collect different experiments address different areas problem space contribute evidence relevant basic theories 
web ideal medium packages web pages updated continually pointing new related lab packages available 
hoped lab packages living documents changed updated reflect current understanding experiments describe 
lab packages preferred method facilitating abstraction results experiences series designed studies 
interested readers referred existing examples lab packages 
basili building knowledge families experiments collecting detailed information results specific experiments summarize knowledge specific processes 
record design analysis methods may suggest new ones 
additionally linking related studies help experimenters understand factors impact effectiveness 
experimental community group researchers industry academia organized purpose facilitating replication experiments 
group called isern international software engineering research network includes members north america europe asia australia 
isern members publish common technical reports exchange visitors organize annual meetings share experiences software engineering experimentation 
begun replicating experiments better understand success factors inspection reading 
empirical software engineering journal helped build experimental community providing forum publishing descriptions empirical studies replications 
especially noteworthy aspect journal open publishing replicated studies rigorously planned analyzed yield unexpected results confirm original study 
traditionally difficult publish unsuccessful studies software engineering literature knowledge available community build complete unbiased body knowledge concerning software technologies 
noted community undertaken families replications successful kind knowledge building 
example family dbr studies summarized table investigated dbr techniques variety contexts variety types subjects 
second example series empirical studies pbr 
original study university maryland replicated university kaiserslautern germany study different design directly study effects pbr reviewer teams 
second replication performed university trondheim norway similar design altered pbr techniques order study process conformance issues 
experiment see expected effects ideas raised influential redesign pbr techniques maryland order address process conformance 
version techniques basis pbr experiment replicated university bari italy drexel university usa universidade de paulo brazil lund university sweden 
contention interesting relevant hypotheses identified investigated effectively empirical organized form families related 
information available url informatik uni kl de isern isern html 
experiments 
raised reasons families necessary investigate effects alternative values important attributes experimental models sections vary strategy detailed hypotheses investigated section certain threats validity arise realistically designed experiments section 
discussion leads propose necessary comprehensive bodies knowledge built areas software engineering 
hypotheses interest software engineering community written context allow defined experiment 
specified models process effectiveness context key attributes changed studies build knowledge important factors 
sufficient amount information experiment replicated built varying experimental design necessary address threats validity 
community researchers understand experimentation need replication willing collaborate replicate 
respect basili reiter study introduced section note satisfied criteria failed respect criteria 
suggested authors researchers vary design manipulate processes criteria evaluation analysis data varied study 
community researchers willing analyze hypotheses suggestions replication 
contrast set experiments reading discussed working group annual meeting isern example body knowledge built independent researchers working different parts problem exposing different plausible rival hypotheses 
set experiments demonstrates results experiments combined build knowledge software processes 
techniques procedurally defined document notation specific goal driven effectively designed empirically validated 
procedural approach software engineering task effective procedural certain conditions depending experience discussed section 
procedural approach reading specific goals find defects related goals reading tailored environment 
shown experimental constraints software engineering research ieee transactions software engineering vol 
july august difficult impossible design perfect single study 
order rule threats validity realistic rely parsimony concept frustrated trying completely remove threats 
appeal parsimony assumption evidence experimental effect credible effect observed numerous independent experiments different threats validity 
second empirical research collaborative activity huge number problems variables issues consider 
complexity faced extensive brainstorming carefully designing complementary studies alter values key attributes important models reciprocal verification 
discussion experimental community needed address issues constitutes acceptable level confidence hypotheses addressed community 
running carefully designed replications threats validity specific experiments addressed evidence accumulated hypotheses 
unaware useful specific guidelines concern amount evidence accumulated confidently drawn set related experiments spite existence specific threats 
discussion empirical software engineering community constitutes sufficient body credible knowledge benefit 
building body knowledge families experiments benefits software engineering researcher allows results experiments combined order build knowledge software processes 
increases effectiveness individual experiments contribute answering general hypotheses 
offers framework building relevant practical software engineering knowledge organized gqm goal template framework literature 
provides way develop integrate laboratory manuals facilitate encourage types replications necessary expand knowledge basic principles 
helps generate community experimenters understand value carry needed replications 
ability carry families replications benefits software engineering practitioner offers relevant practical software engineering knowledge fully specifying process product context models allows better understanding environment experimental results hold 
provides better basis making judgments selecting process practitioners match development context ones processes evaluated 
shows importance ability tailor best practices shows software processes altered meaningful manipulation key attributes 
provides support defining documenting processes running related experiments assists determining important process attributes 
allows organizations integrate experiences making explicit ways experiences differ relevant process product context models similar allowing abstraction basic principles information 
acknowledgments supported national science foundation 
ccr nasa 
ncc umiacs 
authors michael lawrence pfleeger anonymous referees valuable comments earlier drafts 
baker chief programmer team management production programming ibm systems vol 

basili experimental paradigm software engineering proc 
int workshop experimental software eng 
issues critical assessment directions dagstuhl germany 
appeared lecture notes computer science springer verlag 
basili evolving packaging reading technologies systems software vol 
pp 
july 
basili studies reading techniques proc 
st ann 
software eng 
workshop pp 
sel goddard space flight center md dec 
basili green zelkowitz empirical investigation perspective reading empirical software eng 
vol 

basili empirical study syntactic metric family ieee trans 
software eng vol 
pp 
nov 
basili reiter controlled experiment quantitatively comparing software development approaches ieee trans 
software eng vol 
pp 
may 
basili rombach tame project improvement oriented software environments ieee trans 
software eng vol 
june 
basili selby comparing effectiveness software testing strategies ieee trans 
software eng vol 
pp 
dec 
basili selby experimentation software engineering ieee trans 
software eng vol 
pp 
july 
basili investigating maintenance processes framework environment proc 
int conf 
software maintenance pp 
bethesda md 
briand el application measurement theory software engineering empirical software eng 
vol 
pp 

brooks studying programmer behavior experimentally problems proper methodology comm 
acm vol 
pp 

brooks daly miller roper wood replication experimental results software engineering technical report rr dept computer science univ strathclyde 
basili building knowledge families experiments campbell stanley experimental quasi experimental designs research 
boston houghton mifflin 
empirical investigation perspective reading replicated experiment technical report isern int software eng 
research network 
composable systems group model problems 
www cs cmu edu compose html cook campbell quasi experimentation design analysis issues field settings 
boston houghton mifflin 
fenton lawrence pfleeger glass science substance challenge software engineers ieee software pp 
july 
fenton lawrence pfleeger software metrics rigorous practical approach second ed london int thomson computer press 
replicated experiment assess requirements inspections techniques empirical software eng 
vol 
pp 

definitions methodologies methods qualitative family research qualitative methods family research daly handel eds sage publications 
reinventing methodology comm 
acm vol 
pp 

ieee software engineering standards ieee cs press 
judd smith research methods social relations sixth ed orlando harcourt brace jovanovich 
empirical evaluation software maintenance technologies empirical software eng 
vol 
pp 

report results parallel project meeting reading techniques oct 
isern index htm basili experimenting error abstraction requirements documents proc 
fifth int symp 
software metrics pp 
bethesda md 
lee scientific methodology mis case studies mis quarterly pp 
mar 
rombach repeatable software engineering experiments comparing defect detection techniques empirical software eng 
vol 
pp 

miller daly wood roper brooks statistical power subcomponents missing misunderstood concepts software engineering empirical research information software technology vol 
pp 

miller wood roper experiences scenarios checklists empirical software eng 
vol 
pp 

montgomery design analysis experiments 
fourth ed john wiley sons 
popper logic scientific discovery 
new york harper 
porter votta comparing detection methods software requirements inspections replicated experiment professional subjects empirical software eng 
vol 
pp 

porter votta basili comparing detection methods software requirements inspections replicated experiment ieee trans 
software eng vol 
pp 
june 
karlsson extended replication experiment assessing methods software requirements inspections empirical software engineering vol 
pp 

basili communication organization empirical study discussion inspection meetings ieee trans 
software eng vol 
june 
psychological study programming acm computing surveys vol 
pp 

developing techniques software documents series empirical studies phd thesis univ maryland college park dec 
reading techniques object oriented frameworks www cs umd edu projects manual sbr package manual html lab package empirical investigation perspective reading www cs umd edu projects manual pbr package manual html 
basili investigating reading techniques framework learning technical report cs tr dept computer science umiacs tr inst 
advanced computer studies isern int software eng 
research network may 
rd empirical study process conformance proc 
st ann 
software eng 
workshop pp 
sel goddard space flight center md dec 
tichy lukowicz prechelt heinz experimental evaluation computer science quantitative study systems software vol 
pp 

eds experimentation software engineering technical report dept comm 
systems lund inst 
technology lund univ 
zelkowitz wallace experimental models validating technology computer pp 
may 
zhang basili shneiderman empirical study perspective usability inspection human factors ergonomics soc 
ann 
meeting chicago oct 
victor basili professor computer science university maryland college park executive director fraunhofer center maryland founders principals software engineering laboratory sel nasa gsfc 
works measuring evaluating improving software development process product 
recipient nasa group achievement award nasa gsfc productivity improvement quality enhancement award 
received award outstanding achievement mathematics computer science washington academy sciences 
dr basili authored journal refereed conference papers served chief ieee transactions software engineering program chair general chair icse icse respectively 
editor chief international journal empirical software engineering kluwer academic 
fellow ieee acm 
forrest received phd degree university maryland college park 
dr currently research associate experimental software engineering group university maryland 
conducted empirical research software engineering issues requirements reviews object oriented reuse 
worked industry developing software tools companies performing research biology chemistry materials science 
current research interests include empirical software engineering software reading techniques software inspections process improvement 
received degree computer science university bari italy presently assistant professor computer science 
previously worked experimental software engineering group university maryland research associate 
research interests include experimental software engineering software measurement software inspection framework development software evolution 
member ieee computer society acm 
