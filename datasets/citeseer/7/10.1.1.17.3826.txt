transparent migration java mobile agents capturing state java programs stefan department computer science darmstadt university technology 
darmstadt germany email informatik tu darmstadt de 
describe way save restore state running java program 
achieve language level modifying java virtual machine instrumenting programmer original code preprocessor 
automatically inserted code saves runtime information program requests state saving program runtime state restart 
current preprocessor prototype mobile agent scenario offer transparent agent migration java mobile agents generally save reestablish execution state java program 
mobile agents programs move host 
programs initiate transfer executing special instruction code 
migrate agent state information agent program saved shipped new destination 
target destination agent program restarted 
ideally moved agent program restarted exactly state code position migration 
migration exhibits property called transparent characterized strong migration 
program prepare migration explicitly storing state variables started new location programmer provide explicit code read reestablish stored state migration called non transparent characterized weak migration 
mechanisms require capturing state information saved state restart 
capturing state running program known issue different areas computer science 
example distributed operating systems provide load balancing functionality 
scenario state program execution process state captured sent host low load 
receiving host creates local process exactly state process state captured 
state capturing provide fault tolerance persistence distributed system 
state programs processes captured regular intervals written stable secondary storage 
system restarts crash regular system shutdown saved information reestablish processes continue operation 
application scenario migration mobile agents host 
differs process migration traditional purposes load balancing sense migration initiated program external control instance 
developed mechanism designed mobile agent scenario java program save load runtime state 
capture state program know exactly comprises state 
state divided different parts code program data program located variables runtime information consisting program counter call stack items 
problem capturing state program required information located different places program variables accessible program language level contrast runtime information located lower hierarchy levels program counter located process executing program 
state capturing mechanism collect information consequently way extract information system 
capturing state java java object oriented programming language 
state java program comprises state objects exist time capturing takes place method call stack resulting method invocations program execution program counter 
java interpreted language requires interpreter java virtual machine vm short execute java programs method call stack program counter information located interpreter process executing interpreter 
sufficient access information inside vm capture state java program 
currently java vm supports capturing object states known serialization support capturing method call stack includes local variable values methods capturing program counter 
transparent migration processes mobile agents possible java far 
systems provide required state capturing java programs 
modified java vm 
contrast aim solution require modification vm underlying component 
possible capture state java program language level 
mobile agent scenario requires state capturing process initiated program language level lower hierarchy level outside program 
capture state java program developed preprocessor instruments user java code adding code actual state capturing state restart target machine 
instrumentation parsing original program code java parser generated javacc tool java grammar 
preprocessor uses modifies parse tree new code generated 
additional code introduces time space penalties see section instrument code necessary sure additional code executed necessary state capturing occurs 
capturing state java object serialization offers easy inefficiently implemented way dump state java objects exist program 
state consists values variables class instance variables object represent object internal state information type object 
object serialization large part information language level information required reestablish program state captured 
missing information located virtual machine method call stack values method local variables current value program counter 
capture missing state information program preprocessor inserts code saves values local variables methods program counter related information 
consider program defines local variables method class uses state saving save value new variables 
class definition variables 
public void int real int hashtable 

vector new vector 


int 

fig 

program state saving things keep mind local variables may defined method code 
defined block variable visible block vector example 
program requests state saving variables saved visible current program position variables stack 
second inserted code saves values local variables executed case program initiates state capturing process done calling special method example programmer 
system provides special method extension java language 
efficiency reasons instrument methods initiate state capturing process called 
happen method call chain detect methods initiate state capturing process indirectly calling methods initiate process 
fixed point iteration starting method initiates state capturing 
current state located method call stack vm able traverse stack execute state saving code preprocessor inserted method possibly stack state saving 
addition code program executed state saving process initiated 
conform requirements java error mechanism 
similar java exceptions errors thrown successively caught 
thrown normal flow execution stops immediately 
error caught catch clause try statement 
caught error propagated method call stack 
automatically done exception error handling mechanism java vm 
behavior traverse method call stack save local variables methods currently stack method initiates state saving process throws error 
preprocessor inserts encapsulating try catch statement method initiate state saving 
code saves local variables method located catch clause inserted try catch statement 
executing code error re thrown propagating stack calling method turn catches error leading execution variable saving code method 
done stack completely 
way state saving code executed state saving requested 
code class shown transformed code depicted 
error exception realize state saving advantage errors don declared method signature 
save local variable values special save object inserted preprocessor top level class java program 
addition methods part state saving process passed special object 
relevant method signatures instrumented 
furthermore provide class code special method initiates state saving process 
way method called local method 
unfortunately leads problems inheritance tree methods part interface class implement 
far solution problem generate new interface incorporating instrumented method signatures 
currently mobile agent scenario method called go 
presentation general case generic name 
class variables saved normal serialization 
public void int real int hashtable 
catch migration save save save save save throw mig 
vector new vector 
catch migration save save save save save save throw mig 

int 
catch migration save save save save save save throw mig 
fig 

transformed code class investigating solution need instrument method signature order avoid overhead 
saving deconstructing stack state information held special save object 
object part top level program class value saved normal object serialization mechanism 
final step state saving procedure initiate serialization program current object graph 
done catch clause top level object inserted preprocessor carries save object 
depending purpose state saving mechanism captured state serialization information written file case checkpointing network socket case state transfer mobile agents applications 
state capturing state running java program half way possible construct process program state saved state information equivalent state process program state saved 
program point view flow control continued directly statement initiated state saving process 
java vm provides means load saved state re establishment 
task requires rebuilding program object graph objects states rebuilding method call stack values local variables method rebuilt method stack 
rebuilding object graph object states 
program state automatically reconstructed serialization information provided normal process java offers 
process results object graph exhibits connectivity object state properties object graph represented program serialization time 
missing method call stack automatically rebuild 
rebuilding method call stack 
save object keeps relevant information part program object graph information fill local method variables correct values recreated method call stack 
just call relevant methods order stack state capturing took place 
prevent re execution executed method code skip code parts method executed state capturing took place 
call method call stack state saving 
ensure introduce code regions artificial program counter 
artificial program counter indicates modified method code statements executed skipped method call stack rebuilt 
necessary modify artificial program counter instruction successive statements initiate state saving treated compound region artificial program counter updated compound region 
region boundaries introduced methods may lead state saving 
method forms region encapsulates state saving code 
skip executed code regions region guarded statement checks artificial program counter indicates specific region entered skipped 
methods initiate state saving process may located control flow statements may possibly nested introduce code regions control flow statement 
code regions nested control flow statements formed applying code region modifications outer statements inner statements 
code regions control flow statements introduce problem control flow decision decided state saving evaluating condition statement simply decided restart just re executing statement re evaluating condition 
consider example loop method called initiate state saving purpose checkpointing 
assume initiated state saving 
restart loop continue returning statement 
means skip initialization part evaluation condition iterations skip statement statement third iteration 
assume state saving initiated iteration condition 
evaluating condition true init statement statement method initiate state saving res statement statement fig 

transforming loops loop body executed set immediately 
possible restore value immediately loop value saved captured state yields 
result skipping pending execution statement statement restart 
loop condition saved generated variable restored restart re evaluation 
modification applies loops accordingly 
loops transformed loops actual modification takes place 
setting values local variables 
program initiates state saving local variables method method call stack saved save object 
restart method stack rebuilt described 
set local method variables correct values values saved save object 
achieve insert declaration code variable sets correct value 
variable possibilities get value original initial value provided programmer case normal program start value stored save object case program restart 
actual value assignment done statement variables initialized irrelevant default value satisfy java compiler 
variable declarations possible java code extra code inserted position variable declaration leads correct variable visibility 
code shows transformation 
threads java possible transfer state running threads means object serialization 
java program executed thread java vm converter able save state single thread 
save state program threads simply new save object thread stores method stack information associated thread 
restart threads existed time state saving newly created read runtime information save object 
saving runtime information thread simple problems require attention real int integer new integer transformed init real restart restore init int restart restore init integer null restart integer restore new integer fig 

transformation local variables 
threads run concurrently predict time thread requests state saving initiate state saving state threads moment 
point view threads state saving occur instruction 
prepared save thread state instruction 
lead insertion state saving code instruction clearly inefficient 
state saving occurs rarely usually certain amount done program 
need help programmer knowledge program statements executed prior state saving 
provide programmer new method called called indicates calling thread ready save state 
way state saving occurs running threads called new method initiated state saving 
seen barrier synchronization running threads 
new method checks thread requested state saving 
returns immediately blocks current thread running threads called synchronization method 
accordingly method requests state saving blocks calling thread running threads allow state saving call new method 
discussion provide mechanism possible collect reestablish state running program 
application area mobile agents allows strong migration 
mechanical transformation code written transparent migration code written non transparent migration 
way allow programmer program code assumes transparent migration system provides non transparent migration 
course transparent migration necessity possible provide program functionality explicitly coding program specific migration mechanism top non transparent system 
convenient automatic transparent mechanism 
question cost terms run time penalties additional code mechanism 
programmer decide willing pay cost mechanism order design code restart program explicitly 
opinion preprocessor offers comfort writing code transparent migration reasonable cost 
limitations full transparency converter targeted mobile agent scenario general aspects concerning full transparency considered moving running program environment environment usually differ 
contrast scenarios saved program restarted machine checkpointing moving saved state different machine restarting inherent mobile agent scenario 
changing environment saving restarting introduces additional difficulties providing fully transparent migration 
aspect problem local environment file handles 
general hiding differences environments program difficult hard achieve transparent migration considered expensive 
files require distributed system layer allows open file disconnect temporarily file reconnect open file time place 
possible appropriate filesystems cf 
nfs corba basically done local system resources 
clearly scope prototype system 
offer reasonable cost transparent migration flow control starts right statement initiated migration state migrated program old program environment 
means require programmer aware environment problems 
furthermore require tags variables carry local transient code local resource accesses react errors result old resource handles new handles program point view represent resource unexpected state 
limitations language level instrumentation preprocessor instruments code mechanism requires methods initiate state saving instrumented 
causes problem program libraries 
normally libraries come source code 
instrument library code 
cases problem calls initiate state saving 
library call results callback program method initiate state saving uninstrumented library code prevent correct state saving restoring 
require callback methods initiate state saving directly indirectly method call 
real limitation callback method raise flag indicates initiate state saving method 
course requires second thread execution 
problem arises dynamic loading code runtime class forname 
possible know convert time code loaded runtime current prototype handle case 
overhead instrumenting inserting code introduces time space overheads 
add code program file size space penalty code blown 
run time memory space penalty store local variables methods 
time method stack maximum required memory size grow 
time penalty compile time consist runtime preprocessor instrument original code time compiler needs compile additional code 
time penalty runtime divided additional runtime normal program execution time needed collect program state state saving process initiated time needed reestablish program state normal program execution continues 
additional code executed runtime consists mainly code parts organize re establishment control flow contrast code re establishment 
variable initialization statement evaluated checks program running restart migration program start 
code region guarded statement checks guarded code segment skipped program state 
addition artificial program counter modified code region 
code responsible saving program state executed program runs normal mode 
overheads depend code state saving method called methods call method initiates state saving local variables saved 
instrument methods stack saving state instrumentation overhead small possible 
preliminary measurements overhead instrumentation normal program execution shows results tested code orig instr overhead loops factorial ms ms loops factorial io ms ms loops encapsulated factorial ms ms loops encapsulated factorial io ms ms program initiate state saving avoid measuring overhead resulting saving program state 
tests show overhead resulting call approximately percent 
measured bytecode blow factor instrumentation original instrumented blow factor byte byte byte byte byte byte byte byte note preliminary tests instructions original code instrumented case normal agent code 
expect blow factor realistic agent code smaller 
compare instrumented code code written non transparent migration providing functionality 
related knowledge providing transparent migration save restart possibility java done projects providing language level modifying java vm done project 
concerning transparent agent migration mention telescript interpreted object oriented programming language designed mobile agents general magic 
design telescript tailored especially mobile agents language lot agent specific features object ownership read object including transparent migration agents 
transparent migration implemented inside telescript interpreter called engine state saving provide migration multiple agent threads called processes 
unfortunately general magic stopped development telescript 
concerning state saving programs processes general systems state saving mechanisms provide example transparent process migration persistence 
systems especially designed task state saving mechanisms coded operating system interpreter runtime system order provide fast efficient access state information process 
approaches differ approach fact full control implementation underlying system language interpreter operating system 
contrast aim modifying java interpreter 
currently preprocessor limitations eliminate near 
interesting extension possibility transform byte code program reflection classes java offers parts transformation runtime 
plan study feasibility ideas 
summary way allow java programs save state way program restarted exactly state exactly code position 
achieved code instrumentation java object serialization mechanism 
code instrumentation java programs done preprocessor analyzes original program adds code saves current runtime state possible reestablish state restart 
instrumentation supports state saving presence multiple program threads case cooperation programmer required special method indicate thread ready save state 
current preprocessor prototype wasp project allow transparent migration mobile agents written java 

baumann rothermel mole concepts mobile agent system appear www journal special issue applications techniques web agents 
douglis ousterhout transparent process migration design alternatives sprite implementation software practice experience spe volume number august pp 
integrate mobile agents web servers proceedings workshop collaborative agents distributed web applications boston ma june pp 
gray transportable agent system proc 
cikm workshop intelligent information agents 
java compiler compiler www com javacc 
mira da silva mobility persistence chapter mobile object systems 
lncs springer verlag pp 
architecture ara platform mobile agents rothermel popescu 
eds mobile agents proc 
ma springer verlag berlin april lncs pp 
ranganathan acharya sharma saltz network aware mobile programs proceedings usenix anaheim ca 
smith survey process migration mechanisms operating system review volume number july pp 
sun microsystems object serialization specification jdk online documentation docs guide serialization spec 
white telescript technology foundation electronic marketplace whitepaper general magic sunnyvale ca usa 
