symbolic localization reduction reconstruction layering backtracking sharon daniel geist anna ibm haifa research lab haifa israel 
localization reduction abstraction refinement scheme model checking introduced kurshan means tackling state explosion 
completely automatic despite done related scheme suffers computational complexity 
algorithmic improvements localization reduction enabled overcome problems 
new symbolic algorithm path reconstruction including incremental refinement backtracking 
implemented improvements compared previous large number industrial examples 
cases improvement dramatic 
improvements able verify circuits previously able address 
directions contemporary research tackling state explosion problem quite diversified 
structural model reductions performed various optimizations published bounded model checking gaining momentum 
formal verification activity somewhat shifted verification falsification popularly called bug hunting 
concentrates method called localization reduction iterative abstraction refinement 
strength method verification complimentary methods bounded model checking partial search main strength falsification 
localization reduction counterexample guided refinement introduced kurshan 
localization reduction iterative technique starts abstraction model verification tries verify specification abstraction 
counterexample reconstruction process executed determine valid 
counterexample bogus spurious model refined eliminate possibility counterexample verification iteration 
details described section 
note localization technique leaves variable unchanged replaces non deterministic abstraction 
similar approach described sangiovanni vincentelli 
refinement technique proposed lind nelson andersen 
approximation order handle ctl 
approximation techniques enable avoid entire model refinement step guaranteeing completeness 
abstraction refinement techniques counterexamples refine abstraction 
technique proposed govindaraju dill uses approximation techniques counterexamples verify specification 
refinement technique different randomly chooses concrete state corresponding spurious state counter example tries construct real counterexample starting image state transition relation 
furthermore limited handling safety properties counterexamples 
general abstraction method counterexample guided refinement proposed clarke 
wang reported atpg solver reconstruction 
clarke reported similar grasp sat solver perform reconstruction 
gupta clarke spectral analysis perform refinement 
algorithms reported implemented bdds implemented conjunction sat atpg implementations 
steps abstraction refinement process described different described clarke 
implementation methods described clarke resulted part state explosion attempted current industrial examples 
improved algorithms described clarke result achieved dramatic improvements cases real industrial examples 
improvements described section 
improvements path reconstruction changed way refinement done 
localization reduction effective property passes seen results section may concentration refinement process appropriate 
refinement guided counterexample reconstruction phase calculates information crucial refinement phase 
improving reconstruction improves refinement 
implemented changes localization reduction designs 
new algorithms enabled verify circuits handle previously cases improvement dramatic 
rest organized follows 
section describes localization reduction detail 
section defines notation 
section describes algorithms 
section details experimental results 
conclude section suggestions 
overview localization reduction process process localization reduction depicted 
model actl formula model checking problem large model checker handle localization reduction method works follows heuristic process executed order obtain model simulation relation 
model checking problem submitted model checker 
note may contain behavior structure description simpler model checker able resolve problem reaching state explosion 
resolution may result pass fail 
case pass true process terminate implies 
case fail counter example path generated valid may corresponding execution path case necessary validate corresponding path process called reconstruction 
path successfully reconstructed process terminates 
reconstruction possible considered spurious iteration started heuristically localize verify passed failed fig 

localization reduction process reconstruct refine refining replacing process iterative refinement continues pass returned reconstruction fail successful eventually state explosion reached model checking 
improvements aside state explosion model checking abstraction refinement additional difficulties 
reconstruction operation explode 

reconstruction fails refinement operation usually guided trying determine path inconsistencies path model usually defined np hard problem 
methods clarke explore concrete paths correspond certain path starting initial states 
case concrete path refine model 
algorithms suffer state explosion improved ways 
path reconstruction significantly changed incremental reconstruction trying reconstruct directly model algorithm performs successive reconstructions model mi mk partial search backtracking trying find paths correspond algorithm selects subset paths continues reconstruction 
possible backtrack dead reached 
details described section 
refinement criterion essentially clarke method computation takes advantage fact handling restricted class abstractions described 
chose restrict class abstractions support subset supported clarke clarke support general abstraction confined variable projection general abstraction need refinement iterations benefit small 
new method entirely auto matic symbolic 
improvements report applied general class abstractions 
background definitions model finite set variables vn variable called state variable 
state variable vi equal finite set values di particular value assignment variables vn defines state expressions built variables constants di function symbols 
atomic formulas constructed expressions relation symbols 
set atomic formulas called atoms 
support atomic formula set state variable explicitly appear support support 
model defined program written smv translated kripke structure dn set states atoms set initial states transition relation labeling states ls atoms 
kripke structure formulas actl temporal logic constructed evaluated model checked 
detailed definition actl see 
localization reduction involves abstraction model associated structure 
way obtain model describe type abstraction 
definition state projection state vn subset state variables 

im indices increasing order state variables belong im state projection tuple satisfies sv denoted proj intuitively state projected coordinates variables contained 
definition set projection set states set state variables set projection set defined proj definition model projection kripke structure represents model subset state variables define model projection respect represents model follows 
set state variables 
proj proj proj proj atoms 
atoms subset atoms variables belong appear 
note easy see definition model projection model projection defines family model abstractions partial order respect 
term abstraction mean projection type abstraction 
choice projection abstraction intuitive working binary decision diagrams bdds 
projection set calculated existential quantification standard operation bdd packages 
definition path projection projection path sk set variables set paths si proj si denote si note projection path set states path elements corresponds set paths original model 
distinction denoting set paths elements capital letter 
kripke structures handle derived hardware implementations transition relations obtained partitioned state variables follows ri si vi si projection vi projection vi call support variable vi intuitively value state variable model independent values variables model support state variables appear atomic formula describes state behavior practice variables may optimized formula equivalent contain 
support induces graph state variables variable node edge vi vj vj support set state variables defined union supports variables belonging set 
ready describe abstraction refinement algorithms improved 
abstraction refinement process mentioned section abstraction refinement process follows steps described clarke describe differences practical 
initial abstraction model model checking problem initial abstraction obtained projection set state variables support atomic formulas utilize model checker resolve 
case false answer returned continue process reconstruction 
trace reconstruction reconstructing finite path path model purpose trace reconstruction find path projection original model vn denote original set variables 
assume model projection original model reconstruct project model reconstruct layer return refinement needed return choose counter example variables choose variables support fig 

layered reconstruction set variables sk counter example original formula projected model 
generally counter example path reconstruction algorithm analyzes reachable state space variables search steps performed inside si 
algorithm iteratively performs consequent image computations model intersecting th step image computation till step possible reached 
case spurious counter example case counter example proved real 
algorithm leads state space explosion practical cases significantly greater section techniques overcome state space explosion problem 
introduce notion layer layering reconstruction algorithm definition layer 

layer 

set ui support uk uk layer 
notion layer divide variable dependency graph disjoint sets variables layers variable layer direct dependency variable previous layers 
divide set layers perform layer reconstruction algorithm iteratively time computing additional layer variables adding model 
th iteration partially reconstructed counter example produced 
path model 
algorithm path reconstruction shown 
function reconstruct accepts path model concrete model algorithm performs layer layer reconstruction iteratively time reconstructing layer till variables reconstructed reconstruction possible refinement done 
layer computation choose variables layer chosen sk free fig 

model structure entire support previous layer 
iteration loop give priority support variables added model refinement stage suspect ones force refinement 
iterations take support entire set variables current model 
advantage layered reconstruction twofold reconstruct variables time rest restricted small subset 
maintains state space small avoid state explosion 
secondly detect refinement required early iterations obtain entire concrete model 
reconstructing layer reconstruction layer different depending contains loop 
case simple path loop implemented algorithms 
explained straightforward algorithm described suffers state explosion 
algorithms try alleviate problem 
faster usually fails due fact variables added back model apply second algorithm employs backtracking 
reconstructing loop algorithm function reconstruct layer loop accepts path model intermediate model try reconstruct path model note care values new variables point reconstructed path path valid projection model iteratively perform forward steps starting initial set conjunct step corresponding step different far done 
reach dead conjunction empty proceeding refine model try modify consistent reconstruct layer loop variables si new new try see selection values changed suspect preimage project suspect check replace si new imag esm project new return refinement needed replace si si new return refinement needed return fig 

reconstruction algorithm loop choice specific arbitrary done mainly avoid state explosion 
modify reconstruction 
note addition values variables contains values support variables cut behavior logic completely free behavior shown 
change values free variables long change consistent 
resulting path valid counter example formula details algorithm inconsistent project offending state perform preimage computation 
preserve values discard values try find values order state consistent model 
notice avoid preimage computations tends explode 
cases algorithm section gives results 
hard cases add backtracking reconstruction 
reconstructing loop algorithm layering sufficient avoid explosion iteration counter example getting larger possible counter examples comply searched 
counter example suffice may effort 
order exploit combine partially reconstructed counter example backtracking 
reconstruct layer loop si variables project prev project si new project si step preimage new step si step forward si si si subset si step prev backtracking si preimage si prev si si return si subset si si si si return refinement needed return fig 

reconstruction backtracking basic idea reconstructing layer variables subsets real forward steps image computations long possible try backtracking dead reached 
shows function reconstruct layer loop reconstruction backtracking 
algorithm performs forward backward steps image preimage computations long possible 
forward step done step path consistent forward computation model till trace reconstructed bad states reached forward step intersects state 
case backtracking done algorithm performs backward steps chooses different behavior till forward step possible backward step performed anymore 
happen checked possi ble values current state backward step current state intersects previous state 
note employ doing subsetting avoid state explosion 
experiments subsetting reduce bdd size bdd nodes 
reconstruction path loop reconstruct path containing loop due liveness formula additionally ensure concrete path contains 
concrete model contains variable acts counter 
changes cyclically independent model root cause failure reconstruct loop old true new new old new old new new old old new step new step image step si step refine si step new step new old new return extract loop trace refine fig 

reconstruction loop find loop naive approach 
look concrete path includes traversal loop times may succeed finding contains concrete loop 
possible try naive approach algorithms section test reconstructed path contains loop proceed refinement 
cases leads refinement right away possible find loop path 
approach taken unwind loop sufficient number times reconstruct 
approach implement fixed point algorithm 
algorithm depicted describes done 
input path assumed loop tail leading initial state 
algorithm performs forward fixed point algorithm find loop length product termination fixed point new old concrete loop exists 
possible states loop extract loop trace chooses arbitrary state iteratively performs back ward steps state encountered 
similar algorithm described biere proves tableau construction showing concrete path constructed path loop satisfies tableau 
refine si si variables prev project si differ image prev si new project si differ new si return add model fig 

refinement refinement reconstruction fails necessary refine model 
family abstractions means adding back state variables original model eliminated previous abstraction 
decision subset variables add back formulated np complete problem 
need find small set state variables don belong set values path reconstructed element reconstructed si preceding element si try find variables set find valid values consistent heuristic function differ function tries find minimal set variables proj proj 
actual implementation differ heuristic 
randomly choose variables eliminate longer proj proj 
result algorithm depends order choose variables attempt algorithm different variable sequences predefined number attempts 
results experimentation new algorithms conducted hard cases accumulated industrial design groups model checker purpose verification 
cases diverse different designs different design groups significantly different number state variables 
comparing easy cases meaningful obviously localization perform better extra overhead 
example ran texas benchmarks completed second localization reduction 
tests done mhz ibm powerpc processor mb cache memory 
results divided tables safety liveness 
column describes type design example taken 
second column gives number state variables examples 
third column details property passed failed 
rest columns detail results different algorithms run example giving run time sec memory requirement 
memory entry means run reached limit 
examples ones verify memory current limit bit application ibm 
run algorithms dynamic bdd reordering 
table compared algorithms 
algorithms performed fly model checking localization clarke algorithm layering algorithm section layering algorithm section 
table results safety formulas name 
vars 
result local 
clarke layer alg layer alg passed memory memory passed memory ethernet passed cpu passed memory queue crm passed ethernet passed memory memory cpu failed cpu failed memory table compared algorithms localization 
localization fixed point localization algorithm section 
results table indicate safety property passes improvement time memory requirements orders magnitude 
due fact examples verified smaller model 
property fails usually requires iterations refinement results comparable result localization worse 
case algorithm clarke better case refinement iterations required improvements unnecessary overhead added example ran faster localization 
table results liveness formulas name 
vars 
result local 
layer naive layer fixed point passed memory ethernet failed cpu passed cpu failed liveness table observed order magnitude improvement cases example results consistent safety 
cases result significantly better localization 
note fixed point algorithm better naive approach example cpu 
indicates doing refinement easier trying locate concrete loop traverses loop 
improvements symbolic localization reduction gave dramatic improvements verification hard industrial examples 
improvements mainly reconstruction process 
algorithms effective cases property safety property passes 
shown give orders magnitude improvement liveness formulas pass 
method complimentary bounded model checking methods generally better property fails 
intend investigate ways improve counterexample reconstruction liveness properties results cases consistent safety 
intend combine algorithms layering satisfiability reconstruction techniques reported believe speed results described 
texas verification benchmarks 
vlsi colorado edu vis texas 
sangiovanni vincentelli 
iterative approach language containment 
computer aided verification pages 
beer ben david 
fly model checking formulas 
computer aided verification pages 
biere cimatti clarke zhu 
symbolic model checking bdds 
proc 
tacas 
biere clarke zhu 
multiple state single state tableaux combining local global model checking 
correct system design pages 
brace bryant 
efficient bdd package 
th acm ieee design automation conference pages 
acm ieee 
clarke grumberg jha lu veith 
counterexample guided abstraction refinement 
computer aided pages 
clarke grumberg peled 
mit press 
clarke lu gupta 
automatic abstraction counterexample guided refinement 
private communication 
govindaraju dill 
verification approximate forward backward reachability 
inter 
conf computer aided design 
gupta clarke 
fourier analysis abstraction refinement model checking 
private communication 
kurshan 
computer aided verification coordinating processes 
princeton university press 
lee pardo jang somenzi 
tearing automatic abstraction ctl model checking 
inter 
conf computer aided design pages 
lind nielsen andersen 
stepwise ctl model checking state event systems 
computer aided verification pages 
mcmillan 
smv system draft 
carnegie mellon university pittsburgh pa 
pardo 
incremental ctl model checking bdd subsetting 
ieee dac 
ravi somenzi 
high density reachability analysis 
iccad 
silva sakallah 
grasp search algorithm propositional satisfiability 
ieee trans 
computers 
wang ho long zhu ma 
formal property verification abstraction refinement formal simulation hybrid engines 
th ieee dac pages 
