control theory achieve service level objectives performance management parekh ibm ibm com joe hellerstein ibm ibm com jayram ibm jayram ibm com gandhi university michigan engin umich edu october dawn tilbury university michigan tilbury umich edu joe ibm ibm com widely approach achieving service level objectives target system email server add controller manipulates target system tuning parameters 
describe methodology designing controllers software systems builds classical control theory 
classical approach proceeds steps system identification controller design 
system identification construct mathematical models target system 
traditionally principles approach detailed knowledge target system 
models difficult build complex validate maintain 
methodology statistical arma model fit historical measurements target controlled 
models easier obtain allow apply control theoretic design techniques larger class systems 
applied lotus notes groupware server obtain model fits lower high 
controller design analysis models leads controller achieve service level objectives 
report analysis closed loop system integral control law lotus notes target 
objective maintain queue length 
analysis control theory able predict occurrence absence controller induced oscillations system response 
oscillations undesirable increase variability resulting failure meet service level objective 
implement controller real lotus notes system observe remarkable correspondence behavior real system predictions analysis 
allows select proper parameter controller analysis 
wide spread reliance systems focused increasing attention service level management especially achieving response time throughput objectives 
commonly approach take existing target system add controller access metrics tuning parameters system 
feedback information metrics controller manipulates tuning parameters achieve desired service level objectives 
examples closed loop software systems abound network dispatcher adjusts load balancing parameters clusters web servers multiple virtual storage mvs workload manager adjusts memory allocations operating system tuning parameters achieve response time throughput objectives fair share schedulers adjust unix nice tuning parameter achieve fractional allocations cpu 
considerable attention focused software mechanisms needed enable closed loop systems instrumentation tuning control access attention paid rigorous evaluation behavior controller 
computer scientists frequently simulations understand evaluate controller behavior 
simulation studies time consuming expensive error prone 
design closed loop feedback control systems studied extensively engineering disciplines mechanical aeronautical engineering 
engineering disciplines designers employ linear control theory uses input output relationships linear systems study controller properties stability finite inputs produces finite outputs bias objectives achieved rise time quickly system responds change objective settling time long steady state reached 
theory provides sound rigorous mathematical principles design analysis closed loop systems 
goal develop methodology assess value applying control theory evaluation controllers service level management software systems 
novel idea believe approach enables application techniques wider variety systems traditional approach 
demonstrate appeal power control theoretic analysis controller doing admission control lotus notes workgroup server 
primary concern applying linear control theory computer systems assumption linear system poor fit realities queueing computer systems highly non linear 
developed theory non linear control difficult apply generalize systems provides insight 
perspective pragmatic 
pose question construct analyze properties real life closed loop software systems linear system assumption mechanical engineering discipline control theory established linearity hold turbulent fluid flows 
success linear control theory resulted creativity application 
classical controller design methodology consists steps system identification construct transfer function relates past input values past output values 
transfer functions constitute model system 
controller design properties transfer function desired objectives particular control law chosen 
techniques control theory predict system behave chosen controller added 
previous application control theoretic techniques computer systems name generally principles perform system identification :10.1.1.133.3305
example congestion control typically constructs state transition equations detailed knowledge assumptions protocol workload losses unfortunately short principles approach 
complex systems difficult construct model principles unrealistic assumptions 
difficulty major barrier applying control theory computer systems 
second principles models employ detailed information target system 
details may change frequently software release principles approach may require expert involvement going basis 
expensive impractical 
third principles approach address model validation 
model validation unclear insights obtained control theory relate system studied 
proceeding principles advocate empirical approach system identification 
input output parameters need identified just 
deriving transfer functions principles knowledge autoregressive moving average arma model constructed standard statistical techniques employed estimate arma parameters 
approach treats system black box affected system complexity lack expert knowledge 
changes target system easily accommodated re estimating model parameters 
show approach works notes server lower high 
controller law saturated integral controller 
behavior controller determined parameter called gain 
control theory tells gain large obtain fast response changing inputs large lead undesirable behaviors system controller induced oscillations 
goal analysis identify large gain causing undesirable 
particular form models allows standard techniques control theory perform analysis 
results demonstrate remarkable correspondence predictions control theory observed behavior actual notes server 
particular able identify feasible gain values satisfy control objectives 
remainder organized follows 
section describes notes server target system embedded closed loop achieve service level objectives 
section details approach system identification 
section discusses controller design uses empirical studies access accuracy insights obtained control theory 
provide summary discussion section 
section discusses related 
lotus notes closed loop control section describes relevant features lotus notes server provides details closed loop control obtained target system 
architecturally lotus notes client server system 
client software converts high level user activity mouse clicks remote procedure calls rpcs sent server 
server maintains queue rpcs 
rpc serviced entry server log appropriate response sent client 
clients operate synchronous manner waiting previous request complete sending new request 
client server protocol session oriented 
new session begun session initiating rpc accepted server 
term offered load refer load imposed server client requests 
case homogeneous clients offered load expressed terms number clients 
service level metric length queue progress rpc requests just referred queue length 
tuning parameter server maxusers regulates number users allowed access server time 
session level control opposed packet level rpc controls 
operates rejecting session initiating rpcs number connected users exceeds server maxusers 
parameter somewhat complex effect queue length 
particular changing server maxusers effect session initiating rpc arrives existing sessions affected 
unfortunately direct measurements rpc rates queue length 
obtain values measurement sensor samples server log rate minute 
queue length computation performed counting rpcs active previous time quantum 
rpcs currently waiting queue log approach underestimates true queue length true rpc rates 
measurement lossy 
improve approximation delaying time units reporting measurements doing allows rpcs complete gives accurate count rpcs executing 
administrator value controller tuning control users rpcs server queue length server log closed loop control lotus notes sensor notes administrators interested controlling queue length provides way manage trade offs response times throughputs 
shows construct closed loop system control notes queue length 
notes provides interface manipulating tuning parameters server maxusers 
measurement sensor described obtain values queue length 
administrator specifies desired value value queue length 
value specifies management policy closed loop system tries achieve 
controller takes input control error difference value measured value queue length 
depending current past values error server maxusers adjusted 
algorithm determines value server maxusers called control law 
system identification validation section describes approach system identification application lotus notes 
system identification parts 
block diagram construction identifies significant functional components inputoutput relationships 
second transfer function formulation models input output relationships element block diagram 
particular form models construct linear transfer functions important enables leverage large set analysis techniques available control theory 
third parameter estimation evaluation quality model developed 
block diagram construction block diagram depicts components system flow information 
provides convenient starting point modeling notes server 
rpc rates server maxusers inputs queue length output 
depicted 
maxusers rpc rate rate maxusers notes server initial model notes server actual queue length queue length sensor final model offered load max users models notes server open loop measured queue length problems foregoing 
incomplete lossy measurements considered 
separate sensor component included 
second problem involved 
server maxusers indirect effect rpc rates inputs independent 
linear system 
address divide operating region notes server regions 
server maxusers exceeds offered load tuning parameter effect 
second server maxusers lower offered load exactly server maxusers users allowed system 
focus second operating region 
offered load value relevant long stay region ignored 
words need consider rpc rates input 
adequately model notes server server maxusers input transfer function 
answer question plots queue length offered load users server maxusers increased minutes 
data obtained experimental set described section impact server maxusers clear suggest queue length maxusers offered load queue length maxusers time effect server maxusers queue length ing sufficient 
quantitative assessment provided section 
results block diagram 
note single output system 
transfer function formulation precise quantifying input output relationships 
assume time discrete uniform interval sizes 
consider linear system input output 
input output relationships mean autoregressive moving average arma model form aiy bjx order model ai bj constants estimated data 
values ai bi specified transfer function linear system 
analysis purposes convenient convert transfer functions time domain frequency domain complex number 
want known transform 
transforms nice properties 
example consider linear systems transforms 
transform system formed connecting series 
outputs systems summed combined system transform 
input multiplied associated transform ka 
applying principles eq 
assuming typical constraint obtain transform zn general form transfer function eq 
determine transfer function notes server transfer function sensor component 
value queue length time value server maxusers 
note actual queue length produced sensor 
turns fit obtained see table 
zb order model max 
modeling bit involved 
measured queue length output sensor 
discussed earlier sensor output lossy general underestimates real queue length 
order model transform zb 
recall get accurate estimate delay time units long running rpcs time complete execution 
model effect define 
domain simply folding previous equation obtain zb note modeling treated components black boxes details internal operation 
parameter estimation model evaluation functional forms estimate parameters 
approach 
measurements target system obtained varying input parameters controlled way data 
squares regression estimate ai bj different values 
general fit model improves increased 
seek model adequate fit low order 
delay notes server sensor table model values coefficients transfer functions characterize input output relationships real system 
way answer question metric fraction variability output variable explained transfer function 
turns order model provides fit 
table reports values ai bj transfer functions 
notes server quite large 
excellent fit 
quality model assessed plotting observed values queue length versus predicted model shown 
note observations lie close line unit slope predicted value equals actual value 
predicted queue length data observed queue length comparing model predictions observed values sensor transfer function smaller acceptable 
note increases approaches 
effects expected longer delays measured values approach actual value 
controller design assessment having completed system identification step design assess controllers 
describing construct controller control law 
done assumption system linear 
unfortunately linearity hold 
preliminary analysis required determine conditions linearity reasonable 
control theory gain insights controller behavior especially presence controller induced oscillations 
predictions assessed measurements real notes server 
control law closed loop analysis control theory provides systematic way study feedback systems 
show construct transfer function closed loop system transfer function target system 
constructing closed loop system mean output fed back controller turns compares value 
difference values controller computes new setting control case value server maxusers 
shown 
controller notes server system controller sensor starting point controller design control law describes controller operates 
focus integral control widely technique reasonable approach notes server 
control law considered objective demonstrate value methodology 
time domain expression integral control law kie new control value time control error 
parameter ki called gain 
intuitively control law dictates server maxusers adjusted incrementally previous value gain weighted control error 
definition transfer function ki kid integral controller intuition higher ki values lead faster response 
care required larger values ki cause oscillations instabilities 
problem directly translating control law software controlling lotus notes 
specifically kie large server maxusers set value cause software error 
avoid situations limit range server maxusers extending control law min max 
saturated controllers linear 
modeling restricted regions bounds reached 
principles transforms discussed earlier kid solving equations get transfer function system preliminary analysis kid kid model developed assumption min max analysis model necessarily restricted region 
preliminary analysis determine values ki holds 
approach follows 
divide control region parts max min max min 
designate states max min intermediate respectively 
seek understand conditions control values states min max 
stay away regions assumptions analysis hold 
shows state transitions obtained control law 
see ki transitions states max 
clearly want avoid large ki 
big ki encountering states min max 
largest error occurs closed loop system operation 
max min ki transition extreme states 
empirical studies uncontrolled notes system queue lengths range approximately 
bias case 
set max equals offered load min 
gives ki 
analytical studies subsection uses classical control theory evaluate closed loop system described eq 

know control theory ki large max min max max min intermediate min max min min max max min min preliminary analysis control state transitions max possible provide fast response 
issue addressed predict ki large controller induced oscillations 
prediction studying properties transfer function closed loop system eq 

background required understand logic analysis 
note transfer functions consider expressed ratio polynomials roots numerator called zeros roots denominator poles 
specifically polynomials transfer function zeros values poles 
poles zeros transfer function provide insight stability controlled induced oscillations 
recall imaginary number 
poles lie outside unit circle unstable 
bounded input produces unbounded output 
result mapping domain time domain time domain equation expressed terms geometric series poles raised power 
pole magnitude exceeds unbounded large 
fact interest relates poles im 
poles contain time domain terms form ej 
sinusoid oscillations increase variability 
root locus plots provide systematic way study location poles complex plane 
shows root locus plots unit step response unit change tuning parameter system described eq 

consider left plot addresses 
horizontal axis plot corresponds re vertical axis im 
provide frame unit circle centered 
indicate poles indicate zeros 
root locus curve inside unit circle traces poles ki increases 
poles lie unit circle problem stability 
observe large ki poles lie real axis 
sinusoidal component associated step response gains 
larger ki non zero imaginary component poles 
suggests presence controller induced oscillations increase variance queue length 
consider root locus plot right plot 
ki lies real axis poles gains nonzero imaginary components 
expect controller induced oscillations result higher variability queue length 
imag axis delay root locus real axis imag axis delay root locus real axis root locus plots delay delay observe pole ki lies outside unit circle 
suggests stability problem 
course system unstable bounded range values server maxusers assigned 
large gains cause problem limit cycle tuning parameter takes values umin umax 
discuss section 
analysis reveals wish introduce delay order obtain accurate queue length information severely limits range gain values may limits responsiveness control system 
rigorous way trading accuracy recency sensor data 
empirical assessments empirical results various values ki integral controller real system synthetic workload 
study predictions control theory compare behavior real system 
testbed experiments consists workload generator product level notes server sensor running notes server controller running third machine perturb notes server 
workload generator simulates activity multiple clients running copies identical script sends rpcs server 
scripts executed repeatedly minute delay executions 
script selected suite standard workload generation 
experiment offered load server number users trying issue requests kept constant users 
queue length set minutes changed 
queue length delay users time delay users time uncontrolled system run server maxusers offered load consider behavior closed loop system controller disabled 
effected modifying control law server maxusers set offered load 
displays result 
queue length hovers 

results consistent fact lossy 
see substantial variability cases changes queue length common 
variability comes large part having random think times script executions 
note appears oscillatory pattern queue length alternates small large values 
understand note duration script minute 
recall clients operate synchronously request outstanding 
tend alternate sets clients executing waiting execute 
controller modifying server maxusers significant variability 
shows effect controller ki delays 
consists plots columns 
left column right column 
parts 
part considers single value ki 
example part consists rows plots 
row plots queue length value versus time 
second row shows value control time queue length plot 
part ki part displays ki 
consider part 
initial transient queue length converges value 
variability variance considerably smaller 
observation holds 
results consistent root locus analysis im ki pole transfer function closed loop system 
consider part gain increased factor 

variability substantially larger ki 
appear controller induced oscillation 
queue length values remain centered value suggesting bias small 
situation 
pronounced cycle queue length values cycle corresponds cycle values control 
suggests controller induced oscillation 
note analysis predicted results pole non zero imaginary component ki pole ki 
reason oscillations queue length 
result 
ki large large positive errors cause controller increase server maxusers turn causes negative server maxusers greatly reduced 
evident plot part 
part gain times larger part 
variability quite large larger uncontrolled system 
oscillations clearly related changes 
recall root locus analysis predicts presence controller induced oscillations case 
instructive consider extreme example clearly violates constraint ki established preliminary analysis 
displays results studies done ki 
see strong limit cycle control value resultant queue length plot shows large oscillations 
changing value apparent impact system behavior 
control oscillates extreme values way 
table quantifies results region value 
metrics reported mean queue length standard deviation queue length rms root mean square error 
mean queue length relates bias interested difference number value 
standard deviation queue length reflects variability queue length maxusers queue length maxusers queue length maxusers ki delay ql time time time ki delay ql time time ki delay ql time effect controller real system queue length maxusers queue length maxusers queue length maxusers ki delay ql time time ki delay ql time time ki delay ql time time queue length maxusers ki delay ql time time unstable controller high ki system 
root mean squared rms error respect value quantifies extreme bias 
queue length rms ki delay mean st dev 
error table controller performance statistics note standard deviations small values ki identified having real valued poles 
hand standard deviations large values ki complex poles 
observe larger ki problem bias 
indicated large values rms difference average queue length value 
validates analysis larger delays get fast responding system large ki system quickly unstable 
summary wide spread reliance services created intense interest automated techniques achieving service level objectives target systems web servers email servers 
order design systems respond dynamically feedback current state commonly approach create controller manipulates tuning parameters target system achieve objectives 
rigorous analysis behavior closed loop system lacking 
care taken design controller controller induced oscillations arise degrade quality service delivered 
demonstrated methodology constructing analyzing closed loop systems 
starting point classical control theory widely approach engineering disciplines 
control theory analyze computer communications systems provided general approach modeling control systems included empirical validation 
suggest statistical approach system identification generally applicable conventional principles approach potential adapt changes underlying system new software releases 
applied methodology closed loop control lotus notes server controller manipulates notes server maxusers tuning parameter 
system identification squares regression estimate parameters arma models components system 
fit models quite lower high 
interestingly find important model fact queue lengths sampled server introduce delays affect controller performance 
illustrate value control theoretic analysis applying integral controller notes server popular technique control theory 
ensure software correctness forced limit range 
causes controller non linear 
integral control design problem determine appropriate value gain ki 
control theory know having large gain system responsive 
large gain cause instabilities 
studying classical control theory requires restrict linear regions controller operation 
simple state analysis estimate values gain linearity hold 
control theory analysis provides useful insights tradeoff gain value 
root locus analysis commonly classical control theory allows predict values ki cause controller induced oscillations 
empirical studies real notes system confirm pre 
cases root locus analysis predicts controller induced oscillation happens empirical studies 
cases root locus predicts oscillation oscillations absent empirical results 
choose value ki allows system responsive subject oscillations 
analysis clarifies effect sensor induced delays 
note system identification controller design performed offline data collected controlled production runs target system 
allows large amount sample data perform time consuming analyses consult domain experts 
assume system evolves slowly model need estimated 
online changepoint detection scheme employed actively monitor system trigger parameter re estimation required 
online adaptation target bounds estimated model performed controller 
remains 
approach identifying linear regions operation approximate best 
better approach employ describing functions technique non linear control theory 
restricted simple control law order demonstrate value approach 
plan study complex controllers assess control theory provides useful insights operation 
broadly interested applying methodology service level management situations refine methodology asses value 
related application control theory analyzing software systems prevalent networking arena 
focus usually congestion flow control algorithms protocols 
high level analysis done chiu derive optimal convergence fairness policies congestion avoidance 
keshav provides detailed analysis performing flow control network specific set assumptions networking infrastructure protocols 
transform root locus analysis faced non linearity system introduced max min terms 
non linear analysis carried suggest second method 
packet switched networks extended mascolo atm follow principles approach 
papers detailed system model sophisticated analyses 
clear ideas generalize systems 
includes mascolo 
shor apply control theoretic ideas analyzing congestion control behavior tcp 
researchers applied control theory qos oriented systems os schedulers distributed multimedia systems qos aware caches 
particular lu investigate controller behavior controlled parameter show similar instability effects controller gain high 
controller design methodology works backwards control objective analytical analysis controller behavior 
encouraging note goel recognized need build general tools algorithms dealing feedback systems 
provide software toolkit called swift building dynamically reconfiguring systems 
somewhat different approach system modeling researchers example neural networks system modeling 
approach allows treat target system black box resultant models transparent arma models 
nns nonlinear model complex systems able leverage control theory analysis tools designing analyzing controllers 

adaptive algorithms managing distributed data processing workload 
ibm systems journal 
basseville 
detection abrupt changes theory applications 
prentice hall 

feedback control congestion packet switching networks case single congested node 
ieee transactions networking december 
joseph 
adaptive operating system control neural networks 
phd thesis lehigh university 
dah ming chiu raj jain 
analysis increase decrease algorithms congestion avoidance computer networks 
computer networks isdn systems june 
raymond 
event fair share scheduler 
proceedings acm usenix pages winter 
goel david steere calton pu jonathan walpole 
swift feedback control dynamic reconfiguration toolkit 
technical report oregon graduate institute cse 
hunt goldszmidt king mukherjee 
network dispatcher connection router scalable internet services 
proceedings th international world wide web conference april 
arun iyengar jim challenger daniel dias paul dantzig 
highperformance web site design techniques 
ieee internet computing february 
srinivasan keshav 
control theoretic approach flow control 
proceedings acm sigcomm september 
li klara nahrstedt 
control middleware framework quality service applications 
ieee journal selected areas communication 
ying lu saxena abdelzaher 
differentiated caching services control theoretic approach 
submitted int conference decision control systems 
mascolo cavendish gerla 
atm rate congestion control smith predictor implementation 
proceedings ieee infocom 
mascolo 
classical control theory congestion avoidance highspeed internet 
proceedings th conference decision control december 
ogata 
modern control engineering 
prentice hall rd edition 
shor kang li jonathan walpole david steere calton pu 
application control theory modeling analysis computer systems 
proceedings japan usa vietnam workshop june 
david steere goel joshua dylan mcnamee calton pu jonathan walpole 
feedback driven proportion allocator real rate scheduling 
proceedings operating systems design implementation osdi february 

