total order database replication yair amir johns hopkins university department computer science charles street baltimore md cnds jhu edu presents detail efficient provably correct algorithm database replication partitionable networks 
algorithm avoids need toend acknowledgments action supporting network partitions merges allowing dynamic instantiation new replicas 
round acknowledgments required membership change event network partition 
new actions may introduced system point primary component 
show performance improved applications allow relaxation consistency requirements 
provide experimental results demonstrate efficiency approach 
database replication quickly critical tool providing high availability survivability high performance database applications 
provide useful replication solve non trivial problem maintaining data consistency replicas 
state machine approach database replication ensures replicated databases start consistent remain consistent long apply deterministic actions transactions order 
database replication problem reduced problem constructing global persistent consistent order actions 
mistakenly considered easy achieve total order service agreed order provided group communication systems 
early models group communication virtual synchrony support network partitions merges 
failures tolerated models process crashes recovery 
model total order sufficient create global persistent consistent order 
network partitions possible total order service directly translate global persistent consistent order 
existing solutions provide active replication avoid dealing network partitions require additional action delivered group communication admitted global consistent persistent order applied database :10.1.1.128.9931:10.1.1.56.3906
describe complete provably correct algorithm provides global persistent consistent order partitionable environment need endto acknowledgments action basis 
approach network connectivity change event network partition merge action 
basic concept introduced part phd thesis 
presents newly developed insight problem goes supporting online additions completely new replicas complete removals existing replicas system executes 
algorithm builds generic replication engine runs outside database seamlessly integrated existing databases applications 
replication engine supports various semantic models relaxing enforcing consistency constraints needed application 
implemented replication engine top spread toolkit provide experimental performance results comparing throughput latency global consistent persistent order algorithm corel algorithm introduced phase commit algorithm 
results demonstrate impact eliminating acknowledgments action basis 
rest organized follows 
subsection discusses related 
section describes working model 
section introduces conceptual solution 
section addresses problems exhibited conceptual solution partitionable system introduces extended virtual synchrony model tool provide global persistent order 
section describes de tailed replication algorithm extends support online removals additions set participating replicas 
section shows global persistent order guarantees algorithm support various relaxed consistency requirements 
section evaluates performance prototype section concludes 
related phase commit protocols remain main technique provide consistent view distributed replicated database system unreliable network 
protocols impose substantial communication cost transaction may require full connectivity replicas recover fault scenarios 
commit protocols overcome availability problems phase commit protocols paying price additional communication round 
protocols optimize specific cases limiting transactional model commutative transactions giving special weight specific processor transaction 
explicit timestamps enables protocols avoid need claim locks enforce global total order actions solutions settle relaxed consistency criteria 
various groups investigated methods implement efficient lazy replication algorithms epidemic propagation exploiting application semantics 
atomic broadcast context virtual synchrony emerged promising tool solve replication problem 
algorithms introduced implement replication solutions total ordering 
approaches context non partitionable environments 
keidar uses extended virtual synchrony evs model propose algorithm supports network partitions merges 
algorithm requires transaction message acknowledged failures increasing latency protocol 
section demonstrate impact performance comparing algorithm 
fekete lynch shvartsman study static algorithm propose algorithm translates view synchrony specification partitionable group service defined global total order 
kemme bartoli babaoglu study problem online reconfiguration replicated system presence network events important building block replication algorithm 
propose various useful solutions performing database transfer joining site provide high level description online reconfiguration method enriched virtual synchrony allowing new replicas join system connected primary component 
solution leverage database transfer techniques adds ability allow new sites join running system need connected primary component 
kemme alonso prove correctness family replication protocols support different application semantics 
protocols introduced failure free environment enhanced support server crashes recoveries 
model allow network partitions assuming disconnected sites crashed 
model replication protocols rely external view change protocols provide uniform reliable delivery order provide consistency sites 
shows transition group communication uniform delivery notification strict database consistency trivial provide detailed algorithm purpose prove correctness 
system model system consists set nodes servers fs sn holding copy entire database 
initially assume set fixed known advance 
section show deal online changes set potential replicas failure communication model nodes communicate exchanging messages 
messages lost servers may crash network partitions may occur 
assume message corruption byzantine faults 
server crashes may subsequently recover retaining old identifier stable storage 
node executes processes database server replication engine group communication layer 
crash components running node detected components treated global node crash 
network may partition finite number disconnected components 
nodes situated different components exchange messages situated component continue communicating 
components may subsequently merge form larger component 
employ services group communication layer provides reliable multicast messaging ordering guarantees fifo causal total order 
group communication system provides membership notification service informing replication engine nodes note changes system setup view changes caused temporary network events 
reached current component 
notification occurs time connectivity change server crash recovery voluntary join leave occurs 
set participants reached server moment time called view 
replication layer handles server crashes network partitions notifications provided group communication 
basic property provided group communication system called virtual synchrony guarantees processes moving view deliver ordered set messages view 
service model database collection organized related data 
clients access data submitting transactions 
consisting set commands follow acid properties 
replication service maintains replicated database distributed environment 
server server set maintains private copy database 
initial state database identical servers 
models consistency defined strictest serializability requires concurrent execution transactions replicated data set equivalent serial execution non replicated data set 
focus enforcing strict consistency model support weaker models see section 
action defines transition current state database state state completely determined current state action 
view actions having query part update part missing 
client transactions translate actions applied database 
basic model best fits operation transactions section show transaction types supported 
replication algorithm presence network partitions replication layer identifies single component server group primary component components partitioned group non primary components 
change membership component reflected delivery view change notification group communication layer server component 
replication layer implements symmetric distributed algorithm determine order actions applied database 
server builds knowledge order actions system 
coloring model defined indicate knowledge level associated action 
server marks actions delivered colors order unknown order known know order known red green white 
action coloring red action action ordered local component group communication layer server determine global order 
green action action server determined global order 
white action action server knows servers marked green 
actions discarded server need subsequently 
server white actions precede green actions turn precede red ones 
action marked differently different servers action marked white server missing marked red server 
actions delivered replication layer primary component marked green 
green actions applied database immediately maintaining strictest consistency requirements 
contrast actions delivered non primary component marked red 
global order actions determined strong consistency requirements actions applied database stage 
conceptual algorithm algorithm section intuitively provide adequate solution replication problem 
case algorithm able deal subtle issues arise partitionable system 
simplified solution provide better insight problems complete solution needs cope introduce key properties algorithm 
presents state machine associated conceptual algorithm 
replica states prim state 
server belongs primary component 
client submits request multicast 
conceptual replication algorithm group communication servers component 
message delivered group communication system replication layer action immediately marked green applied database 
state 
server belongs non primary component 
client actions ordered component group communication system 
message containing action delivered group communication system immediately marked red 
exchange state 
server switches state delivery view change notification group communication system 
servers new view exchange information allowing define set actions known 
actions subsequently exchanged server apply database green actions gained knowledge 
exchange finished server check current view quorum form primary component 
check done locally additional exchange messages information collected initial stage state 
view form primary component server move construct state return state 
construct state 
state servers component set actions synchronized exchange state attempt install primary component 
send create primary component cpc message 
server received cpc messages members current component transform red messages green apply database switch prim state 
view change occurs receiving cpc messages server returns exchange state 
system subject partitioning ensure different components apply contradictory actions database 
quorum mechanism allow selection unique primary component disconnected components 
servers primary component permitted apply actions database 
types quorums opted dynamic linear voting 
system component contains weighted majority primary component new primary component 
systems processes exchange information long direct continuous connection 
contrast algorithm propagates information means eventual path new component formed servers exchange knowledge regarding actions order color 
exchange process invoked immediately view change 
furthermore components exhibit behavior form primary non primary component 
allows information disseminated non primary components reducing amount data exchange needs performed server joins primary component 
total order database replication unfortunately due asynchronous nature system model reach complete common knowledge messages received servers just network partition occurs server crashes 
fact proven reaching consensus asynchronous environments possibility failure impossible 
group communication primitives virtual synchrony provide guarantees message delivery span network partitions server crashes 
algorithm important able tell message delivered server right view change delivered intended recipients 
server know example actions delivered prim state view change event occurred delivered members primary component virtual synchrony guarantees fact servers install view messages immediately marked green possibility subset initial membership big construct primary component receive messages 
subset install new primary component apply actions green database breaking consistency rest servers 
problem manifest algorithm tries operate presence network partitions 
solution total order correct setting enhancement 
extended virtual synchrony order circumvent inability know received messages sent network event occurs enhanced group communication paradigm called extended virtual synchrony evs reduces ambiguity associated decision problem 
having decide possible values consensus problem evs create possible cases 
achieve evs splits view change notification notifications transitional configuration change message regular configuration change message 
transitional configuration message defines reduced membership containing members regular configuration coming directly regular configuration 
allows form message delivery safe delivery maintains total order property guarantees message delivered process member configuration delivered process member configuration process fails 
messages meet requirements safe delivery received group communication layer delivered transitional configuration 
new messages sent group communication transitional configuration 
safe delivery property provides valuable tool deal incomplete knowledge presence network failures server crashes 
distinguish possible cases 
safe message delivered regular configuration 
guarantees met configuration deliver message regular configuration transitional configuration crash 

safe message delivered transitional configuration 
message received group communication layer just partition occurs 
group communication layer tell components split previous component received deliver message 

safe message sent just partition occurred received group communication layer detached component 
message obviously delivered detached component 
power differentiation lies fact respect message impossible server case case 
illustrate property consider construct phase algorithm server receives cpc messages regular configuration knows server configuration receive messages regular order unknown order known know order known transitional membership red green white yellow 
updated coloring model configuration delivered crash servers may receive cpc messages transitional configuration 
conversely server receives configuration change new regular configuration receiving cpc messages server received message receive safe previous configuration 
particular server received cpc messages safe previous regular configuration 
know case server case 
server received cpc messages delivered transitional configuration know server received cpc messages regular configuration server receive cpc messages know exist described 
replication algorithm observations algorithm skeleton section needs refined 
take advantage safe delivery properties differentiated view change notification evs provides 
delicate states mentioned prim construct 
prim state actions delivered safe regular configuration applied database 
actions delivered transitional configuration marked green applied database know regular configuration defining primary component system 
action delivered transitional membership marked directly green applied database possible detached components receive action install primary component continue applying new actions problem manifests state states knowledge message delivery critical determines global total order prim creation new primary construct 
reg prim trans prim exchange states non prim construct trans conf exchange actions un cpc cpc state possible prim prim trans conf recover trans conf reg conf reg conf trans conf reg conf reg conf action action red action yellow action green 
replication state machine database applying breaking consistency database 
avoid situation prim state split states new message color introduced coloring model yellow action action delivered transitional configuration primary component 
yellow action green server soon server learns server marked action green server part primary component 
discussed previous section action marked yellow server exist component marked action red marked green 
presence consecutive network changes process installing new primary component interrupted configuration change 
transitional configuration received server construct state receiving cpc messages server able install new primary switch new state 
state expects receive delivery new regular configuration trigger initiation new exchange round 
receives rest cpc messages transitional configuration means possible server received cpc messages construct moved completing installation new primary 
account possibility switch new state un undecided 
action message received state know sure server switched managed generate new actions noticing network failure caused cascaded membership change 
server situation act installing primary component order consistent mark old yellow red actions green mark received action yellow switch joining come eventually notice new configuration change 
regular configuration message delivered message received un state transition marked remains uncertain server installed primary component attempt participate formation new primary dilemma cleared exchange information worst case members tried install primary shows updated state machine 
aside changes mentioned exchange state split mainly clarity reasons 
procedural point view view change delivered members view try establish maximal common state reached combining information actions held server 
common state determined participants proceed exchange relevant actions 
obviously new membership subset old need action exchange states synchronized 
dynamic replica instantiation removal mentioned description model algorithm far works limitation fixed set potential replicas 
great value allow dynamic instantiation new replicas deactivation 
system support permanent removal replicas susceptible blocking case permanent failure disconnection majority nodes primary component 
dynamically changing set servers straightforward set change needs synchronized participating servers order avoid confusion incorrect decisions distinct components deciding primary rightful old configuration entitled new configuration 
basically consensus problem solved traditional fashion 
circumvent problem help persistent global total order algorithm provides 
replica wants permanently leave system broadcast persistent leave message ordered action message 
message green replica update local data structures exclude list potential replicas 
persistent leave message administratively inserted system signal permanent removal due failure replicas 
message issued site system contain server id dead replica 
new replica wants join replicated system need connect members system joining group 
act representative new site existing group creating persistent join message announce intention join group 
message ordered regular action standard algorithm 
message green server replica update data structures include newcomer server id set green line globally ordered message server joining member action corresponding persistent join message 
basically point servers acknowledge existence new member connected group 
persistent join message green peer server representative peer server take snapshot database start transferring joining member 
initial peer fails network partition occurs transfer finished new server try establish connection different member system continue update 
new peer ordered persistent join message sent representative know state reach joining system able resume transfer procedure 
new peer ordered persistent join message issue persistent join message persistent join messages members local data structures ignored existing servers ordered persistent join define entry point new site system 
algorithm guarantees global total ordering entry point uniquely defined 
transfer complete set action counter action ordered system join group replicas 
seen view change existing members go exchange states continue algorithm 
method performing online reconfiguration described 
method requires joining site permanently connected primary component updated 
maintain flexibility engine allow joining replicas connected non primary components update stage 
case new site accepted system connected primary component due eventual path propagation method 
insertion new replica system non primary component useful certain applications shown section 
static algorithm code complete algorithm code including dynamic capabilities extended version 
proof correctness algorithm static form proven correct 
correctness properties guaranteed liveness fifo order total global order 
prove enhanced dynamic version algorithm preserves guarantees 
lemma global total order static servers performed ith actions actions identical 
lemma global fifo order static server performed action generated server performed action generated prior properties define safety criterion 
specifications need refined encompass removal servers addition new servers system 
theorem global total order dynamic servers performed ith action actions identical 
proof consider system start configuration set 
server configuration trivially maintain property lemma 
consider server joins system 
safety properties static algorithm guarantee ordering set actions servers consistent database 
case persistent join action ordered 
algorithm set global action counter assigned system persistent join action 
point behavior indistinguishable server original configuration claim maintained lemma 
theorem global fifo order dynamic server performed action generated server performed action generated prior inherited database state incorporated effect actions 
proof lemma theorem holds true initial starting point new member added system 
consider member joins system 
algorithm joining member transfers state database defined action ordered immediately persistent join message 
actions generated ordered persistent join incorporated database received 
theorem persistent join message ordered place servers 
actions generated ordered persistent join message ordered similarly server including theorem 
lemma holds member sufficient guarantee order actions generated prior ordered joined system 
lemma liveness static server orders action exists set servers containing time set face communication process failures server eventually orders action liveness property defined proven satisfied static replication algorithm 
specification needs refined include notion servers permanently leaving system 
theorem liveness dynamic server orders action configuration contains exists set servers containing time set face communication process failures server eventually orders action proof theorem direct extension lemma acknowledges potential existence different server set configurations 
action ordered server configuration ordered servers configuration direct consequence theorem 
servers leave system crash meet requirements liveness property servers join system order actions generated configuration includes crash 
supporting various application semantics algorithm designed provide strict consistency semantics applying actions database marked green global order determined 
real world incomplete knowledge unavoidable applications immediate answer incur long latency obtain complete consistent answer 
provide additional service types clients non primary component 
result weak query obtained consistent possibly obsolete state database reflected green actions known server time query non primary component 
applications prefer getting immediate reply latest information available possibly inconsistent 
primary component state database reflects updated situation consistent 
non primary component red actions taken account order provide latest consistent information 
call type query dirty query 
different semantics supported respect updates 
timestamp semantics case application interested information location tracking example application employ semantics 
similarly commutative semantics applications order action execution irrelevant long actions eventually applied 
inventory management application operations stock commutative 
semantics serializability property maintained presence network partitions 
network repaired partitioned components merge databases states converge 
algorithm significantly optimized engine ability distinguish query action action contains updates 
query issued server answered soon previous actions generated server applied database need generate order action message 
modern database applications exploit ability execute procedure specified transaction 
called active transactions supported algorithm provided invoked procedure deterministic depends solely current database state 
procedure invoked time action ordered creation update 
mentioned model best fits transactions 
non interactive transactions invoke triggers supported similar way 
applications need interactive transactions transaction read data perform updates user decision deterministic procedure 
behavior modeled action mimicked aid actions 
action reads necessary data second active action described 
active action encapsulates update dictated user checks values data read action valid 
update applied transaction aborted traditional sense 
note server aborts servers abort trans action apply identical deterministic rule identical state database 
performance analysis section evaluate replication engine compare performance existing solutions phase commit pc corel keidar 
pc algorithm adopted replicated systems require strict consistency 
pc requires forced disk writes unicast messages action 
corel exploits group communication properties improve 
corel requires forced disk write multicast messages action 
contrast engine requires forced disk write multicast message action average initiating server needs force action disk 
implemented algorithms compared performance normal operation view changes 
pc implementation perform locking required guarantee unique order transaction execution usually task database 
number clients updating replicas throughput comparison replication engine corel pc upper bound number clients updating replicas impact forced disk writes engine sync engine sync pc upper bound sync corel sync 
throughput comparison complete pc perform strictly worse upperbound implementation 
interested intrinsic performance replication clients receive responses actions soon actions globally ordered interaction database 
follow evaluates complete solution replicates postgres database local wide area networks engine 
tests conducted replicas running dual processor pentium iii linux connected mbits second local area switch 
action bytes long sql statement 
compares maximal throughput system replicas sustain methods 
vary number clients simultaneously submit requests system evenly spread replicas possible 
clients constantly injecting actions system action client introduced immediately previous action client completed result reported client 
engine achieves maximum throughput updates second sufficient clients saturate system outperforming methods factor 
corel outperforms bound pc expected mainly due saving disk writes reaching maximum updates second opposed updates second upper bound pc 
high performance database environments commonly superior storage technology flash disks 
order estimate performance methods exhibit environment asynchronous disk writes forced disk writes 
shows engine tops processing updates second 
conditions upper bound pc algorithm achieves updates second 
corel reaches latency ms load updates second engine pc corel 
latency variation load put approximately updates second clients clients needed order saturate corel system due higher latency 
clients corel saturates system updates second 
pc outperforms corel experiment reasons fact upper bound pc mentioned particular switch serves local area network capable transmitting multiple unicast messages different pairs parallel 
measured response time client experiences different loads 
engine maintains average latency ms load increasing updates second breaks maximum supported load updates second 
corel pc experience latencies ms ms loads updates second corel able sustain throughput 
complete algorithm database replication partitionable networks utilizing group communication proved correctness 
avoidance need acknowledgment action contributed superior performance 
showed incorporate online instantiation new replicas permanent removal existing replicas 
demonstrated efficiently support various types applications require different semantics 
jonathan stanton numerous technical ideas support helped optimize performance system 
michal amir jonathan stanton insightful suggestions considerably improved presentation 
partially funded defense advanced research projects agency darpa 
views expressed necessarily endorsed darpa 
amir amir dolev 
highly available application transis environment 
lecture notes computer science 
amir 
replication group communication partitioned network 
phd thesis hebrew university jerusalem jerusalem israel 
www cnds jhu edu publications yair phd ps 
amir amir stanton 
practical wide area database replication 
technical report cnds johns hopkins university center networking distributed systems 
amir stanton 
spread wide area group communication system 
technical report cnds johns hopkins university center networking distributed systems 
amir 
total order database replication 
technical report cnds johns hopkins university center networking distributed systems 
bernstein shipman 
concurrency control system distributed databases sdd 
acm transactions database systems mar 
birman joseph 
exploiting virtual synchrony distributed systems 
proceedings acm symposium os principles pages austin tx 
demers epidemic algorithms replicated database maintenance 
proceedings th annual acm symposium principles distributed computing pages vancouver bc canada aug 
fekete lynch shvartsman 
specifying partitionable group communication service 
acm transactions computer systems may 
fischer lynch paterson 
impossibility consensus faulty process 
journal acm apr 
golding 
weak consistency group communication membership 
phd thesis uc santa cruz 
gray reuter 
transaction processing concepts techniques 
data management systems 
morgan kaufmann publishers san mateo ca usa 
hadzilacos toueg 
fault tolerant broadcasts related problems 
mullender editor distributed systems chapter 
addison wesley second edition 
agrawal abbadi 
database replication epidemic update 
technical report university california santa barbara 
jajodia 
dynamic voting algorithms maintaining consistency replicated database 
acm transactions database systems 
keidar 
highly available paradigm consistent object replication 
master thesis institute computer science hebrew university jerusalem israel 
keidar dolev 
increasing resilience atomic commit additional cost 
symposium principles database systems pages 
kemme alonso 
new approach developing implementing eager database replication protocols 
acm transactions database systems 
kemme bartoli babaoglu 
online reconfiguration replicated databases group communication 
proceedings conference dependable systems networks goteborg sweden 
moser amir melliar smith agarwal 
extended virtual synchrony 
international conference distributed computing systems pages 
martinez jimenez peris kemme alonso 
scalable replication database clusters 
proceedings th international symposium distributed computing disc 
pedone 
database state machine group communication issues 
phd thesis ecole polytechnique de lausanne switzerland 
pedone guerraoui schiper 
exploiting atomic broadcast replicated databases 
proceedings europar europar sept 
pu leff 
replica control distributed systems asynchronous approach 
acm sigmod record 
schneider 
implementing fault tolerant services state machine approach tutorial 
acm computing surveys dec 
skeen 
quorum commit protocol 
berkley workshop distributed data management computer networks february 
agrawal abbadi 
broadcast primitives replicated databases 
proceedings th ieee international conference distributed computing systems pages amsterdam may 
stonebraker 
concurrency control consistency multiple copies data distributed ingres 
ieee transactions software engineering se may 

