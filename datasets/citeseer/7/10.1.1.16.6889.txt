karl aberer zoran despotovic department communication systems swiss federal institute technology epfl lausanne switzerland karl aberer zoran despotovic ep ch managing trust problem particular importance peer peer environments encounters frequently unknown agents 
existing methods trust management reputation scale rely form central database global knowledge maintained agent 
illustrate problem needs addressed data management semantic trust management level devise method trust assessments performed levels scalable peer peer mechanisms 
expect methods important factor fully decentralized peer peer systems platform serious applications simple le exchange 
trust management reputation peer peer information systems decentralized databases 
years mainly due arrival new possibilities doing business electronically people started recognize importance trust management electronic communities 
visitors amazon com usually look customer reviews deciding buy new books 
participants ebay auctions rate transaction 
examples completely centralized mechanisms storing exploring reputation data 
wewant explore possibilities trust management completely decentralized environments peer peer networks particular central database data warehouse available 
systems driving major paradigm shift era distributed computing 
major industrial players believe re ects society better types computer architectures 
similar pc better re ection user www infoworld com 
infrastructure traditional distinction clients back middle tier application servers simply disappearing 
node system plays role client server 
node participation global exchange access computing resources 
gnutella www gnutella com example success story simple software enables internet users freely exchange les mp music les 
importance trust management systems illustrated investigation gnutella 
examples justifying statement range simplest possible case downloading music les gnutella client want choose reliable peers situation entire community playing trusting peers uence business 
basic problem related trust management networks information transactions performed peers agents dispersed network peer build approximation global situation network 
course complicated fact agents participating storage considered unconditionally trustworthy eventual malicious behavior taken account 
user trust management data management network management qos qos exploits qos exploits uses di erent system levels computing approach trust seen simple method data mining statistical data analysis 
exploit society agents cheating comparably limited assume daily life normally dicult hide malicious behavior 
method allows judge trust agents meets rst time referring experiences agents 
method relies exclusively peer peer interactions requires centralized services whatsoever trust assessment data management 
developments eld data management decentralized peer peer information systems grid 
nutshell architecture trust management relies network storage trust management peer peer mechanisms 
illustrated 
important observe architecture mechanism implemented higher level peer peer manner account properties particular quality service mechanisms underlying layers 
example storage layer take account connections replicate data accessible sucient reliability 
trust layer similarly take account data equally accessible assessing trust statistical evidence derived behavioral data 
sense contributes question manage trust shows prototypical case full edged peer peer architecture information systems build 
section review existing formal trust models implementation 
section identify problems need addressed managing trust decentralized information system 
section give overview method propose illustrates problem tractable 
section detailed algorithms section simulation results showing method works ectively 
conclude nal remarks section 
related rst works tried give formal treatment trust computer science marsh 
model social properties trust presents attempt integrate aspects trust taken sociology psychology 
having strong sociological foundations model complex easily implemented today electronic communities 
model puts emphasis agents experiences agents collectively build network trust 
important practical example reputation management ebay www ebay com largest online auction site 
transaction buyers sellers rate reputation sum ratings months 
course main characteristics approach completely centralized data 
rahman hailes proposed method implemented networks 
marsh model 
kind adaptation marsh today online environments 
concepts simpli ed example trust possible values kept situations contexts 
main problem approach agent keep complex large data structures represent kind global knowledge network 
real word situations maintaining updating data structures time consuming task 
clear agents obtain recommendations model scale number agents grows 
yu singh 
model builds social network agents supports participants reputation expertise providing service helpfulness providing referrals 
agent keeps list neighbors changed time computes trustworthiness agents updating obtained reliable referral chains 
bad experience agent decreases rating bad agent propagates bad experience network agents update ratings accordingly 
ways approach similar previously mentioned remarks applied 
wewould emphasize works discusses data management retrieval problems certainly exist distributed environments 
think question choosing right model assess trust question obtaining data needed compute trust model investigated separation 
managing trust decentralized system common feature models trust investigated literature exploit information behavior agents order assess trust 
global perspective possible assess trust behavioral data available agent 
notion context great importance considering trust 
sentence trust doctor giving advice medical issues nancial ones example shows 
sake simplicity trust considered static context meaning distinguish evaluation trust di erent contexts 
context considerations easily integrated model 
denote set agents 
behavioral data observations agent interacts agent observations assess behavior set means take account reports transactions reports transactions 
addition global aggregate behavior system order scale results obtained speci agent 
analysis large amounts behavioral data fact important application data mining 
transaction data business applications analyzed order assess certain characteristics customers particular trustworthiness 
methods common rely potentially large amounts behavioral data order assess trust 
studying methods assess trust decentralized environment face questions semantic question trust model allows assess trust data data management question necessary data obtained compute trust trust model reasonable ort looking questions closely sees investigated separation 
powerful trust model worthless implemented scalable manner requires example centralized database 
trust factor comes play complicates situation additionally 
problem eciently manage behavioral data trust management just ordinary distributed data management problem 
agent providing trust related data needs turn assessed respect trustworthiness 
obtain data determining trust knowing trust put data sources 
concretely agent judge agent problem access global data 
rely part information obtained direct interactions obtain indirectly limited number referrals information problem course necessarily correct witness malicious 
exists additional principal problem necessary data assess trust obtained reliable manner 
referring agent honest may reachable reliably network 
distort quality data receives behavior agents 
formulate problem managing trust decentralized information system partition precisely subproblems need studied 
global model trust model describes agent behaves trustworthy model simple statistical measures experiences gained economic sociological sciences game theoretic foundations 

local algorithm determine trust computational procedure agent apply order determine trust limitations discussed unreliability providing trust data respect trustworthiness network 
extent local algorithm provide global model 

data communication management local algorithm implemented eciently data management infrastructure 
order obtain scalable implementations resources required agent scale gracefully agent population size ideally log 
important observe questions answered independently speci model trust 
generic problem managing trust distributed amd decentralized environment 
solution feasible 
propose simple ective method implements fairly straightforward trust model encompasses relevant aspects 
model may considered interesting result starting point developing sophisticated re nements method 
overview trust management method global trust model global trust model consider seen simpli cation model discussed exception mechanisms witnessing 
model binary trust agent trustworthy 
agents perform transactions transaction performed correctly 
agent cheats transaction global perspective untrustworthy 
order disseminate information transactions agents forward agents 
assume usually trust exists malicious behavior exception just consider information dishonest interactions relevant 
agent case malicious behavior le complaint 
complaints behavioral data model 
rst look simple situation interact wants determine trustworthiness 
assume cheating honest 
interaction assuming acting rational game theoretic sense le complaint perfectly fair 
hand le complaint order hide misbehavior 
outside observer result distinguish dishonest 
important point 
social mechanisms detect dishonest behavior private interactions 
trouble starts continues cheat 
assume cheats interaction 
observe complains complain 
conclude probable cheater 
generalizing idea de ne dis trust measure product problem global de nition trust global knowledge complaints 
straightforward agent collect information interactions agents dicult obtain complaints speci agent 
data management perspective data aggregated wrong dimension rst argument second 
data management technology come particular developments managing data decentralized peer peer information systems 
decentralized data management method proposed grid order store data peer peer network decentralized scalable fashion 
going details works describe main properties access method discussion 
similar methods currently proposed considered 
show simple example access structure 
agents support binary search tree depth 
level corresponds level search tree level see intervals corresponding paths binary tree level level 
level agents contained root interval meaning search request directed agent 
search requests arrives level agent checks responsible level indicated presence interval route agent indicated connector agent agent complimentary interval lower level 
resulting routing example queries shown 
leaf level agents store complaints agents identi er corresponds search key encoding 
see multiple agents responsible complaints speci agent 
data 
access structure robust failures network 
example shows collisions interest may occur agents responsible storing complaints 
exclude large agent populations cases rare multiple replicas available 
see access method organized peer peer manner exists central database 
allows requests form arbitrary agent network key value searched data value associated key 
returns data values corresponding query 
routing requests level routing requests level routing requests level queries store complaints stores complaints store complaints stores complaints example grid shown access structure satis es properties 
exists ecient decentralized bootstrap algorithm bilateral communication agents creates access structure central control 
algorithm randomized requires minimal global knowledge agents agreement key space 
mutual communications basically lead subsequent partitioning search space agents interact 
depending number agents maximal number possible keys multiple agents store data belonging key replicas generated bootstrap 
search algorithm consists forwarding requests agent routing tables constructed bootstrap algorithm 
search algorithm randomized requests forwarded randomly selected case multiple routing request exist normally case 
access probability di erent replicas uniformly distributed whichis importance algorithms discussed 
algorithms scale gracefully 
particular search done log time number agents storage space required agent scales log 
local computation trust propose mechanism computing trust grid storage structure complaints 
agent le time store sending message arbitrary agent 
assume willing send order hide fact agent involved processing 
insertion algorithm forwards complaints agents storing complaints respectively 
way desired 
evaluate trustworthiness agent starts search complaints 
data obtained uses trust function decide trustworthiness 
agents store complaints faces problem 
agent providing data malicious 
dealt checking step trustworthiness agent stores complaints 
eventually lead exploration network clearly desire 
proceed follows 
assume agents malicious certain probability 
con gure storage infrastructure way number replicas average acceptable fault tolerance 
receive data speci agent sucient number replicas need checks 
data insucient contradictory continue check 
practically limit depth exploration trustworthiness agents situations clear decision 
cases rare 
interesting observation relates agents route search requests 
fact assume network unrestricted connectivity internet trustworthiness play role respect obtaining incorrect results 
route request help nd agent storing speci complaints agent directly don 
networks complete communication needs routed malicious agents mobile ad hoc network additional factor take account 
algorithms describe speci implementation method described evaluation 
procedure checking complaints agent evaluates trustworthiness agent retrieves decentralized storage complaint data submitting messages arbitrary agents 
order obtain multiple referrals repeatedly say times 
result obtains set number di erent witnesses frequency witnesses 
number complaints received respectively led witness reports 
di erent frequencies indicate witnesses probability due non structure 
practice variations large 
non uniformity impacts query messages storage messages 
witnesses frequently probably receive storage messages complaints led 
number complaints report tend low 
normalize values frequencies observed querying function compensates variable 
eliminate witnesses occurrence unreliable 
multiple values decision criterion needed decide consider agent trustworthy 
trust measure experiences agent 
keeps statistics average number complaints received complaints led aggregating observations lifetime 
values function decide agent trustworthy represents trust mistrust 
criterion heuristics argument observed value complaints exceeds general average trust measure far dishonest 
problem determination factor may exceed average value 
chosen function motivated probabilistic analysis underlying poisson process ling complaints complex framework 
procedure exploring trust obtaining number complaints way described agent start assess trust 
simplest strategy take majority decision case tie return undecided 
agent assessing trust agent assessed limit recursion depth exploration result algorithm trustworthy assessment possible trustworthy procedure described returns number witnesses numbers complaints report normalizes update statistics sum decide cr cf return include checking witnesses 
consider sophisticated procedure checking 
update statistics return return decide cr cf return sum decide cr cf return entry eliminate non trusted witnesses sum 
decide cr cf return assumption underlying algorithm probability agent trustworthy higher tolerance wrong assessment witnesses giving assessment acceptable 
case single witness needs checked 
similarly absolute di erence negative positive assessments smaller equal witnesses need checked 
check majority decision accepted 
evaluation simulations evaluate reliability trust assessments 
take account important factors 
size nature agent population resources trust assessment experience agents interacting agents 
basic assumption relatively agents cheat better understand means 
addition compare simple complex algorithm trust assessment 
simulation setting implemented algorithm computer algebra package mathematica 
chose agent community agents 
storage binary keys length address agents average respectively replicas occuring complaints agents kept 
experiments grid order exclude ects emerging variations grid structure 
compare agent populations including cheaters 
consider cheater populations 
rst population cheaters cheat uniformly probability second population realistic cheaters cheat variable probability cheater 
population includes agents cheat rarely hard identify cheaters 
experiment proceeds follows 
grid choosen key length built 

perform random interactions agents cheat agent average respectively interactions 
phase complaints stored grid agents meet dishonest cheating meeting individual cheating probability 

trust assessment performed 
honest agents evaluate trust randomly chosen agents remaining agents 
random selection done order exclude ects resulting speci order agents assessed statistical information built 
example checking honest agents assessment sensitive subsequent malicious agents malicious agents occur 
agents performing assessment query network times order obtain data witnesses 
trust assessment malicious agents serving witnesses cheat individual cheating returning random numbers asked witness 
simulations result number correct undecided incorrect assessments distinguishing honest cheating agents 
results evaluate quality trust assessment parameter setting aggregating assessments assessing agents cheater population sizes 
aggregation function number assessments assessed agent honest decision number assessments agent malicious assessed honest 
rationale function undecided cases treated cheaters 
corresponds model cautious assessment strategy assuming trusting cheater potentially harmful missing honest agent 
weight set 
allows rst rough judgement quality parameter setting 
results follows cheater population probabilityof replicas interactions decision algorithm quality simple simple simple simple complex complex complex complex results show combination larger number replicas complex decision criterion substantially increases quality assessments 
di erences assessments substantial general low fraction total number assessments lead wrong decisions think quality measure probability making error weighted expected cost doing 
cheater population variable cheating probability results obviously reliable increasing number cheaters probability dicult distinguish honest agents 
replicas interactions decision algorithm quality simple simple simple simple complex complex complex complex contrast result cheater population variable cheating probability number interactions corresponding experience agents essential 
assessments ones combination larger number replicas complex decision criterion best di erence substantial 
detailed results optimal parameter settings di erent sizes malicious agent population 
denote number cheaters correctly identi ed number cheaters decision number cheaters wrongly assessed analogously honest agents 
case constant cheating get 
cheaters case variable cheating get 
cheaters see method works perfectly case constant cheating probability quite large cheater population 
fact agents cheating population cheats 
comparing detailed results simple assessment algorithm whichwe omit space reasons see main advantage complex assessment algorithm resolve undecided cases 
case variable cheating probability method quite robust agents agents cheat rarely considered honest 
observe experiments number experiences agent order magnitude agent population form global knowledge 
fact simulations relatively low number agents order keep computational cost simulation limits 
running experimental setting agents cheating constant agent encounters shows results quality quality factor 
indicates exists substantial dependency method total population size amount experience single agent collects 
unexpected long agent population built uniform manner 
summarizing experimental evaluations con rm large expected method show detection cheating agents fact possible pure peer peer environment fully decentralized reputation management 
wehave identi ed questions addressed trying nd solution problem trust assessment reputation management decentralized environment 
analyzed simple robust method shows solution problem feasible 
rst contribution problem number issues research remain open 
see need method wider parameter range detailed evaluation criteria 
second probabilistic analysis analyse underlying probabilistic processes eventually lead precise methods 
rst steps direction lead particular formal justi cation decision criterion algorithm 
third plan incorporate mechanisms existing applications le sharing systems improve quality users obtain feedback practicability 
abdul rahman hailes supporting trust virtual communities proceedings rd hawaii international conference system sciences 
aberer grid self organizing access structure information systems epfl technical report dsc appear coopis trento italy 
adar huberman free riding gnutella technical report aug 
clark 
face face peer peer networking 
ieee computer january 
frank dabek emma frans kaashoek david karger robert morris ion stoica hari balakrishnan building peer peer systems chord distributed lookup service proceedings th workshop hot topics operating systems hotos viii 
marsh formalising trust computational concept ph thesis 
bin yu munindar singh mechanism reputation management electronic communities proc 
th international workshop cooperative information agents matthias klusch larry kerschberg eds lecture notes computer science vol 
springer 

