algorithmic game semantics tutorial samson abramsky samson comlab ox ac uk oxford university computing laboratory 
game semantics emerged powerful paradigm giving semantics variety programming languages logical systems 
construct syntax independent fully models spectrum programming languages ranging purely functional languages languages non functional features control operators locally scoped 
substantial survey state art game semantics circa previous marktoberdorf volume 
aim tutorial presentation give indication game semantics developed new algorithmic direction view applications computer assisted verification program analysis 
promising steps taken direction 
hankin malacaria applied game semantics program analysis certifying secure information flows programs 
particularly striking development mccusker captures game semantics fragment idealized algol remarkably simple form regular expressions 
leads decision procedure observation equivalence fragment 
subsequently extended approach call value language arrays model checking hoare style program correctness assertions 
believe time ripe systematic development algorithmic approach game semantics 
game semantics features promising point view 
provides concrete way building fully models 
clear operational content admitting compositional methods style denotational semantics 
basic objects studied game semantics games strategies games 
strategies seen certain kinds highly constrained processes admit kind automata theoretic representations central model checking allied tex methods computer assisted verification 
time games strategies naturally form rich mathematical structures yield accurate models advanced high level programming languages various full abstraction results show 
promise approach carry methods model checking effective analysis circuit designs communications protocols structured programming situations data types control flow important 
benefit algorithmic approach embodying game semantics tools making concrete algorithmic accessible meaningful practitioners 
see game semantics having potential fill role popular formal semantics called david schmidt help bridge gap semantics programming language communities :10.1.1.28.2978
game semantics successful terms semantic theory aim useful usable wider community 
relation extensive current activity software model checking computer assisted verification see approach distinctive founded highly structured compositional semantic model 
means directly apply methods program phrases terms context free variables high level language procedures local variables data types soundness methods guaranteed properties semantic models 
contrast current model checking applies relatively flat unstructured situations system analyzed transition system automaton 
aim build tools methods developed verification community exploring advantages offered semantics approach 

overview section shall informal overview game semantics followed step step development constructs procedural programming language modelled approach 
formalize descriptions elementary tools formal language theory guarantee semantic descriptions effective serve basis model checking program analysis 
systematic account section section discusses model checking 
tex 
game semantics procedural language 
informal proceeding precise formalization give informal presentation main ideas examples aim conveying close programming intuitions formal model name suggests game semantics models computation playing certain kind game participants called player opponent 
thought representing system consideration represents environment 
case programming languages system corresponds term piece program text environment context term 
key point games models differ process models distinction actions system environment explicit 
fuller discussion ramifications distinction see 
games shall consider moves environment sets system going players moves alternately 
moves may played determined rules particular game 
programming language type determines kind computation may take place types modelled games program type determines system behaves programs represented strategies specification responses moves may 

modelling values standard denotational semantics values atomic natural number represented simply 
game semantics number modelled simple interaction environment starts computation initial move question number may respond playing natural number answer question 
game natural numbers looks strategy plays play tex diagrams time flows downwards begun playing step responded strategy dictates 

expressions interactions required model expressions little complex 
view taken game semantics environment expression consumes output provides input expression consumes input produces output 
game involved evaluating expression formed copies inputs output result evaluating output copy may demand output playing move may provide 
input copies situation reversed may demand input move role moves input copy reversed 
typical computation natural strategy interpreting expression form 
play particular run strategy modelling addition operation asks output ask input provides input ask second input provides input give output 
important notice play copy column diagram valid play possible third move shown supplying input function immediately 
example illustrates intensional character game semantics 
strategy addition operation possibility strategy evaluated arguments opposite order 
distinct strategies computing operation function 
distinction may appear purely functional setting ability tex distinctions crucial come model non functional features state control 

interaction composition strategies game semantics intended provide compositional interpretation programs just small programs put form large ones strategies combined form new strategies 
fundamental glue traditional denotational semantics function application game semantics interaction strategies gives notion composition 
consider example addition type combine just substitution logical terms cut rule 
order represent composition strategies interact 
add plays move copy corresponding asking value feed move strategy conversely strategy responds feed move move back add 
hiding action copy obtain strategy representing unary operation adds argument expected 
game semantics composition functions modelled csp style parallel composition hiding 
tex 
variables copy cat strategies interpret variable play follows basic example copy cat strategy 
note stage strategy simply copies preceding move copy 
clearly specific idea applied game 
copy cat strategies fundamental importance game semantics recognized 
note provide identities respect composition 
example form composition corresponding strategy strategy addition 
repeatedly applying composition strategies constants variables operations addition build interpretations arbitrary expressions 
basic data types bool interpreted game true false important additional example operation conditional bool cond tex plays follows bool true bool false strategy conditional ask boolean argument get true play copy cat second argument result get false play copy cat third argument result 

formalization continue development semantics set simple framework definitions formal precise 
interpret type programming language alphabet moves 
play game interpreted word string sequence alphabet 
strategy represented set complete plays strategy language alphabet moves 
significant fragment programming language strategies arising interpretations terms turn regular languages means represented finite automata 
fact preferred means specification strategies certain class extended regular expressions 
recall firstly standard syntax regular expressions 
ranges alphabet 
expressions interpreted languages subsets set strings shall recall basic definitions extensive background refer standard texts 
notation need refer explicitly language denoted regular expression shall write 
briefly recall definitions 
fst mg tex 


fag extended regular expressions consider additional constructs homomorphism precisely map uniquely induces homomorphism free monoids note finite map finite object 
interpretation constructs obvious intersection languages direct image language homomorphism inverse image 
fs standard 
proposition restrict finite alphabets particular homomorphisms map finite alphabets extended regular expression denotes regular language recognized finite automaton effectively constructed extended regular expression 
briefly indicate arguments showing regularity preserved extended regular operations 
product automaton construction 
homomorphisms commute regular expression operations 
recognizes recognizes alphabet transformations interpret types alphabets getting types right interpretation terms strategies require transforming appropriately different alphabets restricted form homomorphisms 
ideas simple repeatedly mastered stage 
tex glue types disjoint union fx xg fy canonical maps arising disjoint unions 
inl outl inr outr inl inr outl outr outl outr exercise verify outl inl id outr inr id say outr inl 
inl outl 
example shuffle product regular expressions alphabet outl outr inl outl inr outr exercise verify expression yield shuffle product languages denoted set shuffles interleavings strings drawn 
reader may wonder immediately stipulate alphabets finite 
infinite alphabets arise naturally defining game semantics example game basic type infinitely moves useful consider general situation lose effectiveness general 
note definitions meanings extended regular expressions formal languages sense alphabet infinite 
reason consider extension syntax regular expressions certainly preserve regularity general 
consider infinite summation course interpreted union family languages 
extension conway classic treatise 
tex important significant fragment language semantics describe extended regular expressions excluding infinite summations finite alphabets suffice proposition apply 

denotational semantics la hopcroft ullman proceed formal description semantics 
firstly basic data type set data values specify alphabet moves md fqg note bool follow pattern 
case idea initially request value possible responses drawn set note infinite alphabet 
consider finite set data values 
interpret disjoint union alphabets mb 
mb mb tagging elements disjoint union indicate games 
move occurs precise alignment columns moves informal displays plays corresponding play word alphabet written 


general procedure follows 
term context give extended regular expression jx bk language denoted strategy interpreting term 
tex example constant bk 
operation addition type interpreted 


note extended regular expression infinite alphabet involves infinite summation 
exercise give definition addition truncated natural numbers note just matter restricting infinite summations finite ones 
verify resulting expression denote regular language 
exercise write regular expression giving interpretation conditional bool bool 
infinite summation variable interpreted 

set data values basic type 
show interpret composition 


interpretation composition instance 
course compositional 
assume defined ak jx 
bk premises rule composition 
assemble alphabets premises assign names canonical alphabet transformations relating 
subsequent examples tag copies type easier track component disjoint union column move occurs 
tex ma ma 
mb ma 
mb 
mb central type diagram combines types premises including type form locus interaction type arises type hiding erasing locus interaction internal compound system formed composition 
interpretation composition parallel composition plus hiding 
formally write 
bk algebraic expression may somewhat opaque note equivalent intuitive expression fs ma 
mb means string symbols erased 
set expression recognised essentially definition parallel composition plus hiding trace semantics csp 
intuitive algebraic expression gave official definition advantage making apparent regular languages closed composition immediately yielding construction automaton recognise resulting language 

commands point formal descriptions programming constructs considered far 
shall go complete description semantics procedural language 
may come pleasant surprise tools developed easily extended cover commands local variables procedures 
firstly consider commands 
language basic type com operations skip com seq com com com cond bexp com com com bexp com com tex colloquial equivalents seq cond operation 
typing rule combined composition rule build complex commands just expressions 
game interpreting type com extremely simple run done thought kind scheduler interface environment command opportunity schedule playing move run 
command finished returns control environment playing done 
formally note com just example basic type fact unit type just data value 
alphabet moves run descriptive effect 
strategies interpreting operations simple 
firstly note skip unique constant unit type skip run 
done strategy interprets sequential composition 
seq com com com run run done run done done tex formally just seq com com com run 
run 
done 
run 
done 
done think sequential composition working follows 
asked run environment begins asking argument run argument responds signalling run completion asks second argument run completed signals completion environment 
exercise give strategies interpret cond 
expressible non extended regular expressions 
note way modelling commands sequential composition radically different traditional approach denotational semantics see commands modelled state transformers 
roughly speaking functions states states sequential composition function composition 
fully understand difference point view see imperative variables modelled approach topic 

imperative variables distinctive part imperative language course store commands operate 
interpret mutable variables take object oriented view advocated john reynolds 
view variable say example store values type seen object methods read method dereferencing giving rise operation type var write method assignment giving operation type var com 
identify type variables product types methods setting var com tex assignment dereferencing just projections interpret command strategy com com run read write ok ok write ok place run done assignment part read place dereferencing part emphasize moves initiate assignments dereferencing arbitrary commands natural number expressions 
fact shall slightly simplify description 
shall elide opening moves write operation simply moves form write possible value data type ok possible 
alphabet type var imperative variables values set stored var fwrite dg operations reading writing form assign var exp com assign deref var exp deref strategy assign assign var exp com run 

write 
ok 
done exercise give strategy deref 
compute strategy obtained 

block structure key point interpret allocation variables correctly variable example bound genuine storage cell various reads writes expected relationship 
general term free variable interpreted strategy var tex type interpret new strategy binding memory cell 
game semantics easy 
strategy play moves may repeated var part 
play var part look 
var write ok write ok read read 
course constraining reads writes expected relationship 
obvious strategy cell var plays storage cell responding read value written 
strategy interpret new composition cell new jmk cell important properties local variables immediately captured interpretation locality action var hidden composition environment unaware existence local variable 
irreversibility interacts cell way undo writes 
course return value stored cell previously performing new write 

commands revisited get better perspective command combinators 
suppose sequential composition var com var com var com tex game semantics command formed composition seq combinator commands pictured follows 
var com com com run run 
done run 
done done note simple behaviour sequential composition combinator composition strategies sequence arbitrarily complex commands exercise compute semantics 
contrasted traditional denotational semantics imperative state state val loc states modelled mappings locations values state snapshots 
programs modelled state transformers functions relations state snapshots sequential composition function relation composition 
turns hard give accurate models locally scoped imperative state models introduce functor categories full abstraction hard achieve 
contrast track stream consciousness variable separate autonomous process 
similar approach modelling variables taken process models example milner ccs 
greater degree structure provided game semantics distinction constraints imposed rules game enable obtain merely sound model fully 

full language give systematic account syntax semantics full language considering including order procedures 
tex 
syntax firstly shall precise syntax language interpreting 
assume family basic data types just sets data values bool 
data type types exp var expressions produce values type variables store values type respectively 
data type com commands really exp element set convenient distinguish special case 
syntax basic types exp com var general class types shall consider contain order procedures basic types 
syntax reason restriction order allows simpler representations game semantics particular effectivity easier achieve 
effective representation game semantics programs higher types topic current research 
language applied typed calculus set types 
typing judgements form type system follows 
typed calculus variables abstraction 
typed calculus ii application 
tu block structure var new set constants 
described 
tex purposes giving semantics convenient variant system application rule replaced rules linear application 

tu contraction know resulting system equivalent sense exactly typing judgements derived 
exercise show derive arbitrary instances new rules original system conversely derive instance original rule application new system 

types alphabets step game semantics interpret type alphabet moves fact basic types convenient define sets qb ab questions answers type respectively qb ab qb ab mb exp fqg exp var fwrite dg var extend general types mb mb 
interpretation terms general format follows 
typing judgement interpreted regular expression jx alphabet 
tex 
variables 
corresponding alphabet regular expression 
qb 
ab 
qb 
ab 
copy cat strategy order procedure types 
types generic behaviour procedure called environment perform sequence calls arguments return result 
behaviour higher order procedures complicated 
see description behaviours second order functions deterministic context free languages 
exercise try give interpretation second order function variable type exp exp exp 
get idea complications arise may useful consider strategies corresponding terms discussion example see 

abstraction trivial associativity isomorphism disjoint union mb mb tex 
linear application follows similar lines previous treatment composition expect 


tu 
bk mb 
mb 
mb 

tu 
contraction uk uk id id mu simply de tags moves occurrences come occurrence property order types higher order ones de tagging results unambiguous description threads interaction involving occurrences 

local variables var new var cell write 
ok 
read 
new cell var var tex 
finitary sub language define finitary fragment procedural language finite sets basic data values 
example may consider basic types bool omitting result immediate definitions 
proposition types finitary language finite alphabets terms interpreted extended regular expressions infinite summations 
terms fragment denote regular languages 

model checking terms defined observationally equivalent written just case context 
programs closed terms type com converges evaluates skip converges 
note quantification program contexts takes side effects fully account see 
theory observational equivalence rich example non trivial observationally equivalences divergent program com new com com new skip com com new com bexp com new int new bool true exercise try reason informally validity equivalences 
theorem tex equality languages denoted regular expressions decidable 
observation equivalence finitary sub language decidable 
obtain witness construct separating context 
eval eval 
model checking behavioural properties algorithmic representations program meanings deciding observational equivalence put verifying wide range program properties practice interesting applications lie 
basic idea simple 
verify term satisfies behavioural property amounts checking ak decidable example regular 
properties specified temporal logic simply regular expressions 
example property consider sequent var com com suppose wish express property written called 
alphabet sequent var com com regular expression captures required property write 

run 
com elaborate example consider sequent exp exp var com property called argument read result immediately written 
tex time alphabet exp exp var com property captured regular expression 

read 


write 
ok 
suitable choices sets moves exercise find suitable choices exercise find interesting properties 
example illustrates inherent compositionality approach compositional semantics assigns meanings terms context 
approach combines gracefully standard methods approximation data abstraction 
idea approximation simple general ak ak means lose information approximating semantics program inferring useful information 
combines usefully fact regular expression constructions semantics monotone means approximate semantics subterms 
calculate meaning context 
sub terms embedded standard way resulting interpretation approximate true semantics jtk 
important natural way approximation arises data abstraction 
suppose simple example divide integer data type zz negative non negative 
various operations addition compatible equivalence relation add set negative non negative zz arithmetic operations defined values 
define boolean valued operations values extend type bool true false write 
extended booleans turn propagated conditionals loops non determinism naturally regular expression formalism 
example conditional type exp bool exp bool exp bool exp bool defined 

true 
false 

tex bool 
bool 
approximates meaning obvious way course quite classical flow analysis don know boolean value control conditional really true false take branches 
monotonicity properties semantics compute interpretations calculus constructs usual conclude meaning assigned term approximates true meaning properties inferred abstraction hold original program 
gives attractive approach standard issues program analysis inter procedural control flow analysis reachability analysis 
course fits framework interpretation natural way 
extant technique nicely adapted setting data independence 
program said data independent respect data type operations involving perform input output assign values type test pairs values equality 
impressive results data independence include sufficient conditions reducing verification properties universally quantified instantiations data types verification properties finite number finite instantiations 
area ripe development potential act effective bridge semantics computer assisted verification program analysis 

abramsky 
semantics interaction game semantics 
semantics logics computation pages 
cambridge univ press 

abramsky honda mccusker 
fully game semantics general 
proceedings ieee symposium logic computer science pages 
computer society press 

abramsky jagadeesan 
games full completeness multiplicative linear logic 
symb 
logic 

abramsky jagadeesan malacaria 
full abstraction pcf 
information computation 

abramsky mccusker 
linearity sharing state fully game semantics idealized algol active expressions 
hearn tennent editors algol languages pages 
birkhauser 

abramsky mccusker 
call value games 
proceedings csl number lecture notes computer science pages 
springer verlag 
tex 
abramsky mccusker 
game semantics 
schwichtenberg berger editors computational logic proceedings marktoberdorf summer school pages 
springer verlag 

ball rajamani 
boolean programs model process software analysis 
technical report msr tr microsoft research 

conway 
regular algebra finite machines 
chapman hall 

cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
proceedings th acm symp 
popl pages 

danos 
probabilistic game semantics 
proc 
ieee symposium logic computer science santa barbara june 
computer science society 

corbett bandera extracting finite state models java source code 
proceedings international conference software engineering 


regular language model hoare style correctness statements 
proc 
nd int 
workshop verification computational logic vcl florence italy 
www cs ca home 


regular language semantics call value programming language 
proc 
th conf 
mathematical foundations programming semantics aarhus denmark 
www cs ca home 

mccusker 
reasoning idealized algol regular languages 
proceedings th international colloquium automata languages programming icalp pages 
springer verlag 
lncs vol 



girard lafont taylor 
proofs types 
cambridge university press 
cambridge tracts theoretical computer science 

mccusker 
fully game semantics finite nondeterminism 
proceedings fourteenth annual ieee symposium logic computer science 
ieee computer society press 

hoare 
communicating sequential processes 
prentice hall 

honda yoshida 
game theoretic analysis call value computation extended 
proc 
icalp italy july lncs 
springer verlag 

hopcroft ullman 
automata theory languages computation 
addison wesley 

hyland 
ong 
full abstraction pcf models observables full abstraction problem ii 
dialogue games innocent strategies iii 
fully universal game model 
information computation 

laird 
semantic analysis control 
phd thesis university edinburgh 

nowak 
unifying approach data independence 
proceedings th international conference concurrency theory concur 
springer verlag 
lncs 

newcomb roscoe 
model checking data independent systems arrays reset 
proceedings vcl 

malacaria hankin 
non deterministic games program analysis application security 
proceedings th annual ieee symp 
logic computer science pages 
ieee computer society 

milner 
communication concurrency 
prentice hall 

hearn tennent 
algol languages volumes ii 
birkhauser 
progress theoretical computer science 


ong 
equivalence third order idealized algol decidable 
technical report oxford university computing laboratory 
preparation 
tex 
reps horowitz sagiv 
precise interprocedural dataflow analysis graph reachability 
proc 
acm symp 
popl pages 

reynolds 
essence algol 
de bakker van vliet editors algorithmic languages pages 
north holland 

schmidt 
need popular formal semantics 
acm sigplan notices 

stoy 
denotational semantics scott strachey approach programming language theory 
mit press 
mit press series computer science 

strachey 
fundamental concepts programming languages 
lecture notes international summer school computer programming copenhagen 

tennent 
denotational semantics 
abramsky editor handbook logic computer science pages 
oxford university press 

winskel 
formal semantics programming languages 
mit press 
foundations computing series 
tex tex 
