privacy preserving auctions mechanism design moni naor benny pinkas sumner suggest architecture executing protocols auctions generally mechanism design 
goal preserve privacy inputs participants nonessential information posteriori maintaining communication computational efficiency 
achieve goal adding party auction issuer generates programs computing auctions take active part protocol 
auction issuer trusted party assumed collude auctioneer 
case auctions barring collusion auctioneer auction issuer party gains information bids auction 
bidders verify auction performed correctly 
protocols require communication bidders auction issuer computational efficiency reasonable 
architecture implement mechanism design important factor complexity decision procedure 
imagine participating online auction run auctioneer com 
auction sealed bid second price auction known vickrey auction 
type auction highest bidder wins clearing price price winner pay equal second highest bid 
important property second price auctions optimal strategy bidders simply bid true valuation goods sale 
case assume value goods bid submit 
auction com winning announces second highest bid 
convinced com manipulate second highest bid maximize profits 
problem solved value bids hidden bidding closes preventing corrupt auctioneer manipulating auction results 
consider scenario bid second highest bid 
auctioneer place fake bids win re authors dept computer science applied math weizmann institute science rehovot israel 
email wisdom weizmann ac il 
quired pay 
day com put second unit product auction re interested 
time sets reservation price meaning clearing price maximum second highest price 
alternatively find time second highest bid 
suspect com learned previous bid highly value product set reservation price accordingly 
concern justified 
common sealed bid second price auctions replacement open cry english auction 
english auctions bidding interactive winner bidder bidders 
winners required pay highest bid essentially slightly higher final bid second highest bidder 
sealed bid auction requires interaction easier run main disadvantage english auction bid valuation highest bidder revealed auctioneer 
corrupt auctioneer may take advantage information auctions sale 
fact corrupt auctioneer take advantage learning bids non winning bidders 
scheme introduce hides information auctioneer 
problem stated varian follows current information records past behavior extremely valuable historical data estimate willingness pay :10.1.1.31.1309
appropriate technological social safeguards deal problem 
aims provide solution problem 
results interest different aspects game theory analysis auctions mechanism design assumes trustworthiness auctioneer center computes output mechanism assumption unfortunately justified real life 
auctions currently run internet open cry auctions 
reason phenomenon mistrust auctioneers handle sealed bid auctions 
introduce simple architecture ensures auctioneer gains access information legitimate honest auctioneer 
architecture justifies assumption trustworthy auctioneer 
cryptography securely compute function known principle believed results theoretical inefficient practice 
efficient example secure evaluation protocol useful applications auctions mechanism design 
protocol requires little interaction 
currently experimenting implementation protocol auctions hundreds bidders 
business market online auctions procurement large 
security privacy issues users suspicious online auctions particular business business applications involving large sums money 
protocols established auction issuer generates programs compute auctions required take active part auction 
bidders assured long auction issuer auctioneer collude auction computed correctly 
promising business opportunity implementing running auction issuer 
auctions run auctioneer backed auction issuer trusted auctioneer somewhat dubious character say unfamiliar country 
new protocols develop new markets online auctions 
rest section discusses trust issues presents suggested architecture reviews related 
section discusses protocol computing auctions section suggests general mechanism design 
open questions discussed section 
managing trust aim minimize level trust bidders place auctioneer sealed bid auctions general mechanisms 
goal especially important online auctions long term relationships bidders auctioneers exist auctions may run small scale parties 
mechanism design deals design protocols selfish parties 
goal protocol aggregate preferences parties reach social choice decide community build bridge route packets network wins auction 
party utility function expressing valuation possible outcome protocol 
party sends information utility function center course choose report untrue utility function believes benefit derived 
center determines outcome protocol reports received 
goal develop mechanism designs parties incentive report false utility function 
revelation principle states mechanism direct incentive compatible mechanism result see chapter 
say equivalent mechanism optimal strategy party report true utility function 
assumed parties trust center may case particularly internet setting 
revelation principle applicable center corrupt truthful bids receives 
privacy essential ensure credibility center 
method controls amount information revealed auctioneer fact offers bidders privacy physical realm sealed bid auctions physical envelopes scheme outcome auction information auctioneer gains 
example case second price auctions auctioneer learn identity highest bidder bid 
clearing price second highest bid 
auctioneer parties learn identity second highest bidder information bidder bidder bidder auctioneer auctioneer auctioneer auction issuer different entities single auction issuer multiple auctioneers numerous bidders 
bids 
parties able verify auction run properly highest bidder won clearing price correct 
auctioneers bids gather useful legitimate information 
tension bidders prefer auctioneers gain information final outcome auction auctioneers strive gather information possible 
architecture enables precise control information auctioneer receives 
example auctioneer allowed learn aggregate statistics bids average bid number bids certain range identity bidders associated bid 
variants easily incorporated schemes 
architecture entities architecture introduces new entity auction issuer ai 
entity runs background ensures auctions executed properly 
architecture contains types entities depicted bidders simplest case bidders wish sell items remaining bidders interested buying items 
general case bidders parties allocate resources predefined mechanism 
bidders send message describing encrypted manner utility function auctioneer protocol receive allocation verify computed correctly 
auctioneer auctioneer runs show advertises auction receives bids bidders communicates auction issuer computes output protocol 
auctioneer party merely organizes auction mechanism 
bidders example selling item bidders interested buying 
protocol ensures auctioneer uncover information bids receives computing desired outcome protocol auction issuer 
auction issuer auction issuer ai responsible coding program computes output protocol preserve privacy supplying program auctioneer 
preparation program completed ahead time dependent identities auctioneer bidders 
ai required interact bidders performs single round interaction auctioneer auctioneer receives bids 
ai service provider provide programs auctions carried auctioneers 
scheme efficient 
communication pattern identical insecure auction bidder required send single message auctioneer 
running time procedure determines outcome auction just seconds modern computer 
remainder concentrate solution second price sealed bid auctions 
solution privately implement mechanisms price kth price auctions auctions reservation prices double auctions generalized vickrey auctions groves clarke mechanisms demonstrated section 
furthermore possible architecture tasks stable matching residents hospitals decision making 
trust architecture auction secure providing auctioneer auction issuer collude 
note ai required trusted third party security guaranteed long auctioneer ai collude 
architecture ensures auctioneer ai uncover information bids 
precisely consider ideal model special party fully trusted parties 
auction model conducted trivial manner parties submit bids trusted party computes outputs results 
note model information leaked bids inevitable 
protocol suggest ensures party gains information ideal model 
likewise auctioneer auction issuer blocked learning ideal model act collusion auctioneer auction issuer enables privacy bidders 
bidders need trust ai auctioneer collusion assured ai auctioneer learn ideal model 
sense bids locked double lock vault key hands auctioneer hands ai 
generally coalition auctioneer auction issuer bidders powerful ideal model bids submitted bidders learned 
consequently extent bidders trust auctioneer auction issuer usually put banks credit card companies software vendors 
auctioneer party wanting organize auction possible variations regarding information learned different parties 
example highest bidder clearing price publicly announced 
extreme information revealed highest bidder seller 
winner learn met winning criteria reveals limited information bids 
protocol differs ideal model enables auction issuer learn number bidders 
placing upper bound number bidders simple prevent information revealed auction issuer 
auction issuer typically established party financial institution large supplies services numerous auctioneers 
auction issuer need communicate directly bidders need know identities eliminating danger stealing customers auctioneers 
bidders assured privacy preserved provided participate auction auctioneer uses ai programs 
appealing property schemes prevent disputes regarding operation auctioneer 
protocol parties verify auctioneer computed desired auction mechanism correctly 
assume public key auction issuer known bidders 
require public key infrastructure pki 
related internet auctions topic major commercial research efforts 
kumar feldman describe issues concerning internet auctions application auctioning goods internet 
chui zwick thorough survey commercial internet auctions 
academic auction servers internet enable experimentation complex auctions offered commercial sites 
example server university michigan supports mth th price double auctions multiple sellers 
design academic auction server supports combinatorial auctions bidding automated agents 
exciting topic cryptographic research secure function evaluation see date discussion 
function xn possible principle construct protocol allows group parties party private input ff jointly evaluate ff ff ff 
protocol parties learn ff ff ff party learn inputs fff computed ff ff ff ff 
auction considered evaluation function bids tempting try protocol conduct auction 
drawback protocols complex require significant interaction parties 
secure long certain number parties collude maliciously 
protocols basis auction protocols see 
suggestions distributing operation auctioneer multiple servers manner secure long servers operate maliciously 
franklin reiter developed distributed system sealed bid auctions ensures confidentiality bids bidding period :10.1.1.46.7960
system enables bids backed financial commitments bidders 
tygar kikuchi systems secure price second price sealed bid auctions preserve privacy bids winning bid chosen variant briefly mentioned section :10.1.1.46.7960
systems distribute operation auctioneer servers privacy guaranteed long servers collude protocols require third servers collude need minimum servers 
different auction scheme suggested re cachin involving auction servers requiring users contact just single server 
receiving bids auction servers engage rounds communication list bidders sorted bids bids 
systems require bidders communicate directly servers 
furthermore systems require high interactivity servers exchange numerous rounds interaction 
requirements impose bandwidth latency problems auction servers 
motivation global party auction issuer participate server auctions considerable amount resources invested auction 
implication auction servers essentially managed organization auctioneer 
note distinction architecture architecture suggest 
privacy guaranteed auctioneer trusted combine information held different servers controls 
assumption enforceable verified outsider 
consequently protection external break ins auctioneer servers presumption threshold servers break ins exceeded 
architecture requires complete trust auctioneer case small internet auctioneers justified see 
compared solutions architecture provides bid privacy auction require distribution auctioneer servers 
uses single round communication auctioneer auction issuer separate organization auction issuer 
addition scheme implement general mechanisms 
considers online english auctions single auctioneer corrupt secures selective blocking bids amount selective early termination auction 
schemes obtain similar properties sealed bid auctions 
employs techniques developed secure function evaluation obtains communication efficient multi party protocols computing auctions 
particular employ garbled circuit technique attributed yao 
able obtain efficient protocols assign different roles players bidders auctioneer auction issuer 
see similar phenomenon 
protocol section provide high level description protocol running secure auctions 
protocol rests number cryptographic tools described sections 
section describes complete protocol section discusses overhead possible optimizations section describes prototype implementation 
high level description protocol protocol comprises steps depicted 
auctioneer publishes details auction organizing 
include rules selection winning bids chosen closing time auction issuer ai supporting auction 
bidder bidder bidder auctioneer auction issuer high level description protocol single auction issuer auctioneer publishes auction 
bidders place bids 
auctioneer sends message auction issuer receives garbled circuit inputs 
auctioneer computes result auction 

bidders submit encrypted bids auctioneer 
ai decrypt part encryption discover actual bids 

ai generates program compute output auction 
precisely generates circuit composed boolean gates performs task circuit step performed advance prior submission bids 
auctioneer forwards portions bids ai decrypts bids uses compute garbled inputs circuit 
sends circuit inputs auctioneer signed translation table decrypts output circuit alternatively ai send garbled program bulk communication advance 

auctioneer uses garbled inputs encrypted circuit compute output circuit 
publishes result signed translation table received ai 
previous designs multi party protocols require parties interact furthermore exchange rounds communication 
novelty approach design secure multi party protocol preserves communication pattern auction protocol bidder required exchange limited number messages single auctioneer 
notice new communication channel required protocol compared protocol security single back forth communication round auctioneer ai bids received 
examine overhead protocol section 
circuits compute output auctions reasonable size 
example bidders bids range possible values number gates circuit computes second price auction log small constant see details section 
ai auctioneer perform applications pseudo random function gate applications public key operation input wire 
modern processor possible perform hundreds thousands applications pseudo random function dozens public key operations single second 
computational overhead protocol order second bidder 
ot sender chooser input oe output oe table oblivious transfer cryptographic tools protocol uses types cryptographic tools pseudorandom functions oblivious transfer 
pseudo random functions pseudo random function function distinguished truly random observer granted access function black box manner 
assume example function fk specified short key accessed observer adaptively specifying inputs obtaining value function inputs 
see precise definition various constructions working assumption block ciphers des triple des keyed way hash functions hmac modeled pseudo random function 
function fk implemented keying block cipher key encrypting keying hash function applying evaluation pseudo random function considerably cheaper typical public key operation 
oblivious transfer proxy oblivious transfer party protocol known oblivious transfer ot 
protocol involves parties sender knows secret values hm chooser input oe 
protocol chooser learns oe learning gammaoe sender learns oe 
summarized table 
notion oblivious transfer suggested goldreich lempel generalization rabin oblivious transfer 
date discussion ot see goldreich 
oblivious transfer protocols efficient noninteractive ot protocols bellare micali particularly attractive 
combination protocols proof techniques yields efficient ot protocol decision diffie hellman assumption 
describe protocol appendix main computational overhead protocol public key encryptions conducted sender public key decryption conducted chooser proxy oblivious transfer extend notion ot proxy oblivious transfer 
protocol involves parties sender knows inputs chooser input oe third party proxy input serves chooser proxy learning output 
protocol proxy learns oe overhead achieved protocol uses random oracle function concrete function assumed behave random function 
assumed functions exist protocol proof techniques require additional exponentiations 
proxy ot sender chooser proxy input oe output oe table proxy oblivious transfer parties learn 
note proxy learn oe 
definition summarized table 
appendix describe protocol implements proxy ot overhead identical protocol ot 
protocol computing auctions auction issuer sender bidders auctioneer proxy 
secure function evaluation parties describe secure function evaluation protocol parties variant protocol yao see 
protocol run parties input owner program owner input value input description function protocol learn information learn apply protocol key component auction protocol program owner auction issuer input owner corresponds auctioneer 
program computes result auction 
protocol expressing combinatorial circuit gates defined fixed base include functions theta 

bits input entered input wires propagated gates 
protocol party secure function evaluation input input value input combinatorial circuit computes output output 
protocol ffl encrypting circuit assigns wire circuit random values corresponding values wire random values long keys pseudo random function say bits long 
denote value wire assigns wire random permutation 
denote hw garbled value wire consider gate computes value wire function wires bk 
prepares table tg enables computation garbled output hw ck garbled inputs values hw hw garbled inputs table disclose information output inputs reveal values bits bk inputs output construction tg uses pseudo random function output length jw 
assume fan gate 
table contains entries form ck phi phi ck bk 
entry include index explicitly deduced location 
table masks garbled value output wire output pseudo random function keyed garbled values input wires 
verify table enables computation garbled output value garbled input values assume knows hw hw find entry table tk compute exclusive phi 
result hw ck ffl coding input tables described enable compute garbled output gate garbled inputs 
tables garbled values hw input wires circuit possible compute garbled values output wires 
party obtain garbled values input wires 
input wire engage oblivious transfer protocol sender inputs garbled values wire chooser input input bit 
result oblivious transfer protocol learns garbled value input bit garbled value bit learns 
sends tables encode circuit gates translation table garbled values output wires output bits 
ffl computing circuit oblivious transfer stages party sufficient information compute output circuit input 
show protocol secure proved party gain information ideal model trusted third party receives sends main observation regarding security gate masking value pseudo randomness ensures knowledge correct key values look random 
knowledge garbled value input wires discloses single garbled output value gate output values indistinguishable random security complete circuit oblivious transfer protocol ensures learns just single garbled value input wire learn value 
inductively compute just single garbled output value gate particular circuit 
permuted bit values ck hides values intermediate results gates inside circuit 
observe tables output pseudorandom function mask garbled output values gate 
masking accomplished simply xoring garbled input values corresponding garbled output values just xor table entries cancel masking elements discover relations garbled values 
pseudo random function essential hide relations different masking elements 
fan gate greater different input pseudo random function gate wire 
simple method achieving assign gate unique identifier ig ig phi ig masking 
possible adapt protocol circuits gates inputs wires possible values 
size table gate inputs values overhead note communication parties done single back forth round prepare circuit advance input known consider circuit inputs gates 
protocol requires prepare tables send major communication overhead protocol performed offline prior disclosure input case binary gates communication overhead times length output pseudorandom function typically bytes long 
main computational overhead protocol computation oblivious transfers 
require parties perform total exponentiations 
party computes output circuit stage involves applications pseudo random function 
overhead stage typically negligible compared oblivious transfer stage 
secure function evaluation auctions computation auctions involves types parties bidders know inputs auction issuer prepares circuit auctioneer learns output circuit 
secure protocol preserves original communication pattern auctions bidder interacts auctioneer 
uses single additional round communication auctioneer auction issuer 
protocol evaluates function computes result auction 
second price auction bids xn function xn hi pi identity highest bidder max xn max gamma xn second highest bid 
specification function define ties broken 
consider protocol section party secure function evaluation 
key observation protocol multiple inputs xn known different parties party garbled version circuit evaluates garbled values bits evaluate xn learning 
observation shows transform party protocol multi party protocol computing auctions auctioneer party inputs known bidders auction issuer party step missing allowing auctioneer learn garbled values bidders inputs 
done proxy oblivious transfer 
protocol secure evaluation auction input bidder input bid auction issuer description function computes auction 
output auctioneer compute xn 
protocol ffl encrypting circuit ai constructs circuit computes auction 
circuit identically manner party garbled circuit party protocol 
ffl auctioneer advertises auction terms public key ai invites bids 
ffl coding input bidder engages proxy oblivious transfer protocol bits protocol ai sender inputs garbled values input bit 
bidder chooser input input bit auctioneer proxy 
protocol auctioneer learns garbled value input bit value ffl computing circuit proxy oblivious transfer stage auctioneer possesses sufficient information compute circuit independently exactly party protocol 
complete specification protocol discuss issues 
communication pattern bidders communicate auctioneer auction issuer bidders 
naive communication pattern proxy ot protocol consists stage bidder sends message auctioneer message ai second stage ai sends message auctioneer 
structure requires direct communication bidder ai trying avoid 
bidders auctioneer communication channel ai 
bidder takes message sent ai encrypts ai public key non malleable encryption scheme see sends auctioneer 
bidders completed phase auctioneer send messages ai 
encryption scheme security crucial encrypt messages bidders non malleable encryption scheme defined introduced 
scheme prevents auctioneer causing meaningful changes cleartext changing ciphertext fact auctions example need non malleable encryption suppose example encryption simply xoring bid time pad 
easy reverse bits bid reversing corresponding bits ciphertext 
public key ai auctions secure chosen ciphertext attacks post processing mode see date discussion issues 
care taken prevent replay attack repeats bid old auction new 
simply handled adding names auctions say auctioneer name date 
bidders add name plaintext messages encrypt 
non malleability property assures name modified 
ai sure engage auction name twice uses fresh garbled circuit auction 
verifying output bidders verify auctioneer computed circuit constructed ai auctioneer sent bids ai bids considered computing outcome 
naive verification procedure require auctioneer publish tables garbled input values circuit signed ai allow bidders simulate computation 
efficient verification method signed translation table ai generates output wires circuit 
output wire table contain entries way function auctioneer displays values hb output wire 
bidder verify hb appears table 
way way auctioneer generate computing circuit 
simple method verifying bids considered auction requires ai sign list hash values messages received bidders 
hash values displayed auctioneer 
bidders check ai signed hash messages 
corrupt auction issuer different type attack involves corrupt auction issuer 
ai bidder subset bidders example provide program declares certain bidder winner 
alternatively disrupt computation sending incorrect values input wires 
types attacks detected cut choose technique ai required provide copies program including commitments garbled input wires 
auctioneer asks remove provide inputs half copies examines compute desired function runs protocol remaining copies verifying yield output 
probability corrupt ai caught exponentially small copies opening sufficient ai caught cheating lose credibility risk benefit ratio collusion quite small fact sufficient auctioneer decide random require single copy program setting probability risk willing take 
denial service attack bidder corrupt bidder disrupt computation auction preventing auctioneer receiving correct garbled input values proxy ot stage see appendix 
solution attack enable auctioneer prove ai event took place receive garbled values corresponding bid bidder 
care taken prevent corrupt auctioneer mechanism complain innocent bidders learn bids 
see appendix details solution 
defined example fx pseudo random function circuit 
computational communication overhead different parties protocol incur different computational communication loads 
survey 
bidder engages chooser proxy oblivious transfer protocol number times proportional number bits input 
implementation propose implies number exponentiations proportional input length 
application auction yields modest load 
note encryption ai public key done message inputs bits bidder add significantly load 
ai prepare garbled circuit done offline send auctioneer engage sender proxy oblivious transfer protocol number times proportional total number input bits 
part may significant attempted reduce see 
auctioneer participate proxy proxy oblivious transfer protocol number times proportional total number input bits 
evaluate garbled circuit means number pseudo random function evaluations proportional circuit size 
circuit size affects communication ai auctioneer total table size auctioneer perform sense put effort optimizing see 
optimizing proxy ot computation exponentiations proxy oblivious transfer stage main computational overhead protocol circuit extremely large case auctions 
proxy oblivious transfer protocol uses el gamal encryptions form delta chosen ai bidder see app 

tempting minimize communication reusing encryptions 
care taken hamper security optimization 
total length encryptions may bulk communication messages sent offline sense employ el gamal encryptions elliptic curves succinct representation gf 
optimizing circuit size consider auction bidders bid integer range represented log bits 
best circuit design second price auctions uses approximately table entries 
order optimize size tables describe circuit uses wires binary values 
assuming entry bytes table size bytes input bit 
note users bids possible values size circuit moderate delta delta table entries mbytes 
circuit price auctions half large 
possible reduce size tables factor 
case gates binary input wires saving achieved setting garbled output value function corresponding garbled input values table contain entry output value 
implementation protocol developing prototype architecture case second price auctions hundreds bidders 
implementation done python scripting language 
entire implementation takes lines python code lines code computation pseudo random function encryption 
uses el gamal public key encryption dsa signatures exponentiations bit 
exponentiations coded assembler 
proxy oblivious transfer protocol incurs communication computation overhead 
communication overhead tables code circuit sent ai auctioneer advance auction begins possibly cd rom dvd 
structure circuit sent auctioneer compute number bidders size bids 
online communication ai auctioneer proxy ot protocol bit ai receives public key sends encryptions 
proxy ot stage incurs computation overhead 
straightforward implementation requires ai compute input bit online exponentiations encryption requires auctioneer compute exponentiation decryption 
possible variant oblivious transfer low amortized overhead reduce overhead exponentiation input bits 
circuit contains gates input bit evaluation computation intensive 
evaluate gate auctioneer computes values pseudo random function 
throughput pseudorandom function hundreds thousands operations second total overhead marginal 
auctions mechanisms overhead protocol depends size combinatorial circuit evaluates function deciding outcome auction 
possible protocol computing various types auctions mechanisms expressed circuit moderate size 
auctions difference protocol price auction protocol second price auction different circuits compute result auction circuit price auctions simpler 
similar circuits express th price auctions winner highest bidder clearing price th highest bid 
note second price auctions th price auctions interactive implementation similar english dutch auction guarantees auctioneer misuse submitted sealed bids 
size circuit th price auction times size circuit price auction just 
done binary search value largest bid number inputs determining number oblivious transfers public key operations price auctions 
th price auctions proposed suitable risk seeking bidders 
wurman walsh wellman discuss design double auctions supported auctionbot 
particular consider case sell offers buy offers analyze mth price st price rules 
rules easily expressed circuits similar th price auctions consequently implemented protocol 
mackie mason varian exposition generalized vickrey auction gva powerful mechanism capable solving complex problems 
mechanism party reports utility function center calculates allocation maximizes sum reported utilities subject resource constraints 
payment party depends difference sum utilities parties chosen allocation sum utilities allocation take party account 
mechanism sell multiple units goods consumers utility function depends number units receive gva expressed small circuit consumer utility functions overly complex 
example problem selling units goods consumer utility function mere list values st nd mth unit goods 
consumer input composed values circuit decides outcome mechanism relatively simple 
note auctions implemented rounds round bidders may get add inputs notable fcc spectrum auctions 
auctions handled framework may case instances need rounds reduce leaking information taken care directly architecture 
mechanisms efforts design algorithms mechanism design involve selfish agents goal solve global problem 
routing cooperation agents 
see example walsh nisan ronen 
protocols compute algorithms requiring trust center plausibility protocols task depends complexity expressing utility functions decision procedure circuits 
particular case interest groves clarke mechanisms public produced sum reported values higher threshold 
circuit computes function quite simple circuit computes sum reported values options decides option highest sum 
simple provide private protocol computes mechanisms 
relevant application design mechanisms elicit opinions group independent experts 
rubinstein observe culture experts care recommendations accepted mechanism single equilibrium achieves public target mechanism exist experts care public 
mechanism suggest computed efficiently architecture essentially mechanism requires expert choose subset experts opinions considered learn opinions add opinion 
deci task computationally difficult regardless privacy requirements 
shows occasionally procedures compute outcome np hard sion majority opinion 
note process requires privacy expert choosing subset learning opinions 
privacy preserving implementation application useful organizations want poll opinions members realize individuals bias reported opinion believe revealed 
stable matching example global decision depends private preferences parties 
scenarios quite plausible parties hesitant reveal matching preferences center computing matching consider example matching couples prom 
architecture enables parties reveal true preferences center learn 
overhead implementing architecture application depends complexity expressing matching algorithm combinatorial circuit 
finding reasonably small circuit problem interesting problem classical gale shapley algorithm requires power indirect addressing ram translation circuit cumbersome 
research issues research investigating improve properties architecture making protocol efficient 
possible reduce trust bidders put architecture distributing task auction issuer parties 
ideally different companies knowing information currently known ai 
modest goal promising preliminary results single party generate garbled circuit offline distribute garbled gate ai servers 
system threshold auctioneer contact servers order compute auction collusion auctioneer gamma servers reveals bids note naive secret sharing achieve property 
distributing part techniques incur significant overhead 
problem backing bids financial commitments somewhat orthogonal main issues consider 
solutions problem adaptable architecture :10.1.1.46.7960
current techniques implement second price auctions hundreds thousands users reasonable overhead 
great deal research remains done improving efficiency protocol 
direction designing efficient circuits auctions mechanisms direction improving efficiency cryptographic tools extensive application oblivious transfer 
acknowledgments noam nisan uri zwick useful discussions anonymous referees comments 
auction eecs umich edu beaver micali rogaway round complexity secure protocols proc 
nd acm symp 
theory computing 
bellare desai pointcheval rogaway relations notions security public key encryption schemes advances cryptology crypto springer verlag lncs 
bellare micali non interactive oblivious transfer applications proc 
adv 
cryptology crypto springer verlag lncs 
cachin efficient private bidding auctions oblivious third party appear proc 
th acm conf 
computer communications security 
chui zwick auction internet preliminary study manuscript 
available home ust hk html clarke multiparty pricing public goods public choice 
cramer damgard schoenmakers proofs partial knowledge simplified design witness hiding protocols proc 
advances cryptology crypto springer verlag lncs 
cramer shoup practical public key cryptosystem provably secure adaptive chosen ciphertext attacks proc 
advances cryptology crypto springer verlag lncs 
dolev dwork naor non malleable cryptography proc 
th acm symp 
theory computing 
full version appear siam computing 
available www wisdom weizmann ac il naor html engelbrecht kahn protecting winner second price vs ascending bid auctions economic letters vol 

goldreich lempel randomized protocol signing contracts communications acm pp 

feige kilian naor minimal models secure computation proc 
th acm symp 
theory computing pp 

franklin reiter design implementation secure auction server ieee tran :10.1.1.46.7960
software engineering pp 

rubinstein motives implementation design mechanisms elicit opinions economic theory 
goldreich secure multi party computation working draft version 
available ucsd edu books html goldreich goldwasser micali construct random functions acm vol 

goldreich micali wigderson play mental game proc 
th acm symp 
theory computing pp 

groves incentives teams econometrica 
gusfield irving stable marriage problem structure algorithms mit press 
tygar kikuchi electronic auctions private bids rd usenix workshop electronic commerce pp 

sandholm mobile agents electronic auction house mobile agents context competition cooperation mac workshop 
impagliazzo rudich limits provable consequences way permutations th acm symp 
theory computing 
tennenholtz mechanism design resource bounded agents 
kumar feldman internet auctions rd usenix workshop electronic commerce 
luby pseudorandomness cryptographic applications princeton university press 
mackie mason varian generalized vickrey auctions 
tennenholtz price auctions working 
tennenholtz internet auctions working 
nisan ronen algorithmic mechanism design proc 
st acm symp 
theory computing 
osborne rubinstein course game theory mit press 
rabin exchange secrets oblivious transfer tech 
memo tr aiken computation laboratory 
roth sided matching study game theoretic modeling analysis cambridge univ press 
stubblebine syverson fair line auctions special trusted parties proc 
financial cryptography 
varian economic mechanism design computerized agents usenix workshop electronic commerce 
vickrey counter speculation auctions competitive sealed tenders journal finance march pp 

walsh wellman wurman auction protocols decentralized scheduling th int 
conf 
distributed computing sys 
wellman wurman real time issues internet auctions ieee workshop dependable real time commerce systems 
wurman walsh wellman flexible double auctions electronic commerce theory implementation decision support systems 
yao generate exchange secrets proc 
th ieee symp 
foundations computer science pp 

oblivious transfer essentially known suggestion public key cryptography allows implementation oblivious transfer general theorem implies state affairs 
ot existence trapdoor permutations factoring diffie hellman assumption search decision problems yielding efficient constructions hardness finding short vectors lattice ajtai dwork cryptosystem 
contrast highly ot oneway functions reason ot protocol simple implement secret key exchange 
follows impagliazzo rudich black box reduction ot way functions 
describe protocol protocols bellare micali 
inputs required outputs protocol described section 
initialization sender chooser agree large cyclic group gg generated discrete log problem believed hard 
addition agree value gg discrete log unknown preparing query chooses random value calculates pk oe pk gammaoe pk oe sends pk el gamal public key encryption system pk public keys private key corresponding pk oe sending values calculates pk pk el gamal encryption sends encryptions epk epk 
receiving desired value knowing private key corresponding pk oe decrypts epk oe oe recover oe assuming knows private key pk oe possibly know private key pk gammaoe calculate discrete log pk oe delta pk gammaoe appear decrypt messages receives note impossible know private keys protocol rule possibility possesses partial information keys obvious way obtain information problem solved require prove knows discrete log public keys disclosing 
proof efficiently done techniques cramer cost exponentiations 
resulting protocol secure decision diffie hellman assumption believed secure 
alternatively postulates existence random oracles function behaves random function possible run protocol proofs 
send values sender select random value send message hg pk phi pk phi chooser 
chooser decrypt oe computing pk oe proxy ot protocol proxy ot involves third party proxy 
roles parties defined section 
protocol follows initialization parties agree large cyclic group gg generator ot protocol 
preparing query chooses random calculates pk oe pk gammaoe pk oe sends pk sends private key computes pk pk el gamal encryption sends pair random order epk error detecting code 
receiving desired value knows private key corresponding pk oe tries decrypt values uses error detecting code determine decrypted correctly 
note learn value oe choice 
order achieve security depends decisional diffie hellman assumption prove knows discrete log keys protocol ot 
alternatively random oracle ot protocol described 
method currently prototype implementation 
preventing denial service attack denial service attack described section involves bidder prevents auctioneer retrieving correct garbled values proxy ot stage 
details bidder chooser sends auctioneer proxy private key correspond public keys sent auction issuer sender 
auctioneer decrypt messages received auction issuer 
straightforward solution require bidder prove auctioneer sent correct private key 
proof quite inefficient 
different approach enable auctioneer prove ai auctioneer received incorrect private key bidder 
care taken prevent corrupt auctioneer innocent bidder 
concrete solution follows ai chooses key bidder uses encrypt garbled values corresponding input bits bidder 
proxy ot protocol transfer encrypted values 
auctioneer checks received legitimate values error detection code 
values input wires bidder received correctly auctioneer asks receive key ai 
uses key decrypt received values retrieve garbled values input wires 
auctioneer asks receive garbled inputs corresponding input bidder 
note solution adds communication round auctioneer ai typically consists message containing single key bidder length quite short 
