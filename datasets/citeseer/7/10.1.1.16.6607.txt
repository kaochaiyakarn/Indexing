building interpreter vmgen anton ertl tu wien david gregg trinity college dublin 
vmgen automates tasks writing virtual machine part interpreter resulting coding debugging maintenance effort 
gives quantitative data source code generated code vmgen interpreter gives examples demonstrating simplicity vmgen 
interpreters popular approach implementing programming languages interpreters offer benefits ease implementation portability fast edit compile run cycle 
interpreter generator vmgen automates tasks writing virtual machine vm part interpretive system takes simple vm instruction description file generates code executing tracing vm instructions generating vm code disassembling vm code combining vm instructions superinstructions profiling vm instruction sequences find superinstructions 
vmgen special support stack vms features useful register vms 
vmgen supports number high performance techniques optimizations 
resulting interpreters tend faster interpreters language 
presents example vmgen usage 
detailed discussion inner workings vmgen performance data 
example overview running example example provided vmgen package interpretive system tiny modula style language uses jvm style virtual machine 
language supports integer variables expressions assignments structures function definitions calls 
example interpreter consists conceptual parts front parses source code generates vm code vm interpreter executes vm code 
correspondence anton ertl institut fur technische universitat wien wien austria email anton mips tuwien ac vmgen available www tuwien ac anton vmgen 
bibtex entry available www tuwien ac papers 
published compiler construction cc pages springer lncs name lines description makefile mini inst vm instruction descriptions mini common declarations mini front scanner mini front parser vm code generator support symbol tables main peephole blacklist vm instructions combined template vm disassembler engine template vm interpreter peephole template combining vm instructions profile template vm instruction sequence profiling stat awk template aggregate profile information seq rule awk template define superinstructions template files total specific files total total fig 

source files example interpreter shows quantitative data source code example 
note numbers include comments relatively extensive particular half lines mini inst comments empty 
files marked templates typical vmgen application copied example changes files cost little 
files contain code typically written specifically application 
specific files mini inst contains vm description addition vm related declarations mini calls vm code generation functions mini calls vm interpreter disassembler profiler support vmgen generates lines files mini inst see fig 

expansion factor source file indicates vmgen saves lot coding maintaining debugging vm interpreter 
name lines description mini vm disassembler mini gen vm code generation mini labels vm instruction codes mini peephole vm instruction combining mini profile vm instruction sequence profiling mini vm vm instruction execution total fig 

vmgen generated files example interpreter addition reduced line count reason vmgen reduces number bugs new vm instruction just needs inserted place mini inst code generating added front manually coded vm interpreter new instruction needs code places 
various generated files correspond directly template files template files containing wrapper code works vms generated files containing code tables specific vm hand 
simple vm instructions typical vmgen instruction specification looks sub line gives name vm instruction sub stack effect takes integers stack pushes integer stack 
line contains code accesses stack items variables 
loading storing stack instruction dispatch managed automatically vmgen 
example lit lit instruction takes immediate argument instruction stream indicated prefix pushes stack 
user supplied code necessary lit 
vm code generation vm instructions generated rules mini expr term term term num code generation functions gen sub gen lit generated automatically vmgen gen lit second argument specifies immediate argument lit example number compiled front 
parsing generating code subexpressions generating code expression naturally leads postfix code stack machine 
reasons stack vms popular interpreters 
programmer just ensure rules term expr produce code leaves exactly value stack 
power yacc actions sufficient example implementing complex language user probably choose sophisticated tool build tree manually code tree traversals 
cases generating code post order traversal expression parse tree easy 
superinstructions addition simple instructions define superinstructions combination sequence simple instructions lit sub defines new vm instruction lit sub behaves way sequence lit sub faster 
adding instruction mini inst rebuilding interpreter superinstruction generated automatically call gen lit followed call gen sub 
need define superinstructions generate automatically profile executed vm instruction sequences compile vm interpreter profiling enabled run programs representing workload 
resulting profile lists number dynamic executions static occurence sequence lit sub 
lit sub indicates sequence lit sub occured places total dynamic executions 
data aggregated stat awk script user choose promising superinstructions typically small awk perl script transform selected sequences superinstruction rule syntax seq rule awk 
original intent superinstruction features improve runtime performance interpreter achieves goal noticed interpreter construction easier places interpretive system generate sequence existing instructions define new instruction generate manually written interpreter approach yields faster interpreter requires 
vmgen just take approach sequence optimized superinstruction occurs frequently way get best approaches little effort run time performance 

anton ertl david gregg andreas krall bernd 
vmgen generator efficient virtual machine interpreters 
software practice experience 
accepted publication 
