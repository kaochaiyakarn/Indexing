simple implementation technique priority search queues ralf hinze institute information computing sciences utrecht university box tb utrecht netherlands ralf cs uu nl presents new implementation technique priority search queues 
data type amazing blend finite maps priority queues 
implementation supports logarithmic access binding key constant access binding minimum value 
priority search queues instance give simple purely functional implementation dijkstra single source shortest paths algorithm 
non technical concern foster data types views 
priority search queues largely ignored functional programming community believe deserve known better 
views prove worth defining convenient interface data type providing readable imple mentation 
categories subject descriptors programming techniques applicative functional programming programming languages language classifications applicative functional languages programming languages language constructs features data types data data structures trees analysis algorithms problem complexity algorithms problems sorting searching computing methodologies algorithms analysis algorithms general terms algorithms design performance keywords priority search queues views haskell tournament 
aim threefold permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
icfp september florence italy 
copyright acm 
advertise priority search queues useful data type largely ignored functional programming community deserves known better 
priority search queues amazing blend finite maps dictionaries priority queues support dictionary operations instance accessing binding key priority queue operations instance accessing binding minimum value 
give simple applications demonstrate usefulness purely functional implementation dijkstra single source shortest paths algorithm efficient implementation fit heuristics bin packing problem 
second describe simple implementation technique data type 
standard implementation priority search queues mccreight priority search trees combines binary search trees heaps 
unfortunately balanced search trees heaps go 
rotations typically maintain balance destroy heap property restoring property takes time height tree 
consequently order attain logarithmic time bounds underlying balancing scheme guarantee number rotations update bounded constant 
show possible weaken heap property rotations constant time operations sacrificing running time priority queue methods 
choose underlying balancing illus approach weight balanced trees 
third promote views 
views introduced relieve tension pattern matching abstraction 
briefly views allow type particular data type viewed free data type 
views useful providing convenient interface data type extremely helpful implementation 
views code substantially clearer 
remainder structured follows 
section briefly reviews concept views 
section introduces data type priority search queue section illustrates 
section provides simple implementation unbalanced trees 
section shows augment basic implementation balancing scheme 
section analyses running time socalled range queries 
section reviews related section concludes 

preliminaries views code haskell augmented concept views 
section briefly reviews okasaki proposal views 
view allows type viewed data type 
view declaration type consists anonymous data type view type anonymous function view transformation shows map elements view type 
simple example defines minimum view lists view ord empty mina empty empty min min min mina ax 
declaration introduces constructors empty min henceforth pattern match elements type context ord restricts instances ord 
minimum view allows list viewed ordered list 
definition selection sort nicely illustrates views selection sort ord selection sort empty selection sort mina selection sort 
view constructors freely mixed ordinary data type constructors 
fact view transformation minimum view illustrates nested patterns 
type multiple views 
view constructors may appear patterns notable tion view transformation 
view declarations implemented simple source source translation view expanded data type function 
minimum view obtain data min view empty mina rain view ord min view rain view case empty case rain view empty min min min mina 
function invoked constructors view appear patterns 
example view constructors appear view transformation 
consequently expanded recursive function 
selection sort selection sort case empty mina selection sort 
precise definition semantics refer reader okasaki proposal standard ml easily adapted haskell 

priority search queues data type priority search queue conceptually finite map supports efficient access binding minimum value binding pair finite map finite set bindings 
emphasis call arguments keys associated values priorities 
functions key prio access key priority binding 
key prio data type priority search queues parametric types keys priorities data psq operations priority search queues require totally ordered 
condition expressed haskell context ord ord 
rest omit context reduce clutter 
priority search queues support finite map priority queue operations plus called range queries 
constructors insertion 
psq 
insert ord list psq constructor represents empty queue creates queue contains single binding insert inserts binding queue contains binding key old binding overwritten ord list converts list bindings queue precondition list sorted increasing order key 
destructors deletion 
view psq empty min psq delete psq psq queue patterns empty min introduced view declaration 
function delete re moves binding key queue left unchanged contain binding key 
constructors minimum view meaning queue pattern matches empty empty matches min binding minimum priority remaining queue 
view effectively treat priority search queue list bindings ordered priority 
observers 
lookup psq ord list psq psq function lookup finds priority associated key call lookup returns queue contain key yields just priority associated function ord list converts queue list bindings ordered key 
priority search queues support dictionary priority queue operations 
little extra allow socalled range queries pt returns list bindings ordered key priorities pt 
full version discuss range queries additionally take key range account 
modifier 
adjust psq psq function adjust changes binding key applying function priority queue left unchanged contain binding key 

applications single source shortest paths problem dijkstra algorithm single source shortest paths problem serves nice example priority search queues 
algorithm maintains queue maps vertex estimated distance fi om source 
algorithm works repeatedly removing vertex minimal distance updating distances adjacent vertices 
priority search queues support operations equally 
decrease decrease decrease decrease list decrease list bs update operation typically called adjust rain foldr decrease bs 
note decrease effect priority keep presentation terse assume functions graphs provided 
vertices graph vertex adjacent graph vertex vertex function vertices returns ordered list vertices graph adjacent produces list vertices adjacent 
function dijkstra defined takes arguments directed graph weight function source vertex 
returns list vertex distance bindings determine minimal distance vertex source 
type weight vertex vertex double dijkstra graph weight vertex vertex double dijkstra loop decrease qo go oral list vertices loop empty loop min loop decrease list bs bs adjacent helper function loop uses minimum view process queue 
note computed list vertex distance bindings may contain bindings priority oo indicates graph strongly connected 
assume computation view decrease operation take log time algorithm worst case running time log best known running time purely functional implementations 

modify computation new distances follows bs adjacent obtain prim algorithm computing minimum spanning tree 
dimensional bin packing second example employ priority search queues implement fit heuristics bin packing problem 
recall standard list implementation shown worst case running time number items 
pack fit item bin pack fit foldl fit fit bin item bin fit fit bs ib ix fit bs function pack fit takes list items certain size returns list bins contain input items 
simplicity represent item size bin total size bin capacity 
priority search queues improve running time implementation log 
central idea function quickly determine bin accommodate item bins numbered consecutively 
type int pack fit item bin pack fit ord list foldl fit fit psq bin item psq bin fit case insert adjust place essential haskell non strict semantics merely require element list returned 
strict language forced define specialized version computes binding 

priority search pennants section describes implementation priority search queues unbalanced search trees 
great care taken modularize code balancing scheme added ease section discusses necessary 
noted implementation section perfectly suitable dijkstra prim algorithm require tions 
underlying idea implementation best explained metaphor knockout tournament 
consider tournament depicted 
participants course matches forms complete binary tree 
external node corresponds participant internal node corresponds winner match 
facilitate searching participants arranged fi om left lennart lennart phi erik lennart phil simon charles erik lennart mary phi richard simon warren tournament tree 
right increasing order name 
tournament trees suitable data structure priority search queues repeated entries 
champion instance appears level tree 
ways repair defect 
possibility promote losers tree turning tournament tree heap structured tree 
transformation usually involves additional matches 
example erik play mary determine second best player half tournament 
pursuing idea leads data structure known priority search tree 
come back data structure sections 
alternative possibility investigate section label internal node loser match winner drop external nodes altogether 
additionally place champion top tree obtain loser tree 
call resulting data structure priority search pennant 
notable exception exactly match pennant contain repeated entries 
important note loser tree heap structured 
nodes labelled losers dominate general subtree 
node labelled phil instance dominates right left subtree 
loser tree constitutes called semi heap 
haskell data type priority search pennants direct implementation ideas additionally introduce split keys search keys support searching 
data psq void inner ltree data ltree start loser ltree void represents empty tournament winner represents tournament won associated loser tree maximum key 
likewise start empty loser tree loser btt represents lost tt left subtree split key right subtree 
maximum key usually accessed function max key 
max key psq max key winner see section useful keep track maximum key 
priority search pennants combine features search trees semi heaps 
formulate invariants convenient view top node winner binary node empty right subtree maxi mum key ordinary split key winner loser start 
semi heap conditions priority pennant greater equal priority winner 
nodes loser tree priority loser binding equal priorities bindings subtree loser originates 
loser originates left subtree key equal split key originates right subtree 
search tree condition nodes keys left subtree equal split key keys right subtree greater split key 
key condition maximum key split keys occur keys bindings 
finite map condition pennant contain bindings key 
lennart erik phil charles mary richard simon warren heap corresponding tournament 
lennart phi erik simon charles mary richard warren semi heap corresponding tournament 
priority search pennant corresponding tree 
remarks order 
second semi heap condition shows priority search pennant contains information reconstruct original tournament tree 
ability crucial implementing priority queue operations 
second key condition ensures search key originates binding tree 
means particular delete binding tree delete key second occurrence search key 
see relatively easy maintain invariant 
consider example 
augment tree split keys obtain priority search pennant depicted 
note dotted lines mark subtrees dominated loser 
remarked semi heap structure determined comparing loser key split key node labelled phil instance dominates right subtree node labelled erik hand dominates left subtree pennant quite easily expressed haskell term winner loser loser loser start start loser start start loser loser start start loser start start note list search keys left right obtain keys participants increasing order 

nodes decorated bindings type 
convenient presentation comes small run time cost access involves extra level indirection 
production code available www 
cs uu nl ralf software speed access storing keys priorities directly nodes 
constructors empty queue singleton queue defined follows psq void 
rs winner start key 
data types psq designed effi ciently support binary operation corresponds playing match 
operation remaining functions takes pennants returns new pennant union precondition keys tree strictly smaller keys second tree 
operation illustrated 
sc sc sc void void winner winner po po lo mt winner loser note order construct loser tree require split key keep track maximum key top node 
constant time operation 
hard see preserves invariants priority search pennants 
easily define ord list 
fom sq fom fom map helper function listed full version folds list binary sub division fashion 
instance fom reduces turn evaluates tree 
general expression tree generated takes form leaf oriented braun tree 
preserves shape expression tree priority search pennant produced ord list corresponds braun tree 
means particular shape solely determined total number participants priorities 
destructors minimum view implemented follows view psq empty min psq void empty winner min second best tm 
function second best second clause deter mines second best player replaying tournament champion 
second best ltree psq second best start void second best loser key winner second best second best winner note players lost champion taken account 
origin champion determined comparing loser key split key 
straightforward see second best preserves invariants key condition second best remove search key champion easily shown define second best playing match pennants loser trees call variant del min psq psq del min void void del min winner start void del min winner loser key del min winner winner um 
argument del min legal pennant equal key second equation virtue key condition 
furthermore know champion champion passed unchanged recursive calls 
function second best seen simple optimization del min winner second best tm 

replay tournament determine origin loser comparing loser key split key key parison alternatively code information constructors building tree data ltree start ltree ltree ltree ltree 
fact representation production code 
original representation slightly easier augment balancing scheme 
observers views convenient client data type 
tremendously helpful implementing data type 
declaration allows view pennant tournament tree 
view void winner start winner loser tt key winner tt winner bt winner tt winner note taken liberty 
constructors 
little danger confusion constructors view may appear notable exception view transformation functions name may appear expressions 
view transformation essentially inverse operation 
particular winner tree matches tt guaranteed keys tt strictly smaller keys 
furthermore tt non empty 
function ord list converts queue list bindings ordered key nicely illustrates tournament view 
ord list psq oral list ord list ord list tt ord list tt ord list clause rely fact keys tt precede keys 
instructive rewrite definition ord list form views 
see resulting code harder read 
hand rewrite opens possibility small improve ments optimizing compiler able perform automatically 
step fuse view transformation original function ord list psq ord list void ord list winner start ord list winner loser key oral list winner ord list winner btt ord list winner 
note recursive calls oral list passed non empty winner tree 
furthermore maximum key split keys 
suggests specializing ord list winner traverse ord list psq oral list void ord list winner traverse traverse ltree traverse start traverse loser tt key traverse tt traverse 
functions optimized lines 
due definition ord list exhibits worst case behaviour 
easily died standard techniques 
look function similar look function binary search trees 
tournament view allows natural implementation 
lookup lookup lookup key just prio lookup tt lookup psq running time lookup proportional height tree search binding high tree 
observation suggests additionally test bindings search path cost additional comparison recursive call 
course change affects worst case average case running time 
psq just prio know key lookup lookup min key lookup lookup lookup tt lookup note version look function uses minimum tournament view 
modifier insertion deletion dictionary functions adjust insert delete easily implemented tournament view 
adjust adjust adjust key adjust tt prio adjust tt adjust modifier adjust change shape pennant 
contrast insert possibly increases height tree 
loser trees balanced annoying possibility repeated insertions may produce degenerated tree 
insert insert insert key key key key key insert key tt insert 
update case search trees deletion notoriously difficult handle insertion 
surprisingly hold priority search pennants 
reason simply tournament view modifications take place fringe tree delete psq psq delete delete key tt delete 
hybrid nature priority search pennants definition delete surprisingly attractive 
range queries second version look function query function employs views simultaneously 
minimum view prune search node encountered priority greater 
psq pt po pt pt pt know prio pt tt pt query function analysed section 
balanced scheme strengths priority search pennants compared priority search trees basic implementation easily extended balancing scheme 
schemes rotations restore balancing invariants 
rotations preserve search tree property preserve semi heap property shows 
original tree losers dominate right subtree 
implies played winner stems leftmost sub tree rotate loser tree right new root dominate right subtree 
restore semi heap property exchange 
see general exchange cost additional comparison required 
words rotations constant time operations priority search pennants 
contrast case priority search trees preserve heap property takes time height tree 
means particular order ensure logarithmic time bound number rotations update bounded constant 
red black trees trees satisfy constraint 
hand avl trees weight balanced trees guarantee bound 
ironically okasaki elegant functional implementation red black trees fails meet condition 
priority search pennants fi choose underlying balancing scheme 
pick adams weight balanced trees support insertions deletions equally 
tree weight balanced nodes subtrees element subtree times elements opposite subtree constant 
check maintain invariant node loser tree augmented size field type size int data tree lf nd size tree tree 
views smart constructors computation size field totally transparent 
leaf lf node nd size size view tree leaf node tree tree lf leaf nd node size tree size size lf size nd 
sequel smart constructors leaf node construct weight balanced trees view constructors leaf node pattern match weight balanced trees function size query size field 
balance function defined maintains weight balance single double rotations precondition subtree changed size element original tree balance 
algo rithm described detail adams 
balance size size size balance left size size balance right node balance left node rl rr size rl double left balance right node ii lr size lr double right balance operation essentially search trees 
implementation rotations elaborate maintain semi heap property 
displays possible cases single rotation right 
single rotation involves nodes node may dominate subtrees distinguish different cases 
problematic case perform additional match determine top binding 
general new top binding iff key prio cases left rotation symmetric single left node key prio node node ta node node single right node bt kt pob node node double rotations implemented terms single rota tions 
double left node single left single ght double ght node single ght single left 
double rotation defined tes single rotations additional matches required 
show additional match suces 
direct implementation double rotations left exercise reader 
remains adapt implementation section balanced trees 
done simple renaming occurrences constructors start loser patterns replaced leaf node occurrences expressions replaced leaf balance 
smart constructor node balance shape tree changed case adjust tree known balanced case ord list 
conclude section brief discussion running times various operations 
simplicity assume working strict setting 
trees height logarithmic number elements 
consequently dictionary operations lookup inset delete priority queue operations min worst case running time log 
conversion functions ord list ord list linear number bindings 
range query takes logn logr time output section contains detailed analysis 
table summarizes running times constructors insertion destructors deletion empty 
min log insert log delete log ord list observers modifier lookup log adjust log ord list log logr 

analysis range queries range query called output sensitive algorithm running time governed total number bindings tree number bindings returns result 
estimate running time determine number nodes inspected return outputs 
general observation single rotation right represents winner player enters output list additionally check players lost particular player 
pennant 
lennart selected check phil erik mary 
phil selected additionally check simon richard 
structure apparent turn binary semi heap multiway heap 
dominated sub trees children non dominated subtrees come siblings 
displays tree obtained 
transformation instance known nat ural correspondence binary trees forests see knuth 
simplify analysis assume original trees perfectly balanced example total number bindings 
special case obtain result transformation called binomial heap 
binomial heap elements node subtrees root nodes subtrees nodes subtrees nodes subtree nodes subtrees 
summing adding root obtain total nodes 
binary logarithm rewrite identity form 
right hand side sum summands 
sum summands ob tain desired maximum number successors nodes 
worst case running time proportional function formula lg calculate kj lg rj lgn 
small logarithmic running time 
running time eventually linear approaches conclude section noting priority search pennants answer range queries eciently priority search trees support log time 
reason simply heap property stronger semi heap property case binary heaps additional elements checked element enters output list 
aside shows binomial heaps essentially sequences semi heaps suited answering range queries 

related priority search queues 
commented relationship priority search pennants mc priority search trees 
briefly summarize main points 
priority search trees restricted balancing schemes number rotations update bounded constant 
contrast methods works arbitrary balancing schemes 
asymptotic running times finite map priority queue operations approaches 
priority search trees support range queries efficiently 
aside priority search trees confused cartesian trees combination search trees priority queues 
priority search tree node labelled keys key binding additional split key key binding serves split key completely determines structure 
tournament trees pennants 
tournament trees loser trees appear knuth series 
term pennant coined sack strothotte denote perfectly balanced trees require trees perfectly balanced 
pennants widespread sack strothotte employ design algorithms splitting merging heaps form left complete binary trees okasaki uses pennants fundamental building block data structures modelled number systems pennants underly binomial heaps useful analysing red black trees :10.1.1.54.6229
dijkstra algorithm 
priority search queues able implement dijkstra single source shortest paths algorithm purely functional way 
previous formulations king relied essential way stateful computations 
king writes purely function solution exists algorithms dijkstra kruskal prob ably involve state encapsulating combi 
surprisingly different data type priority search queues priority queues obviate need state 
feel resulting code clearer state formulation 
views 
views originally introduced wadler 
idea fleshed proposal extension haskell 
okasaki slightly simplified proposal adapted standard ml 
author okasaki strongly advocates views revived interest language feature 

priority search queues amazing combination finite maps priority queues support dictionary priority queue operations 
building metaphor knockout tournament developed simple efficient implementation technique data type 
developing code concept views tremendously helpful views enhanced readability modularity code 
lennart phi erik mary simon richard char es warren multi way heap corresponding binary semi heap 
applications priority search queues purely functional implementation dijkstra single source algorithm efficient implementation firstfit heuristics bin packing problem 
hope see applications 

adams 
functional pearls efficient sets balancing act 
functional programming october 
adel son vel ski landis 
algorithm organization information 
doklady nauk sssr 
english translation soviet math 
dokl 
pp 

braun rein 
logarithmic implementation flexible arrays 
memorandum eindhoven university technology 
burton meijer thompson wadler 
views extension haskell pattern matching 
available fi om www haskell rg views html 
mehlhorn 
log log data structure sided range queries 
information processing letters june 
guibas sedgewick 
dichromatic framework balanced trees 
proceedings th annual symposium foundations computer science pages 
ieee computer society 
hinze 
constructing red black trees 
okasaki editor proceedings workshop algorithmic aspects advanced programming languages paris france pages september 
proceedings appeared technical report columbia university cucs available fi om www 
cs 
columbia 
edu 
html 
hinze 
functional explaining binomial heaps 
functional programming january 
hinze 
simple implementation technique priority search queues 
technical report uu cs universiteit utrecht march 
mehlhorn 
new data structure representing sorted lists 
acta informatica 
king 
functional programming graph algorithms 
ph thesis department computer science university glasgow march 
knuth 
art computer programming volume fundamental algorithms 
addison wesley publishing rd edition 
knuth 
art computer programming volume sorting searching 
addison wesley publishing nd edition 
mccreight 
priority search trees 
siam journal computing may 
okasaki :10.1.1.54.6229
purely functional data structures 
cambridge university press 
okasaki 
views standard ml 
acm sigplan workshop ml baltimore maryland pages september 
okasaki 
functional pearl red black trees functional setting 
functional programming july 
okasaki 
breadth numbering lessons fi om small exercise algorithm design 
acm sigplan notices september 
peyton jones hughes editors 
haskell non strict purely functional language february 
available www 
haskell 
org ion 

sack strothotte 
characterization heaps applications 
information computation may 
vuillemin 
data structure manipulating priority queues 
communications acm 
vuillemin 
unifying look data structures 
communications acm 
wadler 
views way pattern matching cohabit data abstraction 
fourteenth annual acm sigact sigplan symposium principles programming languages pages 
acm press 
