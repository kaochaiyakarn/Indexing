chapter dual substitution uustalu vene known type constructors incomplete trees trees variables carry structure monad substitution extension operation 
known facts true type constructors incomplete non wellfounded trees corresponding monads exhibit special structure 
wish draw attention dual facts meaningful functional programming type constructors decorated carry structure comonad operation interestingly type constructors decorated trees 
developments language design programming methodology functional programming repeatedly demonstrated usefulness insights construction organization programming idioms 
example categorical notions monad comonad programming contexts useful means uncovering imposing structure 
monads originally introduced programming moggi mog modularization tool language semantics quickly popularized wadler wad programming means set infrastructure representing manipulating computations effects 
comonads popular monads employed describe intensional semantics bg 
kieburtz kie argues comonads dep 
de inform atica univ campus de braga portugal leave inst 
cybernetics techn 
univ tee ee estonia email cs ee 
abt 
informatik univ trier trier germany leave inst 
comp 
sci univ ee estonia email cs ut ee 
framework encapsulating effects computations context 
comonads monads equipped distributive laws specify complex recursion corecursion schemes inductive coinductive types bar 
describe monad comonad structures certain type constructors inductive coinductive data 
known type constructors incomplete trees trees variables mutable leaves trees substituted carry structure monad substitution extension operator fact starting point categorical approach universal algebra 
equally plausible apparent fact holds type constructors incomplete non wellfounded trees pointed mos cf 

show facts dualize type constructors call decorated trees decorated determine comonads operator 
pragmatic implication deal programming reasoning programs involving trees substitution done generically 
potentially useful things ubiquitous programming simplest examples substitution operations addition natural numbers append lists substitution variables term functions marking nodes tree information pertaining subtrees root functions 
related generalize monad comonad constructions tree type constructors wider class inductive type constructors 
organization 
sections define concepts monad comonad list simplest popular examples 
section give monad constructions type constructors incomplete trees 
section comonad constructions type constructors decorated trees 
section conclude mention directions 
motivated issues functional programming material basically category theoretic 
elementary exposition 
reader assumed know basics categorical approach functional programming types objects functions morphisms identification particular central concepts coproduct product exponential objects sum product function space types initial algebras final coalgebras inductive coinductive types 
specific concepts monad comonad briefly introduced 
initial algebras final coalgebras programming perspective categorical approach functional programming general refer fok bdm 
recursion corecursion schemes described uv 
classic category theory texts treating monads man bw 
base category specific assumptions existence particular coproducts initial algebras name 
category set sets set theoretic functions possible choice notation standard 
particular jc collection objects denotes cate gory endofunctors gi notation pairing case analysis ev application ev monads monad structure object mapping 
structure monad describable equivalent ways 
purposes natural called extension form kleisli triples 
definition 
monad extension form triple consisting jc underlying object mapping jc indexed family morphisms ma unit operation morphism mb morphism ma mb extension operation mb id ma unit extension operation called return bind haskell 
simple examples monad constructions popular functional programming monads best known tools encapsulating effects computations exception storage reading state transformation monads 
example 
object jc defined ma carries monad structure defined inl inr mb 
example 
object jc defined ma carries monad structure defined curry fst curry ev ev snd ma mb 
example 
object jc defined ma carries monad structure defined curry id curry ev id ev mb 
comonads comonads formal dual monads 
definition form triples 
definition 
comonad form triple consisting jc jc indexed family morphisms na 
counit operation morphism na morphism na nb operation na id na comonads encapsulation effects 
differently monads comonads handle incoming externally produced outgoing internally produced effects 
simplest examples storage reading state context comonads 
storage reading comonads storage reading monads modulo currying uncurrying 
example 
object jc defined na carries comonad structure defined fst snd na example 
object jc defined na carries comonad structure defined setting ev curry id na monads trees monads trees starting point categorical approach universal algebra monad construction type constructors call incomplete trees trees variables 
endofunctor define mapping jc hx id hx 
define jc jc indexed families morphisms ma ma initial algebras ma inl inr category types functions object ma object type collecting incomplete trees branching trees involving variables drawn type morphisms construction functions type produce incomplete tree variable structure incomplete trees 
give example hx ma type binary incomplete trees 
category theorists speak ma free algebra notice ma algebra usefully generalizing corresponding concept universal algebra 
universal algebra treats situations set functor polynomial 
encodes signature incomplete trees syntax tree presentations terms signature 
case hx say ma set terms signature nullary operator constant binary operator 
get arithmetical expressions built numerals operators addition multiplication hx nat significant fact canonically produce morphism ma mb morphism mb 
morphism defined iteration catamorphism fold unique morphism ma mb satisfying id hh id hh ma hmb mb equivalently hh hh ma hh mb hmb functional programming point view function takes incomplete tree replaces variables drawn incomplete trees relying guideline leaves rest notice algebra homomorphism ma mb 
short substitution function corresponding seen substitution rule 
triple turns monad monad laws solely fact unique solution eq 
fact ma initial algebras needed 
summing propositions 
proposition 
endofunctor jc jc indexed families morphisms ma ma operation morphism mb morphism ma mb uniquely solves wrt 
monad 
proposition 
endofunctor defined eq satisfy assumptions prop 
monad 
monads knowing type constructors incomplete trees carry monad structure substitution extension operation meaningful ask holds type constructors incomplete non wellfounded incomplete trees 
intuition suggests type constructors ought support substitution operation monad ought hand 

endofunctor final coalgebras define jc jc indexed families morphisms ma ma ma inl inr employing fact iso lambek lemma carries canonical algebra structure programming interpretation object ma induced object type branching incomplete non wellfounded trees morphisms constructor functions producing incomplete inhabitant making structure incomplete 
case hx ma collects binary variables remains define morphism ma mb morphism mb 
done primitive corecursion id id mb inr ma mb ma mb unique morphism ma mb satisfying id id ma mb id id mb hmb id ma hmb mb simplification equation properties coproduct fact iso gives eq 

substitution operation incomplete trees previously 
prop 
applies establishes monad 
proposition 
endofunctor defined eq meet assumptions prop 
monad 
type constructors incomplete just monads iterative monads sense 
morphism inr morphism hm canonically point morphism mb 
morphism smoothly definable application instance generic monad controlled corecursion scheme unique morphism mb satisfying equation id hm id hmb mb mb 
equation simplifies equation iteration equation substitutions rules word iteration refers tail recursion scheme structured recursion inductive types 
programming terms substitution rule assigning incomplete variables obtained repeating seen substitution rule assigning incomplete variables repetition defined provided productive sense replacing variable variable may replace variable structure incomplete 
proposition 
endofunctor monad prop 
carries iteration operation morphism satisfying eq 
morphism mb uniquely solves eq 
wrt 
general monads substitution matter fact monad set substitution usual sense term substitution ma may understood free term equivalence class algebra possibly infinitary signature collection equations man sec 

related theory remains outside scope 
practical monad may thought type constructor endowed substitution operation 
monad laws state basic properties substitution 
say abstractions facts provided fv 
useful properties substitution follow laws 
easy prove example version known lemma stating provided fv 
mc mc mc minr mc defined 
laws potentially useful program transformation 
comonads trees preceding section seen monad constructions clear relevance functional programming 
surprisingly duals de liver comonads noteworthy fact dual constructions exhibit functional programming reading 
comonads endofunctor defining mapping jc hx id hx 
dual monad construction define jc jc indexed families morphisms na na hna final coalgebras na fst hna snd hna functional programming terms object na induced object usefully thought type decorated node root paired decoration type morphisms associating destruction functions analyze decorated decoration structure decorated 
special case hx na type streams element type head tail functions 
hx na type decorated binary 
define morphism na morphism na nb anamorphism unfold effect unique morphism na nb satisfying id hh na hna id hh nb equivalently na hna hh nb functional programming interpretation function takes decorated replaces decoration root decorated decoration guideline remains untouched coalgebra homomorphism na nb 
short morphism function corresponding rule 
gibbons gib calls upwards pass case streams na function extracts st nd elements stream na na function takes stream returns stream adjacent element pairs 
triple comonad comonad laws follow just fact unique solution eq 

proposition 
endofunctor jc jc indexed families morphisms na 
na hna operation morphism na morphism na nb uniquely solves eq 
wrt 
comonad 
proposition 
endofunctor defined eq satisfy assumptions prop 
comonad 
comonads trees dual second monad construction initial algebras define jc jc indexed families morphisms na na hna na fst hna snd hna object na corresponding object models type decorated trees accompanying functions decorated tree decoration structure decorated trees 
hx na type decorated binary trees 
morphism na define morphism na nb primitive recursion paramorphism hj id ji hid nb na hfst nb na snd nb na meaning unique morphism na nb id id hhh id na na hna id hhh id na nb hna id nb na equation simplifies eq 

upwards pass operation time decorated trees 
case binary trees na nat function returning height decorated tree 
function takes decorated tree returns tree decoration node replaced height subtree rooted node 
applying prop 
comonad 
proposition 
endofunctor defined eq meet assumptions prop 
comonad 
monads incomplete iterative comonads decorated trees recursive 
morphism satisfying morphism hn define morphism rec na 
application instance generic comonad controlled recursion scheme rec unique morphism na satisfying equation id na hna id hn na 
equation simplifies equation recursion equation decoration rules word recursion referring dual tail recursion 
programming terms rec rule assigning decorations decorated trees results repeating seen rule assigning decorations decorated trees 
repetition defined provided uses decoration decorated tree looking decoration structure subordinate decorated trees 
case binary trees think function nat nat takes binary tree returns root leaf plus maximum nat decorations constituent subtrees branching node 
rec na nat calculates height binary tree 
generally remarked functions corresponding recursively defined rules generalization bird gibbons upwards accumulations gib upwards passes induced catamorphisms morphism hb 
id fst rec upwards accumulation lemma saying hj id snd follows general truth rec hhj fst hn snd hn proposition 
endofunctor comonad prop 
carries recursion operation rec morphism satisfying eq 
morphism rec na uniquely solves eq 
wrt 
general comonads just monad level incomplete trees substitution comonad decorated trees 
comonad laws state basic properties operations number properties simple corollaries 
lemma composing functions 
na na na hg na defined 
shown type constructors incomplete trees carry structure monad type constructors decorated trees carry structure comonad 
constructions generic different generic recursion corecursion schemes 
expect useful building blocks applications representation manipulation syntax processing hierarchical data lines explosive programming studied computing attribute grammars 
uustalu grateful hancock pointing term algebras algebras yield monads 
indebted logik der informatik invitation lmu munich ur seminar may 
referees helped constructive criticism 
research supported portuguese foundation science technology 
praxis xxi estonian science foundation 
aczel ad amek 
coalgebraic view infinite trees iteration 
clm 
bw barr wells 
toposes triples theories vol 
der mathematischen wissenschaften 
springer verlag 
bar bartels 
generalised coinduction 
clm 
bdm bird de moor 
algebra programming vol 
prentice hall int 
series computer science 
prentice hall 
bird de moor hoogendijk 
generic programming types relations 
functional programming 
bg brookes geva 
computational comonads intensional semantics 
fourman eds applications categories computer science vol 
lms lecture note series 
cambridge univ press 
clm corradini montanari eds 
proc 
th workshop coalgebraic methods computer science cmcs genova apr vol 
electr 
notes theor 
comp 
sci 
elsevier 
fok fokkinga 
law order algorithmics 
phd thesis univ twente 
ghani de power 
algebras coalgebras monads comonads 
clm 
gib gibbons 
upwards downwards accumulations trees 
bird morgan woodcock eds proc 
nd int 
conf 
math 
program construction mpc oxford june july vol 
lect 
notes comp 
sci 
springer verlag 
kie kieburtz 
codata comonads haskell 
unpublished draft 
man manes 
algebraic theories vol 
graduate texts mathematics 
springer verlag 
mog moggi 
notions computation monads 
information computation 
mos moss 
parametric corecursion 
theor 
comp 
sci 
oliveira 
explosive programming controlled calculation 
techn 
report um di tr dep 
de inform atica univ braga 
uustalu 
monads inductive coinductive types 
pereira eds proc 
joint conf 
decl 
programming agp sept 
univ 
uv uustalu vene 
primitive recursion course value iteration categorically 
informatica 
uustalu vene pardo 
recursion schemes comonads 
nordic computing 
wad wadler 
essence functional programming 
conf 
record th ann 
acm sigplan sigact symp 
principles programming languages popl albuquerque jan 
acm press 

