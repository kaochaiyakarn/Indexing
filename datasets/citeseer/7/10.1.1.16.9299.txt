spatial logic querying graphs luca cardelli gardner giorgio ghelli 
study spatial logic reasoning labelled directed graphs application logic provide query language analysing manipulating graphs 
give graph description constructs process algebra 
introduce spatial logic order reason locally disjoint subgraphs 
extend logic provide query language preserves multiset semantics graph model 
approach contrasts traditional set semantics query languages tql strudel graphlog 
semi structured data plays important role exchange information globally distributed applications examples include bibtex les xml documents 
whilst research community agree de ning semistructured data labelled directed graphs trees graphical links study query modify manipulate data active 
motivating examples standard example semi structured data community abs bibtex le article entry form citation buneman suciu author title date abiteboul data web publication global name object identi er denotes citation name publication refer particular bibtex entry 
citation entry simple text entry point entry bibtex le 
example graphical emphasis correspondence counties towns counties contain towns towns counties 
complicated example links web pages names correspond urls 
links display manner graphical linking 
simple examples illustrate typical data models semi structured data labelled directed graphs labelled trees graphical links 
focus labelled directed graphs 
cardelli address microsoft research cambridge 
gardner address imperial college science technology medicine london 
supported epsrc advanced fellowship 
ghelli address university pisa pisa 
graph model known graph description constructs process algebra cmr 
models consist labelled edges kinds nodes global nodes identi ed unique names local nodes identi ers known 
bibtex example citation corresponds global node labelled author eld explicit citation 
similarly internet domain name service globally registers ip addresses ip addresses global 
notation describing graph denotes edge usual composition operator processes case describe multisets edges 
graph graph graph local 
local operator analogous restriction calculus 
means previously identi ed node edges attached 
spatial logic graphs spatial logics introduced cardelli gordon reasoning trees processes cg cai hearn reynolds reasoning pointers io rey bunched logic hearn pym op 
logics provide local reasoning disjoint substructures 
introduce spatial logic analysing graphs 
combines standard rst order logic additional structural connectives 
structural formula speci es graph split parts part satisfying composition allows count edges 
example true speci es di erent edges graph contrast conjunction allows describe paths true true true describing existence path followed followed path formula satis ed graph composition formula 
graph logic recursion sits naturally rst order logic fol monadic second order logic msol fol quantify single edges logic formula true existentially quanti es property subgraphs msol arbitrarily nest quanti cations sets edges 
logic viewed msol 
reason locally disjoint subgraphs 
fol msol require complex disjointness conditions reason subgraphs example composition formula requires conditions specify edges disjoint 
dawar gardner ghelli studying expressivity results graph logic 
current results reported cgg 
query language de ne query language pattern matching recursion 
approach integrates graph description contrasts standard set approach cardelli ghelli tql query language ambient logic cg graphical query languages struql ffk graphlog cm rst order logic 
illustrate standard approach consider simple query input graph true query asks substitution satisfaction relation input graph true holds logic 
example input graph solutions 





select expressions take solutions build new graphs 
example expression input graph true select takes substitution satis es query creates new graph consisting composition edges 
example resulting new graph 
input graph substitution 

satis es query 
resulting graph just 
collapse information advantage 
mean accurately take copy graph 
de ne query language queries transducers 
queries build new graphs old 
transducers relate input graphs output graphs 
basic transducer relates input graph satisfying query depend witnesses 
example transducer true relates input graph edge output graph 
input graph possible output graphs 
example pattern matching part select expression 
combine inverted edges 
role played recursion 
consider transducer def nil nil input graph empty relates empty output graph 
input graph split edge rest graph 
output graph consists inverted edge composed output associated remaining graph 
input graph example output graph exact inverted copy 
study query languages basic language express motivating examples general language simple formalism expressive implement 
surprised observe select expressions embedded general language 
labelled directed graphs simple graph algebra cmr describe labelled directed graphs 
assume nite set names ranged nite set edge labels ranged notation denote sequence names denote length sequence 
definition set graph terms generated grammar nil empty edge composition local hiding write 
de nitions free bound names standard hiding operator local binds free process 
write fn denote set free names capture avoiding substitution denoted xg 
graph model multiset semantics graph term denoting graph edges 
give natural structural congruence graph terms de nition corresponds usual notion graph isomorphism cmr 
choice contrasts approach taken query language struql set semantics corresponding 
contrasts language unql bdhs graph bisimulation graph isomorphism 
definition structural congruence graph terms written smallest congruence closed respect local satisfying axioms nil local local local local local local fn local nil nil local local xg fn comparison courcelle give set theoretic description graphs spirit courcelle cou equivalent graph description 
di erent choices courcelle discuss de nition 
assume disjoint nite sets vertices edge identi ers edge labels names definition graph structure gs hv src de ned 
nite sets 
edge identi er unique label domain node codomain node edge edge 
edge identi ers edge labels vertices related edge edge edge edge edge 
src injective function 
de nition di ers courcelle approach ways 
courcelle permits nodes edges 
considers nite nite graphs nite case 
treat part domain 
de nes family relations edge point signi cant comparing di erent logics reasoning graphs 
courcelle considers systems src injective 
graphs correspond injective case non injective case corresponds adding name fusions graphical description introduced gardner gw 
cou courcelle studies graph grammar similar 
courcelle motivation explore expressive power msol 
contrast motivation graphs model semi structured data introduce spatial logic locally reasoning data 
graph logic consider simple case graphs hiding 
possible incorporate quanti er reasoning hidden nodes cc cg believe query language extend 
rest ranges terms generated simple grammar nil set denotes set terms 
logical formulae formulae constructed name set label set depend disjoint sets name variables vx label variables va parametrised recursion variables vr recursion variable comes xed arity jrj 
definition logical formulae set pre formulae pre grammars name expressions name name variable label expressions label label variable formulae nil empty edge composition true true conjunction classical negation quanti ers exist 
quant 
names exist 
quant 
labels recursion jrj pt xj jrj occurs positively equality tests equalities sets free variables standard 
set formulae pre formulae free recursion variables 
order binding precedence negation binding strongest 
write 
scope maximum possible 
nil formula speci es empty graph 
edge formula speci es graph just edge 
composition formula speci es graph split parts part satisfying formulae familiar 
logically natural add connectives spatial negation implication op cg 
satisfaction relation satisfaction relation determines graphs satisfy formulae 
de ned interpretation function maps pre formulae sets graphs 
definition satisfaction assume name set edge set vx denote substitution name label variables names labels respectively send recursion variables arity elements set functions 
satisfaction interpretation pre de ned inductively nil fg fg fg true fs xj sg xj de nition shown de ned structural induction formulae 
recursive case observe set pointwise ordered total functions type xj complete lattice 
de ne satisfaction relation formula denotes arbitrary 
proposition satisfaction properties satisfaction relation satis es standard properties nil nil true fx xg fa ag xg recursion case requires substitution monotonicity lemma showing function monotone apply point theorem 
definition derived formulae give derived formulae false def true jj def def subgraph def true def subgraph def jj false def connective jj de morgan dual binding precedence conjunction binding strongest 
scope maximum possible 
example revisit examples discussed true true true true recall rst formula speci es graph di erent edges second graph path edges 
example specify property exists path logic recursion 
interesting expressible rst order logic recursion 
give preliminary derived formulae edge def true edges def minimal graph satisfying min def nil node graph graph def true formulae de ned similarly 
give formula speci es graph just straight path contain cycle formula satis ed empty graph straight path def min graph formula speci es graph contains start node node nodes incoming outgoing edge cycles 
minimality ensures disconnected cycles 
property exists path speci ed formula exists path def subgraph straight path 
example give equivalent formula exists path recursion notation def abbreviation def exists path def exists path combination composition recursion regarded induction graph structure 
consider graph 
just ways check graph satis es formula checking edge followed followed followed example classic property associated compiler optimisation node dominates node path declared initial node passes 
specify property graph path path def nil path addition nil ensures edges checked 
example graph way path satis ed checking follows follows simple specify property seek dominates def subgraph path graph query language basic language consists queries transducers 
queries build new graphs old 
transducers associate input graphs output graphs 
concepts related 
basic transducer relates input graphs satisfying output graphs query apply applies transducer input graphs yield corresponding set output graphs 
definition query language sets pre queries pre transducers denoted pre pre respectively grammars de nition grammars queries transducers graph variable basic transducer nil empty graph abstraction edge graph transducer composition composition disjunction apply application exist 
quant 
names exist 
quant 
labels rt recursion rt pt rt positive sets queries transducers denoted contain pre queries pre transducers free recursion variables 
rt def denote rt def rt overload notation denotes composition formulae queries transducers 
connective weakest binding strength connectives 
glaring omission absence renaming technique node identi ers skolemization 
approach 
transducer connectives feasible 
choice determined aim simple language express motivating examples 
describe general approach section 
definition query interpretation assume name set label set denote substitution name label variables names labels respectively denote substitution graph variables elements function map transducer recursion variables set 
query interpretation pre transducer interpretation pre de ned simultaneous induction structure pre queries pre transducers fg gg nil fg fg fg apply fg rt fs rt sg example inverting edges consider transducer true returns inverted edge non empty input graph 
transducer non deterministic input graph set possible output graphs fa consider query apply true input graph input graph resulting output input graph result 
example case analysis connective case analysis nil nil true input graph empty return empty output graph 
input graph non empty return inverted edge 
example exact inverted copy execute query edge 
example transducer relating input graph inverted copy rt def nil nil rt input graph empty return empty graph 
graph split edge rest graph 
return inverted edge execute transducer smaller graph 
input graph return exact inverted copy 
adapt example execute query edge provided satis es certain logical formula 
example consider transducer rt def nil nil nil rt input graph empty return empty graph 
input graph non empty pick edge 
domain codomain edge di erent return inverted edge return empty graph 
apply transducer remaining smaller graph 
example transitive closure standard example transitive closure graph 
illustrates power mixing abstraction recursion 
example assume edge labelled set fag 
transducer applied graph returns minimum graph tc contains satis es property tc rt def true true true xy true true true apply rt generalised transducers generalise de nition transducers de nition 
approach simple expressive implement 
semantic interpretation de nition gives exibility adapt choice basic language wish 
definition generalised transducers assume name set label set set generalised pre transducers denoted gt pre grammar id identity nil empty input graph composition 
analogous cases de nition graph variable existential quanti cation graphs generalised transducers relate input output graphs 
logical formula regarded generalised transducer relates input graphs satisfying arbitrary output graphs 
identity transducer relates structurally congruent graphs 
transducer composition relational composition 
identity composition allows specify properties output graphs 
example transducer true id relates arbitrary input graphs output graphs satisfying 
queries correspond generalised transducers 
definition interpretation generalised transducers assume name set label set query interpretation gt denotes substitution name label variables names labels respectively maps graph variables graphs function maps recursion variables arity functions de ned induction structure extended formulae id fg gg nil fg fg true fs xj sg xj proposition exists embeddings pre gt pre gt pre pre gt pre 
queries 
logical formulae 
basic transducers proof 
embeddings give cgg 
query apply interpreted sequential composition 
basic transducer interpreted conjunction 
abstraction existential quanti cation example consider derived transducers subgraph def id nil true strict subgraph def id nil nil def min def strict subgraph nite lub def min subgraph transducer subgraph relates strict subgraph strict version 
connective de morgan dual 
unravelling de nition states operator allows output graphs associated input 
example transducer subgraph relates graph nite upper bounds set graphs 
nite upper bounds necessarily exist case subgraph empty set 
may adapt nite semantics nite case nite version set theoretic presentation section 
min transducer relates graph minimal graphs 
transducer nite lub relates graph minimal nite upper bound exists 
nite semantics give rise upper bound 
discuss standard set theoretic language select expressions 
expressions embeddable general language nite lub construction cgg 
give depth comparison query language query languages graphs ffk cm bdhs 
language closely related xduce hp processing language xml documents pattern matching simple typing scheme analogous structural component spatial logic 
ambitious aim achieve level understanding query languages semi structured data rivals languages associated relational model 
abs abiteboul buneman suciu 
data web 
morgan kaufmann 
bdhs buneman davidson hillebrand suciu 
query language optimization techniques unstructured data 
sigmod lncs pages 
cai 
model declarative programming speci cation concurrency mobility 
phd thesis university lisbon 
cc cardelli 
spatial logic concurrency part 
tacs lncs 
springer 
journal information comp 
cg cardelli gordon 
anytime modal logics mobile ambients 
popl 
acm 
cg cardelli ghelli 
query language ambient logic 
esop etaps lncs 
springer 
cg cardelli gordon 
logical properties name restriction 
tlca lncs 
springer 
cgg cardelli gardner ghelli 
spatial logic querying graphs 
fuller version www doc ic ac uk pg 
cm consens mendelzon 
graphlog visual formalism real life recursion 
principles database systems pages 
acm 
cmr corradini montanari rossi 
machine concurrent modular systems charm 
tcs 
cou bruno courcelle 
expression graph properties graph transformations monadic second order logic 
graph grammars computing graph transformations 
ffk fernandez florescu kang levy suciu 
strudel web site management system 
sigmod management data 
gw gardner 
explicit fusions 
mfcs lncs 
journal version submitted theoretical computer science 
hp hosoya pierce 
regular expression pattern matching xml 
popl 
acm 
io hearn 
bi assertion language mutable data structures 
popl 
acm 
op hearn pym 
logic bunched implications 
bulletin symbolic logic 
rey reynolds 
intuitionistic reasoning shared mutable data structure 
perspectives computer science 
