long term file activity inter patterns lt colonel tim gibson hq pacific command attn camp smith hi acm org ethan miller department csee university maryland baltimore county circle baltimore md elm csee umbc edu darrell long jack school engineering university california santa cruz ca darrell cse ucsc edu compare contrast long term file system activity different unix environments periods days 
focus finding common long term activity trends patterns 
analysis shows files initial creation normally short lived file manner day created probably 
additionally find approximately files daily 
information allows accurately predict files 
files compressed moved tertiary storage enabling users disk larger user disk quotas 
physical storage devices long slowest components computer system 
disk tape storage devices improved decade performance kept pace rapid increases processor speed 
presents challenge storage system designers faster cpus encourage larger files placing higher demand file system storage devices 
problem long issue supercomputer centers managed huge quantities data advances cpu performance brought traditional supercomputer power desktop 
system designers insure workstation file systems keep increased bandwidth capacity increased cpu speed brings 
previous focused improving short term performance focus long term patterns influence performance days 
organized sections 
reviewing previous disk activity studies section 
section briefly discuss data collection analysis tools differ significantly earlier studies 
describe different types computing environments collected data section 
software written supported nasa ames research center nag 
supported international business machines ibm 
analyzes collected data generates statistics 
simplest analysis mode provides information daily activity 
shown section 
analysis long term trends shown section 
interesting product research comparison file system activity file name view operating system underlying numeric index 
comparison done section 
summarize findings section briefly discuss research section 
related research smith ousterhout detailed studies file activity computing systems 
observations useful underlying structure lost relevance 
example smith primarily observed text user files thirteen months size nature today multimedia files unforeseen smith collected data different text files studied 
ousterhout detailed file traces conducted day periods 
ousterhout useful traces collected short time long term trends predicted data 
baker distributed file system activity logs update ousterhout concentrate low level disk activity short trace periods ousterhout traces 
satyanarayanan analyzed long term behavior wide area distributed file system focusing performance andrew file system 
primarily interested issues caching replication reliability large distributed file system volumes files basis study limiting usefulness showing long term behavior file level 
studies directly applicable supercomputing centers may apply smaller computing centers size number files supercomputing centers far exceeds normal computing activities 
supercomputing centers usually large tape libraries tape robots providing near line storage data files cases exceeding hundreds terabytes 
contrast smaller computing centers tape robots tape archiving purposes trend believe may change near line storage robots tape digital versatile disk dvd optical drives affordable practical 
closely resembles strange disk studies 
collect information strange fact corroborate number findings 
traces cover twice time period strange traces 
additionally analysis tool maintains database record file residing file system 
database information allows keep track individual records accessed modified deleted 
temporal information file activity new collected analyzed authors 
tools tracing system designed major goal gather useful information requiring operating system kernels recompiled 
trace gathering tool modified version gnu find utility collect information files file system directory 
collected information includes file index node number inode size name access time node creation time modification time owner group 
tracing program run time output placed directory file system studied tracing process invisible 
additionally file name scrambled ensure user privacy public systems preserving information relationships files system 
second component system sorts trace files node number compares generates file containing files changed created deleted 
program reduces long term storage requirements amount data analyzed 
difference files generated tool fed analysis program generates statistics items shown table 
additional advantage file differences analysis tool runs faster reduced amount statistics collection analysis package file systems weaknesses 
ousterhout noted file creations lifetime minutes 
daemons compilers programs created files ousterhout exist temporary files create 
collection system designed gather information longterm disk file system activity growth temporary files exist minutes moved long term storage contribute long term growth 
additionally differencing program determine times file accessed modified single day 
notices access modification occurred event happened 
fortunately matters long term perspective file certain day times 
way collect detailed information run tracing system change operating system kernel generate large detailed log file 
options place heavier load computer system deliberately decided doing 
additionally collecting data kernel modifications may provide data severely restricts number type computing installations willing collect traces 
difficult time convincing system administrators allow run current collection program modifying multiple operating system kernels convincing different system managers modified kernels provide additional log file disk space feasible solution 
ways look file unix file system 
normal way file path name exactly people programs open close file 
unix operating system file names manage files 
operating system gives file unique number 
examine activities file system views file names nodes respectively 
distinguish terms hierarchical name space numeric index 
reason examine views file system activity differ significant ways 
example numeric index system view large number file deletions file modifications 
happens applications modify physical disk files simply erase old version replace new 
result person may edit file daily actuality new file created time saves file 
contrast hierarchical name space view file names number file modifications greatly exceeds file deletions 
order study hierarchical name space view file system activity small conversion program changes file name trace file number md hash file name 
file activity statistics collected accesses creates total number files bytes 
produces histograms grouped file size number accesses creations 
deletions access deletions nodes reused tracked separately deletions inode reused 
modifications access categories files modified increased size decreased size modification differences deltas remained 
access categories files modified increased size decreased size 
tracks files amount change 
produces dimensional histogram file size versus amount modification 
change name owner separate categories change name unix mv change owner chown change group 
group outputs number files 
long term deletions separate data kept deletions files accessed deletion files modified deletions times individual files accessed modified deletion 
produces dimensional histogram file size days file lived deleted 
inter access inter summary accesses modifications days 
dimensional histogram file size modification period files system analysis completion days pass file accesses modifications individual files 
summary file system status trace period 
produces dimensional histogram file size number times files accessed modified 
dimensional histogram file size files 
table 
statistics collected analysis program 
computing environments examined collected analyzed daily traces analysis different computing systems 
university maryland baltimore county umbc third university california santa cruz ucsc fourth army aberdeen proving ground 
table summarizes systems 
umbc computer science cs department file system trace collection began october 
expanded collection efforts cs systems may long short collection periods 
aberdeen proving ground apg university computing services ucs began collecting traces aberdeen proving ground apg university computing services ucs file systems may 
university california traces collected daily different tracing process contain long term file system actions 
provide listing file names file size access modification creation times modified past hours 
affects amount analysis provide 
cs dept 
long period cs dept 
short period univ ca santa cruz average number files system disk capacity avg 
percent full gb gb gb gb gb type fs traced user system user user user system user system number fs traced user system user user user system type system administrative general purpose development development development number users full time email trace length days days days days days table 
summary systems examined basic file system activity section analyzes daily file activity file system analyzer simplest mode longterm memory individual files 
result provides little information individual file activity 
distribution file sizes file system attribute examined distribution file sizes different file systems shown 
shows percentage cumulative percentage files system file size groupings 
bar chart shows percentage files size category lines cumulative percentage 
interesting thing note files relatively small half kb 
graph stops mb encompasses files collected university files apg system 
apg users occasionally large word processing email files keeping apg averages lower cs ucs system averages 
surprisingly little difference size distribution computer science user system level file systems 

file sizes size category cumulative 
important facts gather files smaller kb 
hand larger kb contains majority bytes different systems shown 
depicts total number megabytes file size category system 
totals different systems vary disk capacities different 

total disk spaced file size category 
bar chart shows distribution size category line chart shows data cumulatively 
usage transaction type software simplest analysis mode provides variety information number files bytes daily file system 
show average daily file transaction type different systems 
shows percentage daily file activity percentage files accessed created deleted modified 
cases greatest percentage accessed category 
approximately half files created deleted compared accessed 
logical files accessed program files data files configuration files created deleted 
number file modifications lags far actions computer science systems 
reason modifications cs file systems computer applications particularly applications programmers modify files create new files rename delete original 

activity type percentage total transactions 
instance programmer changes file text editor saves changes steps occur user gives command open file home profile operating system finds node associated home profile operating system gets file disk block numbers node operating system reads disk blocks loads file memory ram user changes saves file operating system writes modified file new set disk blocks new node operating system frees old disk blocks old node operating system updates file name home profile point new node 
result viewpoint operating system numeric index saving file text editor results file creation file deletion file modification 
programs including technique text editor 
exception general rule electronic mail email packages modify files contained user box 
note box electronic mail unix systems file regardless messages contained inbox 
result exception mail files seen 
similar displays bytes files 
ucs apg systems users computer system mail 
result files systems modified daily shown modifications account bytes daily ucs apg systems 
increase modifications seen computer science traces increase noticeable cs data cs users system read mail 

activity type percentage total transaction bytes 
provide interesting observations manner users applications modify files importantly illustrate need optimize file accesses 
growth individual files modifications basic analysis provides information ratio modifications file larger modifications leave file size file smaller 
cs systems categories modification approximately 
ucs apg systems number files modified increased size double categories added 
modifications cs systems increased file bytes modifications ucs system kb kb range 
attribute mail files receiving mail messages daily causes type increase 
ucs system mail activity appears files decrease size 
occurs users keep mail messages long time single box file slowly growing size 
users eventually delete old messages usually time 
ucs system file modifications occurred file lost kb kb 
apg system behavior similar 
contrast cs file modifications reduce files bytes falling kb kb range 
ucs apg activity keeping users handle mail files activity cs systems consistent development activity 
findings observations accord different system environments 
file growth rate direct implications operating system design 
file needs increase size operating systems allocate additional space file original size larger file space allocated 
order recover unused disk space operating system keep track files received additional space recover unused disk space time 
shown files increase direct proportion original size 
relatively unix files increase size may efficient allocate disk blocks differently 
example disk blocks allocated block time writing files take longer additional cpu cycles find unused disk blocks eliminated 
file system growth previous sub sections showed numeric index files modified half numeric index modifications result file size increase numeric index file size increases modifications kb 
logical question ask discovering facts file modifications causes file systems grow figures show byte creep cs ucs systems 
byte creep cumulative number bytes added system creations modification increases number bytes deleted lost modification decreases subtracted 
ucs cs file systems larger trace collection reasons increases different 
example ucs system increased primarily existing files larger file modifications 
number bytes gained lost file creations deletions remained relatively constant 
note spike ucs trace day day caused disk drive failure tape restore weekend 

byte creep umbc ucs systems file systems days may january 
cs file system hand exhibits markedly different behavior 
nearly file system growth cs system came new files file system growth loss modifications remained relatively constant 
believe cause disparity different user populations applications systems 
file system growth cases cause different 
information figures direct interest system administrators source file system growth constant question 
percentage files daily require break graph axis allow detail graph lower section 
proportion bytes total bytes system relatively low 
fact files bytes file system daily 
shows average percentage files bytes daily different systems 

byte creep umbc comp 
science system file systems days aug jan 

average percentage files daily 
clearly seen fact relatively files day normally 
similarly number bytes daily low shows 
percentage bytes ucs apg systems higher smaller disk space quotas users delete unnecessary files 
instance number bytes daily exceed 
figures keeping earlier findings chapter showed file activity caused file accesses byte activity caused creations deletions modifications depending type user 
fact little data file system important provides support integrated tertiary storage system compressing unused files vast majority files regularly 
summary daily statistics sub sections information data analysis capabilities simplest analysis mode 
information available mode consists primarily number files bytes daily different file transaction types 
information system activity file size distributions amount file increases decreases modifications source file system growth analyzed 
information individual day 
information kept individual files limiting mode analysis capabilities 

average percentage bytes daily 
long term file system activity figures showed small proportion files day shown individual file usage patterns 
tracking individual activity patterns important files daily shows day represents different files month files file system 
true difficult predict files daily rendering integrated tertiary storage impractical 
represents files day integrated tertiary storage compression may viable 
contrast simple analysis mode daily usage patterns advanced mode provides ability monitor individual file activity patterns 
shows fewer files remaining file system trace completion trace period trace periods longer days exception 
exception cs system level files higher usage rate seen expected files commonly programs libraries 
fewer non system level bytes system 
shows files bytes remaining file systems way trace collection period 
consequently files resided tertiary storage disk absence disk effect 

long term file system usage 
file system activity traits inferred particularly compared files regularly 
case files file systems intermittently daily usage percentages trace percentages probably higher 
happens show sub sections 
long term repeated usage analytic tool provide inter access inter modification period statistics shown 
figures show number days consecutive accesses modifications 
example file accessed monday wednesday day period 
show accesses modifications occur consecutive days 
generally file accessed day day file chance accessed third day 
fact file chance accessed depending computer system 
anomaly access patterns cs system level files occasionally small spikes 
probably caused type system routine user program periodically accesses system level files rarely 

inter access period showing elapsed time consecutive accesses 
bar chart shows distribution size category line chart shows data cumulatively 
modification spikes anomalies 
percentage files modified day intervals lower files accessed 
similarly percentage files modified time interval falls slowly files accessed users checking individual mail files days explain behavior 

inter modification period showing elapsed time consecutive modifications 
bar chart shows distribution size category line chart shows data cumulatively 
information conjunction data earlier section long term statistics growing evidence files accessed modified regular basis 
conversely files tend remain unused 
files regularly compressed moved tertiary storage affecting system performance 
reinforce proposition small percentage files regularly large percentage files infrequently 
illustrates activity files accessed modified proves relatively files regularly trace period 
axis series categories showing number days file accessed modified 
categories extend day days 
traces collected days usually days categories valid file systems 
axis percentage category total number files created trace period file system 
shows files created day depending system 
hand approximately files times essentially day 
files times account files created approximately files accessed modified 
obviously tertiary storage system efficiently files kept disk times 

number days specific file accessed modified created 
shown percentage files created trace period logarithmic scale 
locality fact small number files nearly day increases likelihood files exhibit locality 
locality term normally ram cache memories 
data moved cache memory 
property cache memory systems worthwhile 
caching stratagems try ensure data needed immediate kept cache 
file system viewed super set ram cache data possible files secondary storage locality property 
fact true shows 
statistics software collects number files accessed modified days 
data shown day interval 
axis average number files accessed modified daily system 
example average day files accessed daily ucs system 
likewise average files day days 
average files accessed accessed daily week 

average percent files exactly days 
shown percentage average number daily accesses modifications 
data allows verify presence locality file accesses file modifications 
note interest fact system files day week single sub period 
anomaly high level activity long umbc computer science traces 
explained fact faculty file system long cs traces full inactive trace collection period faculty grad active trace period progressed 
example faculty file system averaged file transactions day compared transactions day active file system traces 
result combined activity level traces lower trace see 
file systems active file systems files active tended active file systems 
users running disk space keep unused files minimum 
result seen 
regardless activity level long computer science traces percentage total files percentage total accesses modifications relatively low shown 
file lifetimes locality characteristic cache data cache data eventually replaced 
case file systems translates files deleted 
shows files file system 
comparing inferred number files system increases time 
fact simulator shows directly graph shown brevity 
proposition files tend lapse supported facts files trace periods files tended times 
keeping theory locality deletion rate files initially fairly low increase files get older 
slowly increasing deletion rate files shown 
deletions shown percentage files deleted lifetime 
example ucs system value day lifetime 
value computed dividing number files deleted days created total number files deleted days created 
note file created day deleted trace lives zero days 
shows files tend live longer comparison files 
example files account files deleted week created 
percentage files deleted rises 
true systems apg system lifetime files varies widely 
believe apg data result user behavior strict disk quotas 
apg data clearly reinforces theory locality showing files deleted slowly files 
particularly true university systems active files deleted days passed 

lifetimes files percentage files deleted lifetime 
put perspective give reader grasp file deletion rate relationship deletions versus unused files provide 
shows cumulative rate deletions files accessed modified cumulative rate deletions files created 
rates shown percentage files deleted entire trace period 
example approximately deletions deletions files system day trace gone 
shows deletions files files apg file system 
similarly weeks unused files university deleted quickly files 
week point unused files deleted approximately rate files 
interestingly deletion rates different file types virtually identical university systems 
apg data different university data 
unused files deleted slowly files deleted quickly 
deletion rate apg system increases types file month point possibly users conducting periodic 
summary long term file system activity data analysis preceding sub sections extremely important understanding file system activity knowledge extensive data collection analysis unique 
summarize findings 
file lifetimes unused files percentage total deletions 
files short inter access inter modification times extremely small number files day normally files file system files exhibit locality file vice versa files days files deleted quickly files 

hierarchical name space activity preceding sections discussed analyzed disk activity seen viewpoint operating system numeric index 
pointed earlier disk activity shown numeric index necessarily activity user observes hierarchical name space viewpoint 
section shows key file system activity similarities differences observed data collected hierarchical name space viewpoint numeric index 
important thing remember comparing file system activity hierarchical name space hierarchical paths file names numeric index merely different views activity 
traces collected information regarding activity physical files file system changes files trace period hierarchical name space view numeric index view file system 
differences views ascribed view concentrates hierarchical view focuses file path name numeric index focuses operating system underlying implementation numeric index 
key differences hierarchical name space numeric index activity real difference hierarchical name space view file system activity numeric index view area file modifications file deletions 
physical file blocks referenced node numeric index rarely modified case mail files 
contrast hierarchical file names hierarchical name space regularly modified 
result number deletions hierarchical name space drops immensely number modifications greater 
relationship shown 
number files hierarchical view numeric index view single node multiple file names normalized 
value denotes equivalence numeric index view hierarchical name space view file system activity 
value greater shows hierarchical name space view proportionately transactions numeric index counterpart 
value shows proportionately transactions hierarchical name space 

proportion average transactions hierarchical name space numeric index 
value denotes equivalence greater shows transactions hierarchical name space 
shows ratio numeric index activity hierarchical name space activity remained relatively constant file accesses file creations 
hand file deletions non existent hierarchical name space view file system return corresponding abundance modifications 
essentially numeric index deletions hierarchical name space modifications 
number modifications greater hierarchical name space view distribution file byte transactions different numeric index view shown 
data plotted uses hierarchical name space view numeric index view 
differences significant essentially distinctions hierarchical name space numeric index views file system activity 
similarities hierarchical name space numeric index characteristic file system activity discussed section section viewpoint numeric index identical hierarchical name space perspective 
percentage files daily entire trace close scheme 
similarly size distribution files system size distribution files modified amount files increased decreased modified numeric index observations nearly identical corresponding hierarchical name space observations 

average percentage files daily 
hierarchical name space view 

average percentage bytes daily 
hierarchical name space view 
periodic usage locality observed numeric index hierarchical name space activity drop rate slightly slower hierarchical name space view 
excellent example locality hierarchical name space provided traces university california system 
traces collected names files hierarchical name space modified hours 
result usefulness limited 
show files hierarchical name space modified consecutive days 
obviously average files modified today shown day chart 
modified days row 
time week passed percentage files modified previous days 
number files modified consecutive days continues drop files modified daily modified day days 
locality assumed general file system characteristic shown exist numeric index hierarchical name space views traces umbc apg shown exist university california traces shown exist earlier researchers jensen reed miller 
percentage files university california traces modified consecutive days row 
summary provided comprehensive look long term file system activity 
type data useful file system designers system administrators provides insight daily file system activity 
type analysis done done 
research detail satyanarayanan 
clearly size complexity file systems changed significantly types applications file system survey needed 
data provided long term mode interest system administrators useful file system designers migration algorithm researchers 
example data deletion rates locality directly applied file system design 
case point deciding clean file segments log structured file system lfs 
studies long term file system activity significantly assist area 
knowledge differences hierarchical name space numeric index views file system activity studied 
previous researchers baker burns kumar miller ousterhout shirriff strange examined file system activity hierarchical name space level despite fact collected numeric index information 
occasionally researchers existing data focused physical components 
example gribble ousterhout baker existing file system traces check self similarity file system activity read write level 
specific examination comparing contrasting numeric index hierarchical name space activity done 
evidence shows hierarchical name space numeric index activity similar respects 
example possess locality basic activity patterns 
basic activity patterns include deleting files lower rate files unused periodic file usage high proportion files deleted 
hierarchical name space files share characteristics numeric index view activity hierarchical name space view lower deletion rate higher modification rate 
impact file migration algorithms 
majority numeric index activity file accesses creations deletions 
file migration algorithm control file creations file deletions file migration algorithm working numeric indexes contend primarily file accesses 
contrast migration algorithms hierarchical name space hierarchical file names deal file accesses file modifications 
programs access underlying file system unix operating system hierarchical file name interface 
result hierarchical file system provides researchers better idea user program activity 
numeric index view file system better examining operating system internally manages physical devices stores data 
modeling hierarchical file names intuitive people usually think files names disk blocks numeric indexes 
hand operating system manages file system numeric indexes nodes file names 

research findings research able develop tertiary storage migration algorithm ages files 
technique works order magnitude better current best algorithm space time 
research includes applying software data collection technique windows nt order provide comparison nt file system activity unix developing automatic system new technique compress unused files move files integrated tertiary storage 
maurice bach design unix operating system prentice hall englewood cliffs nj 
mary baker john michael kupfer ken shirriff john ousterhout measurement distributed file system operating system review proceedings th acm symposium operating systems principles pp 

randal burns darrell long efficient distributed backup delta compression proceedings fifth workshop parallel distributed systems acm san jose nov pp 

timothy gibson long term file system activity efficacy automatic file migration doctoral dissertation university maryland baltimore county may 
steven gribble singh manku eric brewer timothy gibson ethan miller self similarity file system traffic proceedings acm sigmetrics madison wisconsin june pp 

steven gribble singh manku eric brewer self similarity file systems measurements applications unpublished department computer science university california berkeley 
david jensen daniel reed file archive activity supercomputer environment technical report uiucdcs department computer science university illinois urbana il 
kumar satyanarayanan directory resolution coda file system proceedings second international conference parallel distributed computing january pp 

samuel leffler design implementation bsd unix operating system addison wesley reading massachusetts 
john merrill eric early experience mass storage unix supercomputer tenth ieee symposium mass storage systems monterey ca pp 

ethan miller randy katz analysis file migration unix supercomputing environment usenix winter conference san diego ca january pp 

ethan miller randy katz analyzing behavior supercomputer applications eleventh ieee symposium mass storage systems monterey ca pp 

ethan miller randy katz input output behavior supercomputing applications proceedings supercomputing albuquerque nm pp 

satyanarayanan longterm distributed file tracing implementation experience software practice experience volume june pp 

john ousterhout da costa david harrison john kunze mike kupfer james thompson trace driven analysis unix bsd file system operating system review proceedings th acm symposium operating systems principles pp 
rivest md message digest algorithm rfc april 
mendel rosenblum john ousterhout design implementation log structured file system operating system review proceedings th acm symposium operating systems principles pp 

satyanarayanan study file sizes functional lifetimes proceedings th symposium operating systems principles association computing machinery pp 

ken shirriff john ousterhout trace driven analysis name attribute caching distributed system usenix winter conference san francisco ca january pp 

alan jay smith analysis long term file patterns application file migration algorithms ieee transactions software engineering se pp 

alan jay smith long term file migration development evaluation algorithms communications acm pp 

keith smith margo seltzer file system aging increasing relevance file system benchmarks proceedings sigmetrics conference june seattle wa pp 

satyanarayanan empirical study wide area distributed file system acm transactions computer systems may pp 

stephen strange analysis long term unix file access patterns application automatic file migration strategies technical report ucb csd computer science division eecs university california berkeley california 
trevor blackwell jeffrey harris margo seltzer heuristic cleaning algorithms log structured file systems proceedings usenix technical conference berkeley ca jan pp 

