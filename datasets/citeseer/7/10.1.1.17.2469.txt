qos negotiation real time systems application automated flight control abdelzaher atkins kang shin real time computing laboratory department electrical engineering computer science university ann arbor michigan marbles eecs umich edu propose model quality service qos negotiation building real time services meet predictability graceful degradation requirements 
qos negotiation shown outperform conventional binary admission control schemes guaranteeing required qos rejecting service request ii achieve higher system utility 
incorporated proposed qos negotiation model example realtime middleware service called manages distributed pool shared computing resources processors guarantee timeliness qos real time applications 
cacy power qos negotiation demonstrated automated ight control system implemented network pcs running rt pool 
system aircraft modeled aerial combat acm flight simulator 
experimental results indicate qos negotiation maintaining real time guarantees enables graceful qos degradation conditions traditional schedulability analysis admission control schemes fail 
predictability real time applications achieved reserving resources employing admission control priori assumed load failure conditions 
graceful qos degradation hand requires dynamic resource reallocation order cope changing load failure conditions maximizing system utility 
predictability reported supported part advanced research projects agency monitored air force rome laboratory 
graceful qos degradation necessary real time applications pose con icting requirements 
main focus toachieve predictability graceful degradation long lived real time services embedded applications 
long lived mean request granted hold reserved resources relatively long period time 
control load imposed system resources guarantee certain level qos request go admission control resource reservation 
conventional admission control schemes binary decisions guarantee reject request 
requests may rejected resources committed arrived earlier 
hard real time systems static analysis may performed guarantee priori requests honored assumption worst case request arrival behavior service requirements 
assumptions violated run time due transient overload resource loss failures guarantees may invalid may turn lead system failure 
propose mechanism qos re negotiation way ensure graceful degradation cases overload failures violation pre run time assumptions 
mechanism permits clients express service requests spectrum qos levels accept provider perceived utility receiving service levels 
result application designer able express acceptable compromises qos relative cost bene derived application domain knowledge 
incorporate proposed qos negotiation processing capacity management middleware service called 
service designed imple mented support timeliness guarantees ight control application set ight control tasks qos levels corresponding rewards provided ight mission planner necessary support 
mission planner developed context cooperative intelligent real time control architecture circa computes task execution tradeo application domain knowledge alters mission plan required qos negotiation 
review related section followed description proposed qos negotiation model section 
section describe distributed processing resource management service follows proposed qos negotiation model highlighting synergy components support 
details rt pool implementation negotiation api section describe context automated ight control section 
flight performance evaluated section illustrating cacy qos negotiation support followed brief summary section 
related predictable performance real time services traditionally achieved resource reservation admission control 
hard real time systems resources reserved priori application 
line schedulability analysis verify reserved resources su cient meeting timing constraints 
analysis requires worst case load failure conditions known design time 
applications worst case load failure conditions may di cult know needed ensure graceful performance degradation load failure hypotheses violated 
line admission control guarantee predictability services request patterns known advance establishment requests real time channels 
concept applied resource reservation real time tasks spring kernel dreams real time system 
main concern approach predictability 
run time guarantees admitted requests revoked result rejecting subsequently arriving important requests competing resources 
soft real time systems services concerned maximizing utility serving important request rst guaranteeing reserved resources individual requests 
priority driven services generally categorized way supported real time kernels alpha mach :10.1.1.26.4422
overload conditions lower priority tasks denied service favor important tasks 
operating system resource planner attempts dynamically maximize user perceived utility system 
scheme adopt notion guaranteeing reserved amount resources application 
compromises giving irrevocable service guarantees arriving requests hard real time system maximizing system utility soft real time systems addressed 
example virtual clock communication schemes essentially delay transmission request virtual arrival time 
enforces global priority order special case maximizing utility 
similar approach suggested guaranteeing dynamic real time tasks 
decision guarantee arrived task commit resources delayed critical instant ectively making system wait important tasks arrive 
unfortunately delay making task guarantees may waste processing bandwidth may reduce schedulability increase task rejection rate 
di erent approach hard real time guarantees maximizing perceived utility overload failure conditions offer qos new dimension trade making resource management decisions 
qos negotiation extends typical real time service interface different ways 
ers qos degradation alternative denial service enhancing percentage accepting service requests total perceived system utility 
second provides generic means utilizing application speci knowledge control qos degradation 
describes generic qos negotiation scheme application automated ight control systems 
qos negotiation model simple expressive qos negotiation model key building predictable gracefully middleware services real time applications 
section describe application model proposed qos negotiation model model real time middleware service supports qos negotiation 
consider class embedded real time systems software components realize functions accomplish single mission 
henceforth call mission application 
flight control computing automated manufacturing process control generally fall category 
application composed set tasks requires set resources services 
concerned mainly long lived services need hold reserved resources extended period time processor capacity reservation communication connection establishment services 
negotiation model centered simple abstractions qos levels rewards penalty 
client requesting service speci es request set negotiation options penalty rejecting request derived expected utility requested service 
negotiation option consists acceptable qos level client receive provider reward value commensurate qos level 
qos levels expressed terms parameters semantics need known client service provider 
example establishing real time communication connection parameters may specify client delay jitter requirements 
processor capacity reservation may express required processor bandwidth multicast protocol may represent semantics requested multicast service reliable ordered causal atomic delivery 
reward represents degree satisfaction achieved qos level utility supplying client level service 
client negotiation options represent set alternatives acceptable qos utility 
rejection penalty client request penalty incurred application request rejected 
rejection penalty plays role request guaranteed 
section describe qos levels negotiation options rejection penalty computed context ight control application mission planner 
planner computes qos levels rewards penalties application domain knowledge speci cation system failure probabilities 
control system load way ensures predictable service service provider subject client request line admission control determines guarantee reject request 
propose slightly di erent notion guaranteeing request compared conventional notion guarantee 
model guaranteeing request certi cation request receive service qos levels listed negotiation options 
selection qos level receive service provider 
fur thermore service provider free switch qos level level client negotiation options increases perceived utility 
note specifying negotiation option default rejection penalty reduces mechanism traditional line guarantee schemes 
proposed mechanism perform worse schemes special case provides means express take advantage accurate semantic information application information available 
require application designer supply information necessary traditional line guarantee schemes er exibility take advantage additional semantic information available 
section give example application bene ts support 
shifting authority selecting clients qos levels client service provider important advantages 
application code decoupled assumptions underlying resource availability capacity implied client asks speci qos level 
second providing negotiation options delegating qos level selection provider allows qos level adjustment provider necessary achieve higher system utility maintaining client qos guarantee level speci ed negotiation options 
designed example middleware service rt pool support proposed qos negotiation model 
service responsible managing distributed pool computing resources processors guarantee timeliness 
employs processor membership protocol keep track processor pool membership report processor failures 
schedulability analysis provide timeliness guarantees 
additionally support qos negotiation 
support split local distributed algorithms focus section 
clients application tasks 
rt pool service requests guarantee timeliness new incoming tasks 
task execution model uenced requirements ight control application section su ciently general di erent applications 
assumes periodic tasks handles aperiodic tasks periodic servers 
task composed set modules deadline modules complete 
modules may arbitrary precedence constraints specifying execution sequence 
assume task arrivals guarantee requests independent support precedence constraints di erent tasks 
request guaranteeing task includes rejection penalty negotiation options client task specify di erent qos levels respective rewards 
client task qos level specied parameters execution model 
independent periodic task parameters consist task period deadline execution time 
model period deadline negotiable parameters 
represents signi cant departure scheduling literature authors articulate task periods real time control systems system stability performance index 
task execution time hand depends underlying machine speed hardcoded client request 
qos level negotiation options speci es modules client task executed level 
allows programmer de ne di erent versions task executed di erent qos levels compose tasks mandatory optional modules 
reward associated qos level tells utility executing speci ed modules task period deadline 
requests guaranteeing tasks may arrive dynamically machine pool 
proposed qos negotiation scheme tasks normally receive higher qos minimum functionality qos level highly probable new arrival guaranteed local machine 
guarantee request local machine executes local qos optimization heuristic re computes set qos levels local clients including new maximize sum rewards 
recomputing qos levels degrading tasks accommodate new 
task rejected new sum rewards including newly arrived task existing sum prior arrival ii di erence current previous sums larger new task rejection penalty 
requested task guaranteed 
result task execution requests guaranteed penalty resulting qos degradation local clients larger rejecting request 
task execution request rejected local machine may attempt transfer guarantee different machine load sharing algorithm 
note conventional admission control schemes incur request rejection penalty client task ti qos levels mi mi rewards ri ri respectively 

start selecting best qos level mi client ti 

set selected qos levels schedulable steps 
client ti receiving service level mi mi determine decrease local reward ri ri resulting degrading client lower level 

find client tk rk rk minimum degrade lower level 

go step 
local qos optimization heuristic arrived task set current tasks 
ering qos degradation alternative rejection admission control rules show reward sum perceived utility achieved scheme lower bounded achieved conventional admission control schemes schedulability analysis load sharing algorithms 
general proposed scheme achieves higher perceived utility 
gives example local heuristic 
heuristic implements gradient descent algorithm terminating nds set qos levels keeps tasks schedulable 
note tasks executed highest qos level machine su ers lled potential reward 
lled potential reward upr di erence total reward achieved current qos levels selected maximum possible reward achieved local tasks executed highest qos level 
di erence thought fractional loss mission unavoidable due resource limitations 
loss may caused poor load distribution case improved proper load sharing 
employs load sharing algorithm implements distributed qos optimization protocol 
described protocol uses hill climbing approach global sum rewards clients distributed pool 
activated machines di erence upr upr exceeds threshold close examination local qos optimization 
source machine ni find client tk removal result maximum increase total reward 

ni request reassigning tk reward 
machine nj receives request recomputes qos levels local clients plus tk 
total reward higher tk nj bids tk reward increment wj resulting accepting 

ni transfers tk highest bidder 
distributed qos optimization protocol heuristic distributed qos optimization protocol reveals assumptions nature client semantics qos levels 
means complete independence task model feasibility assessment module qos negotiation mechanism 
result easier enhance handle elaborate task models constraints qos level parameters semantics ecting qos negotiation mechanism 
disadvantage separation concerns compromises optimality somewhat illustrated example section 
implementation api section highlight implementation details particularly related api 
currently running top osf mach rt mk pc platform implemented user level library exports abstraction tasks threads qos levels rewards 
highlighted components implemented prototype 
scheduling qos negotiation scheduling qos negotiation support implemented thread package called controlled user level local scheduler 
local scheduler lowest layer supports periodic thread creation period changed run time response qos level changes 
top local scheduler package exports abstraction tasks qos levels rewards 
api permits user create tasks create threads task de ne qos levels specify rewards 
permits user specify distributed qos negotiation protocol assumes service client migrated node 
thread qos levels thread eligible execute 
package exports force negotiation primitive initiate qos negotiation 
current implementation created tasks execute address space 
application compiled single executable image loaded entirety system start time 
code static task arrival activation times di erent nodes may vary dynamically 
invocation migration top provide invocation migration mechanism implement distributed qos optimization protocol described section 
mechanism completely transparent application 
call invocation migration transfer occurs successive invocations periodic task invocation terminated hasn started 
distributed qos optimization heuristic determines task migrated state variables thread transferred task sent new machine threads belonging task destroyed source recreated transferred state target 
current implementation state variables thread indicated corresponding library call thread initialization time 
force negotiation primitive called source target transfer update qos levels accordingly 
task execute certain machine task wired machine calling wire task primitive 
pool membership api algorithm maintain consistent view current membership shared resource pool 
group membership algorithm derivative user interface algorithm subscribe pool call causes machine call executed join named pool 
new machine subscribes joins machine pool adds new member group 
new machine run application task lled potential reward zero 
heuristic machines lled potential reward agiven threshold attempt oad tasks new member 
task transfer continue lled potential reward balanced certain threshold stops distributed qos optimization protocol 
machine fails group leader machine highest number pool re creates destroyed tasks load sharing heuristic redistributes load necessary 
group leader fails sor machine highest pool number leader 
task state lost case crash avoided task replication 
communication api application need aware tasks executing 
executable application image started machine joins pool 
application composed tasks decision run task left load sharing heuristic 
requires location independent send receive primitives inter task communication 
tasks communicate location independent send receive primitives local communication bu ers machine send messages network remote destinations 
communication protocol stack implemented layered top udp ip stack 
communication subsystem architecture host designed support prioritized bounded time message delivery 
architecture proposed earlier context implementing real time channels 
adapt export abstraction sporadic communication server implemented separate task support 
application provide negotiable timeliness guarantees real time tasks required fully automated ight control system simulated model aircraft 
details automated aircraft ight problem provided section followed description method determine task qos levels rewards application domain knowledge section 
section summarizes set tasks qos levels rewards describe application 
automated flight control current flight management systems fms perform functions including ight planning navigation guidance control 
ight planner computes waypoint trajectories ight navigator uses sensor data maintain current aircraft state estimate 
guidance module uses planned trajectory state estimate build state vector controller compute actuator commands 
fms real time execution guarantees exist navigation guidance control adhering critical function deadlines schedulability guarantees line 
qos negotiation scheme allow graceful performance degradation resources lost violate line guarantees 
consider tasks having known bounded execution time 
issues dealing potentially unbounded line computations runtime intelligent ight planning discussed 
issue aircraft guidance commands terms altitude compass heading employ loop compute primary actuator commands including elevator ailerons throttle 
elevator ailerons generate aerodynamic forces directly ect aircraft roll pitch attitude dynamic coupling alter aircraft heading airspeed 
throttle provides linear force aircraft 
controller may command secondary actuator set improves ight performance critical ight safety 
secondary actuators include extra engine thrust aps speed brake enhance slow airspeed control 
parallel research ort set linear controllers implemented calculate primary actuator commands achieve desired altitude ref heading ref 
controller state includes altitude heading pitch roll equation shows control laws experiments adopted 
higher performance qos levels see section controller sends discrete valued commands secondary actuator set described 
elevator ailerons ref ref computing qos levels rewards qos negotiation scheme enables application domain expert express application level semantics qos levels rewards rejection penalty 
section brie highlight support may complement mission planning techniques context circa cooperative intelligent real time control architecture 
ed domain knowledge base circa main goal build set control plans keep system safe avoid catastrophic failures aircraft crash working achieve performance goals arrive destination time 
order deal successfully inherently nondeterministic poorly modeled environment complex real time system circa employs probabilistic planning models system set states transition probabilities 
system failure modeled temporal transitions failure states 
circa mission planner uses domain knowledge base select appropriate actions tasks timing constraints qos levels probability reduced certain threshold 
reward decrease corresponding degrading task qos level rejecting task altogether computed corresponding increase failure probability 
circa planner computes maximum period task notion preempting 
state outgoing ttf considered preempted probability speci ed threshold 
de ne alternative qos levels circa planner may compute di erent task periods set alternative ttf probability thresholds 
example say ttf cumulative probability distribution reaches threshold value preemptive task maximum period set seconds 
suppose need relax task period requirement overload 
new longer task period degraded qos computed higher ttf probability threshold task assigned lower reward corresponds reduction certainty ttf preempted 
complete set task qos levels may considering ttf probability thresholds 
description flight tasks aerial combat acm ight simulator ight tests 
acm runs sun workstation socket connection real time execution platform 
tested qos negotiation ying simulated aircraft left hand pattern aircraft executes takeo climb holds constant altitude rectangular course descends nal approach landing 
varying periods controllers sensors able observe degradation ight quality stability function task selected qos level 
section describe tasks rewards qos negotiation algorithm tests 
mission goals complete ight pattern destroy observed enemy targets onboard radar missiles 
separate tasks required control aircraft guidance guid control ctrl slow navigation fast navigation 
tasks function similarly named fms counterparts 
guid responsible computing trajectory state aircraft 
tests guid speci ed heading altitude lead aircraft pattern landing 
ctrl task responsible executing low level control loops compute actuator commands high level guidance trajectory 
navigation tasks estimate aircraft state distinguished required update frequency 
table shows qos levels tasks including associated reward execution time period version ver 
simple tests set task deadline equal period requirements qos negotiation protocol 
tasks considered critical execute degraded qos level set task rejection penalties su ciently high tasks accepted qos negotiator 
addition basic ight control tasks simulate function necessary military operation missile control mc 
mc composed precedence constrained threads read radar fire missile 
read radar monitors aircraft radar detect approaching enemy targets fire missile launches missile targets appearing radar 
shown table mc computationally expensive 
level radar scanned su cient frequency allow detection destruction enemy targets 
level fast moving targets may destroyed 
experiments section varied reward mc qos level depending relative importance destroying enemy targets 
described ctrl responsible executing control loop 
ctrl uses equation control law appropriate gains compute primary actuator values 
versions task tested secondary actuators qos levels qos levels 
actuators allows aircraft perform better terms takeo distance climb rate shown section expense longer task execution time 
importance ctrl task period illustrated relatively high reward low period ctrl qos levels 
small reward changes di erent versions level vs level re ects fact version choice critical safety 
de ned qos level ctrl shown section slow aircraft task ms sec ver guid def def def ctrl sec prim sec prim sec def def def def def def mc def def table flight plan di erent qos levels 
task responsible reading sensors require high sampling rate 
navigation sensors grouped task task determine high level altitude heading commands 
reward period values table re ect task noncritical nature 
responsible maintaining sensor data ctrl task 
system read data su cient state estimates periods associated rewards similar ctrl 
evaluation section show results illustrating qos negotiation help aircraft ight control degrade gracefully 
assess qos negotiation heuristic ight tasks observing qos task degrades lower machine speeds 
section study aircraft performance ight function ctrl task qos level illustrating graceful performance degradation example 
sections focus tests single machine consider guidance navigation control tasks 
conclude experiments section tests include missile control task observe ects load sharing machines processor failure demonstrate graceful performance degradation 
unstable 
levels included qos negotiation options illustrative purposes 
mode number cpu speed scaled task guidance task controller task slow navigation task fast navigation qos levels vs cpu speed ight tasks 
qos negotiation heuristic testing section described simple local qos optimization heuristic help service provider select high reward set qos levels clients 
qos levels rewards listed table illustrate behavior heuristic 
experiment task set xed decreased underlying cpu speed increasing task execution times observed corresponding decrease task qos levels 
plots qos levels modes selected vs cpu speed normalized minimum cpu speed task set schedulable 
heuristic uses reward information guide search feasible qos level set applicable service uses qos negotiation scheme optimality compromised graceful qos degradation illustrated 
aircraft performance system performance studying ability simulated ight 
section tasks execute machine 
shown ctrl required smallest period tasks execution bottlenecks ight performance changes easily observed changes ctrl qos 
tasks tightly coupled ctrl uses results test matrix included variations ctrl qos highest lowest level ensured acted low period selected ctrl 
shown table ctrl qos levels function period version 
tests show ight performance di erences due variables speci cally critical takeo climb phase ight 
illustrates di erences versions ctrl best performance case period msec 
level actuation requires larger execution time level secondary actuation harder schedule 
altitude ft time sec mode mode aircraft altitude performance secondary control actuation 
climb performance level slightly better level consistent small reward di erence 
example illustrates qos negotiation achieve graceful degradation 
processor utilization decreased reducing ctrl level safety controller stability compromised 
performed tests varying ctrl task period 
isolated version period ects exclusively selecting qos levels secondary actuation similar trends result ctrl version levels 
illustrate performance changes function task period consider qos levels level period sec level period sec level period sec 
include level ctrl qos options comparative example illustrating controller instability 
course unstable qos levels de ned client negotiation options client ask instability 
figures show aircraft state function time takeo climb turn south east 
shows aircraft altitude di erent ctrl task periods 
period increases climb performance gracefully degrades qos levels unstable level period sec illustrating necessity real time response ctrl task 
figures show aircraft pitch angle roll angle respectively stable controller qos levels 
note include level unstable response obscures plots 
pitch angle altitude coupled pitch largest magnitude climb illustrated period increase second causes large pitch angle required longer stable undesirable performance trait 
roll angle shows delay longer deviation zero signi cant overshoot task period increases 
altitude ft time sec period period period aircraft altitude varied ctrl qos levels 
heading rad time sec period period period aircraft heading varied ctrl qos levels 
pitch angle rad time sec period period aircraft pitch ctrl qos levels 
roll angle rad time sec period period aircraft roll varied ctrl qos levels 
load sharing load sharing capabilities implemented rt pool performed nal test set included ight control tasks missile control mc task described section 
tests start system machines available task execution 
de ned table mc task computationally expensive load sharing protocol places ight control tasks machine mc task read radar fire missile threads machine 
machines function normally ight missile control tasks ran maximum performance levels 
case enemy targets quickly detected red ight control identical best performance pro les section plots 
test set began operation functioning machines shut simulating failure just takeo requires load sharing qos negotiation algorithms function dynamically functional machine execute ight missile control tasks 
mc task reward relatively low system chooses degrade mc guid functions level manages keep ctrl tasks safe levels 
manner ight control bit sluggish stable 
aircraft unable launch missiles targets 
alternatively system may aboard important function destroy target attack enemy aircraft 
case reward set may structured missile control task takes precedence accurately maintaining ight control 
illustrate changes task reward set altered reward qos level shown table 
second machine shuts qos negotiator reduces ight control levels missile controller important task 
machine fails aircraft eventually unstable illustrated section quickly detect respond enemy targets radar 
important note traditional schedulability analysis algorithms allow negotiated qos degradation system failed guarantee accept entire task set processor leading complete mission failure 
tests missile control takes precedence ight control single machine operation aircraft unstable 
undesirable actual system missiles launched crashed aircraft 
summary novel scheme qos negotiation real time applications 
scheme applicable design real time service providers extending interface services adopts modi ed notion request guarantees allows de ning qos compromises supports graceful qos degradation ii provides generic means express application level semantics control application qos degraded overload failure conditions 
qos negotiation scheme improves guarantee ratio traditional admission control algorithms increases application level perceived utility system 
proposed qos negotiation architecture incorporated example middleware service implements computing resource manager pool processors 
synergy components service qos negotiation support illustrated 
ight control application demonstrate cacy qos negotiation 
demonstrated application negotiable parameters bene added exibility negotiation 
showed application task qos levels rewards analytically derived system failure probability 
qos negotiation support guaranteeing maximum qos levels normal operation shown provide graceful qos degradation case resource loss 
demonstrated application bene proposed qos negotiation scheme analyzed performance di erent qos optimization policies general scope applicability 
currently studying alternative qos optimization methodologies scalability qos negotiation approach 
considering ways implement negotiable fault tolerance qos extension 
weare working develop new schemes quantifying perceived utility compute reward penalty values 
possible approaches include adapting performability analysis economic models utility costs 
acknowledgment authors wish jahanian ashish shaikh feng sharing opinions insights development 
atkins durfee shin plan development local probabilistic models uncertainty arti cial intelligence proceedings twelfth conference pp 
august 
xu parnas scheduling processes release times deadlines precedence exclusion relations ieee trans 
software engineering vol 
se pp 
march 
shepard pre run time scheduling algorithm hard real time systems ieee transactions software engineering vol 
pp 
jul 
abdelzaher shin optimal combined task message scheduling distributed real time systems ieee real time systems symposium pisa italy december 
kandlur shin ferrari realtime communication multi hop networks ieee trans 
parallel distributed systems vol 
pp 
october 
stankovic ramamritham spring kernel new paradigm real time systems ieee software pp 
may 
sommer potter operating system extensions dynamic real time applications ieee real time systems symposium pp 
washington dc december 
clark jensen reynolds architectural overview alpha real time distributed kernel proceedings usenix workshop microkernels kernel architectures :10.1.1.26.4422
tokuda nakajima rao real time mach predictable real time system proceedings usenix mach workshop pp 
october 
jones leach modular realtime resource management operating system technical report msr tr microsoft research advanced technology division may 
zhao ramamritham virtual time csma protocols hard real time communication ieee transactions software engineering vol 
pp 

mercer savage tokuda processor capacity reserves operating system support multimedia applications proceedings ieee international conference multimedia computing systems pp 
may 
lehoczky sha shin task schedulability real time control systems ieee real time systems symposium pp 
washington dc december 
abdelzaher shaikh jahanian shin lightweight multicast real time process groups ieee real time technology applications symposium boston massachusetts june 
hutchinson peterson kernel architecture implementing network protocols ieee transactions software engineering vol 
pp 
january 
shin structuring communication quality service guarantees ieee real time systems symposium pp 
washington dc december 
evolution ight management systems proceedings ieee aiaa thirteenth digital avionics systems conference pp 

ieee 
ight management computer ight plan trajectory computation analysis proceedings american control conference pp 
june 
atkins 
reasoning time building plans safe fully flight 
university ph thesis proposal december 

acm aerial combat simulation february 
