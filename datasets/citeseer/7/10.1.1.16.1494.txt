generic proxy system networked computer games martin mauve university mannheim mannheim germany mauve informatik 
de stefan fischer tu braunschweig 
braunschweig stefan fischer tu bs de org widmer university mannheim mannheim germany mauve informatik 
de progress report general outline research project aims providing proxy support networked computer games 
problems client server fully replicated architectures discussed reason employing proxy technology successfully networked applications advantageous class applications 
particular describe proxy system networked computer games help providing congestion control achieving robustness minimizing impact network delay providing fairness 
keywords networked computer games proxy congestion control robustness latency optimization fairness 
networked computer games form challenging class distributed applications 
require low network latency fairness protected players want follow rules data transmit usually scaled delayed 
furthermore online games online ii popular took months initial launch provide sucient bandwidth server capacity handle players 
currently di erent architectures networked computer games 
commercial products typically centralized client server architecture central server maintains game state 
game clients run computers individual players 
receive information game state server may change sending local actions server 
academic environment prototypes networked games rely replicated architecture centralized server mimaze :10.1.1.23.7509
architecture applications cooperate maintain shared game state 
shall discuss alternatives exhibit signi cant problems large scale games heterogeneous networks internet 
propose proxy architecture combines advantages centralized distributed approaches 
main idea architecture move intelligence server functionality border network 
concept tremendously successful networked applications web access multimedia content distribution 

existing architectures commercial networked computer games generally employ centralized client server architecture 
true games thousands players participating game online ii games limited number players quake 
main bene ts architecture quite compelling maintaining consistency game state relatively easy server holds master copy state 
reason illegal manipulations game state players extremely dicult 
conceiving business models architecture fairly straight forward charge access server sell server software 
issues vital success commercial networked computer games developers applications typically accepted quite substantial drawbacks centralized server bottleneck game 
games large number players major problem coping rst couple months operation 
latency actions remote players typically high actions sent server distributed players 
information take long detour 
time players di erent network delays treated unfairly 
players small latency server usually advantage players higher latencies 
due high demands interactivity poses information dissemination appropriate congestion control mechanisms application class 
deployment large scale networked computer games signi cant hazard service provider hosting 
distributed architectures networked computer games maintain game state game instances run players 
need central server 
application instances communicate directly ip multicast available 
approach primarily academic research projects mimaze dive massive :10.1.1.23.7509
main advantages architecture central bottleneck player actions transmitted directly application instance players avoiding detours increase latency 
research prototypes proven distributed approach superior respect aspects architecture generally commercial products 
main reason commercial purposes bene easier manageability centralized architecture outweighs advantages distributed gaming framework 
furthermore discussed current ip multicast environment dicult effectively consider di erent interests receivers large scale sessions sure receivers get data interested 
summarizing reasoned centralized distributed architectures suciently suited large scale commercial computer games 
exhibit substantial problems scaling deployment perspective 
propose investigate new architectures mitigate aforementioned de ciencies try combine bene ts approaches 

proxy architecture networked computer games aim research project investigate suitability proxy architecture application class networked computer games 
depicted central server charge maintaining game state nal authority consistency prevention illegal state manipulations 
client may connect directly server communicate way centralized client server architecture 
player may connect proxy main server 
expected proxies located close players respective service providers 
proxies thought extensions server 
server trust certain degree proxies control players 
consequently server functionality delegated proxies located closer players 
furthermore proxies interconnected 
form overlay network may alleviate inherent problems centralized architecture 
aim research project develop proxy system investigate extend improve conventional architectures networked computer games 
particular architecture help provide player central server proxy player player player player player player player proxy proxy proxy architecture tion control enhance robustness minimize impact network latency improve fairness protect cheating 
components aim realize generic functionality usable networked computer game 
addition dynamic distribution game dependent functionality proxies may increase exibility possible uses 
congestion control realizing appropriate mechanism congestion control networked computer games dicult applications tolerate delayed transmission information done example tcp 
hand amount data sent received player usually scaled done adjust rate audio video transmission current network conditions 
viable mechanism congestion control resort form access control 
networked game access control safeguard overload server ii 
game popular launch initially overrun players bringing network servers complete halt 
developers forced add hard limit number players allowed play time 
simple measure insucient solve problem network congestion fair competition network trac turned rejecting incoming connection requests central server exceed server capacity peak times 
presence proxy system alleviate problem congestion 
proxies interconnected possible route trac congested areas 
case possible paths server congested server handle current load help proxies individual proxies perform access control 
allows server continue operation connection requests 
proxies admit additional players long generated trac fair competing ows handled server 
robustness addition overlay proxies avoid congested areas network improve robustness architecture 
shown andersen balakrishnan kaashoek morris overlay network signi cantly improve network fault detection recovery 
twelve node overlay network recover measured network outages routing intermediate overlay node 
fault detection rerouting took order seconds conventional routing mechanisms take minutes settle alternative route 
today network outages relatively common engineered networks hard prevent completely 
network proxies detect outages suciently fast transparently rerouting clients di erent proxy hide faulty network behavior user maintain partial network outages 
latency optimization order investigate latency important understand di erent ways state game change non deterministically rst change caused user actions second change random events 
client server architecture user actions brought attention server game clients players 
latency user action determined time takes action ect received remote players 
includes transmission server distribution server clients 
presence proxy architecture latency reduced signi cantly possible local proxy player performed action transmit information server directly proxies players 
avoids unnecessary detour action distributed players reduces perceived latency 
order determine players interested message existing grouping strategies network games 
random events client server architecture typically transmitted server point time occur 
arrive late clients delayed network latency 
server usually transmit random events ahead time form random number seeds clients able decode additional information ahead time gain unfair advantage players 
help proxies form cheating easily prevented sending random events trustworthy proxies ahead time 
proxies placed close game clients forward random event time takes place unduly delaying event execution 
fairness cheating prevention distributed application participants cooperate solve common problem compete closely related characteristics desirable users chance winning competition 
possible prevent discover conforming client behavior 
possible identify players conform rules order prevent participation game 
believe issues signi cantly easier address help proxies control players trustworthy gaming applications running players computers 
fairness networked computer games judged context notion time 
essentially necessary determine issues operations point time independently network delay players player server 
reach goal user action associated timestamp determine ordering temporal distance user actions 
order prevent cheating centralized architecture timestamp user action typically considered time arrival operation server 
creates unfairness due di erent network latency individual players experience server 
distributed architecture timestamping user actions problematic 
levine propose discrete time divided time frames 
user distributed application opportunity execute operation time frame 
quite problematic high network latency clients lead slow execution operations acceptable games 
proxy architecture solution problem straight forward proxy timestamps user action 
players longer gain advantage modifying timestamps actions 
furthermore proxies sure operations remote players played early game client 
simply done bu ering operations players visible player served proxy 
rules apply potentially data intensive game information needs available client speci point time 
typical example data level map distributed clients completely explored reduce communication cost 
cheating players attempt decode information available existing problems games ii 
proxy architecture revealing map gradually player explores level feasible alternative 
longer necessary distribute information client available 
proxies check behavior player conforms certain rules 
server longer perform time consuming tasks turn support larger number simultaneous clients 
proxies detect players called bots try manipulate game protocol acts special type rewall game server 
gaming proxy act form packet normalizer preprocessing client information ensuring valid client data distributed clients server 
cheating faulty behavior observed proxy necessary identify corresponding client able take appropriate actions terminating connection client preventing client connecting server 
mechanism fail face spoofed addresses fake user ids 
proxies located closer clients isp spare capacity tracking clients server reliable identi cation cheating clients greatly simpli ed 
challenging task aforementioned mechanisms keep functionality game independent possible 
necessary allow dynamic con guration proxies game 
important task context nd suitable format describe rules 
xml example language description rules 

progress report general outline research project generic proxy support networked computer games 
reason centralized client server architectures fully replicated applications suciently solve problems encountered area large scale online computer games 
moving server functionality boundaries network believe important problems networked computer games solved including congestion control robustness latency minimization providing fairness cheat prevention 
information distribution strategies adjusted new architecture transmit game state information clients speci point time information available 
placement proxies close clients possible move functionality clients proxies gain control players action reliably prevent cheating improve game performance 
overlay network proxies commercially feasible alternative proxies able support multitude di erent game architectures simultaneously 

akamai 
akamai homepage 
www akamai com 
andersen balakrishnan kaashoek morris 
resilient overlay networks 
proc 
th acm sosp 
aronson 
groupings networked gaming 
www com features aronson htm june 
levine 
cheat proof playout centralized distributed online games 
proc 
infocom 
blizzard 
ii homepage 
www blizzard com worlds shtml 
diot gautier :10.1.1.23.7509
distributed architecture multiplayer interactive applications internet 
ieee networks magazine july august 
fr econ 
dive scalable network architecture distributed virtual environments 
distributed systems engineering journal 

inside massive flexible support data consistency world structuring 
proceedings third acm conference collaborative virtual environments cve pages 
handley paxson 
network intrusion detection evasion trac normalization protocol semantics 
proc 
usenix security symposium 
levine crowcroft diot garcia luna aceves kurose 
consideration receiver interest ip multicast delivery 
proc 
infocom 
origin 
online homepage 
www uo com 
software 
id software homepage 
www com 

homepage 
www com 
zou ammar diot 
evaluation grouping techniques state dissemination networked multi user games 
proc 

