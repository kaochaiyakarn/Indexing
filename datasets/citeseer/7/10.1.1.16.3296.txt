aspect oriented programming component weaving xml representations syntax trees stefan elke ller stefan fakult informatik universit ulm ulm germany institut und universit karlsruhe karlsruhe germany acm org aspect oriented programming aop related techniques propose solutions problem crosscutting requirements usually providing weaver major parts compiler 
proposes xml operators extensible aspect language 
xml representations syntax trees ast base language 
generated modifying existing compiler allow xml tools tree query manipulation 
prototype encompasses constructs aspect languages particular aspectj composition filters implemented 
need modularization separation concerns topic classical publications 
necessarily straightforward decomposition axis functional requirements understood subject extensive research 
hand requirements complex semantics crosscutting impact software distribution persistence robustness documented difficulties software development 
various techniques proposed manage concerns aspect oriented programming aop related techniques composition filters cf subject oriented programming sop 
increasingly furthermore term aspect oriented software development aosd subsume concepts 
approaches mentioned implementations exist aspectj system aop version released time writing 
hyper prototype prototype implementing limited subset cf 
prototypes java base language 
source code available aspectj approach better documented refer comparison 
aop useful solving real world problems situation perfect research point view practical applications strong theoretical basis existing prototypes bound particular base language user usually support extend language 
research aosd semantics semantics descriptions provided available aosd tools formal give hints implementation strategy 
examined implementations large 
main goal operator approach provide platform experimentation aop techniques flexibility terms aspect language base language heavily reuse existing technologies compiler front ends xml tools implementation significantly shorter transformation parts succinct readable 
context prototype implements new approach built shown examples aspectj literature realized technique 
xml operator approach 
aspectj version aspect static final int min static final int max void int check new value illegal min max void check string description boolean test test throw new error description aspectj part binding corresponding operator right int execution void point setx int args java part class extends aspect static final int min static final int max void int check new value illegal min max void check string description boolean test test throw new error description operator part transform operator name method execution modifier join point xpath class name point method name setx call method aspect name parameter forward forward type argument number parameter forward operator transform example preconditions 
aspectj code left operator approach right 
operator approach demonstrate principles approach example 
shows code precondition checking aspectj proposed operator approach side side 
aspectj version slightly modified version example 
code performs actual precondition checking top identical approaches exception operator approach java code separate binding instructions aspectj part aspect 
java class containing part aspect generated weaver 
apart separation code advice operator approach binding instructions bottom different syntax aspectj syntax close java seen language extension operator approach syntax defined xml 
xml code necessarily directly written user generated ide offering user friendly interface 
actual code produced versions identical 
ingredients ao language motivate structure operators briefly take look existing ao languages contrast approach 
agreement requirements ao language reached kiczales distinction static dynamic crosscutting 
language elements deemed necessary join point model means identifying join points means specifying additional behavior join points 
aspectj dynamic join point model characterizes join points certain defined points execution flow program 
join points identified combined pointcut designators execution method executions call method calls join points executing object value instance point subclass point section 
advice construct associates code advice body particular pointcut executes called public class test string tostring int return public static void main string argv system println new test tostring aspect negation execution tostring system print code causing ajc generate nonterminating recursion tostring method original code 
argue pointcut keywords equal fall classes 
firstly primitive join points call execution reasonably combined pointcut designators 
example illustrate point single negated primitive join point execution tostring 
semantics definition aspectj explicitly forbid construct precisely define meaning 
negation method executions methods name tostring irrespective return type arguments class membership advised 
negation probably join points tostring method execution affected 
semantics definition unclear current version ajc causes non terminating recursion entry tostring method clearly intended complete example 
reasonable combination set union replaced separate advice declarations 
argue pointcut contain primitive join point see exactly 
operator approach name operator 
primitive join point specifies type pointcuts currently considered 
primitive join point seen superset join points selected providing pattern parameter 
secondly syntactical constraints expressed keyword signature selected method calls 
narrow set join points selected primitive join point 
operator version public class test aspect constraint test system print aspect syntactical constraint approach syntactical constraints specified xpath expressions ast nodes 
thirdly dynamic constraints execution advice body dependant state program 
alter set join points generally require check run time 
examples aspectj constructs falling category cflow 
prototype operator approach modelled added stage 
aspectj resolves dynamic constraints program instructions statically woven base code 
current lack dynamic constraints principal limitation approach 
aspectj semantics definition explicitly specify constructs just categorized constraints stand 
ajc causes counterintuitive results example constraint seen 
quite clear code translated ajc causes aspect code executed 
constraint test example exchanged test aspect code executed times 
argue constraints stand pointcut contain primitive join point resulting exactly primitive join point result 
aspectj static crosscutting operator 
takes location introduced parameters 
constructs ao languages fit 
example forward operator introduces unconditional forwarding methods selected inner objects implemented cf 
nutshell classes 
forwarding delegation object composition 
composition filters allow messages sent received objects intercepted manipulated 
prototype implements input fil xpath expressive upcoming xml query languages xquery standardized aspect code aspect code java sources operator part java part jikes jikes internal ast internal java ast xml java ast xml ast xml java ast ters error dispatch 
input filters modelled prototype successfully implemented approach example provided works intended 
focus show general feasibility integrate approaches prototype point shares limitations prototype 
principal limitation approach 
operator structure operator structure briefly revisiting example 
operators enclosed transform tag general ordering important 
type operator name parameter example specifies primitive join point type 
syntactic restrictions specified join point tag xpath 
tags describe aspect method call parameters passed aspect method 
general operator structure described xml schema allows automatic schema validation 
implementation examined prototypes parse regular java code perform semantic analysis certain point 
asts internally represent manipulate java programs 
open source implementations java compilers jikes exist semantic analysis build ast ajc operator composer aspectj vs operator approach aspectj approach woven java result operator approach part compiler front obvious source reuse 
annotated ast xml format generated externalized run slightly modified version lines code added 
xml representation directly parsed xml api exists languages including java 
prototype realized 
shows translation process operator approach comparison aspectj 
input cases consists java source code aspect code 
java input identical aspect constructs specified different format detailed 
parsing semantic analysis transformation output java source code compilation class files implemented internally aspectj 
operator approach takes annotated ast modified jikes compiler parsing semantic analysis 
prototype transforms input specified xml tools operate tree 
output tree performed xslt stylesheets generate java source code alternatively xml interface bi directional back directly compilation transformed ast 
basing transformation process syntax trees benefit independent concrete syntax 
additionally implementations existing operators easier adapt different similar base language 
existing prototypes asts tighter coupling language dependant parsing semantic analysis part stages 
separating base language part operator part independent syntax helps prevent coupling 
prototypes keep base language part separate decoupling similar level proposed 
admittedly syntactically close language extension aspectj appeal developers base language keeping advice binding instruction intuitive 
flexibility lost think ide support get important example automatically list advice join points source 
ide support show operator corresponding java part points crosscuts 
xml model ast tree query manipulation 
helps keep implementation prototype short concise 
extensible stylesheet language transformations xslt ast proposed features syntax highlighting hyperlinks variable corresponding variable definitions possible 
xpath tree query language successfully select primitive join points model static restrictions 
standardized query language helps realize performance gains newer implementations 
took measurements compare code sizes various approaches non commentary source statements metric aspectj org aspectj compiler package prototype prototype currently totals including graphical user interface 
adding kloc rough estimate maximum kloc xslt code prototype order magnitude smaller 
researched approaches code generated 
related papers suggesting transformational techniques ones context compiler optimizations aop implementations 
contrast early days focus aosd developed lower metric measures code size similar lines code loc metric independent coding style 
tool measurements version level design level code manipulation 
implementations easier join points specified explicitly transformations just applied 
transformations newer aop approaches different avoid problems confluence termination source source transformations 
fact data structures internally compilers asts useful source code input tools widely acknowledged 
tool ast xml format basis 
concept operator construct composition various contexts mixin inheritance design patterns 
criticism aspectj pointcut constructs issued authors come similar 
classification slightly different concrete examples 
furthermore suggested compact representations syntax trees intermediate languages mobile code 
context enable techniques transform source code compile time intermediate representation class load time 
intentional programming ip aosd approach implemented ast transformations 
focus domain specific languages transformations crosscutting concerns 
years inception prototype released general public source code available project microsoft unclear 
logical steps study approach extends aop techniques hyper easily base language changed gather empirical evidence different aop approaches combination 
refactorings strive improve system architectures applying semantics preserving transformations 
having access annotated ast relatively straightforward implement operators 
suggested view design patterns code transformations 
fact examples aspectj composition filters show aid aosd implementation certain design patterns 
may worthwhile investigate suitability higher level operators pattern 
general research area operators planned 
extension additional ao composition operators categories operators explored integrated 
empirical studies suggest aspect oriented programming useful new programming technique 
existing aosd languages prototypes suffer problems little guidance combine different approaches ao languages hard extend base language fixed prototype sources relatively large 
contributes proposing experimental platform operator approach shows steps possible solutions problems 
issues language design aspectj underline need experimentation 
base transformations syntax ast nodes expressed xml generated separate step 
migration base languages possible 
basing aspect language xml easy extend language combine different approaches 
implementation individual operators relatively short succinct various standardized xml libraries tree query manipulation 
reusing compiler front feasible helps lean implementation 
prototype approach far encouraging results considered preliminary 
david parnas 
criteria decomposing systems modules 
communications acm pages december 
kiczales hilsdale hugunin kersten palm 
getting started aspectj 
communications acm october 
see www aspectj org 
bergmans aksit 
composing multiple concerns composition filters 
communications acm october 
ossher tarr 
multi dimensional separation concerns hyperspaces 
technical report rc apr ibm thomas watson research center yorktown heights ny 

development preprocessor facilitate composition filters java language 
master thesis department computer science university twente 
mmel 
semantical approach method call interception 
proc 
st international conference aspect oriented software development aosd 
acm press april 
appear 
wand kiczales 
semantics advice dynamic join points aspect oriented programming january 
appear fool 
andrews 
process algebraic foundations aspectoriented programming 
reflection lncs pages september 
douence 
formal definition crosscuts 
reflection lncs pages september 
kiczales hilsdale hugunin kersten palm 
overview aspectj 
ecoop object oriented programming lncs pages heidelberg germany 
springer verlag 
kiczales aspectj programming guide aspectj version november 
see aspectj org doc dist 
xml standards 
see www org xml 
szyperski 
component software object oriented programming 
acm press addison wesley new york 

markup language java source code 
www ninth international world wide web conference volume pages 
see www cs washington edu homes 
ller mezini 
reusability concerns 
proceedings aspects dimensions concerns workshop ecoop sophia antipolis cannes france june 
mann ludwig 
aspect weaving graph rewriting 
generative component software engineering erfurt october 
fradet 
aop generic framework aspect oriented programming 
third aop workshop ecoop workshop reader volume pages 
bracha cook 
mixin inheritance 
norman meyrowitz editor proceedings fourth acm conference object oriented programming systems languages applications oopsla pages 
schulz 
design patterns operators implemented refactorings 
proceedings ecoop workshop experiences object oriented re engineering 
de win de decker 
open weaving process 
oopsla workshop advanced separation concerns object oriented systems august 
franz 
mobile object systems chapter adaptive compression syntax trees iterative dynamic code optimization 
lncs pages february 
aitken de moor richter 
transformation intentional programming 
pages 
ieee computer society press 
kersten murphy 
atlas case study building web learning environment aspectoriented programming 
oopsla 
