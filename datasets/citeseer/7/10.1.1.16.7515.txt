quick safari reconfiguration jungle patrick leuven belgium ingrid ucla dept ee los angeles ca usa ingrid ee ucla edu cost effective systems specialization optimize factors power consumption processing throughput flexibility combinations thereof 
reconfigurable systems obtain specialization run time 
system reconfiguration vertical horizontal time dimension 
organize design space reconfiguration hierarchy discuss design methods deal 
survey existing commercial platforms support reconfiguration situate reconfiguration jungle 

programmability reconfigurability considered key ingredient silicon platforms 
support flexibility requires dedicated specialized toolset 
despite reconfiguration generally recognized separate axis design 
generic definition reconfigurable computing available system level view reconfiguration process missing 
design data models computational models needed represent reconfiguration effectively researched 
look reconfiguration system design point view 
includes generic definition reconfiguration process section enumeration system design technologies support section 
section overview existing platforms 

reconfiguration hierarchy design space motivate origin reconfiguration hierarchy consider fpga runs soft intellectual property ip core running protocol stack 
clearly protocol stack program consists soft core instructions 
fpga merely treats program data processed reconfigurable fabric 
meaning data varies abstraction level 
complication originates change protocol stack program dynamically depending type protocol processed 
called reconfiguration kind bitstream configuration fpga 
reconfigurable systems introduce multiple levels programming design 
consequence configuration data occupies multiple levels 
hierarchy configuration permission digital hard copies part personal classroom granted fee provided copies distributed profit commercial advantage copies bear notice full citation page 
copy republish post servers redistribute lists requires prior specific permission fee 
th dac june las vegas nevada usa 
kurt ucb dept eecs berkeley ca usa eecs berkeley edu language packet field word router engine router instruction status classifier queuing ucla dept cs los angeles ca usa cs ucla edu configuration routing table priority weight bitstream reconfiguration levels router hierarchy processing data representation 
instance routing table packet routing engine system configuration fpga bitstream containing queuing algorithm inside routing engine architecture configuration 
router logically organized logical physical hierarchy machines layer controlling lower level processing finer data granularity 
define design space orthogonal axes describe re configurable systems vertical axis expresses level abstraction horizontal axis expresses reconfigurable feature diversity time axis expresses timing relationship configuration processing 
vertical axis related level abstraction 
application developer closely coupled idea virtual machine interpreter fetches instructions executes terms primitives lower abstraction level 
ic designer vertical axis associated hierarchy granularity computing primitives device 
lowest level naturally recognize logic primitives gates simple storage registers routing 
higher levels micro architecture instruction set architecture process architecture systems architecture represent additional layers computation abstraction 
reconfiguration applicable new abstraction layer introduced 
vertical axis describes hierarchy horizontal axis describes slices hierarchy 
level hierarchy combination communication storage computation 
reconfiguration affect individually 
table enumeration different design elements horizontal characterized different design levels granularities 
term coarse grain fine grain reconfigurability usually associated variation horizontal features architectural level 
binding time expresses configuration data send processing part 
level hierarchy bound configuration packet reconfiguration dynamic reconfiguration time packet packet packet packet packet field field field binding time individually 
distinguish implementation time binding binding 
implementation time binding configuration postponed actual execution processing part required 
design time binding configuration done moment processing part conceived 
equivalent hard coding 
terms preferred traditional run time compile time ones unique hierarchical systems 
order physical implementation lowest processing level system design time bound 
top level programmable systems implementation time bounded 
smooth transition called binding time continuum 
useful relate processing activity binding time 
packet routing engine example shown earlier consider reconfiguration done processed packet 
allows distinction configurability reconfigurability dynamic reconfigurability 
refer 
arrows indicate points configuration 
configurability indicates possibility fix configuration data subsequent received packets typical configuration silicon implementation 
reconfigurability allows changing implementation received packet typical configuration computational task 
dynamic reconfigurability applies new configuration data faster rate reception packets instance processed packet field typical configuring cycles execution 
design example give example hierarchical system point reconfiguration useful different levels hierarchy 
implementation switches muxes micro architecture crossbar busses instruction set architecture process architecture systems architecture fsm input elliptic curve public key cryptography operations points specific curve finite field called underlying field 
point multiplication fundamental operation key agreement protocol 
diffie hellman key agreement protocol works follows point curve alice compute bob compute alice receives computes bob receives computes share secret key assumption eavesdropper access compute discrete logarithm problem hard problem elliptic curve group 
algorithm implemented different abstraction levels 
highest level point multiplication executed integer point elliptic curve 
point multiplication decomposed additions subtractions points elliptic curve 
primitive operations points elliptic curve decomposed operations elements underlying field 
operations addition division multiplication squaring elements underlying field 
architecture elliptic curve crypto processor shown 
processor designed hierarchical controller 
top layer fsm accepts instruction stream allows programming algorithm parameters initiating point multiplication layer arranges fsm 
input output match word length characteristics encryption algorithm bits system bits fsm implements primitive elliptic curve operations 
data path implements operations underlying field 
table examples configurable design elements communication storage processing ram organization clb ip block register file size cache architecture size address data bus register set memory architecture instruction fsm point mult fsm ready datapath gf execution unit type interpreter levels custom instructions interrupt architecture fsm output elliptic curve encryption processor interconnection network buffer size number type asynchronous processes tasks advantages hierarchical control specification advocated 
include better control complexity increased reuse opportunities 
addition note reconfiguration useful level abstraction 
architecture support different field sizes values making data path reconfigurable 
typically bits 
fine grain reconfigurability allows supporting optimal architecture polynomial length 
reprogrammable fsm receives fsm translates sequence micro instructions data path 
reprogrammable fsm allows changing elliptic curve multiplication algorithm 
instruction set allows reprogramming elliptic curve irreducible field 

design technologies section briefly overviews design technologies support types reconfigurability discussed 
aim technologies identify required reconfigurability effectively exploit 
demonstrates general approach achieve 
starting application domain profile set applications identify common computationally intense kernels domain primitives 
parametric implementation kernels forms building blocks reconfigurable platform 
second step single application application domain mapped manually automatically reconfigurable portions platform 
granularity computational kernels varies significantly techniques doing mapping 
remainder section considers design technology support steps different levels abstraction 
instruction set architecture consider configurations instruction set architecture 
specialized operations included system careful trade area throughput power consumption 
examples illustrate point 
example instruction set general purpose microprocessors widest coverage 
power consumption orders magnitude higher programmable dsp processors ones cellular phones 
reason dsp processors right amount programmability application domain wireless communications 
includes specialized instructions accelerated viterbi decoding turbo decoding 
example systems instruction set configuration section 
example fpga supports generic type reconfiguration implementation level reconfiguration 
power breakdown fpga shows power consumption associated interconnect 
high price general reconfigurability especially considering applications high operation regularity dsp low routing requirements 
consequently need domain specific processors provide sufficient reconfiguration application domain time don need afford general 
examples wireless application application application profiling domain primitives application domain application instance mapping target configuration formation platform design reconfigurable platforms communications multimedia packet processing routers switches signal processing encryption 
areas possible specialization processor data paths perform actual operations memory architecture interconnect architecture control architecture 
profiling identify right processor specializations 
order profiling set representative algorithms application domain executed type quantity operations algorithm needed collected 
information instruction set design process 
advanced strategies possible 
generations instruction sets explicit communication dependence information embedded instruction 
dominance interconnect memory bandwidth deep sub micron technologies application domains heavily throughput driven 
dependence information derived higherorder profiling step considers operation data dependencies operation types topic current research 
micro architecture level flexibility reconfigurable systems comes expense reconfiguration time including synthesis place route 
circumvent move system hierarchically described section 
level hierarchy think basic building blocks reconfigurable architecture parameterized functional blocks pre placed fully reconfigurable fabric 
call versatile parameterizable blocks 
programmable minimum amount input 
lowest level hierarchy equivalent clbs highest level capable performing complex functions described section 
implementing application perform operations mapped fixed blocks computational blocks instantiated fully reconfigurable portion chip perform remaining operations 
detailed description see 
demonstrate concept example image processing 
repetitive arithmetic operations large amount data efficiently implemented hardware 
algorithms common properties operations grouped 
algorithms common set implementation 
algorithms classes belong summarized table 
example useful image processing filter operations block shown 
block takes parameters define operation 
iterative image restoration algorithm filtering operations mean computation noise reduction high pass sharpening laplace operator edge detection operators sobel 
mask coefficients array holds values coefficients 
parameters take value functions iterative image restoration algorithm 
fabric collection compiler techniques map algorithm specification heterogeneous architecture 
initial mapping extracted profiling techniques 
day design final manual intervention needed obtain optimized design 
performed preliminary study application profiling 
starting point high level code fortran set applications compiled control dataflow graphs 
done suif compiler front machine suif take suif intermediate format ir control flow graphs cfg 
implement pass translate cfgs perform simple profiling 
multimedia applications known high level parallelism exploited performance hardware 
examined mediabench application suite 
profiled files suite performed actual multimedia operations fft motion detection table presents results simple operation sequences 
notation op op denotes op directly uses output op edge op op cdfg 
percentage listed potential operations num op op sum total num ops percentage single application exceed 
gather lot information simple profiling 
example sequence operations deviates probability theory sequence mul add greater frequency add mul 
probabilistically sequences occur proportion 
additionally profiling shows mul table classification image processing algorithms algorithms operations class image restoration mean computation noise reduction sharpening smoothing filter image edge detection image image weighted sum addition subtraction multiplication filter operations comparison thresholding addition subtraction pixel modification configuration processing cycle av add sequence implemented widely applications 

platform survey having taxonomy reconfigurable devices indication design support devices survey reconfigurable platforms best place taxonomy 
surveys academic reconfigurable platforms available concentrate commercial ones 
table lists academic commercial platforms pointers detailed information 
set exhaustive 
due rapid evolution area claim representative selection devices 
commercial configurable platforms architectural elements naturally configurable processor blocks 
blocks intended fully autonomous devices intended included intellectual property ip blocks silicon die 
basic parameters processor define types vertical configurability architectural micro architectural implementation level configurability 
architectural configurability means actual programmer view processor configured different ways 
example number registers instruction set may change 
micro architectural configurability means functional unit organization change 
example number units implement instruction may change 
implementation configurability means physical table profile operations simple combinations mediabench file name motion adpcm add mul 
potential operations av filtering block mul mul add add add mul mul add implementation may change 
example physical implementation architecture may may performance speed oriented 
arc tangent risc core illustrate types configurability 
ip blocks delivered soft hardware description language format may implementation configured rtl synthesis tools place route tools create physical implementation 
processors configurable implementations 
tangent processors simple risc cores 
processors offer instance horizontal micro architectural configuration options size organization caches number priority interrupts 
significant configurability processors comes instruction set architectural configurations 
starting base instruction set instructions arc tangent user add application specific instructions multiply accumulate mac normalize writing hdl 
arc tangent offer set instruction extension packages specific domains dsp 
arc offers types level instruction extensibility 
type user chooses set pre defined instruction set extensions 
instructions software environment including simulator assembler compiler automatically regenerated 
designer may augment arc arbitrarily complex processor 
augmentations user intervention required generate software environment 
supports user defined instruction extensions 
places limits extensibility instructions fully generates software environment instructions 
type instruction extensions users able gain jpeg viterbi decoding speed improvement standard risc microprocessor 
vliw processors class processors suited configurable applications 
processors significant number architecture parameters varied adhering vliw system concept design environment 
examples number type data paths interconnect architecture controller architecture 
ar designer frontier design environment creates configures vliw processors starting description 
improv programmable systems architecture offers configurability instruction set architecture process architecture systems architecture level 
designers may configure individual vliw jazz processor adding computational units 
units scheduled controlled integrated fashion execution units 
multiple jazz processors may integrated integration blocks form multi processor integration systems architecture 
integration processors ip blocks single die led predominance system chip ic 
configurable processors arc tangent improv jazz new type platform introduced supports integration instruction level 
resulting platforms rival commercial academic table re configurable platforms platform vertical excalibur altera www altera com virtex xilinx www xilinx com isa www com tangent arc compiler isa www com frontier design www com chess target isa www retarget com jazz improv systems isa www com meca pmc sierra www pmc sierra com www com isa www com atmel www atmel com cs chameleon syst 
www com garp ucb isa brass cs berkeley edu piperench cmu www ece cmu edu arch piperench uci isa www eng uci edu sps ucla www cs ucla edu reconfigurable kuleuven isa www asic speeds ic may entirely programmed traditional software environment 
implementation isa instruction set architecture micro architecture process architecture commercial reconfigurable platforms configurability powerful configurable devices architecture implementation fixed semiconductor processing 
designers want deferring configuration decisions actual field deployment runtime 
fpga deal reconfigurability implementation level 
xilinx introduced devices years ago offers differentiated product families optimized high performance low power consumption low cost 
chameleon reconfigurable communications processor targeted wireless communication applications cdma cdma umts 
reconfiguration possible micro architecture level chip arc core supports process level reconfiguration 
reconfigurable fabric cs organized processing slices consisting tiles tile consists bit datapath elements multipliers 
offers bit datapath elements 
planes configuration memory accessible arc core 
compiler techniques map single program thread combination fabric core optimize reconfiguration overhead 
product literature indicates device able handle cdma chip rate processing channels 
device allows relatively inexpensive dynamic reconfiguration algorithms exploiting reconfiguration cycles development 
driving specialization micro architecture level task level platforms specific application areas obtained 
example pmc sierra meca targeted voice ip applications comes firmware reconfiguring device 
advantage reconfigurability realized user downloads firmware upgrades field 
compared cs mec offers relatively fewer powerful coarse grain datapath oriented reconfigurable elements 
example coarser grain reconfigurability provided offers packaged stand reconfigurable devices targeted wireless base station market reconfigurable ip blocks 
architecturally standalone device organized series reconfigurable kernel processing elements controlled general purpose processor 
reconfigurable element coarse grained datapath oriented 
trend combination fine grain reconfigurable fabric general purpose processing core 
resulting system provides implementation level reconfiguration fabric combined task level reconfiguration core 
fabric memory mapped core 
example configurable system chip families 
platform supports different processor cores mcu arm application types 
atmel offers avr micro controller 
altera combines embedded microprocessors arm mips peripherals reconfigurable logic excalibur family 
mentioned reconfigurable blocks offered ip blocks embedded ic developer 
reconfigurable logic vendors new program adaptive silicon new programmable logic core direction 
allow mechanism reconfiguration hierarchy proliferate asic landscape 

reconfigurable systems introduce exciting new dimension programming spanning abstraction levels system 
new design technology needed offer effective model systems 
commercial side encouraging see product offerings application focused rely simply efficient mechanism provide application performance 
result reconfigurable technology moving academic research solutions oriented commercial technology 

authors companies mentioned providing product details useful insights 
authors grateful organizational contributions 

asips get ready reconfigurable silicon www com story oeg application specific microprocessor solutions overview handbook pp 
www com compiler directed approach hiding configuration latency chameleon processors tang jou fpl pp 

reconfigurable computing implications design automation dehon wawrzynek dac 
stream computations organized reconfigurable execution score caspi chu huang yeh wawrzynek dehon fpl pp 

decade reconfigurable computing visionary perspective hartenstein proc date munchen march 
preneel elliptic curve public key cryptosystems springer verlag june pg 
hardware implementation elliptic curve public key cryptosystems ms thesis kuleuven july 
vhdl front embedded systems narayan gajski ieee trans cad june 
low power dsp wireless communications ingrid dave garrett islped pp 
august 
design low energy fpga george hui zhang jan rabaey pp 
san diego 
sps strategically programmable system proc 
raw april san francisco 
suif compiler system stanford university compiler group suif stanford edu suif suif 
machine suif library glenn holloway michael smith technical report division engineering applied systems harvard university 
mediabench tool evaluating synthesizing multimedia communications systems lee potkonjak william smith 
technical report computer science department university california los angeles flexibility configurable computing hutchings ieee signal processing magazine pp september 
roles fpga reprogrammable systems hauck ieee proceedings pp 
april 
reconfigurable instruction set processors survey pp 
proc 
rsp 
