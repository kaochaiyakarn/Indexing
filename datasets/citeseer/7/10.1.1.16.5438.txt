expressive ecient language xml information retrieval nicholas kushmerick smart media institute computer science department university college dublin dublin ireland ucd appear journal american society information science technology special issue xml information retrieval 
draft june 
xml emerged standard exchange structured data documents 
database community proposed languages querying transforming xml including xml ql dff quilt crf xql rob 
languages support ranked queries textual similarity spirit traditional information retrieval 
attempts extend xml query languages support keyword search resulting languages express information retrieval style queries nd books cds similar titles 
languages keywords merely boolean lters support true ranked retrieval permit similarity calculations data value constant express query 
whirl coh coh avoids problems assumes relational data 
propose elixir expressive ecient language xml information retrieval extends xml ql textual similarity operator 
operator similarity joins elixir suciently expressive handle sample query 
elixir quali es general purpose xml information retrieval query language 
central contribution ecient algorithm answering elixir queries 
algorithm rewrites original elixir query series xml ql queries generate intermediate relational data uses whirl eciently evaluate similarity operators intermediate data yielding xml document nodes ranked similarity 
experiments demonstrate prototype scales size query xml data 
xml emerged important standard interchange structured documents data 
distinct application communities arisen see abd detailed discussion 
hand database community treats xml convenient standard data exchange 
hand document management community sees xml sgml html language annotating documents containing natural text 
world wide web consortium announced draft standard xml query language xquery cfr distilled contenders including xml ql dff dff quilt crf xql rob lorel 
languages provide declarative way access lter elements xml databases various predicates rewrite original xml data arbitrary new structure 
languages developed primarily members database community 
generally support semistructured equivalent full relational algebra making useful wide variety data interchange transformation applications 
commercial implementations languages including software ag sof glo xyz 
languages fully meet needs document management ir communities 
focus speci de cit lack support ranking weighting query results textual similarity relevance metrics 
example consider xml database containing book cd titles 
typical query spirit traditional ir nd books cds titles similar phrase ukrainian 
shows query qa elixir extension xml ql supports ranked retrieval textual similarity 
result query sequence items ordered similarity target phrase textual similarity metric example unordered subset items contain terms 
furthermore presumably application posed query interested similar titles 
elixir query processor formalizes notion returning best answers evaluation time parameter 
example textual similarity computed standard ir term vector model query processor asked best answers rst fourth items returned order see 
complicated query identify books cds similar titles see query qb 
note case expresses similarity join operates variables variable constant 
result query merely books cds identical titles unequal pairs discarded 
result ordered sequence items earlier items similar items 
example shows best answers query 
meaning xml output book cd pairs traditional ukrainian book similar cd book second similar cd 
note sake simplicity query output cds books similar traditional ukrainian folk music respectively 
www org 
traditional ukrainian shooting elvis traditional ukrainian folk music milk cow blues db xml construct db xml ukrainian 
qa traditional ukrainian traditional ukrainian folk music construct db xml db xml qb traditional ukrainian xml document describing books cds elixir query qa nding items similar phrase ukrainian elixir textual similarity operator best answers query qa elixir query qb nding items similar titles note qa qb uses join best answers qb attempts extend xml query languages support ranked xml ir extensions express queries qb express qa extended languages fmk keywords merely boolean lters support true ranked retrieval 
extensions permit similarity calculations data value constant tw fg 
restriction means languages express qa express qb qb requires evaluating similarity join data values 
discuss related length section 
ll gap propose elixir expressive ecient language xml information retrieval extends xml ql textual similarity operator just ordinary xml ql operators 
particular operands variables see line query qb elixir queries express similarity joins capability missing previous languages 
elixir suciently expressive qualify general purpose xml information retrieval language 
course additional expressiveness permitted elixir similarity joins important computational rami cations 
fundamental problem wants compute similarity join variables infeasible simply generate full cross product bindings variables compute similarity pair shown 
naive evaluation similarity join generates full cross product variable bindings 
elixir invokes whirl avoid computing full cross product variable bindings evaluating similarity joins 
designed ecient algorithm answering elixir queries avoids unnecessarily computing variable binding cross products see 
speci cally elixir query processing algorithm invokes whirl coh coh subroutine 
described section whirl extends datalog uw textual similarity metric 
query processor rewrites elixir query series xml ql queries generate intermediate relational data invokes whirl eciently evaluate similarity predicates intermediate data 
whirl relational output translated xml structure speci ed nal xml ql query 
note algorithm simply map original xml data relations dfs sth fts expensive general elixir query whirl query 
algorithm uses xml ql query xml data native form possible 
resulting intermediate data eciently converted relations processing whirl 
similarity predicates evaluated resulting tuples converted back arbitrary xml format speci ed original elixir query 
data model relational xml full support sql datalog quilt xml ql information retrieval 
whirl elixir elixir lls open gap space query languages support ranked ir 
additional expressiveness permitted elixir similarity joins merely theoretical interest 
example data integration wie kld important application requires similarity joins 
data integration systems uniform view data retrieved multiple heterogeneous sources 
data integration applications manipulate noisy textual identi ers person names book movie titles addresses forth 
decentralized nature applications data integration systems assume shared domains accurate normalization routines identi ers 
example want compute join title attribute book databases 
data structures algorithms java data structures algorithms java refer book 
michael goodrich goodrich 
johns hopkins university person 
cohen coh coh describes experiments demonstrating whirl textual similarity predicates highly ective integrating heterogeneous textual data sources relying common domains hand crafted normalization routines 
summarize central contribution query language ranked ir xml data expressive current languages arbitrary similarity joins permitted ecient query processor compute unnecessary cross products bindings variables involved similarity predicates 
remainder describe related section de ne elixir language section describe algorithm answering elixir queries section describe experimental evaluation prototype section nally discuss open issues summarize section 
related shown elixir lls open gap space expressive query languages xml 
section discuss related order situate elixir relative research introduce particular systems xml ql whirl top elixir query processor implemented 
xml query languages languages querying transforming xml data proposed including quilt crf xql rob xml ql dff dff xquery cfr draft standard xml query language 
languages allow query extract particular fragments xml sources discard fragments fail satisfy certain predicates rewrite original data desired xml format 
elixir query language xml ql query language 
decision largely pragmatic grounds anticipate theoretical diculties applying ideas query languages similar expressiveness including xquery 
section brie describe xml ql focusing features needed understand elixir query language processor 
description somewhat simpli ed tailored needs see dff dff examples formal characterization language 
xml ql query expression form construct construct clause speci es desired xml format output 
want output list book details years authors encoded attributes titles encoded contents tags construct title tokens preceded variables pattern contains variables title 
author title template converting bindings variables xml fragment 
query processor generates instantiation set variable bindings 
variable bindings generated clause contains pattern statements form pattern source 
pattern pattern indicating traverse xml object 
source xml object url 
variables pattern bound possible ways match pattern xml data 
example simply transform existing data desired format construct title bib xml 
formed xml documents contain single root tag precise xml ql query form wg 
article ignore root tags sake simplicity 
query transform xml document traditional ukrainian traditional ukrainian addition pattern statements form pattern source clause include boolean operators 
example xml ql query retrieves books published construct title bib xml 
xml ql supports variety typical operators forth 
simplify pattern statements xml ql permits regular path expressions 
example pattern traverses tags illustrates disjunctive pattern 
xml ql queries nested entire xml ql query embedded inside construct clause 
ignore nested queries elixir query language extension non nested subset xml ql 
whirl elixir language borrows heavily xml ql terms xml data querying transformation language closely related whirl relational database system 
essential aspect whirl eciently supports ranked ir textual similarity 
discussion xml ql description whirl highly simpli ed see coh coh details 
whirl extends datalog uw primitive textual similarity operator 
datalog prolog database query language 
datalog query horn clause head clause de nes output relation stores variable bindings constitute answer query body clause conjunction relational predicates 
example book relation year author title columns datalog query retrieve books published output book 
illustrate whirl ranked retrieval capabilities whirl query yields similar results previous query tuples ordered textual similarity title phrase traditional ukrainian output book traditional ukrainian 
crucially whirl allows similarity joins operator applied variables variable constant 
example whirl query nds books titles happen similar authors output book course whirl handles relational data 
elixir query processing algorithm ect extends whirl handle arbitrary xml data 
whirl de nition similarity standard statistical ir term vector techniques sal 
approach model textual documents points high dimensional space 
vocabulary set distinct terms documents similarities computed 
dimension space corresponds term document represented point jv value document dimension written corresponds strength weight term associated document example contain presumably contains occurrences relatively large 
speci cally whirl uses standard ir term frequency inverse document frequency tf idf scheme weighting terms 
approach log tf 
log df term frequency tf number times term occurs document document frequency df fraction documents contain term documents similarity de ned follows sim 

jj document vectors unit normalized similarity values indicating documents share terms indicating documents identical 
preliminaries place brie describe semantics whirl query de ned similarity predicates deleted output relation consider similarity predicates 
predicate form variable variable variable constant 
tuple generates bindings similarity predicate score tuple de ned product similarities variable bindings similarity predicate 
motivation de nition similarity scores taken independent probabilities probability conjunction product probabilities 
complete answer relation tuples ordered score 
whirl generate complete answer answers integer answer rst answers complete answer 
whirl query processor eciently generates answers 
takes advantage certain properties de nition similarity equation 
basic idea wants nd documents similar document need consider documents share terms furthermore similar documents share terms high weight example nd documents similar phrase tall sense process rst documents containing rare high weight term documents containing common term tall 
details whirl algorithm scope see coh coh details 
keyword search xml query languages attempts extend various xml query languages support keyword search 
falls main categories techniques keywords boolean lters genuine ranked retrieval techniques support relevance ranking similarity joins similarity operator operates variable constant variables 
florescu fmk extend xml ql support keyword ltering 
extension adds contains operator xml ql supports keyword search 
example predicate contains ukrainian discards bindings contain term exactly way predicate discards bindings satisfy constraint 
bindings discarded ordered contains extension xml ql support true relevance ranking weighting query results 
systems related elixir way include extension xql naughton xml search engine 
systems rank results research groups extended xml query languages support true ranked retrieval 
elixir languages augment existing xml query language similarity operator 
languages appear expressive elixir similarity operators applied variable constant variables languages appear support similarity joins 
xxl tw extend sql language textual similarity operator 
examples tw suggest express similarity joins xxl discussion similarity joins processed eciently allowed 
conclude xxl similarity operator requires argument constant 
xirql fg extends xql similarity operator operator appears restricted variable constant 
hayashi de ne novel xml query language support ranked retrieval similarity operator appears restricted way 
hand xirql hayashi languages expressive elixir limited sense 
languages attach numeric weights query terms 
query books similar ukrainian additional constraint documents contain ukrainian speci ed degree ranked higher documents contain ukrainian 
elixir whirl currently support keyword weighting implementation issue theoretical diculties 
flattening xml relations signi cant techniques automatically mapping xml data queries relational model dfs sth fts 
case xml data happens tabular structure mapping performed quickly accurately 
general may simple mapping relational model 
complex xml structures mapped data may contain example null values duplicated data items ow relations handling rare xml structures 
furthermore may possible mappings automatic approach mapping xml relations dfs search mapping appropriately trades complexity accuracy optimization process scales poorly size complexity original xml data 
stress elixir query processor simply map original xml data query relational model 
approach taken xxl tw 
described section processing elixir query xml data mapped relations 
tuples bindings query variables passed whirl 
alternative text similarity metrics whirl elixir adopts standard simple similarity metric term overlap 
essentially similarity grows proportion number terms shared documents 
course situations variety real world knowledge essential determining similarity 
furthermore similarity relative concept 
cases appropriate treat microsoft research microsoft entity applications incorrect 
research sophisticated similarity metrics ir database communities including substantial lexical resources thesauri conceptual hierarchies improve retrieval see overview 
database researchers investigated variety techniques automatically normalizing reconciling heterogeneous textual identi ers hs 
ideally techniques complement elixir simple term notion similarity 
remains open question whirl eciency derives exploiting certain properties term metric extended handle complicated similarity metrics 
structured text databases central role xml encoding structured documents elixir related research databases collections structured text 
ir process structured text take account inherent structure documents representing retrieving structured documents 
section brie discuss structured documents database relevant elixir 
proximal nodes model nby permits operations fact node belongs nal result determined identity position node nodes operands proximal 
query mechanism added elixir 
proximal nodes model support relevance ranking query results 
proximity objects structured document gs 
objects relevant user information need rst scored ranked user 
approach di ers nby proximity metrics applied nodes document object 
lal lal describe model generalized belief function theory evidence determine relevance document component opposed whirl elixir hardwired standard tf idf metric 
elixir approach produces ranked query results discussion answers eciently generated arbitrary belief function 
elixir language elixir augments xml ql primitive textual similarity operator written 
operator just ordinary xml ql operators ignore nested xml ql queries 
semantics elixir combines aspects semantics xml ql whirl 
elixir query form construct elixir extends non nested subset xml ql consists pattern statements form pattern source predicates form variable operator variable variable operator constant operator ordinary xml ql operator elixir operator 
similarity predicates removed set similarity predicates query qa db xml traditional ukrainian db xml traditional ukrainian qb db xml db xml db xml db xml suppose contains variables xm note contain variables ordinary xml ql operators elixir introduce new variables 
dff dff observe evaluating results relation xm column variable tuple set variables satisfy query qb ukrainian traditional ukrainian folk ukrainian ukrainian milk cow traditional ukrainian folk milk cow elvis traditional ukrainian folk elvis elvis milk cow note complete cross product serves de ne elixir semantics 
elixir query processing algorithm generate full cross products 
similarity predicates variable predicates form variable constant similarity join predicates form variable variable set similarity predicates set similarity join predicates 
note 
query qa traditional ukrainian qb cg 
score similarity predicate applied pair values de ned equation 
score tuple xm jrj de ned product scores similarity predicates variables bound speci ed precisely tuple xm de ne score sim xk sim motivation de nition whirl treat similarity scores probabilities treat query similarity predicates independent events probability conjunction product probabilities 
note elixir query contain similarity predicates query ordinary xml ql query score position de ne answer elixir query 
dff dff observe construct clause generates xml fragment tuple complete answer elixir query de ned sequence jrj xml fragments ordered score tuple generated fragment 
elixir query processor compute complete answer computes answers 
answer elixir query de ned highest scoring xml fragments complete answer 
motivation speci cation presumably application interested highest scoring answers answers may signi cant traditional non ranked query processing 
eciently answering elixir queries elixir query processing algorithm eciently computes answer elixir query 
elixir query 
seek best xml objects generated score xml object de ned equation 
algorithm proceeds stages algorithm generates evaluates set xml ql queries 
clauses queries consist pattern ordinary predicate statements copied directly construct clause query builds xml corresponding relation tuple encodes set bindings variables clause 
avoid generating full cross product data values compared similarity predicates algorithm partitions pattern statements statements placed distinct queries contain variables compared similarity predicate 
second algorithm generates evaluates whirl query process similarity predicates 
takes input relations built queries generates ordered table highest scoring sets variable bindings 
algorithm generates evaluates xml ql query query rewrites tuples generated xml form speci ed query construct clause 
speci es elixir query processing algorithm detail 
explain algorithm illustrating operation example queries 
consider query qb 
algorithm rst parses qb follows construct clause procedure answer elixir query integer parse extract root tag construct clause similarity predicates ordinary predicates pattern statements kn partition 
generate xml ql query 
contains variables 
invoke xml ql query processor temporarily store resulting tabular xml document relation 
generate whirl query 



tn 
variables 
variables invoke whirl query processor parameter temporarily store resulting relation tabular xml document xml 
generate xml ql query 
xml 
variables invoke xml ql query processor generate nal answer procedure partition pattern statements ordinary predicates similarity predicates construct graph nodes edge written share variable edge share variable 
partition nodes follows 
subset second subset resulting subsets contain nodes call subsets 
kn subsets consist nodes union subsets 
note may multiple partitions consistent rules case partition returns arbitrarily 
elixir query processing algorithm 
similarity predicates cg ordinary predicates patterns db xml db xml algorithm invokes partition subroutine separate pattern statements clause avoid computing unnecessary cross products variables involved similarity predicates 
partition builds graph shown partitions db xml db xml intuitively represents operations eciently processed sense doing generate unnecessary variable binding cross products 
example entire query decomposed fashion general ordinary predicates operate pairs variables similarity predicates sake eciency ordinary predicates deferred similarity predicates processed 
subset contains precisely ordinary predicates deferred manner 
shown algorithm generates xml ql queries retrieves books xml database retrieves cds 
algorithm generates whirl query applies qb similarity predicate 
note distinction whirl relational input output straightforward xml encoding tables 
whirl generates best answers query 
point correct data identi ed stored relation xml structure speci ed qb algorithm transforms data copying original construct clause qb nal xml ql query transforms whirl output desired structure 
understand important partition consider alternative creating query alternative construct db xml db xml alternative alternative approach scale output full cross product bindings shown equation 
rst example query relatively simple contains just single similarity predicate ordinary predicates 
complete presentation elixir query processing algorithm describing answer complicated query db xml db xml db xml db xml db xml commitments yb yb yc yv ordinary operators pattern statements similarity operators key graphs generated partition subroutine example queries 
traditional ukrainian shooting elvis ukrainian folk music milk cow blues traditional ukrainian shooting elvis ukrainian folk music milk cow blues traditional ukrainian traditional ukrainian original elixir query xml ql query xml ql query whirl query xml ql query db xml key data flow intermediate queries data query final xml output construct db xml db xml construct db xml construct db xml construct xml elixir query processor eciently generates answer query rewriting xml ql queries whirl query nal xml ql query colored text indicates parts generate intermediate queries 
construct db xml db xml db xml yb yc yb yv dog 
query intended sensible useful merely illustrate query processing algorithm 
query processor rst parse query follows construct clause video similarity predicates dog ordinary predicates yb yc yb yv patterns db xml db xml db xml partition subroutine construct graph shown return partition db xml yb db xml db xml yb yc yv partition expresses fact type item retrieved separately items discarded whirl computes answer point computing cross product variable bindings bindings discarded whirl 
reason deferred ordinary predicates predicates variables span subsets processed query generate unnecessary variable binding cross products whirl query algorithm generates intermediate queries construct yb db xml yb 
construct yc yv db xml 
construct yv db xml 
yb yc yv yb yc yv dog yv yc construct yb yc yv xml 
note algorithm rewrites elixir query stage pipeline partition assigning various parts query stage xed policy 
discussed section particular policy may optimal respect standard metrics size intermediate data 
explore optimal query rewriting techniques 
summarize query processing algorithm rewrites original elixir query series 
xml ql queries retrieve xml data needed similarity ranking 
ordinary predicates evaluated query doing require unnecessarily computing cross product variable bindings 
required data retrieved ltered possible whirl query generates data needed create answer xml ql query transforms output xml structure speci ed query note straightforward implementation partition runs time jsj 
joj 
jp elixir expressiveness adds negligible overhead underlying xml ql whirl query processors 
experiments elixir query processing algorithm implemented java 
section report detailed empirical results thirteen queries xml databases see 
version xml ql query processor research university pennsylvania version whirl query processor research experiments carried mhz pentium iii processor mb ram running red hat linux sun java sdk version 
xml databases widely discussed xml research community sigmod record table contents new testament shakespeare macbeth julius caesar romeo 
give indication size complexity lists database size bytes number tags 
queries ordered total cpu time required processing 
rst columns describe query 
indication query complexity report number similarity joins simple non join similarity predicates pattern statements query 
marks columns indicate queries databases 
ninth column indicates sum sizes input databases query 
nal columns indicate performance query processing algorithm 
column indicates size intermediate data passed xml ql queries whirl query 
column eleven gives size nal output generated note size output approximately nal output report values 
note size nal output largely determined number answers requested cases 
nal columns list cpu time required answer query column twelve total cpu time www research att com sw tools whirl research att com www acm org sigmod record xml index html metalab unc edu xml rel zip metalab unc edu xml zip query number similarity join predicates number simple similarity predicates number pattern statements sigmod record kb tags new testament kb tags macbeth kb tags julius caesar kb tags romeo kb tags input data size kb input data size kb output data size kb total time cpu seconds time cpu seconds total time cpu seconds performance thirteen elixir queries xml databases 
consumed queries column thirteen cpu time consumed column gives total cpu time entire elixir query 
note total cpu time reported includes time rewrite elixir query time execute times negligible compared total report values explicitly 
example queries experiments query requests sigmod record papers titles new testament verses lines macbeth similar construct vol xml xml macbeth xml vol answers discovered elixir include opportunities information management assurance 
time sought opportunity 
ll assurance double sure size separation spatial join 
joined lord spirit 
ireland separated fortune object technology drive data administration 
differences administrations lord 

dicult draw clear trends data query processing time depends complex ways details query input data 
note xml ql queries usually dominates total time answer query 
re ects fact underlying process parsing traversing input xml data expensive similarity predicates 
attempt see elixir query processing algorithm scales report results families queries result varying query parameters 
rst experiment investigated elixir scales size intermediate data generated queries 
vary size intermediate data modi ed query construct xml xml 
varying volume threshold query vary amount intermediate data passed xml ql queries whirl query shown total time process queries increases linearly size intermediate data 
total elixir query processing time increases size intermediate data 
second experiment investigated number answers ects performance elixir query processor 
shows results systematically varying queries 
data demonstrate queries marginal increase total query processing time increases 
third experiment measured ect numbers similarity join predicates total elixir query processing time 
elixir queries containing similarity join predicates 
complicated query query total elixir query processing time increases marginally number desired answers increases 
total elixir query processing time increases linearly number similarity joins predicates 
construct xml xml macbeth xml caesar xml romeo xml queries formed removing similarity join time query 
shows total elixir query processing time increases linearly number similarity join predicates queries 
summarize reported detailed performance results set elixir queries systematically varied aspects queries order measure algorithm scales 
conducted thorough experiments real world distribution queries conclude elixir query processing algorithm scales reasonably query size complexity 
discussion summary 
described elixir expressive ecient language xml ir 
inspired whirl system elixir extends existing xml query language xml ql primitive similarity operator orders output textual similarity 
previous orts integrate keyword search xml elixir supports genuine ranked retrieval output ordered similarity constraints stated query permits similarity joins applied variables just variable constant 
elixir suciently expressive candidate general purpose xml ir query language 
focused xml data retrieval integration transformation applications involve text fragments normalized 
experiments demonstrate elixir query processing algorithm eciently computes best answers query 
algorithm rewrites original elixir query series intermediate xml ql whirl queries executes sequence generate xml object answers original elixir query 
systems automatically map xml data relational model elixir map xml data se tuples variable bindings 
whirl eciently orders tuples bindings similarity predicates original elixir query 
currently exploring open issues regarding elixir ranked xml query languages 
implementation elixir extends non nested subset xml ql 
currently extending implementation handle nested queries 
envision straightforward extension approach nested queries simply invoking elixir query processor recursively 
implementation elixir straightforward xml ql relatively simple language 
exploring problems encountered apply ideas complicated languages quilt crf xquery cfr draft standard xml query language 
intuition rewriting process somewhat complicated think fundamental ideas underlying approach remain relevant 
explored optimization issues 
elixir query processor follows strict stage approach rewriting original query may sub optimal cases 
example consider query searches books elvis similar newer cds construct db xml db xml elvis yb yc 
yb yc evaluated early queries late query 
partition algorithm greedily defers predicates avoid generating full cross product book cd pairs 
suppose books cds database books published cd cds published book 
current policy optimal nm 
note current approach assigns similarity predicates single whirl query books elvis better rewriting generate whirl query nd books compare cds second whirl query 
shown exploring techniques automatically searching space query rewritings order nd optimal respect standard metrics intermediate data sizes 
interested elixir support richer variety information access tasks simple retrieval 
example ir community explored techniques query reformulation relevance feedback help users generate ective queries clustering techniques help users visualize large information spaces 
interesting see elixir extend ideas sets documents structured xml text databases 
acknowledgments 
research supported enterprise ireland st 
arthur cater joe william cohen kai gro johann alan mel eide lalmas helpful discussions xml ql whirl developers making systems available 
abd abiteboul buneman suciu 
data web relations semistructured data xml 
morgan kau man 
baeza yates ribeiro neto 
modern information retrieval 
addison wesley 
cfr chamberlin florescu robie simeon stefanescu 
xquery query language xml 
www org tr wd xquery 
coh cohen 
integration heterogeneous databases common domains queries textual similarity 
proc 
sigmod pages 
coh cohen 
whirl word information representation language 
arti cial intelligence 
yb yc elvis elvis yb yc yb yc elvis elvis yb yc cd book elixir query optimization involves nding query rewriting optimal respect size intermediate data 
path graph represents distinct rewrite elixir query implementation currently uses top rewrite policy may suboptimal depending properties data sources 
crf chamberlin robie florescu 
quilt xml query language heterogeneous data sources 
proc 
sigmod pods workshop web databases 
dff deutsch fernandez florescu levy suciu 
xml ql query language xml 
proc 
th int 
world wide web conf 
dff deutsch fernandez florescu levy maier suciu 
querying xml data 
data engineering bulletin 
dfs deutsch fernandez suciu 
storing semistructured data stored 
proc 
sigmod 
fg fuhr gro johann 
xirql extension xql information 
sigir workshop xml information retrieval 
fmk florescu manolescu kossmann 
integrating keyword search xml query processing 
proc 
th int 
world wide web conf 
fts fernandez 
tan suciu 
silkroute trading relations xml 
proc 
th int 
world wide web conf 
glo com 

www com 
gs goldman shivakumar 
proximity search databases 
th int vldb conference 
hayashi tomita searching text rich xml documents relevance ranking 
sigir workshop xml information retrieval 
hs hernandez stolfo 
merge purge problem large databases 
proc 
sigmod 
kld knoblock levy duschka florescu kushmerick editors 
proc 
workshop ai information integration 
aaai press 
lal lalmas 
dempster shafer theory evidence applied structured documents modelling uncertainty 
proc 
int 
sigir conf 
research development information retrieval pages 
lal lalmas 
model representing retrieving heterogeneous structured documents evidential reasoning 
computer journal 
levy knoblock minton cohen 
trends controversies information integration 
ieee intelligent systems 
papakonstantinou vianu 
view de nitions dtd inference xml 
prob 
workshop semistructured data nonstandard data formats 
monge elkan 
eld matching problem algorithms applications 
proc 
int 
conf 
knowledge discovery data mining 
huck 
xql extensions gmd ipsi xql engine 
xml darmstadt gmd de xql extensions 
nby navarro baeza yates 
proximal nodes model query document databases content structure 
proc 
acm information systems pages 
naughton dewitt maier 
niagara internet query system 
www cs wisc edu niagara 
rob robie 
xql xml query language august 
metalab unc edu xql xql proposal 
xml 
sal salton editor 
automatic text processing 
addison wesley 
sof com 
xml power database 
www com 
sth shanmugasundaram tufte zhang dewitt naughton 
relational databases querying xml documents limitations opportunities 
proc 
int 
conf 
large databases 
tw theobald weikum 
adding relevant xml 
proc 
sigmod pods workshop web databases 
uw ullman widom 
rst course database systems 
prentice hall 
wie wiederhold 
mediators architecture information systems 
ieee computer pages march 
xyz com 
schema independent native xml database 
www xyz nd com 

