peer peer approach resource discovery grid environments adriana iamnitchi anda cs uchicago edu ian foster foster mcs anl gov daniel mcs anl gov department computer science university chicago mathematics computer science division argonne national laboratory computational grids provide mechanisms sharing accessing large heterogeneous collections remote resources computers online instruments storage space data applications 
resources requested discovered specifying set desired attributes 
resource attributes various degrees dynamism static attributes operating system version highly dynamic ones available network bandwidth cpu load 
dimension dynamism introduced variable highly diverse sharing policies resources available grid community locally defined potentially changing policies 
dynamic environment efficient forward requests disseminate resource information soon stale 
investigate set request forwarding strategies peer peer architecture peer acts independently possibly partial outdated information rest system forwards requests solve peer 
investigate strategies environments different sharing characteristics different request distributions networks peers 
results allow characterize correlation resource discovery performance request forwarding resource sharing characteristics user request patterns 
computational grids sharing environments collections geographically distributed hardware software resources available groups remote users 
resources computers storage space sensors telescopes software applications data connected internet middleware software layer provides basic services security monitoring accessing information components resources owned various administrative organizations shared locally defined policies specify shared allowed share conditions 
set individuals institutions defined sharing rules called virtual organization vo 
basic service grids resource discovery description resources desired resource discovery mechanism returns set contact addresses resources match description 
resource discovery grid challenging potentially large number resources users millions considerable heterogeneity resource types user requests 
resource discovery complicated natural tendency vos evolve time example institutions joining leaving resources users number resources shared institution varying resource characteristics availability cpu load changing 
characteristics create significant difficulties traditional centralized hierarchical resource discovery services 
dynamic nature grid favor search forwarding requests 
investigate set request forwarding strategies peer peer architecture peer acts independently possibly partial outdated information rest system forwards requests solve peer 
rest follows 
related section 
section presents design decisions 
describe section emulated grid built testbed evaluating various design alternatives measurements section 
conclude section lessons learned research plans 
locating resources wide area systems classes related relevant study resource discovery dynamic self organizing networks resource discovery wide area systems 
category benefited huge attention due popularity peer peer file sharing systems 
systems identify resources files names variety strategies locate specified file including aggressive flooding gnutella combination informed request forwarding automatic file replication freenet intelligent positioning data reliable flexible structures efficient scalable name retrieval chord tapestry :10.1.1.10.4919
dynamism scale heterogeneity name search feasible resource discovery computational grids 
distributed resource sharing systems global names resource discovery condor matchmaker resource descriptions requests sent central authority performs matching :10.1.1.21.1251
centralized architecture efficient local area network condor initially designed assumes willingness organization operate central server 
relevant experience provided globus mds initially centralized service moved decentralized structure pool resources users grew 
mds grid assumed consist multiple information sources register index servers registration protocol 
index servers users enquiry protocol query directory servers discover entities obtain detailed descriptions resources information sources 
left unspecified techniques associate entities directories construct efficient scalable network directory servers 
research complementary mds proposing evaluating mechanisms organize directories equivalent call nodes peers flat dynamic networks 
request forwarding problem context request forwarding solution participant vo organization individual servers store provide access local resource information 
call servers nodes peers 
node may provide information resource multiple resources resources shared organization 
perspective resource discovery grid collection geographically distributed nodes may join leave time notice example result system communication failures 
assume sets resources published nodes disjoint may multiple resources identical descriptions example multiple copies data identical machines 
users send requests known typically local node 
node responds matching resource descriptions locally forwards requests node 
intermediate nodes forward request time live ttl expires matching resources whichever occurs 
node information matching forwarded request consider sends information directly node initiated forwarding intermediate nodes turn send user 
framework particular resource discovery algorithm defined mechanisms membership protocol provides node typically partial membership information nodes strategy determine nodes requests forwarded 
focus describing evaluating different request forwarding strategies described 
membership protocol common peer peer systems node joins grid contacting member node 
contact addresses member nodes learned band information 
node contacted joining members responds membership information 
membership lists updated periodic alive messages exchanged neighbors nodes know 
membership information enriched time receipt message previously unknown node node adds new address membership list 
request forwarding strategy decides node locally known ones request forwarded 
addition contact addresses nodes store information peers information requests previously answered 
tradeoff amount information neighbors search performance generates large set alternatives random forwarding information resources provided nodes hop forwarding nodes know exactly node requested resource 
information dynamic nodes cache information attribute values address es relevant information previously 
evaluated request forwarding algorithms 
random chooses randomly node request forwarded 
extra information stored nodes 

learning nodes learn experience recording requests answered nodes 
request forwarded peer answered similar requests previously 
relevant experience exists request forwarded randomly chosen node 

best neighbor algorithm records number answers received peer recording type request answered 
request forwarded peer answered largest number requests 

learning best neighbor identical learning strategy relevant experience exists request forwarded best neighbor 
emulated grid resource discovery focus large scale simulations tens thousands nodes built specialized emulated grid evaluate request forwarding approach resource discovery 
implemented flexible framework resource discovery request forwarding 
framework includes strategies mentioned easily incorporate new ones 
convenience cluster argonne national laboratory test strategies controlled environment 
minimal modifications framework real deployments 
framework nodes form overlay network 
node implemented python process communicates nodes tcp 
node maintains types information information set resources contribution vo information nodes overlay network including restricted membership information 
performance resource discovery mechanism depends environment usage characteristics scale resource distributions user request patterns 
evaluated request forwarding strategies set overlay networks sizes nodes 
resource distributions modeling resource distributions need consider fairness distribution resources nodes nodes share large number resources just 
experimented resource distributions different degrees fairness 
parameter relevant model number distinct resources identical descriptions 
order reduce parameter space study consider subset resources focus requests match resources subset 
solution allows obtain results valid number shared resources system 
consequences derive solution 
may nodes resources subset interest 

consider requests match resources subset unable determine cost negative answer time live 
discussion relative subset types resources chosen 
realistic setup notice number nodes increases 
total number resources increases 
consider average number resources node remains constant increase network size 

assumptions obtain significant increase resource frequency number resources match particular request increases number nodes 
believe unrealistic scenario new nodes bring new types resources unique line instruments new data new possibly locally developed software applications 
testbed allowed set resource types increase slowly number nodes system 
assumption number resources system varies number nodes different previous study considered fixed set resource types slowly growing set resources 
user requests usage patterns decisive making design decisions tackle problem having real user request logs problem inherent systems design phase 
logged processed week requests computers submitted condor pool university wisconsin 
despite authenticity traces accurately represent request patterns grid environment comprises data services addition computers 
experimented synthetic user request loads follows uniform distribution follows zipf law 
highlights differences request distributions zipf distribution small number distinct requests appear frequently set requests considered case condor logs significant number distinct requests appear 
experiments randomly chose fixed percentage nodes sent independently generated sets requests 
sets requests sent nodes respectively repeated compare various request forwarding algorithms 
request similarity difficult quantify model 
simplified problem considering simple requests requests resource perfect matching 
setup realistic helps understand effects parameters consider 
request rank uniform condor zipf distribution user requests number resources node node unbalanced balanced distribution resources nodes balanced nodes equal number resources highly unbalanced significant part nodes resources set considered 
emulated grid implementation details large number processes needed large scale simulation raises multiple problems ranging individual machine resource starvation library limitations 
series tests chose chiba city linux cluster argonne national laboratory 
distinct systems chiba city cluster systems processors communicating fast ethernet 
large scale simulation challenging problem node startup essentially needed start process nodes controlled central node 
naive approach persistent rsh processes start remote processes inadequate system limitations long startup time 
implemented processes startup manager handle simulated node startup 
process mpi program written starts node manager process compute node 
node manager manager processes communicate central source obtain specific simulated node process startup information 
compute node simulated node run manager processes starts simulated node processes 
experimental results various analyses interesting study response latency dependence sharing characteristics dependence user requests patterns 
highlights influence user requests performance learning request forwarding strategy 
strategies considered sensitive user request patterns 
slightly better performance fair sharing environment due random component strategy employed relevant previous information specific request exists random forward better chance reach useful node information distributed fairly nodes 
learning strategy takes advantage zipf request distribution significant part requests repeated benefit previous experience 
best neighbor forwarding strategy influenced strongly sharing patterns compared balanced environment highly unbalanced environment node answered request answer requests 
shows response latency unbalanced balanced environments request patterns considered response latency doubles balanced sharing environment compared unbalanced 
note performance best neighbor strategy influenced past requests algorithm records number requests answered regardless type distinguish nodes answered request times nodes proved distinct resources 
explanation algorithm performing better uniform user distribution load zipf distribution number distinct requests uniform distribution larger best neighbor identified strategy larger number distinct resources 
number nodes condor zipf uniform condor zipf uniform performance average number hops learning forwarding strategy request distributions environments different resource sharing characteristics 
number nodes condor zipf uniform condor zipf uniform performance average number hops best neighbor request forwarding strategy different user request sharing characteristics 
random forwarding algorithm advantage additional storage space required nodes record history expected efficient intuition confirmed results shown user requests unbalanced resource distribution 
network sizes experiments learning algorithm performs constantly expensive version learning best neighbor proves terms performance see example large standard error deviation simulated nodes 
relevant metric evaluating forwarding strategies peer utilization peers contributed 
shows percentage nodes active providing answers local resources forwarding number nodes random learning best neighbor learning bn performance request forwarding strategies condor request load unbalanced resource sharing environments 
number nodes random learning best neighbor random learning best neighbor percentage nodes actively participate search depends forwarding strategy 
may considered measure connected community graph requests 
results considered corresponding response latencies short response latency involves small number nodes 
best neighbor strategy perform fair sharing environment covers smallest part network learning strategy performs best environments covers 
effect request forwarding strategies network characteristics graph analysis 
created initial network topologies tiers topology generator 
simulations peers nodes new connections learning peers system 
membership protocol passive node new connection previously unknown node contacted answer example gnutella node periodically probes neighbors learn new peers update old membership information 
membership protocol advantage allows better isolate influence request forwarding strategies network connectivity negatively affects performance 
correlation performance network connectivity interesting 
plan explore carefully graph analyses experimenting various membership protocols 
summary evaluated request forwarding strategies context resource discovery grid environments correlation usage characteristics resource sharing patterns request distributions 
results obtained collections emulated nodes 
results suggest decentralized resource discovery strategy forwarding requests promising solution request forwarded msec 
assuming msec 
latency metropolitan area network msec 
necessary request processing path hops takes half second 
strategies promising leave room improvements 
limitation framework uneven spread information nodes contacted users learn 
obvious improvement keep nodes informed exchanging history information example membership information 
simple improvement attach history information request messages avoid visiting visited nodes 
includes evaluations resource discovery mechanisms directions dynamic environment approximate matches presence failures 
final objective propose coherent suite resource discovery mechanisms expressive query language suited large heterogeneous community grid members 
acknowledgments authors grateful alain roy condor team university wisconsin ripeanu university chicago useful discussions topic 
research supported national science foundation contract itr 
breslau cao fan phillips shenker web caching zipf distributions evidence implications 
infocom pp 

clarke sandberg wiley hong freenet distributed anonymous information storage retrieval system :10.1.1.10.4919
workshop design issues anonymity unobservability 
czajkowski fitzgerald foster kesselman grid information services distributed resource sharing 
th ieee symposium high performance distributed computing 
doar better model generating test networks 
ieee global internet pp 

foster kesselman eds 
grid blueprint new computing infrastructure 
morgan kaufmann 
foster kesselman tuecke anatomy grid enabling scalable virtual organizations 
international journal supercomputing applications 
iamnitchi foster fully decentralized resource discovery grid environments 
international workshop grid computing denver colorado november ieee 
raman livny solomon matchmaking distributed resource management high throughput computing :10.1.1.21.1251
th ieee international symposium high performance distributed computing 
ratnasamy francis handley karp shenker scalable content addressable network 
acm sigcomm 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications 
acm sigcomm 
zhao kubiatowicz joseph tapestry infrastructure fault resilient wide area location routing 
tech 
rep ucb csd berkeley 
gnutella protocol specification 
www clip com articles html 

