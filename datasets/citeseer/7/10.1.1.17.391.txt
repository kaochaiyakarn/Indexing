failure detection randomization hybrid approach solve consensus marcos aguilera yz sam toueg yx 
consensus algorithm combines unreliable failure detection randomization known techniques solving consensus asynchronous systems crash failures 
hybrid algorithm combines advantages approaches guarantees deterministic termination failure detector accurate probabilistic termination 
executions failures failure detector mistakes ones practice consensus reached asynchronous rounds 
key words 
algorithms reliability agreement problem asynchronous systems byzantine generals problem crash failures failure detection fault tolerance message passing processor failures randomized algorithms ams subject classifications 
parallel distributed algorithms reliability testing 


motivation 
known result fischer lynch paterson consensus solved asynchronous systems failures communication reliable process may fail fail crashing 
seminal intense research seeking circumvent negative result 
promising approach unreliable failure detection 
roughly speaking approach assumes process access local failure detector module gives possibly inaccurate information processes may failed 
turns consensus solved unreliable failure detectors infinite number mistakes provided satisfy minimum properties 
particular presents consensus algorithm features 
information provided failure detectors completely wrong algorithm violates safety processes decide differently 
periods failure detectors reasonably accurate processes reach consensus asynchronous rounds hand bad period occurs failure detectors lose accuracy consensus algorithm may making progress bad period 
algorithm useful practice periods tend long bad ones tend rare short 
long bad periods occasionally occur time happens consensus algorithm delayed long time 
seek algorithm terminates quickly failure detection accurate periods progress terminates albeit slowly failure detection inaccurate bad periods 
achieve goal combining failure detection randomization technique solve consensus asynchronous systems 
hybrid approach randomization kicks back failure detection failure detectors inaccurate 
discussion relative merits failure detection randomization hybrid approach postponed 
research partially supported nsf ccr ccr arpa onr olin fellowship 
computer science department cornell university ithaca ny email address aguilera cs cornell edu email address sam cs cornell edu marcos aguilera sam toueg idea combining randomization failure detection solve consensus asynchronous systems appeared 
related idea combining randomization deterministic algorithms solve consensus synchronous systems explored 
brief comparison results 

main result 
focus major techniques circumvent impossibility consensus asynchronous systems randomization unreliable failure detection 
assumes process local random number generator denoted provides random bits 
second technique assumes process local failure detector module denoted fd oracle provides list processes suspected crashed 
approach advantages seek combine advantages 
randomized consensus algorithm process query local oracle oracle random bit determine step 
algorithm termination achieved probability finite expected number steps survey randomized consensus algorithms see 
failure detector consensus algorithm process query local provides list processes suspected crashed determine process step 
consensus solved fd oracles infinite number mistakes 
particular consensus solved fd oracles satisfy properties strong completeness eventual weak accuracy 
roughly speaking property states process crashes eventually suspected correct process second states correct process eventually suspected 
properties define weakest class failure detectors solve consensus 
describe hybrid consensus algorithm properties 
process access oracle fd oracle 
fd oracle satisfies properties algorithm solves consensus matter oracle behaves 
fd oracle loses accuracy property oracle works algorithm solves consensus albeit probability 
executions failures failure detector mistakes ones practice optimized version algorithm reaches consensus asynchronous rounds 

informal model 
model asynchronous computation patterned extension 
sketch main features 
consider asynchronous distributed systems bound message delay clock drift time necessary execute step 
simplify presentation model assume existence discrete global clock 
merely fictional device processes access 
take range clock ticks set natural numbers system consists set processes pi fp pn gamma pair processes connected reliable communication channel 
processes fail crashing 
failure pattern indicates processes crash execution 
formally failure pattern function pi denotes set processes crashed time process crashes recover 
define crashed correct pi gamma crashed 
crashed say crashes correct say correct 
process access oracles failure detector henceforth denoted random number generator henceforth denoted oracle 
process queries fd oracle obtains list processes 
queries oracle obtains general output failure detector restricted list processes 
hybrid approach solve consensus bit 
properties oracles described sections 
distributed algorithm collection deterministic automata process system communicate sending messages reliable channels 
execution occurs steps follows 
time process takes step 
step consists receiving message querying fd oracle querying changing state optionally sending message process 
assume messages lost 
process crash eventually receives message sent 
schedule sequence fs processes sequence ft strictly increasing times 
schedule indicates processes take step process takes step time schedule consistent respect failure pattern process take step crashed 
schedule fair respect failure pattern process correct takes infinite number steps 
consider schedules consistent fair 

fd oracles 
process access local fd oracle module outputs list processes suspected crashed 
process belongs list say suspects fd oracles mistakes possible process suspected crash process crash suspected 
fd oracles classified properties limit extent mistakes 
focus classes fd oracles defined class eventually strong failure detectors denoted pis 
fd oracle belongs pis satisfies properties strong completeness eventually process crashes permanently suspected correct process formally crashed correct fd fd denotes output fd oracle module time 
eventual weak accuracy time correct process suspected correct process formally correct correct fd 
known pis weakest class fd oracles solve consensus 

oracles 
process access local oracle module outputs bit time queried 
say oracle random outputs independent random bit query 
simplicity assume uniform distribution random oracle outputs probability 

adversary power 
designing fault tolerant algorithms assume intelligent adversary control behavior system adversary may able control occurrence timing process failures message delays scheduling processes 
adversaries may limitations computing power information obtain system 
different algorithms designed defeat different types adversaries 
describe adversary hybrid algorithm defeats 
adversary unbounded computational power full knowledge process steps occurred 
particular knows contents past messages internal state processes system previous outputs oracle fd oracle 
general processes agree list suspects time 
contrast assumptions algorithms cryptographic techniques 
marcos aguilera sam toueg information time execution adversary dynamically select process takes step message process receives processes crash 
adversary operates restrictions final schedule consistent fair message sent correct process eventually received processes may crash entire execution 
addition power allow adversary initially select oracles control possibly corrupt 
adversary selects control oracle predict determine bits output oracle 
example adversary force local oracle module output dynamically adjust oracle output processes done far 
adversary selects control fd oracle ensure fd oracle satisfy eventual weak accuracy 
words time adversary include process correct output local fd oracle module process 
adversary power disrupt strong completeness property fd oracle 
limitation practice failure detectors time outs eventually detect process crashes 
adversary control oracle oracle random 
adversary control fd oracle fd oracle pis 
stress algorithm know oracles fd oracle oracle controlled adversary 

consensus problem 
uniform binary consensus problem process initial value decide value uniform agreement processes decide respectively uniform validity process decides initial value process termination correct process eventually decides value 
probabilistic consensus algorithms termination weakened termination probability probability correct process eventually decides value 

hybrid consensus algorithm 
hybrid consensus algorithm shown combines ben algorithm failure detection rotating coordinator paradigm 
paradigm assume processes priori knowledge phase selected process mod coordinator 
algorithm works assumption majority processes correct 
easy see requirement necessary algorithm solves consensus asynchronous systems crash failures processes access random fd oracle belongs pis 
hybrid algorithm message contains tag phase number value messages tagged 
messages tagged called reports tagged called proposals tag called suggestions coordinator tag called estimates coordinator 
sends say reports proposes suggests phase respectively 
coordinator sends say coordinator sends estimate phase execution loop called phase phase consists asynchronous rounds 
round lines processes report current estimate decision value 
second round lines process receives majority reports value proposes value processes proposes 
note hybrid approach solve consensus process executes procedure consensus vp initial value process pg vp fx current estimate decision true fk current phase mod fc current send processes wait messages form gamma processes received send processes send processes wait messages form gamma processes received decide send wait messages form gamma processes received send processes random bit oracle send random bit processes wait receive coord fd oracle fd received coord coord oracle fig 

hybrid consensus algorithm impossible process propose process propose phase 
second round process receives proposals value different decides value 
receives value different adopts value new estimate adopts estimate 
third round lines processes suggest estimate current coordinator 
fourth round lines coordinator receives value different sends value estimate 
coordinator queries oracle sends random value obtains estimate 
processes wait receive coordinator estimate fd oracle suspects coordinator 
process receives coordinator estimate adopts 
current estimate adopts random value obtained oracle 
simplify presentation algorithm include halt statement 
correct process decides value keep deciding value subsequent phases 
easy modify algorithm process decides halts round deciding 

proof correctness 
hybrid algorithm shown satisfies safety properties consensus 
holds matter fd oracle oracle behave oracles totally control adversary 
hand algorithm satisfies liveness properties fd oracle satisfies strong marcos aguilera sam toueg completeness 
strong completeness easy achieve practice failure detectors time mechanisms process crashes eventually causes time permanent suspicion 
assume majority correct processes 
show theorem 
safety hybrid algorithm satisfies uniform validity uniform agreement 
liveness suppose fd oracle satisfies strong completeness 
ffl fd oracle satisfies eventual weak accuracy pis algorithm satisfies termination 
ffl oracle random algorithm satisfies termination probability 
proof 
say process starts phase process completes gamma iterations loop 
say process reaches line phase process starts phase executes past line gamma phase 
say locked process starts phase variable set ambiguities may arise local variable process subscripted local variable process show safety properties 
lemma 
suppose 
impossible process propose propose phase impossible process suggest suggest phase proof 
prove contradiction suppose processes propose respectively phase received reports received reports phase process reports phase impossible 
proves 
follows process suggests phase proposed phase lemma 
process decides phase locked 
proof 
suppose process decides phase note process starts phase 
algorithm receives proposals phase line 
process suggests value line phase suggesting line waits gamma proposals line 
receives proposals received proposal lemma receive proposals sets line suggests phase sets line coordinator phase receive suggestions particular coordinator receive 
coordinator sends estimate phase line estimate receives estimate line resets line 
modify different 
case starts phase lemma 
value locked process reaches line phase decides phase proof 
suppose locked 
reports sent line phase gamma process proposes value phase proposes line 
consider process reaches line phase clearly receives gamma proposals line phase gamma decides phase denote binary complement bit hybrid approach solve consensus corollary 
process decides phase process reaches line phase decides phase 
proof 
lemma lemma 
corollary 
uniform agreement processes decide phase respectively proof 
result follows lemma fact process decide value phase value proposed phase 
assume decides phase reaches line phase decides phase corollary decides phase additional applications corollary conclude decides phase process decide phase corollary 
uniform validity process decides initial value process 
proof 
note 
initial values processes identical clearly initial value process 
suppose processes initial value locked 
lemma decides corollary assume fd oracle satisfies strong completeness proceed prove liveness properties 
lemma 
correct process starts phase 
proof 
detailed proof simple tedious induction describe central idea 
phase wait statements potentially block processes lines 
possible correct process blocked forever wait statements gamma processes correct send messages process waiting 
consider fourth wait statement 
coordinator sends estimate processes crashes 
case correct process receives estimate 
second case eventually appears list suspects fd oracle fd oracle satisfies strong completeness 
correct process waits forever fourth wait statement phase 
corollary 
value locked correct process decides phase proof 
immediate lemmata 
corollary 
process decides phase correct process decides phase subsequent phases 
proof 
immediate corollary lemma 
lemma 
termination fd oracle satisfies eventual weak accuracy correct process decides 
proof 
fd oracle satisfies eventual weak accuracy time correct process pm suspected correct process correct processes take steps faulty ones crash 
value variable process time smallest phase max fk pm coordinator phase arbitrary processes start phase 
note occurs time suspect coordinator pm phase set pm estimate line 
estimate different unique phase phase 
locked 
corollary correct processes decide phase 
proceed show oracle random algorithm satisfies termination probability 
time process receives marcos aguilera sam toueg function bit time rg fk phase epoch rg value major time return time process received gamma proposals phase return fu time major processes got value phase coordinator query oracle line phase return return fig 

favorable coin toss algorithm gamma proposals phase lemma process receives gamma proposals phase defined 
note algorithm process queries oracle phase time process starts phase variable set 
say value major time time processes started phase variable set clearly times impossible major major say process gets phase time 
phase time obtains oracle line sets 
phase coordinator obtains oracle line sends estimate processes receives estimate sets line time intuitively process gets sets obtained oracle query directly indirectly coordinator 
lemma 
time process starts phase set value major time gets phase proof 
consider phase suppose get time updates phase note time receives estimate coordinator coordinator obtained estimate non 
suggestions sets line 
cases processes reported phase time processes started phase time time variable set immediate consequence lemma major process gets phase locked 
rest proof group pairs phases epochs follows epoch consists phases 
define concept lucky epoch processes toss coins cause termination algorithm matter adversary 
define function 
say epoch lucky process time queries oracle epoch time obtains oracle 
note queries oracle epoch time occurs process receives gamma proposals phase 
value depends occurred system time lemma 
oracle random probability epoch lucky phase part epoch 
hybrid approach solve consensus 
proof 
result immediate observation probability epoch lucky gamma phase queries oracle oracle random events epoch lucky epoch lucky independent epochs consist disjoint sets phases 
lemma 
epoch lucky value locked locked 
proof 
proof lemma fix arbitrary assume epoch lucky 
recall epoch consists phases 
epoch lucky process gets value time phase time value obtained directly oracle indirectly coordinator 
case suppose value major time definition process gets value phase value note major time 
lemma locked 
case assume value major time case suppose value major time 
lemma process starts phase time set value got phase value 
reports proposals sent phase time 
definition gamma proposals phase 
argument similar proof lemma value locked 
case assume value major time case suppose 
major time 
processes get value phase get 
lemma value locked 
case assume 
time 
processes get value phase time clearly processes get 
case suppose jsj 
time 
processes get phase get 
note jsj implies major 
lemma value locked 
case assume jsj 
case suppose coordinator phase query oracle line phase time 
coordinator queries oracle line phase obtains oracle 
processes get value time phase get 
exactly jsj processes get phase major lemma conclude value major 
process queries oracle phase time processes get value phase get 
lemma value locked 
case assume coordinator phase queries oracle line phase time coordinator obtains oracle 

coordinator queries oracle line received gamma suggestions line marcos aguilera sam toueg fp send vp processes fif wait receive coord fd oracle fd received coord send coord processes send processes wait messages form gamma processes received decide received fig 

optimization hybrid algorithm occurred time gamma processes set variable line phase time note process starts phase gets value phase value process starts phase variable set 
gamma gamma processes start phase variable set 
major 
processes get phase get 
lemma value locked 
lemma 
termination probability oracle random probability correct processes decide 
proof 
immediate lemmata corollary 
proof theorem complete uniform validity uniform agreement shown corollary corollary respectively 
termination proved lemma termination probability shown lemma 
theorem proof lemma easy see expected number rounds termination 
shown termination reached constant expected number rounds 
outline similar hybrid algorithm terminates constant expected number rounds 

optimization 
algorithm designed simple efficient main goal demonstrate viability robust hybrid approach termination occur way failure detection random draws 
optimization suggests hybrid algorithms efficient practice 
systems failures rare failure detectors tuned seldom mistakes erroneous suspicions 
algorithm optimized perform particularly systems 
optimized version ensures correct processes decide asynchronous rounds coordinator crash process erroneously suspects 
optimization obtained inserting extra code lines hybrid algorithm 
code consists phase phase asynchronous rounds 
round sends message processes second round process sends message processes 
claim optimization code preserves correctness original algorithm processes decide quickly absence failures erroneous suspicions 
see note decision occurs rounds gamma gamma processes erroneously suspect 
hybrid approach solve consensus 
correct process blocks execution optimization code phase correct processes start phase 
process starts phase set initial value process 
process decides phase locked 
corollary correct processes decide phase 
see note correct process suspects processes wait estimate propose phase process receives gamma proposals decides phase 
theorem 
theorem holds optimized hybrid algorithm 
executions crashes false suspicions processes decide rounds 

discussion 
practice systems behaved time failures occur messages received predictable time 
algorithms pure ones hybrid ones particularly suited take advantage time failure detectors tuned algorithms perform optimally system behaves predicted performance degrades gracefully system deviates normal behavior failures occur messages take longer expected 
example optimized version hybrid algorithm solves consensus asynchronous rounds executions occur practice runs failures erroneous suspicions 
discussion suggests hybrid approach better randomized approach 
fact randomized consensus algorithms asynchronous systems tend inefficient practical settings 
typically performance depends luck processes happen start initial value happen draw random bit behaved underlying system number failures occur execution 
fact randomized algorithms extremely robust depend system behaves may inherent source inefficiency 
note hybrid algorithm terminates probability fd oracle completely inaccurate fact process suspects process time 
robust algorithms simply failure detector 
important order expected termination time hybrid algorithm 
developed algorithm combining ben randomized algorithm failure detection ideas 
selected ben algorithm simplest appropriate illustrate approach expected number rounds exponential 
starting efficient randomized algorithm due chor obtain hybrid algorithm terminates constant expected number rounds briefly explain 
roughly speaking randomized asynchronous consensus algorithm obtained ben algorithm replacing coin toss toss weakly global coin computed coin toss procedure 
exactly replace coin tosses algorithm obtained coin toss procedure 
precisely phase process invokes procedure second third rounds lines obtain random bit uses random bit querying oracle lines 
yy algorithms assume processes priori agree long sequence random bits efficient 
assumption may strong systems 
yy simple modification necessary addition synchronization round just coin toss procedure 
round processes broadcast wait messages wait gamma messages marcos aguilera sam toueg modified hybrid algorithm terminates zz constant expected number rounds gamma 
contrast algorithm assumes adversary see internal state processes content messages 
optimization modified hybrid algorithm terminates rounds failure free suspicion free runs 

related 
idea combining randomization deterministic consensus algorithm appeared developed 
works assume system synchronous failure detectors 
dolev malki combine randomization unreliable failure detection solve consensus asynchronous systems process crashes 
differs respects 
contrast algorithm require oracle fd oracle correctly 

hybrid algorithm safety preserved failure detector continuously misbehaves processes decide differently 
contrast hybrid algorithms point failure detector loses accuracy property processes may decide differently 

goal randomization improve failure detector algorithms randomization back ensure termination occasional bad periods failure detector loses accuracy property 
goals failure detection increase resiliency randomized consensus algorithms ensure deterministic termination 
hybrid consensus algorithms achieve goal increasing resiliency second 
stated version give algorithm achieves goals 

hybrid algorithms failure detectors stronger pis failure detector 
algorithm supposes sequence random bits shared processes assumes correct process suspected process 
second algorithm drops assumption common sequence bits assumes omega gamma correct processes suspected process 
algorithms reach consensus constant expected time 

grateful hadzilacos proofs lecture notes 
anonymous referees valuable comments 
aguilera chen toueg heartbeat timeout free failure detector quiescent reliable communication proceedings th international workshop distributed algorithms lecture notes computer science springer verlag sept 
full version available technical report computer science department cornell university ithaca new york may 
aguilera chen toueg quiescent reliable communication quiescent consensus partitionable networks tech 
report department computer science cornell university june 
babao glu montresor failure detectors group membership communication partitionable preliminary version technical 
zz provided course fd oracle satisfies strong completeness 
hybrid approach solve consensus port ublcs department computer science university bologna bologna italy november 
ben advantage free choice completely asynchronous agreement protocols proceedings second acm symposium principles distributed computing aug pp 

bracha toueg resilient consensus protocols proceedings second acm symposium principles distributed computing aug pp 

extended revised version appeared asynchronous consensus broadcast protocols journal acm october 
chandra hadzilacos toueg weakest failure detector solving consensus journal acm pp 

chandra toueg unreliable failure detectors reliable distributed systems journal acm pp 

chor dwork randomization byzantine agreement advances computer research jai press pp 

chor merritt shmoys simple constant time consensus protocols realistic failure models journal acm pp 

dolev dwork stockmeyer minimal synchronism needed distributed consensus assoc 
comput 
mach pp 

dolev friedman keidar malkhi failure detectors omission failure environments tech 
report tr department computer science cornell university ithaca new york september 
dolev malki consensus practical tech 
report cs hebrew university jerusalem mar 
dwork lynch stockmeyer consensus presence partial synchrony assoc 
comput 
mach pp 

fischer lynch paterson impossibility distributed consensus faulty process assoc 
comput 
mach pp 

goldreich petrank best worlds guaranteeing termination fast randomized byzantine agreement protocols information processing letters pp 

guerraoui schiper non blocking atomic commitment unreliable failure detector proceedings th ieee symposium reliable distributed systems bad germany september pp 

consensus service modular approach building agreement protocols distributed systems proceedings th ieee international symposium fault tolerant computing june pp 

raynal consensus asynchronous systems processes crash recover tech 
report institut de recherche en informatique systemes universite de rennes nov 

lo hadzilacos failure detectors solve consensus memory systems proceedings eighth international workshop distributed algorithms pp 

malkhi reiter unreliable intrusion detection distributed computations proceedings th ieee computer security foundations workshop june pp 

oliveira guerraoui schiper consensus crash recover model tech 
report departement informatique ecole polytechnique lausanne switzerland aug 
rabin randomized byzantine generals proceedings fourth symposium foundations computer science nov pp 

schiper early consensus asynchronous system weak failure detector distributed computing pp 

toueg randomized byzantine agreements proceedings third acm symposium principles distributed computing aug pp 

randomized byzantine agreement protocol constant expected time guaranteed termination optimal deterministic time proceedings fifteenth acm symposium principles distributed computing may pp 

