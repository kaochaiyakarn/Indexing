refactoring core extreme programming practice 
involves lowest level moving pieces code 
generally done text editor text development environment explicit refactoring support 
works small granularity refactorings 
propose unified modeling language uml tool aid finding smells performing larger granularity refactorings 
working uml advantageous performing smaller refactorings apply refactorings involving blocks code smaller individual class member 
purpose give taste possible uml tool refactoring exhaustive catalogue 
keywords refactoring unified modeling language uml visual smalltalk arena refactoring browser available time seeing refactoring support available java development tools 
editor browser tools small granularity refactoring extract method rename member aren intuitive easy larger granularity refactorings extract hierarchy 
approach propose unified modeling language uml tool perform large refactorings aid detecting code smells 
need uml tool bases class diagram directly code allows manipulate code directly manipulating diagram 
tool 
licensed versions releases features aid refactoring smell detection discuss performed older releases including free whiteboard editions 
propose main reasons refactoring uml works worth exploring people visually oriented able visualize classes relationships able directly manipulate code higher level granularity methods variables classes characters refactoring efficient 
increase efficiency due able refactoring uml dave development box nova canada dave com quickly grab move directly entail selecting run text possibly multiple runs consider performing move field want include possible accessor mutator able visualize code specifically content classes relationships help detecting smells 
refactoring refactoring getting attention deserves 
defined fowler provides common language patterns manipulating source way behavior preserved 
refactoring provides major benefits 
specifically improves design software code easier understand helps find trouble speeds 
unified modeling language uml provides different types diagrams prove especially useful refactoring class sequence 
class diagrams give static view system classes system contents relationships sequence diagrams give dynamic view specific sequence 
smell detection refactor need know refactor proceed refactoring indicated 
done detecting smells code 
beck fowler describe code smell certain structure code suggest possibility refactoring 
cases visualizing code uml diagrams structures evident 
sections provide examples uml detect common smells 
selection examples means complete con sidered example learned examining visualized code 
data class recognize data class class diagram look classes contain significantly data behaviour 
thing careful accessor mutator methods 
need disregarded evaluating size operations section class just provide external access data behaviour 
classes data members jump data classes 
nice feature help 
turning recognition group appropriately named attributes accessors mutators single property 
careful property combination appropriately named attribute getter 
doesn necessarily imply attribute 
shows difference appearance specific class taken actual project 

class properties showing bean recognition indication data class presence public attributes 
public attributes code 
classes public attributes degenerate data classes typically containing little behaviour 
example shown 

public data class large class finding large classes easy looking class diagram members shown may want hide accessors mutators possible 
details important fact getting overview see relative sizes classes illuminating 
consider taken actual project 

large class immediately see central class large relative 
conclusive proof refactoring required gives indication may problem 
may surrounding classes inordinately small smell 
case significant difference relative sizes classes important thing 
smell indicated large class may acting controller surrounding classes delegating 
lazy class ways opposite large class 
lazy classes small having methods little behaviour 
stand class diagram small 
middle man middle man class sits just forwards method calls 
middle men looking sequence diagram involves 
see simplified example 
middle man apparent pattern messages simply delegated class 

sequence pattern middle man refactorings section explore refactorings easier performing uml 
refactorings applies involve multiple classes 
reason working class diagram easier perform classes front time 
move method case direct manipulation class diagram really speeds things 
simply grab method diagram drag drop class 
move field works moving method 
uml tool supports ability group attributes associates accessors mutators get added ability drag supporting code 
inner class refactoring thrown nicely shows power technique 
inner classes shown section class box 
see example 
java corresponding diagram public class outer public class inner 
example inner class inner class benefit dragged dropped background diagram 
updated required 
replace inheritance delegation uml tool allow manipulate links classes classes 
perform refactoring removing inheritance link adding association adding delegating method 
replace delegation inheritance opposite refactoring 
need remove delegating method association 
add inheritance link 
refactoring patterns section specific far know 
supports automation design patterns modes operation building pattern instance scratch creating required classes applying pattern existing classes 
gamma points expands patterns target refactoring design evolves chosen front 
especially important doing xp 
reason won explore mode big design front practice 
example possible capability show small piece design ll com example 
refactored composite 
reasons simplicity space class members related pattern left 
shows state simple graphics structure 
task involves making pictures 
composite pattern natural 
shows section pattern dialog allows configure composite pattern selecting classes fill roles pattern 
shows result 
facility care keeping aren going need 

applying composite pattern 
composite pattern settings dialog 
applying composite pattern information questions hope article consider value uml diagrams performing smell detection refactoring 
developers working textual source code 
says plain text best 
enlightening look things different way 
viewing code class sequence diagram cause things jump may see see easily 
order able effective low cost manner need uml tool generate diagrams code allow control level detail granularity swamped information 
enable perform refactorings directly uml diagram tool needs keep code model sync realtime 
features common available uml tools 
uml way embodies agile modeling idea modeling understand am 
ways look code information get 
information faster go 
just sense code standards code easier understand extract information sense standards making uml diagrams 
laid diagram communicate easily better enable detection graphical patterns indicate code smells 
presents useful patterns apply making diagrams inheritance goes 
scott ambler set site online tips techniques creating better uml diagrams 
mentioned releases features enhance smell detection refactoring 
latest version adds explicit refactoring capabilities 
time included auditing capability valuable smell detection 
standard audit functions included checking public fields coupling complexity 
guide areas code may benefit refactoring 
alas auditing available licensed versions 
website www com put html version includes animations showing various refactorings performed 
hard show easily refactorings performed invite visit site view animations 
consider living document extending refactorings 
people acknowledge michele encouraging submit miroslav novak inspiring topic scott ambler taught modeling agile context xp peter coad dietrich team envisioning creating line development tools possible new different ways code 

agile modeling website www com 

uml pattern language 
technical publishing 
fowler 
refactoring improving design existing code 
addison wesley 
fowler scott 
uml distilled nd ed 
addison wesley 
gamma helm johnson vlissides 
design patterns elements reusable object oriented software 
addison wesley 

patterns xp 
extreme programming examined ed addison wesley 
thomas hunt 
pragmatic programmer 
addison wesley 
modeling style website www info 
