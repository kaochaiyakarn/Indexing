probabilistic verification discrete event systems acceptance sampling younes reid simmons school computer science carnegie mellon university pittsburgh pa 
propose model independent procedure verifying properties discrete event systems 
dynamics systems complex making hard analyze resort methods monte carlo simulation statistical hypothesis testing 
verification probabilistic senses 
properties expressed csl formulas probabilistic 
second result verification probabilistic probability error bounded parameters passed verification procedure 
verification properties carried anytime manner starting loose error bounds gradually tightening bounds 
consider problem verifying properties discrete event systems 
procedure verifying probabilistic real time properties systems monte carlo simulation statistical hypothesis testing 
verification procedure tied specific model discrete event systems require sample execution paths systems generated mainly intended verification systems complex dynamics generalized semi markov processes symbolic methods exist semi markov processes smps current symbolic numeric methods yield practical solution 
sampling guarantee verification procedure produces correct answer 
key result bound probability error parameters largest acceptable probability incorrectly verifying true property largest acceptable probability incorrectly verifying false property 
number sample execution paths required verify certain properties large procedure anytime manner verifying property loose error bounds successively tighten error bounds obtain accurate results 
adopt continuous stochastic logic csl formalism expressing probabilistic real time properties discrete event systems 
csl previously proposed formalism expressing temporal probabilistic properties continuous time markov chains ctmcs smps 
problem verifying properties considered qualitative setting checked property holds probability greater zero 
approach able verify property holds probability arbitrary probability threshold 
kwiatkowska algorithm verifying probabilistic timed automata properties expressed probabilistic timed ctl complexity algorithm practically infeasible 
lop propose method verifying csl properties smps 
conclude verifying time bounded csl formulas algorithm numerically complex negative complexity results carry 
discrete event systems verification procedure model independent requires generate sample execution paths discrete event system want verify 
model independence choose introduce specific model discrete event systems focus relevant properties systems 
typically discrete event simulation generate sample execution paths verification procedure conceivably verify probabilistic real time properties hybrid dynamic systems appropriate simulator 
point time discrete event system occupies state set states 
ap fixed finite set atomic propositions 
define labeling function ap assigning state set atomic propositions hold system remains state occurrence event point system instantaneously transitions state possibly state 
events occur point continuous time axis 
execution paths 
execution path discrete event system sequence 
si ti time spent state si event triggered transition state si 
state path absorbing set si sl si fori ith state path time spent state si time elapsed entering ith state smallest index 
denote set paths starting state path 
model need define algebra set path anda require finite 
fact convenient think state discrete state features coupled set real valued clock settings currently enabled events see 
probability measure corresponding measurable space able talk probability set paths satisfying property 
serious restriction done models typically discrete event systems 
done ctmcs smps done similar way cf 

continuous stochastic logic aziz propose continuous stochastic logic csl formalism expressing properties ctmcs 
csl inspired ctl extensions continuous time systems adopts temporal operators probabilistic path quantification pctl 
adopt version csl baier excluding steadystate probability operator unrestricted temporal operators semantics csl formulas interpreted discrete event systems 
semantics model dependent definition execution paths 
csl syntax 
csl formula state formula path formula 
formulas csl inductively defined follows 
tt state formula 

ap state formula 

state formula 

state formulas state formula 

path formula pr state formula 

state formula state path formula 

state formulas path formula 
boolean connectives path operators derived usual way 
example pr written pr tt 
csl semantics 
truth value state formula determined specific state 
formula pr holds state iff probability set paths starting satisfying 
truth value path formula determined specific execution path 
semantics operators standard 
formula true path iff holds state transition 
initial state absorbing state formula false 
formula true path iff holds state time holds prior states 
inductively define satisfaction relation follows need time bound temporal operators set limit simulation time generation sample execution paths 
sampling verification procedure propose meaningful distinguish pr 
write pr pr means need consider comparison operator 

tt 
iff 

iff 

iff 
pr path 

iff 

iff 
probability measure pr 
defined described previous section 
probabilistic verification discrete event system state want verify property expressed state formula csl holds words desire test 
complexity general discrete event systems hard analyze resort methods monte carlo simulation statistical hypothesis testing 
means general able answer certainty property holds able bound likelihood error 
specifically leth hypothesis holds alternative hypothesis hold 
probability accepting holds required probability accepting holds 
error bounds supplied parameters verification procedure devised effort average required verify property relaxed error bounds 
verifying probabilistic properties possibility error verification procedure arises way verify probabilistic properties pr state unknown probability holds paths starting ifp holds simulation typically discrete event simulation generate sample paths starting binary random variable parameter pr sample paths holds represent samples yi remaining sample paths represent samples yi ofy 
samples test hypothesis alternative hypothesis forced relax hypotheses order freely able choose error bounds 
purpose introduce indifference region width 

acceptance sampling test 
outcome acceptance sampling test accept events accept accept mutually exclusive exhaustive 
note non zero hypotheses exhaustive mutually exclusive 
hypothesis holds 
represents indifference holds probability true paths starting 
guarantees acceptance sampling test pr holds accept pr holds holds accept pr holds accept pr holds holds accept formula definitely true holds definitely false holds holds information truth value 
recall represents indifference true probability holding paths starting sufficiently close indifferent 
holds interpret mean true accepted false accepted 
interpretation obtain desired error bounds pr accept pr accept 
nested probabilistic operators 
results formulas pr hold determine truth value sample paths error 
case contains probabilistic operators probability true sample path verified false probability false verified true 
need take possibility error account acceptance sampling test modification wald sequential probability ratio test deals situation 
choose sequential probability ratio test strong average performance measured number samples required reach decision 
model situation imprecise samples general terms follows 
binary random variable unknown parameter pr goal test hypothesis hypothesis 
want probability accepting probability accepting holds 
generate samples accomplish goal unmodified sequential probability ratio test generate samples binary random variable related way pr pr pr pr constraints total probability formula obtain bounds unconditional probability pr pr want sequential probability ratio test test hypothesis samples sequential probability ratio test carried follows 
stage test calculate quantity pr zi pr zi zi sample generated stage accept accept 

generate additional sample repeat termination test 
test procedure respects error bounds 
compute fraction pr unknown obtain upper lower bounds fraction devise modified test respecting error bounds 
dm denote number samples samples equal 
write fraction pr dm pr dm pr dm dm pr ii interval pi pi 
know pr pi ii 
lower bound obtained finding minimizes maximizes 
conversely upper bound fraction obtained finding maximizes minimizes 
bounds dm dm dm dm dm dm dm dm fraction 
bounds safe accept dm dm dm dm slight approximation involved stopping criteria test 
see details 
surely condition holds 
likewise safe accept dm dm dm dm surely condition holds 
replacing original stopping criteria new stopping criteria obtain sequential acceptance sampling test handle imprecise samples 
need find appropriate values pi pi 
proposition 
dm ii pi dm pi pi pi pi pi dm pi pi pi pi pi 
dm pi pi pi pi pi 
proof 
dm monotonously decreasing interval 
dm monotonously increasing interval 
dm 
derivative dm dm dm dm find local maximum open interval setting dm dm dm dm dm dm dm local maximum dm stopping criteria reduce regular stopping criteria test expected 
imprecise samples average number samples required decision reached increase worth noting choice independent values 
verifying compound state formulas verifying compound state formula state test parts involve probabilistic operators 
truth value parts determined certainty results reduced formula reduces true false done 
parts contain probabilistic operators need propagate appropriate error bounds test parts order obtain desired error bounds compound formula 
negation 
negation assume inductively obtain error bounds 
setting obtain required error bounds 
conjunction 
conjunction situation slightly complicated 
want accept conjunction true conjuncts true reject conjunct false conjunct false 
assume verify conjunct true error bounds means probability false implies probability conjunction false achieve verification error case choose 
information complexity natural choice assume verify conjuncts false error bounds means probability implies probability conjunction true maxn setting achieve desired error bound verification conjunction 
combine results complete verification procedure conjunctions 
order minimize expected verification effort step procedure 
step fast reject step verify conjunct error bounds chosen arbitrarily 
verify false bounds conclude sufficient confidence conjunction false 
want choose high number samples required verify step low high lower chance verifying false 
verify conjunct true step perform second step corresponding rigorous accept 
verify conjunct time verify conjunct false bounds conclude sufficient confidence conjunction false conclude sufficient confidence conjunction true verify conjunct true 
verifying path formulas verifying pr state need determine truth value path formula sample execution paths starting state 
sample path generated simulation 
generate path needed determine truth value sufficient confidence 
operator 
verify path formula error bounds path starting state sample state verify error bounds 
terminal state conclude error false 
operator 
path formula holds path holds holds holds states forj represent proposition holds state smallest index path formula holds iff verified way compound state formula 
equation disjunction size ith disjunct conjunction size 
worst case verify disjunct error bounds order verify formula error bounds 
case may verify component ith disjunct error bounds require quite samples large 
happen contain probabilistic operators verify path formula true 
problem verifying formula simplifies significantly verified error 
case nested probabilistic operators need expand path true false time limit exceeded 
case formula holds certainty case conclude certainty formula false 
performance evaluation performance procedure verifying formula form pr state depends primarily number samples needed acceptance sampling test 
sequential test wald sequential probability ratio test random variable 
ep denote expected number samples required test true probability holding paths starting expect need samples closer probability threshold 
expected number samples depends parameters 
addition nested probabilistic operators need modified test described earlier average number samples depends parameters corresponding maximum error verification nested formula 
shows average number samples function different values remaining parameters fixed 
data tests equidistant values similar data shown fig 
fixed varying fig 
error bounds varying 
fig 
shows average number samples increases increase dotted curve figures 
seen number samples typically low suggesting proposed verification procedure quite efficient 
note verifying formula nested probabilistic operators sample generated outer probabilistic operator need generate samples verify inner probabilistic operator 
level nesting log 


fig 

expected number samples different values 
log 


fig 

expected number samples different values 
log 


fig 

expected number samples different values 
log 

fig 

expected number samples different values 
expected number samples outer probabilistic operator need ni samples average inner operator ni expected number samples needed verify formula 
total number required samples grows rapidly level nesting problem practice csl formulas typically level nesting 
definite upper bound number samples required sequential probability ratio test 
problem verifying nested probabilistic formulas truncated test 
wald suggests method choosing upper bound number samples error bounds practical purposes respected 
discussion model independent procedure verifying properties discrete event systems 
properties expressed csl formulas shown interpret formulas definition sample execution paths discrete event system 
definition sample execution paths probability measure sets paths model dependent component framework discussed 
complex nature discrete event systems depend monte carlo simulation statistical hypothesis testing order verify csl formulas 
verification procedure takes parameters highest acceptable probability incorrectly verifying true formula highest acceptable probability incorrectly verifying false formula 
sequential acceptance sampling number samples required verifying csl formula typically low high verifying certain formulas particular formulas form pr contain probabilistic operators 
verification procedure applied anytime manner 
start verifying formula loose error bounds produce result quickly 
successively tighten error bounds obtain accurate results resources give verifier 
direction research obtain better understanding number samples required verifying properties varying complexity best choose parameter values free choice case nested probabilistic formulas 
may possible increase performance verifying conjunctions formulas nested probabilistic operators considering heuristics ordering conjuncts cf 
variable ordering heuristics constraint satisfaction problems 
problem consider verifying csl formulas unrestricted temporal operators steady state operator requires developing techniques evaluating long run behavior discrete event system 
output analysis simulation transient steady state quantities operations research see may applicable 
algorithm proposed lop reported scale smps case unrestricted temporal operators steady state operator similar approach may fruitful general models discrete event systems 
rajeev alur courcoubetis david dill 
model checking real time systems 
proceedings fifth annual ieee symposium logic computer science pages philadelphia pa june 
ieee computer society press 
rajeev alur courcoubetis david dill 
model checking probabilistic real time systems 
leach albert monien rodr guez artalejo editors proceedings th international colloquium automata languages programming volume lecture notes computer science pages madrid spain july 
springer 
adnan aziz singhal robert brayton 
verifying continuous time markov chains 
rajeev alur thomas henzinger editors proceedings th international conference computer aided verification volume lecture notes computer science pages new brunswick nj july august 
springer 
adnan aziz singhal robert brayton 
modelchecking continuous time markov chains 
acm transactions computational logic july 
christel baier joost pieter katoen holger hermanns 
approximate symbolic model checking continuous time markov chains 
jos baeten editors proceedings th international conference concurrency theory volume lecture notes computer science pages eindhoven netherlands august 
springer 
james edward reingold 
backtrack programming techniques 
communications acm november 
clarke allen emerson prasad sistla 
automatic verification finite state concurrent systems temporal logic specifications 
acm transactions programming languages systems april 
peter glynn 
gsmp formalism discrete event systems 
proceedings ieee january 
peter glynn donald 
simulation methods queues overview 
queueing systems 
hans hansson bengt jonsson 
logic reasoning time reliability 
formal aspects computing 
ronald howard 
dynamic probabilistic systems volume ii 
john wiley sons new york ny 
gabriel pez holger hermanns joost pieter katoen 
memoryless distributions model checking semi markov chains 
luca de alfaro stephen gilmore editors proceedings st joint international workshop volume lecture notes computer science pages aachen germany september 
springer 
marta kwiatkowska norman roberto segala jeremy 
verifying quantitative properties continuous probabilistic timed automata 
palamidessi editor proceedings th international conference concurrency theory volume lecture notes computer science pages state college pa august 
springer 
klaus matthes 
zur theorie der 
ko ze sn editor transactions third prague conference information theory statistical decision functions random processes pages czechoslovakia june 
publishing house academy sciences 
gerald 
regenerative stochastic simulation 
academic press boston ma 
abraham wald 
sequential tests statistical hypotheses 
annals mathematical statistics june 
