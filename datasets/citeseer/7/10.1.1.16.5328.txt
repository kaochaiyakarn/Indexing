model checking time petri nets partial order semantics burkhard bieber hans fachbereich informatik carl von universitat oldenburg oldenburg informatik uni oldenburg de model checking place transition nets partial order semantics applied successfully analysis causal behaviour distributed systems 
approach extended causal behaviour time petri nets 
expansion time petri net equivalent net defined shown abstraction mcmillan unfolding expanded net sufficient model checking formulae simple branching time temporal logic model checking widely accepted method proving properties distributed systems faces problem state explosion 
tackle problem partial order reductions bdd techniques methods partial order semantics applied 
proven especially successful systems high degree asynchronous parallelism 
safety critical applications require verification real time constraints addition functional qualitative temporal properties 
task model checking algorithms developed interleaving semantics cf 
done starting partial order semantics cf 
section exceptions 
extending mcmillan technique unfolding safe petri nets class safe time petri nets takes step direction 
branching time temporal logic safe nets introduced 
model checking algorithm finite prefix maximal branching process net mcmillan unfolding mcm cf 

naively assume order extend approach safe time petri nets sufficient take mcmillan unfolding underlying net reduce part prohibited time restrictions 
example shows true 
consider net tn time restrictions 
possible concurrent behaviour described ii 
behaviour happens remain realizable time requirements sense concurrent run system timing schedule respecting requirements 
ffl gamma gamma ffl qs theta theta theta theta theta thetafl qs gamma gamma qs qs tic tic delta delta delta deltaff tic gamma gamma psi au tic gamma gamma psi tic gamma gamma psi time petri net tn ii untimed behaviour tn iii timed behaviour tn fig 

time petri net tn behaviour untimed behaviour tn cf 
ii satisfies property holds marked possibly marked 
occurs tn time enabled time occur time 
hand forced occur time enabled time 
occur time marked time occur 
property satisfied tn reflected net behaviour represent lapse time inserting special events called tic events cf 
iii occurs time tic event enabled 
key idea approach consists transforming time restrictions net structure representing additional places transitions arcs 
approach time petri net tn time expansion tn constructed ordinary net 
shown formula oe satisfied tn iff satisfied tn 
subsequently mcmillan unfolding mcm tn tn defined abstraction mcm tn 
shown actual computation mcm tn explicit construction complex net tn necessary 
additional benefit approach fact corresponding tools nets may reused causal analysis time petri nets applies especially model checking component pep tool 
proceed follows section notions introduced 
section contains definition time expansion time petri nets 
new method model checking time petri nets section finite prefix time expansion 
conclude discussing related section remarks research section 
extended version 
basic notions section partial order semantics temporal logics safe place transition nets nets defined notion time added nets 
temporal logics extended time petri nets 
note notions carry bounded nets 
processes place transition nets net 
called safe iff holds reachable marking 
rest safe nets considered 
nodes conflict iff exist distinct transitions ffl ffl reflexive transitive closure self conflict iff behaviour net described reachability graph 
vertices consist set reachable markings edge leading labeled iff reachability graph concurrent behaviour retrieved easily interleavings concurrent behaviour represented explicitly leads unnecessary exponential blow 
part problems avoided maximal branching process associates partial order semantics safe net 
causal process safe net describes possible run displaying causal dependencies events take place run 
branching process may represent different alternative runs structure may seen union causal processes 
consists occurrence net homomorphism 
occurrence net cn acyclic net ffl event self conflict set elements finite 
elements respectively called conditions events respectively 
denotes partial order induced denotes corresponding strict partial order min cn denotes set minimal elements cn causal net occurrence net satisfies ffl condition homomorphism occurrence net cn net mapping 
restriction ffl bijection ffl ffl restriction ffl bijection ffl ffl restriction min cn bijection min cn holds ffl ffl branching process net pair fi cn consisting occurrence net cn homomorphism cn fi causal process iff cn causal net 
net exists unique renaming conditions events maximal branching process fi maximal related prefix ordering cf 

initial part causal process may represented uniquely set events contained part configuration process fi downward closed conflict free set events set implies hold 
event fe denotes configuration generated note configuration branching process fi cn uniquely determines causal process containing set events conditions connected elements cn set conditions 
arcs labels inherited cn notions defined causal processes may applied configurations vice versa 
configuration defines unique marking consisting exactly conditions cn marked occurrence events set set conditions occurrence net cn cut maximal set set inclusion 
cut finite configuration defined cut min ffl ffl configuration process fi cn defines marking cn mark cut 
note marking reachable net iff maximal branching process fi contains configuration mark 
ii shows causal branching process net underlying time petri net tn names conditions events omitted image vertex called label written 
temporal logic safe nets section introduce temporal logic safe nets defined 
extend logic time petri nets show model checking algorithm applied 
net 
syntax 
properties current marking net expressed place assertions 
formula expresses places marked 
oe means marking satisfying oe reachable 
derived operator oe signifies oe satisfied reachable markings 
oe true truth pn place assertion oe negation oe oe conjunction oe possibly oe false true falsehood oe oe oe oe disjunction oe oe oe oe implication oe oe oe 
fig 

esparza temporal logic satisfaction formula oe net defined inductively follows 
finite configuration branching process fi superscript dropped clear context 
fi true fi iff mark fi oe iff fi oe fi oe oe iff fi oe fi oe fi oe iff fi oe finite configuration fi oe iff fi oe oe iff fi oe mcmillan unfolding net defined finite prefix maximal branching process fi reachable marking occurs image cut prefix 
net fi maximal branching process 
new event pseudo event define 
event em cut event iff exists event mark mark 
set events fi iff event cut event fi prefix fi having set events called mcmillan unfolding denoted mcm 
shown unique finite 
sat oe sat oe denote respectively set finite configurations maximal branching process set configurations mcmillan unfolding net satisfy oe 
sat oe implies oe equivalent oe model checking problem reduces checking emptiness sat oe esparza theorem states sufficient inspect sat oe simplify notation different equivalent definition satisfaction relation applied 
net oe formula marking true iff oe iff oe oe oe iff oe oe oe iff oe marking reachable oe iff oe proposition 
net oe formula oe iff oe time petri nets time petri nets introduced 
reasoning consider time petri nets discrete time cf 

safe time petri net tn net consists safe net ptn transition inscription tn theta closed time intervals nonnegative integer bounds 
subscripts omitted clear context 
eft lft call eft lft respectively earliest firing time latest firing time respectively intended meaning eft lft respectively denotes minimal maximal respectively number time units may pass enabling occurrence 
denoted eft lft clear context 
time petri net tn called safe underlying net safe 
state time petri net marking underlying net clock vector 
lft clock vector associates clock transition showing number time units elapsed enabling transition symbol indicating corresponding transition enabled 
state called consistent iff enabled 
consistent states considered 
clock vector time delay lft enabled defined ae enabled 
initial state initial marking underlying net initial clock vector defined ae enabled 
types events considered time petri net events time passes called tic events events transition occurs called occur events 
tic event tic event tic fireable state iff transition forced occur iff enabled lft 
case successor state 
tic event denoted tic 

occur events occur event fireable state iff transition may occur enabled eft lft 
case successor state ffl ffl enabled enabled ffl enabled 
occur event denoted 
set ft transitions concurrently fireable state iff fireable state ffl ffl 
firing schedule time petri net tn finite infinite sequence oe tic 
oe fireable state iff exist states fireable state called reachable oe iff fireable firing schedule oe leads marking reachable oe iff clock vector state reachable oe 
consider net tn 
initial clock vector 
example firing schedule oe tic tic tic tic fireable 
behaviour time petri net tn described reachability graph case nets faces problems reflecting concurrent behaviour representing interleavings concurrent events 
logic may extended time petri nets 
tn time petri net oe formula marking tn superscript tn dropped clear context 
tn true tn iff tn oe iff tn oe tn oe oe iff tn oe tn oe tn oe iff tn oe state reachable tn tn oe iff tn oe property introductory example expressed formula oe satisfied tn expanding time restrictions section notion time expansion time petri net tn tn introduced 
shown captures behaviour tn sense satisfaction temporal logic preserved 
general size tn may exponential size tn unfolding tn may generated explicitly constructing tn cf 

definition tn needed obtain proper definition finite prefix tn construction start net underlying tn add parts representing components tn related time 
clock vectors represented done adding new places possible clock positions transition new transitions introduced modelling tic events 
represent time dependence conditions events tn causal dependence time expansion take account tn original places 
obvious solution introduce state tn enables tic event new transition having places representing preset places representing postset 
solution causes problem tic transition tic transition may fire possibly leaving places untouched 
avoid problem place tn introduce new complementary place consequently marking part represented fp mg re adjust transitions tn respect complementary places clock places fire transitions 
task fulfilled having ffl fp ffl part preset ffl fp ffl tg part postset places contained preset postset 
second task raises new problems see 
ii iii fig 

problems updating clocks consider time petri net part 
fire clock started 
decided 
solve problem allowing fire transitions produce intermediate marking representing inconsistent state introducing additional repair transitions called update transitions 
subsequently tic transitions re adjusted act properly inconsistent states 
faulty time distributions generated 
second consider ii 
note concurrently enabled 
firing switch clock transitions modelling synchronize clock places introduces conflict concurrency gets lost 
problem may fixed leaving switching clock update tic transition 
update tic transitions sufficient treat correctly net part iii 
consider state fp 
may occur leading fp 
approach sketched result fp inconsistency marking part clock part state 
repair transition help 
problem relies fact disabled newly enabled instance time equivalently token removed token put instance time 
special case problem solved introducing private set clock places allowing firing clocks running 
solution works general case leads involved definition time expansion bigger time expanded net tn 
restrict class nets consideration introducing requirement local time divergence place loses token time token arrive time places petri nets denote local state 
divergent time condition demands local state left may entered instance time 
property fulfilled practical applications 
consider resource exclusive access local state place may serve guard resource token place indicating availability resource 
case time token leaving place new token entering place corresponds time allocation cycle resource 
time requirements taken account reasonable assume needs non zero amount time 
considerations lead definitions definition 
divergent time property tn time petri net 
tn satisfies divergent time property called dt net iff holds enabled tn ffl ffl ng tic 
definition 
time expansion tn dt net 
time expansion tn net tn px tx fx mx defined follows note requirement locally divergent time slightly stronger may fully released multiple clock solution chosen 

place new complementary place introduced 
set places denoted 
transition new places lft introduced 
intended meaning places describe possible clock positions corresponding transition set new places denoted clock places referred clock places 

clock function tn pl fp tg 
time expansion state tn defined pl fp 
state tn time event may occur new transition tic introduced having pl preset pl postset enabled enabled 
transitions intended model time events addition updating clock vectors 
set transitions denoted tic transitions referred tic transitions 

transition tn eft lft new transition introduced 
preset ffl fp ffl ffl fp postset ffl fp ffl ffl fp transitions intended model changing marking 
clock firing transition switched 
set transitions denoted fire transitions referred fire transitions 

inconsistent state tn new transition update generated 
preset transition update pl postset pl enabled enabled 
transitions intended model updating clocks newly activated deactivated transitions 
set transitions denoted update transitions referred update transitions 
altogether px clock tx ic fire update fx described mx pl 
definition 
tn dt net tn time expansion 
marking tn called consistent iff fp fp lft enabled theorem 
tn dt net hold ft ng tn iff pl ft tn pl pl ft tn pl pl update pl tn 
ii consistent state reachable tn iff consistent marking pl reachable tn 
particular reachable marking tn iff reachable marking tn 
shows simple time petri net tn time expansion tn see ii shows strong connection clock net right normal net left 
update transitions omitted update fp state fp consistent 
update fp update fp time net tn ii time expansion tn tic fp update fp fig 

time expansion example partial order model checking time petri nets section extended temporal logic time petri nets 
section show time petri net tn model checking problem solved applying esparza model checking algorithm time expansion tn tn cut event net event mark mark 
pointed case possible cut isomorphic possible cut 
property crucial proof esparza theorem 
iii shows time petri net tn possible finite configuration depends timing associated follows time petri net tn part mcmillan unfolding mcm underlying net realizable time restrictions contain sufficient information serve basis model checking cf 
ii 
time expansion tn time petri net tn hand necessary information behaviour cf 
theorem 
connection tn tn satisfaction formulae lemma states temporal logic formula oe time satisfied state time petri net tn iff satisfied corresponding marking tn tn lemma 
tn dt net reachable state tn oe formula tn pl time expansion 
tn oe iff tn oe corollary 
tn dt net oe formula tn tn tn oe iff tn tn oe esparza theorem order check tn satisfies formula oe sufficient consider mcmillan unfolding time expansion tn 
hand tn mcmillan unfolding contains unnecessary information conditions labeled complementary places occur formulas 
removed events labeled update transitions meaningless just reproduce 
events labeled tic transitions hand relevant representing timed ordering conditions 
considerations simplify mcm tn 
definition reduced unfolding 
tn dt net fi branching process time expansion 
reduced branching process fi fi constructed performing steps 
remove fi conditions labeled clock places complementary places incidental arcs resulting process fi 
remove fi parts conflict update transition resulting process fi 
remove fi events labeled update transitions incidental arcs 
time event taken ffl ffl fused 
results process fi 
rename labels events label event replaced results process fi 
configuration fi reduction defined fi easy see reduction process fi tn defined reduction preserves inclusion configurations fi iff fi configurations fi 
theorem 
tn dt net fi process tn oe formula tn holds fi tn oe iff fi tn oe theorem motivates definition definition mcmillan unfolding 
tn dt net 
tn defined mcm tn mcm tn 
mcmillan unfolding mcm tn time petri net tn shown iii 
prove time petri net tn mcm tn satisfies exactly formulae mcmillan unfolding tn 
sat rf oe denote set configurations reduced mcmillan unfolding tn satisfy formula oe tn proposition easy consequence theorem proposition 
tn time petri net oe formula tn sat rf oe tn iff sat oe tn putting puzzle establish key result states formula oe time satisfied time petri net tn iff satisfied mcmillan unfolding time expansion tn theorem 
tn time petri net tn time expansion oe formula tn tn oe iff sat rf oe tn consequently check formula oe time petri net tn compute mcmillan unfolding mcm tn check oe mcm tn 
note explicit construction tn mcm tn needed construction mcm tn 
algorithm refinement algorithm finite prefix 
prove algorithm mcm tn may computed log time denotes size number nodes mcm tn 
shown number events mcm tn bounded number reachable states tn size mcm tn linear size reachability graph tn examples time petri nets finite prefix substantially smaller reachability graph 
related approaches model checking time petri nets 
timed temporal logics timed state graph tsg timed branching process 
model checking safe time petri nets rational firing bounds real time extension linear time temporal logic considered differences timing variables absolute time points 
finite graph representing state space computed nodes consist reachable markings augmented additional sets inequalities describing timing conditions 
reachable marking represented node faces state explosion problem 
time state graph construction improved ways 
coarser semantics take account implicit ordering events considered 
second finite prefix underlying net speed searching time state graph 
model checking tctl explored 
region graph construction compute finite representation timed state space cf 
construction timed automata 
notion timed process time petri net denoting causal process realizable time constraints net introduced 
method developed compute valid timings causal process time petri net divergent time 
class safe time petri nets restricted time independent choice nets analysed reachability 
reachability checking algorithm finite prefix underlying net 
timing conditions represented explicitely sets inequalities additional inscriptions events 
prefix construction asynchronous circuit bounded delay verified hazard freedom 
approach may compared timed automata cf 

checking reachability time petri net tn reduced reachability analysis timed automaton ta way safe time petri net tn compute reachability graph giving states transitions ta 
introduce clock transition tn transition consists guard eft lft set clocks reset ft enabled gamma ffl state invariant true 
unfortunately construction expensive size may exponential size tn second order check reachability ta region graph construction needed bringing additional exponential blow 
hand simulation general timed automata time petri nets unfeasible 
defined finite prefix time petri net tn tn showing sufficient applying esparza model checking algorithm safe nets established substantial step quantitative analysis distributed real time systems partial order semantics 
steps consist extending approach real time temporal logic 
language sdl introduced extends sdl specification description language adding real time requirements 
sdl denotational semantics defined terms time nets form class compositional timed high level petri nets 
pointed time nets may unfolded safe time petri nets 
result suggests new method proving functional qualitative temporal properties sdl specifications 
currently new method integrated moby tool cf 
pep tool cf 

authors javier esparza eike best alexander anonymous referee helpful comments preliminary versions 

alur courcoubetis dill model checking real time systems 
proc 
th symp 
lics 

moby tool verification sdl specifications 
technical report university oldenburg 

aura lilius time processes time petri nets 
proc 
toulouse 

diaz modelling verification time dependent systems time petri nets 
ieee transactions software engineering volume 

best partial order verification pep 
proc 
partial order methods verification holzmann peled pratt eds american mathematical society 

bieber model checking time petri nets partial order semantics 
techn 
rep university oldenburg 
url informatik uni oldenburg de max 
clarke emerson sistla automatic verification finitestate concurrent systems temporal logic specifications 
acm toplas 

engelfriet branching processes petri nets acta informatica volume pages 

esparza model checking net unfoldings 
science computer programming volume elsevier 

esparza romer vogler improvement mcmillan unfolding algorithm 
proc 
tacas 

efficient computation processes time petri nets 
university oldenburg 
preparation 
net semantics real time extension sdl proc 
fme graz 

godefroid partial orders improve automatic verification methods 
proc 
workshop computer aided verification 

graves identification specific processes contained mcmillan finite unfolding 
proceedings india 

lilius efficient state space search time petri nets 
mfcs workshop concurrency 

macmillan symbolic model checking approach state explosion problem 
phd thesis scs carnegie mellon university 

mcmillan unfoldings avoid state explosion problem verification asynchronous circuits 
proc 
cav fourth workshop computeraided verification vol 
lecture notes computer science 

merlin farber recoverability communication protocols implication theoretical study 
ieee transactions software communications vol 


nicollin sifakis yovine atp timed graphs hybrid systems 
lecture notes computer science real time theory practice 

time petri nets 
journal information processing cybernetics volume lecture notes computer science springer 

time petri net unfoldings hardware verification 
university newcastle draft 

analyse von petri modellen 
teubner verlag stuttgart german 

partial order verification time petri nets 
university draft 

yoneda 
efficient verification parallel real time systems 
journal formal methods system design vol 

