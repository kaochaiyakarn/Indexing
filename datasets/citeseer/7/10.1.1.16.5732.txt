alias free pointers minsky rutgers university new nj usa tel mail minsky cs rutgers edu 
argues pointer induced aliasing avoided cases means concept unique pointer 
pointers expected concept encapsulation systems easier reason provide better control interaction threads storage management safer efficient 
show unique pointers implemented means minor virtually costless modifications conventional oo languages eiffel conveniently broad range algorithms data structures 
key words phrases pointer induced aliasing hiding encapsulation programming threads storage management 
supported nsf 
ccr 
dynamic objects objects allocated heap addressed means pointers widely considered mixed blessing imperative programming 
blessing dynamic objects useful properties indefinite lifetime indefinite scope efficient transferability ability shared multiple pointers single object 
dynamic objects pointers dispersed system problematic 
allows aliases exist dynamic object system making hard reason object undermines principles hiding encapsulation foundations object oriented programming 
virtually uncontrollable dispersal pointers storage management hazardous costly 
argue pointer induced aliasing largely self inflicted wound caused universal practice programming transfer information copy 
remedy defect introduce concept unshareable objects companion concept unique pointers moved place copied 
argue unshareable objects employed conveniently situations dynamic objects incurring pitfalls 
show takes minor virtually costless modifications typical imperative programming language support objects 
sake specificity couch discussion terms objectoriented language eiffel 
believe essence valid object oriented languages broader sense applicable imperative languages general 
close approximation unique pointers constructed 
rest organized follows pitfalls conventional pointers discussed section section describe simple variant eiffel supports unique pointers applications pointers discussed section related works discussed section 
pitfalls dynamic objects conventional programming languages dynamic objects pitfalls better known 
start showing dynamic objects difficult hide specific locale due virtually uncontrollable dispersal pointers objects 
briefly discuss difficulties caused conventional dynamic objects storage management encapsulation programming threads 
difficulty hiding dynamic objects concept hiding software known widely considered modularization encapsulation somewhat slippery concept may definitions reflecting different concerns 
definition full significance clear due course 
definition concept hiding component object considered hidden accessible control 
said control invocation methods return method 
note definition hiding strictly stronger hiding scope rules allows component object accessed objects long control example may invoke operation having procedure object operate 
sense concept hiding slippery 
component object physically contained illustrated part condition definition readily established scope rules language 
dynamic object addressed variable contained scope rules hiding components rarely completely ensured unsafe features languages ability naked code procedures eiffel 
ignore effect unsafe features 
sufficient hide 
variable visible outside object quite exposed object may pointer illustrated part 
object may operate control direct contradiction definition hiding 
legend object pointer variable includes pointer fig 

difficulty hiding dynamic components conventional languages virtually impossible control dispersal pointers object system extent dispersal 
due fact information generally transferred place system copy copy pointers dealing dynamic objects 
particular case eiffel assignment statement variable copies pointer leaving intact creating duplicate pointer 
object obtained component pointer object tell pointers left system 
original creator little prevent leakage pointers objects system 
provide objects opportunity acquire duplicate pointer example call carried allows procedure save pointer permanently attribute object adverse effects dynamic objects storage management language garbage collection dynamic objects need deallocated explicitly uncontrollable dispersal pointers causes kinds dire phenomena 
object deallocated surviving pointer left system dangling may cause serious errors notoriously difficult debug 
second partially due fear dangling reluctant deallocate object apparent need 
contributes memory leaks memory available program 
dangling languages garbage collection provide explicit deallocation objects 
shall see deallocation safe useful languages reducing amount garbage collection needed 
conflict encapsulation pointers encapsulation hiding constituent parts state object program 
hiding supposed distinct consequences critical large systems provide objects implementation transparency ability change internal representation state object program having change rest system 
second encapsulation supposed enable endow object called invariants class invariants 
properties hold control object sethi completely independent rest system 
implementation transparency achieved weak hiding scope rules invariant properties require stronger kind hiding definition 
ability establish properties object independent rest system clearly undermined object dynamic components may accessible number objects 
serious problem invariant properties essential meaningful encapsulation data types 
problem encapsulation unknown see page particular rarely discussed literature satisfactorily resolved far 
difficulty threads dispersal pointers adverse effect programming threads 
suppose built monitor meaning thread gain access internals moment time 
supposed prevent race conditions processes manipulate unfortunately components dynamic objects mutual exclusion respect prevent race conditions 
illustrated component accessed concurrently threads gained exclusive access operates concurrently outside may operate component pointers dispersed system 
unshareable objects unique pointers situations dispersal pointers undesirable introduce concepts definition dynamic object called unshareable object pointer system leading 
pointer object called pointer part guaranteed unique 
legend object pointer variable pointer thread fig 

race condition threads show section concepts supported usable object oriented language eiffel 
technically describe variant eiffel obtained small set minor modifications defined set rules semantics language 
refer variant eiffel really advocate eiffel language changed meet rules analogous changes object oriented languages necessary 
certain languages rules established changes language 
implementation proposed objects rests part departure universal copying copying pointers case dynamic objects means transferring information place system 
generally speaking propose objects designated unshareable transferred move copy 
addition constraints required treatment formal parameters procedures 
compile time cost run time overhead required establish rules advocated eiffel turn quite negligible 
rules impose constraint involving objects 
disclaimer order assurance provided eiffel pointers claimed pointers fact unique absolute 
provides level certainty eiffel provides type correctness scope rules 
integrity conditions absolute eiffel practically languages unsafe features may violate semantics language mentioned footnote 
rest section organized follows start concept variables 
variables declared unique contains pointer void 
followed rules define treatment variables assignment statements parameter passing constructs eiffel 
section introduce means safe efficient recycling objects 
comments terminology start term variable called entity eiffel name program text refer values may run time associated objects 
second term unique confused integer entity declared unique eiffel 
variables eiffel allows variables class declared unique subject restriction imposed rule introduced 
variables guarantees contain pointers void may represent attributes object parameters local variables procedure implicitly defined result variable function refer variables attributes parameters provide class declared unique means variable declared class variables 
rule eiffel follows rule transfer pointers regular variables variables allowed 
particular rule prohibits assignment regular variable passing regular actual parameter formal parameter declared unique 
reason prohibition course regular variable may contain non unique pointer 
assignment variables assignment statement eiffel semantics applied variables pointer copied assignment object pointed 
rule causes pointers objects moved assignment copied 
rule assignments statement variable carried follows value copied nullified value void null pointer eiffel stored 
words variable pointer moves leaving void wake 
note right hand side assignment function call returns pointer variable contains value function disappears automatically activation record concern 
assignment statement subject optional rule deals deallocation unusable objects 
note changing semantics conventional assignment operator may prefer prohibit variables adding new move operator replace 
largely matter taste 
treatment formal unshareable parameters parameter passing done case eiffel causes duplication pointers 
presents kind difficulty variable call may nullified call 
happen particular corresponding formal parameter assigned variable 
rule move assignment sense procedure consumes pointer consumption actual argument required generally undesirable 
required example situation object component suppose performs operation push stack 
pointer consumed operation stored stack points object 
object expect nullified call 
hand suppose performs operation display supposed display user terminal quite unreasonable call consume precisely happen procedure display assigns formal parameter 
concept unshareable objects quite untenable means ensuring actual parameter consumed consumption intended 
require formal parameter declared consumable non consumable take common default 
treatment formal parameters subject constraints rule value formal parameter declared non consumable changed 
entails constraints treatment parameters 
assignment allowed 
eiffel constraint imposed formal parameters 

assigned variable 

actual argument procedure call corresponding formal parameter declared consumable 
important special case parameter passing oo programming requires special attention 
operation form variable class methods problem nullified operation quite disconcerting prospect 
reason considered parameter method eiffel particular bound implicitly defined local variable current method happens assign current equivalents languages names self 
variable consumed operation 
consumption occur satisfies constraints rule respect variable current 
ensured rule rules eiffel checked compile time rule variables class declared variable methods defined class treat implicitly defined local variable current non consumable formal parameter satisfying constraints rule 
constraint classes variables declared unshareable restrictive may reasons conditions imposed rule variable current satisfied normal 
example analysis official eiffel library ise indicates classes violate rule analysis fairly randomly chosen applications programs revealed violations 
second method class satisfy rule possible define class inherits redefining offending methods satisfy rule basis variables 
miscellaneous rules describe rest rules support unshareable objects eiffel rules tend specific eiffel language somewhat lesser general import considered 
statement rule preceded motivation 
languages provide means copying entire objects 
eiffel done means explicit copy routines copy clone assignment expanded objects infrequently language 
copy problematic object copied contains point response question bertrand meyer call variable argument consumable cause consumed call carried 
dot find consequence rare construct particularly 
attributes 
copying objects subjected rule stated general terms rule copying complete object allowed copy 
attributes moved rule transferred copy routine 
possibility completely disallow copying objects unshareable attributes 
second confront problem object exported attribute due rule assignment statement consume attribute violate basic properties encapsulation eiffel possible change value attribute object directly outside 
prevent violation impose rule rule attribute class exported 
course prevent object voluntarily giving private attributes returning result methods 
impose constraint functions unusual eiffel device designed support globally accessible objects rule result function declared unshareable 
reason rule function eiffel returns result time called 
result unique unshareable 
recycling unshareable objects eiffel language provides explicit means deallocation dynamic objects 
means unsafe due possible dangling considered unnecessary language garbage problem pointed pal collection 
deallocation objects quite safe shall see helpful presence garbage collection 
rule introduces appropriate deallocation method recycle objects rule recycle method method recycle applied variable argument procedure 
method recycle void operates follows 
applies recycle recursively attributes 
deallocates object addressed variable 
note recycle terminates pointers objects form cycle 
recycling objects done ways manually decides object needed automatically evident object anymore 
automatic recycling established rule 
rule automatic recycling recycle method introduced rule applied automatically follows 
procedure exits objects addressed local variables recycled method recycle applied 

object collected garbage collections unshareable components recycled 

assignment carried recycled 
note automatic deallocation established easily generally safe applied variables 
implications recycling storage management discussed briefly section 
applications unshareable objects traditional transfer copy programming objects requires change viewpoint think rule required support unshareable objects help making 
things move place just physical objects manipulate daily life 
example difference note stack designed maintain objects traditional top method returns pointer top stack removing 
inherently impossible top unshareable 
spite unfamiliar aspects unshareable objects show section quite conveniently applications shared intermediate handle objects sharing required 
start section simple programming example introducing regular handle objects effectively share objects 
section discuss applications objects naturally suitable 
section show objects maintained arbitrary data structure usable broad range applications 
section discuss implication objects storage management 
shareable handles objects suppose instances class meant hidden objects easily accessible parts system 
seemingly contradictory usages supported making instances unshareable truly hidden hiding called making accessible shareable handles wider accessibility called 
see detail done consider class handle defined assuming simplicity class declared unshareable 
handle attribute class called body methods applicable method install installs body handle remove removes body handle returning value 
consider regular shareable handle object body 
accesses anybody approximate conventional top method desired producing copy top stack returning pointer copy 
class handle feature body variable class unshareable install consumable consumable argument body move consumes actual argument remove result function unshareable result body body consumed method class node fig 

handle object pointer object 
particular methods perform operation body applying objects access arrangement allows shared spite unshareable status allows hide 
particular statement remove carried see moves hiding object inside regardless shared handle may time return handle means operation install moves back making widely accessible 
natural applications unshareable objects natural important application objects means encapsulation 
called object body body remove state transformed state operation remove carried object regular pointer pointer legend object pointer variable object object handle handle fig 

sharing object handle varying number components components object indefinite lifetime components moved dynamically object 
conditions satisfied needs components object allocated heap argued section hard hide effectively unshareable 
making component parts object unshareable facilitate particular construction reliable class invariants prevention race conditions threads 
natural application objects discussed show objects implement tokens objects capabilities operating systems represent certain authority 
unshareable tokens utilized particular control sharing software systems object oriented databases 
general programming unshareable objects natural applications objects objects effectively broad range applications ability prevent aliasing important 
serious limitation applicability objects 
saw objects effectively shared handle objects 
build arbitrary data structure involving objects objects directly nodes kinds list structures doubly linked lists 
employing simple generalization handles previous section objects stored graph level indirection illustrated doubly linked lists 
indirection involves certain amount overhead common data structures anyway seen serious limitation objects 
legend regular object object regular pointer pointer fig 

doubly linked list objects course dynamic objects unshareable 
need regular objects serve handles unshareable ones allowing controlled sharing objects incorporation complex data structures 
pointed objects contain pointers regular objects regular objects point objects case handles example 
thing allowed pointer internal component object 
pointers possible eiffel generated means operator prohibited implementation objects language 
effect storage management unshareable objects significant beneficial impact safety efficiency storage management particularly massively 
due fact objects recycled safely described section 
precise nature impact depends language question provides garbage collection 
language garbage collection objects beneficial effects conventional unsafe deallocation dynamic objects replaced safe explicit recycling 
second automatic recycling manifestly unreachable objects defined rule reduce amount memory leakage system number allocated objects pointers leading lost program 
language garbage collection eiffel manual automatic recycling objects reduce frequency invocation expensive garbage collection procedure making storage management efficient 
effect particularly strong objects handle objects required complex data structure 
case handle objects subject garbage collection objects standard small sizes easier manage 
related bears significant similarities efforts 
support objects satisfy definition reasons motivated 
deficiencies proposals particularly object oriented programming fairness context proposal 
efforts harms weide may challenge conventional copying primary mechanism transferring data programming 
proposed replace transfers owe observation yaron minsky 
assignment parameter passing swaps dynamic objects unshareable 
problem proposal swapping mechanism transfer data inconsistent polymorphic strongly typed object oriented languages 
languages type constraints assignments antisymmetric incompatible symmetric swap 
problem demonstrated follows class proper superclass variables classes respectively 
consider assignment statement statements allowed eiffel important oo languages general provide polymorphism 
swapping paradigm replace statement swap values particular place value violating requirement variable hold instances superclasses 
problem scheme proposed harms weide fails protect parameters consumed procedure submitted 
particular difficulty serious baker proposal discussed 
second reported baker 
baker introduces concept variable point calls linear object 
concept linear object inspired girard linear logic equivalent object 
find manner objects handled variables problematic 
term variables indicates variable consumes value 
variable procedure call operation 
serious drawback programming object difficult unsafe particularly context object oriented language 
baker states acceptance function linear argument object places great responsibility function 
argument function retained caller returned value function 
baker admits writing contains fairly extensive review previous related works programs syntactically complex functions may return values proposes graphical language solution 
worse scheme failure function return linear unshareable arguments may cause grave consequences internal state caller having private components consumed 
argued serious problem pointer induced aliasing largely self inflicted wound caused universal practice programming transfer information copy 
shown takes minor virtually costless modifications typical programming language involving part transfer pointers ensure certain variables contain unique pointers 
argued variables effect ability reason large systems safety efficiency storage management 
complete implementation pointers objects generally requires changes definition language kind described eiffel constructed approximation objects requires changes language 
construction carried yu min liang rutgers university approximates objects relies program satisfy certain simple constraints operator applied objects designated unshareable 
construction described 
acknowledgment alex borgida rock howard yaron minsky pal yossi stein useful conversation writing 
am indebted bertrand meyer useful comments reviewing 

baker 
variables linear objects storage management tion multi threading 
acm sigplan notices january 

cardelli donahue glassman jordan nelson 
modula report revised 
technical report digital system research center november 

girard 
linear logic 
theoretical computer science pages 

harms bruce weide 
copying swapping influences design reusable software components 
ieee transactions software engineering pages may 

landi 
static analysis 
lett 
program 
lang 
syst december 

meyer 
object oriented software construction 
prentice hall 

meyer 
eiffel language 
prentice hall 

minsky 
tokens programming 
technical report rutgers university lcsr october 

parnas 
criteria decomposing systems modules 
communications acm december 

sethi 
programming languages concepts constructions 
addison wesley 

tanenbaum 
modern operating systems 
prentice hall 
table contents pitfalls dynamic objects difficulty hiding dynamic objects 
adverse effects dynamic objects storage management conflict encapsulation pointers 
difficulty threads 
unshareable objects unique pointers variables 
assignment variables 
treatment formal unshareable parameters 
miscellaneous rules 
recycling unshareable objects 
applications unshareable objects shareable handles objects 
natural applications unshareable objects 
general programming unshareable objects 
effect storage management 
related article processed macro package llncs style 
