flexible robust data storage retrieval haystack system kenneth mccracken submitted department electrical engineering computer science partial ful llment requirements degree master engineering electrical engineering computer science massachusetts institute technology september massachusetts institute technology mmi 
rights reserved 
author 
department electrical engineering computer science june certi ed 
david karger associate professor thesis supervisor certi ed 
lynn andrea stein associate professor thesis supervisor accepted 
arthur smith chairman department committee graduate students flexible robust data storage retrieval haystack system kenneth mccracken submitted department electrical engineering computer science june partial ful llment requirements degree master engineering electrical engineering computer science thesis create new backend haystack information retrieval project 
call exible robust module triple store 
haystack brings power personalized search hands user 
currently uses data storage backend eventually triple store 
problems faced designing new module 
due exibility existing haystack modules 
created new haystack trust model legacy haystack code exible 
interface triple store allows data metadata saved labelled directed binary relations 
hope interface exible eventually save haystack data model robust eventually haystack dependable 
jdbcstore implementation interface connects interchangeable third party database 
manages complicated robustness capabilities provided third party database handling robustness scratch 
haystack switches jdbcstore backend dependable ir tool develop interesting research 
thesis supervisor david karger title associate professor thesis supervisor lynn andrea stein title associate professor acknowledgments thesis advisors david karger lynn stein exposing intriguing technologies related haystack project 
family dad mom scott ali helping meet challenges mit years 
acknowledge people brought sanity times midst pressure including certainly limited east cambridge gang mit swim team 
joel rosenberg time help writing 
contents problem 
overview 
background state search 
bird eye view information retrieval 
catering user 
context aware search 
transactions achieve robustness 
acid properties 
enforcing isolation transactions 
jdbc transactional api 
getting haystack understand 
rdf 
rdf basics 
rdf example 
adding scope rdf resources 
rdf type hierarchy 
haystack personalized ir tool haystack 
haystack goals 
haystack user perspective 
haystack data model 

ties 
needles 

navigating model 
haystack service model 

core services 
data model services 
communications module 
persistent storage old way 
haystack trust model new distinction utilities vs services 
haystack root server 
con utility essential sort 
essential utilities 
module namespace utility 
namespace example 
controls namespace 
namespace de nes web trust 
dynamic inclusion namespace 
cleaning namespace 
new namespace necessary 
modular haystack 
adding new module 
triplestore interface transaction contract 
flexible graph haystack 
triplestore interface 
better understanding rdf triple stores 
uniform api storing rdf models 
rei ed statements 
triplestore 
directly java 
remotely middlemen 
triplestore preparing jdbcstore module 
transactions 
uris 
database tables 
storing literals 
rdf assertions 
sample put 
sample get 
server client shuts 
investigation alternative way store serializable objects 
close namespace properly 
add local triple store command line 
add jdbcstore caches 
fix broken connections 
prevent hanging connections 
find exception commit abort means 
discover information sent wire jdbc connections encrypted 
ensure jdbcstore run di erent backends 
find driver doesn appear change transaction isolation levels 
improve modularity 
haystack triple store 
sharing information 
rdf formal grammar rdf schema glossary haystack terminology list figures procedures 
actions transaction 
sequence parallel actions violating isolation constraint 
locking isolated isolated transactions sample sql table 
simple rdf model 
rdf model rei ed statement 
rdf model statement statement 
rdf model namespaces identi ed 
principal resources rdf type hierarchy 
similarities hdm rdf 
hdm owers petals 
services communicate semantic descriptions 
user requests archiving url web mit edu 
relationship services utilities 
new haystack model 
sample module controls namespace 
namespace view world 
triple store method list 
jdbcstore database table structure 
xml serialization rdf schema 
chapter haystack information retrieval engine designed help users search digital information space 
thesis creates new data storage layer haystack call triple store triple store provides uniform way clients store exible information 
call module haystack speci task enhance user search capabilities root server 
root server principal client triple store 
thing computers storing large amounts data 
conventional software mediocre job helping users search data 
hardware improves costs drop volume digital information available users increases dramatically 
unfortunately information harder search 
haystack provides personalized tool helps users navigate corpus information 
collecting information user context search conducted 
triple store provides physical representation data survives shutdown client may safely return useful state 
thesis provides uniform way clients write state 
time provides way protect storage clients restricting access small set tasks 
style text referring haystack speci modules design entities body 
problem goal haystack project provide information retrieval tool puts power searching hands user 
power haystack search measured terms ease ability point data relevant context query 
relatively easy write haystack data triple store 
lot haystack data metadata 
metadata data data 
haystack may take form author particular document user annotations document 
haystack metadata expressed relations connect data labelled link 
triple store designed haystack primary client mind 
requirement triple store provide ability transfer haystack data breaking system 
complying legacy code proved quite challenge 
basic data structure triple store ordered triple 
terms haystack metadata triple contains pointer source sink string label relation 
triple store allows storage retrieval set bits document body 
meaning document text stored haystack relationship data triple store terminology meaning located triples bits 
metadata attached data stored triple store just author document attached document haystack 
design implementation triple store focuses goals 
triple store developed adheres general haystack design principles 
coexist haystack breaking part 
maintains web trust helps dynamically loadable internal processes communicate protecting external harm 
allows multiple copies modules run concurrently 
provides exible storage layer haystack data 
provides robust interface correctly designed haystack depend information storage 
provides stepping stone communicating 
achieving goals triple store added repertoire useful modules haystack project 
fortuitous side ect triple store may clients haystack root server 
benevolent side ect way introduce new modules haystack modify existing rigid code exible reusable 
triple store implementation connects third party database part haystack project 
want require haystack users connect particular database order run haystack 
haystack code written primarily java language 
triple store uses java package called jdbc allows standardized statements executed large number di erent database backends maintaining haystack ability run platforms 
want minimize overhead setting triple store database 
user log database simply con gures triple store jdbc driver name pointer database 
haystack contained lot useful functionality prior creation triple store 
order preserve functionality triple store break legacy haystack code 
rigidity existing design adding new low layer dicult cases 
small processes called services run haystack help improve information storage retrieval 
want services dynamically loadable needed 
services evolve want restrict ability damage services parts haystack data model 
introduce utility generalization service idea 
utilities dynamic properties services aren part haystack root server module 
utilities may part module haystack 
introduce haystack trust model utilities communication trusted utilities protection untrusted utilities 
trust model somewhat similar trust model services 
explicitly prevents services adopting haystack trust model 
negative side ect haystack service model requirement uniqueness services running inside haystack 
triple store uses services restricted uniqueness haystack communications module 
services performed tasks useful modules root server 
relaxed reliance root server renamed utilities 
utility registers module trust area restricted uniqueness trust area 
permit creation multiple trust areas multiple copies utilities di erent modules concurrently 
root server large scale client triple store 
root server stores information haystack data model 
triple store designed permit physical storage model 
exible store di erent types haystack data metadata 
triple store exibility comes part uniform way information stored 
client write unprocessed data processable metadata descriptions 
root server triple store give data permanent existence 
want haystack able remember things user placed haystack learned user 
event unexpected failure want haystack able return useful state 
triple store provides ability multithreaded client root server protect internal data 
triple store supports transactions separate series actions 
just need protect services damaging need protect threads damaging physical data shared threads 
triple store provides transactions multithreaded client maintain meaningful state execution shutdown failure 
remains responsibility client transactions correctly 
triple store uniform methods help data portable 
personal currently collaborate expect add feature 
triple store express meaningful data uniform data structures triples unprocessed bits 
natural transfer knowledge versions descriptive methods write triples bits rst place 
overview thesis discusses design goals previous section achieved 
try identify weaknesses solution possible 
alternatives considered appropriate 
hope changes thesis help haystack dependable useful search tool 
chapter describes current research technologies haystack speci cally triple store 
describe chapter details haystack project focus root server uses haystack data model haystack service model represent manipulate data 
haystack data model important understanding kinds data triple store store 
haystack service model implementing triple store dicult 
requirements triple store allow multiple instances server coexist root server 
may want triple store instances content versioning support 
impossible allow multiple concurrent triple stores reuse haystack code written haystack service model time 
haystack trust model solution problem supports dynamic loading multiple instances modules chapter 
important improvement haystack code developed new model reused system haystack service code 
triple store adopts model establish web trust utilities 
triplestore interface described detail chapter 
interface de nes ways clients triple store 
transactions important proper triple store 
transaction contract describing way transactions included interface 
describe jdbcstore implementation chapter performs triplestore methods 
jdbcstore knows connect database jdbc driver translate triplestore methods driver 
implementation transaction contract important ensuring triple store behaves correctly 
chapter presents relevant research directions improve triple store rest haystack project 
conclude lessons learned thesis 
lessons involve dealing diculty idea designing existing system 
improved understanding haystack 
style text referring actual haystack code body 
haystack code java code try follow java conventions naming packages interfaces classes variables methods 
packages lowercase letters names 
usually interfaces classes rst letter word name capitalized 
variables methods tend capitalize rst letter words rst word 
chapter background get speci cs haystack project rst address related technologies 
haystack attempts improve search technologies available today running variety services aid information storage retrieval 
new triple store layer place store haystack data consistently persistently transactions 
new module permits storage exible data standard descriptive modelling framework 
chapter presents background helpful understanding haystack triple store 
certain level familiarity mathematics computer engineering concepts expected reader 
technologies graph theory set theory clientserver architecture object oriented programming design scope thesis 
author attempted avoid requiring knowledge speci java programming language possible 
places refer java design decisions java speci capabilities 
reader unfamiliar java may bene cial consult tutorial complete guide 
state search amount available digital information grows problem searching relevant useful resources dicult 
haystack provides personalized way users organize corpus information available 
computer users turn remote information repositories dicult task manually organizing personal information space unmanageable 
systems useful locate right ones retrieve understand useful data 
searching information relatively painless internet comprised individual personal computers 
computers usually somewhat permanent connection network 
communication involved contacting machines point point links provided 
files retrieved host transfer protocols ftp 
tool search machines network expose information available 
common search tools don achieve goal understand users 
understand natural language questions 
correct 
users forced live canned results gets particular search 
search engines er little customization 
haystack project uses alternative approach searching 
er context aware searching local communities arbitrary resources available network 
haystack pays special attention dynamic transitory nature information resources 
section develops current state search 
anticipate addition new services enhance haystack performing tasks similar contemporary research 
protect triple store services currently haystack anticipate 
bird eye view information retrieval information retrieval ir developed domain text retrieval 
text retrieval search large corpus documents 
information retrieval tools types information resources explored 
available text retrieval techniques applied task retrieving data types 
multimedia resources di erent formats available search technology domains emerge 
currently orts focus text metadata describe resources means searching actual content 
ir community commonly measures ectiveness information retrieval dimensions called precision recall 
precision measures relevant retrieved resources queries 
recall measures relevant resources available appear results query 
typically information retrieval system settle balance 
dicult retrieve relevant resources missing important 
dicult retrieve relevant resources retrieving irrelevant ones 
active areas haystack research study di erent ir models attempt improve precision recall 
ultimate ir solution haystack want precompute representations documents query result processing 
precomputed data structures stored triple store metadata document 
catering user search engine useless doesn nd relevant information user easily 
incremental steps taken developing useful search engine 
improvements focus increasing accuracy searches reducing user overhead 
stepping stone better search including vertical search tools 
vertical search tool specialized ful ll particular type search 
suppose want nd stock quote 
search engines contain link special search form nancial users 
tool may execute query di erent subset databases 
general search engines er versions vertical search tools 
data centric approach ers favorable improvements search 
similar vertical search data centric search special databases constructed authorities particular topic area 
user types query asking shows playing boston symphony orchestra entertainment database contacted 
argument favor data centric approach says publishing web metadata won 
metadata place data right subject area automatically 
assume metadata written adds lot user overhead internet publishing 
weaknesses data centric approach include exible structure overhead creating new topic database 
task centered approach tries shift search results user trying 
proposes collection oriented solutions search tools bene knowing user task 
am trying research information haystack commonplace assumption am trying buy accurate 
want research haystack buy hay 
designs hint trying get information user wants search results minimal overhead 
wouldn great search tool existed infer things query context user asking question 
context aware search haystack takes search step 
services maintain contextual clues improve search 
service allows users annotate documents comments help locate document 
queries search comments documents 
anticipate creation new services maintain contextual clues 
new services may infer personal context watching user done past doing right 
suppose frequently haystack ir tool ask questions computers 
ask query term apple haystack past searching context clue want information certain type computer 
am currently writing document cooking 
contextual clues may direct search 
suppose system watson derives context documents am editing word processor 
may provide search results speci type fruit 
suppose am navigating result set combines mix computer fruit resources am interested fruits 
helps user navigate allowing users re ne search mark relevant search results 
improvements haystack incorporate similar context awareness dramatically improve user experience 
transactions achieve robustness application stores information haystack needs robust physical representation 
haystack adopted triple store layer physical representation event shutdown failure rebuild haystack application state 
model haystack safely issue series changes queries triple store inside single coherent transaction 
transaction collection operations physical application state 
acid properties transaction management helps reduce general problem maintaining persistence consistency problem adhering acid transaction properties atomicity consistency isolation durability 
triple store ensure acid compliance haystack application eventually 
provide acid compliant interface disk 
acid properties remain concern haystack migrates reliance triple store 
atomicity means sequence actions constitute transaction appear occur 
consistency means transaction perform state transition original state consistent constraints transaction new state conform constraints 
application begins consistent state induction transactions executed state consistent 
isolation means parallel transactions may executed concurrently ects composite na ture visible 
transactions ects composite actions occurred entirely vice versa 
durability means transactions complete successfully survive failures 
persistence synonym durability 
say transaction commits ability abandon execution eventually execute entirety 
say transaction aborts decided changes undone transaction existed 
acid compliant transaction referred simply transaction able handle failures point 
term commit point refers instruction step transaction decision commit abort transaction 
commit point reached transaction pending transaction 
instant execution program may constitute point failure 
consider ects power outage pc 
failure occurred way rebuild state application physical storage hard disk 
application capacity recover failure physical data 
proper recovery application state consistent 
recovery usually involves undoing transaction reached commit point 
sake argument assume recovery care completing transactions committed ectively abort aborted pending transactions 
committed transactions able run completion 
aborted transactions transactions pre commit phase completely undone 
points commit point transaction able undo changes 
decision commit transaction able complete actions required resources ects 
transactions request style text referring example methods variables body 
procedure account amount account account amount return procedure account amount account account amount return procedures ability interact resources pre commit phase 
wait post commit may able access resource perform operation required complete 
acid issues contend want build low level interface disk 
triple store uses third party software bridge gap memory disk 
focus maintaining persistence consistency application layer 
issues concerned include isolation transaction speci cations java database connectivity api known jdbc 
enforcing isolation transactions haystack multithreaded application 
multithreaded applications potential transaction run simultaneously 
recall transactions require transaction committed aborted system consistent state 
threads want perform operations independently particular variable address locking may required 
address address memory disk depending context variable 
lock mark thread protect address read written thread 
consider pseudocode de nes methods give code concurrent transactions 
suppose pseudocode describes transaction comprised actions 
en 
create environment 
read account 
read amount 
compute sum 
write account containing environment 
close environment actions transaction vironment created procedure 
data account amount arguments read method environment 
sum variables computed 
sum written address account containing environment 
environment closed 
steps occuring environment 
obvious analagous expansion pseudocode procedure 
suppose wants deposit john account wants automatically withdraw john electric bill 
assume john bank account initially 
think operation transaction john bank account occurring concurrently 
transactions isolated expect john balance 
absence locks transactions isolated 
exists ordering composite actions ect occurred vice versa 
example sequence steps associated values ordering 
john disappointed discover account 
locks ensure john surprised time looks account statement 
consider modi ed procedures isolated isolated special procedures lock release 
locking protocol marks address argument containing environment environment may access address mark removed 
transaction attempting lock address marked wait lock released perform alternative computation 
action value 
read account 
read 
compute sumx 
read account 
write account 
read amount 
compute di erence 
write account sequence parallel actions violating isolation constraint isolated procedure account amount lock account account account amount release account return isolated procedure account amount lock account account account amount release account return locking isolated isolated transactions case just wait lock released 
mark remains transaction mark releases 
new isolated procedures prevent problem transactions reading writing location 
john guaranteed long transactions commit account 
locking protocol source pitfalls 
important designer system locking protocols modules creating 
particular attention case transactions reach state progress waiting lock particular resource 
term deadlock refer situation 
possible implementations constructed avoid problem 
common isolation errors permit transaction observe composite nature transactions 
dirty reads allow transaction see uncommitted changes parallel transaction 
reads allow transaction observe changes transactions commit 
phantom reads involve able see changes increase size results database query 
suppose transaction executes query 
transaction commits change adds contents query 
rst transaction executes query new results include newly added contents witnessed phantom read 
achieving isolation important concern transactional system 
mechanism read write data atomically prevent programmer violating acid design requirements 
example locks isolate procedures 
triple store achieve sound transactions 
database isolation level settings provide isolation physical data 
multiple transactions run concurrently haystack programmers careful violate isolation constraints sharing application data pertains triple store data 
jdbc transactional api jdbcstore implementation uses java database connectivity jdbc api 
jdbc provides programmers tool connect virtually data source uses tabular structure 
data sources may form les spreadsheets databases 
api uses structured query language sql language communicate database 
connection established data source programmer implements put get operations physical storage series sql statements 
put get write read data values respectively 
able put get methods sql requires programmer create tables sql objects stored exist 
section relational databases alternatives relational databases description technologies speci jdbc api database named postgresql currently jdbc backend 
relational databases structured query language sql provides language communicating relational database management system rdbms 
jdbcstore implementation writes put get methods sql statements 
fundamental structure sql database dimensional table 
columns represent attributes rows contain values columns 
table structure useful 
power relational databases comes combining tables comprise database results database get operations queries 
get operations may combined conjunction disjunction hierarchically perform complex put get operations 
sql query may combine columns multiple tables 
boolean test clause query involves columns di erent tables call operation join operation 
querying multiple tables absence join constraints returns cartesian product rows satisfy query rdf assertions assertion id subject predicate object owers petals owers bloom spring garden owers grass green sample sql table constraints 
join operations embody constraints necessary describe subset cartesian product desired query result set 
restrictive type join called outer join block row selection value tables empty 
simplest operations included sql grammar create table insert select update delete drop table 
users empty database tables rst step execute create table statement de nes column structure sql type name column 
primary key designated uniquely identify row table 
suppose de ning table named rdf assertions columns assertion id primary key subject predicate object 
value assertion id primary key attribute rst row unique identi er row 
rdf assertions table accept addition row assertion id 
table structure de ned add data database 
insert operation adds rows table specifying values columns 
sql put methods 
statement insert rdf assertions values flowers petals creates rst row 
select operation generate database queries mentioned earlier 
sql get method 
operation select rdf assertions assertion id returns rst row rdf assertions table 
character signi es selection column table 
update operation modify row rows table 
sql power get rows put speci ed column changes selected rows 
clause de nes constraints select operation 
statement update rdf assertions set object summer predicate bloom updates object column second row table value summer 
delete operation allows removal row rows table similarly quali ed set constraints 
delete operation combines get rows special type put removes selected rows table 
database table useless drop table statement row table table 
create table insert select statements add information database destructive impact malformed statement severe 
mistakes update delete drop table statements far greater potential consistency application uses sql 
reason sql databases frequently ability restrict certain users performing di erent types statements 
object oriented argument alternative relational databases object oriented database 
objectoriented databases store arbitrary data structures making conceptually easier understand relational databases 
specialized writing data structures disk don query performance enhancements relational databases 
puts gets haystack data requires uniform small part application controls data model 
haystack users frequently perform queries touch data model 
object oriented databases desirable haystack data storage solutions 
object relational databases object relational databases combine ease modeling complex data structures object oriented application ability express varied relational sql queries coding overhead 
useful complex object oriented applications bene dynamic set query functionality 
databases typically optimized transaction processing frequent queries expect haystack 
data regular don need complex data structures object relational databases support 
jdbc api triple store uses jdbc api access database 
jdbc standard package java programming package 
package gives programmer api creating sql database 
api seamless database connectivity number database management systems available 
provides mechanism databases support serve basis transaction management system 
want haystack able run platforms possible minimizing user overhead 
choice third party databases require user particular database 
reasons choosing jdbc triple store implementation ability myriad data storage applications formats 
jdbc postgresql hopes transition database run smoothly 
major weakness jdbc inability perform basic administrative functions necessary set database 
partially identi es fault conventional system design 
jdbc reduces problem arbitrary database problem installing con guring speci database properly con guring java virtual machine vm connect 
perform database installation setup go operating system 
setup procedures require writing system dependent haystack install scripts con gure run database server asking user perform install 
scenario violates di erent haystack design goal 
violates idea haystack run seamlessly platform 
violates idea user overhead minimal 
jdbc connection created need establish transaction protocol 
jdbcstore dynamically load database speci jdbc driver establish connection 
connection con gured allow multiple sql statements single transaction 
con gured desired transaction isolation level 
settings interested referred transaction serializable 
level provides restrictive set rules isolation transactions 
prevents dirty reads reads phantom reads 
events represents act break acid properties transaction 
performance costs restrictive isolation level 
underlying database probably implements form locking strategy ensure isolation values transactions access 
bene ts acid compliance justify costs 
connection set transaction strategy executing sql commands interfaces java sql package 
transaction implicitly open connection point 
run transaction time connection 
individual statements obtained connection object 
may execute valid sql command statement 
statement query get back object allows iterate results 
statement works datatypes easily included string statements executed 
allows optimize performance similar sql executed repeatedly slight parameter changes 
parameters set values sql type 
mapping java object types sql data types provided 
set values execute query change values execute query 
done executing series statements simply call commit connection 
goes wrong point call abort connection 
commit abort call returns connection implicitly begins transaction 
postgresql triple store implemented tested database postgresql 
open source database installs modern unix compatible windows nt windows operating system 
object relational database management system 
postgresql community claims support sql constructs including transactions user de ned types functions 
postgresql jdbc driver claims support standard jdbc interface community advises users consult sun documentation 
supplementary documentation tutorials support may postgresql web site 
postgresql object relational database interface restricted decision require particular haystack database backend 
standard sql grammar supported jdbc interface postgresql ers extensions 
getting haystack understand help haystack describe data triple store designed store exible resource description framework rdf model 
traditional applications write data database tables meaning understand structure interpretation tables 
rdf provides way application write di erent data descriptions 
descriptions give meaning application internal structure interpretation data 
intent haystack migrates data model triple store de ne haystack rdf model compatible web technologies 
hope rdf exible transition relatively easy 
uniform rdf model pieces haystack state easily portable 
expect collaborating enhance user search asking help searches appropriate 
haystack services may exist incorporate understand information foreign rdf applications 
rdf rdf created information available world wide web 
rdf represents information form assertion describes relationship data objects 
assertion data objects resources entity digital 
premise metadata describes resource provide understanding resource 
metadata syntactically indistinguishable data gives context resource 
context machine discern meaning 
rdf processors automate task processing information application rdf model 
processors read contents model trace model meaning back understand 
foreign rdf model may refer schemata de ne types uses describe data 
generic concept type category called class rdf 
schema may turn refer classes de ned schemata 
schemata may traced back rdf schema speci cation 
rdf processor encounters metadata understand trace class hierarchy back schema 
xml syntax write rdf model 
supported syntax provides information machine readable form 
haystack research may include adapting xml parsing service read write triple store 
triple store design evolved combination current haystack data model similar rdf model 
xml write model scope 
xml described detail world wide web consortium web site 
xml formal grammar may helpful understanding rdf terminology provided appendix xml serialization rdf schema speci cation appendix may useful 
read html may somewhat useful reader familiar xml 
rdf basics basic rdf expressions involve resources properties 
resource node rdf model identi ed unique universal resource indicator uri 
uris typically character strings identify resource concatenating protocol scope namespace scope speci identi er 
property relation embodies aspect characteristic attribute resource maps value 
object oriented terminology resources objects properties instances 
properties resource give resource context meaning 
collection rdf expressions resolved rdf data model context representation comparison 
rdf expressions equivalent data model 
rdf statement assertion ordered rdf triple contains resource property resource value property 
statement elements referred assertion subject predicate object respectively 
subject resource assert particular property 
predicate resource may properties attached clarify meaning constraints subject object 
object may resource literal 
unclear author exactly rdf literal literature 
literal primitive data processed rdf processor 
literals may appear xml expressions 
purposes triple store accept arbitrary bit string literals 
object literal subject literal 
unclear predicate literal 
triple store writes rdf model statements resources subject predicate object 
store assertion contains literal rst store literal internal resource refers literal statement 
note requirement merely describes particular way write statements literals break rdf speci cations 
order represent complex rdf expressions statements simple rdf model statements rdf type system 
type speci property rdf model value describes type subject 
container collection resources 
containers express assertions mathematical sets 
properties attached container authors describe authors haystack documents 
express higher order descriptions writing statements statements 
order refer statement subject statement introduce resource model represents entire statement 
process creating new resource called rei cation 
haystack uses lot higher order metadata reify statement triple store 
rdf example consider case resources called owers petals 
express description owers petals introduce assertion appropriate subject predicate object produce 
statement labelled gure 
nodes represent resources labelled arcs represent properties 
note rdf model rei ed statement labels arcs considered resources properties resources 
abbreviated names point consider identifying uris uniform local scope 
consider case want attach previous 
want able express statement 
perform rei cation obtain node 
resource attribute value pairs type statement sub ject owers predicate object petals created rei cation 
rei cation expresses assertion petals owers 
suppose want say hacker says owers petals 
capture statement model attach assertion original subject 
property embody concept entity saying certain statement holds 
shows resulting model 
additional property value hacker added giving context meaning 
triple store interface automatically rei es statements giving new uri 
rdf model statement statement adding scope rdf resources relax constraint resource rdf model local scope 
allow model refer rdf models 
accomplish task rdf namespaces 
rdf model written xml model rdf namespace xml namespace describes model 
areas nance domain understood widely xml vocabularies 
creating namespaces rdf models namespaces appropriate 
examining models rdf processors able recognize resources processed local scope refer foreign scope 
recall uris universal versions names rdf model extend local model 
resource outside local scope uri identi es namespace consulted resolve meaning 
rdf namespace special kind xml namespace referred variable pre xmlns 
return example statement hacker says owers rdf model namespaces identi ed petals modify slightly allow namespaces outside local scope 
refer basic resources rdf model syntax xmlns rdf www org rdf syntax ns 
namespace de nes rdf resources type subject predicate object 
suppose namespace xmlns team org schema describes properties 
nal namespace clari cation identify data repository bar net de ne resources hacker owers petals 
shows universally readable version example 
higher order statement read understood remote machine 
rdf type hierarchy rdf type system important follow thesis haystack starts triple store 
similar type systems objectoriented programming languages described rdf schema speci cation xmlns rdfs www org rdf schema namespace 
recall namespace xmlns rdf de nes basic rdf resources 
author knows enforcement rules schemata possibly fact models violate may considered valid rdf models 
case rdf processors explicitly forbidden process 
basics resources rdf schema shown 
root node resource rdfs resource 
principal subclasses resource rdfs class rdf property 
properties rdf type rdfs subclassof gure describe type class hierarchy resource 
class de ned rdf rdf type rdfs class including resource rdfs class 
statement predicate rdfs subclassof speci es subject subset object 
properties may appended model describe existing resources 
rdfs subpropertyof predicate rdf assertions declare subject specialization object 
arbitrary resource type property signify resource instance speci ed class object 
instance class characteristics expected members class 
rdf permits resource instance classes 
subclassof property transitive property 
prevent looping model class subclass subclass subclasses 
transitivity applies subpropertyof property 
extensions basic property type system 
properties added properties describe may legally applied 
example restriction require certain property may applied subject 
extension rdf schema daml principal resources rdf type hierarchy ontology 
daml ontology introduces mathematical quali ers model 
describes set concepts cardinality disjoint disjoint union intersect equivalence membership complement 
instances class comprise set de ned class 
daml ontology de nes properties relations uniqueness inversion transitivity 
expect haystack translated rdf model tools provided rdf schema daml ontology 
type system similar object oriented type systems java migration somewhat straightforward 
chapter describe haystack data model detail discover haystack uses metadata relations express lot state 
chapter presents processes run haystack service model help search tasks 
see important protect data services ensure robustness triple store 
services useful triple store modi ed outside root server 
chapter haystack personalized ir tool parts existing haystack system profound impact creation triple store 
minimizing user overhead exible modules important part haystack triple store 
haystack data model hdm place lot metadata 
data model preceded notion rdf uniform storage model relations 
hope triple store enhance hdm allowing describe rdf assertions 
haystack service model hsm important triple store 
haystack trust model chapter emerged allow triple store legacy services 
problem hsm existing trust mechanism permitted instance service run time requiring services talk root server 
triple store break existing code haystack trust model ect operation haystack service model 
problems transaction management robustness existing data storage services 
triple store hopes provide robust interface working transactions 
overviews haystack system haystack goals help reader get acquainted project 
haystack problem current information retrieval tools structure doesn suit user needs 
haystack ort exploit potential information retrieval user 
users add information digital information space organizational structure increasingly dicult manage 
conventional le systems require structure les directories contain tracking data describe content layout 
file systems logical interpretation dicult especially trying understand friends colleagues 
solution evasive look data available internet 
structure haystack information space exible contain metadata describe layout 
haystack goals visit clarify modify legacy design goals haystack project context thesis 
haystack include persistent dependable modules users rely store information 
provide easy customization 
allow distributed dynamically loadable utilities services 
utilities reusable modules possible 
designed eye permitting inter haystack collaboration 
give users easy understand querying mechanism provides accurate ir functions 
provide personalized query results 
provide ability users explicitly implicitly annotate information space 
learn past adapt user changing information needs 
triple store low level module really concerned rst points persistence easy customization reusable loadable utilities haystack collaboration remote query command line 
users start relying haystack assured haystack persistent 
lowest level persistence data storage layers triple store 
triple store requires little user overhead administrative tasks setting database providing pointer right jdbc driver 
jdbcstore incorporates reusable dynamically loadable communication utilities 
uniform methods rdf triple store hopefully describing haystack data haystack easier 
triple store module contains skeleton invoking put get methods directly module remote command line 
haystack user perspective haystack interfaces rst run haystack server default preferences 
users choose command line web client java graphical user interface gui 
remote command line web client require password authentication 
interfaces add skeleton remote triple store command line requires password authentication bringing information corpus data process call archiving 
suppose tell haystack archive mit homepage web mit edu 
request tells haystack store contents url links provides haystack 
perform query information space term science 
am list resources called triple store root server currently share authentication 
hdm rdf straw resource uri tie property straw tie straw subject predicate object statement assertion needle literal container similarities hdm rdf representing science haystack 
follow link called tie page labelled massachusetts institute technology nd text description stating mit devoted advancement knowledge education students areas contribute environment science technology 
sections look closer parts haystack 
discuss existing pieces impact triple store design 
haystack data model contain ties needles 
objects form basis labelled directed graph digraph user searches navigate 
hdm objects type straw unique identify 
hdm objects similar rdf objects 
reader may wish refer guide similarities hdm rdf 
basic nodes hdm digraph 
digraph straw including edges connecting nodes 
straw subclass type provides semantic information straw 
type clari cation search instance user requested postscript documents 
pointers forward backward edges graph 
straw object similar rdf resource 
hdm objects rdf objects resources 
unique rdf resources unique uri 
triple store represent hdm model rdf model 
ties ties edges hdm digraph 
special types connect directed fashion 
tie exactly special backward forward link 
backward pointer indicates source tie created 
forward pointer indicates value tie source 
additional information form ties added tie expand semantic meaning 
add edge tie transform edge tie node create special edge source value 
ties represented nodes special unlabelled forward backward edges resolve statement owers petals hdm 
tie similar rdf property 
tie acts source connecting value rdf property acts subject provide particular value 
take tie source sink equivalent rdf subject predicate object triple 
triple rdf statement assertion 
process transforming tie edge node hdm digraph serves purposes rei cation rdf statement 
rei cation allows attach statements statements 
needles needles contain data element take form locations le types bodies text strings 
raw bit strings hdm 
type needle bits document 
metadata surrounding contents needle usually describes information document displayed user term frequency measurements calculated retrieval 
needle similar rdf literal 
recall purposes triple store literal just collection bits 
raw bits models essentially unprocessed haystack particular service may read contents needle perform task response 
meaning needle rdf literal described attached assertions 
put rdf statement contains literal triple store uri refers literal 
needles reason indirection 
refers needle hdm require uri refers literal triple store 
mentioned earlier unclear author exactly literals permitted rdf statement 
requiring uri literal put non literals statements capture meaning 
property part haystack rdf model maps resource literal 
assertions containing property express concept subject bit string representation corresponding appropriate literal 
represent clusters related resources document 
encapsulate idea collection haystack 
usually particular document type ties commonly associated author creation date 
eciency gains grouping resource clusters hdm 
similar rdf container 
members de ned certain purpose containers resources members allow properties added entire collection 
deprecated appropriate type tie express idea container 
navigating model stored things haystack get 
document archived haystack small web semantic information attached document 
haystack program access forward backward links straw follow examine web 
semantic information surrounding document connected component hdm contains straw represents document 
executing query haystack search document metadata determine relevant user query 
contextual clues data model giving haystack ability understand resources 
haystack decides resource relevant returned user query results 
resource user follow links data model just automated query processing return example modelled statement owers petals 
statement appear portion haystack data model shown 
see network 
note straw straw tie needle id associated 

note straw including id multiple back forward links 
tie special back pointer special forward pointer identifying resources connects 
needle may resolved directly string literal arbitrary stream bits appropriate get method 
haystack service model haystack driven services 
service service name associated provides semantic description function 
service name running inside haystack time 
services depend existence root server 
past root server synonymous entire haystack program 
user view data model may subset view query services traverse 
hdm owers petals 
triple store module runs root server 
removed root server rst time services useless 
triple store uses modi ed versions services described chapter 
de nition discuss relevant services 
superclass haystack service 
constructor service name identi er short name package version creator service 
short name identi es service haystack type 
package identi es service module 
version number corresponds different revisions particular service class 
envision dynamic new versions haystack interact older versions services 
creator identi es entity created service 
entire service name tuple uniquely identi es instance service haystack 
instances instantiated closed shutdown 
services outside root server created utilities exible services 
previously added haystack service extended 
problem services tightly coupled singleton root server running haystack 
exactly instance particular service may run entire haystack program service run root server module 
wanted services triple store 
utilities provide solution 
core services core services include root server name service con service 
core services include loggers counters caches 
assumption service core services root server starts 
root service mentioned earlier root server primary driver haystack ir tool 
root server loads dynamically con gurable set services con service 
root server initialization method initializes services including dynamically registered name service 
root server access point services obtain pointers talk registered services 
access granted static java methods 
means matter threads services receive exact pointers static root server accessor methods 
result entire haystack process shares instances services 
static accessors bene ts scope hsm strategy useful modules exible generic utilities 
name service access point utilities triple store name utility patterned name service 
new haystack trust model uses non root server speci version name service 
name service communication 
essentially container semantic pointers services 
allows pointers identi ed service name usual java speci pointer 
access pointers service name suitable haystack dynamically loadable services 
service name semantic description service 
services may type accessed semantic description 
name service allows describe services string identi ers stricter rules typing 
service name may describe service terms haystack rdf ontology 
suppose want name service access query service 
java am restricted accessible compiled class 
suppose need run old version query service nd results able nd week ago upgrading haystack 
upgrade replaced old version load old version service stored haystack disk name service 
reconstruct object bit stream construct old version java byte code 
describe name service want pointer old query service pointer type accessible java dictionary 
name service identi cation strategy useful want access object unknown type 
semantic descriptions added service names may able ask name service service execute particular type query 
suppose get pointer service type query service handle task 
invoke specialized query method knowing type shows service contacts service service name type pointer returned di erent type semantic description establish connection service service rst registered name service 
name service accessible contacting root server 
service needs complete task asks name service service help currently service name contains name package creator version may left default values requesting service 
haystack transformation rdf model semantic descriptions tasks may emerge part service name 
service asks root server pointer service description name service searches tables service help pointer instance service returned 
services communicating 
take look see conventional namespace name service contained root server 
name service 
triple store uses similar name utility serves purpose name service module depend java provides mechanism called re ection lets call named methods class object 
services communicate semantic descriptions root server 
name utility handles communication descriptive utility names 
important di erence name utility name service attempt persistently save information disk state utilities running 
unclear exactly arbitrary name utility store utilities lists 
triple store needs persistent state need implement functionality 
con guration service triple store uses generic version con service called con utility require root server 
serve identical purpose storing con gurations user haystack 
type con guration list services user wants load run haystack 
utilities global con utility shared modules contains defaults module instances 
data model services data model services permitted create store hdm ties needles 
data model services eventually modi ed access triple store interface physical storage 
access triple store module limited data model services core services possibly 
communications module triple store requirements remote connection directly triple store possible 
order haystack communications security modules purpose modi ed 
changes unanticipated part thesis necessary service code useable 
haystack trust model emerged order able services manner root server 
possible actual functionality parts haystack trust model communications module security module preserved separated root server dependency 
communications security modules support root server haystack trust model concurrently 
reason introduced thesis modify break existing root server architecture 
module designs elegant root server migrate haystack trust model change necessary 
communications module ts service de nition instantiated root server ts utility de nition instantiated triple store 
communications module includes services permit processes outside root server communicate root server 
communication involves sending character string versions commands network root server 
communications module root server commands understood service 
communications module module triple store commands understood module command api 
remote service communication services running remote process necessary establish connection root server 
root server listening port connections 
remote client uses middleman connect remote port 
security package contains objects facilitate encryption communication middlemen 
security objects incorporated middleman password required middleman client 
password ensuing client session follows encrypted 
packets encrypted created decrypted receipt 
middlemen act intermediary processing packets seen 
requests sent client side 
request packaged packet sent middleman listening 
client communicating middleman 
client request term services talking communications module context root server section 
send command middleman simply returns response processing command 
scenes command packet created encrypted sent server 
server receives command decrypts executes command locally 
response packet created containing results local processing new packet encrypted sent back client 
command api command apis serve relay agent pass messages haystack client server middlemen back typical client server dialogue 
traces path request client server response back 
example command line responding user input archive mit homepage web mit edu begins dialogue 
time progresses upper right gure clockwise client server back client 
term virtual refer services client real refer services server side 
client requests sent virtual command api 
api asks client middleman send encrypted command socket network 
middleman server receives command decrypts 
request passed real command api 
real command api searches tables registered commands deal request 
real command api nds executes appropriate archive command 
archive command turn runs command root server generates response real command api send back client 
response sent middleman server wrapped encrypted packet network 
middleman receives decrypts returns response virtual command api 
virtual command api invocation nally returns response archived command line user terminal 
user told resource archived free enter new requests 
actual archiving queued minimize latency user request 
triple store client uses similar protocol talk triple store server user requests archiving url web mit edu 
communications security packages section 
persistent storage old way problems old persistent storage mechanism triple store eventually replace 
dicult identify intentions old persistence mechanism parts deactivated implemented accordance comments documentation 
brief overview may prove instructive follows thesis 
important note root server currently uses old persistent storage tools 
interface old storage module persistent hashtable 
hashtable stores key value pairs haystack data model 
access persistent hashtables mediated module called kernel 
transactions mediated kernel currently deactivated code 
ideas kernel triple store replaces persistent hashtable kernel xed 
problem improper variables potentially hold transaction handles haystack threads 
threads share transaction handle pointer concurrent transactions collide result 
early step thesis improves robustness haystack backup service 
service periodically halts haystack copies entire state haystack data model backup copy allows haystack continue 
intent haystack enters state failure revert somewhat backup copy 
backup service may help certain failures possibility reaching state exists 
point backup service res haystack clean backup overwritten faulty haystack state user haystack 
triple store intends provide truly persistent remedy working transaction management system acid compliant modules 
haystack uses triple store correctly valuable improvement root server old persistent storage strategy 
chapter changes necessary allow triple store reuse written useful services 
haystack trust model permits reuse utilities architecture similar haystack service model described chapter 
cases design aspects simply copied reusable model 
slight modi cation services reusable non root server dependent utilities safely coexisting current service architecture 
chapter haystack trust model haystack trust model adaptation haystack system design allows modules namespaces 
instance module may loaded unloaded needed 
emphasis placed reuse submodules avoid wasteful design implementation overhead possible 
easier reuse pieces haystack project 
haystack trust model htm xes problems created haystack service model reusing earlier haystack design decisions 
htm introduces utilities serve purpose services di erent modules 
htm allows multiple instances utilities coexist di erent modules 
contrast exactly instance particular service may run time run root server module 
htm facilitates communication utilities semantic descriptions way service progresses 
communication permitted utilities particular web trust created module 
new modules adopt htm include reusable utilities appropriate 
creation htm done little haystack design exible 
haystack remains unchanged 
entire service hierarchy changed modi cation require editing classes 
changing services haystack trust model absolutely necessary point 
legacy modules modi ed 
security root server module service service name utility utility name relationship services utilities communications modules adapted support exible htm 
order avoid breaking root server modules currently support older haystack service model newer haystack trust model 
new distinction utilities vs services concept improve hierarchy 
class class top utility hierarchy 
utilities subclasses 
utility generic service require root server permits multiple instances di erent modules concurrently 
demonstrates relationship services utilities 
features service descriptive service name instantiation 
service name description service communication 
utility name place service name utilities htm 
utility names way service names maintain design haystack project 
utility refer utility name description 
may optionally register declare available resource namespace 
utilities web trust namespace may access utility name 
register utilities single namespace instantiation 
delay namespace registration 
namespaces arbitrary modules detail section 
utility implicitly 
methods ensure utility dynamically loadable 
services modi ed run utilities may module 
modi cation occurred communications security modules 
modules triple store may useful module desires communication security 
classes services instantiated root server module utilities instantiated triple store module 
allow services require thesis leave root server module unchanged 
allow utilities triple store 
confusion remains htm break way root server functions 
haystack root server 
previously concept haystack root server exist 
alternative design root server merely represents module performs ir functionality haystack 
new model arbitrary modules may utilities running 
module self contained process running haystack memory space 
modules talk di erent parts haystack permitted system 
module interact root server triple store module run completely 
moving new model haystack world shows 
model shows di erent aspects haystack 
part happens inside haystack process 
pieces processes running outside haystack process 
boundary processes grey line gure 
arrows indicate communication boundaries 
middle gure shows parts haystack run server side 
grey boundaries processes run remote programs 
old model root server running haystack program server side 
may run root server triple store 
note solitary triple store support root server ir capabilities 
design possible run root server triple stores concurrently 
top shows ways connect remotely root server 
new haystack model exists possibility remote services operate outside root server communicate root server special service 
remote command line communications security modules services 
actual dialogue coordinated middleman middleman server connection 
middleman architecture encrypts authentication ensuing information exchange security services 
remote user interfaces web interface connect appropriate services 
bottom gure shows remotely connect triple store 
triple store uses communications security modules utilities 
utilities just means triple store namespace communication root server namespace 
actual remote dialogue follows middleman architecture including encryption authentication 
expect root server eventually migrate triple store persistent storage 
currently root server uses data stores persistent hashtable purpose 
connection triple store root server surrounded question marks gure 
question marks denote possible lines interactivity 
migration triple store begun don know connect triple store directly modules 
note module may granted permission interact root server triple store 
haystack trust model triple store modular entity utilities dependency constraints service counterparts 
may run arbitrary number triple store modules 
run triple store root server 
triple store module depends existence haystack utils package haystack security package haystack communications package 
sense triple store utility module uses security encryption decryption communications support remote clients 
noted haystack exceptions package required older haystack modules put exceptions 
exceptions java objects usually indicate critical noncritical failure method execution 
con utility essential sort previously needed root server core services order run part haystack program 
standalone triple store require con utility 
say con utility essential htm mean modules need 
just assume modules want con guration capabilities ers 
desire set dynamic con gurations module ne con utility 
root server currently runs con utility haystack 
service package touched creation triple store 
root server runs con service 
con service con utility support identical functionality service version may root server 
root server create completely separate module triple store rst initialize global con utility 
essential utilities logging capabilities root server may modi ed utilities 
recognize logging probably useful regular operation debugging module 
reason may eventually require existence logging utility 
important utility dependencies examined closely adding htm 
may utility model creating problems faced service model 
module namespace utility entity registers called name utility 
name utility register 
name utility represents namespace area trusted communication utilities 
global namespace module speci namespace 
registered global namespace haystack program trusted web communicate 
registers namespace access utility limited namespace 
namespace example depicts creation jdbcstore module subsequent interaction namespace 
module speci namespaces created command class 
returns key namespace 
call module black box internal machinery module exposed 
programmer restricted api input output methods 
black box module created instantiating initializing single instance class 
call instance controlling class module interfaces implements methods available outside black box 
module true black box controlling class exposes namespace key uses internal methods 
jdbcstore implementation triple store module controller 
time progresses gure top bottom 
left jdbcstore boundary module creator namespace 
inputs outputs methods cross line black box jdbcstore maintained long utility pointer namespace key sent boundary 
controls namespace 
jdbcstore creates namespace instantiated hides namespace key private representation 
initialization create new utilities pass namespace key utilities gure 
passing namespace key constructor registers new utility module namespace 
utility keeps copy key order communicate utilities namespace 
namespace de nes web trust namespace key de nes web trust module 
suppose invoked 
utility copy key get name utility invoking 
utility choose get pointer registered utility get method call 
utility obtains pointer utility interaction follows 
eventually method returns arbitrary object 
key veri ed class return pointer appropriate name utility 
veri cation done checking pointer actual identi er object created namespace created 
java prevents modules arti cially creating pointer 
way access key pass explicitly module 
key utility semantic descriptions request communication utilities namespace 
methods accessing managing namespace similar name service 
methods kept uniformity 
name utility adds ability restrict access namespace create arbitrary number namespaces 
fundamental di erence name utility name service 
name service stores information services register disk 
name utility stores disk 
reason capabilities included name utility triple store module require saving state utilities 
new module wants save information namespace functionality added 
sample module controls namespace dynamic inclusion namespace feature name utility dynamically load unload entire namespace 
module controller created creates namespace 
utilities registered namespace interact 
example list utilities stored global con utility may contain utilities load dynamically 
classes created namespace key argument registered namespace 
cleaning namespace close module simply call close method module controller 
jdbcstore turn asks explicitly loaded utilities close ask namespace close 
name utility iterates registered utilities closes 
nished namespace module unloaded 
new namespace necessary 
utilities registered particular namespace unique namespace 
utility name description uniquely identi es single utility 
know need new namespace want create new instance registered utility want create new web trust submodule 
way hack uniqueness constraint modify utility name arbitrary character string extension identi ers 
suppose certain module namespace want create submodule namespace 
advantage creating black box constraint enforced submodule 
submodule prevents access utilities keeping namespace key hidden new web trust created 
namespace view world modular haystack revisit new haystack trust model terms namespace structure haystack 
recall new modules may associated namespace root server special namespace maintained name service 
shows namespace view haystack architecture 
phrases parentheses denote module namespace 
note java virtual machine vm access loadable global namespace root server name service 
module returned namespace key rest haystack application 
assume worst case say namespace accessible program 
module triple stores kept keys namespaces private 
root server uses utility loader 
modi ed service architecture 
port root server new model name utility name service 
bene services reusable 
doing require modifying block code service uses name service 
happens frequently may just create name utility root server new services avoiding task modifying existing services 
right change critical long keep mind root server name service exposed modules haystack application 
adding new module steps creating new module lot easier 
suppose want introduce triple store module 
run triple store need controller class jdbcstore 
jdbcstore creates new namespace constructor initializes utilities plans giving appropriate ones access trusted namespace 
explicitly created utilities core utilities module utilities may depend 
middleman server utility jdbcstore explicitly create 
jdbcstore searches global con utility list utilities dynamically load 
utility jdbcstore dynamically loads command api 
command api namespace key instantiation 
utilities registered namespace initialized registered utilities 
jdbcstore ready 
closing jdbcstore closes explicitly created utilities closes namespace 
recall closing namespace closes dynamically loaded utilities 
communications module specify appropriate middleman server parameters jdbcstore constructor 
jdbcstore communications functionality patterned directly way root server uses communications 
give middleman server namespace key calling constructor 
middleman server won able communicate module 
specialized command api optionally loaded default con gurations 
note generic middleman server module speci command api implementation speci es deal commands arrive 
simply extend haystack utils new interface haystack ts serve remote triple store api 
real virtual command api implementation 
real virtual apis implement haystack ts interface 
invoke register methods di erent things depending client virtual server real api 
virtual api simply forward register invoke requests middleman wait appropriate response 
real api process register invoke request 
case new command registered library known commands 
case api checks appropriate command library 
request sent command 
appropriate error message returned 
currently skeleton remote command processing set 
commands register triple store command api 
run command line extend haystack utils 
haystack ts 
keep generic command line parser thing implement namespace key aware constructor method 
registers command line namespace 
selects correct command api module speci haystack ts utility name 
note order command line triple store command api registered namespace 
command lines api 
creating server new module easy running middleman server creating command api modi ed command line desired 
creating client easy extending haystack utils class implementing methods assign appropriate server network address port create appropriate command line initialize appropriate default utilities client 
extension generic client 
method addition new module similar steps root server 
middleman command architecture similar 
new namespace approach server time reuse things communications module generic client 
chapter triplestore interface chapter presents triple store interface provides basic put get operations rdf model 
triple store crux thesis 
simplicity uniformity interface useful data store haystack data model 
transaction contract provides ability achieve acid compliant robustness 
support storage rdf assertions exible storage layer 
interface design anticipates multiple triple stores connected di erent backends 
interface black box module exposes internal web trust 
caveat remember simply having transaction management system prevent failure modules 
possible violate isolation constraints cached objects instance 
refer section review isolation requirements acid compliant system 
transaction management system created triplestore interface just tool box building module 
thesis deals primarily jdbcstore implementation triplestore described chapter 
possible implementation fail adhere transaction contract carefully written 
chapter transaction contract detail 
describe triplestore actual java interface 
supports methods th triple store interface brie triple store save exible graph root server 
interface 
explain interface useful tool writing meaning haystack information rdf assertion store 
conclude description mechanism communicating triplestore local application remotely middleman architecture 
transaction contract triple store provides transaction management protocol achieve robustness haystack 
basic contract simple 
transaction begins new transaction 
transactions may handled implicitly thread instance triple store explicitly transaction handles passed method 
interact triple store transaction open get put methods triple store may executed 
note actual copies data database isolated ensure isolation cached versions copies data shared threads 
abort transaction method allows executed transaction call aborted 
transaction may aborted part transaction caused error decision drop transaction 
commit transaction method allows executed transaction call commit part persistent storage 
commonly expected transaction 
order commence transaction transaction executed 
transactions may maintained implicitly thread instance basis explicitly transaction handle object 
implicit transaction handle may thread triple store 
explicit transaction handle may pass transaction threads 
special attention isolation coordination advised attempting transaction handles way 
transaction handle goes authentication time 
point invalid handle transaction open thread instance appropriate thrown 
valid handle handle obtained particular instance triple store 
particular implementation triple store may optionally choose permit transaction handle instance instance 
jdbcstore instances allow transaction handles connect actual underlying database username 
transaction open module realize resource blocking rest system resource 
case jdbcstore resource actual database connection currently limited number compile time constant instance 
dynamic connection pool created resources released abort transaction commit transaction method called 
open transaction triple store methods may executed demand 
methods described detail interface de nition discussed section 
note point indicates attempt invalid handle absence transaction thread instance 
returned execution transaction problem interacting underlying data store 
cases problem data store indicates need abort transaction 
programming practice ensure executed completion decision commit 
root server begins triple store persistence remember aborts possible time commit point 
commit transaction abort transaction methods mark transaction appropriately care disk changes freeing underlying resource parts system may 
method may throw 
jdbcstore implementation thrown commit abort throws java jdbc layer 
commit abort method completes underlying resource transaction freed 
implicit transaction handle transaction open thread instance 
explicit transaction handle longer valid resource attached handle released 
execute transaction statement commence transaction 
need explicit recovery procedure triple store module 
state meaningless commit commits permanent 
intent triple store safely fail time 
recovery implicitly handled underlying database jdbcstore 
flexible graph haystack mentioned earlier requirements persistent storage interface provide exible layer haystack data model 
triple store interface permits model 
graph represent ordered triples 
concept structure described terms triples 
graph may updated deletion insertion triples literals 
haystack migrated triple store back objects hdm stored triples 
ties needles serialize states terms series triples 
saving objects disk mean saving triples representing state 
contents needles saved storing retrieving arbitrary bits 
update concept triple store update procedures haystack 
updates achieved erasing piece information replacing 
keeping immutable constructor instantiates triple store implementation init initializes triple store transaction commences transaction commit transaction commits open transaction abort transaction aborts open transaction put assertion puts subject object predicate assertion put bits puts collection bits get subject gets subject uri assertion get predicate gets predicate uri assertion get object gets object uri assertion get bits gets bits associated literal uri get literal uri gets local uri literal get assertions subject gets assertions speci ed subject get assertions predicate gets assertions speci ed predicate get assertions object gets assertions speci ed object get assertions gets assertions contains uri tests uri occurrence uri close closes triple store cleans namespace triple store method list nature data haystack ir tool 
particular literal changes state longer entity 
triplestore interface triplestore interface currently supports methods 
list encompasses functionality triple store 
type system de ned expect client de ne rdf type system 
resources simply referred uri triple store methods 
currently ways access triple store interface directly java methods class implements triplestore interface remotely set commands registered command api 
methods init close implemented comply guidelines dynamically loadable modules speci ed haystack trust model chapter 
methods transaction commit transaction abort transaction discussed 
turn methods may modify contents disk 
include put assertion put bits 
put assertion command takes ordered list uris representing resources creates triple triple store assertion 
return type method uri identifying assertion resource just created 
put bits command takes arbitrary set bits stores triple store 
put bits returns uri identifying resource maps directly bit set 
haystack java process collection bits arbitrary object stored disk serializing object writing bits sequentially 
returning bits corresponds object 
performs search destroy database uri 
uri refers literal literal removed 
uri refers assertion assertion removed 
assertion refers uri 
recommended purposes rdf model programmer sure rami cations uri 
read methods available triple store 
include get subject get predicate get object get bits get uri get assertions subject get assertions predicate get assertions object get assertions contains uri 
get subject predicate predicate method simply returns uri subject predicate object assertion argument 
get bits operation retrieves bit string resource disk form object 
get literal uri method gets triple store uri input literal object 
get assertions subject predicate object method gets enumeration assertion speci ed resource subject predicate object 
get assertions retrieve enumeration assertion triple store 
contains uri simply searches entire triple store occurrence resource speci ed 
returns true resource referred triple store 
uri place assertion subject predicate object resources identi ed uri 
type system written resource model refer resource just uri identi er 
triple store client may choose store resources type system model 
important note triple store interface provides means outside entity create new uri namespace 
triple store controls uri space 
way new local uri created adding literals assertions 
contrast may remote uris triple store assertions 
model traced back literal local model remote rdf repository 
better understanding rdf triple stores triple store helps clients record state uniformly 
argued rdf description section client follows rdf model store meaning state metadata 
rdf powerful allow arbitrary agents understand rdf model translate arbitrary domain knowledge terms understand 
looking domain ontologies foreign rdf model refers 
translate ontologies rdf schema arbitrary agent understand 
features may helpful collaborating 
uniform api storing rdf models haystack ir tool wishes eventually understand data data stored foreign rdf applications 
triple store wellsuited storing rdf models capabilities feasible haystack uses triple store 
building rdf triple store require 
eventually haystack ir tool store data model triple store haystack ontology 
refer context model namespace rdf schema instance storing uri literals 
put uris resources classes properties schema model adding statements de ne haystack ontology 
may wish refer uris separate useful rdf ontologies 
order add assertions triple store recognize triple store controls local uri namespace 
local uri stored triple store 
create new local uris adding assertions literals 
literals stored bits local uri created returned client assertions 
foreign uris statements 
client start creating rdf statements uris put assertion command 
introduce triple store small level indirection literals rst referred local resource creating statements 
refer literal local uri identi er 
consistent haystack data model 
straw associated eventually replaced uri 
needles contain arbitrary bit strings 
needles require literals require uris 
indirection break rdf model reduces namespace collisions 
monotonically increasing counter generate uris triple store 
alternative approach md hashes determine uris 
literal uri md hash bit string 
assertion uri md hash concatenation uris subject predicate object 
literals guaranteed bit string resolve uri indistinguishable bitwise equivalent bit strings 
chance distinct bit strings map uri strategy negligible 
disadvantage approach stating assertion add model uri refer original new statement 
may want state assertion times evidence accumulation strategy rdf application stating assertion multiple times believable 
rei ed statements rdf write statement ordered sequence subject predicate object resources rei ed statement 
rei ed statement statement resource restriction creation resource rdf subject predicate subject object rdf predicate predicate predicate object 
rei ed statement attach properties statement resource give context 
triple store automatically rei es statements returning uri identi er statements creation 
implicitly methods get subject rdf subject predicate associated subject object attached statement 
triplestore ways triple store interface methods 
simple way directly java method calls 
way remote access 
directly java run instance triple store locally instantiate jdbcstore implementation call init method 
triple store module methods 
concrete java forms methods de ned triplestore interface similar java method names arguments return types 
explicit transaction handle handle correct triple store 
implicit transaction handle sure transaction open current thread instance 
exceptions caught decide abort transaction 
close triple store call close method 
remotely middlemen remote access currently accomplished creating jdbcstore con gured middleman communication architecture 
con guration done providing appropriate port number jdbcstore constructor 
jdbcstore runs middleman server inside namespace wait client connections 
client connections generic client triple store speci default settings 
client running interactive command line communicate triple store 
triple store client currently provide authentication log jdbcstore remotely 
send encrypted string commands triple store server 
commands received server side perform appropriate put get methods returning results client 
understanding triple store interface works important module 
order improve problems module examine implementation 
chapter describes high level components jdbcstore module controller ful ll tasks required triple store 
chapter triplestore triplestore interface implemented jdbcstore class 
provide insight inner machinery jdbcstore 
focus high level components module discuss design actual java code 
architecture parts module rely capabilities java programming particularly rules access privileges background java helpful understanding chapter 
reader may wish consult java guide 
chapter describes implementation triple store variations possible 
implementations adhere triplestore interface de ned chapter 
jdbcstore uses communications implementation described previous chapter 
jdbcstore server remote 
sets basic command terminal access jdbcstore directly 
jdbcstore constructor initialization methods described detail 
discuss mechanisms triple store transaction contract 
brief description uris follows 
describe structure database tables underlying database 
sample put get method shown representatives jdbcstore implementation triple store methods 
conclude note way jdbcstore module shuts 
preparing jdbcstore module con guration jdbcstore instance set argument constructor default constructor read global con utility 
parameters may set include driver name database url name user name log database middleman server port 
driver name identi es jdbc driver 
di erent vendor database simply indicate di erent driver load 
driver available java virtual machine classpath 
database url unique identi er database jdbc connect 
database running url 
data block name indicates name desired database partition connect 
appended database name create illusion multiple connect di erent databases requiring administrative con gurations 
internally append name database table names sequence identi ers 
database di erent di erent data block names deal disjoint set tables sequences 
data member concatenation database url name uniquely identi es triple store repository working 
user name log database 
password secret decrypted le haystack security package 
jdbcstore connects username haystack wide password 
database running speci ed url allow user name password login appropriate table permissions 
middleman con gurations indicate want particular jdbcstore listen port remote connections 
port may argument constructor read con utility defaults 
newly instantiated triple store initialize 
separate instantiation initialization consistent rest haystack 
done relatively cases done particular order obey dependencies utilities 
initializing jdbcstore rst loads jdbc driver attempts create series database connections connection pool described section con gured url user name password 
connections con gured multi statement transactions transaction serializable isolation level 
transaction serializable isolation provides strictest level isolation helps ensure isolation data values disk multithreaded application 
internal method invoked test existence database tables sequences connections interact 
exist created 
continue initialization explicitly loading triple store speci utilities 
implicitly load set classes con gured con utility defaults 
implicitly loaded utility real triple store command api 
java re ection instantiate classes module namespace giving namespace key 
module con gured allow remote connections establish connection listen remote clients appropriate port 
ask name utility initialize initializes registered utilities 
transactions inner class manages database connections jdbcstore transactions 
transaction opened binding connection instance thread local variable client 
internally binding created triple store transaction methods invoked 
hides transaction instance thread returns client 
connection re source remains commit abort executed transaction resource released associated 
releasing connection transaction handle instance renders handle stale useless 
internally manages binding releasing connections list free resources 
methods grab release execute operations respectively 
obtain lock connection pool object manipulating resource lists 
lock prevents situations updates resource lists collide 
recall problems isolation occur absence locks 
established way binding actual jdbc connections transactions depend jdbc driver handle transactions 
transactions implicitly open jdbc connections 
grab release methods ensure statements executed connection time commit abort connection time new binding 
just sure jdbcstore commit abort methods call connection commit abort methods respectively just prior releasing resource 
transactions ectively transaction call commit abort call desired 
basic put get operations attempted particular jdbcstore instance transaction handle validated 
validate transaction handles verify underlying database connection exists read write assertions literals instance namespace 
method implicit transaction method just validate instance thread local connection 
certain level security enforced explicit transaction handles private inner class jdbcstore private inner classes may instantiated externally 
return transaction handles outside jdbcstore protect ability invalid handles obtained di erent instances 
check transaction handle user name connect database jdbcstore instance 
transaction validation error throws 
important feature allows disjoint triple store repositories come database user name 
jdbcstore namespace concatenation actual database name 
just de nes disjoint set tables database 
transaction handles database username connections identical capabilities di erent 
provide ability transaction handles case haystack research project needs multiple disjoint database tables 
transaction handles di erent jdbcstore instances prevents having write nested transaction wrapper perform series subtransactions 
diculty writing nested transaction provide ability abort containing subtransactions nested transaction commits 
subtransactions commit exactly time transaction wrappers prepared undo committed subtransactions 
nested transaction undo committed subtransaction persistently logged ability completely undo subtransaction 
fortunately rely transactions provided database jdbc driver 
uris uris uniquely identify resources jdbcstore model 
local uris maintained internally jdbcstore manages uri space 
private inner class required refer jdbcstore local uris 
way get pointer obtain jdbcstore method call 
may created haystack application 
transaction handles verify uris allowing jdbcstore put get method continue 
want ensure jdbcstore generated uris refer local uri namespace 
violating constraint break rdf model allowing clients attach assertions local uri assigned jdbcstore 
jdbcstore manages local uri namespace 
veri ed sure identical 
veri ed sure refers resource outside local uri namespace 
internally just followed numeric identi er 
time new resource stored triple store unique numeric identi er corresponding value sequence database 
value available identi er determined persistently database jdbcstore private method nextid 
may string identify resource outside particular jdbcstore uri namespace 
public constructor allows clients instantiate objects referring remote uris 
jdbcstore manages local uri namespace may start jdbcstore stored 
database tables jdbcstore implementation uses jdbc connectivity 
jdbc supports sql standard table creation basic relational database put get operations described section 
getting speci description triplestore method implemented just database table structure 
database tables standard jdbcstore instance 
provide walkthrough tables sample jdbcstore put get method sections 
omitted suxes table names discussion database tables 
jdbcstore instances working database di erent di erent table suxes 
database table schema jdbcstore 
id sequence table just increasing sequence creation new local uris jdbcstore 
object literals table store serialization arbitrary objects disk 
string literals table special storage java strings 
public methods object literals string literals tables depending literal arbitrary object string 
rdf assertions table stores rei ed rdf triples 
storing literals methods deal triple store literals object literals string literals tables 
methods include put bits get bits get literal uri 
guaranteed arbitrary java objects equivalent state serialize exact set bits database 
support storage arbitrary objects keep object literals table 
create special case character string objects store string literals table 
way store character string objects convert byte strings compute md ngerprint entire character sequence 
store ngerprint string literal 
retrieve string literal searching md ngerprints 
md functionally serve uri exposed jdbcstore client 
databases di er way handle binary large objects blobs 
example postgresql oid refer blob 
database table stores blob oid column stores increasing internal identi er blob 
store identical blob twice di erent oid time 
object literals table bits id select byte stream serialization blob 
serialized blob directly select key storing table blob byte stream di erent oid 
object literals table comprised bits id bits column 
bits id new literal obtained id sequence represents uri local triple store repository 
bits column stores binary large object id sequence object literals bits id bits string literals string id md literal rdf assertions assertion id subject predicate object jdbcstore database table structure representation serialized bits 
databases di er way handle blobs searching column get literal uri command may fail return uri equivalent saved input literal object 
put bits get bits operations behave expected objects may serialized storage 
string literals table string id md literal object 
mentioned table storage retrieval string literals 
string id column serves purpose bits id column object literals table 
contains new id obtained id sequence insertion time local uri 
md column contains md hash string literal character sequence 
column searching get literal uri command obtain internal uri string literal 
put bits get bits operations allow store retrieve bits string literal literal column 
literal column saves string serialization binary large object create equivalent string literal object 
rdf assertions jdbcstore rdf assertions table stores descriptive rdf metadata 
rdf assertion takes form shown implicitly rei ed give client ability attach properties statement 
local rdf assertion jdbcstore may contain combination local remote subject predicate object 
rst column assertion id local uri refer statement stored database column 
local uris new assertions obtained way bits id string id columns literals tables available id id sequence 
subject predicate object column contains local remote uri passed jdbcstore uri restrictions 
bulk triple store methods read write rdf assertions metadata table 
table lls rdf model jdbcstore complex 
believe metadata literals sucient store haystack data model persistently disk 
sample put available jdbcstore put operations similar implementations 
look method case transaction implicitly open instance thread 
operation takes input subject predicate object arguments 
correspond rdf notions subject predicate object triple 
ect method add new assertion triple store 
similar methods appear slightly di erent contexts private helper methods handle di erent possibilities 
case call private method appropriate jdbc connection object 
implicit transactions connection just retrieved thread local variable 
private method rst validates connection validates input uris 
create unique identi er new assertion calling nextid obtain available id id sequence 
retrieve prepared statement jdbc connection insert row rdf assertions table sql insert method 
set assertion id uri local uri namespace appropriate new numeric identi er 
subject predicate object column values set input uris 
combination local remote resources may assertion long uris passed veri cation 
return new assertion id environment called put assertion command 
goes wrong creation execution method throw 
sample get example get operation look method explicit transaction handle 
method takes uri assertion returns subject uri 
validate transaction handle retrieve connection transaction handle 
call private helper method argument indicating interested subject column 
method rst validates connection extracted transaction handle validates assertion uri argument 
create prepared statement run database get operation uri input 
sql select statement ask subject appropriate row rdf assertions table 
subject may local uri remote uri 
assertion appropriate returned client 
goes wrong execution throw 
server client shuts jdbcstore shut calling close method 
close rst closes connection pool iterates connections attempts close individually 
multiple threads connection connection closed way reopen 
client call close method wants completely shut module threads 
step close middleman server exists 
jdbcstore closes namespace 
return error messages encountered closing resources 
remote closes way 
closes middleman command terminal 
closes namespace 
return error messages 
chapter investigation chapter ideas improvements triple store interface jdbcstore implementation 
ways haystack trust model improved 
alternative way store serializable objects arbitrary objects equal internal states serialize di erent bits underlying database jdbcstore binary large objects handled databases 
consider case want get uri object state bits 
current serialization model jdbcstore deserialize entry object literals table compare objects see equal 
currently compare serialization bits bits column nd uri object literal 
cost entire object literals table postgresql oids prohibitively expensive 
better allow database check table bit string directly recreating object 
md hash ngerprint java string objects type database selection 
similar technique introduced ngerprint literals object literals table may searched md hashes 
close namespace properly discussing way namespaces haystack trust model closed overlook small detail 
module asks name utility close name utility turn closes registered including remove list existing namespaces 
improve modularity resources module freed including pointer name utility list 
add local triple store command line currently jdbcstore command line runs remotely 
simple change allow command line run locally 
instance exact command line class local remote versions function identically local command line asks command api gets real remote command line gets virtual 
change may easy adding instance existing haystack ts jdbcstore server 
add jdbcstore caches places jdbcstore aware memory usage 
bits literal cached really large bit bins deserialize object store local cache 
currently deserialize literal objects time needed 
fix broken connections jdbcstore implementation currently provide means repairing connection breaks 
pose problem especially keep connections breaking left 
ability repair jdbc connections database backend useful improvement 
prevent hanging connections try initialize jdbc connection backend database connection hangs created 
absolutely need connection particular database order useful current situation may okay 
probably sort timeout period connection attempts hang limited time haystack tries nd task perform displays errors user exit 
find exception commit abort means meaning jdbc commit abort useful know 
meaning ect triple store interface transaction contract 
may suce client abort transaction 
discover information sent wire jdbc connections encrypted clear communication jdbc backend database server encrypted 
system probably acceptable security protocol 
explore possible options include encryption 
answer question may depend implementation database vendor jdbc driver 
ensure jdbcstore run di erent backends part reason jdbc permits connections different database backends tested jdbcstore implementation postgresql database 
may statements executed database speci jdbcstore connects di erent database 
anticipated problem area binary large object storage inconsistencies databases 
test jdbcstore di erent databases 
recall databases administratively con gured connectivity haystack username password discussed section 
find driver doesn appear change transaction isolation levels speci problem observed postgresql jdbc driver test jdbcstore 
documentation postgresql supports transaction serializable jdbc isolation level 
numerical value isolation level jdbc connection postgresql appear change call appropriate methods reset connection isolation level 
improvement gure 
discover postgresql driver really support feature may change database backends 
improve modularity order improve modularity services decoupled root server 
move non root server dependent services set utilities modules 
migration name service name utility web trust bene cial 
switching name utility protect services accessed outside root server module 
fixing problem services time consuming services 
haystack triple store root server eventually triple stores persistent storage uses 
change require de ning haystack rdf ontology ensure writing valid rdf triple stores putting haystack data model objects triple stores 
sharing information haystack migrated triple store thinking things xml serializations user haystack haystack understand 
established start social aspect sharing information repositories colleagues 
chapter dynamic robust backend solution problem persistence haystack project 
backend soundly help ensure haystack reliable data storage tool 
migrating haystack triple stores raise data application modelling issues 
steps taken de ning haystack ontology 
ontology allow haystack better understand context data simplifying collaboration 
haystack incorporating foreign rdf information repositories knowledge base 
expert system emerge caters user personalized haystack search natural extension human thought 
lessons learned designing implementing triple store 
software module clearly de ned requirements tough develop 
dicult create backend module exible legacy system 
creating backend run inside legacy system poses challenge 
backend uses relatively new technology rdf designing storage module dicult systems exist technology 
incorrectly documented third party systems arduous task 
hope problems solved lessons learned thesis improve haystack project 
triple store meets necessary requirements haystack improvements useful 
haystack triple store interface robust existing persistence layer 
exible uniform triple store haystack metadata easily understandable useful 
appendix rdf formal grammar formal rdf grammar 
table taken section 
included 
reader encouraged read descriptions source clari cation 
rdf obj obj description container description container sequence bag alternative id uri uri string string embedded quotes escaped type uri value literal typename value obj string resource uri name uri string interpreted uri legal xml name symbol name legal xml name symbol legal xml namespace pre string xml text escaped sequence member bag member alternative member member value literal rdf string integer parsetype literal parsetype resource literal formed xml formal grammar rdf appendix rdf schema copy xml serialization rdf schema may help understanding rdf type system 
namespace uri rdf schema speci cation change versions speci cation schema changes 
rdf schema includes annotations describing rdf resources de ned formally rdf model syntax speci cation de nitions new resources belonging rdf schema namespace 
xmlns rdf www org rdf syntax ns xmlns rdfs www org rdf schema rdf id resource xml lang en resource xml lang fr general class xml serialization rdf schema www org rdf syntax ns type xml lang en type xml lang fr type indicates membership class rdf resource class id comment xml lang en comment xml lang fr rdf resource resource descriptions rdf resource literal id label resource www org rdf syntax ns property xml lang en label xml lang fr label rdf resource resource provides human readable version resource name 
rdf resource literal rdf id class xml lang en class xml lang fr concept class rdf resource resource id subclassof xml lang en subclassof xml lang fr indicates membership class rdf resource class rdf resource class xml serialization rdf schema id subpropertyof xml lang en subpropertyof xml lang fr indicates specialization properties property property id seealso xml lang en seealso xml lang fr indicates resource provides information subject resource 
rdf resource www org rdf schema resource rdf resource www org rdf schema resource id resource www org rdf syntax ns property rdf resource seealso xml lang en xml lang fr esd indicates resource containing de ning subject resource 
rdf resource www org rdf schema resource rdf resource www org rdf schema resource rdf id constraintresource xml lang en constraintresource xml lang fr resource class rdf resource resource resources express rdf schema constraints 
xml serialization rdf schema rdf id constraintproperty xml lang en constraintproperty xml lang fr property rdf resource constraintresource properties express rdf schema constraints 
rdf id domain xml lang en domain xml lang fr domaine associate class properties instances rdf id range xml lang en range xml lang fr properties schema provide constraints rdf resource class property rdf www org rdf syntax ns property xml lang en property xml lang fr concept property 
rdf resource resource rdf id literal xml lang en literal xml lang fr resource class represents set atomic values 
textual strings 
xml serialization rdf schema statement xml lang en statement xml lang fr rdf resource resource represents set rei ed statements 
www org rdf syntax ns subject xml lang en subject xml lang fr statement rdf resource resource www org rdf syntax ns predicate xml lang en predicate xml lang fr resource www org rdf syntax ns property statement property www org rdf syntax ns object xml lang en object xml lang fr objet statement rdf id container xml lang en container xml lang fr rdf resource resource represents set containers 
xml serialization rdf schema rdf www org rdf syntax ns bag xml lang en bag xml lang fr ensemble rdf resource container rdf www org rdf syntax ns seq xml lang en sequence xml lang fr rdf resource container rdf www org rdf syntax ns alt xml lang en alt xml lang fr rdf resource container rdf id xml lang en property rdf www org rdf syntax ns value xml lang en object xml lang fr value xml serialization rdf schema appendix glossary haystack terminology part triple store package indicates problem executing method underlying database part transaction 
usual course action triple store abort transaction 
archive command command stores new information user haystack 
archiving processes recording new documents resources retrieval 
backup service service takes periodic snapshot user haystack 
intent user revert old snapshot haystack corrupted 
special type straw represents collection 
add metadata entire collection attaching 
command api interface registering invoking commands module 
command api architecture root server triple store modules 
command line text user interface parses inputs terminal outputs results 
command lines exist root server triple store modules 
con service service manages con gurations root server 
con utility utility manages global con gurations intended serve defaults instantiation new modules 
con utility currently identical con service run outside root server 
global con utility currently essential creating running triple store 
core services services root server services may depend 
assumption service core services 
haystack data model hdm fundamental data objects haystack ir tool 
haystack service model hsm model dynamically loadable services running haystack perform di erent tasks 
haystack trust model htm enhancement haystack service model introduces concept utilities 
focus htm maintaining modularity reusability code 
identi er refers straw haystack data model 
java class root service hierarchy 
service referred semantic service name description 
jdbcstore java implementation triple store module 
jdbcstore connects database java database connectivity api 
kernel module limits access critical data haystack ir tool 
examples critical data haystack data model elements transaction handles modi cation disk data 
transactions currently turned kernel 
modi cation kernel may restrict access triple store transaction handles 
root server currently protects important data pointers module 
middleman client form remote communication haystack 
uses security objects authenticate encrypt dialogue 
middleman service created root server utility created triple store 
server form remote communication haystack 
uses security objects authenticate encrypt dialogues middlemen connect 
service created root server utility created triple store 
name service service services initialize communication 
name service dynamically register load services 
allows services talk semantic service name descriptions 
name service stores information services loaded persistently disk 
name service root server namespace 
may accessed haystack process 
name utility utility utilities initialize communication 
name utility dynamically register load utilities 
name utility web trust privileged utilities talk semantic utility name descriptions 
name utility arbitrary module namespace 
global name utility may accessed haystack process module speci name utility accessed privileged utilities 
java class root utility hierarchy 
named utility utility referred semantic utility name description 
needle needle special type straw contains unprocessed data collections bits 
text document constitute kind needle 
persistent hashtable existing persistent interface disk root server uses store data model 
persistent hashtable stores key value pairs 
query service service processes queries attempts generate suitable result sets 
real belonging server side 
typically real services utilities perform actual virtual counterparts request 
root server information retrieval module haystack project 
eventually anticipate root server triple store persistent interface store data model 
service entity runs root server aid information retrieval purpose 
services run root server 
instances restricted uniqueness haystack process 
service name semantic description service 
currently comprised character strings descriptions 
straw straw root haystack data model hierarchy 
data model objects 
straw unique refers 
tie tie special type straw forms labelled directed edge straw 
ties basic relational entities haystack data model objects connect constitute assertion 
exception indicates attempt invalid handle absence transaction speci ed thread instance triple store 
java interface refers transaction handle triple store 
transaction handle may series actions triple store appear atomic action 
triple store module stores information disk form ordered triples ering transaction contract provide persistence properly 
triple called assertion 
triplestore java interface triple store module 
java implementation remote triple store client 
currently remote client just connect run simple commands server side 
uri java interface refers resource triple store 
uris refer resources triple store way haystack data model 
utility entity instances running di erent modules concurrently 
compare notion service 
utility name semantic description utility 
currently comprised character strings anticipate descriptions 
similar service name created name utility 
virtual belonging client side 
typically virtual services utilities real counterpart actual relayed 
bibliography harold abelson gerald jay sussman julie sussman 
structure interpretation computer programs section pages 
mit press mcgraw hill companies cambridge ma second edition 
adar 
hybrid search storage semi structured information 
master thesis massachusetts institute technology department electrical engineering computer science may 
mark 
data manipulation services haystack ir system 
master thesis massachusetts institute technology department electrical engineering computer science may 
krishna bharat 
explicit capture search context support web search 
www org cdrom html 
bert boss 
xml points 
technical report www org xml xml points march 
budzik hammond 
user interactions everyday applications context just time information access 
proceedings international conference intelligent user interfaces 
oracle 
oracle server sql release 
www com ora doc doc server toc htm 
dominic 
versioning layer haystack 
master thesis proposal massachusetts institute technology department electrical engineering computer science february 
david flanagan 
java nutshell 
java series 
reilly associates sebastopol ca third edition november 
jim gray andreas reuter 
transaction processing concepts techniques 
morgan kaufmann series data management 
morgan kaufman publishers san francisco ca 
philip 
sql web 
photo net sql 
philip 
philip alex guide web publishing chapter pages 
morgan kaufmann publishers san francisco ca 
postgresql global development group 
postgresql 
open source project links mirrors www postgresql org www mirror postgresql com 
xml working group special interest group metadata activity 
namespaces xml 
technical report www org tr rec xml names january 
rdf schema working group 
resource description framework rdf schema speci cation 
technical report www org tr cr rdf schema march 
xml core working group 
extensible markup language xml second edition 
technical report www org tr rec xml october 
marti hearst 
generation web search setting sites 
bulletin ieee computer society technical committee data engineering 
www research microsoft com research db sept hearst ps 
int media group incorporated 
ftp de nition links 
www com term ftp html 
daniel lee sebastian seung 
learning parts objects non negative matrix factorization 
nature october 
christopher locke 
accelerating better search engine 
red herring march 
www herring com index asp layout story channel doc id 
low 
folder implementation graphical interface information retrieval system 
master thesis massachusetts institute technology department electrical engineering computer science may 
lynn andrea stein 
annotated daml ontology markup 
technical report daml www daml org daml walkthru october 
kenneth mccracken 
dynamic robust data storage retrieval haystack system 
master thesis proposal massachusetts institute technology department electrical engineering computer science may 
mcgill salton 
modern information retrieval 
mcgraw hill new york ny 
sun microsystems 
jdbc data access api 
java sun com products jdbc index html 
rdf model syntax working group 
resource description framework rdf model syntax speci cation 
technical report www org tr rec rdf syntax february 
peter mount 
postgresql jdbc driver 
open source project jdbc postgresql org 
mit department electrical engineering computer science 
draft chapter atomicity april 
frans kaashoek taught course term notes distributed 
george reese 
database programming jdbc tm java tm 
java tm series 
reilly associates sebastopol ca second edition august 
jdbc java trademarks sun microsystems michael stonebraker 
object relational dbms wave 
db cs berkeley edu papers informix www informix com informix wave htm 
danny sullivan 
search boxed death 
search engine report march 
searchenginewatch com boxed html 
sun microsystems 
java platform standard edition 
java sun com products jdk docs api java sql 
html 
sun microsystems 
java tutorial 
java sun com docs books tutorial 
jaime 
improving information retrieval textual analysis bayesian models 
master thesis massachusetts institute technology department electrical engineering computer science may 
quass william cohen andrew mccallum 
learning understand web 
bulletin ieee computer society technical committee data engineering 
www research microsoft com db sept cohen ps 

