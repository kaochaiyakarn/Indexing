ieee transactions software engineering vol 
xx 
month state transition analysis rule intrusion detection approach ilgun richard fellow ieee phillip porras presents new approach representing detecting computer penetrations real time 
approach called state transition analysis models penetrations series state changes lead initial secure state target compromised state 
state transition diagrams graphical representation penetrations identify precisely requirements compromise penetration critical events occur successful completion penetration 
state transition diagrams written correspond states actual computer system diagrams form basis rule expert system detecting penetrations called state transition analysis tool stat 
design implementation unix specific prototype expert system called ustat 
prototype provides illustration design functionality intrusion detection approach 
lastly stat compared functionality comparable intrusion detection tools 
keywords security intrusion detection expert systems ver past decade significant progress improvement computer system security 
unfortunately undeniable reality remains computers vulnerable compromise 
sys tems vulnerable attacks non authorized users outsider attacks attacks authorized users abuse privileges insider attacks 
reality need user accountability important deterrent terminating abusive computer usage discovered 
need main rain record transactions occurred system crucial performing damage assessment 
recognition needs recognition security violations fact life computer systems implement form transaction record keeping called audit collection 
audit collection important management tool allows administrators reconstruct examine sequences actions performed individual users 
ability utilize audit data means detecting system compromises limited research partially supported national computer security center mda 
ilgun advanced computer communications drive santa barbara ca usa acc com 
kemmerer reliable software group department computer science university california santa barbara ca usa cs ucsb edu 
porras aerospace box mail los angeles ca usa porras aero org extended version previous conference papers authors :10.1.1.17.9158
due enormous quantity data collected 
order provide information establish accountability enable damage assessment audit collection mechanisms record occurrences security relevant events 
large volume data generated manual analysis audit data usually impractical 
past years steadily growing interest research development automated audit data analysis tools referred intrusion detection systems 
tools aid analysts identifying security violations gone unnoticed provide practical means analyzing audit data efficiently 
addition intrusion detection provides added value audit data realized manual analysis 
performed realtime intrusion detection audit data track user behavior determine user current actions represent threat security 
reliable software group ucsb developed new approach representing computer penetrations applied approach development real time expert system intrusion detection tool 
approach called state transition analysis method representing sequence actions attacker performs achieve security violation 
state transition diagram graphical representation state transition analysis technique uses represent penetration identifies precisely requirements compromise penetration lists critical events occur successful completion penetration 
information contained system audit trail input analysis tool developed compare state changes produced user state transition diagrams known penetrations 
section presents brief overview current intrusion detection techniques identifying state transition analysis approach relates approaches 
section iii introduces state transition approach technique representing computer penetrations 
introduces design real time intrusion detection tool stat state transition analysis technique 
section iv unix specific prototype implementation stat called ustat discussed 
section discusses benefits costs associated stat comparing functionality comparable intrusion general term security relevant left open inte 
respect trusted computer systems evaluation criteria security relevant event defined event attempts change security state system changing security level user changing user password 
ieee transactions software engineering vol 
xx 
month detection tools section ii 
section vi discusses directions project 
lastly section vii concludes summary key points 
ii 
current approaches intrusion detection steadily growing interest research development intrusion detection systems 
surveys implemented intrusion detection systems operation today examples actual competitive assessments intrusion detection systems technical reports navy air force 
section surveys various approaches intrusion detection gives examples currently available tools employ approaches 
intrusion detection approach stands catch computer penetrations approach technically suited identify subset security violations computer system subject 
intent section give brief overview current intrusion detection techniques better identify state transition analysis approach fits general scheme things 
understanding strengths limitations approaches provide reader point understanding benefits tradeoffs approach 
threshold detection threshold detection summary statistics rudimentary forms intrusion detection 
goal threshold detection record occurrence specific event name implies detect number occurrences event surpass reasonable amount expect occur specified time period 
events recorded high number occurrences short period time may indicate presence intruder 
threshold number occurrences surpassed threshold detector option preempt source event possible notify site security officer sso 
implementing threshold detector obvious difficulty identifying threshold number window size specific event 
threshold number time interval analysis depend security relevance event monitored historical number occurrences 
choice values left discretion sso 
example type events monitored threshold detection number failed logins number errors number file deletions 
remote connection audit trails provide profitable area employ threshold analysis 
systems may install threshold detectors track unusually large data transfers accesses remote sites 
threshold analysis poor detector intrusions usually implemented sub component larger intrusion detection system 
intrusion detection threshold detection subcomponent multics intrusion detection alerting system midas network anomaly detection intrusion reporter nadir 
midas real time sion detection tool operating national computer security center ncsc network mainframe ter 
nadir real time audit data analysis tool developed los alamos national laboratory 
anomaly detection anomaly detection earliest approaches detection 
statistical rule forms anomaly detection implemented years 
premise anomaly detection introduced anderson report identified classes malicious users masquerader individual penetrates computer access controls exploit legitimate user account legitimate user participates illicit activity computer user individual supervisory control computer uses control operate level audit collection suppress audit collection altogether anderson report proposed masqueraders cases detected monitoring system audit log user activity deviates established patterns usage 
objective anomaly detection establish usage patterns user audit trails duration time usage patterns profiles normal system activity 
audit trail deviate user established usage pattern flagged brought attention sso 
anomalous sessions may potentially reveal masquerader legitimate user abus ing privileges 
main advantage anomaly detection provides means detecting intrusions priori knowledge security flaws target system 
approach requires system dependent rules statistical formulas making tools employ anomaly detection highly portable 
primary types anomaly detection statistical profile rule 
profile anomaly detection uses statistical measures identify expected behavior 
contrast rulebased anomaly detection uses sets rules represent store usage patterns audit data statis tical formulas 
denning neumann detailed dis statistical profile anomaly detection 
best known statistical profile anomaly detection system intrusion detection expert system ides 
profile anomaly com ponent system identifies expected behavior longer duration accurate study 
state transition analysis tool intrusion detection user group remote host target system levels 
depth discussion ides reader referred 
example intrusion detection implementations employ rule anomaly detection wisdom sense time inductive machine tim approach 
neural network anomaly detection proposed 
anomaly detection limitations 
environments may difficult establish behavior patterns users 
example sporadic user environments establishing profiles normal user behavior difficult 
leads potentially large number false positives 
recognition problem anomaly detection tools provide parameters decrease sensitivity certain anomalies maintaining sensitivity identify penetrations 
fine tuning difficult process ad hoc aspects approach 
penetrations compromise system produce identifiable anomaly produce anomalies sensitivity levels configuration parameters 
rate penetrations missed referred false negative rate just significant false positive rate 
counter limitations intrusion detection systems employ anomaly detection supplement detection capabilities expert rules identifying known tions 
rule penetration identification rule penetration identification system expert system rules fire audit records parsed appear indicate suspicious illegal user activity 
rules may recognize single events represent significant danger system may recognize sequence events represent entire penetration scenario 
rule penetration identifiers common supplemental component intrusion detection systems employ anomaly detection components 
expert rules offer additional capability identifying dubious behavior behavior appears conform established patterns 
examples intrusion detection implementations supplement anomaly detection components expert penetration rules include ides nadir ides rule base component allows represent suspicious behavior site specific security policies known security flaws knowledge past sions 
ides expert system component evaluates audit records produced 
perspective expert system audit records viewed facts map rules rule base 
binding analysis performed determine fact rule binding consis tent 
expert system verifies certain fields audit record match expected rule 
rule consequent fired increasing suspicion rating user responsible record 
user suspicion rating starts zero increased suspicious record 
greater number rules fired greater increase suspicion rating 
suspicion rating surpasses pre defined threshold report produced 
ides anomaly detection component combination ides penetration identifier rulebase provides way learning representing normal behavior way representing improper behavior 
form complementary pair analysis tools provide coverage identifying 
wisdom sense ws nadir examples intrusion detection systems combine anomaly detection penetration identification 
case ws anomaly detection component implemented rule base 
system penetration detection component combined rule base represent site specific policies expert penetration rules administrative data 
nadir implementation similar ides employs statistical anomaly component conjunction small rule base expert penetration rules 
nadir expert rule base consists penetration rules developed interviewing working security personnel 
model intrusion detection model intrusion detection attempts model intrusions higher level abstraction audit records 
objective build scenario models represent characteristic behavior intrusions 
allows generate representation penetration abstractly shifts burden determining audit records part suspect sequence expert system 
model techniques differ current rulebased techniques simply attempt pattern match audit records expert rules 
model technique proposed garvey lunt supports abstraction penetrations reasoning tool called 
goal tool evaluate pieces evidence hypothesis effort build confidence measure hypothesis 
evidence discerned audit trail indicate activity represented scenario model performed model added set active models 
active models increase decrease belief measure penetration occurring witnessing intruder session intrusion prevention search analysis tools aid protection secure computing systems limited development intrusion detection systems 
practical tools preventing intrusions developed 
notable prevention tool computer oracle password security system cops developed farmer trademark sri international 
ieee vol 
xx 
month ford 
cops designed aid unix system tors testing configurations common weaknesses exploited intruders 
cops collection shell scripts programs search identify myriad security holes commonly unix systems 
cops calls attention administrator critical areas neglected misunderstood 
optimally cops helps educate novice administrators problem areas looking systems may catch mistakes experienced administrators 
intrusion prevention tools developed detect prevent execution computer viruses trojan horses 
just viruses created various computer systems code analysis tools created identify cases remove viruses 
provide example virus detection tools unix 
gligor proposed intrusion detection system provides means track virus propagation 
limitations existing approaches state transition analysis approach rule penetration identification approach 
seeks improve limitations authors observed current rule penetration identification tools 
section briefly identifies inherent characteristics limit effectiveness cur rent rule penetration identification tools state transition analysis technique designed address 
major weakness current rule penetration identification tools direct dependence audit record fields 
current systems rule bases represent expected audit trails penetrations tools essentially pattern match bind rules knowledgebase audit records 
unfortunately little flexibility rule audit record repre sentation 
instance penetration scenario may slight variations penetration produce different audit record sequences 
scenario represented rule base minor variation scenario go unnoticed 
solution improving flexibility expert system ability identify penetration scenarios higher level repre sentations scenarios rule base scenario representations audit record independent 
limitation current penetration identification expert systems inability foresee impending compromise preempt limit damage occurs 
best current penetration identification systems report compromises reached take measures terminate intrusive process damage begun 
current approaches designed little reasoning capabilities allow take pre trojan horse computer program apparent actual useful function contains additional hidden functions exploit privileges invoking process 
emptive action compromised state reached 
intrusion detection systems able anticipate impending compromise measure confidence system administrator take steps preclude penetration achieves compromise 
lastly current penetration rule bases easily created easily updated 
general expert rule bases tend requiring skills experienced rule base programmers update penetration exception 
penetration rule bases created interviewing system administrators security analysts collect suite known penetration scenarios key events threaten security target system 
rule base programmer identifies audit records correspond scenario key event constructs rules represent penetration expected audit records 
development penetration rules ad hoe provide little chance rule base updated site 
procedures allow system administrators security analysts develop incorporate penetration rules rule base locally provided 
doing result effective rule base management allowing site specific policy information newly discovered penetrations incorporated rule base timely manner 
iii 
state transition analysis section presents high level discussion state transition analysis approach representing detecting computer penetrations 
section explains premise technique defines key terms remainder 
section iii continues discussion explaining state transition analysis represent penetrations state transition diagram 
section iii explains representations applied states actual computer section iii concludes discussion presenting functional description stat real time intrusion detection tool 
representing penetrations tate transition analysis state transition analysis premise computer penetrations share common features 
penetrations require attacker possess minimum prerequisite access target system 
prerequisite access may range access certain files devices telephone lines possession information regarding particular security relevant function 
second penetrations lead acquisition previously ability 
subject performing penetration doing gain 
ability gained unauthorized access data access user privileges just perverse satisfaction harming gained 
identifying acquired penetrator analogous identifying aspect computer security compromised penetration 
state transition analysis penetration viewed state transition analysis tool intrusion detection sequence actions performed attacker leads initial state system target compromised state state snapshot system representing values volatile semi permanent permanent memory locations system 
initial state corresponds state system just prior execution penetration compromised state corresponds state system resulting completion penetration 
initial compromised states intermediate state transitions attacker performs achieve compromise 
initial compromised states penetration scenario identified key actions called signature actions identified 
signature actions refer actions omitted execution attack scenario prevent attack completing successfully 
information produced steps represented graphically state transition diagram 
approach useful penetration analysis requires analyst identify minimum number key signature actions penetration organize visually representation similar state machine diagrams 
approach useful describing penetration scenarios provides interesting level abstraction analyst just system call user command representation just english descriptions 
representing penetrations sequence user commands system calls table discussed section 
iden tify key action sequences responsible compromised state identify minimum requirements penetration 
english hand ambiguous concise 
state transition diagrams identify precisely requirements compromise penetration list key actions occur successful completion penetration 
example tate transition analysis penetration state transition analysis best illustrated example 
section presents example penetration scenario explains converts scenario state transition diagram 
brevity example assume reader familiarity unix operating system 
table presents example penetration scenario bsd unix illegally acquire root priv 
scenario attacker exploits flaw mail utility mail fails reset setuid bit file appends message changes owner 
result attacker able trick mail creating setuid shell program owned root publicly executable 
step attacker creates copy csh names root mail file 
step successful attacker wait root unread mail attacker able create counterfeit mail manual pages 
file 
step attacker enables setuid bit counterfeit mail file 
steps attacker creates sends empty message root mail utility 
security flaw arises step mail fails reset setuid bit usr spool mal root sets files owner attribute root 
result step attacker need execute roots mail file gain access shell root privilege 
model penetration sequence state transitions identify initial requirement state target compromised state 
successfully execute scenario assertions hold 
attacker write access mail direc tory 
attacker execute access cp mail touch chmod 
root mail file exist writable 
attacker root 
course variants penetration achieve compromise satisfying assertions 
achieve scenario assertion hold 
assertion necessary entire penetration flaw mail utility 
mail specifically searches mail files usr spool mal attacker write permission directory create counterfeit mail file 
need second assertion obvious omission execute access listed programs prevent completion step attack causing specific scenario fail 
third assertion needed root legitimate mail file exists attacker able create counterfeit mail file 
lastly fourth assertion denotes fact process forge counterfeit mail file owns 
need assertion clearer compromised state examined 
note assertions im plied requirement attacker access system process user account remote process 
access process system attacker write access usr root execute access programs listed second assertion 
purpose example assumed penetration occurs system employing standard bsd unix configuration 
assertions automatically satisfied standard unix configuration removed 
compromise achieved penetration somewhat obvious appears 
glance compromise may appear attacker gains illegal access root privilege 
closer inspection apparent compromise occurs attacker gains root privilege 
suppose step appended contents message taken part symbol table csh 
ieee transactions software engineering vol 
xx 
month step command comment 
cp bin csh usr spool mail root assumes root mail file 
chmod usr spool mail root setuid file 
touch create empty file 
mail root 
usr spool mail root execute setuid root shell 
roots 
table exists obj ect false owner object attacker attacker root setuid object enabled object usr spool mail root fig 

ra ion attacker mod object owner object attacker object enabled exists obj ec fal se owner object attacker attacker root object enabled object usr spool mail root fig 

diagram ra ion table performed 
attacker counterfeit mail file acquire root privilege security violation exists setuid root program root create 
violation occurs moment mail modi ties owner attribute mail file mail file setuid bit enabled 
initial requirement compromised states penetration illustrated 
penetration represented dashed arc leading initial requirement state sr target compromised state 
dashed arc refers unspecified sequence actions occur execution penetration 
listed sr sc assertions describe state system just prior execution penetration just completion respectively 
task identify individual actions performed penetration led compromised state 
identifying individual steps penetration best performed dissecting steps penetration scenario reverse order 
goal identify minimum number actions performed scenario accurately represent penetration 
actions necessarily correspond command lines entered attacker refer specific state change system achieved 
single command line produce multiple actions 
example execution command line step table causes actions occur 
mail executed 
process uid changed root 
file usr lib mail rc referenced 
file home referenced 
file referenced 
file usr spool mail root referenced 
file usr spool mail root modified 
file usr spool mail root owner attribute modified 
step previously identified step compromised state reached best place search penetration signature actions 
recall compromised state occurred owner attribute usr root changed time file setuid bit remained en 
actions listed action directly responsible assertions compromised state 
illustrates updated version state transition diagram penetration includes ad dition action 
state assertions indicating point file usr spool mal root owned attacker file setuid bit enabled 
assertions represent state system just prior execution action 
dashed arc leading initial requirement state intermediate state indicates unspecified ac tion resulted creation usr spool mail root setuid bit enabled 
solid arc leading state sc labeled indicate intermediate state attacker modified owner attribute usr spool mail root led compromised state 
state transition analysis tool intrusion attacker object attacker object owner object attacker owner object attacker object enabled 
object disabled exists obj ect false owner object attacker attacker root object enabled object usr spool mail root fig 

state transition diagram penetration attacker creates object attacker object attacker object owner object attacker owner object attacker object enabled 
object disabled exists obj ect false owner object attacker attacker root object enabled object usr spool mail root fig 

final state transition diagram penetration step table analyzed determine role penetration 
step file created subsequently mailed root step 
file modification file usr spool mal root identified necessary intermediate actions step action necessary action identified step 
creation file contributes cre ation file usr spool mal root enabling usr spool mal root setuid bit 
step contribute necessary action penetration 
step chmod enable setuid bit file usr spool mal root prerequisite assertions state sc 
represents updated version state transition diagram includes enabling usr spool mal root setuid bit performed step 
second intermediate state sc added represent state system just prior execution step action unspecified ac tion dashed arc follows state sr state sc assertions describing state system just prior execution step 
point file usr spool mal root exists owned attacker setuid bit disabled 
solid arc leading state sc sc labeled describe action enabled usr spool mal root setuid bit 
piece information needed complete state transition graph penetration origin file usr spool mal root 
quick inspection step reveals attacker created usr spool mail root cp usr spool mal root simply copy root owned program bn csh 
step key action required penetration identifies origin root mail file 
represents final state transition diagram penetration 
adding creation file non action state transition diagram diagram incorrect representation penetration 
merely increases specificity diagram reducing number variations penetration represented diagram 
appl lin state transition anal isis actual computer states discussed previously state transition diagram represents sequence signature actions move system initial requirement state zero intermediate states final compromised state 
term system state broad encompassing values volatile semi permanent permanent memory locations system fraction attributes needed represent signature state transitions particular penetration 
accordingly system state refers system attributes necessary represent initial intermediate compromised states penetration 
determine system attributes needed perform state transition analysis understand types security violations approach seeks represent 
state transition analysis intended method representing sequence actions performs achieve security violation 
targets known penetration scenarios lead identifiable compromised state system 
term identifiable compromise point penetrations lead compromise compromises represented purely analysis system attributes may fall outside scope state transition analysis 
examples penetrations outside scope state transition analysis include penetrations focus manipulation components outside system execution domain wire taps 
attacks produce compromised state perceivable examination system attributes 
produce compromised state distinguished knowledge outside system execution domain 
penetration compromised state ascertained requiring outside knowledge attacker identity intentions penetration outside scope state transition analysis 
example masquerader uses legitimate user login id password permission clearly violating security system 
way state transition diagram represent information ieee transactions software engineering vol 
xx 
month user actions assertions regarding state system 
representation penetration state transition diagram indistinguishable normal usage 
key factors determine penetration representable state transition diagram 
compromise produce visible change system state 
compromised state recognizable external knowledge attacker true identity intentions 
point state transition analysis discussed method representing computer penetrations 
development approach classification scheme aiding penetration analysis noted state changes computer system monitored approach adapted aid detecting penetrations 
requirement needed transform state transition approach classification scheme detection scheme development mechanism recording state changes system attributes 
fortunately mechanism exists computer systems audit facilities 
audit facilities record state changes users monitored system attributes 
information contained system audit trail input analysis tool developed compare state changes produced users state transition diagrams known penetrations 
modifications system attributes recorded audit trail effectiveness state transition analysis detection technique may limited 
result penetrations representable state transition approach may detectable state transition analysis approach detection 
example audit mechanisms usually record modifications volatile memory registers user space 
penetrations involving illegal modification volatile memory space may detectable state transition analysis representable state transition diagrams 
limitation necessarily indicate weakness state transition analysis intrusion detection approach rule penetration detection approach expected detect penetrations attributes accesses recorded audit mechanism 
penetrations execute beneath visibility audit data analysis tools correspond referred usage 
interested reader may refer examines number penetration scenarios identifiable audit data analysis 
tate transition analysis approach intrusion detection remainder section dedicated introducing design real time intrusion detection analysis tool state transition analysis technique 
tool referred state transition analysis tool stat rule expert system designed seek known penetrations audit trails multi user computer systems 
stat extracts compares state transition information recorded target system audit trails rule representation known penetrations specific system 
component component overview stat including discussion stat integrated architecture larger intrusion detection system 
stat designed modularly consisting components 
overview stat component provided 
discussion section iv continues presentation stat design describing unix prototype implementation section concludes discussion stat comparing approach rulebased intrusion detection analysis tools 
overview state transition analysis tool noted previously stat designed detect computer penetrations targeted currently existing rule penetration identification tools 
tools stat effective detecting abuse external attackers 
unfortunately stat equally ineffective detecting masqueraders 
incorporated intrusion detection system stat expected combination intrusion detection tool specializes detecting masqueraders profile anomaly detector 
collectively tools complement coverage providing ability detect masqueraders 
flow diagram illustrating intended stat component larger intrusion detection system includes profile anomaly detector 
flow information begins top audit records enter intrusion detection system concludes interface data organized site security officer 
step intrusion detection systems collection audit data 
audit collection mechanism usually provided component computer system analyzed 
audit collection mechanism passes audit records audit data retriever storage audit record preprocessor 
audit data retriever simple buffer ing mechanism writes raw audit data audit files sophisticated custom database management system store retrieve audit data 
audit record preprocessor refers individual preprocessors intrusion detection cam masquerader proceeds perform penetration known stat stat detect penetration actual identity penetrator established 
state analysis tool detection audit records audit collection mechanism audit record intrusion detection preprocessor system boundary sso audit data retriever site security officer fig 

organization intrusion detection components preprocessor kq ed 

fts decision decision engine ss interface fig 

stat component component breakdown ponent isolate format certain audit record information prior input component 
audit record preprocessor box represents individual preprocessors profile anomaly detector stat 
note illustrates architecture real time intrusion detection system audit records input preprocessor directly audit collection mechanism 
batch mode analysis audit records input audit data archive 
audit record preprocessor formatted records passed individual intrusion detection components 
component independently analyzes audit records search compromises specializes detecting 
findings components site security officer sso interface 
interface important effectiveness intrusion detection system sole plat form communication intrusion detection system security officer 
information clearly concisely relied security critical moments 
interface security officer interpret findings intrusion detection components submit queries components set sso configurable variables intrusion detection components 
sso interface may provide security officer direct access raw stat design currently support query capability sso able variables see section vi 
audit records audit data retriever 
stat components inter relationships illustrated 
stat composed knowledgebase inference engine decision engine 
interfaces external components stat audit record preprocessor sso interface 
analysis begins audit record preprocessor raw audit records inputs inference engine center piece entire system 
inference engine monitors state transitions extracted reformatted audit records compares state transitions state transition scenarios represented knowledge base 
decision engine monitors progress inference engine state transitions represented audit trail match state transition diagrams represented knowledge base 
decision engine specifies action taken inference engine find ings 
details components subsections 
stat audit record preprocessor stat avoids audit records represent penetrations knowledge base 
stat inference engine uses audit records means monitoring penetration relevant state changes occur system 
focusing analysis state changes pattern matching raw audit records penetration scenarios stat able detect greater variations ieee transactions software engineering vol 
xx 
month penetrations detected conventional rulebased penetration identification tools 
raw audit records input audit record preprocessor filtered reformatted 
audited information relevant state transition anal ysis passed inference engine analysis 
reformatted records correspond directly key signature actions represent state transition diagrams 
different audit records potentially represent single signature action 
signature actions stated form subject forms action ion object ion object optional 
audit record format object owner object permissions table ii provides brief description fields 
fields comprising stat audit record format specified guidelines audit facilities rated systems 
subject id action object id remaining fields derivable information contained 
example object id preprocessor search object inode access control list determine object owner object permissions fields 
stat knowledge base stat knowledge base refers portion stat collects integrates facts regarding stat execution environment inference rules detecting penetrations 
modularity added knowledge base particularly beneficial stat penetrations tend system specific version specific 
stat knowledge base major subcomponents contain facts inference rules 
facts stored fact base rules stored rule base 
facts refer statements expert system holds true regarding current execution domain 
rules refer steps system infer new facts analysis current set facts combined input data 
stat rule base consists rule versions state transition scenarios known penetrations target system 
stat rules establish relationship user actions monitored inference engine state changes signify attack scenario progress 
rules associated particular penetration referred rule chain 
state transition state transition diagram corresponding rule stat rule base 
stat rules represent signature actions state descriptions corresponding state transition diagram 
rules composed fields state description field signature action field rule audit guideline rated systems example standard 
audit record fields mentioned provided unevaluated products 
dependence field 
state description field contains state assertions state state transition di 
signature action field contains signature action leads state represented state description field state state transition diagram 
rule dependence field define ordering states signature actions 
rule dependence field lists rules chain fire rule state transition occur 
example rule penetration see figures dependent previous state transition 
rule dependence field rule empty denoting state transition independent state transitions 
fact rule penetration empty rule dependence field state transition required precede state transition 
rule dependence field defines ordering rule chain 
rule dependence field allows single rule chain represent multiple variations penetration scenario 
discussed section vi 
stat fact base developed recognition certain objects system share specific characteristics vulnerable attacks 
investigation various attack sce realized scenarios applicable particular file 
duplicating scenario possible file files share common characteristics grouped 
characteristics usually attributes kept file system provided audit records attributes assigned files users system system files identified looking directories located 
stat fact base contains system specific information relevant success penetrations represented rule base 
consists groups objects usually files directories called 
rule base increase generality penetration rules 
referencing fileset specific file rules particular penetration applicable files fileset particular file 
stat initialization time identity object possessing attributes recorded fact base 
expect object attributes constant facts fact base subject change objects 
accordingly stat fact base initializer fact base updater reconstruct fact base start periodically update fact base states objects change 
stat inference engine code controls inference search procedures expert system consolidated logical component referred inference engine 
stat notion unique stat cops 
state transition analysis tool intrusion detection subject id unique identifier subject behalf audit record generated 
subject permissions access privileges subject responsible audit record security level effective uid group membership capabilities 
action action performed subject object 
possible ac tions object read write create delete program execute program exit modify object owner modify object permission modify access privilege login 
object id unique identifier name object access recorded 
object access occurred field null 
object owner owner object indicated previous field 
object access occurred field null 
object permissions access permissions associated object 
object access occurred field null 
table ii stat audit record format inference engine consists algorithms monitor compare state changes occurring target system state transition representations contained knowledge base 
inference engine maintains interfaces audit record preprocessor interface fact base interface rulebase interface decision engine interface 
audit record preprocessor interface allows preprocessor pass formatted audit records inference engine 
receiving audit record inference engine converts action object fields signature action format determines state changes recorded audit record 
information compared state transitions represented knowledge base 
inference engine maintains interfaces knowledge base 
interface inference engine fact base updater 
facts defined environment dynamic require algorithm capable updating fact base run time 
audit records received record deletion modification creation object inference engine passes object identity fact base updater determines fact base require modification 
second interface inference engine rulebase 
inference engine reads rule chains rule base initialization generates internal representation rule chains identifies acceptable orders penetration rules may fired 
lastly inference engine maintains interface decision engine 
communication link direct takes place fired rule list stored shared memory structure accessible inference engine decision engine 
decision engine monitors fired rules inference engine responds fired rule 
stat decision engine decision engines add modular design expert systems providing greater flexibility customizing modifying responses produced expert system affecting inference engine knowledge base 
stat decision engine responsible deciding course action shall taken response inference engine firing rules 
possible actions include warning security officer preempting execution signature action lead firing eligible rule ignoring newly fired rule 
decision engines interchanged depending environment stat runs 
security critical audit analysis decision engine may specify actions taken preempt transition eligible rule 
security critical environments require preemption decision engine provide warnings sso interface describe danger 
stat placed surveillance mode decision engine sensitive certain subjects fire rules subjects 
surveillance mode configurable linked operation profile anomaly detection component increase decision engine sensitivity subjects activities generate high number anomaly reports 
iv 
unix prototype state transition analysis tool section describes design implementation prototype stat 
prototype called ustat sunos 
section concentrates ustat stores intrusion scenarios uses detect penetrations 
ustat designed real time system able preempt attack damage done 
ma ieee transactions software engineering vol 
xx 
month jor issue real time analysis intrusion detection systems general fast catch audit records user load high 
results tests focusing issue section iv 
ustat uses audit collection mechanism ex add package sunos called bsm basic security module provides improved features standard unix operating systems shadow password files object reuse device allo cation deallocation audit mechanism 
re sunos basic security module referred bsm 
components ustat exactly stat components 
specifics components ustat discussed sections iv iv 
section iv presents results testing ustat 
audit record preprocessor audit record preprocessor responsible reading filtering mapping passing bsm audit records inference engine format required ustat 
preprocessor provides inference engine generic audit record format 
enables sso create state transition diagrams abstraction ustat action names bsm specific event names 
different events audited bsm ustat preprocessor mapped different ustat actions read write create delete execute exit modify owner modify perm rename 
inference engine operates action types 
instance bsm action open rw open read write mapped ustat actions read write 
signature action ustat rule base indicates read write match action 
table iii lists different actions ustat bsm event types mapped 
preprocessor takes return value event account 
filters bsm records indicate return value indicates call user finish successfully 
change system attributes cause state transition 
stat design ustat audit record structure defined triple attributes contains subfields reveal information possible particular attribute 
subfield structure shown bsm designed compliant requirements system classification 
ustat statistical anomaly detection systems re turn field detect browsers perform abnormally high numbers unsuccessful attempts external attackers repeatedly fail pass logon authentication 
subject action object real user id effective user id group id action time action process id object name permissions mode owner group owner inode number device number file system id target fig 

ustat audit record structure 
note refinement initial stat design section iii 
various object types target sys tem processes semaphores shared memory files object name ustat name file identified full path 
target field effective action rename 
real user id reflects user id associated process responsible action 
effective user id real user id user executes setuid program issues su command 
fields ustat audit record obtained directly bsm audit records 
depth discussion bsm features audit records respect ustat refer knowledge base discussed section iii knowledge base components fact base rule base 
contains information objects system rule base rule representation state transition diagrams 
fact base ustat fact base consists groups files ries called share certain characteristics vulnerable certain types attack scenarios 
discussed stat design provide convenient way generalizing penetration ios 
section characteristics ustat described 
programs scripts change user effec tive user id owner program real user id remains unchanged 
state transition analysis tool intrusion detection ustat action bsm event types read open open re open rtc open rwc open open rt open rw open write truncate creat open rwc open open rw open open rt open rtc open open wt open open wtc create mkdir creat open re open rtc open rwc open open open wtc delete rmdir unlink execute exec execve exit exit modify owner chown modify perm chmod rename link table iii ustat actions vs bsm event types initializing fact base ustat done initializer module additional manual processing 
fact base updater consists routines keep fact base date consistent operation inference engine 
current version fact base ustat table iv 
directly state assertions inference engine identify variations scenarios 
fileset characteristics fileset restricted read files fileset restricted write files fileset files authorized read fileset fileset files authorized write fileset fileset non writable system executables non writable system directories system information table iv ustat files fileset restricted read files accessed arbitrary utilities contain sensitive information read ordinary user compromise system security 
unix systems files left readable 
instance illustrates plaintext passwords obtained dev kmem 
recognition vulnerability potential similar ones ustat fileset 
word restricted certain system programs need read files proper execution 
programs identified fileset 
similar fileset files fileset modified programs fileset 
typical example member fileset passwd 
file overwritten program passwd command 
password program provides legitimate write access passwd file 
write file super user identified secu violation 
fileset consists files authorized read files fileset 
fileset consists files authorized write files fileset 
instance passwd command legitimate need write passwd file user 
included fileset 
fileset consists publicly accessible executable system files commonly subjected trojan horse attacks 
files fileset deleted denial service problem overwritten system administrator possible trojan horse im 
idea non writable system directories similar idea non writable system executables 
directories usually consist publicly executable ieee transactions software engineering vol 
xx 
month files subject trojan horse attacks 
example somebody creates fake program directories possible victim path name target directory comes directory actual pro gram located 
write access directories denied access root 
contains names directories 
unix physical file may pathnames associated 
processes access file pathnames 
analyzing penetration scenarios noticed variations scenarios easily accomplished different filenames different steps penetration referring physical file 
case inference engine fail firing rule penetration scenario object step identical object previous step 
overcome ustat fact base keeps information target system fileset 
rule base ustat rule base stores state transition information text files referred state description table signature action table store state assertions signature actions respectively 
inference engine uses information match actions incoming ustat audit records actions state transition scenarios 
state transition diagrams state consists state assertions state assertion consists function name zero arguments 
evaluation state assertion results true false value keyword front state assertion negates result 
short description state assertions 
name file vat file name evaluates true file var matches filename right hand side 

file vat full path evaluates true file var matches pathname right hand side 

owner file var user id evaluates true owner file var user id 

member file set file vat evaluates true file vat member file set 

user id evaluates true effective user id subject audit record processed equals user id 

gid group id evaluates true group id subject audit record processed equals group id 

permitted file var evaluates true permission bit perm set file var permission bits 

located evaluates true file vat located di listed fileset 

user evaluates true subjects signature actions 

evaluates true process id signa ture actions 

file var evaluates true file vat shell script bin sh mechanism 
similarly signature actions 
correspond action types preprocessor 

read file vat 
write file var 
create file var 
execute file var 
exit file var 
delete file var 
modify owner file vat 
modify perm file var 
file var file var 
file var file var inference engine ustat inference engine uses event driven forward chaining inference scheme 
inference engine uses structure called inference engine table keep track possible penetration scenarios 
point time table consists snapshots penetration scenario stances instantiations completed target system 
row represents instance possible penetration scenario 
column corresponds state scenario depicts far compromise completed 
row contains information history instantiation users involved files involved related audit records table illustrates initial configuration inference engine table 
assuming number different state transition scenarios state description table row state transition scenario 
initially mark row means initial signature action scenario anticipated inference engine 
inference engine detects audit record matches action satisfies state state transition scenario duplicates row marks corresponding cell duplicated row marking row equivalent firing rule equivalent state transition 
reason duplicating row original row represents part instantiation 
inference engine anticipates unmarked cell signature action row 
illustrate manipulation table example uses hypothetical state transition diagram called see 
note tion represented diagram lacking prerequisite state analysis tool fop detection table table vi inference engine table action initial state described section iii 
prerequisite performing penetration attacker standard unix access 
ustat null state assumed exist state transition diagrams 
std diagram contains signature actions state assertions 
contents state assertions left simplicity 
state follows signature action depicts final compromised state 
diagram observe may executions file possibly different users created 
hypothetical state transition diagram std corre sponds row initial inference engine table 
consider effects action inference engine table 
action user creates state assertions std satisfied 
result row duplicated marked new row 
see table vi 
point different signature actions anticipated inference engine row 
related std 
creation file execution correspond rows table vi respectively 
action user executes std satisfied 
result row duplicated marked new row 
result affect row file executed user result second action illustrated table vii 
sa table vii inference engine table action action user reads file std satisfied result final state std mise achieved 
new row added table 
result table look table vii 
compromise reported decision engine 
row deleted table corresponding state assertions longer hold 
example row deleted deleted state assertions std longer hold row 
note different attackers involved example scenario users inference engine applies rules state transition diagram regardless identity attacker 
attack cooperating users single user difference ustat 
identity attacker important state assertions certain state include assertion ame user see section iv 
case infer ence engine compares identity user signature actions scenario 
similarly inference engine applies rules rule base regardless login sessions 
amount time passed signature actions effect ustat inference mechanism 
instance attack scenario performed login sessions performing action create login session second third actions login session 
ustat inference engine retains row inference engine table indicated creation long satisfies assertions state assertions 
way difference second action performed login session 
decision engine decision engine responsible informing sso results inference engine activities output decision engine ieee vol 
xx 
month create filed execute read file state assertions state assertions state assertions fig 

hypothetical state transition diagram actions ranked simplest complicated 
inform sso compromise achieved 
inform sso state instance scenarios satisfied 
suggest possible actions sso preempt state transition lead compromised state 
play active role preempting attack 
decision engine implemented ustat prototype performs 
decision engine employs structure called decision table contains decision message state state transition scenario 
decision en notified inference engine state change displays information console machine running ustat 
number state transition scenario state change occurred message decision table corresponds satisfied state filenames involved instance scenario real user id effective user id user performed signature action tion presents sample output generated ustat decision engine 
data sso foresee impending compromise information take preemptive action take precautions prevent attacks nature 
testing tat ustat stat prototype important run performance tests assess real time capabilities approach 
results functional performance tests summarized sec tion 
tests run 
functional testing functional tests performed different fea tures ustat 

rules representing state transition diagrams rules penetration scenarios performed 
preliminary tests showed attack scenarios defined rule base detected ustat 

information rules attack performed 
instance part scenario performed file second part performed file 
test results showed vari ations scenarios performed detected ustat 

cooperative attacks multi session attacks rules parts scenario performed different attackers attacker different login sessions 
attack scenarios defined ustat rule base allows attackers cooperate allows user perform actions different login sessions 
tests indicated ustat able detect variations attack scenarios 
performance testing purpose performance testing get feedback processing speed ustat change performance ustat processes running system 
ustat tested combination audit intensive cpu intensive processes 
ps run periodically obtain cpu disk utilization processes 
obvious ps cpu cycles affected test results 
tests ustat processing audit data collected prior test 
audit data generated user occasionally users logging target machine 
considered batch mode execution real time ustat caught current audit data 
processes tests ustat cpu primarily input intensive 
ustat audited result circular activity 
audit intensive processes perform large amount system calls keep audit daemon disk audit records written continuously busy 
state transition analysis tool intrusion detection std warning user executed lpr print file owned somebody 
lpr invoked file removed illegally 
usr ucb lpr file user subject gid pid time action object target owner perm device inode tue jul exec usr ucb lpr null rws subject gid pid time action object target owner perm device inode tue jul read null rw fig 

sample output decision engine crack cpu intensive program runs encryption routines guess passwords 
find audit intensive system program 
run large filesystem find print creates enormous amount audit data 
audit daemon process ac tive bsm installed target machine 
controls generation location audit trail files 
highly intensive primarily output process 
audit daemon test default ustat audit daemon running machine 
tables viii summarize results test cases 
column table lists processes test 
second column indicates amount cpu time hours minutes seconds third column indicates percentage cpu time process 
test case ustat test ustat performance tested major processes running 
ustat processed audit data minutes 
point idle waited audit data 
minutes cpu time idle ustat processing see table viii 
indicates half runtime ustat waiting completed 
test case ustat crack process cpu time percentage ustat idle total table viii cpu usages ustat crack cpu intensive process test run cpu rarely idle 
ustat crack user processes competed cpu time 
compared previous test case crack fill unused cpu cycles see crack cpu usage table ix 
test results showed cpu utilization ustat dropped 
test case ustat find audit intensive process find amount calls pushed audit daemon limit 
audit daemon runs root process caused considerable slow user processes 
addition processes required disk disk audit daemon hang 
instance ls command audit data directory hung 
ustat user process requiring disk audit disk hung ieee transactions software engineering vol 
xx 
month process cpu time percentage ustat crack idle total table ix cpu usages ustat crack 
solution terminate ex ecution find relieving audit daemon giving ustat opportunity read audit data 
test ustat showed slow processing speed 
cpu time idle ustat didn opportunity process audit data see table 
process cpu time percentage ustat find idle total table cpu usages ustat find remarks tests running tests effectiveness efficiency ustat observed 
tests meant feasibility check exhaustive 
actual performance ustat apparent running different target systems different config 
far limiting factor appears throughput disk extensively ustat audit daemon 
cpu intensive processes run machine ustat little effect performance ustat 
tests showed cpu intensive process user process root process ap slowdown experienced ustat processing speed see test case 
possibility performance ustat run ustat dedicated machine ides uses approach 
ustat audit daemon need run computer ustat run higher priority process 
speed ustat processing cause audit daemon fall hind observed test case 
solution audit daemon periodically switch different disks ustat starve waiting particular disk see test case 
best lution modify audit daemon source code redirect output ustat 
eliminate disk speed limitations drastically increase ustat performance 
comparison stat current rule intrusion detection tools key objective research understand weaknesses current penetration identification tools address weaknesses development implementation new hopefully better analysis method 
section ii discussed weaknesses inherent design current rule penetration identification tools included dependence audit records representing penetrations rule base non intuitiveness penetration rules making rulebase updating difficult experienced knowledge base programmer inability identify semi sophisticated attacks detect impending compromises inability detect penetration compromised state reached 
example penetration identification tools intro duced section ii ides nadir maintain rule bases represent suspicious user activity rules identify site specific policy violations 
implementations audit record dependent tools represent illicit behavior rules specifically fields audit records 
unfortunately dependence audit records results weaknesses 
penetrations traceable audit trail subject intrusion detection formulated user inter face level attacker executes coordinated set commands program instructions audit level 
current penetration identification tools require rulebase programmer translate scenario audit trail generating rule chain 
resulting rule chain fired direct correspondence order content audit record fields penetration rules 
result minor variation penetration audit trail may prevent detection ides nadir 
stat hand focuses penetration sig nature actions audit records record actions 
furthermore stat rules designed support representation interdependencies actions penetration scenarios allowing rule chain represent multiple variations order penetration actions may performed 
providing ability support multiple variations single penetration rule chain stat increases flexibility identifying penetrations missed rule tools 
important advantage signature actions audit records represent penetrations result intuitive rule chains 
exam state transition analysis tool intrusion detection ple rule base programmer interviews system administrators security experts collect suite known penetration scenarios key events threaten security target system 
programmer iden tify audit records produced key event scenario build rule chain expected audit trail 
understand rule chain reconstruct audit trail fi om rules scenario fi om audit trail 
general expert rule bases non intuitive requiring expertise experienced rulebase programmer construct rules accurately represent concepts intended time contradict rules rule base 
contrast stat rule base specifically intended require expert rule base programmer readable updatable site security officers system administrators 
state transition diagrams aid development penetration rule chains provide analyst visual representation key actions occur order attacker move system fi om initial prerequisite state compromised state 
major difference stat tools stat rule chains constructed fi om state transition diagrams 
sense state transition analysis approach similar model intrusion detection approach proposed garvey lunt see section ii 
techniques provide higher level representation user behavior audit record level providing easier readability rule generation 
current penetration identification tools limited ability identify semi sophisticated attacks performed cooperating attackers 
ides rule base example take consideration users working execute penetration 
stat addresses limitation having inference engine view audit trail globally focusing events occurring system actions individuals 
sequence actions match actions represented state transition diagram stat constructs list users contributed steps penetration 
important benefit results fi om combination state transition diagrams method building penetration rule chains stat ability represent permutable penetration state transitions single rule chain 
benefit stat supports generation representation longer rule chains current tools 
longer rule chains increase stat ability identify impending compromises describing full sequence events lead ing compromise entire penetration scenario shorter rule chains contrast limited rep compromise providing rules represent point compromised state reached ignoring sequence events led compromise 
current penetration identification tools analyst chooses key audit records builds rule chain records 
state tran sition diagrams hand provide stat users modest intuitive procedure developing organizing complete list key events lead compromise 
stat supports representation longer rule chains ability represent permutable state transitions single rule chain see section vi 
table xi summarizes functionality discussed comparing stat functionality penetration identification tools section ii 
vi 
areas research section summarizes areas research enhancements reliable software group planning investigate 
stat subsystem obvious question affecting penetration rule base implementations completeness 
penetration capable representing known penetrations traceable audit data analysis 
verify security flaws particular target system identified expect penetration rule base include rule chains possible system penetration 
accordingly ability facilitate process security administrators able update stat rule base site new variant penetrations highly desirable 
issue incomplete rule bases addressed ways 
stat rule base specifically designed allow non experienced rule base programmers system administrators security officers update rule base 
penetration rule chains added security officer learns new penetrations 
secondly development heuristic algorithm learning new variant penetrations progress 
algorithm stat capable converting state transitions previously unknown penetration audit trails signature actions automating integration signature actions rulebase defend attacks 
stat desirable addition stat query support security officer sso interface 
direct way provide support interface decision engine sso interface 
currently data flows decision engine sso interface 
decision engine redesigned allow queries sso interface decision engine 
enhancement decision engine add surveillance mode capability 
example specific subject id provided stat decision engine sso interface 
decision engine acutely sensitive subjects generate warning message time subjects fires ieee vol 
xx 
month stat ides nadir represents site specific policies detects cooperating attackers structured rule development ad hoc rules audit record independent supports permutable event sequences supports longer rule chains detects impending compromise table xi comparison stat penetration identification tools penetration rule 
surveillance mode implemented interface stat concurrently running anomaly detector 
subject suspicion rating increases anomaly detection decision engine sensitivity subject 
network audit support natural extension stat effort run stat audit data collected hosts 
network filesystem files distributed hosts host mounts directories actions host computer need audited 
means audit mechanism needs run host 
running implementation stat host result inefficient computer resources 
possibility having cooperative attacks different hosts detection difficult 
approach provide single stat process single chronological audit trail 
example command installed bsm takes filenames audit trails input produces single time ordered audit trail 
output single audit trail input stat preprocessor 
permutable state transitions ustat prototype assumes state transitions ordered single sequence possible signature actions penetration rule chain independent 
instance consider creation file followed creation symbolic link file 
actions stated follows ac create foo action create bar bar symbolic link foo 
unix allows create symbolic link regardless file linked exists 
compromise requires actions achievable regardless order executed 
stat originally designed support permutable state transitions 
permutable state transitions necessary scenarios see man pages information 
development ustat scenario corresponds single non permutable rule sequence 
permutable sequences implemented ustat prototype 
method implementing permutable rule sequences ustat designed 
vii 
state transition approach introduced effort develop easily readable representation computer penetrations 
approach models penetrations series state transitions described terms signature actions state assertions 
state transition diagrams written correspond states actual computer system diagrams form basis rule expert system detecting penetrations called stat 
state transition analysis approach targets penetrations identifiable current rule penetration identification tools 
state transition analysis approach offers key advantages existing rule implementations 
current rulebased analysis tools pattern match sequences audit records expected audit trails known penetrations state transition analysis focuses effects individual steps penetration state computer system 
results audit record independent rule base easier read current penetration rule bases 
provides greater flexibility identifying variations known penetrations 
state transition analysis provides modest intuitive procedure rule generation ad hoc approaches currently 
lastly state transition analysis approach ability detect cooperating attackers attacks user sessions 
ustat prototype stat implemented sunos validate functional capabilities soundness state transition analysis approach 
performance tests run prototype indicate limiting factor disk throughput cpu intensive processes machine little effect 
approaches increase performance outlined 
stat concentrate adapting multiple hosts platforms 
state transition analysis tool intrusion detection anderson computer security threat monitoring james anderson fort washington pa april 
bishop security problem unix operating system restricted distribution department computer science pur due university west lafayette april 
chen lu teng adaptive real time anomaly detection inductively generated sequential patterns proceedings ieee symposium research security privacy oakland ca pp 
may 
debar becker neural network compo nent intrusion detection system proceedings ieee symposium research security privacy oakland ca pp 
may 
denning neumann requirements model ides real time intrusion detection expert system technical report csl sri international august 
bsd unix security computer science dept university california santa barbara april 
cops security checker sys tem proceedings summer usenix conference anaheim ca pp 
june 
garvey lunt model intrusion detection proceedings national computer security conference baltimore md pp 
october 
lunt van horne analysis computer system audit trails intrusion classification technical report tr mountain view ca october 
hubbard mcauliffe schaefer schaefer computer system intrusion detection trusted information systems radc tr final technical report december 
jackson dubois stalling expert sys tem application network intrusion detection proceeding national computer security conference baltimore md pp october 
javitz valdes sri ides statistical anomaly detector proceedings ieee research security privacy oakland ca pp 
may 
lo crossley levitt olsson static analysis virus detection tools unix systems proceedings th national computer security conference baltimore md pp 
october 
ilgun ustat real time intrusion detection system unix masters thesis computer science department university california santa barbara july 
ilgun ustat real time intrusion detection system unix proceedings ieee symposium research security privacy oakland ca pp 
may 
lunt automated audit trail analysis intrusion de tection survey proceedings national computer security conference baltimore md pp 
october 
lunt real time intrusion detection proceedings com pcon san francisco ca february 
lunt jagannathan lee st knowledge intrusion detection proceeding ai systems government conference pp 
march 
lunt jagannathan javitz valdes neumann real time intrusion detection expert system sri csl tec report sri csl june 
lunt neumann javitz valdes garvey real time intrusion detection expert system ides final technical report computer science laboratory sri international menlo park ca february 
martin 
building expert systems tutorial englewood cliffs prentice hall 
mcauliffe schaefer hubbard computer misused 
survey current intrusion detection system tec proceedings sixth computer security applications conference pp 
december 
miller proctor requirements oriented anal ysis computer misuse detection systems seventh intrusion detection workshop sri international menlo park ca may 
national computer security center trusted computer system evaluation criteria dod dod std december 
national computer security center guide understanding audit trusted systems ncsc tg version june 
national computer security center glossary computer se terms ncsc tg version october 
neumann comparative anatomy computer system network anomaly detection systems csl sri bn menlo park ca may 
porras kemmerer penetration state transition analysis rule intrusion detection approach proceedings eighth annual computer security applications conference san antonio texas pp 
december 
porras stat state transition analysis tool sion detection masters thesis computer science department university california santa barbara june 
hanna st expert system intrusion detection case study proceedings th national computer security conference baltimore md pp 
october 
gligor pattern oriented intrusion de tection model application proceedings ieee research security privacy oakland ca pp 
may 
sun microsystems sunos release bsm patch revision garcia ave mountain view ca 
unix programmer manual berkeley software distribu tion virtual vax version computer science division department electrical computer sciences university california berkeley ca august 
vaccaro liepins detection anomalous com puter session activity proceedings ieee symposium research security privacy oakland ca pp 
may 
ilgun received degree computer engineering university istanbul turkey degree computer science university california santa barbara 
currently working advanced computer software design engineer developing software bridge router products 
richard kemmerer professor chair department computer science university california santa barbara 
leads reliable group ucsb 
visiting scientist massachusetts institute technology visiting professor wang institute politecnico di milano 
worked programmer systems con north american rockwell institute transportation traffic engineering ucla 
research interests include formal specification verification systems computer system security reliability specification language design software engineering 
author book formal specification operating system security kernel author book computer risk safe computing information age 
dr kemmerer received degree mathematics pennsylvania state university ph degrees computer science university california los angeles respectively 
dr kemmerer served member national academy science committee computer security doe system security study committee commit tee review oversight mechanisms space shuttle flight software processes 
served member ieee transactions software engineering vol 
xx 
month national computer security center formal verification working group member nist computer telecommunications security council 
dr kemmerer past chairman ieee committee security privacy past member advisory board acm special interest group security audit control 
member association computing machinery member ieee computer society member association research 
dr kemmerer serves editorial boards ieee software engineering cm surveys 
phillip porras received degree information computer science university california irvine degree computer science university california santa barbara 
porras currently trusted computer systems department aerospace corpora tion 
evaluator national secu agency trusted product evaluation program performs security analyses support various government projects 
research interests include intrusion detection information flow secure systems design hardware assurance 
