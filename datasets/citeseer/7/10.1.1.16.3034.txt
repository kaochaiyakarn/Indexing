datagrid architecture version german cern steve fisher ral tim ral francesco infn wolfgang hoschek cern dave kelsey ral brian tierney lbl cern july contents protocols vs apis 
representation architecture 
resources 
information monitoring system 
computing fabric 
storage model 
file replica identifiers grid environment 
data replication system 
user interface 
services 



producer 
consumer 


logging bookkeeping 




infrastructure 
network 
fabric management 
security 
cases submit run simple batch job process input file produce output file 
glossary acronyms classes responsibilities chapter second version document defines architecture eu datagrid 
large undertaking software projects worked parts system new 
just re painting re assembling old components planning build new 
consequently describe see feasible architecture datagrid 
new components prototyped cases prototype components may rejected 
document evolve lifetime project 
say particular prototype gives longer view 
version document taken account wp replies sets questions posed applications 
consider comments posted wp pre release document received working day ago 
consider ggf important genuine attempt define grid standards 
plan ggf contributing standardisation moving standards evolve 
protocols vs apis system set 
service accessed port case httpd ftpd 
means service defined ultimately protocol speaks defines interface 
normal programmer see protocol accesses client api 
defining system choose think api protocol needed communicate api service 
division system different services apis protocols major ingredient architecture 
gone inside service little outline demonstrate achieve desired functionality 
representation architecture chosen model system uml universal modelling language kinds diagram class diagrams show various classes methods collaboration sequence diagrams show objects interact case diagrams illustrate case deployment diagrams show relationships hardware software components system defined apis java calls 
recognise need provide api definitions languages preferable develop model java mind number reasons 
java pure oo language permit dirty tricks high level language worry details calling address value serve obscure essentials design 
imagine client side code small just talk protocol probably better write client libraries scratch different languages compromising 
apis different languages plan thin clients easily replaced client different language wrapping language 
allows optimum interface developed language 
considering naming conventions different languages want solution consistent accepted style various languages produce excessively long names 
java convention start package name reversed dns name 
proposal implies register edg net 
domain edg org taken 
possibility edg eu int get eu int eu 
conventions naming case consider submit operation scheduler workload management wp language example notes java net edg workload scheduler submit follow convention starting reverse domain name edg workload scheduler submit pure namespaces edg workload scheduler submit namespaces prefixes python net edg workload scheduler submit python conventions clear follow java style workload mnemonic package 
workload data info fabric storage 
resources lowest level known resources nomenclature defined foster kesselman tuecke exemplified data grid architecture :10.1.1.129.8850
resource normally small layer top existing software 
important resources ce se 
define cpu resource batch interactive grid 
implies resource supports globus gsi authentication supports standard grid interface defined 
layer top local resource management system batch system 
layer hides differences different underlying batch interactive systems 
defined storage system mass storage system disk pool supports globus gridftp protocol gsi authentication exposes standard grid interface defined section 
making resources various collective services terminology 
may collective services 
services grid decide resources job example service information monitoring system note material section moved services section appropriate services defined information monitoring system ims handle information produced grid middleware application monitoring 
architecture grid monitoring architecture global grid forum 
gma shown consists components consumers producers directory service prefer refer registry avoids implied structure 
gma producers register consumer producer discover register registry grid monitoring architecture registry may distributed describe type structure information want available grid 
consumers query registry find type information available locate producers provide information 
information known consumer contact producer directly obtain relevant data 
specifying consumer producer protocol interfaces registry build inter operable grid information service 
note architecture supports joint consumer producer components illustrated component centre 
gather data producers digested information available consumers 
rdbms hold data 
producer consumer producer consumer producer producer joint consumer producer global grid forum ggf proposed gma monitoring architecture propose information monitoring 
plan common interface access data fresh monitoring data data archive 
relational scheme proposed ggf fisher registering producers 
consistent principles gma 
api considering expose registry 
producer simply announce table name row table 
scenes producer communicate servlet register table name identity value fixed attributes 
consumers issue sql queries set supported tables names attributes consulted 
consumer api query goes servlet analyses query registry find suitable producers information 
general case queries sent different producers servlet acting behalf consumer process results 
queries processed single producer handled efficiently result operations carried consumer servlet 
suggests advantages having producer consumer rdbms units able hold data joined 
schema information table descriptions universally known 
rdbms hold schema associated list available producers 
need replicated scalability reliability done way allow producers world add new tables 
producers periodically re announce dropped list producers defined interval 
producer registers producer certain table table known added schema 
table available producer definition removed 
convenient schema evolution 
services offered middleware users producer service producers information consumer service consumers information 
act producers information able register various kinds information offer 
example register producer information things queue size available batch capacity suitability interactive 
information consumers able locate suitable producers answer questions 
additional services locate suitable producers split queries merge results 
probably class services moment published wp little clearer best way 
addition archival service defined 
may described section may preferable package things differently 
current information system built globus mds 
code provided publish information currently provided gris element mds 
order facilitate migration mds gateway producer written publish data mds 
computing fabric functionality provided computing fabric classified main categories user job execution batch interactive cpu services provision functionality see section administration computing fabric ce interface computing power provided fabric user job execution batch interactive cpu services 
handles job submission requests coming grid execution 
provides grid information jobs managing 
administration functionalities defined aim automating management computing fabric 
include system software installation update cpu farms monitoring automated fault detection recovery nodes 
administration functionalities described section fabric management 
storage model grid se generic name storage resource includes grid interface authenticated gsi listed grid 
se ce part grid fabric defined anatomy grid :10.1.1.129.8850
include large hsm systems hpss castor include grid managed disk pools 
note se include ce working storage ws ce scratch disk example tmp farm node storage directly accessible grid 
working storage local ce accessed grid tools ces 
ws volatile available job execution 
may ses defined local ce specified ims 
data managed units named files grouped named collections handling easier reduce bookkeeping overhead 
mapping files collections defined grid applications grid middleware 
provide maximum flexibility efficiency grid environment se optimized local wide area access 
provides flexibility schedule jobs create replicas 
example job run computing element extremely high speed network path remote se may efficient job remote open remote create local replica 
job knows need gbytes middle gb file specify part job description allowing determine efficient remote open create local replica 
data local remote fact completely transparent application 
se api described section 
types files data grid master files replicas 
replica copy file master 
master file owned managed creator file replicas managed grid middleware 
example may delete unused replicas space available new replicas notifying owner file 
replicas transparent users created needed grid middleware order improve performance jobs 
sites explicitly ask creation replicas locally 
initially replica files definition read read write implies creation new master file 
avoid extremely difficult synchronization problem allowing users write multiple replicas file 
consistency mechanisms guaranteeing master file removed replicas removed described section 
additionally various special purpose consistency models updating replica propagating changes master replicas investigated 
access control mechanisms master replica files described section 
master files typically stored reliable system backed replica require backups 
simple example replica usage follows improve performance datagrid job run site data permanent storage site copied site data may subsequent jobs site may needed jobs site better network connection site site reason data kept site long possible 
need store file permanently site file retrieved site described section keeps track replica data replica selection service select optimal physical file job request creation new replica 
replica usage thought type long term cache data remains cache jobs cache full case files removed 
caching pinning mechanisms apis described section 
master replica file include notion lifetime 
master files may finite lifetime deleted automatically system 
replicas may deleted system may assigned lifetime deleted soon 
replica lifetime set manually user knows file series jobs set scheduler 
replicas currently defined terms files objects 
initial focus movement files specific regard files contain 
realize users mainly interested objects 
believe defined mechanisms map objects files objectivity root completely transparent applications 
achieving transparency require close interaction applications data model 
case commercial databases products appears difficult efficiently requires additional study 
handling files understood requirements analysis extend build replication paradigm apply movement objects structured data hdf segments data relational databases object oriented databases hierarchical databases application specific data management systems 
important capability grid ability pin file disk 
master files means file migrated tape deleted disk pool 
replica files means file purged room replicas 
grid scheduler section responsible pinning file pinning api discussed section 
models usage possible ways grid ce se may connected 
depending types systems available grid interfaces provide networking infrastructure place different protocols apis security mechanisms may 
section attempt address issues 
usage models complete represent important combinations components 
discussion assume grid se definition supports gridftp protocol gsi security 
assumed mss systems models modified support gsi gridftp gridftp gateway front 
ce working storage ws local disk tmp looks local disk application nfs san attached disk 
client api working storage unix local se means low latency ms high bandwidth greater mbits sec network place 
normally means se site ce necessarily 
protocol options data transfers performed gridftp protocol 
applications may gridftp protocol may local protocols nfs se connected ce nfs storage area network san 
note short term rfio protocol supported 
api options current plan develop api rfio api provide applications calls 
provide full unix semantics grid 
se connected ce nfs san unix api may 
security options cases gridftp protocol gsi security 
enhanced authorisation mechanisms available 
cases local protocols nfs san local disk unix uid type security available 
new posix acl interface may supported 
applications require full acl security file required replace file open calls eventually provide necessary authentication authorization gsi 
applications possible example source code available necessary copy data ce working storage local se nfs mounted san attached standard unix open 
option type application condor bypass system www cs wisc edu condor bypass uses unix ld preload mechanism intercept standard unix calls replace equivalents 
potential bypass needs study 
usage models shows main models ce se interaction protocols apis security systems 
option application access data standard unix api data se copied ce working storage accessed application 
option shows copying data local disk pool se 
access data disk pool se application uses api 
application bypass remap unix copy file working storage possible unix access file 
option shows situation local disk pool se directly connected ce nfs san providing local file access semantics 
environment possible applications unix api avoiding need modify applications library 
course ability comes expense losing gsi security mechanisms considered carefully 
option remote se system castor 
castor mss allows remote necessary copy data 
files staged tape disk se pinned ensure remain disk duration job 
applications may rfio api read data directly castor 
data may copied working storage accessed unix necessary 
option shows remote db case 
done 
se ce usage models file replica identifiers grid environment important datagrid challenges provide convenient efficient global file access users 
goal achieved transparently scheduling optimizing grid 
logical file exist multiple physical replicas replica potentially kept different se 
protocol specific file name transport file name derived physical file name 
mechanism allows multiple protocols supported hides protocol applications 
world wide scope grid essential globally unique 
virtual organisation group individual control possible structure conventions namespace 
naming scheme intuitive flexible 
logical file name logical file identified globally unique string conforming defined syntax 
propose adopt url syntax rfc established open standard convenient globally unique naming internet 
logical file name consists string lfn followed hostname dns followed separator arbitrarily shaped application specific string appended 
virtual organisation may decide hostnames 
examples conformant logical file names lfn eo esa int tex lfn atlas cern ch analysis higgs cand dat lfn alice cern ch grid sim ev date run ev name tell file physically stored tell file accessed 
hostname facilitates easy scalable world wide cross organisational name space partitioning 
hostname say namespaces belong managed owner hostname 
physical file name physical file name uniquely identify file se 
propose adopt url syntax rfc established flexible standard 
physical file name consists string pfn followed hostname se registered dns followed separator directory path appended 
conforming examples pfn cms cern ch grid daq triggers challenge ev pfn cern ch tex pfn castor cern ch ev pfn cern ch transport file name transport file name identify file accessed 
name contains sufficient information allow client start retrieving file stream 
tfn allows multiple protocols access single pfn 
envisioned user normally tfn directly translation pfn handled middleware 
tfn may meaningful locally 
transport file name url restricted set supported protocols gridftp ftp rfio file 
url encoding commands parameters transport file name allowed 
conforming examples cms cern ch grid daq triggers challenge ev gridftp cern ch may tex file afs cern ch user hoschek data ev ftp castor cern ch ev file castor ev file tmp examples 
extra parameters encoded cms cern ch get year kind challenge name cms cern ch put year kind challenge name note lfn pfn tfn unambiguously distinguishable scheme prefix 
data replication system data replication major issues datagrid project 
data replication system composed grid services 
data replication system capabilities including maintaining consistent scalable 
lists files logical physical filenames available grid 
replication files deals actual file transfer integration logical physical filenames 
call service 
synchronization replicas consistency service replica selection create new replicas file level access control storage replica metadata master flag acls lifetime size 
key component datagrid rc responsible performing mappings logical file name lfn physical file name pfn 
critical component designed extremely scalable fault tolerant components depend 
address problem designed hierarchical distributed system contains types catalogs leaf rcs non leaf rcs 
distinguish non leaf leaf follows se paired leaf rc se rc contains lfn pfn mappings files stored se 
words entry pfn se 
top tree catalog vo 
arbitrary number non leaf rc contain pointers leaf rcs non leaf rc words build tree set se rcs bottom tree 
example site multiple se non leaf rc lfn site 
see 
distributed hierarchical new file added rc added se rc 
way local catalog date 
periodically say minutes se rc send updates tree site rc periodically sent updates top level rc 
doing lookup lfn grid scheduler possibly user query rc typically start top level rc virtual organization 
rc automatically redirect requests tree finds possible 
user knows replica site go directly rc site se 
replica longer redirected back tree 
way load spread catalogs relieving top level catalog having satisfy requests 
provides great deal fault tolerance 
site rc top level rc unreachable effecting local operations 
provides high degree scalability load distributed large number rc top level server replicated increase fault tolerance scalability 
details rc api cases described section 
user interface user interface expressed terms commands allows types operations session management user manage environment personal group configuration 
particular environment initialisation includes grid login creation proxy certificate subsequent authentication operations 
job control user submit cancel jobs list resources matching job description retrieve output job 
job monitoring user retrieve current state submitted job access logging information 
job description language formal language describe characteristics job executable run input output files requirements preferences 
job description consists set attributes corresponding values 
attribute specified mandatory 
attribute values grid scheduler find set suitable resources job execution 
typical attributes specify name executable input output data possibly logical way standard input output error input output requirements preferences environment job needs order run operating system software packages 
notice input different types 
standard input 
data files managed replication services 
input sandbox consists relatively small files user machine need transferred job 
similarly output 
standard output error 
data files 
output sandbox set files need moved user machine job completes 
example shows simple job description look refined type job executable atlas sh input file output file error file usr local atlas atlas sh core requirements type machine linux false complex job descriptions possible example job consist multiple related tasks communicating mpi 
chapter services services listed starting lower level services offers storage facilities moving higher level services locates best resources submitting job 
document attempts cover grid components necessary satisfy requirements specified wp case documents see cern ch datagrid wp documents documents html 
expecting wp detail common cases included document 
interaction diagrams included section show case implemented 
currently incomplete 
ce interface computing power 
main functionality ce provide uniform interface grid scheduler job submission job control top services offered computing fabric 
services may batch oriented local resource management systems lsf pbs condor 
interactive services model interactivity defined wp 
ce resource ims information monitoring service 
ims provide information jobs managing job submission control ce handle requests job execution job control operations coming grid 
main functionalities include fabric local authorization grid requests mapping grid credentials local credentials fabric resource management system rms translates grid job description local job description language manages local fabric batch interactive services support connections individual farm nodes locations outside fabric grid job submission ce ce checks local authorisation maps grid user credentials local user credentials 
uid gid kerberos tokens 
mapping done statically dynamic account creation 
accomplished job passed fabric resource management system rms 
rms sits top fabric local resource management systems pbs lsf 
rms 
main task rms maintain control fabric farm resources efficient scheduling execution user jobs administrative tasks see section 
sits top different batch interactive services fabric offers 
offer virtual queues load balancing 
virtual queues distribute jobs physical queues may keep backup job executed case queue lost system failure affecting 
rms may offer enhancements functionality underlying scheduling strategies 
fcfs shortest longest deadline scheduling limiting resources job resource reservation job monitoring job dependencies chaining fabric control happens job crashes due system failure local accounting job failure job crashes due kind system failure rescheduled rms case run different queue 
job parameter specifies job completed calendar time run rms report failure ce 
job parameter specify unconditionally failing crashed job reporting ce specify partially created output files preserved 
job status information ce generate handle ask information regarding job 
job status information available ims returning information explicit query callback mechanism back directly user grid scheduler see section job status change 
clarified 
job information may include job status 
started suspended scheduled running failed done job queue information length estimated job start time job resource usage times memory swap number processes job monitoring jobs publish information output debug log files streams act ims producers usual way 
suitable mechanism devised information available grid consumers may 
may allow option archiving information 
accounting rms generate local fabric accounting information stored internal quota management 
subset information available grid wide accounting services 
ce information ce status available ims 
information come rms subsidiary systems 
information produced lowest levels aggregated suitable elements act consumers simple information producers derived information 
highest level aggregated information 
application environment order run job certain application environment required 
application environment defined set software components required specific job type run 
environment defined application wps 
may include application specific packages 
atlas analysis software generic packages 
objectivity root gnu tools 
gcc system components 
kernel glibc 
information availability application environments farm published ims 
type format granularity information wp 
default efficiency application environment fabric see section 
second possibility executables staged job submission 
third possibility setting grid wide dynamic software service require investigation needs feasibility section 
communication jobs enabling outgoing incoming ip traffic fabric nodes site policy decision published ims 
assumptions visibility computing nodes external network reasons including example security policies ipv address space shortcomings 
case nodes don external connectivity need feasibility subsystem support declared connections wide area communication mechanisms ce investigated 
subsystem map request declared connections individual jobs fabric nodes outside grid fabric nodes 
may 
mpi ce restricted external connectivity 
class object diagrams defined 
api soon define api object diagrams user requirements functionality considered 
include methods job submission control described 
job id id result addition ce producer different kinds information fabric status job information described published ims including list types available resources 
queues resource boundaries 
minimal available temporary working storage maximum cpu time maximal running jobs resource status 
current running jobs total jobs resource availability 
time windows resource installed application environment see attached storage elements protocols defined 
gram protocol globus toolkit considered 
services needed ims constraints assumptions assumptions terms existence home directories shared file systems 
uids home directories may volatile created fly removed job completion 
script provided application environment see called job script setting job environment application class 
non grid jobs may share physical resources 
users uniquely identifiable allow resource accounting 
open issues full implications supporting interactive ce understood 
need common understanding interactivity means application wps 
job priorities resource reservations 
support reservation mechanisms priorities expressed application wps 
kind priorities requested reservations compatible priorities clarified application requirements 
job checkpointing job migration 
model specific requirements application wps 
section revised significantly 
particular offer interfaces se grid interface mass storage tape disk storage systems 
layer sits existing storage systems acts interface grid middleware 
sites disk storage se provide disk management system manage data 
data case collection bits stored ascii text database 
se interfaces 
data access interface 
provide basic data access methods get put delete 
interface provided se 
second interfaces optional provide functionality 
provide record level access data open close read write 
third interface provides management interface allow allocation space data guarantee read write grid storage fail due lack space pinning filename generation 
se disk pool full allocate call may trigger deletion old data room new allocation 
interface allow attributes set stored data life time grid storage 
data important master copy lifetime 
emulate scratch storage data stored finite month life time available jobs 
system remove data time 
attributes data master copy flag data important needs stored secure storage disks backed raid tape copies stored fire 
copies intended allow user system recover accidental deletion media failure 
implies publish fact support secure storage grid 
interfaces complex data storage models discussed constructed 
class object diagrams protocols gridftp wan protocols 
services needed information monitoring service constraints assumptions open issues errors handled 
just return error meaningful interpreted replica manager higher level scheduler acted grid know se ce local 
allows scalable efficient storage retrieval query data held type local remote rdbms 
expected service meta data 
core functionality sql insert delete update query 
functionality invoked command line tool web browser programming language api 
defined language platform rdbms neutral network protocol client server 
highest level programming skill required order talk service 
lowest level rich customization data transformation programmable 
architecture classic loosely coupled tier model web example exemplified google amazon com cern web phonebook clients ask server side applications execute requests url parameter encoded xml formatted 
server side application defines logic request converts sql typically substitution arguments template sql query 
sql query dispatched sql database backend tier data storage retrieval 
server side logic trivially converts sql results set canonical xml ships back client application goes processing desired way 
client web browser additional xslt pipeline step server side transforms xml html 
popular architecture problems nature 
fact days hard find organisations choosing approach 
service uses mechanism respective domain 
network transport protocol client server communication https 
reason reliable request response protocol sufficient 
https allows leverage massive existing infrastructure flexible robust scalable easy tools 
vendor programming language lock avoided 
buggy slow hard deploy inappropriate components easily exchanged alternatives effect compatibility interoperability 
data exchange format loosely coupled components xml 
reason xml flexible easy standardized language platform independent widely supported 
naming url 
sql table globally unique identified database instance url followed name table 
query language sql 
reason sql standardized powerful highly efficient 
exposes high level conceptual model hides physical model physical model evolved optimized breaking client code database rdbms 
reason relational dbs low risk solutions understood standardized highly efficient robust scalable 
large range open source commercial implementations available 
security https ssl tls certificates gsi compatible 
reason simply viable option interaction diagram depicts interaction diagram complete request response call chain 
example client wants retrieve metadata associated known logical file names issues get url sql cern ch catalog number query template files defined specifies appropriate sql query query xmlns urn oracle connection select catalog query interactions query parameter substituted template 
full query executed result set returned client canonical xml row lfn host cern ch file lfn size size row row lfn host cern ch file lfn size size row note canonical xml sql table corresponds element sql row corresponds nested row element sql column mapped nested tag name filled value column 
second example assume client wants insert logical file name data sql table 
client issues post url sql cern ch body message holding data inserted row lfn host cern ch file lfn size size row row lfn host cern ch file lfn size size row query template file defines appropriate insert command insert request xmlns urn oracle connection demo table transform trans xsl insert request class object diagram components involved include client browser user appl 
wget netscape server servlet engine apache tomcat load balancing servlet globus cog sql xml mapper database driver rdbms jdbc oracle mysql db api url url url url string body protocols https gsi compatible services needed 
constraints assumptions scalable high availability deployment scenario single shown setup concurrent clients servers runtime engines rdbms instances 
need run different box 
unit run processes threads 
improved performance achieved transparent load balancing levels thread connection transaction pooling 
open issues request cisco ip redirector failover apache tomcat oracle parallel server primary secondary 
linux box scalable high availability deployment producer producer means publishing various producers see section details consumer section information monitoring system 
information published rows sql tables 
producer publish rows single table instantiated description table publishing information 
constructor may take sql create table statement describe tables published invoking insert method sql insert statement argument 
producer object holds little code communicates nearby servlet ensures table structure table exists looks registration schema producer 
class object diagrams shows producer class 
producer instantiated description information producer api offer 
argument table name 
second character string describing columns fixed values 
comma separated list value pairs 
argument constructor string describing tables published 
string takes form sql create table statement 
argument optional table known schema 
publish data insert method invoked 
takes normal sql insert statement 
timestamp set producer derive time stamp system time 
property controls tuples data cached transfer 
timeout property allows person publishing information producer request tuples transmitted buffer full 
controls rows held producer servlet consumers slow 
security gss gsi protocols consumer producer protocol expected xml 
communication producer servlet acting behalf xml 
services needed known constraints assumptions gma architecture suited open issues uncertainties prototype 
consumer consumer means accessing information available various producers see section details producer section information monitoring system 
consumer handles single query expressed sql select statement supports data streamed executed time 
consumer talks servlet information really streamed close network terms process requesting information 
servlet making servlets locates best source information temporary connection producer servlet query executed permanent connection allow data streamed 
query may need split sub queries results multiple producer servlets combined coordinated consumer servlet consumer object users program communicates 
class object diagrams shows consumer classes api 
consumer created string representing sql query consumer api wish execute 
second constructor allows specification url producer connect 
execute query returns case java sql set non zero allows information streamed see records available get record java sql 
security gss gsi protocols consumer producer protocol expected xml 
communication consumer servlet acting behalf xml services needed known constraints assumptions gma architecture suited query splitting result combination practical open issues uncertainties prototype 
allows construction distributed web services 
services register indices 
index register indices 
distributed graph services traversed enable searching 
done higher level services outside scope directory services search engines brokers 
service service description associated 
service description contains information client needs order able effectively communicate service 
descriptions defined xml 
descriptions inherit standardized minimalistic base xml schema 
base schema extended type safe manner 
service registrations automatically expire periodically renewed 
example illustrates sample service description replica manager 
defines mandatory information url type service virtual organization belongs details protocol speaks 
addition optional high level information replica catalog contents clients filter exclude services interesting goals 
note example claim specify layout adopted replica managers 
final layout look different significant ways 
service mandatory url eff cern ch url type replica manager type owner atlas owner email cern ch email protocol version authentication mechanism gsi authentication mechanism cram md authentication mechanism otp protocol mandatory optional catalog type atlas trigger studies type runs id id date date status disk resident size tb runs catalog optional service class object diagram api list list protocols https user password auth 
services needed 
constraints assumptions higher level broker provide advanced search capabilities 
service provide search capabilities capability domain specific better implemented higher level domain specific search service 
open issues purpose submit job suitable job run access resources requires data access 
job fails reasons independent job rescheduled 
guarantee appropriate job monitoring performed 
job described job description language syntax 
job description contain information allow match resources available grid 
typical job description include name executable logical specification input output data specification standard input output error specification input output requirements environment job needs able run operating system software packages 
job description language allows complex job descriptions example consisting multiple tasks dependencies 
possibility requires capability allocate reserve advance resources especially case tasks need communicate mpi 
scheduling decisions criteria including limited location data authorisation constraints accounting information status available resources requirements preferences expressed user 
class object diagrams api api defined include job submission submit job job cancellation cancel job cancel jobs submitted user cancel string user retrieve output sandbox get output sandbox job string path find list computing elements matching job submission request list matches job protocols defined gram possibility 
services needed achieve task needs support services 
identified dependencies services include logging bookkeeping service storing logging bookkeeping information retrieving job status information registration search available services including replication services computing elements storage elements replication services data transfers conversion registration allocation new lfn submission monitoring jobs allocating physical file names allocating storage pinning files information monitoring system obtaining information network security acceptance user request authenticated user proxy credentials corresponding transaction user interface mutually authenticated server credentials 
may need act behalf user processing request submits job computing element 
need may long period time submitted job finished 
allow act user behalf solution envisaged 
user provides credentials valid long period time 
mechanism exists renew expired credentials 
additional interactions grid services mutually authenticated host credentials 
constraints assumptions moment 
open issues schedulers 
personal community schedulers 
security framework 
logging bookkeeping logging bookkeeping service store information scheduling system jobs pass 
bookkeeping information concern user jobs job description job status resource consumption possibly user defined data 
information meant exist lifetime job 
logging information concern scheduling system mainly debugging auditing statistics purposes 
data may stored bookkeeping logging information data different cases 
logging bookkeeping service seen repository status grid schedulers 
way logging service needs highly reliable available constraint required grid schedulers 
facility probably ims 
job state machine job lifetime goes number states submitted job submitted user user interface waiting job received grid scheduler ready computing element best matching job requirements selected scheduled job received computing element running job running computing element checkpointed job suspended checkpointed computing element done job completed aborted job terminated cleared output files retrieved user job removed bookkeeping database 
states allowed transitions shown 
user aborted submitted waiting ready scheduled running done cleared job state machine state changes triggered events generated user interfaces grid schedulers computing elements 
events represent information stored logging bookkeeping service 
job status usually stored directly inferred stored information 
information states may available checkpointed state detectable support local resource management system computing element job runs 
job identifier grid level job referenced unique identifier 
identifier generated user interface reason user interface entity log information submitted state 
exact form string user interface 
grid components handle string literally 
order easily associate job logging bookkeeping service holds information job identifier contain contact string service 
similar reasons identifier contain contact string grid scheduler job submission 
class object diagrams api apis defined write logging bookkeeping service access 
syntax 
syntax investigation 
producer api producer api contains single function 
int char char source event int level char format grid job identifier 
source identifier component generated event 
event type event logged 
level level event ulm draft needed debug usage system 
format format string 
list arguments 
consumer api consumer api contains functions manage job identifier handle events manage connection logging bookkeeping server query logging bookkeeping service handle errors protocols defined 
services needed logging bookkeeping service probably implemented ims 
security commands accepted logging service authenticated user proxy credentials 
corresponding transactions user interfaces grid schedulers computing elements mutually authenticated host credentials 
users allowed monitor jobs 
authorization discussion 
constraints assumptions open issues evaluate implementation top ims 
task efficiently securely copy files grid location similar ftp 
service enables efficient copying files grid 
low level service simple interface smart behaviour 
note uses updates 
source destination status function allows third party transfer 
timeout parallel striped protocols gridftp protocol 
services needed holding physical files monitoring accounting authorisation constraints assumptions 
open issues main purpose provide mapping logical file name physical file names 
logical file name additional file meta information file attributes added 
furthermore location replica information services obtain cost accessing single replicas creating replicas 
service enables storage retrieval information logical files physical files associated metadata file size timestamp owner 
replica catalog service seen database backend tier replica manager 
replica catalog contains zero logical files logical file contains zero physical files 
catalog imposes structure top physical files create delete read physical files 
implemented top rdbms ldap backend 
ubiquitous remote method invocation protocol xml https url encoded https encapsulates shields client applications details underlying backend storage technology 
different backend implementations replica catalog api rdbms ldap introducing interoperability problems 
ways implement replica catalogue amount distribution replica catalogue data 
identify extreme cases catalogue distribution centralised approach distributed approach central replica catalogue service centralized service central data store stores catalogue information contacted applications need map logical physical filename 
assume straight forward implementation catalogue single catalogue server catalogue clients 
pros synchronization problem files kept catalogue 
cons scalable potential bottleneck due wan latency high traffic 
catalog needs replicated avoid outages network problems 
separation administrative responsibility 
distributed replica catalogue service virtual organisation site storage element located replica catalog keeps list locally available files 
pros scalable due partitioning large problem smaller problems 
easy maintain locally administration 
cons difficult synchronize difficult find file efficiently 
clients need know replica catalogs want files locally available 
assume replica catalog sites need synchronised immediately specified example minutes hours relaxed consistency 
convergence achieved eventually 
scalability manageability reasons propose approach hybrid version extremes 
define hierarchical replica catalogue system interconnected parent child replica catalogues forming distributed tree graph see 
structure traversed 
distinguish non leaf replica catalogs leaf replica catalogs leaf replica catalog stores logical file name lfn physical file name pfn mappings locally stored physical replica plus file attributes 
file include file size time step check sum creator master replica owner non leaf replica catalog stores logical file name lfn replica catalog url mappings lfn physical replica subtree 
words non leaf replica catalogues physical file information store url child replica catalogues 
non leaf catalogue redirects requests physical filename children may turn redirect physical file information leaf replica catalog 
additional redirection lookup steps transparent user 
replica catalog maintains local autonomous view subtree 
leaf replica catalogs speak lookup protocol provide exactly lookup api 
consequently hierarchical graph oriented layering possible 
possible structure follows 
storage element multiple leaf replica catalogues located virtual organisation 
refer storage element replica catalogs se rc 
anticipate site host storage elements virtual organisations 
site may integrate storage elements site replica catalog site replica catalog virtual organisation 
small sites may choose omit site replica catalog 
example consider potential structure cms experiment see storage element storage element replica catalog started just cms 
cms decides configure intermediate replica catalog tier site infn ral 
plus single global root replica catalog cern 
non leaf rcs leaf rcs infn rc cern root rc ral rc cern rc infn se rc ral se rc cern se rc outline hierarchical distributed replica catalogue assume protocol talk replica catalog 
example describe replica catalog lookup interactions redirection protocol 
order indicate redirection step rc replica catalog returns rcr hostname rcr stands replica catalog redirection hostname name host redirected request sent 
example talk host 
client wants look file possibilities connect storage element replica catalog lfn directly 
storage element physical instance file file handle returned 
lookup successful 
serc cern ch lfn cms org triggers myfile db pfn ftp cern ch cms triggers myfile db connect tier replica catalog lfn 
finds lfn return redirection request client knows reconnect query storage element replica catalog choose list storage element replica catalogs 
contains rcr client knows explicitly redirection additional lookup step required 
may want discuss alternative redirection mechanisms 
lfn lookup successful 
cern ch lfn cms org triggers myfile db rcr serc cern ch connect cern root replica catalog 
lfn get back list tier replica catalog sites file 
contacted query get list matching storage element replica catalogs 
contacted real file handle 
lfn system 
cern ch lfn cms org triggers myfile db rcr cern ch api call see needs internal redirection steps lookup request sent non leaf replica catalog 
request sent directly storage element replica catalog additional lookup step required physical file location returned immediately 
redirection step transparently taken client side server side server bottleneck system 
replica catalog needs store urls parent replica catalogues 
information required loosely coupled batched update notification entries added deleted leaf replica catalogue 
update notification propagates chain replica catalog hierarchy 
grid service index maintain parent child relationships replica catalogs 
advantages hierarchical replica catalogue approach summarized follows root rc vo replica catalog interface sql catalog lfn lfn root rc cern ch lfn cms org triggers myfile db rcr site rc cern ch rc protocol globus ldap catalog lfn site rc cern ch lfn cms org triggers myfile db rcr se rc cern ch site rc vo site replica catalog interface sql catalog rc protocol globus ldap catalog lfn se rc cern ch lfn cms org triggers myfile db pfn ftp cern ch cms triggers myfile db se rc vo se replica catalog interface sql catalog rc protocol globus ldap catalog interaction hierarchical distributed replica catalogue scalable large number sites storage elements site storage element autonomous manage files locally api replica manager uses replica catalogue api 
experienced users grid tools grid scheduler direct access replica catalogue 
logical physical files carry additional meta data form attributes 
logical file attributes may include items crc check sum file creation timestamp 
physical file attributes may include master flag catalog insertion update timestamps 
additional standard attributes may defined 
add add logical file replica catalogue 
add gets names physical files belonging logical file 
add attributevalue list attribute value pairs add attributevalue list attribute value pairs protocols xml url encoding https 
services needed globus replica catalog ldap 
constraints assumptions 
open issues interested discussing precisely collection useful 
knowledge file replicas service responsible consistent replica creation moving deletion 
note maintaining consistency replicas different sites storage locations task consistency service top replica manager 
consistency service deals updates replicas guarantees certain levels consistency 
note data read consistency service applicable data modified available grid 
research necessary order define detailed architecture 
responsible computing cost estimation replica creation 
information cost estimates network bandwidth staging times se load indicators gathered ims 
policy issues handled 
instance rm create new replica site check local policy site 
example person group write access 
quota full 
rm responsible keeping rcs data synchronized actual files se 
normally se inform rm deletes file 
possible file removed rms knowledge 
handle problem rm periodically ask se replica 
discussion necessary 
better remove entry pin request fails 
api api includes functions enters physical file replica logical file assigns appropriate file attributes 
logical file name exist physical file marked master replica 
method include data movement 
words method delegates 
method followed 
removes association lfn pfn tells se holding physical file needed 
returns list known replicas logical file name 
words simply delegates replica catalog possibly automatically redirections 
copy source destination string protocol status method select appropriate file transport protocol explicitly specified 
determines necessary transport file names selected protocol 
delegates source destination method order copy file 
note destination includes non se locations localhost 
source destination lfn string protocol status chains copy 

reliable atomic transaction 
words file copied source destination done successfully destination file entered replica logical file 
filename generates satisfying 
selects delegates name generation 
specifies restrictions legal returned 
empty pattern indicates user happy pfn 
pattern specify list suitable ses desired directory prefixes prepended generated names 
additional input parameters access rights may added call set attributes 
source destination string protocol time method select appropriate file transfer protocol explicitly specified 
estimates time copy 
take 
cost functions defined best replica returned 
protocols decided 
potential candidates ldap soap https cgi servlet https services needed storage retrieval metadata 
physical transport disk pool management ims monitoring information lookup accounting smart decisions replica placement selection constraints assumptions 
open issues note api add notion collections 
interested user requirements related file collections 
note response user requirements lfn defined liberal consists lfn hostname followed separator followed arbitrary application specific string 
arbitrary strings necessarily follow directory path conventions associate hierarchical tree semantics lfn 
file collection implicitly modelled set files contained lfn directory 
seen freedom allowing arbitrary strings drawbacks prohibits interpretation directory paths 
applications require directory path structure lfn conventions may need revisited 
applications need available ces run 
typically applications range libraries responsibility application application expects find place glibc 
dependencies exist different components libraries application 
pre installed software environment ce run job incomplete need service respecting dependencies dynamically set environment application run 
efficiently require kind caching mechanism expect data management services 
caches old programs eliminated promptly 
class object diagrams api defined 
protocols defined 
services needed constraints assumptions considered 
open issues considered 
chapter infrastructure facilities listed may stage services 
network network 
network capabilities include ability ask various quality service qos levels ability advanced reservations 
example grid user wishing run large interactive job request simultaneous advanced reservations compute element storage element premium qos channel sites tomorrow 
advanced network capabilities incorporated datagrid project depending available 
fabric management functionality provided computing fabric classified main categories user job execution batch interactive cpu services administration computing fabric 
ce described section 
represents interface fabric grid 
administrative services grid services intended system administrators operators running systems maintenance 
goal deployment management reduced systems administration operation costs large computing fabrics containing nodes 
main management functionalities node installation automated node installation maintenance software distribution installation management application software packages nodes fabric monitoring job node service monitoring inside fabric resource management user jobs administrative tasks scheduling fault tolerance fault recovery node fabric level configuration management central configuration database fabric configuration information fabric configuration information stored central fabric configuration database 
information re installing computer nodes defined profiles deploying requested software packages 
resource management system efficiently schedule user jobs nodes coordinate systems maintenance tasks 
fabric monitoring service node status information collected correlated service status alarm views 
fabric monitoring allow user job monitoring 
information fabric monitoring fault tolerance system triggered system automated error recovery 
functionality node installation software distribution bootstrap installation server responsible initial machine install 
provide node initial system environment re installing 
system parameters site policies applied node configuration stored configuration database 
node management system agent running node responsible fetching installing configuring upgrading verifying software packages system components applications defined configuration database specific node node profile 
disk server farm cpu node 
configuration management central configuration database store hardware system application configuration fabric 
graphical configuration editor command line interface provided accessing querying modifying database content 
modification requests subject validation 
access database authentication authorization 
resource management resource management system rms coordinates user jobs execution administrative tasks fabric farm nodes 
sure integrity user jobs preserved affected updates done system application environment 
rms control tasks running node 
rms able include exclude nodes farms required operator fault tolerance system 
rms handle manage grid user jobs running fabric see section 
fabric monitoring goal fabric monitoring twofold 
hand monitoring performance functional environmental changes resources contained fabric order allow optimised utilization resources 
hand monitoring system provide interface applications insert monitoring measurements 
monitoring fabric components detect operational problems trigger automatic remedy actions fault tolerance system 
fabric managers operators get health status view services resources accounting history data 
fault tolerance faults node trigger execution recovery actions defined fault tolerance system 
problems tried solved automatically node problem fixed locally 
hardware failure cpu initiate corrective action service level 
moving service node 
security security architecture supports definition management credentials security policies multiple security domains contained datagrid project 
cryptographically secure communication mechanisms essential part connectivity layer grid architecture defined foster kesselman tuecke :10.1.1.129.8850
requirements global grid wide security credentials policies architecture leaves local site manager full control local resources policies 
global security credentials mapped local credentials 
multiple local security implementations supported including unix kerberos solutions 
possible security solutions existing standards enable interoperation grid projects 
standards developed ggf ietf include generic security services api gss api grid security infrastructure gsi globus transport layer security tls protocols format identity certificates 
security services useful classification general network security services authentication authorisation integrity confidentiality nonrepudiation availability general network security services required grid computing 
subsequent version datagrid architecture include definition security grid services 
version general network services described comments grid 
authentication service allows users processes machines prove identities 
context grid computing includes support single sign grid users authenticate gain access grid resources authentication 
single sign achieved delegation user credentials processes new process act user users rights 
user able restrict delegation process acquire limited sub set users rights 
process possessing delegated credentials turn able delegate restricted credentials process 
authorisation service allows managers resources deny access resources authenticated users processes 
grid connectivity layer individual users entities 
collective layer allow authorisation vo membership groups ability act particular role particular privilege 
integrity service ensures messages received sent loss addition modification data transmitted 
confidentiality protects transmission data eavesdropping 
nonrepudiation prevents sender receiver denying transmission receipt message 
availability 
number security attacks commonly called denial service attacks result loss availability degraded performance 
security requirements site security managers need able record log security operations 
security audit service includes logging initial sign grid instances mapping global local security entities instances delegation users rights normal security auditing local security domain unix kerberos system 
resource allocation quotas related accounting service global security entities directly part security architecture 
covered 
compute element storage element security issues number important issues resolved order provide file level authentication access ce local se 
depending see different security models possible 
model assume ce uses local file semantics open files 
example ce attached nfs san standard unix open commands security uid 
security implications 
ce se user group ids user group read write permissions set appropriately 
example set files group read writeable prevent group member overwriting group members files 
supporting grid supplied acls file access difficult model 
second model assume local file semantics available file access gridftp 
gridftp library supports unix io file access open close read write seek lock 
method file access permissions checked standard grid authentication mechanisms 
problem method requires applications replace open calls 
may applications systems objectivity oracle possible 
hybrid models required 
need better understand wp requirements cases determine optimal solution issue 
addition file level security issues issue individual farm nodes access remote ses remote grid services directly 
farms configured node access internet nodes internal subnet 
case may need gateway node proxy grid communication non local grid services shown 
issue investigation 
ce se connectivity protocols open issues task specifying security architecture just started number open issues fact large 
issues currently described 
early implementations security authorisation service support authorisation individual users simple groups users 
complete vo community authorisation system allowing complex group structures roles privileges developed 
described current authorisation scheme relies creation local access control lists control local security implementation unix kerberos 
longer term requirement definition form global access control security entities described globally 
chapter cases illustrate services described document describe simple cases 
meant demonstrate complete functionality point key capabilities architecture 
describe case words show collaboration sequence diagram show implemented services described note moment completely worked submit run simple batch job process input file produce output file batch job imagine 
user specifies job file executable usr local atlas sh requirements ts gb input lfn lfn atlas hep foo argv pfn input lfn output lfn lfn atlas hep foo output se datastore rl ac uk argv pfn output lfn script submitted bin sh home tmp grep higgs home tmp home tmp home tmp shows processing achieved 
user submits job gs 
gs asks rm list specified input file scheduler determines possible run job ce local 
locates best ce job creates new replica input file se local ce 
gs allocates space output file se pins input file deleted staged tape job completed 
job submitted ses job queue 
gs notified job completed tells rm create copy output file site specified 
rm tag copy output file master original file replica 
run simple grep job chapter glossary acronyms detail please see index 
ce grid enabled computing resource gs service responsible selecting grid resources job 
ggf global grid forum www org gis grid information service ims globus mds gma grid monitoring architecture monitoring architecture defined ggf gsi grid security infrastructure globus security mechanism ims information monitoring system catalogue distribute static dynamic data grid job description language describe grid jobs lfn logical file name globally unique name identify specific file mapped rc local resource management system controls resources ce pbs lsf pfn physical file name url actual physical instance lfn rc associates lfn replica copy file managed grid middleware rm provides services related replicas san storage area network se grid enabled storage system tfn transport file name url access file se 
uml unified modeling language notation describing software systems vo virtual organization set individuals defined certain sharing rules members collaboration 
pleasure ian foster carl kesselman acted consultants gave lot think project 
wish acknowledge input offered ingo augustin federico 
appendix classes description classes identified far 
automatically generated 
provided appendix responsibilities list understanding responsibilities realise various components 
component wp comment consumer fabric management logging bookkeeping network producer security security bibliography grady booch james rumbaugh ivar jacobsen 
unified modeling language guide 
addison wesley 
castor project status 
cern ch pdp castor presentations chep 
ewa deelman ian foster carl kesselman miron livny 
griphyn data grid architecture 
draft jan 
data storage system 
www gov 
steve fisher 
relational model information monitoring 
technical report ggf 
foster kesselman tsudik tuecke 
security architecture computational grids 

ian foster carl kesselman steven tuecke :10.1.1.129.8850
anatomy grid enabling scalable virtual organizations 
technical report ggf 
basics high performance storage system 
www sdsc edu projects hpss 
fowler scott 
uml distilled 
addison wesley second edition 
practical uml 
akamai net files services index html 
ietf rfc 
ftp ftp isi edu notes rfc txt 
ietf rfc 
ftp ftp isi edu notes rfc txt 
interface document 
esa datagrid docs docs doc 
brian tierney rich wolski ruth valerie taylor 
grid monitoring service architecture 
technical report ggf 
itu recommendation 
index access control api archive ce see collection collective services consumer data replication fabric file ggf see global grid forum global grid forum globus gma see grid monitoring architecture grid monitoring architecture https ims see information monitoring system information monitoring system java see job description language job control job description language language logical file master mds naming conventions object physical file pin producer protocol python rdbms registry replica replication resource responsibilities schema se see servlet sql transport file name ui see user interface uml url user interface virtual organisation vo see virtual organisation xml 
