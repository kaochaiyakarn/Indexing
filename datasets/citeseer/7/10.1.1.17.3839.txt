pvs combining specification proof checking model checking appear cav owre rajan rushby shankar srivas computer science laboratory sri international menlo park ca usa rushby shankar csl sri com url www csl sri com pvs html phone fax pvs prototype verification system environment constructing clear precise specifications developing readable proofs mechanically verified 
designed exploit synergies language deduction automation interaction theorem proving model checking 
example type system pvs requires theorem proving establish type correctness conversely type information extensively proof 
similarly decision procedures heavily order simplify tedious obvious steps proof leaving user interactively supply high level steps verification 
model checking decision procedure discharge temporal properties specific finite state systems 
variety examples functional programming fault tolerance real time computing verified pvs 
substantial pvs verification microcode selected instructions commercial scale microprocessor called designed rockwell collins containing transistors 
pvs applied verification design srt divider 
key elements pvs design described greater detail 
combining theorem proving typechecking pvs specification language classical simply typed higher order logic type system augmented subtypes dependent types 
typechecking undecidable pvs type system pvs typechecker automatically checks simple type correctness generates proof obligations corresponding predicate subtypes 
proof obligations discharged pvs proof checker 
pvs parametric theories possible capture say notion sorting respect arbitrary sizes types ordering relations 
exploiting subtyping dependent typing parametric theories researchers nasa langley research center sri developed general bit vector library 
paul miner nasa development pvs funded sri international ir funds 
various applications customizations funded nsf ccr nasa arpa contract nrl contract 
developed specification portions ieee floating point standard pvs 
pvs injective function space injection defined higherorder predicate subtype higher order predicate injective 
shown 
notation injective 
abbreviation ff injective subtype functions predicate injective 
holds 
functions type theory var 
var injective bool forall 
injection type injective 
functions define subtype numbers declare function double injective function type natural numbers nat subtype 
type fi nat exists nat jg double injection nat lambda nat declaration double typechecked typechecker generates proof obligations type correctness conditions tccs 
tcc checks result computed double number 
second tcc checks definition double injective 
tccs proved quickly automatically default tcc strategy employed pvs proof checker 
proofs complicated tccs constructed interactively 
pvs specification language number features exploit interaction theorem proving typechecking 
conversely type information heavily pvs proof predicate subtype constraints automatically asserted decision procedures quantifier instantiations typechecked generate tcc subgoals proof attempt 
practical experience pvs type system rapidly detect lot common specification errors 
combining decision procedures interactive proof decision procedures 
pvs employs decision procedures include congruence closure algorithm equality reasoning various decision procedures various theories linear arithmetic arrays tuples presence uninterpreted function symbols 
pvs merely decision procedures prove theorems record type constraints simplify subterms formula assumptions govern occurrence subterm 
governing assumptions test parts surrounding conditional expressions type constraints governing bound variables 
simplifications typically ensure formulas large course proof 
important fact automatic rewriting closely coupled decision procedures conditions type correctness conditions discharged applying rewrite rule easily decision procedures 
strategies 
pvs proof checker provides powerful primitive inference steps heavy decision procedures proof construction solely terms inference steps quite tedious 
pvs provides language defining high level inference strategies similar tactics lcf 
language includes recursion binding construct backtracking try strategy construction conditional strategy construction 
typical strategies include heuristic instantiation quantifiers repeated skolemization simplification rewriting instantiation induction followed simplification rewriting 
strategies currently pvs commonly 
intermediate steps defining powerful strategies 
powerful primitive inference steps possible define small number robust flexible strategies usually suffice productive proof construction 
integrating model checking theorem proving theorem proving approach program verification verifies property program proving oe model checking approach verifies program showing state machine satisfying model control intensive approaches small finite states model checking effective traditional hoare logic style proof involves discovering sufficiently strong invariant 
approaches traditionally seen incompatible ways viewing verification problem 
able unify views incorporate model checker decision procedure defined fragment pvs 
integration uses mu calculus medium communicating pvs model checker propositional mu calculus 
integration verify complicated communication protocol means abstraction model checking prove correctness process mutual exclusion protocol way induction step correctness process version protocol verified model checker 
general mu calculus state type essentially provides operators defining greatest fixpoints monotone predicate transformers 
park mu calculus state type restricted tuple booleans extends quantified boolean formulas propositional logic boolean quantification include application ary boolean predicates argument formulas 
relational terms constructed means lambda abstraction fixpoint ary predicate variable monotone predicate transformer 
greatest fixpoint operation written defined 
mu calculus easily defined pvs 
temporal operators branching time temporal logic ctl defined mu calculus 
efficient model checking algorithm propositional mu calculus emerson lei symbolic variant employing bdds burch 
pvs employs bdd mu calculus validity checker due janssen 
state type finite constructed inductively booleans scalar types records tuples arrays subranges mu calculus finite types corresponding ctl translated boolean mu calculus model checking decision procedure fragment 
discuss details encoding see 

burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation june 

emerson lei 
efficient model checking fragments propositional mu calculus 
proceedings th symposium principles programming languages pages new orleans la january 
association computing machinery 

gordon milner wadsworth 
edinburgh lcf mechanized logic computation volume lecture notes computer science 
springer verlag 

klaus havelund shankar 
experiments theorem proving model checking protocol verification 
formal methods europe fme number lecture notes computer science pages oxford uk march 
springer verlag 

janssen 
robdd software 
department electrical engineering eindhoven university technology october 

steven miller srivas 
formal verification microprocessor case study industrial formal methods 
workshop industrial strength formal specification techniques pages boca raton fl 
ieee computer society 

paul miner 
defining ieee floating point standard pvs 
technical memorandum nasa langley research center 

sam owre john rushby natarajan shankar friedrich von henke 
formal verification fault tolerant architectures prolegomena design pvs 
ieee transactions software engineering february 

rajan shankar srivas 
integration model checking automated proof checking 
pierre wolper editor computer aided verification cav volume lecture notes computer science pages liege belgium june 
springer verlag 

srivas shankar 
modular verification srt division 
rajeev alur tom henzinger editors computer aided verification cav lecture notes computer science new brunswick nj july 
springerverlag 
appear 

robert shostak 
deciding combinations theories 
journal acm january 

