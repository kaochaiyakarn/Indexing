functional reactive animation conal elliott microsoft research graphics group conal microsoft com paul hudak yale university dept computer science paul hudak yale edu fran functional reactive animation collection data types functions composing richly interactive multimedia animations 
key ideas fran notions behaviors events 
behaviors time varying reactive values events sets arbitrarily complex conditions carrying possibly rich information 
traditional values treated behaviors images treated animations 
notions captured data types programming language provide denotational semantics including proper treatment real time guide reasoning implementation 
method ectively efficiently perform event detection interval analysis described relies partial information structure domain event times 
fran implemented hugs yielding surprisingly performance interpreter system 
examples including ability describe physical phenomena involving gravity springs velocity acceleration ordinary di erential equations 
construction richly interactive multimedia animations involving audio pictures video graphics long complex tedious job 
di culty believe stems lack su ciently high level abstractions particular failure clearly distinguish modeling presentation words animation 
consequently resulting programs explicitly manage common implementation chores content animation presentation low level display libraries running sequential digital computer 
implementation chores include stepping forward discretely time simulation frame generation animation conceptually continuous capturing handling sequences motion input events motion input conceptually continuous time slicing update time varying animation parameter parameters conceptually vary parallel allowing programmers express interactive animation hope automate presentation 
point view surprising set richly expressive recursive data types combined declarative programming language serves comfortably modeling animations contrast common practice imperative languages program conventional hybrid modeling presentation style 
non strict semantics higher order functions strong polymorphic typing systematic overloading valuable language properties supporting modeled animations 
reasons fran provides data types programming language haskell 
advantages modeling presentation benefits modeling approach animation similar favor functional declarative programming paradigm include clarity ease construction composability clean semantics 
addition application specific advantages ways compelling painting picture software engineering user perspective 
advantages include authoring 
content creation systems naturally construct models users systems think terms models typically expertise interest programming presentation details 

model systems contain presentation sub system able render model constructed system 
higher level information available presentation sub system presentation programs opportunities optimization 
regulation 
presentation sub system easily determine level detail management sampling rates required interactive animations scene complexity machine speed load mobility safety 
platform independence modeling approach facilitates construction mobile applications provably safe world wide web applications 
essence modeling goal convey essence modeling approach reactive animations captured fran summarized concepts 
temporal modeling 
values called behaviors vary continuous time chief values interest 
behaviors class values built compositionally concurrency parallel composition expressed naturally implicitly 
example expression evaluates animation image behavior containing circle square 
time circle size sin square size cos bigger sin time circle bigger cos time square 
event modeling 
behaviors events firstclass values 
events may refer happenings real world mouse button presses predicates animation parameters proximity collision 
events may combined arbitrary degree complexity factoring complex animation logic semantically rich modular building blocks 
example event describing left button press time simply lbp describing time squared equal just predicate time logical disjunction just lbp 
predicate time 
declarative reactivity 
behaviors naturally expressed terms reactions events 
reactive behaviors declarative semantics terms temporal composition imperative semantics terms state changes employed event formalisms 
example color valued behavior changes cyclically red green button press described simple recurrence red untilb lbp green untilb lbp haskell identifiers infix operators untilb infix operators identifiers enclosing parentheses lambda abstractions written vars exp 

polymorphic media 
variety time varying media images video sound geometry parameters types spatial transformations colors points vectors numbers operations image rotation sound mixing numerical addition fit common framework behaviors reactivity 
instance untilb operation polymorphic applying types time varying values 
contributions captured features collection recursive data types functions primitive graphics routines system call fran functional reactive animation 
data types functions form programming language usual sense provide formal denotational semantics including proper treatment real time allow precise implementation independent reasoning 
semantics includes cpo real time approximate elements allow reason events occur 
true new programming language denotational semantics extremely useful designing fran 
design decisions understanding formal semantics followed reflecting semantics implementation 
semantics section 
novel aspect fran implicit treatment time 
provides great deal expressiveness multimedia programmer presents interesting challenges respect formal semantics implementation 
particular events may specified terms boolean functions continuous time 
functions may true arbitrarily brief periods time instantaneously challenging implementation detect events 
solve problem robust cient method event detection interval analysis 
implementation issues discussed section 
specifically nature event exploited eliminate search intervals time event provably occur focus time intervals event may occur 
cases collection bouncing balls exact event times may determined analytically 
general quite frequently analytic techniques fail apply 
describe algorithm event detection interval analysis relate partial information structure cpo event times 
formal semantics fran fundamental notions fran behaviors events 
treat pair mutually recursive polymorphic data types specify operations denotational semantics 
media types events behaviors treated formally see 
semantic domains domain time called time 
domains polymorphic behaviors behaviors polymorphic events events denoted behavior event respectively 
domains integers booleans standard require explanation 
time domain requires special treatment wish values time include partial elements 
particular know time value don know exactly final value 
notion precise define domain pointed cpo time follows denote set real numbers include set elements 
set comes equipped standard arithmetic ordering including fact 
define time elements second copy distinguished prefixing read 
define time domain information ordering time easy see time bottom element 
note limit point just lub set partial elements pre times approximate ordering domain time chain chain lub recall top element domain time pointed cpo 
fact necessary ensure recursive definitions defined 
elements time useful approximating time event occurs 
event time approximately actual time occurrence greater note time event occurs just lub 
extend definition arithmetic time defining behavior subdomains follows read time equal time 
undefined 
easily show extended function type time time bool continuous respect 
various places semantics follows 
semantic functions define interpretation behaviors function time values producing value behavior time behavior time define interpretation events simply nonstrict time pairs describing time information associated occurrence event 
occ event time know semantic domains working various behavior event combinators formal interpretations 
semantics behaviors behaviors built behaviors static varying values events collection constructors combinators 
time 
simplest primitive behavior time semantics time behavior time time time just identity function time 
lifting 
general way lifting functions defined static values analogous functions defined behaviors 
lifting accomplished conceptually infinite family operators arity functions 
lift 
behavior 
behavior behavior lift 
bn 
bn note constant value lifting just lift notational aside practice lifting needed quite frequently inconvenient lifting explicit 
desirable familiar names sin cos literals blue refer lifted versions standard interpretations 
instance literal behave constant behavior lift summation behaviors behave lift curried addition 
implementation fran haskell type classes help considerably num class provides convenient implicit mechanism lifting numerical values 
particular suitable instance declaration achieve exactly interpretations literal constants 
time transformation 
time transform allows user transform local time frames 
supports call temporal modularity behaviors types 
similarly transforms support spatial modularity image geometry behaviors 
behavior behavior time behavior tb tb note time identity time examples time transformation fran expression time slows animation factor time delays seconds 
integration 
integration applies real valued vector valued behaviors generally vector spaces limits 
borrowing haskell type class notation classify vector space types integral vectorspace behavior time behavior integral integration allows specification velocity behaviors twice acceleration behaviors 
example velocity moving ball behavior constant velocity position relative starting time integral provides natural means express physics animations examples section 
reactivity 
key interplay fran behaviors events behaviors reactive 
specifically behavior untilb exhibits behavior occurs switches behavior associated formally untilb behavior event behavior behavior untilb te te occ note inequality te defined section 
section examples reactivity various kinds events 
semantics events event handling 
order give examples specific kinds events describe notion event handlers applied time data associated event operator event time event occ te te occ convenience derived operations ignore time data event event event time event event event ev ev ev ev ev ev di erent operator symbols somewhat receives parameters receives parameters receives time receives data 
constant events 
simplest kind event specified directly time value 
time event occ te example behavior untilb exhibits behavior time point begins exhibiting behavior ignored example course needn 
external events 
consider kind external event mouse button presses left right button 
value associated button press event corresponding button release event turn yields unit value unit type lbp rbp time event event meaning event lbp example pair te time left button press event corresponding left button release te behavior untilb lbp untilb exhibits behavior left button pressed point left button released point predicates 
natural want specify certain events time boolean behavior true time 
predicate behavior bool time event occ predicate inf time predicate event infimum set times greater behavior true 
note time equal behavior untilb predicate sin time exhibits time sin exhibits boolean behavior argument predicate arbitrarily complex computable function predicate computable 
cope problem restrict behaviors somewhat predicate computable cient 
return issue section 
choice 
choose earlier events 
operator 
event event event occ 
te te te occ occ example behavior untilb lbp 
predicate time waits left button press timeout seconds switching behavior behavior alternative example switches di erent behavior timeout 
untilb lbp 
predicate time snapshot 
moment event occurs convenient take snapshot behavior value point time 
snapshot event behavior event occ snapshot te te occ example behavior untilb lbp snapshot sin time 
grabs sine time left button pressed binds continues behavior presumably depends example achieved grabbing time left button press event computing sine general behavior snapshot arbitrarily complex may fact dependent external events 
event sequencing 
useful event generate 
event event occurs occurs value part event event event occ occ snd occ function named join operator event monad 
example event lbp predicate occurs time behavior value zero left button press time larger examples previous section primitive combinators behaviors events formal semantics 
examples illustrate combinators 
examples haskell code correspondence formal semantics obvious 
values examples behaviors explicitly say 
define couple simple utility behaviors 
varies smoothly cyclically 
wiggle sin pi time wiggle define function smoothly varies argument values 
lo hi lo hi lo wiggle create simple animation red ball 
red bigger circle function bigger scales second argument amount specified argument argument behavior result behavior case ball size varies full size half full size 
key attribute fran behaviors composable 
example manipulated move time bigger yields ball moving circular motion radius rate proportional time 
ball red original size 
certain external phenomena treated behaviors 
example position mouse naturally thought vector behavior 
cause image track exactly position mouse need im move mouse im function move shifts image set vector 
natural way define animation terms rates 
example expand mouse follower idea having image follow mouse rate dependent far image current mouse position 
im move offset im offset integral rate rate mouse 
pos pos origin offset note mutually recursive specification offset rate pos set starts zero vector grows rate called rate 
rate defined difference mouse location mouse primitive behavior represents mouse position animation position pos 
pos turn defined terms set relative origin 
result image pursues mouse moves faster distance greater 
operation adds point vector yielding point 
subtracts points yielding vector 
variation virtually attach image mouse cursor spring 
definition similar position defined starting point growing set 
time rate changing rate call accel 
acceleration defined part di erence mouse position image position add drag tends slow image adding acceleration direction opposite movement 
increasing decreasing drag factor creates drag 
im move offset im offset integral rate rate integral accel accel mouse 
pos rate pos origin offset operator multiplies real number vector yielding vector 
example event handling behavior describes color changes red blue time left button pressed 
accomplish change help function cycle takes colors gives animated color starts 
button pressed swaps repeats recursion 
anim cycle red blue circle cycle untilb lbp cycle bounce minval maxval path path start start untilb start lift integral lift integral reciprocity event returns new collide snapshot snd reciprocity collide predicate lift maxval dimensional bounce note time argument recursive call cycle supplied automatically 
example number valued behavior starts zero left button pressed right button pressed 
untilb lbp nonzero 
rbp nonzero nonzero untilb function control rate growth image 
pressing left right button causes image shrink grow released 
put way rate growth 
grow im bigger size im size integral rate rate simple modification grow function causes image grow shrink rate size exponentially 
grow im bigger size im size integral rate rate size example demonstrates colors animated 
function rgb color behavior created fixing blue component allowing red green components vary time 
rgb abs cos time abs sin time circle final example develop modular program describe bouncing balls 
note physical equations describing position velocity time object accelerated gravity dt dt initial position velocity respectively object time fran equations simply lift integral lift integral define function bounce addition computing position object equations determines ball hit floor ceiling reverses direction ball reducing velocity certain reciprocity account loss energy collision 
code bounce shown 
note collision defined moment position exceeded minval velocity negative position exceeded maxval velocity positive 
collision detected current position velocity snapshot cycle repeats velocity negated scaled reciprocity factor 
various operators lifted versions underlying operators 
bounce defined describe horizontal movement acceleration 
simulate bouncing ball box simply write green circle bounce xmin xmax vx bounce ymin ymax vy xmin xmax ymin ymax dimensions box 
implementation formal semantics section serve implementation quite 
section describe non obvious implementation techniques fran 
relatively minor item integration 
symbolic integration certainly simple behaviors adapted standard textbook numerical techniques 
chiefly fourth order runge kutta 
representing behaviors early implementation fran represented behaviors implied formal semantics data behavior behavior time representation leads serious ine ciency 
see consider simple sequentially recursive reactive behavior 
toggle true toggle val lift val untilb lbp toggle val behavior toggles true false left button pressed 
suppose sampled time button press need sample time needs notice button press see second button press 
events sampling verify times past events running time lazily expanded representation 
try eliminate spacetime leak switching stateful implementation doing interfere behavior ability support multiple simultaneously time transformed versions 
solve problem having behavior sampling generate value new possibly simpler behavior 
data behavior behavior time behavior fact slightly complex representation explained section 
event detected te new behavior sampled resulting value possibly simplified version returned 
cases ones involving time transform original untilb behavior longer accessible gets garbage collected 
note optimization implies loss generality sampling done monotonically non decreasing times 
ciency issues apply integration eliminating need re start integration sampling 
fact formulation numerical integration sequentially recursive reactive behaviors 
implementing events really key challenges event detection avoid trying soon catch events catch events ciently robustly need 
form laziness challenge technique called interval analysis 
representing events lazily 
recall semantics reactivity untilb behavior event behavior behavior untilb te occ note values untilb behavior depend precise value just partial information te observation crucial may quite expensive case user input impossible know value te time te arrives 
represent time te chain lower bound time values increasing monotonically respect information ordering defined section 
chains evaluated lazily detection done progressively demand 
detecting predicate events 
second implementation challenge raised events determine predicate events occur 
instance consider event occurs predicate time exp time technique solely sampling behaviors fail detect events boolean behaviors true instantaneously 
alternative technique symbolic equation solving 
unfortunately simple examples equations solved symbolically 
technique detect predicate events interval analysis ia :10.1.1.56.7431
uses information behavior extracted purely sampling require symbolic equation solving 
behavior able tell sample time maps sample value produce conservative interval bound values taken behavior interval precisely operation mapping time intervals intervals property valued behavior time interval time interval represented simply pair values data upto instance upto represents interval set 
implementation behavior contains time sampling interval sampling functions data behavior behavior time behavior time behavior example behavior time maps times time intervals returns unchanged behavior 
time behavior time time behavior time iv iv time lifting functions level behaviors works similarly description section additionally maps domain intervals range intervals re applies lifted functions possibly altered behavior arguments 
instance lift implemented follows 
lift fi behavior sample sample lift fi iv fi xi xi lift fi xi iv xi iv restriction behaviors referred section event detection possible behaviors composed functions corresponding fi known lift functions 
fi called inclusion functions defining functions behaviors intervals understood omit details point haskell type classes provide convenient notation interval versions standard arithmetic operators :10.1.1.56.7431
example evaluating upto upto yields interval 
useful ia technique exploit intervals monotonicity 
instance exp function monotonically increasing sin cos functions change monotonically increasing monotonically decreasing intervals width 
apply ia boolean behaviors consider booleans ordered false true 
nonempty boolean intervals corresponding behavior true 
example interval form equality checks interval arguments overlap 
answer uniformly false 
intervals singleton interval answer uniformly true 
ia knows answer may true false interval 
specifically lo upto hi lo upto hi hi false upto false lo hi lo hi lo lo true upto true false upto true similarly straightforward define interval versions inequality operators logical operators conjunction disjunction negation 
background detection predicate events ia straightforward 
start time choose time evaluate boolean behavior yielding boolean intervals listed 
result uniformly false guaranteed lower bound event time 
uniformly true event time infimum times 
interval split half halves considered starting earlier half looking time boolean behavior true 
point recursive search interval divided smaller desired degree temporal accuracy point event detection claims success 
event detection algorithm captured definition predicate appendix function uses divide conquer strategy narrowing interval double conquer strategy searching right unbounded time interval 
idea event seconds look bit seconds time 
possible apply ia positional user input 
idea place bounds rate acceleration positional input worst case analysis bounds 
implemented idea 
related henderson functional geometry purely declarative approaches graphics deal animation reactivity 
researchers declarative languages suited modeling pictures 
examples include 
arya lazy functional language model animation lazy lists pictures constructed list combinators 
quite elegant lists implies discrete model time somewhat unnatural 
problems discrete model include fact time scaling di cult requiring throwing away frames interpolation frames rendering animation requires frame rate match discrete representation frames generated fast perceived animation slow 
continuous model avoids problems pleasant property animations run precisely speed regardless fast underlying hardware slower hardware generate smooth animations run rate 
system modeled animations functions continuous time behavior type family 
behaviors built combinators automatically invoked solution high level constraints 
continuous time able support derivatives integrals 
idea elevating functions static values functions behaviors adopted 
approach reactivity handled imperatively constraint assertion retraction performed application program 
cml concurrent ml formalized synchronous operations class purely functional values called events 
event combinators correspond cml choose wrap functions 
substantial di erences meaning events approaches 
cml events ultimately perform action reading input writing output file process 
contrast events purely values generate 
values turn behaviors new events tuples functions concurrent haskell extends pure lazy functional programming language haskell small set primitives explicit concurrency designed haskell monadic support system purely functional technical sense semantics strongly imperative feel 
expressions evaluated side ects yield concurrent imperative computations executed perform implied side ects 
contrast modeling entire behaviors implicitly concurrent functions continuous time yields consider declarative feel 
haskore purely functional approach constructing analyzing performing computer music common henderson functional geometry completely di erent medium 
haskore points useful algebraic properties declarative systems possess 
computer music languages worth mentioning include canon fugue language developed purely declarative 
fugue highlights utility lazy evaluation certain contexts extra ort needed lisp context non strict language haskell essentially comes free 
directx animation library developed microsoft support interactive animation 
fran directx animation grew ideas earlier design called 
directx animation mainstream imperative languages mixes functional imperative approaches 
languages designed synchronous data flow notion computation 
generalpurpose functional language lucid example style language importantly languages signal lustre specifically designed control real time systems 
signal fundamental idea signal time ordered sequence values 
fran time value implicit ordering values signal 
nature time discrete continuous emphasis relative ordering values data flow framework 
designers signal developed clock calculus reason signal programs 
lustre language similar signal rooted notion sequence owing nature lucid 
writing rich reactive animations potentially tedious error prone task conventional programming methodologies primarily attention needed issues presentation 
described system called fran remedies problem concentrating issues modeling leaving presentation details underlying implementation 
formal semantics described implementation haskell runs acceptably fast hugs interpreter 
lies improving performance standard compilation methods domain specific optimization techniques extending ideas graphics sound investigating applications modeling approach software development 
implementation fran currently runs windows nt version hugs haskell implementation developed collaboratively yale nottingham glasgow universities 
convenient developing animation programs quick turn modification execution runs acceptable performance byte code interpreter 
expect marked performance improvement fran running ghc glasgow haskell compiler 
better haskell implementations integrated fran programs convenient develop run fast 
hugs implementation includes entire fran system may retrieved www haskell org hugs 
give reader understanding technical ideas underpinning fran power animation engine fun play 
appreciated 
wish jim kajiya early discussions stimulated ideas modeling reactivity todd knoblock helped explore ideas variations john peterson alastair reid experimental implementations philip wadler thoughtful comments resulted simplifying semantic model finne helping implementation fran 
wish acknowledge funding project microsoft research darpa afosr number nsf number ccr 
arya 
functional approach animation 
computer graphics forum december 
arya 
functional animation starter kit 
journal functional programming january 
joel bartlett 
don widgets draw 
technical report dec western digital laboratory university avenue palo alto california may 
caspi halbwachs pilaud plaice 
lustre declarative language programming synchronous systems 
th acm symp 
principles programming languages january 
dannenberg 
canon score language 
computer music journal 
dannenberg fraley 
functional language sound synthesis behavioral abstraction lazy evaluation 
denis editor computer generated music 
ieee computer society press 
conal elliott 
brief 
technical report msr tr microsoft research 
ftp ftp research microsoft com pub tech reports winter tr ps 
conal elliott greg schechter yeung salim abi 
high level framework interactive animated graphics applications 
andrew glassner editor proceedings siggraph orlando florida pages 
acm press july 
john peterson haskell nonstrict purely functional language 
technical report yaleu dcs rr department computer science yale university may 
www version haskell cs yale edu haskell report 
finne simon peyton jones 
pictures simple structured graphics model 
glasgow functional programming workshop july 
thierry gautier paul le guernic besnard 
signal declarative language synchronous programming real time systems 
gilles kahn editor functional programming languages computer architecture volume lect notes computer science edited goos hartmanis pages 
springer verlag 
peter henderson 
functional geometry 
acm symposium lisp functional programming pages 
paul hudak tom gadde bo 
haskore music notation algebra music september 
appear journal functional programming preliminary version available ftp nebula cs yale edu pub yale fp papers haskore hmn lhs ps 
simon peyton jones andrew gordon finne 
concurrent haskell 
acm symposium principles programming languages st petersburg beach florida january 
peter lucas stephen zilles 
graphics applicative context 
technical report ibm almaden research center harry road san jose ca july 
letz 
lambda calculus music calculi 
proceedings international computer music conference 
int computer music association 
william press saul teukolsky william vetterling brian flannery 
numerical recipes art scientific computing nd ed 
cambridge university press cambridge 
isbn 
john reppy 
cml higher order concurrent language 
proceedings acm sigplan conference programming language design implementation pages 
greg schechter conal elliott yeung salim abi 
functional graphics object oriented multiple dispatching implementation 
proceedings eurographics objectoriented graphics workshop 
eurographics springer verlag 
john snyder :10.1.1.56.7431
interval analysis computer graphics 
edwin catmull editor computer graphics siggraph proceedings volume pages july 
wadge ashcroft 
lucid dataflow programming language 
academic press 
philip wadler 
comprehending monads 
proceedings symposium lisp functional programming pages nice france june 
acm 
zilles lucas linden 
escher document imaging model 
proceedings acm conference document processing systems santa fe new mexico pages december 
appendix haskell code predicate event detection type behavior bool type time predicate time event predicate cond cond cond width cond upto width cond cond width width event event cond iv case vali false upto false occurrence note lower bound try condition 
hi cond false upto true hi mid mid cond lo upto mid mid upto hi true upto true lo exactly lo upto hi iv mid hi lo lo upto hi vali cond cond interval size limit temporal subdivision time simulate left open ness small increment time 
