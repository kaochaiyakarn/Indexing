mice flexible testbed intelligent coordination experiments edmund durfee thomas montgomery artificial intelligence laboratory dept electrical engineering computer science university michigan ann arbor mi durfee engin umich edu describe flexible testbed studying variety different coordination issues 
mice michigan intelligent coordination experiment testbed extends previous experimental systems model interactions agents inhabit dimensional world 
mice allows experimenter specify constraints characteristics environment agents simulated act interact assume particular implementation agent reasoning architecture 
mice provides platform investigating evaluating alternative reasoning architectures coordination mechanisms different simulated environments 
outline design mice illustrate flexibility describing simulated environments model predators chasing prey predators attacking agents fighting fire diverse robots working 
conclude discussing mice act foundation research 
supported part graduate school university michigan 
research distributed problem solving investigated application domains air traffic control distributed vehicle monitoring factory floor control 
application emphasizes certain coordination issues 
example air traffic control emphasizes global coordination guarantee avoidance aircraft collisions distributed vehicle monitoring emphasizes generation sharing tentative possibly incorrect partial results converge global solutions factory floor control emphasizes proper allocation scheduling production tasks different processing sites 
different emphases techniques coordination developed application inappropriate application 
transferring techniques applications proven difficult knowledge engineering translation needed recode technique new domain 
distributed problem solving research limited inability easily evaluate different coordination techniques variety application environments 
overcome limitation developed flexible testbed called mice michigan intelligent coordination experiment extends ice testbed developed university southern california artificially intelligent agents interact dimensional grid 
mice retains dimensional grid model world adds number extensions allow greater flexibility coordination issues agents 
mice provides environment agents live imposes constraints capabilities actions agents interactions agents 
constraints affect mobility agents range accuracy time needs sensors ability move create remove agents collisions spatial relationships affect agents 
initial goal build mice experimental testbed simulate specific application domain modified impose variety constraints agents act interact emulate different coordination issues arise various application domains 
building testbeds reimplementing agents reasoning architectures coordination techniques leave agents modify parameters single testbed simulate important coordination characteristics different domains 
added benefit approach testbed fully simulate application domain domain coordination issues reduce knowledge engineering effort building testbed decrease chances solving coordination issues approaches specific application domain 
describe motivations mice presenting background information outlining approach taken design 
describe capabilities mice system illustrate simulates different environments ai systems coordinate 
conclude plans directions 
background objective developing generic dai testbeds simplify investigation evaluation coordination mechanisms variety contexts attempt discover general principles coordination 
mice differs previous generic dai testbeds minimal assumptions agents implemented 
example mace testbed provides language defining agents environments provides facilities monitoring error handling interacting user 
language simplifies task defining new types agents limits agents built evaluated specifiable mace language 
contrast mice testbed provides facilities describing environment agents act interact leaving user flexibility implement agents way desired long interface lisp 
increased latitude mice agents implemented places greater burden agents developers allows experimentation widely different architectures including blackboard systems soar 
mice specifies agents interact indirectly environment agents developers free specify agents interact directly communication 
experimenters populate mice environment agents different architectures provided define communication protocols agents 
design research conducting mice system important hypotheses 

coordination issues arise combination requirements application environment capabilities agents inhabit environment 
example catastrophic consequences collisions air traffic control constrain vehicles behave difficult coordination issues triggered constraints depend vehicles know environment quickly reason communication capabilities 

coordination depend techniques agents reasoning coordination fundamental aspect intelligence reasoning agent 
example coordination achieved starting artificially intelligent system giving coordination technique contract net protocol 
approach overlooks fact intelligently protocol agents internally reason coordination 
deciding decompose announce award bid tasks protocol difficult require sophisticated reasoning local non local goals plans constraints 
ability coordinate designed agent reasoning architecture studying different ways coordinating means studying alternative architectures 
investigating alternative architectures variety environmental constraints identify general coordination principles considered truly versatile architecture intelligent coordination 
facilitate investigation designed mice meet goals 
flexibility 
mice easily model coordination issues arise different application domains 

limiting knowledge engineering requirements simulating new scenarios 
library domain specific predicates allows researchers build environments unique combinations coordination issues 

providing clean interface intelligent agents 
interface mice agents structured give researchers latitude implement agents reasoning architecture desired 

helping researchers collect results running coordination experiments 
mice provides set tools view interactions agents environment review previous states events collect statistics course experimental runs 
mice intended model significant coordination issues application domains modeling domain details directly impact coordination 
distillation space completely detailed domains coordination issues allows mice combine coordination issues unique ways 
ease new sets coordination issues combined intelligent agents forcing interface change agents facilitates evaluation agents coordinate 
mice designed maximize portability ease reproduce experimental results 
provide features mice implemented standard language common lisp runs serial processor currently texas instruments explorer 
choices provide greater portability special purpose languages multi processor machines readily available 
simulating concurrency serial processor mice retains greater control actions agents making possible exactly reproduce experimental results 
furthermore mice uses simulated time model concurrent agent actions agents subjected real time constraints 
allows investigate reasoning architectures achieved real time operating speeds 
implementation section describe mice system options provides detail 
course experimental run mice maintains state history includes location orientation agent status agent created activated deactivated removed actions taken attempted agent characteristics locations grid 
state information saved away file examination run complete 
simulating single time step mice allows intelligent agents decide actions wish perform 
actions choose moving changing orientation scanning agents features grid linking agents unlinking making status changes creating new agents removing existing agents activating deactivating 
agents specify amount time spent reasoning 
allows agents associate time costs simulated environment actual time spent computation communication 
agents chosen actions perform mice executes actions environment produce new state 
conflicts state resolved combination fixed user specifiable predicates ensure consistent resulting state 
example conflict resolved agents allowed overlap occupy location decide move location 
mice detect situation call resolution predicate chosen experimental run 
option causes agents bounce returning prior locations 
choice authority relationship agent higher authority gets location lower authority agent pushed back 
resolution process gets complicated resolving location causes new conflict location 
happen example number agents allowed overlap 
lead agent attempts move illegal location moved back conflict agent 
results domino effect undoing moves back line agents 
worst case scenario resolution procedures result actions undone returning environment previous state 
previous state guaranteed consistent resolved time step 
circumstances actions undone completed prior time step 
mice uses graphics display environment state time step 
agents significant grid features represented geometric icons squares circles triangles 
icons changed response occurrence events 
example agent represented filled square may change representation hollow square deactivates 
mice event driven set predicates aid interpretation experimental run 
predicates maintain statistics change graphic display agent grid location cause changes environment 
fire fighting scenario example area burned characteristics changed fire move 
time statistics updated amount area consumed fire graphic representation burned location changed reflect condition 
flexibility mice evident parameters specified create new environments test skills intelligent agents 
include time agents decide move east 
mice resolves resulting conflict agents moving agent previous location 
results new conflict agents 
successive iterations mice conflict resolution procedure produce consistent state 
net effect resolution return environment state previous time step 
chain reaction resolution agent moves ffl resolution collisions agents 
agents collide attempting move moving location final positions resolved number ways 
example may pass bounce push 
ffl effects collisions 
agent characteristics change result collision 
example collision cause agent lose gain resources influencing capabilities loses energy collision afterward moves slowly 
ffl effects certain spatial relationships 
detectable spatial relationship trigger change agent characteristics 
example predator prey environment section prey agents surrounded predator agents removed environment 
ffl effects events actions environment 
predicates associated event agent movement linking unlinking status changes 
example agent simulates picking agent linking consequence agent deactivated longer capable moving 
ffl agent characteristics 
include agents starting locations time costs moving scanning agents obstruct movement sensing 
ffl features grid locations grid 
size grid specified features individual locations 
example assign attributes location block movement location obstruct sensing 
ffl entry code intelligent agents 
agent decision mice pointer agent invocation function 
calling function mice passes control agent reasoning process 
implemented intelligent agents directly lisp blackboard system 
human interface gives user menu driven choice actions 
ffl termination predicate 
termination predicate decides experimental run complete outputs results run 
example fire fighting scenario run complete active fire agents simulating fire extinguished burning 
run termination predicate displays statistics give indications fire fought 
example simulations mice provides flexible framework simulate wide variety environments involve multi agent coordination 
mice allows simulate issues coordination arise wide variety domains simulate details domains bearing coordination 
simulate particular multi agent environment give mice kinds information 
specify environmental parameters predicates constraints mice uses calculate ramifications set actions taken agents time 
second define functions invoke agent agent decide action 
kinds information tightly intertwined agents decisions usually involve knowledge shared environment 
illustrate mice simulate particular multi agent environments populate agents describe simulations implemented mice grids 
predator prey inspiration mice environment previous simulates interactions predators prey dimensional grid environment 
different implementations concentrated problem agents type predators surround capture agents second type prey constraints capabilities agents slightly varied implementation 
mice allows simulate wide range constraints capabilities problem including ffl agent sensing range far sense period sense sensitivity objects agents sense time costs long takes sense specified 
typically predator ability continuously sense area predators prey prey sensory capabilities 
ffl agent mobility terms directions move quickly move direction parameterized 
typically predators prey move equally quickly direction 
ffl agents spatial constraints agents occupy location specified predicate resolve conflicts 
predator prey typically allow agents occupy location attempt conflict resolved moving back attempted moving 
previous simulations predator prey domain allowed agent move time cycles turn conflicts arise 
simulate simultaneous activity agents time agents unaware current decision take conflicting actions 
implemented different predator prey environments minor variations agent goals capabilities constraints 
common scenario involves prey agents moving area reach safe area predator agents attempt capture get 
takes predators surround prey predators attack prey time 
succeed coordinate decisions prey attack time 
simulated environment done preliminary evaluation agents implemented different ways 
initially wrote straightforward lisp code control agents activities 
implementation prey agent simply moves direction reduce distance safe area 
predator agent scans area sensor range develop date view vicinity sees prey move 
sees prey agents builds goals occupy adjacent locations prey sees fellow predator location 
moves nearest goals 
surprisingly performance predators generally poor initial distribution area led fortuitous coordination 
discussed fully prey require great amount coordination predators coordination original simple predators consideration 
result predators fail block escape route prey worse predators split teams chase separate prey agents hope success 
fact position capture prey agent lack coordination predators cause repeatedly collide progress team 
improve coordination developed preliminary implementation agents separate communicating blackboard systems 
implementation done gbb simple agenda control shell modifying shell simulate multi agent environment 
mice calls agent invocation function function triggers continued processing agent blackboard system 
agent knowledge sources kss act internal reasoning agent affecting blackboard return commands mice shell simulating agent actions 
example predator agent scan ks sends appropriate command mice shell turn returns scan information ks process 
small number externally invocable functions mice shell available gbb system mice invoke external gbb functions modular shells tandem specified interface 
gbb predators improved coordination adding rudimentary capabilities communication modeling agents 
essentially predator decides prey chase sends messages predators information 
predators receive information update models reflect additional knowledge 
models improve predator better decisions prey chase 
example choice prey indicated square surrounded sides predators circles 
predators attempting occupy side lack coordination repeatedly collide bounce back initial positions 
predators additional coordination capabilities situation lead 
position uncoordinated predators fourth predator chasing distant prey predator chasing nearby prey give preference 
predators chasing prey reason abandon chase order chase prey avoid wasting resources 
predators initially divided teams small successfully surround prey heuristics involving measures center gravity decide teams dissolved teams enlarged 
initial blackboard implementation surprisingly shown significant improvement sophisticated agents developed 
important improvements agents agents reason better environment 
example predators model goals prey moving particular safe area take predators block prey goal predators arrive complete capture 
hand prey moving randomly directions away nearby predators predators sufficient keep prey check predators move quickly prey 
mice allows easily change characteristics environment agents plan investigate different common techniques coordination different specific instances general predator prey domain 
predator predator mice simple extend simulated predator prey domain domain kinds predators preys kind 
modifying characteristics prey predator prey simulation give prey capability capture predators 
addition simulation increases number agents obviously prey turned predators chance needed capture agent 
predominantly experimenting simulations agents type agents randomly distributed grid 
predator prey environments coordination tasks predators dynamically team capture prey 
predator goal avoiding captured 
additional goal cause major changes agent behavior team organization 
example studied centralized organizations team members coordinates fully controls capture prey feasible organizations predator prey environments 
predators prey centralization control team manager desirable depending captain incomplete view agents coordinating recognize agent danger telling agent prefer giving agent local autonomy unilaterally decide quit team player temporarily order save skin 
tradeoff benefits capturing agents encourage cooperation costs captured circular predator holds position help capture square predator captured sooner 
costs favoring cooperation local autonomy fall essentially individuals leads tension simultaneous goals cooperative retaining autonomy 
experiments date studied agents predominantly cooperative agent holds post occupying side agent capture surrounded captured 
consequence agents come mixed group position attempting surround 
situations lead agents repeatedly collide progress side 
way mice testbed explore alternatives type problem assign different authorities agents replace collision function returns agents previous locations collide function allows agents higher authority occupy desired locations forcing lower priority agents way 
mice allows changes easily 
forest fire fighting modifications predator prey environment simulate coordination issues cooperative domain forest fire fighting 
simple example domain build fire fighter agents fire agents 
fire function allow agents push 
example simulate high authority robot agents moving low authority box cooperatively pushing desired location 
agents move certain patterns specify predicates simulate fire moving burning differently areas different simulated giving appropriate feature information different locations grid 
unchecked certain amount time fire agent creates copy adjacent location 
fire spread enlarge time 
fire agent occupied location features location modified fire spread 
agents simulated simple way specifying initial capability 
encounters fire agent applies destroy fire agent result capability weakened 
agents contain extinguish entire fire exhausting capabilities 
strategic considerations include surrounding fire contain fighting spread concentrating fire front 
limited local view fire limited sensor range agents different perceptions pursue strategic goals 
agents communicate coordinate actions effective team 
date agents simple knowledge sources coordinate little fight fire 
agents commonality predator agents developed environments goal surrounding containing agents characteristics simulated environment including ability fire agents generate new fire agents move different speeds different areas bring different issues reasoning local coordinated actions 
mice define additional agents slowly moving non moving created aircraft quickly moving effective fire agents 
extensions forest fire fighting environment bring important additional issues coordinating effective heterogeneous agents resources 
cooperative robotics motivating force development mice testbed flexible simulate different domains typically addressed distributed problem solving research 
second motivation able simulate coordination issues faced actual systems access 
realworld systems call coordination individual agents study coordination issues systems getting bogged details 
example laboratory types mobile robots different capabilities 
state art high precision mobile platforms carry sophisticated sensory apparatus including cameras computer vision 
platforms capability manipulate world 
hero robots move sense imprecisely manipulators pick move light objects world 
studying issues coordination cooperation robots hero relies sensory information cyber mation relies hero manipulating world 
depending individual goals ways systems coordinate build ai software systems allow coordinate flexibly 
experimentally testing software actual systems dangerous time consuming dangerous software bugs lead physical disasters robots colliding time consuming need resolve low level details controlling robots higher level coordination issues 
mice simulate environment containing hero robots 
define mice capabilities types agents 
accurate wide ranging sensors move quickly precisely 
limited sensory abilities move slowly inaccurately slightly different intended link objects environment move objects 
example simple task trying get actual system perform find cups environment provide information pick cups put 
simulation simulate approaching cup objects appropriate orientation linking objects picking carrying objects unlinking dropping 
studying task real system delayed low level difficulties controlling robot motors arms perform desired activities 
mice simulation allows concentrate coordination issues implemented simple versions hero agents gbb 
agents currently identical goals exchange messages cooperatively pick cups 
stage give agents different goals 
example agents goals map area want pick cups 
achieve goals require cooperation hero need help locate cups need help hero move cup way access inaccessible part area 
essence mice shell empirically evaluating coordination techniques variety environments 
mice provides mechanisms keeping track agent actions interactions simulated environment tools evaluating behavior agents environment 
user distill task domain essential environmental constraints characteristics influence coordination encode information mice 
mice provides software infrastructure executing simulation environment user provide domain dependent information 
consequence mice step general goal studying multi agent domains extracting general principles techniques coordination 
mice provides touchstone evaluate alternative coordination mechanisms allow move easily simulated multi agent environments 
developed agents coordinate type situation modify mice evaluate agents different situation 
example developed gbb agents predator prey environment outlined previously attempted apply agents cooperative robotics environment 
aspects agents communicate model transferred domains issues cooperation heterogeneous agents cooperative robotics highlighted assumptions commonality embedded cooperating identical predators 
insights transferability coordination mechanisms domains readily developed easier move domains collect observations 
initial version mice described implemented plan extensions improve human interface experimental measurement capabilities 
current research building cooperative agents focusing developing core cooperation knowledge sources part blackboard agent 
developing mice crucial step research goal 
far clear fact knowledge sources repeated implementation evaluation hope converge discover search hopeless 
fail find knowledge sources implication thing general cooperation knowledge blackboard reasoning architecture insufficient 
mice clean interface agents act simulated mice world easily explore alternative architectures mice 
mice laid groundwork years experimental investigations different facets coordination 
benda jagannathan 
optimal cooperation knowledge sources 
technical report bcs boeing ai center boeing computer services wa august 
daniel corkill kevin gallagher kelly murray 
gbb generic blackboard development system 
proceedings fifth national conference artificial intelligence pages philadelphia pennsylvania august 
fact gbb agents mice shells 
gbb provides shell implementing blackboard agents identify contents blackboard domain knowledge agent needs 
mice provides shell implementing simulation environment identify constraints characteristics simulated domain provide mice 
published blackboard systems robert engelmore anthony morgan editors pages addison wesley 
lee erman frederick hayes roth victor lesser raj reddy 
hearsay ii speech understanding system integrating knowledge resolve uncertainty 
computing surveys june 
robert franklin laurel harmon 
elements cooperative behavior 
technical report environmental research institute michigan ann arbor mi august 
les gasser carl herman 
mace flexible testbed distributed ai research 
michael huhns editor distributed artificial intelligence research notes artificial intelligence chapter pages 
pitman 
les gasser nicolas 
representing organizational knowledge distributed ai systems 
proceedings distributed ai workshop may 
john laird allen newell paul rosenbloom 
soar architecture general intelligence 
artificial intelligence pages 
victor lesser daniel corkill 
distributed vehicle monitoring testbed tool investigating distributed problem solving networks 
ai magazine fall 
published blackboard systems robert engelmore anthony morgan editors pages addison wesley readings ai magazine volumes robert engelmore editor pages aaai menlo park california 
van dyke parunak 
manufacturing experience contract net 
michael huhns editor distributed artificial intelligence research notes artificial intelligence chapter pages 
pitman 
reid smith 
contract net protocol high level communication control distributed problem solver 
ieee transactions computers december 
cammarata 
cooperative intelligence remotely vehicle fleet control 
technical report arpa rand october 
