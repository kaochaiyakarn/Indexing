department computer science glimpse tool search entire file systems udi manber sun wu tr october appear winter usenix technical conference glimpse tool search entire file systems udi manber department computer science university arizona tucson az udi cs arizona edu sun wu department computer science national chung cheng university ming chia yi taiwan sw cs ccu edu tw glimpse stands global implicit search provides indexing query schemes file systems 
novelty glimpse uses small index cases size text allows flexible full text retrieval including boolean queries approximate matching allowing misspelling searching regular expressions 
sense glimpse extends agrep entire file systems preserving functionality simplicity 
query times typically slower inverted indexes fast applications 
example took seconds cpu time find occurrences usenix winter file system containing mb text spanning files 
glimpse particularly designed personal information file system 
main characteristic personal information non uniform includes types documents 
information retrieval system personal information support types queries flexible interaction low overhead customization important features glimpse 
supported part nsf presidential young investigator award dcr matching funds nsf ccr ccr advanced research projects agency contract number dabt 
part done author visiting university washington 
information contained necessarily reflect position policy government sponsors research 
official endorsement inferred 

explosion available information especially networks organizing personal file system difficult 
hard organization remember things years back 
put notes interesting colloquium years ago 
content piece information forgotten existence information 
types tools search patterns grep tools fast search limited small area index tools typically require large index needs computed ahead time 
glimpse combination approaches 
index uses small index assumes structure data allows flexible queries including approximate matching 
common data structure information retrieval ir systems inverted index sm 
occurrences word stored table indexed word hash table tree structure 
reduce size table common words english indexed done text multi lingual 
inverted indexes allow fast queries need search texts table needs consulted places word occurs retrieved immediately 
boolean queries slower relatively fast 
main drawback inverted indexes personal file systems space requirement 
size index typically size text fa 
may major drawback commercial text databases disk space relatively cheap major drawback personal information 
users agree double disk cost benefit indexing 
today personal file systems indexed 
due increased availability digital information networks personal file systems large require ir capabilities 
signatures files fa gb suggested alternative inverted indexes results 
indexes text size 
search time slower inverted indexes hashing parameters chosen carefully especially files different sizes minimize false drops probability 
second weakness inverted indexes need exact spelling due hashing tree structures search keywords index efficiently 
looking articles containing schwarzkopf example article misspelling missed mention exact spelling needed form query 
typical way find misspelled words try different possibilities hand frustrating time consuming guaranteed succeed 
cases especially large information bases searching provides way access information 
misspelling cause piece information virtually lost 
digital equivalence dropping folder file cabinet limit room file cabinet hardly cleans 
problem expected acute information scanned ocr optical character recognition devices currently error rate bn 
glimpse requires small index cases original text supports arbitrary approximate matching 
describe detail section glimpse engine agrep search program developed wm wm allows user specify number allowable errors insertions deletions substitutions combination 
user search best match automatically find matches minimum number errors 
small index algorithms usually slower ones inverted indexes speed order seconds fast single users 
sense glimpse takes opposite extreme inverted files time vs space tradeoff signature files middle 
applications management personal information speed secondary issue 
users wait seconds longer query double disk space 
ir systems library card catalogs high throughput essential scheme secondary mechanism catch spelling errors 
example spelling errors library catalog see section 
believe capability essential applications require high level reliability example medical labs information patients due misspelling 
call method level searching 
idea hybrid full inverted indexes sequential search indexing 
observation current computing performance sequential search fast text size megabytes 
need index word exact location 
level scheme index provide exact locations pointers area answer may 
flexible sequential search find exact answer user 
ir systems sm status te allow sequential search postprocessing step filter output query search relies inverted indexes 
idea level searching quite natural probably 
agrep levels searching index searching actual files provides great flexibility particular allows approximate matching regular expressions discuss 
glimpse months finding indispensable 
convenient times know information agrep directly just easier quickly browse output cd right directory ls find exact name file agrep cd back 
ideas wrote years ago forgot put forgot writing place 
save information probably discarded glimpse confidence finding 
interesting example conveyed tested beta version glimpse find mail address friend moved glimpse mail messages call papers 
glimpse truly find needle haystack 

level query approach section describe scheme level indexing searching 
start way index built 
information space assumed collection unstructured text files 
text consists sequence words separated usual delimiters space line period comma 
part indexing process divide collection smaller pieces call blocks 
try divide evenly blocks approximately size essential 
constraint impose number blocks exceed allows address block bits byte 
essential appears design decision 
scan collection word word build index similar nature regular inverted index notable exception 
regular inverted index occurrence word indexed pointer exact location occurrence 
scheme word indexed occurrence 
entry index contains word block numbers word occurs 
word appears times block block number appears index 
block identified byte occurrences word combined index entry index typically quite small 
full inverted indexes allocate word bytes usually slightly occurrence word 
size inverted index comparable size text 
index contains list unique words followed list blocks byte containing word 
natural language texts total number unique words usually large regardless size text 
search routine consists phases 
search index list blocks may contain match query 
search block separately 
phase done hashing trees prefer sequential search agrep flexibility 
hashing trees keywords selected included data structure 
sequential search get full power agrep 
index quite small afford sequential search 
agrep similar grep general 
search patterns allowing specified number errors insertions deletions substitutions combination output user defined records paragraphs mail messages just lines supports boolean queries wild cards regular expressions options 
pattern agrep find words index match 
agrep search corresponding blocks find particular matches 
procedure holds types complicated patterns ones contain wildcards nix set characters count stands negation ix stands character 
kinds patterns supported regular hashing scheme looks keyword table patterns correspond hundreds thousands possible keywords 
boolean queries performed similar way regular inverted lists algorithm 
suppose query pattern pattern 
find list blocks containing pattern intersect 
search blocks intersection 
notice find blocks contain pattern pattern mean query successful pattern may part block pattern 
glimpse efficient boolean queries contain common words 
worst example weakness encountered search linear programming 
term appeared files blocks find intersect blocks contain word linear blocks contain word programming cases blocks 
idea agrep search index integrated regular inverted indexes 
possible separate list words inverted index rest index agrep find words match query query allows errors regular inverted index algorithm find words 
familiar system provides approximate matching fashion 
summary list strengths weaknesses level scheme compared regular inverted indexes index ascii file block numbers byte values words stored ascii agrep find 
strengths 
small index 

approximate matching supported 

fast index construction 

need define document boundaries ahead time 
done query time 

easy customize user preferences 

easy adapt parallel computer different blocks searched different processors 

easy modify index due small size 
dynamic texts supported 

need extract stems 
subword queries supported automatically subwords appear middle words 

queries wildcards classes characters regular expressions supported 
weaknesses 
slower compared inverted indexes queries 
suitable applications speed predominant concern 

slow stage re working large texts mb 

boolean queries containing common words slow 

usage experience glimpse months file systems 
tried data collections ranging size mb mb 
section discuss current features glimpse experience 
current version glimpse collection programs lines code 
geared indexing part file system 
statement glimpse index dir name dir names indexes directory dir name directories 
common usage glimpse index option indexes numbers 
indexing typically done night takes minutes elapsed time index mb text seconds mb dec workstation 
indexing file program checks text file 
file non alphanumeric characters executable compressed file indexed name added log file 
formats example files files excluded 
determining file text file easy 
texts languages special symbols umlaut may look binary files 
tools job identifying file types example essence hs eventually incorporate glimpse 
hand ascii files indexed 
example file containing dna sequences 
files cause index grow significantly contain large number essentially random strings 
note level scheme suitable typical biological searches require complicated types approximate matching 
indexing numbers useful dates identifying numbers find mail messages certain person july 
large files numeric data index unnecessarily large 
glimpse allows user specify files indexed adding names prohibit file 
plan add customized features indexing process 
partition blocks currently done straightforward way 
total size text files computed estimate desired size block derived 
files combined reach size new block started 
plan improve scheme ways partition better adapted original organization data user ability control partition done 
user interface glimpse similar agrep file names required 
typical usage glimpse information output lines indexed files contain information glimpse find occurrences spelling error 
glimpse uk find email addresses letter login name starts ends typical know user middle name uk host name agrep symbol stands arbitrary number wild cards option specifies pattern match complete word 
glimpse supports boolean queries way agrep serving glimpse find occurrences names allowing spelling error needed 
glimpse winter usenix search index words separately find blocks containing words agrep phrase 
nice feature glimpse limit search files names match regular expression 
glimpse haystack needle find needles haystack files 
want search elusive definition glimpse abc xyz search files 
glimpse tex environment find occurrences environment line starts useful want see environment part definition 
glimpse fact flexible file management operations example glimpse mbox mbox concatenate files name mbox big glimpse pattern define provide list pattern files followed number define 
allow errors regular expressions file names example error 

performance performance numbers anecdotal 
point section compare running time glimpse systems argue fast purposes 
query times depend heavily type indexed data query mention architecture operating system 
pattern appears block search time fast matter large data complex pattern may unsuccessful query fastest index needs searched 
pattern matches large portion blocks query may slow 
searching large information space requires careful design queries 
matter fast search number matches large take long sift 
matching common patterns useful starts see matchings quite fast adjust pattern 
cases matches ones sufficient get answer looking 
added option tells user number blocks need searched 
list running times dec workstation personal file system containing mb text different files 
took minutes cpu time minutes elapsed time index including time determine files text files index size mb total 
blocks 
typical search takes seconds 
example search biometrics took seconds 
numbers listed sum user system times 
search incredible took seconds matches files 
search allowing errors took seconds 
search usenix took seconds matches divided different blocks 
boolean search help limiting number scanned blocks match patterns depends number matches 
example searching usenix winter took seconds matches 
search lazowska zahorjan error took seconds 
search protein matching took seconds patterns common 
search mail address mentioned uk took seconds believe due bug complicated regular expressions causes search unnecessary blocks better alternative 
larger information space indexed old copy entire library catalog univeristy arizona 
experiment run sun sparcstation model running solaris 
copy lists approximately volumes divided files occupying mb 
index size mb 
index smaller regular text catalog contains names terms languages uses fixed records quite words truncated 
took minutes times elapsed times index catalog 
search manber took second match 
case insensitive search usenix yielded match seconds 
search unix took seconds matches blocks 
search information retrieval took seconds matches blocks blocks searched included terms 
searching algorithm allowing errors took seconds finding matches match pattern exactly due misspelling foreign spelling 
example highlighted best case glimpse directory containing archives comp dcom telecom 
occupy mb divided files 
small number files minimizes overhead opening closing files making agrep result glimpse fast 
glimpse searching schwarzkopf allowing misspelling errors took agrep seconds elapsed time 
took glimpse minutes index directory index size mb total 
glimpse schwarzkopf search took seconds matches file 
search usenix error allowed appeared blocks took seconds 
search glimpse took seconds matches blocks 

list briefly avenues currently exploring 

searching compressed text text kept compressed form decompressed sequential search performed 
generally slow search considerably 
developing new text compression algorithms speed search allowing compression time 
algorithm ma allows agrep sequential search algorithms search compressed file directly having decompress 
essentially restoring text back uncompressed form modify pattern fit compressed form search modified pattern directly 
searching compressed file directly improves search time space utilization course preliminary tests achieved reduction space decrease search time 
allows files kept compressed form indefinitely changed searched time 
particular intend compress index level scheme searched frequently 
working compression scheme integrated glimpse 
preliminary stage 
compression rates natural language texts range 
allows fast search decompression early predict speed 

incremental indexes level index easier modify adapt dynamic environment regular inverted index smaller 
add new file current index add file existing block create new block file large important deserve 
scan index add word new file appear block 
index small reading disk writing back done fast 
deletion file slightly time consuming word need check block determine word appears deleted 
fortunately agrep contains powerful algorithm multi pattern matching 
search large collection words concurrently 
incremental indexing essential indexing 
considering adapting glimpse allow searching usenet netnews 
currently total size typical usenet server mb 
quite bit text images programs size handle 
problem kind consists large number small files individual email messages stored random places disk 
better data organization probably required reasonable performance 

customization ways user improve indexing searching procedures customizing 
user able decide certain patterns indexed 
provide option index numbers allow flexibility 
way provide hook external filtering program provided user decide index contents type file name file plan allow user store large set multi words phrases fiber optics jonathan smith may indexed allowing quick search need boolean queries 
option partition collection files categories build separate indexes correspondence information servers program source codes 
needed small medium size file system may essential large file systems 
plan support access special structure additional information associated text 
example searches may specify desired information starts column line second field 
user may want search small files say kb files say august 
ways view output 
example queries give matches user may interested rough idea matches directory names 
currently option list files containing match number matches option output number blocks potential matches 
options incorporated glimpse easily 
believe customization key better search facilities 
gopal corrected bugs code 
greg andrews george forman trevor jenkins comments improved manuscript 
bn bradford error correlation contemporary ocr systems proc 
int 
conf 
document analysis recognition pp 

fa faloutsos access methods text acm computing surveys march pp 

gb gonnet baeza yates handbook algorithms data structures chap 
second edition addison wesley reading ma 
hs hardy schwartz essence resource discovery system semantic file indexing proc 
usenix winter conference san diego january pp 

ma manber text compression scheme allows fast searching directly compressed file technical report department computer science university arizona march 
rice report accuracy ocr devices technical report information science research institute university nevada las vegas 
sm salton mcgill modern information retrieval mcgraw hill new york 
te principle text processing ellis horwood pub 
wm wu manber agrep fast approximate pattern matching tool usenix winter technical conference san francisco january pp 

wm wu manber fast text searching allowing errors communications acm october pp 

