appear groups computation ii complexity mckay canonical labeling algorithm miyazaki department computer information science university oregon th ave eugene mail miyazaki cs uoregon edu june 
study time complexity mckay algorithm compute canonical forms automorphism groups graphs 
algorithm type backtrack search performs pruning discovered automorphisms hashing partial information vertex labelings 
practice algorithm implemented nauty package 
obtain colorings furer graphs allow algorithm compute canonical forms polynomial time 
prove exponential lower bound algorithm connected regular graphs color class size furer construction 
conducted experiments nauty graphs 
experimental results indicate exponential lower bound 

theoretical complexity status finding canonical representatives isomorphism classes finite algebraic combinatorial structures longstanding unsolved question computational complexity theory 
structures canonically represented graphs polynomial time suffices solve problem graphs cf 

canonical labeling algorithm maps input graph canonical representative cf isomorphism class graph cf cf call cf canonical form associated labeling canonical labeling number studies computing canonical forms shown considerable success 
particular bounds certain parameters graph polynomial time partly done author directed research project university oregon doctoral student direction professor eugene luks 
represents going professor luks final version appear 
miyazaki possible 
group theoretic methods led significant result cf 
see theorem babai luks 
vertex colored graphs bounded color classes color multiplicities canonical forms computed polynomial time 
considerably deeper group theory babai luks went show canonical forms graphs bounded degree computed polynomial time shown independently furer specker 
hand fastest known algorithm compute canonical forms general graphs runs exp time vertex graphs luks cf 
see 
older techniques type brute force backtrack search 
general naive brute force method searches possible vertex labelings vertex input graph yielding time 
naive approach improved classifying vertices input graph invariant classes search order avoid possible vertex labelings read corneil see 
vertex classification method basis mckay canonical labeling algorithm canonically colors input graph finds automorphism group compute canonical form 
addition vertex classification remarkable algorithm extensively utilizes information discovered automorphisms input graph cf 
hashes partial information vertex labelings cf 
keep search space impractically large 
practice algorithm implemented highly regarded nauty package widely considered fastest practical graph isomorphism package available 
generalized naive vertex classification method partitions set ordered tuples vertices lehman cf 
see historical remarks 
method called dimensional lehman method dim named babai 
naive vertex classification method dim method 
question method yield canonical form time cf 

cai furer immerman constructed class pairs non isomorphic graphs bounded color class force order dim method distinguish cf 
originally announced theorem cai immerman 
exists sequence pairs connected graphs fx having properties vertices 
ii regular color class size 
iii 
iv dim method able answer recall canonical forms cai furer immerman counterexample computed polynomial time basic group theoretic machinery theorem 
counterexample leaves questions canonical complexity mckay canonical labeling algorithm labeling algorithms combinations combinatorial group theoretic methods 
particular question address cai furer immerman counterexample yield exponential time mckay algorithm 
positive negative answers question 
expository purposes consider simplified version mckay algorithm give partial answers question 
simplified algorithm performs pruning partial information discovered automorphisms input graph perform pruning hashing partial information vertex labelings cf 

recall construction gadget novel technique construct cai furer immerman counterexample describe properties cf 

prove main result cf 

theorem 
graph gadgets attached including cai immerman counterexample exists ordering colors mckay algorithm computes canonical form automorphism group polynomial time 
particular family graphs furer gadgets attached ordering colors leads algorithm exponential time computation 
construct family connected regular graphs color class size forces algorithm compute canonical forms exponential time cf 
proposition 
point general algorithms naive vertex classification method nauty smaller color class size smaller search tree 
add nauty hashing capability consideration cf 

consider complete algorithm implemented nauty performs pruning discovered automorphisms hashing partial information vertex labelings 
graph furer gadgets attached input graph prove graph invariants hashing distinguish colorings stage search 
conclude exponential example simplified algorithm forces complete algorithm exponential time computation cf 

theorem 
exists sequence connected graphs fx having properties vertices 
ii regular color class size 
iii mckay algorithm generates vertex labelings compute canonical form automorphism group fixed constant 
conducted experiments nauty system family graphs forces mckay algorithm exponential time color ordering cf 

experiments conducted types color ordering leads mckay algorithm polynomial time forces algorithm exponential time colors ordered randomly 
experimental results indicate exponential lower bound obtained proposition 
miyazaki 
preliminaries definitions describe fundamentals naive vertex classification method see 
graphs consider finite simple undirected loops multiple edges noted colored graphs consider vertex colored graphs defined follows 

vertex coloring graph jv coloring vertex set function ng actual image initial segment ng 
color classes sets fv ig 
coloring defined sequence non empty color classes color class size cardinality largest color class 
define family colorings sym symmetric group permutations natural action sym defined sym 

canonical form problem family graphs having vertex set natural action sym fu vg fu sym 
define 
graphs isomorphic denoted sym 
automorphism group aut fg sym xg 
canonical form problem find function called canonical form cf sym cf ii cf cf 
graphs cf cf 
extend notions colored graphs 
set vertex colored graphs having vertex set colored graphs isomorphic denoted sym 
color preserving automorphism group aut fg sym canonical form function cf sym cf complexity mckay canonical labeling algorithm ii cf cf iii cf cf aut 
fix sym 
colored graphs cf cf 

naive vertex classification naive vertex classification method described color refinement procedure 
consider vertex set coloring coloring refinement implies coloring discrete bijection graph jv coloring define refinement follows 
number neighbors having color consider tuple sort new colors lexicographically define ordering number new color class belongs 
keep refining coloring level define call stable refinement 

mckay algorithm mckay algorithm depth search tree nodes stable vertex colorings 
stage vertex chosen separated singleton color class assigning new color 
expository purposes consider simplified version algorithm performs pruning discovered automorphisms follows 
denote mckay algorithm nauty simplified algorithm nauty 

basic searching method suppose colored graph jv algorithm computes cf finding canonical coloring produces lexicographically adjacency matrix aut 
search begins initial coloring root search tree 
arbitrary node search tree defined 
discrete node leaf tree call terminal coloring 
discrete vertex chosen turned singleton color class follows 
non trivial color class color class having size greater smallest size 
miyazaki called target color class 
define new coloring ind ind fvg fvg denote stable refinement ind 
call stabilizer vertex singleton ordered sequence vertices define stabilizer 
obtained repeated application vertex refinement algorithm 
coloring stable vertices form singleton color classes 
successors search tree total number successors jw tree search tree generated naive method described 
leaf set terminal colorings form graph relabeling vertices discrete coloring define equivalence relation 
fixed aut fg sym comparing adjacency matrices lexicographically define order define cf maxf lg 

automorphism pruning aut acts jlj integer 
feasible generate entire search tree 
problem largely overcome discovered automorphisms eliminate sections search tree consideration 
consider search tree terminal node leftmost leaf 
best candidate canonical node far 

orbit pruning 
non terminal node ha aut set generators far stabilize color classes 
algorithm visits non terminal node child generated orbits 


orbits minimum vertex 
define reps fu non terminal node algorithm fixes vertices target color class say fv generate children 
particular choices chooses reps choosing vertices orbit yields equivalent terminal nodes best mean terminal node coloring induces lexicographical leader 
mean minimum lexicographical ordering 
complexity mckay canonical labeling algorithm sp sp gca gca 
pruning automorphism equivalence 
backtracking automorphism equivalence 
terminal node ancestor level node subtree rooted 
consider greatest common ancestor denoted gca 
gca 
child gca unique path child unique path 
similarly gca see example 
automorphism pruning terminal nodes performed considering cases 
suppose algorithm generating terminal node 
case 
sym 
suppose aut 
stored new discovered automorphism 
subtrees equivalent node relabeled get need search subtree may immediately return gca skip search soon find aut 
case 
suppose condition case fails aut 
sym 
suppose aut 
gca denote orbits suppose generated fixing vertex reps 
induces new orbits say reps may immediately return gca equivalent may immediately return gca equivalent aut 
case 
conditions cases fail simply return parent 
root defined level 
miyazaki 
graph 
gadgets 
construction describing construction counterexample dim wl method bounded furer constructs gadgets form pair nonisomorphic graphs 
recall construction gadgets called gadgets 
graph size jv deg 
wlog assume connected 
replace vertex degree graph defined follows fa kg fb kg fm kg jsj ii ffm sg ffm sg 
color pair vertices unique color color middle vertices different color 
coloring resulting colored graph 
consists set vertices connected vertex pairs fa furthermore middle vertices connected number 
lemma 
aut stabilizes fa fa aut determined interchanging subset kg cardinality 
graph defined follows vertex degree replace copy denote middle vertex set coloring complexity mckay canonical labeling algorithm ii edge fv wg adjacent associate pair fa 
call pair fa 
iii connect vertices vertices edge 
draw edges fa fb denote pair edges 
graph colored uniquely resulting colored graph denoted 
note 
coloring colors unique colors colors entire graph deg colors 
color class size fv wg consider corresponding pairs edges say fe ffa fb gg 
suppose aut swaps swaps 
twists cycle say twists twists 
observation 
aut 
determined twisting edge disjoint cycles 
aut group 

define notion vertices 
describe properties color refinement algorithm applied 
colored graph 
vertex individualized unique color 
say vertex separate assigning unique color applying color refinement algorithm stabilize new coloring 
arbitrary vertex individualized vertex unique color 
edge individualized vertex unique color 
observation 
deg 
vertex individualized 
ii suppose pairs vertices order 
individualized exactly pairs vertices individualized 
iii target color class size stage 
define subgraph induced coloring 
definition 
stable color refinement 
subgraph defined miyazaki fv individualized ii fe individualized 
lemma 
stable color refinement 
contains cycle 
proof 
suppose forest 
set vertices degree 
suppose deg individualized edges adjacent observation ii individualized 
contradiction 

colorings allow polynomial time solutions 
coloring scheme introduce coloring scheme allows algorithm nauty described compute canonical form polynomial time 
lemma 
consider applying depth vertex classification algorithm 
exists ordering colors generated sequence stable refinements leaf graph connected 
proof 
show connected vertex classification algorithm vertex non trivial having smallest size necessarily target color class connected 
connected contains cycle 
suppose forms cycle 
resulting stable color refinement vertex 

suppose properly contains cycle say edge fv wg deg 
resulting stable color refinement vertex 
remaining components keep connected 

polynomial time solutions prove main result 
coloring obtained permuting color classes satisfies condition lemma 
proposition 
jv algorithm nauty generates search tree having nodes compute cf aut 
complexity mckay canonical labeling algorithm proof 
utilize fact automorphism determined twisting edge disjoint cycles cf 
observation 
stage twist cycle eventually leading automorphism reach terminal node 
write 
search tree generated algorithm 
leftmost leaf ancestor level suppose height claim claim 
number nodes 
confirm claim leaf show sym automorphism algorithm returns parent gca 
induct leftmost leaf parent child 
forms cycle 
sym automorphism twists cycle 

suppose algorithm visiting ancestor say level parent child leftmost leaf generated observation connected contains cycle 
edge gets twisted sym edge cycle disconnected 
cases 
cycle cycle parts cycle 
case cycle 
eventually induces automorphism twists induction number nodes height 
algorithm returns parent immediately generated number nodes 
height 
consequently claim number tree nodes generated 

exponential lower bound construct family regular graphs color class size forces mckay algorithm compute canonical forms exponential time 

construction edge bridge removal increases number connected components 
construct multigraph bridges cycles 
definition 
integer 
multigraph defined fv graph subgraph induced vertex set 
miyazaki 
graph fe fv fw gg ii fe fw iii ff fv cycle consisting st cycle consisting ith cycle consisting apply furer construction denote resulting graph 
observe simple graph graph loops multiple edges 
remarks 
graph regular graph color class size 
automorphism group elementary abelian group 
particular aut 
times corresponds twisting cycle observation 
consider applying depth vertex classification algorithm 
denote sequence stable color refinements root search tree leaf exists ordering colors individualized edges generated 
exponential time solutions prove second main result 
coloring obtained permuting color classes satisfies condition observation 
algorithm generates exponentially nodes search tree compute canonical form 
proposition 
jv algorithm nauty generates nodes search tree compute cf aut fixed constant 
complexity mckay canonical labeling algorithm proof 
write 
search tree generated algorithm 
height 
leftmost terminal node wlog assume induces canonical labeling 
generated terminal nodes generated excluding induce automorphisms defined twisting cycles cf 
proposition 
automorphism twists bridges terminal nodes induce automorphisms search 
generating terminal nodes branching performed levels level generators aut orbits cf 

prove contains complete binary subtree height suppose algorithm visiting node level generated generators aut 
gca level terminal descendant sym twist bridge aut 
terminal node generated fails satisfy pruning conditions cases terminal nodes 
note orbit pruning performed level cf 

contains complete binary subtree height consequently number tree nodes generated algorithm 
jv number tree nodes 

hashing graph invariant 
graph invariants automorphism pruning reduces size equivalence class terminal colorings search tree manageable size reduce number classes 
reduce number classes mckay defines graph invariants called indicator functions hash partial information vertex labelings 
definition 
function graph invariant sym 
sequence color classes write jw number color classes kw jw jw jw sequence sizes color classes 
graph invariant nauty defined automorphism twist bridges having canonical node terminal node induces canonical labeling search tree tree pruning efficient 
miyazaki canonical information obtained color refinement steps hash function follows 
definition 
suppose stable coloring obtained sequence refinements 
define kw kw kw hash function 

canonical forms graph invariant sequence vertices 
consider sequence stabilizers 
define ind ind 

sequences vertices sym 
graph leaf set leaves search tree generated depth vertex classification algorithm 
terminal colorings equivalent 
efficiency achieved ordering vectors lexicographically redefining cf maxf maxf lg 
means mckay algorithm nauty eliminates sections search tree contain new automorphisms cf 

local equivalence stabilizers conditions order get equality independent 
answer question introduce notion local equivalence colorings 
bipartite graph bipartite graph chromatic partition vertices color class equal degrees 
disjoint subsets vertex set graph denote bipartite subgraph induced jv jv bipartite subgraph called trivial 
characterize stable colorings follows cf 
proposition 
observation 

coloring stable subgraph induced regular induced bipartite subgraph jw complexity mckay canonical labeling algorithm define notion local equivalence 

colorings locally equivalent denoted non trivial bipartite subgraph color preserving isomorphic corresponding subgraph jw sequences vertices length subsequences length define ind ind 

having local equivalence refinements levels sufficient condition values equal 

exponential regular graph 
search tree generated depth vertex refinement algorithm 
colorings level locally equivalent follows 
proposition 
locally equivalent stabilizers 
ind ind target color classes respectively 
locally equivalent proof 
target color classes respectively 
show suppose fv fw non trivial color classes adjacent fvg fwg fv fw 
consequently suppose 
suffices show isomorphisms pairs non trivial bipartite subgraphs color classes properly contained color classes respectively 
fix 
suppose jw jw 
fy 
non trivial color class adjacent jw jw fxg fyg fxg fy suppose jw 

jw 
color classes form outer pairs 
miyazaki observe 
color classes adjacent singleton required pairs color preserving isomorphic bipartite subgraphs 
conclude section corollaries 
corollary 
consider applying depth vertex classification algorithm 
stabilizers level search tree 
hash function corollary 
jv algorithm nauty generates nodes search tree compute cf aut fixed constant 

extending distance coloring vertex standard stable refinement lexicographic ordering tuple 
extend method counting numbers neighbors distance color class 
vertices number edges traversed shortest path joining called distance denoted 
define fw jn coloring vertex consider tuple sort new colors lexicographically define ordering number new color class belongs 
keep refining coloring level define call stable refinement 
note 
furthermore define call strongly stable refinement 
call strongly stable 
theory fixed stable strongly stable refinements computed polynomial time 
practical purposes weaker color refinement heuristic 
strongly stable define dist 
strongly stable stable 
exists non trivial color class defined nauty optional vertex refinement heuristic 
complexity mckay canonical labeling algorithm 
new coloring defined lexicographically ordering tuples color class splits 

define dist sequence color classes dist say dist splits color class call dist dis tance refinement 
family graphs applying dist level improves performance algorithm constant factor remains exponential reasons 
proposition 
regular graph 
stable refinement 
refinement dist split color class size 
proof 
suppose defined 
size ii corollary 
stabilizers 
locally equivalent dist dist locally equivalent ii stable refinements dist dist locally equivalent 

experiments nauty conducted experiments nauty system default parameters compute canonical form 
refer details implementation algorithm 
program nauty version running sun sparcstation computer operating system sunos version 
experiments conducted types colorings 
defined 
call type 
ii defined 
call type 
iii coloring defined randomly permuting color classes 
call type type tested type tested 
type took average randomly generated size 
collected numbers tree nodes generated cpu execution time measured 
table shows number miyazaki table 
number tree nodes generated cpu time 
graph jv search tree size cpu time seconds tree nodes generated cpu time type obtained nauty 
shows numbers tree nodes generated type type average randomly generated type size 
curves appear show number tree nodes generated type polynomial upper bound type exponential lower bound 
average type behavior quite clear experiments leaves questions studying average time complexity type 
conducted experiments nauty optional vertex refinement heuristics called vertex invariants 
dist showed improvement constant factor cf 
heuristics helped performance exponential examples 

remarks 
classes graphs general ignore pruning hashing partial information vertex labelings difficult construct examples force algorithm take minimum determined uniquely ordering color classes 
complexity mckay canonical labeling algorithm graph size number vertices type type average type 
number tree nodes generated exponential time 
fact referee pointed family graphs consisting disjoint union triangles squares job 
graphs naive vertex classification method described detect difference triangles squares forced backtrack 
size search trees exponential arrange vertex labelings triangles matched squares 
remains exponential pair triangles squares colored uniquely initial color class size 
note extend distance neighbors refinement step described naive vertex classification method computes orbit partitions graphs refinement step canonical forms computed polynomial time 
referee idea triangles squares pushed sequence polygons cost increasing color class size 
consider vertex graph consisting sequence vertex labelings arranged triangle square example 
fixed constant ignore pruning hashing example gives search tree size method described 
note color class size unbounded particular size 
example suggested mckay 
pointed family graphs consisting disjoint union strongly regular graphs nonisomorphic having parameters candidate force algorithm exponential time 
example requires increasing miyazaki color class size 

going mckay algorithm coloring vertex set invariant number neighbors color class 
method extended coloring invariant information obtained partitioning set ordered tuples analogous way dim method 
generalized stronger version extended distance algorithm described 
algorithm searches distance considers possible colorings tuples 
completed extending results constructed family connected regular graphs color class size forces order extended algorithm 
fixed constant example yields search trees size fixed constant 
result stronger stated sense algorithm consider employs generalized dim method 
result appear 
pleasure express advisor professor eugene luks suggesting problem helpful guidance suggestions encouragement 
acknowledge referees effort interest suggestions 

babai moderately exponential bound graph isomorphism fundamentals computation theory proceedings international fct conference aug ed lecture notes comput 
sci vol 
springer new york pp 


automorphism groups isomorphism reconstruction handbook combinatorics vol 
lovasz graham grotschel eds elsevier science amsterdam pp 


babai luks canonical labeling graphs proceedings fifteenth annual acm symposium theory computing boston apr acm new york pp 


cai immerman optimal lower bound number variables graph identification th annual symposium foundations computer science research triangle park oct nov ieee computer soc los alamitos calif pp 


optimal lower bound number variables graph identification combinatorica 

dixon permutation groups graduate texts math vol 
springer new york 

counterexample graph isomorphism testing tech 
rep cs department computer science pennsylvania state university university park penna 
complexity mckay canonical labeling algorithm 
specker normal forms graphs graphs bounded valence proceedings fifteenth annual acm symposium theory computing boston apr acm new york pp 


hall jr theory groups nd ed chelsea new york 

full embeddings categories algebras illinois math 


immerman lander describing graphs order approach graph canonization complexity theory retrospective selman ed springer new york pp 


luks succinct certificates class graphs manuscript 

luks isomorphism graphs bounded valence tested polynomial time comput 
system sci 


sample graphs isomorphism testing congr 
numer 


mckay computing automorphisms canonical labellings graphs combinatorial mathematics proceedings international conference combinatorial theory canberra aug eds lecture notes math vol 
springer new york pp 


practical graph isomorphism congr 
numer 


nauty user guide version tech 
rep tr cs computer science department australian national university canberra 

personal communication babai 

miller graph isomorphism general remarks comput 
system sci 


read corneil graph isomorphism disease graph theory 

construction identification graphs lecture notes math vol 
springer new york 

finite permutation groups academic press new york 

graph isomorphism problem zap 

sem 

mat 
inst 

russian english transl soviet math 

