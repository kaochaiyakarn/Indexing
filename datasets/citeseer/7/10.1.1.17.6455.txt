efficient searches similar subsequences different lengths sequence databases park wesley chu university california los angeles cs 
ucla 
edu cs 
ucla 
edu yoon university korea sun 

ac 
kr hsu santa teresa lab ibm 
ibm 
com propose indexing technique fast retrieval similar subsequences time warping distances 
time warping distance suitable similarity measure euclidean distance applications sequences may different lengths different sampling rates 
indexing technique uses disk suffix tree index structure employs lower bound distance functions filter dissimilar subsequences false dismissals 
index structure compact accelerate query processing convert sequences continuous values sequences discrete values categorization method store subset suffixes values different preceding values 
experimental results reveal proposed technique orders magnitude faster sequential scanning 

similarity searches sequence databases important application domains information retrieval data mining clustering 
detecting stocks similar growth patterns finding patients lung lesions similar evolution characteristics examples similarity queries 
sequential scanning answer queries may require enormous processing time large sequence databases 
indexing techniques proposed speed processing similarity queries :10.1.1.45.9798:10.1.1.45.9405
previous techniques similarity searches euclidean distance metric similarity measure 
applications sampling rates lengths sequences may different making difficult impossible euclidean distance similarity measure 
area speech supported part nsf iri nih ca recognition problem approached similarity measure called time warping distance allows sequences stretched compressed time axis 
time warping element sequence matched neighboring elements sequence 
example consider sequences sequence closing price stock taken day closing price stock taken day 
compared directly sequence longer 
euclidean distance subsequence length greater 
duplicate element time warping find sequences identical 
matching similar sequences important prevent occurrence false dismissals 
false dismissal occurs sequence similar query sequence included answer set 
indexing techniques assume triangular inequality may produce false dismissals distance function satisfying triangular inequality similarity measure :10.1.1.45.9798
unfortunately time warping distance satisfy triangular inequality simply proved counter example :10.1.1.45.9798
property spatial access methods triangular inequality unsuitable similarity searches time warping distance 
area string matching suffix tree extensively index structure find substrings exactly matched query string 
suffix tree may candidate index structure time warping distance assume geometry underlying distance functions 
suffix tree index structure similarity searches problems addressed suffix tree designed find exactly matched substrings 
exact search algorithm needs extended find similarly matched subsequences 
general suffix tree built sequences elements take values finite alphabets 
sequences consider comprised elements continuous real values 
systematic method convert continuous element values discrete values required 
propose new indexing technique fast retrieval similar subsequences different lengths different sampling rates 
technique uses time warping distance similarity measure disk suffix tree index structure 
index structure compact convert sequences continuous values sequences discrete values categorization method store subset suffixes values different immediately preceding values 
query sequence suffix tree traversed time warping distances subsequences contained suffix tree computed 
subsequences contained suffix tree discrete values exact distances obtained 
lower bound distance functions employed estimate exact distance proposed technique guarantees false dismissals 
organized follows 
section provide brief overview related sequence matching problems 
section give definition property time warping distance 
section introduces construction method similarity search algorithm disk suffix tree 
apply ideas categorization sparse suffix tree section section respectively 
experimental results section 
related approaches fast retrieval similar sequences proposed 
sequences converted frequency domain discrete fourier transform subsequently mapped multi dimensional points managed tree technique extended locate similar subsequences 
approaches euclidean distance metric similarity measure sequences different lengths different sampling rates matched 
sequence matching allows transformations proposed 
sequences grouped equivalent classes normal forms 
normal forms invariant shape transformations scaling shifting handle compressions stretches element values time axis 
authors propose class transformations query language express similarity tree index 
handle moving average global time scaling time warping 
access methods permit matching sequences different lengths :10.1.1.45.9798
presents modified version edit distance considering sequences matching majority elements match 
technique extended matching multidimensional sequences 
time warping distance similarity measure step filtering process fastmap index filter proceeded lower bound distance filter :10.1.1.45.9798
underlying index structures triangular inequality 
authors introduce aligned subsequence matching time warping distance 
approaches useful long data sequences subsequences starting segment boundaries 
similarity matching shapes sequences proposed 
demonstrates shape definition language sdl provides index structure speeding execution sdl queries 
authors introduce notion generalized approximate queries specify general shapes data histories 
approaches may handle variations element values time axis applications care specific element values 
approaches matching biological sequences 
proposes disk suffix tree solving sequence alignment problem addresses problem discovering patterns protein databases similarity measure string edit distance 
focus sequences continuous numeric values approaches center sequences characters 
furthermore algorithm uses main memory suffix tree making infeasible large sequence set 

time warping distance general finding similarity measure sequences easy sequences qualitatively may quantitatively different 
sequences may different lengths making difficult impossible embed sequences metric space euclidean distance determine similarity 
second sampling rates sequences may different sequence may sampled minute sequence sampled minute 
differences rates similarity measures cross correlation unusable 
time warping tw similarity measure allows sequences stretched compressed time axis 
tw generalization classical algorithms comparing discrete sequences sequences continuous values extensively matching voice audio medical signals 
find minimum difference sequences tw maps element sequence neighboring elements sequence 
give formal definition time warping distance 
definition 
non null sequences sj time warping distance dtw defined follows dtw si sj dtw si sj si sj min dtw si sj dtw si sj definition si represents pth element si si denotes subsequence si including elements positions notation si suffix si starting pth element 
si identical si length si 
numeric values distance function assume defined city block distance 
dtw si sj calculated efficiently dynamic programming technique recurrence relation tw 
definition 
non null sequences si sj recurrence relation tw 

builds cumulative time warping distance table si sj defined follows tw tw si sj min tw row rows row row row ss coil col col cumulative distance table mapping elements 
time warping distance dynamic programming algorithm fills table cumulative distances computation proceeds 
computation complexity 
final cumulative distance minimum distance sj matching elements traced backward table choosing previous cells lowest cumulative distance 
shows cumulative distance table sequences mapping elements generates minimum distance 
reading column row cumulative distance table get distance si prefix sj 
distance si sj 
obtained column qth row 
example dtw seen column row 
determination time warping distance sequences greater distance threshold require building entire cumulative distance table proven theorem 
theorem 
columns row cumulative distance table values greater distance threshold adding rows table yield new values equal proof 
proof 
look table shown 
inspecting row determine distance greater columns row values greater 
fill remaining rows 
subsequent sections theorem reduce search space index structure 

similarity search suffix tree section propose suffix tree st index structure similarity searches time warping distance 
describing methods constructing searching suffix tree definition internal structure suffix tree 
trie indexing structure indexing sets keywords varying sizes 
suffix trie trie set keywords comprises suffixes single sequence 
nodes single outgoing edge collapsed yielding structure known suffix tree 
suffix tree generalized allow multiple sequences stored tree 
suffix sequence represented leaf node 
precisely suffix st expressed leaf node labeled 
edges labeled subsequences concatenation edge labels path root leaf st 
concatenation edge labels path root internal node ni represents longest common prefix suffixes represented leaf nodes ni 
notation label ni nj concatenated labels path ni nj 
shows suffix tree constructed sequences marker suffix 

suffix tree 
index construction suffix tree multiple sequences constructed adding special sequence separator symbol alphabet 
sequences included tree concatenated separated separator symbol 
ordinary suffix tree algorithm applied concatenated sequence 
suffix tree created process kept main memory construction 
approach realistic large sequence set 
remedy problem incremental suffix tree construction method proposed 
suffix trees representing disjoint sets sequences merged produce single suffix tree pre order traversal suffix trees combining paths corresponding common subsequences 
suffix tree large set sequences constructed performing series binary merges suffix trees increasing size 
merge operation suffix trees support disk representations limited main memory 
suffix trees si sj merged complexity suffix tree sequences constructed complexity average length sequences 
total number nodes suffix tree constrained due factors leaf nodes degree internal node 
maximum number nodes space requirement suffix tree linear 

search algorithm st suffix tree st useful index structure locate subsequences exactly matched query sequence find exactly matched subsequences traversed root tree traversal terminated reached node reached traversal possible 
exact searches performed 
exact matching algorithm suffix tree simple fast directly applied problem going solve 
problem definition sequences 
sm arbitrary lengths query sequence user distance threshold find subsequences si 
time warping distances equal proposed similarity search algorithm algorithm 
search starts root suffix tree continues depth traversal subsequences time warping distances equal 
input root node output null filter st return algorithm 
st actual filtering process executed algorithm 
visits node inspects child node cni find new answer determine depth traversal needed 
simpler explanation assume edge nodes cni labeled single value 
find new answer builds cumulative distance table label cni 
root node table built bottom 
table constructed augmenting new row table accumulated root function label cni dtw builds new cumulative distance table distance function dtw augmenting new row corresponding label cni suppose th row newly added row 
column th row value equal label cni cni inserted answer set 
determine depth traversal needed st uses theorem 
column th row value greater search continues tree find answers 
search moves child input node cumulative distance table output cn cti label cni dtw dist column value new row minimum column value new row dist insert label cni ni cj filter st cni cti return algorithm 
filter st 
algorithm analysis analyzing complexity st examine complexity sequential scanning 
sequential scanning reads sequence builds cumulative distance tables number suffixes contained sequence 
complexity building cumulative distance table query sequence suffix length 
sequences average length suffixes average length 
complexity sequential scanning 
computationally expensive sequential scanning due branch pruning theorem sharing cumulative distance tables suffixes common prefixes 
complexity st rd reduction factor due sharing cumulative distance tables rp reduction factor gained branch pruning 
rd grows length number common prefixes suffixes contained suffix tree increase 
suffixes ct ct 
elements construction cumulative distance tables requires computation cells 
reduced iql iql lo cumulative distance table common prefix length shared suffixes 
case rd expressed rd ict lov ict 
rd determined distribution element values rp decided number answers required user 
rp increases distance threshold decreases 
small just subsequences may answers topmost part suffix tree may visited query processing 
extreme case large subsequences answers nodes suffix tree need visited making rp 
worst case common subsequence branch pruning help values rd rp complexity st sequential scanning 

similarity search categorization section introduce concept categorization decrease number values elements take increase length number common subsequences 
explained previous section length number common subsequences increase index size query processing time reduced 
get categorized representations element values generate set categories determine ranges 
convert element value symbol corresponding category 
example categories cz 
transformed cs 
cs 
denotes converted sequence 
sequences continuous values converted sequences discrete symbols 

categorization method categorization methods chosen experimented simple implementations albeit categorization approaches type abstraction hierarchy kmeans algorithm may categorize element values 
method equal length categorization 
name implies categories equal interval length max min min smallest element value set sequences max largest element value set sequences number categories input parameter categorization algorithm 
categorization approach simple fast loses information value frequency distributions sequences 
second method maximum entropy categorization 
entropy categorization defined ei ci probability element included th category 
minimize loss information sequences categorization method decides category boundaries generate maximum entropy value 
boundaries determined easily making categories include number elements 
cc 
easy determine number categories categories help increase number common subsequences likewise categories help reduce query processing time decreased filtering rate index 
simple strategy experiments set sequences determine best number categories cost function wtc jr wsc ct cs costs processing query storing index respectively wt ws relative weights 
determination weights application dependent 

index construction converting element values discrete symbols build suffix tree set converted sequences 
denote resultant tree sto stc constructed construction algorithm ordinary suffix tree 

modified distance function dtw edges suffix tree labeled numeric values edges stc labeled discrete symbols 
result exact time warping distance query sequence numeric values subsequence contained stc computed 
introduce new distance function dtw lb 
definition 
non null sequences si sj distance function dtw lb si csj returns lowerbound distance dtw si sj defined follows dtw lb si csj lb si csj min dtw si csj dtw si csj dtw si csj lb ub lb lb lb ub numeric value corresponding si category symbol corresponding csj 
definition lb lb ub minimum maximum element values respectively category shown lb returns possible minimum distance ub possible minimum distance ib ub possible minimum distance ib ub ub possible minimum distance ib ib 
minimum distance prevent false dismissals distance returned dtw lb si csj equal distance computed dtw si sj 
theorem states fact 
theorem 
non null sequences sj inequality holds 
dtw lb si csj proof 
proof 

search algorithm st input root node output null filter stc postprocess return algorithm 
st algorithm st needs modified reflect categorized representation element values 
proposed search algorithm st shown algorithm 
note element values query sequence converted discrete symbols 
find candidate subsequences lower bound distances query sequence filter si called recursively 
filter si filter si uses dtw lb build cumulative distance table uses dtw 
lower bound distance filtering subsequences exact time warping distances larger may included candidate answer set 
subsequences called false alarms 
answer contained candidate answer set algorithm postprocess retrieves actual subsequences computes exact time warping distances 
subsequences actual time warping distances larger returned answers 
algorithms filter si postprocess omitted due space limitations 

algorithm analysis complexity st represented mi ql ni number subsequences requiring post processing 
left expression represents time filtering right expression represents time post processing 
compared st st performance improvements due larger value rd despite extra time post processing 
similarity search sparse suffix tree suffix tree stores subset suffixes called sparse suffix tree 
size suffix tree linear number leaves sparse suffix tree smaller original suffix tree 
suffixes inserted tree called stored suffixes suffixes inserted tree called non stored suffixes 
reduction index size storing subset suffixes measured compaction ratio defined number non stored suffixes number suffixes 
section propose sparse suffix tree reduce index size accelerate query processing 

index construction similar stc sparse suffix tree built set categorized sequences 
sic suffixes values different immediately preceding values stored sparse suffix tree 
suffix csj stored csj csj 
example cs suffixes css cs cs stored sparse suffix tree 
denote resultant tree sstc 

modified distance function dtw suppose cumulative distance table si csj si csj located axis axis respectively 
get distance si prefix csj reading column row direct way compute distance si suffix csj building new table 
elements csj value obtain lower bound distance dtw lb si csj 
new distance function dtw lb si csj 
definition 
non null sequences si csj elements csj value distance function dtw lb si csj 
returns lower bound distance dtw lb si csj defined follows dtw lb si csj dtw lb si csj lb si csj know value dtw lb si csj dtw lb si csj computed complexity 
distance returned dtw lb si csj equal dtw lb si csj 
theorem states fact 
theorem 
non null sequences sj elements csj value inequality holds dtw lb si csj proof 
proof 

search algorithm sst algorithm st needs modified reflect fact suffixes stored index 
st applied sstc modification subsequences contained non stored suffixes may included answer set similar target query sequence 
steps finding processing subsequences contained non stored suffixes need added st proposed algorithm sst includes filtering step post processing step 
filtering step dtw lb calculate distances subsequences contained stored suffixes dtw lb compute distances subsequences contained suffixes 
post processing dtw applied subsequences included candidate answer set 
detail description ss algorithm 

algorithm analysis complexity sst represented number subsequences requiring post processing compaction ratio mi number stored suffixes rm number suffixes 
compared st sst reduces query processing time decreasing number cumulative distance tables generated tree traversal cost larger 
experimental results study performance similarity search algorithms conducted experiments stock data sequences extracted biz com stocks artificial data sequences 
stock data daily closing prices 
total stock sequences average length 
expression generating artificial sequences defined si si zp zp 
independent identically distributed random variables 
percent query sequences extracted stocks average prices stocks average prices remaining stocks 
query sequences artificial sequences obtained similar manner 
average length query sequences set 
experiments scalability test section performed stock artificial sequences 

index size query processing time increasing number categories table shows sizes proposed indices built stock sequences el equal length categorization maximum entropy categorization 
size st affected number categories stc sstc larger number categories increases 
stc sstc smaller st due increased number common subsequences sstc smaller stc due decreased number suffixes stored index 
table 
index sizes selected number categories index size kbytes stc sstc st el el table shows average query processing times proposed similarity search algorithms average distance tolerance 
number categories increases executions sto faster 
executions slow number categories exceeds certain threshold 
threshold value may optimal number categories 
example optimal number categories sst el similar sized indices faster sto yields better performance el 
obtained similar experiments artificial sequences 
table 
average query processing times selected number categories average query processing time sec sim st sstc search st el el 
comparison sequential scanning results section chose sstc index structure compared similarity search algorithm sequential scanning 
table shows average query processing times increasing distance threshold 
answers returned answers reported 
sequential scanning ss represents proposed algorithm categories 
table know sstc categories require spaces database size kbytes respectively 
proposed technique times faster categories times faster categories times faster categories sequential scanning 
table 
comparison sequential scanning algorithm selected distance threshold query processing time sec sim sim sim seq search search search scan sst sst sst oo sstc search average length sequences 
comparison sequential scanning algorithm selected length sequences ooo ooo sim number sequences 
comparison sequential scanning algorithm selected number sequences 
scalability study 
study scalability approach compared execution times sequential scanning increasing average length number artificial sequences 
increased average length sequences keeping number sequences equal 
changed number sequences maintaining average length sequences equal 
experiments numbers categories chosen index size smaller database size 
shown performance improvements maintained long sequences large number sequences 
note query processing times sequential scanning increase quadratically respect average sequence length linearly respect number sequences 
proposed indexing method disk suffix tree fast retrieval similar subsequences false dismissals 
sampling rates lengths sequences may different proposed method uses time warping distance similarity measure allows stretching compressing sequences time axis 
experiments stock artificial sequences shown proposed technique orders magnitude faster sequential scanning 
contributions extending exact matching algorithm suffix tree similarity searches time warping similarity measure applying ideas categorization sparse suffix tree index structure compact introducing lower bound time warping distance functions dtw lb dtw lb filter dissimilar subsequences false dismissals 
index space reduced know minimum maximum lengths queries 
warping window constraint calculate minimum maximum lengths answers 
suffixes lengths shorter minimum answer length need inserted index 
suffixes lengths longer maximum prefixes lengths equal maximum length need stored index 
subsequences similarity searches predictions hypothesis testing clustering rule discovery 
example medical domain retrieved subsequences predicting disease evolution patterns patient web environment discover user web site visiting patterns 
approach extended sequences multivariate numeric values 
multivariate values converted multi dimensional cells multidimensional categorization methods type abstraction hierarchy 
index construction query processing techniques applied set converted sequences 
currently working direction retrieving similar medical image subsequences 

agrawal faloutsos swami efficient similarity search sequence databases proc 
fodo evanston il usa 
agrawal psaila wimmers za querying shapes histories proc 
vldb zurich switzerland 
berndt clifford finding patterns time series dynamic programming approach advances knowledge discovery data mining aaa press 
riedl generalized suffix trees biological sequence data applications implementation proc 
hawaii international conference system sciences 
matching indexing sequences different lengths proc 
km las vegas nv usa 
chu chiang abstraction high level concepts numerical values databases proc 
aaa workshop knowledge discovery databases seattle wa usa 
chu taira 
knowledge multimedia medical distributed database system information systems press elsevier science 
chu hsu taira knowledge image retrieval spatial temporal constructs eee tkde 
faloutsos lin fastmap fast algorithm indexing data mining visualization traditional multimedia datasets proc 
acm gmod san jose ca usa 
faloutsos ranganathan manolopoulos fast subsequence matching time series databases proc 
acm gmod 
goldin kanellakis similarity queries time series data constraint specification implementation proc 
constraint programming 
ukkonen sparse suffix trees proc 
cocoon hongkong 
park chu yoon hsu suffix tree fast similarity searches time warped subsequences sequence databases ucla cs tr 
park lee chu fast retrieval similar subsequences long sequence databases proc 
eee workshop evanston rabiner 
juang fundamentals speech recognition prentice hall 
rafiei mendelzon similarity queries time series data proc 
acm gmod tucson az 
stephen string searching algorithms world scientific publishing 
shannon weaver mathematical theory communication 
university illinois press 
shatkay zdonik approximate queries representations large data sequences proc 
eee cde 

wang 
chirn marr shapiro shasha zhang pattern discovery scientific data preliminary results proc 
acm gmod minneapolis mn 
sequence matching images proc 
ssdbm los alamitos ca 
:10.1.1.45.9798
yi jagadish faloutsos efficient retrieval similar time sequences time warping proc 
eee cde 
