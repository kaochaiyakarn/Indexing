contracts aspects uml designs jean marc quel plouzeau irisa inria university rennes campus de beaulieu mail plouzeau irisa fr separation concerns basic engineering principle applied object oriented analysis design functional aspects business objects non functional ones persistency fault tolerance 
unified modeling language uml gives designer rich disorganized set views model features design pattern occurrences stereotypes tag values add non functional annotations model 
explore possibility organize features central notions quality service contracts specifying non functional properties la qml aspects describing implemented 
propose model contracts uml small set stereotypes represent aspects bit design pattern occurrences parameterized collaborations equipped transformation rules expressed meta level ocl 
design level aspect weaver just meta level ocl interpreter takes uml model entry point processes various aspect applications specified designers outputs detailed design level uml model serve basis code generation 

separation concerns basic engineering principle provide benefits additive invasive change improved comprehension reduction complexity adaptability reuse 
views projections multi dimensional system separate plans unified modeling language uml provides designer interesting separation concerns calls view model design view component view process view deployment view plus case view 
turn views dimensions static dynamic 
furthermore designer add nonfunctional information persistency requirements model stamping model elements instance design pattern occurrences stereotypes tag values 
explore possibility organize features central notions quality service contracts specifying non partly funded european project ist torben weis kurt tu berlin ivs berlin mail weis ivs tu berlin de functional properties aspects describing implemented 
section propose model contracts uml small set stereotypes represent aspects bit design pattern occurrences parameterized collaborations equipped transformation rules expressed meta level ocl 
design level aspect weaver section just meta level ocl interpreter takes uml model entry point processes various aspect applications specified designers outputs detailed design level uml model serve basis code generation 
section gives illustration approach toy example 
discuss related section conclude interest perspectives approach 

designing aspects uml aim section extend ideas expressed aspectoriented programming aop software modeling level 
authors explicit gap exists requirements design hand design code hand 
aop extended modeling level aspects explicitly specified design process 
believe support open transformation framework possible weave aspects final implementation model 
uml design language open standard general purpose object oriented modeling language 
uml supports concept multiple views allow software designer express various requirements design implementation decisions view independently 
design founded meta model uml ensuring coherence various views 
extension features uml allow customized specific modeling environment 
expressing aspects uml various modeling dimensions uml provide separation concerns modeling software 
order specify additional non functional information cross cutting behavior persistency need resort uml built extension mechanisms 
designer add great deal non functional information model hooking annotations model elements 
propose organize features central notions quality service contracts specifying non functional properties la qml aspects describing implemented 
modeling contracts uml word contract mean specification constraints met entity requests service entity 
document defines different levels contracts 
level deals parameter type compatibility second level pre postconditions third synchronization constraints fourth non functional features request completion time throughput 
briefly recall contract metamodel fourth level 
model qml concepts expressing nonfunctional values adapted fit component designs 
point view application designer contract types entities class diagram state non functional constraints 
contract type instance contract meta entity added uml metamodel 
contract entity specialization interface standard entity metamodel 
contract type contains dimensions 
dimension seen axis quality measure 
contract type defines quality space 
run time contract instances describe point quality space subspace defined comparison operators 
fourth level contract takes contract dependencies account 
real life service providers components objects methods declare comply contract type environment comply set contract types 
instance bound request execution time valid maximum network delay milliseconds 
respect contract aware piece software distinguish provided contracts required contracts notion similar distinction pre post conditions 
uml dependency association express provided required relationship uml models 
realizing contracts aspects aspect show contract implemented 
typically pieces design realize certain contract scattered entire design 
reason aop appropriate solution separating implementation contract rest model 
point time weave aspect target uml model produce final implementation model 
aspect weaver know exactly aspect touches target model 
brings important aop topics question define join points 
talk resolved joinpoints defined 
typical aop extensions programming languages join points usually part aspect 
means aspect weaver needs know target aspect start weaving 
approach bit different approach couples aspect tightly target model 
little chances reuse aspect target model 
decided remove shortcoming 
definition join points longer integral part aspect 
form third entity connects target model aspect 
degree blurs borders aspects parametric collaborations 
aspects hard coded join points anymore pass arguments formal parameters aspect 
aspectj join points related constructs target language functions classes aspects live context uml join points elements uml meta model 
instance meta class may passed argument formal parameter aspect 
formal parameters type meta class uml meta model 
formal parameters aspect conceptually close signature functions procedural languages type parameters automatically derived parameter corresponding element inside aspect definition 
type stated explicitly aspect signature 
show entities diagram target model join points aspect 
order provide support complicated aspects simple list formal parameters sufficient 
imagine formal parameters aspect class method 
complicated want pass class multiple methods join points respectively arguments aspect 
impossible flat list formal parameters 
allow definition relationships parameters 
illustrated curly braces second formal parameter 
second parameter fact set 
important notice aspect defined interface explains woven target model 
order aspect designer needs know 
hand implementation entirely encapsulated inside aspect 
turn means possible reuse aspect comparable target models 
chapter discuss define aspect declare aspect showed bind target model 
modeling elements inside aspect thought metaprogram interpreted aspect weaver 

weaving uml designs tool drawing uml models 
tools enforce concept certain diagram types 
allowed meta model drawn 
especially important modeling aspects fit existing diagram category 
additionally import uml profiles provide enhanced notation stereotyped uml elements 
provide new notation aspects rely solely standard uml extension mechanisms 
umlaut framework dedicated manipulation uml models 
uml described meta model uml manipulating meta model manipulating model 
deal weaving aod designs handling model meta model level 
aim developing meta level ocl interpreter connected execute weaving operations specified relevant aspect applied initial model 
advocate uml expressive power fulfil needs 
particular object constraint language ocl standardized part uml language choice expressing selection criterion transformation specifically designed provide powerful constructs select forall iterate operators dedicated collection processing 
writing transformations consists navigating instances uml meta elements 
example retrieving applications command pattern collaborations package may realized filtering operation declaration context package commands post result self contents select item modelelement item collaboration select name command finding classifiers playing role receiver command pattern done receivers operation navigating uml metamodel collaboration classifier context package receivers post result commands ownedelement select name receiver base ocl interpreter integrated umlaut performs evaluation operations model 
transformation operations uml involves addition modification removal model elements 
operations side effect free expressed ocl version 
deal situation propose describe actions help newest version ocl ocl proposal currently standardized omg 
introduces uml metamodel classes primitive operations model transformations 
weaving process implemented model transformation process weaving step transformation step applied uml model 
final output uml model 
uml meta modelling architecture ocl specifying transformations appealing development capitalizes experience designers gained modeling uml applications 
recurrent problems disappear portability transformations ensured tools access meta model learning curve writing new meta tools pure uml development process supporting uml applies building reuse transformations 
paves way shelf transformation components 
ocl transformation language powerful choice 
developers know uml concepts know uml meta model 
knowledge crucial write correct ocl expressions 
helpful provide notation transformation close standard uml notation require knowledge meta model 
intend provide just graphical notation ocl expressions 
just tweaking notation simplifying 
aspects programming languages aspectj consist large degree normal program code enriched aop specific bells 
propose follow path modelling design aspects 
example aspect consists methods woven class straight forward show methods standard uml style inside aspect notation 
base ideas done field modelling collaborations model composition 
chapter provide small example illustrates notation aspect look 
approach combine benefits approaches 
ocl full control model transformation need proprietary aspect weaving done standard ocl interpreter 
hand smarter notation aspects easy design understand 
trick compile information graphical notation ocl expressions 
graphical notation design aspect implementation directly executed 
execute ocl expressions 
additionally ocl expressions exchange aspects developers different uml tools rely solely standard soon standardized uml technology 
tool aop just additional uml profile module provides new notation 
internally model consists standard uml stereotypes tagged values hidden new notation 
ocl counterpart executed umlaut framework 
uses internally observer pattern user follow changes model step step 
contrast passing aspects target model xmi command line tool reading resulting xmi document comfortable resulting xmi document won include layout information 
furthermore debugging aspect easier follow weaving process step step screen 

example section want illustrate ideas example 
shows component 
realizes interfaces 
addition non functional contract associated component 
contracts depicted convoluted sheet 
compartment name qos dimensions 
example performance contract defines maximum response time function call seconds 
little arrow front dimension indicates smaller value better larger 
component contract interfaces diagram shown completely declarative 
show non functional contract implemented 
intention separate non functional aspect remaining design aspects 
shows look 
implementation aspects package called component contains implementation aspect 
example class implements interfaces helper class 
achieve certain performance aspect introduces concept load balancing 
load class implements load balancing offer interfaces component 
furthermore uses original implementation kind replica 
means aspect weaver perform basically actions 
insert new class called 

create generalization supported interface load balancer class 

create association load balancer original implementation class 
classes called impl correspond parameters aspect 
parameters shown dotted box top right corner aspect 
means just placeholders classes passed aspect 
denoted curly braces aspect parameter list may pass multiple interfaces implementation class 
leads problem multiplicities 
aspect weaver know create new class interface implementation class 
problem appear simple parameter lists 
solve provide aspect weaver additional information 
appending impl name load balancer class indicate multiplicity new uml element parameter impl 
multiplicities new generalization new association derived automatically multiplicities classes connect 
aspect transformed set ocl expressions executed 
result shown 
derives interfaces connected association class 
final model example shown aspects class diagrams 
principles applied kind uml diagrams state charts activity diagrams 
example pass states formal parameters aspect 
aspect add new states transitions state chart 
way aspects model behaviour 

related aspect subject oriented programming adaptive programming aspect oriented programming subject oriented programming taken software development class concept object oriented programming 
address explicitly additional dimensions constitute inherent complexity software 
believe works implementation level broaden entire software cycle lead aspect oriented design aod 
uml context ao modeling evident proposed explicit multidimensional concerns entire software development cycle 
aims providing automated tool support expression aspects design model level 
provision meta level interpreter added advantage user define weaving strategies composing transformation operations 
transformations weaving process demonstrated 
relative source code oriented approach umlaut addresses transformation design oriented meta modelling approach 
short umlaut apply aspect oriented concepts entire software development cycle 
express weaving software aspects terms model transformations 
implementation meta level ocl interpreter open extension customization 
uml model transformation functional programming paradigm object oriented context proven versatile technique see especially flexible composition list processing involved 
umlaut transformation framework taken idea provide extensible aod environment 
main interest extensibility possibility defining weaving strategy recomposition primitive transformation operators 
transformation software models widely applied tool automation design patterns software refactoring equivalence transformations formal reasoning 
umlaut transformation incorporates ideas works extends automate definition weaving operations context aod 
addition umlaut exposes concept explicit model transformation software designer benefit versatility open approach 

proposed organize non functional cross cutting behavior uml model central notions quality service contracts specifying non functional properties aspects describing implemented 
qml concepts propose model contracts uml small set stereotypes represent parameterized collaborations equipped transformation rules expressed meta level ocl 
design level aspect weaver just meta level ocl interpreter 
possibility modeling aspects contracts uml believe aspect oriented programming core ideas extended entire software development cycle 
aspect design implementation declared contract linked business model expanded design phase clear traceability requirements source code 
currently developing proof concept tool connecting umlaut tool inria tool tu berlin framework ist quality controlled component software engineering see www org 

michael blaha william premerlani 
catalog object model transformation 
rd working conference reverse engineering november clarke william harrison harold ossher peri tarr 
separating concerns development lifecycle 
ecoop workshop proceedings aspect oriented programming proceedings 
clarke john murphy 
developing tool support application aspect oriented programming principles design phase 
icse workshop proceedings aspect oriented programming proceedings 
laurent 
software composition integration functional object oriented approaches 
ph thesis university geneva 
philippe 
automation design pattern concepts tools practices 
jean zivin pierre alain muller editors unified modeling language uml 
international workshop france june volume lncs pages 
springer 
andy evans 
reasoning unified modeling language 
proc 
workshop industrial strength formal specification techniques 
pascal fradet mario 
aop generic framework program transformation analysis 
ecoop workshop proceedings aspect oriented programming proceedings 
erich gamma richard helm ralph johnson john vlissides 
design patterns elements reusable object oriented software 
addison wesley 
martin gogolla mark richters equivalence rules uml class diagrams 
jean zivin pierre alain muller editors unified modeling language uml 
international workshop france june volume lncs pages 
springer 
william harrison harold ossher 
subject oriented programming critique pure objects 
andreas paepcke editor oopsla conference proceedings volume acm sigplan notices pages 
acm press october 
wai ming ho jean marc quel alain le fran ois 
umlaut extendible uml transformation framework 
robert hall ernst editors proc 
th ieee international conference automated software engineering ase 
ieee 
walter cristina lopes 
separation concerns 
technical report northeastern university february 
elizabeth kendall 
aspect oriented programming role models 
ecoop workshop proceedings aspect oriented programming proceedings 
gregor kiczales john lamping anurag chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
mehmet aksit satoshi matsuoka editors ecoop object oriented programming th european conference jyv skyl finland volume lecture notes computer science pages 
springer verlag new york june 
philip view model architecture ieee software vol 
november 
thomas hne 
internal iteration externalized 
rachid guerraoui editor ecoop object oriented programming th european conference lisbon portugal volume lecture notes computer science pages 
springer verlag new york june 
kevin lano juan 
formalising uml structured temporal theories 
haim kilov bernhard rumpe editors proceedings second ecoop workshop precise behavioral semantics emphasis oo business specifications pages 
technische universit nchen tum 
konstantin laufer 
framework higher order functions 
usenix association editor proceedings usenix conference object oriented technologies coots pages berkeley ca usa june 
alain le suny jean marc quel 
precise modeling design patterns 
proceedings uml volume lncs pages 
springer verlag 
anurag mendhekar gregor kiczales john lamping 
rg case study aspect oriented programming 
technical report xerox palo alto research center february 
technical report spl 
mira mezini karl lieberherr 
adaptive plug play components evolutionary software development 
acm sigplan notices october 
omg 
uml notation guide 
william opdyke 
refactoring object oriented frameworks 
ph thesis university illinois 
donald bradley roberts 
practical analysis refactoring 
technical report uiucdcs university illinois urbana champaign april 
siegfried sch rudolf keller ismail 
algorithmic support model transformation objectoriented software development 
theory practice object systems 
suzuki yamamoto 
extending uml aspects aspect support design phase 
ecoop workshop proceedings aspect oriented programming proceedings 
jos warmer kleppe 
object constraint language precise modelling uml 
addison wesley 
bottoni koch parisi presicce taentzer visualization ocl collaborations 
proceedings uml volume lncs pages 
springer verlag 
clarke robert walker 
composition patterns approach designing reusable aspects proceedings rd international conference software engineering icse toronto canada may meyer applying design contract 
ieee computer special issue inheritance classification 

making components contract aware 
ieee computer special issue components 

quality service specification distributed object systems 
distributed systems engineering journal 

weis becker ch plouzeau uml metamodel contract aware components proc 
uml conference 
