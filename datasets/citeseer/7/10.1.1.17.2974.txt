active network architecture david tennenhouse david wetherall networks systems group mit active networks allow users inject customized programs nodes network 
extreme case interested replaces packets capsules program fragments executed network router switch traverse 
active architectures permit massive increase sophistication computation performed network 
enable new applications especially application specific multicast information fusion services leverage network computation storage 
furthermore accelerate pace innovation decoupling network services underlying hardware allowing new services loaded infrastructure demand 
describe vision active network architecture outline approach design survey technologies brought bear implementation 
propose research community mount joint effort develop deploy wide area 

traditional data networks passively transport bits system 
ideally user data transferred network insensitive bits carries transferred systems modification 
role computation networks extremely limited header processing packet switched networks signaling connection oriented networks 
active networks break tradition allowing network perform customized computations user data 
example user active network send customized compression program node network router request node execute program processing packets 
networks active ways switches perform computations user data flowing 
individuals inject programs network tailoring node processing application specific 
identified architectural approaches active networks 
approach find particularly interesting replaces passive packets day architectures active capsules miniature programs executed router traverse 
change architectural perspective passive packets active capsules simultaneously addresses active properties described 
user data embedded mini programs way page contents embedded fragment postscript code 
furthermore capsules invoke pre defined program methods plant new ones network nodes 
motivated technology push user pull 
technology push emergence active technologies compiled interpreted supporting encapsulation transfer interposition safe efficient execution program fragments 
today active technologies applied individual systems network layer example allow web servers clients exchange program fragments 
innovation leverage extend technologies network ways fundamentally change today model network 
pull comes ad hoc collection firewalls web proxies multicast routers mobile proxies video gateways perform user driven computation nodes network 
despite architectural nodes suggesting user management demand services 
developing architectural support common programming platforms support diversity dynamic deployment requirements interposed services 
goal replace numerous ad hoc approaches implementation generic capability allows users program networks 
principal advantages basing network architecture exchange active programs passive packets exchanging code provides basis adaptive protocols enabling richer interactions exchange fixed data formats 
capsules provide means implementing fine grained application specific functions strategic points network 
dlt djw lcs mit edu 
www lcs mit edu 
earlier version delivered keynote session multimedia computing networking san jose ca january 
programming abstraction provides powerful platform user driven customization infrastructure allowing new services deployed faster pace sustained vendor driven standardization processes 
presents vision active network architecture approach deployment operational 
active network approach opens box safety security resource allocation issues 
complete design identify number specific research issues outline approach resolution identify technologies intend leverage 
plan bootstrap wide area similar techniques prototype mbone locating platforms strategic locations tunneling existing transmission facilities internet 
section provide description lead user applications motivate architecture facilitates computation network 
section provide overview active networks high level perspective propose organize platforms research issues addressed 
section describes instruction set issues associated interoperable programming model active technologies leveraged effect safe efficient evaluation capsules 
discuss management node resources storage link bandwidth followed plan deployment research 
realize challenges key assumptions guided networking research final sections discuss architectural structural questions raised approach 

lead users considerable interest agent technologies allow mobile code travel clients servers web applets allow mobile code travel servers clients 
active networks bridge dichotomy allowing applications dispatch computation needed 
encouraged observation number lead users pressing requirements transparent interposition computation network 
include developers firewalls typically located administrative boundaries 
web proxies services dns multicast routers form strategic vertices copy fusion cache trees 
mobile nomadic gateways placed near edges network significant discontinuities available bandwidth base stations wireless networks 
lead applications demonstrate user pull active networks 
absence coherent approach interposition adopted variety ad hoc strategies 
cases interposed platforms facade network layer routers perform application functions 
active networks rationalize diverse activities providing uniform platform network computation 
firewalls firewalls implement filters determine packets passed transparently blocked 
peer relationship routers implement application user specific functions addition packet routing 
need update firewall enable new applications impediment adoption 
active network process automated allowing applications approved vendors authenticate firewall inject appropriate modules 
web proxies web proxies example applicationspecific service tailored serving caching world wide web pages 
harvest employs hierarchical scheme cache nodes located near edges network user organizations 
system scalable extended allowing nodes hierarchy located strategic points networks access providers inter exchange carriers 
interesting problem development algorithms tools automatically balance hierarchy re positioning caches just cached information 
schemes dynamic hierarchical caching geographical push caching address issue 
argument favor active technologies web caching significant fraction web pages dynamically computed susceptible traditional passive caching 
suggests development web proxy schemes support active caches store execute programs generate web pages 
mobile nomadic computing interposition strategies number researchers addressing mobility 
example kleinrock describes nomadic router interposed system network 
module observes adapts means system connected network phone line hotel room versus lan home office 
decide perform file caching link compression system connected low bandwidth link invoke additional security encryption operating away home office 
similarly nomadic agents gateways nodes support mobility 
located strategic points bridge networks vastly different bandwidth reliability characteristics junctions wired wireless networks 
application neutral tcp snooping improves performance tcp connections retaining connection state information wireless base stations 
application specific services performed gateways include file caching transcoding images 
takes process instantiating user specific pad servers supporting range applications voice hand writing recognition intermediate nodes 
new application domains reservoir applications require sophisticated network services support distribution fusion information 
promising direction development multi point communication strategies flexible existing ip multicast service performs limited computation user data copying 
application specific multicast example provide mechanism realize quality service filtering suggested video conferencing 
information fusion example domain may leverage interposed computation 
applications sensor fusion simulation remote manipulation allow users see composite images constructed fusing information obtained number sensors 
fusing data network reduces bandwidth requirements users located periphery network 
placing application specific computation near needed addresses latency limitations shortening critical feedback loops interactive applications 

act networks section provide overview active networks highly programmable networks perform computations user data passing 
distinguish approaches active networks discrete integrated depending programs data carried discretely separate messages integrated fashion 
provide high level description active nodes organized describe node programming model provide basis cross platform interoperability 
programmable switches discrete approach processing messages may architecturally separated business injecting programs node separate mechanism function 
users send packets programmable node way today 
packet arrives header examined program dispatched operate contents 
program actively processes packet possibly changing contents 
degree customized computation possible header message identifies program run possible arrange different programs executed different users applications 
separation program execution loading valuable desirable program loading carefully controlled individual programs relatively large 
approach example intelligent network standardized ccitt 
internet program loading restricted router operator furnished back door dynamically load code 
back door minimum authenticate operator perform extensive checks code loaded 
note allowing operators dynamically load code routers useful router extensibility purposes programs perform application user specific computations 
integrated approach extreme view active networks message program 
message capsule passes nodes contains program fragment instruction may include embedded data 
capsule arrives active node contents evaluated way postscript printer interprets contents file sent 
provides conceptual view active node organized 
bits arriving incoming links processed mechanism identifies capsule boundaries possibly framing mechanisms provided traditional link layer protocols 
capsule contents dispatched transient execution environment safely evaluated 
hypothesize programs composed primitive instructions perform basic computations capsule contents invoke external methods may provide access resources external transient environment 
execution capsule results scheduling zero capsules transmission outgoing links may change non transient state node 
transient environment destroyed capsule evaluation terminates 
programming distinction discrete integrated approaches perspective primarily useful basis comparing ways thinking networks programming 
practical terms network integrated approach programmed emulate discrete approach vice versa 
intrigued transient execution component storage processing transmission schedule 
active node organization possibilities afforded integrated perspective especially respect new ways leveraging computation network 
provides programming language framework thinking networks framework enable synthesis results areas programming environments operating systems networks 
paragraphs discuss ways active networks leveraged support variety traditional functions ip packet processing connections flows routing protocols examples meant provide insight flavor networks envision establish groundwork discussion programming model implementation technologies follows 
simple applications capsule actions visiting node compute hop destination schedule zero possibly modified copies transmission selected links 
necessary provide mechanisms determining naming links outgoing capsules transmitted 
ip protocol mechanism built node individual packets need carry destination address need knowledge links traverse 
pure source routing schemes message carries identities links traverses 
hope develop intermediate approach capsules dynamically enumerate evaluate paths available node requiring detailed knowledge time capsule composed 
important question concerns degree capsule program access objects routing tables lie transient execution environment 
restricted approach capsules largely self contained 
sufficient implement interesting programs abovementioned source routing model somewhat confining 
paragraphs discuss ways programs reach capsule transient environment foundation components universally available services implemented outside capsule 
active storage ability modify state node storage left completion capsule execution 
extensibility allowing programs define new classes methods 
foundation components foundation components implement external methods provide controlled access resources outside transient execution environment 
subset components reflect api node run time environment applications 
components provide built class hierarchy serves base development capsule programs 
capsules require access information services routing tables state node transmission links 
built components provide access information design capsules evaluation performs similar processing performed header ip datagram 
multi cast option processing instructions included capsules require 
traditional ip approach calls code fixed built router active case program flexible carried data 
migration purposes develop standardized components implement existing internet protocol types 
capsule carrying embedded ipv datagram contain single instruction form execute ipv method remainder payload 
put matters perspective think existing routers extremely restricted subset active nodes capsule program carried ip protocol type field 
instruction set restricted pre defined methods correspond known protocol type field values implement standardized functionality specified ietf 
active storage advantageous capsules leave information node non transient storage 
open connection arranging capsule executed node specific path having leave small amount associated state node traverses 
subsequent packets path include code locates evaluates connection state node 
similar approach realize flows somewhat softer connections 
capsule include code attempts locate flow state nodes traverses 
flow capsules somewhat robust connections flow state essential capsule successful execution 
flow capsule encounters node relevant state information dynamically generates required data uses purposes leaves convenience capsules 
network nodes treat flow states soft state values cached disposed necessary 
respect flows demanding connections robustness node storage 
course active connections flows considerably powerful day systems state left form programs static table entries 
eventually hope develop new schemes go traditional connections flows 
example capsules programmed rendezvous node arranging arriving capsule set state information sleep remaining capsules arrived 
capsules engage joint computation may sensor fusion applications pruning multi cast trees 
note capsules capable modifying node storage provide uniform mechanism implementation background node functions 
routing protocols table updates implemented capsules network management functions provided snmp 
long lived housekeeping functions implemented manner case transient execution environment survive node reset 
program extensibility programs short relative data encapsulate prove inefficient carried individual messages 
accordingly sense programming environment extensible capsules plant uniquely named classes methods nodes capsules methods 
way capsules concise possibly single instruction invokes user specific method remainder capsule contents 
interesting scheme provide mechanism dynamically resolves external methods 
capsules explicitly loading methods non transient storage node node contain cache known external methods equipped mechanism allows locate dynamically load methods demand 
demand approach suffer latency problems new application started offset allowing capsules prime cache faults anticipated 
distinction explicit demand loading schemes closely related broader distinction discrete integrated approaches active networks 
explicit discrete cases distinguish program loading explicit activity completed prior usage 
contrast demand integrated cases offer increased flexibility respect determination timing 
course flexibility comes cost terms sophistication mechanisms required support safe efficient loading 
interoperable programming model general utility capsules require mobility programs transmitted network portability loaded range platforms 
suggests development relatively small number standardized models programming network nodes description allocation resources 
objectives models support mobility ability transfer capsules execute range platforms leverage different underlying technologies 
safety ability restrict resources capsules access 
efficiency enabling compromising network performance common cases 
traditional packet networks achieve interoperability standardizing syntax semantics packets 
example internet routers support agreed ip specifications router implementations may interesting approach resolving cache faults node request method node sent faulting capsule forming chain back originator capsule expected take ultimate responsibility resolving 
course originator demand loading code software vendor 
differ implement roughly equivalent programs 
contrast active nodes execute different programs perform different computations packets flowing 
network interoperability achieved higher level abstraction standardizing computation performed packet standardize computational model instruction set resources available capsule programs 
find convenient distinguish issues surrounding representation evaluation capsules safe access node resources 
section outline functionality required discuss mechanisms support safe efficient execution capsules 
discuss active technologies developed programming language operating system communities prevent unauthorized access resources lie boundaries transient execution environment capsule dropped 
section discuss resource management important issue active nodes nodes components shared infrastructure users protected degree typically required personal computers group servers 
programming model deal issues associated node resources interoperability resource management 
interoperability requirement common model resources available node 
resource management issues include resource allocation capsule authentication authorization 

capsule programs mobility safety efficiency section discuss languages capsule programs expressed mechanisms support safe efficient execution 
approach evaluate capsule context transient execution environment lifetime interval capsule evaluated node 
safety properties provided restricting actions performed scope access storage node resources 
capsule primitives limited set primitive actions capsules perform transient environments 
actions constitute restricted programming language instruction set perform arithmetic branch operations manipulate stack heap storage transient environment 
set primitive actions extended addition external method invocation provides access resources transient environment 
external methods leverage primitive actions evaluated closed environment sharp distinction self contained actions access methods 
access built apt node run time environment embedded operating system 
apt active network nodes distinguished availability methods tailored network environment efficient copying capsules sophisticated control scheduling transmission resources 
interoperability purposes active nodes capsule path capable evaluating capsule contents 
known ways achieving level portability mobility express programs high level source language may interpreted nodes adopt platform independent intermediate representation typically byte coded virtual instruction set express programs platform dependent binary format arrange capsule carry multiple encodings program type platform traverses 
expect leverage approaches 
source encodings prove useful rapid prototyping 
intermediate representation may provide compact relatively efficient way express relatively short programs 
external methods similarly encoded expressed machine dependent format 
expect heavily components packaged binary libraries especially bootstrap libraries allow administrators initialize newly installed repaired platforms 
safe efficient execution reasons believe possible realize active networks availability active technologies mechanisms allow users inject customized programs shared resources 
active technologies new 
active technologies network novel active technologies networking shipping code servers clients vice versa 
case active networks shared resources question routers switches servers lie network 
hop capsule translate language understood hop node path 
approach extreme standards 
leverage extend presently available technologies 
active technologies background active technologies emerging fields operating systems programming languages years 
early tended address important issues mobility efficiency safety 
postscript example early effort stressed mobility safety 
applications generate mobile programs executed printers may shared distributed network 
field parallel processing active messages stressed efficiency mobility reducing program single instruction message invokes application specific handler resident recipient 
handler provides low overhead mechanism dispatching arriving messages treated computations 
systems targeted communication internal single parallel processor complex address safety issues relevant shared infrastructures 
advent heterogeneous distributed systems internetworking accelerated pace research 
kernel supports composition protocol handlers providing regular architecture stacking automating dispatch process 
efforts focused friendly environments improving safety efficiency handlers implemented 
efforts jointly address issues mobility safety efficiency banners configurable operating systems agents mobile applets schemes related world wide web 
leveraging active technologies active networks adapt extend active technologies network 
general technologies provide safe execution restricting set primitive actions available mobile programs scope operands access storage resources 
interesting question organize closures provide basis safe execution 
starting position namespace capsule restricted transient environment 
containment policy may relaxed initializing closure default set foundation components capsules allowed dispatch 
capsule accesses methods outside space request closure extended authenticating mechanism validates authorization 
paragraphs discuss available technologies terms program encoding approaches source intermediate platform dependent binary introduce onthe fly compilation complementary technology interest 
source code safe tcl example language achieves safety interpretation source program closure namespace 
safety system derives restricted closure correctness interpreter prevent programs deliberately accidentally transient execution environment 
advantage tcl approach programs human readable simple programs composed quite quickly 
furthermore tcl representation easy design programs generate new source fragments 
principal disadvantage overhead source code interpretation compounded tcl encoding data types strings 
additional disadvantage size programs reduced albeit expense readability compression 
intermediate code java achieves mobility intermediate instruction set 
traditionally safe execution intermediate code relied careful interpretation intermediate instruction set 
java key contributions observation significant improvement efficiency achieved loading responsibility interpreter 
instruction set approved usage designed reduce degree operand validation interpreter perform instruction executed 
part enabled design instruction set precludes certain cases normally checked 
enabled static inspection code executed checks need performed typically program loaded 
platform dependent binary code aggressive active technologies provide execution platform dependent binary programs part directly executed underlying hardware 
safely execute program fragments restrict instruction set address space 
traditional operating systems approach rely fairly heavyweight mechanisms processes hardware supported address space protection 
progress lighter weight approaches spin project relies properties modula language trustworthy compiler generate programs stray restricted environment 
program execution run time system verifies instruction sequence generated trusted compiler modified 
approach described prescribes set rules instruction sequences adhere restrictions address arithmetic performed :10.1.1.142.4909
conjunction run time support collection clever techniques rules define sandbox program likes may escape 
important aspect conformance rules statically verified instruction sequence execution 
cases assumed sophisticated compiler technology generate safe code 
distinction code independently validated receiving platform compilers vendors programs trusted authorized sign approach improves mobility especially administrative boundaries 
approach saves overhead validation allow compiler generate code efficient 
cases expect directly executable binary code perform interpreted format 
fly compilation enabled fly compilation dialect programming language :10.1.1.18.5716
allows source programs automatically tailored wholly generated run time 
conjunction sandboxing technology allow active nodes perform source binary translations capsules processing 
fly compilation technologies may prove crucial viability architecture 
modern ip routers achieve reasonable performance careful tuning fast paths typically optimizing minimal instruction sequence processes vast majority traffic complex frequently cases modules 
active node achieve similar performance boost monitoring traffic dynamically generating fast path program streamlines execution common capsule programs 
techniques scheduling path scout may applicable 
discussion variability network applications traffic patterns suggests right answer 
performance gained binary encodings attractive comes cost assume availability appropriate authentication tamper proof signature technology 
portability 
furthermore instruction encodings associated modern processors far compact schemes give rise larger capsules intermediate encoding suggesting trade transmission bandwidth processing capacity 
node implementors designing high risk environments focusing safety may prefer interpretation driven schemes audit execution instruction 
plan adopt java instruction set basis interoperability code mobility 
benefits ip packet format enables architecture variety upper layer protocols operate wide range network substrates 
intermediate instruction set provide analogous facilitates mobility 
range programming languages compilers generate highly mobile intermediate code executed wide range hardware platforms 
believe prove practical attractive provide extensions allow users node implementors leverage source binary technologies 
architectural trick enable technologies retaining intermediate instruction set fallback point ensures interoperability 
considered extensions allow programmers optimistically leverage source programming language safe tcl hope supported nodes capsule traverses 
node equipped appropriate interpreter translator demand load forward capsule node translate intermediate representation 
allow fat capsules carry binary encodings popular platforms alongside intermediate encodings 
nodes track external methods identifying candidates binary encoding 
node leverage fly technology translate methods locally load platform specific versions network 
previous suggestion combined demand loading 
node identify platform type requests external method affording supplier option returning binary encoding appropriate readily available 
summary section outlined approach safe efficient evaluation capsules 
useful distinguish program representation implementation realize strongly influence 
choice programming environment going preferentially favor certain implementation strategies time implementation strategies lead efficiency greater security simply popular going influence programming environment 
having identified requirement common programming models suggesting single model immediately standardized 
tensions available programming models implementation technologies sort research marketplace diverse experimental systems developed fielded accepted rejected users 
example marketplace identifies encodings viable nodes concurrently support emerge 
systems evolve incorporate best features competitors expect schemes dominant 

node resources interoperability safety active networks provide building blocks shared information infrastructure transcends administrative domains 
accordingly design address range sharing issues systems public environments 
focus issues addressed 
interoperability capsule programmers shared understanding resources named 
secondly mechanisms provided limit access scarce sensitive resources 
interoperability resource specification complexity system capsule leverages wide range resources named attributes specified carefully allocated explode quite quickly 
fortunately capsules require sophisticated resource models 
propose relatively spartan approach employing small set platform independent abstractions physical resources node transmission bandwidth processing capacity transient storage 
additional flexibility provided longer term storage logical resources advanced applications topology discovery routing network management 
transmission bandwidth link bandwidth typically considered scheduling resource allocation schemes may requirement control scheduling resources transmission bandwidth 
may requirements resource metering accounting auditing 
conventional operating systems 
link abstraction encompass units bandwidth allocation may take account traffic patterns generated 
detailed approach draw service model activities ietf 
environments simpler schemes may possible allowing capsule program consume quantity transmission bandwidth proportional size capsule arrived 
instruction execution cpu somewhat easier node instruction processing resources multiprocessors tend homogeneous aggregate capacity established industry benchmarks 
cases sufficient assign capsule default allocation guards runaway computations 
ability trade computation bandwidth may useful encourage example compression prior transmission low bandwidth links 
transient storage transient execution environment consumes short term storage limited 
tend think storage capacity axes storage utilized specific intervals duration intervals 
addressed placing default bound transient storage allocated capsule evaluation 
somewhat trickier 
expect capsules complete execution quickly milliseconds 
capsules may linger especially rendezvous 
issue addressed establishing policy permits garbage collection inactive capsules times shortage requires capsules deliberately sleeping place longer term active storage 
active storage identified requirements storage components external methods data survive execution individual capsules 
find useful distinguish types active storage soft persistent 
soft storage cache objects hints flow state demand loaded components survive reinitialization node 
deleted store notice contents regenerated needed 
space easily reclaimed limits allocation may important strategy selects victims reclamation 
persistent storage provides longer term abstraction information reliably stored logs intended mechanisms described page soft state nearby nodes 
accounting auditing purposes 
storage may applications implement asynchronous multi cast services news distribution groups 
storage abstraction available nodes may implemented accessing replicated storage services located network 
hope leverage technologies purpose 
logical resources relatively small number physical resources node may support large number logical resources different types 
suggests need uniform necessarily global mechanism naming instances logical resources including dynamically created resources soft persistently stored components 
fortunately abundance past object naming schemes 
class specifications logical resources application specific external methods flow states may private sense need known capsules generated relevant application 
need interoperable class specifications resources routing tables 
case hope leverage existing notations snmp management information bases mibs 
possible leverage existing mib specifications facilitate interoperation existing internet 
resource safety safe manipulation node resources partitioned types activities dynamic safe assignment resources specific capsules 
validation user requests resource assignment authentication verification authorizations 
automated delegation resource authorizations 
dynamic assignment recall plan leverage closure limitations enforced active technologies 
resources represented accessed external methods default resources available capsule included closure initiated 
requirement mechanism supports dynamic resource allocation 
accomplished providing external method allows program request safe extension closure 
validation mechanism performing validation authenticate capsule source check authorized access resource possibly verify resource request tampered 
mechanism need conjunction requests additional resources 
assume cryptography provide basis validation mechanism may combination schemes reduce capsule overheads 
example public key scheme perform initial authentication establishes soft state lighter weight capsule signature algorithm 
particularly interested inexpensive techniques provide security individual messages defend large scale attacks 
delegation preceding section assumed validation mechanism access information concerning authorizations policy initiated decisions resources accessible specific users applications 
require mechanism supports automated delegation authorizations accordance straightforward model implementors administrators reason 
issue previously considered context time sharing systems aware addresses delegation complex system 
cascading logic authentication delegation flavor looking may provide starting point research :10.1.1.115.3569
ultimately may important open questions respect active networks 
envision administrative domains internet growing administrators swamped expected manually coordinate detailed authorization information place complexity case administrative complexity overwhelm infrastructure 

internet suggest interested researchers pool effort deploy wide area 
experimental infrastructure overlaid existing substrates internet vbns obviating need dedicated transmission facilities 
nodes located participating research sites provision locate nodes strategic locations normally accessible researchers internet 
research proves successful extended assume direct control underlying transmission resources 
assembling collection nodes necessary deal issues addressed design current internet topology discovery routing initially expect adopt techniques internet 
researchers investigate new algorithms leverage availability active nodes 
eventually important converge interoperable programming model achieve active networks ip standardization internet 
connectivity available existing substrates possible deploy multiplicity programming models parallel affording research community opportunity explore alternative programming models node implementations 
particularly important engage application developers users development customized software components exercise architecture architectures 

architectural considerations conventional network architectures separate upper layers lower hop hop layers 
network layer bridges domains enables interoperability providing fixed application user neutral service supports exchange opaque data systems 
active networks challenge traditional thinking number ways computations performed network dynamically varied user application specific user data accessible 
realize break tradition raises number important questions addressed 
interoperability achieved 
key interoperability network layer service narrow point 
case internet detailed specification syntax semantics ip protocol implemented routers communicating systems 
effect interoperability supported requiring nodes perform equivalent computations packets flowing 
contrast active nodes capable performing different computations executing different programs different groups users 
nodes support equivalent computation model 
network layer interoperability agreed program encoding computation environment standardized packet format fixed computation 
architecturally bumping level abstraction interoperability realized 
abstraction point programmable 
isn trend functionality network 
long term trend increased computation network 
telephony circuit switches restrict computation call setup time packet switches perform computations header packet flowing 
active nodes extend domain computation include user data 
intelligence control networkbased computation migrating edges allowing users exercise greater control networks 
experience suggests go hand hand increasing flexibility computation performed network enables deployment greater computational power edges 
impact layered model 
presently disconnect users consider inside network practitioner perspective somewhat restricted 
example web browsers allow users interact perceive network distinguishing routers domain name servers web servers conspire provide service 
may time practitioners reevaluate abstractions start thinking network higher level 
current thinking concerning network architecture roots layering abstractions codified osi model 
model proven quite useful showing cracks addressed services network layer presumed user application neutral 
deals poorly upper layer services physically interposed communicating points 
application relays model cases far elegant 
model recursion occurs network layer tunneling networks 
upper layers particularly satisfactory diminished importance active technologies enable exchange modules implement application specific protocols 
certain form new model take suggest component layered 
distinguish primitive functions cell relaying ip fast paths computationally active functions including configure fast path components 
architecturally types components viewed peers layered 
architecture give rise new hardware activities development switching technology caches fast paths highly responsive active capsules 
argument 
argument concerns design intermediaries networks provide services perfectly reliable 
users services provide mechanisms cope failures designers engineering intermediaries adding significantly complexity overhead trying perfectly reliable 
designer objective acceptable level reliability trigger excessive intervention mechanism 
designer encouraged strike balance relying mechanisms ensure correctness leveraging simple optimistic mechanisms enhance performance appropriate 
locating computation network may appear contradict guideline note argument pertains placement functionality suggest choice functions appropriately located network application specific 
active networks allow guideline followed carefully allowing applications selectively determine partitioning functionality points intermediaries 
hasn done 
try 
approach proposing synthesizes number technologies programmable node platforms component software engineering code mobility 
programmable networks developed past suggestions object approaches network implementation surface years 
previous leveraged code mobility network context capsule packet 
key enabler approach availability active technologies enable safe efficient code mobility 
absence technologies precluded similar projects past emergence underscores timeliness proposed effort 

described vision active network architecture programmed users 
called community participation effort develop deploy research 
course presentation raised number architectural issues research questions remain addressed 
expect active networks enable range new applications addition lead applications rely interposition customized computation network 
believe broader implications think networks protocols infrastructure innovation process 
programming network applying programming language perspective networks protocols 
place protocol stacks anticipate development protocol components tailored composed perform application specific functions 
protocol components leverage tools modern programming trade encapsulation polymorphism inheritance 
research group setting create smalltalk networking interested just language class hierarchy develop 
enthusiasm tempered realization suggestions object oriented approaches networking surface years little impact mainstream research 
believe time large scale effort realization 
availability active technologies lead applications conjunction rising processing power bandwidth presents opportunities previously available 
infrastructure innovation internet grows increasingly difficult maintain accelerate pace innovation 
today concept prototyped large scale deployment takes years 
process involves standardization incorporation vendor hardware platforms user procurement installation 
backlog ietf includes multicast authentication mobility extensions rsvp ipv 
active networks address mismatch rate user requirements change overnight pace physical assets deployed 
accelerate pace innovation decoupling network services underlying hardware allowing new services demand loaded infrastructure 
way ip enabled range upper layer protocols transmission substrates active networks facilitate development new network services hardware platforms 
conventional network routers proprietary hardware platforms bundled customized software 
active networks opportunity change structure networking industry mainframe mind set hardware software bundled virtualized approach hardware software innovation decoupled 
market network software facilitate innovation allowing third parties develop innovative software customizing products specific platform 
removing software barrier entry discourages new players fielding innovative hardware 
addressing chicken egg problem associated new services vendors hesitant support services gain user acceptance utility network services dependent widespread availability 
furthermore process user driven 
widespread availability new services depend acceptance marketplace delayed vendor consensus standardization activities 
similarly hardware vendors seek competitive advantage optimizing platforms suit changing workloads 
summary active networks appear break architectural rules conventional wisdom holds 
believe build past successes packet approaches internet time relax number architectural limitations may artifacts previous generations hardware software technology 
passive network architectures emphasize packet communication served 
lead users demonstrate computation network happening unfortunate network architects notice 
time explore new architectural models active networks incorporate interposed computation 
believe efforts enable new generations networks highly flexible accelerate pace infrastructure innovation 
acknowledgments authors wish jennifer steiner klein assisted drafting technical editing manuscript rachel assisted layout bibliography sun microsystems laboratories provided seed funding project 
influenced discussions number researchers especially deborah estrin henry fuchs butler lampson paul leach gary herb scott shenker dave 

danzig neerdaels 
hierarchical internet object cache 
proceedings usenix 


blaze alonso 
dynamic hierarchical caching large scale distributed file systems 
th intl 
conf distributed computing systems 

yokohama japan 

gwertzman seltzer 
case geographical push caching 
workshop hot operating systems 


kleinrock nomadic computing keynote address 
int 
conf 
mobile computing networking 

berkeley ca 

balakrishnan improving tcp ip performance wireless networks 
int 
conf 
mobile computing networking 

berkeley ca 

amir mccanne zhang 
application level video gateway 
multimedia 

san francisco ca 

le rabaey 
software architecture system 
workshop mobile wireless information systems 

new brunswick nj 

pasquale filter propagation dissemination trees trading bandwidth processing continuous media networks 
th intl 
workshop network operating system support digital audio video 


clark design philosophy darpa internet protocols 
acm sigcomm symposium 

stanford ca 

von eicken active messages mechanism integrated communication computation 
th int 
syrup 
computer architecture 

gold coast australia 

agarwal mit alewife machine architecture performance 
nd int 
syrup 
computer architecture isca 


malley peterson dynamic network architecture 
acm transactions computer systems 


jones interposition agents transparently interposing user code system interface 
th acm syrup 
operating systems principles 

asheville nc 

bershad extensibility safety performance spin operating system 
th acm syrup 
operating systems principles 


engler kaashoek toole jr exokernel operating system architecture application level resource management 
th acm syrup 
operating systems principles 


borenstein email mind safe tcl language enabled mail 
ifip international conference 

barcelona spain 

gosling java language environment white sun microsystems 

gosling java intermediate bytecodes 
sigplan workshop intermediate representations ir 

san francisco ca 

wahbe efficient software fault isolation 
th acm syrup 
operating systems principles 

asheville nc 

software universal substrate mobile code software 

engler hsieh kaashoek 
language high level efficient machineindependent dynamic code generation 
rd annual acm syrup 
principles programming languages appear 

st petersburg fl 

scout communications oriented operating system dept computer science university arizona 

shenker clark zhang 
services infrastructure need network service model 
st int workshop community networking 

san francisco ca 

anderson case networks workstations 
ieee micro 


liskov safe efficient sharing persistent objects thor 
sigmod 

montreal canada 

manasse protocols electronic commerce 
st usenix workshop electronic commerce 

new york ny 

bell lapadula secure computer systems unified exposition multics interpretation mitre 
wilkes needham cambridge cap computer operating system 
operating programming systems series ed 
denning 
new york city north holland 

sollins cascaded authentication 
proceedings ieee symposium security privacy 

oakland ca 

burrows abadi needham logic authentication 
acm transactions computer systems 


iso information processing systems open systems interconnection basic model iso 

clark tennenhouse 
architectural considerations new generation protocols 
acm sigcomm symposium 


saltzer reed clark arguments system design 
acm transactions computer systems 


tennenhouse virtual infrastructure putting information infrastructure technology curve 
computer networks isdn systems appear 
