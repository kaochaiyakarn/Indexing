bimodal multicast kenneth birman mark hayden zhen xiao mihai budiu yaron minsky methods making multicast protocol reliable 
spectrum reliable multicast protocol offer atomicity guarantees delivery delivery ordering additional properties virtually synchronous addressing 
protocols local repair overcome transient packet loss network offering best effort reliability 
prior treated stability multicast delivery basic reliability property needed internet radio tv conferencing application 
looks reliability new goal development multicast protocol reliable sense rigorously quantified includes throughput stability guarantees 
characterize new protocol bimodal multicast reliability model corresponds family bimodal probability distributions 
introduce protocol provide theoretical analysis behavior review experimental results discuss candidate applications 
confirm bimodal multicast reliable scalable protocol provides remarkably stable delivery throughput 
keywords bimodal multicast probabilistic multicast reliability scalable group communications isochronous protocols internet media transmission 
overlooking enemy fortress commanding general prepared final battle campaign 
information gathering enemy positions forces prevail 
observations communicated forces battle won reports reached 
reports failed get reached commanders attack uncoordinated battle lost direct sight enemy coming battle strategy depend critically quality information hand 
general anticipated possibility situation delicate 
night wore dispatched wave wave updates enemy placements 
dark wet forests separating camps 
worse camps disease allies start campaign 
chaos death ruled relied 
approach dawn general sat coffee stuff 
night came went secret protocols worked summer 
appointed hour rose lead attack 
general calculated risk 
supported darpa onr contracts arpa radc cornell theory center turkish research foundation 
web site www cs cornell edu info projects ensemble software described available public 
contact information author kenneth birman dept computer science cornell university ithaca new york 
email ken cs cornell edu 

communication systems provide software support reliable multicast communication meaning reliability splits broad classes 
class definitions corresponds strong reliability properties 
typically include atomicity guarantee multicast delivered destination remains operational eventually delivered operational destinations 
atomic multicast may provide message delivery ordering support virtual synchrony execution model group communication systems security properties real time guarantees special behavior network partitioning occurs birman 
criticism obtain strong reliability properties employs costly protocols accepts possibility unstable unpredictable performance stress tolerates limited scalability cs see osr 
see shortly transient performance problems cause protocols exhibit degraded throughput 
stable network hard scale protocols participants pc 
protocols belonging second class reliable multicast solutions focus reliability large scale settings 
examples include internet muse protocol network news distribution lom scalable reliable multicast protocol srm xpress transfer protocol xtp reliable message transport protocol rmtp lp 
systems include scalable multicast protocols overcome message loss failures provided reliability guarantee 
protocols implemented reliability may defined concept 
core system track membership group participants may clear processes belong destination set multicast set small large 
typically processes join anonymously linking multicast forwarding tree subsequently interact immediate neighbors 
similarly member may drop fail informing neighbors 
reliability protocols usually expressed best effort terminology participating process discovers failure reasonable effort overcome 
may possible 
example srm carefully studied protocols class router overload may disrupt forwarding multicast messages processes stream router 
overload prevents negative retransmissions getting long gaps message delivery sequence may repaired 
liu lucas report conditions srm behave re multicasting message number times rises system scale liu lucas additional data similar nature 
liu suggests technique improve srm partially overcome problem 
problematic behavior triggered low levels system wide noise transient elevated rates message loss phenomena known common internet protocols lmj paxson 
srm similar protocols scale limits virtual synchrony protocols messages loss sufficiently uncommon give high degree reliability 
effect developer critical application forced choose reduced scalability stronger notions reliability class reliable multicast protocol weaker guarantees better normal case scalability afforded second class 
critical uses option may unacceptable risk throughput collapse unusual exceptionally rare conditions 
option may equally unacceptable impossible reason behavior system things go wrong 
introduces new option bimodal multicast protocol scales provides predictable reliability highly perturbed conditions 
example reliability throughput new protocol remain steady network packet loss rate rises participating processes experience transient performance failures 
data showing lan implementation protocol overcomes bursts packet loss minimal disruption throughput 
sections follow start presenting protocol results analytic study details analysis included appendix 
show behavior protocol predicted simple information processes network behave time reliability prediction strong support development methodology sense critical settings 
variety data comparing new protocol prior protocols notably virtually synchronous reliable multicast protocol developed group srm protocol 
case implementations believed best available terms performance tuned match environment 
studies include mixture experimental sp simulation experiments bimodal multicast implementation lan possibly connected wan gateways 
conditions cause reliable protocols exhibit unstable throughput bimodal multicast remains stable 
show model simplifying assumptions accurate predictions realworld behavior 
examines critical reliable multicast applications identifying roles protocols strong properties roles bimodal multicast 
bimodal multicast panacea protocol offers new approach reliability uses model weaker ways virtual synchrony despite stronger throughput guarantees 
see tool offer side side reliability tools solution competes previous protocols 

multicast throughput stability reliable multicast participated development communication infrastructures applications stock markets new york swiss stock exchanges air traffic control french console replication system called birman pc 
critical nature applications means developers know exactly systems behave expected operational conditions need detailed information reliable communication primitives behave 
applications demand high throughput member multicast group perturbed forcing sleep varying amounts time 
virtually synchronous ensemble multicast protocols perturb rate group ize group ize group ize performance scalability 
particular data transport subsystem produce sustained fairly high volume data considered critical safe operation 
past subsystems identified critical real time applications today computers networks fast real need stable throughput 
new protocol permits designers applications factor soft real time data stream 
bimodal multicast handle high volume workload leaving demanding lower volume residual communication task protocols virtual synchrony ones stressful settings 
communication demands bimodal multicast predicted multicast rate small set parameters designer anticipate bimodal multicast consume fixed percentage available bandwidth memory resources configure system adequate time virtual synchrony mechanisms 
bimodal multicast choice purpose reasons 
just noted load associated protocol predictable largely independent scale 
protocol shown bimodal delivery guarantee information environment information believe reasonable typical networks running standard internet protocols protocol configured small probability delivering small number destinations counting failed ones insignificant risk delivering destinations high probability delivering message destinations 
model lets tune actual probabilities match intended 
show model evaluate safety applications ones mentioned 
secondly protocol stable throughput 
traditional reliable multicast protocols atomic broadcast various incarnations suffer form interference flow control reliability mechanisms 
trigger unstable throughput network scaled application programs exhibit erratic behavior 
able demonstrate stability new protocol theoretically experimentally 
types applications motivate stability guarantee extremely important needs know basic data stream delivered steady rate delivered reliably 
give sense headed consider 
measured throughput healthy process virtually synchronous multicast groups various size members 
members attempts inject byte multicast messages rate second 
ideally messages second emerge 
graph shows perturb single group member causing sleep percentage second shown xaxis throughput collapses unperturbed group members 
problem worse group grows larger worse increase percentage perturbed members 
experimental sections see bimodal multicast achieves ideal output rate msgs sec conditions members perturbed 
details experiment produce appear experimental section 
mentioned earlier studies srm identified similar problems 
case srm network wide noise routing problems represent worst case 
example lucas doctoral dissertation lucas shows low levels network noise cause srm broadcast high rates retransmission requests retransmitted data messages multicast triggers multiple messages wire 
lucas finds rate retransmissions rises proportion srm group size 
liu studying problems similar nature proposes number changes srm improve behavior noisy networks 
simulations included experimental section confirm problems clear srm scaled protocol eventually collapse virtually synchronous protocol shown 
causes problems 
case virtually synchronous protocols perturbed process particularly difficult accommodate 
hand process considered failed sending receiving messages 
slow acknowledge messages may experience high loss rates particularly operating systems buffers fill 
sender healthy receivers keep copies unacknowledged messages get exhausting available buffering space causing flow control kick 
imagine setting failure detection parameters aggressively pc recommends risk erroneous failure classification rise roughly square group size 
problem group members understood monitoring aggressive failure detector paging scheduling delay interpreted crash 
scales protocols group size members tension throughput stability failure detection accuracy significant problem 
surprisingly successes virtual synchrony fairly small groups structured hierarchically 
largest systems typically ones performance demands limited short bursts multicasts far rates seen birman 
turning srm understand problem emerging form stochastic attack probabilistic assumptions built protocol 
readers familiar srm know protocol includes assumptions prevent duplicated multicasts requests retransmission duplicated retransmissions data estimate appropriate time live ttl value multicast 
assumptions small probability incorrect case srm size system rises absolute likelihood mistakes rises causing background overhead rise 
eventually forms overhead interfere normal system function causing throughput unstable 
sufficiently large configurations loads trigger form 
believe focus stable throughput reliable multicast settings 
historically reliable multicast split early camps 
camp focused performance scalability emphasizing peak performance ideal situations 
camp focused providing rigorous definitions reliability protocols proved implement reliability specifications 
protocols tended fairly heavyweight performance studies emphasized best case performance 
body viewed stable scalable throughput fundamental reliability goal seen stable throughput easily achieved 
properties bimodal multicast protocol ideal applications virtual synchrony encounters limits 
include internet media distribution radio tv broadcasts conferencing distribution stock prices trade information floor electronic stock exchanges distribution flight telemetry data air traffic control systems military theatre operations systems replication medical telemetry data critical care systems communication factory automation settings 
setting highest volume data sources associated notion freshness importance delivering individual messages decreases time 
safety critical applications component amenable analysis 

bimodal multicast protocol protocol outgrowth originated studies gossip protocols done xerox internet muse protocol lom srm protocol floyd nak protocols xtp xtp lazy transactional replication method 
protocol understood offering form weak real time guarantee relevant prior includes bmr :10.1.1.54.9773
idea gossip protocols dates back original usenet news protocol nntp developed early 
protocol communications graph superimposed set processes neighbors gossip diffuse news postings reliable manner links 
example process receives news posting establishes communication process offer copy news message copy seen message 
xerox considered gossip communication context project developing wide area database systems 
showed gossip communication related mathematics underlying propagation epidemics developed family gossip multicast protocols 
frequency database updates low second question stable throughput arise 
model considered communication failures process failures 
addresses aspects 
multicast execution periods ensemble 
initially group consists multicasts sent delivered vice versa 
joins state transferred 
period additional multicasting fails joins receives additional state transfer 
period consecutive membership lists denoted execution period 
report multiple implementations new protocol 
version study carefully implemented cornell university ensemble system hayden offers modular plug play framework includes standard reliable multicast protocols easily extended new ones 
plug play architecture important lets new sit protocols facilitated controlled experiments 
ensemble supports group communication protocol stacks constructed composing micro protocols idea originated horus project birman 
implemented version protocol ensemble system model greatly simplified 
ensemble process group executes series execution periods group membership static known members see time advances left right time line corresponds execution individual process 
execution period ends new begins membership changes addition new processes departure failure old ones 
discuss new protocol just single execution period restriction especially important formal analysis 
mechanisms ensemble switches period depend knowledge currently active set multicast instantiations terminated stabilized 
new protocol occurs group member member garbage collects multicasts known 
second version protocol include experimental data obtained won discuss separately 
implementation basis new system developing called operates solution 
ensemble solution primarily controlled studies sp computer newer implementation runs conventional lan extended run wan 
protocols identical differences great importance setting treat single implementation 
uses gossip track membership communication behavior bimodal protocol unaffected formal analysis combined gossip mechanisms current ability 
remainder ll refer new protocol pbcast probabilistic broadcast bimodal multicast obvious contractions awkward 
pbcast process group satisfies properties atomicity protocol provides bimodal delivery guarantee high probability multicast reach processes low probability multicast reach just small set processes vanishingly small probability reach intermediate number processes 
traditional guarantee 
throughput stability expected variation throughput characterized settings interest low comparison typical multicast rates 
ordering 
messages delivered fifo order sender basis 
stronger orderings layered protocol discussed birman 
example hb includes protocol similar pbcast total ordering layered 
multicast stability 
protocol detects stability messages meaning bimodal delivery guarantee achieved 
stable message safely garbage collected desired application layer informed 
protocols srm generally lack stability detection virtual synchrony protocols include mechanisms 
detection lost messages 
healthy process bimodal delivery property admit small possibility multicasts reach processes message loss common faulty processes 
event occur processes receive message informed upcall 
section discusses recovery message loss 
scalability 
costs constant grow slowly function network size 
see pbcast overheads constant function group size throughput variation grows slowly log group size 
purposes analysis assumes protocol operates network throughput reliability characterized messages sent network errors iid 
assume correctly functioning process respond incoming messages known bounded delay 
assumption needs hold processes network 
assume bounds delays network links known 
assumption subtle pbcast normally configured communicate preferentially links elaborated section 
traditionally systems community distinguished types failures 
hard failures include crash failures network partitionings 
soft failures include failure receive message correctly delivered normally buffer overflow failure respect bounds handling incoming messages transient network conditions cause network locally violate normal throughput reliability properties 
protocols tolerate hard failures goal protocol overcome bounded numbers soft failures minimal impact throughput multicasts sent correct process correct processes 
guarantee protocol process experiences soft failure obviously experience transient deviation normal throughput properties catch 
behavior holds bounded number soft failure events 
consider byzantine failures 
assumptions may atypical local area networks designer critical application air traffic control system able satisfy 
example developer lan wan links isolated uncontrolled traffic high speed interconnects sort cluster style scalable computers virtually private network quality service guarantees 
appears broadly applicable conventional networks 
report experiments implementation pbcast normal networks observed protocol behavior bursts packet loss sort triggered transient network overloads 
events violate assumptions model protocol continues behave reliably provide steady throughput 
open question concerns expected behavior pbcast running wan gateways spanning public internet loss rates throughput fluctuate lmj paxson 
fairly tunneling tcp links gateway processes provided links available 
conjecture formal study configurations may intractable idealized network model considerably robust assumptions underlying suggest 

details pbcast protocol pbcast composed sub protocols structured roughly internet muse protocol lom 
unreliable hierarchical broadcast attempt efficiently deliver message destinations 
ip multicast available play role 
second phase anti entropy protocol operates series unsynchronized rounds 
round phase detects message loss second phase corrects losses runs needed 
section describes protocol pseudo code included appendix basic discussion introduce series important optimizations 
optimistic dissemination protocol stage protocol multicasts message unreliable multicast primitive 
done ip multicast ip multicast available randomized dissemination protocol 
case assume full connectivity superimpose virtual multicast spanning trees set participants 
process variety pseudo randomly generated spanning trees broadcasting messages entire group generated deterministic manner group membership inexpensive algorithm 
member broadcasts message sent randomly selected spanning tree done attaching tree multicast execution period predictable prior tree identifier small integer message sending sender neighbors tree 
receipt members deliver message forward tree identifier 
dissemination protocol tuned respect number random trees degree nodes tree 
messages sent choice tree understood purely optimization quickly deliver message members 
members receive message anti entropy protocol ensures probabilistically reliable delivery 
ensemble implementation pbcast tree dissemination protocol uses ensemble group membership manager track membership limits scalability 
ensemble group membership system works members probably scaled 
version pbcast currently uses hand configured multicast architecture represented multicast routing table protocol sense machines probably larger networks 
see management multicast dissemination routes pbcast topic additional study required 
phase anti entropy protocol important properties pbcast stem gossip anti entropy protocol 
term anti entropy refers protocols detect correct inconsistencies system continuous gossiping 
anti entropy protocol progresses rounds members randomly choose members send summary message histories selected process solicit copies messages discover lacking converge identical histories 
illustrated period messages multicast process fails receive copy process fails receive denoted dashed arrows anti entropy protocol executes gray region 
time discovers missed requests retransmission forwards 
detect repair loss subsequent anti entropy round 
suggesting protocol alternates multicasting running anti entropy rounds practice modes concurrent 
anti entropy communication look regular practice quite random 
receives anti entropy message obtained side effect randomness process may receive anti entropy message round gossip receives receives 
protocol differs prior gossip protocols pbcast emphasizes achieving common suffix message histories common prefix 
words protocol prioritizes recovery messages message old protocol gives entirely marks message lost 
advantage structure protocol avoids scenarios processes suffer transient failures subsequently unable catch rest system 
traditional gossip period begins tree duration execution period 
protocols situation cause processes message buffers fill system slow 
protocol avoids behavior eventually giving old messages emphasizing delivery messages 
messages may eventually marked lost probabilistic analysis protocol shows properly configured loss happen failed processes messages sent processes failed sent 
section discusses handling cases 
example process experienced soft failure missed messages 
learn subsequent anti entropy message request retransmissions reverse order forth 
pulling messages processes participate normally new multicasts new rounds anti entropy algorithm 
anti entropy protocol run processes system proceeds sequence rounds 
length round larger typical round trip time rpc communications links protocol practice longer rounds substantial fraction second duration example experiments start round ms 
clocks need synchronized initially act simplicity exposition 
round member randomly chooses member conduct anti entropy protocol sends digest summary message histories 
message called gossip message 
member receives message compares digest messages buffers 
digest contains messages member sends message back original sender request messages retransmitted 
message called solicitation causes receiver retransmit messages 
processes maintain buffers messages received members group 
message delivered application message recovered retransmission protocol upcall notify application missing messages 
events occur fifo order sender 
messages received inserted appropriate location message buffer 
receiving message process tags message round message received 
undelivered messages order delivered 
situations sense delay delivery rounds gossip completed 
doing clearly reduce risk small number anti entropy anti entropy illustration pbcast anti entropy protocol 
processes deliver pbcast explored details change 
process continue gossip message fixed number rounds initial reception message garbage collected 
number rounds number processes processes gossips round parameters protocol 
product parameters called fanout tuned theory develop appendix summarized section 
process unable recover missing message long deduce processes garbage collected gives message reports gap lost message application layer 
optimizations anti entropy protocol act limit costs failure scenarios 
additions normal anti entropy protocol liable enter fluctuating communication patterns poorly performing processes noisy network affect healthy processes swamping retransmission requests 
summarize important optimizations 
section experimental evidence achieve desired outcome 
optimization soft failure detection retransmission requests serviced received round original solicitation sent 
response solicitation takes longer round normally time response dropped 
failure process respond solicitation round indication process network unhealthy retransmission succeed 
protects cases process responds causes network flooded redundant retransmissions 
optimization round retransmission limit maximum amount data bytes process retransmit round limited 
data requested process stops sending reaches limit 
prevents processes fallen far group trying catch 
retransmission carried rounds different processes spreading overhead space time 
optimization cyclic retransmissions processes responding retransmission requests cycle undelivered messages account messages requested previous rounds 
request previous round successful messages transit response include different messages avoiding redundant retransmissions 
experiments protocol find average load associated protocol minimized process gossips just process round imagine settings case 
optimization retransmission messages retransmitted order 
oldest retransmission requests induce behavior temporarily faulty process trying catch recovers problem left permanently lagging rest group 
optimization independent numbering rounds may processes advance synchronously rounds protocol allows process maintain round numbers run asynchronously implementation works 
insight number rounds elapsed determine deliver garbage collect message entirely local decision 
round number enters gossip message subsequent solicitation retransmit solicitation simply copy round number sender gossip message 
optimization random graphs scalability assumes large groups ip multicast unreliable multicast basic protocol highly scalable dimensions 
stated appear participating process needs full membership list multicast group information anti entropy stages protocol 
approach implies potentially high traffic membership updates process group members list large 
second wide area protocol anti entropy involve communication high latency communication paths 
large network buffering requirements protocol grow function worst case network latency 
problems avoided 
wan typically structured collection lans interconnected redundantly tcp tunnels gateways 
architecture typical participants need know processes lan component processes holding tcp endpoints perform wan gossip 
generalizing ask behavior pbcast participant knows gossips subset participants network processes participant gossip set 
research randomized networks demonstrated randomized protocols operate correctly randomly generated graphs full connectivity 
drawing theory conclude pbcast retain properties subset scheme employed 
subset member gossips picked minimize latency bounding round trip times round lengths reasonable level 
currently developing membership service implementation pbcast manage membership behalf system select subsets inform pbcast participant list processes gossip 
extended manner protocol overcomes scalability concerns just identified leaving protocol having entirely local costs srm rmtp xtp muse 
pbcast message visualized sort frontier advancing network spanning tree 
process learns pbcast initial multicast rounds gossip occur low latency links processes neighbors 
irrespective size network safety stability rapidly reached 
membership service needs full membership multicast group 
typical pbcast participants know processes gossip gossip neighbors list gossip destinations updated set changes membership change group 
optimization multicast retransmissions certain situations protocol employs multicast retransmit message carefully avoid triggering sort unscalable growth overhead seen srm protocol 
protocol uses multicast process solicited twice retransmit message probability happening low large number processes dropped message 
additionally suppose define distance terms common ip address prefixes processes subnet close processes different subnetworks remote 
process point point retransmission process remote receiving message immediately re multicasts regional setting multicast ttl field 
idea optimization ensures gossip processes close retransmission needed remote source message question dropped region soliciting process 
accordingly best strategy re multicast message immediately receipt receiver region 

integration ensemble flow control state transfer tools flow control model implicitly requires rate pbcast messages limited 
rate exceeded network load threaten independent failure latency assumptions model guarantees protocol start degrade 
normal form application level rate control needed limit rate multicasts 
example application simply designed produce multicasts constant predetermined rate calculated ensure risk overloading network acceptably low 
pbcast combined form flow control tied number buffered messages active protocol 
approach sender presents new multicast communication subsystem message delayed subsystem currently buffering threshold level active multicasts sources 
pbcast messages age garbage collected new multicasts admitted 
ensemble multicast framework implemented versions pbcast supports flow control mechanism works manner 
experiments reported employed application level rate limitations 
believe class applications benefit bimodal reliable multicast rate data generation predictable parameterize protocol 
cases addition unpredictable internal flow control mechanism reduce determinism protocol bringing real benefits 
recovery delivery failures recall conventional form reliable group communication single lagging process impact throughput latencies entire group 
protocol overcomes phenomenon suffers complementary problem process lags far group members processes may garbage collect message histories effectively partitioning slow process away remainder group 
slow process detect condition normal communication restored opportunity catch basic protocol 
notice problem experienced faulty process healthy addressed simply adjusting protocol parameters 
see responses problem 
exploring possibility varying amount buffering pbcast participant 
processes small buffers large buffers limit spool copies messages sent system 
serve repositories resort recovering process request entire sequence messages lost transient outage 
pbcast ensemble second option arises 
ensemble includes tools process join leave membership tracking traditional reliable multicast process group 
included state transfer feature 
mechanism permits process joining process group receive state process set processes group 
joining process offer state existing members protocol supports state merge normal usage prefer transfer state primary component partitioned group minority component 
pbcast participant falls ensemble state transfer recovery mechanism 

graphing computational results appendix show pbcast analyzed assumptions model 
analysis yields computational model protocol generate graphs 
graphs produced assumption initial unreliable multicast failed original sender initially copy probability message loss probability process experience crash failure run protocol assumptions conservative graphs quite conservative 
recall section fanout measures number processes holder multicast gossip garbage collecting message 
upper left graph illustrating pbcast bimodal delivery distribution pbcast bimodal delivery distribution number processes deliver pbcast scalability pbcast reliability processes system predicate predicate ii ef ects reliability predicate predicate ii fanout required specif ied reliability processes system predicate reliability predicate ii reliability analytical results indicated processes motivates title 
general little fable recognized likelihood small number processes receive multicast quite low 
likelihood receive multicast high 
intermediary outcomes vanishingly low probability 
understand graph notice axis expressed predicate state system amount time 
intuitively graph imagines run protocol period time look state achieved protocol 
pbcast guarantees probability process delivered pbcast high probability half participants delivered pbcast extremely low 
considers axis logarithmic scale clear pbcast overwhelmingly deliver processes sender remains healthy connected network 
initial unreliable multicast successful situation quite different produce graph case 
suppose initial messages delivered 
initial state processes infected protocol runs single round overwhelmingly probable pbcast reach processes limited process failures 
section worst case outcomes relevant sense assume initial unreliable multicast fails 
remaining graphs superimpose behavior pbcast respect predicates define exemplary undesired outcomes keeping idea show risk failure produced pessimistic assumption initial ip multicast fails 
predicate general considers run protocol failure case gross 
multicast reaches processes system 
second predicate arises pbcast system replicates data manner having properties similar virtual synchrony algorithm describe hb 
protocol updates phase behavior implemented pbcast 
undesired outcome arises pbcast delivers roughly half processes system crash failures impossible determine majority reached forcing update abort roll back restarted 
idea graphs employ model explore likelihood pbcast successfully applications sorts definitions failure 
predicates formalized appendix 
applications pbcast discussed reduced failure predicates 
example air traffic application uses pbcast replicate updates tracks associated current flights system typically operate safely updates row lost track 
starting controller ability tolerate missing track updates inconsistency data displayed different consoles compute predicate encoding resulting risk threshold predicate 
level model pbcast treated independent event condition expressed run multicasts condition individual outcome 
graph upper right shows risk failed pbcast drops size system 
lower graphs look relation expected fanout participant gossip stage failure risk run fail sense defined earlier 
graphs parameters experimental setting parameters fanout number rounds pbcast achieve desired reliability level explore behavior pbcast particular parameterization setting interest 
notice predicate yields lower reliability predicate ii 
surprise predicate counts pbcast faulty example processes system fail receive 
predicate ii treat outcome success clear majority 
note graph lower right compares fanout required obtain reliability predicate required obtain predicate ii 
get curves scale practice probably adequate applications discussed 
ip multicast successful risks failure graphs reduced orders magnitude 
throughput stability lies heart set analyze expected variance throughput rates formal methods 
considered expected situation single pbcast initial unreliable multicast fails 
approach analysis obtain series predictions showing number processes receive copy decreases time data compute expected number rounds selected correct participant receives multicast 
resulting curves peak roughly log group size variance grows log group size 
considered situation initial ip multicast tree multicast successful 
case typical process receives multicast relayed number intermediary processes length relay chain grow log base average branching factor forwarding tree initial multicast case tree scheme experimental potentially larger ip multicast 
suppose chain length relaying processes viewed independent filter delays messages mean amount associated variance 
treat normal distribution transit entire tree normal distribution mean equal times mean forwarding delay variance equal variance forwarding delay distribution information predictions average throughput variance throughput observed various time scales 
consider period time series pbcast messages injected system assume messages independent rate sufficiently low interference effects worry 
analysis expected variance time receive sequence expect throughput variance grow slowly square root log system size 
distributions identical normal ones variance variance summed distribution grows square root sum squares 
rounds rounds number susceptible processes versus number gossip rounds initial multicast fails left reaches processes right note scale 
runs assume processes 
rounds probability correct process receive pbcast particular round groups various sizes 
distributions essentially normal means centered log face problem cases different expected delivery latency variance 
initial multicast erratic average reliability throughput fluctuate modes 
experimental data reported section setting initial tree multicast quite reliable observe stable throughput variance grows slowly line predictions 
suppose pbcast dedicated internet settings public internet 
cases unreliable multicast fail significant percentage time 
compensating optimization treated theoretical analysis practice cause processes re multicast messages rapidly situation 
experimentally optimization sharpen delivery distribution dramatically assumption delivery distribution reasonably tight modes option introduce buffering delay hide resulting variations throughput experimental analytic results predict amount buffering needed 
example suppose assume clock synchronization delay multicast delivering times typical round length time sent 
derived messages received amount time gossip rounds case example seconds rounds ms 
cost buffering delayed messages amount time smooth variance throughput rate 
method lies core known atomic multicast :10.1.1.54.9773
version pbcast incorporates delay different reason discussed hb birman 
way visualize think networks surface soccer ball having regions high connectivity surface patches connected tunnels borders patches 
pbcast operates bursting network infect region bursting infect processes patch fading away sparks remaining processes infected unicast gossip 
worst case delay may exaggerate actual need buffering 
experimental reflects impact optimization suggests small amount buffering dramatic impact 
contrast situation deterministic worst case analysis leads somewhat pessimistic substantial amounts buffering may needed long delays delivery :10.1.1.54.9773
setting goals probabilistic analysis focus expected situation worst case 
summarize formal analysis gives powerful tools significant predictive options 
tools permit pbcast parameterized particular setting show bridge gap pbcast primitive application level reliability objectives 
predictions concern distribution expected outcomes protocol degree throughput stability properties seek 
second respect find pbcast settings initial unreliable multicast successful reaching destinations time exhibit stable steady throughput scalable manner 
confirming experiments reported section show small buffers artificial delay received data rate remains steady alternate mode multicast successful multicasts reach destinations 

performance scalability implementation section experimental results concerning performance throughput stability scalability pbcast runs actual protocol 
include types experimental 
start study ensemble virtual synchrony protocols run side side ensemble implementation pbcast 
ensemble protocols selected perform extremely heavily tuned believe fair characterize typical protocols class 
obviously care extrapolating results implementations virtually synchronous multicast 
experiments reported conducted sp parallel computer treated network workstations 
idea start isolating software real software run changes normal internet lan wan clean network inject noise 
compare pbcast srm ns simulator srm implementations available environment 
ns construct simulation pbcast examined pbcast srm side side various network topologies conditions srm parameter settings recommended designers protocol 
simulation allowed scale protocols large networks 
looked implementation pbcast network workstations running mbit ethernet setting hardware multicast available 
study ambitious number machines available small provides evidence see simulation sp predict behavior protocol realistic networks 
accordingly start looking pbcast virtual synchrony network configurations various sizes running sp 
emulate network load randomly dropping delaying packets emulate ill behaved applications overloaded computers forcing participating processes sleep varied probabilities 
approach studied behavior groups containing processes 
shows interarrival message spacing traditional virtual synchrony histogram throughput ensemble fifo virtual synchrony protocol inter arrival spacing sec traditional protocol sleep probability traditional protocol sleep probability histogram throughput pbcast inter arrival spacing sec pbcast sleep probability pbcast sleep probability inter arrival message spacing histograms virtually synchronous protocol msgs sec perturbation left bimodal multicast protocol right 
steady delivery characteristics pbcast evident 
low bandwidth comparison pbcast performance faulty correct hosts perturb rate traditional perturbed pbcast perturbed throughput traditional measured perturbed host throughput pbcast measured perturbed host high bandwidth comparison pbcast performance faulty correct hosts perturb rate traditional unperturbed host pbcast unperturbed host traditional perturbed host pbcast perturbed host ensemble traditional pbcast side side experiment similar produce 
group processes perturbed looked delivery rate healthy group member perturbed process messages second second 
virtual synchrony protocol data rates healthy perturbed process identical 
pbcast perturbed process starts drop messages signified lower data rate injection rate healthy processes affected 
protocol running ensemble side side ensemble implementation pbcast 
produced groups processes process perturbed forcing sleep ms intervals probability shown 
data rate byte multicasts second relatively light ensemble protocol reach multicasts second configuration limit pbcast second 
graphs produced sp 
inter arrival times traditional ensemble protocols spread modest perturbation reflecting bursty delivery 
pbcast maintains steady throughput high perturbation rates 
illustrated problem various scales 
experiment produce measured throughput traditional ensemble virtual synchrony groups various sizes perturbed single member 
see clearly ensemble sustain high rates throughput kbyte messages second close limit sp manner machine lacks hardware multicast group larger sensitive perturbation 
examined phenomenon detail small group processes 
interestingly perturbed process receives higher rate messages pbcast 
figures intended attack virtual synchrony model typically smaller groups computers applications generate data bursty manner rarely maintaining sustained high data rates birman 
extreme conditions protocols stable 
problems cited arise combination factors large scale high sustained data rates type perturbation designed disrupt throughput triggering failure detector 
derived experiment pbcast throughput steady included error bars 
show scale process group throughput maintained perturb members variance computed ms intervals grows 
bottom right graph pbcast throughput variance function group size 
scale experiments inadequate test log growth predictions section data consistent predictions 
looked consequences injecting noise system 
system wide packet loss rates emulated causing sp randomly drop designated percentage messages 
packet loss rate grows exceed packets pbcast lossy highest message rate tested second protocol remains reliable packet loss rate run messages second 
increasing fanout help high packet injection rate apparently close bandwidth limits sp interconnect 
ensemble supports scalable protocol stack experiments stack behave identically normal virtual synchrony stack 
accordingly data reproduced normal ensemble stack providing fifo ordering virtual synchrony 
illustrates dark side protocol 
see mixture high data bandwidths high loss rates pbcast quite capable reporting gaps healthy processes 
understood feature protocol presumably computed bimodal curve case considerably sharp suggests 
general gossip fanout held fixed expected reliability pbcast drops network data loss rate rises network saturated 
situation virtual synchrony protocol refuse accept new multicasts 
mean standard deviation pbcast throughput member group perturb rate pbcast throughput extremely stable conditions provoke degraded throughput traditional ensemble protocols variance grow function group size 
experiments group members perturbed throughput instrumented messages time 
behavior remains perturbation rate increased clarity graphs show interval 
experiments scaled sufficiently permit general drawn variance throughput clearly small compared throughput rate growing slowly 
mean standard deviation pbcast throughput member group perturb rate mean standard deviation pbcast throughput member group perturb rate standard deviation pbcast throughput process group ize number retransmission received healthy process function group size perturbation rate 
pbcast background overhead perturbed process percentage perturb rate nodes nodes nodes nodes exception experiments provoked data loss healthy pbcast receivers 
shows background overhead associated sorts tests 
see rate rises overhead rises example member group processes perturbed time messages retransmitted typical participant rises member group 
analysis shows overhead bounded tests undertaken push limits perturbation rate high 
pbcast system wide message loss high low bandwidth system wide drop rate average throughput receivers impact packet loss pbcast reliability 
high data rates msgs sec noise triggers packet loss large groups lower rates significant noise tolerated 
srm pbcast 
compare link utilization levels small numbers better 
constant noise protocols exhibit growth overheads scalability pbcast better 
link independent packet loss probability 
pbcast srm system wide constant noise tree topology group size pbcast pbcast srm adaptive srm pbcast srm system wide constant noise tree topology group size pbcast pbcast srm adaptive srm turned simulation performed ns 
interest brevity include just small amount data obtained simulation discuss simulation findings detail 
shows data collected network structured level balanced tree studied link utilization pbcast optimization treated separately theoretical results consider optimization versions srm available adaptive non adaptive protocol parameters configured recommended developers 
see group grows larger experiencing large number dropped packets links lossy protocols place growing load network links 
pbcast traffic consists unicasts gossip retransmissions srm costs associated multicast rise faster pbcast 
looks specifically overheads associated protocols measuring rate retransmission requests copies messages received typical participant msgs sec transmitted network packet loss pbcast srm system wide constant noise tree topology group size requests sec received srm pbcast adaptive srm pbcast pbcast srm system wide constant noise tree topology group size repairs sec received srm pbcast adaptive srm pbcast pbcast srm system wide constant noise star topology group size requests sec received srm pbcast adaptive srm pbcast pbcast srm system wide constant noise star topology group size repairs sec received srm pbcast adaptive srm pbcast comparison rate overhead messages received second typical members process group srm pbcast send msgs sec message loss rate link 
look topologies balanced level tree star topology 
situations srm provoked sending multiple retransmissions repair messages request pbcast generates lower overheads 
link 
findings similar srm overheads grow rapidly pbcast overheads scale system data loss pattern 
readers interested detail referred 
include preliminary data implementation pbcast runs local area networks 
graphs shown explore impact optimizations 
recall optimization introduced limit amount data pbcast retransmit single round optimization involves selective multicast retransmitting data 
create graphs configured group processes single sender transmitting byte messages second mbit lan 
top graphs seconds triggered burst packet loss arranging processes simultaneously discard consecutive messages graphed impact throughput healthy process 
recall throughput analysis trouble cases impact throughput curve protocol increasing expected mean latency 
see optimization top left perturbation causes big fluctuation throughput 
optimization case limiting process retransmit maximum bytes gossip round throughput fairly steady packet loss occurs 
obviously optimization reflects tradeoff perturbed process trouble catching benefit system throughput stability stable 
lower graphs examine case outage causes initial multicast fail lines conservative analysis section 
emulation operates intercepting consecutive multicasts case allowing message reach just single randomly selected destination processes initially infected comment graphs look identical initial multicast entirely discarded initially infects sender 
optimization throughput dramatically impacted time outage occurs 
optimization re multicasts affected messages throughput smooth 
monitored memory tests case kb buffering required 
smooth delivery obtained delaying received messages put fifo order data supports contention brief delay needed ensure extremely smooth delivery rate optimization 

programming probabilistic communication tools probabilistic protocol types reliable group communication multicast tools weaker nature guarantees provided important application level implications 
example ensemble virtually synchronous multicast protocols guarantee non faulty members process group receive multicast sent group requires delaying entire group waiting process catch 
contrast probabilistic protocols violate traditional atomicity guarantees 
likelihood event known low network behaving soft failure limits appropriate ones transient problem certainly trigger sorts problems 
sec round retransmission limit sec ith round retransmission limit sec ith multicast sec multicast retransmission representative data group members mbit local area network 
considerations mean data replicated protocol application insensitive small inconsistencies applications send media radio tv teleconferencing data internet 
quality predictions provided pbcast tune application minimal rate 
stock market equity trading environment pc actively traded securities quoted repeatedly 
infrequent loss quote normally pose problem long events rare randomly distributed messages generated system property pbcast guarantee 
air traffic control setting forms data periodic updates radar images flight tracks age rapidly repeatedly refreshed 
dropping updates sorts infrequently create safety threat 
appealing scalable reliable protocol setting needs demonstrate customer doing compromise safety 
ability selectively send time critical safety critical information probabilistic protocol stack guarantees stable throughput latency desirable 
setting problems stronger guarantees virtually synchronous nature needed 
example system replicates flight plan updates small clusters workstations state machine replication 
event relevant shared state reliably multicast cluster participants superimpose terse representation flight plan background radar image track data 
rate updates foreground data flight tracks may low events second 
virtually synchronous multicast far appropriate second class uses 
health care setting forms patient telemetry refreshed frequently 
data sort transmitted pbcast reading lost new reading certainly received soon 
hand important stronger form reliable multicast critical data item medication change order replicated multiple sites hospital system 
application tolerate small risk multicast fail multicast sent critical importance system 
problem represents match protocols having toend guarantees 
doctor computer dosage changing operation needs guarantee various systems displaying medication orders reflect changed dosage 
doctor warned 
examples best viewed superposition uses process groups 
notice different uses independent virtual synchrony overcome limitations pbcast 
pbcast application update radar images background controllers screen virtually synchronous application keep track flight plans flight track plots observed position trajectory flight measured radar telemetry 
flight plan record pilot intentions instructions controller 
instructions controller issued flight 
application decomposes cleanly applications solved pbcast traditional form reliable multicast 
traditional forms reliable multicast individual data items critical significance correctness application 
examples include security keys employed access stock exchange system flight plan data replicated databases associated multiple air traffic control centers medication dosage instructions health care example 
just seen kinds data may matched pbcast properties 
interestingly examples frequent message traffic properties needed pbcast safely infrequent traffic typical objects medical records updated rarely hand 
pbcast relieve reliable protocols sort load problems sustaining steady manner 
examples representative class systems mixed reliability requirements 
second way program pbcast develop algorithms explicit probabilistic reliability distribution protocol done data replication algorithm mentioned section hb 
imagine algorithms pbcast replicate data probabilistic reliability employ decision theoretic methods overcome uncertainty basing decisions replicated data 
example suppose pbcast replicate forms air traffic control data idea worth pursuing protocols lightweight easy analyze predictable 
quality flight plan probabilistic 
conditions safe safety critical decision conditions gossip longer sharpen quality decision 
hope explore issues fully 

comparison prior noted earlier protocol builds considerable body prior 
strongest connections epidemic algorithms studied demers xerox data replication 
xerox looked systems light load develop idea probabilistic reliability property application developer 
extends xerox considering runs protocol ip multicast 
addition reported group cornell explored uses gossip gossip membership tracking rhm gossip stability detection guo 
protocol seen soft real time protocol connections protocol developed cristian baldoni raynal causal protocol bmr :10.1.1.54.9773
prior investigated issue steady load steady data delivery failures prior scale particularly 
example protocol involves delaying messages period time proportional worst case delay system estimates numbers messages lost processes crash worst case failure pattern 
environments interest delays enormous rise limit function system size 
similar concerns expressed regard causal protocol guarantees causal order delivered messages discarding excessively delayed 
may possible extend protocols ones steady throughput scalability additional needed 

reliable multicast protocols developed reliability defined way corresponding tools match different classes applications 
reliable protocols guarantee delivery expensive may lack stable throughput needed soft realtime applications data produced regularly delivery keep 
best effort delivery inexpensive scalable lacks guarantees may important developing mission critical applications 
see observations representing core debate virtues reliable multicast primitives building distributed systems 
introduced new region spectrum understood falling previous endpoints 
specifically showed multicast protocol bimodal delivery guarantees built realistic network environments protocol scalable gives stable throughput 
believe new design point responds important application requirements adequately addressed previous option reliable multicast protocol space 
epilogue military guard led away baron suddenly turned 
general emperor learns ll join 
impossible reliably coordinate attack conditions 
replied general 
bimodal guarantee entirely sufficient 

matt lucas extremely helpful providing insight data documenting conditions srm throughput unstable 
eli upfal pointed random graphs scalability analysis 
srinivasan keshav fred schneider robbert van renesse extensive suggestions reading early version anonymous reviewers suggestions 
help gratefully recognized 
werner vogels michael useful suggestions 
tom coleman jay helped access cornell theory center sp platform experimental 
cornell theory center helpful particularly prioritizing experiments scheduled long delays 

software available www cs cornell edu info projects ensemble 
bmr baldoni raynal causal delivery messages real time data unreliable networks journal real time systems vol 

pp 
baldoni prakash raynal singhal 
broadcast time causality constraints multimedia applications 
report inria france sept 
ken birman roy friedman mark hayden rhee 
middleware support distributed multimedia collaborative computing 
acm multimedia computing networking mmcn jan san jose ca 
birman birman 
building secure reliable network applications 
manning publishing prentice hall greenwich ct jan 
url www com birman index html birman birman 
review experiences reliable multicast 
accepted publication software practice experience 
cristian ray strong danny dolev :10.1.1.54.9773
atomic broadcast simple message diffusion byzantine agreement 
proc 
th international ftcs 
see atomic broadcast real time environment fault tolerant distributed computing springer verlag lncs 
cs david cheriton dale skeen 
understanding limitations causal totally ordered multicast 
proceedings symposium operating systems principles dec 
demers epidemic algorithms replicated data management 
proceedings th symposium principles distributed computing 
vancouver ca aug 
operating systems review jan 
sally floyd van jacobson steven mccanne ching gung liu lixia zhang 
reliable multicast framework light weight sessions application level framing 
proceedings symposium communication architectures protocols sigcomm 
acm 
august cambridge ma 
www nrg ee lbl gov floyd srm html feige david peleg prabhakar raghavan eli upfal 
randomized broadcast networks 
random structures algorithms 
guo guo 
scalable membership detection protocols 
cornell university ph thesis may available tr 
gt richard golding kim taylor 
group membership epidemic style 
technical report ucsc crl university california santa cruz may 
hayden mark hayden 
ensemble system 
ph dissertation cornell university dept computer science 
january expected 
hb hayden birman 
probabilistic broadcast 
cornell university computer science tr september 
liu ching gung liu 
error recovery scalable reliable multicast ph dissertation university southern california dec 
ladin barbara shrira ghemawat 
providing availability lazy replication 
acm transactions computer systems nov 
lmj craig labovitz robert malan jahanian internet routing instability 
proc 
sigcomm sept 
lp lin sanjoy paul reliable multicast transport protocol proceedings ieee infocom pages 
www 
com user sanjoy rmtp ps lom kurt josh osborne joseph 
drinking multicast usenet news 
usenix winter january 

lucas matt lucas 
efficient data distribution large scale multicast networks ph dissertation dept computer science university virginia may 
osr various authors 
rebuttals cs appearing operating systems review january 
zhen xiao kenneth birman 
scalability reliable multicast protocols 
forthcoming june 
paxson vern paxson internet packet dynamics proc 
sigcomm sept 
pc rico 
implementing swiss exchange trading system 
ftcs seattle wa june 
www fr projects fr sanjoy paul lin bhattacharyya reliable multicast transport protocol rmtp ieee journal selected areas communications special issue network support multipoint communication april vol www 
com user sanjoy rmtp ps rbm robbert van renesse kenneth birman maffeis 
horus flexible group communication system 
communications acm april 
rhm robbert van renesse yaron minsky mark hayden 
gossip failure detection service 
proc 
middleware 
england sept 
xtp xtp forum 
xpress transfer protocol specification 
xtp rev march 
appendix formal analysis protocol appendix provide analysis pbcast protocol 
analysis true protocol implementation respect simplifications 
note experimental results suggest actual protocol behaves predictions environments deviate assumptions effect model surprisingly robust 
concerns initial unreliable multicast 
process initiates pbcast crash remains connected network initial multicast successful protocol provides strong delivery guarantees state system multicast involves widespread knowledge message 
initial multicast fails faced pbcast run just single process copy message outset 
focus conservative assumption initiator initially copy message 
point step realistic assumption 
second simplification relates model 
protocol developed process receives message gossips message subsequent rounds protocol 
recall rounds asynchronous message loss independent message send event 
accordingly protocol equivalent process gossips randomly selected processes round hears message ceases gossip message solution scalable load bursty doesn enter analysis follows 
transformation simplifies analysis employ 
analysis omits retransmissions collapsing single gossip message 
clear shortly simplification justifiable purposes analysis certainly questions ask pbcast appropriate 
follows number rounds protocol runs set processes system expected fanout gossip 
round gossip 
notation protocol analyze illustrated 
give pseudo code appendix additional parameter denote number rounds participant garbage collect message 
undertaking analysis comment briefly nature guarantees provided protocol 
traditional reliable multicast protocol run outcome correct destinations receive copy multicast 
section demonstrate pbcast bimodal delivery distribution high probability correct destinations receive copy 
low probability small number processes may faulty receive copy 
probability intermediate outcomes example half processes receive copy small negligible system model system model analyze pbcast static set processes communicating synchronously fully connected point point network 
processes unique totally ordered identifiers toss weighted independent random coins 
runs system proceed sequence rounds messages sent current round delivered 
types failures probabilistic nature 
process failures 
independent process probability process crash failure finite duration protocol 
call crashed processes faulty 
second type failures message omission failures 
independent message probability message non faulty processes lost network 
message failure events process failure events mutually independent 
malicious faults spurious messages corruption messages 
expect small probabilities example values compute 
impact failure model described terms adversary attempting cause protocol fail manipulating system bounds model 
adversary capabilities restrictions adversary knowledge probabilistic outcomes interfere notice protocol extremely outcomes recognized possibilities 
examples cited body share property application specific reasons outcomes tolerated sufficiently 
application requires stronger guarantees need reliable multicast protocol ensemble virtually synchronous multicast tuning carefully ensure steady throughput 
state kept pbcast received message regarding pbcast 
received false initiate pbcast 
pbcast msg deliver gossip msg handle message receipt 
receive gossip msg round deliver gossip msg round auxiliary function 
deliver gossip msg round received 
received return mark message seen deliver 
received true deliver msg round don gossip 
round return randomly selected subset foreach sendto gossip msg round version pbcast analysis 
version considers just single multicast message differs protocol described earlier ways simplify discussion changing analytic results 
pseudo code true protocol appears appendix random coin tosses processes cause correlated non independent failures occur enumerated 
adversary complete knowledge history current run 
run protocol ability individually set process failure rates bounds 
faulty processes choose arbitrary point failure 
messages ability individually set message failure probabilities bounds arbitrarily select point messages lost 
note probabilities may manipulated adversary may system reliable bounds system model layer protocols strong probabilistic convergence properties 
probabilistic analysis properties necessarily valid runs protocol system obeys model 
independence properties system model quite strong continuously realizable actual system 
example partition failures correlated communication failures occur model 
partitions simulated independent failures processes vanishingly low probability 
similarly model gives little insight system behave brief network wide communication outage 
types failures realistic threats intend explore impact protocol 
pbcast protocol version protocol analysis simplified follows 
assume run pbcast protocol consists fixed number rounds multicast vanishes system corresponding message garbage collected 
process initiates pbcast multicasting message received random subset processes 
gossip message causing reach processes previously copy gossip turn 
analysis consider just single multicast event adopt view process gossips multicast message round receives copy message 
processes choose destinations gossip tossing weighted random coin process determine send gossip message process 
parameters protocol studied analysis set processes system 

number rounds gossip run 
probability process gossips process weighting coin mentioned 
define fanout protocol expected number processes participant gossips 
described manner behavior gossip protocol mirrors class disease epidemics nearly infect population 
pbcast bimodal delivery distribution mentioned earlier stem epidemic behavior gossip protocol 
normal case protocol gossip floods network random exponential fashion 
pbcast analysis analysis show calculate bimodal pbcast delivery distribution setting bound probability pbcast failure definition failure provided application designer form predicate final system state 
preferable closed form solution doing non trivial epidemics kind seen open problem epidemic theory 
absence closed form bounds approach analysis derive recurrence relation successive rounds protocol calculate upper bound chance failed pbcast run 
notation probability background analysis uses standard probability theory 
types random variables 
lower case variables integral random variables upper case variables binary random variables take values upper case bold variables integral random variables corresponding sums binary variables letter refers probability random variable having value binary variables 
lower case integral random variables variable serves specify random variable binding occurrence variable name 
distributions sums independent identically distributed binary variables called binomial distributions 
relations random variables derive bounds distributions weighted unweighted sums variables 
form finite sets random variables non negative real valued function defined integers 
theorems applied analysis 
max recurrence relation step derive recurrence relation bounds probability protocol state transitions successive rounds 
describe state round integral random variables number processes may gossip round epidemic terminology infectious processes number processes round received gossip message susceptible processes number infectious processes current round faulty 
recall outset chapter analysis pessimistic assuming initial unreliable broadcast fails reaches destinations leaving initial state single process copy message susceptible recurrence relation derive bound conditional probability current state described susceptible processes receive gossip message round 
expressed conditional probability 
processes introduce binary random variable corresponding particular susceptible process receives gossip round 
equal sum variables equivalently order calculate derive bounds distribution derivation steps 
consider absence faulty processes fixed message failures 
introduce separately generalized message failures faulty processes combine failures 
derive bounds general case 
fixed message failures 
analysis begins assuming faulty processes message delay failures occur exactly probability 
second assumption limits system behaving reliable message failure rate 
absence sort failures behavior system known epidemic theory epidemic model called chain binomial epidemic 
literature epidemics provides simple method calculating behavior epidemics unlimited number rounds notion failures bai 
introduce constants 
probability infectious process gossips particular susceptible process message experience send omission failure assumption fixed message failures 
note unrelated reliability parameter employed distinction clear context 
susceptible processes corresponding variable consider probability infectious processes sends gossip message gets 
expressed differently probability infectious processes fail send message particular susceptible process generalized message failures 
potential risk analysis pbcast assume may done protocols worst case occurs message loss maximized 
pbcast failure mode occurs partial delivery pbcast 
pessimistic analysis consider case local increases message delivery probability decrease reliability pbcast protocol 
extend previous analysis get bounds message failure rate may range 
consider process gossips process sends gossip message 
generalized message failures probability eij message experiences send omission failure ij gives bounds lo hi ij probability process gossips process message delivered lo ij ij hi lo lo hi hi 
turn gives bounds probability processes gossiped expressed variables hi lo correspond fixed message failure rate model process failures 
introducing process failures analysis done similar fashion generalized message failures 
simplicity discussion fix probability message failure assume infectious processes gossiping current round faulty 
purposes analyzing pbcast ways processes fail 
crash gossip stage pbcast protocol 
regardless case applies process sends subset messages sent faulty faulty process introduces spurious messages 
ft processes crash sending gossip messages probability susceptible processes receiving gossip message exactly correct processes gossiping current round 
crash gossiping probability processes gossiped processes failed 
cases cause random variables behave probability combined failures 
bounds previous sections combined arrive hi hi lo lo hi hi lo lo hi lo apply theorem get bounds hi lo expanding terms get full recurrence relation define right hand side relation upper bound probability gossiping processes faulty processes received gossip processes receive gossip round 
predicting latency delivery working model compute distribution latency message sent delivered 
case initial multicast successful latency determined multicast transport protocol tree multicast introduced earlier 
protocols approximated simple packet forwarding algorithms operating forwarding trees 
typical round fanout node typical message take log hops sender destination 
information distribution response times forwarding nodes calculate distribution latency delivery associated variance 
experience suggests mean latency variance grow log 
initial multicast doesn reach destinations analysis quite matter 
suppose initial multicast infects processes constant sender copy message 
denote number correct processes received copy message time derive recurrence relation 
introduce constants 
assume processes crash 
susceptible process probability differ respect analysis subsection explicitly treats gossip processes round 
previous analysis treated gossip occuring round 
case initial multicast reaches processes corresponds 
lo lo hi hi infectious processes sends gossip message gets expected number newly infected processes 
introduce process failures analysis 
ways process fail crash gossip stage protocol 
investigating relationship number susceptible correct processes number gossip rounds 
worst case occurs faulty processes fail gossip stage similarly relax message failure rate worst case occurs loss rate 
relations produce graphs section shows number susceptible processes function number gossip rounds gossip fanout initial multicast fails 
define probability susceptible process gets infected round prior round probability susceptible process gets infected round observe round currently susceptible processes equal probability getting infected 
able produce section showing probability correct process receive message certain round 
curves various values 
notice curve roughly shape case peak falls close log fanout 
failure predicates section show calculate bound probability pbcast particular round state undesired failed state round reliability pbcast examining value initial state protocol 
making optimistic assumption compute giving expected outcome initial multicast reaches processes 
computation yield values pbcast parameters give sufficiently high reliability desired 
values calculated context predicate defines run protocol failed final state 
failure states correspond outcomes wish avoid 
predicate defined total number infected processes possibly including faulty processes total number faulty processes 
predicate defined differently depending pbcast 
illustrate give predicates explore predicted reliability pbcast environment interest 
predicate defines failed pbcast reaches sn processes system time prior failed processes faulty number total processes 
value captures notion failure intuitive sense examples predicate ii sense pbcast basis quorum replication algorithm topic discussed birman 
applications worst possible situation pbcast reaches half processes system clear majority clear majority failed processes representing possible swing vote 
capture predicate counts failed processes twice pessimistically totals processes may infected failed pbcast percentage infected processes majority faulty processes counting uninfected percentage infected processes larger minority faulty processes counting infected ii calculation works backwards round 
round sum possible number failures round number infectious processes round 
done calculations round recurrence relation order get equations 
equation calculates bounds probabilities round second equation calculates bounds previous rounds take true false know exact distribution individual processes fail probabilities 
apply theorem get bounds equations 
example bound equation parameters system predicate defining failed final states protocol compute bounds probability pbcast failed state 
done obtain graphs section 
max appendix pseudo code protocol code executed concurrently processes system 
notice optimization rounds need synchronous 
round numbers arise protocol manner require processes round time 
example process round sends gossip message process process round number relevant 
retransmission round number gossip message 
pbcast msg add msg buffer msg multicast msg reception msg add msg buffer msg deliver messages order report gaps suitable delay add msg buffer msg slot free slot msg buffer slot msg msg msg buffer slot gossip count gossip round runs ms implementation round number round number gossip msg dest randomly selected member send gossip msg dest foreach slot msg buffer slot gossip count msg buffer slot gossip count discard messages gossip count exceeds garbage collection limit rcv gossip msg round number compare contents local message buffer foreach missing message solicitation won exceed limit retransmissions round send solicit retransmission round number msg id sender rcv solicit retransmission msg am longer msg round exceeded limits round ignore send copy msg solicited msgid msg sender 
