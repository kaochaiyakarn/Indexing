july faster reuse executive summary maintenance software norman wilde university west florida florida usa tel 
fax 
mail wilde cs 
edu reconnaissance key problem software maintenance reuse usually need understand old code order 
probably programmer time millions dollars expended yearly large software organizations studying old code documents order changes 
understanding takes time impacts project budgets 
changes perfect understanding create subtle bugs major cause schedule slippage 
maintainers tell frequent question program 
large systems provide functionalities users difficult locate code implementing particular functionality 
answer question technique called software reconnaissance 
developed 
software reconnaissance locates key code particular functionality carefully analyzing traces program execution 
tried successfully systems lines code effective easy 
expected benefits software reconnaissance faster maintenance reuse reduction budget schedule uncertainties caused imperfect code understanding 
technique particularly valuable code assets maintained long period code re engineered 
software reconnaissance quite easy implement tools available serc test coverage monitor tact developed siemens corporate research developed bellcore 
serc project help serc affiliate companies evaluate software reconnaissance performing demonstration trials affiliate sites active affiliate code 
interested participating study please contact author report 
report may cited serc tr software engineering research center cse university florida gainesville fl july 
july 
just maintenance part software life cycle program understanding costly part maintenance 
estimated maintainers spend half time analyzing code documents try understand behavior system maintained 
similarly trying reuse code software library programmers find need understand behavior 
program understanding comes slowly impacts time market error prone impacts quality time consuming impacts cost 
understanding program behavior probably costly single task software industry today understand behavior maintainer needs relate code purpose problem domain 
observed limited understanding problem domain maintenance task difficult 
currently available tools provide little support relating code purpose 
purpose large computer programs usually provide users related functionalities 
example telephone switch may offer specific functionalities phone user put call hold call waiting call forwarding visible functionalities initial switch set engineering diagnostics billing error recovery 
software engineers ask program functionality implemented 
change requests example stated terms program functionalities need provide keystroke call forwarding finding code implements functionality obviously step dealing request 
interactions functionalities need studied avoid dangerous call waiting call forwarding related 
reengineering software engineer need know functionalities implemented module order decide modules need retained re written eliminated 
large parts old program dedicated functionalities longer needed 
private conversations published reports software engineers asked functionality view software locate code implements program functionality 
ideally requirements traceability documentation provide view kind documentation frequent life cycle deadlines cost pressures 
practicing software engineers tell fall back grep similar text search methods hope locating comment variable spotlight code need 
simple technique call software reconnaissance developed help solve problem 

software reconnaissance technique technique software reconnaissance grew conversation serc affiliate site software large private branch exchange phone switch maintained 
affiliate software engineers expressed need method locating code implemented functionalities call forwarding call waiting 
idea test cases probes locate functionalities emerged discussion 
method subsequently developed refined serc financial support conference representative hewlett packard estimated spent annually understanding programs 
july students masters software engineering university west florida 
need ask call forwarding implemented telephone switch run small set test cases involved forwarding call second set involve forwarding call 
keep traces program execution run 
software reconnaissance analyzes traces look program components executed set second 
components executed call forwarding components executed call forwarding look call forwarding case studies small systems kloc performed clarify software reconnaissance aid typical program understanding tasks wild unpublished case studies 
method excellent focusing small fraction code subroutines hundreds target system 
programmers familiar target system generally agreed identified code segments close parts code important functionality 
favorable generally chosen test cases needed get results 
kind study experienced programmers asked software reconnaissance carry simple enhancement small unfamiliar program 
able learn technique approximately hour instruction apply effectively minutes 
thinking aloud protocols indicated particular difficulty understanding technique interpretation results 
main difficulties came mechanical errors constructing test cases 
software reconnaissance finding unique code code implement specific functionality 
typically find code maintainer needs study understand functionality 
usually necessary examine code calls unique code code called code shares global data 
software reconnaissance seen method finding places start looking dealing strange code 
help reduce disastrous maintenance mistakes stem ignorance part delocalized program plan 
circumstances software reconnaissance completely effective 
example original programmer may combined functionalities features appear different user really implemented code 
functionalities dependent 
user care needed selection test cases avoid confusing results 
functionalities executed test case capturing keypad entries telephone switch example located method 
software reconnaissance expected powerful tool software engineer code analysis tools strengths weaknesses 
great virtue provides kind information today available means 
july limited research methods identifying functionalities code papers appeared 
university bari proposed method extracting application domain functions old code looking difference input output slices 
de france propose method extracting part program performs specific function fixing input values symbolic evaluation extract part code executed 
software reconnaissance method demanding static analysis methods implemented test coverage monitor simple tools developed 
attempt extract complete working program functionality spotlight maintainer code fragments implement 
techniques similar software reconnaissance proposed aids fault location debugging 
different heuristics may compare execution runs manifest fault opposed runs pan 

tools software reconnaissance software reconnaissance code need things way finding code components executed test case 
simplest way usually instrument code trace file sort created test run 
recon tool set available serc affiliate companies includes ansi code 
alternatively organization may test coverage monitor tactic tool developed siemens corporate research tool bellcore commercial tools currently market 
tools varying levels sophistication available common programming environments languages 
files test coverage tool probably adapted software reconnaissance 
prototypes constructed way 
simple analysis program compare test case traces identify components functionality 
recon tool set includes analysis program may suitable needs 
new program written quite quickly recon analysis tool lines 
applications software asset management short term software reconnaissance technique quickly adopted software maintainers quickly reliably 
expect relatively easy learn easy 
maintainer time build target system instrumentation inserted software reconnaissance 
resulting executable placed special reconnaissance directory separate normal library 
doing build take hour couple days depending complexity target system 
time maintainer specific question program recon tool set developed students masters software engineering program university west florida 
july write test cases run reconnaissance executables produce trace files 
maintainer run analysis program locate code functionality process take hour 
long term managers software assets find useful include software reconnaissance part regression testing strategy 
regression test tagged functionalities exhibits run regression tests instrumented executable 
data run create small data base mappings functionalities unique code see 
way software reconnaissance recover requirements traceability old code 
source files product functionalities call fwd call wait speed dial data base mappings functionalities unique code experiments extensive create complete data base mappings believe information quite useful software asset managers 
example manager better understanding relative size functionality provide better estimates cost possible changes 
possible identify modules largely obsolete eliminated target system 
hope research development application kind functionality view software collaboration serc affiliates 
july 
getting started software reconnaissance software reconnaissance technique completed laboratory scale small industrial trials ready real systems 
software engineering research center serc serc affiliates identify systems software inventory benefit technique 
ideal targets medium largescale systems re engineered maintained years 
part ongoing project serc plans assist affiliates siemens software reconnaissance trials 
normally little cost affiliate 
identifying target system preparing list initial functionalities trial 
adapt tools environment provide support running tests collecting data 
trial completed technique tools 
expect able publish summary results 
interested participating trial please contact dr norman wilde department computer science university west florida fl tel 
fax 
mail wilde cs 
edu 
author students masters software engineering program university west florida past years carried initial research software reconnaissance technique developed prototype recon tool set implement 
bibliography partial evaluation aid comprehension fortran programs ieee second workshop program comprehension capri italy july pp 

james cousin larry automatic software fault location decision decision path analysis proceedings national computer conference pp 

program understanding challenge ibm systems journal vol 
pp 

extracting application domain functions old code real experience ieee second workshop program comprehension capri italy july pp 

lakhotia understanding code analysis experience reverse engineering newsletter vol 
january ieee computer society pp 

von mayrhauser vans program comprehension tool requirements industrial environment proc 
ieee second workshop program understanding capri italy july pp 

july pan wild pan hsin software debugging dynamic instrumentation test knowledge serc tr august 
augmenting program understanding strategies test case methods serc tr august 
wilde gomez locating user functionality old code proc 
ieee conf software maintenance pp 

