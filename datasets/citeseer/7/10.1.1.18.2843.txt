building better test functions whitley mathias rana department computer science colorado state university fort collins colorado usa whitley rana cs colostate edu introduce basic guidelines developing test suites evolutionary algorithms examine common test functions terms guidelines 
methods designing test functions introduced address specific issues relevant comparative studies evolutionary algorithms 
method produces representation invariant functions 
second method constructs functions different degrees nonlinearity interactions cost evaluation scale respect dimensionality search space 
explores methodologies designing evaluating parameter optimization problems comparing effectiveness evolutionary algorithms 
result new test suite new methods designing test functions address specific issues relevant comparative studies 
current evolutionary algorithm test suites contain problems separable problems separable nonlinear interactions variables 
separable functions may nonlinear objective function may involve nonlinearities determining contribution single variable evaluation 
optimal value parameter determined independently parameters 
problematic separable functions readily solved local search methods 
reason argue test problems separable 
reasons separable functions commonly scalable 
scalability desirable nonlinear interactions test function sensitive scaling 
introduce simple methods constructing test functions parameters allow nonlinear interactions variables selectively scaled dimensionality problem increased 
final consideration addressed bcd binary coded decimal binary reflected gray encodings discrete problem representations 
show possible generate functions invariant bcd gray encodings 
evaluating evolutionary algorithms dejong test suite continually standard measuring performance various genetic algorithms 
test functions introduced years ackley schaffer received attention dejong test suite 
test functions listed table 
minimal guidelines test problems principles represent ideas evolutionary algorithm researchers accept desirable properties test functions 
ironically commonly test problems fail satisfy criteria 
guidelines construct new functions goal doing better job evaluating comparing evolutionary algorithms 

test suites contain problems resistant hill climbing 
test suite comparison purposes composed largely problems resistant hill climbing strate gies 
additionally problems comparison purposes benchmarked hill climbing strategies 
hill climbing strategies successful typically faster evolutionary algorithms algorithmic overhead 
hand functions may hill climbed valuable types comparisons particularly testing evolutionary algorithms ascertain existence possible hill climbing components 

test suites contain nonlinear nonseparable problems 
test functions currently genetic algorithm literature separable functions 
comparative testing separable functions produce misleading results may lead experimental researchers draw dubious relative merits various types evolutionary algorithms 
nonlinear separable problems decomposed linear combination independent nonlinear subfunctions 
example separable function function decomposes separate subfunctions subfunction coded bits total search space size nk find global optimum searching points define different subfunctions 
function evaluations needed solve problem parameters coded bits total search space generate globally optimal solution enumerating individual subfunctions requires evaluations 
subspace completely enumerated avoiding local optima 
characteristic allows stochastic search methods move search basin attraction global optimum subfunction 

test suites contain scalable functions 
functions current test suites scalable tend separable functions 
problems separable tend non scalable relatively small 
able scale problems large number parameters 
additionally difficulty problem function evaluation time scale dimensionality problem increases 

test problems canonical form 
close examination past comparative studies indicates problem representations vary 
problems may represented binary real valued strings 
second researchers convert bcd representations gray coded representation 
representations binary form method mapping bit strings real valued numbers differs 
changes representation potentially dramatic impact search algorithms 
different problem representations induce different numbers local optima different sized attraction basins 
trying solve particular problem changing representation may reasonable advantageous 
comparison purposes differences alter difficulty problem 
testing strategies baseline comparisons evaluate test suite construction strategies consider forms hill forms evolutionary algorithms 
hill include ascent random bit climbing rbc defined davis random mutation hill climbing defined forrest mitchell refer line search algorithm 
rbc starts changing bit time random position 
sequence bits tested randomly determined 
change results improvement kept 
rbc checks bit string improvement rbc restarted new random point space 
uses mutation operator random changes single string 
bit string mutated low probability improvements accepted 
run fixed mutation rate problems length string 
case yielded poorer results rbc results rbc reported 
line search algorithm designed exploit separability functions searching values parameter parameter time 
function accepts variables coded bits line search checks points associated variables 
representation need binary discretization variables suffice 
evolutionary algorithms applied chc adaptive search algorithm eshelman elitist simple genetic algorithm performance improved spending significant amount time tune mutation rate impractical large number experiments ran 
gamma gamma gamma gamma gamma gamma cos delta gamma gammax sin gamma gamma cos gamma sin gamma gamma sin gamma table common test functions 
ment selection goldberg 
population size 
recombination accomplished point reduced surrogate crossover operator booker applied probability 
mutation applied bit probability chc run population 
parameter optimization problems posed minimization problems optimal solutions 
algorithms compared significant differences terms value mean solution tailed student test confidence interval 
algorithms compared significant differences terms global optimum chi square test confidence interval 
measures may sensitive amount time algorithms allowed search particularly possible quickly locate globally competitive solutions difficult locate optimal solution 
limitations existing test problems dejong test functions typically labeled 
rastrigin schwefel griewank functions shown table scaled number variables 
functions sine envelope sine wave stretched sine wave functions schaffer 
test problems tune refine variants single algorithm argue superiority approach 
approach potentially dangerous algorithms customized particular set test problems especially disconcerting test problems characteristic types problems evolutionary algorithms appropriate 
davis shown dejong functions quickly solved rbc performance rbc sensitive problem representation 
functions separable functions solved line search 
additionally empirical evidence test functions argue breeder genetic algorithm scales ln function evaluations needed locate global optimum number parameters functions 
line search requires function evaluations solve functions separable 
leaves problems nonseparable nonlinear 
problems solved single pass line search multiple passes yield competitive solutions illustrated table 
problems solved chc algorithm dramatically fewer evaluations eshelman mathias whitley 
separable addition noise prevent algorithm locating optimum 
function mean soln mean sigma 
solved table line search performance nonlinear nonseparable functions 
griewank var dimension griewank var dimensions griewank var dimensions graphs represent slices griewank function dimensional versions problem 
graphs clearly illustrate dimensionality increases local optima induced cosine decrease number complexity 
illustrates griewank function variables 
figures dimensional slices function taken diagonal hypercube 
function simpler smoother numeric space easier solve dimensionality search space increased 
function easier gray coding representations 
common test problems scalable nonlinear nonseparable function 
exhibits serious flaw scaled 
summation term induces parabolic shape cosine function product term creates waves parabolic surface creating local optima 
dimensionality search space increased contribution product term reduced local optima smaller 
gray coding preserves adjacency contained numeric space mathias whitley observation obviously true functions 
path walks adjacency neighborhood corresponds discretized numeric representation search space exists subset paths traverse gray space representation 
sense gray space contains discretized numeric representation 
numeric representation offers opportunities hill climbing opportunities preserved gray coding 
true bcd representation 
may explain gray coding offers representation search space conducive search bcd especially simpler test problems 
observations lead believe test functions comparative studies may lead suspect 
introduce new methods constructing complex test functions satisfy guidelines set forth section 
issues new methods address specifically representation invariance dimensionality evaluation cost scaling 
methods discussed building test functions employ strategy complex functions built simpler primitive functions 
illustrate methods functions taken existing common test suites 
problems candidates primitive functions process identifying primitive instructive 
looking construction methods proposed note kauffman landscapes problems expressed bit strings length bit interacts bits determine contribution fitness function 
functions nice properties different types problems typically parameter optimization scalable sense able scale function known properties higher dimensional space 
possible principles construction landscapes combined construction methods proposed 
invariance bcd gray possible construct function invariant bcd binary reflected gray code representations 
transformation bcd gray space performed binary matrix multiplication 
exists thetan matrix gn maps string length bcd gray representation 
exists matrix dn maps gray string back bcd representation 
matrices fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi fi higher dimensions gn matrix continues bits diagonal upper minor diagonal dn bits diagonal upper triangle 
result gn produces gray coding dn produces coding bit column vector 
example 
similarly 
exists set equivalences gn dn matrices gamma gn dn gammak gn dn theta identity matrix 
simplicity dn bit representation note delta equivalences possible construct function results coding similar evaluations bcd gray coded strings 
define functions similar corresponding objective functions identical set parameters rearranged simple shift operation 
evaluation function takes single parameter length generate new function sn similar gray bcd space 
define sn parameters terms log general form sn sn dn gamma gamma gamma example suppose defined input strings gray coded bcd coded parameters equation shifted left produce similar gray coded parameter set 
change evaluation long insensitive order parameters 
methods discussed insensitive parameter order 
applied technique dejong test suite 
uses bit strings length 
sf takes sixteen bit parameters parameter applied subfunction 
takes bit parameters sf expansion involves terms term consists bit parameters sf ps ps ps ps ps ps ps ps ps refers variable parameter set ps refers second variable parameter set expanded functions insensitive gray coding difficult solve 
difficulty problem depends directly mapping problem difficult 
table shows results executing rbc chc coding similar expansions dejong 
algorithms allowed evaluations evaluations 
results averaged independent experiments 
expected bcd results significantly different gray results 
comparisons algorithms chc able locate optimum solution test function significantly algorithms 
additionally chc significantly better mean solutions function algorithms tested 
constructing nonseparable scalable functions common test problems discussed separable functions 
way introduce nonlinear interactions retain scalability nonlinear function variables starting function 
function scaled variables constructing new function refer expanded function 
expanded function induces nonlinear interactions multiple variables 
furthermore strategy extended provide different degrees nonlinearity 
function subterms terms easily constructed 
consider matrices mean nbr mean nbr alg coding solution oe solution oe rbc bcd gray bcd gray chc bcd gray table performance coding similar functions 
population mutation rate length string probability crossover 
chc rbc 
mean standard 
mean standard 
mean standard 
var soln deviation solved soln deviation solved soln deviation solved full matrix excluding diagonal gray code minor diagonal matrix gray code table matrix complexity expanded function gray 
qx qx qy qz xy xq xy xz yz yq yx yz zq zq zx zy variables labeled edges appear variable pairs matrix 
minor diagonal scaling strategy left matrix picks argument pairs upper minor diagonal matrix pair arguments lower left corner matrix 
results evaluation cost variable interacts variables appears parameter positions 
full matrix scaling strategy right matrix excludes pairs main diagonal 
note cost executing evaluation function scales cost full matrix evaluation grows function minor diagonal scaling strategy evaluation cost 
dejong provides convenient example function nonlinear interactions variables 
scaling expanded function ef variables compared performance evolutionary algorithms bcd gray problem encodings 
gray coding significantly improve performance genetic algorithms 
significantly improve mean solution rbc 
see table 
significant difference results produced chc full matrix minor diagonal evaluation strategies 
statistical significance tests indicated rbc performed best case full minor diagonal evaluation methods performance measured mean evaluation 
gray coded version minor diagonal evaluation appears get easier rbc problem scaled higher dimensions average error reduced higher dimensions number times global optimum increased 
may offer advantage rbc chc rbc 
mean standard 
mean standard 
mean standard 
var soln deviation solved soln deviation solved soln deviation solved full matrix excluding diagonal bcd full matrix excluding diagonal gray table matrix complexity expanded function 
large regions search space represent solutions competitive global optimum 
problem appears better solved hill climbing evolutionary algorithms tested 
table presents results generated expanded function 
gray coding easier chc locate optimal solution problem rbc performs significantly worse gray coding 
gray coding produces mixed results mean solutions generally worse finds optimal solution significantly 
evolutionary algorithms locate optimal solution significantly rbc 
furthermore performance rbc dramatically worse gray coding 
additional experiments dimensions indicates appears difficult problem algorithms 
composite functions method produce scalable nonseparable problems function composition 
nonlinear separable function defined variable transformation create nonseparable function function composition simple case average pair input variables 
alternatively nonlinear transformation pair variables single numerical value 
technique combined method requires range maps domain 
matrix expansion methods discussed previously provides method scaling nonlinearity result complex fitness landscapes 
compositions explored griewank function 
scaling problem role cosine term discussed section critical considerations composing functions 
table shows baseline set experiments variables 
results show gray coded chc able locate optimal solution high degree regularity rbc solves significantly dimensions significantly dimensions 
empirical experiments show trend holds variables easier climb function scaled 
simplest composition tested treated dimensional function 
inner transformation function 
problem resistant hill climbing rbc higher dimensions 
table 
compositions tested 
gamma gamma gamma expected composition easiest solve scaling problem original function 
rbc provided significantly better mean solutions evolutionary algorithms problem yielding solutions dimensions 
compositions proved difficult difficult composite problem table pairs input parameters averaged 
chc rbc nb mean standard 
mean standard 
mean standard 
var soln deviation solved soln deviation solved soln deviation solved scaling simple griewank function full matrix complexity 
table comparisons variants gray coding 
results highlight weaknesses parameter optimization problems commonly compare performance evolutionary algorithms 
comparative studies aimed evaluating performance evolutionary algorithms search methods include test problems displaying characteristics evolutionary algorithms appropriate choice search method 
test suites contain problems resistant hill climbing problems nonlinear nonseparable 
scalability dimensionality evaluation cost consideration construction new functions 
reduce ambiguity canonical form function defined 
problem construction methods proposed address issues invariance gray bcd representations scalability 
guidelines function construction methods useful development robust test functions facilitate cross study comparisons evolutionary algorithms 
supported part nsf iri iri 
ackley 

connectionist machine genetic hillclimbing 
kluwer academic publishers 
booker 

improving search genetic algorithms 
davis editor genetic algorithms simulated annealing chapter pages 
morgan kaufmann 
davis 

bit climbing representational bias test suite design 
booker belew editors proc 
th int 
conf 
gas pages 
morgan kauffman 
dejong 

analysis behavior class genetic adaptive systems 
phd thesis university michigan department computer communication sciences ann arbor michigan 
eshelman 

chc adaptive search algorithm 
safe search engaging nontraditional genetic recombination 
rawlins editor pages 
morgan kaufmann 
forrest mitchell 

relative fitness building block hypothesis 
whitley editor pages 
morgan kaufmann 
goldberg 

note boltzmann tournament selection genetic algorithms simulated annealing 
technical report nb 
department engineering mechanics university alabama 
muhlenbein schlierkamp voosen 

predictive models breeder genetic algorithm 
journal evolutionary computation 
kauffman 

adaptation rugged fitness landscapes 
stein editor lectures science complexity pages 
addison wesley 
mathias whitley 

transforming search space gray coding 
schaffer editor ieee int 
conf 
evolutionary computation pages 
ieee service center 
schaffer caruana eshelman das 

study control parameters affecting online performance genetic algorithms function optimization 
schaffer editor proc 
rd int 
conf 
gas pages 
morgan kauffman 
