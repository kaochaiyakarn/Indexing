interface builders model interface tools pedro szekely ping luo robert neches usc information sciences institute admiralty way marina del rey ca mail szekely isi edu ping isi edu neches isi edu interface builders support construction menus dialogue boxes application 
support construction interfaces application classes visualization simulation command control domain specific editors dynamic complex information applications process 
humanoid model interface design construction tool interfaces specified building declarative description model presentation behavior 
humanoid modeling language provides simple abstraction iteration conditional constructs model interface features application classes 
humanoid provides easy designer interface lets designers build complex interfaces programming 
keywords development tools methods design process interface builders model interface tools 
tools interface construction support construction menus dialogue boxes application provide little support constructing main application displays show application specific objects users manipulate objects 
applications interface requirements go far menus dialogue boxes constructed interface builders 
data complex structure 
visualization applications treeviz visualize complex data structures levels nesting 

heterogeneous data 
applications typically process kinds data different types notes music editor different kinds shapes drawing editor require different presentations require different input behaviors convenient manipulation 

variable amounts data 
applications typically process variable amounts data come data bases programs visualization command control simulation data constructed interactively user specialized editors 
time varying data 
applications process data changes run time command control simulation allow users change data specialized editors 
applications typically show views data kept coordinated date 

treeviz visualization tool hierarchical information left portions interface constructed interface builders right 

illustrates main shortcoming interface building tools 
left hand side shows display treeviz simple visualization application visualizing hierarchical data 
example treeviz visualizing cost maintain computers organization 
shapes represent different classes members organization shading represents different kinds computer size areas represents cost maintain computer 
right hand side shows portions interface specified interface builder 
interface builders support construction interface simple application treeviz support interface application classes mentioned 
treeviz display specified interface builder number objects shown varies run time shape shading objects depend attributes data layout recursively defined 
challenge interface construction tools embody richer expressive model interfaces making intuitive easy designers 
interface builders meet challenge 
intuitive easy simply expressive 
describes tool called humanoid meets challenge 
humanoid modeling language supports specification aspects interface presentation behavior dialogue 
main contribution humanoid lies nature modeling language way delivered designers intuitive easy interface 
humanoid modeling language abstraction composition iteration conditional constructs designed support modeling interfaces characteristics mentioned numbered 
abstraction mechanism allows specification presentation templates instances class objects behavior templates specify objects manipulated 
composition construct allows presentation templates composed order define presentation data complex structure 
conditional constructs support presentation heterogeneous data 
coupled iteration construct abstraction composition constructs allow specification presentations variable amounts heterogeneous data 
modeling language uses data dependency mechanism similar spreadsheet formulas specify dependencies data presentations order support automatic presentation update time varying data 
humanoid overview humanoid model system 
interfaces specified constructing declarative model interface look behave 
standard run time support module included application execute model construct application displays interpret input information model 
humanoid modeling language humanoid provides declarative modeling language factors design interfaces semi independent dimensions 
application semantics represents objects operations application 
application semantics defines domain discourse interface referenced dimensions model define presentation behavior dialogue sequencing interface 

presentation defines visual appearance interface 

behavior defines input gestures mouse applied objects effects state application interface 

dialogue sequencing defines ordering constraints executing commands supplying inputs commands 

action side effects defines actions executed automatically commands command inputs change state making newly created object current selection 
organized follows 
section presents overview humanoid modeling language desiderata designer interface followed related section 
body discusses main constructs modeling language designer interface facilities modeling constructs shows construct treeviz interface scratch 
doses current status 
dimensions discussed detail 
details appear 
designer interface humanoid designer interface humanoid supports tight design evaluate redesign cycle 
typical screen designer workstation 
contains windows showing different views design model windows labeled part editor presentation template layout editor 
gl pnt pt height record pk ent 
snapshot screen showing typical configuration windows design session humanoid 
submitted publication structure layout editor windows showing application data structures object browser windows showing interfaces humanoid generates model treeviz 
windows explained detail designer interface designed desiderata features design visible changeable designers designers control aspects interface design 
example interfaces editable views model 
humanoid capitalizes idea people understand problems better interact symbolic representation illustrative examples 
humanoid shows designers views model symbolic representation interfaces generated model examples 
designers refine model editing example interfaces produced model 
views design linked help designers understand edit model 
requirement manifests features humanoid 
humanoid provides facilities map example features model elements vice versa 
designers point element design ask humanoid highlight portions example displays controls conversely designers point feature example display ask see portions model generated 
example interfaces kept date modification design model design fully specified helping designers immediately see consequences modeling decisions 
conversely designers perform refinement demonstration immediately see humanoid interpretation example design views 
related interface design construction tools compared expressivity usability dimensions 
expressivity dimension defines class interfaces specified usability dimension captures level expertise designers need tool 
low expressivity spectrum interface builders essentially single modeling construct instantiation 
designers create instances predefined set classes interface building blocks set values parameters 
interface builders specify menus dialogue boxes application main application displays 
high expressivity spectrum programming languages allow programmers create arbitrarily sophisticated interfaces writing programs procedural models interfaces 
close programming spectrum object oriented systems provide classes building specific kinds interfaces 
greatly facilitates programming graphical editors task requires extensive programming skills 
usability dimension generally goes opposite direction 
low expressivity tools interface builders easy high expressivity tools programming languages object oriented frameworks hard 
demonstrational tools demonstrational tools attempt move expressivity spectrum remaining high usability spectrum 
instance lets designers demonstrate examples boxes arrows application arrows remain attached boxes constructs box arrow classes appropriate constraints instances remain connected 
generalizations demonstrational tools typically shown designers 
cases designers view generalizations tools help designers understand relationship features examples features generalizations 
designers find hard understand generalizations 
humanoid differs tools model generalizations plays role 
demonstrational capabilities humanoid weak compared humanoid derives strength modeling power combination explicit model example views construct models 
model approaches model systems score high expressivity low usability 
uide model interface tool application dialogue sequencing models similar humanoid presentation model relatively impoverished compared humanoid 
uide sophisticated designer interface usability low 
uide approach usability automation 
richness uide model enables construction tools generates animated help don generates dialogue boxes 
uide emphasizes model analysis tools consistency checkers keystroke analysis 
humanoid uide models similar advantages systems integrated single tool 
characterized model system 
presentation model similar humanoid dialogue application models expressive 
score high usability due textual specification language production quality system 
having reviewed related focus modeling language designer interface build interfaces 
application model step designing interface model application functionality objects commands submitted publication application provides 
humanoid formally modeled object oriented way specifying types slots object 
commands modeled specifying inputs preconditions call back procedure 
advanced features application model discussed 

application model treeviz 

shows treeviz application model 
start design decided command command edit information contained record hierarchy 
input root object store root record hierarchy shown 
dialogue sequencing decision notion current selection command edits current selection 
accordingly defined global input called current object tied object ed input ed command current object 
presentation decision stating qu belongs commands group tells humanoid commands panel command buttons 
interface builder started design interface differently 
drawn quit button bottom screen tied callback procedure 
drawn record cost labels top screen able tie right 
done interface builder 
mentioned main display treeviz specified interface builders 
able specify command want double click display area showing record screen button invoke 
interface builders provisions invisible behaviors 
application model advantages interface builder approach humanoid generates default interface application application model 
default interface similar constructed interface builder 
contains menu bar input panel blank area main application area command panel bottom 
addition humanoid provides facilities customize layout aspects interface look desired 
application model aspects design visible interface builders allow designers talk elements explicit representation user interface 
application model allows designers express hidden notions command dialogue sequencing constraints 
application model automated design critics automatic help generation tools illustrated uide system 
having defined initial version application model designer proceed refine default interface specify presentation behavior main application area fine tune default interface 
sections describe refinement process humanoid supports 
interface builder proceed drop programming language interface builder support ends construction main application areas starts 
presentation templates humanoid designers model presentation application incrementally 
identify major elements display define presentation templates initially just names display elements 
designers proceed define characteristics display element data presents parts layout 
example treeviz see display composed mayor elements shapes rectangles ovals columns rows proceed define presentation templates called shape column row 
presentation template abstraction model characteristics display elements 
run time presentation templates rubber stamps create instances display element needed 
presentation templates represent information presentation template defined refinement existing template modifying attributes listed 
input data type information displayed presentation template 
widget graphical object produced presentation template 
primitive graphical object line icon text toolkit primitive menu button layout management widget column row table graph applicability conditions predicates identifying contexts template appropriate 
parts decomposition complex display simpler displays 
part modeled terms input data ought default template presenting data 
humanoid uses default template starting point search appropriate template display part applicability conditions templates model 
behaviors input behaviors invoked display elements specified presentation template 
humanoid provides specialized editors construct presentation templates specify attributes 
window 
labeled submitted publication template structure shows part decomposition templates 
boxes represent templates links represent parts 
window labeled part editor shows attributes selected part presentation template structure window 
part treeviz tee late ei 
initial definitions templates construct main application area treeviz interface 

shows initial template definitions construct main application area treeviz 
defined templates specializations library templates best approximate desired effect evi umn specializes generic column template specify particular shape shape know shape want shape depend attributes record displayed 
need conditional construct specify aspect interface 
ability defer commitments issue example flexibility afforded model approach 
adding parts templates case treeviz concern define hierarchical decomposition display 
humanoid adding parts templates 
humanoid provides ways add parts template editing model editing example generated model 
add part editing model designer selects template presentation template structure window obtains dialogue box specify name default presentation template part 
add part editing example designer specifies template selecting presentation model view selecting portion display example 
designer selects default presentation template part palette templates interface builder draws part example window 
part specified example information size location incorporated model 
facilities adding parts illustrate power coordinated model example view approach 
convenient select part parent model view shows features model 
examples typically show internal geometry management nodes display hierarchy 
small elements display overlap difficult select 
hand specifying size location new part conveniently done example window 
design treeviz proceeds adding parts column template 
need add border part show kind border column element part specify contents column 
bir 
border part added column generated example shows 

shows effects adding border 
chose default presentation template border part border shows record associated column 
humanoid shows border part sketch template fully defined define widget 
border size incorrect specified size column 
example illustrates humanoid lets designers small incremental steps requiring fully define aspect interface order get screen 
adding border missing aspects interface 
fix border layout define conditions choosing appropriate shape add elements part define input behavior 
suppose add elements part 
fully specify need specify data presents presentation template uses presenting data get part replicated required data 
specifying part input data part added template specify data 
general data part function data parent ancestors display hierarchy 
functions typically defined snippets code perform simple computations accessing slot value object applying application specific functions concatenating strings performing arithmetic 
example treeviz elements part presents children record parent 
humanoid interface defining values input data parts resembles interface entering formulas spreadsheet 
humanoid gives designer menu commonly functions type area entering formula snippets code called humanoid 
designers construct formulas combination menu selection pointing enter model elements input data template input command 
treeviz example spreadsheet interface specify value re input data elements part 
choose get slot value function menu point relevant model elements specify object slot point submitted publication record input data treeviz column specify want access slot record stored parent point children slot window showing example record window labeled object browser 
pointing operations humanoid constructs snippet code value record children 
spreadsheet paradigm constructing formulas define values input data important benefits computer users programming expertise familiar spreadsheets effectively 
recording dependencies enables humanoid automatic redisplay facility 
data referenced formula changes humanoid identify update affected portions display 
conventional toolkit build treeviz need program propagation data display hierarchy worry bookkeeping display update say case child record deleted 
humanoid specified data propagation simple way worry display update 
specifying layout interface builders provide easy facilities specify layout dialogue boxes 
designers simply drag stretch objects area needed aided alignment features grids gravity dialogue boxes neatly align objects 
interface builders specify layout application main displays objects laid computed application run time 
necessary specify methods laying objects specifying coordinates concrete objects interface builders designers 
humanoid library templates commonly layout methods rows columns tables graphs 
designers templates defining templates specializations treeviz column specialization generic column template graphical interfaces layouts different default ones needed 
case designer layout specification facilities humanoid 

showed humanoid dialogue box defining custom layouts 
similar dialogue boxes provided drawing editors interface builders define alignment parts define layout parts template part parent siblings concrete objects 
dialogue box provides options common cases making left side object left side object provides custom option allow designers enter arbitrary formulas need 
entering arbitrary formulas spreadsheet paradigm available easy enter model elements 
treeviz application need define layout border elements parts column 
border part size parent specify choosing align options layout editor dialogue box 

shows treeviz example layout border defined 
postpone defining layout elements specify get element part replicated 
nil cost nil order 
treeviz examples layout defined 
main benefits humanoid layout mechanism humanoid library contains commonly layout managers row column table graph 
custom layouts defined dialogue boxes similar alignment facilities interface builders 
writing treeviz interface conventional toolkit need write kind recursive function compute layout 
humanoid uses constraint system specified layout simple formulas entered spreadsheet interface 
constraint system solves formulas produce correct layout window resized 
behavior templates treeviz provides example kinds input behavior required manipulating presentations main displays application 
user moves mouse visualization area treeviz shows top window summary record mouse pointing 
mouse moves crossing boundaries regions information top window changes 
interface constructed conventional toolkits input behaviors need programmed 
humanoid behaviors specified merely filling options dialogue box 
humanoid behavior model myers interactor model 
myers identified classes parameterized interactors model input behavior large class mouse keyboard direct manipulation interfaces menu interactor move new point interactor angle interactor trace interactor gesture interactor 
interactor parameters specify operation interactor 
model treeviz behavior menu interactor menu elements leafs display tree myers notion menu interaction general 
time mouse moves new leaf element menu interactor calls standard action 
spreadsheet interface specify action set application global input called current object 
value record input data leaf element pointed mouse 
automatic update submitted publication mechanism ensures screen updated appropriately 
humanoid behavior model benefits designers programming experience model application specific behaviors kind require extensive programming implemented traditional interface toolkit 
behavior model separate presentation allowing designers explore presentation behavior features semi independently 
example treeviz behavior works correctly presentation model fully defined layout graphics visualization defined 
presentation model refined behavior modification 
iteration common concern design interfaces specify presentation variable amounts data 
humanoid provides iteration construct called part replication support 
works designating input data part index iteration construct 
run time value index input data expected list 
humanoid instantiate replicate part element index input data 
replication displayed default presentation template part 
conditional constructs see section allow specification conditions choose different template replication depending attributes value index input data 
humanoid iteration construct easy 
designer just needs select input data part designate replication index 
treeviz iteration construct specify elements part treeviz column replicated children record stored parent 
section specifying part input data specified record input data elements gets children parent record 
thing need designate record replication index 

shows effect specifying replication 
element part got replicated times parent record children 
treeviz kind column template elements appear column 

left treeviz example showing effects replication size specified 
right treeviz sizes specified 
need fix size elements part 
width equal width parent specify selecting align options left alignment right alignment layout editor dialogue box 
height element height parent multiplied ratio slot element record slot parent record 
specify formula custom height option bottom alignment spreadsheet facilities enter go slot objects involved 
notable aspect humanoid iteration construct simple powerful 
addition input data replication index change value run time humanoid automatically reconstruct display 
treeviz interface finished 
need specify actual shapes display record 
conditional constructs 
problem designers face presentations sensitive attributes data displayed 
humanoid provides conditional constructs support 
conditional constructs designed convenient specify common cases hiding showing display elements choosing different presentations attributes object 
inclusion condition part formula determine part appears display 
part instantiated included display formula value true 
substitutions template list condition template pairs specify alternative templates display template data 
substitutions substitutions substitutions template form hierarchy 
asked display part humanoid searches substitution hierarchy default template part find deepest substitution condition returns true 

shows portion substitution hierarchy treeviz specify different presentations records depending type slot record 
type record shape black 
similar substitutions machine types substitutions person classes yields finished treeviz display shown 

substitution hierarchy treeviz specify different presentations attributes record 
humanoid provides interactive interface visualize edit substitution hierarchies shown 
designers add delete nodes graph obtain dialogue boxes edit attributes 
submitted publication conditional constructs humanoid benefits 
conditionals added modular incremental way adding part inclusion conditions adding nodes substitution hierarchy 
spreadsheet paradigm specify conditions easy designers define conditions allows humanoid automatically update displays update involves searching substitution hierarchy values conditions changed 
interface builders support conditional presentations achieving results programming 
current status humanoid implemented windows garnet 
implement interfaces large applications logistics analysis system knowledge base development environment humanoid designer interface continues active development 
integrates traditional model approach systems uide easy approach interface builders demonstrational tools 
yields tool benefits expressivity 
designers specify main windows applications just menus dialogue boxes 
ease 
aspects humanoid increase ease simple abstractions aspects models visible changeable model example views coordinated spreadsheet paradigm specifying snippets code 
support design process 
humanoid supports design process allowing designers top delay design commitments separate aspects interface semi independently framework incorporation design time run time support tools 
humanoid explicit design model contains knowledge automated design critics automated help generation system 
example system generates animated help added humanoid model contains necessary information 
addition modeling language extended incorporate support tools tools task analysis 
acknowledgments research reported supported darpa contract numbers ncc 
wish david benjamin brian harp useful comments drafts 
framework conceptual consistency verification sc 
dissertation dept ee cs george washington university washington dc 
foley kim kovacevic murray uide intelligent user interface design environment sullivan tyler eds 
architectures intelligent user interfaces elements prototypes addison wesley reading ma pp 

johnson treeviz treemap visualization hierarchically structured information 
proceedings chi 
may pp 

kim foley don user interface presentation design assistant proceedings uist 
october pp 

myers vander zanden dannenberg 
creating graphical interactive application objects demonstration 
proceedings uist 
november pp 
myers 
new model handling input 
acm transactions informations systems 
july pp 

myers 
graphical techniques spreadsheet specifying user interfaces 
proceedings chi 
april pp 

myers garnet manuals 
technical report cmu cs school computer science carnegie mellon university pittsburgh pa 
may 
neuron data 
open interface toolkit 
university ave palo alto ca 
singh kok ngan 
system demonstrational rapid user interface development 
proceedings uist 
october pp 

sukaviriya foley coupling ui framework automatic generation context sensitive animated help 
proceedings uist 
october pp 

szekely luo neches 
facilitating exploration interface design alternatives humanoid model interface design 
proceedings chi 
may pp 

linton 
framework building domain specific graphical editors 
acm transactions information systems july 
pp 

wiecha bennett gould greene 
tool rapidly developing interactive applications 
acm transactions information systems july 
pp 

williams 
rabbit run 
int 
man machine studies pp 

submitted publication 
