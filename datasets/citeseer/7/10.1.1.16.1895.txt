loop compiler java jml joachim van den berg bart jacobs computing science institute university nijmegen toernooiveld ed nijmegen netherlands cs kun nl describes architecture loop tool reasoning sequential java 
loop tool translates java jml speci cation language tailored java classes semantics higher order logic 
serves front theorem prover actual veri cation desired properties takes place 
discusses issues related logical theory generation 
able verify programs major topic computer science 
purpose arti cial mathematically clean programming languages introduced reasoning real dirty programming languages far easy 
due progress eld theorem proving increase computing power feasible reason real programming languages 
specialised tools loop tool contribute feasibility 
theorem provers program veri cation common 
numerous advantages theorem provers doing proofs doing proofs hand theorem provers precise lots boring proof steps seconds keep track list proof obligations open lot bureaucratic administration user 
especially relevant area program veri cation usually cases distinguished proofs dicult comparison mathematics 
java popular programming languages particular interest researchers 
research groups focusing speci cation veri cation java programs source code level various tools esc java extended static checker java including threads detect certain runtime errors compile time built theorem prover 
checker errors user interaction 
esc java uses speci cation language integrated jml 
jive veri cation environment user write java sourcecode speci cation 
connected theorem prover currently pvs verify proof obligations 
jive user interface takes care interaction pvs 
jive currently able reason sequential kernel java exceptions crucial part java 
bali project deep embedding semantics bali java subset isabelle developed various meta theoretical results formalisation type system prove type safety soundness completeness appropriate hoare logic 
project primarily focussed veri cation concrete programs 
key project aims integrating formal speci cation veri cation tools software engineering process 
project dynamic logic javacard java subset smart card programming developed 
veri cation tool project development 
bandera project extracts non nite state model java sourcecode applies program analysis abstraction transformation techniques order get nite state model 
model abstractly represented enabling generation concrete models various model checking tools 
tools developed project applied java case studies 
loop project focuses speci cation veri cation sequential java 
part java formal semantics developed coalgebras 
jml language specify java classes 
kernel part jml invariants behaviour speci cations including modi able clauses formal semantics developed 
loop project special purpose compiler loop tool built incorporate semantics java jml 
output loop tool series logical theories theorem provers pvs isabelle 
gives veri er choice proof tool 
typically user wants reason java class uses loop tool translation reasons program language semantics theorem prover 
loop approach existing general purpose theorem provers concentrates building dedicated front particular application area developing dedicated theorem prover project 
reasoning goes combination applying semantic hoare logic rules automatic rewriting 
papers underlying semantics logic published 
focuses tool 
automatic translation java classes series logical theories advantages manual translation 
loop translation process boring error prone time consuming 
translated java class usually larger size original 
tool translation seconds errors translation function implemented correctly 
advantage tool support gen erated theories ne tuned achieve eciency proofs hardly possible generating theories hand 
comparison projects mentioned distinguishing features loop project 
esc java tool involves user interaction fast easy detect limited class errors 
loop tool user engage interactive program veri cation back proof tool inherent limitations dis proved 
esc java loop tools complementary combination especially speci cation language jml 
jive approach closest loop approach 
di ers syntax approach dedicated user interface allowing reasoning actual program text meaning 
speci cation language jive tool resembles jml 
early judge compare approaches actual examples 
bandera project aims veri cation java programs especially involving threads model checkers 
similar loop project output generated back tools actual veri cation 
model checkers theorem provers 
general problem multi threaded java level granularity de ned 
bali key projects substantial concrete examples java programs making comparison premature 
organised follows 
section describes modular architecture loop tool 
section describes issues related theory generation 
section brie describes loop tool nally section gives overview possible application areas 
architecture loop tool shown loop tool accepts languages object oriented features java jml 
serves front theorem prover gure pvs 
loop tool serve front isabelle 
theorem prover prove properties classes input languages basis logical theories generated loop tool 
input languages historically rst input language short coalgebraic class speci cation language 
experimental speci cation language jointly developed university dresden university nijmegen 
language write class speci cations object oriented way classes user statements java classes loop translation tool see fig 
logical theories pvs proof tool sri qed hopefully jml classes semantic prelude 
overview loop project write speci cations attributes methods constructors 
supports inheritance subtyping 
uses coalgebraic semantics classes supports tailor modal operators reasoning class speci cations 
concentrate input languages java jml refer information 
second input language java popular object oriented programming languages 
semantics sequential java java threads closely follows java language speci cation 
information semantics 
third input language jml short java modeling language 
jml interface speci cation language tailored java primarily developed iowa state university 
designed easy programmers limited experience logic 
extends java user write class invariants pre post conditions methods constructors source code making java expressions extended various logical operators formulate desired properties 
extensions jml enclosed java comment markers uence program behaviour 
typical jml speci cation method looks follows 
behavior requires modifiable ensures terminating normally signals terminating abruptly exception void 
loop tool internals view loop tool enlarged 
view considered tool accepts java classes interfaces rst passes viewed rst part standard java compiler 
java classes lexer parser pvs pretty printer pvs theories inheritance resolver theory generator type checker isabelle pretty printer isabelle theories 
exploded view loop tool standard techniques build lexer parser de nition java syntax 
parsing unknown types class interface types resolved 
types stored tagged strings syntax tree resolved pass 
inheritance resolver establishes relations classes resolving unknown types 
pass overridden methods hidden elds java internally marked overridden hidden 
type checker computes type expression occurring input classes 
type checker needed overloading mechanism java powerful ones pvs isabelle 
de nitions pvs isabelle provided explicit types 
point standard java compiler generate bytecode le class 
loop tool translates java class semantics form series logical theories 
theories produced internally way logic syntax als see subsection 
come concrete theories pass pretty printer implemented translate als concrete logic syntax 
theories provide powerful technique produce concrete theories di erent theorem provers implementing pass fairly simple 
implemented pvs isabelle 
java class may read java interface 
explicitly mentioned 
als involves standard constructions higher order logic 
principle easy generate output theorem prover provides higher order logic coq 
jml loop tool works similarly 
jml extension java grammar java extended logic jml java expressions type checker extended 
theories speci cations abstractly generated 
notably pretty printer components loop tool shared input languages java jml 
implementation details ocaml language implement loop tool 
comprises number tools lex yacc debugger native code compiler 
ocaml ml dialect supporting object oriented features 
strongly typed functional programming language expression type automatically determined compiler 
great advantage strongly typed language potential program errors caught compiler type errors 
penalty set appropriately structured types rst 
forms non trivial part implementation loop tool 
internally java jml class members elds methods constructors occurring input stored instances certain ocaml classes 
root classes ocaml class types top type java jml classes top member type java jml members 
top class types contain common information name class elds methods de ned 
input language introduce specialised class types deal language speci properties 
top type java type type jml type similarly top member type specialised class types java jml members 
type class type mutually recursive member type variant 
types non trivial structure involving subtyping mutual recursion various forms 
due object oriented nature loop tool easy adapt theory generation di erent input languages 
type class type method invokes theory generation overridden specialised types 
non technical details loop tool currently consists lines ocaml code including documentation lines implement java part lines extend jml 
implement lines lines code shared 
loop tool started continues moment 
generated theories section focuses typical issues problems related theory generation 
contents theories complicated describe detail directly relevant 
see information 
mutually recursive classes circular theories loop tool translates java jml class semantics higher order logic series logical theories 
possible generate semantics single theory places source code classes occur 
having lead case circular theories 
allowed pvs isabelle 

java source code classes occur places 
inheritance level lead circularities standard java compiler detects class subclass class extends class extends illegal 
interface level 
signatures members class contain occurrences class vice versa 
implementation level 
method constructor body class class occurs creating object class eld access object type vice versa 
concrete toy example mutual recursion java classes consider classes signature method occurrence class signatures methods occurrences class method creates object class method assigns value eld cast 
class class extends int return new void new void 
mutually recursive java classes prevent generated theories circular semantics java class divided tailor theories 
prelude theory de nes special type objects arrays class 
type null pointing certain memory location object multi dimensional array objects class stored 

interface theory de nes types elds methods possibly constructors class 
direct superclass superinterfaces 

bodies rewrites theory gives semantics method constructor bodies 
auto rewrite lemmas generated conveniently proofs reduce proof interaction user 
prelude prelude interface interface inheritance bodies rewrites bodies rewrites 
generated theories classes interface theory imports prelude theories classes members signatures 
imports interface theory direct superclass members superclasses accessible 
superclasses transitive 
bodies rewrites theory imports interface theories classes static type occurs method constructor bodies 
note circularities 
similarity theories kind number theories produced loop tool depends input language 
language speci properties theories jml describe properties implementations theories java describe concrete implementations 
di erences kind theories generated input languages theories common 
similarity forms reason having tool languages 
semantics spread theories due space restrictions theories generated handle mutual recursion 
jml class possibly de ning speci cation elds methods extended interface theory generated containing extra elds methods 
theory semantics bodies methods constructors theory properties implementations yielding jml speci cation constructs behaviour speci cations invariants generated 
having java implementation jml speci cation theory generated relate suitable translation coalgebras making interface types match 
possible formulate intended proof obligation java implementation satis es jml speci cation 
theories loop tool generates logical theories pvs isabelle 
tools er higher order logic di erent syntax 
loop tool rst generates theories syntax tree abstracts away di erences syntax 
tree built types cover common constructs higher order logic function abstraction application quanti cation 
type expression formula expression formula true application expression expression formula tuple expression list 
secondly theorem prover speci pretty printer applied theories order generate concrete theories 
writing fairly easy illustrated done pvs 
rec pp pvs expression function expression form pp formula form application func arg pp pvs expression func print string pp pvs expression arg print string pp pvs formula function true print string true form print string pp formula form print string 
size speed translating classes example subsection leads kb pvs theories kb isabelle theories class respectively kb kb class main di erence size pvs isabelle theories caused fact isabelle de nition imported theory quali ed theory name 
substantial part generated les consists comments explaining happening 
general size generated theories strongly depends number superclasses 
inherited method repeated interface theory body semantics recalculated added bodies rewrites theory 
inheritance leads substantial increase size generated theories 
loop tool easily handle large number classes 
running loop tool jdk api consisting classes forming mb source code takes seconds parse type check 
produce series logical theories takes seconds longer mainly consisting writing concrete theories le scenarios successful run loop tool java class type correct de ned type incorrectness input lead abrupt termination loop tool error message 
successful run leads series pvs isabelle type correct logical theories 
loop tool requires java class implementation speci cation occurs input series 
requirement design decision automatically loading classes lead uncontrolled loading classes 
practice works best cut away veri cation unnecessary details class de nitions method de nitions nal program 
way user restrict size generated theories 
importance keep size small possible limit time spent loading type checking theorem prover 
translated desired properties java class veri ed theorem prover 
user specify properties jml speci cations advantage automatic translation hand written speci cations formulated language semantics higher order logic 
veri cation properties goes combination applying tailor rewrite lemmas de nitions applying hoare logic rules 
loop tool generate batch les 
batch le contains necessary steps theorem prover take type checking generated theories rerunning proofs 
batch les useful reduce user interaction 
rerunning old examples new releases loop pvs isabelle compatibility checks 
recalculation necessary order reason late binding java uences behaviour method execution see details 
experiments done pentium iii mhz running linux 
jml class type correct 
example example illustrates ease jml behaviour speci cations 
constructor methods normal behavior speci cation informally says precondition holds method allowed terminate normally state postcondition holds 
loop tool expresses behaviour speci cations specialised hoare logic jml 
reasoning methods goes applying suitable hoare rules described 
class class boolean normal behavior normal behavior requires true requires true modifiable ensures result false ensures boolean boolean new true return normal behavior requires true modifiable ensures void example easy see constructor methods terminate normally 
note class declare constructor default constructor created see default normal behavior speci cation see 
prove classes correct user validate proof obligations constructors method straightforward established automatic rewriting 
proving correctness method containing method calls method established ways reasoning implementations reasoning speci cations 
general option better reduces time spent proving termination method calls enables modular veri cation 
method class proof obligation reads holds arbitrary implementation holds implementation speci cation class obtain speci cations members 
speci cations establish postcondition method composition rule proof straightforward 
strategies currently reasoning jml annotated java programs done pvs 
experience growing ingredients veri cation incorporated tailor proof strategies pvs 
turn extremely useful substantially decrease amount interaction needed proof construction 
application areas loop tool applied areas ort spent speci cation veri cation justi able 
think areas economical security aspects play important role development safety critical systems integrated software development relying formal methods 
java class library classes interesting veri cation 
verifying classes class library useful people classes write applications 
loop tool successfully applied verify non trivial invariant property frequently vector class 
area smart cards formal veri cation necessary due higher standards market demands 
smart cards issued large numbers security sensitive applications justi es application formal methods error detected issuing saves lots money 
loop tool area javacard smart cards especially javacard api speci cation veri cation applets smart card programs stored smart card 
part larger project supported european union modular architecture loop tool reason java 
loop tool translates implementation speci cation java classes semantics higher order logic 
internally semantics abstractly generated series theories easily theories di erent theorem provers 
actual veri cation done theorem prover 
doing full program veri cation real life programming languages feasible cases requires major investment time resources 
veri cation technique applied areas presence errors major impact money costs repair 
compiler loop tool users concentrate real speci cation veri cation having care actual modelling 
see www org credits past couple years people authors contributed implementation loop tool ulrich hendrik marieke huisman martijn van erik poll wim janssen jan 
authors done java jml implementation 
due erik poll referees valuable comments earlier version 

baar beckert menzel schmitt 
key approach integrating object oriented design formal veri cation 
brewka pereira editors proc 
th european workshop logics ai jelia lect 
notes ai 
springer october 

barras cornes courant chr 
atre gim enez herbelin huet mu murthy parent paulin mohring sa bi werner 
coq proof assistant user guide version 
technical report inria rocquencourt france may 

van den berg huisman jacobs poll 
type theoretic memory model veri cation sequential java programs 
bert choppy editors trends algebraic development techniques number lect 
notes comp 
sci pages 
springer berlin 

van den berg jacobs poll 
formal speci cation veri cation javacard application identi er class 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appeared proceedings javacard workshop cannes 
inria techn 
rep updated version appear th 
jensen editors proceedings java card workshop springer lncs sept 

corbett dwyer laubach pasareanu robby zheng 
bandera extracting nite state models java source code 
proceedings nd international conference software engineering june 

gosling joy steele bracha 
java language speci cation second edition 
java series 
addison wesley 

huisman jacobs 
reasoning classes objectoriented languages logical models tools 
ch 
hankin editor european symposium programming number lect 
notes comp 
sci pages 
springer berlin 

huisman 
reasoning java programs higher order logic pvs isabelle 
phd thesis univ nijmegen 

huisman jacobs 
inheritance higher order logic modeling reasoning 
harrison editors theorem proving higher order logics number lect 
notes comp 
sci pages 
springer berlin 

huisman jacobs 
java program veri cation hoare logic abrupt termination 
maibaum editor fundamental approaches software engineering number lect 
notes comp 
sci pages 
springer berlin 

huisman jacobs van den berg 
case study class library veri cation java vector class 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear software tools technology transfer 

jacobs 
formalisation java exception mechanism 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear esop 

jacobs poll 
logic java modeling language jml 
techn 
rep csi comput 
sci 
inst univ nijmegen 
appear fase 

jacobs van den berg huisman van 
reasoning classes java preliminary report 
object oriented programming systems languages applications pages 
acm press 

leavens baker ruby 
preliminary design jml behavioral interface speci cation language java 
techn 
rep dep 
comp 
sci iowa state univ 
www cs iastate edu leavens jml html revised may 

leroy 
objective caml system release 
institute national de recherche en informatique automatique 
documentation user manual 

meyer poetzsch ter 
architecture interactive program provers 
graf schwartzbach editors tacas tools ans algorithms construction analysis software volume lect 
notes comp 
sci pages 

von oheimb nipkow 
machine checking java speci cation proving type safety 
jim alves foss editor formal syntax semantics java volume lncs pages 
springer 

owre rushby shankar 
pvs prototype veri cation system 
kapur editor th international conference automated deduction cade number lect 
notes comp 
sci pages 
springer berlin 

paulson 
isabelle generic theorem prover 
number lect 
notes comp 
sci 
springer berlin 
contributions tobias nipkow 

loop project 
www cs kun nl bart loop 

jacobs 
coalgebraic class speci cation language 
technical report tud fi dresden university technology department computer science october 
available inf tu dresden de tu informatik berichte html 

extended static checker esc java 
compaq system research center 
www research digital com src esc esc html 
