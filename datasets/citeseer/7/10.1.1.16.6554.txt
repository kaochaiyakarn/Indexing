routing algorithms dhts open questions sylvia ratnasamy cs berkeley edu introduced years ago peer peer filesharing systems popular internet applications major source internet traffic 
extremely important systems scalable 
unfortunately initial designs systems significant scaling problems example napster centralized directory service gnutella employs flooding search mechanism suitable large systems 
response scaling problems research groups independently proposed new generation scalable systems support distributed hash table dht functionality tapestry pastry chord content addressable networks :10.1.1.105.3673:10.1.1.28.5987
systems call dhts files associated key produced instance hashing file name node system responsible storing certain range keys 
basic operation dht systems lookup key returns identity ip address node storing object key 
operation allows nodes files key supporting hash table interface 
dht functionality proved useful substrate large distributed systems number projects proposing build internet scale facilities layered dhts including distributed file systems application layer multicast event notification services chat services 
applications developed short time expect dht functionality integral part landscape 
core dht systems routing interfaces systems identical reveal put get interface reveal lookup key function directly 
discussion refers underlying functionality details api 
scott shenker shenker icsi berkeley edu ion stoica cs berkeley edu gorithm 
dht nodes form overlay network node having nodes neighbors 
key issued lookup routed overlay network node responsible key 
scalability dht algorithms tied directly efficiency routing algorithms 
proposed dht systems listed tapestry pastry chord employ different routing algorithm 
usually discussion dht routing issues context particular algorithm 
mentioned compared competitive terms effort determine best 
think trends wrong 
algorithms commonality differences algorithm embodies insights routing overlay networks 
working context single algorithm comparing algorithms competitively appropriate goal combine insights seek new insights produce better algorithms 
spirit describe issues relevant routing algorithms identify open research questions 
course list questions intended exhaustive merely illustrative 
clear description finished research agenda 
hope presenting discussion audience promote synergy research groups area help clarify underlying issues 
note interesting issues remain resolved dht systems security robustness attacks system monitoring maintenance indexing keyword searching 
issues doubtless discussed workshop 
focus routing algorithms intended imply issues secondary importance 
briefly review routing algorithms various dht systems section 
sections discuss various issues relevant routing state efficiency tradeoff resilience failures routing hotspots geography heterogeneity 
review existing algorithms section review existing routing algorithms 
take input key response route message node responsible key 
keys strings digits length 
nodes identifiers taken space keys number digits 
node maintains routing table consisting small subset nodes system 
node receives query key responsible node routes query neighbor node progress resolving query 
notion progress differs algorithm algorithm general defined terms distance identifier current node identifier queried key 
plaxton plaxton developed routing algorithm scalably dhts 
intended systems assumes relatively static node population provide efficient routing lookups 
routing algorithm works correcting single digit time node number received lookup query key matches digits routing algorithm forwards query node matches digits node 
node needs neighbors nodes match prefix identifier differ digit 
system nodes node order neighbors 
digit corrected time query forwarded routing path overlay application level hops 
algorithm additional property node node latencies distances metric known routing tables chosen minimize expected path latency latency overlay path nodes constant factor latency direct underlying network path 
tapestry tapestry uses variant plaxton algorithm 
modifications ensure design originally intended static environments adapt dynamic node population 
modifications involved describe short review 
algorithm maintains properties having neighbors routing path lengths hops 
pastry pastry nodes responsible keys closest numerically keyspace considered circle :10.1.1.28.5987
neighbors consist leaf set set closest nodes half larger half smaller 
correct necessarily efficient routing achieved leaf set 
achieve efficient routing pastry set neighbors spread key space manner don describe 
routing consists forwarding query neighboring node longest shared prefix key case ties node identifier closest numerically key 
pastry neighbors routes hops 
chord chord uses dimensional circular key space :10.1.1.105.3673
node responsible key node identifier closely follows key numerically node called key successor 
chord maintains sets neighbors 
node successor list nodes immediately follow key space 
routing correctness achieved lists 
routing efficiency achieved finger list nodes spaced exponentially key space 
routing consists forwarding node closest past key hops 
chooses keys dimensional toroidal space 
node associated region key space neighbors nodes contiguous hypercubes 
routing consists forwarding neighbor closer key 
different performance profile algorithms nodes neighbors hops 
note neighbors algorithms 
state efficiency tradeoff obvious measure efficiency routing algorithms resulting pathlength 
algorithms hops longer paths obvious measure overhead associated keeping routing tables number neighbors 
isn just measure state required routing measure state needs adjusted nodes join leave 
prevalence inexpensive memory highly transient user populations systems second issue important 
algorithms require neighbors requires neighbors 
ideally combine best classes algorithms hybrid algorithms achieve short fixed number neighbors 
question achieve better neighbors 
expect possible aspects routing get worse 
question properties described sections worse hybrid routing algorithms 
resilience failures routing results refer perfectly functioning system nodes operational 
nodes notoriously transient resilience routing failures important consideration 
different aspects resilience 
needs evaluate routing continue function efficiency nodes fail time nodes establish neighbors compensate neighboring nodes know node failed don establish new neighbor relations nodes 
call static resilience measure terms percentage reachable key locations resulting average path length 
question characterize static resilience various algorithms 
aspects algorithms lead resilience 
second investigate resilience nodes chance establish neighbors 
nodes certain special neighbors successor list leaf set re established failure neighbors re established finger set 
presence special neighbors allow prove correctness routing question remains question extent observed path lengths better pessimistic bounds provided presence special neighbors 
ask long takes various algorithms fully recover routing state cost measured example number nodes participating recovery number control messages generated recovery 
question long take average recover complete routing state 
cost doing 
related question question identify design rules lead shorter cheaper recoveries 
instance symmetry node neighbor relation symmetric important restoring state easily 
argue face node failure having routing automatically send messages correct alternate node node takes range identifier space previously held failed node leads quicker recovery 
routing hot spots hotspot query pattern certain key requested extremely node holding key may overloaded 
various caching replication schemes proposed overcome query hotspot problem effectiveness schemes may vary algorithms fan node factors manageable problem 
problematic node overloaded routing traffic 
routing hotspots harder deal local action node take redirect routing load 
proximity techniques describe help remains open problem 
question routing hotspots exist deal 
incorporating geography efficiency measure number application level hops taken path 
true efficiency measure latency path 
nodes geographically dispersed application level hops involve links merely trips lan routing algorithms ignore latencies individual hops result paths 
original vanilla versions routing algorithms take hop latencies account full versions algorithms attempt deal geographic proximity nodes 
ways coping geography 
proximity routing proximity routing routing choice just neighboring node progress key neighboring node closest sense latency 
various algorithms implement proximity routing differently adopt basic approach weighing progress identifier space cost latency geography 
simulations shown effective tool reducing average path latency 
question formally characterize effectiveness proximity routing approaches 
proximity neighbor selection variant idea proximity criterion applied choosing neighbors just choosing hop 
question show proximity neighbor selection better proximity routing 
difference significant 
mentioned earlier node pair distances measured latency known plaxton tapestry algorithm choose neighbors minimize expected overlay path latency 
extremely important property far exclusive domain plaxton tapestry algorithms 
don algorithms adopt similar approaches 
question full distance matrix optimal neighbor selection algorithms plaxton tapestry 
geographic layout algorithms node identifiers chosen randomly hash functions ip address neighbor relations established solely node identifiers 
attempt choose node identifiers geographically informed manner 
initial attempt context reported approach quite successful reducing latency paths 
little layout method specific high dimensionality key space may played important role suggests latencies internet reasonably modeled dimension geometric space raises question sys tems dimensional key set adequately mimic geographic layout nodes 
question choose identifiers onedimensional key space adequately capture geographic layout nodes 
may matter geographic layout may offer significant advantages proximity methods 
question local techniques proximity routing proximity neighbor selection achieve benefit global geographic layout 
geographically informed layout methods may interfere robustness hotspot properties mentioned previous sections 
question geographic layout impact resilience hotspots aspects performance 
extreme heterogeneity algorithms start assuming nodes capacity process messages add techniques coping heterogeneity 
heterogeneity observed current populations quite extreme differences orders magnitude bandwidth 
ask routing algorithms merely coping heterogeneity note geographic layout differs proximity methods attempt affect global layout node identifiers proximity methods merely affect local choices neighbors forwarding nodes 
authors deserve credit bringing issue het attention 
advantage 
extreme star topology queries passing single hub node routed destination extremely efficient require highly capable nub node single point failure 
highly capable nodes mini hubs improve routing 
position argue heterogeneity gnutella systems scalable 
question similarly modify current dht routing algorithms exploit heterogeneity question redesign routing algorithms exploit heterogeneity 
may sophisticated modifications needed leverage heterogeneity 
simplest technique cope heterogeneity mentioned literature clone highly capable nodes serve multi ple nodes node times powerful nodes function virtual nodes 
combined proximity routing neighbor selection cloning allow nodes route jump key space forwarding hops 
question cloning plus proximity routing neighbor selection lead significantly improved performance node capabilities extremely heterogeneous 
rowstron 
kermarrec dr scribe design large scale event notification infrastructure 
proceedings ngc nov 
chat jxta org demo html 
cabrera jones theimer herald achieving global event notification service 
proceedings th ieee workshop hot topics operating systems hotos viii germany may 
dabek kaashoek karger morris stoica wide area cooperative storage cfs 
proceedings th acm symposium operating systems principles sosp appear banff canada oct 
technique suggested algorithms easily applied 
algorithms require alteration way node identifiers chosen weren tied ip address node 
druschel rowstron past persistent anonymous storage peer peer networking environment 
proceedings th ieee workshop hot topics operating systems hotos germany may pp 

druschel rowstron pastry scalable distributed object location routing large scale peer topeer systems :10.1.1.28.5987
proceedings th ifip acm international conference distributed systems platforms middleware nov 
kubiatowicz bindel chen ski eaton geels gummadi rhea weatherspoon weimer wells zhao oceanstore architecture global scale persistent storage 
proceeedings ninth international conference architectural support programming languages operating systems asplos boston ma november pp 

ng zhang global network positioning 
proceedings acm sigcomm internet measurement workshop nov 
plaxton rajaraman richa accessing nearby copies replicated objects distributed environment 
proceedings acm spaa newport rhode island june pp 

ratnasamy francis handley karp shenker scalable content addressable network 
proc 
acm sigcomm san diego ca august pp 

ratnasamy handley karp shenker application level multicast content addressable networks 
proceedings ngc nov 
ratnasamy handley shenker topologically aware overlay construction server selection 
proceedings infocom mar 
saroiu gummadi gribble measurement study peer peer file sharing systems 
proceedings multimedia conferencing networking san jose jan 
stoica morris karger kaashoek balakrishnan chord scalable peer peer lookup service internet applications :10.1.1.105.3673
proceedings acm sigcomm conference san diego california august 
zhao kubiatowicz joseph tapestry infrastructure fault tolerant wide area location routing 
tech 
rep ucb csd university california berkeley computer science department 
zhuang zhao joseph katz kubiatowicz bayeux architecture wide area fault tolerant data dissemination 
proceedings dav port jefferson ny june 
