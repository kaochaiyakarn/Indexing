modular state space analysis coloured petri nets christensen computer science department institut informatique aarhus university cedric iie ny munkegade bldg 
alle jean dk aarhus denmark cedex france phone phone telefax telefax mail daimi aau dk mail iie cnam fr 
state space analysis developed analysis methods petri nets 
main problem state space analysis size state spaces 
ways reduce proposed handle industrial size systems 
large models consist set modules 
local properties module checked separately checking validity entire system 
want avoid construction single state space entire system 
considering transition sharing behaviour total system captured state spaces modules combined synchronisation graph 
verify lose information show full state space constructed 
show possible determine usual petri nets properties unfolding ordinary state space 
state spaces called occurrence graphs reachability graphs grow exponentially respect number independent processes system independent processes states full state space states states sufficient decide properties system 
stronger relations processes smaller state space 
judging industrial application cp nets cj local behaviour relative interaction modules occurrence graphs large 
organised follows 
section summarise definitions related modular cp nets 
turns easier define modular state spaces restrict models transition fusion 
section 
show information lost done unfolding modular state spaces ordinary state spaces 
usual properties petri nets reachability bounds home liveness checked modular state spaces unfolding ordinary state spaces 
section specify done 
practical applications tools place fusion transition fusion modular state spaces usable section discusses translate models place fusion models transition fusion changing behaviour system 
section reports larger example test modular state space approach 
section concludes comparing results obtained area 
modular cp nets defining modular state space graphs recall definition modular coloured petri nets cp 
reasons modular cp nets twofold 
want simplified model include concepts useful modelling cp nets 
include basic primitives needed discussion cp nets analysis 
secondly want discuss composition concepts sharing places sharing transitions 
modular cp nets consist sets formally related cp nets cp net called module 
sorts relations modules considered quite natural 
construct described set places sharing tokens 
transition adds respectively removes token places set added respectively removed places set 
place fusion 
second construct fuses sets transitions 
transitions set occur indivisible action sharing values assigned common binding 
notations jen cp nets 
definition cp definition modular cp net triple pf tf satisfying requirements finite set modules module ss cp net 
sets net elements pairwise disjoint 
ii pf finite set place fusion sets members place fusion set identical colour sets equivalent initialisation expressions pf 
iii tf finite set transition fusion sets 
modular cp net contains finite set modules cp net 
modules disjoint sets places transitions arcs 
general denote module restricted module 
recall notations components cp net 
set colour sets 
set places set transitions 
set arcs 
function associates arc pair source node destination node 
function associates colour set place 
function associates guard transition 
function determines arc expressions permit specify input output tokens transition 
function gives initialisation expressions places order determine initial marking coloured net 
ii place fusion set set places fused 
denotes set subsets places 
demand elements place fusion set colour set equivalent initial markings 
external places epp denote set places members place fusion set internal places ip ep denote non fused places 
noted contrast demand place fusion sets disjoint 
iii transition fusion set set transitions fused 
external transitions ett denote set transitions members transition fusion set ttf internal transitions denote non fused transitions 
external transitions shared modules 
noted contrast demand transition fusion sets disjoint 
def 
introduce place groups transition groups 
notion place groups corresponds notion place instance groups hierarchical cp nets jen def 

definition cp definition place group pg equivalence class smallest equivalence relation containing pairs pp pf 
transition group tg consists single non fused transition members transition fusion set 
set place transition groups denoted pg tg 
place groups transition groups defined differently 
place member place group transition member transition groups 
place groups form partition set places 
means place member place group shall denoted 
note place groups transition groups element 
names prime denote place groups transition groups 
def 
ii know places place group colour set equivalent initial markings allows talk ambiguous 
define pg 
define set variables associated transition group binding transition group guard transition group 
definition cp definition binding transition group function defined variables transition group var tt var type 
ii tt 
denote conjunction guards transition group set bindings 
binding assign value variable variable name refer value transitions transition group 
mechanism allows communication transitions transition group 
extend arc function handle place groups transition groups aa xx yy 
expression function extended arcs place groups transition groups 
summation defined involved expressions type aa 
define token elements bindings elements markings steps modular cp nets 
done similar way hierarchical cp nets 
definition cp definition token element pair pg cc binding element pair tg bb 
set token elements denoted te set binding elements denoted 
marking multi set te step non empty finite multi set 
initial marking marking obtained evaluating initialisation expressions te 
set markings steps denoted respectively 
enabling rule modular cp net expressed 
inequality compare value marking inequality multi sets 
definition cp definition step enabled marking iff property satisfied pg 
step enabled marking may occur changing marking marking defined pg 
say directly reachable occurrence step denote function returns source node arc talk elements entire modular cp net modules set notation indexes ss modular cp net unfolded equivalent cp net definition cp definition modular cp net pf tf 
define equivalent cp net cpn 
ii pg 
iii tg 
iv atg 

vi 
vii 
viii 
ix 
modular cp net equivalent cp net behaviourally equivalent theorem cp theorem modular cp net cpn equivalent cp net 
properties 
ii 
iii cpn definitions section sufficient formal base defining modular state spaces 
modular state spaces transitions sharing section concentrate cp nets composed transition fusion 
theoretically easy generate state space individual modules compose state space entire system see section 
practical harder module infinite state space full state space finite modules composed fusion grey transitions avoid handling infinite state spaces obtain efficient construction state spaces modules knowing composed 
reachable parts state space constructed 
fig 
modules sharing transition construction modular state space similar standard state space construction state spaces transitions local modules performed parallel construction modular state space requires keep track occurrence transition groups synchronise modules information 
method valid nets cp nets replace transitions binding elements nets cp nets examples 
section examples illustrating method formalise 
fact synchronisation graphs bit simplified sense compact nodes explained formalisation 
example basic explanation method consider simple net 
module left second right 
share transition fusion set containing grey transitions named fig 
modules sharing transition 
state space state space state space graphs second module respectively synchronisation graph indicates synchronise common transitions numbers referring markings graphs 
figures represent internal transitions arrows hollow heads external transitions pictured arrows solid heads 
construct graphs method start initial markings modules number 
start marking enabled transitions local construct new markings arcs 
marking enabled transition local leads marking construct arc 
marking enabled transition shared 
try calculate new marking transition enabled module avoid constructing unnecessary sub graph 
just record enabled module drawing arc labelled leading moment 
markings examined wait finished order synchronise shared transition marking enabled draw arc labelled leading 
local transition enabled construct marking arc 
marking enabled leads marking construct arc 
markings examined part finished 
previous partial graphs construction performed parallel independent 
synchronise transitions enabled marking initial marking equivalent flat cp net occur marking 
occurs new marking allows occur state enabled 
construct successor marking marking marking marking 
continue constructions 
nodes examined graphs 
synchronisation graph node labels indicate states 
arc label says shared transition enabled state composed number number nodes obtained occurrence local transitions previous state synchronisation graph 
arc leads new node 
fig 
state spaces synchronisation graph 
may happen arcs labelled shared transitions lead 
show branches constructed straightforward algorithm occur context full model 
suppress 
second example advanced explanation method node graph module examined may shared transitions left synchronised corresponding shared transition module recorded module graph path leads back marking shared transition enabled 
case resource allocation system 
resource allocation example jen set processes share common pool resources 
different kinds processes called processes processes different kinds resources resources resources resources 
process cyclic individual parts cycle process needs exclusive access varying amount resources 
definition colours 
variable type processes different states processes different states 
initial state processes processes plus resource resources resources 
modular cp net fig 

decomposed modules sharing transitions 
modules represent cycles processes processes represents resources 
fig 
modules resource allocation system construct state spaces modules synchronise explained previous section 
nodes synchronisation graph contain number nodes state spaces processes processes resources 
fig 
graph processes module compare size state spaces constructed size complete state space module 
processes module full state space nodes reachable 
processes module full state space nodes reachable 
full state space resource module infinite covering graph contains nodes nodes reachable 
fig 
graph processes module fig 
graph resources module fig 
synchronisation graph local analysis state spaces modules performed examine boundedness 
looking processes graph see processes active time 
note examples nodes full state space constructed state spaces modules smaller obtained straightforward method 
resource allocation system example extreme sense transitions shared local occurrences performed gain automatic level encoding states 
modular state spaces transition fusion formal description state space modular cp net transition fusion consistent definition nets defined modular way 
explanation just definitions read parallel 
give definitions notations formalise modular state spaces 
definition pf tf modular cp net 
sit 
ii 
iii rtc 
markings full system denotes set states full system reachable internal transitions modules 
cross product reachable states modules 
checking state require generate sufficient check locally reachable modules 
ii markings related relation iff common internally reachable markings 
iii define set related markings transitive closure relation note marking unique 
definitions illustrated 
triangle represents 
fig 
illustration def 
definition give algorithm order define modular state spaces 
definition pf tf modular cp net pf 
modular state space mog sg og ss tf ii sg sg sg sg synchronisation graph constructed follows ii sg 
ii ii vv sg bb sg 
ii iii sg sg 
iii ss og state space graph module partitioned sets ia ea ia set arcs labelled internal transitions 
ea set arcs labelled fused external transitions 
og constructed follows iii 
iii ii tit bb ia 
sg ea 
iii iii 
place fusion 
ii initial marking represented node synchronisation graph 
ii ii consider node synchronisation graph marking represented node 
external transition enabled binding leading new marking arc synchronisation graph 
ii iii arc starts node ends node 
iii initial marking restricted module node state space graph 
iii ii consider node state space graph module internal transition enabled binding leading marking node og arc og external transition enabled marking exists arc synchronisation graph node og arc og 
iii iii arc starts node ends node 
modular state space unfolded flat state space 
explanation just definition read parallel 
definition modular cp net mog sg og ss tf modular state space 
equivalent state space mog og defined follows sg 
ii tt bb mv ss tt ss 
iii 
set nodes equivalent state space set markings represented node sg 
ii transition enabled modules appeared single module internal transition corresponding arc equivalent state space 
marking obtained changed modules concerned specified state space 
iii function gives source destination arc theorem states equivalent flat state space mog state space equivalent non hierarchical cp net 
theorem modular cp net mog modular state space cpn equivalent non hierarchical cp net 
equivalent state space mog state space cpn 
og cpn 
proof follows definitions theorem definitions enabling occurrence rules non hierarchical cp net 
defined case transitions fusion modular state space consisting synchronisation graph state spaces modules transition fusion sets 
modular state spaces flattened lead normal state space 
shown flat state space modular cp net state space equivalent non hierarchical cp net 
wanted obtain structure small possible allows check net properties constructing equivalent flat state space 
show section properties checked directly modular state space 
concerns compactness modular state space easily find best worst cases 
best case obtain fused transition state spaces modules full state spaces modules synchronisation graph contains node arc equivalent state space cross product modules larger 
worst case transitions shared 
synchronisation graph equivalent state space size 
cases extreme ones little interest modelling real systems 
proof rules modular state spaces section show usual petri nets properties decided modular state spaces 
rest section assume modular cp net mog modular state space 
dpf denote set directed finite paths node node proposition indicate corresponding proposition cp nets jen 
proposition jen proposition reachability properties proof rules valid vv sg 
ii vv sg 
ii dpf sg 
explanation ii set reachable markings set markings represented node sg 
ii functions return source destination arc markings inscribed arc expression 
sequence projection occurrence sequence set external transitions 
note arcs starting node sg proof ii follow definition 
ii distinguish cases case assume 
definition sit 

case assume dpf sg 
deduce 

required 
reachable occurrences local transitions case prove case 
sequence written 
definition straightforward see 
definition arc starts node arc ends node 
proposition jen proposition boundedness properties proof rules valid xte ss pp functions functions arbitrary set linear ordering relation og 
ii upperbound ss iii max vv sg 
ii og 
iii og 
iv og 
iv ii upperbound ss iv iii max vv sg 
explanation iv define module 
ii iv ii sum modules upper bound best 
iii iv iii best obtained looking markings represented element sg proof follows definition jen prop 

proposition jen proposition home properties proof rules valid ss scc tx scc sg tn 
ii ss scc scc sg 
iii mhm scc scc sg 
iv hm scc scc sg 
hm scc scc sg 
explanation home space module terminal strongly connected components included components restricted module terminal strongly connected component synchronisation graph components representative node 
ii home space module number terminal strongly connected components smaller size restricted module number terminal strongly connected components synchronisation graph smaller number representative nodes 
iii home marking component module terminal strongly connected component og component representative synchronisation graph strongly connected component sg 
iv home marking state spaces modules synchronisation graph terminal strongly connected component 
initial marking home marking strongly connected component state spaces modules synchronisation graph 
proof assume home space 
st 
module home space module jen prop 
conclude ss scc tx projection set external transitions leads node corresponding sg corresponding set 
scc sg tn 
ii proof jen prop 
ii jen prop 

iii proof jen prop 
iii 
iv follow iii 
proposition jen proposition liveness properties proof rules valid ss tt dead tt ss aa bb 
ii dead ss aa 
iii live ss st 
iv live ss st tt tbe 
strictly live ss st tt bb 
explanation ii marking dead iff internal transition enabled external transition enabled 
set binding elements dead marking iff elements enabled binding element distinguish possibilities transition local exits module enabled shared exist module containing transition member group enabled 
iii iv module 
transition set binding element live transition appears strongly connected components graph module proof marking dead iff transitions enabled marking 
distinguish sorts transitions 
internal transitions belong module constitute transition group 
transition enabled equivalent arc labelled transition group og second shared transition enabled iff member group enabled module 
get property 
iii proof slight modification proof 
iv proof similar just 
assume transition live 
module 
belong looked module consider case 
terminal strongly connected component module marking live terminal exists occurrence sequence containing starting 
vi proof slight modification proof 
section shown standard petri nets properties defined jen determined modular state spaces 
modular state spaces places sharing composition state space graphs complex sharing places transitions 
case ensured modules infinite state space graph modular cp net infinite state space graph 
impossible tell state space graph modular cp net modules finite 
due fact module provide tokens place fusion set allow new bindings module enabled 
second module provide tokens 
seen example grey place initially empty shared fig 
modules finite graphs net infinite graph impossible deduce modular cp net state space graph modules 
practical point view important able handle systems place fusion kinds cp nets 
define transformation modular cp net place fusion modular transition fusion 
informally done collecting place fusion new module splitting input output transitions place fusion set get transition fusion set input output transition fusion set 
shown system translated behaviourally equivalent modular net transition fusion 
fig 
modular cp net transition fusion formal definition translation proof behaviour preserved included 
contain number technical details little importance results 
larger example test ideas modular state spaces larger example conducted experiment 
design cpn occurrence graph analyzer generated ordinary state space system consisting different modules communicating single shared transition 
size ordinary state space nodes arcs 
took seconds generate graph 
implement algorithm described possible simulate algorithm features ordinary tool 
possible measure duration generation modular state space 
generating local state spaces modules took seconds 
corresponds observation time generate state space proportional number arcs graphs 
generate synchronisation graph structure state spaces modules calculated size synchronisation graph 
state space module contained nodes arcs module contained nodes arcs 
synchronisation graph contained node arcs 
total nodes arcs modular state space means modular graph representation needs nodes arcs particular example 
modular construction occurrence graph allows gain time space extreme cases transitions shared just case modules small graph synchronisation process heavy takes time second case synchronisations modules large graph takes space 
efficiency method depends lot modular structure chosen 
think industrial models correspond extreme cases method efficient time space 
way generating state spaces systems exploiting modular structure 
shown construct systems place fusion shown translation modular cp nets place fusion modular cp nets transition fusion 
results definition theorem construct ordinary state space modular state space method fast way generating ordinary state space 
degenerated cases faster local behaviour developed global state allowing particular behaviour 
possible check properties modular state space directly unfolding ordinary state space 
val valmari describes state space generated generating reducing combining state spaces modules resulting state space full system generated 
important differences approach preserve information generate full graph specified properties checked directly modular state space 
nm constructs complete state spaces modules 
pointed want possible module infinite state space graph complete system finite 
construct reachable markings 
nm presents results reachability deadlock analyses nets 
results necessary sufficient conditions reachability deadlock boundedness analyses cp nets 
give necessary conditions home liveness properties 
approaches reduce size state spaces called symmetric occurrence graphs see jen stubborn sets introduced valmari val val 
approach shares important property symmetric occurrence graphs information lost 
fact attractive combine modular state spaces symmetric occurrence graphs exploit totally different properties systems symmetry states actions vs locality actions reduction sum reductions methods 
clear combination modular state spaces stubborn sets 
methods closely related try minimise representation interleaving independent actions 
kurt jensen jens bk jrgensen kjeld mortensen anonymous referees comments helped improve 
cj christensen modelling simulation network management system hierarchical coloured petri nets 
erik ed proceedings european simulation multiconference 
isbn pp 

extended version available daimi pb issn april 
cp christensen modular analysis coloured petri nets 
jensen ed application theory petri nets 
lecture notes computer science vol 
springer verlag 
available daimi pb issn april 
huber jensen shapiro hierarchies coloured petri nets 
rozenberg ed advances petri nets 
lecture notes computer science vol 

springer verlag pp 

jr pp 

jen jensen coloured petri nets 
basic concepts analysis methods practical 
volume basic concepts 
eatcs monographs theoretical computer science springer verlag 
jen jensen coloured petri nets 
basic concepts analysis methods practical 
volume analysis methods 
eatcs monographs theoretical computer science springer verlag 
jr jensen rozenberg eds high level petri nets theory application 
springer verlag 
isbn 
nm murata hierarchical reachability graph bounded petri nets concurrent software analysis 
ieee transactions software engineering pp 
vol 
may 
design cpn occurrence graph analyzer 
version meta software 
daimi version march unpublished 
val valmari compositional state space generation 
proceedings th international conference application theory petri nets paris france june pp 

val valmari stubborn sets reduced state space generation 
rozenberg 
ed advances petri nets 
lecture notes computer science vol 
springer verlag pp 

val valmari stubborn sets coloured petri nets 
proceedings th international conference application theory petri nets denmark june pp 

