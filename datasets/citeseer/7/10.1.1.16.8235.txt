version stamps decentralized version vectors paulo sergio almeida carlos victor departamento de informatica universidade braga portugal mail cbm di pt version vectors variants play central role update tracking optimistic distributed systems 
existing mechanisms variable number participants mapping identities integers rely form global configuration distributed naming protocol assign unique identifiers participant 
approaches incompatible replica creation arbitrary partitions typical mode operation mobile poorly connected environments 
update tracking mechanism overcomes limitation departs traditional mapping avoids integer counters providing functionality version vectors concerns version tracking 
mobile computing evolved previous decade common mode operation significant share distributed systems 
mobile context helped promote optimistic strategies need version vectors update tracking 
mobile context brings surface limitations version vectors particular concerning identification participating entities computation potentially dynamic environments 
concept version vector connected twin concept vector clock rooted causality distributed systems 
concepts share equivalent structure consists mapping process replica identifiers integer counters 
practice version vectors vector clocks represented fixed sequence integer counters kg reasonable choice long number entities known advance 
shows execution replicated system fixed size version vectors track updates replicas system 
direction evolution represented arrows dot annotated arrows depicting updates element system 
structurally similar vector clocks version vectors play different roles distributed systems 
vector clocks known provide view distributed version vectors track updates replicas 
computation different events identified distinct vector clock values role version vectors detect mutual inconsistency replicas determine version causally related replicas 
replicas seen updates typically synchronization procedure share version vector value see 
known problem version vectors vector clocks unbounded size 
fact twice unbounded 
integer counter grow indefinitely number identified entities grow unbounded 
known problem address resides identification requirement version vectors vector clocks 
participating entity assigned unique identifier order obtain proper mapping integer counters 
connected environment simple request unique identifier server run distributed protocol generation unique identifier 
protocols possible current mobile setting subject partitioned operation 
significant technology research trends pointing wireless ad hoc networking setups entities autonomous operate local clusters proximity basis 
environments partitioned operation common mode operation answer identification problem sought 
circumstances afford probabilistically unique identifiers algorithms may resort form random ids order cope replica creation partitioned environments 
contrary approaches rely probabilistic uniqueness assumes guaranteed unique identifiers provided 
fixed vs variable number replicas classic replication systems operate defined number replicas 
case system depicted 
general case dynamic replication system introduces need accommodate replica creation retirement 
approach represent replica creation introducing new horizontal lines new replica identifiers system representation likewise lines replica retirement 
approach follow represents functionality replica creation logical time events share clock value representing synchronization event instances 
usually asynchronous message passing assumed occur 
synchronization retirement simple constructs replica forking joining replicas 
synchronization represented joining replicas forking resulting 
example 
time possible evolutions data elements showing frontiers coexisting elements denoted single double dotted lines 
encoding fixed number replicas left fork join dynamics right 
dynamic replication system general fixed encode 
give intuition encoding representing fork join dynamics traditional version vector setting replicas names elements equivalent positions omitting name extra elements 
example easy see equivalent mapping runs variable number replicas 
frontier elements vs elements certain circumstances may want relate elements occurring distributed evolution elements distributed computation subject ordering 
instance computation depicted may want inquire relate determine past querying necessary debugging recorded execution replicated system 
circumstances update tracking may need relate coexisting elements elements reachable configuration 
case wouldn sense query relate elements coexist arbitrary system evolution 
sense reachable configuration perceived forming frontier 
elements connected direct path coexist consequently belong frontier contemporaneous elements 
concentrate element observe depicted evolution possible frontiers belong 
represented single dotted line occur gave place bifurcation second frontier double dotted occurs bifurcation prior transformation fact possible frontiers occur particular system run 
case ordering system targets frontier elements information relate events occur possible system frontier 
intuitive accept ordering frontier elements sufficient version management coexisting elements subject queries relation properties 
believe observation important impact design version management techniques 
distinction just clear traditional version vectors overly expressive capable ordering albeit application context frontier ordering sufficient 
conjecture compressed substitute version vectors conceivable traditional settings fixed numbers entities substitute contradict charron bost minimality results stated context vector clocks easily inferable version vectors 
purpose article 
easy conclude classical fixed size version vectors associated frontiers constant size vector dimension dynamic forms version vectors act variable frontiers 
goal develop decentralized autonomous form version vectors named version stamps allows frontier ordering autonomous creation identifiers available replica 
considering frontier ordering seek compact solution identification problem act alternative version vectors dynamic settings 
structure rest structured follows 
section introduces model causal histories events global view events 
sections develop concept version stamps introduce set invariants structure 
section establishes functional equivalence version stamps causal histories section refines version stamp model keeping equivalence 
section concludes article 
causal histories dynamic settings detection version dependencies data elements constructed notion causal history update events 
construction history assume global view system order obtain description intuitively correct 
version stamping system rely global view constructed proved represent dependency order elements derived causal history 
model causal histories keep mapping element identities sets update events 
interested comparing frontier elements keep mapping set elements define frontier elements may existed past included 
map seen representing current configuration 
operations update fork join described transformations configurations 
traditional notation functions fa 
fxg 
fy zg 
fx represents function maps elements sets events events causal history elements 
notation 
ff 

yg represent function maps maps elements domain function notation expresses belong domain useful perform pattern matching functions note fa 

yg imply dom 
similar notation pattern matching sets fa bg denotes set fa bg definition initial configuration captured fa 
fgg represents system data element 
reachable configuration transformations occur fc 
ag update fc 
fc 
ag fc 
ag fork fc 

ag fc 

bg join fc 
bg fcg fc dom mapping current elements corresponding event sets store update events occurred causal history element events discarded 
global view update event global unique identity computed looking element updated 
querying relationship elements known updates goal distinguish possible situations equivalence set events obsolescence update events dominating element mutual inconsistency different update event element 
configuration fc 

equivalent iff obsolete relative iff inconsistent iff comparison elements frontier deduced causal histories defined 
fact situations represented pre order elements frontier 
configuration elements domain simplicity model possible presence global view set events system 
version stamps goal devise stamping mechanism infer order frontier elements induced comparing sets causal histories described 
mechanism depend form global view autonomously rely local information kept data elements operated 
efficient space highly desirable order support practical 
version stamps 
informal description version stamps 
presents example version stamp corresponding element shown 
version stamp components represent update id 
id component acts element identity distinguishes element coexisting elements frontier 
update component stores information updates known element 
avoids counters consists single id value collects id ancestor elements updates performed 
component sum binary strings 
version stamps left show frontier element updates need expression stamps 
fact update operation simply copies id update means update subsequent ones affect version stamp 
example goal design version stamps discard information irrelevant comparison coexisting elements frontier 
fork operation id resulting stamps recursively constructed appending right ancestor id fork modify update component introduce update event ones tracked mechanism 
join elements occurs resulting id built merging ancestor id 
update component built likewise merging ancestor update components reflects combined knowledge past updates 
important property mechanism possible simplification stamps joins 
intuition join decreases number elements frontier leading smaller identities needed distinguish 
fork followed join resulting elements result element original id intermediate elements id differ appended merged collapsed original id 
simplification id induces simplification update 
analogies simplification boolean algebra collapsing neighbour blocks buddy memory allocation system collecting weights huang termination detection algorithm 
likewise id denote non intersecting parts complexity adjusts dynamically reflecting granularity frontier coexisting elements 
synopsis formal presentation locality goal mechanism seen met looking definition operations 
prove version stamps infer order induced causal histories split presentation version stamps proof correctness steps 
start presenting non reducing version mechanism simplification joins occur prove auxiliary invariants characterize properties version stamps 
show causal histories non reducing version mechanism induce pre order elements frontier 
prove stronger result implies required equivalence 
rewriting rule version stamps represents simplification join 
show preserves previously defined invariants proved result relating causal histories version stamps 
version stamps non reducing version stamp pair respectively update id components share structure members set names 
characterize partially ordered set finite binary strings sequences ordered prefix example denote non comparability 
null string denoted constitutes bottom strings definition set finite antichains ordered example valid element 
order defined classic order lower powerdomains sight looks presence pre order 
defined way partial order merely pre order 
specifically proposition partial order join join fs rg join names set maximal elements union 
proof 
isomorphic sets strings ordered inclusion complete lattice 
informally antichains seen represent maximal elements sets order defined corresponds inclusion sets join corresponds union sets 
example 
proceed definition model version stamps include simplification joins 
presentation purposes describe operations version stamps configurations map elements version stamps 
facilitates relating causal histories version stamps 
important emphasize imply operations require global view operations manipulate version stamps operated elements require global view contrary happens causal histories update operation globally unique update events 
order derived stamps local stamp information 
definition initial configuration captured fa 
represents system data element 
reachable configuration transformations occur fv 
update fv 
fv 
fork fv 

nx ng concatenation digit lifted sets strings fv 

join fv 
update component simply copies id update fork maintains update component appends string id component join operation performs joins names component 
easy see definitions components resulting stamps formed names antichains strings 
define pre order elements configuration obtained version stamps correspondence causal histories 
configuration elements domain fst fst proving proposition relates causal histories version stamps establish auxiliary properties configurations version stamps 
invariant reachable configuration proof 
see appendix 
invariant states version stamp update dominated id property ensure reducible version stamps models obsolete information update replicas converge id simplifications possible 
invariant reachable configuration fx 

proof 
see appendix 
second invariant brings attention structural properties id configuration 
frontier elements string id non comparable strings id consequently id frontier non comparable 
invariant reachable configuration fx 

frg frg proof 
see appendix 
invariant implies weaker fx 

pertinence invariant illustrated example 
suppose non comparable elements version stamps 
update occurs instance update sure update remains non comparable happen recall causal histories ensure fresh event names updates 
update produces version stamp property means order occur occur place 
correspondence causal histories version stamps show version stamps defined derive pre order elements inclusion causal histories 
described comparing elements configuration causal histories done configuration version stamps corresponds version stamps derived system execution order elements obtained fst fst want prove induce pre order means want show fst fst seen direct proof induction equivalence fails 
failure interesting result briefly explained insight knowing elements compare causal history inclusion configuration know compare configuration obtained performing operation 
words interested knowing exact update events causal histories need know just compare comparison interested 
technically need prove stronger equivalence stronger induction hypothesis proof 
show stronger proposition 
fst snd projections second components pair 
notation direct image ff ag 
proposition distributed execution causal histories version stamps true dom dom fst fst dom dom 
proof 
see appendix 
previous proposition result want show follows stated corollary distributed execution causal histories version stamps true dom dom fst fst dom 
proof 
substitute fyg previous proposition 
simplifying version stamps joins describe rewriting rule applied version stamp perform simplifications informally introduced 
simplifications reflect discussed dynamic adaptation id shape frontier 
simplification essential obtaining realistic implementation minimizing space requirements version stamps 
simplification version stamp results join attempted repeatedly applying rewriting rule longer possible apply fi fi sg fs fsg 
property rewriting follows trivially order names order names founded infinite descending chains names finite number rewritings applied stamp 
easy see rewriting confluent 
stamp rewritten unique normal form 
omit proof confluence intuitive concentrate correctness transformation 
need show applying rewriting fi fi sg version stamp configuration results configuration rewritten version stamp consists wellformed names antichains invariants maintained relation dom dom expressed fst fst 
wellformedness fi sg 
regarding fi sg fi antichain means fi sg antichain 
regarding belong fi antichain means fs fsg antichain 
invariant local invariant stamp suffices show fi sg 
belong fi sg fi 
trivial fsg fi sg reason 
invariant invariant involves pairs stamps suffices consider cases rewritten stamp involved 
stamp string due invariant strings fi sg 
invariant invariant involves expressions form frg frg stamps previous invariant suffices consider cases rewritten stamp involved fi sg 
suppose frg fi sg frg fi configuration frg belong frg frg fi sg frg fsg 
fi sg 
suppose frg belong frg case fsg fsg impossible frg preservation prove applying rewriting fi fi sg version stamp configuration results configuration 
show suppose fst fst 
consider cases rewriting 
holds trivially fst fst 
rewriting case trivial covered 
fyg jz jz fst fst holds trivially 
case fs fsg due belong fst inequality holds replacing show suppose fst fst 
consider cases rewriting case trivial fst fst fst fst 
rewriting 
case trivial case string fst greater equal due exist string snd impossible due string snd comparable means case fst fst 
version vectors vector clocks rely availability identifiers support ordering technique 
argued operation partitioned operation mobility prevents traditional techniques unique identifier generation operation modes common call appropriate solutions 
additionally data management operation modes optimistic techniques requires robust dependency tracking solutions 
article addressed identification problem context data dependency tracking 
order achieve goal distinguish ordering elements frontier ordering elements system run contributing clarification role version vectors 
distinction presence identification problem raises set research lines developed article 
lines concern design decentralized vector clocks exploring autonomous identifiers ordering search compact possibly bound form version vectors settings fixed identifiers frontier ordering 
developed model causal histories adapted dynamic settings exhibiting autonomous interaction 
version stamping mechanism relies information locally available overcoming need global view 
established proved correspondence states relation elements frontier inclusion causal histories computed version stamps 
version stamps having solved autonomous identification problem addressing frontier ordering provide adequate dependency tracking mechanism operates scenarios functionality available 
version stamp mechanism implemented project 
project application version stamps file replication providing set tools dependency tracking single file copies 
project provides stl library implementing version stamps 
authors jose almeida jorge sousa pinto maria joao nuno lopes comments 
paulo sergio almeida carlos victor 
dependency tracking file copies 
paulo editor ninth acm sigops european workshop pages 
diku university copenhagen 
carlos francisco moura 
causality autonomous mobile systems 
third european research seminar advances distributed systems 
broadcast epfl lse april 
maria henry chang norman cohen dennis shea 
data synchronization mobile network computer specification 
wmr ecoop workshop reader 
springer verlag 
charron bost 
concerning size logical clocks distributed systems 
information processing letters 
colin 
timestamps message passing systems preserve partial ordering 
th australian computer science conference pages 
sourceforge net projects 
jaap naghshineh jon inouye olaf warren allen 
bluetooth vision goals architecture 
acm mobile computing communications review october 
shing huang 
detecting termination distributed computations external agents 
proceedings th international conference distributed computing systems icdcs pages washington dc 
ieee computer society 
kenneth knowlton 
fast storage allocator 
communications acm 
leslie lamport 
time clocks ordering events distributed system 
communications acm july 
mattern 
virtual time global clocks distributed systems 
workshop parallel distributed algorithms pages 
robert morris john frans kaashoek li douglas 
scalable ad hoc wireless network system 
paulo editor ninth acm sigops european workshop pages 
diku university copenhagen 
parker gerald popek gerard allen stoughton bruce walker evelyn walton johanna chow david edwards stephen charles kline 
detection mutual inconsistency distributed systems 
transactions software engineering 
karin petersen mike spreitzer douglas terry marvin theimer alan demers 
flexible update propagation weakly consistent replication 
sixteen acm symposium operating systems principles saint malo france october 
david ratner peter reiher gerald popek 
dynamic version vector maintenance 
technical report csd department computer science university california los angeles 
schwarz mattern 
detecting causal relationships distributed computations search holy grail 
distributed computing 
smyth 
power domains 
journal computer system sciences 
fj torres rojas ahamad 
plausible clocks constant size logical clocks distributed systems 
distributed computing 
proof invariants main proposition invariant 
reachable configuration 
proof 
proof induction 
base case fa 
invariant holds 
inductive step suppose invariant holds environment check validity results applying operations update fork join 
update 
definition operation new element 
invariant holds 
fork 
definition induction hypothesis 

verify holds checking definition name concatenation hypothesis applies 
join 
definition induction hypothesis infer proposition directly deduced hypothesis due properties join semi lattice 
invariant 
reachable configuration fx 

proof 
proof induction structure 
base case distinct invariant holds trivially 
update 
operation knowing holds hold id invariant true hypothesis preserved 
fork 
definition induction hypothesis exhibit 
iterated concatenation fork definition infer induction hypothesis proves identical reasoning 
considering results iterated concatenation 
join 
definition induction hypothesis exhibit consequently 
fact reach invariant 
reachable configuration fx 

frg frg proof 
proof induction operation invariant validity inferred 
proof notation form signifies invariant frg frg checked verifying frg frg frg holds 
base case element invariant holds trivially 
update 

suppose stamps occur invariant holds induction hypothesis 
consider cases case fr 
case frg held leading fr frg frg held induction hypothesis 
fr holds fr inferred frg fork 

suppose stamps identical occurred invariant kept 
consider cases cases obtained swapping case identical frg consequently fr frg frg induction hypothesis 
fr holds fr inferred frg 
case identical frg consequently fr iterated concatenation revert relation frg frg induction hypothesis 
fr hold frg fr holds frg 
case known fr holds fr holds trivially join 

suppose stamps stamps matches identical occurred invariant kept 
consider cases tu case fr hold fvg fvg fug induction hypothesis fr fr hold 
case fr hold frg frg frg frg frg frg hold induction hypothesis 
case fr inferred frg similarly fr inferred hypothesis 
proposition distributed execution causal histories version stamps true dom dom fst fst dom dom 
proof 
proof induction 
base case fa fa 
domains equal fag equivalence holds trivially 
inductive step domain equality trivial definition operation transforms domain way compare definitions regarding update operation 
inductive step family equivalences consists assuming equivalences fst fst hold environments hold environments result applying operations update fork join fst fst hold 
operation prove equivalence showing implication directions 
update 
definition operation feg 
prove 
assume 
consider cases case contradict assumption 
js cjs induction hypothesis fst fst 
js js follows trivially fst fst 
case trivial 
case 
fbg jt feg assumption feg 
induction hypothesis fst fst fst 
invariant jt jt obtain fst fst 
prove 
assume fst fst 
consider cases case invariant contradict induction hypothesis 
js cjs js js induction hypothesis follows trivially 
case trivial 
considering fbg 
fst fst fst fst jt jt follows fst fst fst fst fsg fsg case invariant hold 
induction hypothesis feg follows 
fork 
case trivial definitions causal histories update components preserved operation 
join 
definition operation prove 
assume 
consider cases case js cjs js js 
induction hypothesis fst fst follows trivially 

induction hypothesis fst fst fst fst 
fst fst fst fst 
case trivial 
case 
jt assumption obtain induction hypothesis fst fst fst fst 
jt jt fst fst fst follows fst fst 
prove 
assume fst fst 
consider cases case js js js cjs 
induction hypothesis follows trivially 
fst fst fst fst 
induction hypothesis 

case trivial 
case 
fst fst fst fst jt jt follows fst fst fst fst induction hypothesis 

