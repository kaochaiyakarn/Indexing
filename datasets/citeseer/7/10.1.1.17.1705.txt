quantifying schema evolution dag sjoberg department computing science university glasgow gardens glasgow qq scotland sjoberg dcs glasgow ac uk achieving correct changes dominant activity application software industry 
modification database schemata kind change may severe consequences database applications 
presents method measuring modifications database schemata consequences thesaurus tool 
measurements evolution large scale database application currently running hospitals uk interpreted 
kind measurements provided depth study useful input design change management tools 
keywords schema evolution change statistics change management tools 
published information software technology vol 
pp 
january challenging problems building maintaining large long lived application systems cope changes inevitably imposed systems time 
large application systems centred database 
description data represented database called database schema 
particular kind change may serious consequences rest application systems change schemata 
order acquire deeper understanding nature schema evolution measurements change actual system development operational collected 
measuring tool thesaurus built monitor evolution large industrial database application health management system hms 
system centred relational database user interfaces built top window system 
hms system observed period months 
reports schema changed furthermore shows small change schema may major consequences rest application code 
measurements confirm need tools techniques managing consequences changes database schemata 
measurements identify precisely requirements tools techniques 
purpose research direction concerning problem quantifying schema evolution 
study reported wider applications just traditional database systems 
data descriptions consequently dependent data including programs persistent application systems inevitably changed order reflect changing user needs 
schema evolution traditional databases corresponds class evolution object oriented database systems type evolution applications developed strongly typed persistent programming languages napier morrison higher level changes application models described framework conceptual data models entity relationship model chen 
remainder contains detailed description concept schema evolution impact rest application 
section presents overview hms application describes thesaurus tool designed measure schema evolution consequences 
measurements interpreted section 
due changing development environments necessary change thesaurus tool period investigation examples kind change discussed section 
section summarises study sketches area 
schema evolution known attempting achieve correct changes dominant activity application software industry zelkowitz putnam parikh chikofsky cross 
schema changes constitute important category changes 
sources changes example people know advance able express desired functionality large scale application system 
experience system enable needs requirements properly formulated 
ii application world continually changing 
viable application system enhanced accommodate changes 
iii scale task requires incremental design construction 
results requirements change installed subsystems 
consequently continuous modifications schemata necessary ensure system reflects requirements accurately possible times 
relational database management systems rdbms currently widespread industry commerce 
hms system example application system utilising technology 
rdbmss relational data model codd database built rdbms called relational database consists relations called tables fields called attributes columns 
list logical changes relational schema add new relation 
rename relation 
delete relation 
add new field relation 
rename field 
change type field 
delete field relation 
consequences schema evolution concerning change principles pursued atkinson change accompanied minimum consequential loss information minimal disruption components limit propagation unnecessary change 
consequences change dealt ensure propagation necessary change 
way schema modifications dealt today ad hoc necessary conversions may expensive due factors requirement shutdown system programmer effort machine resources effects schema changes divided categories effects parts schema physical re issue rdbmss absorb changes obviating need change applications 
effects extensional data effects application programs 
literature schema evolution banerjee stein skarra zdonik kim chou joseph lerner habermann focuses second category areas subject 
little reported research third category stark contrast significance application programmers 
intentions illustrate extent change effects presenting measurements large real world application system 
typically application programs utilise type changed schema 
programs may screen definitions query definitions procedures difficult imagine incompatibilities schema type corresponding type assumed application programs may serious consequences 
example field added application program screen changed collect new data program eventually 
concentrated oodb area consequences changing type class may lead significant changes schema relational environment consequences extensional data application code may serious relational environment 
thesaurus tool measuring schema evolution measurements described collected thesaurus tool sjoberg 
section presents overview hms system tool built basic features tool 
hms system hms system running high resolution colour unix tm workstations consists display language hippo programs clifton england query dictionary database including associated schema 
applications written graph screens user works icons fields screens navigates screens graph buttons 
screens user interface programmed display language 
display language program contains classes objects represent windows attributes describe properties windows 
objects defined classes objects 
class type class type object 
possible modify type object adding attributes introducing new objects original object form inheritance hierarchy 
display language interpreted language implemented window system 
display language query dictionary hippo main components hms system procedural part user interface programmed hippo language 
action main language construct 
action global local script turn may associated main class display language program 
hippo interpreted language implemented query dictionary consists queries sql select update functions sql insert update delete display language hippo programs operating database 
update functions may defined transaction usually ensure referential integrity update 
query dictionary concept introduced hms architecture isolate far possible display language hippo code database 
permits changes schema hidden application code rewriting queries update functions 
queries update functions referred name named parameters hippo variables called 
queries return results tables columns referred may traversed automatically displayed 
query dictionary intended sufficiently general absorb change need propagated allow different dbmss different data models 
query dictionary implemented pro tm embedded sql language 
description relations including fields constitutes schema 
actual dbms oracle tm 
plural datum data hms uses denote occurrences special hms concept datum 
cross thesaurus tool assists keeping track names hms application helps answer questions actions classes functions macros defined 
fields relations query update function refer 
actions referenced display language program 
information names kept thesaurus relation fields described 
name textual form entry seq system generated key name type codes action name action script name class name cn datum name dn field name fn function name fu query name qn relation name rn screen macro name sm transaction name tn update function name un container textual name describing name container type codes appropriate type container value action script display language program dl hippo program hp query qn query dictionary qd relation rn schema sc transaction tn update function un definition indicates definition name comment name thesaurus relation november hms system comprised lines source code thesaurus provides better measurement size number programmer introduced names various types 
shows proportion definitions uses name type 
total defined names times 
measurements describe number unique occurrences container type 
example datum referred times action registered entry thesaurus 
apparently low action scripts update functions explained 
action scripts called hippo code 
sort action script may associated class having name script 
associations 
defined update functions contained transactions called implicitly associated transaction called 
information duplicated name occurrences container considered necessary hms project 
including duplicates increased volume thesaurus 
ooo definition dn fn cn sm rn un fu tn name type definitions uses names distributed name type part tool generates names performs subsequent updates thesaurus data implemented combination unix csh awk sed scripts program 
interface consisting windows pull menus buttons implemented display language hippo 
addition search display name information interface provides predefined queries consistency checks detecting names defined worse names defined 
definite requirement tool satisfied contents thesaurus need manually maintained 
experience shows crucial tool 
source programs database schema periodically scanned night december detect record changes 
programmer may initiate scan 
features thesaurus tool described section cross information programming environment tools source code analysers data dictionary tools bourne ibm dec thesaurus tool spans languages build persistent application system user interfaces databases 
section describes thesaurus tool focuses issue change management 
change management order study nature changes schema container types versions thesaurus relation introduced 
versions thesaurus thesaurus relation added fields specify name added deleted date incident 
change name example relation registered deletion addition 
generally impossible tool distinguish rename deletion followed addition user provided information 
structure relation changes fields added deleted changed semantic problem decide relation modified new created 
rename field relation registered deletion addition change type field captured thesaurus 
fields thesaurus relation add delete specifies name added deleted introduced date addition deletion versions thesaurus relation order find effects schema changes query dictionary relation introduced describes direct correspondences fields relations display language hippo programs 
information generally inferred thesaurus relation 
relation name field name name name query update function datum name query dictionary relation thesaurus interface window displaying information thesaurus relation window displaying information query dictionary relation 
interface provides change buttons execute queries finding name occurrences possibly affected changes relation field query update function 
example query dictionary table interface contains entries result query user select say occurrence field name press change field button 
shows example field bed bed relation selected 
query dictionary window entries having actual field name displayed 
thesaurus window displays occurrences corresponding field queries update sketch actual screen showing functionality 
real system implemented colour graphics high resolution workstations screen dumps unreadable 
occurrence denotes occurrence identifier name datum field definition value 
functions containing occurrences field 
similar change relation button 
schema change change button performs query finds scripts programs selected query update function relations fields referred query update function 
hms thesaurus sorted lookup integrity change tables check relation field name name typo container cont type der qn bb hip 
beds dn bb hip 
qn design hip 
bed dn design hip 
old bed dn design hip 
qn nurse hip 
bed dn nurse hip 
qn nurse dl bed dn nurse dl thesaurus relation relation field datum bed bed beds bed bed st bed bed bed bed bed bed old bed query dictionary relation thesaurus interface thesaurus tool indicates changes done perform changes conversions 
specification construction tools issue research 
results measuring hms system section presents measurements changes hms schema measurements consequences changes 
period study started june continued december 
initially hms system analysed due repetitive changes development environment author instantly adapt tool kind changes sustaining frequency proved impossible see 
measurements november development period 
field trials began november 
year november november hms system development continued operational hospital may 
december hms running hospitals 
project team grew thirteen people period investigation 
evolution hms schema period study number relations increased increase number fields increased 
interesting considerable growth size relation changed 
development changes additions 
system provided prototype went production number changes additions deletions nearly balance 
relations fields date added deleted current added deleted current oct nov nov dec total table added deleted relations fields hms schema table shows development relations fields 
diagrammatic interpretation figures respectively 
number deleted relations fields appears negative value current value previous current value plus values added deleted columns 
added deleted include fields explicitly added deleted operational system concerned management patient information 
changes result improvements system changed requirements government minimum data set development patients system due delivery april 
relation fields added deleted implicitly part addition deletion relation 
changes fields implicit changes 
substantial number explicitly added deleted fields 
example relations november november schemata unchanged structure fields remained 
period examination total relations fields added respectively deleted 
relations fields additions deletions 
added deleted current change history relations oo oo oo oo added deleted change history fields mentioned rename field relation changes type field captured automatic measurements 
visual check november december schemata rename relation relation structure unchanged relations vertically factored case relations joined 
rest pure additions deletions 
regarding fields renamings changes unique non nulls changes length changes representation character integer vice versa changes field type 
respectively fields explicitly added deleted 
large scale project people involved different interests different opinions solve problems 
changes specification context customer generate drastic changes project 
example case hms project november version replaced october version 
consequences schema evolution previous section gives impression significantly hms schema changed period investigation 
order provide consistent application system schema changes propagated application code 
necessary change propagation discussed terms extent programs changed edited kind schema change 
modification nov schema dec schema example describing impact application code 
presentation relations fields nov version hms system help understand example 
schema hms patients patient id surname 
query dictionary direct select hms patients surname 
surname 
display language 
surname 
hippo 
surname 
direct indirect relations fields screens actions functions queries update functions dependent schema 
relations fields screens actions indirect query dictionary 
query dictionary introduced absorb change 
analogy traditional view general interpretation type concept includes field properties unique non nulls length representation integer char date 
mechanism query dictionary general supporting update allowing interfacing different dbmss 
schema changes direct consequences query dictionary general necessary propagate changes display language hippo code 
example relation hms patients gets new attribute place birth actual values entered screen display language code 
furthermore application program utilise new information 
illustrates direct indirect relations fields 
example query uses field hms patients value assigned datum surname turn display language hippo code 
measurement number min max mean std sum relations fields fields grouped relation table direct relations fields query dictionary table describes direct relations fields query dictionary 
measurement relations shows relations min times max 
average mean total number times relation name appears query dictionary sum 
standard deviation std high represented relations 
fields fields grouped relation measurements describe fields 
extra information obtained introducing fields grouped relation field statistics related associated relation 
example maximum value row fields grouped relation indicates relations total occurrences fields 
analysis raw data reveals fields relations constitute implies high standard deviation 
maximum number occurrences field average 
total number field occurrences query dictionary 
measurement number min max mean std sum fields fields grouped relation table indirect fields display language hippo code table shows indirect fields display language hippo measures obtained code 
finding correspondences fields queries update functions ii finding queries update functions display language hippo code iii joining results ii query update function datum 
fields average indirectly times measure fields grouped relation times 
field fields relation ranges occurrences respectively 
illustration consequences schema changes effect modification nov schema dec schema described 
shows third name occurrences deleted 
renamings 
consequences adding relations fields difficult measure minimum number necessary additions estimated number existing name occurrences see discussion 
add rename delete consequences december hms schema modification detailed description consequences table contains row kind schema modification 
number brackets number occurrences named change 
change consequences measured terms places need edited changed relations fields 
place position query update function transaction call regarded call containing update functions 
relation field datum name occurs datum name display language hippo program occurs 
duplicates removed 
measurements record occurrence relation field datum name container 
actual code twice occurrences 
table query dictionary means queries update functions dl means display language hippo programs 
query dictionary dl operation occurrences relations fields total add relation add field rename relation rename field delete relation delete field total table consequences december hms schema modification added field screen display language code collect new data update function insert database 
display language hippo program eventually new data implies new modified query 
collect fields added relation argument implies relation name included update function query 
names added relations dec schema inserted query dictionary times 
relations fields implying minimum places fields places corresponding edited query dictionary number datum names display language hippo code 
generally impossible tool detect places affected additions 
human intervention required 
renaming single relation fields cause places require editing 
necessarily effect display language hippo code name change may absorbed query dictionary 
intention new field names propagated corresponding query dictionary uses display language hippo code edited shown table 
place localised example line number word number pair 
table shows added relations single renamed relation registered deletion addition thesaurus tool 
examination table reveals removing relation average affect field occurrences query dictionary 
best case field occurrences need edited worst case 
average number field occurrences deleted relations indicating relations average 
consequences deletions significant 
deleted relations cause removals relation names removals name fields 
field names correspond occurrences display language hippo code 
summary number places affected deletion relations 
addition changes described new update functions queries generally needed may referenced display language hippo code 
query dictionary may absorb changes update functions queries operate new relations fields internal changes 
display language hippo code may unchanged 
introducing query dictionary means alleviating consequences schema changes 
problems measuring schema evolution thesaurus tool installed measure changes hms schema consequences month period june december 
addition changes hms schema application programs system structure development environments changed significantly mainly cope growth system 
thesaurus tool changed correspondingly 
kinds change completely new structure names directories change file name conventions 
changes support software operating system dbms version control systems 
changes application programming languages modified syntax extended runtime library query dictionary language display language hippo language changed period investigation 
keeping continuity observations may prove difficult due changes 
mentioned reason different time intervals shown table major changes languages may complicate comparisons versions application system changes may unusual typical programming environment 
anybody attempting carry similar experiments build equivalent tools certainly need cope changes data structures new versions support software 
hms system program directories notifying thesaurus tool 
excluded programs analysis short period time 
failure program unloading thesaurus data database recompiled new version oracle introduced 
result data unloaded 
tool assumed wrongly fields query update function correspond datum 
field average 
thesaurus relations empty subsequent test change detection invalidated 
thesaurus tools need subject change control mechanisms rest system study 
completely automated collection change data impossible 
order collect reliable measurements real world system application development people site time interest operating experiment 
problem convince data collection worth investment 
problem may great change measurement management tools closely integrated programming environment 
managing consequences changes application systems dominant activity software industry 
order provide measurements kind scale changes relational database application health management system studied depth month period 
study reveals schema changes significant development period system operational 
main results number relations increase 
number fields increase 
relation changed 
additions deletions 
consequences schema changes application programs measured 
results confirm change management tools needed context advanced experimental application development measured 
measurements obtained thesaurus tool analyses database schema application programs extracts information programmer introduced names denoting relations fields screens actions queries update functions changes set occurrences names recorded 
particular thesaurus tool provides information screens actions queries may affected possible schema change 
way estimating consequences possible schema changes 
statistics thesaurus raw data reveal possibilities concerning optimisation strategies 
research schema evolution focused object oriented databases 
ideas managing impact schema changes schema class hierarchy extensional data objects implemented 
managing consequences application programs methods proves complex issue 
results reported relational dbms confirm change database schemata important issue independent data model actual application 
long term goal identify properties related change consequences independent data model application 
know significant number changes going start quantifying 
schema modification measurements described step direction 
believe studied similar systems unable find reports corresponding measurements 
extent sort change may differ study 
general change statistics projects collected enabling systems various application domains compared bigger study 
causes change may vary system system 
causes research issue regarded irrelevant context 
key point measurements real industrial system confirm designers tools management large long lived systems involving databases address problem changes schemata 
traditional view defining fixed schema developing dependent application programs proved inappropriate 
thesaurus tool directs programmer places programs may need additional changes 
changes performed hand 
research issue provide general change management model changes automated 
measurements show addition frequent kind change followed deletion 
renaming occur frequently may absorbed organising software appropriately model automatic renaming relatively simple 
generally impossible automate additions human intervention required tool may suggest alternative places 
contrast model automatic deletion conceivable 
development thesaurus software information tool sjoberg establishes platform research change management context napier strongly typed persistent programming language 
ideas principles hms thesaurus tool developed napier provides appropriate platform application programs stored values database susceptible manipulation change management software 
addition change advisors indicating necessary propagation type changes started developing tools 
information utilised consistency check tool checks declared types values application persistent value declared program exists persistent store avoiding run time errors dependent tool called meant replace feldman script files tailored construction maintenance persistent systems 
semantics programs persistent store extracted enables things help organise interaction programs environments persistent store 
hms case considerable investment excess coding costs went design planning 
changes encountered due changing organisational needs changing regulations addition major new subsystems 
author malcolm atkinson suggesting thesaurus advice proceeded 
ray support paul richard cooper phil trinder ivan jackson useful comments earlier versions 
andy england don duncan brenda staff software 
psl operative helped carrying 
generosity dr tim king psl permitting access project providing support extended visits psl appreciated 
author holds fellowship norwegian research council science humanities 
associated fide project esprit basic research action 
atkinson atkinson fide course section version fide esprit basic research action project may 
banerjee banerjee kim kim 
korth semantics implementation schema evolution object oriented databases proceedings acm sigmod conference management data san francisco ca th th may pp 

bourne bourne data dictionary system analysis design icl technical journal pp 
nov 
chen chen entity relationship model unified view data acm tods vol 
pp 

chikofsky cross chikofsky cross reverse engineering design recovery taxonomy ieee software january 
clifton clifton display language documentation october 
codd codd relational model data large shared data banks communications acm june 
program understanding challenge ibm systems journal vol 

dec vax language sensitive editor vax source code analyzer user manual digital equipment 
england england hippo language guide november 
feldman feldman program maintaining computer programs software practice experience 
ibm db dc data dictionary general information manual ibm 
joseph joseph thatte thompson wells object oriented database workshop oopsla sigmod record vol 
september 
kim chou kim chou versions schema object oriented databases proc ofl th vldb conference los angeles 
lerner habermann lerner habermann schema evolution database reorganisation proceedings conference object oriented programming systems languages applications october 
morrison morrison brown connor dearle napier manual universities glasgow st andrews 
parikh parikh world software maintenance tutorial software maintenance parikh eds cs press los alamitos ca 
stein stein class modification gemstone object oriented dbms proceedings conference object oriented programming systems languages applications october 
putnam putnam software cost estimating lifecycle control ieee catalog 
sj berg sj berg thesaurus tool meta data management technical report fide esprit basic research action project number fide february 
sj berg sj berg measuring name identifier usage napier applications fide technical report fide esprit basic research action project number fide 
skarra zdonik skarra zdonik type evolution object oriented database shriver wegner 

eds research directions object oriented programming cambridge ma computer systems pp 

predict manual version software ag germany 
zelkowitz zelkowitz perspectives software engineering acm computing surveys vol 
june 

