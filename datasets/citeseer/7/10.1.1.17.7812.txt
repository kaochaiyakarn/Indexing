directly executable earley parsing john aycock nigel horspool department computer science university victoria victoria canada csc uvic ca springer verlag 
deterministic parsing techniques typically favor general parsing algorithms eciency reasons 
general algorithms earley method powerful easier developers seemingly arbitrary restrictions placed grammar 
describe narrow performance gap general deterministic parsers constructing earley parser reach speeds comparable deterministic methods grammars commonly programming languages 
parsers today capable handling subsets context free grammars ll lr lalr 
reason ecient linear time algorithms parsing subsets known 
contrast general parsers handle context free grammar slower due extra overhead cases general algorithm runs linear time 
general algorithms advantages 
context free grammar required acceptable general parser required ecient algorithms lalr algorithm yacc 
general parser reduces programmer development time eliminates source potential bugs lets grammar re ect input language limitations compiler tool 
general algorithms ambiguous grammars ecient counterparts 
programming language grammars pascal contain areas ambiguity 
tasks ambiguous grammars may deliberately constructed grammar describes multiple dialects language software reengineering 
primary objection general parsing algorithms functionality speed 
lr parsers dramatic speed improvements obtained producing hard coded directly executable parsers 
directly executable lr parsers implement parser grammar specialized program typical table driven approach 
extend directly executable techniques earley general parsing algorithm produce evaluate believe rst earley parser 
speed parsers shown comparable deterministic parsers produced bison 
earley parsing earley algorithm general parsing algorithm recognize input described context free grammar cfg 
assume reader familiar standard de nition notation cfgs 
uppercase letters represent nonterminals lowercase letters represent terminals strings terminal nonterminal symbols 
cfg augmented adding new start rule original start symbol earley algorithm works building sequence earley sets initial earley set earley set input symbol earley set contains earley items consist parts grammar rule position grammar rule right hand side indicating rule seen denoted dot pointer back previous parent earley set 
instance earley item bb indicates parser seen rst symbol grammar rule abb points back earley set term core earley item refer earley item parent pointer bb example 
steps applied earley items added constructs primes scanner 


add 

predictor 


add rules completer 
nal earley item 
add 

earley items 

earley item added earley set earley set 
initial set holds single earley item prior earley set construction nal earley set contain completion order input string accepted 
example fig 
shows earley sets parsing input expression grammar ge 
avoid confusion unfortunately awkward terms earley set earley item 
fig 

earley sets expression grammar ge parsing input nal earley items ones correspond input derivation 
earley algorithm may employ lookahead reduce number earley items earley set version algorithm lookahead suitable purposes 
restrict attention input recognition parsing proper 
construction parse trees earley algorithm done recognition complete information retained recognizer division may done loss generality 
number observations earley algorithm 
obvious taken shape construction directly executable parser 
observation 
additions current earley sets observation 
completer recursively look back earley sets considers single parent earley set observation 
scanner looks earley item exactly place dot may moved due terminal symbol 
observation 
earley items added predictor parent deep directly executable earley parser basic organization contents earley set depend input known run time realistically precompute piece directly executable code possible earley set 
assume grammar known prior run time considering generate piece directly executable code earley item 
earley item precomputed 
particular value parent pointer known ahead time 
identical earley items invariant part core earley item 
code directly executable earley item code core earley item parent pointer maintained data 
directly executable earley item may represented tuple code parent code structured shown fig 

terminal nonterminal symbol represented distinct number variable sym contain type symbol 
movement terminal symbol straightforward implementation scanner step movement nonterminal complicated fact actions may take place reaching earley item 

depending context 
encountered processing current earley set predictor step run 

encountered parent earley set completer step running movement nonterminal may occur 
case sym terminal symbol predicate distinguish cases 
code nal earley items calls code implementing parent earley set replacing sym nonterminal symbol move dot 
observation stack required call depth limited 
executed current set processed necessitating 
earley set representation earley set directly executable representation conceptually ordered sequence code parent tuples followed special tuples current earley set code parent earley set code code parent earley set simply contains return match call nal earley item 
reaching current earley set complicated bookkeeping operations prepare processing earley set 
parent pointer irrelevant 
practice deep implementation splits tuples 
deep earley sets parts list addresses code corresponding list parent pointers 
parts separated memory constant amount knowing memory location half tuple trivial calculation nd half 
having list code addresses earley set possible implement action goto earley item direct threaded code 
threaded code directly executable earley item jumps directly code earley item rst returning 

movement terminal sym add 

goto earley item 

movement nonterminal sym foreach rule add sym add 

goto earley item 
nal earley item sym saved sym sym sym call code earley set sym saved sym goto earley item fig 

pseudocode directly executable earley items 
dispatching loop incurring function call overhead 
threaded code pro er speed advantages better branch prediction hardware modern cpus 
implement reasonably portable fashion rst class labels gnu earley item added earley set representation 
recall earley item placed earley set appear 
term appending denote earley item placed earley set adding process determining earley item appended earley set 
discuss adding section terminology appending earley item earley set done dynamically generating threaded code 
dynamically modify threaded code exchange piece code instances 
current earley set fully processed current earley set exchanged parent earley set 

observation implies scanner looked earley item code looking terminal symbols super uous 
modifying threaded code deep skips super uous code subsequent invocations 
appending leaves deep thorny problem memory management 
observation says earley items threaded code plus separate parent pointers appended earley sets 
maintain array extension ansi th entry pointer code earley set implementation call giving total distinct dynamically growing memory areas 
complex high overhead memory management operating system assist memory mapping oversized areas virtual memory 
ecient operation operating system allocate virtual memory pages 
protect key memory pages exception caused deep exceed allocated memory performing bounds checking appending 
arrangement shown fig 
demonstrates current earley sets alternate memory areas 
threaded code parent pointers parent pointers index earley sets fig 

memory layout deep 
current earley sets respectively shaded areas protected memory pages 
adding earley items mentioned adding earley item earley set entails checking ensure 
earley suggested array indexed parent pointer entry list earley items search 
note core earley items may enumerated yielding nite relatively small numbers 
core earley item number may index bitmap quickly check presence absence earley item core 
earley items exist core di erent parent pointers construct radix tree core earley item binary tree branches zero keeps track parent pointers seen 
radix trees nice properties 
insertion lookup operations required simple 

time complexity radix tree operations execution log number tokens read growing slowly large inputs 
avoid building radix tree core earley item absolutely necessary cache rst parent pointer encounter second earley item core 
example adding earley items fig 

bitmap radix tree roots xxxx 
xxxx 
xxxx 
fig 

adding earley items initial state appending earley item parent appending earley item parent radix tree circle indicates absent entry square indicates existing entry 
denotes don care entry 
precise number core earley items 

sets containing items sets containing items earley parsing deep relationship contemporary lr parsing 
look lr parsers lr parsers lookahead 
lr parsers lr parser recognition driven deterministic nite automaton dfa decide right hand side grammar rule seen 
dfa state corresponds set lr items lr item exactly core earley item 
lr dfa constructed 
consider nondeterministic nite automaton nfa lr parsing nfa state contains exactly lr item 
transition 



symbol 

start state 
nfa may converted lr dfa standard methods 
conversion nfa dfa yields mentioned dfa states sets lr items 
lr set items may logically divided kernel items initial item items dot items items 
explicitly represent logical division splitting lr dfa state states leaving deterministic automaton lr dfa 
shows partial lr dfa ge remainder omitted due space constraints 
original lr dfa states merged 
fig 

partial lr dfa ge shading denotes start states 
returning earley parsing core earley items earley set may represented states lr dfa 
problem doing keeping track parent pointers lr items belong results complex inelegant implementation 
realized result observation predictor really just corresponds making transition state lr dfa 
pursuing idea represent earley items deep tuples code lr dfa state parent shows earley sets fig 
recoded lr dfa states 
fig 

earley sets expression grammar ge parsing input encoded lr dfa states 
new representation gain eciency lr dfa basis earley parser bene particularly simple representation implementation 
prior discussion section regarding deep holds directly executable code transitions lr dfa state earley item 
evaluation compared deep di erent parsers 
accent earley parser generator 

standard implementation earley parser second author 

bison gnu incarnation yacc 
parsers implemented flex generated scanner compiled gcc version ag 
timings conducted mhz pentium ram running debian gnu linux version 
shows performance ge expression grammar sect 

expected bison fastest deep close second markedly faster earley parsers 
fig 
parsers bison operate extremely ambiguous grammar 
deep far faster earley parsers 
performance curves typical earley algorithm time complexity lr grammars unambiguous grammars worst case number tokens accent earley deep bison fig 

timings expression grammar ge number tokens accent earley deep fig 

timings ambiguous grammar 
improvements tried deep java grammar consists grammar rules 
suce say extremely patient content wait gcc compiled optimized monster 
deep practical code size reduced 
applying observation code looking terminal symbols may executed lifetime earley item 
contrast earley item nonterminal code may invoked times 
decrease code size excised directly executable code terminal symbols replacing single table driven interpreter interprets threaded code 
nonterminal code directly executed completer calls back parent earley set 
change reduced compile time 
interpretation allowed trivially improvement call earley set compression 
states lr dfa transitions nonterminal symbols corresponding directly executable code op consume time space 
interpreter looks cases removes earley items contribute parse 
think earley set compression space optimization negligible performance improvement resulted implementation 
version deep partial interpretation earley set compression called shallow 
compares performance shallow bison realistic java inputs 
shallow times slower di erence amounts fractions second di erence noticed users 
typical improvement earley parsers lookahead 
earley suggested completer employ lookahead shown poor choice 
demonstrated lookahead predictor yielded best results 
prediction lookahead avoids placing earley items earley set obvious dead ends subsequent input 
lr dfa naturally clusters predictor output 
prediction lookahead avoid generating earley items standard earley parser avoid earley item shallow predicted dead ends fell single lr dfa state 
instrumented shallow track earley items unused sense caused earley items added earley set nal earley items 
averaging java corpus earley items unused 
prediction lookahead remove earley set compression removed unused earley items addition pruning away earley items 
conjecture prediction lookahead limited usefulness earley parser type lr automaton 
number refers grammar rules backus naur form obtained transforming grammar manner prescribe 
time difference seconds number tokens fig 

di erence shallow bison timings java grammar parsing java source les jdk java cup 
related appropriately rst attempt direct execution earley parser earley 
subset cfgs algorithm recognized linear time proposed algorithm produce hardcoded parser 
assuming algorithm worked scaled practically sized grammars earley implemented subset cfgs possessed unresolved issues termination 
directly executable earley parser leermakers recursive ascent earley parser 
provides functional formulation earley proposal appears implemented 
leermakers argues directly executable lr parsers uenced really just manifestations recursive ascent parsers notes uses recursive ascent earley parser denote parsers strictly earley ones page 
algorithm su ers problem handling cyclic grammar rules problem earley algorithm consequently earley parsers 
deterministic parsers ecient basis general parsing algorithms suggested lang 
applications idea earley parsers earley parsers explored bene ts deterministic automaton exploiting earley ability simulate nondeterminism 
going deep shallow arrived parser suited practical 
came cost shown fig 
partially interpreted shallow noticeably slower fully executable deep 
slowdown shallow timings comparable bison 
area determining retain deep speed maintaining practicality shallow 
side time space coin investigate ways reduce size generated parsers 
comparing sizes stripped executables shallow parsers ge java times larger respectively corresponding bison parsers 
number tokens shallow deep bison fig 

performance impact partial interpretation ge additionally explored possibility optimizations grammar structure 
example elimination unit rules called chain rule elimination 
grammar rules single nonterminal righthand side 
techniques employed success directly executable parsers 
shown directly executable lr parsing techniques extended general parsing algorithms earley algorithm 
result directly executable earley parser substantially faster standard earley parsers point comparable lalr parsers produced bison 
acknowledgments supported part national science engineering research council canada 
shannon jaeger number helpful comments draft 

aho sethi ullman 
compilers principles techniques tools 
addison wesley 

alonso 
construction ecient generalized lr parsers 
proceedings second international workshop implementing automata pp 


barnard cordy 
sl parses lr languages 
computer languages pp 


bell 
threaded code 
cacm june pp 


proebsting 
fast yacc compatible parsers little ort 
software practice experience february pp 


lang 
structure shared forests ambiguous parsing 
proceedings th annual meeting association computational linguistics pp 


van den brand sellink verhoef 
current parsing techniques software renovation considered harmful 
international workshop program comprehension pp 


bouckaert 
ecient parsing algorithms general context free parsers 
information sciences pp 


earley 
ecient context free parsing algorithm ph thesis university 

earley 
ecient context free parsing algorithm 
cacm february pp 


ertl gregg 
hardware support ecient interpreters fast indirect branches draft 
may 

gosling joy steele 
java language speci cation 
addison wesley 

jacobs 
parsing techniques practical guide 
ellis horwood 

horspool whitney 
faster lr parsing 
software practice experience june pp 


johnson 
yacc compiler compiler 
unix programmer manual th edition volume 

klint 
interpretation techniques 
software practice experience pp 


knuth 
art computer programming volume sorting searching nd edition addison wesley 

lang 
deterministic techniques ecient non deterministic parsers 
automata languages programming lncs ed springerverlag 

leermakers 
recursive ascent earley parser 
information processing letters pp 


leermakers 
recursive ascent parsing earley marcus 
theoretical computer science pp 


leermakers 
functional treatment parsing 
kluwer academic 

mclean horspool 
faster earley parser 
proceedings international conference compiler construction cc pp 



fast lr parsing 
proceedings sigplan symposium compiler construction sigplan pp 



optimizing directly executable lr parsers 
compiler compilers third international workshop cc pp 


schr 
accent compiler compiler 
gmd report german national research center information technology june 

ferro dion 
ecient incremental parsing context free languages 
proceedings th ieee international conference computer languages pp 

