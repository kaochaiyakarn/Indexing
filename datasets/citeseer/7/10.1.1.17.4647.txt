optimal schedules parallelizing anytime algorithms case independent processes lev finkelstein shaul markovitch ehud rivlin performance anytime algorithms having nondeterministic nature improved solving simultaneously instances algorithm problem pairs 
pairs may include different instances problem starting different initial state different algorithms alternatives exist instances algorithm nondeterministic algorithms 
general framework optimal parallelization independent processes 
show mathematical model framework algorithms optimal scheduling demonstrate usefulness real problem 
assume try train expert system identifying paintings potential 
assume possess set example paintings access human experts field tagging examples 
tagged examples passed inductive algorithm generating classifier 
goal obtain classifier quality judged example validation set 
assume experts necessarily similar views considered painting want train classifier examples tagged expert 
hand finish task fast possible achieved parallel training 
hand minimize total number examples sent tagging achieved choosing expert 
design elaborated schedule switch modes 
assuming known cost function specifies tradeoff learning time tagging cost optimal schedule minimizing cost 
example mars mission water 
known sources water opposite directions 
robots sent sources 
goal get water fast possible minimal amount fuel 
tradeoff cost fuel copyright american association artificial intelligence www aaai org 
rights reserved 
computer science department technion haifa israel lev cs technion ac il cost waiting water optimal schedule robots 
common examples 
potential benefits gained uncertainty solving instance pair 
example probabilistic characteristics learning process determined learning algorithm 
learning experts considered instances problem 
second example probabilistic characteristics robot processes determined terrain different directions 
process executed purpose satisfying goal predicate 
task considered accomplished instances solved 
goal predicate satisfied time satisfied time property equivalent quality monotonicity anytime algorithms dean boddy horvitz solution quality restricted boolean values :10.1.1.53.4593
objective provide schedule minimizes expected cost constraints 
problem definition typical rational bounded reasoning simon russell wefald 
problem resembles faced contract algorithms russell zilberstein zilberstein 
task resource allocation construct algorithm providing solution highest quality 
case task quality requirement construct algorithm providing solution minimal resources 
research works related framework 
simple parallelization information exchange processes may speedup process due high diversity solution times 
example knight showed reactive instances rta search korf beneficial single deliberative rta instance 
yokoo kitamura search agents parallel agent rearrangement periods time 
agrawal mehrotra showed common distributions solution time simple parallelization leads linear speedup 
exception family heavy tailed distributions gomes selman kautz possible obtain super linear speedup simple parallelization 
superlinear speedup obtained access internal structure processes involved 
example clearwater hogg huberman reported superlinear speedup problems result information exchange processes 
example works kumar rao devoted parallelizing standard search algorithms superlinear speedup obtained dividing search space 
case non deterministic algorithms restarted arbitrary number times analyzed details luby sinclair zuckerman case single processor luby multiprocessor case 
particular proven single processor optimal strategy periodically restart algorithm constant amount time solution 
strategy successfully applied combinatorial search problems gomes selman kautz 
restart strategy applied settings consider finite number heterogeneous processes assume availability infinite number instances process 
interesting approach domain independent direction portfolio construction huberman lukose hogg gomes selman 
approach provides processes agents different amount resources enabled reduce expected resource usage variance 
experiments showed applicability approach hard computational problems 
field anytime algorithms similar works concentrated scheduling different anytime algorithms decision procedures order maximize utility boddy dean 
settings different 
goal research develop algorithms design optimal scheduling policy statistical characteristics process es 
formal framework scheduling parallel anytime algorithms 
finkelstein markovitch rivlin framework case processes share resources single processor model 
similar framework case processes independent sense usage resources process imply constraints usage resources 
framework assumes know probability goal condition satisfied function time performance profile simon boddy dean restricted boolean quality values 
analyze properties optimal schedules suspend resume model algorithm building optimal schedules 
experimental results 
motivation simple example starting formal discussion give simple example 
assume instances dfs random tie breaking applied simple search space shown 
assume process uses separate processor 
large number paths goal half length half length 
instances finds solution task considered accomplished 
utility simple search task instances dfs search path scheduling processes may reduce cost 
components time elapsed time required system find solution resources total cpu time consumed processes 
search processes start expected time usage units expected resource usage units 
apply instance time resource usage units 
assume process active time units stops second process active time units second process stops process continues execution 
expected time resource usage units 
consider schedule processes start simultaneous manner time units continues execution case failure expected time units expected resource usage units 
easy see results scenarios interleaved execution better results 
tradeoff time resource cost determines best model time resource cost equal models equivalent 
framework parallelization scheduling section formalize intuitive description parallelization scheduling 
framework similar frameworks finkelstein markovitch finkelstein markovitch rivlin :10.1.1.113.3082
set states time variable nonnegative real values random process realization trajectory represents mapping goal predicate 
abe monotonic trajectory function ga non decreasing function 
assumptions ga step function discontinuity point denote ta point goal predicate true 
ga say ta defined 
define random variable tory ta defined corresponds ta behavior variable described distribution function 
points differentiable probability density 
scheme resembles anytime algorithms 
goal predicate viewed special case quality measurement anytime algorithms requirement non decreasing value standard requirement algorithms 
trajectories correspond conditional performance profiles zilberstein russell zilberstein 
practice trajectory leads goal predicate satisfaction infinitely large time 
define probability success probability selecting trajectory leads satisfaction finite time ta defined assume system random processes corresponding distribution functions fn goal predicates gn 
define schedule system set binary functions moment th process active idle 
refer scheme scheduling 
possible generalization framework extend suspend resume control refined mechanism allowing determine intensity process acts 
software processes means vary fraction cpu usage tasks robot navigation implies changing speed robots 
mathematically intensity control equivalent replacing binary functions continuous functions range 
note scheduling term time ambiguous 
hand subjective time process consumed process active 
kind time corresponds resource consumed process 
hand objective time measured point view external observer 
performance profile algorithm defined subjective time cost function see may kinds times 
processes formulas objective time 
denote total time process active definition dx 
practice provides mapping objective time subjective time th process refer subjective schedule functions 
obtained differentiation describe schedules 
processes ai goal predicates gi running schedules result new process goal predicate disjunction gi igi way express possibility process profiles approach 
prefer explicitly distribution function meet requirement limt 
monotonic denote distribution function corresponding random variable fn corresponding distribution density fn 
assume monotonic non decreasing cost function tn depends objective time subjective times process ti 
subjective times represented 
expected cost schedule expressed eu fn dt sake readability omit 
suspend resume model assumptions differentiable countable set rescheduling points derivatives ensure correct values intensity control assumptions derivatives lie 
consider alternative setups regarding resource sharing processes 
processes share resources mutual exclusion basis 
example framework algorithms running single processor 

processes fully independent 
example framework algorithms running processors 
difference alternatives additional constraints case shared resources sum derivatives exceed case independent processes constraint exist 
goal find schedule minimizes expected cost corresponding constraints 
current devoted case independent processes 
case shared resources studied finkelstein markovitch rivlin 
suspend resume scheduling section consider case suspend resume control continuous functions derivatives 
claim expressions goal time distribution fn expected cost eu follows fn fi eu iu fi dt 
possible show generalization case probabilities success pi equivalent replacing fi fi respectively 
stand partial derivatives respectively 
proofs omitted due lack space finkelstein markovitch rivlin 
section assume total cost linear combination objective time cost resource cost resource cost proportional subjective time spent 
loss generality assume leads minimization problem eu fj dt min viewed normalized resource weight 
case suspend resume scheduling constraints nature problem 
necessary conditions optimal solution processes independent processes 
model states system possible active idle idle active active 
ignore case processes idle removing state schedule increase cost 
assume system continuously alternates states 
scheme general time spent state allowed zero 
call triplet phase denote phase denote time state sx ends tx 
illustration see total cumulative time spent state 
denote notations times states phases 
phases correspondence sequence sequence tx definition tx subjective schedule functions time intervals state form 
similarly intervals state subjective schedule functions defined intervals state subjective schedule functions represented 
substituting expressions constraints suspend resume scheduling obtain function minimize eu dx dx dx 
minimization problem equivalent original problem dependency solutions described 
constraints monotonicity sequence fixed obtain 
reaches optimal values du border described prove theorem theorem chain theorem processes 
value may computed formula dx dx 

value may computed formula dx dx 

value may computed formula dx dx 
theorem shows way compute values sequential manner time previously computed values 
leads algorithm building optimal schedule 
optimal solution processes algorithm assume state takes non zero time 
theorem values determine possible values roots 
values determine values 
values provide tree possible values branching factor tree determined number roots 
possible sequence evaluated 
series expression converge finite number points 
triplet find best sequence standard search algorithms branch bound 
denote value best sequence eu 
performing global optimization eu provides optimal solution case state non zero time 
note value may happen need compare value obtained optimization triplet value obtained optimization triplet value obtained optimization triplet 
due lack space main idea algorithm 
optimal scheduling parallelizing latin square problem tested algorithm optimal scheduling independent processes solving partial latin square problem 
task colors color square color appears row column 
tiles may colored 
assume allocated processors attempt accelerate time finding solution starting different initial configurations parallel 
processes employs heuristic dfs fail heuristic gomes selman 
assume cost associated actual cpu time consumed processors 
note goal build best algorithm solving problem find best schedule instances algorithms 
experiments performed square pre colored 
performance profile induced run instances 
compare optimal schedule produced algorithm schedule runs processes parallel 
average cost optimal schedule simultaneous normalized resource weight average cost function normalized resource weight shows tradeoff time cpu cost influences resulting cost schedules 
point represents average pairs problems 
axis corresponds normalized weight cpu cost 
means consider elapsed time means consider cpu time means costs elapsed cpu time equal 
axis stands average cost measured number generated nodes 
see weight cpu time high optimal schedules algorithm outperform simple parallelization scheme 
theoretical framework optimal scheduling parallel anytime algorithms case independent processes 
analyze properties optimal schedules suspend resume model provide algorithm designing schedules 
initial experimentation demonstrates merit scheduling algorithm 
advantage optimal scheduling simple parallelization significant weight resource cost increases 
potential weakness algorithm high complexity 
complexity represented multiplication factors variable function minimization branch bound search solving equations 
exponential component branch bound search 
practice branching factor roughly number roots equations small depth search tree controlled strategies 
framework generalized arbitrary number processes straightforward generalization lead complexity exponential number 
algorithm assumes availability performance profiles involved processes 
performance profiles derived analytically theoretical models processes empirically previous experience solving similar problems 
online learning performance profiles expand applicability proposed framework subject ongoing research 
boddy dean 
decision theoretic deliberation scheduling problem solving time constrained environments 
artificial intelligence 
clearwater hogg huberman 
cooperative problem solving 
huberman ed computation micro macro view 
singapore world scientific 

dean boddy 
analysis timedependent planning 
proceedings seventh national conference artificial intelligence aaai 
saint paul minnesota usa aaai press mit press 
finkelstein markovitch 
optimal schedules monitoring anytime algorithms 
artificial intelligence 
finkelstein markovitch rivlin 
optimal schedules parallelizing anytime algorithms 
papers aaai fall symposium 
finkelstein markovitch rivlin 
optimal schedules parallelizing anytime algorithms case independent processes 
technical report cis cs department technion haifa israel 
gomes selman 
algorithm portfolio design theory vs practice 
proceedings uai 
san francisco morgan kaufmann 
gomes selman kautz 
boosting combinatorial search randomization 
proceedings th national conference artificial intelligence aaai 
menlo park aaai press 
horvitz 
reasoning beliefs actions computational resource constraints 
proceedings uai 
huberman lukose hogg 
economic approach hard computational problems 
science 
agrawal mehrotra 
randomized parallel backtracking algorithm 
ieee transactions computers 
knight 
reactive agents better deliberative ones 
proceedings thirteenth international joint conference artificial intelligence 
chamb ry france morgan kaufmann 
korf 
real time heuristic search 
artificial intelligence 
kumar rao 
parallel depth search multiprocessors part ii analysis 
international journal parallel programming 
luby 
optimal parallelization las vegas algorithms 
proceedings annual symposium theoretical aspects computer science stacs 
berlin germany springer 
luby sinclair zuckerman 
optimal speedup las vegas algorithms 
information processing letters 
rao kumar 
parallel depth search multiprocessors part implementation 
international journal parallel programming 
rao kumar 
efficiency parallel backtracking 
ieee transactions parallel distributed systems 
russell wefald 
right thing studies limited rationality 
cambridge massachusetts mit press 
russell zilberstein 
composing realtime systems 
proceedings twelfth national joint conference artificial intelligence ijcai 
sydney morgan kaufmann 
simon 
behavioral model rational choice 
quarterly journal economics 
simon 
models bounded rationality 
mit press 
yokoo kitamura 
multiagent real time selection introducing competition cooperative search 
proceedings second international conference multiagent systems icmas 
zilberstein russell 
efficient reasoning ralph 
proceedings international conference ai planning systems 
zilberstein 
operational rationality compilation anytime algorithms 
ph dissertation computer science division university california berkeley 
