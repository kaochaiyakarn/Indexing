general aimd congestion control richard yang simon lam department computer sciences university texas austin austin tx cs utexas edu tr may increase decrease half strategy tcp reno congestion window adjustment consider general case increase value decrease ratio parameters 
congestion avoidance state window size increased ff window packets acknowledged decreased fi current value congestion indication 
refer window adjustment strategy general additive increase multiplicative decrease gaimd 
mean sending rate gaimd flow function ff fi loss rate mean roundtrip time mean timeout value number packets acknowledged ack 
conducted extensive experiments validate sending rate formula 
formula quite accurate loss rate 
simple relationship ff fi gaimd flow tcp friendly gaimd flow approximately sending rate tcp flow path conditions 
results simulations tcp friendly gaimd flows ff fi compete bandwidth tcp reno flows tcp sack flows droptail link red link 
gaimd flows highly tcp friendly 
furthermore fi gaimd flows reduced rate fluctuations compared tcp flows 
research sponsored part national science foundation 
ani 
ani 
experiments performed equipment nsf 
cda 
shared network internet systems react congestion adapting transmission rates avoid congestion collapse keep network utilization high :10.1.1.112.5121
robustness current internet due large part congestion control mechanisms tcp 
particular tcp uses additive increase multiplicative decrease aimd algorithm tcp sending rate controlled congestion window halved window data containing packet drop increased packet window data acknowledged 
today wide variety new applications streaming multimedia developed satisfy growing demands internet users 
new applications udp require reliable delivery responsive network congestion 
great concern widespread deployment unresponsive applications may harm performance responsive tcp applications ultimately lead congestion collapse internet 
address concern approach applications reservations differentiated services provide qos 
services available expect new applications want best effort service low cost 
second approach promote congestion control mechanisms best effort traffic deploy incentives :10.1.1.112.5121
tcp congestion control appropriate applications bulk data transfer real time applications find halving sending rate flow severe response congestion indication noticeably reduce flow user perceived quality :10.1.1.33.2192
past years unicast congestion control schemes proposed investigated :10.1.1.154.9133:10.1.1.102.1697
common objective studies find alternative congestion control scheme tcp 
dominant internet traffic tcp important new congestion control schemes tcp friendly 
mean sending rate non tcp flow approximately tcp flow conditions round trip time packet loss 
congestion control schemes investigated divided categories aimd formula :10.1.1.154.9133:10.1.1.102.1697:10.1.1.33.2192
roughly speaking aimd schemes emulate increase decrease half window behavior tcp 
formula schemes stochastic model derive formula expresses tcp sending rate function packet loss rate round trip time timeout :10.1.1.143.9137
essentially schemes increase decrease half strategy tcp 
observe decrease half fundamental requirement congestion control 
decbit aimd flow reduces sending rate old value response packet drop :10.1.1.15.3262
consider general version aimd implemented tcp specifically sender window size increased ff packet loss round trip time window size decreased fi current value loss indication ff fi parameters 
name aimd literature refer tcp reno congestion control ff fi call approach general additive increase multiplicative decrease gaimd congestion control 
gaimd considered chiu jain 
study mainly stability fairness properties 
showed ff fi satisfy relationships ae ff fi gaimd congestion control stable fair 
study considered case flows ff fi parameters 
provided quantitative study effects ff fi performance metrics 
study consider detail relationships various performance metrics parameters ff fi assuming ff fi satisfy 
balance assume ff fi satisfy stated 
particular interested sending rate steady state metric responsiveness rate fluctuations transient metrics 
report results gaimd sending rate 
results transient behavior integration coarse grained gaimd window size control fine grained roundtrip time control reported 
result formula showing mean sending rate function control parameters ff fi loss rate mean round trip time mean timeout value number packets ack acknowledges 
conducted extensive experiments validate formula 
experiments show formula accurate wide range ff fi values loss rate 
formula obtain second result simple relationship ff fi gaimd flow tcp friendly gaimd flow approximately sending rate tcp flow 
relationship ff fi tcp friendly ff gamma fi relationship offers wide selection possible values ff fi achieve desired transient behaviors responsiveness reduced rate fluctuations 
example choose fi gaimd sender dramatic rate drop tcp loss indication 
choice fi ff gaimd flow tcp friendly 
balance follows 
section sending rate formula gaimd flow 
experiments validate formula section 
section formula derive conditions gaimd flow tcp friendly 
section experimental results tcp friendliness conditions 
give summary related tcp friendly congestion control schemes section 
section 
modeling sending rate motivation consider general class congestion window adjustment policies 
window adjustment policy component complete congestion control protocol 
mechanisms congestion detection round trip time estimation needed complete protocol 
tcp congestion control studied extensively years gaimd adopts mechanisms tcp reno 
subsection give brief description gaimd congestion window adjustment algorithm 
algorithms tcp reno 
gaimd congestion window adjustment gaimd session begins slowstart state 
state congestion window size doubled window packets acknowledged 
congestion indication congestion window size cut half session enters congestion avoidance state 
state congestion window size increased ff new ack received current congestion window size 
convenience say window size increased ff round trip time 
far assumed receiver returns new ack received data packet 
tcp receiver implementations send cumulative ack consecutive packets received delayed ack 
case window size increased ff round trip time 
gaimd reduces window size congestion detected 
tcp reno gaimd detects congestion events triple duplicate ack timeout 
congestion detected triple duplicate ack gaimd changes window size fiw congestion indication timeout window size set 
modeling assumptions appendix derive analytic expression sending rate gaimd sender function ff fi loss rate rtt round trip time timeout value number packets acknowledged ack 
derivation fairly straightforward extension similar formula derived tcp padhye firoiu towsley kurose :10.1.1.143.9137
various assumptions simplifications analysis summarized 
ffl assume sender data send saturated sender 
receiver advertises large receiver window size send window size determined gaimd congestion window size 
ffl sending rate random process 
limited efforts modeling mean value sending rate 
interesting topic study variance sending rate scope 
ffl focus gaimd congestion avoidance mechanisms 
impact slowstart ignored 
ffl model gaimd congestion avoidance behavior terms rounds 
round starts back back transmission packets current window size 
packets falling congestion window sent back back manner packet sent ack received packets 
ack reception marks current round round 
model duration round equal round trip time assumed independent window size 
assumed time needed send packets window smaller round trip time 
ffl assume losses different rounds independent 
packet round lost assume packets round lost 
defined probability packet lost packet round preceding packet round lost :10.1.1.143.9137
sending rate formula analytic expression average gaimd sending rate derived see appendix derivation ff fi rtt rtt gammafi ff fi min gammafi ff observe formula terms denominator td ff fi rtt rtt gamma fi ff fi ff fi min gamma fi ff derivation appendix know denominator consists term td ff fi congestion indications triple duplicate acks note td ff fi depend second term ff fi added congestion indications timeouts triple duplicate acks note ff fi directly depend rtt expressions observe loss rate small td ff fi ff fi td ff fi dominates ff fi sending rate mainly determined td ff fi increases ff fi larger 
define min gamma fi ff note middle term ff fi derivation appendix know approximates probability loss timeout 
expression note small probability timeout low 
increases probability timeout increases rapidly 
consider sending rate varies parameters rtt ff fi 
obvious equation sending rate decreases increasing rtt fi increased td ff fi ff fi decrease leading higher sending rate 
ff increased td ff fi ff fi decrease leading higher sending rate 
furthermore observe fi sending rate formula valid 
ff approaches denominator equation goes infinity sending rate goes 
lastly note equation reduces known tcp formulas instantiate ff fi ignore ff fi term obtain rtt tcp rtt rtt bp formula derived 
include ff fi term rtt rtt bp min bp formula derived :10.1.1.143.9137
formula subsumes formulas special cases 
formula validation tested formula equation extensively ns network simulator 
conducted experiments lan environments 
cases accuracy formula respectable wide range ff fi loss rate 
purpose validation experiments section answer questions ffl formula accurate 
range loss rate accurate 
ffl statistical mean sending rate variations significant ffl general trend formula loses accuracy 
simulation setup simulation topology chose results known single bottleneck dumbbell shown 
conducted simulations topologies results similar 
experiments discussed section bottleneck link bandwidth fixed mbps propagation delay ms 
tcp tcp gaimd sn gaimd mbps ms tcp tcp gaimd gaimd rn simulation topology conducted experiments link bandwidths propagation delays results similar 
simulations access links sufficiently provisioned ensure packet drops delays due congestion occur bottleneck link 
included types flows experiments 
type gaimd flows 
see sending rate variations placed gaimd flows 
comparison purposes placed tcp reno flows 
dominant traffic internet web traffic believe important model effects competing web traffic short tcp connections udp flows 
reported www related traffic tends self similar nature 
shown self similar traffic created udp sources times drawn heavy tailed distribution pareto distribution 
chose udp flows third type traffic 
experiments set mean time second mean time seconds 
time source sends kbps 
shape parameter pareto distribution set 
experiments varied number sources create loss rate 
aspect simulations worth mentioning start flows 
avoid phase effects assign small random propagation delays access links start flows randomly :10.1.1.41.7640
experiments section simulation run seconds 
loss rate approximated dividing number times gaimd flow tcp flow reduces window size total number packets sends 
notice estimation loss rate lower bound loss rate defined model derivation 
consequently see formula overestimate give upper bound sending rate 
predication accuracy evaluate predication accuracy formula 
measure accuracy ratio predicated sending rate actual sending rate 
test validity range formula fi vary ff 
ff fi pair vary number flows create loss rate 
figures demonstrate predication accuracy fi 
bottleneck link droptail link 
figures averages loss rates round trip times timeouts gaimd flows experiment calculate predicated sending rate experiment 
actual sending rates gaimd flows averaged obtain average actual sending rate 
figures show ratio calculated average sending rate equation actual average sending rate 
observe figures wide range ff fi formula predications pretty close actual sending rate loss rate 
gaimd model predication accuracy beta droptail loss indication rate alpha predication actual measurement predication accuracy fi droptail consider impact loss patterns accuracy formula 
analytic model assume losses different rounds independent ii losses round correlated packet lost packets round lost 
droptail router correlated loss assumption quite reasonable 
see potential impact loss patterns repeat experiments red link 
repeats experiment uses red link 
comparing see loss patterns large impact accuracy formula 
gaimd model predication accuracy beta droptail loss indication rate alpha predication actual measurement predication accuracy fi droptail gaimd model predication accuracy beta droptail loss indication rate alpha predication actual measurement predication accuracy fi droptail sending rate variation derived mean value sending rate random process expect see higher variations sending rate loss rate increases 
illustrate effect subsection 
addition plotting predication accuracy figures show predication accuracy gaimd flows ff fi ff fi droptail red links 
observe figures increasing loss rate sending rate variations increase 
figures see loss rate predication accurate sending rate variance reasonably small 
gaimd model predication accuracy beta red loss indication rate alpha predication actual measurement predication accuracy fi red loss indication rate gaimd model predication accuracy alpha beta droptail gaimd mean tcp mean predication actual measurement loss indication rate gaimd model predication accuracy alpha beta red gaimd mean tcp mean variations sending rate ff fi droptail red loss indication rate gaimd model predication accuracy alpha beta droptail gaimd mean tcp mean predication actual measurement loss indication rate gaimd model predication accuracy alpha beta red gaimd mean tcp mean variations sending rate ff fi droptail red major trend observe figures sending rate formula tends overestimate loss rate high ff fi parameters aggressive 
desire accurate sending rate model note applications formula require high accuracy consistency 
example purpose formula compare sending rates ff fi pairs apply formula long amount inaccuracy consistent 
particularly interested relative predication accuracies gaimd tcp flows major objective formula derive tcp friendly gaimd flows 
predication accuracy gaimd flow similar predication accuracy tcp flow formula compare sending rates gaimd flow tcp flow 
figures shown predication accuracy comparison tcp flows 
observe overestimates gaimd tcp similar experiments conducted 
summary validation experiments show formula reasonably accurate wide range ff fi loss rate high 
loss rate sending rate variance small formula gives accurate predication sending rate gaimd flow 
tcp friendly gaimd sending rate formula gaimd flow observe possible ff fi pairs yield sending rate 
particular interest ff fi pairs approximately sending rate tcp flow 
call ff fi pairs tcp friendly curve 
utilizing equation try get tcp friendly curve selecting ff fi ff fi rtt rtt note free variable equation 
way derive ff fi derived expression 
implies measuring select ff fi values equality holds equations td ff fi ff fi case solution ff fi 
propose relax constraint trying match rates specifically methods determine tcp friendly ff fi 
ffl td tcp friendly curve simplest case try match term td ff fi td ff fi rtt td rtt canceling common variables rtt sides squaring get gamma fi ff fi gamma rearranging ff gamma fi fi interesting see equation fi ff fi ff 
stable parameters pairing sense 
formula derivation validation know compared ff fi td ff fi important increases 
may better try match ff fi term 
second equation determine tcp friendly ff fi obtained follows 
ffl tcp friendly curve ff fi canceling common variables sides gamma fi ff gamma rearranging get ff gamma fi notice fi ff fi ff pairing previous method 
ffl error minimizing tcp friendly curve previous approaches considering terms denominator equation time 
consider terms optimization find ff fi mismatch gaimd tcp rates minimized range loss rates 
formally define cost function fi ff fi fi fi fi fi ff fi gamma fi fi fi fi fi dp function allows loss rates important weight optimization 
consider simple function gives weight loss rate threshold value loss rate higher threshold gets weight 
shows shape weight function 
threshold weight function shows fi ff fi rtt weight function threshold varying 
note fi ff defined bottom optimal ff fi easy find 
observe trend weight function threshold increases optimal ff increases 
fi case ff increases weight function threshold changed 
shows tcp friendly curves obtained methods described 
interesting observations 
observe curve alpha error integrals beta threshold threshold threshold threshold threshold threshold threshold error integral function ff determined td ff fi higher fi fi larger 
second see tcp friendly ff determined ff fi close determined optimization weight function threshold 
propose equation get tcp friendly ff fi want error minimization loss rate 
alpha beta tcp friendly curves threshold threshold threshold threshold threshold td tcp friendly curves shows ratios sending rates gaimd tcp reno different values tcp friendly ff determined methods fi fixed 
observe low loss rate gaimd flow ff determined receive higher bandwidth tcp reno flow ff determined td receive lower bandwidth 
differences diminish loss rate higher 
factor need consider determining ff compared gaimd tcp reno 
variants tcp newreno sack tcp vegas achieve higher bandwidth tcp reno 
reasonable select ff somewhat aggressive tcp reno low loss rate see section tcp sack reduce advantage gaimd ff determined 
observe loss rate high ratios converge essentially loss indications timeouts parameters ff fi longer play important role 
see section high loss rate tcp receives bandwidth gaimd aggressive window increasing behavior 
shows formula loses accuracy loss rate high 
ratio loss rate sending rate relative tcp different loss rate beta threshold alpha threshold alpha threshold alpha td alpha alpha ratios gaimd flow sending rate tcp sending rate closer look tcp friendliness previous subsections derived tcp friendly curves equation 
subsection provide intuitive explanation gaimd flow tcp friendly 
shows evolution window sizes gaimd flow ff fi tcp flow round trip time 
timeout considered 
observe trace converge equal window size curve 
means flows different control possibility adaptively change ff measuring loss rate 
tcp window size pkt window trace capacity line equal window size window size changing trace parameters equal sending rate time 
observe window size trace crosses equal window size curve 
particular trace left equal window size curve gaimd flow larger window size send packets 
hand trace right equal window size curve tcp flow send packets 
long run bandwidth 
observe oscillation range gaimd window smaller tcp indicates rate fluctuations gaimd flow smaller 
experimental evaluation section experimental results particular gaimd ff fi 
referred gaimd 
study performance mainly perspective tcp friendliness 
results tcp friendly pairs ff fi similar 
experiments section topology 
types flows tcp reno flows gaimd flows 
number varied 
simulation run seconds 
tcp friendliness analytic model see loss rate major impact sending rate 
evaluated tcp friendliness gaimd wide range loss conditions 
experiment parameters control loss rate number flows bottleneck link bandwidth 
normalized sending rate total number gaimd tcp flows droptail link tcp reno gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps droptail bottleneck link reno normalized sending rate total number gaimd tcp flows droptail link tcp reno gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps droptail bottleneck link reno figures show droptail bottleneck link normalized average fair share link bandwidth 
sending rates gaimd tcp flows sending rates individual flows 
observe low loss rate mbps link mbps link flows gaimd flows receive bandwidth tcp flows 
expected 
higher loss rate mbps link flows tcp flows receive higher bandwidth gaimd flows 
seen consistently experiments high loss rate tcp flows receive higher bandwidth tcp friendly gaimd flows 
explanation tcp reno increases aggressively high loss tcp friendly gaimd ff 
gaimd smaller reduction fi play important role congestion window size small high loss 
observation figures variance individual flow rates higher mbps link mbps link 
expected seen sending rate variance increases loss rate increase 
normalized sending rate total number gaimd tcp flows red link tcp reno gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps red link reno consider effects loss patterns tcp friendliness gaimd 
figures repeat experiments red links 
comparing figures observe red droptail links tcp receives higher bandwidth gaimd 
verified experiments appears random early dropping red protect tcp traffic responsive traffic gaimd 
third set experiments competing tcp flows implement tcp sack tcp reno 
generally assumed reno generates dominant traffic current internet operating systems support tcp sack example linux kernel supports tcp sack normalized sending rate total number gaimd tcp flows red link tcp reno gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps red link reno default 
think important evaluate tcp friendliness gaimd competing tcp sack 
experimented case gaimd tcp sack reno 
case gaimd aggressive 
normalized sending rate total number gaimd tcp flows droptail link tcp sack gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps droptail link tcp sack figures repeat experiments figures competing tcp flows sack reno 
seen results similar cases competing flows reno 
observe crossover point lower loss rate flows versus flows mbps droptail link 
figures repeat experiments figures normalized sending rate total number gaimd tcp flows droptail link tcp sack gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps droptail link tcp sack competing reno flows replaced sack flows see results similar previous cases 
normalized sending rate total number gaimd tcp flows red link tcp sack gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps red link tcp sack summarize see gaimd flows compete tcp reno tcp sack flows highly friendly manner wide range loss rates droptail red queueing disciplines 
rate fluctuations having investigated long term sending rate fairness evaluate transient behavior gaimd 
study particularly interested smoothness normalized sending rate total number gaimd tcp flows red link tcp sack gaimd gaimd gaimd mean tcp tcp mean normalized sending rates mbps red link tcp sack sending rate convergence speed fair state response congestion 
observe gaimd flow smaller value fi faster response congestion rate fluctuation higher 
due space limitation detailed discussion findings 
shows time traces sending rates gaimd flow tcp flow gaimd flows tcp reno flows share red link mbps bandwidth ms propagation delay 
point calculated time interval ms times roundtrip time 
observe visually gaimd sending rate relatively smooth compared tcp 
time sec sending rate changes mbps red link tcp reno flow gaimd flow gaimd tcp sending rate traces mbps red link implementation gaimd straightforward implement need change parameters tcp reno 
note need distinguish loss slow start case window size dropped half fi 
summary related aimd proposed chiu jain 
design principle decbit tcp :10.1.1.15.3262
consider implementing tcp congestion control video services 
uses standard tcp adjustment rule tcp rapid rate changes 
rhee proposed tear protocol tcp emulation receivers 
tear receiver emulates congestion modifications tcp sender 
transform window scheme rate scheme exponentially weighted moving average window size divided estimated round trip time 
time writing access details tear comments 
type congestion control additive increase multiplicative decrease form applying congestion window 
rate adaption protocol rap uses aimd rate control scheme regular acknowledgments sent receiver sender uses detect lost packets estimate rtt :10.1.1.154.9133
authors ratio long term short term averages rtt fine tune sending rate packet basis 
addition change window approach rate approach rap includes mechanism sender sending absence feedback receiver 
rap account impact retransmission timeouts 
aimd protocol dla rtp reports receiver estimate loss rate round trip times 
equation congestion control approaches sender uses equation specifies allowed sending rate function rtt packet drop rate adjusts sending rate function measured parameters :10.1.1.33.2192
stability particular approach understood 
measuring loss rate turns complex issue especially tradeoff responsiveness accuracy considered 
considered general version aimd congestion control increase value decrease ratio congestion window adjustment parameters ff fi respectively 
derived simple formula mean sending rate gaimd flow function ff fi loss rate mean round trip time mean timeout value number packets acknowledged ack 
conducted extensive experiments validate sending rate formula 
formula quite accurate loss rate 
simple relationship ff fi gaimd flow gaimd flow approximately sending rate tcp flow path conditions 
results simulations tcp friendly gaimd flows ff fi compete bandwidth tcp reno flows tcp sack flows droptail link red link 
gaimd flows highly tcp friendly 
furthermore fi gaimd flows reduced rate fluctuations compared tcp flows 
currently investigating tradeoffs rate fluctuation responsiveness convergence speed 
report results 
acknowledgment authors steve li valuable discussions 
gaimd sending rate modeling derivation fairly straightforward extension similar formula derived tcp padhye firoiu towsley kurose :10.1.1.143.9137
various assumptions simplifications section 
congestion indications exclusively triple duplicate acks consider case congestion indications exclusively type triple duplicate ack td 
consider gaimd flow starting time 
time define number packets transmitted interval sending rate interval 
note number packets sent unit time regardless eventual fate received 
represents sending rate connection 
define long term steady state gaimd rate lim lim define td period tdp interval time td congestion indications 
ith td period define random variable number packets send period duration period window size period 
consider fw markov regenerative process rewards fy known order derive expression long term steady state gaimd sending rate derive expressions means consider td period 
td occurs tdp ends tdp packets sent number rounds acked lost packet triple duplicate period tdp td period starts immediately td congestion indication congestion window size start ith td period equal fiw gamma round window incremented ff denote packet lost tdp round loss occurs 
packet gamma packets sent additional round td congestion indication occurs current td period ends 
total gamma packets sent rounds 
follows gamma derive consider random process fj number packets sent td period including packet lost 
assumption packets lost round independently packets lost rounds fj sequence independent identically distributed random variables 
loss model probability equal probability exactly gamma packets successfully acknowledged loss occurs gamma gamma mean gamma gamma pk plugging gamma derive consider tdp define ij duration jth round tdp duration tdp ij consider round trip time ij random variables assumed independent congestion window size independent round number follows henceforth rtt denote average value round trip time 
derive expression consider evolution function number rounds 
simplify exposition assume fiw ffx integers 
observe ith td period window size increases fiw gamma see 
increase linear slope ff fiw gamma ffx fact packets transmitted tdp expressed ffx gamma fiw gamma ff fiw gamma ffx gamma fiw gamma ffx gamma fiw gamma gamma number packets sent round 
fw markov process stationary distribution obtained numerically 
simpler approximate solution obtained assuming fx fw mutually independent sequences random variables 
assumption follows ff gamma fi take expectations sides compare gamma fie gamma consider number packets round uniformly distributed plugging solve ff gamma fi gamma fi ff gamma fi gamma fi ff gamma fi gamma simplify ff gamma fi small value ff gamma fi derive expression gamma fi ff ff gamma fi ff fi ff gamma fi ff fi gamma fi ff fi gamma simplify gamma fi ff fi consider derivation 
plugging expression rtt rtt ff gamma fi ff fi ff gamma fi ff fi gamma fi ff fi gamma gammap gammap ff gammafi gammafi ff gammafi gammafi ff gammafi gammap rtt ff gammafi ff fi ff gammafi ff fi gammafi ff fi gammap 
simplify rtt ff fi gamma fi congestion indications triple duplicate acks timeouts extend analysis include timeouts 
derivation section :10.1.1.143.9137
include completeness 
previous section considered gaimd flows congestion indications due triple duplicate acks 
certain circumstances majority window decreases due timeouts 
model capture timeout congestion indications 
timeout occurs packets acks lost duplicate acks received 
sender waits period time denoted retransmits unacknowledged packet 
timeout congestion window reduced packet resent round timeout 
retransmission unsuccessful period timeout doubles doubling repeated unsuccessful retransmission reached timeout period remains constant shows trace tdp timeouts 
td trace tdp timeouts denote duration sequence timeouts td time interval consecutive timeout sequences 
define td define number packets sent sequence random variables extend definition td period defined previously include periods starting congestion indication periods td congestion indications 
number td periods interval td jth td period interval td define ij number packets sent period ij duration period ij number rounds period ij window size period 
denotes number packets sent timeout sequence ij ij ij ij sequence random variables independent fy ij fa ij ij ij derive observe td time consecutive timeout sequences gamma td tdp ends 
follows td loss indications 
denote probability congestion indication tdp 
consequently qe qe ij ij depend timeouts means derived respectively 
need derive expressions 
rtt penultimate round round rtt time sequence number received packet lost packet ack td occurs tdp ends legend packet ack transmissions preceding loss indication consider consider round packets loss indication occurs round referred penultimate round see choose ack acks acknowledge individual packets acks delayed 
see analysis depend acks delayed 
current window size 
packet sent penultimate round 
packets acknowledged packets packet lost acked 
assume packet losses correlated round packet lost packets follow round 
packets lost 
packets acked packets sent round refer round 
round packet may loss say packet assumption packet loss correlation mandates packets lost round 
packets successfully sent round responded acks packet counted duplicate acks 
acks delayed number duplicate acks equal number successfully received packets round 
number acks higher td indication occurs occurs 
cases current period ends 
denote probability packets acked round packets sequence losses round 
gamma gamma gamma denote probability packets acked sequence round packets sent rest packets round lost 
ae gamma gamma probability loss window size ae algebraic manipulation min gamma gamma gamma gamma gamma gamma gamma gamma observe lim numerical approximation min probability congestion indication approximate 
consider derivations 
sequence tos occurs gamma consecutive losses loss followed successfully transmitted packet 
consequently number tos sequence geometric distribution gamma gamma calculate mean kp gamma consider average duration timeout sequence excluding retransmissions calculated similar way 
know timeouts sequence length gamma immediately timeouts having length duration sequence timeout ae gamma gamma mean gamma plug gammap gammap rtt gammap plug simplify ff fi rtt rtt gammafi ff fi min gammafi ff allman paxson stevens 
tcp congestion control ietf rfc april 
brakmo malley peterson 
tcp vegas new techniques congestion detection avoidance 
proceedings acm sigcomm vancouver canada may 
cen pu walpole 
flow control internet streaming 
multimedia computing networking jan 

chiu jain 
analysis increase decrease algorithms congestion avoidance computer networks 
computer networks isdn systems 
clark shenker zhang 
supporting realtime applications integrated services packet network architecture mechanism 
acm sigcomm july 
clark wroclawski 
approach service allocation internet internet draft 
fall floyd 
simulation comparisons tahoe reno sack tcp 
acm communications review july 
floyd fall :10.1.1.112.5121
promoting congestion control internet 
ieee acm transactions networking august 
floyd handley padhye widmer 
equation congestion control unicast applications 
proceedings acm sigcomm august 
floyd jacobson :10.1.1.41.7640
traffic phase effects packet switched gateways 
internetworking research experience sep 
golestani 
fundamental observations multicast congestion control internet 
proceedings ieee infocom 
jacobs eleftheriadis 
providing video services networks quality service guarantees 
world wide web consortium workshop real time multimedia web 
jacobson 
congestion avoidance control 
proceedings acm sigcomm 
jacobson 
modified tcp congestion avoidance algorithm 
note sent mailing list 
jain ramakrishnan chiu :10.1.1.15.3262
congestion avoidance computer networks connectionless network layer 
technical report dec tr digital equipment august 
mahdavi floyd 
tcp friendly unicast rate flow control 
technical note sent interest mailing list 
mathis semke mahdavi ott 
macroscopic behavior tcp congestion avoidance algorithm 
acm computer communication review july 
rhee 
tcp emulation receivers tear presentation rm meeting nov 
padhye firoiu towsley kurose :10.1.1.143.9137
modeling tcp throughput simple model empirical validation 
proceedings acm sigcomm vancouver canada 
padhye kurose towsley 
model tcp friendly rate control protocol 
nossdav 
park kim crovella 
relationship file sizes transport protocols self similar network traffic 
icnp 
rejaie handley estrin :10.1.1.154.9133
rate congestion control mechanism realtime streams internet 
ieee infocom mar 
schulzrinne 
loss delay adjustment algorithm adaption scheme 
nossdav 
stevens 
tcp ip illustrated volume protocols 
addison wesley 
tan zakhor :10.1.1.33.2192
real time internet video error resilient scalable compression tcp friendly transport protocol 
ieee acm transactions multimedia may 
thompson miller wilder 
wide area internet traffic patterns characteristics 
ieee network magazine november 
thompson 
ip multicast available www real com january 
turletti bolot 
experiments layered transmission scheme internet 
proceedings ieee infocom san francisco california mar 
vicisano rizzo crowcroft 
tcp congestion control layered multicast data transfer 
proceedings ieee infocom new york new york mar 
willinger taqqu wilson 
self similarity high variability statistical analysis ethernet lan traffic source level 
proceedings acm sigcomm 
yang lam 
transient behaviors gaimd congestion control 
progress 

