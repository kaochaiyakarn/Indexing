narratives programs ray reiter department computer science university toronto toronto canada reiter cs toronto edu representing narratives reasoning prominent theme logical formalisms dynamical systems :10.1.1.39.226
existing literature provides limited concept narrative examples concern linear action sequences including incomplete information action occurrence times 
point departure observation narratives include complex constructions including nondeterminism loops recursive procedures 
propose full generality narratives best viewed programs 
cases situation programming language golog suitable purpose 
setting define means query narrative discover task formally identical proving correctness programs studied computer science 
general task hopelessly intractable focus procedure free narrative programs wide class programs queries prove regression approach query evaluation correct 
describe prolog implementation ideas 
current logical theories actions divided broad categories narrative approaches features fluents event calculus relatives rely linear temporal logics situation approaches families action languages various dialects situation calculus provide branching futures :10.1.1.39.226
reiter observed classes action theories require quite different reasoning mechanisms treatment planning problems abduction deduction 
similarly differ represent reason narratives stories action occurrences including possibly temporal properties 
narrative approaches treat narratives clean straightforward way reasoning consists logical deduction knowledge base assertions narrative action occurrences temporal relations 
situation approaches suffer comparison judging existing literature require elaborate mechanisms usually extending basic ontology include concept action occurrence actual path tree histories see different viewpoints :10.1.1.39.226
rich account narratives hypothetical reasoning requires enriched ontology see 
regardless approach existing literature provides limited concept narrative examples concern linear action sequences including incomplete information action occurrence times 
propose richer notion specifically suggest full generality narratives best viewed nondeterministic programs investigate suitability situation calculus programming language golog purpose 
setting define means query narrative discover task formally identical proving correctness programs studied computer science 
general task hopelessly intractable focus procedure free narrative programs wide class programs queries prove regression approach query evaluation correct 
describe prolog implementation ideas 
consequence narratives perspective cleaner account narratives situation theories action 
general notion narrative profitably incorporated narrative theories actions 
narratives golog programs central intuition wish convey narratives general forms programs 
consider example stories blocks world representations programs 
pat moved block moved table 
move able stands standard sequence operator conventional programming languages 

pat moved block table moved 
able move nondeterministic operator chooses arbitrary argument action expression 
program means nondeterministically choose move table move 

pat moved block block block don know moved block table 
move move ont able 
move introduced new operators means nondeterministically choose actions perform oe 
means test truth value logical expression oe 

pat cleared blocks table putting floor 
ont able ont able 
loor 
pat towers table 
recursive procedure proc ont able 
able endproc 
pat moved table time time moved block 

move able added time parameter action terms suggested situation calculus simplify notation suppress actors pat action terms 

cheated bit representing narrative recognizing second action mentioned natural language version preceded action mentioned 
take separate nontrivial problem mechanically translate natural language narrative program especially getting temporal precedences right address issue 

pat moved observed block table moved move ont able 
move treat observational actions test actions 
similarly represent narrative descriptions dark night pat moved block table test actions dark 
able reason initially odd looking decision clear formalize suitable programming language representing narratives define notion querying narrative 
purpose examples argue narratives complicated things simple sequences actions complexity programs including nondeterminism loops recursive procedures 
kinds programs serve represent narratives mean query narrative viewed program 
proposal take situation calculus programming language golog suitable representation narratives appeal golog semantics purposes querying narratives 
brief description golog 
golog golog language defining complex actions terms repertoire primitive actions axiomatized situation calculus 
provides standard standard control structures algol languages 
just seen number examples golog programs control structures intuitive semantics 
golog formal semantics specified introducing abbreviation ffi ffi program situation terms 
ffi best viewed macro expands second order situation calculus formula formula says sit uation reached situation executing sequence actions specified ffi note programs may nondeterministic may multiple executions terminating different situations 
defined inductively structure argument follows 
primitive actions ff primitive action term ff def oss ff ff 
test actions oe situation suppressed logical expression oe def oe oe denotes result restoring situation argument situation suppressed fluents mentioned oe 

sequence ffi ffi def ffi ffi 
nondeterministic choice actions ffi ffi def ffi ffi 
nondeterministic choice action arguments ffi def ffi 
procedure calls predicate variable arguments ones sort situation def 
blocks local procedure declarations ffi endproc delta delta delta proc pn ffi endproc ffi def pn ffi oe oe ffi control structures conditionals loops defined terms constructs test prog prog def test 
prog test 
prog define loops introduce nondeterministic iteration operator program means program times program def proc true 
program endproc loops defined terms operator test program endwhile def test 
program test 
golog programs evaluated relative background theory actions specifying particular application domain 
specifically background action theory ffi golog program evaluation ffi relative defined task establishing entailment ffi binding existentially quantified variable obtained side effect proof constitutes execution trace ffi example narrative example move move ont able 
move oss move move oss move move ont able oss move move logically equivalent formula example normal form cast 
normal forms play important role consider implement system querying narratives 
oss move ont able move oss move move move move oss move ont able move oss move move move move reasoning narratives narrative description action occurrences world 
take central reasoning task narrative determine resulting world 
task major components 

need infer effects world action occurrences 
includes actions frame problem taken account 
need background domain specific theory characterizes action effects solves frame problem 

observational actions descriptions example provide additional information world taken account answering queries narrative 

narratives convey implicit information world virtue action occurrence 
example narrative claims move performed point action performed action move possible 
infer world point action occurrence clear 
information needs extracted narrative explicit purposes answering queries narrative 
part background theory require axioms specifying action preconditions 
important note convention narratives assume way world conveyed narrative immediate context 
example faced example contextual justification assume available blocks 
assume particular initial locations blocks example initially table 
words narratives describe open worlds assume complete information initial situation 
things observation precludes simple strips action representations describing reasoning narratives 
definition query 
query situation calculus formula free variable situation variable definition querying narrative query set situation calculus axioms specifying underlying domain application narrative viewed golog program 
answer narrative relative iff oe answer iff answer 
notice especially form querying narrative formally identical problem proving properties programs normally understood computer science 
simply asking terminating situations program property news automating query evaluation narratives proving properties programs notoriously difficult requiring mathematical induction programs loops recursion general computational account problem 
reason shall limit follows procedure free programs purposes providing implementation class narratives 
implementation foundations provide theoretical foundations implementing querying narratives underlying axioms form basic action theory golog narrative program procedure free 
basic action theories concern axioms actions effects particular syntactic form 
definition basic action theories basic action theory form sigma ss ap una ds ffl sigma foundational axioms situations 
play role omit 
ffl ap set action precondition axioms action function form oss pi pi formula free variables quantify situations mention predicate symbol oss term sort situation mentions ffl ss set successor state axioms fluent 
syntactic form phi phi formula free variables quantify situations mention predicate symbol oss term sort situation mentions axioms embody solution frame problem deterministic actions 
ffl una set unique names axioms action function symbols 
ffl initial database set order sentences sentence quantifies situations mentions oss term sort situation mentioned sentences 
ds function initial theory world 
example successor state action precondition axioms blocks world basic action theory implementation described 
action precondition axioms oss move clear clear oss able clear ont able successor state axioms clear move able clear move move able move ont able able ont able move unique names axioms actions move able move move oe able able oe regression basic action theories regression single important theorem proving mechanism situation calculus provides systematic way establish basic action theory entails called regressable sentence 
definition concrete situation terms 
inductively defined concrete situation term oe concrete situation term ff action term ff oe concrete situation term 
give successor state axioms functional fluents space limitations discuss 
definition regressable formulas 
regressable formula situation calculus order formula property situation term mentioned concrete atom form oss ff oe mentioned ff form ary action function symbol terms essence regressable formula situation terms rooted tell inspection term exactly actions involves 
necessary able tell actions just 
addition regressable formula mentions oss atom tell inspection atom exactly action function symbol occurring argument position example move action 
intuition underlying regression suppose want prove regressable sentence entailed basic action theory 
suppose mentions relational fluent atom ff oe successor state axiom 
substituting phi ff oe ff oe obtain logically equivalent sentence fluent atom ff oe involving complex situation term ff oe eliminated favour phi ff oe involves simpler situation term oe 
sense closer initial situation similarly mentions atom form oss oe action precondition axiom form eliminate atom replacing pi delta delta delta oe 
process replacing oss fluent atoms right hand sides action precondition successor state axioms repeated resulting goal formula mentions situation term regression mechanism repeatedly performs reduction goal ultimately obtaining logically equivalent goal situation term see precise definitions proof soundness completeness regression basic action theories 
procedure free narratives definition choice prenex form golog program choice prenex form iff form delta delta delta pm form ff delta delta delta ff assumed regressable poss atoms mentioned form 
ff primitive action test action association sequence operators right 
definition equivalence programs golog programs equivalent iff sentence valid definition procedure free programs golog programs defined procedure mechanism primitive actions tests sequence nondeterministic choice 
lemma effective procedure transforming procedure free golog program equivalent program choice prenex form 
proof repeatedly applying equivalence preserving transformations reductions possible 


new variable distinct variable mentioned denotes result substituting free occurrences programs ffi specifically choice prenex form define ternary relation ffi follows 
primitive actions ff primitive action term ff def oss ff ff ff ffi def oss ff ffi ff 
test actions oe situation suppressed logical expression oe def oe oe 
ffi def oe ffi 
nondeterministic choice actions ffi ffi def ffi ffi strictly speaking prove equivalence preserving transformations 
proofs straightforward omit details 

nondeterministic choice action arguments ffi def ffi lemma procedure free golog program mention choice operator variable sort action 
choice prenex form 
valid 

syntactic form oe delta delta delta oe oe concrete situation term regressable formula 
proof lemma equivalent valid 
suppose delta delta delta pm expansion rules golog programs section delta delta delta pm similarly rules expanding delta delta delta pm accordingly sufficient prove suppose program form ff delta delta delta ff ff primitive action term test action sequence operator associates right mentions free variables sort action 
suppose concrete situation term possibly free variables valid 
formula form oe oe concrete situation term regressable formula 
prove induction base case just ff ff test action oe 
ff primitive action term 
case ff oe ff concrete situation term 
free variable action variable course program may mention choice operator ranges domain objects actions situations examples section 
oe mentions atom form oss fi fi action variable form ary action function symbol terms oe regressable established base case ff test action 
establish base case ff primitive action 
free variable action variable ff form ary action function symbol terms ff oss ff ff ff ff form concrete oss ff regressable ff concrete 
establishes remaining base case 
induction step assume result ff delta delta delta ff suppose ff primitive action term 
ff ff delta delta delta ff oss ff ff ff delta delta delta ff oss ff ff delta delta delta ff ff ff concrete 
argument base case oss ff regressable 
induction hypothesis ff delta delta delta ff ff ff delta delta delta ff ff ff delta delta delta ff ff formula form oe oe concrete 
result follows 
case ff test action similar 
example example formula displayed promised lemma 
theorem suppose basic action theory program satisfies conditions lemma 
suppose query property oe regressable oe concrete situation term 
loss generality assume bound variables distinct variables 
lemma oe iff una oe oe oe regressable formula 
regression operator 
proof choice prenex form oe iff lemma oe iff lemma oe delta delta delta oe oe iff oe oe iff bound variables different properties equality order logic oe oe hypothesis oe regressable oe concrete regressable lemma 
regression theorem pirri reiter oe oe iff ds una oe oe central computational result 
suitable conditions program query narrative query evaluation done regression performing regression steps theorem proving relative initial database unique names axioms actions 
foundational axioms situation calculus action precondition successor state axioms required course regression steps 
implementation implemented eclipse prolog narrative compiler query evaluator theorem procedure free golog programs briefly describe 
basic action theory query narrative task establish entailment oe 
theorem equivalent establishing una oe oe 
leading universal quantifiers obtain equivalent theorem proving task full program supporting code narratives blocks world axioms example available request author 
ds una sk oe oe sk sk oe sk results substituting distinct fresh skolem constants free occurrences oe respectively 
theorem proving task equivalent establishing ds una fr sk oe sk implementation components narrative compiler query processor theorem prover 
narrative compiler accepts narrative program described lemma performs steps 
convert choice prenex form applying transformations specified proof lemma 
determine obtain sentence 

replace variables mentioned oe skolem constants yielding sk oe sk 

regress sk convert clausal form 

transform sentences clausal form 
unique names axioms converted clausal form represented suitable simplification rules regression routine theorem prover described 
typically ds include domain state constraints relativized blocks world consist oe oe oe result steps distinct databases clauses 
query processor query processor takes query substitutes oe sk regresses oe sk converts clausal form adds resulting clauses th database created narrative compiler 
establish entailment free variable mentioned query bound variables assumed distinct see statement theorem way oe mention variables oe mentions variables 
resulting sets clauses shown unsatisfiable computation performed theorem prover 
theorem prover relatively unsophisticated incomplete unit resolution system subsumption clause elimination 
incorporates limited form equality reasoning 
theorem prover works passes 
tries pure unit resolution refutation 
doing takes equality account follows derives ground unit clause form uniformly substitutes current set clauses performs routine simplifications replacing atoms form true false 
find refutation way exits success 

theorem prover tries little bit harder performing case analysis 
repeatedly selecting splitting non unit clause non ground literal attempting unit resolution refutation cases 
case analysis succeeds splittable clause exits success gives 
example program execution output obtained compiling ongoing narrative example issuing query ont able example compiling querying narrative 
eclipse compile move move pi ontable move 
time sec 
eclipse prove ontable 
incorporate time implementation needed examples section 
require special purpose temporal reasoning mechanisms theorem prover primary objective demonstrate basic feasibility approach 
cpu times sun enterprise ultra mhz processors gb ram 
case move sk move unit resolution fails 
trying harder 
splitting sk sk succeeds 
case move sk move unit resolution fails 
trying harder 
splitting sk sk succeeds 
proof succeeds time sec 
discussion far avoided discussing concurrency required example simple narrative pat moved blocks table 
way represent program interleaving able able able able treatment able action course grained precludes possibility actions overlapping 
finer grained representation obtained introducing process fluents moving block table instantaneous actions initiate process terminate see discussion 
representational device hand write golog program describes possible interleavings move actions overlap preceding partial overlap starting starting total inclusion starting starting 
combinatorics bad simple example quickly get hand interesting examples mccarthy moscow 
impossible temporal ordering programs underspecified narrative need account concurrent execution arbitrary golog programs 
exactly programming language congolog provides accommodate concurrency generalize narratives programs viewpoint representing narratives congolog programs 
define result querying narrative appeal congolog rans predicate definition golog relation 
querying narrative formally identical proving properties concurrent programs 
issues explored 
theoretical implementation results procedure free programs 
difficult incorporate non recursive procedures account simply unfolding procedure calls 
course sense unfolding guaranteed terminate recursive calls 
definition loops section requires recursion approach deal loops 
providing computational foundations loops recursive procedures requires reasoning program postconditions appears regression suitable mechanism 
cardinal sin omission glossed translates natural language narrative program 
raises variety issues nonmonotonic reasoning concerned minimizing action occurrences exactly techniques adapted automatic generation programs completely open problem 
incidentally consequence commitment situation calculus action logic adopting view narratives programs confront problem 
allen 
general theory action time 
artificial intelligence 
baral 
formalizing narratives nested circumscription 
artificial intelligence 
gelfond lifschitz 
action languages 
linkoping electronic articles computer information sciences 
www ep liu se ea cis 
de giacomo lesp erance levesque 
reasoning concurrent execution prioritized interrupts exogenous actions situation calculus 
proceedings fifteenth international joint conference artificial intelligence pages nagoya japan 
karlsson 
happen narratives hypothetical reasoning 
cohn schubert editors principles knowledge representation reasoning proceedings sixth international conference kr pages 
morgan kaufmann publishers san francisco ca 
kowalski sergot 
logic calculus events 
new generation computing 
levesque reiter lesp erance lin scherl 
golog logic programming language dynamic domains 
logic programming special issue actions 
mccarthy 
situations actions causal laws 
technical report stanford university 
reprinted semantic information processing minsky ed mit press cambridge mass pp 

mccarthy costello 
combining narratives 
cohn schubert editors principles knowledge representation reasoning proceedings sixth international conference kr pages 
morgan kaufmann publishers san francisco ca 
miller shanahan 
narratives situation calculus 
journal logic computation special issue actions processes 
pinto reiter 
reasoning time situation calculus 
annals mathematics artificial intelligence september 
javier pinto 
occurrences narratives constraints branching structure situation calculus 
journal logic computation 
pirri reiter 
contributions metatheory situation calculus 
journal acm 
reiter 
frame problem situation calculus simple solution completeness result goal regression 
vladimir lifschitz editor artificial intelligence mathematical theory computation papers honor john mccarthy pages 
academic press san diego ca 
reiter 
natural actions concurrency continuous time situation calculus 
aiello doyle shapiro editors principles knowledge representation reasoning proceedings fifth international conference kr pages 
morgan kaufmann publishers san francisco ca 
reiter 
sequential temporal golog 
cohn schubert editors principles knowledge representation reasoning proceedings sixth international conference kr pages 
morgan kaufmann publishers san francisco ca 
sandewall 
features fluents representation knowledge dynamical systems 
oxford university press 
shanahan 
solving frame problem mathematical investigation common sense law inertia 
mit press 
