symbolic abstractions automata marchand irisa inria rennes campus univ de beaulieu rennes france fr fr keywords intensional transition systems polynomials symbolic bisimulations model reduction 
describe design abstraction methods symbolic techniques classical abstraction sae fusion considered 
general method automata basis state fusion criterion derived equivalence relations bisimulation partitions 
introduce kinds abstraction falling category abstraction restriction particular study controller synthesis methodology achieve restriction synthesis 

algorithms offer wide range techniques analyze behavioral properties systems state explosion phenomenon caused un usability real systems 
observation led kinds proposals approaches called modular clarke larsen clarke clarke kurshan symbolic burch mcmillan hand techniques partial order reductions godefroid peled clarke kurshan abstractions bensalem cousot cousot hand 
practical cases methods perform effective verification 
show techniques incompatible consider wide family abstraction methods state fusion symbolic philosophy advantage methodologies symbolic system description state fusion criterion 
equivalence relation states defined cally algorithm delivers symbolic description reduced system 
extend approach kind abstraction relying behavioral restriction symbolic controller synthesis applies natural way 
discrete event systems analysis control 
intensional labeled transition systems mathematical framework write finite field prime 
finite set distinct variables zk 
denote pz set polynomials variables zk coecients range recall pz ring 
polynomial pz associate set solutions sol pz sol de zl zk pz zl zk worthwhile noting pz zi zx evaluate zero 
pz instance sol sol zi 
write sol sol 
introduce quotient ring polynomial functions pz polynomials zi identified zero written short regarded set polynomial functions coecients degree variable lower 
possible define representative sol called canonical generator 
mention useful properties manipulate polynomials property polynomials pz sol sol pp defining lp px sol 
sol sol px sol sol sol sol pp 
shall px denote set pz ipi 
equal pl introduce existential universal abstractions quan polynomials variables 
shall write zip polynomial piz obtained instantiating occurrence variable zi value similarly define dual variable abstraction polynomials universal quantification computed pl zi pl zi pl zi solutions elements form zx zi zi zk zi zx zi zi zi zk sol 
polynomial implementation turns best known imple mentation memory computation performance polynomials decomposition lagrange polynomials leading ary decision diagrams data structures classical instance approach known shannon symbolic abstractions automata decomposition case associated binary decision dia grams bdd boolean functions bryant 
framework fall case 
polynomials encoded ternary decision diagrams dd marchand le actual implementation polynomial formal calculus system 
intensional transition system model dimensional intensional labeled transition system structure xn sets source target states vari ables ym set labels variables pg characterizes initial states pg describes legal transitions 
source state pg target state pg set sol denotes possible la transitions shall call ext corresponding extensional labeled transition system lts 

abstraction state fusion section devoted computation reduced system fusion state criterion 
assume criterion symbolic canonical surjection 
case reducing system straightforward 
explore means equivalence relation states partitions 

system reduction fusion criterion symbolic canonical surjection see definition explain define associated quotient 
definition assume xx xn 
say symbolic fusion criterion set fresh variables zi zl pz pz unique solution 
definition ol pg pgl ol defines surjective mapping pg pg define transition system states obtained gluing mapped element pg reduction de defined discrete event systems analysis control informally exists class en coded representative class encoded representative holds original system 
note initial states taken account defined poly nomial corresponding initial predicate reduced model obtained 
general behaviors state fusion criterion derived bisimulation equivalence case behavioral properties faithfully preserved reduction 

reduction modulo equivalence relation assume equivalence relation states ext symbolically represented pg xa 
xa 
xd copy explain construct corresponding state fusion criterion apply previous section techniques 
assuming number classes pt show compute dd say variables denoting state fusion criterion associated directly data structures decision diagrams dd 
intuitively start dd xd pg pg particular reorder variables xi xa vi call dd 
property path variables remaining sub dd variables xa denotes class traversal paths leads compute fly number classes enumerative phase worse case explore state space incrementally achieve computation introducing variables zi necessary 
idea algorithm root variable leaf trivial recursively go path variable xa reached 
call remaining sub dd xa 
property class 
provided know class encountered attach structure follows available hanging branch available 
case plugged available place 
introduce fresh variable zi top wait complete dd variables zx zi containing achieved plug second son zi 
reader refer case 
example built dds drawn triangles solid bold lines symbolic abstractions automata ones construction drawn dashed bold lines 
assume completed dd containing treated classes say call structure 
suppose new class encountered 
new variable needs introduced top awaits sub structures complete plugging underneath 
example structures containing cll achieved completed plugged 
final stage algorithm run completion remaining non allocated branches exist number classes form pt attaching leaf 
example suppose classes class remaining hanging branches structure point leaf 

particular cases equivalences bisimulations bisimulation relations milner park van glabbeek shown capture nice notion behavior bisimulation equivalence relation states labeled transi tion system lts enables perform particular state fusion abstraction 
behavioral properties system coincide original 
recall classical strong bisimulation handled symbolically 
definition park milner ltss tl strong bisimulation tl binary relation 
ql transition ql exists state vice versa discrete event systems analysis control bisimulations closed arbitrary unions exists greatest bisimulation tx written fol lowing 
assume iu tu iv tv 
algorithm gives symbolic computation greatest bisimulation algorithm define polynomial de compute stabilization defined canonical generator class vu vv call result 
theorem algorithm terminates uv extensional worlds ext su ext sv 
variant bisimulation 
weak delay branching considered likewise see details 

kinds state fusion criterion section explore means express state fusion criterion 
instance fusion criterion specified state partition characterized set logical propositions attached states 
cases model computation simplified px pk set polynomials xx 
xn ol pi ol pj uic ol pi py set polynomials symbolic representation state partition 
compared section done polynomial denotes equivalence class ci handled section 
number classes known advance construction dd immediate 
practical point view state partition derived set logical propositions states 
state variable values 
ii ii ii denote propositions states hi iff 
ii true state ii partition derived techniques apply set inj define polynomial hi ii 
corresponds maximal number equivalent classes need logp state variables zi define model 
symbolic abstractions automata 
abstraction restriction abstraction aims simplify model disallowing behaviors 
naive approach consist modifying structure automata removing set events set states 
restriction methods useful prove incorrectness systems general system shown violate safety property general 
standard approach consists modifying structure automata removing states transitions labeled fixed events 
symbolic counterpart techniques immediate resp 
denote set states resp 
events meant kept system symbolic restricted system defined resp 

general restrictions considered particular basis acceptance criterion remaining behaviors restricted system expressed temporal logic linear time temporal logic pltl manna pnueli 
approach considering general framework open synchronous systems events model composed subparts 
part denotes stimulus outside world part response system 
framework meaning restrict possible stimuli response disallowed spirit pioneer proposal ramadge wonham developed marchand le case synchronous systems symbolic techniques 
lines obtain acceptable behaviors set computation restriction composing original system additional equation constraints called controller 

framework consider open model form meaning lts transitions events split pair component called event furnished envi ronment system response system 
shall say admissible response situation short admissible solution polynomial de xt xt 
discrete event systems analysis control open shall consider restriction specifications called control objectives marchand le sorts acceptable behaviors system encountered states belong set call restriction specification invariance acceptable behaviors system execution possible reach set states call restriction specification global reachability 
possible formalisms proposed rigorously express specifications alternating time logic alur calculus kozen scope 

restriction principle restriction consists keeping suitable possible responses system situation select possible extensions current behavior 
proposed method performs static compu tation possible responses delivering constraints interpreted follows polynomial denotes set suitable initial states set suitable situation 
restricted system simply obtained 

computation algorithms assume open set states represented polynomial say 
possible compute symbolically set state response chosen reach step stimulus 
write set 
polynomial representation computed def vy kq computation invariance case obtained computing sequence polynomials ei ei ei init stabilization get say pre 
stabilization inevitable sequence decreases set states finite 
note sol prec 
defining pre vx pre symbolic abstractions automata analyzing result follows solution composed achieves restriction objectives behavior eventually exits analogous procedure apply case global reachability changing step compute sequence polynomials ei ei 
shows abstraction techniques supported symbolically advantage established approaches state explosion problem 
abstraction state fusion fully detailed examples abstraction restriction shown closely related controller synthesis issues restriction specifications persistence recurrence dealt similarly 
refer marchand le forthcoming report 
methods rely intensional models systems article taken dynamical equational systems finite field 
results generalized enlarged class models class order representable ones 
alur henzinger kupferman 

alternating time temporal logic 
lecture notes computer science 
bensalem lakhnech owre 

computing tions infinite state systems compositionally automatically 
conference computer aided verification cav lncs pages 
bryant 

graph algorithms boolean function manipulations 
ieee transaction computers 
burch clarke mcmillan dill hwang symbolic model checking states 
information computa tion 
clarke grumberg long 

model checking abstraction 
cm transactions programming languages systems 
clarke kurshan editors 
proc 
nd 
computer aided verification lncs 
springer verlag 
clarke long mc 

language composi tional specification verification finite state hardware controllers 
proc 
th int 
syrup 
computer hardware description languages applications pages 
discrete event systems analysis control cousot cousot 

temporal interpretation 
conference record th cm ct sigmod sigart symposium principles programming languages pages new york acm press 
godefroid 

partial orders improve automatic verification methods 
proc 
nd 
computer aided verification lncs pages 
springer verlag 


intensional ap symbolic methods 
electronic notes tcs 
ttp www elsevier nl locate entcs volume html 
kozen 

results propositional calculus 
theoretical computer science 
larsen 

modal specifications 
proc 
workshop auto matic verification methods finite state systems grenoble lncs pages 
springer verlag 
manna pnueli 

temporal logic reactive concurrent systems volume specification 
springer verlag 
marchand le 

supervisory control prob lem discrete event systems polynomial methods 
research report irisa 
mcmillan 

symbolic model checking approach state explosion problem 
kluwer academic 
milner 

complete axiomatisation observational congruence finite state behaviours 
siam cornput 
park 

concurrency automata infinite sequences 
proc 
th gi conf 
th 
comp 
sci lncs pages 
springer verlag 
peled 

combining partial order reductions fly model checking 
proc 
computer aided verification cav lncs pages 
marchand le 

symbolic ab automata application supervisory control problem 
research report irisa 
ramadge wonham 

control discrete event systems 
proceedings ieee special issue dynamics discrete event systems 
van glabbeek 

linear time branching time spectrum ii semantics sequential systems silent moves extended 
concur volume lncs pages hildesheim germany 
springer verlag 
