automated consistency checking requirements specifications ralph bruce labaw appear acm trans 
eng 
methodology july 
describes formal analysis technique called consistency checking automatic detection errors type errors nondeterminism missing cases circular definitions requirements specifications 
technique designed analyze requirements specifications expressed scr software cost reduction tabular notation 
background scr approach specifying requirements reviewed 
provide formal semantics scr notation foundation consistency checking formal requirements model introduced model represents software system finite state automaton produces externally visible outputs response changes monitored environmental quantities 
results experiments evaluated utility technique consistency checking real world avionics application 
role consistency checking requirements phase software development discussed 
errors requirements pervasive dangerous costly 
known majority software errors introduced require ments phase 
growing evidence requirements errors lead serious accidents 
example study major source safety related software errors nasals voyager galileo spacecraft errors functional interface requirements 
unfortunately fixing re errors extremely costly especially errors detected late software life cycle 
estimated correcting requirements errors late maintenance cost times correcting code naval research laboratory washington dc 
extended version consistency checking scr style requirement specifications published proceedings second ieee international symposium requirements engineering york england march 
supported onr 
errors requirements phase 
high frequency requirements errors serious accidents may cause high cost correcting late techniques improving quality requirements documents early detection requirements errors crucial 
promising approach reducing requirements errors apply formal methods requirements phase software development 
formal mean development method formalism formal specification notation formal analysis technique 
formal requirements specification reduce errors reducing ambiguity imprecision making instances inconsistency incompleteness obvious 
formal analysis detect classes errors requirements specifications automatically 
scp software cost requirements method introduced decade ago specify software requirements real time em systems unambiguously concisely 
method extended describe simply sofware require ments incorporate functional requirements values system assigns outputs acl nonfunctional timing accuracy requirements 
strengthened formal underpinnings 
designed engineers scp method successfully applied variety practical systems including avionics systems operational flight program submarine communications system safety critical components darlington nuclear power plant canada 
version scl method called core document requirements operational flight program ofp ofp da cod demonstrating scalability scp method 
applications scp rely manual techniques effective method industrial settings require powerful robust tool support 
significant barrier industrial formal methods date weakness methods associated formalisms 
attention focused formal aspects formal methods little effort devoted supporting methods 
useful developing practical systems formal methods provide rigor addition supported robust engineered tools 
practical cases large amount detail required apply formal method 
detail unmanageable automation 
provide automated support scp requirements method developing suite prototype tools constructing analyzing formal re specifications 
tools include creat ing modifying specifications simulator symbolically executing system specifications formal tools checking specifications selected properties 
analysis tool called consistency checker checks requirements spec ification properties defined formal requirements model 
requirements model describes properties scr requirements specifications satisfy properties checked consistency checker independent particular application 
second analysis tool called verifier checks specification critical application properties timing properties security properties 
verification application properties depends consistent requirements specification analysis verifier logically follows analysis consistency checker 
checking consistency scr requirements specification usually quite simple 
example specification includes total func tion consistency checker analyzes sure total defined domain 
checking properties usually straightforward number times properties need checked practical requirements specifications large reviewers spend considerable time effort verifying specifications properties 
fact certification darlington plant parnas observed reviewers spent time energy checking simple application independent properties ones describe distracted difficult safety relevant issues 
tools automatically perform checks save reviewers considerable time effort creative 
industrial strength formal method usable engineers scalable cost effective 
automated consistency checking described important step developing method requirements specification 
easy developing requirements specification scr notation developer invokes consistency checker find inconsistencies automatically 
scales handle practical applications experiments automated consistency checker significant errors missing cases nondeterminism requirements specification medium size navy application 
errors detected specification previously undergone systematic comprehensive checks independent review teams 
results high cost dollars dar certification effort checks done hand suggest automated consistency checking cost effective manual techniques 
reviewing scr method specifying requirements introduces formal requirements model describes consistency checks model presents results experiments conducted determine utility automated consistency checking discusses role consistency checking software development process 
contributions include formal definition application class analysis call consistency checking detecting domain independent errors requirements specifications evidence software tools automated consistency checking usable scalable cost effective 
review scr method background 
purpose requirements document describe ac system implementations 
software requirements document aircraft operational flight program published demonstrate systematic approach producing document 
document introduces features associated scr requirements method tabular notation underlying finite state machine model special constructs specifying requirements conditions events input output data items mode classes terms 
number researchers including van ex tended refined original scr method strengthened formal 
provided formal definitions parts model 
particular condition tables special class tables scr requirements documents described total functions mode classes finite state machines defined events 
mode classes partition state space form abstraction analysis specifications efficient reduces redundancy specifications easier understand 
deficiency original requirements document mode class may undefined certain states example weapon allocated weapons mode class undefined 
model defines mode class state example weapon allocated weapons mode class mode 
original requirements document model van published system level requirements specification water level monitoring system part shutdown system nuclear power plant 
specification extends scr method software requirements system requirements demonstrates method describe system accuracy timing requirements functional requirements 
variable model madey provides formal framework scr method 
variable model 
variable model illustrated describes required system behavior including required timing accuracy set mathematical relations sets variables monitored controlled variables input output data items 
monitored variable represents environmental quantity influences system behavior controlled variable environmental quantity system controls 
black box specification required behavior relations req nat monitored controlled quantities 
nat defines set possible values describes natural constraints system behavior constraints imposed physical laws system environment 
req defines additional constraints system built relations system system input output data data controlled req nat variable model 
maintain monitored controlled quantities 
variable model input devices sensors measure moni quantities output devices set controlled quantities input output data items represent values devices read write 
relation defines mapping monitored quantities input data items 
relation defines mapping output data items actuators controlled quantities 
monitored controlled quantities define required behavior input output data items keeps specification problem domain allows simpler specification 
variable model requirements model describe system requirements software requirements 
model defines system requirements describing required relation monitored controlled variables software requirements describing soft required relation input output data items 
term input variable output variable represents monitored variable controlled variable req defined input data item output data item soft defined 
section reviews constructs tabular notation scr requirements specifications terms variable model 
initial requirements model emphasizes system functions discussion focuses aspects variable model describe functional behavior 
scp constructs 
specify relations variable model practical concise manner constructs introduced requirements document useful 
modes terms conditions events 
mode class state machine defined monitored variables states called system modes simply modes transitions triggered events 
complex systems defined mode classes operating parallel 
mode classes reduce redundancy specifications assigning name mode logical expression times specifications name repeating logical expression 
term auxiliary function defined input variables modes terms en reset pressure low mode ore constants rmi class toolow nf terms rmit safety injection system safety safety xs en ct ion device dev son 
requirements specification safety injection 
helps specification concise 
condition predicate defined system entities system input output variable mode term point time 
event occurs system entity changes value 
special event called input event occurs input variable changes value 
conditioned event occurs event occurs specified condition true 
illustrate scr constructs consider simplified version con trol system safety injection described 
system uses sensors monitor water pressure adds reactor core pressure falls threshold 
system operator blocks safety injection turning block switch resets system blockage turning reset switch 
shows scr constructs specify requirements control system framework variable model 
water pressure block reset switches represented monitored variables waterpres block reset safety injection controlled variable safety injection sensor input data item hardware interface control system software safety injection system output data item specification control system includes mode class pressure term overridden conditions events 
mode class pressure model monitored variable waterpres contains modes toolow permitted high 
time system modes 
drop water pressure constant low causes system enter mode toolow increase pressure larger constant permit causes system enter mode high 
term overridden describes situations safety injection blocked 
example condition specification 
events denoted notation 
examples events input event block operator turns block fi om ff conditioned event block operator turns block water pressure lo 
example omits scr bracketing notation 
mode 
input data item 
term 
enumerated value old mode event new mode toolow waterpres low permitted permitted waterpres permit high permitted waterpres high waterpres table mode transition table pressure 
mode events high false toolow block permitted reset reset overridden true false table event table overridden 
mode conditions high permitted true false toolow overridden overridden safety injection table condition table safety injection 
scr tables 
tabular notation scr specifications facilitates industrial application method 
engineers find tabular specifications requirements easy understand develop addition tables describe large quantities requirements information concisely 
tables scr specifications condition tables event tables mode transition tables 
table defines mathematical function 
condition table describes output variable term function mode condition event table describes output variable term function mode mode transition table describes mode function mode event 
tables part req system requirements specification control system 
table mode transition table describing mode class pressure function current mode monitored variable waterpres 
table defines events change value mode class pressure 
example row table states pressure toolow waterpres rises low pressure changes permitted 
events change value mode class omitted table 
example pressure toolow waterpres changes reach low pressure toolow event 
table event table describing term overridden function pressure block reset 
mode transition tables event tables explicit events cause variable defined table change 
example middle entry second row states pressure toolow block reset overridden true 
contrast mode class high block reset changes vice versa value overridden change row specify events involving block reset 
entry false event table means event cause variable defined table assume value column entry entry false row table means mode class high event cause overridden true 
notation row event table describes system entry group modes row example second row table means system enters toolow permitted overridden false 
table condition table describing controlled variable safety injection function pressure overridden 
table states pressure high permitted pressure toolow overridden true safety injection pressure toolow overridden false safety injection 
entry false row means safety injection pressure high permitted 
condition tables define total functions event tables mode transition tables may define partial functions 
partly events occur certain conditions true 
example control system introduced event pressure high pressure toolow occur starting toolow system enter permitted state transition occurs 
cases illustrated examples event may occur change value variable defined event table mode transition table 
formal requirements model see functions defined event tables mode transition tables total assigning variable old value table explicitly define variable value 
formal requirements model earlier requirements models automaton model model underlying van specification variable model define aspects scr requirements method models provide formal basis tools 
provide precise detailed semantics scr method model represents system built finite state automaton describes input output variables conditions events constructs scr specification terms automaton 
automaton model special case variable model describes monitored controlled quantities naturally continuous discrete variables 
model abstracts away timing imprecision describes ideal system behavior 
system requirements easier specify reason ideal behavior defined 
required precision timing specified separately 
describes model extended include continuous variables describe timing accuracy requirements 
scr requirements specifications may nondeterministic ini tial model formulated terms functions restricted de systems 
cases nondeterminism may error fact requiring determinism lead overspecification requirements 
practitioners researchers recognize stress advantages deterministic specifications 
berry observed importance determinism overestimated deterministic systems order magnitude simpler specify debug analyze ones 
requirements model inspired formal security model defines sets modes entity names values data types special function ty maps entity legal values 
model defines system state terms entities condition predicate system state input event change input variable triggers new system state 
describes set functions called table functions derived scr tables 
table functions define transform special case req soft maps current state input event new state 
excerpts requirements model examples taken system requirements specification simple control system introduced 
clarify presentation definitions requirements model definitions conditions events simplified 
system state 
assume existence sets 
union nonempty pairwise disjoint sets ms called mode classes 
member mode class called mode 
ts union data types type nonempty set values 
vs mst ts set entity values 
rf set entity names 
rf partitioned subsets set mode class names ir set input variable names gr set term names set output variable names 
rf ty type set possible values entity named 
exists ty say mode class name corresponding system state function maps entity name value 
precisely rf ty 
assumption state system exactly mode mode class entity unique value 

sample system set entity names 
defined rf block reset waterpres pressure overridden 
type definitions include ty pressure toolow permitted high waterpres ty true false tv block 
conditions 
conditions defined values entities rf 
simple condition true false logical statement rf entity name constant value 
condition logical statement composed simple conditions connected standard way logical connectives 
events 
notation denotes various events 
primitive event de noted entity rf ty 
input event primitive event ir input variable 
basic event denoted simple condition 
simple conditioned event denoted basic event simple condition conjunction simple conditions 
basic event expressed simple conditioned event true 
condi tioned event composed simple conditioned events connected logical connectors simple conditioned event represents logical expression defined unprimed version condition denotes old state primed version denotes new state 
define definitions standard predicate calculus conditioned event expressed logical statement 
event occurs logical statement event represents evaluates true old state new state 
ex ample 
applying definition conditioned event block reset rewritten block block reset 
event occurs block reset old state block switched new state 
system software system 
system software system tuple tm defined constant keep notation simple 
formal model generalizes definition may function defined entities range ty 
tm set input events 
set possible system states 
special state called initial state 
system transform partial function tm basic assumption called input assumption exactly input event occurs state transition 
ordering entities 
compute entity value new state transform function may values entities old state new state 
describe entities needed new state entity associated subset rf called new state dependencies set 
input variable new state dependencies set empty 
entity defined condition table set contains entity naming associated mode class entities appearing conditions table body 
entity defined event table mode transition table set contains entities appearing table part basic event appears table associated mode class 
new state dependencies impose partial ordering set rf 
sets entities rf ordered sequence rj belong depends directly rj implies follows rj 

condition table table shows controlled variable depends entities new state mode class pressure term overridden 
new state dependencies set set pressure overridden 
partial order ing entities new state dependencies determined follows monitored variables depend changes environment 
mode class pressure depends waterpres 
term overridden depends pressure monitored variables block 
entity partial ordering ection 
sequence satisfying partial ordering sequence rl waterpres block 
table functions 
scr table describes table function called fi defines output variable term mode class ri 
entity ri defined table associated exactly mode class mj partial function input events occur state 
example control system block change block 
presents alternate definition conditioned event 
define independent input variables definition input assumption imply alternate definition 
prefer definition alternate definition expression certain con events overly complex see advantages making operators available specifiers 
relation entity mode class define function entity ri associated mode class mj 
notation denotes mode class associated entity ri 
example single mode class specification pressure 
ty pressure toolow permitted high 
entities defined tables pressure overridden functions pressure 
condition event mode transition tables typical format description table function derived table 
modes conditions ci 
ci 
cn 
fz vl 
vp table condition table typical format 
condition tables 
table shows typical format condition table rows columns 
condition table describes output variable term ri relation pi defined modes conditions values 
precisely pi mj cj ci ty ri ci set conditions defined entities rf 
relation pi satisfy properties 
vu unique 

lm associated lnode class included 

true coverage disjunction conditions row table true 

false disjointness pairwise conjunction conditions row table false 
explicit entity ri dependencies entities consider alternate form fi relation pi 
properties ensure fi total function 
properties ensure fi function properties guarantee totality 
define fi require new state dependencies set yi yi yi yi entity name associated mode class yi yi entities appear condition ci 
set pi define ri function fi follows vp 
function fi called condition table function 
ample 
new state dependencies set pressure overridden table condition table function safety injection denoted defined saf ect ion pressure high pressure permitted pressure overridden pressure toolow overridden pressure toolow overridden false modes events el el el en en en vl 
vp table event table typical format 
event tables 
table illustrates typical format event table rows columns 
event table describes output variable term ri relation pi modes conditioned events values pi mj ej ei ty ri ei set conditioned events defined entities rf 
relation pi satisfy properties 
vu unique 

false disjointness pairwise conjunction events row table false 
condition tables explicit ris dependency entities extending relation pi alternate form fi 
input assumption properties ensure fi function 
change part fis definition see guarantees totality 
define fi require new state dependencies set yi yi old state dependencies set xi xi xi 
contains associated mode class xi entities appearing ei associated table 
old state dependencies new state old mode event new mode tl table mode transition table typical format 
cies pi fi defined vp rr change 
function fi called event table function 
note ej occurs entity ri defined fi retains value old state 
example 
old state dependencies set new state dependencies set overridden reset pressure overridden reset pressure derived table 
sets table event table function overridden defined overridden fi block reset pressure overridden block reset pressure pressure toolow block block reset pressure permitted block block ff reset ff false pressure toolow reset reset pressure permitted reset reset pressure high pressure high pressure permitted pressure toolow pressure permitted pressure toolow overridden mode transition tables 
table shows typical format mode transi tion table entity ri names mode class 
table describes ri relation pi ej mti ei mti ei set conditioned events defined entities rf 
relation pi satisfy properties 
unique 


false disjointhess pairwise conjunction conditioned events row table false 

initial mode 
reflexive transitive closure reachability mode reachable initial mode 
easy show mode transition table format table expressed format shown table event table 
mode transition table expressed event table function 
example table old new dependencies sets mode class pressure waterpres pressure waterpres 
sets table table function pressure defined pressure pressure waterpres waterpres toolow high permitted pressure permitted waterpres low pressure permitted waterpres permit waterpres permit pressure toolow waterpres low waterpres low pressure high waterpres permit pressure 
automated consistency checking listed consistency checks derived formal requirements model 
checks determine specifications formed independent particular system state 
performed executing system specification checks form static analysis 
proper syntax 
component specification proper syntax 
example condition event formed 
type correctness 
variable defined type type definitions satisfied 
example expression form entity value ty hold 
completeness variable mode class definitions 
value controlled variable term mode class defined 
vari ables defined tables standard mathematical definitions may controlled variables terms 
mode conditions high permitted true false toolow overridden overridden safety injection false true table modified table safety injection 
initial values 
initial values defined mode classes input variables terms output variables 
initial values required entities defined condition tables derived tables 
reachability 
mode mode class reachable initial mode mode class 
check property mode transition tables 
disjointness 
specifications deterministic condition event mode transition table satisfy disjointhess property 
state controlled variable mode class term defined uniquely 
coverage 
condition table satisfies coverage property 
variable described condition table defined domain 
lack circularity 
circularities exist new dependencies sets 
property checks entities partially ordered 
clearly checks precede 
example checks proper syntax precede type checking type checking precede checking coverage property 
checking disjointness coverage 
computationally expensive checks checks disjointness coverage 
check properties consistency checker determines logical expression tautology 
example check entries row condition table disjointness consistency checker evaluates logical expression false 
check entries row condition table coverage tool evaluates logical expression 
true 
determine logical expressions tautologies tool applies tableaux decision procedure encodes algorithm 
examples 
checking consistency table modification condition table table reveals errors 
third row type errors safety injection values false true 
second mode events high false toolow block block permitted reset reset overridden true false table modified table overridden 
row violates properties condition tables coverage overridden overridden overridden true disjointhess overridden overridden overridden false 
disjointhess second property required event tables violated events different columns say overlap ae false 
table variation event table table 
running consistency checker detects disjointhess error second row table 
checking disjoint hess consistency checker evaluates expression block reset block reset false 
show expression tautology 
block reset block reset block reset block block reset reset distributive law block ff block reset ff block ff block block block reset reset reset def 
block block reset false input assumption block ff block reset ff false expression evaluate false specified behavior non deterministic pair states event expression evaluates true 
particular toolow permitted mode operator turns block reset system may nondeterministically change overridden true false 
checks syntax type checking straightforward 
complex checks depend definitions type definitions different parts specification checks require deductive reasoning 
consider example checking mode table table nondeterminism 
nondeterminism occur events second third rows overlap 
rows overlap expression waterpres permit waterpres expression rewritten waterpres permit waterpres permit waterpres low 
assumptions con permit low 
assumption waterpres permit imply waterpres low contradiction 
expression false defined behavior deterministic 
provided semantic framework reason formally assumptions permit low underlie specification 
general mechanical evaluation expressions undecidable devising algorithms identify evaluate decidable subsets expressions set assumptions see details 
general case tool may need user feedback complete certain checks 
efficiency technique 
analysis performed consistency checker quite efficient static checks components scr requirements specification form reachability analysis 
noted checks checks proper syntax type correctness completeness definitions easy 
mode reachability computed standard search techniques time linear number transitions mode class 
similarly checking lack circularity requires time linear number arcs new state dependencies graph 
definition transform function simplifies checking complete input event may occur new system state completely defined istic new system state defined 
determinism completeness guaranteed properties satisfied input event occurs see details lack circularity properties condition tables properties event tables properties mode transition tables indicate checking disjointhess coverage amounts checking logical formulas conditions events tautologies 
tautology checking may worst case behavior exponential size expression expect occur practice 
particular modes partition system state means disjointness coverage checking decomposed small independent subproblems 
coverage checking condition tables performed independently row checking rows missing cases 
similarly condition table event table mode transition table checked dis analyzing pair cells row checking columns time 
benefit modes arises analyzing cover age errors consistency checker analysis detects error identifies specific cause error missing cases precise location table 
section compares approach disjointhess coverage checking approaches 
experience consistency checking number subproblems size subproblem grows slowly 
contrast state reachability techniques model checking check disjointhess coverage expensive cost reachability analysis increases exponentially size specification 
expect techniques suffer state explosion problem plagues techniques model checking 
section demonstrates technique consistency checking scales industrial strength systems 
consistency checking cheap sense perform consistency checking early postpone expensive checks model checking 
prototype consistency checker 
prototype consistency checker forms checks implemented 
tool coded runs windows motif widgets support user interface 
typical session consistency checker user edits specification runs consistency checker test selected properties 
tool runs selected checks listing errors finds 
user may select listed errors display parts specification produced error specific rows entries relevant table 
case coverage disjointhess error tool displays counterexample 
user corrections rerun consistency checker ensure error properly corrected new errors introduced 
applying consistency checks evaluate utility checking requirements specifications consistency conducted experiments 
experiments consistency checker analyze condition tables mode transition tables revised version requirements specification operational flight program ofp 
ofp contains lines tight assembly code 
revised version corrects errors original specification uses new tabular format specify mode transitions 
results experiments demonstrate efficiency techniques 
running sun sparcstation consistency checker checked condition tables requirements specification disjointhess coverage mode transition tables specification disjointhess 
tool required total computation time seconds perform entire analysis 
time includes time seconds check syntax type correctness tables seconds disjointhess coverage checks seconds condition tables seconds mode transition tables 
briefly describe experiments 
mode transition table larger condition tables complex class 
explanation error occurrences behavior rd value variable variable missing 
tables specify havior submodes 
steering early document values phase describe steering phases 
revised document uses values tables updated 
application ts range rmax specific range target mi 
cover domain 
table errors detected condition tables 
analyze describe analysis mode transition tables somewhat detail 
checks condition tables 
experiment tool checked condition tables total rows coverage disjointhess 
tool errors 
seventeen distributed tables proved legitimate errors 
determining remaining errors correct required knowledge simple tool lacked 
cases involved values describing combined settings input devices 
confirmed hand rows containing values satisfy properties 
table describes detected errors 
interestingly coverage errors 
example reason inspection detect disjointhess errors coverage errors information needed detect disjointhess errors table information needed detect coverage errors 
finding coverage errors requires knowledge values variable take 
type information provided table requirements document cases omitted entirely 
omission type information consequence semiformal nature requirements document 
tool enforces type definitions requirements model helps eliminate errors 
tool checks entity specification corresponding type definition logical expression specification satisfies type definitions 
checks mode transition tables 
second experiment tool checked mode transition tables requirements specification disjointhess 
mode classes contain total different modes modes mode class modes second modes authors learned experiment reported detected third 
mode transition tables contain total rows row simple conditioned event form described 
analyzing tables tool disjointhess errors 
instances disjointhess violations tool detected undoubtedly errors probably detected events may impossible 
noted events occur certain conditions true 
errors occurred mode transition table weapons mode class remaining mode transition table alignment navigation test mode class 
disjointhess errors table weapons mode class instances nondeterminism prose requirements documents requirements specification partially derived 
table excerpt revised specification shows small part mode transition table alignment navigation test mode class 
complete table pages long 
table formal definition table structured format 
contrast table headings middle column simple conditions defined input variables 
row middle column table contain simple conditioned event 
consecutive rows table separated dashed line rows represent disjunction simple conditioned events rows 
table notation denotes event occurring corresponding condition true false means corresponding condition true false means corresponding condition may true false 
clarify relationship formats mode transition tables table translates rows table alternate format 
asterisks denoting mode names tables omit special scr brackets 
table illustrates disjointhess error detected consistency checker 
conditioned events marked arrows mapped different new modes overlap 
overlap error 
overlap events allows system transfer nondeterministically mode inertial mode airborne alignment mode doppler inertial di 
event triggers transition doppler stage complete latitude deg latitude deg position entered 
disjointness errors mode transition tables 
algorithm general algorithm described 
describes similar experiment early version consistency checker detected fewer errors 
early tool algorithm looked disjointhess error pair disjunctions analyzed 
current tool designed find disjointhess errors detected additional errors 
current mode 

dig di olb mag sl grid ims fail table error detected mode transition table alignment navigation test mode class 
analysis consistency checker examined conjunctions 
conjunction form simple conditioned events om different rows mode transition table format shown table 
rows current mode different new modes 
arrow table indicates rows 
analysis maximum number entries analyzed conjunctions entries marked 

average number entries analyzed conjunctions 
conjunctions required analysis tautology checker remainder analyzed separately trivial 
experience relatively small sized logical expressions analyzed experiments require sophisticated algorithms bdds 
current new mode event mode data sea doppler ca stage complete doppler ca stage complete norm ca stage complete doppler norm ca stage complete doppler table mode transition table table expressed alternate format 
manual vs automated checks 
prior publication revised requirements document carefully reviewed teams nrl computer scientists including third author composed engineers naval air warfare center maintained ofp 
noted tools detected significant errors reviewers missed 
errors detected diminish credit due reviewers large volume complexity requirements data 
tools complement efforts software developers 
human effort crucial acquiring requirements information expressing precisely 
errors detected specification human intervention needed correct 
developers reasonable draft requirements specifications software tools provide quick effective means checking specification properties described section 
tools effective people checking properties addition significantly reduce labor intensive task humans find tedious boring 
important feature tool low cost 
darlington certification effort cost reviewers checked requirements specifications application independent properties disjointhess coverage 
addition searched discrepancies requirements specifications code specifications 
tool compares specifications refinement complex consistency checker 
diminish value tool 
observed majority theorems arose documentation inspection darlington nuclear plant shutdown systems simple properties reviewers analyzed trivial tables properties documents weighing 
tools analysis cost far people 
related 
number industrial organizations including bell laboratories ontario hydro software productivity consortium adapted scr method specify requirements practical systems 
additionally developed formal semantics classes tables 
condition tables event tables defined formally section special cases inverted tables 
class tables defined called program tables tool developed checks disjointhess coverage errors proceeding addi tional analyses 
briefly describe related automated techniques analyzing tabular specifications consistency approaches detecting errors scr requirements specifications 
decision table processors 
decision tables early tabular nota tion years specify software requirements tables easier read expressions predicate logic 
typically decision tables associate system input actions 
general difference scr methods decision tables scr associates separate table output term mode class specification methods decision tables usually decompose specification smaller manageable pieces 
notable exception early specification technique called systematics decomposes decision tables smaller tables similar scr condition tables 
various techniques developed process decision tables 
techniques focus code generation designed con checking 
decision translator early example technique checks decision tables disjointhess coverage 
translate contents table fortran cobol 

technique processing decision tables checks table called consistency coverage called completeness 
improves earlier techniques decision tables supports variables 
format tables analyzed similar format table conditions label rows columns column associated action 
significant difference tables processed scr tables modes 
rsml 
requirements state machine language rsml developed describe real time process control systems uses combina tion graphical tabular notations 
rsml graphical notation decomposition largely borrowed statecharts 
additional features rsml include directed communication high level state machines tables describe guards state transitions 
table rsml describes conditions state machine transition state second state specific input event 
output event may associated table 
format rsml tables resembles format table conditions label rows table columns 
contrast table different conditions need dis joint events appear table entries modes modes defined explicitly functions input variables 
prototype tool developed checking rsml specifications completeness possible input event system response event stated explicitly consistency input event cause transition different system states 
tool applied large portions requirements specification tcas ii collision avoidance system commercial aircraft detected errors caught extensive manual review 
rsml 
rsml scr support state semantics simplify checking completeness determinism 
case checks may performed decomposing problem smaller subproblems avoiding state explosion inherent reachability techniques 
comparison requirements languages analysis required perform disjointhess coverage checks difficult major differences rsml scr semantics 
investigation required quantitative comparison methods realistic systems 
decision table processors structure specification mode classes exploit reduced analysis coverage disjointhess errors mode classes possible 
addition reducing analysis needed check certain properties modes easy determine specific cause error 
detects coverage error additional analysis called analysis performed determine missing cases 
additional analysis unnecessary consistency checker noted specific cases omitted precise row table missing case detected analysis tool checking coverage errors 
mechanical proof systems 
parnas describes small theorems true sample specifications expressed tabular notation similar scr notation challenges developers automated proof systems prove theorems 
theorems domain coverage theorem disjoint domains theorem slight variations coverage disjointness properties 
sri researchers accepted parnas challenge 
describe mechanical proof theorems cc strategy tcc type correctness conditions sri proof system pvs 
pvs prove theorems easily surprising proofs simple logic 
noteworthy pvs experiment theorems proven automatically 
model checking 
gannon demonstrated utility model checking detecting application dependent errors scr requirements specifications 
consistency checker tests tables definitions definitions types constants scr specifi cation tool analyzes properties mode transition tables 
detecting errors inspection 
experiment compares effectiveness different inspection methods detecting errors scr requirements specifications 
errors interest experiment automatically detected consistency checker 
tool conjunction inspection detect errors 
requirements process envision process developing requirements specifications 
process idealization real world process shows tools consistency checker produce high quality requirements specifications 

formal notation scr notation specify requirements 

automated consistency checker check specification syntax type correctness coverage determinism properties 

specification executed symbolically simulator ensure captures customers intent 

stages requirements phase mechanical support analyze specification application properties 
initially small subset fixed parameters states extracted specification tool modal checker detect violations properties 
may repeated time different larger subset 
sufficient confidence specification mechanical proof system may verify complete requirements specification safety critical components 
similar approach combines model checking mechanical theorem proving suggested 
concluding remarks experience automated consistency checking date tools consistency checking highly effective detecting errors requirements specifications 
tools find errors people people tedious error prone task checking specifications consistency 
properly designed tools consistency checking significantly cheaper people 
computer analysis requires explicit formal semantics provided requirements model 
semantics provides basis algorithms analysis 
formal method tools scales 
method detected significant number errors medium size real world specification 
structuring specifications modes contributes significantly efficiency consistency checks especially disjointhess coverage checks performed large requirements specifications 
addition consistency checker described current toolset includes specification editor simulator 
developing verifier checks scr requirements specifications application properties 
option considered link toolset mechanical proof system support automated consistency checking computer assisted verification 
relieve difficult error prone task encoding proof engine 
expect requirements model provide solid foundation suite analysis tools 
expect process outlined uses formal notation specify requirements computer supported formal analysis detect errors produce high quality requirements specifications 
specifications produce systems perform required lead accidents 
lead significant reductions software development costs 
acknowledgments gratefully acknowledge rose design implementation consistency checker 
clements detected error formal definition reachability property 
suggested define requirements model framework variable model 
parnas provided helpful insights variable model 
shankar suggested algorithm tool uses check tautologies 
bharadwaj chechik kirby anonymous referees provided useful comments led significant improvements presentation 
gratefully acknowledge britton parnas shore developed original requirements document pioneering area requirements specification 
britton parker parnas shore software requirements aircraft 
tech 
rep nrl naval research lab wash dc 
gannon state model checking event driven system requirements 
ieee 
softw 
eng 
jan 
berry gonthier esterel synchronous programming language design semantics implementation 
science computer programming 
bharadwaj generalized validity checker 
tech 
rep naval research lab wash dc 
preparation 
boehm software engineering economics 
prentice hall englewood cliffs 
bryant graph algorithms boolean function manipulation 
ieee 
computers aug 
clarke 
sistla automatic verification finite state concurrent systems specifications 
cm 
prog 
lang 
systems apr 
nd rn documentation safety critical software 
proc 
th int conf 
softw 
eng 
icse baltimore md pp 

crow owre rushby shankar srivas pvs 
tech 
rep computer science lab sri int menlo park ca apr 
pre sented workshop industrial strength formal specification techniques boca raton fl 
dai scott case tool software verification validation 
proc 
ieee th intl 
workshop computer aided software engineering case toronto canada july pp 

software engineering concepts 
mcgraw hill new york ny 
state determination hard embedded systems 
phd thesis univ nc chapel hill nc 
software requirements tutorial 
tech 
rep nrl naval research lab wash dc 
ward jr core method real time requirements 
ieee software sept 
kirby jr shah sutton experience applying core method lockheed 
proc 
th annual conf 
computer assurance compass gaithersburg md june pp 

galley johnson computers guide theory np completeness 
freeman new york ny 
decision tables systematics 
computer aug 
statecharts visual formalism complex systems 
sci 
cornput 
programming june 
heimdahl leveson completeness consistency analysis statebased requirements 
proc 
th int conf 
softw 
eng 
icse seattle wa apr acm pp 

bull labaw scr toolset speci fying analyzing requirements 
proc 
loth annual conf 
computer assurance compass gaithersburg md june pp 

labaw consistency checking scr style require ments specifications 
proc international symposium requirements engineering mar 
eds 
formal methods real time computing 
trends software 
john wiley sons chichester england 
requirements specification hybrid systems 
proceedings hybrid systems workshop iii lecture notes computer science alur henzinger sontag eds 
springer verlag norwell ma 
appear 
labaw tools analyzing scr style requirements specifications formal foundation 
tech 
rep naval research lab wash dc 
preparation 
mclean requirements specifications new approach application 
ieee trans 
softw 
eng 
se sept 
software re aircraft 
tech 
rep naval research lab wash dc 
specifying software requirements complex systems new techniques application 
ieee trans 
softw 
eng 
se jan 
documentation software design medium 
bell system 
oct 
chen decision table tool 
proc 
loth annual conf 
computer assurance compass gaithersburg md june ieee pp 

hughes stein decision tables 
mdi publications wayne pa 
decision tables software engineering 
van nostrand reinhold new york ny 
jaffe leveson heimdahl software requirements analysis real time process control systems 
ieee trans 
softw 
eng 
se mar 
formal semantics parnas tables 
proc 
th int conf 
softw 
eng 
icse seattle wa apr acm pp 

mclean security model military message systems 
acm trans 
comp 
syst 
aug 
leveson heimdahl reese specification process control systems 
ieee trans 
softw 
eng 
sept 
lincoln rushby formally verified algorithm interactive consistency hybrid fault model 
tech 
rep sri csl computer science lab sri int menlo park ca mar 
lutz targeting safety related errors software requirements analysis 
proc 
st sigsoft syrup 
foundations softw 
eng 
los angeles ca dec 
barnes decision table languages systems 
academic press new york ny 
white software requirements methodology tool study technology transfer 
tech 
rep aerospace ny july 
tabular representation relations 
tech 
rep crl telecommunications research institute ontario trio mcmaster univ hamilton canada oct 
sonhe theorems prove 
proc int conf 
hol theorem proving applications vancouver bc canada aug pp 

inspection safety critical software program function tables 
tech 
rep crl communications research laboratory mcmaster univ hamilton canada 
madey assessment safety critical software nuclear power plants 
nuclear safety april june 
ant clements rational design process fake 
ieee trans 
softw 
eng 
se feb 
madey functional documentation computer systems 
science computer programming oct 
nd jl experiment assess different defect detection methods software requirements inspections 
proc 
th int conf 
softw 
eng 

rushby pvs prove sonhe theorems david 
proc int conf 
hol theorem proving applications vancouver bc canada aug pp 

order logic 
springer verlag 
republished dover publications 
accounting office 
mission critical systems defense attempting address major software challenges 
tech 
rep gao general accounting office wash dc dec 
van requirements re examination real time sys tems application monitoring systems 
tech 
rep tr queen univ kingston canada 
madey documentation requirements computer systems 
proc 
re requirements syrup 
san diego ca jan pp 


