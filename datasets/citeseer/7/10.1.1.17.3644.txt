specification testing reactive software tools experiments experience report jategaonkar jagadeesan adam porter carlos christopher lawrence votta testing commercial software expensive time consuming 
automated testing methods promise save great deal time money software industry 
approach suited reactive systems telephone switching systems specification testing 
built set tools automatically test software applications violations safety properties expressed temporal logic 
testing system automatically constructs finite state machine oracles corresponding safety properties builds test harnesses integrates application 
test harness generates inputs automatically test application 
describe study examining feasibility approach testing industrial applications 
conduct study formally modeled automatic tion switching system aps application common telephony systems 
asked number computer science graduate students develop versions aps tools test 
tools effective save significant amounts human effort expense machine resources easy 
dis software production research department bell rd il usa bell labs 
om department computer science university maryland college park umd edu 
supported part national science foundation faculty early career development award ccr 
department computer sciences university texas austin utexas edu 
partially supported fulbright fellowship university texas austin 
performed author visiting bell laboratories 
innovative services research department 
att 
com improvements needed tools professional developers building commercial products 
keywords specification testing reactive systems temporal logic empirical studies reactive systems respond continually stimuli environment computation outputs environment driven inputs received environment 
examples reactive systems include elevators traffic controllers avionics controllers real time systems reactive nature 
reactive systems ubiquitous soft ware technologies ess telephone switch ing system provides telecommunications ser vices 
reactive systems safety critical thoroughly tested ensure meet stringent requirements 
number potential input sequences reactive system handle infinite testing needed establish confidence system 
testing typical ess feature example consumes significant portion development resources 
factors contribute situation need sophisticated hardware labs need regression test core system new features added cost having people select tests evaluate test data figures prominently 
despite advances testing lessened dependence human effort believe reactive systems special characteristics inhibit advances force manual performance testing activities time dependent behaviors 
reactive system output depends current input system history 
difficult calculate input output relations needed evaluate test results 
multiple acceptable outputs 
techniques assume test results unique 
untrue nondeterministic systems application requirements underspecified 
incomplete specifications 
practice rare entire feature formally specified 
consequently testing techniques develop oracles complete specification system impractical 
low failure rates 
gain confidence reactive system reliability availability necessary run large number tests 
failures frequent efficiency having people evaluate test results drops dramatically 
testing techniques alert developers failure occurred require developers evaluate test results hand 
developed toolset supports highly automated testing reactive systems 
approach requirements specified restricted class tem logic safety properties 
specifi cations automatically generate finite state machines fsms accept language input output traces violate safety properties 
resulting fsm generate test inputs fed actual system determine output violates safety properties 
violation occurs tools automatically alert user indicate safety property violated 
furthermore tools provide execution trace leading vio lation 
temporal logic basis approach definition supports time dependent behaviors 
temporal logic naturally describes non determinism multiple acceptable outputs easily accommodated 
assume specifications complete formed temporal logic safety property tested 
importantly approach completely eliminates human involvement selection test data development test harnesses evaluation test results 
order assess suitability advantages approach industrial systems applied toolset implementations automatic pro tection switching aps system 
purpose system manage redundant resources phone lines ensure resources selected 
earlier temporal logic safety proper ties formally specify aps requirements :10.1.1.26.3347
specification developed aps implementations tested literally millions test cases 
toolset automatically revealed violations requirements 
inspired dillon yu method testing reactive software specifications written version temporal logic called graph ical interval logic :10.1.1.52.6850:10.1.1.35.4632
properties written logic translated fsm language set executions violate property resulting fsm generate test inputs 
dillon yu indicate currently developing tools support method integrated taos test management system 
technique testing reactive software satisfies specifications written lustre synchronous data flow lan guage viewed temporal logic 
standard temporal logic graphical interval logic lustre mainly take advantage temporal logic tools de veloped course earlier 
richardson approach deriving oracles formal multi paradigm specifications 
approach focused temporal logic safety properties oracles derived automatically 
extends efforts industrial case study 
approach form conformance testing blackbox testing determining implementation exhibits behavior prescribed specification 
approaches conformance testing proposed corresponding variety specifi cation languages 
example gaudel presents framework testing algebraic specifications :10.1.1.35.4632
brinksma theory testing labeled transition systems applications specification language lotos shown 
remainder article method toolset discuss automatic protection switching system various implementations 
case study empirical observations 
discuss challenges opportunities come tools industrial software development 
testing framework tools computation model tools test reactive applications :10.1.1.52.6850
specifically applications conform synchrony hypothesis inputs moving stopped open closed go relation moving stopped relation open closed open moving moving open go tick input syntax temporal logic implies applications appear operate discrete steps :10.1.1.17.5606
application receives set puts input signals reacts inputs computing producing set outputs output signals waiting new inputs 
synchrony hypothesis implies computations performed application atomic respect environment 
particular new inputs arrive environment application computing alternatively inputs arrive registered processing step 
specification language informally safety properties stipulate bad happens 
reactive systems usually respond bounded amount time liveness properties stipulate eventually happen reduced safety properties 
consequently safety properties sufficient describe intended behavior reactive systems 
temporal logic known formalism specifying safety properties specification language propositional linear time variant 
specifications tool written specially designed notation 
example consider property elevator door open elevator moving pushes third floor button elevator reach third floor ticks 
shows specification property 
shows special relation directive feature testing system 
directive help system derive compact oracles indicating signals mutually exclusive 
example directives state elevator moving stopped time door open closed simultaneously 
special signal tick models passage discrete units time steps necessarily real time 
input language includes implication indicates presence signal implies presence 
directives allow compiler omit states transitions reducing size 
prevents test harness generating sary test cases 
safety properties composed signals standard boolean operators simple temporal operators previous back bounded response operator property example bounded response prop erty 
see formal definitions opera tors 
toolset developed techniques tools automatically test software application satisfies temporal logic safety properties 
testing application satisfies safety property equivalent observing finite executions violate safety property 
testing system goals generate test cases lead violations identify violations quickly possible human intervention 
achieve goals test ing system components see application test test harness oracle state machines 
components automatically assembled produce executable object called test enabled application 
application run various parameter settings adjust number test runs number reactive cycles test run format test output 
describe test harness oracle state machines test enabled application produced optimizations testing process 
test harness job test harness drive testing pro cess coordinate behaviors oracle state machine application 
test harness automatically generated safety property description input output signals 
testing process test harness repeatedly exercises application 
possible application designed conform harness interface 
interface enables test harness observe application influence behavior 
aspect harness interface data structure test harness sets application queries transmit inputs 
interface contains similar data structure output signals application returns data test harness 
structures come set functions application test parameters safety property esterel program fsm description test outcome architecture testing system 
structure 
structure 
void elev set void elev set void elev void elev void elev reset void elev cleanup void elev inputs outputs interface functions generated elevator application 
querying modifying 
final interface component set functions initializing executing shutting application 
long interface respected application linked test harness create executable system 
portion interface functions written appears 
oracle state machines order generate test cases system uses fol lowing important fact safety properties safety property exists finitestate machine language set possible finite executions violate prop erty 
refer finite state machines oracles mechanism application flaws revealed 
toolset oracle state machines constructed chain events 
safety properties specified system engineer temporal logic syntax described earlier 
engineering convenience toolset automatically translates temporal logic formulae esterel programs :10.1.1.17.5606
programs express deter finite state machines extract easily invoking esterel compiler 
resulting information automatically analyzed eventually linked test harness application 
state machine information includes list states start state accepting states set transitions labeled input output signals 
state transition labeled pair set simultaneous input signals provided application test possible set simultaneous output signals produced response application 
state transitions combination inputs system outputs received 
language generated state machine set sequences 
violate safety property 
accepting states state machine indicate violation machine driven accepting state safety property violated 
test enabled application oracle test harness application automatically linked produce test enabled application 
application operates simple cycle 
harness queries oracle determine inputs application 
oracle randomly selects set inputs current state 
harness invokes application inputs waits application produce set outputs reaction 
outputs received harness combined inputs sent oracle 
current state oracle takes transition labeled set signals transition exists unique oracle deterministic 
oracle moves target state transition cycle repeated 
oracle reaches accepting state safety property violated 
cycle repeats violation detected maximum test se quence length reached test deemed inconclusive aborted 
user set run time maximum test sequence number sequences generate format content test results 
convenience system report en tire test traces 
event violation detected allows users reproduce analyze violation debugger 
optimizations automated analysis fsm allows optimize testing process 
optimization involves separating states safe unsafe states 
unsafe states accepting state reachable rest safe 
oracle reaches safe state testing test aborted 
avoids useless cycling instance initialization property tested application initializes successfully 
optimization actively avoid safe states selecting input signals chance driving machine unsafe state 
transition depends input signals controllable harness output signals controllable harness may possible avoid safe states 
optimization useful application contains exit signal contains signals change system mode way safety properties longer violated 
effect optimization generate longer useful test sequences 
oracle state machines quite large 
optimization mutual exclusion implication directives specification 
information passed esterel compiler uses construct space efficient oracles 
small example small example technique suppose simple elevator building floors 
inputs elevator corresponding request buttons floor 
outputs elevator open closed corresponding state door moving stopped corresponding motion elevator corresponding floor elevator currently 
assume elevator exactly floor time floors outputs number floor visited 
assume moving stopped clearly door open closed clearly 
initially stopped floor door open 
basic safety property elevators door open elevator stopped execution elevator open moving simultaneously output 
set possible finite executions elevator inputs outputs violating property con sists sequences form 
ii combinations inputs oj contains open moving 
infinite language oracle finite state machine corresponding safety property 
tool testing elevator application randomly generate sequence input sets 
ex ample set inputs corresponding people getting elevator requesting floors 
set inputs automatically provided application 
suppose response application generates set puts closed moving corresponding doors closing elevator starting move 
step tool example may automatically pro vide empty set inputs application test corresponding lack new floor requests 
suppose application response gen set outputs pen moving corre sponding elevator arriving floor opening doors continuing move door open clearly undesirable situation 
output set contains open moving safety property violated 
sequence consisting pair followed pair open moving language oracle finite state machine leads ac state toolset automatically reports violation 
telecommunications application automatic protection switching system described communication channels ing switching systems need interface components manufactured different vendors :10.1.1.26.3347
order facilitate cooperation components standards established 
standards maintaining connectivity called automatic protection switch ing aps 
idea provide line communication channel switching sys tems reliability provided duplicating critical elements 
line degrades fails backup line called protection line 
orig inal version aps termed unidirectional non 
strategy protection line allotted working line decision switch lines receiving side unidirectional switch protection line remains effect working line clears equivalent condition non 
shows architecture style aps 
transmitting side sends messages working protection lines 
receiving side monitors status lines selects accept messages 
component may assumed fail independently 
standard redundancy method check accuracy transmission messages 
assume number erroneous bits received ing line continuously recorded correction messages issue 
protocol take care repair retransmission faulty messages 
line signal considered degraded bit error rate erroneous bits vs total bits dangerous range typically 
line signal considered failed bit error rate exceeds degraded range hard failures occurred complete loss signal 
degraded failed line may clear spontaneously 
error rate may decrease normal accepted range intervention op 
expected response degraded failed signal working line automatically switch protection line 
appropriate protection line degraded failed 
line degraded failed probably need replaced repaired craft technician 
accordingly operators provided set commands change configuration channel remove line line taken service 
restore line line placed service 
forced switch specified line selected communication regardless current state 
conditional switch specified line selected communication long available failed state 
application case protocol maintain highest quality communication available responding operator requests signal degradation failure 
standards define protocol include example scenarios aps paradigms 
inputs system states lines operator commands 
output system consists state switch selects current communication line 
described earlier requirements aps formally specified part formal methods case study :10.1.1.26.3347
specification starting point feasibility study 
feasibility study conducted feasibility study understand strengths weaknesses testing tools 
specific goals evaluate costs benefits tools determine steps needed practice 
conduct study developed testbed model systems apply testing tools 
wanted testbed realistic possible modeled aps system described 
original aps model unidirectional non protection line working lines original 
chose slightly complex version order exercise richer set temporal logic safety properties 
building testbed initial specification developed modified specifications 
modifications incrementally added new input signals new line quality indications new operation semantics 
modifications introduced increase variety complexity safety properties test 
specifications pages length contained safety properties 
acceptance test application consisted testing safety property runs test sequence length 
asked developers implement test initial specification 
application passed acceptance test assigned different developers asked implement test modification request 
continued process modification requests completed 
study create testbed designed conducted study 
goal create set code artifacts tested tools 
study setting ran study spring university maryland 
sixteen graduate students computer science acted developers entire project took weeks complete 
variables modification captured dependent variables 
transmit working line protection line receive architecture unidirectional aps 
self reported development effort 

number test runs needed pass acceptance test 

results test run specific safety properties violated 

effect code modification pre accepted safety properties violated effect previously violated properties ac new violations 
threats validity threats validity study 
feasibility study interested threats external validity 
threats external validity compromise ability generalize results 
aware threats 
system size 
applications small compared industrial systems 
difference due absence code support fault tolerance auditing logging interfaces ess system 
shouldn compromise test results may hide difficulties appear testing complex systems 
subject 
subjects competent programmers may representative professional programmers 
may different types errors professional developers 
development context 
professional developers may workloads responsibilities organizational constraints may tools difficult practice 
conducting experiment conducted experiment phases training operation 
training phase gave hours class instruction temporal logic 
provided hours instruction algorithms converting temporal logic safety properties test oracles 
gave student initial requirements specification implemented tested week 
week weeks student received implementation generated previous week previous requirements specifications new specification detailing intended modification 
implemented tested modification week 
students successfully completed modifications 
time students ran testing tools captured timestamped source code gathered testing statistics 
study testbed consisted implementations lines code 
study developers ran test tools times 
time test tools run safety property underwent test runs inputs run 
safety properties specification complete test test cases 
empirical observations generating testbed examined implementations test results surveyed developers assess tool performances characteristics 
grouped observations categories testing completeness efficiency nature errors usability developer perspective usability perspective heuristics generating testing engines 
testing performance building testbed developers ran testing tools times finding violations 
describe shortly violations occurred applications got specific states 
example violations occurred specific sequence inputs received large amount memory went counters overflowed 
errors extremely difficult identify ad hoc testing code reading finding required vastly human effort 
perspective tools highly cost effective 
hand tools clearly useful detecting performance inadequacies system behavior un der load stress testing fault tolerance critical industrial aps system 
tools necessarily resource ecient 
computation cycle lengthy running vast numbers tests may 
case traditional coverage testing methods may appropriate 
error detection drew interesting observations kinds errors developers testing tools 
common errors failures handle rare cases incorrect logic requirements misunderstandings 
experience relatively failures resulted faults appearing single points program testing techniques studies appear focus faults 
test results showed patterns incorrect logic requirements misunderstandings caused fail ures nearly test run violations test runs rare cases violations runs 
brings trade 
time tools uncover problems handling rare cases human effort 
coverage approaches find quickly require human effort construct appropriate test cases 
usability developer perspective surveyed developers get reactions testing tools 
impressed speed ease generating test cases running 
essentially involves typing single command 
replaying test traces debugger helped debug errors quickly 
biggest dissatisfaction came having wait compiles 
time application modified needs linked test engine 
time noticeable applications small compilation time negligible comparison linking phase 
problem corrected instance adopting client server model linking application test engine single executable 
usability specifier perspective formal methods requires programming activities earlier stages life cycle 
little development support programming stage 
experience bears 
mistakes specifying aps 
traditional programming syntax errors forgot handle rare cases misunderstood requirements 
traditional programming little develop ment support 
example case forgot include potential input input specification 
resulting test engine generated tests containing input 
safety properties violations went undetected knowledge 
problem examining traces 
implemented small elevator example accidentally left important bounded response way ensure progress 
developers assumed presence anyway logic er ror caused elevator move third floor stay forever 
course violations detected behavior clearly inappropriate 
obviously things went wrong result flawed program appeared correct 
tool translation steps errors stage caused failures stages 
building testing engine computationally expensive led lots frustrating debugging rework specifications 
previous examples show technology simulators syntax checkers debuggers crucial time formal methods 
heuristics generating testing engine alphabet aps symbols building fsm requires large amounts memory computation time 
specification got complex unable build testing engine sparc memory 
ran virtual memory crashed esterel compiler 
problem heuristics pare state space 
heuristic divide large safety properties conjunctions subformulas test subformula separately 
fsm subformulas smaller required run tests 
second heuristic put mutual exclusion implication directives specifications 
mutual exclusion directives inform compiler signals appear time instance elevator floors time emit signals 
allowed esterel compiler omit fsm state transitions 
example aps implementation guaranteed receive input signal step inputs written mutual exclusion 
heuristic assert safety property tested remained valid test subsequent safety properties 
specifically relation implication directives assert valid safety properties remaining tests application 
example implication relation open stopped asserts open signal appears stopped signal appears 
allowed reduce state space required re test properties application modified 
industrial applications challenges opportunities experiences gathered study overwhelmingly positive 
results compel believe specification testing cost effective intended setting 
apply technology industrial software addressed 
section describe challenges opportunities see ahead 
synchrony hypothesis early project expected synchrony hypothesis drastically limit types systems test 
fear materialized 
certainly systems tools inappropriate 
practice reactive systems easily designed satisfy hypothesis computations typically quite short inputs arrive computation queued 
fact argue large portions ess switching system satisfy synchrony hypothesis reasons 
existing switch software compatible testing technique may possible upgrade software satisfy tool requirements 
example separate study re wrote part ess software 
new system satisfied synchrony hypothesis met testing tool interface requirements 
modular design testing technique involves form black box testing 
appropriate modules clear entry exit points state operations observed outputs 
words modules fit test harness stand objects 
implication may difficult test subsystems operational context 
ess subsystems example difficult initialize drive absence entire ess environment 
approach monitoring mode evaluate run time system behavior 
generate inputs system simply observe passing signals consult oracles determine safety properties violated 
interesting observation object oriented designs naturally conform interface 
constructors destructors driver methods 
system design telecommunications industry done object oriented case tools real time object oriented modeling room charts mate object oriented extension statecharts clear opportunity create test enabled applications conjunction executable design tools 
looks promising objects satisfy synchrony hypothesis design 
objects essentially hierarchical finite state machines inputs external inputs system outputs objects 
currently exploring connection 
signal mapping problem difficult problem arises practice involves mapping specification names implementation names 
necessary specifications written higher level abstraction implementation 
richardson takes significant step solving problem needed direction 
tool enhancements current tools written test system inherently language independent 
exploring construction oracle server enable seamless testing reactive applications written different programming languages different platforms different geographic locations 
enhancement tool useful allow inputs selected non uniform weights 
testers may wish exercise systems conditions closely approximating intended example notions operational ing 
times may want overload system certain type sequence operations example performing stress testing 
costs benefits aspect tool cost benefits designed ensure conformance certain specifications 
finds errors specified paradigm 
need develop better understanding error coverage provided approach 
hand saw approach excellent finding problems involving rare scenarios 
frequent root cause problems detected field cost repair defects far greatest tool useful cases 
value tool depends tradeoff machine expense human expense 
approach machine intensive inexpensive human terms decreasing computing costs tradeoff appears worthwhile 
times necessary re engineer safety proper ties yield smaller state machines indicating signal exclusion properties simply splitting conjuncts ordinary computing environments development setting sufficient handle computational expense 
article described toolset automatically testing software applications conform temporal logic safety properties 
patterned dillon yu richardson better understand practical potential tools conducted feasibility study 
study highly cost effective 
enabled thoroughly exercise tools realistic application keeping costs minimum 
part study formally modeled common telephone switching application called automatic protection system 
developed extended specifications asked number developers implement 
applied testing tools implementations 
total developed implementations increasingly complex aps specifica tions 
intended simulate application evolution time 
study ran test tools times 
may involve testing inputs depending number safety properties specification 
tools highly effective finding defects implementations 
particular surprised find unexpected tool failures despite wide variety properties tested implementation styles compilers develop code 
find current implementation needs industrial study attempted 
areas needing management state space methods generating test sequences 
interested conducting studies understand error coverage provided competing testing methods 
issues appears intractable near term focused areas 
believe approach offers exciting opportunities black box testing specific software properties focusing testing effort important 
exploring integration tools object oriented case tools telecommunications industry 
acknowledgments recognize efforts experimental participants excellent job done 
jagadeesan von :10.1.1.26.3347
framework evaluating specification methods reactive systems 
ieee transactions soft ware engineering june 
bellcore 
synchronous optical network transport systems common generic criteria 
technical report tr issue bellcore 
berry :10.1.1.17.5606
esterel syn chronous programming language design semantics implementation 
science computer programming 
brinksma 
theory derivation tests 
proceedings symposium protocol specification testing verification 
brinksma scollo 
lotos specifications implementations tests 
proceedings symposium protocol specification testing verification 
dillon kutty smith ramakrishna :10.1.1.35.4632
graphical interval logic specifying concurrent systems 
acm transactions software engineering methodology april 
dillon yu :10.1.1.52.6850
oracles checking tem properties concurrent systems 
software engineering notes december 
proceedings nd acm sigsoft symposium foundations software engineering 
gaudel :10.1.1.35.4632
testing formal 
proceed ings international joint conference theory practice software development volume lecture notes computer science 
halbwachs :10.1.1.52.6850
synchronous programming tive systems 
academic 
halbwachs caspi raymond pi laud 
synchronous data flow programming language lustre 
proceedings ieee 

statecharts visual formalism com plex systems 
science computer programming 
gory 
executable object model ing statecharts 
proceedings th international symposium software engineering pages 
jagadeesan von 
safety property verification esterel programs applications telecommunications software 
proceedings th international conference computer aided verification volume lecture notes computer science pages july 
jagadeesan von 
formal approach reactive systems software telecommunications application esterel 
mal methods system design march 
manna pnueli 
temporal logic reactive concurrent systems specification 
springer verlag 
spencer 
ess tm switching system 
technical journal part july august 
musa 
software reliability measurement prediction application 
mcgraw hill book 
see pages ff 

specification testing synchronous software 
proceedings th acm sigsoft symposium foundations software engineering 
pitt 
derivation conformance tests lotos specifications 
ieee transactions software engineering december 
richardson 
taos testing analysis oracle support 
proceedings international symposium software testing analysis august 
richardson aha malley 
specification test oracles reactive systems 
proceedings lth international conference software engineering may 
selic ward 
real time object oriented modeling 
john wiley sons 
wolper vardi sistla 
reasoning infinite computation paths 
ieee symposium foundations computer science pages 
personal communication 
mary zajac 
