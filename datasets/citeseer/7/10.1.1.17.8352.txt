appear conference computer aided verification june version appendix conference version automatic verification pipelined microprocessor control jerry burch david dill computer science department stanford university 
describe technique verifying control logic pipelined microprocessors 
handles complicated designs requires human intervention existing methods 
technique compares pipelined implementation architectural description 
cpu time needed verification independent data path width register file size number alu operations 
debugging information produced incorrect processor designs 
power method results efficient validity checker logic uninterpreted functions equality 
results include verification pipelined implementation subset dlx architecture 
design high performance processors expensive competitive enterprise 
speed design completed crucial factor determining success marketplace 
concern design errors major factor design time 
example month additional design time mips processor estimated cost design time spent verification test 
believe formal verification methods eventually significant economic impact microprocessor designs providing faster methods catching design errors resulting fewer design iterations reduced simulation time 
maximum economic impact verification methodology able handle modern processor designs applicable aspects design susceptible errors relatively fast require little labor provide information help pinpoint design errors 
best known examples formally verified processors extremely simple processor designs generally 
ver ification methods rely theorem provers require great deal skilled human guidance practical unit measuring labor studies person month 
furthermore processor implementations verified simple able avoid central problems control complexity 
verification techniques automatic demonstrated pipelined processors 
verification modern processors poses special problem 
natural specification processor programmer level functional model called set architecture 
specification essentially operational description processor executes instruction separately cycle instruction 
implementation hand need execute instruction separately instruction executing simultaneously pipelining formal verification requires proving specification implementation proper relationship relationship necessarily easy define 
successful efforts verify pipelined processors human guided theorem provers 
cases processor extremely simple large amount labor required 
examples attacked simpler current high performance commercial processors significantly capabilities automatic verification methods reported previously 
method targeted errors microprocessor designers bugs usually exist datapaths usually considered difficult floating point operations 
labor minimized procedure automatic development descriptions specification implementation 
implementation processor incorrect method produce specific example showing specification violated 
wish focus processor control assume combi national logic data path correct 
assumption formally checked existing techniques differences speci fication implementation behaviors entirely timing operations transfer values 
example specification stores sum registers destination register implementation may place result pipe register write result destination instruction begun executing 
logic chosen quantifier free logic uninterpreted functions predicates equality propositional connectives 
uninterpreted functions represent combinational alus example detailing functionality 
propositional connectives equality describing control specification implementation comparing 
validity problem logic decidable 
practice complexity dominated handling boolean connectives just representations propositional logic bdds 
additional expressiveness logic allows verification problems described higher level abstraction propositional logic 
result substantial reduction cpu time needed verification 
observed uninterpreted functions constants away details datapaths order focus control issues 
program analyzing logical expressions verifying non pipelined processor prefetch circuit 
details analysis procedure appears efficient address problems specifying pipelined processors 
method split phases 
phase compiles operational descriptions specification implementation constructs logical formula valid implementation correct respect specification 
second phase decision procedure checks formula valid 
sections describe phases 
give experimental results concluding remarks 
correctness criteria verification process begins user providing behavioral descriptions implementation specification 
processor verification specification describes programmer visible parts processor state updated instruction executed cycle 
implementation description highest level abstraction exposes relevant design issues pipelining 
description automatically compiled transition function takes state argument current inputs second argument returns state 
transition function encoded vector symbolic expressions entry state variable 
hdl descriptions appropriate compiler 
prototype verifier simple hdl small subset common lisp 
compiler translates behavioral descriptions transition functions kind symbolic simulation 
write denote transition function specification implementation respectively 
require implementation specification corresponding input wires 
processors verified explicit output wires memory modeled part processor model processors input setting causes instructions pipeline continue execution new instructions initiated 
typically referred processor 
input combination causes processor stall function represents effect stalling cycle 
instructions currently pipeline completed stalling number cycles 
operation called flushing pipeline important part verification method 
intuitively verifier prove implementation specification start matching pair states result executing instruction lead matching pair states 
primary difficulty matching implementation specification presence partially executed instructions pipeline 
various parts implementation state updated different stages execution instruction necessarily possible find point implementation state specification state compared easily 
verifier solves problem simulating effect completing instruction pipeline doing comparison 
natural way complete instruction flush pipeline 
precise 
implementation arbitrary state impl labeled old impl state 
complete partially executed instructions impl pipeline flushed producing flushed old impl state 
programmer visible parts im plementation state stripped define function proj purpose produce spec old spec state 
way spec constructed impl say spec matches impl 
new mpl stm re stm flushed old old 
impl state st pspec mpl te 
flushed new new 
stm impl state st fig 

commutative diagram showing correctness criteria 
pec tte spec tte arbitrary input combination pipeline recall specification implementation required corresponding input wires 
impl impl new impl state spec spec new spec state 
consider implementation sat specification matches check flush project impl see result equal shown bottom 
convenient slightly different equivalent statement correctness criteria 
different paths old impl state new spec state 
path involves called implementation side diagram path involves called specification side 
path corresponding function composition functions labeling arrows path 
say implementation satisfies specification function corresponding implementation side diagram equal func tion corresponding specification side diagram 
succinctly diagram commute 
reader may notice form commutative diagrams abstraction functions case abstraction function represents effect flushing implementation state applying proj function 
typical verification methods require exist abstraction function diagram commute 
contrast require specific abstraction function diagram commute 
cases may necessary verification restrict set old impl states considered 
case invariant provided invariant closed implementation transition function 
examples proved correct having invariant 
notice input applied implementation specification 
appropriate simple case implementation requires exactly cycle instruction pipeline filled 
cycle required extra cycles necessary apply inputs specification example discussed section 
checking correctness described verify processor check functions corresponding sides diagram equal 
functions represented vector symbolic expressions 
vectors component programmer visible state variable processor 
expressions computed efficiently symbolically simulating behavioral descriptions implementation specification 
implementation symbolically simulated times model effect flushing pipeline 
vectors expressions 
verify functions represent equal check formula valid logic encode formulas 
uninterpreted functions equality quantifier free logics include uninterpreted functions equality studied 
logics include addition arithmetical relations 
application verifying microprocessor control appear need arithmetic built logic ability declare certain uninterpreted functions associative commutative useful 
describing subset logic 
subset syntax itc denotes operator ter 
ite la term variable 
notice itc operator construct formulas terms 
included itc primitive simplifies case splitting heuristics allows efficient construction transition functions introducing auxiliary variables 
explicit quantification logic 
require specific interpretations function symbols predicate symbols 
formula valid true interpretations variables function symbols predicate symbols 
itc operator constants true false adequate constructing boolean operations include logical negation disjunction primitives decision procedure 
simplifies rewrite rules reduce formulas especially rules involving associativity commutativity disjunction 
verifying processor usually requires reasoning stores register file main memory 
model stores having unbounded address space 
processor design satisfies correctness criteria case correct finite register file memory 
certain conventions followed logic adequate reasoning stores 
efficient add primitives read write manipulating stores 
primitives essentially select store operators nelson oppen 
regfile variable representing initial state register file write regfile addr data represents store results writing value data address addr regfile 
value address addr original state register file denoted read regfile addr 
expression denotes store constructed variables itc argument read write operation 
validity checking algorithm pseudo code simplified version decision procedure checking validity description basic operation 
procedure preliminary may improved just sketch main ideas 
decision procedure differs respects earlier 
arithmetic source complexity algorithm included logic 
applications potentially complex boolean structure formulas check primary bottleneck 
concentrated handling boolean structure efficiently practice 
difference careful represent formulas directed acyclic graphs dags distinct isomorphic subgraphs 
reduce time complexity validity checker necessary cache intermediate results 
shown caching scheme cated standard bdd algorithms formulas cached relative set assumptions 
final major difference algorithm previous require formulas rewritten boolean combination atomic formulas 
example formulas form may contain arbitrary number ire operators checked directly rewritten 
detlefs nelson developed new decision procedure conjunctive normal form representation appears efficient practice 
able thorough comparison 
check recursive case analysis accumulates set assumptions argument deeper recursive calls see 
set assumptions inconsistent 
avoid tency require result ao choose splitting formula po negation logically implied 
call consistency requirement choose splitting formula 
maintaining consistency requirement easier restricting procedure choose splitting formula return atomic formulas formulas containing ire write operations 
written algorithm indistinguishable propositional tautology checker 
dealing uninterpreted functions equality done top level algorithm 
done routine 
example assumptions eu eu possible simplify formula false consistency requirement maintained 
result associated routines require large fraction code verifier 
spite consistency requirement significant latitude aggressively formulas simplified 
may best possible experiments indicate 
see reasons 
minimal amount simplification necessary meet consistency requirement may cpu time check formula set formula set formula var formula set formula set set formula ifp true return false print valid terminate unsuccessfully cache return cache hit cache choose splitting formula prepare case split false case simplify assumptions false case true case simplify assumptions true case assumptions cache add cache entry return fig 

procedure check terminates successfully formula logically implied set assumptions terminates unsuccessfully 
assumptions need relevant implying check terminates successfully returns assumptions 
set assumptions need minimal subsets implies checking valid done letting emptyset 
initially global lookup table cache returns emptyset formula cache returns set containing assumption sets sufficient imply previous calls check 
procedure formula heuristically chooses formula case splitting 
call simplify ao returns result formula formed simplifying assumptions 
second result set formulas simplifying sive simplification routine 
slightly case splitting needed resulting calls total cpu time may reduced 
second reason subtle 
suppose checking validity formula lot shared structure represented dag 
hope caching intermediate results cpu time typically needed validity checking grows size dag size tree representation 
important practice dlx example section unusual tree representation formula orders magnitude larger dag representation 
aggressive shared structure lost recursive case analysis appears result worse cache performance 
continuing experiment different kinds simplification strategies prototype implementation 
algorithm validity checker produces debugging information invalid formulas 
consists satisfiable set possibly negated atomic formulas implies negation original formula 
verifying microprocessor debugging information construct simulation vector demonstrates bug 
important difference current implementation algorithm 
result ao 
con description implementation required subset 
required formulas logically implied equivalence ofp logically implied 
result sophisticated subtracting sets done compute weak logically implied see 
second complication finding cache hit requires checking sufficient conditions logical implication sets formulas just set containment 
dealing complications justified cache hit ratio increased having return weaker subset 
experimenting ideas balancing issues efficiently 
experimental results section describe empirical results applying verification method pipelined alu subset dlx processor 
pipelined alu stage pipelined alu considered benchmark bdd verification methods 
natural way compare performance methods see cpu time needed veri fication grows pipeline increased size example increasing datapath width register file size burch clarke long cpu time grew roughly quadratically clarke grumberg long simple abstraction provided user demonstrated lin ear growth sublinear growth subquadratic growth achieved bryant beatty seger 
read ports write register file control fig 

stage pipelined alu 
stall input true instruction loaded 
src inputs provide address arguments register file op input specifies alu operation performed arguments dest input specifies result written 
verification method width data path number registers alu operations abstracted away 
result verification run check control logic pipelines combination values parameters 
total milliseconds cpu time running compiled lucid common lisp decstation required complete verification run including loading compiling behavioral descriptions automatically constructing abstraction function related expressions checking validity appropriate formula 
validity checking primary bottleneck larger examples required milliseconds pipelined alu 
dlx processor hennessy patterson designed dlx architecture teach basic concepts mips risc processors generation 
subset dlx verified types instructions store word load word unconditional jump conditional branch branch source register equal zero register alu instructions alu immediate 
pipelined alu described earlier specifics alu operations abstracted away specification implementation 
verification covers set alu operations assuming combinational alu processor separately verified 
dlx implementation standard stage pipeline 
dlx architecture branch delay slot implementation uses branch taken strategy 
pipelining exposed dlx architecture specification 
responsibility implementation provide forwarding data load interlock 
interlock lack branch delay slot mean pipeline executes slightly instruction cycle average 
complicates implementation specification verification specification executes exactly instruction cycle 
address problem manner similar saxe 
user provide predicate implementation states indicates instruction loaded current cycle executed pipeline 
predicate quite complicated easy express context internal signals generated implementation 
particular pipeline execute current instruction conditions holds stall input asserted signal indicating taken branch asserted signal indicating pipeline stalled load interlock asserted 
internal signals way possible bugs pipeline lead false positive verification result 
particular pipeline may appear correct get state refuses execute instruction kind livelock 
avoid possibility false positive automatically check progress condition insures livelock occur 
cpu time needed check included total 
specification state variables program counter register file data memory instruction memory 
data memory instruction memory combined store specification implementation verifier detect pipeline satisfy specification certain types self modifying code confirmed experimentally 
separating stores way avoid inappropriate negative result 
state variable specification verifier constructs appropriate formula checks validity 
specification implementation write instruction memory checking validity corresponding formula trivial 
checking formulas program counter data memory register file requires seconds seconds seconds cpu time respectively 
total cpu time required full verification including loading compiling behavioral descriptions seconds 
test introduced bug forwarding logic pipeline 
verifier required seconds generate counter examples formulas checked 
counter examples provided sufficient conditions initial implementation state effects bug apparent 
information analyzed hand construct start state simulator run expose bug 
concluding remarks need improved debugging tools obvious involved producing new processor implementation 
equally obvious problem worsening rapidly driven changes semiconductor technology architectures moving steadily simple machines complex machines aggressively exploit concurrency greater performance 
demonstrated techniques verify complex processors effort previous examples dlx implementation nearly complex commercial microprocessor designs 
dealt memory systems interrupts rich source bugs practice 
challenging increase capacity verification tools quickly designers increasing scale problem 
clearly com putational efficiency logical decision procedures practice worst case major bottleneck 
decision procedures extended rapidly may possible techniques partial verification mixed simulation verification tool 

beatty 
methodology formal hardware verification application microprocessors 
phd thesis school computer science carnegie mellon university aug 

brace bryant 
efficient implementation bdd package 
th ieee design automation 

bryant beatty 
seger 
hardware verification symbolic ternary trajectory evaluation 
th ieee design automation 

burch clarke long 
representing circuits efficiently symbolic model checking 
th um ieee design automation 

burch clarke mcmillan dill 
sequential circuit ver ification symbolic model checking 
th ieee design automation 

clarke grumberg long 
model checking abstraction 
nineteenth annual cm symposium principles programming languages 


proof correctness viper microprocessors level 
birtwistle subrahmanyam editors vlsi specification verification synthesis pages 
kluwer 


correctness properties viper block model second level 
birtwistle editor proceedings design verification conference 
springer verlag 
published university cambridge computer laboratory technical report 


automated high level verification algorithmic specifications 
technical report rc ibm research division nov 


automatic high level verification algorithmic specifications 
proceedings ifip wg conference computer hardware description languages applications ottawa canada apr 
vier science publishers 

microprocessor verification pvs methodology simple example 
technical report sri csl sri computer science laboratory dec 

detlefs nelson 
personal communication 

hennessy 
designing computer microprocessor experience lessons mips 
lecture symposium integrated systems seattle washington march 

hennessy patterson 
computer architecture quantitative approach 
morgan kaufmann 

hunt jr fm verified microprocessor 
technical report university texas austin institute computing science dec 

joyce birtwistle gordon 
proving computer correct higher order logic 
technical report computer lab university cambridge 

langevin 
verification processor circuits 
editors advanced research workshop correct hardware design methodologies june 

nelson oppen 
simplification cooperating decision procedures 
acm trans prog 
lang syst oct 

roscoe 
occam specification verification microprocessors 
philosophical transactions royal society london series physical sci apr 

garland guttag homing 
transformations verification circuit design 
technical report dec systems research center sept 

shostak 
practical decision procedure arithmetic function symbols 
acm apr 

srivas 
formal verification pipelined microprocessor 
ieee software sept 
illustrative example appendix give detailed description verified pipelined alu 
user provide behavioral descriptions specification implementation figures 
pseudo code figures generated simple syntactic transformations description language prototype verifier 
notice pipelining alu completely abstracted away specification quite explicit description implementation 
behavioral descriptions automatically compiled transition functions figures 
transition functions encoded associating state variable expression represents state variable updated cycle 
expressions logic uninterpreted functions equality described earlier 
concrete syntax expressions figures prototype verifier implemented lisp 
verifier automatically produces expression appropriate ab function 
abstraction function transition functions automatically produce expressions figures cor respond sides commutative diagram 
implementation correct expressions equivalent automatically verified validity checker described earlier 
stall regfile regfile regfile write regfile dest alu op read regfile read regfile src fig 

specification pipelined alu 
primed variables refer state values unprimed variables refer current state values 
notice apparent level abstraction specification 
bubble wb regfile regfile regfile write regfile dest wb result bubble wb bubble ex dest wb dest ex result alu op ex arg bubble ex stall dest ex dest op ex op bubble ex dest ex result read regfile bubble ex dest ex src arg result arg read regfile src fig 

implementation pipelined alu 
lines code specify register file updated final write back wb stage pipeline 
lines specify pipe registers updated second execute ex stage 
remaining code specifies additional pipe registers updated stage pipeline 
notice updated state current state value result necessary data forwarding properly pipeline 
regfile ite stall regfile write regfile dest alu op read regfile read regfile src fig 

register file state variable specification transi tion function component represented expression 
expression automatically compiled lisp version pseudo code 
regfile ite bubble wb regfile write regfile dest wb result ite bubble ex dest ex read ite bubble wb regfile write regfile dest wb result alu op ex arg fig 

transition function pipeline components represented expressions 
expressions automatically compiled lisp version pseudo code 
ite bubble ex ite bubble wb regfile write regfile dest wb result write dest ex alu op ex arg fig 

expression represents abstraction function fi om pipeline state specification state expression necessary register file component specification state 
notation denotes subterm defined earlier expression notation 
expression computed automatically transition function pipeline user need specify times iterate transition function flush pipeline times example 
ite stall ite bubble ex ite bubble wb regfile write regfile dest wb result write dest ex alu op ex arg write dest alu op read read src fig 

expression represents functional composition abstraction func tion transition function specification 
verifier compute composition automatically 
resulting function corresponds specification side commutative diagram 
ite stall ite bubble ex ite bubble wb regfile write regfile dest wb result write dest ex alu op ex arg write dest alu op ite bubble ex dest ex read ite ule ex dest ex src read src fig 

expression represents functional composition transition func tion implementation abstraction function 
verifier compute composition automatically 
resulting function corresponds implementation side commutative diagram 

