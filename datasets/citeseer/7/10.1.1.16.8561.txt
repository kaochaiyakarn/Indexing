dsc proceedings nd international workshop distributed statistical computing march vienna austria www ci tuwien ac conferences dsc hornik eds 
issn literate statistical practice literate statistical practice lsp method statistical practice suggests documentation specification occur time statistical coding 
applies literate programming knuth practice statistics 
discuss different approaches lsp currently implemented emacs noweb emacs speaks statistics ess developed extensible markup language xml tools 
interference needed change individual habits comes high cost tools critical encouraging people switch literate style 
discuss lsp help suggest ess ease burden placed analyst 
keywords data analysis programming tools user interfaces literate programming reproducible research 
statistics ability document programming language coding mathematical thought critical understandable explainable reproducible data analysis 
refer activities involved statistical research data analysis statistical practice 
activities involve computing ranging finding background material programming computation 
literate statistical practice programming methodology derived literate programming encourages construction documentation data management statistical analysis code produced 
code departments biostatistics university washington fred hutchinson cancer research center seattle wa usa 
supported center aids research uw statistical center hiv aids research prevention 
proceedings dsc documentation literate document 
resulting document provide clear description paths taken analyses produce working dataset descriptive exploratory confirmatory analyses 
describe results lessons learned statistical practice means reproduce steps concise reconstruction taken analysis 
literate programming knuth describes approach combining code documentation source file woven description processes algorithms results obtained system tangled actual code 
goal literate programming flexibly notion code plus documentation allow maximum documentation efficiency compiler interpreter efficiency 
primary steps constructing results literate document tangling produces code files weaving produces documentation files 
initial done language specific form pascal web intention documenting 
extended 
research took forms language independent noweb supporting contributed facilities language specific implementations provide tighter integration 
literate programming applied past statistical practice 
probably earliest simply literate programming writing statistical software compiled languages fortran 
extensions include literate programming production dataset codebooks carey seminar fall harvard 
analyses lang wolf relates reproducible research schwab 
done non literate fashion donoho discussed 
intended reproduction creation 
creation emacs modes noweb support lead combination ess noweb provide tool allowing efficient interactive analysis 
mark lunt refactored code construct better noweb interface integrate tightly ess longer requiring noweb run analyses 
current ideas include development tools clean user interface 
programming methodologies exist describe different styles producing code 
popular approaches include structured programming niklaus wirth aspect programming extreme programming 
structured programming approach hiding tasks reusable functions subroutines 
extreme programming novel philosophy realized programmers workstation writing test cases prior code disposable crc class responsibility collaborator cards constructing design 
aspect programming approach object oriented programming emphasizes reflection modularization cross cutting concerns new software module level aspect 
difficult see approaches applied statistical practice possible extreme programming approach 
tools critical literate statistical practice minimally proceedings dsc sive statistician 
hardest tasks known convince competent computer user switch preferred computing environment new 
users quite hesitant usually reason learn new ways 
seen common editor wars pointless attempts convince people switch tools don want 
integrated development environments ides combine features tools single interface attempt increase programmer productivity efficiency 
increased speed commercial software development time decade partially attributed ides similar rapid application development rad tools methodologies 
field statistics programming important skill augmented enhanced right tools environment 
especially true rise computational analysis tools resampling methods including bootstrap jackknife approaches markov chain monte carlo mcmc sampling gibbs metropolis hastings algorithms 
literate statistical analysis primarily interested describing documenting statistical practice tasks actions daily activity statistician provide repository results analysis 
application literate programming statistical practice past included documentation methods report generation referring process reproducing analyses possibly changing data set 
focus literate programming techniques daily means examine tools removing burden literacy tools statistical practitioner focus language neutral tools 
field statistics different analytic tools targeted particular styles statistical analysis 
suggests efficient habits require switching data analysis tools 
section discusses applications noweb focusing extensions emacs enhance literate statistical practice 
approaches fully xml coded literate programming discussed 
conclude possible developments needs 
noweb approaches noweb ramsey probably literate programming tool employed statistical practice 
tool language independent literate programming focuses building files indices html pretty printing 
noweb quite suitable data analysis seen approaches 
primary criticism noweb particular tools available automating document production generating documents viewing electronic viewers pdf html results 
people manual construction 
noweb document processing tool takes source file produce documentation files latex html con take produce proceedings dsc human readable documents code files fed compiler interpreter constructing executable object 
noweb views literate program formed chunks sections text 
chunks categorized documentation code chunks documentation chunks pertinent nearby code chunks code chunks form named indexable reusable components embedded code chunks form sections computer programs 
primary advantage code ordered enhance presentation doesn located near parts lie final source file 
applications noweb include documenting compiled programs combining statistical packages file format provide input statistics packages 
thought just programming application particular statistical focus 
second approach realized lang wolf uses noweb interfaces plus application allows lining documentation noweb focuses interface statistical language implementations 
extensions tcl tk interface gui 
third approach file format necessarily noweb program tasks 
approach implemented emacs noweb mode monitor location cursor file ess editing mode statistical coding processing tex sgml mode documentation editing documentation sections 
ess noweb ess currently supports number interactive statistical programs interpreted statistical languages including family languages versions plus sas stata xlispstat including extensions arc vista 
various levels support depending capabilities program needs users 
ess builds extremely powerful emacs editing capabilities emacs ability communicate directly running process ess provides powerful uniform interaction statistical programs languages 
emacs speaks statistics ess provides single keyboard interface family statistical computing tasks 
primary user tasks ess optimized statistical coding interactive data analysis 
statistical coding writing computer code data analysis 
code compilable language fortran interpreted language plus sas xlispstat perl python 
task entering commands interactive data analysis similar 
case text written computer language sent computer program compilation interpretation 
primary difference results small set commands critical interest review analysis phase results commands interest coding phase 
tasks time example compiled fortran code optimization called interpreted language plus xlispstat containing objective function optimize 
proceedings dsc ess choose focus editing interface interfacing editor statistics package noweb file format determine code documentation editing mode 
allows interface remain language neutral programs 
ess noweb interface extends ess providing coding environment enhanced production noweb documents adding options submitting code chunk including embedded code chunks running statistical process adding options submit thread chunks running statistical process form documentation satisfied atex sgml html xml markup processed human readable document 
xml extensible markup language xml approach marking context primarily www data representation standard generalized documents 
standardized general markup language sgml intention similar basic 
xml gets converted extensible stylesheet language xsl 
program applies xsl xml get realization document referred xslt xsl translator 
primary specification xml document document type definition dtd similar schema language example xml schema 
important justifications considering xml existence rapid development xml parsers translators common common computing environments 
number basic approaches xml language independent literate statistical practice 
consider xml documentation markup language suggested section noweb 
rest consider xml primary markup language entire literate document 
approach document just documentation language 
approach technically referred xml application literate programming 
literate programming component entire application discussed section just modular component see section 
sperberg mcqueen early approach literate programming sgml 
suggested tag set real implementation translator 
sgml extensible include tag set similar noweb demonstrated 
tools handling sgml documents difficult complex develop 
inhibited sgml encouraged development xml simplified form allows markup 
proceedings dsc current language neutral approaches include ess xml authoring environment emacs uses xslt producing final form documentation 
currently needed construct general code files 
approach snake statistics needs environment currently development 
written python uses piper python peer peer control system constructing xml document contains components literate document interfaces statistical software systems 
language specific approaches currently development project include roundtrip environment embedding xalan xslt processor output 
easily extendible language support extensions including 
initial targeted reproducible research teaching probably extendible general statistical practice 
number projects looking approaches language neutral literate programming xml 
approach roberts takes literate programming presentation coded markup language 
description tag set 
simply root element 
takes attributes 
format name name format element defines named format 
item may specify format wants generate page 
format specified default format 
object name name language language item start variant variant object element defines output file 
variant feature allow selection certain pieces rejection tangling multiple objects single presentation 
piece shared variants won variant tag 
item name name label label format format main item defines page documentation sub items may follow main item 
sub item defined item name period documentation code sub item appended parent page italicized heading link anchor created post period part name example page tangle html link anchor name tangle 
list items available tag sub items second level list 
item list heading contains link documentation page effectively creates table contents 
piece variant variant add addto items define documentation pieces define code output 
piece embedded item 
piece variant attribute included objects proceedings dsc matches variant spec 
filtered 
finer control variants embed variant tag piece 
primary application variant system documentation porting projects os languages 
variants tangled presentation share patterns add attribute optional causes piece added currently active item item named similar noweb feature 
variant name variant piece part piece subject suppression 
useful operating system language specific code 
insert name name tangling pieces code done noweb literate programming systems construct compilable interpretable files 
modular dtds alternative approach constructing single dtd extend modular dtd markup tags literate programming 
approach consider noweb approaches code chunks letting xhtml similar text style dtds provide document code documentation structure 
approach restrict additional tags name href variant file code specifying code tangled 
variant allows setting conditional language operating system similar computing environment settings results desired 
name href specification recursive tangling 
index name href code docs index index specifically hyperlinks indexing program specific code documentation 
critical decision code character data cdata parsed character data pcdata specified 
allows character insists lt representation true special xml entities denoting markup 
primarily importance document editing translator care ends producing final code file 
current suggests cdata readability simple editors editing modes handle appropriately pcdata 
critical issue specific indexing tags 
provide example xml indexing systems tools provide proceedings dsc needed resources including rdf resource definition format rss real simple syndication allow construction indices summaries xml document 
generally better modular components corresponding tools handle tasks needed 
literary styles literary styles possible 
style reflects combination statistical practitioner views problem message conveyed target audience 
literate programming assumes minimal level programming competence reader literate statistical practice possible targets including statisticians students actively learning desired material scientists minimal statistical background 
styles considered examples 
style referred consultant style 
style uses format sectioning various components short term consulting project 
sections ordered 
problem 
planned approach 
data management 
descriptive statistics 
inferential statistics 
lessons analyst remember including discussion description bibliography methods employed practical issues coding data handling associated methods 
concluding report consulting client 
appendices contain dataset codebook links copies background material incorporated 
general tone scholarly article 
second style referred institutional memory approach 
style primarily consists documenting program research mathematics implemented 
simplest describing mathematics simplest approach computing mathematics 
issue researcher starts working new colleagues ongoing project example new students professor working area numerous done research 
approach documents intelligence past attempt minimize repeated mistakes 
document style implemented uses style initial chapter reading journal article subsequent chapters containing individual collaborating researchers working pieces research program 
prime example proceedings dsc reproducible research stanford exploratory project group stanford geophysics department 
possible styles literate statistical practice literary style flexibility terms presentation 
common sense suggest content figures plots corresponding code chunk accessible nearby data management moved appendix actual code reconstructing dataset copy original critical documenting analysis process 
remarks literate statistical practice number obvious benefits 
results contained thorough presentable document thought process involved 
addition obvious approach reproducing results 
tools currently development remove burden statistical practitioner 
number problems lsp 
foremost need change development tools 
philosophical effect high impact practical problem necessitating slow productivity new tools practices developed habits 
severe cost lsa front loads need think sufficient consideration approach developed prior actual coding data analysis large delays created useless code constructed 
argument enforcing discipline penalizing lack discipline positive learning experience discouraging practitioner experimenting approach 
wasted time happens definitely positive feedback 
gains literate statistical analysis free require great deal discipline construction document 
lsp forms component assists production carefully considered data analysis 
experience author suggested lsp quite useful efficient documenting statistical consulting collaboration revolving single study multiple datasets 
key unit documentation author experience single closely related group scientific questions 
noweb derived approaches ess auc tex targeted makefiles resulted platform efficient production 
jonathan david donoho 
reproducible research 
technical report stanford university statistics department 
jan 
reproducible research bottom line 
technical report ucla statistics department 
available stat ucla edu added ucla tech report list difference number year written 
proceedings dsc paul 
xml authoring environment emacs 
www 
donald knuth 
literate programming 
number csli lecture notes 
center study language information 
lorenz lang hans peter wolf 
manual splus windows 
uni 
bielefeld germany 
www de software html 
thomas 
survival analysis xlisp stat program 
journal statistical software 
norman ramsey 
literate programming simplified 
ieee software september 
michael roberts 
www 
www com language html 
schwab jon 
making scientific computations reproducible 
technical report stanford university stanford exploration project 
sperberg mcqueen 
sgml tag set literate programming 
www 
www uic edu tech html 
