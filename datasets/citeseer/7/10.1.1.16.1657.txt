method mixins erik ernst department computer science university denmark daimi au dk 
procedure call mechanism conquered world programming object oriented method invocation procedure call context object 
presents alternative method mixin invocations optimized exible creation composite behavior traditional invocation optimized reuse existing behavior 
tight coupling reduces exibility traditional invocation tightly couples transfer information transfer control 
method mixins decouple kinds transfer opening doors new kinds abstraction reuse 
method mixins shared name spaces transfer information caller callee opposed traditional invocation uses parameters returned results 
relieves caller dependencies callee allows direct transfer information call stack callee callee 
mechanism implemented programming language gbeta 
variants mechanism added programming language mutable state 
mixins known device allows decoupling subclasses superclasses :10.1.1.156.4510:10.1.1.23.8118
presents related concept method mixins allowing novel ways profound decoupling behavior speci cations traditional procedure method calls 
basic idea method need monolithic entity may constructed smaller parts method mixins may reused construct di erent methods 
procedure call method invocation may create complex behavior existing simpler behaviors method mixins represent di erent set trade reasons having method mixins language 
traditional invocation caller depends multiple characteristics callee including number order arguments 
method mixin caller completely independent callee 
traditional invocation caller provide extra information callee adding extra argument call means callees method classes modi ed accept extra argument 
method mixins caller may provide extra information freely callees need extra information callees need changed 
traditional methods communicate arguments shared state objects globally 
mixin methods support novel scope shared state improves encapsulation programs robust context recursion multiple threads 
mixin methods potential better performance traditional invocation 
novel useful feature method mixins able create customized methods run time 
contributions basic concept method mixins properties detailed comparison traditional invocation presentation mixin methods implemented gbeta 
uni ed descriptive framework variables related concepts channels characterize qualities method mixins compared mechanisms support basic premises direction development 
rest organized follows section introduces communication channel point view number concepts including variables 
section presents basic principles method mixins compares traditional invocation mechanisms 
realization method mixins gbeta sec 

related discussed sec 
sec 
describes implementation status sec 
concludes 
variables channels quite common describe languages mutable state machine oriented describe functional logical kinds declarative languages liberated old fashioned attachment bits memory cells 
opinion brought prominence turing award speech john backus see 
note backus language fp restricted completely communication topology fig 
described sec 

recognize functional paradigms produced deep useful results 
opinion imperative languages especially object oriented ones widely inherent power exibility programmers writing programs assembly language 
question abstraction hardware concreteness safety freedom 
restrictive communication topologies bring safety exible topologies bring freedom 
substantiate need consider variables similar concepts communication channels making comparable 
venture project expanding role played imperative variables exploiting exible communication topologies new way method mixins 
variables related concepts value carrying entities semantics language 
may may mutable may may name 
typical examples global variables pascal static variables class method instance variables java object local variables python method invocation function arguments return values haskell patterns beta structures sml 
ability entities carry information directly useful 
useful information produced part program execution communicated part uencing actions taken values produced 
entities useful communication channels 
communication channels support sending receiving values 
imperative variable sending assignment receiving evaluation 
class value sent de ned compile time link time received run time name class mentioned currently running code 
sml structures may created runtime top level channels behave class 
interesting channel behaviors discuss important topologies 
rst need describe contexts communication topologies may exist 
topological space communication topologies establish space exist 
rst dimension need time 
need locate places source code 
assume syntax trees asts available 
interesting selection source code set ast nodes 
scope denotes systematic selection ast nodes rules language 
single piece syntax may correspond runtime entities java class may instances 
concept multiplicity multiplicity global variable declaration multiplicity instance variable declaration class 
notion enclosing instance allows select entity multiplicity greater instance enclosing object java method invocation object denoted 
summary communication takes place certain time certain source code area certain instance 
topologies characterized means constraints coordinates 
simple communication topology probably simplest communication topology fig 
topology returning value function call 
diagram right gure illustrates source code dimension 
communication illustrated lines small bullet indicates send operation arrowhead 
indicates receive operation 
operations de ne means open set 
notion topology closer commonly connection computer networking 
operation send operation function body receive operation call site fig 

communication topology function return value enclosed circles representing source code area operations occur 
area described column table function body call site single ast nodes 
channel sending resp 
receiving particular syntactic location 
time constraints illustrated column 
bar indicates operation allowed line indicates 
time progresses left right rst phase exactly send operation phase exactly receive operation 
summary fig 
illustrates function return considered channel send operation sending value function body receive operation expression evaluation call site 
instance invocation associated operation gure explicit 
note channel name forces operation occur particular ast node 
say channel extremely narrow scope 
kind channel temporary values communicate value subexpressions evaluation composite expression 
syntactically lightweight ensures disciplined communication patterns 
words programmers may ignore constantly 
safe topology illustrates communication topology widely enforced situations languages 
example binding function argument value function invocation haskell 
case channel function argument name subject strict discipline 
exactly send operation 
takes place evaluation actual argument just function call 
zero receive operations formal argument name evaluation function body 
diagram right contains bullet indicating send operation call site enclosed narrow scope consisting single ast node actual argument expression call site 
large oval represents currying pattern matching complicate matters point time ast node argument bound value 
operation send operation call site receive operations function body preparation execution fig 

communication topology functional argument function body scope formal arguments 
arrowheads illustrate argument may evaluated function body 
kind channel useful may interpret follows receive operation provides exactly message sent call site current function invocation 
reasoning function arguments easier programmers maintain discipline 
language enforces discipline haskell functional languages allows lazy evaluation hindley milner style parametrically polymorphic type systems type inference 
non trivial cost programmers pay accept strict discipline loss communication exibility 
believe general exible communication topology described section useful programmers largely explains pure functional languages conquered world programming 
general communication topology communication topology supported imperative variable general exible previous 
shows topology 
operation send operations scope receive operations scope fig 

communication topology imperative variable topology quite simple describe 
bars column indicate send receive operations allowed anytime 
diagram right illustrates location scope variable perform operations 
typically instance constraint 
assignment instance variable smalltalk ects current object 
topology exible channel may send messages may send messages places scope may send messages di erent receivers 
need change declaration channel order extend modify topology 
supports shifting multiple topologies dynamically 
imperative variables broken channels 
send operation may potentially destroy previously sent value received 
built support ensure rst receive comes rst send 
data ow analysis default initial values initialization expressions improve situation perfect 
interesting improve imperative variables channels just conclude power exibility general communication topology useful programmers large numbers choose handle problems 
problems programmers may manage judicious program design imperative variable resource 
larger scope lower multiplicity con icts 
avoid coordination needed usage locations 
power exibility lets express sophisticated communication topologies need may trick creation unnecessary complexity 
entire ort called object orientation described solution problems perfect useful improvement 
supporting expression smaller entities program objects allows programmers concentrate manageable chunk complexity 
lets group conceptually related procedures communicate set imperative variables explicitly reserved purpose 
encapsulation internal complexities means simple useful interface ensures step reduces global complexity subtype polymorphism greatly enhances ect 
second separating notion class object providing clone primitive self classless languages supports creation multiple instances sets variables 
goes transition procedures methods method pair consisting procedure object 
features object oriented programmers power imperative variables keep complexity resource con icts control 
approach gives priority freedom communication declarative languages generally give priority safety object oriented programmers little harder get 
seek improve safety preserving freedom 
introducing new narrow scoping mechanism object letting behavioral entities communicate means shared state created individual invocation group behaviors 
approach deeply object oriented nature 
section explains works 
method mixins method mixin mm equipped behavior local state just procedure 
associated enclosing object just method 
invoked name accept arguments return results 
communicates caller means access shared state 
methods object may communicate means shared state object shared state group mms declared enclosing object declared directly mms 
graphical notation explain basic principles mms shown fig 

linkedlist lst object elm int count lst hasnext elm inner random rg new random rg system println elm count fig 

method mixin invocations 
stack assume run time context running program capable composing invoking mms 
graphical notation shows run time execution stack growing downwards number currently executing mms 
mixin method invocation mmi separated neighboring mmis horizontal lines 
mmi similar activation record readability show declarations source code storage cells containing values declared variables pointers compiled code precise 
example code java readability just added inner statement 
section describe mm principles 
section describes mms implemented gbeta 
shows mmis marked notation referring 
code executes standard java 
visible di erence may execute inner statement ect call mmi stack 
instance call executes inner 
call operation denotes jump body terminates return just inner statement transfer arguments takes place return result 
inner executed bottommost mmi 
apart inner statement crucial di erence standard java semantics mixin method execution body mm included scope declarations mms 
instance uses names elm count declared note names declared declares local state 
may describe ect executing mmis contains generic iteration code accesses elements list calls element 
statement randomly execute body time calls current list element printed count incremented 
summary mmi group randomly selects elements list prints counts 
designing mms necessary decide scoping rules exactly mmi included scope declarations possible choice dynamic scoping rules 
mmi uses name locally de ned entire call stack searched mmi de nes name design hard type safe believe obscure surprising semantics 
reason mmis grouped scope mmis limited inside group 
instance group lookup operation look mmi outside group 
note mmi may scope enclosing objects just scope mmis group 
order enable static type checking ensured mmi member groups name de ned member group 
gbeta chosen express mms way mm declaration site statically associated exactly mms may declared names 
ensured mmi group runtime contains necessary fellow members members trivial impossible express mm isolated depends 
design decision life times mmis 
obviously depends state exist moment exists 
sound allow kind life times respect criterion 
gbeta chosen restrictive approach mmi group extended members taken 
properties language particular virtual patterns rei cation method invocations type analysis unsound possible remove mmi group 
point compare mms ordinary methods di erent points view section 
method mixins vs ordinary methods mms supplement replacement ordinary methods 
devices represent di erent trade sense allow programmers trade explicitly 
able characterize purposes device suitable consider di erent points view external written entity solves particular problem may reused times accessed di erent contexts 
point view emphasizes preexisting entity call passive reuse 
internal entity may general structure allows solve di erent problems able express variants 
point view emphasizes creation variants exible entity call active reuse 
apply behaviors consider method mm 
passive reuse focuses able call active reuse focuses controlling methods calls 
kinds reuse complement 
passive reuse governed explicit interface easy 
help suitable entity available 
active reuse may allow build kind entity needed 
active reuse dicult passive reuse sense usually requires knowledge internal structure entity create specialized variant 
return investment active reuse gives exibility 
important active reuse mechanisms exible 
reasonable say passive reuse large scale mechanism reusable entity reused large scope entire program 
hand active reuse focused internals entity specialized 
believe ordinary methods suitable choice passive reuse mms powerful active reuse 
compare mms ordinary methods various di erent points view exposing weak strong points 
communication 
ordinary methods may communicate means arguments returned results means shared access mutable state reachable entity global variables instance variables object 
note usage shared state object globally error prone resource con icts may arise recursion multiple threads causes invocation methods exist simultaneously 
arguments may transfer information caller immediate callee return values may transfer information back callee caller 
argument pointer type may establish aliased access mutable state 
aliases may similar way kinds shared state 
may fewer resource con icts object state globals require declaration arguments methods contiguous part stack methods shared state example consider 
mmis communicate means shared state mmis may course shared state 
communication local shared state considerably exible communication arguments 
particular communication may happen number possibly oblivious mmis 
example fig 
ability entities declared depend 
ordinary method invocation method corresponding calling method call method 
information delivered delivered argument just pass shared state object globally 
particular call introduce changing call transfer information needs 
callee dependencies 
consider situation ordinary method foo called 
achieved writing name foo call site explicit argument list 
call may expression foo returns result 
means caller depends number order types arguments name callee result type callee 
methods rst class entities object oriented languages including java ei el way implementation foo may vary late binding 
languages may function pointers similar devices dependency signature callee common cases 
mms di erent respect 
invocation mm simply keyword inner caller entirely independent callee 
mention name callee arguments returned result 
possible callee case inner 
means mm sense maximally exible respect callees attached 
caller dependencies 
consider task writing ordinary method bar part job specify exact arguments types return type 
works interface callers explicitly de ned allows body method information received callers knowing 
ordinary method depend callers 
hand bar needs information order carry prescribed task way get information callers changing interface bar changing call sites add new arguments 
especially laborious bar working implementations bar di erent classes method implementations new arguments added declarations 
mm di erent 
may depend declarations callers 
means mm may called nearly exible ways ordinary method called directly indirectly mms depends 
provide greater exibility structural equivalence determine mm called mms easily hard understand ect body mm di erent contexts just happen agree declared names 
hand mm uses names callers ected changes applied names 
instance add new declaration caller name callees callees remain unchanged 
summary mm depends inferred partial interface callers di erent mms callers may di erent inferred interfaces 
contrast ordinary method uses information exclusively immediate caller explicitly de ned interface 
di erent methods called call sites agree precisely interface call sites 
encapsulation 
ordinary methods encapsulated relation sense caller knows callee name signature 
encapsulation group methods need communicate may broken reliance external shared state 
method changes state enclosing object may conceptually motivated object state global state mainly transfer information method invocations error prone 
inter method communication mms support exact match involved methods life time scope state communication enable improved encapsulation area 
hand mms able internal structure manner 
optimized gray box reuse 
supports claim mms appropriate active reuse ordinary methods oriented passive reuse 
note possible mmis contain state life time mmi group depended members 
example rg fig 
uences behavior group scope paragraph communication assume achieve similar ect ordinary methods 
rg declared corresponding earlier delivered invocation corresponding relied external state object 
static variable inside method due multiplicity give rise resource con icts cases instance executing time 
sense mmi group better encapsulated ordinary methods possible depend dynamically state matches life time multiplicity oblivious state 
life time 
procedure method invocations nested life times caller lives long callees possibly longer 
number invocations run time stack unbounded 
possible organize entire program execution terms traditional invocations 
mms composed groups invoked unit 
di erent design decisions respect ability add remove members group execution gbeta supports addition new members execution restarted recommended nish building mmi group executing 
topmost member group terminates mmi group considered terminated 
mms behavior structuring principle entire program execution 
mmi groups expected consist members tens members 
mms allow deeper exible composition ordinary methods hand probably best require align life times 
saw may improve encapsulation 
call topology 
ordinary method may call number methods 
mm may directly call mm means inner statement 
considered ways relax restriction design 
gbeta may create number nested virtual methods mm may invoke inner allow addition mms inner site virtual method call site 
mms may course ordinary method calls bodies 
kinds entities communicated 
method argument may entity certain kinds languages usually known rst class entities 
instance java method receive method argument class argument accessed re ection system means type safety lost special syntax create instances class mms communication takes place means shared name spaces 
declared communicated 
name spaces 
ordinary method provides name space means formal argument list caller initialize name space 
possible languages de ne default values arguments argument number upwards 
possible call method fewer arguments argument list contains corresponding situation caller say arguments 
note provides information callee callee statically declaration 
mmi called group callers say simply prohibited access name known exist caller name declared enclosing entity 
easy relax restriction preserve type safety 
fact mm may choose declared names statically known callers allows phenomenon callers say 
enables callee expand usage dynamically provided information call site having synchronize callees 
usual mms emphasize ability enhance ect callers ordinary methods emphasize ability called arbitrary call sites 
invocation 
ordinary method invoked calling 
involve methods takes arguments type function pointer called language calls 
mms composed mm group invoked 
mmis positioned topmost called group called may may called inner 
mms composed outside way determine mm call inner executed 
mm call operation composing mms may compared higher order function functional language 
higher order function behave similarly traditional call chain described earlier function call calls third transfers information explicitly passing information performance 
invocation routine procedure method course include jump subroutine instruction return instruction just tasks associated standard invocation 
signi cantly requires setting activation record including setting actual argument values activation record 
includes saving registers memory caller save registers saved just jump callee save registers saved just jump registers restored invocation 
may tasks perform standard calling conventions platform 
leaf routines routines call routines may invoked setting invocation record invocation may reduced essentially jump return instruction 
done statically known call site callee leaf routine local state 
may necessary save restore registers 
callee statically known may possible inline call compile routine directly call site avoid transfer control entirely 
main diculty incorrect simply transfer source code binding environment generally restrict inlining certain speci set method shapes forwarding method just containing statement calls method arguments satisfy constraints special cases apply kind source code transformation compensates change binding environment restricted cases transformations known correct 
inappropriate inline possible may cause program size explosion 
inlining possible desirable usually improves opportunities various optimizations including avoiding save restore cycles registers allowing better register allocation things loop common subexpression elimination 
mms situation di erent 
mmis group life time possible set activation record group 
group statically known common nature mms size combined activation record known statically including sets local state member mmis possible compile entire mm group 
multi level inlining operation 
appropriate mms optimized exible customization speci callers expected called places 
reason inlining easier mms ordinary routines generally share binding environment 
possible members mmi group located di erent objects just means pointers combined activation record statically known 
course known statically members mmi group 
process setting common activation record happens mmis group may called times 
members added group extensively reorganized cheap operation probably occurring rarely 
mmi may able access state mmis generally necessary dynamic case static equip mmi pointers sets mmis depends 
note inter mmi pointers sets similar static links languages support nested procedures pascal 
need pointers mmi group known statically generally necessary generate di erent code cases 
dynamic code generated mm static code generated mm group 
order minimize code size possible dynamic code static case reduced performance indirect cross mm state accesses 
mmi uses state mmi enclosing object local state may executed stack pointer pointing fig 
example 
matter intervening mmis give correct semantics code compiled assumption 
case static performance achieved static knowledge entire mmi group 
note situation similar situation leaf routine invocation reduced essentially jump subroutine return possibly register save restore cycles 
important di erence need leaf need compiled knowledge callee uses optimization 
current implementation gbeta generates executes byte code released gbeta supports dynamic mm kind code generation 
reasons expect mm invocation better performance ordinary invocation mm may reuse activation record calls cost transferring arguments returning results 
mm target inlining largely shared name spaces fact mms nature called places 
mm inlined may possible call similar manner leaf routine 
summary nature mmi group single method invocation set method invocations size group exible traditional method invocation expensive methods calling 
method mixins gbeta language gbeta supports version mms tightly integrated language method created composing mms 
signature arguments return values speci ed incrementally may happen mm speci es argument list list returned results 
single mm signatures 
mms gbeta occur lists mms mm exist accompanied mms depends 
lists composed means operator 
lists merged merged list contain elements argument preserving order 
achieved means linearization algorithm 
linearization topic refer details specify result merging 
improve readability readers familiar language gbeta adjusted syntax examples java 
particular argument lists written outside method bodies assignment statements written assignment method invocations written argument lists name method just java main stream languages 
fig 
shows archetypes mms useful di erent contexts 
gure stand pieces code contain inner 
similarly boolean expression contain inner 
rst archetype common 
suitable sequential composition behavior 
mn method mixins type merged result mn contain mms order mn inner inner inner inner inner fig 

mixin method archetypes execute actions call followed actions words archetype allows programmers compose sequences operations shared state mms may simply composing mms order 
mmis stack look follows inner inner inner second archetype similar merging mn execute actions reverse order compared order mms 
note merging operation depend composing mms type type mixture entirely di erent 
allows mm writer specify composition order rules mm composer may having know 
third archetype combines rst types having actions inner statement result actions executed parenthesized order 

words mm wrapper rest mms 
wrapper may manage resources acquiring lock database table inner releasing 
fourth fth type mm control execution mms 
mmi marked number fig 
type 
variant fth type fig 

shows example demonstrates usefulness able compose methods method mixins 
auxiliary method returns true iff arguments di erent 
method ns plays role name space range computations accepts float argument calls inner returns float result idea various functions implemented adding mms producing result declarations specify mms depend ns may implement functions 
mm iterate depends directly ns provides new local variable executes mms repeatedly long di erent loop invariant old guess float float float return abs abs float ns float float inner return iterate ns float inner inner step iterate peek iterate print inner fig 

computing square roots newton method new guess 
guesses equal result assumed suciently precise iteration stops 
note iterate may di erent mms just need able produce better guess currently mm step algorithm core producing new guess old may execute algorithm follows float result ns iterate step step depends iterate ns exist get ect simply executing result step 
ns iterate implicitly included 
may matter personal preference style explicit declaration clear choice naming appropriate sqrt ns iterate step may execute result sqrt 
note sqrt method class instances accessed polymorphically code sqrt may generated static knowledge included mms best case performance 
dynamic case mms compose group statically known 
may create variant sqrt prints current guess step iteration debug sqrt peek sqrt execution method mmis stack float inner return float inner inner print inner see guess printed just new guess computed code important getting right semantics mmi peek located number 
happens peek depends number iterate composed debug sqrt arguments order 
order control behavior composition sophisticated ways necessary programmers take look linearization works languages mms composed linearization 
think easy little bit practice 
applied method modi cation invocation polymorphically accessed object 
look follows float result peek sqrt dynamic case known code generation exactly mms resulting method runtime 
consequently expect pay certain penalty performance executing dynamically created method access core algorithm happen indirectly 
related comparison mms ordinary methods main topic sec 
kind related played important role 
mechanisms need considered 
gbeta generalization language beta gbeta owes beta 
uni cation classes methods general concept pattern originated beta gbeta 
inner mechanism originated beta ability access state mm gbeta originates beta inheritance mechanism 
established traditions beta patterns way similar examples lst list element text lst scan current piece beta gbeta code elements list lst visited printed lst scan block containing similar way mmi groups described 
relation behaviors pattern subpattern described behavior specialization relation beta community 
knowledge analyzed subroutine invocation mechanism 
understandable beta equivalent gbeta mm inaccessible 
analogously class mixins correspond di erence class superclass languages di erence language supports mixins 
result mm pattern beta tied exact group mm callers contexts 
contrast gbeta supports exible pattern composition mechanism possible choose call mm di erent contexts 
suddenly method invocation 
summary crucial elements framework mms available beta years 
consider contribution right analyze inner mechanism method invocation mechanism showing represents di erent set trade ordinary procedure method invocations 
generalization process lead design implementation gbeta contains signi cant contribution notion mms expressive potential mms available generalized concepts gbeta 
language mechanism usable similar purposes mms macro mechanism common lisp 
macros capable manipulating source code individual characters syntax trees extremely exible manner program transformations means arbitrary user de ned functions 
general transformation capability hard ensure output macro known properties 
host language supports static type checking gbeta hardly way check typing properties macro call expand macro 
indicates macros able coexist static typing time able expanded dynamically 
mms gbeta composed dynamically con ict static type checking 
dylan macros similar hygienic means allow names macro calls captured new binding environment associated macro de nition vice versa 
possible intentionally violate hygiene binding name macro de nition expressions macro calls considered dangerous practice 
words macros intended combine behaviors having shared access name space core idea mms 
composition lters approach allows exible adaptation ect sending messages 
composition lters redirect message receiver change selector method name modify arguments message 
special lters purposes delaying message condition satis ed 
approach largely orthogonal mms method mixins concerned construction methods composition lters concerned selection method call 
aspect oriented programming approach aims provide new abstraction mechanisms programming languages 
approach generally emphasizes ability modify meaning entity class method having modify syntax entity 
called noninvasive modi cation main bene modi ed entity may client code changing client code 
inherent property non invasive modi cations modify existing entity create new 
means way express di erent variants entity coexist program 
words aspects support active reuse 
conversely mms invisible client code hidden ordinary subtype polymorphism 
areas overlap 
instance mm archetype fig 
may wrapper existing method similar advice aspectj fact advice extend signature target method 
archetypes correspond similarly advices 
class mixins seminal mixins established separate concept 
know language gbeta mixins composable method building blocks connection gbeta mixins mixins close context 
mention points area 
notion mixin method introduced 
execution mixin method receiver object change class obtain new instance variables 
words mixin method invocation mechanism known mixin application mixin methods unrelated concept mms method mixins 
related point presents extension subset java mixins called mixedjava 
introduce notion inheritance interface specifying requirements mixin potential superclasses 
gbeta inheritance interface expressed set required mixins mixin available 
cases mechanism ensures statically name lookup succeed run time 
optional explicit inheritance interface useful gbeta especially introduce requirement callees agree ordinary methods 
implementation status language gbeta implements method mixins source code available gpl license 
syntax adjusted java omitted details module import statements apart examples correspond actual running code gbeta 
experimented inlining entire mmi groups expected part release 
gbeta generates executes byte code java byte code implemented machine code level optimizations discussed near sec 

exciting 
www cs auc dk gbeta notion method mixins compared characteristics extensively traditional subroutine invocation mechanisms procedure calls method invocations argued method mixins represent substantially di erent trade compared traditional mechanisms 
particular method mixins optimized active reuse creation variants behaviors exible building blocks traditional invocation optimized passive reuse invoking existing functionality di erent places 
believe mechanisms supplement 
special characteristics method mixins attractive follows method mixin invocation caller completely independent callee traditional invocation caller depends signature callee 
method mixins communication inferred signature allows callees di erent subsets available information traditional invocation communication arguments returned results identical callees 
mixin methods communication free occur oblivious intermediate mixin method activations traditional arguments support communication caller immediate callee 
mixin methods excellent performance perspectives 
mixin methods implemented language gbeta tightly integrated features language basic ideas languages 

ole agesen lars bak craig chambers bay wei chang urs john maloney randall smith david ungar mario wolczko 
self programmer manual 
sun microsystems mountain view ca 

aksit bosch bergmans 
abstracting object interactions composition lters 
lecture notes computer science 

backus 
programming liberated von neumann style 
communications acm 

kim barrett bob paul david moon keith andrew tucker 
monotonic superclass linearization dylan 
proceedings oopsla acm sigplan notices volume pages new york october 
acm press 

bergmans 
composing concurrent objects 
phd thesis faculty computer science university twente 

bono amit patel shmatikov 
core calculus classes mixins 
rachid guerraoui editor ecoop object oriented programming th european conference lisbon portugal volume lecture notes computer science pages 
springer verlag new york ny june 

gilad bracha william cook 
mixin inheritance 
proceedings oopsla ecoop acm sigplan notices october 

erik ernst 
gbeta language virtual attributes block structure propagating dynamic inheritance 
phd thesis devise department computer science university aarhus aarhus denmark june 

erik ernst 
propagating class method combination 
rachid guerraoui editor proceedings ecoop lncs pages lisboa portugal june 
springer verlag 

erik ernst 
family polymorphism 
rgen knudsen editor proceedings ecoop lncs pages heidelberg germany 
springerverlag 

matthew flatt shriram krishnamurthi matthias felleisen 
classes mixins 
conference record popl th acm sigplan sigact symposium principles programming languages pages san diego california january 

linda weiser friedman 
comparative programming languages generalizing programming function 
prentice hall international 

carlo ghezzi mehdi jazayeri 
programming language concepts 
john wiley sons rd edition 

james gosling bill joy guy steele 
java tm language speci cation 
addison wesley reading ma usa 

jr guy steele 
common lisp language 
digital press digital equipment nd edition 

ellis horowitz 
fundamentals programming languages 
springer verlag 

jensen wirth 
pascal user manual report 
springer verlag 

simon peyton jones john hughes eds 
haskell non strict purely functional language 
electronic form www haskell org 

brian kernighan dennis ritchie 
programming language 
prentice hall 

gregor kiczales erik hilsdale jim hugunin mik kersten je rey palm william griswold 
overview aspectj 
proceedings ecoop lncs pages budapest hungary june 
springer verlag 

gregor kiczales john lamping anurag mendhekar chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
mehmet aksit satoshi matsuoka editors proceedings ecoop lncs pages jyv finland june 
springer 

mark lutz 
programming python object oriented scripting 
reilly associates nd edition march 

ole lehrmann madsen ller pedersen nygaard 
objectoriented programming beta programming language 
addison wesley reading ma usa 

milner tofte harper macqueen 
de nition standard ml 
mit press 

chris 
elements functional programming 
international computer science series 
addison wesley 

andrew 
dylan manual de nitive guide new object oriented dynamic language 
addison wesley reading mass 

patrick steyaert wim theo hondt koen de hondt lucas marc van 
nested mixin methods agora 
oscar nierstrasz editor proceedings ecoop lncs pages 
springer verlag 

bjarne stroustrup 
programming language second edition 
addisonwesley reading ma usa 

