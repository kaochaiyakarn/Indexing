journal artificial intelligence research submitted published wheel optimization david joslin david joslin com technologies las blvd irving tx david clements clements cirl uoregon edu computational intelligence research laboratory university oregon eugene describe general approach optimization term wheel optimization swo 
swo greedy algorithm construct solution analyzed find trouble spots elements improved improve objective function score 
results analysis generate new priorities determine order greedy algorithm constructs solution 
construct analyze prioritize cycle continues limit reached acceptable solution 
swo viewed operating search spaces solutions 
successive solutions indirectly related re prioritization results analyzing prior solution 
similarly successive generated constructing analyzing solutions 
coupled search interesting properties discuss 
report encouraging experimental results domains scheduling problems arise fiber optic cable manufacturing graph coloring problems 
fact domains different supports claim swo general technique optimization 

overview describe general approach optimization term wheel optimization swo joslin clements 
core swo construct analyze prioritize cycle illustrated 
solution constructed greedy algorithm making decisions order determined priorities assigned elements problem 
solution analyzed find elements problem trouble makers 
priorities trouble makers increased causing greedy constructor deal sooner iteration 
cycle repeats termination condition occurs 
iteration analyzer determines elements problem causing trouble current solution ensures constructor gives attention elements iteration 
wheel gets construction analysis prioritization terms elements fl ai access foundation morgan kaufmann publishers 
rights reserved 
joslin clements analyzer priorities blame solution constructor construct analyze prioritize cycle define problem domain 
scheduling domain example elements tasks 
graph coloring elements nodes colored 
main components swo constructor 
sequence problem elements constructor generates solution greedy algorithm backtracking 
sequence determines order decisions thought strategy recipe constructing new solution 
solution may violate hard constraints 
analyzer 
analyzer assigns numeric blame factor problem elements contribute flaws current solution 
example minimizing lateness scheduling problem objectives blame assigned late tasks 
key principle swo solutions reveal problem structure 
analyzing solution identify elements solution elements poorly 
resource full capacity example may represent bottleneck 
information problem structure local may apply part search space currently examination may useful determining search go 

uses blame factors assigned analyzer modify previous sequence problem elements 
elements received blame moved front sequence 
higher blame element moved 
priority sequence plays key role swo 
difficult problem element moves forward sequence handled sooner constructor 
tends handled better decreasing blame factor 
difficult elements rise rapidly place sequence handled 
blame assigned drops causing slowly sink sequence parts problem handled increased priority 
eventually difficult elements sink back point longer handled causing receive higher blame move forward sequence 
elements easy handle sink sequence stay 
wheel optimization priorities late iteration priorities late iteration priorities late iteration task duration deadline simple example illustrate swo cycle consider simplified scheduling example 
suppose single production line tasks schedule task performed time 
execution starts 
duration deadline task shown 
objective minimize number late tasks 
optimal solution late task 
suppose initial priority sequence hc bi constructor schedules tasks order earliest possible time 
resulting schedule late tasks 
suppose analyzer assigns point blame late task unit time late 
case receive units blame respectively 
shows prioritization schedule constructor builds prioritization late tasks blame assigned 
cycle take previous priority sequence blame assigned analyzer generate new priority sequence 
simple just sort tasks numeric blame descending order resulting new priority sequence hb ci 
second cycle tasks late scoring points blame respectively 
new priority sequence ha bi 
third solution constructed priority sequence late task receives points blame 
point optimal solution 
continue running swo expect typically know reached optimality swo attempt fix wrong current solution 
task late priority increased resulting solution fix problem expense 
enter short cycle alternating schedules 
address introducing randomization 
example highly simplified clearly better sophisticated ways implement modules shows behavior illustrated simple example reflected real domain 
shows changing position priority sequence tasks scheduling domain described detail section 
task job starts high priority remains relatively high priority level 
see task scheduled joslin clements job job job priority iteration high low examples priority changes time effectively receives little blame priority tends drop drop far ceases scheduled acquires significant level blame moves quickly back higher priority 
tasks shown behave quite differently 
task job starts relatively high priority task easy schedule little blame scheduled late sequence 
successive iterations priority task tend decrease steadily 
task illustrated job just opposite starting low priority moving fairly steadily high priority 
section discusses characteristics swo effective technique optimization 
discuss implementations swo scheduling graph coloring problems 
final sections discuss related describe directions research summarize findings 

key ideas experimental results show swo general approach optimization 
section explore insights swo effective 
useful think swo searching coupled spaces illustrated 
search space familiar solution space priority space 
moves solution space indirectly re prioritization results analyzing prior solution 
similarly successive generated constructing analyzing solution blame results analysis modify previous prioritization 
point solution space represents potential solution problem corresponding point priority space derived analyzing solution attempt wheel optimization analyze prioritize solution space priority space construct construct coupled search spaces capture information structure search space vicinity solution 
swo constructs new solution scratch priorities thought providing information pitfalls common current region solution space 
elements solution tended sources difficulty number iterations increasing priority constructor handle elements way 
consequence coupled search spaces small change sequence elements generated may correspond large change corresponding solution generated constructor compared solution previous iteration 
moving element forward sequence significantly change state resulting solution 
addition elements occur sequence accommodate element state 
example scheduling domain moving task earlier priority sequence may allow placed different manufacturing line possibly changing mix jobs run line line scheduled previous iteration 
small change consequences element follows lower priority tasks having fill gaps left higher priority tasks scheduled 
result large move coherent sense similar expect moving higher priority task propagating effects change moving lower priority tasks needed 
single move may correspond large number moves search algorithm looks local changes solution may difficult algorithm find 
fact swo large moves search spaces obvious difference swo traditional local search techniques wsat selman kautz cohen 
difference swo moves selected effect objective function 
hillclimbing techniques move joslin clements response trouble spots current solution 
resulting move may uphill move motivated trouble spots 
priority space local optima elements solution assigned equal blame 
swo tends avoid getting trapped local optima analysis prioritization practice suggest changes sequence changing solution generated iteration 
guarantee swo trapped small cycle 
implementations introduced small amounts randomness basic cycle 
restart swo periodically new initial sequence 
aspect local search typically point solution space associated single value objective function score solution 
talk hillclimbing generally refer terrain described objective function score space solutions 
process analysis swo thought synthesizing complex description terrain breaking solution component elements assigning score 
prioritization translates analysis strategy constructor generate solution 
assigning scores individual elements solution allows swo take advantage fact real problems combine elements difficult get right plus easy 
scheduling problems tasks assigned just production lines allow flexibility 
due dates close release time lot leeway 
possible identify difficult elements problem static analysis interactions complex elements causing difficulty part search space may trouble 
trying identify elements globally difficult analyzing entire problem swo analyzes individual solutions order find elements locally difficult 
globally difficult elements tend identified time difficult large parts search space 
assigning blame adjusting priorities identified problems actual solutions swo avoids dependence complex domain dependent heuristics 
belief independence particularly important complex domains best heuristics key interactions inhibit search exploring areas heuristic incorrectly labels unpromising 
swo uses actual solutions discover areas search space promising 

swo scheduling section describes application swo fiber optic production line scheduling problem derived data provided lucent technologies 
particular plant cable may assembled parallel production lines 
cable type subset production lines compatible time required produce cable depend compatible lines selected 
cable setup time depends cable type predecessor 
setups certain pairs cable types infeasible 
task preemption allowed cable started processing line finishes interruption 
wheel optimization cable assigned release time due date 
production release time 
objective function includes penalty missing due dates penalty setup times 
implementation describe implementation terms main components swo constructor 
constructor builds schedule adding tasks time order occur priority sequence 
task added selecting line position relative tasks line 
task may inserted tasks line line schedule 
changes relative positions tasks line considered 
task line assigned earliest possible start time subject ordering task starts release time immediately previous task line whichever greater 
possible insertion points schedule relative tasks line constructor calculates effect objective function task placed best scoring location 
ties broken randomly 
tasks placed constructor applies swo individual line schedules attempting improve score line reordering cables assigned 
analyzer 
assign blame task current schedule analyzer calculates lower bound minimum possible cost task contribute schedule 
example task release time due date late schedule minimum possible cost includes penalty 
minimum possible setup costs included 
schedule blame assigned task excess cost difference actual cost minimum possible cost 
excess lateness costs assigned tasks late excess setup costs split adjacent tasks 

blame assigned modifies previous sequence tasks moving tasks non zero blame factors forward sequence 
tasks moved forward distance increases magnitude blame 
move back sequence front task high blame factor iterations 
call sticky sort 
current implementation considerable room improvement 
analysis feedback currently simple construction schedules take various heuristics account preferring place task line slack things equal 
experimental results sets test data ranging size tasks parallel production lines 
largest problem largest manufacturer required practice 
compare solution methods joslin clements swo tabu ip data best avg avg set obj obj time obj time obj time table experimental results scheduling swo applies swo architecture problem running fixed number iterations returning best schedule finds 
tabu uses tabu search glover laguna local search algorithm moves increase cost permitted avoid getting trapped local optima 
avoid cycling uphill move allowed immediately undone 
ip applies integer programming ip solver encoding described clements 
task problem swo far effective tabu ip 
tabu example failed find feasible schedule running hours 
smallest problems tabu ip able find solutions swo outperformed substantial margin 
table presents results problem swo tabu ip 
swo trials run results averaged 
tabu ip implementations deterministic results single run shown 
second column table shows best objective function value observed problem 
remaining columns show objective function value running times swo tabu ip 
ip experiments run sun sparcstation model 
ip experiments run ibm rs model faster machine 
best values observed result combining swo ip reported clements 
swo generated solutions running produced number schedules 
ip solver invoked re combine elements solutions better solution 
improvements achieved ip solver relatively small order achieved improvement quickly swo unable achieve degree optimization substantially time 
noting hybrid approach effective swo effective ip focus performance individual techniques 
note fairly naive implementation swo scheduling problems outperformed tabu ip 
improved implementation wheel optimization position priority sequence lines job position run position priority sequence order lines job run order th iteration producing solution best known comparison heuristic priorities priorities derived swo reported fairly simple successful relying domain dependent heuristics 
take evidence effectiveness approach due cleverness construction analysis prioritization techniques due effectiveness swo cycle identifying responding elements problem happen causing difficulty local region search 
instructive compare results heuristic ordering sequence derived swo 
heuristic scheduling domain initially populate priority sequence sort tasks number production lines task feasibly assigned empty schedule 
task scheduled lines easier schedule compatible small number lines expected need lower priority 
top graph shows sequence tasks determined heuristic 
lower graph illustrates changes priority tasks swo run fourteen iterations improve solution derived sequence percent best known solution 
illustrates heuristic generally accurate swo move tasks compatible production lines positions relatively high priority reflecting fact contrary heuristic tasks turned relatively difficult schedule 
tasks compatible production lines easy schedule moved relatively low priorities 
joslin clements iterations feasible success mean success mean success mean sample restart rate cost rate cost rate cost size table experimental results restarts scheduling domain restarts swo solver produce results reported table restarted priority queue iterations number jobs problem 
noisy heuristic initially populate priority queue restart 
restart cutoff picked ad hoc manner 
careful analysis different restart cutoff values lead producing better solutions faster additional insight workings swo 
restarts non systematic search avoid getting trapped local optima cycles 
see parkes empirical study wsat 
restarts systematic search escape exponentially large regions search space contain solution gomes selman kautz 
local optima pose little threat swo directly driven uphill downhill considerations 
swo large coherent moves tends escape unpromising parts search space quickly 
swo open getting trapped cycle restarts means escape 
scheduling problems swo get tight cycle priority queues solutions repeat exactly 
due presence random tie breaking places presence noise 
belief swo get trapped cycle similar priority queues solutions repeat 
ran series experiments task problem determine impact various restart cutoffs 
results summarized table 
restart cutoffs ranged iterations iterations 
success rate mean cost wheel optimization shown value different solution qualities 
success rate indicates probability solution quality pass 
mean cost average number total iterations get solution quality 
feasible solution thresholds swo reaches percent success rate reaching maximum restart cutoff experiments 
sense easy swo produce solutions qualities 
results thresholds indicate easy swo solve problem cutoff greater average number uninterrupted iterations takes produce solution solve problem minimum cost 
easy problems appears small restart cutoff hurt big cutoff 
numbers solution quality threshold tell different story 
success rate climbing experiment ends mean cost risen minimum 
solution quality restart cutoff minimizes mean cost falls range 
mean costs rise steeply restart cutoffs range slowly cutoffs larger 
example hard problem swo shows care needs taken choosing restart strategy problems 
additional research needed determine set restart cutoff automatically arbitrary problems 
data indicates swo benefit restarts point 
threshold restart cutoffs increase cutoff general led superlinear increase success rate 
indicator swo learning iteration iteration 
iterations restart success rate initially climbs sublinearly appears level 
open question tells search space 

swo graph coloring applied swo different domain graph coloring 
objective color nodes graph adjoining nodes color minimizing number colors 
implementation priority sequence graph coloring consists ordered list nodes 
solver trying produce coloring uses colors target set color color best solution far 
describe implementation terms main components swo constructor 
constructor assigns colors nodes priority sequence order 
node color previous solution available adjacent node target set color assigned 
fails tries assign color current target set picking color constraining adjacent uncolored nodes color reduces adjacent nodes remaining color choices 
target colors available constructor tries grab color target set neighbors 
color grabbed neighbor nodes color choice target joslin clements set 
multiple colors grabbed constraining picked 
color target set grabbed color outside target set assigned 
nodes early priority sequence wide range colors pick 
nodes come may grab colors earlier nodes earlier nodes color options target set 
analyzer 
blame assigned node assigned color outside target set amount blame increasing additional color added target set 
ran experiments different variations color analysis 
performed reasonably 

modifies previous sequence nodes moving nodes blame forward sequence blame received 
done way done scheduling problems 
initial sequence list nodes sorted decreasing degree order noise added slightly shuffle sort 
experimental results applied swo standard set graph coloring problems including random graphs application graphs model register allocation class scheduling problems 
collected second dimacs implementation challenge johnson trick includes results algorithms problems culberson luo glover parker ryan condon morgenstern 
problems range nodes edges nodes edges 
glover 
general search technique tabu branch bound graph coloring specific algorithm 
approach worst reported average results group 
morgenstern distributed impasse algorithm best colorings required target number colors problem specific parameters passed solver 
condon solutions problem set 
approach hybrid parallel impasse systematic search processor cm 
culberson luo iterated greedy ig algorithm bears similarity swo 
ig simplest algorithm group 
solution quality falls impasse algorithms tabu solves entire set percent time taken methods 
ig impasse discussed related 
table compares swo results ig culberson luo distributed impasse morgenstern parallel impasse condon tabu glover 
column shows number colors required problem run time cpu seconds 
bold face indicates number colors best result table 
pentium pro mhz workstation running linux swo graph coloring experiments 
times shown algorithms reported johnson trick 
results ig impasse tabu normalized times wheel optimization swo ig dist impasse par 
impasse tabu problem colors time colors time colors time colors time colors time flat flat flat flat flat flat latin sqr le le le le school school table experimental results graph coloring problems dimacs benchmarking program provided purpose 
timing comparisons approximate 
machine ran benchmark seconds times reported machines algorithms seconds tabu experiments seconds ig seconds impasse seconds parallel impasse 
benchmark runs single processor unsuitable normalizing times parallel impasse 
report unnormalized times 
variety termination conditions 
swo terminated iterations 
ig terminated iterations improvement 
distributed impasse wide variety different termination conditions solve different problems 
common element problems distributed impasse stopped target number colors provided input parameter reached 
times reported joslin clements time cpu seconds iterated greedy wheel tabu par impasse dist impasse experimental results quality solution vs time parallel impasse times took find best solution time took algorithm terminate hours 
tabu ran algorithm determined progress hour passed whichever came 
tabu numbers single run problem 
numbers algorithms averages runs parallel impasse runs distributed impasse parallel impasse runs swo ig distributed impasse problem 
summarizes performance technique set problems algorithms solved 
solver graph indicates average solution quality average amount time needed solve set 
ideal location graph origin producing high quality solutions little time 
points shown techniques points reported papers 
curve shown swo shows performs varying amounts time solve set 
graph shows swo clearly outperforms tabu general purpose technique terms quality speed 
swo outperforms ig graph coloring specific algorithm terms quality speed 
impasse solvers clearly produce best solutions group 
impasse domain specific method solvers represent programming effort 
swo solver uses general purpose search technique implemented month single programmer 
alternate configurations swo note scheduling naive implementation swo graph coloring produced respectable results 
color reuse color grabbing constraining heuristic free color picked swo matched ig problems wheel optimization beat 
half remaining problems ig better colors 
explore sensitivity swo implementation details tried approaches constructor ran swo combinations construction color grabbing analysis blame nodes receive color outside target set node priority sequence causes new color outside target set introduced 
color grabbing determination blame final color assigned node 
difference solution quality worst combination best combination percent 
alternative standard sort sticky sort fairly fundamental change added mix spread worst best percent 

related importance prioritization greedy algorithms new idea 
fit algorithm bin packing example relies placing items bins decreasing order size garey johnson 
example grasp greedy randomized adaptive search procedure feo resende 
grasp differs approach ways 
prioritization construction aspects closely coupled grasp 
element added solution constructed remaining elements reevaluated heuristic 
order elements added solution may depend previous decisions 
second order elements selected trial determined heuristic randomization trials independent 
learning iteration iteration grasp 
optimization crawford extent inspiration swo similar algorithm local search als crawford dalal 
designing swo began looking extremely successful solving standard type scheduling problem 
useful objective minimize makespan limited types constraints handle 
limitations began thinking principles looking effective generalization approach 
fact viewed instance swo 
begins performing right shift schedule shifting tasks far right go boundary 
resulting right shifted schedule left tasks extent tasks critical 
corresponds analysis swo 
tasks removed schedule left tasks 
ordering corresponds prioritization swo 
task removed placed new schedule earliest possible start time greedy construction 
swo als result attempt generalize 
als views priority space terminology swo space schedules performs local search space 
swo prioritization modified corresponding joslin clements move solution space downhill away optimal modified prioritization discarded old prioritization restored 
usual local search als random moves order escape local minima 
als list scheduling pinson prins scheduling algorithms deal domains include precedence constraints tasks 
accommodate precedence constraints constructing schedules left right temporally 
task placed schedule predecessors placed 
order analysis prioritization construction appropriately coupled sufficient simply increase priority task late constructor may able place task lot decisions 
consequently amount blame propagated task predecessors 
commercial scheduler syswerda uses genetic algorithm approach modify sequence tasks constraint schedule constructor generates schedules sequences 
viewed instance swo genetic algorithm replacing analysis 
effect analysis emerges relative fitness members population 
graph coloring algorithms bear similarity swo 
impasse class coloration neighborhood search impasse morgenstern condon swo maintains target set colors produces feasible colorings 
coloring impasse places nodes colored outside target set impasse set 
iteration node selected impasse set noisy degree heuristic assigned random color target set 
neighbor nodes conflict moved impasse set 
iterated greedy ig culberson luo swo uses sequence nodes create new coloring iteration uses coloring produce new sequence iteration 
method generate new sequence differs swo 
key observation ig nodes color current solution grouped sequence adjacent sequence solution worse current solution 
ig achieves improvement manipulating order groups occur new sequence heuristics including random color descending color ascending cardinality group 
ig learns groupings nodes runs learn difficulty nodes 
node place sequence indicates expected detected difficulty 

analysis section summarizes areas research suggested results reported previous sections 
scaling swo uses fast greedy algorithms constructing solutions demonstrated effectiveness problems realistic size greatest threat scalability swo constructs new solution scratch iteration 
partial solution problem seen history mechanism graph coloring problems 
wheel optimization color node previous solution means cases need check possible colors 
significantly speeds construction 
fundamental solution problem develop incremental version swo 
selective reuse colors graph coloring solver small step direction 
allows constructor avoid spending time evaluating alternatives previous choice works 
generally may possible look changes prioritization modify corresponding solution way generates solution constructed scratch new prioritization 
feasible done domains small changes prioritization may large portions solution unaffected 
interesting possibility view swo performing local search plus certain kind propagation 
small change priorities may correspond large change solution 
example increasing priority task scheduling problem may change position schedule consequence lower priority tasks may shuffled accommodate change 
similar expect moving higher priority task propagating effects change moving lower priority tasks 
single move may correspond large number moves search algorithm looks local changes schedule may difficult algorithm find 
view investigating algorithm call priority limited propagation plp 
plp local changes solution propagation allowed occur subject current prioritization 
propagation allowed occur direction lower priority elements 
effect small change consequences change allowed ripple plan 
propagation occur directions decreasing priority ripples propagation decrease magnitude propagation possible 
new prioritization generated analyzing resulting solution 
possible analysis incrementally 
resulting approach identical swo interesting characteristics 
coordination modules swo effective obvious analysis prioritization construction improve quality solutions 
discussed complications arise constraints placed order constructor decisions case list scheduling als construction done strictly left right 
complex analysis search spaces effectively uncoupled changes priority don cause constructor fix problems discovered analysis 
way search uncoupled related notion excess cost discussed scheduling implementation 
calculation excess cost analyzer turned key idea improving performance swo 
problems tasks handled badly order achieve solu joslin clements tion 
scheduling problems described previously tasks 
solution analyzer assigns high blame tasks constructor handles iteration 
means resulting solution poor quality flaws cause tasks move ahead tasks priority sequence swo briefly explore space solutions 
cases extent analysis hurting ability swo converge solutions 
ideally generalize notion excess cost recognize tasks allow tasks handled badly receiving proportionate blame 
problems task sacrificed solutions may possible learning mechanism accomplish 
notion task subtle 
suppose example scheduling construction airplanes key task respectively requiring shared resource resource conflict give early schedule starting construction plane give early schedule opposite result 
whichever tasks started early finish time late 
suppose construct schedule goes late receiving heavy blame factor 
swo increases priority consequence goes subsequent schedule 
late iteration go 
alternate manner forever result swo fail explore option effectively jumping back forth option building plane option building plane remaining region search space long refine solution 
difficulty identified task 
assuming planes identical simply argue symmetry just pick tasks sacrificed 
identify task role plays solution achieve need 
task sacrificed belongs whichever plane started 
analyzer reduce blame assigned task schedule whichever task happens allow swo explore region search effectively 
problem interchangeable roles arise clearly conditional elements solution 
suppose example scheduling problem constructor may choose include include task instances type adding instances needed satisfy resource requirement 
tasks instances task type interchangeable penalizing may simply cause shuffling instances really address problem 
conditional tasks clear analyzer assign blame set task instances current schedule may different set task instances successor schedules 
address concerns notion prioritization generalized apply additional aspects problem 
scheduling mean just prioritizing tasks resources various time intervals 
propose limited fixed elements problem 
scheduling problems example wheel optimization may non conditional tasks resources 
example domains elements fixed sense issue 
intuition proposal elements tend define roles 
earlier example tasks corresponding planes built critical element task se resource early schedule 
phase resource receives high priority phase resource receives lower priority whichever tasks occurs recognized critical 
exactly capture notion role comes lot closer current approach 
addition assigning priorities fixed elements problem advantage applicable problems conditional tasks 
research currently way explore approach 
swo local search ability large coherent moves strength approach weakness 
swo poor making small tuning moves solution space coupled search view swo suggests obvious remedy 
swo combined local search solution space look improvements vicinity solutions 
similarly making small changes prioritization generally result smaller moves solution space result going full analysis re prioritization cycle 
alternative genetic algorithm techniques crossover types mutation pool nodes done 
hybrid approaches possible believe coupled search view swo helps identify interesting strategies combining moves various sizes kinds search spaces adapting dynamically relative solution qualities 

experience fairly straightforward implement swo new domain usually fairly obvious ways construct greedy solutions analyze solution assign blame elements 
naive implementations swo tend perform reasonably 
view swo performing coupled search different search spaces informative 
helpful characterize kinds moves swo search spaces effect avoiding local optima hope continuing gain deeper understanding swo able say effective design swo algorithms 
number directions research suggests begun scratch surface wheel optimization 
authors wish robert lucent technologies providing data scheduling experiments 
authors wish george nemhauser joslin clements markus martin collaborated swo hybrid ai approach 
useful discussions came collaboration access lucent problems 
markus wrote framework scheduling experiments tabu ip implementations 
authors members cirl james crawford technologies helpful comments suggestions 
andrew parkes particular suggestions insights graph coloring domain 
effort sponsored air force office scientific research air force materiel command usaf number defense advanced research projects agency darpa rome laboratory air force materiel command usaf agreements national science foundation number cda 
government authorized reproduce distribute reprints governmental purposes notwithstanding copyright annotation thereon 
views contained authors interpreted necessarily representing official policies endorsements expressed implied defense advanced research projects agency rome laboratory air force office scientific research national science foundation government 
reported done authors cirl 
clements crawford joslin nemhauser 

heuristic optimization hybrid ai approach 
proceedings workshop industrial constraint directed scheduling 
conjunction third international conference principles practice constraint programming cp 
crawford dalal 

local search 
proceedings aips workshop planning combinatorial search 
conjunction fourth international conference artificial intelligence planning systems aips crawford 

approach resource constrained project scheduling 
proceedings artificial intelligence manufacturing research planning workshop pp 

culberson luo 

exploring colorable landscape iterated greedy 
johnson trick pp 

feo resende 

greedy randomized adaptive search procedures 
journal global optimization 
garey johnson 

computers intractability guide theory np completeness 
freeman 
glover laguna 

tabu search 
kluwer 
wheel optimization glover parker ryan 

coloring tabu branch bound 
johnson trick pp 

gomes selman kautz 

boosting combinatorial search randomization 
proceedings aaai pp 

johnson trick 
eds 

cliques coloring satisfiability second dimacs implementation challenge vol 
dimacs series discrete mathematics theoretical computer science 
american mathematical society 
joslin clements 

wheel optimization 
proceedings aaai pp 

condon 

experiments parallel graph coloring heuristics applications graph coloring 
johnson trick pp 

morgenstern 

distributed coloration neighborhood search 
johnson trick pp 

parkes 

tuning local search satisfiability testing 
proceedings aaai pp 

pinson prins 

tabu search solving project scheduling problem 
euro wg pms euro working group project management scheduling pp 
louvain belgium 
selman kautz cohen 

local search strategies satisfiability testing 
johnson trick pp 

syswerda 

generation schedules genetic procedure 
patent number 

