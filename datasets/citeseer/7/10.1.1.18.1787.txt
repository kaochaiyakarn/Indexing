type theoretic approach deadlock freedom asynchronous systems samson abramsky simon gay university edinburgh royal holloway university london nagarajan university california berkeley imperial college london type technique verification deadlock freedom asynchronous concurrent systems 
approach start interaction category asproc objects types containing safety specifications morphisms processes 
specification structure add information types specify stronger properties 
extra information case concerns deadlock freedom resulting category asproc combining typed processes preserves deadlock freedom 
possible accommodate non compositional methods framework 
systems consider asynchronous issues divergence significant approach incorporates elegant treatment divergence successful termination 
example methods verify deadlock freedom implementation alternating bit protocol 
address correspondence dr gay department computer science royal holloway university london egham surrey tw ex uk tel fax email gay dcs rhbnc ac uk realm sequential programming type systems allow programmer express constraints program modules 
compile time typechecking particularly type inference case functional languages valuable aid construction correct programs 
distributed software considered issue ensuring compatible combination subsystems complex 
interaction components may take form prolonged dynamic pattern communication simple procedure call parties agree expected nature dialogue 
research interaction categories led framework design sophisticated type systems able specify communication protocols form 
framework type checking verification seen different facets single activity opens possibility developing propositions types approach verification concurrent programs 
interaction category semantic universe objects types incorporating specifications various kinds morphisms concurrent processes satisfying specifications 
process interacts environment interface consisting number typed ports 
structure category allows ports combined various ways shape interfaces described 
approach construction type systems concurrency simple interaction category asproc types correspond basic safety specifications specification structure add information types specify stronger properties 
process iterated leading tower categories sharing great deal structure possessing progressively complex types 
interested specifying deadlock freedom 
deadlocks arise communication failures message understood recipient situations subcomponents system waiting 
possibilities may classically viewed deadlock turns theory naturally includes 
construct tower categories asproc definition reviewed section 
level category asproc types incorporate notion valid maximal behaviour address issues divergence successful termination 
third level asproc typed processes combined fear introducing deadlocks 
type structure asproc support formation cyclic process configurations deal cases introduce additional verification rule 
presenting necessary theory illustrate type system analysing version alternating bit protocol verifying deadlock free 
interaction category asproc section briefly review parts definition asproc relevant 
includes autonomous structure corresponding multiplicative connectives omega gamma linear logic additive structure products coproducts delay operator :10.1.1.26.4414
complete definitions previous publications 
asproc allows analyse asynchronous systems different components able evolve rate 
contrast previous interaction categories example assumes universal synchronisation respect global clock 
object asproc triple sigma sa sigma set actions sigma silent action 
defining observable actions def sigma gamma sa non empty prefix closed set observable traces safety specification 
process sort sigma silent action sigma observation equivalence class labelled transition systems label set sigma omit verifications operations define respect observation equivalence 
process type written process sort sigma silent action sa def fas def fs finiteg def fs morphisms asproc defined object part autonomous structure 
objects object omega sigma omega def sigma theta sigma omega def sa omega def fs sigma omega sa sa sb sb ff sigma omega ffa def fst ff fst ff sigma omega sa obtained concatenating individual ffa 
projection defined similarly 
notice omega means process ports delays simultaneously delaying individual ports 
possible process perform observable actions simultaneously ports contrast traditional process calculi 
duality trivial objects def means types asproc distinguish input output distinction recovered 
morphism asproc process general def omega asproc fact gamma trivial means omega composite defined labelled transitions 
rules allow process transition independently communication required 
third rule allows processes communicate performing action port actions third rule simultaneous independent transitions 
easy see satisfies safety specification necessary morphism asproc category asynchronous processes identity morphisms synchronous buffers 
id instantaneously transmits data received left port right port vice versa 
defined sa id id type defined sigma sigma fs sa omega omega omega defined transition rules 
rules omega illustrate asynchronous nature asproc processes transitions independently simultaneously 
omega omega omega omega omega omega tensor unit defined sigma def def morphisms expressing symmetric monoidal closed structure asproc formed identity morphisms applying suitable 
example symm omega omega defined id omega id omega symm symm currying similarly defined relabelling omega 
defined proposition asproc autonomous category 
linear negation gamma trivial asproc omega coincide 
autonomous category omega note general possible happen linear negation non trivial called compact closed category 
dealing interaction categories compact closure significant means wider class process constructions supported categorical structure 
autonomous category processes connected arbitrary acyclic configurations means composition appropriate currying application 
final step construction cyclic network carried omega coincide 
point discussed detail 
construct autonomous category deadlock free processes category turns compact closed means additional verification rules required order form cyclic networks 
notation ccs notation describe processes asproc 
main constructions prefixing non deterministic sum guarded recursion usual interpretations terms labelled transition systems 
formal calculus typed asynchronous processes weaker type system guarantee deadlock freedom developed calculus eventually combined ideas concentrate semantic aspects type system deadlock freedom 
significant difference notation ccs need complementary actions communication processes particular port consists performing action distinction input output indicated types 
specification structures notion specification structure basic form variation standard notions category theory 
provides alternative view standard notions highly suggestive particularly computer science point view 
similar notions studied variety purposes burstall mckinna hearn tennent pitts :10.1.1.45.9064
category 
specification structure defined data ffl object set properties 
ffl pair objects relation theta theta write ffg borrowing notation hoare triples 
relation required satisfy axioms fid ffg fgg ff gg axioms typed versions standard hoare logic axioms skip sequential composition 
define new category follows 
objects pairs ob morphism 
morphism ffg 
composition identities inherited axioms ensure category 
evident faithful functor ae 
simple examples specification structures useful point 
case specify base category set properties object hoare triple relation 

set def case category pointed sets 

rel fg frg def xry 
category sets partial functions 
notion specification structure acquires substance additional structure lifted suppose example monoidal category bifunctor omega object natural isomorphisms assoc omega omega omega omega omega omega satisfying standard coherence equations 
specification structure correspondingly extended action omega theta omega element satisfying properties suitable objects ffg ff omega ff omega omega omega omega omega omega omega omega monoidal structure lifted defining omega omega omega axioms ensure conditions monoidal product satisfied action omega morphisms axioms guarantee correct 

omega omega omega omega omega monoidal structure preserved faithful functor oe interested specification structures autonomous categories particular asproc 
autonomous category notion set processes type written proc process type may identified morphism sequence steps provides convenient way define specification structure sequence section defining specification structures asproc mirrors sequence definition asproc 

define 
define relation satisfaction proc theta 
define gamma 
define omega oa 
define hoare triple relation ffg def 

verify desired structure including autonomous structure lifts consider idea tower categories mentioned oe oe oe delta delta delta oe tower arises progressively refining specification structures step adds propositional information underlying raw computational entities morphisms 
aim verification framework promote morphism promote morphism morphism 
precisely establish verification conditions ffg done means model checking theorem proving manual verification morphism available participate typing judgements 
way coherent framework combining methods including compositional non compositional approaches begins open 
specification structure deadlock freedom category asproc need define category asproc asproc type augmented notion valid maximal trace 
asproc type define sa fs sa fs sa tg sa object asproc tuple sigma sa va sigma sa object asproc va 
process type asproc process type sigma sa asproc 
linear type structure asproc defined asproc addition va va omega fs omega sa va sb vb ffflg suggested name asproc defined means specification structure asproc 
notation easier control asproc defined directly 
define specification structure deadlock freedom component va type define mean deadlock 
finite traces va interpreted successful terminations 
infinite traces va constructed infinite traces successfully terminated traces simpler types 
notice ffflg ffl maximal finite trace interpreted successful termination 
point say words divergence 
consider processes defined matter types long 
forced communicate composite result divergence communicate internally forever produce observable actions 
deadlock simply taken termination approach earlier deadlocked successful communication takes place 
sets valid infinite traces provides nice resolution conflict 
see individually acceptable means traces valid infinite traces types respectively 
turn means ffl va ffl vc ffl va interpreted successfully terminated process 
specification structure order discuss correct communication need operation selects behaviours common processes behaviours correspond sequences communication 
asproc process defined transition rules 
looking ways combining processes introducing deadlocks need restrict attention processes isolation terminate unsuccessfully diverge 
asproc converges st va notion convergence 
distinction deadlock successful termination determined safety specification distinguishing final states execution process 
object asproc proc def fp orthogonality relation proc defined 
orthogonal sequence communications extended valid infinite behaviour successfully terminated behaviour 
orthogonality lifted sets processes define notion linear negation sets processes 
process set processes define fp ug set processes successfully communicate processes set describes possible behaviours particular port type ports connected port introducing deadlocks 
specification structure asproc obtained sequence definitions 
pda fu proc omega def fp omega def omega def omega pda composition axiom key property needs checked 
suppose types rewritten behaviour second port described processes set behaviour port described processes set definition orthogonality means connected ports means communication successful deadlocks arise 
complete proof gives general idea argument 
category constructed asproc means specification structure category deadlock free processes 
consistency called asproc refer asproc multiplicative structure asproc lifted new category asproc autonomous 
useful collection standard deadlock free types asproc type 
obvious types define correspond input output 
type asproc proc pda 
proc maximal property satisfied convergent process type proc specification imposes constraint process port asproc type proc corresponds possibly non deterministic output 
refer property proc convergent process type satisfies dually expect property represent input naturally definition shown maxa defined sa maxa max process maxa prepared engage action allowed underlying safety specification precisely property required input port 
useful fact properties omega omega prove fact expresses intuitive idea pair input ports viewed single input compound type 
dually fact allows certain asproc processes immediately assigned types asproc follows 
delta delta delta asproc delta delta delta delta delta delta means type delta delta delta asproc properties allow describe simple patterns interaction port committed input output time 
examples consider simple patterns sufficient 
structure asproc able support richer interaction patterns address question asproc provide semantics realistic language types 
indicated earlier category asproc compact closed omega general different 
simplest example loss compact closure follows 
consider asproc types defined sigma fa sigma fb sa fag sb fb cg va fa vb fb cg outline proof omega omega omega omega maxa convergent process type definitions omega give omega omega proc prove omega just need find process omega proc maxa omega maxa omega defined condition satisfied 
clearly maxa omega performs action 
maxa omega proc behaviour omega simply actions replaced actions replaced 
asproc compact closed general unable construct cyclic configurations processes 
expected presence cycles lead deadlock 
particular system may reasons specific cycles formed introducing deadlock 
formulate proof rule construction deadlock free cycles delta delta delta cycle delta delta delta process representing acyclic portion desired configuration ports types potentially connected 
process results making connection condition cycle satisfied deadlock free 
condition cycle defined sx sx possibly empty sequence qm actions qm particular case specific reasoning needed establish cycle system question 
done process type asproc combined processes basis type 
deadlock freedom alternating bit protocol protocol alternating bit protocol communications protocol transmission messages adverse conditions 
diagram accept receives message sends transmission medium reply delivers message destination sends signal back accept trans ack parts transmission medium direction 
accept deliver accept trans reply ack versions protocol different assumptions nature transmission medium 
version consider corresponding exercise chapter milner book transmission lines trans ack capacity message may lose messages 
message sent accept sent reply may disappear unpredictably 
furthermore bounded capacity transmission lines introduces possibility deadlock may prepared accept input 
basic idea protocol single bit attached message sent 
message carries bit original message successive messages carry opposite bits 
accept receives bit message message sent previous message resent 
similarly reply receives message opposite bit acknowledgment new message acknowledged previous judged lost sent 
ccs style syntax processes defined follows 
note subscript parameterising processes actions value current bit 
mentioned section interaction category approach complementary actions reflected definitions 
accept sen accept accept accept ack accept ack accept accept accept accept reply rec reply reply reply tra reply tra reply reply deliver reply trans sen trans sen trans trans tra trans trans ack rec ack rec ack ack ack ack ack important appreciate various roles played silent actions definitions 
accept model receipt timeout signal timer explicitly represented system 
timeout occurs message received message retransmitted 
reply models timeout time limiting waiting period message arrive 
timeout occurs previous repeated 
actions trans ack represent spontaneous loss messages 
complete system defined follows 
current state assumes message just delivered ready accepted 
protocol accept trans ack reply sen tra tra rec rec ack ack remainder section demonstrate assignment types components system asproc asproc important note considering aspect system correctness deadlock freedom 
types express specification sequence delivered messages sequence received messages 
specification expressed typed framework analysed similar specifications systems purpose illustrate aspect theory 
types asproc order type system elementary level account deadlock freedom need asproc types 
case safety specification consists finite traces alphabet 
sigma vx sigma sigma ack ack va ack jack sigma sen sen vb sen sigma tra tra vc tra sigma rec rec vd rec certain amount redundancy definitions types isomorphic different names easier keep track steps construction system 
definitions types components system follows 
changes necessary equations defining processes take account fact observable action port accompanied silent actions ports 
example definition ack ack rec ack rec ack accept trans reply ack accept trans reply ack types ports process combined asproc just omega useful stick notation reflects logical distinctions connectives 
general relates connected concurrency omega disjoint concurrency appropriate connective combining ports single process 
maintain logical distinction various types distinguished example despite fact asproc level types identical 
fact asproc compact closed allows entire system constructed means categorical operations despite fact cyclic structure yielding process protocol write protocol ox emphasise fact receiving delivering ports compatible types 
types types specify infinite trace valid processes terminate process convergent 
previous description protocol clear port input output properties accordingly expect components system asproc types 
drop notational distinction real distinction indicated presence 
accept trans reply ack verifying processes types requires 
example check trans need show trans omega fp omega maxc requires trans omega maxc process type means trans capable performing action port offer choice possible actions restriction possible actions port 
easily see true examining definition trans 
similar arguments apply components system 
autonomous structure asproc allows components connected essentially categorical composition point cycle completed 
gives process 
accept trans reply ack established individual components compatible types extra needed take construction point 
type system asproc allow cycle closed 
need verify condition cycle satisfied order establish process protocol type asproc verification carry types check system deadlock 
potential deadlock arises place buffer transmission lines trans ack buffer full new message rejected 
actions defining equations trans ack play dual role representing undesirable message loss interpreted deliberate message discard new message received previous message passed 
peculiar feature particular implementation alternating bit protocol protocol modified example introducing additional actions represent fullness buffers modifications merely increase complexity changing essential points argument 
know protocol deadlock actual condition cycle checked easily 
need sure completing cycle change actions available remaining part interface ports 
observable action means protocol satisfy property general reasons 
examples may required check cycle condition 
process type asproc combined processes basis type verification 
process port type connected port protocol introducing deadlock similarly process port type connected port protocol checking needed order establish correctness connections 
related analysis deadlock freedom concurrency investigated number authors 
roscoe relevant 
approach define variant function assigns value state process 
network processes satisfying certain conditions deadlock free process waiting process value state greater state enables local analysis deadlock freedom offers possibility constructing deadlock free networks deadlock free subcomponents 
mentioned approaches types 
takeuchi honda kubo developed typed language interaction type system guarantees avoidance class communication errors errors viewed weak forms deadlock include possibility cyclic dependencies :10.1.1.45.1431
kobayashi pierce turner developed linear type system calculus 
kobayashi proposed process calculus type system captures information order channel usage uses information guarantee deadlock freedom 
calculus distinction reliable unreliable channels reliable channels guaranteed cause deadlock 
semantic types describe order channels may interesting connection uniform stronger definition deadlock freedom 
conveying information type system flexible modular allowing range concurrent program properties expressed 
treatment semantic close connection curry howard isomorphism underlying categorical logic 
previous techniques similar address deadlock freedom 
success obtained synchronous systems theory described provides time satisfactory treatment deadlock freedom asynchronous systems 
typed framework verification deadlock freedom 
main novelty new category asproc category deadlock free processes constructed means specification structure category asproc asproc notion valid maximal traces 
simple effective treatment asynchronous deadlock freedom incorporating notions deadlock divergence termination 
applied techniques verify deadlock freedom alternating bit protocol 
see significant step development type theoretic methods compositional verification concurrent systems 
progress develop syntax deadlock freedom ideas typed process calculi developed 
addition highly desirable develop techniques forming cyclic connections automated extent certain conditions 
variants roscoe may provide clues 
possibility cycle sum test wadge 
include applications ideas substantial examples illustrating successful termination 
focused deadlock freedom specification structures allow properties fairness liveness added framework aim investigate 
specification structure liveness built top deadlock freedom allow specification detailed properties infinite executions 
research partly supported epsrc project foundational structures computer science esprit confer coordination paul taylor commutative diagrams package production 
abramsky gay nagarajan 
interaction categories foundations typed concurrent programming 
broy editor deductive program design proceedings marktoberdorf international summer school nato asi series computer systems sciences 
springer verlag 
abramsky gay nagarajan 
specification structures propositions types concurrency 
birtwistle moller editors logics concurrency structure vs automata proceedings banff higher order workshop volume lecture notes computer science 
springer verlag 
abramsky 
interaction categories communicating sequential processes 
roscoe editor classical mind essays honour hoare pages 
prentice hall international 
aceto hennessy 
termination deadlock divergence 
journal acm january 
barr 
autonomous categories linear logic 
mathematical structures computer science july 
brookes roscoe 
deadlock analysis networks communicating processes 
apt editor logics models concurrent systems volume pages 
nato advanced study institutes series springerverlag berlin 
chandy misra 
deadlock absence proofs networks communicating processes 
information processing letters november 
de bakker 
mathematical theory program correctness 
prentice hall international 
dijkstra scholten 
class simple communication patterns 
selected writings computing 

springer verlag 
gay 
linear types communicating processes 
phd thesis university london 
gay nagarajan 
typed calculus synchronous processes 
proceedings tenth annual ieee symposium logic computer science 
ieee computer society press 
:10.1.1.26.4414
girard 
linear logic 
theoretical computer science 

non standard models linear logic 
phd thesis universiteit utrecht netherlands 
kobayashi 
partially deadlock free typed process calculus 
draft 
kobayashi pierce turner 
linearity pi calculus 
proceedings rd acm symposium principles programming languages 
mac lane 
categories working mathematician 
springer verlag berlin 
mckinna burstall 
deliverables categorical approach program development type theory 
proceedings mathematical foundation computer science 
milner 
communication concurrency 
prentice hall 
nagarajan 
typed concurrent programs specification verification 
phd thesis university london 
appear 
hearn tennent 
relational parametricity local variables 
proceedings th acm symposium principles programming languages 
acm press 
owicki gries 
verifying properties parallel programs 
communications acm may 
pitts 
relational properties recursively defined domains 
th annual symposium logic computer science pages 
ieee computer society press washington 
roscoe 
pursuit deadlock freedom 
information computation december 
sifakis 
deadlocks livelocks transition systems 
mathematical foundations computer science volume lecture notes computer science pages 
springer verlag berlin 
takeuchi honda kubo :10.1.1.45.1431
interaction language typing system 
proceedings th european conference parallel languages architectures number lecture notes computer science 
springer verlag 
wadge 
extensional treatment dataflow deadlock 
theoretical computer science 

