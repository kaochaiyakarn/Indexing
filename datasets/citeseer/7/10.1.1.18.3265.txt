improving performance continuous queries fast data streams time series case gao sean wang gmu 
edu department information software engineering george mason university fairfax virginia continuous query data stream standing request processed new data value arrives 
query response time throughput important performance indicators 
concerns performance continuous queries different streaming rates 
streaming rate low system start evaluating query delay newly arrived data value response time dominant performance indicator 
streaming rate high response time throughput key issues query get evaluated arrived data value creating longer response time 
studies scenario streaming time series 
time new value arrives query locate time series database nearest neighbor streaming series 
uses pre fetching strategy predicts prepares evaluation previous 
experiments show strategy decreases response time increases throughput 
various emerging applications sensors deployed fields installed moving objects 
goal recognize detect events incoming sensor data provide situation awareness systems order facilitate smart decision quick reaction 
obviously performance recognition detection subsystem critical success applications 
purpose study strategies enhance system performance 
study scenario sensor sends back stream values form time series 
recognition task follows time new value arrives system needs find nearest neighbor time series formed fixed number values time series large database 
scenario mentioned appear applications ranging stock monitoring target tracking 
example target identification may rely partially supported nsf career award 
movement target 
database may available different movement signatures different types vehicles 
system monitor movement target order find type vehicles target resembles terms movement patterns 
obviously movement modeled time series positions necessary continuously evaluate nearest neighbor queries time series database 
performance measures important 
response time time arrival value time nearest neighbor 
second throughput number times nearest neighbors 
data values come system fast rate response time degenerate quickly time goes insist finding nearest neighbor newly arrived value 
processing time nearest neighbor search longer time interval successive values response time get successively longer 
case system may abandon search move data value drop occurs 
drop occurs worse throughput 
goal system number drops fastest response 
obtain better response time lower drop ratio pre fetching strategy 
time data value arrives system pre fetch necessary disk pages main memory 
scenario successive values data stream certain continuity preparation quite effective 
response time reduced greatly streaming rate low 
streaming rate high strategy works resulting increased throughput decreased response time 
conducted experiments study prefetching method method direct extension traditional algorithms 
experiments confirm method superior cases enhances performance greatly 
contribution aspects 
firstly study performance continuous queries different streaming rates 
secondly study performance gain pre fetching con nearest neighbor queries 
remainder organized follows 
section precisely define problem introduce basic notions notation 
section outline algorithm pre fetching 
report experimental results section discuss related section 
section conclude final remarks 
preliminary section introduce basic concepts definitions 
give definitions drop ratio response time continuous queries 
definition streaming time series denoted infinite number sequence 
values obtained sampling underlying process fixed time interval arrive query system sequentially 
definition says values streaming time series sampled interval may come query system different rates value associated arrival time 
loss generality assume value sampled time tn value sampled time denote sampled value time 
correspondingly point view query system values arrive time tl ti 
val ues arrive time ti tj form finite time series denoted 
assume fixed integer 
mention arrival time ti stated explicitly assume values arrived 
time ti tn value arrives values form subseries system find nearest neighbor terms euclidean distance time series database 
assume database series length denote ti understood 
definition integer continuous nearest neighbor query streaming time series standing request asks nearest neighbor ti time arrives database 
real world situations stream data come fast evaluation query data arrival time may finish data values arrive 
response time values longer processing time waiting occurred causes delays time goes 
order keep response time reasonable strategy needs adopted 
possibility abort evaluation avoid postponing query processing successive data 
happens say drop occurred 
drop strategy maintain query process move forward smoothly 
dependent user requirements different drop strategies 
assign response time upper bound called response time threshold denoted limited response strategy 
definition response time threshold limit response strategy drop strategy query processing finished evaluations data values arrived ti dropped 
drop occurs ti drop decision strategy clears waiting queue guarantees answered query response time threshold 
note limited response strategy mean time new value arrives query gets time process 
example greater interval successive values query time process second value 
response time processing value arrived ti starts counting ti matter processing starts 
definition streaming time series integers drop ratio continuous query ti tj denoted ij ratio times processing dropped period ij ts ts called drop tor processing dropped 
limited response strategy small drop ratio may occur 
mean set somewhat bigger allow time process query 
assume big drop ratio smaller query get answers period time question 
definition streaming time series integers continuous nearest neighbor query ti tj denoted average response time period trs ts ts tr response time evaluate nearest neighbor query tt ts drop indicator 
note tr unknown processing dropped doesn affect 
response time measures average formance query times query answers 
limited response strategy threshold easy see note strategy drop ratio important indicator response time know answered query finished response time threshold 
example response time threshold second algorithm yields drop ratio seconds response time considered worse algorithm achieves drop ratio second response time 
case algorithms satisfy second response time threshold drops considerably second 
continuous query algorithms section give discuss straightforward way evaluate continuous nearest neighbor queries direct extension traditional algorithms index techniques 
propose continuous nearest neighbor query algorithm pre fetching 
nearest neighbor search feature space transform query time series point feature space issue nearest neighbor search space 
determining threshold calculate real distance query series nearest neighbor step original space 
range query real distance threshold issue range query feature space find near neighbors query series feature space called candidates 
verification evaluate real distances candidate query series find actual nearest neighbor 
traditional algorithm move continuous nearest neighbor query streaming time series review traditional algorithms dealing near est neighbor queries stationary time series :10.1.1.128.6559
commonly approaches involve dimensionality re duction techniques map database series original space low dimensional points spatial indices built points 
options choose reduction methods indices query evaluation algorithms techniques similar generalized steps 
direct algorithm continuous nearest neighbor queries streaming time series unique property querying series current time similar previous time 
observed directly fact current querying series formed shifting value querying series appending new value tail 
real world cases data arrive successive times close expect successive querying series similar 
similarity querying series leads fact result nearest neighbor 
initialize time index definition nearest neighbor ti tc system clock time wait new data come 
start searching nearest neighbor cases case search finished ti report nearest neighbor ti update 
case search finished ti break search time ti 
greatest index query ti update 
loop direct algorithm query ti results result query ti information refine threshold step range query 
done calculating distance current querying series tt nearest neighbor tt comparing distance traditional approach step smaller threshold 
direct algorithm traditional algorithm limited response strategy 
note step searching nearest neighbor traditional algorithms take nearest neighbor time ti discussed earlier query processing ti dropped 
details omitted due space limitation 
resources evaluation 
assume operating system cache resources enhance performance 
pre fetch algorithm loop cases 
query arrived data direct algorithm wait value come 
case querying series waiting queue 
case waiting time pre process querying series 
predict querying series evaluate query real 
step fetches necessary pages main memory processing faster real value arrives 
prediction method 
consider ttl time ti 
values form querying series ttl arrived need predict value get predicted querying series greater length impact accuracy predicted value 
prediction need precise simply value prediction 
real world applications may apply various prediction models forecast incoming value linear non linear predictive models 
concentrate algorithm dig detail select build prediction model definitely better prediction model improve performance proposal 
get predicted querying series issue nearest neighbor search eval uation querying series aborted im real data value comes delay evaluation actual querying time series second case querying series ttl waiting need predict tt issue search near est neighbor values tt arrived 
query process needs keep processing waiting querying series involving prediction 
combining cases give proposed algorithm named pre fetch algorithm 
query evaluation predicted series finished new data comes pre loaded memory pages evaluation ttl directly 
part steps finished steps useful evaluation actual querying series 
mentioned resources shared successive evaluations continuous query 
easy see similar query initialize time index ti tc tc system clock time predict querying series time ti start searching nearest neighbor search finished comes break search soon comes wait new data come hasn come corresponding part loop pre fetch algorithm ing series resources share 
simple prediction method forming repeating value tt guarantees closer ongoing querying series tt series tt fact means evaluation predicted querying series provide shareable resources ongoing evaluation 
stream rate fast chance process predicted querying series small 
case pre fetch algorithm help 
stream rate slower chance time higher larger 
expect pre fetch algorithm outperform direct algorithm case 
experiments section confirm trend 
direct pre fetch algorithms index techniques 
way idle time new data comes calculate partial distances querying time series pattern series 
specifically pattern length current time waiting data come calculate partial distance values querying series 
actual value comes easily find nearest neighbor account partial distances differences lvalue 
method straightforward yield fast response time partial distances obtained time cost find partial distances high close sequential scan method 
useful stream rate low 
experiment show straightforward strategy worse index algorithms stream ratio high 
experimental results section experiments demonstrate performance improvement pre fetch algorithm direct algorithm 
experiments consists parts drop ratio comparison response time comparison 
different stream rate response time threshold 
simplicity stream rate fixed continuous query evaluation 
data set consists random walking time series length total size data mb 
rtree build index coecients wavelet transformation database series 
streaming series random walking series length total number times nearest neighbor needs 
experiments coded program language performed dell dimension desktop box mb windows xp os 
adjust stream rate setting successive values sec response time threshold seconds independently 
record wall clock times algorithms report average response times evaluations 
best processing time direct data arrival time index best processing times direct give processing time needed process query direct algorithm 
experiment assume new data arrives soon evaluation previous value finished 
drop occurs 
best processing times direct algorithm achieve 
note time variability processing times vary lot 
percentages times processing time exceeds certain response time thresholds 
example threshold second evaluations greater second 
comparison sequential scan method find nearest neighbor needs seconds evaluate query arrived data 
precomputation partial distances needs cost 
means processing time methods seconds response time threshold greater 
see processing times far value 
experimental result proves algorithms index techniques ecient index 
comparison results index methods direct pre shown response time threshold equal seconds respectively 
stream interval meaning time arrivals successive values streaming rate experiments 
upper graphs give average drop ratios lower ones show response times 
cases smaller number better performance 
response time threshold drop ratio direct algorithm smaller stream data come slower smaller certain value matter slow stream rate example threshold equal second drop ratio constant stream interval greater second 
number observed counting number times processing time greater second 
similar observations threshold equal seconds 
see re fetch algorithm outperforms direct algorithm terms drop ratio combinations stream rates thresholds 
stream rate difference drop ratios smaller threshold bigger 
bigger threshold relative times launch process predicted querying series smaller 
absolute value drop ratio decrease stream rate slower important stream data fast 
graphs see stream rate fast drop ratios close 
stream rate little slower difference larger 
note especially drop ratios great difference 
average response time direct changes little different stream rates response time threshold shown 
smaller stream interval accumulate delay evaluations algorithm drop query times relieve delay 
stream interval greater response time threshold response time constant 
response time pre fetch algorithm increase stream rate faster 
pre fetch better direct algorithm especially stream rate slow threshold large 
example stream interval threshold seconds average response time direct prefetch direct prefetch direct prefetch stream interval second stream interval second stream interval second drop ratio drop ratio drop ratio direct prefetch 
direct prefetch direct prefetch stream interval second stream interval second stream interval second response time ls response time response time performance comparison response time drop ratio response time threshold second direct algorithm seconds prefetch algorithm seconds 
see pre fetch algorithm outperforms direct algorithm lot 
note corresponding drop ratio pre fetch direct respectively pre fetch algorithm winner 
relative drop ratio relative response time lli stream second relative ratios threshold seconds description section pre fetch algorithm overhead compared direct algorithm terms response time 
graphs fig ure demonstrated thresh old stream rate pre fetch algorithm decrease drop ratio response time simultaneously 
give comparison relative values drop ratio response time algorithms 
response time threshold seconds graph 
see ratio curves means pre fetch algorithm better direct algorithm 
related topic falls general category continuous queries nearest neighbor queries time series 
early terry introduced notion continuous queries proposed incremental approach evaluate queries append databases 
liu notion continual queries general scenarios considered 
chen designed system incremental query evaluation method longer restricted append data sources 
research system architecture related continuous queries 
specific queries continuous aggregation queries studied 
focus streaming time series 
near nearest neighbor queries time series interesting research topic years 
general approach see map time series frequency domain discrete fourier transform index significant part coefficients certain highdimensional indexing structure 
researches base approach extend stationary nearest neighbor queries continuous ones 
prior research considered algo rithms continuous nearest near neighbor queries small number database series computation cost main concern 
extended research deal situations number database series large cost dominating factor 
study performance issue related streaming rates 
jeffrey naughton rate query optimization streaming data source 
aimed maximizing put rate query evaluation plans 
consider improve output response time simultaneously 
zdonik aurora system model monitoring streams performances measured response times tuple drops values produced 
concerns similar performance measures 
concerned performance improvement continuous nearest neighbor queries streaming time series 
limited response strategy control maximum response time algorithm direct algorithm extension traditional nearest neighbor query algorithms time series 
uses nearest neighbor previ ous evaluation refine current 
second algorithm pre fetch algorithm uses idle time arrivals successive data predict querying series process predicted series provides useful information nearest neighbor predicted querying series resources memory sharing actual querying series 
experiments show algorithm overhead terms response time outperforms direct algorithm greatly 
idea pre fetch algorithm limited continuous nearest neighbor queries streaming time series 
may applied continuous queries long query predictable degree 
obvious direction apply strategy continuous queries types streaming data 
babu widom 
continuous queries data streams 
sigmod record sept 
chen dewitt naughton 
design evaluation alternative selection placement strategies optimizing continuous queries 
icde conference 
chen dewitt tian wang 
niagaracq scalable continuous query system internet databases 
proc 
sigmod pages 
dobra garofalakis gehrke ras 
processing complex aggregate queries data streams 
proc 
sigmod 
faloutsos ranganathan manolopoulos 
fast subsequence matching time series databases 
proc 
sigmod pages 
gao wang 
continually evaluating similarity pattern queries 
proc 
sigmod 
gehrke korn srivastava 
computing correlated aggregates continual data streams 
proc 
sigmod 
guttman 
trees dynamic index structure spatial searching 
keogh chakrabarti mehrotra pazzani 
locally adaptive dimensionality reduction indexing large time series databases 
proc 
sigmod 
liu pu zhou 
tial evaluation continual queries 
international conference distributed computing systems pages 
liu pu tang 
continual queries internet scale event driven information delivery 
ieee tkde 
madden franklin 
stream architecture queries streaming sensor data 
icde conference 
rafiei mendelzon 
similarity queries time series data 
proc 
sigmod pages 
roussopoulos kelley vincent 
nearest neighbor queries 
pages 
seidl 
kriegel 
optimal multi step neighbor search 
proc 
sigmod pages 
terry goldberg nichols oki 
con queries append databases 
proc 
sigmod pages 
jeffrey naughton 
rate query optimization streaming information sources 
proc 
sigmod 
stan zdonik cetintemel mitch cherniack christian convey lee greg michael stonebraker tatbul donald carney 
monitoring streams new class data management applications 
vldb 
