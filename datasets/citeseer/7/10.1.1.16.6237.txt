sequentiality vs concurrency games logic samson abramsky oxford university computing laboratory march connections sequentiality concurrency distinction semantics proofs investigated particular games linear logic 
games logic mirror understand aspect sequentiality concurrency distinction 
simple intuitive notion polarized games due blass bla bla pre gured ideas linear logic gir seen polarized version ideas familiar process calculi ccs mil synchronization trees pre xing summation expansion theorem 
analyze fact clear intuitive idea leads non associative composition kind incompatibility purely sequential model logic classical format 
ways addressing issue 
modify syntax studying hyper sequentialized version sequent calculus current focus attention proof explicitly represented 
approach taken girard gir 
broaden notion game encompass truly concurrent games 
games longer global polarization positions players move concurrently local local decision just players 
idea concurrent games abramsky melli es am give fully complete model linear logic original form hyper sequentialized correspondence proof nets parallel syntax proof theory girard phrase gir :10.1.1.46.4577
way distinction sequentiality concurrency re ected fundamental level analysis space proofs 
main aim expose conceptual issues underlying technical games logic 
presentation deliberately elementary style hope making discussion accessible concurrency theorists interested semantics proofs exhibiting signi cant point contact elds 
analysis blass games problem non associativity composition connection issue interleaving true concurrency distinction rst author lecture isaac newton institute mathematical sciences cambridge programme semantics computation 
reader convenience material linear logic speci cally sequent calculus presentation propositional multiplicative additive linear logic mall recalled appendix 
blass games polarized processes section view games polarized processes 
precisely develop correspondence certain person games perfect information polarized deterministic synchronization trees 
review notions process theory describe founded deterministic synchronization trees inductively expressions form set closed operation guarded summation mil 
understood summation ccs associative commutative idempotence arise disjointness condition 
basic case inductive de nition empty summation written nil process ccs 
labelled transitions giving arcs root synchronization tree immediate sub trees 
accomodate nite branches trees coinductive inductive de nition 
issue important purposes quite sucient consider nite trees 
de ne interleaving non communicating parallel composition synchronization trees pkq kq kq order preserve disjointness property summation require sorts disjoint mil tacitly assumed sequel 
expansion theorem mil appropriate version 
note taken inductive coinductive de nition parallel composition operation synchronization trees 
shows eliminate parallel composition favour purely sequential constructs 
expresses essence interleaving view concurrency 
note milner classi cation operations process algebra mil guarded summation built dynamic operations parallel composition key static operation 
interleaving view gives primacy dynamic operations 
useful recall left merge operation extensively process algebra bw 
de ning equation kq express expansion theorem pkq scheduling turn counterpart games linear logic 
game trees consider game trees person games perfect information 
represent games polarized deterministic synchronization trees trees bit information added node say player turn play game position corresponding node 
follow standard practice referring players proponent opponent 
process terms think representing system currently consideration environment see aj detailed account correspondence notions game theory process theory 
formally take games inductively preferred coinductively de ned product games coproduct games identities actions synchronization trees irrelevant just label possible moves position game indices summations action names 
versions empty game tree empty product empty coproduct 
clearly de ne formal game negation inverts polarization node tree immediately yields equations linear logic product coproduct additive level connectives product written coproduct plus 
see terms game trees connectives accounted dynamic operations 
static operations particular parallel composition 
polarized versions corresponding multiplicative connectives tensor par linear logic 
tensor de ne binary connectives consider cases corresponding possible arguments 
tensor cases forced requirement tensor distribute coproduct 
taken desirable logical distributivity mathematically support notion implication tensor argument xed left adjoint giving rise adjunction preserve colimits 
game terms thinking tensor form conjunction onus defend conjuncts move term move sub games 
obtain equations tensor process terms think cases scheduling form left merge operator studied process algebra 
nal case considered polarities arguments tensor simply apply exact analogue expansion theorem synchronization trees 
game terms says freedom move sub game may restore situation forced move analogous formally related switching conditions introduced aj 
par linear implication wish de morgan duality goh equivalence oh de nitions multiplicative connectives forced tensor oh oh go goh oh goh oh goh reader similarly write de nition linear implication 
notion game tree interpretations multiplicative additive connectives linear logic correspond exactly game semantics andreas blass bla relaxed form terminology 
note additives provide operations game trees constructed multiplicatives eliminated polarized versions expansion theorem 
additives primacy form game semantics exactly sense dynamic operations primacy interleaving view process algebra 
de nitions clear natural forced interleaving point view taken implicitly great bulk tradition game theory concerns game trees play proceeds purely sequential fashion 
second level strategies seen games add crucial bit structure processes information turn play position 
opens way allowing great deal additional structure articulated explicitly 
usual process models amorphous allow great variety behaviours expressed easily structural characteristics various classes behaviour hard capture 
example processes model speci cations implementations types inhabitants types 
world games basic distinction games strategies 
games represented trees naturally represent strategies game certain kinds subtree point view process theory games strategies processes distinction ered game setting build structured theory 
exemplify de ning strategies blass games 
simplicity shall consider deterministic total strategies founded games de ned response position arise 
fp og de ne strategies game inductively strategy player game sub synchronization tree deterministic choice move position play response possible move turn 
note ccs mil represent player moves output actions moves observes input actions de ne result playing ccs parallel composition restriction operators mil contains actions appearing result uniquely determined silent computation founded empty node player play move possible 
player loses play proceed de ne notion winning strategy usual fashion 
non founded game trees nite plays possible add information say wins 
see abr development connection processes games linear logic see abr 
developed ideas purposes 
composition turn crucial issue composition strategies 
simple highly suggestive re nement processes blass games necessary ingredients full blown model multiplicative additive linear logic mall level just formulas proofs 
precisely see clear idea de ne category games strategies serve model mall 
objects blass games morphism strategy ob 
de ned interpretations tensor product par negation products coproducts category 
natural take granted details 
fundamental kind 
problem arises precisely polarization structure imposed linear connectives interleaving view concurrency implicitly 
problem concerns associativity composition 
known andreas blass bla mentioned papers game semantics 
noticed independently discussed aj 
analyze associativity consider strategies view ob oc od games polarity root yielding possibilities 
just problematic polarity polarity case polarity game ob case expansion theorem par choice playing suppose fact chooses play similarly polarity game od choice playing suppose fact chooses play oc play rst 
suppose rst form composition oc 
play rst game 
form composition od play rst possibility rst move reasoning entirely similarly fashion rst form composition rst wait move move conclude plays initially plays initially 
argument robust assumes little speci cs strategies de ned 
way polarization enforced de nition multiplicative connectives blass games 
seen enforcement polarization directly related interleaving interpretation concurrency 
initial move table polarities determine initial move possible 
see fairly easily give rise analogous problem 
cases move rst od remaining cases strategies unambiguously move rst forced polarization whichever way composition bracketed 
list possibilities explicitly table 
syntactic perspective show easily problem described previous section arise mall shall give simple example proof mall interpretation blass games gives rise exactly situation 
firstly propositional atom 
de ne formulas note formulas exactly polarities problematic case discussed previous section remembering product coproduct 
de ne proofs 
id id id id id id interpretation proofs strategies gives rise exactly problematic situation described previous section 
relationship form sequent calculus proofs temporal properties strategies move rst 
rule proof corresponds rst move associated strategy 
rst proof moves rst third proof moves rst hand rules introducing connectives negative polarity correspond moves see second proof move rst 
consider ways composing proofs cuts 

cut 
cut 


cut cut corresponding respectively 
performing cut elimination proofs leads 
proofs considered equal permutation rules 
rigid sequential interpretation proofs strategies satisfy equality distinguishes proofs 
analogy wish concurrency theory 
proofs di er order introduce occurences sequent computationally rules amounts specifying bit information left disjunct right disjunct see ole rules proof performing actions say set boolean variable set boolean variable sequential interleaving point view distinguish computation histories ab ba account order events occur 
true concurrency model events causally identify histories wn 
purpose proof nets gir gir geometry interaction gir gir gir dr dr nd intrinsic representation proofs spurious ordering rules imposed sequent calculus factored 
directly akin issue representing true concurrency see proof nets parallel syntax proof theory gir 
discussion useful compare issue raised connection classical linear logic familiar issue proof theory classical logic 
known incompatibility unconstrained classical logic proof theory con uence shown clearly simply known example due yves lafont glt 
view example discussed shows equally clearly incompatibility unconstrained classical linear logic proof theory purely sequential interleaving view semantics proofs 
approaches computational interpretation proofs classical logic 

tame syntax restricting permitted reductions adding information resolve non deterministic choices restoring con uence 
approach typi ed systems girard lc gir systems lkt danos schellinx djs calculus parigot par 

study full non con uent calculus nd computational structure 
typi ed bb lai 
similar fashion possibilities studying linear logic proofs 

taming syntax way control scheduling avoid bad combination polarities led problem composition 
game semantics applies intuitionistic version linear logic applies negative fragment abr 
game terms means considers games opponent starts players strictly alternate 
constraints problems composition arise 
lost direct access natural game interpretation classical linear negation interchange oles players 
noted kind games quite sucient yield models calculus shown ong lai 
option 
go scope intuitionistic linear logic study expressive system linear logic 
linear logic focussing introduced andreoli ap current girard gir 
shall study approach section 

alternatively extend semantics embrace true concurrency overcome problems composition interpreting full unconstrained original syntax linear logic 
done concurrent games model shall discuss section 
sequential way focussing shall consider focussing version mall gir system introduced ap 
shall refer system mall foc shall propositional part system recapitulate reader convenience 
firstly formulas system positive formulas 
built propositional atoms 
grammar shifted negation shift restore positive polarity 
think kind double negation interpretation game process terms polarized pre xing polarity reversed node game linear negation positive polarity restored pre xing dummy move 
sequent mall foc expression 

nite multisets formulas stoup constraint stoup non empty contains exactly formula case consists propositional atoms 
negative propositions handled implicitly left hand sides sequents 
rules mall foc follows 
cut 

cut 

cut identity id focussing 

foc shift 

tensor 


plus 






ask extent problematic situation standard mall involving proofs discussed section replicated mall foc certainly nd reasonable analogue id foc foc essential feature positive rule applied left hand formula nal sequent participate cut analogue nd analogue harder double negation style representation obtain id foc id foc foc id foc id foc foc note introduces rst left hand right hand 
clearly equivalent permutation rules mall proof introduces opposite order 
analogous version introduces opposite order 
essentially completely symmetric case evident asymmetry left hand represented implicitly left hand side sequent right hand represented double negation form right hand side sequent 
asymmetry telling di erence regards possibilities forming cuts shall see 
need analogue proof sequent positive rule introducing right hand side sequent 
leads proof take double negation essential 
id foc foc foc note necessity double negate order allow left hand side sequent introduced 
note crucially stoup constraint perform right hand side sequent rule proof 
means obtain combining analogous situation case table 
worked symmetric fashion right left obtain situation analogous case 
analogue problematic case mall foc considered particular example illustrate way mall foc mall putting sucient constraints control ow admits deterministic sequential scheduling 
precisely reason mall foc 
richer subtle setting blass games certain salient features common 
include primacy additives fact interaction strictly polarized fact players strictly alternate player start 
control retained scheduling explicit shift operators process terms seen polarized versions pre xing 
semantic universe corresponds sense inspired focussing version mall mall foc full completeness result proved gir 
concurrent way concurrent games confronted mismatch syntax semantics may modify syntax change model 
case pcf confronted non full abstraction standard denotational model may extend pcf parallel constructs look re ned model captures sequentiality 
case linear logic movement opposite direction starting sequential model constrain syntax enforce sequentiality enrich model allow concurrency represented directly 
turn possibility 
game theory concurrency theory ers ready solutions problem 
suggestive remarks connecting games imperfect information concurrent teams players hs precise tractable formalization proposed far aware 
seen blass games give primacy additive connectives linear logic 
give direct natural representation idea occurrences represent points computation choices 
case choice case account multiplicative connectives games satisfactory seen insistence retaining global polarization position exactly player turn move leads speci cation sequential order events bad formal consequences 
contrast nd authentic semantic account multiplicatives extent exponentials geometry interaction gir gir gir dr dr 
local asynchronous character multiplicatives suggested intrinsic geometrical representation multiplicative proofs proof nets turned concrete form symbolic dynamics 
basic idea geometry interaction multiplicative proofs represented permutations acting structures kind 
background original version geometry interaction developed girard multiplicative fragment gir 
best setting explain basic ideas interpretation 
consider multiplicative fragment restriction axiom propositional atoms look cut free proofs example sequent fact just corresponding identity twist maps 
twist id see examples cut free proof nets fragment structure set trees formula leaves connected pairs axiom links 
structure trees determined uniquely formulae sequent restriction axioms applied 
complete invariant distinguish di erent cut free proofs sequent information leaves joined 
twist id model information permutation set leaves obtained product transpositions corresponding axiom links 
corresponds permutation note transpositions disjoint 
cut free proof represented involution self inverse permutation 
representation cut free proofs thought modelling information ow leaves dynamic fashion think tokens travelling directions axiom links opposed modelling linkage statically graph 
note functions represent information ow input output bias ow bidirectional symmetric 
returning example consider performing cut elimination twist twist proof net twist twist cut elimination proof net twist twist step cut elimination generally fragment apply decomposition rule repeatedly tensors cut par cuts axiom links 
say purpose transformations match corresponding axiom links correctly real information ow accomplished axiom reductions generally idea cut free proofs model transformations dynamically ow information tokens graph rewriting 
interpretation multiplicative fragment just permutations nite sets described gir 
task characterizing space proofs pick exactly permutations arise denotation cut free proof nets compositional syntax free fashion 
goal full completeness theorems discussed section 
main point note done suitable uniformity preservation properties number semantic settings content various full completeness theorems multiplicative linear logic appeared past years starting aj see ho bs loa hag 
question view multiplicatives scope expressing causal dependencies exactly sense asynchronous reconciled additives seen essentially concerned choice causality 
fact characterize behavioural features various levels connectives linear logic concepts net theory pet multiplicatives express concurrency pure causal independence additives express con ict causality choice sequencing 
course just true concurrency perspective previous alignment additives dynamic operations process algebra multiplicatives static operations 
looking setting features represented 
course net theory ers setting 
problem net theory formal basis semantic representation seen need levels description formulas proofs games strategies 
relatively simple matter describe strategies subtrees synchronization trees easy nd tractable description strategies games represented petri nets 
reason shall pursue di erent approach 
keeping discussion far looking semantic representation account additives blass games account multiplicatives geometry interaction faithfully represented 
little elegant account meeting desiderata 
extension geometry interaction additives gir containing interest generally agreed er fully satisfactory treatment 
domain theoretic formalization games strategies revisiting blass games idea game trees viewed partial orders means position reached position playing additional moves 
natural information ordering domain theory aj pre ordering plays paths game tree 
add limit points corresponding nite branches game tree obtain complete partial order viewed terms construction sums products games blass games described lifted sums far underlying domains positions concerned disjoint union partial orders 
lift result adding new bottom element important understand partial order representation entirely equivalent deterministic synchronization trees section 
root game tree represented bottom element corresponding position moves played 
elements immediately form 
bottom element element corresponds position opening move root sub tree go ordering correspond development play 
importantly partial order game trees admits elegant representation strategies functions domains positions position obtained extending moves strategy position 
immediate positions moves turn exactly xpoints usual way require computationally reasonable strategies monotonic continuous 
useful normalizing condition require strategies idempotent understand consider applied 
moves contains information supplied opponent environment 
decides able decide require 
course allows moves block player 
possibility exists blass games opponent move twice initially important point strategies may de ned positions 
general positions reached strategy 
mesh requirement strategies increasing functions adjoin top element domain positions writing represent unde ned 
summary strategies player represented continuous closure operators modest assumptions bounded completeness complete lattice 
completely specify game structure domain positions set legal strategies set legal counter strategies strategies de ne strategies player inductively founded blass games just synchronization tree representation 
products de ne fh ji ii ji ii 
ji ii corresponds exactly idea player rst wait opponent choose plays strategy fin 
corresponds idea strategy opponent rstly choose play strategy opponent note case covers unreachable states 
de ne duality directly terms ect set strategies player reversal oles means strategies turn strategies vice versa clearly de nition de ne 
case founded blass games recover exactly class strategies earlier de nition terms synchronization trees 
games domain nite nite sequences pre ordering corresponding paths game tree conventions play captured fact opponent turn move player turn 
special case general setting overcome problems blass games precisely allowing situations players move 
shall interpret game boards multiplicatives di erently blass true concurrency interleaving representation 
setting simply matter de ning cartesian product domains 
important understand relates earlier discussion true concurrency 
typical situation causally events represented game say corresponds increase information represented increase information performance actions order corresponding trace ab corresponding ba identi ed single outcome 
cartesian product event structures standardly model parallel composition partial order true concurrency semantics wn 
strategies tensor de ne 
really smash product respect result 
exactly captures idea informational independence player actions cf 
aj 
player moves depends information available similarly order de ne counter strategies tensor strategies par linear implication eventually morphisms category concurrent games introduce important feature formalization elegant treatment ords composition strategies 
suppose rstly game 
play 
de ne 


fact xpoints coincide follows easily fact continuous closures fact special case construction join closure operators 
position reach result playing equality formulas shows independent questions starts 
closure operators want compose get closure de ne follows input play relative input obtain external response account interaction 
particular closure induces action closures closures 
closures back closures 
de ne de morgan duality ob particular symmetric classical version familiar logical relations condition action carries strategies strategies carries counter strategies counter strategies connection geometry interaction issue faithfully re ecting geometry interaction ideas modelling multiplicatives recall basic idea geometry interaction multiplicative proofs modelled permutations 
note symmetric monoidal category symmetric group acts canonical way tensor power original form geometry interaction gir dubbed particle style abr monoidal structure representation coproduct disjoint union 
setting products exactly ect 
example sequent proofs represented maps product 
identity 
twist 
idea basically correct requires slight elaboration order mesh approach closure operators model strategies 
turn permutations closure operators de ning example permutation corresponding identity give rise closure operator 
axiom interpreted twist map 
closure forces components diagonal 
fashion claim achieved objective faithfully embedding blass games treatment additives treatment multiplicatives model 
connection new foundations noted mathematically concurrent games model merely rephrasing new foundations geometry interaction introduced author radha jagadeesan aj 
demonstrated abr ahs original form geometry interaction gir instances single general scheme far interpretation multiplicatives exponentials concerned 
emphasized aj new foundations setting representational capacity capture causality inherent additives particle style gir 
advantage presentation concurrent games terms closure operators connection traditional forms game semantics blass games particular clearer 
new foundations presentation remains important particularly pick strategies satisfying signi cant domain theoretic properties stability sequentiality turn important full completeness characterizing strategies arise proofs 
properties apply underlying functions closure operators induce composition revisited illustrate concurrent games model overcomes problem composition arises blass games example discussed section 
illustration interpretation game fid fid point domain moves possible sole point root game tree identity function valid strategy note seen type booleans tt ff domain booleans fin tt ff fid ffg 
compute underlying domains sequents domains identical take account polarities additive connectives re ected de nitions sets strategies corresponding games distinguish 
example nodes marked move xpoints strategies conversely node 
consider interpretations proofs discussed section 
firstly de nition tt tt tt tt tt tt ff ff note proof introduces occurrences opposite order denotation cases introductions choices nodes performed concurrently 
de nition denotation proof introduces opposite order 
noted general strategies taken modulo partial equivalence relations am order obtain unicity properties product coproduct commutative conversions sequent calculus terms conversions calculus terminology :10.1.1.46.4577
interestingly partial equivalence relations needed gir 
check unfolding de nitions example xpoint converges iterations resulting behaviour tt tt tt strategy type exempli es global polarization longer holds concurrent games model 
move initially choice choice 
choices determining axiom link corresponding proof net copy cat played chosen occurrences atom 
see aj examples xpoint computations detailed analysis correspondence cut elimination 
compose order result longer blocked polarization constraints making choices occurrences truly concurrently 
concrete presentation foregoing mathematical development may hard relate intuitions 
start give essentially equivalent concrete presentation 
notion concurrent games thought played teams players distributed game board fashion 
basic action game making move chosen possible alternatives 
information content move choice decision move play 
set cells labels various choices decisions course play game set values enumerating possible choices 
event means alternative chosen cell state game board position game represented partial function cells values information order decisions taken 
take universal choice game board subject countability embedded 
positions partial functions natural numbers inclusion form basic examples domain aj 
play progresses moves position increases natural information ordering call universal game board strategy function reasons explained previous section function monotonic continuous increasing idempotent 
unreachable positions 
need error element situations strategy applied position reached strategy 
preserve property error element top information ordering 
strategy continuous closure operator complete lattice obtained adjoining top element set closure operators cl universal space strategies 
various sub classes important 
particular constraints strategies correspond important computational properties 
sequentiality cur 
closure operator output function dom dom fx recall domain theoretic conditions stability sequentiality ac 
sense underlying domain simple concrete fact concrete domain technical sense kahn plotkin kp 
simply countable product domains fact vuillemin original de nition sequentiality function sequential says particular cell input get lled ll output cell 
classically condition excludes parallel function berry function kp cur 
take constraint having sequential output function picking strategies regarded computing deterministic fashion sequentially implementable 
support contention fact universe sequential strategies model sequential functional language pcf elegant way doing uses realizability ideas abr fully universal restrict ective strategies 
loader results loa characterization sequentiality get 
give rst indication simple universal type free space strategies recover structure displayed typed version previous section 
split address space xing nite 
note regard basic example strategy asynchronous copy cat id corresponding output function twist map tw process model may 
describe model operational terms little process calculus 
de ne syntax terms bnf pkq recx de ne structural congruence terms style asynchronous calculus mil 
main novel feature acts zero de ne reduction semantics style calculus key di erence reduction ccs calculus rule property persistence outputs corresponds information domain theoretic presentation akin concurrent constraint programming sar 
connect operational view directly view strategies closure operators de ning denotational semantics terms process calculus closure operators proving correspondence denotational semantics operational semantics 
see process calculus terms providing syntax semantic objects making computational behaviour strategies explicit associated operational semantics 
give couple clauses denotational semantics 
consistent parallel composition interpreted join closure operators note connection composition operators de ned section 
kq 

applied gives common xpoint note doesn matter starts 
calculus construct copy cat strategy described previously closure operator concrete terms process 
splitting address space introduced previous section 
cell think occurring left part address space right part 
de ne copy cat process id think process big team players matched pair cells 
process copies contents element pair soon lled 
course pair cells incompatible contents fail 
play copy cat strategy strategy type constraints linear logic kind failure happen 
full completeness usual notion completeness logic respect provability full completeness respect proofs 
model formulas proofs logic typically means category structure appropriate kind formulas denote objects proofs entailments denote morphisms convertibility proofs respect cut elimination soundly modelled equations morphisms holding say fully complete formulas morphism denotation proof 
full completeness means characterizes proof strong sense 
de ned syntax independent way true semantic characterization space proofs spanned notion full completeness introduced aj full completeness theorem proved game semantics multiplicative linear logic mix rule 
followed series papers established full completeness results variety models respect various versions multiplicative linear logic ho bs loa loa tan hag 
proofs full completeness appeared date fall broad classes proofs decomposition arguments number signi cant precursors noted aj including representation theorems category theory fs full abstraction results programming language semantics mil plo plotkin characterization de nability calculus logical relations plo studies parametric polymorphism hrr completeness conjecture gir 
contribution aj clearly identify formulate issue precise interesting research programme prove rst quite rich sequence results 
geometric proofs proof nets 
rst class proofs rule rst move idea 
decomposes sequential strategy opening move initial response opening move sub strategies 
initial protocol matched sequent calculus rule term formation scheme calculus setting 
recursively applies decomposition sub strategies uncovering sequent proof term denotes strategy step step 
typical proofs de nability full completeness range calculus programming languages abr various fragments intuitionistic logic intuitionistic linear logic mo mo applies grosso full completeness proof respect mall foc gir 
form proof obviously adapted sequential models 
contrast second class proof original full completeness result aj rst establishes connection semantic objects case strategies proof structures pre proofs shows geometric constraints picking structures proof nets correspond real proofs satis ed proof structures arising semantic objects 
rst step typically uses uniformity arguments fairly general nature second step delicate speci features model 
full completeness proof concurrent games respect mall am am general form :10.1.1.46.4577
connection proof nets mall introduced gir eliminate additive boxes favour boolean weights distribute information causal dependencies proof net 
important point mere technical machinery gir acquires clearer semantic status full completeness argument 
particular boolean weights derived inherent functional process terms causal dependencies model monomial condition plays key technical ole proof sequentialization theorem gir turns correspond exactly semantic constraint stability strategies concurrent games model 
interesting situation di erent proofs sequential case respect mall foc concurrent case concurrent games respect mall 
scope results entirely analogous concern fragment mall resp 
mall foc multiplicative units 
challenge relate 
concluding remarks sketched ways structural dilemma arose blass games 
arguments pursuing focussing version linear logic ers control proof search purpose originally introduced ap setting studying sequential models classical systems analogous calculus classical logic 
concurrent approach allows direct study original system 
close geometry interaction proof nets 
may er principled way describing controlling true concurrency just classical logic may non deterministic computation 
ultimately hope relate directions coherent fashion 
speci challenges questions concurrent games challenge extending full completeness results exponentials remains 
may require better treatment multiplicative units currently ers 
exponentials analyzed may hope turn lens fully complete models systems interpreted linear logic notably classical logic 
tantalizing question remains unclear true concurrency lurking computational interpretation classical logic 
interesting look bounded systems light linear logic gir connections complexity classes 
appendix brief review mall formulas system built literals propositional atoms 
negations 
grammar aoa multiplicative connectives additive connectives 
negation de extended general formulas equations ob sequent mall expression nite multiset formulas 
rules mall follows 
axiom cut id 
cut multiplicatives 

additives aj abramsky jagadeesan new foundations geometry interaction information computation 
conference version appeared lics 
aj abramsky jagadeesan 
games full completeness multiplicative linear logic journal symbolic logic vol 

conference version appeared 
aj abramsky jung 
domain theory 
handbook logic computer science 
volume iii semantic structures pages 
abramsky gabbay maibaum editors 
oxford university press 
abr abramsky 
retracing paths process algebra 
proceedings concur lecture notes computer science vol 
pp 

springer verlag 
abr abramsky 
semantics interaction 
semantics logics computation pitts dybjer eds 
publications newton institute pp 

cambridge university press 
ahs abramsky scott 
geometry interaction models linear combinatory logic 
submitted publication 

abramsky mccusker 
game semantics 
computational logic 
berger schwichtenberg eds 
springer verlag 
abr abramsky 
process realizability 
foundations secure computation bauer eds 
ios press 
abr abramsky 
axioms de nability full completeness 
proof language interaction essays honour robin milner plotkin stirling tofte eds 
mit press pp 

am abramsky 
melli es 
concurrent games full completeness 
draft pages 
am abramsky :10.1.1.46.4577
melli es 
concurrent games full completeness 
proceedings th annual ieee symposium logic computer science 
ac amadio 
curien domains lambda calculi 
cambridge university press 
ap 
andreoli pareschi 
linear objects logical processes built inheritance 
new generation computing 
bainbridge freyd scedrov scott 
functorial polymorphism 
theoretical computer science 
bb berardi 
symmetric lambda calculus classical program extraction 
information computation 
bla blass 
degrees indeterminacy games 
fundamenta mathematica 
bla blass game semantics linear logic annals pure applied logic north holland 
bla blass 
personal communication 
bs blute scott 
linear semantics 
annals pure applied logic 
bw baeten weijland 
process algebra 
cambridge university press 
cur 
curien 
categorical combinators sequential algorithms functional programming 
pitman 
revised edition birkhauser 
dr danos regnier local asynchronous beta reduction analysis girard execution formula proc 
eighth international symposium logic computer science ieee press pp 

dr danos regnier proof nets hilbert space glr pp 

djs danos 
schellinx 
new logic linear logic 
journal symbolic logic 
hughes plotkin pratt full completeness multiplicative linear logic chu spaces 
proceedings fourteenth international symposium logic computer science ieee press 
fs freyd scedrov 
categories allegories 
north holland mathematical library vol 
elsevier 
gir 
girard 
linear logic 
theoretical computer science 
gir 
girard 
multiplicatives 
del torino universita pol 
torino 
gir 
girard geometry interaction interpretation system logic colloquium ed 
ferro north holland pp 

gir 
girard geometry interaction ii deadlock free algorithms 
martin lof mints eds 
springer lncs vol 
pp 

gir 
girard 
new constructive logic classical logic 
mathematical structures computer science 
gir 
girard geometry interaction iii accommodating additives glr pp 

glr 
girard lafont regnier eds 
advances linear logic london math 
soc 
lecture note series vol 
camb 
univ press 
gir 
girard 
proof nets parallel syntax proof theory 
logic algebra marcel dekker 
gir 
girard 
light linear logic 
information computation 
gir 
girard 

appear mathematical structures computer science 
glt 
girard lafont taylor 
proofs types 
cambridge university press 
hag 
categorical approach linear logic geometry proofs full completeness 
phd thesis university ottawa 
hs hintikka 
logic parallel processing 
international journal foundations computer science 
hoa hoare communicating sequential processes 
prentice hall international 
hrr hyland robinson rosolini 
algebraic types models 
proceedings fifth conference mathematical foundations programming semantics springer lncs vol 
pp 

ho hyland 
ong 
fair games full completeness multiplicative linear logic mix rule 
unpublished manuscript 
kp kahn plotkin 
concrete domains 
theoretical computer science 
appeared tr 
lai laird 
semantic analysis control 
ph thesis university edinburgh 
lai laird 
deconstruction non deterministic classical cut elimination 
appear proceedings tlca 
loa loader 
linear logic totality full completeness 
proceedings ninth international symposium logic computer science ieee press 
loa loader models lambda calculi linear logic structural equational characterisations 
phd thesis oxford university 
loa loader 
finitary pcf decidable 
appear theoretical computer science 
mil milner 
mathematical model computing agents 
logic colloquium bristol north holland pp 

mil milner 
communication concurrency 
prentice hall international 
mil milner 
communicating mobile systems pi calculus 
cambridge university press 
mo 
ong 
exhausting strategies games full completeness unit 
electronic notes theoretical computer science 
proceedings th conference category theory computer science 
mo 
ong 
discreet games light ane logic ptime computation 
proceedings csl annual conference european association computer science logic springer lncs vol 

ong 
ong 
semantic view classical proofs type theoretical categorical denotational characterizations 
proceedings eleventh international symposium logic computer science ieee press 
par parigot 
calculus algorithmic interpretation classical natural deduction 
proc 
international conference logic programming automated reasoning 
springer 
nielsen plotkin winskel 
petri nets event structures domains part 
theoretical computer science 
pet petri 
non sequential processes 
technical report isf gmd isf 
plo plotkin 
lcf considered programming language 
theoretical computer science 
plo plotkin 
lambda de nability full type hierarchy 
curry essays combinatory logic lambda calculus formalism academic press 
sar saraswat 
concurrent constraint programming 
mit press 
tan tan 
full completeness models linear logic 
ph thesis university cambridge 
urban 
classical logic computation 
ph thesis cambridge university 
vuillemin 
proof techniques recursive programs 
ph thesis stanford university 
wn winskel nielsen 
models concurrency 
handbook logic computer science vol 
abramsky gabbay maibaum eds 
oxford university press 

