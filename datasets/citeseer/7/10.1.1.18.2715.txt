zhang dept electrical engineering princeton university ee princeton edu efficient conflict driven learning boolean satisfiability solver conor madigan department eecs mit mit edu important features current state art sat solvers conflict backtracking learning techniques 
generalize various conflict driven learning strategies terms different partitioning schemes implication graph 
re examine learning techniques various sat solvers propose array new learning schemes 
extensive experiments real world examples show best performing new learning scheme speedup compared learning schemes employed state art sat solvers 

boolean satisfiability problem sat studied np complete problems significance theoretical research practical applications 
boolean formula sat problem asks assignment variables formula evaluates true determination assignment exists 
various eda applications ranging formal verification atpg efficient sat solvers basis reasoning searching 
dedicated solvers grasp posit sato rel sat walksat chaff various algorithms davis putnam local search st algorithm proposed solve sat problem efficiently practical problem instances 
boolean formulae sat problems expressed conjunctive normal form cnf 
cnf formula logical clauses clause logical literals 
literal positive negative form variable 
satisfy cnf boolean formula clause satisfied individually 
certain clause literals assigned value remaining literal referred unit literal assigned value order satisfy clause 
clauses called unit clauses 
process assigning value unit literals called unit propagation 
assume discussed formulae cnf format 
matthew moskewicz department eecs uc berkeley princeton edu sharad malik dept electrical engineering princeton university malik princeton edu sat known np complete exists sat algorithm polynomial time complexity 
sat problem instances generated real world applications structure enables efficient solution 
large class instances solved reasonable compute time 
due advances search pruning techniques efficient sat algorithms structured problems developed grasp rel sat sato chaff 
solvers solve instances tens thousands variables handled boolean reasoning methods 
successful complete sat solvers branch backtracking algorithm called davis putnam logemann loveland dpll algorithm 
addition dpll algorithms mentioned earlier utilize pruning technique called learning 
learning extracts memorizes information previously searched space prune search 
learning achieved adding clauses existing clause database 
learning plays important role pruning search space structured sat problems important efficient effective possible 
examine learning schemes detail 
specific focus learning occurs consequence conflicts created generation implications 
referred conflict driven learning 
rest term learning context necessarily time conflict driven adjective 
dpll learning basic dpll algorithm basis existing complete sat solvers 
authors augmented dpll algorithm learning non chronological backtracking schemes facilitate pruning search space 
pseudo code dpll algorithm learning illustrated 
function decide branch chooses branching variable various heuristics 
decision decision level associated 
function deduce propagates effect decision variable assigned 
making decision clauses may unit clauses 
unit literals assigned assignment propagated unit clause exists 
variables assigned consequence implications certain decision decision level decision variable 
conflict encountered clause called conflicting clause literals assigned value analyze conflicts function called analyze reason conflict resolve 
gains knowledge current conflict returns backtracking level resolve conflict 
returned backtracking level indicates wrong branch decision previously back track undo bad branches order resolve conflict 
zero backtracking level means conflict exists branching 
indicates problem unsatisfiable 
readers referred detailed discussion dpll algorithm 
large number different sat solvers differ mainly functions implemented different heuristics 
lot effort spent decisionmaking significant progress efficient deduction 
knowledge variations discussed implementation conflict driven learning 
authors aware evaluation different conflict driven learning schemes influence performance sat solvers 
decide branch branching deduce conflict deducing analyze conflicts learning return unsatisfiable back track backtracking branch means variables got assigned 
return satisfiable 
dpll learning implication graph implication relationships variable assignments sat solving process expressed implication graph 
typical implication graph illustrated 
implication graph directed acyclic graph dag 
vertex represents variable assignment 
positive variable means assigned negative variable means assigned 
incident edges vertex reasons lead assignment 
call vertices directed edges certain vertex antecedent vertices 
decision vertex incident edge 
variable decision level associated denoted graph number parenthesis 
implication graph conflict vertex variable 
conflict occurs vertex assignment variable 
variable referred conflicting variable 
variable conflicting variable 
discussion referring implication graph consider connected component conflicting variable 
rest implication graph relevant conflict analysis 
decision variable conflicting clause uip 
typical implication graph conflicting variable implication graph vertex said dominate vertex iff path decision variable decision level needs go unique implication point uip vertex current decision level dominates vertices corresponding conflicting variable 
example sub graph current decision level dominates vertices uip 
decision variable uip 
note may uip certain conflict 
example 
intuitively uip single reason implies conflict current decision level 
order starting conflict 
previous example uip 
actual implementations implication graph maintained associating assigned non decision implied variable pointer antecedent clause 
antecedent clause non decision variable clause unit time implication happened forced variable assume certain value 
antecedent pointers implication graph constructed needed 
conflict analysis learning conflict analysis procedure finds reason conflict tries resolve 
tells sat solver exists solution problem certain search space indicates new search space continue search 
original dpll algorithm proposed simplest conflict analysis method 
decision variable solver keeps flag indicating tried phases 
conflict occurs conflict analysis procedure looks decision variable highest decision level flipped marks flipped undoes assignments decision level current decision level tries phase decision variable 
na conflict analysis method works randomly generated problems possibly random problems structure learning certain part search space generally help searches parts 
advanced conflict analysis relies implication graph determine actual reasons conflict 
kind conflict directed backjumping back level decision stack 
called backtracking 
time conflict analysis engine add clauses database 
process called learning 
learned clauses called conflict clauses opposed conflicting clauses refer clauses cause conflict 
conflict clauses record reasons deduced conflict avoid making mistake search 
clauses state certain combinations variable assignments valid force conflicting variable assume value leading conflict 
reason side cut cut involve conflict conflict side cut cut 
cuts implication graph added clauses conflict clause generated bipartition implication graph 
partition decision variables side called reason side conflicting variable side conflict side 
vertices reason side edge conflict side comprise reason conflict 
call bipartition cut 
different cuts correspond different learning schemes 
example clause added conflict clause corresponds cut 
similarly cut corresponds clause 
generalize uip concept decision levels current level context partition 
call vertex decision level dl uip iff path decision variable dl conflicting variable needs go go vertex decision level higher dl reason side partition 
note definition uip vertices certain decision level determined partition vertices decision levels higher 
current highest decision level 
note decision variables regardless partition taken 
case current decision level order starting conflicting variable 
mentioned non decision variable antecedent clause represents reason assignment 
antecedent clause represented implication graph incoming edges vertex 
example vertex incident edges respectively 
antecedent clause 
clause clause database 
construct additional clauses consistent clause database replacing certain literals antecedent clause antecedent literals 
example mentioned clause replace antecedent literals get clause 
corresponds cut 
call kind replacement cut involving conflicts 
clause learned clause added database 
kind learning useful exist part graph involved learning 
involved part graph tree structure information learned clause original database learned clause useful 
learning process plays important role pruning search space sat problems 
state art sat solvers utilize technique called random restarts help solver falling difficult search regions bad decisions early decision stages 
random restarting periodically undoes decisions restarts search 
noted frequent restarting hurt solving process unsatisfiable instances 
knowledge searched space recorded learned clauses 
discarding searched spaces restarting waste previous effort long recorded clauses 

different learning schemes section take look different learning schemes employed existing sat solvers propose new schemes different cuts implication graph 
rel sat sat solvers incorporate learning non chronological backtracking 
rel sat conflict analysis engine generates conflict clause recursively resolving conflicting clause antecedent resolved clause includes decision variables current decision level variables assigned decision levels smaller current level 
implication graph representation rel sat engine put variables assigned current decision level decision variable conflict side put variables assigned prior current level current decision variable reason side 
example conflict clause added call learning scheme rel sat scheme 
reason side cut cut involve conflict conflict side 
different cuts uip cut uip cut adding conflict clause reason conflict stated 
maximum decision level variables current decision level variable conflict clause decision level backtrack 
backtracking conflict clause unit clause current decision variable unit literal forced flip 
clause causes flip variable called asserting clause 
desirable conflict clause asserting clause 
unit variable asserting clause forced assume value take search new space resolve current conflict 
conflict clause asserting clause partition needs uip current decision level reason side vertices assigned uip conflict side 
backtracking uip vertex unit literal clause asserting clause 
learning scheme implemented grasp 
grasp learning scheme different rel sat sense tries learn possible conflict 
cases conflict occurs grasp learning engine 
current decision variable real decision variable explained grasp learning engine add current decision level learned clause 
example real decision antecedent conflict occurs grasp engine add clause database corresponding uip shown 
corresponds clause 
grasp include conflict clause corresponds partition variables assigned current decision level uip put conflict side 
rest vertices put reason side 
corresponds cut shown 
clause added 
backtracking conflict clause asserting clause forces flip 
note decision variable 
grasp decision fake decision 
decision level remains unchanged 
essentially means done current decision level 
call mode analysis engine flip mode 
deduction flipping decision variable leads conflict grasp conflict analysis engine enter backtracking mode 
clauses added flip mode adds clause called back clause 
cut back clause put vertices current decision level including fake decision variable conflict side vertices reason side 
example suppose decision variable fake decision variable antecedent clause 
clauses added grasp engine add clause clause conflicting clause involves variables assigned current decision level 
conflict analysis engine continue resolve conflict bring solver earlier decision level 
call learning scheme grasp scheme 
learning schemes options exist 
obvious learning scheme add decision variables involved conflict conflict clause 
implication graph representation corresponds making cut decision variables reason side variables conflict side 
call scheme decision scheme 
note include decision variables current search tree conflict clause combination decisions decision strategy microprocessor formal verification bounded model checking unsat sss sss barrel satplan uip uip uip rel sat mincut grasp decision uip uip uip relsat mincut grasp decision timeout set table 
run time different learning schemes occur restart 
learned clause hardly help prune search space 
decision variables decision level 
careful study decision scheme suggests making partition limited decision variables decision levels 
choices partition uip decision level 
call scheme uip scheme 
lower level depend partition need partition current decision level decision level 
precisely solver needs find uip current decision level variables current decision level assigned path conflicting variable conflict side rest reason side 
solver proceed decision level prior current reaching decision level 
learning scheme conflict clause small possible 
corresponds problem implication graph remove smallest number variables may include decision variables conflicting variable implication graph exist path decision variables conflicting variable 
typical vertex min cut problem transformed edge min cut problem solved algorithms 
may desirable conflict clause relevant current conflict possible 
may want partition closer conflicting variable 
mentioned earlier conflict clause asserting clause need put uip current decision level reason side 
put variables assigned uip current decision level paths conflicting variable conflict side reason side get partition close conflict possible 
call uip scheme 
uip scheme different uip scheme require current decision level uip reason side just partition 
may require immediately previous decision level uip reason side just partition 
conflict variable assigned immediate previous decision level 
call uip scheme similarly uip scheme uip conflict clause variable decision level involved 
min cut scheme mentioned learning schemes implemented traversal implication graph 
time complexity traversal 
number vertices edges implication graph respectively 
time complexity finding min cut implication graph implemented time 
learning scheme reduce number decisions needed solve certain problems possible 
effectiveness learning scheme hard determine priori 
generally speaking shorter clause vliw bp mc unsat vars contains information longer clause 
common belief shorter learned clause effective learning scheme 
sat solving dynamic process 
complex interplay learning schemes search process 
effectiveness certain searching schemes determined empirical data entire solution process 

experimental results discussions section empirically compare learning schemes discussed previous sections 
implemented mentioned learning schemes sat solver zchaff independent implementation shares features chaff sat solver 
zchaff utilizes highly optimized chaff boolean constraint propagation bcp engine decision heuristic making evaluation interesting large benchmarks evaluated reasonable amount time 
zchaff default branching scheme depends added conflict clauses literal counts making branching decisions 
different learning schemes may affect decision strategy 
fair comparison implemented fixed branching strategy branch unassigned variable smallest variable index 
variables indices predetermined problem instance 
default values settings 
test suite consists benchmarks bounded model checking microprocessor formal verification 
included benchmark ai planning community cover wider range applications 
experiments conducted dual pentium iii mhz machines running linux bytes physical memory 
cpu cache cache 
time limit sat instance seconds 
decision learning scheme large number aborts time limit set seconds reduce total experiment time 
run times different learning schemes benchmarks shown table 
benchmark class unsat vars sat bw large cnf sat vars uip rel sat grasp uip rel sat grasp uip rel sat grasp branches added clauses added literals added cls num 
implications runtime table 
detailed information large test cases learning schemes branching heuristic multiple instances shown parentheses benchmark name 
result section times shown total time spent solved instances 
number aborted instances shown parentheses run time 
number instances solved 
example unsat instances 
default decision strategy min cut learning scheme took seconds solve aborted 
experiment data see default fixed branching heuristics uip learning scheme clearly outperforms learning schemes 
contrary general belief decision schemes generate small clauses min cut uip decision perform 
selected best proposed schemes uip scheme compared learning schemes employed state art sat solvers grasp scheme rel sat scheme 
selected difficult test cases classes benchmark suites 
detailed solver statistics schemes table 
branching heuristic employed 
table find results quite interesting 
mentioned grasp scheme tries learn possible conflicts 
learn clause conflict 
conflict clause uip scheme learned grasp scheme 
cases grasp scheme needs smaller number branches solve problem 
grasp scheme records clauses bcp process slowed 
total run time grasp scheme uip scheme 
hand rel sat uip learn clause conflict learned clause rel sat scheme effective uip needs branches 

research explores conflict driven learning techniques widely current state art boolean satisfiability solvers 
examined strength weaknesses current learning schemes employed various sat solvers 
generalized conflict driven learning problem partitioning implication graph proposed new learning schemes 
learning schemes implemented sat solver zchaff extensive experiments conducted 
different learning schemes affect behavior sat solver significantly 
learning scheme unique implication point implication graph proved quite robust effective solving sat problems comparison schemes 
research interesting explore possibility mixing different learning schemes single run sat solving process 
sat solving process progresses number literals learned clauses grows quickly 
problems stages solving process learned clause may literals 
clause database may tens times larger original size quickly making solving process memory limited 
interesting explore possibility different learning schemes different stages solution process 
lead better control size learned clause 
pointed learning important success sat solvers little learning current research sat solving algorithms 
fact little insight learning useful learning scheme better 
example relevance learning clause length bounded learning common practices current sat algorithms attention choosing optimal parameters different problems 
sat methods popular wide range applications increasingly important answer questions systematic way 
represents step direction 

stephan brayton sangiovanni vincentelli combinational test generation satisfiability ieee transactions computer aided design integrated circuits systems vol 

bryant effective boolean satisfiability procedures formal verification superscalar vliw microprocessors proceedings design automation conference july 
biere cimatti clarke zhu 
symbolic model checking bdds tools algorithms analysis construction systems tacas number lncs 
springer verlag 
selman kautz cohen 
local search strategies satisfiability testing dimacs series discrete mathematics theoretical computer science vol 
ams 
freeman improvements propositional satisfiability search algorithms ph dissertation department computer information science university pennsylvania may 
marques silva sakallah grasp search algorithm propositional satisfiability ieee transactions computers vol 

bayardo schrag csp look back techniques solve real world sat instances proceedings th nat 
conf 
artificial intelligence aaai aaai press mit press 
zhang 
sato efficient propositional prover proceedings international conference automated deduction july 
moskewicz madigan zhao zhang malik 
chaff engineering efficient sat solver proceedings design automation conference july 
davis logemann loveland 
machine program theorem proving communications acm 
stalmarck system determining prepositional logic theorems applying values rules triplets generated formula technical report european patent patent 
moskewicz zhang zhao malik madigan chaff fast sat solver eda applications dagstuhl seminar sat bdd march 
dagstuhl germany 
marques silva impact branching heuristics propositional satisfiability algorithms proceedings th portuguese conference artificial intelligence september 
chu min li anbulagan heuristics unit propagation satisfiability problems proceedings fifteenth international joint conference artificial intelligence ijcai pages nagoya japan chu min li integrating reasoning davis putnam procedure proceedings aaai 
gomes selman kautz boosting combinatorial search randomization proceedings aaai madison wi 
goldberg tarjan 
new approach maximum flow problem proceedings eighteenth annual acm symposium theory computing 
bounded model checking benchmarks available www cs cmu edu bmc html microprocessor formal verification benchmarks available www ece cmu edu 
