knowledge approach planning incomplete information sensing ronald department computer science university toronto toronto ontario canada cs utoronto ca new approach problem planning incomplete information sensing 
approach higher level knowledge representation planner knowledge domain actions 
particular approach set formulas order modal logic knowledge represent planner incomplete knowledge state 
actions represented updates collection formulas 
actions modeled terms modify knowledge state planner terms modify physical world 
constructed planner utilize representation show common problems representation perfectly adequate solving planning problem fact scales better supports features applicable richer domains problems 
new approach problem planning incomplete information sensing 
intuition approach planning agent operating conditions incomplete knowledge model uncertainty build plans knows knowledge change executes actions access information plan time 
possible build plans considering agent knowledge state way knowledge state changed actions having consider various ways physical world configured ways actions change physical world 
fact demonstrate planning level agent knowledge state significant benefits 
particular problems planning knowledge level scales better abstracts away number irrelevant distinctions previous approaches forced 
furthermore number features model knowledge level difficult impossible previous approaches 
example limited propositional case deal functions run time variables features essential number domains 
research supported canadian government nserc nce iris programs 
fahiem bacchus department computer science university toronto toronto ontario canada cs utoronto ca planner operate knowledge level requires tractable representation incomplete knowledge tractable way updating representation model effects actions knowledge state 
previous bacchus developed representation 
key addition representation developed previous addition possible generate plans wider range problems 
representation supports number features currently unique approach features feel essential planning richer domains 
things higher level representation handle previous approaches 
particular representation able handle problems require complex case analysis distinguish various possible configurations world 
demonstrate approaches forced engage kind potentially computationally expensive case analysis necessary generating plan 
representation constructed simple forward chaining planner able generate interesting plans number different domains 
current implementation sophisticated forms search control 
blind search able demonstrate impressive performance performance clearly demonstrates potential approach 
short comparison approach approach commonly utilized previous 
explain representation incomplete knowledge developed way actions including sensing actions represented 
planning problems specified planning algorithm generating conditional plans 
close empirical results different domains concluding remarks 
previous approaches number works addressed problem planning incomplete information pryor collins bertoli bonet geffner anderson weld smith 
approaches worked propositional level sets possi ble worlds represent planner incomplete knowledge 
sets contain possible worlds compatible planner knowledge 
action applied check performed preconditions hold possible worlds preconditions known action applied world set yield new set possible worlds 
actions modeled terms change world planner new incomplete knowledge state computed considering action behave different possible worlds characterizing current knowledge state 
course number possible worlds needed represent knowledge state grows exponentially number propositions 
new object planning domain generates new propositions sets large quickly 
bertoli probably efficient current planners incomplete knowledge problem addressed bdds bryant represent manipulate sets compactly 
bdds limited propositional representations compact 
example softbots weld etzioni agents generate execute plans software environments unix operating system world wide web 
domains set objects unknown files available web large propositional representations suitable 
result taken completely different approach problem 
particular finite sets formulas order modal logic knowledge represent incomplete knowledge model actions updates sets formulas actions update agent knowledge state world state 
set formulas general compact representation set possible worlds bdd 
problem course computationally intractable reason set logical formulas 
forced restrict representation kinds reasoning perform 
particular reason level individual possible worlds representation planning problems require kind low level world world analysis modeled approach handled bdds 
feel additional features gain deficiency representing agent knowledge section describe formalism representing incomplete knowledge 
representation extending strips idea utilizing database easily updated actions 
single database utilize collection databases representing different kind knowledge 
actions modeled specifying updates databases 
bdd represented similarly sized propositional formula vice versa 
furthermore order formulas possible worlds relational structure 
want provide formal specification knowledge state particular configuration collection databases represents 
accomplish providing fixed translation database contents set formulas order modal logic knowledge 
formal specification want automatically provided formal semantics logic 
sequel db represent agent databases kb represent set logical formulas formalize contents db 
briefly standard modal logic knowledge adds modal operator ordinary order language extending language syntax adding rule formula 
semantically language interpreted collection possible worlds ordinary order model 
non modal formula true particular world iff true standard rules interpreting order formulas 
formula form true iff true world semantically agent knowledge captured set agent know world real world considers worlds possible versions way real world configured 
know true worlds true worlds false 
assume agent knowledge incomplete correct 
assumption captured requiring real world member knowing true world imply true real world real world member 
example readable tex means agent knows file tex readable tex fact readable true real world 
formula writeable tex means tex writable necessarily known agent 
mentioned previous works tended directly set possible worlds set formulas characterize 
rigidity agent knowledge include atomic facts various terms knowledge term tex allow functions representation 
example agent know various function values size tex tex bytes length 
terms composed functions constants tex size tex problematic dealing knowledge 
particular terms may rigid non rigid 
non rigid terms terms denotation meaning varies world world rigid terms fixed denotation meaning worlds 
avoid certain complications arise see fagin logics 
accessibility relation world accessible world 
interpret non modal formulas real world 
types terms mixed impose restriction constants rigid 
term tex denote object world 
hand allow functions generate non rigid terms 
term size tex denote different value different worlds 
assume numeric functions numeric predicates standard interpretation world rigid 
formally rigidity assumption means constant agent knowledge set kb includes formula 
formula asserts particular object real world possible world constant denotes object 
assume simplicity worlds identical domains discourse assume know domain 
databases represent agent knowledge collection databases contents having fixed translation collection formulas modal logic knowledge 
databases 
kf database standard strips database positive negative facts allowed apply closed world assumption 
particular kf include ground literal 
kf restricted terms appear literal constants 
example atomic formula readable parent function parent specifies parent directory file appear kf addition literals kf contain specifications function values 
particular allow formulas form 
cn cn 
cn cn ary function ci constants 
equality formula specifies value particular set arguments constant cn 
effect restriction means function values kf considered known agent grounded constant values 
formula kf kb includes formula 
example formula readable tex kf kb includes formula readable tex agent knows tex readable 
kw second database contains collection formulas instance agent knows knows negation 
particular kw contain formula conjunction atomic formulas 
adding simple ground atomic facts kw model effects sensing actions 
example agent plan time hypothesizes applying action senses fact readable tex agent know plan time executing action know fact true 
execution time resolution disjunctions holds 

see discussion adding formulas containing variables kw model plan time effects actions generate universal effects run time generate local closed world information etzioni golden weld 
example unix command ls yields universal knowledge contents directory applying ls know file file directory actual names files known run time 
formula kw conjunction atomic formulas variables appear free kb includes formula 
instance bomb kw kb includes formula bomb bomb agent state possible world bomb possible world bomb 
run time agent executes sensing action added fact kw agent definite knowledge bomb 
value kw knowledge plan time agent legitimately construct conditional branch plan point branching value bomb assured sufficient knowledge run time decide branches needs executed 
utilizing contents kw manner agent ensure building correct plan know facts legitimately able branch run time 
predicates numeric predicates equality denotation world 
rigid predicates considered implicitly kw 
example formula constant implicitly kw rigid agent knows formula true worlds false worlds 
kv third database specialized version kw designed store information various function values agent come know execution time 
particular kv contain unnested function term 
example legal entry kv 
kw entries kv model sensing actions case sensors returning constants numbers truth values 
value returned sensor known execution time plan time agent know value known 
formula kv set variables appearing term kb includes formula 
formulas type standard way specifying agent knows function value see scherl levesque 
example size tex kv kb includes formula size tex agent knows tex size possible world 
kx fourth database new 
contains information particular type disjunctive knowledge exclusive knowledge literals 
entries kx see bacchus distinction plan time run time knowledge 
form 
ground literal ground functional equalities permitted 
intuitively formula represents knowledge fact exactly true formula kx kb includes formula 


example infected infected kx formula infected infected infected infected kb 
agent knows infected infected true 
form incomplete knowledge common planning scenarios 
knowledge states set databases particular db translation specified set formulas defines agent knowledge state corresponding kb 
contents databases fixed formal interpretation order logic knowledge 
database contents interpreted knowledge level restrictions placed database contents result restrictions types knowledge modeled 
possible world level means certain configurations possible worlds modeled 
say worlds holds holds holds 
representation allow model knowledge general disjunctions represent knowledge state characterized set possible worlds 
course means generate plans initial state 
querying knowledge state planning requires ability query current knowledge state 
example determine set actions applicable initial state planner able determine action preconditions holds initial state 
computing action conditional effects requires querying knowledge state 
mentioned retain tractability restrict kinds reasoning perform kb knowledge state 
developed simple language representing set useful primitive queries knowledge state 
ground atomic formula variable free term 
primitive queries allow 

known true 

known false 
agent knowledge state characterized set models satisfy formulas kb style levesque characterization know levesque 
see bacchus discussion 

kw agent state true worlds false worlds 

kv known fixed value world 

negation queries 
evaluate queries inference algorithm ia developed 
truth primitive query determined checking status databases 
bacchus ia specified shown sound 
inference correct entailed knowledge state kb 
ia incomplete 
entailed kb established ia formal characterization ia complete planning domains experimented ia incompleteness proved impediment finding plans 
planning problems planning problem tuple initial state set goal conditions nonempty set action specifications set domain specific knowledge update rules 
initial state specified describing initial contents database 
initial configuration databases defines agent initial knowledge state 
goal conditions specified conjunctive set primitive queries 
goal satisfied plan primitive query goal set satisfied knowledge state arise executing 
conditional branches execution give rise different knowledge states 
discussed 
representing actions mentioned actions represented updates collection databases 
actions specify change agent knowledge state change state world 
specifically actions components parameters preconditions effects 
parameters parameters set variables bound produce particular instance action 
action parameters may action preconditions effects 
preconditions preconditions conjunctive set primitive queries kb 
precondition satisfied primitive query set evaluate true 
effects action effects specified list conditional effect statements form condition conjunctive set primitive queries 
effect specified set additions deletions databases 
example effects add kf size project tex specifies adding function value size project tex kf database 
general updates applied databases 
approach action effects divided plan time effects execution time effects 
focus plan time effects 
see bacchus discussion distinction types effects 
action precondition effects drop holding del kf holding broken add kf add kf dropped del kf broken fragile add kf broken inspect kw broken add kw broken table drop inspect actions modeling action effects updates databases means easy compute new knowledge state arises application action 
contrast situation incomplete knowledge represented set possible worlds 
situation needs compute effect action worlds set difficult done symbolically bdd 
example consider definition actions drop inspect table 
agent consider applying drop action know holding broken 
drop effects real world causes floor dropped breaks fragile 
knowledge level things somewhat different 
dropped caused agent know true performing action 
agent know fragile come know broken worlds fragile broken fragile broken 
lose knowledge broken del kf broken gain knowledge broken knows fragile 
notice drop agent fact come know fragile broken fragile broken fragile representing knowledge set possible worlds capture information 
representation capture information fit syntactic restrictions 
example representation abstracting away fine distinctions computationally expensive track distinctions planning domains necessary keep track knowledge form 
consider initial state defined kf broken vase holding vase broken box holding box fragile vase 
precondition drop vase satisfied initial knowledge state applying yields new knowledge state defined kf vase holding box fragile vase broken vase dropped vase 
particular condition fragile vase known broken vase known action performed 
precondition drop box satisfied initial knowledge state 
effect precondition fragile box satisfied conditional effect applied 
new knowledge state case kf holding vase box fragile vase dropped box 
apply action inspect box obtain database kw broken box kf unchanged 
inspect agent sensed value broken box 
domain specific update rules planning problem may include set domain specific update rules 
rules form conditional effects conjunctive set primitive queries set database updates 
updates correspond state invariants knowledge level may triggered knowledge state preconditions specific update satisfied 
strictly speaking domain specific update rules necessary 
elaborate action effects capture invariants 
approach common classical planning 
example blocks world stack action requires block stacked clear deletes clear maintaining state invariant block block top 
dealing knowledge level invariants way tends cumbersome 
added notion domain specific update rules ease task writing knowledge level domain specifications 
example example add update rules broken dropped add kf fragile 
broken dropped add kf fragile 
drop operates objects known unbroken know object dropped broken broken drop fragile 
similarly object dropped remains unbroken fragile 
update rules allow knowledge level fragile drawn obtain knowledge broken 
consistency rules standard strips formalism involves single database 
case distinct databases ensure contents remain mutually consistent 
domain update rules facilitate specification actions providing collection standard domain independent consistency rules 
rules allow actions specify update database necessary updates databases performed automatically 
consistency rules maintain conditions 
formula kf 
function 
cn kf map distinct constant 

literal added deleted kf result non sensing action remove formulas kx mention 

literal added kf result making conditional branch plan exists formula kx 
delete kx add kf 
delete kx add formula 

kx 
rules simple consistency conditions kf specification planning problem initial state include kf database meets consistency requirements rules 
rules maintain consistency kf kx 
general sensing actions ordinary non sensing actions different sensing actions observe state world ordinary actions changes state world 
terms representation sensing actions add formulas kv kw ordinary actions add formulas kf kf may updated adding assumptions arising adding conditional branches plan see knowledge planning 
distinction important ensuring correct interaction kf kx additions kf resulting making assumptions may allow kx formulas resolved adding additional facts kf agent knowledge refined result making assumption outcome observation additions kf resulting ordinary actions may cause kx knowledge lost action may change world kx formula longer valid 
example formula infected infected kx adding infected kf assumption conditional branch delete kx add infected kf add conditional branch sensing action added infected kw 
branch assume infected conclude infected kx knowledge tells holds 
hand infected added kf action caused infection simply remove kx longer necessarily true infected infected holds 
knowledge planning section describe operation pks planner able construct conditional plans presence incomplete knowledge 
planning algorithm table 
planning algorithm db takes input database collection db initial plan set goals returns plan achieves goals failure 
plan nested list action sequences nesting indicates conditional branches plan 
problem specification planning algorithm initially invoked initial database collection indicates empty plan goal set 
algorithm attempts grow plan nondeterministically choosing add new action new conditional branch 
action addition adding action nondeterministic choice set actions pks stands planning knowledge sensing 
db db return choose pick db db db return db pick ground instance entry kw branch db db db db db return table pks planning algorithm preconditions hold db preconditions tested inference algorithm ia 
action chosen effects applied update db domain specific updates applied consistency rules enforced yields new database db planning continues db conditional branching adding conditional branch involves making non deterministic choice ground instance set formulas kw 
implementation restrict branches atomic formulas kw 
ground atomic formula kw planner know true point plan plan executed 
sufficient knowledge choose branch direction take execution time 
plan time planner know branch taken build plan solve contingencies 
chosen new databases db db created modifying db 
particular db db removed kw db added kf known true db db added kf db known false db 
additions kf may trigger various update rules augment db db 
invoked recursively achieve goal set new initial databases db db 
new plans added current plan conditional branch point 
goal testing step simply evaluates set goals current db 
goal true current plan returned 
means conditional branch satisfy goals branch 
search search implement non determinism 
implemented breadth search depth search version implemented search heuristics forms search control 
employing blind search forms cycle checking find plans 
expected breadth search scale 
blind depth search surprisingly indicates significant advantage approach modeling planning problems knowledge level 
plan correctness planning knowledge action precondition effects dunk add kf disarmed table bt action specification action precondition effects dunk clogged add kf disarmed add kf clogged flush add kf clogged table btc action specification action precondition effects dunk package add kf disarmed toilet add kf clogged clogged flush add kf clogged table action specification ditions plan correctness relies criteria 
levesque levesque points necessary plan time planner know plan achieve desired goals run time planner sufficient knowledge step plan execute 
step planning algorithm ensures pks meets criterion plans constructed goals satisfied knowledge states conditional branch plan 
second criterion places important condition plan generation plan built doesn depend information unknown planner required time 
requirement essential constructing correct conditional plans deciding branch execute depend knowledge obtained earlier plan 
planner meets second criterion 
conditional branches built formulas kw formulas result sensing actions 
semantics kw ensure planner definite knowledge obtained results sensing action 
run time planner sufficient knowledge determine branch conditional plan executed see bacchus detailed discussion 
empirical results problems simple knowledge level set experiments involve problem domains show value modeling problems knowledge level 
domains trivial knowledge level 
consists versions bomb toilet domain second domain 
bomb toilet standard bt version table toilet packages bomb 
knowledge level irrelevant packages bomb generate plan allows know package disarmed dunk action action provides knowledge 
achieve goal package 
note abstracts distinctions maintained approaches sets possible worlds represent incomplete knowledge 
approaches keep track individual possibilities package bomb 
implicitly reason sequence actions employ ensure actions cover possibilities 
version btc version table toilet clogged dunk know toilet dunk additional flush action toilet providing knowledge fact 
version forces solution sequential results provide better comparison approach planners planner currently capable generating parallel plans 
version multiple version high uncertainty initially know clogged 
knowledge level domain simpler btc version 
change dunk action specify toilet dunk extra parameter 
knowledge level matters gain knowledge package disarmed way know package disarmed dunk 
perform dunk agent know toilet clogged way achieve knowledge flush toilet 
knowledge level irrelevant particular collection initially clogged know toilet flush 
version sets possible worlds approach faces explosion number initial states 
particular approaches represent possible sets clogged 
forced maintain distinction possible ways initially clogged fact irrelevant matters agent know clogged 
performance planner problems shown tables 
times reported cpu seconds ran planner mhz sun gb memory 
plans produced ones expected dunk packages flushing toilet stage ensure 
performance planner problems reported bertoli system considerably better reported cmbp cimatti roveri gpt bonet geffner systems 
results system small problems packages bt domain btc domains packages domain proper comparison impossible 
results demonstrate problems easy knowledge level 
breadth search applied domains slower investigate permutations package 
worth noting approach solve prob bdds represent set compactly point remains set possible worlds approach forced distinctions necessary solving problem 
machine general compute server planner fact modest memory requirements 
bt btc bt btc table results bt btc packages depth search dfs time time time table results packages depth search time time time table results infections lem seconds 
problem possible worlds initial state 
domain trivial knowledge level 
domain patient possible infections infections 
plan involves performing action diagnose infection patient conditionally applying appropriate action cure infection 
applying wrong medication kill patient 
knowledge level need achieve knowledge patient cured plan simply moves sequence knowledge states possible infections eliminated 
need track different possibilities reflecting actual 
performance planner domain shown table 
knowledge level argued results domains incomparable reported bertoli model problem different 
extent true 
point making able solve problem model domain 
particular intuitive description domain generating plans generated 
results provide evidence utility modeling problems knowledge level 
action precondition effects dial add kw open del kf open add kf combo add kf open domain specific update rules open add kf combo open add kf combo table action specification opening safe far interesting domain planner open safe problem 
consider versions problem 
version consider safe fixed number possible combinations 
initial state know safe closed combinations combination safe represented kx knowledge initial state 
actual combination safe represented ary function combo 
actual combination unknown semantically function different values different possible worlds 
goal know safe open 
action domain dials combination table 
dial longer know certainty safe closed del kf open know safe open add kw open 
action executed agent detect safe open plan time acquires kw knowledge 
come know combination just tried know certainty combination combo come know safe open 
domain specific update rules allow conclude combination just safe combination opened safe combination just safe combination failed open safe 
blind depth search planner able solve fairly large instances problem combinations sec 
expected undirected depth search solutions generated lengthy contain irrelevant instances dial operator 
eventually plan succeed opening safe 
investigating alternate methods controlling search pks 
particularly simple effective approach search control extra preconditions block attempting action contexts useful perform bacchus 
goal open safe obvious ways precondition control 
know safe open clearly better branch possibility trying dial combination side branch achieved goal achieved knowledge 
control achieved adding precondition kw open dial 
second know combination safe point dialing control achieved adding orig 
pre 
orig 
pre 
table results combinations precondition combo 
preconditions performance planner significantly improved 
performance original domain orig 
control preconditions added pre shown table 
example illustrates classical planning bacchus search control applied great effect incomplete knowledge situation 
speeding planner search control greatly improves quality plans generated 
plans constructed consist sequence dial actions possible combination 
dial planner kw knowledge open planner insert conditional branch dial 
side branch safe open 
furthermore domain specific update rule allows conclude fact combination safe just opened safe domain independent consistency rules kx knowledge conclude combinations safe combination 
side branch achieves goal knowing safe open knowledge combination side branch safe open know second domain specific update rule combination safe 
consistency rules allow conclude untried combinations combination 
branch extended dialing combination 
plan generated try combinations sequence stopping opens safe 
run time variables second open safe problem easier solve illustrates interesting feature approach 
version actions available shown table 
extra action action executed know safe combination written piece 
initial state know know safe combination 
particular finite set different possibilities combination 
goal know safe open 
sensing action senses value function combo execution time 
plan time adds combo kv plan time come know term value known 
kv term combo preconditions dial combo hold kv combo know combo combo combo combo 
effects action know safe open precondition action precondition effects dial kv add kw open combo combo add kf open add kv combo table action specification conditional effect true combo combo terms syntactically identical come know safe open 
initial state know planner constructs plan dial combo read combination dial open safe 
plan constructed time resolution measurements 
noted single action dial combo plan prior know value combo 
important feature plan value combo parameter instantiates dial know run time 
term combo acts run time variable etzioni golden weld value determined run time 
plan time know value take run time allow plan achieve goal 
matter value combo takes run time value open safe 
ability generate plan parameters filled run time essential dealing environments objects know plan time 
case contrast previous example know range different combinations 
plan run time variable 
unix domain final example taken unix domain 
actions domain table 
directory hierarchy defined relation directory current working directory specified ary function pwd actions moving hierarchy gathering information 
action change directory cd move sub directory pwd 
requires know sub directory current directory effect change current directory 
second action cd moves parent current directory 
requires know directory moved contains current working directory 
third action ls action sense presence file current working directory 
note change directory actions operate modifying value function pwd 
initially planner knowledge value current directory pwd root knowledge directory structure papers root mail root kr papers aips papers inconsistent kw safe open know kf 
kw information redundant kf information 
action precondition effects cd directory add kf pwd pwd cd directory add kf pwd pwd ls file add kw pwd table unix domain action specifications planning aips 
goal move current working directory directory containing file tex goal specified condition tex pwd 
achieve knowledge state known tex directory pwd 
initially planner incomplete knowledge location tex particular tex planning tex kr kx file tex directory planning kr 
solution conditional plan cd papers cd kr ls tex kr cd papers branch tex kr tex kr cd kr cd aips cd planning 
bfs version planner finds plan seconds 
plan plans including branches right ls moves back papers branching 
note kw knowledge obtained ls destroyed cd papers action valid plan branch action 
planner able solve elaborate problems actions 
move file action defined domain way goal achieved moving file tex directory 
action move file 
new approach planning incomplete knowledge sensing 
approach works directly knowledge level modeling agent knowledge evolves actions added plan 
advantage approach able irrelevant distinctions occur level possible worlds level compact knowledge assertions 
result able model additional features functions run time variables appear essential interesting domains 
hand approach limited inferential power plans discovered reasoning level possible worlds approach 
consider trade power low level case analysis power richer representations worth making domains interested unix domain 
issues study including improving searching capacity planner increasing power representation handle additional types planning problems 
issue raises question just easy specify domains knowledge level 
currently studying methods automatically converting set actions described effects world set knowledge level actions described effects agent knowledge 
progress problem solving remove particular concern levesque 
anderson weld smith 
extending graphplan handle uncertainty sensing actions 
proceedings aaai national conference 
bacchus 
precondition control 
available www cs toronto edu line html 
bacchus 
modeling agent incomplete knowledge planning execution 
proceedings international conference principles knowledge representation reasoning 
bertoli cimatti roveri traverso 
planning nondeterministic domains partial observability symbolic model checking 
proceedings international joint conference artificial intelligence ijcai 
bonet geffner 
planning incomplete information heuristic search belief space 
proceedings international conference artificial intelligence planning 
bryant 
symbolic boolean manipulation ordered binary decision diagrams 
acm computing surveys 
cimatti roveri 
conformant planning symbolic model checking 
journal artificial intelligence research 
etzioni golden weld 
sound efficient closed world reasoning planning 
artificial intelligence 
fagin halpern moses vardi 
reasoning knowledge 
mit press cambridge massachusetts 

quantification modal logic 
gabbay guenthner eds handbook philosophical logic vol 
ii 
dordrecht netherlands reidel 

levesque 
know study autoepistemic logic 
artificial intelligence 
levesque 
planning presence sensing 
proceedings aaai national conference 
aaai press mit press 
levesque 
knowledge equivalence combined action theories 
proceedings international conference principles knowledge representation reasoning 
pryor collins 
planning contingencies decision approach 
journal artificial intelligence research 
scherl levesque 
frame problem knowledge producing actions 
proceedings aaai national conference 
aaai press mit press 
weld etzioni 
softbot interface internet 
communications acm july 
