proposal formal ocl semantics isabelle hol achim brucker burkhart wolff institut informatik albert universit freiburg georges hler freiburg germany brucker wolff informatik uni freiburg de www informatik uni freiburg de brucker wolff formal semantics conservative shallow embedding object constraint language ocl 
ocl currently development open standardization process omg attempt accompany process proposal solving open questions consistent way exploring alternatives language design 
encoding gives foundation tool supported reasoning ocl specifications example basis test case generation 
keywords isabelle ocl uml shallow embedding testing unified modeling language uml widely accepted software industry successfully applied diverse domains 
uml supported major case tools integrated software development process model stood test time 
object constraint language ocl textual extension uml 
ocl tradition formal specification languages vdm 
short ocl valued kleene logic equality allows specifying constraints graphs object instances structure described uml class diagrams 
order achieve maximum acceptance industry ocl currently developed open standardization process omg 
ocl part uml standard version official ocl standard concentrates concrete syntax covers parts wellformedness ocl handles nearly formal semantics 
far description ocl merely informal requirement analysis document examples contradictory 
consequently need software engineers case tool developers clarify concepts ocl formally put perspective standard semantic terminology 
order meet need started provide conservative embedding ocl isabelle hol 
far partially funded omg member interactive objects software gmbh www io software com 
mu oz eds tphols lncs pp 

springer verlag berlin heidelberg proposal formal ocl semantics isabelle hol possible tried follow design decisions ocl order provide insight possible design choices current standardization process version 
attempting practical formalism ocl addresses software developers strong mathematical background 
ocl deliberately avoids mathematical notation uses quite verbose programming language oriented syntax attempts hide concepts logical quantifiers 
extends design rationale semantics ocl viewed object oriented assertion language similarities object oriented programming language conventional specification language 
example standard library operators concat sequences defined strict operations yield explicit value undefined result argument undefined bounded quantifiers admitted tendency define infinite sets away occur 
result ocl particularly executable flavor comes handy generating code assertions animating specifications 
object oriented languages represent particular challenge art embedding languages theorem provers 
holds shallow embedding chose aim reasoning ocl specifications meta theoretic properties ocl representation 
shallow embedding types ocl language constructs represented types hol concepts undefinedness mutual recursion object instances dynamic types extensible class hierarchies handled 
new formal model ocl form conservative embedding isabelle hol cope challenges discussed 
modular organization investigate interdependence certain language features method recursion executability strictness smashing flattening order provide insight possible design choices current design process 
extend known techniques shallow representation object orientation automated proof techniques lift lemmas hol library ocl level 
result provide calculus formally reason ocl specifications provide foundation automated reasoning ocl 
proceeds follows running example uml ocl guide layers ocl semantics object model resulting semantic universes states state relations ocl logic ocl library 
follows description automated deduction techniques derived rules modified tableaux deduction techniques congruence rewriting 
apply techniques paradigmatic example test case generation black box test setting 
guided tour uml ocl uml provides variety diagram types describing dynamic state charts activity diagrams static class diagrams object diagrams achim brucker burkhart wolff system properties 
prominent diagram types uml customer direction account identification string address string string owner direction accounts balance monetary monetary amount monetary boolean string address string amount monetary boolean context account amount monetary boolean pre amount post balance balance pre amount credit monetary monetary amount monetary boolean amount monetary boolean amount monetary boolean inv balance credit 
modeling simple banking scenario uml class diagram modeling underlying data model system object oriented manner 
class diagram running example fig 
illustrates simple banking scenario describing relations classes customer account specialization 
precise relation data classes account called subtyping 
class describe set record data consisting attributes balance functions methods defined classes data model 
characteristic object oriented paradigm functional behavior class methods accessible subtypes called inheritance 
class allowed redefine inherited method long method interface change called overwriting done example method 
possible model relations classes association possibly constrained multiplicities 
fig 
association requires instance account associated exactly instance customer 
associations represented introducing implicit set valued attributes objects multiplicity mapped suitable data invariants 
assume associations parsed away 
understanding ocl data oriented specification formalism natural refine class diagrams ocl specifying invariants pre postconditions methods 
example see fig 
specification method pair pre postcondition 
uml class members contain attributes type defining class 
uml represent mutually recursive data types 
ocl introduces recursively specified methods dynamic semantics method call missing see short discussion resulting problems 
representing ocl isabelle hol ocl formulae built expressions access underlying state 
postconditions path expressions access current previous state proposal formal ocl semantics isabelle hol balance balance pre amount 
accesses states may arbitrarily mixed self pre denotes object constructed dereferencing previous state selecting attribute dereferencing step done current state 
method specifications represent state transition relations built conjunction pre post condition state consists graph object instances type defined underlying class diagram 
fundamental cl operator allinstances allows selection instances objects certain class means reconstruct dynamic types object graph 
shallow embedding key question arises represent static type structure objects uniformly state argument dynamic type test constructions universe class diagram interpretations large represented simple type system underlying higher order logic 
solution observation need represent class diagram interpretations inside logic suffices provide extralogical mechanism represents concrete class hierarchy allows extensions class hierarchy 
practical reasons require extension mechanism logically conservative sense definitional axioms existing proofs data class hierarchy remain valid extended 
considerations hol ocl organized layers semantic coding scheme object model layer class hierarchy system state relations forming denotational domain semantics methods ocl logic specifying state relations class invariants ocl library describing predefined basic types 
encoding extensible object models main goals encoding scheme provide typed constructors accessor functions set classes enumeration types inserted previous class hierarchy 
coding scheme represented steps section describe raw constructors accessors sec 
refined scheme accessors 
basic configuration class hierarchy ocl standard library basic configuration described sec 

handling undefinedness 
ocl standard notion explicit undefinedness part language logic basic values 
object constraint language specification version page ocl expression evaluated possibility queries expression undefined 
case complete expression undefined 
achim brucker burkhart wolff requirement postulates strictness operations logical operators explicit exceptions rules modeling undefinedness underspecification 
language similar flavor lcf spectrum represents particular challenge automated reasoning 
order handle undefinedness introduce type lifted type introduce special type constructor 
adds type additional value 
function denotes injection function inverse 
case distinction function case returns 
write case note definition lifted types leads usual construction flat cpo known theory complete partial orders cpo denotational semantics 
sake simplification avoid full blown maintaining semantics cpo ready define tiny fragment provides concepts definedness def strictness function strict 
managing holes universes 
objects viewed records consisting attributes object alternatives viewed variants natural construct type objects semantic universe ux corresponding certain class hierarchy cartesian products type sums constructors inl inr isabelle hol library 
order enable extensibility provide systematically polymorphic variables holes universe filled extending class hierarchy 
integer integer string integer integer string ref set ref set 
extending class hierarchies universes holes scheme class extended ways alternative class added level corresponds creation proposal formal ocl semantics isabelle hol alternative subtype supertype instance class added corresponds creation subtype instance 
insertion class corresponds filling hole record implemented particular type instance consequence universe fig 
just type instance particular extension extended properties proven holds initial universe corresponding minimal class hierarchy ocl library consists real numbers strings bool 
defined follows real real boolean bool string string real boolean string note extensions lifted additional elements added 
uniform way denote closed objects objects potential extension 
consequently possible determine dynamic type testing closing example type exactly object represented inr inr inr universe 
note types attributes occurring records may contain basic types sets sequences bags types induced class declarations 
replaced type ref defined recursion represented level universe construction just provides raw data 
outlining coding scheme 
provide raw constructors raw accessors tests dynamic types data universe 
idea provide class attributes 
tn type constructor mk ux embeds record type actual version universe example mk boolean type boolean defined mk boolean inr inl 
accordingly test ux bool checks object universe embedded accessor get ux represents corresponding projection 
constant ux set provided contains set sense set objects class data invariants represented making constructor partial constructor defined input tuples fulfill correspondingly test dynamic type encode examples hand 
task implementing compiler converts representations uml diagrams example formats produced argouml desirable focus research 
system state basic definitions 
task defining state state transitions straight forward define type ref locations achim brucker burkhart wolff state partial mapping objects universe types ref state ref option st state state state define form universal quantification ocl operator allinstances extracts objects type represented characteristic set current state 
standard specifies allinstances undefined integer real string 
infinite sets avoided ad hoc manner 
prevents having infinite states enforce finiteness additional postulates 
allinstances set st set allinstances type type integer type real type string type boolean boolean type range defining ocl operators st boolean routine checks object defined current previous state redefines test sec 

hol type ocl expressions 
functions state transition pairs lifted ocl values denotational domain ocl semantics 
transition pair values extracted path expressions passed arguments basic operations user defined methods 
precisely expressions ocl type represented hol ocl expression type defined types st represent type state transition 
example logical hol ocl expressions type boolean recall boolean lifted type bool hol 
consequence operations methods embedded hol ocl pass context state transition pair argument expressions collect values type compute result value 
example function ocl type representation type 
defining proceed 
en 
enc context transition call structure definitions state passing 
functions argument form characterized semantically pass state passing turn important invariant shallow semantics essential ocl calculus 
conversion function state passing style called lifting confused lifting types sec 

proposal formal ocl semantics isabelle hol coding scheme state accessors 
define accessor functions real ocl signature build path expressions basis raw accessors 
problems solved class names occurring types attributes handled ref set raw accessors types mapped set second raw accessors lifted state passing style 
simple example accessor type class hol type ux vx normally achieved wrapping raw accessor additional abstraction class class invariant test invariant added violations considered undefinedness treated undefined state 
accessor yields ocl type classes set accessed inserted surrounding collection may involve smashing see discussion collection types sec 

extended code scheme define conservatively new accessors extended universe extend class hierarchy allows modeling mutual data recursion introduced extension maintaining static typechecking 
encoding example order encode uml model fig 
declare type class account skip customer 
account tuple describing balance type monetary encoded association owner type ref set 
universe holes extending extending level define types account type monetary ref set account account type account type need raw constructor account object 
note function lives contains classes fig 

universe mk account account type mk account mk lift inl step need define accessors attribute 
example definition accessing association owner type customer current state owner customer obj owner case lift op option case get customer snd get account obj note accessor functions lifted operate previous current state pair 
achim brucker burkhart wolff ocl logic turn key chapter ocl semantics logics 
ocl standard follows spectrum logic operators defined kleene logic requiring logical operator reduces defined logical value possible 
logic turn completely independent underlying state transition pair universe valid universes 
ocl formula function true false undefined depending underlying state transition 
logical expressions just special cases ocl expressions produce boolean values 
consequently general type logical formulae types bool boolean logical constants true resp 
false defined constant functions yield lifted value meta logical undefinedness truth falsehood hol values hol type bool 
predicate def decides ocl expression value evaluated context defined def bool def def bool true bool false bool true true false false definition strict implies straight forward bool bool def bool bool bool def def false false false false definitions rules truth table derived true false false true false false false false true false false false true false false true true true true false false true basic equalities difficult derive isabelle laws surprisingly rich algebraic structure kleene logics enjoy usual associativity commutativity idempotency laws distributivity de morgan laws 
essentially richness algebraic simplicity exploit example sec 

ocl needs equalities logical called strong equality version called weak equality executable 
type bool defined similarly standard hol equality 
proposal formal ocl semantics isabelle hol library ocl basic data types library provides operations integer real supported strings 
parametric data types set sequence bag functions provided types grouped class collection standard 
standard prescribes ad hoc polymorphism operations library late binding 
standard suggests uniform semantic structure functions library decided uniformity explicit exploit proof support deriving rules 
library operations lifted far collection functions concerned see versions functions hol library 
late binding needed due standards preference ad hoc polymorphism 
consider general recursion fixed point semantics shallow representation essential feature object oriented specification language view 
interested reader referred extended version 
generic functions lift defined follows case lift st st st definition lift converts function type function type 
standard class integer 
combinators lift definitions bulk operators follow pattern exemplified types integer integer defs op lift int collection class set 
collections requirement having strict functions consequently extended constructors sets 
desirable data types denotations generated constructors leads concept smashing collections 
example sets identified provided elements analogously versions bags seq airs defined 
sets directly represent execution behavior usual programming languages java 
omit details construction sets space reasons apart smashing arguments definitions set operations includes excludes union intersection follow usual pattern 
ocl standard prescribes particular concept called flattening 
means example set identified 
consider flattening syntactic issue require front parses away situations generates conversions 
achim brucker burkhart wolff automated theorem proving hol ocl derived rules provide calculi proof techniques ocl oriented isabelle powerful proof procedures fast tac simp tac 
geared natural deduction calculi rewriting built reasoning equational theories 
natural deduction calculus ocl foundation introduce notions validity formula may valid transitions just valid written valid transition written 
define notions true true respectively 
recall formula may valid invalid state undefined st def st st rule replaces kleene logic usual classical rule 
note may arbitrary judgment 
core calculus consists conventional rules counterparts valid transition validity valid transition suitable elimination rules 
unfortunately rules handling implication parts elegantly implies implies st st def st st implies st st problem implication rule right combines validity levels natural deduction calculus 
undefinedness leads side calculus ocl conclude definedness contexts conclude subexpression defined due strictness operations expression language ocl lot definedness information usually hidden ocl formula method precondition invariant 
order efficiently reason ocl specification may necessary precompute information 
developed simple setup fast tac rules described quite powerful complete 
rewriting proposal formal ocl semantics isabelle hol rewriting ocl formulae number advantages mainly allows remaining level absolute validity easier interpret allows hide definedness concerns inside equational calculus 
implication shifted bit inside equational calculus rules implies implies implies implies implies implies hold cases lattice rules logic motivates hilbert style calculus ocl unfortunately assumption rule implies holds defined contexts 
gives rise proof procedures defer definedness reasoning local places formula 
useful mechanism transport definedness information ocl formula isabelle simplifier cope particular type rules 
derived congruence rewriting rules hol ocl look st st def st st st st st st st st st st allow replacing example variables occurrences true undefinedness validity follows context 
discovered interesting technique proving equality formulae idea perform case split substituting true false 
unfortunately turns rule true true false false simply unsound due fact hold functions state passing represents invariant embedding see sec 

fortunately logical operators state passing rules pass pass pass pass pass hold 
function constructed lifting library function definitions state passing 
allows proof procedures built systematic case distinctions turn efficient useful 
situation similar reasoning strong weak equality 
strong equality nearly usual rules equational theory reflexivity symmetry transitivity 
leibniz rule substitutivity need context state passing pass similar strict equality additional definedness constraints 
achim brucker burkhart wolff lifting theorems hol hol ocl level operations library defined extremely canonically combination optional smashing lifting operators possible derive automatically generic theorems strictness rules definedness propagation lift lift lift def lift lift def lift lift rule lift commutativity property hol level hol ocl level 
lifting theorems standard properties proven automatically library 
application test case generation prominent example automatic test case generation triangle problem integers representing lengths sides triangle small algorithm check integers describe invalid input equilateral isosceles scalene triangle 
assuming class triangle operations test input describes triangle triangle classify valid triangle leads ocl specification context triangle integer boolean pre post result context triangle triangle integer pre post result equilateral isosceles endif isosceles isosceles scalene endif endif endif invalid endif transforming specification hol ocl leads specification triangle spec operation triangle triangle spec result result equilateral isosceles endif isosceles isosceles scalene endif endif endif invalid endif omit specification 
proposal formal ocl semantics isabelle hol actual test case generation define triangle selects hilbert epsilon operator eligible implementation fulfilling specification triangle integer integer integer triangle triangle result triangle spec result follow approach disjunctive normal form dnf partition analysis specification basis test case generation 
setting leads main steps 
eliminate logical operators 

convert formula dnf 

eliminate unsatisfiable concurrence rewriting 

select actual set test cases 
intermediate results formulae 
logical simplification eliminate simple logical representation tremendously simplified congruence rewriting 
deeper knowledge data types advantage isosceles invalid step eliminates unsatisfiable caused conflicting constraints 
congruence rewriting cases left respectively invalid inputs equilateral triangles cases describing possibilities isosceles triangles 
triangle result result invalid result equilateral result isosceles result isosceles result isosceles result scalene represent partitions test cases selected possible exploiting boundary cases minimal maximum integers underlying implementation 
achievements new formal semantic model ocl form conservative embedding isabelle hol cope requirements examples ocl standard 
basis embedding derived calculi proof techniques ocl 
deriving means proved rules isabelle guarantee consistency semantics soundness calculi 
semantics organized achim brucker burkhart wolff modular way study interdependence certain language features method recursion executability strictness smashing flattening useful current standardization process ocl 
shown potential semantic tools ocl automated reasoning exemplary test case generation 
related previous semantic definitions ocl mathematical notation style naive set theory view quite inadequate cover subtle subjects inheritance :10.1.1.51.5401
development proof calculi automated deduction ocl focus interest far 
formal operational semantics formal type system ocl 
authors focus issue subject reduction define semantic function expressions evaluation may diverges 
claimed similar ocl semantics turing complete 
contrast version ocl admits infinite state turns allinstances unbounded universal quantifier adding fixpoint semantics recursive methods opt definitively world languages 
shallow embedding object oriented language challenge 
basic concepts approach representing subtyping subsumption relation polymorphic types new example included concepts undefinedness mutual recursion object instances dynamic types recursive method invocation extensible class hierarchies pushes limits approach bit 
usual existing library developed type deficiency usually resolved larger verification project embedding see extensions fast tac proof procedure ocl logic quite powerful efficient complete fragment corresponding propositional logic extended definedness 
research necessary multivalued logics decision diagrams 
hol ocl intended stages software development cycle refinement calculus formally supports activity may particular relevance 
combining hol ocl hoare logic java pave way integrated formal reasoning specifications code 
proposal formal ocl semantics isabelle hol omg unified modeling language specification version 
uml agile awkward 
cacm omg object constraint language specification 
chapter warmer kleppe object language precise modelling uml 
addison wesley longman reading usa warmer kleppe clark gogolla richters hussmann johnston frankel bock response uml ocl rfp 
technical report spivey notation manual 
prentice hall jones systematic software development vdm 
prentice hall nipkow von oheimb java embedding programming language theorem prover 
bauer eds foundations secure computation 
volume nato science series computer systems sciences ios press brucker wolff note design decisions formalization ocl 
technical report albert universit freiburg broy grosu hussmann st len requirement design specification language spectrum informal 
technical report tum tu nchen winskel formal semantics programming languages 
mit press cambridge north automatic test generation triangle problem 
technical report national physical laboratory dick faivre automating generation sequencing test cases model specications 
woodcock larsen eds fme industrial strength formal methods 
volume lncs springer mandel formal semantics ocl 
gogolla ed uml unified modeling language 
modeling languages concepts tools 
volume lncs springer richters gogolla formalizing uml object constraint language ocl 
ling ram lee eds proc 
th int 
conf 
conceptual modeling er 
number lncs springer mandel expressive power ocl 
fm santen mechanized logical model object oriented specification 
phd thesis technical university berlin wenzel object oriented verification record subtyping higher order logic 
grundy eds theorem proving higher order logics 
volume lncs springer automated deduction multiple valued logics 
oxford university press 
