correctness classical compiler optimizations ctl carl christian july contents overview remainder 
language semantics 
temporal logic ctl 
ctl 
ctl models 
fine structure ap 
control ow model 
computation pre model 
backwards 
transformation transformation rule syntax 
concrete transformation rules 
transformation 
correctness proofs method showing program equivalence 
copy propagation 
elimination recomputation available expressions 
skip removal insertion common subexpression elimination 
transformations multiple program points transformation syntax 
concrete transformation 
transformation 
loop invariant hoisting 
summary global compiler optimizations captured conditional rewrite rules form program instructions condition expressed ctl formalism suited describe properties involving control ow program 
goal formally prove condition satis ed rewrite rule applied program changing semantics program 
unpublished ideas david neil jones eric van wyk :10.1.1.138.2709
aim prove correct conditional rewrite rules corresponding classical compiler optimizations considered presents framework specifying program transformations 
programs regarded ective speci cations partial functions program reads input performs possibly nonterminating computation outputs result 
programs de ned equivalent termination properties programs terminate input programs terminate input outputting value programs compute partial function 
main focus correctness program transformations sense subject program transformed program semantically equivalent 
framework transformations speci ed computable subject program transformation rule possible automatically compute transformed program resulting application transformation 
transformation rules conditional rewrite rules described transformations compiler utilize order obtain ecient target program 
issues optimality eciency generality considered detail 
describe transformation strategy sequence program transformations applied 
approach applying program transformation subject program 
instantiate applicable rule schema concrete transformation rule 
example constant propagation transformation obtain rewrite rule 
assuming side condition assigned assignment reached possible backwards paths control ow graph program 

verify side condition 
side condition speci ed ctl extension ctl veri cation amounts model checking 

construct transformed program 
actual implementation set substitutions side condition holds model checking 
ctl formula model checked set answer substitutions 
uni cation set substitutions satis es ctl formulae side condition obtained 
goal substitutions resulting set satisfy entire side condition gives rise sound transformation provided transformation rule sound 
overview remainder section introduces small imperative language procedure calls exceptions notion computation pre de ned computation pre sequence program states computed executing program input value 
computation pre xes key factor proving semantic program equivalence transformations 
section introduces extension ctl ctl specifying side conditions transformation rules 
section transformation rules introduced 
order keep presentation simple framework handles transformations involving statement transformed 
application transformation rule program formally described 
section investigates transformation rules copy propagation elimination recomputation available expressions 
transformations proven correct 
section auxiliary transformations proven correct outside framework 
particular transformations skip insertion skip removal dead assignment insertion proven correct 
transformations section elimination common subexpressions transformation easily obtained correctness follows correctness transformations 
section extends framework case statements ected transformation 
development analogous single statement case 
example loop invariant hoisting transformation speci ed proven correct 
section gives summary 
language language small imperative language procedures 
program form 
read write statement read statement labeled unique label ranging set labels label speci ed 
set labels occurring program denoted labels 
label rst statement program read statement denoted entry label write statement denoted exit 
syntax 
syntax program 
pgm read stmts write stmts stmt stmts stmt exp skip exp op exp expn variable label value possible statements occur read statement write statement assignments conditionals skip statements 
note conditionals allowed perform tests directly expressions variables 
serious restriction compute expression assign variable occur program variable test 
labels program assumed unique label referred conditional program occur program 
note read statement uses variable write statement uses variable statement occurring label referred set variables occurring program denoted vars 
binary operators written notation example programs interpreted having form syntax de nition 
semantics section semantics de ned 
domain values value operations op interpretation operators 
op value value left unspeci ed 
assumed exists distinguished element true value 
label function 
suppose pgm program suppose total ordering label appears syntactically program 
label function nx label label de ned nx min fp label label function device getting statement label program 
label function nx takes label occurring program returns label occurring immediately syntactically smallest label greater label respect ordering labels 
statement labeled precisely statement label function de ned domain label store 
program store nite map maps variables values 
set stores denoted sto variable value 
suppose value dom variable 

extension fxg 
fxg 


denotes restriction domain value 

denotes restricted domain excluding expression evaluation 
expression evaluation de ned function 
expr sto value op exp expn op op exp exp lemma states evaluating expression result depends variables occurring expression bindings 
lemma 
suppose exp sto vars program state 
program state program pair label labels store vars dom 
set program states denoted 
semantic transition relation 
semantic transition relation program pgm de ned 
skip 
nx 

exp 
nx 
exp 

true 

true 

exit 
exit 
corollary 
semantic transition relation deterministic 
proof 
immediate de nition clauses de nition hold state program 
initial state 
initial state program pgm input value de ned entry 

true 
true vars fy short initial state pair consisting entry label store maps variable input program variables value true 
sequence notation 
arbitrary set 
set sequences nite length denoted set nite sequences denoted set sequences nite nite length denoted computation pre computation pre program pgm value value nite nite sequence 

notation program program input clear context 
explicitly specify program input computation pre xes written 
set computation pre xes program input value denoted pfx 
pre relation 
suppose pgm program value input pfx nite computation pre 
pre relation relation pfx pfx nite computation pre pfx form 

program semantics 
suppose pgm program 
partial meaning function 
pgm value value de ned exists computation pre 
exit 
temporal logic basic idea express program transformation rule number rewrite rules side condition speci ed variant ctl 
temporal logic allows expressing properties computation pre xes subject program 
side condition corresponds analysis compiler perform order ensure semantics subject program preserved 
true true false false ap ap semantics ctl 
ctl ordinary de nition ctl brie 
ctl model 
ctl model triple set states total relation elements function ap called valuation mapping states atomic propositions hold state 
atomic propositions facts hold state model 
path ctl model nite sequence states 
ctl syntax 
syntax ctl 
formula called state formula formulae express properties single state model 
similarly formula called path formula 
true false ap ap ap ctl satisfaction 
ctl clause written ctl model state model ctl formula 
model clear context omitted clause 
ctl clause satis ed clause evaluates true semantics de ned 
crucial note atomic proposition hold invariantly true false entire model 
truth atomic proposition depends state evaluated 
de nition ctl path quanti ers forall asserts property paths ctl model starting current state exists 
path operator simply asserts state property state path 
path operator asserts property hold states path eventually state reached property holds 
operator assert remainder path 
possible de ne number derived operators write ctl formulae succinctly 
uses extension ctl derived operators introduced extension subsumes ordinary ctl 
ctl extension ctl called ctl order express side conditions transformation rules 
extension fold 
ordinary de nition ctl allows reasoning model reason states reached relation 
essential ways side condition express program analysis hold prior application transformation expression available label vital allow reasoning past model 
done introducing new versions exists forall interpretation past quanti ers subformulae hold backwards paths relation 
de nition ctl model requires relation total de ned ctl model de ned ctl model 
handle dropping totality requirement relation time specify nite paths handled 
ctl model 
ctl model triple set states relation necessarily total elements function ap called valuation mapping states atomic propositions hold state 
second de nition ctl extended handle models dead states states successor direction path 
de nition extended handle backwards paths applies directions 
key de ning path model notion maximal path 
allow reasoning nite path dead state 
maximal path 
path maximal nite form dead meaning backwards path forwards path 
set maximal paths denoted max true true false false ap xn ap xn max max max max semantics ctl third order able express general transformation descriptions ner structure introduced atomic propositions 
particular considering elements ap tokens regard set atomic propositions set terms 
ctl syntax 
syntax ctl 
true false ap xn ctl operators 
similarly ordinary ctl clause ctl clause written ctl model state model ctl formula 
clause satis ed clause evaluates true de nition ctl satisfaction 
model clear context omitted clause 
derived ctl operators 
fa operators de ned 
true similarly derive ordinary boolean operators ctl models section models needed correctness proofs 
fine structure ap ctl side condition obtained instantiating free variables transformation de ne ner structure atomic propositions 
admits reasoning instantiated parts program 
structure ap set atomic propositions models collects syntactic information subject program 
set easily computed linear time traversing subject program 
ap node label entry stmt stmt def variable variable variable exp isvar variable label statement variable expression occurring atomic proposition occur subject program 
control ow model constructed valuation generated traversing program syntax inserting atomic propositions hold particular label valuation 
example consider program 
read write valuation program 
entry stmt def stmt def stmt write remaining atomic propositions independent label isvar control ow model model satisfaction side condition decided model control ow subject program includes syntactic information program 
model suciently detailed express classical compiler optimizations 
control ow model 
control ow model cf cf de nes model program pgm 
set states de ned labels 

state transition relation cf de ned cf fp skip nx write 
valuation ap de ned node entry entry stmt def expr vars expr labels vars write vars expr vars isvar vars control ow model extracted subject program simple pass program 
types atomic propositions express global program properties independent label 
global properties belong ctl formula order avoid formalizing machinery deal included set atomic propositions 
lemma 
suppose 
cf def lemma 
suppose pgm sto 
cf def proof 
statement form exp semantics 
clearly implies lemma 
suppose 

computation pre model order prove correctness de ne model directly corresponds computation pre subject program 
model relation computation pre model de ned semantic transition relation 
computation pre model contains branching 
intuitively computation pre model simply computation pre interpreted ctl model 
computation pre model 
suppose pgm pfx 
nite computation pre computation pre model pre de ned pfx valuation identical valuation control ow model 
establish lemma stating atomic proposition holds control ow model program hold computation trace 
lemma 
suppose pgm pfx nite computation pre value value 
exit ctl clause cf ap xn satis ed pfx ap xn satis ed 
backwards control ow model operator asserts strong statement ctl formula states backwards paths holds holds 
occurs loop exists backwards path loops nitely 
state holds occur loop 
sake handling powerful transformations desirable able express holds holds allowing path go loops 
relaxed version entry 
nite backward paths admitted unrealizable actual computation pre time nite backwards path eventually satisfy backwards path computation pre model ends state entry holds 
lemma 
suppose pgm program pfx computation pre cf entry implies nite paths 
label satis ed nite paths control ow model 
transformation section de nes framework describing schema concrete program transformations 
important point applicability transformation rule program label computable 
possible write compiler admits transformation rules compiler transform optimize compiled programs 
transformation rule syntax free variables allowed transformation rules 
allows speci cation transformation templates intuitively instantiated binding free variables give concrete transformation rule 
transformation rules 
transformation rule syntax rw skip op true false ap vn vn vn vars value variable quanti rewrite rule rw may contain free variables ranging substructures statements bound instantiation phase 
side conditions expressed ctl extended constructs forall exists 
purpose constructs allow reasoning substructures statements 
constructs removed unrolling model checking performed formula model checked ordinary ctl formula 
functions names functions expression program generates set expressions quanti ed 
example vars 
instantiated expression say set vars fa bg computed construct unrolled 
functionality admits expressing transformations elimination recomputation available expressions transformation demonstrated subsequently 
applying transformation rule program done steps 

free variables transformation rule instantiated matching statement program left hand side rewrite rule transformation rule 
remaining free variable instantiated 
program dependent subformulae side condition unrolled give ordinary ctl formula 

side condition veri ed model checking side condition label transformation rule instantiated 
clause holds instantiated transformation applied program provided transformation rule sound 

new program constructed simply replacing statement program instantiated right hand side rewrite rule 
concrete transformation rules program transformation rule instantiate transformation rule program point obtain concrete transformation rule 
intuitively concrete transformation rule obtained instantiating free variables rule unrolling program dependent subformulae side condition 
closed transformation rule 
suppose pgm program labels label transformation rule lhs rhs substitution binding variables occurring lhs purpose de ne unreferenced variables referenced side condition left hand side rewrite rule 
de ne substitution obtained unifying left hand side transformation rule statement label unify lhs 
provided exists unifying lhs transformation rule obtained closure respect contains free variables 
transformation rule called closed transformation rule contains free variables 
type label stmt exp variable closed transformation rule concrete transformation rules obtained unrolling program quanti ers side condition 
concrete transformation rule 
lhs rhs closed transformation rule concrete transformation rule de ned lhs rhs unroll unroll function recursively traverses ctl formula expands forall exists constructs 
forall exists formula reached set formula quanti es computed 
resulting set required nite input 
function 
maps names set extraction functions de nitions syntactic elements mapped 
function 
exp exp set extraction functions 
example consider vars 
syntactic element vars associated 

function extracts variables expression resulting set fa bg 
function vars exp exp recursively traverses expression extracts variables occurring expression 
formula unrolled ctl formula 
unroll true true unroll false false unroll ap xn ap xn unroll unroll unroll unroll unroll unroll xn unroll 
unroll xn unroll 
unroll unroll unroll unroll unroll suppose transformation rule program pgm label concrete transformation rule obtained instantiating transformation rule substitution label program obtained rst computing closed transformation rule respect computing unrolling 
transformation de ne means apply rewrite rule program speci ed program point 
apply 
suppose pgm programs label transformation rule substitution 
relation apply holds hold 

instantiation exists instantiation substitution label form 
veri cation ctl clause cf satis ed 

construction transformed program pgm form read write statements de ned program obtained applying transformation program label substitution apply holds 
de nition apply labels transformed program appear order labels subject program 
corollary 
suppose pgm apply nx nx correctness proofs lemma 
suppose pgm apply rw label transformation rule rw value vars vars vars vars method showing program equivalence corollary 
suppose pgm apply holds label transformation pfx pfx computation pre xes length 

exists relation computation pre xes crc implies pn exit implies 
proof 
suppose terminate input exit exit exit lemma implying terminate input conversely nontermination implies nontermination 
terminates input pn exit exit 
assumption 
arbitrary value 
copy propagation copy propagation transformation propagates assignments form assignments type 
purpose render intermediate variables chains copying assignments dead 
example 
example copy propagation consider program fragment 
performing copy propagation statement label results fragment program variables de ned assigned variables evaluate value label 
variable assignment 
variable subsequent computations removed transformation eliminating de nitions dead variables 
copy propagation 
transformation rule de nes copy propagation transformation cp 
isvar def def entry stmt informally side condition states 
bound program variable 
backwards paths control ow graph starting statement transformed program variables bound assigned assignment reached eventually happen 
note implicitly forced bound program variables appear left hand side assignment program variables appear 
theorem 
suppose program pgm label labels suppose apply cp 
proof 
pgm apply cp 
variables 
suppose instantiated transformation rule isvar def def entry stmt note variables bound actual program variables appears left hand side assignment satisfaction side condition implies variable 
value input programs pfx pfx nite pre xes length respectively 

idea proof show transformation preserves set computation pre xes state transition sequence occurring computation trace original program input occur computation trace transformed program input vice versa 
lemma conclude program semantics preserved 
prove induction length bound expression base case 
vars vars lemma 
induction step 
semantics deterministic exists exactly pfx pfx assuming computation pre xes equal index need show equivalence index 
induction assumption lemma states label functions identical transition relation deterministic corollary 
implying 
clearly label computation pre label function statement assignment programs 
lemma states label function identical programs statements de nes assigns variable def satis ed cf cf 
lemma nx nx nx nx induction assumption implies transitivity stores equivalent 
side condition assumption hold model control ow program cf def def entry stmt lemma strong version statement satis ed model cf nite paths nite paths 
label stmt def def substituting de nition valuation stmt valuations get nite paths 
label def def due lemma computation pre described control ow model holds computation pre pfx def pfx def holds 
program variables de ned statements lemma implies change value 
furthermore semantics 
clearly de ned def lemma 
transitivity 
semantics argument induction assumption semantics proves implying 
induction nite computation pre xes pfx pfx length computation pre xes identical 
follows lemma 
elimination recomputation available expressions elimination recomputation available expressions transformation detects assignments expressions available variable provided changes store ect variables expression depends 
example 
example consider program fragment 
applying transformation label results fragment 
transformation semantics preserving expression evaluates value label variable changes value regardless path taken 
expression available variable label modi ed 
elimination recomputation available expressions 
rewrite rule de nes elimination recomputation available expressions transformation er 
ax def vars def entry stmt informally side condition states 
may occur expression expression potentially evaluate di erent value store assignment 

second part side condition states backwards paths current label back statement eventually reached value unchanged 
furthermore program variable occurring change value path 
implies expression evaluates expression label transformation takes place statement 

side condition implicitly states ctl variables bound program variables appear left hand side assignments 
ctl variable bound program expression appears right hand side assignments 
theorem 
suppose pgm apply er 
proof 
pgm apply er 
value input programs pfx pfx program pre xes length 

suppose instantiated transformation rule ax def vars def entry stmt prove induction length computation pre xes identical base case 
vars vars lemma 
induction step 
semantics deterministic exists exactly pfx pfx assuming need show 
claim follows lemma induction assumption 

lemma nx claim holds prove 
side condition hold ax def vars def entry stmt lemma implies nite paths label stmt def vars def control ow model describes control ow possible computation lemma applies computation pre applying de nition valuation atomic propositions hold concrete computation pre def vars def rewrite rule change def atomic propositions vars def hold control ow model cf similarly def holds cf 
side condition states vars vars def holds program point assignment property holds 
lemma conclude vars vars expression evaluates value stores prove vars suppose semantics vars 
transformation rule instantiated semantics 
induction assumption transitivity statement vars due equivalence vars holds 
putting pieces semantics vars lemma vars induction assumption vars st argument nd argument lemma semantics proves induction step 
computation pre xes length pfx pfx equivalent 
lemma transformation semantics preserving 
skip removal insertion lemma states framework strong handle transformations insert remove statements 
completeness transformations proven correct outside framework 

statement insertion transformation inserting skip statement statements subject program 

skip removal transformation deleting skip statement program changing skip statement statement immediately syntactically 

dead assignment insertion rewriting skip statement assignment variable occur subject program 
transformations proofs particularly interesting simply prove intuitive facts 
armed transformations possible perform elimination recomputation available expressions transformation instance leaving transformed program cluttered useless skip statements 
demonstrated subsequently transformations insert statements program speci ed framework rely presence skip statements right places 
skip insertion transformation targeted handle issues 
statement insertion 
suppose pgm form read write label labels unique label 
label labels statement insertion transformation de ned pgm program form read skip write theorem 
suppose pgm labels label labels 
proof 
proof idea show induction computation pre xes pfx pfx 

pfx pfx crc implies rc crc pm base case 
suppose clearly initial states equivalent 
nx follows semantics skip 
induction step 
suppose implying pm label occur program pm induction assumption implies 
semantics skip de nition implies pm induction assumption follows induction assumption holds 
induction computation pre exists computation pre conversely computation pre exists computation pre nal states equivalent 
clearly terminates terminates terminate compute store 
equivalence follows de nition program semantics 
skip removal 
suppose pgm form read write skip removal transformation de ned 
nx read write theorem 
suppose pgm program labels label 
proof 
proof idea show induction computation pre xes pfx pfx 

pfx pfx crc implies rc crc pm base case 
suppose clearly initial states equivalent 
nx follows semantics skip 
induction step 
suppose pm label occur program induction assumption implies 
semantics skip de nition implies pm induction assumption follows induction assumption holds 
induction computation pre exists computation pre conversely computation pre exists computation pre nal states equivalent 
clearly terminates terminates terminate compute store 
equivalence follows de nition program semantics 
dead assignment insertion 
suppose pgm program variable vars variable occurring expr expression vars vars 
suppose label skip 
dead assignment insertion transformation de ned read write statements transformed program theorem 
suppose pgm labels variable vars expr vars vars 

proof 
lemma shown induction stores computation pre xes length input value equivalent restricted vars 
implies semantic program equivalence vars 
common subexpression elimination point possible prove correct elimination common subexpressions transformation 
fact correctness follows directly correctness transformations treated combined obtain common subexpression elimination transformation 
transformation detects expressions busy expressions computed eventually paths leading program point variables expression changed value 
assignment expression fresh variable inserted particular program point rendering subsequent recomputations redundant 
achieved transformations proven formally correct 

decide suitable label fresh variable expression usually compiler select label expression busy 

insert skip statement labeled label 
perform dead assignment insertion transformation label variable expression 
eliminate redundant assignments repeatedly applying elimination recomputation available expressions transformation various labels program 

delete skip statements transformed program 
purpose prove correctness typically employed compiler optimizations satis ed claiming possible perform elimination common subexpressions procedure 
transformations multiple program points section presents extension framework handles transformations program statement ected 
transformation syntax transformation rules 
multi label transformation rule syntax rule rw rw cond cond rw cond skip op true false ap vn vn vn vars value variable quanti main di erence single rewrite case transformation matches changes statements labels device referring speci label needed 
rewrite rule rw annotated label variable 
rewrite rule labeled label exist exactly side condition annotated label 
previously noted label invariant atomic propositions really belong ctl clauses situation clauses pronounced natural clause insert 
approach avoid introducing inessential concepts 
concrete transformation concrete transformation computed manner similar single rewrite rule case 
closing transformation substitution computed uni es left hand sides rewrite rules corresponding side conditions label tuple closed transformation rule 
suppose pgm program label tuple labels occurring multi label transformation rule lhs rhs lhs rhs substitution binding variables occurring lhs de ne substitution uni es left hand side lhs statement label provided substitution exists multilabel transformation rule obtained closure respect contains free variables 
multi label transformation rule called closed transformation rule contains free variables 
type label stmt exp variable closed multi label transformation rule concrete transformation rules obtained unrolling program quanti ers clauses side condition 
concrete transformation rule 
suppose closed multi label transformation rule concrete multi label transformation rule computed unrolling side conditions lhs rhs lhs rhs unroll unroll suppose multi label transformation rule program pgm label tuple concrete multi label transformation rule obtained instantiating multi label transformation rule substitution label tuple program obtained rst computing closed transformation rule respect computing unrolling 
transformation de nition application multi label transformation speci labels subject program analogous single rewrite rule case 
apply 
suppose pgm programs label tuple labels multi label transformation rule substitution 
program obtained applying multi label transformation labels substitution apply relation apply holds cases hold 

instantiation substitution exists instantiation substitution form 
veri cation ctl clause cf satis ed 

construction transformed program form read write statements de ned corollary 
suppose pgm apply nx nx loop invariant hoisting code motion loop invariant hoisting 
restricted version code motion transformation cm covers loop invariant hoisting transformation de ned skip skip node ax def vars def entry node transformation involves di erent statements subject program 
transformation moves assignment label label provided conditions met 
assigned variable dead reached 
requirement holds introducing assignment label change semantics program 

second requirement combination rst rewrite rule states expression available transformation 
transformation obtained applying transformations inserts statement provided dead followed elimination available expressions transformation er 
formulating transformation single transformation labels explicitly linked 
transformations need mechanism controlling insert assignments 
paths possible move assignments labels available dead paths leading semantics preserving transformation 
skip program possible lift statement label label 
general transformation slow computation need compute expression expression needed 
cm relation 
suppose pfx pfx de ne cm relation computation pre xes crc cases holds 
fp qg 

vars fp qg notation cr indicate crc holds case de ned 
theorem 
suppose pgm apply cm 
proof 
suppose pgm apply cm 
value input program pfx pfx nite computation pre xes length respectively 


suppose instantiated multi label transformation rule skip skip node ax def vars def entry node show crc induction length base case 
vars vars lemma 
induction step 
semantics language deterministic exists exactly assuming crc need show rc proof cases depending label depending case cm relation crc holds 
suppose fp qg 
suppose cr 
assumption evaluate statement store label function 
follows lemma 
cr side condition satis ed node de nition ctl equivalent label node lemma control ow model describes possible computation pre xes hold computation pre assumption know satis ed particular satis ed assumption lemma conclude suppose vars clearly ful lling requirement stores remains shown labels equivalent 
suppose label function 
induction assumption clearly holds 
statement conditional state depends variable tested 
reasoning implying conditional depend induction assumption holds unchanged 
suppose node skip 
semantics label functions nx nx lemma identical 
induction assumption follows 
suppose crc case 
induction assumption implies semantics clearly holds 
cr previously shown implies satisfaction lemma statement depend value implying suppose vars de nition valuation implies satisfaction contradicting 
cr holds unchanged 
skip 
semantics label function lemma identical induction assumption 
suppose cr lemma side condition rewrite rule ax def vars def entry node implies backwards path eventually ends state node satis ed contradicts assumption 
suppose cr assumption exists looking side condition get ax def entry node implies lemma nite paths label node def assumption follows de nition valuation clause node satis ed particular def satis ed 
statement clearly de nes def contradicting 

cr assumption exists vars wish show rc holds case show know assumption statement de nes cf def lemma lemma induction assumption semantics skip need show 
observation assumption cr implies side condition ax def vars def entry node implies cf def cf def vars clearly holds cf statements identical statement fp qg lemma variable vars change vars vars observations shown maps value semantics pk vars lemma vars st argument vars semantics skip vars induction assumption lemma semantics nd argument semantics skip case holds induction conclude crc computation pre xes pfx pfx length 
suppose program terminate input nite computation pre corresponding computation pre labels computation pre xes pairwise equivalent 
terminate input 
reverse direction follows symmetry 
terminates input consider store write statement im write 
suppose crc case 
side condition exists node semantics exit leading contradiction 
case hold 
case implying 
follows lemma transformation semantics preserving 
summary framework describing program transformations conditional rewrite rules 
specifying program transformations rewrite rules temporal logic side conditions relatively new approach proving correctness program transformations :10.1.1.138.2709
main focus correctness program transformations orthogonal issues 
order apply transformation framework transformation strategy decide particular program point side condition veri ed 
practice leads inecient transformation strategies implemented naively 
possible solution extend de nition ctl admit free variables :10.1.1.138.2709
model checker return set substitutions satisfying side condition validating side condition particular label 
substitution corresponds instantiation rule schema particular program points side condition satis ed 
transformation strategy select possible legal substitutions immediately construct transformed program 
development slightly involved results easily adaptable 
simpler framework sucient main focus purely correctness program transformations 
language treated simplistic imperative language procedure calls exceptions 
order allow speci cation programs language features framework extended account di erent control ow 
complicate proofs language constructs introduced reasoned proofs 
extending framework include procedures exceptions extensions object oriented languages remain interesting area investigations 
author people kind help writing 
neil jones guidance getting author started temporal logic prove correctness program transformations 
david eric van wyk inspiration ideas 
chin soon lee kindly proofreading resulting numerous constructive suggestions 
transformation strategy order number program transformations applied subject program 
alfred aho ravi sethi je rey ullman 
compilers principles techniques tools 
addison wesley 
michael huth mark ryan 
logic computer science modelling reasoning systems 
cambridge university press 
joost pieter katoen 
concepts algorithms tools model checking 
lecture notes course mechanised validation parallel systems friedrich alexander universit erlangen 
david neil jones eric van wyk carl :10.1.1.138.2709
proving correctness compiler optimizations temporal logic 
unpublished 
david oege de moor 
imperative program transformation rewriting 
compiler construction cc thread etaps 
flemming nielson hanne nielson chris hankin :10.1.1.138.2709:10.1.1.138.2709
principles program analysis 
springer verlag 
oege de moor david eric van wyk 
universal regular path queries 
submitted 

