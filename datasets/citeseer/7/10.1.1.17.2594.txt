araneus guide web site development mecca paolo merialdo paolo atzeni crescenzi universit della universit di roma tre della della italy roma italy mecca merialdo atzeni dia uniroma araneus project working report version march web sites rapidly world wide standard platform information system development 
reports conducted years framework araneus project field presenting models tools methodologies techniques web design development ideas coming number concrete experiences developing data intensive web sites system 
discuss research directions define unified framework data application management web 
web site development imposed new challenging database problem 
justified number research proposals coming database area data management web sites relevant works field investigated extension design methodologies sites interaction development tools :10.1.1.34.9263:10.1.1.145.2594
notion web site evolved small home collection html pages number different forms including complex sophisticated information system 
large number diversity web sites find useful classify categories complexity terms data applications services shown 
call web presence sites sites low complexity terms data applications sites usually contain small number pages order dozens mainly serve marketing purposes believe vast portion web sites fall category relatively small size usually hand possibly help html editors simple site manager software 
service oriented sites ones mainly dedicated specific service 
examples sites example search engines typical example free email services hotmail 
cases site may large back database structure data hypertext quite simple typically single class objects complexity underlying applications guarantee service 
catalogue data intensive sites sites publish data complex hypertext structure offer little services 
academic sites data people data complexity applications web presence catalogue service oriented low high low high complexity sites sites sites classification web sites courses research example 
sites focus mainly organizing data browsable hypertext form maintenance underlying data hypertext 
intriguing class sites call web information systems real information systems web offer access complex data time provide sophisticated interactive services 
large electronic commerce sites obviously fall category information systems intranet platforms 
classification course bit crude sites may fall categories serves goal discussion 
classes web presence sites created maintained hand usually don need development ad hoc techniques 
service oriented sites considered application specific allow general treatment 
concentrate mainly catalogue sites 
developing administering catalogue site way considered typical database problem contrary unclear foundation developing real information systems web full fledged proposal encompassing aspects web information system development data management techniques application development associated methodologies missing 
report carried years framework araneus project brought develop number tools serve basis developing web applications 
ideas incorporated system stem conspicuous development activity conducted large real life web sites different domains ranging university sites civil engineering non profit organizations total thousands web pages 
experience contributed refine approach side highlighting real challenges system face field side forcing pursue rapid development user needs market technology 
discuss approach development data intensive sites illustrating main components system concrete experiences discuss directions extending order incorporate broader support 
web site development software part larger system araneus web base management system addition incorporates tools query integrate structured semistructured data report simply want emphasize coupling data extraction hypertext generation allows develop number interesting applications pieces information extracted sources re organized create new sites sites browsed possibly queried back applications 
refer reader aspects system 
overview system main features approach ffl clear separation different levels data management ii hypertext structure iii graphical presentation iv application development separation justified observation levels largely independent possible change affecting ones architecture system highly modular number interacting components level ffl web site development phase specific design methodology araneus website design methodology evolution traditional entity relationship database design methodology reflects separation levels helps developer design implementation maintenance phase ffl formal data model called adm hypertext description advantage giving compact effective description site structure order better reason effectiveness adm essentially object relational data model untyped links union types interesting feature developed independently adm represents nice abstraction xml modeling primitives providing natural basis describing xml data sources ffl system allows large flexibility choosing actual implementation site fact produce virtual pages pages generated demand standard materialized html files due separation levels nature adm data model system easily generate plain html xml sites xsl style sheets migration platform completely transparent fact sites developed far html xml version available ffl system quite standard portable parts system written java interfaces jdbc enabled database system architecture refer show dashed boxes correspond module currently development 
seen system interfaces dbms server 
functionalities accessed suitable user interface developer conduct tasks related site management 
core system stands internal modules shall discuss sections 
adm object manager takes care handling adm objects storing database relational object relational discussed section 
dbms interface section handles communication external dbms sql queries dbms way architecture independent specific dbms migrated easily platform 
core tools site development penelope telemachus discussed sections 
penelope sql language nested object algebra generating hypertext views database automatically generate html xml pages starting database content 
telemachus handles presentation graphical layout documents notion style pages attributes inside pages generate html formatting xsl style sheets 
modules coordinated homer case tool web site design automatic development discussed section web developers progressively design theta gamma delta user interface dbms interface penelope telemachus homer neptune adm object manager server internet theta delta web site developer oe architecture araneus site graphical interface starting database design moving successive levels design artifacts input respective tools order proceed actual site implementation 
section discuss extending system order design develop applications site 
extension neptune workflow management system approach service offered site considered workflow handled neptune 
coordinates activities workflow interacts penelope telemachus generating pages 
discuss workflow management changes web site design methodology 
distribution package containing part software described available download araneus project web site 
adm object manager araneus data model adm give intensional description web site abstracting logical features web pages :10.1.1.145.2594
adm page seen complex object identifier url set attributes 
pages sharing structure grouped set page schemes corresponds site scheme 
attributes may optional type simple mono valued multi valued 
simple types text image link 
complex attributes limited number primitives follows structures typed tuples ii union types disjunctions attributes iv lists ordered collections tuples possibly nested forms forms seen model virtual lists tuples number attributes form fields different types text areas selections radios checkboxes associated action link result page list virtual sense values form attributes physically stored page specified user submitting form 
filling form fields executing form action conceptually similar selecting tuple values list links 
shows graphical representation adm scheme corresponding portion site describing scientific conference example 
scheme stacks represent page schemes edges denote links 
contains explanation graphical primitives 
example adm scheme points want emphasize 
adm data model plays cardinal role approach fact allows give compact intensional description site structure level provides basis reasoning effectiveness chosen hypertext organization clear sections site scheme essential phases site design implementation tools 
second worth noting adm crossroads traditional database models xml 
fact fundamental modeling primitives model natural counterpart ones typically offered object database systems main differences absence hierarchies inheritance presence union types 
adm modeling primitives considered subset odmg sql data models enriched union types 
time adm considered logical abstraction xml 
fact xml considered data format data model modeling primitives correspond ones adm structures possibly nested lists disjunction links 
respect xml dtd seen type declaration class documents natural counterpart adm page schemes 
special attention devoted links links xml essentially untyped possible constrain xpointer xlink type dtd link destination 
decided include typed untyped links data model sense link attribute may give type destination generic link type generic link may constraints specifying partial type information 
ideas relevant site querying integration process site development refer reader forthcoming 
dbms interface dbms interface jdbc odbc uses sql language 
store adm objects external database decomposing flat tables 
note relational database back gives flexibility example full fledged object oriented database great advantage leveraging wide spread technology drastically cutting site development costs way organization willing develop web site doesn usually need buy new dbms back 
generating html pages penelope uses interface issue query database construct hypertext views translated html xml 
worth noting different approaches web publishing possible context 
database products market adopt pull techniques pages contain calls dbms user requests new page calls evaluated page generated fly returned browser 
main advantage approach pages reflect database state limitations associated 
ffl underlying database ends example repository information system frequent accesses web site may considerably increase load database slow performance side creating new database especially intended web publishing purposes may economically feasible poses problems guarantee consistency repositories 
ffl second resulting web site strongly platform dependent server needs specific dbms back serve pages contain non standard tags invoke execution scripts means example site mirrored distributed network moved platform migrating dbms 
alternative represented push approach data materialized html files pushed site 
clearly solves problems resulting site standard server works independently dbms case management pages presence updates complex fact database updated materialized html files need correspondingly maintained reflect change 
push techniques increasingly popular web due appearance channels sites periodically deliver pages portions sites directly client machine decided support approaches site pages kept virtual generated fly materialized html files 
discussed section maintenance materialized pages guaranteed suitable page update language 
want emphasize approach adopting relational database materializing pages html files drastically cut costs 
give idea mention large catalogue sites developed example faculty engineering web site university site pages thousands accesses year microsoft access back database 
pages materialized order reduce database workload periodically updated page update language provided penelope 
penelope penelope system automatically generating complex web sites starting data managed dbms 
xml html target mark language 
worth saying system supports push pull solutions generate materialize web pages starting database content dynamically create pages request 
site creation phase penelope takes input adm description target hypertext plus page styles generated telemachus see section 
structure target web site correspondence source database described system means declarative language penelope definition language pdl 
description manipulation language penelope manipulation language pml allows create specific pages site 
basics penelope definition language means examples introduce language formal semantics advanced features language briefly discussed presentation main statements penelope manipulation language concludes section 
penelope definition language pdl pdl definition specifies pages site mapped underlying database 
site definition statement followed collection page scheme definitions page scheme site 
site definition statement specifies root base url target site ii style site set presentation directives clear section iii data source usually odbc jdbc data source data published stored 
general form site definition statement follows scheme address style style datasource page scheme definition consists define page statement essentially specifies fill pages attributes tables base relations views source database 
order correlate single pages generate complex web site suitable url invention mechanism borrowed object oriented databases 
url invention local urls allow identify new pages constant strings strings built function symbol url attributes relations 
example result html constant local url url 
denotes local url built values database attribute 
define page statement form define page rn page scheme name ii tables site data source sql views iii describes page structure specifying page attributes type correspondence database attributes 
language includes optional clauses sake space 
illustrate define page statement consider examples 
particular assume data source relational database call conference dealing data scientific conference relations key attributes underlined 
author email affiliation address 
email affiliation homepage 
email affiliation homepage 
title accepted 


session day hour room consider page scheme accepted page 
contains mono valued attributes type text title plus multi valued attribute corresponding list authors 
pdl statement describe instances page scheme generated starting data conference database define page accepted page url title text title list author text affiliation text affiliation text author select accepted true easy see statement closely resembles page scheme structure 
main part statement clause describing fill data page 
particular clause specifies assign urls instances target page scheme generate attribute values instances target page scheme 
urls generated system time page created new different url needed 
function terms generate urls example term url 
specifies system generate url page url uniquely associated value attribute way different page created different code 
define page statement describes pages filled starting data stored source database 
attribute page scheme item clause 
page instance attribute values taken tables specified clause 
particular detailed tables clause joined page scheme attribute associated attribute resulting relation name enclosed brackets title 
example definition attribute title type text specifies page report title specified adm scheme corresponding values come attribute title 
note clause tables sql views specified 
consider example showing local urls link pages 
pdl statement specifies page scheme program page shown created define page program page url program html technique inspired skolem functors invent new oid object oriented databases 
list name text day text day hour text hour room text room list list link accepted page title title url author list list author text author session author select accepted true statement specify coherently page scheme structure page contain list sessions session composed list papers title authors 
note need link leads corresponding page defined previous pdl statement 
statement item list title anchor link link appropriate pages function term url title 
value link enforces correct long urls pages generated function term 
pdl semantics understand mapping values relations specified clause values pages generated develop formal semantics penelope definition language 
semantics pdl statement easily explained algebraically 
particular statement language maps expression nested relational algebra enriched specific operator url invention 
nested relational algebra refer defined roth class nested relations 
operators nested algebra nested relations operators gamma ae oe natural extensions traditional operators usual relational algebra definition recalled 
specific operator nested relational algebra nesting operator definition recalled 
ab nested relation scheme associated nested relation denoting sets attributes 
nesting denoted selects set tuples equals compacts tuples set different values values complex attribute describe semantics pdl statement need extend nested relational algebra operator denoted url describing url invention mechanism 
url allows introduce new attributes nested relation follows 
nested relation scheme operator url applied relation takes number arguments bm constant value attribute skolem function tuple returns unique identifier denoted constructed starting constant values values adds new attribute tuple value 
penelope system executes pdl statement performs natural join tables specified clause 
second needed url attributes added resulting relation 
url values generated url operator values actual parameter constant string value database 
get rid attributes useful page instance generation database attributes associated page attribute page scheme ordinary projection operation performed 
resulting relation transformed set nested tuples nesting operations performed starting inner adm attributes type list 
nested tuple resulting relation corresponds site page 
respect definition page scheme accepted page penelope system execution time performs expression affiliation url title affiliation url url author pdl advanced features far seen main basic features pdl 
language allows specifying structure sophisticated pages including instance click map attributes links existing pages forms 
briefly aspects 
virtual pages modifiers discussed penelope supports push pull generation 
standard url invention mechanism creates file names materializes pages html files cases better option leave pages virtual generate fly user request 
specify page generated running script materialized file url function modifier cgi 
consider example page accepted page 
want virtual page corresponding definition changed follows define page accepted page url cgi title text title list author text affiliation text affiliation text author select accepted true difference respect previous statement stands url clause 
presence cgi modifier tells system generate actual html xml code page script invoked order generate page request 
script input parameter code invoked extract data database return page source standard input 
worth noting virtual pages completely handled system automatically produces code necessary generate page 
virtual page may embed links virtual materialized pages making integration push pull quite seamless 
course virtual page easily referenced page cgi modifier url clause link attribute 
way system knows script run order retrieve link destination page 
modifiers cgi allows wider range link types 
example mailto modifier order produce link mail address 
similar syntax order introduce links offsets links specific portion page called internal links 
interesting possibility referencing pages external site 
called external pages penelope 
sake space choose develop issues 
improve performances constraint nested attributes level nesting non nested attributes come single table view clause 
defining click maps effective way rendering links web pages implemented html click maps 
note click maps data model perspective simply lists links associated image deciding implement links click map implementation choice 
penelope system allows easy intuitive management pages containing kind linking mechanism 
define page created click map specific syntax provided pdl 
particular pdl allows specify map attributes 
map attribute parts image attribute type image basis map ii link attribute type link associate portions image links pages 
assume want generate page click map showing map building conference held links scheduled events room see page scheme map page 
assume stored database table containing name file map plus coordinates box shaped areas corresponding rooms follows room coords icons stars jpg icons stars jpg 
icons stars jpg pdl statement generate map unique instance page scheme define page map page url map html map map image link coords text url room penelope system interprets statement piece html generated html 
map name 
area shape rect coords ref html 
area shape rect coords href html 
area shape rect coords href html 
map 
img src icons stars jpg 
html 
picture conference place displayed sensitive map clicking region associated room page presenting activities scheduled room reached 
defining forms fundamental construct html pages forms 
forms particularly important cases page collect user input run procedure server 
essential run workflow 
embedding form page generated penelope number subtleties related various kinds fields form text areas radios checkboxes selections 
basic idea pdl specification form bunch attributes field form attributes empty text areas allow selection number values database attribute ii number buttons action associated form iii urls number scripts run submitting form button 
suppose example need page conference web site collect reviews pc members 
form collect electronic reviews described follows define page review page url cgi review html form action text cgi bat method text post go submit submit review restart reset select items list name option select items list code option radio reject radio neutral checked radio weak accept radio accept review size page contain post form executes bat script directory cgi 
contain buttons submit reset 
essentially fields form selected list alternatives corresponding values database grade radio check simple example reject weak accept accept actual review free text inserted 
seen syntax describing forms cases quite elaborate 
fact forms hardly coded pdl hand 
forms fundamental mechanism interconnecting penelope neptune clear sections 
penelope manipulation language creation pages defined pdl source code performed means instructions penelope manipulation language pml 
pml provides main instructions generate remove refer site ii instances page scheme iii pages satisfy condition clause 
general form pml statement follows generate remove page scheme name boolean predicate attributes consider example assume interested generating instances page scheme accepted page particular suppose want generate pages corresponding papers author pml statement executed system generate accepted page tom scott important observe pml effective tool maintaining site 
fact allows update pages life cycle site 
suitable algorithm incremental page maintenance defined 
page maintenance algorithm takes input database update returns minimal set pml instructions needed correspondingly update actual syntax simplified details clarity sake 
pages 
essence update database requested system automatically generates mixed transaction sql updates database tables pml updates pages combined order guarantee consistency 
transaction atomically executed database web site 
telemachus difficult underestimated tasks developing web site consists handling graphical layout pages 
people willing create sites worried having appealing presentation data management issues surprising web sites prominent commercial vehicle need attract customers 
design implementation presentation large part site life cycle 
experience tells fundamental requirements field useful rapid prototyping tools tools produce approximate layout pages site allows concentrate aspects site design little initial effort layout ii subsequent step flexible tools refine presentation details obtain appealing final result 
iii presentation hardly developed coding convenient example html pages displayed standard browser get immediate feedback system derive necessary code examples 
ideas inspired telemachus tool presentation design development 
previous section seen penelope assumes pdl site definition code associates form style page system builds instances page scheme attribute values formatted specified graphical directives 
styles designed help telemachus 
styles formatting describing telemachus works mention style approach 
fundamental notion attribute style specifies values attribute formatted page 
able produce sophisticated formatting attribute style arbitrary pieces html code called prefix format string suffix format string attribute values enclosed generating pages 
give example consider attribute room page scheme program page corresponding room conference session held 
obtain simple boldface style color red room names pages may specify attribute style room font color red font 
way room name say panoramic room piece html code form font color red panoramic room font 
produced page 
want elaborate formatting room name written red boldface preceded arrow image may style html table needed correctly align image text room table border rows cols 
tr td width img src arrow gif width td 
td font face color red font td tr table 
mainly refer html telemachus easily handle mark language 
types attributes telemachus allows specify infix format string keep development simple elaborate 
page style page scheme program page header html 
head html header head 
title page title title 
body background icons na gif 
name hr 
table 
table 
name tr td 
td 
room td table border rows cols 
tr td width img src arrow gif width td 
td font face color red font td tr table td tr 
ul 
ul 
footer hr 
center 
href img src icons gif br 
site created href www dia uniroma araneus araneus br 
href mailto webmaster www aaa com webmaster center 
body 
html 
example style produced telemachus page scheme program page seen simple mechanism fact flexible 
page style specifies format directives page scheme contains set attribute styles attribute adm scheme page plus header section footer section 
header footer specify graphical features associated page specific attribute example page background banners 
attribute styles header footer consist arbitrary pieces html code 
shows fragment possible style page program page style simplified presentation purposes 
generating instances page scheme penelope loads corresponding page style formats data page header footer defined style attribute value enclosed format strings 
styling mechanism provided telemachus finer 
order guarantee compromise rapid prototyping accuracy final product attribute styles page styles notion site styles 
site styles presentation design phase order produce version page styles formatting choices common site 
useful order speed layout phase fact usually pages site organized common lines background color font face font color link format example site style reported 
seen site style essentially generic page style sense specifies header footer common page schemes site plus number formats common attributes give type text image link list site 
site may site styles 
telemachus starting directives order automatically generate version page styles different page schemes 
page styles customized changing header footer attribute styles order vary layout page 
page schemes associated page style penelope adopts default style 
site style sample sty header html 
head html header head 
title page title title 
body background icons na gif 
name hr 
text font face color blue 
font 
image link list table 
table 
list tuple tr 
tr 
list tuple element td 
td 
footer hr 
center 
href img src icons gif br 
site created href www dia uniroma araneus araneus br 
href mailto webmaster www aaa com webmaster center 
body 
html 
example site style working telemachus ready discuss telemachus works 
essence presentation design phase goes general formatting specified site styles particular formatting obtained customizing attribute styles page styles 
discussed process designer hardly wants write style code shown examples sample html pages able check chosen layout need generating actual site 
telemachus conceived support process 
styles completely transparent designer allows write sample html pages styles automatically produced html pages called templates 
page template prototypical html page contain actual data place holders 
example template page scheme program page contain actual room numbers strings corresponding attribute names form room 
similarly site template sample page actual data strings corresponding types reported text link detail template fully standard html page edited designer preferred editor limitation place holders changed refine presentation browsed html browser browsing template closely resembles browsing corresponding pages designer immediate feedback corresponding pages site look 
templates convenient tool style 
ideas presentation design process sketched 
essence users templates telemachus takes care generating corresponding styles 
ffl starting point site templates sample page showing text images links lists formatted specified pdl site description derived pre existing html page created scratch progressively refined layout satisfactory 
ffl site template ready telemachus invoked 
analyze template generate corresponding site style syntax shown 
site template page template page template page template page style page style page style site style site pages editing editing editing editing telemachus telemachus telemachus penelope gamma delta theta gamma delta theta gamma gamma delta delta theta theta presentation design telemachus site style telemachus order produce version page scheme pdl statement 
generated basis site style templates homogeneous layout 
ffl site templates analyzed needed edited order refine customize attribute layout 
may needed example page schemes different headers different background different icons attributes specific formatting attribute room page scheme program page 
ffl editing phase completed telemachus invoked order produce page styles page templates 
target mark language xml telemachus generates xsl style sheet page scheme basis page style attribute xml element xsl rule generated specifies embed value element pair formatting strings style 
note process presentation maintenance handled independently ones site 
fact page style changed improve site layout sufficient modify corresponding page template telemachus produce new style generate new pages 
actual prototype telemachus provides advanced features styles parameters incremental generation styles 
detailed treatment issue refer reader telemachus user manual 
homer seen previous sections designing implementing site complex task involves aspects requires deal data different perspectives mapping 
large complex web sites complexity design maintenance process reduced adoption systematic design methodology set models design steps lead conceptual specification domain interest implementation actual site 
developed thorough methodological framework designing data intensive web sites araneus methodology 
key feature approach web site design want emphasize clear distinction different levels database design ii hypertext design iii presentation design 
separation justified observation levels largely independent 
essence adopting methodology designers start conceptual description site domain entity relationship scheme set precise steps progressively moves database logical design produces database relational scheme hypertext design produces site adm scheme presentation design producing page templates 
simplify design process automate implementation phase site design artifacts developed homer case tool conceived support designer successive design steps 
natural complement approach site design evolves different levels different descriptions formal model 
homer main facilities graphical user interface second module automatically generate code run different tools order implement actual site 
briefly homer works follows 
system takes input declarative specification starting conceptual scheme data automatically translates logical relational database scheme 
graphical interface helps designer specifying transformations constructs database conceptual scheme manipulated order obtain desired hypertext 
progressively applying transformations designer shapes adm scheme resulting site 
adm description site generated specified transformations homer automatically generates pdl code input page creation phase 
neptune web information systems seen tools described sections represent flexible platform developing data intensive sites 
provide little support adding services application site 
goal extend framework models tools handle application level design implementation phase 
respect workflows represent promising direction :10.1.1.101.5199
born automate business processes coordinated procedures activities aimed realizing business objective workflow management system natural solution deliver services web 
adopting workflows leverage consolidated platform terms design modeling 
approach extend framework developed previous sections neptune workflow management system conceived cooperate system tools 
framework development complex information systems simple ideas 
site intermixed portions catalogue portion data access pages access browse site underlying database ii workflow execution portions giving access services execution workflow 
give example consider conference site introduced probably site public part publishing data accepted papers program organization private part handle review process naturally implemented workflow 
similar argument holds electronic commerce sites 
different portions seamlessly combined site sense users may want browse data running workflow starting workflow browsing site 
logics workflow handled neptune generates java code coordinate various activities assign tasks actors authenticate accesses workflow necessary site interface workflow interaction actors workflow management system happens pages site pages generate client server interaction neptune client side penelope plus telemachus server 
database conceptual design er scheme 
database logical design relational scheme 
workflow design 
hypertext conceptual design 
hypertext logical design adm scheme 
presentation design page templates 
site generation dbms neptune penelope telemachus pq qs ae ae ae ae araneus web site design methodology side contain suitable forms collect user inputs execute tasks 
communication site workflow management system database store workflow state user inputs 
want stress fact data access part workflow execution part site needs hypertext presentation design phase fully integrated data access part linked 
workflow changes design process 
shows extended version methodology design implementation 
details database hypertext design phases 
workflows designed described lines 
seen different levels data application hypertext presentation clearly distinguished time interact design implementation process 
implementation neptune development experiences prototype neptune shown benefits approach 
site fact natural platform implementing workflow interface design development workflow nicely fits inside design implementation framework 
araneus project home page 
www dia uniroma araneus www araneus 
faculty engineering university 
www ing 
italian 
hotmail web site 
www hotmail com 
jdbc database access api 
www javasoft com products jdbc jdbc html 
microsoft web site 
www microsoft com 
sql standards page 
www com sql html 
extensible markup language xml specification 
recommendation february 
www org tr rec xml 
xml linking language xlink 
working draft march 
www org tr wd xlink 
xml pointer language xpointer 
draft march 
www org tr wd 
arocena mendelzon 
weboql restructuring documents databases webs 
fourteenth ieee international conference data engineering icde orlando florida 
atzeni mecca merialdo :10.1.1.145.2594
weave web 
international conf 
large data bases vldb athens greece august pages 
www dia uniroma araneus 
atzeni mecca merialdo 
design maintenance data intensive web sites 
vi intl 
conference extending database technology edbt valencia spain march 
casati ceri pernici pozzi 
conceptual modeling workflows 
th international conference object oriented entity relationship modelling gold coast australia december 
lecture notes computer science vol 
springer verlag pages 

object database standard odmg 
morgan kaufmann publishers san francisco ca 
workflow management coalition 
workflow model 
wfmc document tc www wfmc org 
workflow management coalition 
workflow internet catalysts radical change 
wfmc white www wfmc org 
fernandez florescu kang levy suciu 
catching boat strudel experiences web site management system 
acm sigmod international conf 
management data sigmod seattle washington pages 
fraternali 
conceptual model tool environment developing scalable dynamic customizable web applications 
vi intl 
conference extending database technology edbt valencia spain march 
georgakopoulos hornick sheth :10.1.1.101.5199
overview workflow management process modeling infrastructure automation 
journal distributed parallel database systems 
hull yoshikawa 
ilog declarative creation manipulation object identifiers 
sixteenth international conference large data bases brisbane vldb pages 
mecca atzeni merialdo 
araneus web base management system 
acm sigmod international conf 
management data sigmod seattle washington pages 
exhibition program 
www dia uniroma araneus 
miller sheth kochut singh 
meteor web workflow management system 
journal intelligent information systems 

language publishing virtual documents web 
proceedings workshop web databases webdb conjunction edbt www dia uniroma webdb 
roth korth silberschatz 
extended algebra calculus nf relational databases 
acm transactions database systems december 
simeon cluet 
yat build web server 
proceedings workshop web databases webdb conjunction edbt www dia uniroma webdb 

incremental maintenance hypertext views 
proceedings workshop web databases webdb conjunction edbt www dia uniroma webdb 

