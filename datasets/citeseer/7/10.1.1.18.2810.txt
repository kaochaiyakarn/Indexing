uml behavior oriented multi agent simulations christoph kl gl rainer frank department artificial intelligence university am informatik uni de developing multi agent simulations straight forward active entities original correspond active agents model 
plausible behaviors produced easily 
real world applications satisfy requirements concerning verification validation reproducibility 
standard framework designing multi agent model gain advantages fast learnability wide understandability possible transfer 
show uml specify behavior oriented multi agent models 
focus activity graphs representation different forms interactions graphs 
motivation multi agent model captures behavior system level active entities maps simulated active entities 
coarse grain level analysis far intuitive describe model terms agents roles goals activities set formulas 
executable simulations concrete refinement implementation exhibits properties difficult deal 
step model concept running experiment way trivial modeler bridge gap top analysis bottomup implementation 
concurrent interactions form central part multi agent systems 
concrete implementation tricky 
complex agent behavior sophisticated environments leads large models effortful design implement consistent way 
huge amount parameter fixed executable simulation 
consequence tools frameworks essential applicability multi agent simulation method analyzing systems 
ideal framework modeling easy learn generates understandable representation provides necessary primitives constructors scales concrete domains 
addition methodological points representation model framework clear understandable wide group people working domain 
leads hope models multi agent simulation satisfy strong requirements concerning verification validation traditional simulation models exposed 
prominent example established framework uml unified modeling language 
multiple diagram types specification structure dynamics uml provides ocl object constraint language formal language attaching additional information invariants constraints graphical specification 
want introduce behavior oriented multi agent models section 
short survey existing frameworks area agent oriented simulation software engineering presenting application uml problem 
ends short sketch works 
behavior oriented multi agent simulation multi agent model general seen simulated multi agent system exists simulated environment 
natural form modeling especially societies active entities original system interpreted active ones model 
existing multi agent models focus different aspects society development dependence networks agents beliefs huge amount massively interacting simple entities 
trying develop plausible framework human reasoning interacting groups organizations restrict models simple validate able side capture sophisticated behaviors agent level 
call multi agent models behavior oriented focus internal reasoning processes beliefs goals desires agents behavior effects actions interactions 
focus motivated primary application domain simulation social insects applications show broad applicability approach 
behavior oriented multi agent models follow main concepts help structure complete multi agent simulation supporting extensive models non trivial behaviors huge amount entities agent body set sorted state variables rule behavior representation augmented structures primitive activities 
associating task fulfilment activities incorporating organizational concepts roles additionally facilitates development complex society models 
concepts implemented modeling simulation environment called sesam shell simulated multi agent systems framework proprietary specification language 
leads problem lacks generally applicable method developing multi agent simulations 
standard framework additional advantage generating models reproducible modeler familiar standard 
goal support construction models satisfy high standards quality concerning validation verification standard simulation models 
standard framework step concept implementation major part viable solution 
related modeling frameworks formalisms lots frameworks tools languages multi agent simulation 
approaches range schemata systems originating simulation area languages modeling multi agent systems developed distributed artificial intelligence complete survey see 
existing frameworks developed simulation area multi agent simulation seen enhancement standard individual oriented simulation agents taken equipped sophisticated behavior comparison individuals process oriented models cellular 
line interpretation approaches agent oriented simulation tackle management internal processes internal agent structures 
frameworks agent oriented devs emotion cognition social status provide schemata internal state structure agent 
comparable traditional agent architectures refer sets state variables 
level support modeling simulation environments agentsheets www agentsheets com visual programming swarm www swarm org focus animation evaluation tools 
tackle just concrete implementation problem gap concept implementation 
agent oriented software engineering frameworks building multi agent systems central issue area agent oriented software engineering 
existing schemata provide support different levels different stages development 
methods gaia mas commonkads concentrate analysis design task providing means capturing views models agent system top manner 
actual implementation tackled user directed standard frameworks uml 
hand declarative languages schemata specification multi agent systems exist 
start bottom agents behavior 
specifications executable languages simulation 
area social simulation analogous parallel rule interpreting system strictly declarative modeling language developed 
problem frameworks operate just complete agent level support structuring actions interactions 
behavior agents formulated unstructured set rules 
specification language meant bridge gap theoretical models implemented systems framework luck 
schemata object agent autonomous agents extended capture different forms components agent architectures organizational structures dependence networks 
major criticism approach drawbacks formulation dynamic aspects 
major advantage direct transformation object oriented class structures single agents 
agent oriented software engineering general seen extension object oriented analysis design implementation 
usage enhancement standard object oriented techniques proximate idea 
area social simulation suggestion general framework multi agent simulation social science called 
framework uses standard uml sequence diagrams describing interactions 
agent uml side focusses enhancement sequence diagrams apt representing sophisticated interaction protocols due message structure 
agent uml provides additional means specifying negotiations multiple concurrently active participants 
purpose designing behavior oriented multi agent simulations standard uml satisfying want show sections 
uml multi agent simulations class diagrams class diagram agent class shows external view kind agent 
external view divided accessible part agent memory state variables perceivable agents interaction methods 
methods named contain interaction partner example special class environment arguments 
methods specifying interactions documented activity graph associated agent class 
completely describing interaction situation diagrams agents participate interaction situation needed 
activity graphs general components activity graph uml shows behavior depicted activity flow objects object oriented program 
main nodes activity graph actions activities 
compositions actions 
additionally exist state nodes known uml state graph 
state graphs seen specialization activity graph uml describing state changes single object contrast activity changes concerning objects activity graph 
nodes signal receiving sending nodes 
nodes important modeling interactions explained detail 
transitions nodes defined form conditions 
frequently condition transition activity consists termination activity activation state activity 
modeler may rhombus node show explicit decision determining state activity 
activity graphs multi agent models design multi agent system general activity graphs describing activity flow simulated agent classes 
transitions conditions external perceptions internal state values goals desires intensions agent architecture uses concepts 
transition node associated conditions form crucial part model explicit decision node 
observed applications domain experts state behaviors idle behavior model capture waiting 
better represented state nodes 
exist special nodes start node node 
agent starts behavior start node entails actions activities incoming transitions 
filled circle depicts start node 
analogous way node dead behavior agent outgoing transitions interpreted terminating state agent 
node filled circle surrounded unfilled circle 
usage uml activity graphs straightforward describing modeled behavior generating executable code agent 
relationships interaction agents explicitly shown 
involve agent agent agent environment interactions 
combination activity graphs necessary 
managed shown 
interaction types relationships behavior agents hidden activities different graphs 
examining possible interaction types suggest interactions expressed standard activity graphs general possible interaction forms direct indirect environment interactions 
combining activity graphs distinctions necessary receiver may instance agent class instance agent class combination 
interaction may forms object flow prominent method indirect interactions 
agent creates resource object perceived agents consequence adapt behavior due modified environmental configuration 
pheromone trail implemented pheromone resource objects depositing trails corresponds exactly kind interaction 
agent creation important component dynamic variable structure model 
example production offsprings frequently biological models 
manipulation public instance variables technical form 
exhibits subtypes sending agent modifies values direct receiver intermediary 
kind represents sort indirect broadcast sender changes shape agents able perceive 
manipulating variables receiver corresponds directed interaction 
changes concern variables environment observe special case 
directed broadcast depending environment serves communication medium 
standard form interaction synchronous directed sending receiving messages 
part complex negotiation protocols 
special form broadcast communication synchronous form 
kind interactions represented activity graphs sending receiving nodes specification interaction activity graphs uml provides facility describing interactions signal sending receiving nodes activity graphs 
inserting nodes activity graph straightforward additional information concerning concrete interaction necessary 
adding enhanced specification sending receiving node combination sophisticated depends interaction type 
clarify sender receiver draw link nodes attach additional node link 
optional procedure uml want restrict establish transparent representation 
detail form additional node depends interaction types see illustration object flow general specified signal sending receiving nodes link annotated class diagram exchanged objects 
agent creation represented link sender node start node new agent activity graph 
special case receiver node addressable created agent 
variable manipulation propose augment link documentation node contains necessary information sender receiver involved variable 
unfortunately documentation node standard uml just contains unstructured text 
additional node type may appropriate 
restricting ourself standard uml postpone suggestions additional node types papers 
interaction direct messages specified object flow links documentation annotated links 
depends complexity message 
details kind interaction better specified sequence diagrams 
interaction object flow interaction object generation interaction variable modification ant behavior 
pheromone deposit trail follow trail creating 
adult behavior behavior interaction creating ant behavior forage interaction creating adult interaction variable food nest transform nest behavior 
specifying different interactions types uml 
sequence diagram store food sequence diagram message passing objects described 
xaxis participants interaction situation listed axis timeline 
direct interactions agent uml proposes enhancements uml sending message concurrently active agents 
aim agent uml provide framework sophisticated reusable negotiations 
behavior oriented multi agent simulations kind interactions may rarely due focus agent behavior sophisticated internal reasoning processes prerequisites complex negotiation abilities 
interactions simulations take form indirect ones means happen coordinated changes environment 
asynchrony important features kind interaction 
sequence diagram suited 
documenting typical path interaction useful 
modeler sequence diagrams case keep mind participants concrete sequence primitive interactions just examples fixed complete specifications protocols 
specific protocol interactions useful formulate invariants constraints system contains interactions 
uml provides facility ocl 
object constraint language ocl overlooked feature uml possibility augment uml diagrams ocl expressions 
ocl object constraint language formal language expressing side effect free constraints 
modeler ocl specify constraints expressions attach models aim formalizing necessary information testing verifying simulations 
ocl introduced added uml graphical specification class model precise unambiguous specifying details 
need describe additional constraints objects agents model 
ocl constraints written natural language consequences ambiguities 
hand formal languages tend hard read due mathematical background 
ocl tries fill gap formal language easy read write 
precisely ocl 
specifying invariants classes stereotypes describing pre post conditions operations methods describing guards event triggers transitions tracing associations object graphs specifying constraints operations operation constraint read definition operation 
application areas specially relevant describing indirect interactions multi agent simulation 
kind declarative explicit information interacting system components special useful procedural definition interactions lacking 
identify different kinds invariants local global 
invariant class called local invariant independent number participating agents 
instances different class involved call global invariant 
example see 
energy level double size double ant deposit trail pheromone trail pheromone environment energy level ant allinstances sum energy level ants list ants preys list prey nest ants count ants sum size preys sum size maxsize local invariants global invariants local class diagrams precondition jaw full true post condition jaw full true 
ocl multi agent model 
pick prey pre post condition activity important application assignment pre post conditions activities 
shows example 
ways applying ocl useful 
ocl language formulating conditions transitions activity graphs described 
analogous way side effect free computation specified ocl 
ocl provides completely precise semantics possible restrict power language making executable 
analyzing applicability usefulness concrete applications behavior oriented multi agent simulations remains main part 
working environment designing implementing executable simulations concepts described 
examined standard uml specifying multi agent simulations 
kind multi agent models characterized focus behavior interactions agents simulated environment 
activity graphs prominent mean formalizing behavior interacting agents 
general specifying behavior activity flow agent agent class 
standard uml interactions explicitly tackled hidden activity nodes directly connected standard arrows 
multi agent simulations drawback interactions form central part 
widely features uml viable solution representation interactions 
identified major types interactions behavior oriented multi agent simulations 
sending receiving nodes augmented links specified 
augmentation consists additional nodes single class diagrams documentation nodes 
starting point unstructured text information structured node improve description interaction 
uml provides important feature ocl 
formal expression language precise unambiguous 
describe important facets model reduce gap modeling language concrete implementation 
extensive phase evaluation suggestions real world applications want show uml multi agent simulations improves quality model description 
hope enables modeler build execute multi agent simulations high standard validation verification propagated standard simulation models 

booch jacobson rumbaugh rumbaugh 
unified modeling language user guide 
addison wesley object technology series 
addison wesley 

kl gl 
multi agent simulation concept tools application german 
addison wesley 

kl gl 
activity behavior modeling support multi agent german 
phd thesis universit 


object oriented agent oriented simulation implications social science application 
mueller gilbert doran editors social science chapter pages 
springer 

urban 
model simulation multi agent systems 
gilbert editors tools techniques social science simulation 
physica verlag heidelberg 

ller 
architectures applications intelligent agents survey 
knowledge engineering review 

repenning 
agentsheets interactive simulation environment user programmable agents 
proceedings interaction tokyo japan 

minar burkhart langton 
swarm simulation system toolkit building multi agent simulation 
www santafe edu projects swarm 

wooldridge jennings kinny 
methodology agent oriented analysis design 
proceedings rd internation conference autonomous agents 
acm press 

garijo gonzales 
survey agent oriented methodologies 
ller singh rao editors intelligent agents proceedings atal volume lnai 
springer 

fisher 
representing executing agent systems 
wooldridge jennings editors intelligent agents proceedings atal volume lnai pages 
springer 

moss wallis edmonds 
multi agent language organizational modelling 
cpm report centre policy modelling 

luck griffiths inverno 
agent theory agent construction 
ller wooldridge jennings editors intelligent agents iii proceedings atal volume lecture notes artificial intelligence pages 
springer 

lopez lopez luck inverno 
framework agent architecture dependence norms obligations 
pre proceedings maamaw 


concepts agent framework interdisciplinary social science simulation 
journal artificial societies social simulation 

odell van dyke parunak bauer 
extending uml agents 
proceedings agent oriented information systems workshop aaai 

bonabeau dorigo theraulaz 
swarm intelligence natural artificial systems 
santa fe institute studies sciences complexity 
oxford university press oxford 

omg 
object constraint language specification 
www omg org doc ad 

warmer kleppe 
object constraint language precise modeling uml 
addison wesley object technology series 
addison wesley 
