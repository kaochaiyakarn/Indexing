journal logic programming special issue reasoning action change pages 
reconciling event calculus situation calculus robert kowalski sadri department computing imperial college queen gate london sw bz emails doc ic ac uk fs doc ic ac uk compare situation calculus event calculus formulate logic programs prove properties reasoning completions augmented induction 
show situation calculus event calculus imply 
derivation event calculus situation calculus requires induction derivation situation calculus event calculus 
show certain concrete applications missing car example require induction situation calculus derived induction event calculus 
compare calculi need number small modifications 
product modifications resulting calculi reason actual hypothetical states affairs including counterfactual ones 
show core axioms calculi extended deal domain state constraints certain types ramifications 
illustrate examples legislation blocks world 
keywords temporal reasoning event calculus situation calculus actual hypothetical events revisit earlier comparison situation calculus event calculus general approach representations situations spirit van denecker de schreye 
resulting general formalisations calculi combine situation calculus ability represent hypothetical situations event calculus representation actual events 
simplicity restrict representation times situations transitions situations spirit kakas miller 
formulate calculi logic programs reason iff completions induction situations integrity constraints approximations intended semantics programs 
technique reasoning logic programs induction introduced clark 
resulting formalisation situation calculus similar formalisation pinto reiter 
show main result reported holds general versions event situation calculi 
result states calculi logically imply 
derivation event calculus situation calculus requires induction derivation situation calculus event calculus 
indication event calculus may powerful situation calculus despite equivalence supported analysis missing car example section 
allow events updating deductive databases passing legislation initiate terminate holding arbitrary sentences 
formalise reasoning sentences proof predicate defined metalogic program 
state domain constraints certain kinds ramifications dealt automatically product formulation 
sections logic programming formulations situation event calculi semantics terms iff completions integrity constraints induction 
section ease list axioms integrity constraints far 
section show situation calculus induction implies event calculus event calculus induction implies situation calculus 
sections show calculi factual hypothetical reasoning including counterfactual reasoning extended deal ramifications 
section conclude 
situation calculus axioms clauses constitute core formulation situation calculus logic program 
define sentences hold situation result result transition state action type holds result happens initiates holds result happens holds terminates terms starting upper case variables 
indicated variables assumed universally quantified front formula occur 
clause defines sentences hold initiated action 
second clause called frame axiom defines sentences hold held action terminated 
definitions predicates initiates terminates domain dependant 
example fact act donor giving object recipient initiates property possessing terminates property possessing defined clauses initiates give possess terminates give possess similarly yale shooting problem fact gun loaded act shooting initiates death turkey terminates life represented conditional clauses initiates shoot dead holds loaded terminates shoot alive holds loaded formulations situation calculus single predicate abnormal example predicates initiates terminates 
frame axiom formulation form holds holds result formulation derive analogous formula holds holds result happens initiates terminates iff completion clauses reasoning formulation situation calculus program 
iff completion discussed section 
formulations situation calculus employ abnormality predicate effect interpret abnormal initiates initiates 
prevents explicitly contradictory properties holding simultaneously 
prevent simultaneous holding properties 
pn implicitly contradictory due presence domain specific integrity constraints holds 
holds pn 
formulation prevent explicitly implicitly contradictory properties holding simultaneously 
discuss issue context event calculus show problem dealt different ways depending set event descriptions complete 
predicates initiates terminates abnormal facilitate comparison event calculus 
argued provide semantically meaningful formulation situation calculus distinguishing abnormalities due initiation sentences due termination 
restricting situations possible situations inclusion condition happens restricts holding properties situations possible 
notion possible situation represented explicitly type predicate situation defined follows situation situation result happens situation condition happens consequently replaced condition situation result introduces happens indirectly 
integrity constraints ensure event happens possible event sense happens possible situation preconditions hypothetically hold situation holds happens precondition situation happens formulations situation calculus happens situation equivalent 
integrity constraints thought imposing restrictions predicates happens definition unknown incomplete 
discuss semantics integrity constraints section 
event occurrence happens property holding holds actual hypothetical reduced determining situation result respectively actual hypothetical 
turn done means assertions actual actual actual result sequence events asserted actual 
distinction actual hypothetical situations affect statement proof main theorem section 
shall discuss actual hypothetical events detail section 
domain specific predicates initiates terminates definition predicate precondition domain dependent example precondition give possess standard formulations situation calculus preconditions actions ignored catered including extra conditions analogues clauses 
fact inclusion condition happens integrity constraint achieves similar effect approaches 
initial situation discuss semantics situation calculus section need discuss representation initial situation 
possibilities 
define properties initial situation means clause holds initially appropriate clauses defining predicate initially 
alternatively may assume loss generality holds initial situation properties initial situation properties successor initial situation result creation creation defined clauses form initiates creation 
purpose second alternative convenient 
creation event initiate property preconditions need integrity constraint happens creation prevent asserting occurrence creation situation initial situation 
semantics situation calculus program different semantics defined logic programs 
compare situation event calculi convenient completion semantics augmented integrity constraints induction 
circumscription completion semantics augmented induction seeks formalise intention set axioms case halves logic programs characterises smallest set relations satisfy axioms 
case program consisting horn clauses equality smallest set unique minimal herbrand model program 
semantics associated program virtually existing semantics logic programming 
horn clause programs iff completion approximation intended meaning iff completion augmented axioms induction better approximation 
case normal programs complicated 
circumscription logic programming semantics diverge different semantics logic programming diverge 
semantics common iff completion augmented induction safe approximation 
safe sense logical consequence iff completion augmented induction property program true intended models program characterised semantics 
iff completion construction completion logic program known 
applied construction gives holds result happens initiates result happens holds terminates sc clark equality theory cet consists unique name axioms including ai result result result cet cet usual axioms equality 
similarly need complete definitions initiates terminates precondition situation predicates happens actual 
integrity constraints integrity constraints relational deductive databases order sentences express invariant properties relations definitions updated 
iff argued iff completion order axiom schema induction approximates intended minimal herbrand model exactly sense logical consequences peano axioms arithmetic approximate intended model arithmetic 
model understood turn unique minimal herbrand model horn clauses define addition multiplication 
completions induction provide safe approximation intended semantics definitions sense meant true intended models 
integrity constraints understood way affect intended meaning definitions simply help characterise meaning syntactic terms halves definitions induction axioms 
integrity constraints safely additional premises prove properties logic programs 
integrity constraints play useful role describe properties predicates definition describe properties predicates definitions unknown inaccessible 
instructive example integrity constraints semantic query optimisation integrity constraints describing extensional predicates definitions intensional predicates optimise query transmitting extensional database 
integrity constraints similarly describe properties abducible predicates definitions unknown incomplete appear answers queries way extensional predicates appear result transforming query means semantic query optimisation 
formulations situation calculus event calculus predicates happens actual understood predicates inaccessible partially accessible definitions integrity constraints properties complete unknown definitions 
consequently integrity constraints premises prove properties logic programs augmented definitions happens actual 
long application complete definition predicates integrity constraints hold intended models definitions properties proved aid integrity constraints properties definitions 
temporal ordering limitations formulations situation calculus situations need named explicitly terms sequence actions initial state 
result virtually impossible represent narratives incomplete information 
limitation overcome relating situations means ordering relation 
ordering relations defined situation calculus shanahan pinto reiter 
purposes convenient introduce term trans representing transition situation result caused event type allows occurrence number alternative events immediately situation giving rise branching timelines 
section consider case happens interpreted possible case happens defined way properties definition 
definitions auxiliary predicate succession time points trans case definitions definitions need completed 
name completions 
need unique name axioms clark equality theory result trans cet trans cet ai trans trans cet induction induction defined time points situations 
convenient purposes 
vs situation result situation result ind ea metavariable standing order formula peano arithmetic 
completed definitions show properties predicate proof main theorem section missing car example section 
si si trans situation situation happens trans simplified event calculus original version event calculus allowed concurrent partially ordered events persistence properties backwards forwards time 
catered properties holding time periods time points 
compare event calculus situation calculus shall consider special case analogous restrictions 
obtain special case removing consideration backward persistence properties preprocessing away time periods 
replacing conditions referring properties holding time periods definition terms events happening time points 
special case introduced 
showed special case completion form augmented integrity constraints power original event calculus overcomes deficiencies 
special case event calculus core single axiom holds happens initiates ti happens terminates ti expresses property holds time point initiated event happened earlier time point intervening event happened terminate property 
condition ti initiating event happens 
inequality preconditions events hold time terminated event 
restrict version event calculus special case relation time points identified case replace condition assumptions different events occur time expressed cet event initiates terminates property 
event tokens unnecessary individual events identified action event types situations cause transition 
may instantiate event calculus axiom means particular representation events representing event tokens pairs consisting action event type situation reformulates event calculus predicates situation calculus vocabulary follows replace happens happens trans trans time result occurs 
simplicity abbreviate happens 
replace initiates initiates 
replace terminates terminates 
restrict holding properties situations 
resulting completion event calculus axiom iff form holds situation happens initiates trans happens terminates trans ec version situation calculus formulation simplified event calculus reasoning actual hypothetical situations events 
formulations situation calculus simplified event calculus differ core axioms sc ec 
remaining axioms ind cet constraints completion type definition common calculi 
summary axioms integrity constraints situation calculus core axiom sc holds result happens initiates result happens holds terminates event calculus core axiom ec holds situation happens initiates trans happens terminates trans situation type definition completion definition type situations result happens situation definitions trans situation result tl trans result situation result ti ti integrity constraints holds happens precondition situation happens happens creation axiom schema induction ind vs situation result situation result clark unique name axioms get get get get get ai result result result result trans trans ai trans trans relationship calculi relationship formulations situation event calculi stated follows 
theorem ec sc ii sc ind ec sc ec iff forms situation calculus event calculus core axioms respectively ind axiom schema induction consists type properties common calculi 
proof ec equivalent holds event form situation happens initiates result happens terminates trans event form situation happens initiates trans happens terminates trans equivalence shown replacing condition trans definition distributing disjunction conjunction 
hand sc equivalent holds sit sit form result happens initiates sit form result happens holds terminates difficult show event sit equivalent theory comm lemma stating time trans result assumption events happen situations 
type event equivalent result happens situation happens initiates trans terminates happens terminates trans equivalent turn sit instance ec ec holds situation si happens initiates trans happens terminates trans fact situation result trans 
ii proof part theorem identical part point ec show event equivalent comm sit 
part ii induction ec induction hypothesis ec theorem proved 
assumption sc proves induction ec 
complete proof need prove base case induction show ec holds 
ec case equivalent holds states holds initial state 
immediate consequence sc 
induction shown holds conditions ec situation sc conditions ec head holds imply situation condition removed prove ec 
actual hypothetical situations distinguishing actual hypothetical situations event calculus originally intended representing reasoning actual events situation calculus designed reasoning hypothetical events situations 
inclusion conditions happens sc ec intended unify treatment hypothetical actual events 
case standard versions event calculus events actual integrity constraints ii restrict actual events possible 
case standard formulations situation calculus events hypothetical integrity constraints properties definition means event type possible situation definition follows happens holds precondition situation creation employ integrity constraints ii capture common ground shared actual hypothetical events 
notice ii half definition 
represent actual event calculi simply assert event happened resulting situation actual 
represent hypothetical event assert event happened input assumed abduction say resulting situation actual 
ensure sequence events actual need ensure integrity constraints properties definition actual actual actual result ai actual result actual result reasoning multiple timelines example example shows information event timeline derive information event timeline 
example neutral respect timelines actual 
informal description problem 
event creation happens initial state initiates gun loaded individual alive 
event spinning chamber gun happens 
consider alternative scenarios 
event waiting happens second event shooting 
problem show shooting individual alive waiting gun remained loaded 
reasoning possible standard formulations situation calculus 
show possible formulation event calculus 
formalise problem follows 
suppose holds loaded result wait result spin result creation halves definitions initiates terminates include assertions 
initiates creation loaded initiates creation alive terminates shoot alive holds loaded assume property complete definitions initiates shoot alive initiates wait loaded initiates spin loaded assumptions definitions initiates terminates 
assumption stating gun loaded waiting half ec derive terminates spin result creation loaded half ec conclude holds loaded result spin result creation terminates shoot result spin result creation alive contrapositive half ec conclude holds alive result shoot result spin result creation ec type show situation result shoot result spin result creation 
relatively minor differences example treatment example 
situation structure situation calculus uses general time points spirit original simplified event calculus 
second properties completion initiates terminates uses iff completion definitions explicitly 
missing car example problem illustrates theorem section 
problem solved calculi 
solution requires induction situation calculus event calculus 
scenario car parked car park initially 
problem explain absence car car park 
formally know holds trans park furthermore assume assertions included definitions initiates terminates 
initiates park terminates steal terminates tow assume property complete definitions terminates steal tow conclude time car parked stolen away 
assumption contrapositive half ec lemma subsection derive happens terminates trans park property terminates get expected result happens steal tow trans park derivation situation calculus complicated requires induction 
sc type derive result happens situation trans park initiates holds terminates property terminates distributing disjunction conjunction get result happens trans park disjunct rest represents unbounded number answers obtained similar manner 
easy see obtain single general event calculus necessary induction 
ramifications extending sc ec predicate holds understood expresses sentence named holds explicitly axiom situation named situation thought time point set sentences theory holds time point 
interpretation holds special case predicate represent proof predicate metaprogramming 
general case holds name arbitrary sentence 
generality necessary example applications formalisation deductive database updates passing amendment legislation belief revision intelligent agents 
practice examples suffices name sentence logic programming form 
standard formulations situation calculus limit cases names atomic sentence negation atomic sentence 
holds caters possibility name arbitrary sentence 
core situation calculus event calculus axioms apply change general case 
additional axioms completely characterise set sentences hold time 
characterise sentences hold explicitly axioms time 
define set sentences hold explicitly implicitly need additional axioms demo holds demo demo demo demo demo demo demo demo demo demo vx expresses sentence named demonstrated object level theory situation clauses constitute familiar vanilla meta interpreter defines proof predicate propositional horn clause theories 
understood defining object level negation failure prove clause regarded relating called ground non ground representations variables discussed 
exemplify logic programming metalanguage define proof predicate 
clauses added definition extend object language logic programming case 
interprets object level negation negation failure replaced clauses define negation differently 
simplicity purposes assume completion ld definition predicate 
core situation calculus core event calculus axioms require modification deal initiation termination arbitrary sentences integrity constraint needs generalised demo happens precondition take account fact preconditions events ramifications events 
similarly domain specific assertions initiates terminates predicates may generalised 
example initiates shoot dead demo loaded terminates shoot alive demo loaded example legislation example illustrates need extend holds predicate means demo 
bna bna name british nationality acts respectively 
simplicity uncompleted representation time points situations 
happens bna happens bna initiates bna citizen uk born uk terminates bna citizen uk born uk happens accept belief happens reject belief initiates accept belief born mary uk terminates reject belief born mary uk assume completion event bna bna terminates law born uk citizen uk event accept belief reject belief terminates belief mary born uk 
original simplified event calculus axiom introduced section implies holds citizen uk born uk holds born mary uk ds imply demo citizen uk demo born uk demo born mary uk transitivity demo citizen mary uk believed mary citizen uk 
similar result obtained situations time points 
simply situations sl corresponding times just respectively assert result accept belief sl ec transitivity demo citizen mary uk situation result bna standard treatments situation calculus restrict predicate holds atoms negation represent kind reasoning 
approximate called state domain constraints 
example domain constraints formulate domain specific axioms terms holds terms demo 
treatment derives analogues domain constraints basic assumptions 
expressing terms demo holds enables complete definition holds having worry interactions completion domain constraints 
simplified british nationality act example shows combination events initiate terminate holding sentences definition demo predicate deals automatically certain kinds ramifications 
case belief mary citizen uk begins ramification passing bna earlier belief mary born uk initiated 
blocks world provides example 
blocks world example example apart event creation events affect location objects 
property object clear ramification 
act creation thought initiating sentences state object clear covered covered 
axioms domain specific happens initiates terminates predicates common calculi happens creation initiates creation clear covered initiates creation cu covered assume completion sentences initiated creation terminated assume terminates clear covered terminates covered properties completion 
event calculus axiom ec derive holds clear covered trans creation holds covered trans creation derived situation calculus axiom sc 
case proof requires induction 
calculi reason clauses definition demo derive demo clear demo covered trans creation demo covered demo trans creation standard treatments situation calculus similar clauses expressed terms holds demo need explicitly state domain constraints 
case derivable fundamental assumptions 
related compare situation calculus event calculus minor modifications calculi formulated logic programs 
resulting calculi sense equivalent inherit ability standard formulations situation calculus deal hypothetical situations simplified event calculus deal actual states affairs 
purposes adapted technique representing branching time 
representation time general closer purposes comparison restrict special case times situations transitions situations 
seen derivation event calculus situation calculus requires proof induction derivation situation calculus event calculus 
suggests event calculus restricted times situations transitions powerful situation calculus exemplified representation missing car example 
believe general case event calculus similar studied natural flexible restricted case 
illustrated instance section british nationality act example 
careful earlier clarify understanding iff completions induction integrity constraints relation semantics logic programs 
current view understood approximations intended semantics way peano axioms approximate truth arithmetic 
point view may useful understanding better relationship logic programming semantics circumscription defines semantics directly terms truth minimal models 
believe clarifying relationship important direction research situation calculus event calculus provide promising context investigation 
iff completion induction yields formalisation situation calculus closer reiter formulation formulations circumscription 
difference approach treatment state constraints ramifications 
formulation allowing predicate take arbitrary sentences arguments predicate formalise reasoning sentences 
believe investigating closely relationship approaches state constraints ramifications fruitful direction research 
grateful ray reiter murray shanahan mark denecker danny de schreye motivating encouraging mark denecker danny de schreye rob miller marek sergot murray francesca toni helpful discussions 
anonymous referees comments suggestions improving 
research supported fujitsu laboratories 

baker nonmonotonic reasoning framework situation calculus artificial intelligence page 

minker logic approach semantic query optimization cm transactions database systems 

clark negation failure gallaire minker 
eds logic data bases plenum press 

clark order theory data programs proceedings ifip north holland 

eshghi abductive planning event calculus proceedings iclp mit press kowalski bowen 
eds 

kakas miller simple declarative language describing narratives actions journal ol logic programming issue 

kautz logic persistence proceedings aaai page 

kowalski logic problem solving elsevier north holland 

kowalski problems promises computational logic computational logic symposium proceedings lloyd 
ed springer 

kowalski database updates event calculus journal logic programming 

kowalski sadri situation calculus event calculus compared proceedings ilps bruynooghe 
ed mit press 

kowalski sergot logic calculus events new generation computing 

lloyd foundations logic programming springer verlag symbolic computation series 

mccarthy applications circumscription formalizing common sense knowledge artificial intelligence page 

pinto reiter temporal reasoning logic programming case situation calculus proceedings iclp mit press warren 
ed 

reiter proving properties states situation calculus artificial intelligence 

sadri kowalski variants event calculus proceedings iclp mit press stirling 
ed 

shanahan prediction deduction explanation abduction proceedings ijcai 

shanahan explanation situation calculus proceedings ijcai 

van denecker de schreye combining situation calculus event calculus proceedings iclp mit press stirling 
ed 

van denecker de schreye relation situation calculus event calculus journal logic programming issue 

van emden kowalski semantics predicate logic logic programming language acm 


