automated profiling subsystem qos aware services abdelzaher department computer science university virginia charlottesville va advent qos sensitive internet applications multimedia inception priced online services proliferation performance critical applications online trading raise need building server systems guaranteed performance 
embedded software systems designed particular special purpose platform new applications designed run different heterogeneous platforms provide soft performance guarantees commensurate platform capacity adapt efficiently upgrades platform resources system lifetime 
problem profiling application purposes providing qos guarantees new platform significant undertaking 
automated profiling mechanisms built enable efficient computing qos guarantees tailored platform capacity facilitate wide deployment soft performance guaranteed systems heterogeneous platforms 
investigate design automated profiling subsystem essential component general purpose qos sensitive systems 
subsystem estimates application resource requirements adapts software transparently resource capacity underlying platform 
novel aspect proposed profiling subsystem estimation theory profiling 
resource requirements estimated correlating applied workload online resource utilization measurements 
focus explicitly profiling server software 
convergence accuracy online profiling techniques evaluated context apache web server serving static web pages dynamic content 
results show viability estimation theory automated online profiling achieving qos guarantees 
crux real time computing ability deliver predictable performance priori guaranteed temporal behavior 
essential prerequisite delivering guarantees proper application characterization estimation platform resource capacity 
traditionally real time computing dealt special purpose software running closed embedded platforms full knowledge platform resource capacity software execution overheads assumed advance 
today need predictable qos sensitive computing arising myriad new general purpose applications run vast variety commercial platforms little real time support unpredictable open environments 
multimedia applications commerce line trading popular examples 
research real time systems generated solid understanding experience architectures algorithms predictable resource management necessary underlying assumption priori knowledge task resource requirements appears restrictive emerging new category applications 
suggest approach developing real time systems system determines execution requirements tasks automatically self profiling 
approach obviates priori instrumentation profiling compile time techniques traditionally needed precompute execution model parameters 
techniques individually carried target platform upgrade increasing cost deployment software 
pre run time analysis suitable hard real time applications absolute guarantees necessary automated online profiling appropriate emerging soft performance guaranteed systems target platforms may known design time cost deployment minimized 
mechanisms architectures theory automated profiling may constitute quantum leap qos sensitive computing 
efficient mechanisms may largely increase scope real time applications overcoming important barriers providing performance guarantees general purpose systems difficulty characterizing platform capacity application resource requirements 
describe architecture automated profiling subsystem general purpose performance guaranteed services 
automated profiling refines execution parameter estimates purpose computing qos guarantees 
duration estimation depends system workload necessary input profiling subsystem 
show moderately heavily loaded servers may require little minutes establishes sufficiently parameter estimates 
novelty lies recursive squares estimator compute execution model parameters online 
recursive estimator samples load resource consumption regular intervals computes profiling parameter values 
estimate refined receipt new sample 
report experiences methodology model execution apache web server linux 
currently critical services online trading commerce web front web servers run apache code unix platform realistic choice application 
profiling methodology assumes novel resource model suitable servers 
believe addressing server explicitly worthwhile effort due increased complexity load variability seen internet servers 
real time services general deliver different types guarantees guarantees deadline response time semantics guarantees rate semantics 
cases types interchangeable 
example guarantee rate periodic process met honoring respective deadlines successive invocations 
similarly deadline guarantee met imposing lower bound task execution rate 
effort take rate centric view qos specifications 
allows liquid flow approximation resource consumption 
response time guarantees derived rate guarantees straightforward fashion 
remainder organized follows 
section describes related 
section describes service execution model proposed architecture real time services automated profiling formulation profiling subsystem squares estimator 
section describes implementation profiling subsystem 
section evaluates implemented prototype describes experiences web server application 
section concludes summary contributions discussion 
related traditional approach providing guarantees performance critical systems rely static allocation scheduling algorithms assume full priori knowledge resource requirements tasks 
concept dynamic real time systems pioneered spring kernel project introduced describe applications runtime workload unknown admission control time 
resulted innovative planning scheduling algorithms provide online guarantees dynamically arriving tasks 
task execution times assumed known pre run time code analysis techniques 
results analysis depend specific platform hardware operating system 
analysis needed repeated target platform 
advent new category soft real time applications multimedia real time databases commerce concept qos adaptation introduced resource allocation scheduling 
typically approach assumes application tolerate multiple levels service vary quality resource requirements 
requirements different qos levels adaptation mechanism determine right qos level depending load conditions 
qos adaptive service models 
resource allocation mechanisms developed take advantage adaptation 
example ram architecture introduces qos sensitive near optimal resource allocation algorithms applications multiple resource requirements multiple qos dimensions 
presents hierarchical adaptation model complex real time systems algorithms optimizing multi dimensional adaptation cost 
qos model context middleware approach qos management requires application cooperation 
approach extended account practical limitations inaccuracies estimating application resource requirements 
dynamic distillation method proposed adapt network client variability line compression techniques 
multimedia community systems described adaptive qos 
examples include qos framework heidelberg qos model net qos adaptation model extended integrated model omega point architecture qos broker 
odyssey presents framework experimenting application aware adaptation mobile computing platforms 
aqua system developed qos negotiation adaptation support allocation cpu network resources 
survey architectures 
approaches flexible allow adaptation share common predecessors need know resource requirements tasks 
qos mapping stage typically translates qos specifications resource requirements prior knowledge execution times 
takes logical leap progression resource management mechanisms static dynamic inflexible adaptive 
observe user tolerate certain amount adaptation service need know resource requirements advance 
feedback adaptation mechanism adjust qos levels amount resources available trial error fashion automated online profiling refine service execution overheads 
earlier control theoretical feedback mechanisms introduced qos adaptation tolerate limited uncertainty execution model 
investigate complimentary problem online profiling reduce uncertainty time resulting stronger qos guarantees 
model architecture section discuss general execution model service section software architecture automated profiling subsystem section mathematical formulation main component online parameter estimator section 
execution model profiling parameters goal automated profiling subsystem estimate resource requirements service 
general service uses set resources indexed cpu time communication bandwidth bandwidth 
service tasks arrive dynamically aperiodic fashion 
term task operating systems sense 
task denotes repeatedly performed basic server function iteration server basic loop 
example video server task represent sending video frame 
web server task represent serving web request 
ftp server task represent fetching file 
task requires units resource execution 
general service loop executed requests different tasks differ mainly size data operated size video frame web page ftp file 
resource requirements broken data size independent part request header processing overhead data size dependent part data copying transmission cost 
task sends bytes data requirements resource constants depend particular server platform modeling error 
guarantees general purpose real time services accomplished request aggregates customized click basis 
example proposed qos contract model web hosting service guarantee web content provider aggregate service throughput requests hosted pages average size upper bound system service time 
general guarantees may traffic class basis clients traffic aggregated categories depending clients importance content access 
notion aggregate guarantees compatible differentiated services diff serv model defined internet engineering task force ietf deployed network foreseeable 
provide similar guarantees endsystem quantify system resource utilization needed traffic class 
simple algebraic manipulation show eq 
utilization resource due traffic class tasks serving traffic class second av user perspective cumbersome specify qos level individual service accesses 
task arrival rate due traffic class total bandwidth class av mean modeling error 
maximum values negotiated priori class enforced policing 
substituting maximum values eq 
yields fraction resource utilization allocated traffic class 
purpose automated profiling compute values resource enable capacity planning 
optimal estimates reduce av zero 
proven minimizing mean square error reduces mean error zero 
squares estimator profiling 
estimator minimizes mean square error tends find values av approaches eq 

discussion server model supports service type web server serving static files video server fixed compression ratio 
straightforward generalize eq 
eq 
account different types services differ arbitrarily resource requirements 
example ftp server offer secure insecure connections 
video server compress data send uncompressed 
examples constants different depending service type secure insecure compressed uncompressed 
general server export service types numbered describe fixed byte consumption resource task implementing service type total amount resource needed denoted 
generalized server execution model equations kk av respectively arrival rate bandwidth consumed tasks implementing service type serving clients traffic class eq 
describe necessary class resource allocation admission control purposes 
purpose estimation sufficient consider total utilization task rate bandwidth aggregated traffic classes 
total utilization resource due traffic classes denoted 
total arrival rate tasks implementing service type denoted total byte rate sent tasks implementing service type aggregating eq 
traffic classes get expression kk av rest show estimated eq 

apply wellknown regression analysis technique borrowed estimation theory compute coefficients equation rate bandwidth utilization measurements 
proof concept technique determine execution model apache web server 
show resulting model parameters efficiently estimated incoming load arbitrary mix requests static dynamic content 
architecture presents architecture qos sensitive services 
shaded areas depict subsystem 
subsystem includes workload sensors resource utilization sensors 
eq 
suggests workload described completely incoming task arrival rate outgoing byte rate due service type implemented server 
resource utilization sensors measure resource consumption 
unix variants offer different flavors system calls report user system resource consumption audited os 
resources implemented outside operating system shared data structures separate accounting mechanism may needed 
note eq 
aggregate consumed utilization known resource 
breakdown resource consumption different traffic classes service types important 
useful feature breakdown generally unknown operating system knows process consumption difficult measure 
squares estimator correlates aggregate utilization workload measurements infer coefficients eq 

coefficients fed admission control module uses eq 
qos mapping provide qos guarantees 
formulation online estimator squares estimator heart automated profiling subsystem 
section review mathematical formulation describe estimate profiling parameters 
derivation estimator equations 
separate instance estimator resource estimator invoked periodically successive sampling times 
takes input current measurements 
notational simplicity estimator deals resource shall omit resource identity remainder section 
measured utilization fitted equation platform parameters platform qos specification sensors customized qos guarantees control admission workload sensors squares estimator utilization architecture qos portability rate bandwidth estimate sampling time denoted respectively 
define vector wk measured utilization sampling time 
vector defined bk denote estimates sampling instant estimates initialized zero start estimation 
square matrix initial value start estimation set unit matrix 
estimator equations sampling instant fl gamma gamma gamma gamma fl gamma gamma gamma gamma gamma fl gamma time estimator predict value resource utilization substituting current estimates eq 

difference gamma measured utilization computed utilization estimation error 
proven squares estimator iteratively updates parameter estimate sampling time sum il gamma minimized history estimation 
systems execution parameters drift time desirable gradually forget effect old measurements 
achieved augmenting estimator forgetting factor fi sum minimized il fi gammai gamma exponentially diminishes effect older errors 
augmented estimator described equations fl gamma fi gamma gamma gamma fl gamma gamma gamma gamma gamma fl gamma fi implementation squares estimator forgetting factor 
implementation describe implementation details online profiling subsystem 
subsystem implemented tested pc linux platform 
purpose testing apache web server 
section presents server software architecture 
section describes profiling subsystem api 
section section detail implementation sensors estimator respectively 
server architecture order handle large number clients concurrently servers adopt multithreaded multi process model 
multithreaded servers require kernel thread support 
support provided modern operating systems windows nt solaris 
separate kernel thread assigned server incoming request 
threads share common state global memory 
multi process model common traditional unix implementations separate process assigned incoming request 
spawning process heavy weight operation pool processes usually created server startup 
created processes listen common server port may communicate shared memory 
process accepts connection handles closed 
apache experiments subscribes model 
current implementation profiling subsystem assumes multi process server 
multi process servers complicate design profiling subsystem occupy multiple address spaces making difficult share global profiling state 
profiling subsystem implemented middleware library linked server processes 
middleware api may called directly server processes transparently libraries 
case server code may principle remain unmodified 
transparency desired server source code available 
difficulty implementing profiling subsystem lies computing aggregate state multiple server processes example aggregate request rate seen server 
done shared memory 
addition library functions executed context server processes separate process spawned profiling subsystem run recursive squares estimator periodically 
process interfaces shared memory segment read current server state 
profiling subsystem api profiling subsystem described requires entry points 
initialization point ii task pre processing point iii task post processing point 
point called server startup 
called receipt termination task respectively 
simplicity exposition consider task act serving request 
api discussed 
ffl profiling init function called main server process fork worker processes handle incoming tasks requests 
call aforementioned forking takes place child processes inherit initial data values set profiling init shared memory pointer 
function initialize shared memory segment fork estimator process implement squares estimation function 
ffl pre task type function called time task arrives service request read server listen queue 
takes parameters requested service type usually inferred request header updates corresponding task arrival rate ffl post task type function called task request served 
tells middleware size data transmitted size served web page 
middleware uses information update byte rate workload monitoring request dequeued server port listen queue worker process function pre task called context function classifies request belonging service type function increments counter accumulates number requests service type seen worker process finished processing request sends response calls post task passing number bytes sent 
function updates counter accumulates total bytes sent process behalf service type periodically call post task process invokes load analysis function 
function computes behalf service type request rate process seen service type time units 
computes bandwidth process delivered behalf service type time interval 
stores values shared memory 
done counters reset zero preparation period 
periods load analysis carried need constant 
furthermore need tightly synchronized different server processes 
assumption time shared memory contains latest rate bandwidth measurements seen server process service type server process responsible updating measurements independently loosely synchronized period 
prevent pollution shared memory stale measurements process updates rate bandwidth values initializes heartbeat counter zero 
heartbeat counters processes incremented periodically estimator process 
values max considered stale max configurable parameter 
stale value typically encountered process crashes terminates reason prevents updating rate bandwidth time 
example prevent accumulation memory leaks apache server designed kill regenerate worker processes certain number requests served 
stale rate bandwidth measurements reset zero 
implementation aforementioned load analysis function updates rate bandwidth measurements invoked process call post task occurs minimum interval period elapsed previous invocation suitable value period max 
arrangement implements loosely synchronized periodic workload monitoring 
profiling parameter estimation profiling init function forks process implements recursive squares estimator 
process wakes periodically performs summations tmax tmax current data stored shared memory worker processes 
values represent measurements current total workload server instant compiled vector described section fed measured utilization squares estimator implements set equations 
utilization implementation measured os independent manner computing fraction time server busy serving requests 
algorithm measuring utilization manner described 
resource interest server resource estimator 
utilization measured resource independently values fed respective estimator 
jth estimator refines estimate parameters define constant data dependent consumption resource tasks service type section evaluate validity approach 
application investigate performance profiling mechanism profiled apache web server running linux 
today shopping commerce online trading services web 
web servers apache code unix platform 
apache particularly practical candidate experimentation 
apache server compiled run amd pc platform 
machines run clients test server synthetic workload 
generate workload looked web traces generated synthetic load models observed request distribution traces considered 
note shall show section constants largely workload independent 
service profiling purposes strictly necessary workload mimic real web load patterns 
workload composed series static files lengths 
range represents length majority frequently requested pages web 
web load generator called httperf client machines server web requests different rates files different sizes 
server configured profiling library place outputs sensors squares estimator recorded 
set experiments static files requested server single service type 
resulting cpu consumption measured 
resources change profiling algorithm add independent estimators considered experiments resource sufficient proof concept 
shows workload parameters applied community clients server sample test 
particular depicts request rate server total bandwidth delivered clients 
horizontal axis depicts sampling count sample taken seconds 
depicts measured cpu utilization experiment due applied workload 
depicts output squares estimator 
consider service type parameters estimated 
denotes fixed request service overhead denotes overhead sent data 
see parameter estimates converge quickly stable values ms ms 
profiling results serving page length kilobytes takes approximately milliseconds server 
investigate independence profiling parameters input workload repeated experiment different loads server 
estimated parameters observed approximately regardless server workload low loads 
low loads server appears efficient longer serve single request 
artifact way compute utilization 
low load requests tend served serially req kb sampling point workload sampling point workload workload sampling point cpu utilization sampling point cpu utilization cpu sampling point estimated profiling parameters sampling point estimated profiling parameters estimated model parameters online estimation apache server model concurrently 
request blocking time shared resources utilized serve requests 
due lack concurrency average service time request increases 
illustrate effect profiling results sample experiments different loads 
workload server changed average utilization kept 
workload reduced average utilization significantly lower 
see difference workload didn affect parameter estimates decrease utilization resulted slightly higher parameter values 
see low loads serving page length kilobytes takes approximately milliseconds opposed 
experiment describe profiling dynamic content generation 
today web servers serve dynamically generated content addition static files 
request arrives dynamically generated page script specified request header invoked generate page 
web server forks child process executes script writes generated web page standard output redirected web server 
server forwards page client 
fork system call piping script output server usually dominate execution time script 
overheads determined automated profiling 
constructed synthetic shell scripts execute series echo commands output pages different sizes web server 
length dynamically generated pages varied 
illustrates estimation execution overheads serving dynamic scripts 
experiment server requests different scripts 
request rate length returned pages varied 
shows workload rate bandwidth applied clients 
depicts resulting measured cpu utilization 
depicts output squares estimator 
seen serving kilobytes dynamically generated content requires milliseconds server 
costs due expensive fork system call data communication script server process 
values range milliseconds reasonable amount arbitrary computation performed script changing execution time significantly 
allows treating dynamic content single service category static content 
preceding experiments computed execution overheads serving static files dynamic content separately strongest advantages proposed squares estimator ability compute individual execution overheads incoming traffic arbitrary mix requests service types 
illustrate point server requests static files dynamic content concurrently 
parameters simultaneously estimated describe resource requirements serving static files describe resource requirements serving dynamic scripts 
describes sample test 
server workload shown consists mix static dynamic content 
corresponding cpu utilization shown 
depicts output squares estimator 
seen estimated parameters req kb sampling point workload sampling point workload workload sampling point utilization sampling point utilization cpu sampling point estimated profiling parameters sampling point estimated profiling parameters estimated model parameters online estimation apache server model converge simultaneously proper values shown respectively 
powerful observation suggests general hand crafted workloads may need applied server profiling purposes 
fact profiling invoked normal server operation analyze arbitrary run time server workload req kb sampling point workload sampling point workload workload sampling point utilization sampling point utilization cpu sampling point estimated profiling parameters sampling point estimated profiling parameters estimated model parameters online estimation apache server model low load compute parameters execution model transparently 
overhead profiling subsystem negligible 
period squares estimator heaviest piece profiling code order seconds req kb sampling point workload sampling point workload workload sampling point utilization sampling point utilization cpu sampling point estimated profiling parameters microseconds sampling point estimated profiling parameters microseconds estimated model parameters online estimation dynamic content service overheads execution time order hundreds microseconds 
overheads come incrementing integer counters request ii updating shared memory workload statistics 
overhead order single microseconds fractions cost request processing 
shared memory operations req static files kb req cgi scripts kb sampling point parameters sampling point parameters workload sampling point utilization sampling point utilization cpu sampling point estimated profiling parameters sampling point estimated profiling parameters estimated model parameters online estimation static dynamic content pose tangible overheads 
implemented efficiently linux invoked profiling subsystem period order seconds 
online profiling compromise service efficiency 
quantify accuracy estimated parameters plots difference observed utilization utilization computed eq 
parameter estimates obtained sample run 
run server subjected requests mix static dynamic content 
part difference actual predicted utilization 
occasional spikes attributed extraneous activity server machine preemption apache server kernel due receipt unrelated network broadcasts 
complex models may result smaller errors practical purposes capacity planning performed model proposed soft real time applications 
safety error margin result qos guarantees 
sampling point error sampling point error utilization error demonstrated feasibility online profiling regression analysis borrowed estimation theory 
simple service execution model proposed profiling library designed implemented uses squares estimator determine model parameters 
library measures server workload resource utilization correlates measurements determines resource requirements service 
profiling information admission control real time scheduling decisions 
tested implemented profiling library apache web server running pc linux platform 
testing results qualitatively demonstrate convergence estimation algorithm stable parameter values validates assumed service model demonstrates viability approach transparent online parameter estimation 
encouraging step comprehensive investigation automated profiling techniques soft real time systems 
topic interest automatic identification execution model structure 
assumed structure model eq 
general number parameters involved model known 
model contain certain nonlinearities due concurrency issues blocking nonlinear complexity service algorithms need identified 
currently exploring rule approach uses branch bound search arrive optimal model structure sense minimizing estimation error 
approach observation models incorrect structure converge easily 
different research issue workload conditioning 
proper estimation model parameters requires workload service dynamics 
usually requires workload sufficiently high variability 
constant loads conductive efficient parameter estimation generate information service behavior 
call loads ill conditioned profiling occur transparently normal server operation problem handling ill conditioned loads resolved 
approach admission control vary artificially eventual load server 
approach common practice industrial control systems superimpose synthetic load component top normal server load 
generation proper synthetic load interesting research question 
investigation issues help automated profiling needed state art generation general purpose real time computing systems 
author jack stankovic sang son gang tao lu useful advice inspiring discussions 
special goes kang shin university michigan nina bhatti hewlett packard laboratories insightful support inspired 
abdelzaher shin 
qos provisioning web multimedia servers 
ieee real time systems symposium phoenix arizona december 
abdelzaher 
qos adaptation real time systems 
phd thesis university michigan ann arbor michigan august 
abdelzaher atkins shin 
qos negotiation real time systems application automated flight control 
ieee real time technology applications symposium montreal canada june 
abdelzaher shin 
host architecture qos adaptive communication 
ieee real time technology applications symposium denver colorado june 
abdelzaher shin 
combined task message scheduling distributed real time systems 
ieee transactions parallel distributed systems november 
astrom wittenmark 
adaptive control chapter 
addison wesley nd edition 

survey qos architectures 
th ifip international conference quality service paris france march 
blake black carlson davies wang weiss 
architecture differentiated services 
ietf rfc december 
brandt nutt 
dynamic quality service middleware agent mediating application resource usage 
real time systems symposium pages madrid spain december 
coulson hutchison 
quality service architecture 
acm computer communications review april 
chatterjee lawrence 
modeling applications adaptive qos resource management 
proceedings nd ieee high assurance system engineering workshop bethesda maryland august 
chen gelman chrysanthis 
framework experimenting qos multimedia services 
international conference multimedia computing networking 
field 
net framework versatile network architecture support real time communication performance guarantees 
infocomm 
fox gribble brewer amir 
adapting network client variability demand dynamic distillation 
seventh international conference architectural support programming languages operating systems pages cambridge massachusetts october 
harmon baker whalley 
retargetable technique predicting execution time code segments 
journal real time systems september 
hull shankar nahrstedt liu 
qos model management architecture 
proceedings ieee workshop middleware distributed real time systems services pages san francisco california december 
humphrey brandt nutt 
middleware qos resource management 
proceedings ieee workshop middleware distributed real time systems services san francisco california december 
koren shasha 
optimal line scheduling algorithm overloaded real time systems 
ieee real time systems symposium pages phoenix arizona december 
krishnamurthy 
aqua adaptive quality service architecture distributed multimedia applications 
phd thesis university kentucky 
lazar lim 
binding architecture multimedia networks 
journal parallel distributed computing 
lu stankovic tao son 
design evaluation feedback control edf scheduling algorithm 
ieee real time systems symposium phoenix arizona december 
mosberger jin 
httperf tool measuring web server performance 
pages madison wi june 
acm 
nahrstedt smith 
qos broker 
ieee multimedia 
nahrstedt smith 
design experiences omega point architecture 
ieee jsac september 
stankovic 
dynamic guarantees distributed real time systems 
proc 
real time systems symposium pages december 
noble 
experience adaptive mobile applications odyssey 
appear mobile networking applications 
rajkumar lee lehoczky siewiorek 
practical solutions qos resource allocation problems 
real time systems symposium pages madrid spain december 
ramamritham stankovic zhao 
distributed scheduling computing tasks deadlines resource requirements 
ieee transactions computers august 
rosu schwan 
adaptation cost model aware pending constraints 
ieee real time systems symposium phoenix arizona december 
rosu schwan 
framework adaptive resource allocation complex real time systems 
real time technology applications symposium pages denver colorado june 
sha rajkumar 
generalized rate monotonic scheduling theory framework developing real time systems 
proceedings ieee january 
shepard 
pre run time scheduling algorithm hard real time systems 
ieee transactions software engineering jul 
stankovic 
decentralized decision making task reallocation hard real time system 
ieee transactions computers march 
stankovic ramamritham 
hard real time systems 
ieee press 
stankovic ramamritham 
design spring kernel 
proc 
real time systems symposium pages december 
stankovic ramamritham 
spring kernel new paradigm real time systems 
ieee software pages may 
stankovic ramamritham cheng 
evaluation flexible task scheduling algorithm distributed hard real time systems 
ieee transactions computers december 
marlowe 
polynomial time transformations schedulability analysis parallel real time programs restricted resource contention 
journal real time systems december 
wolf wittig 
quality service management multimedia systems 
multimedia systems journal 
xu 
multiprocessor scheduling processes release times deadlines precedence exclusion relations 
ieee transactions software engineering february 
xu parnas 
scheduling processes release times deadlines precedence exclusion relations 
ieee trans 
software engineering se march 

yang 
kim kim 
approach dynamic execution time estimation adaptive real time task scheduling 
journal korea information science society january 
zhao ramamritham stankovic 
preemptive scheduling time resource constraints 
ieee transactions computers august 
zhao ramamritham stankovic 
scheduling tasks resource requirements hard real time systems 
ieee transactions software engineering may 

