adaptive execution complex dynamic worlds james firby yaleu csd rr january supported part defense advanced research projects agency 
adaptive execution complex dynamic worlds dissertation faculty graduate school yale university degree doctor philosophy robert james firby may adaptive execution complex dynamic worlds robert james firby yale university robot acting real world flexible plans actions fail produce desired effects unexpected events robot shift attention 
plan usually construed list primitive robot actions executed complex donhain plan structured cope effectively myriad unpredictable details encounter execution 
adding structure plan involves augmenting primitive plan representation requires complete model interaction world called situation driven execution 
situation driven execution assumes plan consists tasks major components satisfaction test window activity set execution methods appropriate different circumstances 
execution plan proceeds selecting unsatisfied task choosing method achieve current world state 
task may executed times necessary keep satisfied active 
thesis proposes plan task representation program reactive action packages raps 
plan consists rap defined tasks rap generates primitive robot actions execution tinhe selecting appropriate method 
system execution monitoring intrinsic part execution algorithm need separate replanning failure disappears 
raps just programs run execution tinhe hierarchical building blocks plan construction 
rap representation structured task expected behavior evident planning execution 
rap execution system described includes sensor memory representation language interpreter 
examples experiments demonstrate wide range adaptive system behavior 
people contributed education yale 
advisor drew mcdermott shaped tenure 
helped get started planning project toni dean dave miller 
began think reactive planning gave freedom resources pursue ideas 
pushes needed get finished written 
way intuitions helped get times 
benefitted immensely ai community yale 
roger schank drew mcdermott bring different points view ai problems reconciling views shed light ai done 
fact things usually reconcile intriguing 
faculty joined fruitful discussions chris riesbeck padmanabhan anandan reading commenting thesis larry birnbaum explaining wrong ted linden ads putting mail months having read comment thesis couple weeks 
graduate school impossible fellow students 
dave miller helped get started research ball discussions toni dean yoav shoham finished dissertations 
brad david leake fruitful debates studied qual brad done great climbing 
charles martin chris owens done hacking entirely useless projects just thing keep sane 
rick mohr jim philbin richard kelsey questions discussions graphics 
larry wright wrote graphics code played squash games 

steve hanks alex kass especially important friends associates 
discussions helped get research moving restaurants taught lot food 
sharing ai office steve invaluable comments ideas gotten finished 
wife support encouragement 
years school turned new england town turned new haven 
contents list figures vii list tables xi coping real world 
characteristics coping behavior 
situation driven execution 
sensing assessing situations 
example 
reactive action packages 
rap execution algorithm 
objections rap approach 
raps robot programming 
experimenting rap system 
issues rap execution 
problems adaptive execution 
outline thesis 
rap memory rap sensor model 
constructing local model 
case long term memory 
rap memory model 
ii rap interpreter memory interface 
item properties descriptions 
default property values 
persistence belief 
long term memory 
issues long term memory 
matching item descriptions 
manipulating expectation sets 
summary 
rap interpreter basic rap syntax 
rap index 
rap succeed clause 
specifying rap methods 
describing method task net 
example 
rap interpreter 
issues task execution 
choosing method 
handling success failure 
managing tasks agenda 
preventing futile loops 
primitive actions rap memory 
primitive actions sensor data 
updating rap memory 
hardware interface rap interpreter 
summary executing mediating rap interpreter 
single task 
task selection 
executing primitive action 
summary 
iii rap language queries rap memory 
basic queries 
queries task progress 
combining queries 
index clause 
duration clause 
appropriateness conditions 
succeed clause 
preconditions clause 
constraints clause 
examples 
specifying rap method 
specifying context 
specifying task net 
specifying primitive 
repeat clause 
monitors synchronizing world 
monitor clauses 
active vs passive monitors 
protections opportunities 
short term memory internal resources 
resources clause 
resources vs execution strategies 
protections policies 
notations clause 
summary rap language 
raps sketchy plans 
iv issues rap representation sensing strategies 
routine memory maintenance 
item identification 
situation monitoring 
identification errors 
sensory issues 
opportunism 
plan revision opportunism 
utility opportunism 
examples opportunistic raps 
opportunistic raps 
putting constraints world 
constraint goals execution tinhe 
example delivery donhain 
repairing constraint violation 
preventing constraint violation 
constraint issues 
coordinating reaction tasks 
delivery truck donhain 
reaction task issues 
summary representation issues 
examples experiments delivery truck donhain 
basic donhain 
objects donhain 
basic delivery task 
rap library 
detailed examples 
basic coping behavior 
reacting situation 
discussion detailed examples 
large experiments 
basic experiment 
experiment 
experiment 
experiment 
discussion large experiments 
summary experiments examples 
unexpected complexity 
summary rap system 
extending rap system 
limitations rap approach 
complete robot control system 
robot action controller 
executing primitive actions 
generating sensory predicates 
interfacing rap system 
planning rap system 
problem solving sketchy plans 
altering plans execution 
summary planning issues 
related reactive planning 
situated action coping behavior 
machines representation 
virtual machines 
procedural reasoning system 
summary reactive execution 

vi bibliography rap memory functions declarations 
memory structures 
assertions 
queries 
description matching 
robot delivery truck domain delivery truck 
items world 
memory interface 
list figures complete robot control system 
example task success time window checks 
task system 
example rap language 
rap execution system 
task execution cycle 
memory rap execution system 
memory model 
simple matching example 
simple expectation set 
removing item expectation set 
rap execution system 
simple rap moving object 
rap interpreter algorithm 
typical robot delivery donhain situation 
adding new task agenda 
expansion move task 
successful 
unsuccessful method choice 
pickup rap 
execution situation priorities 
possible looping scenario 
vii rap memory model 
rap hardware interface 
arm grasp primitive action handler 
eye examine primitive action handler 
sensor datum handlers 
rap definition syntax 
example protection rap 
noticing opportunity raps 
delivering load items 
routine sensing check specific fact 
routine sensing confirm uncertain fact 
routine sensing stay touch world 
encoding primitive toggle operation 
forcing item identification memory rap 
rap bizarre result sensing problems 
rap check local situation time units 
finding specific item ps 
delivery truck fuel monitoring ps 
watching ammunition fuel interaction 
enforcing constraint constraints 
enforcing constraint explicit sensing 
delivery domain reaction tasks 
rap dealing enemy troops 
fuel monitoring tasks 
rap 
delivery truck domain 
rap initially wake truck 
getting weapon ready 
rap mounting weapon truck 
picking things 
ix rap shooting enemy troops 
experimental data 
results different shuffling intervals 
results different shuffling efficiencies 
results different shuffling efficiencies 
complete robot control system 
list tables series experiments various shuffling intervals 
series experiments various shuffling efficiencies 
xi chapter robot acting real world able muddle everyday uncer inevitably encounter 
car may start try door may open closed street usual route may closed elevator come pushing button unknown 
situations require robot adapt behavior middle executing plans 
robot wait uncertainty resolve take stock situation choose action appropriate time 
robot planners usually assumption world predicted infinitely far 
assumption reasonable domains completely control planner complex dynamic domain real world assumption predictability unwarranted 
domain termed complex initial state largely unknown contains items processes behave ways partially understood 
dynamic domain contains agents planner control change world warning unpredictable ways 
clear real world complex dynamic predicting detail possible 
robot control system intends act real world depend predictability 
planner project states world complete detail construct detailed plan 
primitive actions plan left unspecified situation required arises details world state determined direct observation 
plan includes elevator specify actions required enter elevator door opens robot knows elevator 
robot acting complex dynamic domain controlled unfinished flexible plans allow different completions depending actual situations encountered execution time 
choosing appropriate plan completions execution time cope unpredictable details unavoidable obstructions everyday life central topic thesis 
goals planner plans execution system primitive sensor actions reports robot controller complete robot control system generation control robot actions divided major com ponents shown planning possible generates sketchy high level sequences tasks carry particular goals 
ecution takes plan level detail planner generate expands task detail situations encountered 
hardware translates discrete actions execution system concurrent coupled motor sensor processes required control robot hardware 
past research focused getting planning generate plan sufficient detail handed directly hardware control component 
complex dynamic domains plans de tailed advance 
thesis proposes rap execution system fill plan details run time 
system copes uncertain changing situations occasional robot failures interruptions caused special problems opportunities 
coping real world consider coping behavior involved starting car 
understand thing happens hood cars capable starting 
start unfamiliar cars unusual situations extreme cold driving rain 
reason just get put key turn 
car starts re done turn key 
car doesn start tries give 
planning actions detail clearly impossible 
different cars place key different locations different number tries required engine catch extreme cold engine may longer try 
cases simply getting car start just fine 
fact cars built way purpose tractable naive users 
typical example coping behavior getting glass water kitchen 
apartment tv set bedroom am usually 
getting glass water means walking bedroom living room kitchen 
way usually walk furniture packages placed randomly wife 
may avoid cat jumps unexpectedly 
kitchen glass find dishes moved way sink pour glass water 
simple task possibly planned detail go kitchen get glass fill water sink 
obstacles way detailed location glass predicted encountered 
avoiding obstacles finding glass simple tasks need worry advance 
wait situation arise choose actions 
point execution starting car getting glass water stopped middle telephone rings 
answering telephone example task come time usually takes priority worked time 
tasks obviously anticipated disrupt plan carefully worked advance 
world filled interruptions emergencies robot able cope 
coping behavior described works everyday situations cause obstacles interruptions encountered generally minor re quire actions significantly affect robot 
furthermore situations usually supply cues execution actions producing detrimental effects consciously avoided significant look ahead 
example interrupted robot know right drop drinking glass 
doesn infer dropping glass cause break merely know glasses shouldn dropped 
adopt strategy dropped get broken 
important thing just day day situations actions effective way cope complexities real world 
characteristics coping behavior examples coping behavior described illustrate characteristics robot control real world execution system capture 
plans robot sketchy include tasks expanded detailed actions situation demands 
executing plan robot uncertain details surroundings 
lead choosing incorrect actions 
furthermore actions may fail change world way intended 

robot interrupted respond interruption returning doing 
robot usually count uncertainties obstacles interruptions runs fairly benign 
coping situations come lead ruin 
result assumption robot coping incomplete plan expected solve complex puzzle problems generate optimal sequences actions carrying task 
activities require looking see action contemplated affects rest plan 
searching efficient plans accomplish complex tasks province traditional planning research designed specifically get short trying muddle difficult task 
assumption thesis complex puzzles scheduling constraints crop plan sorted advance traditional planner 
leaves robot smaller simpler problems cope 
fact world plan eventually carried completely planner control carefully thought plans remain incomplete details execution time 
consequence assuming execution complications relatively benign ignore problem temporal look ahead 
partially complete plans arise inherent inability project complex dynamic domains detail 
difficulty projecting hard predict effects executing primitive action put plan place 
assumption look ahead execution time unnecessary 
form limited look ahead undoubtedly part real robot controller complete purpose research propose system muddle worst case stronger assumption look ahead warranted 
look ahead mean coping behavior include explicit notion trying calculate states world 
action choice may controlled knowledge incorporates compiled estimates 
lock door night project estimate chances burglar walking just part routine going bed 
may part routine projection important 
call process sketchy plan relatively benign environment executions 
situation driven execution step building model situation driven plan execution define plan 
plan set partially ordered tasks robot perform 
task may designed achieve state world maintain state world carry specific action 
clear table keep plenty full fuel drums fuel depot push red button examples tasks part plan 
furthermore different sequences task execution may possible including concurrent execution tasks satisfy temporal constraints plan 
sketchy plan plan includes tasks executed directly robot hardware controller tasks primitive actions 
complex dynamic domain robot plans sketchy extent 
execution sketchy plan begins assumption prescribed method carrying task situation 
method set actions accomplish task situation 
execution consists choosing task assessing current situation choosing appropriate method carrying 
assumption known methods sketchy plan execution hierarchical plan expansion takes place execution time done advance 
shifting expansion possible execution time allows expansions adapt actual situations uncertain projected situations 
tasks planned task best thought goal achieved 
goal may state achieve state maintain action carry 
execution time task index choosing appropriate method achieve goal 
support situation driven execution task know succeeded failed 
execution expected cope method failures task considered complete just method chosen finished 
example method picking box may say grasp robot gripper 
box slips gripper agent away grasp action completed task successful 
tasks evaluate success take control destiny 
task parts index current situation selecting method goal test determining task considered execution 
test consideration include things check task satisfied current situation time window task relevant 
satisfaction test time window tell task selection mechanism task considered execution 
task satisfied current situation need worked need worked unsatisfied 
task time window past task need considered anymore 
call satisfied task valid time window unsatisfied task valid time window active task expired time window inactive 
example task success time window checks example consider different blocks world sketchy plans shown partial orders 
plans include tasks 
plan orders second plan 
assume task satisfied long goal satisfied satisfied goal needs achieved 
defining appropriate time windows various tasks tricky matter specifying semantics plan 
assume time windows intended extend directions task far ordering constraint arrows diagram 
plan task inactive soon second task starts second plan task inactive start finish 
plans result different behavior executed situation driven fashion 
initial situation diagram task plan satisfied execution goes expiring task time window eliminating consideration 
second task completes block block block table 
second plan leaves achieve suspended achieved active place block top stack 
notice exactly plans say difference behavior comes semantics task descriptions specified tests tasks considered active 
methods method prescription changing world situation task satisfied 
may different methods task applicable different situations 
having different methods different situations allows task execution adapt changing situations 
assumed thesis methods available robot known advance contained large library 
new methods learned constructed old ones novel situation arises 
robot muddle knows give 
robust behavior achieved fixed set methods long task general methods satisfying situations 
general method constructed robot specific way carrying task different situation unable complete tasks 
starting car example task general method constructed usually 
put key ignition turn 
hand opening combination lock usually requires different method lock 
don know lock combination simply open 
important point methods guaranteed succeed accomplishing corresponding tasks 
example turning key may start car dialing lock combination may open try 
furthermore agents may interfere method cause fail worked fine isolation 
fact methods guaranteed succeed reason goal satisfaction responsibility task method 
tasks select methods satisfy goals test resulting situations see goals satisfied 
methods simply describe ways attempting satisfy goal 
characteristics situation driven execution basic situation driven plan execution algorithm summarized follows 
consider active tasks select execute 

current situation index method library select method chosen task 

execute method return step 
algorithm allows execution sketchy plans coping uncertainties obstructions real world adaptable able cope method failure 
algorithm adapts behavior situation hand delaying selection method task ready start executing task 
time uses situation task select appropriate method 
long appropriate methods existing situation appropriate actions executed 
fact system keep trying methods task satisfied time window passes task longer relevant 
repeated execution task remains unsatisfied coupled ability index different methods time task retried allows flexible adaptable response method failure 
algorithm allows easy task interruption resumption 
assume tasks assigned priority new high priority task dealing emergency added plan time 
priority direct execution task execution cycle starts choosing task 
high priority tasks favored jump line 
high priority task executed system resume doing 
step execution algorithm select task interrupting task way previous tasks available considered 
furthermore situation methods fact interrupting task may changed situation considerably problem 
sensing assessing situations important activity comes discussion situation driven execution algorithm assessing current situation 
real robot assessing situation involve sensing operations real world 
operations take tinhe commitment resources carefully considered 
instance task method selection choices require consid eration detail world state sensing overhead overwhelming 
tinhe method chosen robot spend tinhe energy sensing aspect world 
spend tinhe sensing little tinhe acting 
fortunately fraction world state usually relevant execution choice 
problem deciding fraction sensed 
evaluating sensing strategies automatically separately normal flow task execution may quite difficult 
overcome problems discard idea independently choosing sens ing operations insist sensing incorporated task methods 
places sensing tasks strategies exactly sanhe position effector tasks strategies 
task methods consist actions designed acquire sen data permitting better method choice 
addition method include sensing tasks gather information required judge effectiveness 
example action method picking object sense gripper see really holding object 
information task judge satisfied 
inclusion sensing tasks methods assumption sensing tasks require tinhe robot resources requires sensor memory 
memory record sensory data keep track robot making decisions sensing 
represen tation current situation updated sensory operations 
methods include sensor actions insure relevant parts situation rep resentation remain date 
sensory information buffer sensory tasks task interesting result limited sensory capacity coupled need current situation basis execution time decisions 
example example situation driven execution consider sketchy plan contains task pick fuel drum 
perform task assume robot move arm fuel drum grasp lift 
method task contain steps move arm drum grasp lift 
assume step move arm drum handed detailed position drum requiring location drum known 
robot may may know locations nearby fuel drums knowledge depends sensing operations executed service previous tasks 
account potential lack knowledge add sensory operation method look nearby fuel drums 
method scan drum move arm drum grasp lift 
method applicable situations built sensing operation update sensor memory latest fuel drum locations just move operation takes place 
method scan move grasp lift applicable different situ ations remains problem assessing success completes 
original task pick fuel drum want check satisfied method finished 
best assessment current situation re sides sensor memory task checks see robot arm believed holding fuel drum 
lift operation place information memory completes assume 
method contain additional sensing step prepare sensor memory task satisfaction check 
just task requires certain aspects world known ensure satisfied method uses generates relevant sensing operations 
method scan move grasp lift check arm holding 
prevent operations fail execution time rest abandoned pickup task rest active method 
follow method typical execution attempt 
task pick fuel drum selected execution method scan move grasp lift check selected 
operations scan comes execution passed hardware 
robot looks records memory fuel drum left 
move operation comes robot moves arm location fuel drum 
grasps drum lifts checks arm records arm holding fuel drum 
pickup task consults memory sees satisfied arm holding fuel drum 
works fine normal circumstances 
suppose everyday problems creep 
scan operation robot believes fuel drum left moves arm left 
assume agent moved drum right 
robot attempt grasp fuel drum find air 
point grasp operation fail hardware detects grasped things continue check step eventually record arm holding 
circumstances task find satisfied come execution 
method selected scan operation find fuel drum right 
system caught execution error adapted actions changed situation 
sort coping behavior results drum slips robot gripper lift operation robot gets called away middle method start pickup task 
robust behavior face uncertainties failures interruptions result things 
incorporation sensing operations directly methods means relevant parts robot assessment current situation updated timely manner 
second task methods chosen assessment tasks adapt behavior situation changes 
third tasks rely method completion measure success world contain satisfaction checks continue run world changes appropriately 
features form basis situation driven execution 
reactive action packages reactive action packages raps proposed thesis basic blocks building situation driven execution system 
rap representation groups describes known ways carry task different situations 
task generated goal index select rap task selected execution situation surrounding robot index rap select appropriate method packages 
rap includes methods task contexts appropriate single package needs rap task type 
may independent instantiated tasks described rap definition 
task goal index variable bindings execution history success test method method task rap system rap includes description situations task satisfied 
task parts goal index test defines task active 
activation test consists parts satisfaction test time window 
satisfaction test tells task goal satisfied situation 
task goal satisfied task active candidate execution 
satisfaction test property particular task rap task satisfaction test described rap 
rap complete description execution task 
contains task goal satisfaction test methods achieve task goal different situations 
time window task remain outside rap task generally consists start times deadlines different instantiation task 
various parts task shown 
define rap index load truck object success location object truck method context size object size size object size task net tl pickup object holding arm object putdown object truck method context size object size size arm capacity task net tl pickup lifting aid holding arm lifting aid pickup object holding arm object putdown object truck example rap language simple rap shown 
definition split major sections index corresponds task goal rap satisfy success clause describes test memory determine goal satisfied current situation number method clauses describe possible ways carrying behavior different circumstances 
method rap broken sections context describes test memory determine appropriate way achieve desired behavior task net contains detailed steps involved behavior 
task net steps consist primitive actions executed directly calls raps perform behavior constructs allow loops conditionals 
example rap defines task sure object inside truck 
rap tasks index obj ec satisfied local ion object true memory 
different ways putting object truck chosen depends object size 
note object size known method tried anyway 
luck appropriate definition pickup rap size object discovered pickup attempt object big second method tried alternative 
rap execution algorithm rap defined task thought independent entity pursuing goal concurrently tasks system consulting current world state choosing method issues commands alter state 
rap execution system shown embodies view task execution 
system major components memory interpreter rap library 
initial sketchy plan task agenda tasks rap sensor memory data queries answers tasks actions 
interpreter li rap execution system rap memory contains execution system best estimate current world state represents system assessment current situation surrounding robot 
rap interpreter task agenda provide mechanism coordinating task execution 
task waits agenda selected interpreter turn run 
task comes execution consults memory chooses method defined rap code 
methods may contain primitive actions sent robot subtasks sent join task agenda 
primitive actions sent robot executes immediately interprets feedback sensor reports effector failures updates world model accordingly 
subtasks sent agenda associated appropriate rap code waiting processes just task 
generating primitive actions subtasks method steps executing task suspends steps completed 
situation driven behavior ensured subtasks join tasks agenda interpreter may select new old task execute depending situation favors 
active goal task goal index rap variable success test bindings method execution history method task agenda task execution cycle rap execution follows algorithm illustrated 
task selected interpreter rap execution agenda 
selection approaching temporal deadlines ordering constraints placed tasks task nets 
chosen task corresponds primitive command passed directly hardware 
task rap code executed 
shown illustration rap consists parts success test task net selector 
rap execution begins consulting memory see rap success test satisfied 
task finishes immediately success 
task net chosen rap 
net applicable current situation task fail net usually applies sent task agenda 
point plan selected task task wait see things turn 
wait task returned execution agenda interpreter run task net finished 
task comes executes exactly 
task keeps choosing task nets goal achieved determined success test world state rules task net knows 
method specifying running raps allows hierarchical paral lel pursuit rap goals raises problem coordination different subtasks task net 
early member task net fails probably pointless execute follow method represented task net simply isn working 
deal situation system keeps track task net depen removes members task net queue fails achieve goal 
problem algorithm failure may change world guarantee different task net selected tinhe failed task run 
situation task restart note goal satisfied choose sanhe task net 
intervenes change world sonhe way loop continue indefinitely 
current system execution time loop detector flags rap selects sanhe task net repeatedly success 
flagged repeat rap fail parent try choose different task net goal 
objections rap approach point worth addressing possible objections rap execution system described thesis 
objection raps just robot programming language second rap approach evaluated raps control real robot 
extent objections apply rap system raps define robot control procedures research reported thesis include experience real robot hardware 
section discusses objection turn 
raps robot programming objection raps just programming language implies contribution thesis robot control system representing action schemas 
objection leveled current efforts design adaptive robot control systems rex system kaelbling pengi system agre chapman particular 
rex system specifically designed robot programming language defended ability describe general robotic tasks 
pengi system implementation theory situated activity chapman agre defended contribution robot programming theory power describe real world behavior 
rap system programming language proposal structuring behavior descriptions defended counts 
rap representation syntax clearly robot programming language 
rap library describes tasks system knows carry rap inter executes task interpreting rap description program 
program ming language rap system structured flexible easily extensible 
rap syntax structured sense raps basic behavior world usually readily apparent way coded 
various components rap clearly de fine applicable finish methods employ carry goal situations method 
rigid easy interpretation rap syntax flexible describe wide va task behaviors 
structured flexible nature rap syntax perspicuous language robot programming tasks particularly require sensing operations 
structured nature rap descriptions interpretation reasonably easy extend rap library new tasks methods required 
direct contrast current robot control construction specialized circuit descriptions agre chapman brooks 
rap system designed just programming language 
interpreter algorithm fixed unchanging semantics adaptive robot control done kaelbling agre chapman relevant quite different rap system 
relationship rap system discussed detail section 
research discussed 
rap defined behaviors defined 
rap system strong claim way behaviors represented interact 
fact claim design goal rap system enables raps treated separate declarative planning operators program descriptions 
specifically raps designed different ways planning operators programs run rap interpreter 
support uses semantics rap interpreter fixed rap syntax structured rap behavior world readily apparent 
raps planning operators discussed chapter 
experience planning raps required strong claims regard algorithm representation design decisions evident chapters support raps planning operators see hanks topic 
rap system robot programming language 
defines structured flexible extensible mechanism describing modular behaviors executed reasoned 
rap system treats descriptions programs ability reason independently provides hook interfacing system deliberative planning problems solving processes 
modular nature rap behavior descriptions possible add new raps library new behaviors robots repertoire 
experimenting rap system objection rap system control real robot 
major difficulty designing execution systems run complex worlds finding world test 
real world best unfortunately requires expensive immature hardware facing low level sensor control problems little critical issues reactive execution 
get problems rap system extensively tested world simulator 
simulation consists set locations roads objects robot delivery truck external control 
interaction rap system simulated world takes place delivery truck 
objection just easy leave types complexity ite ei real world constructing simulator 
methods algorithms solving simulated problems may assumptions gen result system incapable solving problems fall outside simulated domain 
great temptation incorporate unrealistic sensors sensors simulator giving system powers perception unobtainable actual hardware 
argument building execution system simplified physics technology contribute standing acting real domains way validate system cope real world 
simulators useful tool program verification tion lead researchers devise methods algorithms contribute understanding robot control 
simulators value pro gram theory verification tools areas real question simulators leads robot control researchers astray 
arguments point really debates basic research methodology simulation 
things somewhat study intelligent action approached ways choose high level behavior produce algorithms exhibit behavior simple domains expand scope algo rithms real world activities covered start simple low level activities produce systems perform activities build sys tems complex behavior emerges 
planning research result adopting strategy robotics sensor research examples second 
assumed application planning realistic domains combination robotic techniques complex machines meet middle problem intelligent action solved 
arguing simulation subscribe belief 
concede simulators useful aids verification planning algorithms irrelevant claim algorithms developed restricted domains simply generalize real world 
way show planning theory relevant test real world simulated world 
real issue simulation idea researchers learn studying robot control restricted domains 
point issue remains unresolved probably remain unresolved debate taken robots 
hope believe rap system extended control real robots extensively tested simulated robot delivery truck domain 
feel confident delivery truck domain represents real step away blocks style micro worlds complexity uncertainty real world 
delivery truck simulator models objects world detail including liquids containment arbitrary depth variable permeability factors radiation internal processes 
space modelled somewhat detail just complete give objects place allow truck move place 
coupled uncertainty associated simulated behavior simplified world model supports complex problems hope address 
simulated world world simulation built concept independent objects 
world object object change time internal program 
sonic objects passive fuel drums truck tires quite active enemy tanks manufacturing machines garbage 
example machine world assemble medical supply kits 
robot truck bring rolls medicine machine put inside turn 
independently truck goes machine generate fresh supply kits 
robot truck object world 
world divided locations roads link locations 
objects including truck appear locations road 
notion open country side started delivery truck travels road additional supervision 
simplification eliminates problems road navigation unknown territory simulated dense network short roads country side locations 
locations roads form map simulation takes place 
map divided sectors model large scale phenomena weather darkness enemy activity 
general behavior objects roads may depend global characteristics 
example travelling roads delivery truck get stuck raining sunny 
similarly troops appear unexpectedly location sector high enemy activity machine may run properly daylight 
delivery truck robot delivery truck executor access simulated world 
truck responds external commands returns sensory data surroundings 
move location cargo bays loading arms vision sensor 
loading arms manipulate objects near truck objects carried location cargo bays 
sensor determine objects current location new objects arrive 
examine particular objects detail 
example truck arrive new location scan area sensor discover gasoline container pick container examine determine gas inside 
details robot delivery truck donhain appendix firby hanks 
important feature donhain substantially complex traditional blocks world simulators 
task ake fuel drums fuel depot warehouse typically take hundreds primitive actions level move arm grasp urn east 
furthermore primitive actions guaranteed succeed may fact fail different ways 
example arm grasp operation fail item slips gripper item heavy tool needed item 
inherent uncertainty world possibility dropping object rain enemy troops showing means robot sure exactly holds 
rap execution system able cope problems sketchy plan 
issues rap execution context robot control goal traditional planning research develop procedure transform task set simple actions robot accomplishing task situation see chapman joslin 
excellent summaries 
substantial progress goal concept expanding task high level general description levels detailed subtasks 
level expansion hierarchy undesirable interactions proposed subtasks identified eliminated reordering subtasks sacerdoti vere choosing different expansions dean wilkins 
result expansions detailed set primitive robot actions executed deliberation 
problems remained plans control actual robot monitoring execution sure actions executed carrying intended effects local replanning patch plan execution monitoring determines things gone 
execution monitoring local replanning precisely problems rap system addresses 
problems arise primarily planning primitive action execution take place different levels abstraction 
primitive action supposed instruct robot hardware perform defined concrete action real world requires appropriate initial state 
hand purpose planning take high level goals produce sequences simpler tasks carry 
mistake asking planning generate task sequences level primitive actions 
complex dynamic domains planners produce accurate plans detail inappropriate actions inevitably included 
domains consideration complex dynamic problems critical primitive actions remain simple concrete planning general 
rap system designed bridge levels allowing planning problem solving generate tasks primitive actions 
tasks translated appropriate concrete actions relevant world state evident execution tinhe 
level planned tasks concrete level primitive actions rap system free adapt actions monitor progress try situation warrants 
execution monitoring choose task methods monitor success intrinsic part rap execution local replanning form task methods previous choices don 
returns layer model robot control mentioned earlier see 
lowest level robot controller translate primitive actions coupled concurrent instructions robot motors sensors 
highest level planning system translate system goals task sequences level detail uncertainty lack information allows 
levels rap execution system translates planned tasks primitive actions 
planner relies rap system monitor task execution adapt actions situation hand treat tasks directly executable 
similarly rap system relies robot controller carry primitive actions continuous manipulation robot motors sensors necessary rap interpreter treat primitive actions discrete operations 
robot controller hides complexity real robot hardware rap system rap system hides complexity execution monitoring local replanning planner 
view robot control discussed sonhe detail chapter rap system described 
problems adaptive execution tackling traditional planning problems execution local replanning rap execution system address new issues problems 
system confront problems associated sensing world relate sens ing memory 
grapple local uncertainties memory resulting execution failures way system synchronize task execution specific states events world 
difficult semantic issues involving task execution windows meaning plan time protections sorted 
problems inherent dealing complex dy namic donhain avoided simplest everyday situations 
sensing memory goes saying rap system connect intimately robot sensors effectors 
particular robustness system depends having detailed date description current situation represented rap memory 
description derived sensor data merely simulating robot actions 
correct execution specific actions taken granted actual results action may anticipated 
way rap memory updated assumptions representation carefully examined 
uncertainty method failure raps choose actions execute local view world certain incomplete may incorrect 
execution actions may produce inappropriate results turn impossible real world 
detecting recovering errors take central place rap system 
particular rap representations include sensing tasks specifically designed reduce memory uncertainty examine memory features relevant testing execution success 
furthermore rap system include ways describing tasks actively repeatedly monitor states world react change 
example enemy troops announce presence automatically 
robot delivery truck find new items vicinity actively scans 
truck react quickly enemy troops arrive spend time watching 
synchronizing world tailoring robot actions take place proper time response proper stimulus necessary capability 
acting emergency fire recognizing opportunity dollars sidewalk just waiting elevator arrive situations depend generating suspending task changing state world 
rap system allow representation implementation methods properly synchronize behavior shifting opportunities 
time robot doing go tea 
planning protections task semantics unexpected critical issue execution tinhe precise meaning task description 
achieve really mean 
mean achieved forgotten usual blocks world semantics mean achieved protected sonhe interval tinhe 
means achieve protect protect mean 
traditional planning research protections prevent planner placing tasks plan upset state world preserved 
execution tinhe protection mean variety things 
mean done change state mean right change state temporarily changed back mean state changed sonhe task forgotten 
similarly rap representation able describe possible meanings task keep factory free empty drums 
mean remove empty drum discovered doing things mean generating empty fuel drum mean continually searching empty drums tossing 
outline thesis need cope complex dynamic domains executing robot plan leads naturally theory coping sketchy plans 
sketchy plan collection tasks executed robot turned detailed primitive actions uncertainty donhain prevents actions appropriate 
execution sketchy plan adapt prim itive actions situations robot encounters execution tinhe cope robot execution failures interruptions 
handle problems theory situation driven execution necessary 
theory suggests algorithm choose task sketchy plan execute 
task current situation indices library known methods achieving task different situations 
execute method choose new task 
tasks remain active consideration long goal accomplished method chosen executed repeatedly attempted different methods algorithm 
rap system proposed concrete implementation situation driven execution theory 
rap compilation methods accomplishing task context method applicable 
task introduced system part sketchy plan associated rap process pursues task 
rap execution involves matching current situation contexts choosing corresponding method 
rap system breaks parts memory world model holds current assessment situation robot interpreter chooses available rap execute rap library contains rap representations 
rest thesis consists chapters 
chapter presents rap memory system discusses way interacts sensor representations situation robot 
issues uncertainty object identity object identification addressed 
chapter describes rap interpreter way raps created handle failures interact 
chapter concentrates rap representation detail illustrates way different execution time behaviors described 
chapters describe entire rap execution system 
chapter contains discussion task semantics gives examples ways different types tasks protections policies represented raps 
chapter brings describing actual experiments run robot delivery truck domain 
chapter argues situation driven execution rap system particular really produce robust behavior face complex dynamic domains 
chapter presents discussion ways rap representations plan time operators execution time method selectors 
layer robot control system detail current research supports layer 
detailed discussion current proposals adaptive execution systems included chapter 
leaving discussion related rap system described allows useful comparison 
chapter rap memory ideally situation driven execution system consult real world evaluate current situation 
consulting real world means examining sensors limited sensor bandwidth range restrict direct access small parts robot immediate locale 
robot expect see sanhe tinhe generally things far away completely inaccessible 
robot base execution decisions reasonably large picture world maintain model see 
model memory forms buffer executor sensor systems 
sensors busy acquiring new information small local feature world memory keeps track observed rest 
memory buffer execution decisions sensing hardware requires rap system structured shown 
hardware sensing systems acquire information world near robot send memory system 
memory integrates new information model world keeping model consistent date 
executing tasks consult memory system best information available current world state choose robot actions information 
relationship sensor hardware memory rap decision making important features 
rap defined tasks directly affect memory 
change contents memory indirectly issuing sensing requests hardware 
sensing operation complete hardware hands world execution rap memory action requests sensor reports robot hardware act sense memory rap execution system resulting information memory raps examine 
second memory actively solicit information world 
memory relies executing tasks issue sensing requests keep relevant portions world model date 
memory maintains passive stable model aspects world executing tasks choose keep date 
interesting result memory previously encountered items recognized seen 
memory kept consistent new sensor information available information compared believed 
comparisons new old pieces information recognized corresponding aspect world 
traditionally assumed sensors recognition automatically 
rap memory assumption recognition 
chapter discusses rap memory way new informa tion 
viewpoint rap execution memory looks stable assertional database 
memory take new sensor reports hardware actively match previous information decide add delete database 
section describes rap memory model issues involved construction 
section discusses memory assertional database seen rap interpreter final section describes process memory match new information old 
rap system memory model support notion unsolicited sensory information 
robot hardware generate sensory data asked 
advantage unsolicited reports rap system responsive environment way sensing unsolicited 
memory built behave exactly way unsolicited reports discussion follows assumes prevents reports 
note clarification rap memory described chapter designed primarily rap sensor model form robot memory take heavily dependent type formation expected robot sensor systems 
alternative sensor models explored planning literature fixed designator model indexical functional model chapman agre agre 
fixed designator model assumes sensors recognize individual items world attach sanhe unique encountered 
indexical functional model assumes individual items differentiated classified item identity tracked sensors moment moment 
example imagine robot enters warehouse discovers fuel drums look sanhe 
assumption fixed designator sensor model robot identify fuel drum left sanhe saw wednesday distinguishable sensory terms fuel drum right 
contrast indexical functional model allows robot refer fuel drum left claim fuel drum left sanhe item robot turn away look back 
fixed designator indexical functional assumptions problems useful sensor models 
strong recognition assumption fixed designator model clearly unrealistic 
sensor system expected differentiate indistinguishable items 
hand indexical functional model goes far way giving fuel drum am watching permanence 
sensor model rap memory system assumes capabilities extremes temporary assigned individual item world remains unchanged long item stays sensor range 
item moves sensor range temporary lost assigned different encountered 
example robot arrives warehouse discovers fuel drums assigned temporary names obj obj obj 
fuel drum named obj maintaining model external world 
rap systems internal state tied active tasks task agenda 
currently memory contains assertions recording systems intentions past activities 
separation strictly enforced exceptions see sections remain obj sensor information reports robot leaves warehouse loses track drum way 
robot returns sees fuel drum sensors know assign different name oh 
temporary sensor name assigned item thought detailed position identifies item robot immediate frame 
assumed item sensed acted current temporary name 
item current temporary name termed accessible 
constructing local model item newly accessible sensed robot operation things happen 
robot hardware assigns local sensor name 
sensor reports item refer sensor name robot commands act item sensor name 
second memory system notified new item sensor name accessible 
memory system generates new globally unique symbol represent item asserts sensor name property symbol 
example robot rolls warehouse uses scanner look may see fuel drum 
robot hardware assign fuel drum sensor name oh report memory new item called oh accessible current situation 
memory generates unique symbol say em asserts tern sensor name obj 
sensor reports come obj assertions tern detailed picture fuel drum emerge 
memory name item links assertions various properties gether 
initially detected item class location immediately avail able specific sensing actions required determine item properties size color 
may necessary open item see inside 
sensing action generates separate message hardware item maintaining fixed sensor name accessible approximation 
assumption accessible item remains sensor range changes position properties noticed individual identity tracked directly 
item sensor range longer directly perceived lose identity 
memory assembles description rein item memory name 
rein accessible active sensor name said belong memory odel 
local model contains rein descriptions construction forms detailed description situation currently accessible robot 
definition hardware generates information represented local model 
long rein remains accessible robot retain local sensor name description local model represent best information known 
rein inaccessible memory changed robot knows rein longer acted directly 
local name translation sensor memory names rein dropped sensor reports sensor name generated 
continuing example robot leaves warehouse loses contact fuel drum sensor name oh useless 
choices point erase description item longer acted assertions mention item just erase single assertion item sensor obj leave rest description intact 
case long term memory erasing entire description item memory inaccessible correct sense keeps description accessible local situation rap memory accurate 
reasons sense keep description item inaccessible 
item sanhe type item may needed sonhe point 
keeping descriptions robot know encountered item know look 
memory represent accessible local situation true past situations 
example leaving warehouse robot may develop need fuel drum 
known local situation robot know fuel drum warehouse go look 
reason robot want keep descriptions inaccessible items may encountered 
newly accessible item item seen information acquired item past brought forward having discover 
example suppose previous trip factory robot encountered boxes red yellow put bomb yellow box opening 
re entering factory robot discover boxes accessible red yellow 
appropriate identification new yellow box old yellow box robot avoid blowing 
crucial point retaining past item descriptions necessarily entails problem identifying new item descriptions old ones 
old item de matched new ones rapidly cluttered multiple descriptions item thing mean 
consider happens robot enters warehouse discovers single blue fuel drum 
robot leaves retains description know look blue fuel drum required 
robot re enters warehouse encounters blue fuel drum 
attempt identification robot leaves warehouse retaining blue fuel drum description descriptions blue fuel drums 
robot returns 
prevent multiple descriptions item try match new descriptions old ones old ones removed merged 
rap memory model rap memory model summarized diagram 
real world item accessible robot assigned local sensor hardware memory begins construct description local model 
information generated robot sensors local model description item detailed 
item inaccessible hardware notifies memory item local sensor removed fi om description 
removing item sensor moves item description local model long term 
system continuously trying match long term item descriptions new local model descriptions detailed 
match discovered old description merged new form single unified description 
rap execution rap memory system previously locally seen accessible descriptions descriptions action requests robot sensors effectors act sense world rap memory model rest chapter concerned aspects memory model 
uniform query mechanism local model long term 
division visible database interface 
raps able direct robot activity best description available having worry new old information 
section describes queries 
second aspect discussed way item descriptions long term matched constructed local model 
assumptions sensor hardware recognizing newly encountered item seen responsibility system 
section discusses rap algorithms description matching 
rap interpreter memory interface rap memory tailored acquisition representation item descriptions convenient rap descriptions see memory unstructured database ground assertions 
complications inherent matching local long term item descriptions completely hidden database 
rap interpreter simply queries database assertions evaluate state world 
assertions database propositions contain variables 
proposition may take form describe item properties represented fluents mccarthy hayes 
example fact item holds items represented contains item item true contains item item true queries rap memory consist proposition patterns matched assertions database may combined connectives 
pattern contains free variables treated existentially quanti fied bound possible pattern matches assertion memory 
executing rap uses success failure matches determine specific situations true world 
queries may include predefined boolean functions variable bindings restricted particular val ues 
example check item contains item bigger item query contains item item true size item size item size size standard problems assertional database memory 
question means query fails unify facts database 
mean fact isn true mean robot chance check fact doesn know 
second problem deciding long particular fact remain database ongoing confirmation 
example believing dollars warranted remove believing dollars subway seat reasonable get train 
rap memory attempt solve general problem missing 
rap definition decide means query unsatisfied 
defining special restricted syntax item properties memory possible define defaults missing item information 
defaults derive functions called value item property required available memory 
problem dealing aging assertions han somewhat general fashion 
assertion tagged tinhe asserted tinhe accessed special form called believe 
section discusses rap memory representation properties goes discuss default functions believe construct 
item properties descriptions item property assertion takes general form amc amc ers property value property name symbol identify property represented itc name indicating item memory property value value property item 
specifiers included arguments required 
example color item red works okay item true contains item item unknown contains item item true reasonable property assertions 
item property values treated distinguished way rap memory 
properties assumed take value tinhe necessary ference rules enforce built memory 
particular new property assertion previous assertions property removed database 
item thought yellow assertion color item yellow exist memory 
item painted red assertion color item red 
color declared property old assertion color item yellow erased 
value property may take distinguished value unknown meaning current value explicitly uncertain 
structure item properties allows important simplifications memory pro cessing 
assertions making item description pin pointed grouped easily 
important descriptions local model compared combined descriptions long term 
default values assigned item properties having build general purpose default reasoning machinery 
reduces complexity computation required 
default property values making clear meant assertion sought problem assertional database 
specifically contradictory assertion database assertion sought obviously false 
assertion queried simply mean assertion false particular property described assertion sensed robot just doesn know 
solution problem assigning truth values missing assertions rules rue false contradicted unknown contradicted 
solution implicitly default assumption best inference property sensed label unknown 
correct assumption strong planning situations 
items world large number properties normally true taken granted 
classic example birds fly 
know em bird prefer assertion fly em rue appear memory default fly em unknown 
general method supply default values property assertions memory 
substantial literature default inference predicate calculus databases mccarthy lifschitz reiter mcdermott doyle mcdermott complexity avoided rap memory system allowing default values item property assertions 
query property matching contradictory assertion default generated value 
assertions may represent things memory item properties default reasoning done assertions declared item properties rap memory general purpose default reasoning 
specifying default values item property assertions parts index value 
argument assertion value index 
property type assigned function calculating default value function called query tinhe necessary 
example generally reasonable believe items robot delivery truck donhain function designed 
property works okay signify working item assigned default function returns true item encountered world assumed 
queries form works okay item true succeed items specific works okay assertions database 
functions supply defaults values generated context sensitive 
example inference item works may general item junk yard may better infer broken 
similarly item encountered repair shop may fixed best infer works okay property unknown 
syntax default functions described appendix examples delivery truck donhain 
commonly functions experiments context insensitive returned false unknown 
inferring default values value argument property assertion allowed default 
means item known memory virtual assertion declared property type 
ruling defaults index portion property assertion pre memory generating properties items know 
instance query works okay item okay succeed okay bound true assertion regarding item working query works okay item true succeed known items broken 
unreasonable memory system invent new item just works okay true default 
algorithm calculating default property values consists steps query tinhe query pattern matched database free variables treated existential quantifiers 
direct match query succeeds 
contradictions sought looking direct matches pattern value 
matches value query fails 
pattern matched split index value portions 
unbound variables index query fails 
index contain unbound variables appropriate default func tion called index argument generating default value 
value part pattern matches default value query succeeds query fails 
query failure final point respect default property values means query fails 
defaults allowed property values failed query necessarily mean pattern contradicted database 
sonhe cases may mean matching pattern exists 
example query color item color fail color match default color item red may fail item known red red default color item blue fail item database color blue 
connectives construct queries combine success failure pat tern matches truth falsity patterns 
combine success separate simple queries 
example compound query color item red size item big succeed pattern color item red matched database size item big 
query failure due contradiction quite different query failure due matching pattern 
means query known false world second means query known true 
rap realize situations may occur generate queries carefully 
persistence belief assertions rap memory necessarily remain continuing support sensor system 
example robot may encounter full fuel drum warehouse record fact memory 
question long continue believe full fuel drum warehouse 
warehouse seldom may reasonable assume drum remain long time warehouse busy may disappear short 
problem finite assertion persistence recognized time literature different solutions suggested different situations nilsson mcdermott dean shoham hanks mcdermott firby mcdermott 
simplest solution assign assertion type database specific life time 
example assertions type full assigned life time hour 
fuel drum discovered full assertion full item true queries form full item true succeed hour 
hour assertion disappear database 
idea default assertion life times attractive simplicity situations realistic results lost information 
consider difference leaving dollar bill subway leaving 
different contexts suggest location bill different life times situations 
assertion location item subway short life time minutes assertion location item essentially infinite life time assuming robot lives 
possible construct database automatically assigns life times assertions context database necessary rules complex 
alternative label assertion time assertion database determine truth fact query time 
rap memory system uses persistence scheme type 
assertion timestamp vs probability belief similar different ways fact persistence varied query tinhe timestamps probabilities 
schemes query tinhe construct call believe 
term believe construct extract information faith put particular memory assertion strongly believed 
believe construct takes basic form believe assertion degree succeeds assertion believed force degree database 
probabilities vary put probability degree timestamps put interval tinhe degree 
define construct succeed assertion follows database probability 
second form defines construct succeed assertion interval tinhe 
probabilities believe construct requires complex active database contains rules specifying way assertion probabilities vary tinhe acquisition alteration related facts 
example deciding fuel drum warehouse full probability requires database model types events empty fuel drum warehouse likelihood events taken place drum measured full hanks 
hand temporal intervals believe construct moves contextual knowledge memory hands inquirer 
asking bill location chance asks location assertion minutes subway year 
timestamp model special case full blown probability model problems context management outside memory 
rap memory database adopts timestamp method assertion persistence database simpler 
timestamp model moves knowledge required context evolution database rap descriptions 
different raps decide long interval checking truth assertion 
short intervals required high confidence fact true long interval lower confidence task hand 
believe construct believe construct workhorse rap memory database query system 
basic form construct believe assertion time interval assertion single assertion time interval length time 
se mantics construct query succeed assertion added database time interval specified 
assertion older time interval assertion construct fail 
assertion contain free variables treated existential bound way query succeed possible 
simple non nested assertions appear believe predicate 
com plex queries constructed combinations believe forms 
example find database heard big red box lo minutes query believe class item box lo believe size item big lo believe color item red lo believe form determine exactly assertion database 
time interval argument replaced variable believe form succeed assertion involved variable bound time interval asserted 
example see level fuel drum measured minutes ago query believe quantity held item amount time time long term memory item descriptions long term memory record learned world past 
rap memory address complex naming problem attempt maintain coherent long term memory sensors recognize seen past prevent generation multiple descriptions 
solution memory recognize previously encountered items 
behavior rap long term memory designed capture illustrated example 
suppose robot goes fuel depot finds identical fuel drums 
robot looks inside finds empty full fuel 
robot puts bundle papers empty drum right 
robot remains area difficulty keeping track drum 
robot leaves doesn return day find fuel drums tell apart 
robot looks fuel drum finds full fuel looks finds empty 
conclude 
conclude full empty drums ones saw yesterday furthermore remaining drum contains bundle 
importantly want robot idea look bundle papers 
issues long term memory algorithm identifying old item descriptions new ones illustrated example heuristic assumptions sonhe situations 
example put quarter pocket reach take quarter am justified assuming sanhe quarter 
hand deposit quarter bank withdraw quarter making sanhe assumption appropriate 
rap memory system strong assumption items previously encountered situation tered sanhe situation significant change 
situations completely robot control item continuity guaranteed situations guess 
item descriptions assumed persist unchanged mistaken identifications local long term memory descriptions inevitable 
price making mistakes kept fairly low merging matched descriptions carefully 
important point maintain timestamps item properties descriptions merged property keep tinhe measured 
way old descriptions matched newly detected items properties brought forward long term memory remain old exert appropriately small effect subsequent behavior 
preserving assertion timestamps merging descriptions believe queries return appropriate information merged properties 
furthermore raps take matching errors account 
example important pick full fuel drum warehouse warehouse contains sonhe full sonhe empty drums rap include sensor check confirm drum selected full 
expectation sets item matching facilitate item matching long term memory divided sets 
expectation set list items expected accessible robot situation 
robot moves situation local descriptions inaccessible placed expectation set old situation 
old situation encountered expectation set predict items 
new item descriptions constructed checked predicted items see seen 
delivery truck domain naturally partitions item descriptions sets location class 
items location equally accessible truck 
primitive sensing operations domain deliver item basic class fuel drums recognized fuel drums enemy troops enemy troops 
natural partition long term memory expectation sets consisting items class location 
example expectation set containing fuel drums warehouse fuel drums cargo bay fuel drums inside box 
truck arrives warehouse encounters fuel drum drum local model description need compared past descriptions warehouse fuel drum expectation set 
local description constructed consistent different items corresponding expectation set 
example fuel drum warehouse fuel drums seen past 
new fuel drum red probably match fewer candidates full match fewer 
determine item descriptions match matching function required 
function take item descriptions return score measuring match 
high score means match low score means poor match 
identify local description matching expectation set member unique maximal match member candidate group 
candidate group consists item descriptions expectation set 
local description matching score member group score higher match expectation set local description merged member group 
local description matched member expectation set longer participates matches 
ensures local description matched single past description 
matching local item descriptions long term memory descriptions slightly complex fact expectation sets layered 
layer set descriptions merged known separate items real world 
expectation set inaccessible local item descriptions inaccessible moved set 
difficulty local descriptions correspond descriptions set matched 
keep things straight expectation sets maintained layers descriptions layer different items descriptions layers may apply sanhe item 
layers generated information new items identifications past descriptions possible robot moves 
example visit warehouse red blue fuel drum seen visit full empty fuel drum 
result expectation set consisting layers containing red blue fuel drum descriptions containing full empty drum descriptions 
red blue drums sanhe full empty drums 
red may full empty may blue 
database queries expectation sets important question arises expectation sets added memory rap interpreter view memory database affected 
item description moves local model long term memory sensor disappears 
allow raps determine item current sensor memory maintains special predicate know sensor name memory name query predicate satisfied sensor item involved known item known accessible unsatisfied item inaccessible 
properties item description remain sanhe queried just 
situation complicated item encountered 
item accessible second tinhe sensors assign new introduced memory 
point way memory know item seen generates new memory name begins construct new description local model 
memory contains separate descriptions item matched merged queries return answers considered carefully 
example suppose box encountered factory memory name item big red 
robot returns factory encounters box giving memory name item immediately check color 
point query class item box location item factory color item red query class item box location item factory color item red fail item item correspond sanhe real item ing red default color boxes 
problem serious long raps aware queries carefully 
particular know sensor name predicate ensure query real accessible item 
furthermore rap finds item predicted location item sensor item example method chosen generates sensor operations aid identification merging process 
thing done properly counting 
way tell boxes factory situation 
robot count boxes go location involved count items valid sensor names 
dynamic world number boxes location known certainty checked anyway 
rest section discusses algorithm matching item descriptions expectation sets 
matching descriptions local model ex set described followed mechanisms handling complexities introduced expectation set layers 
matching item descriptions matching item description main consider ations way comparing descriptions 
comparison counting assertions descriptions common take account fact sonhe contradictory assertions veto match result normal change 
identification local description expectation set member take place local description matches member better 
local model descriptions get detailed tinhe early stages match member expectation set 
local description identified expectation set member descriptions merged 
setting memory symbols equal contradictions sorted 
consider situation shown 
robot visited warehouse past noted boxes big red little red sonhe chocolate bars inside 
robot returns warehouse discovers contains boxes 
local model holds descriptions boxes em sensor box em sensor box 
expectation set boxes warehouse holds previously seen descriptions em item 
kind matching take place 
moment local descriptions match past descriptions equally mistake match arbitrarily 
suppose robot measurement discovers boxes empty 
point local descriptions consistent item appears consistent item 
depending robot knows warehouse boxes chocolate bars may perfectly consistent took chocolate bars box 
local descriptions match expectation set members 
robot sonhe sensing discovers box big box small matching longer ambiguous item item expectation set class item box color item red size item big class item box color item red size item small contains item bars true local model class item box sensor name item box ox sensor name item box class item box color item red size item big class item box color item red size item small contains item bars true class item box sensor name tem box empty item true class item box sensor name item box empty item true simple matching example identified item item 
merging properties assertion em holding chocolate bars discarded em em inherit assertions red 
process discovering correspondence local long term mem ory item descriptions designed remain internal memory database raps worry descriptions fit real items 
basic algorithm accomplish automatic matching robot action generates sonhe sensory data property sonhe item local model 
local model item description updated accordingly 
local model updated memory system automatically checks see altered description maximally matches member correspond ing expectation set 
match local item description matching ex set merged 
removes descriptions matching procedures 
local model expectation set changed checked see new matches exist 
process repeats identifications 
maximal match left sensor data ill determine new old item descriptions match context sensitive matching function 
item matching function counting assertions common ruling matches con assertions comparing item descriptions 
shown example real items generally permanent transient characteristics box box chocolate bars may go 
permanent characteristics contradict match transient characteristics allowed change 
unfortunately properties item permanent transient depend heavily item context 
example box color fairly permanent property serves identifier situations 
box painter color changed rule matching newly painted box past descriptions 
matching functions allow necessary flexibility comparing item descriptions 
matching function returns high number complete match low number incomplete contradictory match 
rap memory defines matching function expectation set 
example function comparing boxes warehouse different comparing boxes painter 
warehouse function score descriptions matching box color remained painter box descriptions match color changed visits 
arguments needed rap matching functions item descrip tions compared 
function checks properties contradict contradictions scores match zero 
descriptions compared contradict property shared assigned score ability distinguish items class scores 
example expectation set boxes warehouse assigned matching function ignores contradictions contains empty assertions scoring empty matches zero assigning matching assertions points 
example section function result item item match ing item item score matching score 
robot discovers item big item small item match item score item score item match item score item score 
difference scores allow item identified item item identify item 
syntax matching functions assignment item classes de scribed detail appendix matching functions delivery truck domain described 
finding maximal match scoring functions match item descriptions 
problem sparse local descriptions share properties members expectation set match score 
example boxes newly accessible warehouse matches past descriptions score class property 
past descriptions quite different identify new local description premature 
trick identifications soon possible early ignore salient differences 
approach rap system divide expectation set didate groups containing item descriptions 
description shares properties candidate groups consistent group identification delayed information places group 
properties description group common correspond 
description matches single group higher score reason believe member group 
identification waits maximal match 
candidate group members identical indistinguishable need worry local description identified member equally 
consider box example 
past descriptions em em differ contents form separate candidate groups 
real boxes em em accessible match candidate groups score 
identifications class distinguish past descriptions 
descriptions match 
adding new facts local descriptions em em change class diminish matching scores tern tern 
additional fact boxes empty discovered matching scores stay matching function ignores emp assertions 
em learned big matches em score em score 
maximal match exists em em identified 
takes em running em matches em score candidate groups 
maximal match exists em em identified 
making items equal descriptions identified corresponding real item merged 
example local description em iden corresponding long term memory description em 
means em em refer item real world descriptions merged reflect fact 
way merge sim ply assert symbols em em equal database 
really descriptions may contain contradictory properties 
exception contradicting facts discovered 
example size treated permanent box fact em learned big matching score em may reduced zero matching function 
rap memory merges descriptions erasing assertion descrip tion contradicted assertion 
process preserves newest information known item question keeping database consistent 
example identifying local description era item previously encountered named era descriptions need merged class item box color item red size item small contains item bars true class item box sensor name item box empty item true assertions era newer noted current encounter item empty assertion contradicts earlier belief item contains chocolate bars 
merging produces description item item class item box sensor name item box color item red size item small empty item true memory database states accessible item sensor name box small red empty box 
notice box red small come identification descriptions directly sensed encounter item 
manipulating expectation sets algorithm matching items local model long term memory fairly straightforward produces memory database keeps item descrip tions consistent new sensor data 
simplicity algorithm complicated additional situations arise 
items may inaccessible robot local descriptions maximally matched corresponding expectation set members 
produces multiple descriptions item dealt 
second robot may act item local model move expectation set 
means item previous description removed expectation set description identified 
problems may arise sensors return cardinality local model item type 
sensors report exactly fuel drums warehouse local model show descriptions 
expectation set fuel drums warehouse may contain sonhe number descriptions 
adjusted hold correct number 
section discusses difficulties turn 
adding item set complexity description matching expectation sets divided layers 
layer snapshot local model 
tinhe expectation set situation inaccessible snapshot model taken pushed expectation set 
new snapshot equivalent previous expectation set layer meaning contains exactly sanhe descriptions discarded redundant 
snapshot contains descriptions known equal previous ones set new layer formed 
expectation set layers represent disjunctions layer contains description real item local model unknown 
form disjunction allowed rap memory requires operations set applied layer 
changing item properties expectation set layers result complex algorithm previ ously identifying new item descriptions old ones 
consider expectation set sketched 
set describes known fuel drums warehouse 
shows item properties item names sanhe different layers show descriptions identified corresponding sanhe real item set equal 
local model contains fuel drum descriptions layer expectation set 
layer holds descriptions fuel drums robot trip warehouse 
second layer shows trip warehouse drums seen identified seen em 
drums em em correspond previous visit em em presumably determined sensing 
similarly third visit identified drum having seen second visit item information disambiguate descrip tions 
current visit item identified seen second visit 
layer layer layer item item item item item item item item item local model item item item simple expectation set notice items local model identified expectation set de layer 
follows fact items layer distinct layer describes set items 
existence layers contains match local model description means basic algorithm discovering identifications generalized layers 
furthermore layer changed identification may sufficiently restricted match layers pro cess cascade 
identifications may redundant layers set removed 
time new local model item property sensed process 
resulting algorithm new item property sensed local model description updated appropriately 
layer expectation set corresponding description checked turn latest earliest layer contains description identified altered description layer left unchanged 
layer contains maximal match altered description match description identified 
maximal matches descrip tions appear layers altered description identified ruled description appear layer twice 
maximal match layer left 
layers changed previous step member layer checked layer maximal matches 
new matches may arise get ruled description allowed layer 
repeat layers change 
check redundant layers take expectation set 
consider expectation set 
suppose sensor action robot adds new property em local model step algorithm described finds em maximally matches em layer 
descriptions identified giving new picture layer 
layer item item item item item layer local model item item item item item item item assuming em doesn match descriptions layers examined altered 
assume new matches discovered checking items layer layer checked maximal match em em local model 
new match results fact em em em 
em em identified layer local model identical layer dropped resulting local mol layer layer item item item item item item item item item done done matching process wait new information comes sensors 
time new piece sensor information comes memory alters local model description algorithm discovering identities executed 
moving item set new information item usually change expectation set belongs item description moved expectation set result robot actions 
delivery truck donhain robot move items place place arms tinhe item changes location moves expectation set 
example red box may encountered warehouse red boxes seen previously 
robot picks box moves factory description unmatched descriptions various expectation set layers moved box warehouse expectation set box factory expectation set 
item moved expectation set single descrip tion problem quite simple 
local description item moved old set new copies description including equality removed old set 
reduces membership layer old expectation set item longer predicted set 
multiple copies item description identified layer old expectation set removing quite bit complex 
description removed layer old expectation set figuring remove layer problem 
consider situation layer item item item item item item item item item em moved location removed expectation set placed new 
changing expectation set associated local model description em simple deleting layer expectation set 
em match items second layer item deleted 
question 
class item box color item red size item big class item box color item red size item big class item box color item red size item small class item box sensor name item box color item red removing item expectation set understand answer consider single layer situation 
item removed expectation set item 
ignore set item item item item previously seen red boxes 
item past descriptions go 
unfortunately way decide removing random memory wrong 
example removing item expectation set mean red boxes encountered assumed big 
better explicitly represent information unknown result removing item leave database correct uncertain 
algorithm figuring smallest set assertions unknown database result moving item expectation set consists steps 
collection descriptions description didate group item may belong 
example collection consists item item item say item 
member candidate group need considered iden tical 
collection descriptions forced single candidate group making properties shared member collection unknown 
item item assigned property size 

explicitly labelling properties unknown simply deleting database accurately reflect fact uncertain defaults place 
descriptions collection indistinguishable chosen random deleted merged item moved say em 
final identification give item moved properties shared description consistent 
example final result item item merged single description moved expectation set 
old expectation set left holding descriptions item big red box item red box unknown size 
see result correct imagine original descriptions correspond red boxes sack big ones small 
lets peek box letting see red letting see size 
person reaches sack takes box exactly allowed peek 
know sack contains big red box taken red box big small get peek size box removed 
interesting example algorithm comes de truck domain 
consider situation truck blue fuel drums box known full known empty 
expectation set fuel drums box hold groups full drums empty members 
truck moves drum box cargo bay looking color check full empty 
adjust expectation set algorithm says collect description group remaining descriptions changed truck moved item 
collection contain full empty description correspond drum moved 
step algorithm force descriptions collection identical 
step eliminates properties distinguish items collection results de blue fuel drums unknown contents 
corresponds drum moved drum box full empty drum moved leaving extra full empty drum box 
third step algorithm take description collection merge local description drum moved moved drum known blue 
truck believe full empty blue fuel drums box blue fuel drum unknown contents box cargo bay 
truck moves fuel drums box looking longer know contents drums know blue 
algorithm moving item layer expectation set substantially complex addition layers set 
apply algorithm separately layer turn doesn 
problem candidate groups layer may share members layers 
layers share members treated separately descriptions may merged 
consider expectation set fragment layer layer item item item item item item local model item em removed expectation set try apply simple algorithm layer turn em em em merged layer 
time em em em merged layer 
problem arises em chosen layer em chosen layers 
merging em unnecessarily result unwarranted loss information 
merge fewest number descriptions possible fewest item properties algorithm removing item applied layers time 
collection descriptions selected expectation set description candidate group layer included collection holds descriptions possible 
example item item item item say em 
single layer descriptions merged candi date group unshared properties set 
item removed identified members collection taken expectation set 
single layer member collection cho sen random collection chosen multiple layers members chosen comes layer expectation set 
descriptions removed layer expectation set lose exactly member required 
provision descriptions chosen form smallest group possible information lost expectation set 
example item item item get collected merged item gets removed 
final result item unchanged layer item unchanged layer item item identical item stays layer item layer 
determining cardinality set final piece information memory system learn expectation set cardinality 
particular sensor system robot truck domain report items currently local model items accessible 
local model descriptions associated expectation set total number accessible items set known accessible items known 
point number items accessible compared number descriptions layer set adjustments keep expectation set predictions date 
real items accessible predicted expectation set new descriptions added set fewer items accessible predicted descriptions removed 
adding new descriptions expectation set easy done sensor system introduces new item local model 
item accessible memory system puts local model looks associated expectation set 
new item increases number items associated expectation set number layer set new description properties added layer set 
description eventually matched unpredicted item take correct properties 
expectation set layer generated extra item associated set correct number empty description added layers hold sanhe number items 
decreasing number items expectation set straightforward machinery described section removing item place 
sensors declare accessible items set known number items local model smaller number set layer sonhe descriptions removed set 
removing description case exactly removing description item moved expectation set 
empty item added local model associated expectation set reduced 
item moved null expectation set 
algorithm moving item removes exactly description layer original expectation set minimizing information lost just looking 
summary situation driven robot control relies ability accurately assess situation surrounding robot times 
ideally assessment constant direct sensor observation entire world 
practice execution systems rap system face fact real sensors limited bandwidth range 
limited bandwidth means robot examine items world tinhe limited range means items outside local area sensed 
rap system base action choices reasonable picture larger world maintain memory past sensory information 
memory acts buffer rap decision procedures want stable view world sensors move item item examining small part world time 
addition robot sensors having limited bandwidth range uniquely identify item world 
assume item tered assigned identifying name robot hardware name remains unchanged long item remains accessible 
soon item comes inaccessible sensor name lost item encountered assigned different name 
call local identification assumption 
local identification assumption robot need remember formation items seen past requires rap memory system recognize items seen 
items encountered memory system begins build descriptions new descriptions matched old descriptions item memory cluttered duplicate descriptions rapidly meaningless 
recognition process compar ing new item description old identifying correspond real item 
recognition rap memory assumption items remain pretty unchanged location encountered 
items seen situation form set items expected situation encountered 
new items sensed compared items expectation sets see seen 
match description expected item description new item merged form single record item memory 
matching mediated context sensitive functions proceeds automatically rap memory 
important note recognition mistaken 
rap memory recognition algorithm assumes items seen situation encountered 
real world may may true 
times items really remain unchanged recognized problem 
situations items may moved changed substituted agents robot gone 
circumstances robot may mistakenly identify substituted items items 
rest rap system aware mistakes generate appropriate actions mistakes tolerated 
important thing mistakes result rap memory assumptions inherent process recognizing items 
people sanhe problem faced indistinguishable items fuel drums boxes look sanhe 
particular errors rap memory result particular algorithm algorithm perfect world just uncertain 
automatic item recognition rap memory allows rest rap system treat memory simple database item property assertions rest thesis takes item recognition granted 
concession item recognition raps contain sensing operations specifically designed gather information ensure recognition take place 
example diamond box robot wants diamond robot gather information recognize box sees check inside sure recognition correct 
chapter moves discuss task generation scheduling 
sketchy plan leave tasks unordered execution generate new tasks actions perform 
rap interpreter coordinates operations decides task tinhe 
chapter describes primitive actions way primitive action execution affects contents memory 
chapter rap interpreter rap situation driven execution system major components rap interpreter including memory task agenda rap library task definitions drawn 
tasks best thought instantiations rap defined programs executed interpreter 
chapter discusses problems involved designing interpreter rap defined tasks behave desired situation driven manner 
recall description rap execution system illustrated 
initial sketchy plan system combined raps library form tasks placed rap task agenda 
rap interpreter selects tasks agenda tinhe executes 
execution consists spawning new subtasks add agenda issuing primitive action robot hardware 
major algorithms discuss respect rap system rap interpreter executing rap defined tasks hardware memory interface handles primitive action results 
subsystems quite separate interpreter queries memory issues primitive action requests plays part analysis primitive action results resulting memory changes 
hardware memory interface hand continually altering memory response new information world control robot behavior 
algorithms processes described 
unfortunately understand interpreter algorithm sonhe notion rap initial sketchy plan task agenda tasks memory data queries answers tasks actions li rap execution system syntax required vice versa 
chapter introduces basic rap syntax concentrating interpreter required execute 
chap ter uses resulting description interpreter basis describing com plete rap syntax behaviors enables 
basic rap syntax execution goal rap system part sketchy plan part method expansion task processed 
representation describe task instantiations rap 
goals introduced system index rap library rap indicated create task goal 
may active instantiations sanhe rap goals sanhe form active simultaneously 
goals require complex behavior loops pauses synchronization counting fulfil full rap syntax described chapter capabilities 
section introduces basic syntax 
reactive action package defined form different clauses 
clause describes different aspect rap behavior execution tinhe 
outline syntax shown define rap index succeed formula method oc car rap behavior method plan carrying rap behavior methods index clause mandatory identifies goal rap designed handle 
succeed clause specifies conditions true rap achieved goal 
conditions specified formulae match assertions rap database 
method describes different way accomplish goal contains specify steps method situations applicable 
rap index index takes form index name name unique rap defined loosely interpreted goal rap designed achieve 
rap sketchy plans rap method clauses specify execution subgoals 
index clause may include input output variables 
input variables output variables follow special symbol 
input variables bound task described rap selected execution output variables bound task completes successfully 
example possible rap indices index handle low fuel index arm pickup arm thing index find object object place index rap designed watch fuel level robot truck get low 
doesn need arguments assuming low defined rap 
second example typical form rap index rap pick object robot arms 
third example describe rap designed discover location object looking asking reading book return location binding variable place 
rap succeed clause succeed clause describes conditions true world rap properly carried intended behavior 
basic succeed clause syntax succeed formula executing task loops methods succeed clause satisfied methods apply 
formula query rap memory may contain fi ee variables variables contained input variables rap index 
query successful rap completed finish preserving free variable bindings correspond output variables index 
specifying rap methods method rap represented separate method clause broken context task net primitive 
context specifies situations method appropriate task net primitive describes sub plan method 
basic syntax method method context formula task net task method context formula primitive primitive action request context clause context method formula true memory method appropriate 
execution time rap interpreter looks method context chooses context true 
example method appli cable holding context context arm holding arml thing satisfied exists object arml holding 
context formula matched rap memory free variables bound 
bindings preserved referenced contained task net primitive 
example thing free variable match bound object arml holding 
associated task net primitive perform operations object referring thing 
primitive clause method contains primitive clause indicates primitive action request appropriate way carry task 
primitive action clause describes single action request passed hardware interface 
example arm grasp primitive action simulated robot truck lowest level task pick contains method method context know sensor name thing true arm arm thing primitive arm grasp arm thing method applicable sensor name object grasped known arm positioned appropriately 
note sensor name known object old expectation set matched currently accessible item 
sensing required situation 
describing method task net task net clause inside method describe sketchy plan carrying rap intended behavior 
general task net contain number steps executed 
step separate entry special annotations order steps respect specify preconditions step sets post metric temporal constraints steps 
basic syntax task net task net stcp tag priority stcp cation annotations stcp tag priority stcp cation annotations tag task net entry identifies step task net step different tag 
step optional priority consisting single integer value 
value added priority enclosing rap give new priority step 
default priority value zero gives task net step sanhe priority enclosing parent priorities discussed detail section 
step specification pattern match rap index 
specification may contain variables bound tinhe task specified executed 
input variables second steps may unbound tinhe task net spawned bound output variables earlier steps execution step begins 
step specification indicates step supposed 
task net steps connected form plan 
notations specify temporal ordering constraints preconditions metric temporal constraints 
annotations discussed chapter simplest formula tag annotation performs functions specifies task ordering constraint describes execution time precondition 
intended intuitive meaning step annotated designed generate specified formula tagged step 
example task net fragment task net tl arm grasp arml thing arm holding arml thing arm crush arml thing states grasp step included specifically sure arml holding object crush step 
implication crush follow grasp thing held crush begins gone wrong 
formulae appear foe annotations preconditions tagged steps 
formulae execution time analog traditional plan time protections 
step designed set condition specified formula condition violated second step ceases valid 
foe annotation formula false step points enclosing task net fails 
example example consider rap shown 
rap defines task move object fi om location robot delivery truck donhain 
instance move box factory goal move box factory specified 
goal specified form task thing bound box place bound factory 
task finish rap memory contains assertion location box factory showing box correct factory 
method rap applicable location box known 
situations method context match appropriate assertions memory loc bound box location say lot 
task net method specifies steps totally ordered annotations 
goto lot tl pickup box goto factory putdown box annotations specify pickup task comes execution truck lot heading factory holding box factory holding box putdown task executed 
facts true appropriate tinhe method assumed working intended possibly primitive failure interruption rest method abandoned 
subtasks succeed mean task finished 
method completes task brought execution succeed clause checked 
define rap index move thing place succeed location thing place method context location thing oc oc unknown task net goto oc truck location oc ti ti pickup thing truck holding thing re truck holding thing goto place truck location place putdown thing method context location thing unknown truck location warehouse task net goto warehouse truck location warehouse ti ti pickup thing truck holding thing re truck holding thing goto place truck location place putdown thing simple rap moving object method really intended clause true task complete method chosen executed 
second method tap similar applicable box location known 
method states idea go look warehouse object location known 
truck warehouse box isn rap methods apply alternative give 
tap fails hope parent task spawned know deal problem 
section describes way rap interpreter retries methods succeeds fails tasks keeps getting caught futile loops 
rap interpreter task consists rap description variable binding information executed algorithm shown 
task chosen agenda execution succeed clause checked 
succeed clause satisfied task finished method selected task 
method generates subtasks added task agenda followed task returns wait subtasks complete 
new task chosen agenda execution process repeats 
task executes moves back forth task agenda rap interpreter algorithm 
succeed clause satisfied finish 

choose method executed 

wait method finish 

go step repeat 
essentially task tries various methods repeatedly goal satisfied 
inherent looping behavior gives rap system robust situation driven execution behavior 
matter task method interacts world task trying achieve goal knows succeeded 
agents may interfere execution task may interrupt middle method robot hardware may fail properly carry action task finish finds success clause satisfied 
hand looping behavior involves problems overcome keep rap interpreter getting stuck working task forever 
problems solutions discussed 
task agenda tasks waiting execute tasks new tasks interpreter choose instantiate method primitive 
actions hardware interface 
choose task run task agenda 

check task rap memory see finished 

task finished check methods choose appropriate current situation 

method primitive action send hardware execution wait result 
hardware execution fails fail task 
hardware execution succeeds put task back task agenda 

method network subtasks put subtask task agenda 
put task task agenda execute new subtasks finished 
opportunities early success recognized automatically 
see section rap interpreter algorithm issues task execution major issues addressed implementing rap inter algorithm 
problem choosing methods task 
second issue processing task success failure 
third problem deciding task choose task agenda 
potential getting caught futile loop 
clarify issues consider situation depicted 
robot sitting location knows box named location robot tasks waiting task agenda 
task exists handle encounters enemy troops 
robot ready shoot run away 
task exists deal low fuel levels 
normally robot worry fuel consumption task ensures fuel level gets low robot side trip get 
task robot periodically look check local situation 
robot engaged task sitting may sensors notice items agents come go 
sure rap memory represents reasonable picture world nearby monitoring task causes robot check situation regular intervals 
resident tasks typical examples maintenance goals realistic robot 
maintains local situation free enemy troops second maintains safe fuel level third maintains date awareness local situation 
situation introduce new goal asking robot move box location goal move 
goal combined rap form new task added task agenda shown 
agenda holds tasks system decide 
making choice issue addressed implementing rap interpreter 
assume enemy troops task eligible run enemy troops low fuel handling task eligible run plenty fuel 
assume situation monitor runs minutes just completed 
move task discussion ignore problems raised lack fixed designators addi tional sensing operations included various raps ensure proper identification particular box 
task agenda rap memory location truck location typical robot delivery domain situation currently eligible run interpreter selects execution 
task agenda rap memory location truck location adding new task agenda step executing move task check succeed test memory 
recall succeed clause move rap variables bound form succeed location clause unify rap memory task finished method chosen 
choosing methods second issue addressed implementing interpreter 
particular example simple methods exclusive appropriate sanhe tinhe 
case interpreter decide candidates 
method contexts move rap context location oc oc unknown context location unknown truck location warehouse method chosen unifies rap memory binding oc giving method context location unknown task net goto truck location tl tl pickup truck holding truck holding goto truck location putdown method primitive action sent robot hardware 
new subgoals generated indexed go pickup goto putdown 
associated rap code library new task placed task agenda 
annotations task net description place ordering constraints new tasks executed 
annotations specify preconditions true start second third fourth tasks 
move task placed back task agenda ordered chosen new subtasks complete 
result shown 
complete cycle interpreter algorithm task agenda holds tasks original maintenance tasks move task task agenda rap memory location truck location expansion move task subtasks expand move task 
interpreter step choose task run 
enemy troops appeared fuel level low time look task er select note placing move task back agenda effect potentially giving control task agenda 
enemy troops shown task designed deal able jump take care situation 
task control interpreter brief period expanded 
control passes children task agenda 
task agenda rap memory location truck location successful returning example move task children execute eventually things happen 
successful interferes execution system world state shown 
move task eligible execution chosen succeed clause unify box location memory finish 
hand truck get location find box shown 
pickup subtask fail move task come execution method tried 
third issue designing interpreter making task success failure behave way 
task agenda rap memory truck location unsuccessful method choice final issue detecting terminating futile loops 
suppose reach ing location task comes execution fails slips truck gripper 
remaining subtasks removed agenda task conic execution 
satisfied method applicable 
new task satisfied immediately new task come execution 
suppose slips robot gripper fact just slippery picked 
isn done interpreter robot caught futile loop trying pick forever 
fortunately situations detected interpreter tasks get caught loops 
discussion goes interpreter issues detail 
choosing method factors enter rap interpreter procedure choosing methods task 
definition method chosen applicable context clause satisfied tap memory 
case methods applicable situation criteria decide 
define rap index pickup thing succeed arm holding arm thing method context small arml thing task net tl arm empty arml arm holding arml arm pickup arml thing method context small arm thing task net tl arm empty arm arm holding arm arm pickup arm thing pickup rap consider pickup rap delivery truck domain shown 
rap describes task pick object world contains methods arml arm 
situations arms big pick requested object contexts true 
interpreter choose methods way 
obvious solution choose random information available rap interpreter 
assuming arm known small time pickup task executed method arml method arm selected random 
example assume second method selected arm 
goes selected method arm holding object 
suppose chosen method completes pickup rap execution arm holding object 
means sonhe reason chosen method result object picked 
failure occurred arm small rap memory incorrect incomplete updated hardware interface include assertion arm small 
situation pickup satisfied succeed clause method choice occur second method ruled context satisfied method tried 
possibility second method fail arm small 
happen reasons task trying arm sanhe tinhe arm unable put holding 
way sense try arml attempting arm 
achieve behavior task past execution history prefer methods succeeded applicable 
algorithm rap interpreter select task method check method context see applicable 
check task execution history see methods tried failed 
consider applicable methods failed fewest number times 
choose randomly methods record chosen 
execute chosen method record success failure annotation task 
handling success failure task introduced system remains active consideration agenda succeeds fails 
task succeeds task goal sure achieved rap memory believe achieved 
conversely task fails means applicable methods known executing task tried worked 
task failure necessarily signal failure goal task service 
particular subtask fails means method part working mean method tried 
task failure really means way accomplishing task tried task impossible 
methods exhausted success rap system loss forced abandon task 
task succeed succeed test satisfied rap memory 
satisfaction task succeed test means task goal accomplished interpreter task success remove task execution agenda 
task removed agenda tasks waiting finish eligible execution 
task fail reasons common problem task methods applicable existing situation method context satisfied memory 
sonhe situations appropriate wait try task interpreter automatically 
get waiting behavior rap describing task explicitly include waiting methods see section 
task fail reasons get caught futile loop trying sanhe method see section execution preconditions met 
preconditions specified explicitly rap code task see section annotations task appears task net 
recall method pickup rap discussed previously method context task net ti small arm thing arm empty arm arm holding arm arm pickup arm thing annotation task net means task designed generate state arm holding task executes 
annotation encountered task net rap interpreter attaches explicit check indicated state precondition subtask generated 
example task gets precondition arm holding starts execute 
task chosen execution interpreter checks succeed test satisfied task finishes 
task finished interpreter checks attached precondition arm empty 
arm empty method chosen arm empty means method working planned task fail 
matter task fails result sanhe 
task removed task agenda tasks waiting complete eligible execute 
furthermore task generated part method tasks method removed agenda 
task siblings removed fails failure suggests strongly method proceeding planned 
method abandoned enable parent task try 
summarize algorithm rap interpreter handle task success failure task succeeds remove task agenda 
task fails remove task agenda tasks part sanhe method 
enable tasks agenda waiting removed tasks finish 
task succeeds algorithm results step method belongs starting step method parent starting 
hand task fails method part aborted parent started try better method choice 
primitive actions treated exactly sanhe way tasks step method 
managing tasks agenda execution single task concerned selection methods response method success failure 
tasks active concurrently additional problem choosing task tinhe 
robot delivery example discussed section began task agenda containing tasks delivery task task deal enemy troops task deal low fuel task periodically sense local situation 
tasks completely independent corresponded separate top level goals assigned system particular order 
task net syntax rap method descriptions allows subtasks remain unordered respect 
rap interpreter comes choose task agenda execution usually candidates available choose 
major assumptions rap system respect task selection 
task executed tinhe 
specifically interpreter task chosen agenda task chosen previously completed returned agenda wait 
assumption follows letting primitive action execute tinhe 
primitive actions overlapped reason try execute tasks parallel 
tasks execute parallel exactly sanhe way multi processing operating systems share computer processes 
task chooses method installs subtasks agenda returns wait method complete 
task sanhe sets subtasks may interleave interpreter choosing subtask method subtask 
micro level task execute tinhe macro level unordered tasks appear execute concurrently 
second assumption task agenda management looking neglected 
precise order tasks chosen agenda significant effect efficiency pursuit 
simplest example tasks require different locations expands subtasks 
subtasks allowed interleave robot moving back forth locations waste lot tinhe 
better strategy complete task changing locations unordered tasks competing resource location careful scheduling avoid unnecessary conflicts execution efficient 
scheduling requires looking considering task involves process contains plenty waiting bread example better shuttle back forth happening 
different possible task orderings resource deciding efficient 
exactly projection problem situation driven execution embodied rap system designed 
tasks selected agenda attempt consider consequences alternative orderings 
appeal notion task agenda eligible run 
tasks placed agenda usually ordered respect tasks wait complete 
task waiting complete said ineligible run selected interpreter execution 
tasks ineligible execution making wait states world true specific intervals time pass 
tasks ineligible run failed explicitly waiting state true world continue 
rap interpreter chooses eligible tasks 
task selection constraints types constraint placed task control eligibility execution explicit ordering constraints temporal constraints memory content constraints explicit ordering constraints arise method task nets interpreter adds constraints tasks wait methods complete 
temporal constraints added method task nets see section attach start time deadline task 
task eligible run start time passed eligible interpreter tries complete task deadline passes 
memory content constraints added part rap code task see section consist states true rap memory task executed 
example tasks handling enemy troops handling low fuel memory content constraints control eligibility execution 
selecting task execution agenda interpreter choose task constraints ineligible run 
specifically task ineligible execution situations hold task constrained follow completed 
assigned start times passed 
state constrained wait currently satisfied rap memory 
constraints allow task behavior descriptions include complex tempo ral relationships 
ordering constraints permit generation subtasks completed temporal constraints permit addition time delays deadlines 
task requires step follow small delay passed 
example buying soda vending machine include steps money followed press soda bu 
button pressed short interval passed allow money fall goes 
guarantee pause temporal constraint states second step start execution second step completed 
memory content constraints allow task execution synchronized external states world 
truck level gets low waiting alarm sound represented tasks wait agenda appropriate fact true memory 
task wait assertion fuel low task waiting wakeup assertion ringing noise occurred 
task selection heuristics task eligible run rap interpreter heuristics chose tasks eligible run 
heuristics order application prefer higher priority tasks lower priority tasks 
prefer tasks deadlines closer 
prefer tasks failed 
prefer tasks sanhe family task chosen 
tasks contention choose random 
heuristic allows important tasks interrupt important ones 
second heuristic attempts ensure deadlines met best 
third switches system focus attention give external interference chance go away retrying task fourth focuses system attention single task prevent gratuitous interference concurrent tasks 
heuristics similar nature conflict resolution production system languages ops el mcdermott forgy 
deciding production fire task execute involve sanhe problems 
particular systems compromises environments sia le behavior bowen kang 
selection heuristics system sensitive changes situation fourth keeps system stable focusing attention task tinhe 
factor rap interpreter looks selecting task run task priority 
highest priority task eligible run chosen eligible tasks sanhe priority heuristics considered 
task priorities single integer values higher numbers defining tasks higher priority assigned tasks method task net syntax see section 
usual task priorities enable high importance tasks interrupt important tasks 
example simple robot delivery task discussed previously starts tasks agenda 
appropriate priorities tasks displayed example shown 
maintenance tasks higher priorities move task dealt 
low fuel enemy troops tasks constrained run fuel low enemy troops situation monitoring task usually waiting period tinhe pass 
tasks eligible run chosen higher priority 
fact maintenance tasks different priorities interrupt 
keeping local situation description date important followed dealing enemy troops getting fuel 
tasks conceptually interrupt actual interruption process computer program sense 
interpreter finished task goes agenda choose high priorities override heuristics apply choice 
task agenda rap memory location truck location execution situation priorities eligible task priority interpreter considers deadlines assigned task 
deadlines assigned task net annotations represent times tasks completed 
interpreter attempts honor deadlines choosing tasks short intervals estimated completion time deadlines longer intervals 
tasks eligible run estimated durations hours finished today tomorrow task done today selected 
subtask deadlines inherited parents tasks deadline default 
important note heuristic requires rap interpreter notion long task take 
information supplied form annotation rap code task see section approximation best 
expected duration task calculated subtasks require looking considering alternate expansions 
task explicitly annotated expected duration duration assumed zero 
tasks estimated durations zero early deadlines preferred deadlines 
priorities deadlines rap interpreter prefers tasks tried failed 
heuristic assumption usual reason method failure external influence interfering execution 
example agent trying manipulate object object process finished 
cases reasonable idea come back try task 
rap interpreter embodies idea preferentially choosing tasks failed 
tasks choose considering previous heuristics rap interpreter selects task family task chosen 
tasks subtasks generated executing single top level task belong family 
example tasks spawned service move task belong move task family 
preferring tasks family effect focusing system attention execution top level task time 
results execution proceeding method subtask interference tasks eligible execution 
focusing system attention minimizes number subtask preconditions inadvertently clobbered tasks system 
focusing system attention single task effect putting task families need priorities deadlines shift system attention situation demands 
achieve reasonable behavior interrupted system maintains stack past families just single 
task chosen execution higher priority task chosen new task priority family pushed stack 
top family stack new focus attention 
higher priority task gets chosen pushed stack 
different family priority gets chosen execute old family popped stack new family pushed 
tasks current higher stack priority eligible run top priority family pair popped stack focus attention shifts family executing previously 
stack means low priority task move task interrupted high priority task getting fuel system returns low priority task move task taken task priority 
heuristics considered task choose rap interpreter selects candidates random 
preventing futile loops problem inherent looping nature rap interpreter algorithm possibility task getting caught endless futile loop 
suppose task comes execution consults rap memory chooses method try 
method completes task comes execution rap memory consulted changed 
task choose method wait complete 
rap memory changed cycle continue indefinitely 
key detecting loops realize arise method chosen repeatedly exactly circumstances 
particular method context satisfied rap memory variable bindings 
task variables bound way time method chosen execution having discernable effect world 
situation continues task stuck loop progress satisfying succeed clause 
task comes execution method chosen chosen previously rap interpreter checks see variable bindings effect 
method chosen bindings certain number times interpreter causes task fail 
making task fail stops looping behavior gives task parent chance choose method applicable current situation 
parent looping chooses generate task execution eventually terminate looping behavior detected 
examples run thesis looping threshold task tries method twice fails 
example consider situation shown 
truck attempting pick box named ground 
time grasps box agent grabs box puts back ground 
regardless possible looping scenario pickup task encoded comes execution box ground 
pickup task avoid getting caught loop long agent continues difficult 
rap interpreter detect loop cycles situation method choice time variable bindings identical 
task fail parent chance choose method takes agent account 
result detecting futile loops capture variable bindings explicit looping behavior coded carefully 
catch loops rap inter record variable bindings active task time method instantiated 
includes just variables bound method context bound task instantiation time bound various rap clauses repeat described full syntax description chapter 
result explicit loop invokes method re changing situation measurable way iron water pipe breaks terminated futile loop detector 
avoid termination loops mus generate different binding iteration explicitly inform detector progress 
arbitrary loops prohibited loop detection algorithm 
arbitrary task recursion prohibited 
task allowed invoke parents identical subtask recursion may go forever bypass loop detector 
task generation time rap interpreter checks task parents invoked bindings spawn ing task fail 
restriction loop detection algorithm saw tv show old house 
guys iron pipe fitting huge hammer long time apparent progress quite suddenly shattered 
dont know knew making progress fitting just wouldn break 
imagine going assumption break simply give 
prevents task execution getting caught infinite loops unforeseen interference outside world 
non terminating raps coded purpose care taken 
loop detection cure incorrect buggy raps purpose detect interference anticipated advance 
primitive actions rap memory important aspect situation driven execution making sure memory re accurate picture actual world state 
rap system ideally base task method choice directly real world 
sensor lim world state perceived directly memory preserve sensor data 
rap memory represents world state assertional database attempts automatically keep database date new assertions sensor names items change encounter encounter 
rap interpreter uses database basis method choice assumes primitive actions generate sensor data database updated accordingly 
question remains assertions generated update memory primitive actions executed 
world execution rap memory action requests sensor reports robot hardware act sense rap memory model recall description rap memory buffer sensor data illustrated 
rap interpreter generates primitive action requests passes robot hardware execute 
actual execution takes place results update memory model world 
example suppose robot truck trying pick box ground truck 
generate primitive action move gripper box success results memory updated reflect fact gripper box 
robot try grasp box success update show gripper holding box 
furthermore primitive action fails result update world model 
robot moves gripper box success grasp action fails box isn updated eliminate assertion gripper box 
agent taken box move grasp commands 
section discusses assumptions algorithms update rap system run robot deliver truck simulator 
specific examples discussion domain dependent expected idea updated direct result action world domain independent concept 
primitive actions sensor data rap execution system point view primitive action atomic operation return success failure finished 
action succeeds simply returns success fails returns single symbol specifies type failure best hardware determine 
rap system executes primitive action time waits execution takes place algorithm 
issue primitive action request hardware 
wait action complete memory updated 
report success failure issuing rap primitive actions rap execution takes place action completes 
keeps rap memory consistent state times results primitive action trying change memory sanhe tinhe action sanhe tinhe memory referenced task 
simulated robot truck hardware takes similar view primitive action exe cution 
primitive action requests executed tinhe completes report success failure 
primitive action executed simulator may generate arbitrary amount sensor data 
sensor data list notifications individual aspects world 
typical notifications contain information item seen road direction specific item property color size measured 
notifications item properties refer items locally assigned sensor 
primitive actions sensor notifications robot truck appendix discussed detail firby hanks 
hardware interface rap system robot delivery truck handles execution action requests interpretation results 
interface takes action request generated rap interpreter passes hardware actual execution 
execution complete hardware returns success failure interface sensor data generated execution 
interface adjusts rap action success failure returns success failure rap interpreter 
interface interprets information contained sensor datum updates rap accordingly 
flow information hardware interface shown 
rap execution state rap memory hardware interface state update state update action requests success failure sensor datum handlers primitive action handlers data action result robot hardware act sense rap hardware interface example consider primitive action arm grasp arml item 
action requests hardware close gripper arml item 
grasp action succeed arm involved positioned object grasped holding things 
execution action may fail chance grasp gripper drop object 
simulated hardware quite plausibly detect situations returns failures arm arm full arm dropped arkin 
arm failure generated means arm positioned properly agent object away 
case hardware interface erase assertions rap memory effect arml positioned item 
arm full failure generated interface updates rap reflect arml holding grasp item 
fact arml holding assertion added stating item big pick 
arm dropped failure occurs hardware interface change changed world 
action succeeds interface update rap memory state item held arml longer sitting ground 
different example illustrated primitive action eye examine external item asks hardware direct eye item outside truck look closely 
action fail item located sensor range 
failure occurs updated show item outside truck action succeeds assertion item examined 
simple updates stream sensor data usually generated action succeeds 
precise data generated depend object examined state 
item rock separate notifications size color generated 
open box size box contents generate separate notification 
updating rap memory procedure hardware interface update rap memory assumptions 
assumes memory modifications necessitated primitive action sensor data processing independent state rap execution system 
hardware interface look tasks executing 
assumption stems fact memory supposed reflect current state outside world changes memory depend actions taken world anticipated 
second interface assumes primitive action sensor notification dealt isolation 
sensor data may generated bursts result specific action requests datum processed generated 
assumption reflects idea sensor notification may generated different ways different sensors semantics notification depend came 
essentially assumptions justify add delete lists systems fikes nilsson wilkins big difference add delete lists predict primitive handlers respond actual changes world 
planning systems model effects primitive action set assertions added deleted system world model 
assertions set depend action involved action treated isolation 
systems assume assertions changed independent world state need query memory processing add delete list 
begun relax assumption somewhat include context dependent action effects schoppers wilkins dean cl 
rap system effects primitive actions inherently context dependent notion add delete list generalized arbitrary designed process type primitive action sensor notification 
handlers delivery truck domain consist instructions add delete particular assertions rap memory database arbitrary lisp code allowed changes memory arbitrary analysis current memory state 
example object grasp attempted fails arm holding possible infer lower limit size object size items currently held arm summed subtracted known capacity arm 
assertion remember object grasped large 
current interface simulator summation different assertions depending arm holding 
particular object grasped arm empty assertion stating object big grasp arm holding things assertion effect full pick object just 
assertions retracted handler puts 
separate lisp procedures process sensor notifications actions declarative representations add delete lists justified reasons 
robot fixed number primitive actions sensor notifications available change 
planning knowledge rap library may change grow robot capable world interface handlers usually remain fixed particular robot defined hardware domain 
second memory changes required handler may depend rap memory state complex ways 
coding scheme handlers quite 
invent new representation lisp code 
rap execution system try handlers purpose updating memory response activities real world 
processing actions sensor data encapsulated interface interest rap interpreter 
interpreter raps results processing appears rap memory 
handlers effectively part robot simulator hardware may fruitfully considered primitive actions 
hardware interface broken control structure libraries handlers primitive actions sensor handlers 
control structure 
accept action request rap interpreter 

pass action hardware wait resulting success failure sensor data 

call appropriate primitive action handler alter memory response success failure returned 
complex mean handlers include calls needed find current state memory decide changed changes 
changes include erasing adding assertions shuffling items expectation sets 
see appendix 
loop sensor datum call appropriate sensor datum handler 

return success failure rap interpreter 
examples example consider primitive action handler arm grasp shown fig ure 
code implements memory update process required action request form arm grasp arm object 
handler function arguments action request result executing action world 
arm grasp action requested rap interpreter interface passes hardware waits result 
handler function called request result arguments 
result success okay function changes grasped item location memory held arm 
erases fact arm positioned grasp item temporary assertions effect item old container full put things inside 
result arm oo function assertion arm temporarily full arm simply small pick item 
arm positioned correctly function sure memory say failures arm dropped cause change memory 
result returned function returned rap interpreter 
note changes rap memory context dependent results okay arm oo handler eye examine shown 
simpler arm grasp handler change world 
action succeeds notation gratuitous sensor operations avoided item examined location changed unknown 
memory changes generated eye examine primitive action result processing sensor notifications generates 
examples sensor handlers shown 
deals notifications item colors 
notifications usually generated eye examine actions appropriate memory update simply assert color property item 
second example complex declare primitive action handler arm grasp lambda request result request ar thing arm cadr request thing caddr request cond eq result okay memory erase memory arm arm env create binding environment okay memory query memory env location thing place binding value env memory erase memory full place memory erase memory holding place thing memory erase memory location thing memory assert memory arm holding arm thing new item location memory thing arm okay eq result arm full env create binding environment extra memory query memory env holding arm true extra memory assert memory full arm thing memory assert memory small arm thing arm full eq result arm memory erase memory arm arm thing arm result arm grasp primitive action handler update memory response obj cot seen notifications usually result eye scan actions see appendix 
object seen notification means item particular class discovered accessible location assigned sensor 
class location item asserted memory database item introduced memory local assigned sensor 
introducing item places appropriate memory expectation set discussed chapter 
declare primitive action handler eye examine lambda request result request ye examine place thing thing caddr request cond eq result okay memory assert memory eye examined thing okay eq result eye cant find memory erase memory location thing new item location thing unknown eye cant find result eye examine primitive action handler declare sensor datum handler color lambda datum datum thing thing cadr datum color caddr datum memory assert memory color thing color declare sensor datum handler object seen lambda datum datum seen place thing clas place cadr datum thing caddr datum class datum memory assert memory class thing class true cond member place arml arm memory assert memory arm holding place thing memory assert memory location thing place introduce new item memory thing place class sensor datum handlers hardware interface rap interpreter primary reason separating memory update rap representation algorithm updates occur direct knowledge world appropriate 
memory changes result primitive actions reflect best available picture real world state 
raps allowed alter memory arbitrarily may incorrect inferences interrupted process may inferences sync best known world knowledge 
dependency machinery set track course rap inference memory changes assertions lost support removed automatically computationally expensive experience shown unnecessary robot activities attempted far 
inference allowed current model rap interpreter queries memory result unification unbound variables 
interesting experiment add new primitive actions system called assert assertion directly rap memory 
done tasks complex inferences update memory result 
inference occur task execution interrupted scheduled just task 
effect allow complex analysis data acquired primitive actions done robot head 
dependencies set tasks structured carefully keep inferences getting track interruptions execution independent tasks 
interesting thing rap system change support experiment 
summary rap interpreter main concepts take away discussion rap way single task structured executed way execution concurrent tasks mediated way primitive actions change world update memory 
executing single task goal execution system assigned combined rap description library form task components rap code defining success test methods 
priority possibly deadline 
scheduling constraints 
preconditions added task nets 
current variable bindings 
record past method choices success failure variable bind ings went 
component rap interpreter different purpose 
task priority deadline scheduling constraints coordinate task tasks task agenda 
preconditions ensure method task part proceeding expected variable bindings task preserve internal state 
past execution record aid method selection detecting terminating futile loops 
single task proceeds system shows executing algorithm check success clause satisfied succeed 
check preconditions satisfied fail 
check method contexts see applicable applicable fail 
choose applicable method record variable bindings 
method chosen part futile loop fail 
install method task net agenda execute primitive action request 
return task agenda await method completion 
record method success failure 
way task finish successfully selected agenda tinhe succeed test satisfied rap memory 
situations task loops repeatedly trying methods attempt satisfy success condition 
succeeding task fail preconditions imposed true applicable method caught futile loop 
failed precondition means method task interfered aborted 
applicable method means system doesn know futile loop means sonhe unanticipated interaction world attempts achieve task 
important points task succeeds confirmed achieved goal task fails knows way proceeding 
circumstances sonhe method selected executed 
mediating task selection rap execution system deal concurrent tasks faced problem choosing select execution 
mechanisms control choice task constraints selection heuristics 
constraints added tasks part initial sketchy plans rap code annotations task constraints satisfied considered ineligible execution selected 
types constraint supported rap system explicit ordering constraints 
temporal delay constraints 
memory content constraints 
explicit ordering constraints force tasks chosen specific order second task ordering run succeeds fails removed agenda 
temporal delay constraints force task wait specific tinhe passed execute memory content constraints task ineligible run specific states satisfied rap memory 
consideration constraints may tasks eligible execution rap interpreter uses heuristics choose prefer tasks higher priorities 
prefer tasks nearer deadlines 
prefer tasks failed tasks 
prefer tasks family task chosen 
candidates choose random 
priorities allow task interrupt emergency opportunity dealt timely fashion 
deadlines help order task selection tasks done sooner executed 
heuristics offer explicit task selection control attempt task interference 
preferring tasks failed gives interfering circumstances chance go away method isn working doesn hurt 
heuristic choosing task family effect focusing system attention high level task time 
prevents concurrent tasks inadvertently interfering destructive ways 
executing primitive action execution system assumes memory update occurs automatically execution primitive actions independent rap interpreter 
implementation system examples thesis includes hard ware interface interpreter simulated robot truck hardware memory update 
interface employs simple algorithm library primitive action sensor datum handlers 
primitive action passed robot hardware execution complete returns success failure set sensor notifications 
interface calls appropriate action handler result loops sensor notifications calling appro priate sensor datum handler 
handler piece lisp code alters rap memory consistent world information implied corresponding action result sensor datum 
handlers responsible generating memory update operations required keep expectation sets current see appendix 
important point memory update occurs robot takes action world learns new 
summary implicit looping behavior single task gives rap execution sys tem robust situation driven execution behavior face incorrect knowledge primitive action failure emergency situations 
incorrect assertions rap memory generally manifest enabling methods applicable actual situation known 
eventually result ex ecution primitive action fails produces new information corrects memory assertions 
tasks involved satisfied pick new methods new correct information try 
emergency situations dealt setting high priority tasks constrained run situation arises 
situation arise task eligible run high priority lets take control immediately 
properties execution algorithm allow robust behavior rap code describing tasks structured take advantage robustness 
appropriate task constraints methods coded tasks re effectively situation changes primitive action failures 
rap language supports description tasks includes facilities specifying tions constraints priorities deadlines explicit loops counting resources 
chapter describes rap language detail 
chapter rap language final component rap situation driven execution system described library rap descriptions 
new subgoals generated instantiation methods interpreter paired rap code define execution behavior 
code resides rap library form rap definitions 
task executed system defining rap library 
rap definition contains different clauses describe different aspects task behavior execution time 
basic syntax including type clause shown 
index clause mandatory uniquely identifies rap type 
preconditions constraints describe situations rap succeed clause describes situations rap completed goal 
rap may contain method clauses describing different ways goal 
method contains sub clauses define context applicable global restrictions required executing actual steps embodies 
monitor state monitor time repeat clauses allow rap synchronize conditions world waiting situation occur looping situation changes 
resources clause defines temporary data structures raps track allocation resources 
chapter begins discussion formulae appear rap clauses memory queries way variables bound 
discussion define rap index index duration estimated execution time monitor state formula monitor time delay deadline repeat formula succeed formula preconditions formula constraints formula resources internal resource definitions method plan carrying rap behavior method plan carrying rap behavior rap definition syntax followed detailed description facet rap representation language 
small portion language described chapter included completeness 
queries rap memory examination rap definition outline show clause includes formula unified rap memory 
formula meant represent state world takes form query memory asking state believed true 
queries may contain unbound variables treated existentially quantified memory query 
query succeeds free variables formula bound bindings play important role rap execution 
variable binding lifetimes discussed length sections follow 
formulae constructed rap memory queries constructs discussed chapter appendix queries consist propositions functions special form believe connectives 
propositions functions queries usually refer assertions world state subject default rules described section 
tasks occasionally wish alter behavior current execution history 
situations method rap may need tried method failed particular way 
special query functions included rap formulae query task execution history situations 
basic queries basic rap query consists proposition corresponding single memory assertion 
actual assertions expected memory depend donhain completely independent rap execution system 
queries involving memory assertions bind free variables 
examples basic queries color item red color item red special form believe introduced chapter basic query believe proposition time interval proposition match atomic formula memory 
tinhe interval bound specified integer variable bound integer believe succeeds assertion matching proposition memory specified amount tinhe 
example believe color item red believe color item red time behave identically assuming time bound 
succeed item color asserted red tinhe units fail contradicting assertion tinhe interval 
assertion interval default value proposition matches proposition query succeed 
time interval believe form free variable form query asking assertion 
assertion proposition exists database believe succeed variable bound time interval assertion 
example color item asserted blue tinhe units ago query believe color item color time succeed color bound blue time bound 
queries task progress addition queries assertions rap memory raps queries current execution history task describe 
queries defined distinguished propositions method tried method name result symbol result method method ame satisfied method rap attempted task 
method names assigned rap method clauses query methods sanhe rap 
result query satisfied result method tried task matches symbol 
example succeed clause left rap definition defaults succeed result okay means rap finish method tried completed successfully 
method tried query succeed 
valid symbols result queries depend donhain type failures returned primitive action requests 
list possible results delivery truck donhain included appendix addition donhain dependent failures domain dependent results okay method interference futile loop occur 
symbol okay means steps method completed successfully 
symbol method means method executed failed sonhe step applicable method interference means preconditions sonhe step method met 
symbol futile loop means step method ended futile loop 
task fails returns domain dependent failure received 
returns domain independent reason failure 
query result method true result executing specified method matches symbol 
combining queries rap queries may contain predefined functions 
functions may contain free vari ables bind 
variables appearing functions bound plain proposition queries sanhe formula 
predefined basic func tions defined numbers defined symbols strings 
example function uses color red note second true color bound red generate binding 
mathematical functions appear arguments functions propositions 
boolean functions combined basic queries 
basic formula tied obvious way query success failure treated true false appear arguments 
formula true constituents true succeeds unifying memory true constituents true succeeds true constituent formula false fails unify 
constituents connective valid formula including connective 
example color item red size item big contains item item true color item red color item blue color item red size item big discussed chapter rap memory allow deduction query processing backward chaining rules 
checking query satisfaction simply matter unifying formula rap memory 
ensures rap decision procedures executed timely manner 
arbitrary deduction allowed checking rap formula take interpreter arbitrary amount time method choice 
system interrupted method choice way respond changes external world time 
keeping query process simple system method choices quickly position choose appropriate task world changes 
trade complicated deductions done automatically 
example querying arm big grasp item useful infer item tools requires big 
currently done 
way lift limitation extend arm grasp primitive action handler inference assert result memory grasp fails see section just shuffles computation module 
arbitrary deduction required correct approach extend rap system include deduction primitive process suggested section index clause clause rap definition index 
index name index takes general name unique rap defined index library 
definition may take input output variables input variables coming output variables special symbol 
input variables current bindings task described rap selected task agenda execution 
input variables unbound task execution time task fails message interference 
output variables bound task execution bindings exported invoking task 
mechanisms allow output variables early steps rap method generate bindings steps method 
example consider possible rap indices index handle low fuel index arm pickup arm thing index find object object place index rap designed watch fuel level robot truck get low 
doesn need arguments assuming low defined rap 
second example host typical form rap description index rap pick object robot arms 
third example describe rap tries discover location object looking asking reading book returns location binding variable place 
raps referred indices method task nets 
example create method finds object goes picks arm task net task net tl find object object place goto place arm pickup arm object robust method problems arise steps 
shows early task bind variable case place task 
variable object bound find object task executes semantics rap interpreter means bound task net 
duration clause second clause rap definitions specifies estimated execution tinhe required rap 
duration clause optional appears rap just index 
duration clauses take form duration expression expression numerical value simple expression evaluates value 
expression duration clause correspond memory query variables contained expression bound 
duration clause evaluated instantiation tinhe included rap value defaults zero 
duration clause required aid rap interpreter satisfying task dead lines 
discussed section heuristics selecting task agenda evaluate latest tinhe task started satisfy deadline 
task started earliest selected things equal 
duration task known latest start tinhe properly calculated 
difficulty course task estimated duration determined chosen method 
ideally duration esti mates put task expanded primitive actions duration step determined 
situation driven execution system complete plan task known advance 
task selection re quires duration estimate duration clauses included rap descriptions give estimate soon task instantiated 
execution break duration information incorrect available deadline satisfaction heuristic task selection heuristic 
effect poor duration information tendency finish tasks tight deadlines late 
appropriateness conditions clauses rap definition describe conditions true rap carry intended behavior 
succeed clause defines actual intended behavior preconditions constraints define states world rap expected carry behavior 
clauses syntax succeed preconditions constraints rap selected execution interpreter processes clauses 
succeed clause processed formula query rap memory 
query successful rap finished succeeds 
success conditions met preconditions clause checked memory satisfied execution continues 
preconditions match fails rap fails immediately message interference 
preconditions checked constraints checked 
satisfied rap continues unsuccessful rap fails interference 
rap constraints act additional preconditions inherited subtasks rap generates 
constraints constrain subtask rap preconditions constrain rap 
planner point view succeed preconditions constraints clauses define rap planning operator 
succeed clause state rap true world preconditions rap states true world rap expected satisfy succeed clause 
imagine traditional planner solves novel problems starting raps produce desired state defined succeed clause preconditions clauses define new world state generate 
chaining raps way eventually produce plan moves current state desired state 
planner constraints clause rap additional conditions true rap starts 
hierarchical problem solver constraints describe world states primary reason constraints appear rap top level rap methods 
raps clearer constraints placed method method context see rap obscure planning operator 
planning constraints method selection represent properties rap 
experience planners raps necessary determine useful constraints inside outside methods 
kept true execution rap question hierarchical expansion rap acceptable violates constraints 
succeed clause clause includes formula describing state world declares rap succeed state satisfied 
executing rap loops methods succeed clause satisfied 
methods satisfies succeed clause rap eventually fails 
rap succeeds world state described succeed clause believed memory 
succeed clause rap mandatory 
may left shorthand rap taken successful soon executes method fail rap finish picking method runs completion 
way specifying task supposed bring state world 
example looking see nearby task needs completed successfully bring specific state world 
simple physical tasks turning way 
formula succeed clause may contain free variables variables contained input variables rap index 
formula successfully matched memory execution variables take bindings remain effect 
match successful means rap completed finish immediately 
succeed clause bind rap index output variables variables rap 
preconditions clause preconditions clause includes formula describing state world declares rap appropriate state believed true rap begins execute 
rap supposed applicable wide variety situations rare rap sense situations 
example rap picking item robot arm may contain different methods different items different orientations method may arm empty start 
rap preconditions thought states world true rap methods 
advantage preconditions rap including preconditions method context improved efficiency preconditions checked deciding rap continue 
trade new method added rap learning algorithm applied outside situations defined rap preconditions 
formula preconditions clause contain free variables succeed clause 
variables bound preconditions formula query kept preconditions clause bind variables rap 
constraints clause constraints clause declares rap state described formula remains true world entire execution rap methods 
ensure constraints obeyed execution rap inherited subtasks spawned rap methods 
example rap moving object truck certain location constrained applies long truck arm remains location 
task executes chooses method steps pick object move arm outside truck put object steps inherit constraint apply long truck stays location 
constraint truck arm move pickup putdown object wrong place 
task constraints treated exactly preconditions true task comes execution task fail mes sage interference 
inherited subtask parent constraints parent preconditions 
free variables constraints treated preconditions remain bound clause considered 
examples rap succeed clause preconditions constraints act determine continue finished 
generate tasks different behaviors 
example consider partial rap definition define rap index arm unload arm object location succeed location object location preconditions status arm available constraints truck location location rap describes task unload object truck particular arm 
arm object object location input variables task finish believed object correct location 
task precondition specified arm available constraint truck start remain location object deposited 
constraint gets inherited subtasks rap methods free generic pickup putdown operations fear object wrong place interruption 
stringent preconditions possible considered object inside truck start rap interrupted start restrictions inhibit graceful recovery 
example pieces code thing define rap constraints truck location warehouse method task met tl pickup box bay putdown box external define rap preconditions truck location warehouse method task met tl pickup box bay truck location warehouse putdown box external defines task appropriate truck warehouse subtasks generates take place warehouse 
pickup putdown tasks method fail truck warehouse come execution 
second rap defines task appropriate truck warehouse choosing method 
task net includes explicit annotation effect task precondition truck warehouse 
differences raps 
constraint specified inherited subtasks steps required pickup putdown method steps fail truck warehouse 
second rap demand requires truck warehouse method choice time putdown subtask executes 
second difference rap requires pickup subtask occur warehouse second 
precondition second rap means method choice take place warehouse annotation means putdown step take place warehouse 
second rap prevents truck doing pickup task moves method instantiation execution pickup subtask 
specifying rap method methods represented separate method clauses rap contains context task net primitive 
context specifies situations method appropriate task net primitive describes actual sub plan method 
basic syntax method method name context formula task net task network entries method name context formula primitive primitive action request name method optional symbol distinguishes meth ods rap 
name argument task execution history queries described section 
specifying context context method formula satisfied rap memory method appropriate 
formula meant describe situations task net method valid plan carrying rap desired behavior 
method context need true method chosen execution context precondition constraint 
execution rap interpreter looks method context checking sure rap valid chooses context satisfied 
example method applicable arml holding context context arm holding arml thing satisfied exists object arml holding 
formula context matched memory free variables bound bindings kept contained task net primitive action request 
example thing free variable match bound object arml holding 
associated task net perform operations object referring thing 
context clause may left rap method results method applicable 
specifying task net task net clause inside method specify plan carrying rap intended behavior 
general task net contains number steps need executed step separate entry net 
special annotations connect various steps partially ordered network specify ditions step sets post metric temporal constraints steps 
basic syntax task net task net step tag priority rap index annotations step tag priority rap index annotations entry task net tag priority rap index specifying subtask create list annotations 
tag task net entry symbol uniquely identify step task net step different tag 
step optional priority consisting single integer value 
value added priority enclosing rap give new priority subtask step 
default priority value zero gives task net step priority parent 
priorities discussed detail section 
rap index step pattern match rap index exactly 
specification may contain variables bound time subtask spawned step executed 
input variables second steps may unbound time task net spawned bound output variables earlier steps execution step begins 
task net steps connected form plan annotations 
annotations specify ordering constraints protections metric temporal constraints 
annotations specify types subtask effects see section 
basic types temporal annotation attached step formula tag start tag tag window tag start time time number may combined order step 
tags refer steps task net 
start clauses add ordering constraints tasks window clauses add temporal con straints deadlines 
influence constraints deadlines processing task agenda described section annotation annotation performs functions specifies task ordering constraint describes execution time protection 
intended intuitive meaning step annotated designed generate specified formula tagged step 
example task net delivery truck domain task net tl select fuel drum external drum liquid held drum fuel pickup drum arm holding arm drum pour drum fuel bay putdown drum external task net generates separate tasks 
looks outside truck finds drum containing fuel 
binds drum variable drum rest task net 
second task picks drum arm third task dumps contents drum truck fuel tank final task puts empty drum outside truck 
annotations tasks specify order tasks execute set extra preconditions second third tasks 
task ensures selected drum holding fuel adds precondition task holding fuel begins execute 
task sure arm holding drum task 
preconditions satisfied appropriate task executes method fail message 
note formula annotation rap query bind variables tasks net 
arm bound whichever arm holding drum indices tasks 
start annotations start annotations terminate step attached tagged step point starts finishes 
example suppose containers filled sanhe tinhe filling operations soon container full 
task net fragment appropriate task net tl fill container fill container tl constructs particularly useful conjunction monitor raps start finish situations true world see section examples 
window annotation window task net annotation specify metric temporal constraints tween relative execution time tasks 
example task net tl put cake oven take cake oven window tl declares cake taken oven time units put 
take task executed temporal window time units put task finishes 
name step task net tag window annotation may take special values absolute 
means point temporal window instantiation time task net step second means temporal window absolute time units relative event 
example consider problem reacting enemy troops detected delivery truck domain 
ways react enemy troops fight flee 
fighting advantage clearing troops truck carry doing 
enemy defeated reasonable time capture truck render useless 
appropriate response fight isn working run away 
behavior encoded method shown method context location thing external class thing enemy troops true task net ti shoot thing te run away enemy tl window method applicable enemy troops outside truck contains steps shoot run away 
shoot step start anytime task net chosen continue flee step ends 
run step hand restricted starting time units method chosen 
delay gives shoot step chance 
fighting working time units method started run step eligible run higher priority fight step interrupt fighting take control fighting successfully eliminates enemy troops outside truck steps finish 
subtlety fight flee step temporal window constraint ensure prompt action response enemy troops 
tasks priority may competing execution time indirectly delay execution fighting 
putting deadline finish time units passed problem overcome 
specifying primitive method contains primitive clause generates primitive action request carry task 
primitive action clause describes single action request passed hardware interface 
example arm toggle primitive action simulated robot truck lowest level rap initiate item activity shooting contains method method context arm arm thing arm holding arm thing know sensor name thing true primitive arm toggle arm thing method applicable sensor object toggled known arm positioned appropriately 
note sensor known object old expectation set matched currently accessible item 
sensing required situation 
repeat clause type behavior raps able describe looping 
tasks require steps repeated state achieved world 
example filling gasoline tank fuel drums involves emptying drums tank tank full 
similarly moving boxes warehouse factory requires making trips boxes warehouse 
behaviors type encoded implicit loops rely rap interpreter generate required repetition execution time 
example rap definition fill fuel tank define rap index fill tank tank succeed full tank method context class drum fuel drum true full drum task net tl pour drum tank rap interpreter continue try single method succeed clause satisfied 
effect implicitly looping empty fuel drum tank tank full 
situations better explicit construct inform planner rap designed intentional behavior 
rap language uses optional repeat clause explicitly declare looping raps 
repeat clause may inserted rap top level method descriptions syntax repeat formula intuitively clause says rap continue retry methods long formula satisfied memory 
technically things complicated fact repeat clause sonhe sense competing succeed clause appears sanhe rap 
succeed clause states rap finish formula true repeat clause states rap finish formula remains true clauses conflict problem 
difficulty resolved giving succeed clause precedence repeat clause 
repeat clause characterized precisely okay retry rap methods rap goal achieved long contained formula true 
reason repeat clause repeat repeat result futile loop detection algorithm 
possible rap get stuck looping forever repeat clause rap succeed clause satisfied 
avoid getting stuck futile explicit loop rap interpreter restrict repeat clause sanhe way restricts repeated method selection 
tinhe formula repeat clause checked free variables bound bindings saved method chosen 
sanhe bindings repeatedly occur sanhe methods chosen interpreter terminates task 
restriction consequences 
formula repeat clause carefully written tinhe loop produce different variable bindings formula just termination condition measure progress loop 
second repeat clause repeat iteration formula satisfied variables bound 
loop detection restrictions repeat clause simply notational device preconditions clause 
repeat clause satisfied task continue choosing method variable bindings preserved method gets chosen placed method context produce results 
difference preconditions clause variables bound repeat query preserved method instantiation complete 
primary reason having explicit repeat clause notify planner rap explicitly designed loop 
implicit loops hard reason making explicit planner job easier 
explicit loop tank filling rap rewritten define rap index fill tank tank succeed full tank repeat class drum fuel drum full drum method task met tl pour drum tank monitors synchronizing world rap language described far allows description behaviors depend order step execution correctness 
changes world produced methods assumed complete con trol robot 
case robot actions synchronized changes world robot control 
situations range waiting water boil adding rice running away enemy troops suddenly appear 
concept monitoring synchronize rap execution changes world 
task monitor state suspending execution state true world 
monitoring mediated mechanism memory content constraints discussed section 
task waiting state world sits task agenda ineligible run expected state satisfied rap 
terminology derives similar concept developed mcdermott 
monitor clauses constructs setting monitor tasks rap clauses monitor state formula monitor time start time time causes execution rap suspend formula satisfied memory second causes rap suspend specified period tinhe 
tinhe delay monitor time clause takes sanhe form tinhe window window task net annotation 
referring task instantiation tinhe absolute 
start time interval task wait continuing time interval deadline 
absolute start time time absolute tinhe units 
monitor clauses optional top level forms appear rap method clauses 
clauses appear sanhe rap rap remain suspended clauses satisfied sanhe tinhe 
free variables monitor state formula remain bound 
monitor clauses change way raps chosen execution agenda 
monitor state clauses set memory content constraints monitor time clauses set temporal constraints task deadlines 
monitor clauses task net prior ities hand hand give raps powerful means watching emergencies restoring important states looking opportunities 
active vs passive monitors monitor state clauses suspend task formula true memory happens formula monitored requires active sensing detect 
example desire set rap watch fires box extinguish appear 
detecting fire box requires periodically opening lid simple rap monitoring fire box sufficient 
situations require active monitors repeated sensing opposed passive monitors simply wait state detected normal course events 
active monitor represented rap carries required sensing waits time pass senses 
behavior easily generated monitor time clause 
consider rap watching fire box define rap index watch fire box succeed nil monitor time method task net tl look inside box put fire box rap describes task finishes succeed clause satisfied wake time units look box put fires 
assume fire task put fire succeed action 
active monitors necessary situations normal course events generate requisite sensory data responsive sensory data generated tasks 
instance box opened put inside fire seen time unit monitor task just run attempt put fire time units passed monitor task wakes 
respond sensory data arriving sources passive monitors defined monitor state clause appropriate 
sensor information robot activity satisfy monitored state 
problem occurs normal robot activity generates appropriate information 
state moni come true world noted rap memory 
situations facts constantly monitored activities may generate information best solution combination monitors 
considering box fire example raps gether define rap index check fire box box succeed nil monitor time method task net tl look inside box define rap index monitor inside fire box succeed nil monitor state fire inside box method task net tl put fire box rap repeatedly checks inside box fire second put fire box soon noticed matter information comes 
final point monitor tasks behavior respect futile loop detection 
nature tasks continually watch situation develop act 
cases monitor tasks intended loop forever long continue effectively deal situation monitor time encountered 
time monitor task blocks ineligible run state monitoring true interpreter restarts algorithm futile loop detection task 
effect allowing monitor loop forever providing methods monitored state false time executes 
tasks including monitor time clause cause futile loop block assuming start time greater zero 
protections opportunities monitor raps fire detecting example obviously useful dealing sudden situation changes threaten particular goals 
monitor raps purposes protection world states exploitation opportunities 
enforcing protections execution time protection look ahead somewhat different protections traditionally planning 
planning protections set prevent addition plan step alters state produced previous plan step 
execution tinhe protection impossible enforce sonhe agent altering 
different ways protection approximated run time discussed chapter 
section discuss restoring required state discovered changed 
example suppose truck picks fuel drum deliver fuel depot 
way truck encounters box looking puts fuel drum pick box 
truck continues way fuel drum left 
fact truck holding fuel drum protected repaired setting depot 
define rap index monitor holding arm object monitor state arm holding arm object method task met tl arm pickup arm object define rap index carry object object location succeed location object location method context arm holding arm object task met tl monitor holding arm object go location example protection rap state restoration protections set tasks monitoring complement state protected 
monitored formula satisfied protected fact ceased true rap takes action restore 
consider monitor designed protect arm holding fact 
carry task move fuel drum fuel depot sets monitor fuel drum set 
fuel drum set monitor responds picking 
example somewhat simple minded may cause loops truck puts fuel drum service goal picks sets ad ifi 
detecting opportunities monitor tasks exploiting execution time opportunities 
arises method selected pursuit goal new information arrives suggests different better method 
detect task set watch information enable selection preferred method 
information detected monitoring task interrupt execution current method allow method 
example opportunism required delivery truck domain arises sending truck fetch object 
suppose truck requested get fuel drum take warehouse 
closest fuel drum known town truck sets retrieve 
truck runs fuel drum way job 
assuming method chosen fetching fuel drum breaks steps go pickup fuel drum go warehouse new fuel drum discovered goto 
rap describing task says fuel drums truck simply pass 
take advantage opportunity different method going town includes monitor appearance new fuel drum shown 
move object rap move fuel drum warehouse break task steps go fuel drum pick go warehouse 
monitor set parallel steps watch appearance fuel drum way 
fuel drum discovered monitor rap wake pickup drum succeed method skip ahead step 
schoppers discusses infinite loops caused type execution time protection strategy schoppers 
define rap index monitor appearance type monitor state location object external class object type method context location object external class object type true task met tl pickup object external define rap index move object type location succeed location object location class object type true method context location ocl class type location obj external class obj type task met tl monitor appearance type go loci tl truck location loci pickup outside tl arm holding arm go location method context location object external class object type true task met tl pickup object external arm holding arm object go location noticing opportunity raps short term memory internal resources sonhe behaviors express rap language require short term memory 
underlying principle situation driven execution world best model raps try keep track changes world continuously sense world see actual changes taken place 
idea works great tasks sonhe behaviors require keeping track properties sets fi om step 
consider different tasks requires keeping track amount fuel fuel drum second requires moving fuel drums warehouse garage 
achieved short term memory fuel drum examined directly amount fuel inside needs checked 
second requires keeping track fuel drums inside truck warehouse purposes 
usual way rap methods pass information step index variables 
rap take input variables bind output variables act differently bindings variables 
need short term memory arises number index variables needed determined advance members set value variable binding changed inside rap counting 
rap language handles situations allowing creation set counter resources bound index variables shared raps 
way counter defined hold number fuel drums moved warehouse garage shared load unload subtasks 
load increment counter tinhe places fuel drum truck unload decrement tinhe takes 
way sanhe number fuel drums gets unloaded garage loaded warehouse 
resources clause counters sets called resources 
resources defined rap top level methods syntax resources set name value counter name value resource clause executed task defined rap instantiated may contain number set counter declarations 
set declaration causes new set resource created bound variable name paired 
optional second argument previously defined set copied 
argument set starts empty 
counter declaration causes creation new counter resource initial value number counter copied 
resources altered special annotations task net step specifications 
annotations called effects execution time change values specified resources 
different effects counters sets set add set thing set sub set thing counter add counter amount counter sub counter amount add set resource remove set resource increment counter resource decrement counter resource effect adds removes object set increments decrements counter 
effects annotations rap step executed step succeeds 
resources altered successful completion task 
resource values functions placed rap formula query 
function obvious semantics member set thing empty set size set value counter set contain thing set empty number members set value counter internal resources problem moving fuel drums fi om place disturbing drums cargo bays solved raps shown 
rap describes delivery task consists obvious steps go items leave pick go destination put 
important feature rap definition counter resource number shared load unload subtasks 
rap load task picks item appropriate type places truck cargo bay 
furthermore time item successfully placed cargo bay task net counter add annotation increments number 
completion load task number counter hold number items requested type picked 
unload task puts items appropriate type indicated counter 
tasks placed identical items cargo bay reasons unloaded mistake 
notice defining counter delivery rap means value counter survives failures occur go load unload subtasks 
example suppose truck task moving medical boxes location location deliver task instantiated truck moves location finds boxes 
picking enemy troops show truck forced flee 
pickup subtask comes execution fails truck location deliver task runs truck sets 
problem boxes loaded truck situation dealt properly counter defined deliver level get redefined failure 
second time method counter start saying boxes truck 
truck load boxes bringing counter go location unload task unload boxes number counter says cargo bay 
resources vs execution strategies sonhe cases raps written features real world internal resources keep track item allocations 
example fuel drums delivered factory placed front cargo bay warehouse placed back 
way drums identical get mixed 
essence strategy sonhe property world indistinguishable items distinguishable 
define rap index deliver type resources counter number method task net tl go truck location load type number go truck location unload type number define rap index load type number place succeed location thing external class thing type true full cargo bay type constraint truck location place repeat location thing external class thing type true method task net tl pickup thing external arm holding arm thing putdown thing cargo bay counter add number define rap index unload type number place succeed location thing cargo bay class thing type true constraint truck location place repeat location thing cargo bay class thing type true method task net tl pickup thing cargo bay arm holding arm thing putdown thing external counter del number delivering load items location orientation inclusion spatial group physical properties keep identical items apart real world people memory aids time 
intrusive strategies confusion cause problems 
labelling color coding packaging ways easier tell items world tasks 
name grade easy distinguish looked 
members rock climbing group mark gear colored stripes easy sort day rock 
president red phone making important calls movies 
labels avoided memory usually coat rock climbing gear doesn really look red phone probably left 
people run memory capacity limit situations reliable real world 
interesting experiment limit number counter set re sources available raps 
currently limit easy execution system remember different sets items remember 
resources limited system allocate carefully physical strategies aids 
people limits forced physical strategies time 
fortunately shortage reality 
protections policies construct rap definition language implements temporary global poli cies 
suppose task requires absolute quiet particular method 
language far steps chosen quiet ones explicitly specifying raps quiet methods passing index value signals spawned raps quiet 
way signal raps including service tasks choose quiet methods 
notations clause signals implemented notations clause 
notations clauses appear method specifications context task net clauses syntax method context 
notations assertion assertion task net 
assertion clause simple proposition containing bound variables asserted memory database 
assertions scoped method method finishes normally step failure retracted 
life time task net notations part memory tasks see 
notations need quiet coded define rap method context 
notations quiet true task net 
execution steps task net assertion quiet rue memory raps care check able choose quiet methods 
notation implements aspects idea planning poli cies discussed mcdermott charniak mcdermott 
monitor tasks may awakened assertion notation 
summary rap language summary rap language loosely divided sections exist separate reasons core language index succeed method efficiency checks constraints annotation synchronization monitor state monitor time inter task communication resources notations planning annotations preconditions repeat core language supports basic situation driven execution behavior described chapter augmented overcome specific problems 
constraints clause task net annotation set conditions method subtasks detect situations method behaving expected 
early detection situations allows method aborted prevents inappropriate subtasks executing 
monitor clauses allow tasks synchronize execution situations world resource clauses allow subtasks method share short term records resource usage 
preconditions repeat clauses allow raps coded perspicuous fashion easing job initial rap writers planners wish examine rap internals 
core language supports basic notions required situation driven execution system 
succeed clause specifies world state achieved defined task considered complete 
selected method runs completion failure task spawning finish desired success conditions met 
method clauses specify ways known carry task 
method describes network subtasks executed service task thought hierarchical expansion task 
different methods applicable different circumstances methods re tried task succeeds 
rap interpreter algorithms task selection futile loop detection core language achieves situation driven execution behavior 
problem execution system core rap language interpreter inclination execute method subtasks clear continuing method pointless 
example consider method method context location object external task net ti arm move object arm grasp object subtask designed specifically position arm grasp desired object 
goes problem second subtask succeed picking object 
interruption subtasks may get moved away object grasped 
interruption passes second subtask execution arm grasp primitive executed clear arm right place 
problem arises methods interrupted result reliance task expansion mechanism achieving goal 
instantiating methods waiting complete calling set subroutines run completion control gets returned calling task 
get problem constraints clauses foe annotations set check points method subtasks executing situation inappropriate 
check points prevent execution method continuing clear isn working 
issue addressed core rap language synchronizing task execution uncontrolled states world 
monitor clauses allow raps define tasks constrained wait sonhe state satisfied world 
careful features enables description tasks wakeup response emergencies situations dealt 
similarly tasks set specifically look opportunities improve behavior active new helpful information available 
monitor raps execution system unable deal effectively changing situations 
core language concert monitor clauses give tasks ability con form behavior current state world 
method contexts specify world states particular methods apply monitor clauses tasks wait particular states world known 
rap defined behaviors altered decisions raps resource notation clauses 
resources allow subtasks method share members sets values counters 
notations allow raps notify global restrictions execution making temporary additions rap memory 
resources allow tasks method communicate notations allow completely independent tasks communicate 
preconditions repeat clauses annotate rap internal workings accessible examination planner 
pre conditions gather facets world state satisfied rap applied 
preconditions pushed method contexts clearer explicit 
similarly repeat clause rap plain described task expected loop long state remains true world 
information pushed method contexts generate identical behavior 
useful planner know particular rap loop having try derive implicit information 
raps sketchy plans chapter chapters finishes description main divisions rap execution system rap memory rap interpreter language define rap library 
final issue dealt way top level sketchy plan defined 
answer rap best way planner generate instructions rap system build rap executed 
method methods inside rap consist task network build planner rap succeed monitor clauses describe plan execute achieved goals 
rap planner need supply appropriate priority deadline resulting task 
notion sketchy plan rap identical 
remain interesting issues fall outside description rap system 
issues representation 
execu tion system language defined allow number realistic execution behaviors encoded rap tasks 
chapter explores techniques representing different types rap behavior giving examples execution time protections opportunity recognition short term memory strategies particular 
interesting issue testing rap system show works 
real robot readily available experiments done simulated robot delivery truck complex changing domain 
results experiments chapter 
execution traces provided illustrate generation different types behavior 
results show rap system paradigm situation driven execution effectively deal uncertain knowledge world effector failures interruptions 
chapter issues rap representation rap situation driven execution system described preceding chapters designed cope problems acting complex dynamic world 
robust execution system expressive action description language part solution 
remains problem building effective action descriptions rap library confronted uncertain sensory information autonomous agents 
planning research done past assumed planner actor completely predictable world 
situations library relatively straightforward task descriptions generate correct behaviors sacerdoti vere wilkins dean 
example typical plan drum fuel factory goto depot pickup drum goto factory putdown drum intuitively simple plan captures necessary actions go find drum fuel pick carry factory put 
unfortunately intuitive effectiveness plan rests heavily assumption world completely planner control 
confronted realistic world complexities creep plan rapidly loses intuitive feel 
main difficulties arise writing adaptive action packages rap library making sensing strategies explicit enabling opportunity recognition preventing undesirable states world coordinating reactions various situation changes difficulties result problems need solution introduce subtleties behavior description understood dealt 
chapter intended primarily point subtleties show affect representation apparently straightforward tasks 
way example raps general techniques representing behaviors described 
sensing strategies consideration constructing task representation explicit sensing subtasks incorporated task methods 
tasks sure sensing requests generated keep relevant parts rap memory date 
particular sensing steps included correct uncertain missing knowledge memory 
enable item identification expectation sets 
monitor dynamic situations problems arise form interacting complex dynamic domain 
uncertain missing knowledge unavoidable rap memory system know entire state world 
explicit sensing tasks incorporated task descriptions gather direct knowledge world needed method choices succeed clause checks 
instance delivery truck domain truck looks see new items accessible changes location 
truck may look inside boxes see empty look indicator lights machine see working 
routine sensing tasks fill missing world knowledge 
discussed chapter rap memory forms expectation sets hold descriptions items expects encounter particular situation 
situation encountered memory automatically tries match expected descriptions actual items world 
unambiguous matches basis available information memory ends holding independent descriptions single real item description attained direct sensing descriptions past expectation sets 
multiple item descriptions cause confusion available match queries oc real 
sensing tasks prevent confusion gathering information ensure description matching expectation sets 
problem situation monitoring arises agents world change part world accessible system 
sensing operations fill knowledge gaps enable item identification help system build detailed picture directly accessible situation situation change additional sensing necessary ensure significant changes noticed 
checking box empty mean stay empty stay accessible agents 
sensing required pursuing single task generally track important feature immediate situation features monitored separately 
routine memory maintenance uncertain incomplete world knowledge driving force situation driven execution 
items location contents box current weather facts sensed known certain 
rap succeed clauses method contexts depend information memory raps contain sensing tasks gather 
routine memory maintenance problem deciding sensing tasks required particular behavior 
authors explored methods automatically adding sensing tasks traditional plans 
brooks considers idea predicting actuator posi uncertainties adding sensing tasks measure actual position uncertainty exceeds acceptable limits 
model developed gini 
uses planner intent add sensor tasks designed ensure world unfolding planned doyle reports system thing analysis volatile preconditions 
methods assumption initial plan built sensing required verify execution proceeding planned 
difficulty choosing appropriate sensing tasks operator library advance 
bumpers scheduler developed miller takes different approach assumes operators generate initial plans include appropriate sensing tasks 
previous approaches attempt produce minimal sensing strategies miller operators idiosyncratic sensing required 
justification ad hoc operators observation sensing strategies needed support task task domain dependent task actions 
rap system takes essentially approach routine sensing tasks built rap descriptions necessary 
routine sensing tasks spread raps ad toc manner basic ways check specific fact specific method 
check critical facts uncertain 
perform routine sensing service system 
specific color sensing task loading rocks truck shown 
rap shown designed load rocks particular color possible cargo bay 
repeat loop method rap retried long rock outside truck correct color 
step method check color foe annotation reject rock wrong color 
routine check cheap doing time minimizes effect memory errors 
note rock examined examination places color rap memory 
actual rocks loaded recorded set resource unloading task 
point eye examine sensing task simply part behavior needed load colored rocks truck 
define rap index succeed constraints repeat method context task net truck load rocks color bay rocks location thing external class thing rock true color thing color color thing unknown size rocks truck location location thing external class thing rock true color thing color color thing unknown location thing external class thing rock true color thing color color thing unknown eye examine thing color thing color room bay bay rocks move thing thing bay set add rocks thing routine sensing check specific fact sensing tasks sparingly uncertainty tolerated 
rap shown describes task dumping fuel drum truck 
fuel drum known empty ignored 
drum checked time units contained fuel checking 
drum checked time units ago checked examined picked 
behavior assumes drum held fuel probably checking strictly necessary 
final routine sensing task consider problem determining objects currently accessible delivery truck 
need know items surround truck pervasive reasonable check truck changes location 
raps move delivery truck place define rap index dump fuel drum method context location drum external liquid held drum fuel believe quantity held drum amount amount unknown amount task net tl method pickup drum arm holding arm drum pour drum fuel bay putdown drum external context location drum external liquid held drum fuel quantity held drum unknown believe quantity held drum amount task net eye examine drum believe quantity held drum amount amount unknown amount tl tl pickup drum arm holding arm drum pour drum fuel bay putdown drum external routine sensing confirm uncertain fact place generate eye scan primitive action requests new locations 
rap shows part movement task 
item identification consider robot requires full fuel drum notes item memory known full fuel drum located depot 
moving depot robot encounters fuel drums hardware interface assigns sensor names drum drum 
drums directly manipulated names drum drum name item 
distinguished sensor names names intended reflect define rap index truck move direction direction place succeed truck location place preconditions fuel level level method context direction external road direction task net pull arm arml tl pull arm arm truck set speed road truck set heading direction truck move rs rs eye scan external routine sensing stay touch world detailed position left right 
hand item full fuel drum known drum full 
full fuel drum item picked identified drum drum 
force identification rap issue instructions look inside drums see full 
details problem depend structure rap memory general problem identifying past item descriptions objects real world arise az execution system working realistic sensors 
lot philosophical done problem deter mining object internal representation denotes real world 
long interesting history explored starting char mcdermott genesereth nilsson 
item identification problem faced rap system really deciding represen tations denote real object consistent 
solu tion problem inevitably include generation additional sensing tasks discriminate possible candidates memory 
deal done problem computer vision research brooks lowe assumes information generated automatically 
exception system described allen bajcsy generates specific sensory requests confirm tentative match 
rap system sensory system deliver information match descriptions real objects additional sensing 
example way tell arriving depot item require special sensing identify 
robot wait see fuel drums encountered memory system matches 
recall chapter memory supplies required information special query form know sensor name item status item memory name checked status true meaning item identified real object lse meaning hasn 
raps refer actual objects making primitive action requests spawn methods include extra sensing tasks assertion satisfied item question 
example consider raps robot delivery truck domain shown figures 
raps encode task turning item world arm toggle primitive action 
task designed raps described arm toggle rap contains methods item toggled identified real object 
method simply spawns task issue arm toggle primitive action request 
second method primitive action request directly way refer appropriate object real world 
tasks spawned force identification item toggled real object request toggling action 
rap describing force identification operation shown quite complex containing different methods different classes items 
example boxes drums contents checked rocks size color examined 
force identification rap loops item memory sensor name right class 
properties relevant calls question sensed iteration loop point memory receive piece information needs 
point required define rap index arm toggle arm thing preconditions arm arm thing arm holding arm thing method context know sensor name thing true task net tl real arm toggle arm thing method context know sensor name thing true task net tl force identification thing know sensor name thing true real arm toggle arm thing define rap index real arm toggle arm thing method context arm arm thing arm holding arm thing know sensor name thing true primitive arm toggle arm thing encoding primitive toggle operation know sensor name assertion true memory force identification task succeed 
complex example problem item identification shows clearly delivery truck rap shown 
purpose ap quite simple 
cargo bay delivery truck hold items tasks room new item 
rap shown designed take items bay room removing items set objects stay 
rap loading number rocks cargo bay room needed rocks just put taken 
load rocks rap keeps track rocks puts bay uses set objects removed 
define rap index force identification thing succeed know sensor name thing true repeat know sensor name object true examined move object class thing class true class object class true method context arm holding arm object know sensor name object true examined move object class thing class true class object class true class object container true task net tl eye examine object cet method context arm holding arm object know sensor name object true examined move object class thing class true class object class true class object container true task net tl eye examine object arm examine object method types locations get external characteristics see inside forcing item identification memory rap method rap applies cargo bay contains removable item known sensor name 
method generates tasks determine item sensor name move bay 
subtle important reason force identification task appear explicitly method 
force identification done level eventually occur subtask move task item picked 
problem identification happen item matched object removed 
prevent match causing problems force identification done explicitly annotation method match undesirable 
define rap index room bay bay object stay succeed size objects stay repeat number bay bay location object bay member objects stay object method context location thing bay member objects stay thing know sensor name thing task net ti force identification thing member objects stay thing re move thing thing external method context task net ti location thing bay member objects stay thing know sensor name thing eye examine thing member objects stay thing re move thing thing external rap bizarre result sensing problems second method shouldn suffer problem refers items known sensor names 
set items stay bay may contain memory descriptions matched real objects bay causing problem reverse 
conservative strategy force identification item removed result lot unnecessary sensing 
strike compromise method includes sensing task find item removed easily size color problem identification takes place annotation task net stops method mistake 
identification takes place assumed item safely removed 
mistakes happen eye examine task generate information appropriate identifications memory practice truck occasionally get confused takes incorrect items cargo bay 
situation monitoring situation monitoring problem arises dynamic domains accessible items come go unpredictably 
cause system believe items aren unaware items 
incorrectly believing items result failed primitive action requests unnoticed items result missed opportunities possible ter 
general situation driven execution model handles primitive action failure appropriately updating local memory model choosing new methods failed task 
detecting presence newly arrived items troublesome 
general mechanism built rap system keeping track local situation changes directly relevant current task activities 
example watching full fuel drum discovered travelling depot get implies process looking registering discovery fuel drums 
routine eye scan tasks intrinsic movement tasks delivery truck domain detect fuel drums arrive truck looked 
maintain reasonable routine level awareness deliver truck domain routine active monitor exist wake update local memory model 
rap describing task shown 
routine scanning task placed task agenda high priority track items world regardless tasks 
world changes quickly routine scans execution system gets quite confused missing opportunities emergencies spending great deal time trying manipulate objects longer 
previous situation monitoring taken approach active monitors rap system 
important features world identified advance tiered structure keep track 
method occasionally continually scanning world assumed generate picture current situation identify agents cause change 
process watch agent change situation 
process assumed run concurrently produce timely notifications important features world change 
handler arkin define rap index monitor current location succeed monitor state believe eye scanned external method task net tl eye scan external rap check local situation tinhe units describe tiered systems slack miller assumes existence system 
object robot described brooks conceived different model mind contains process scan object follow watches object change position 
identification errors final subtle sensing problem arises delivery truck donhain results interaction need force memory description identification fact items moved system knowledge 
problem item descriptions memory identified wrong real world object 
typical example looking fuel drum bottom 
single fuel drum seen factory tinhe visited drum bottom memory automatically identify new drum seen old description 
cause problems fuel drums switched 
suppose item memory believed drum residing factory 
arrival truck routine eye scan sees drum called drum memory identifies item expected fuel drum 
assertion know sensor name item true satisfied memory assertion brought forward item bottom iem rue hopefully bogus bottom appear memory 
truck believes drum item describe fuel drum drum bottom 
agent may changed drums drum drum referred denoted item 
truck believes memory wrong 
item identification errors unavoidable dealing dynamic world requires memory 
unfortunately sensing problems arise dealing world amenable general solution 
answer sure item special property required property specifically checked 
special raps written carry required additional sensing 
raps judge added cost additional sensing better accepting risk involved wrong 
drum factory needed drum difference bottom 
hand drum holds great importance best check bottom 
sensory issues points respect sensory issues rap 
task descriptions explicitly deal complications 
routine sensing required ensure parts rap relevant method choices date 

agents alter current situation additional sensing required monitor current situation prevent mistakes 

memory system errors item identification 
planning systems usually finesse complications assuming completely pre complex dynamic world avoided 
second point ai research little experience sensing strate gies required support reasonable behavior dynamic domains 
introspection supplies starting point writing actions needed perform task supplies little help sensing go actions 
think moving box floor table clear pick move table put 
sensing concert actions completely situation driven performed advanced thought 
certainly sensing acting tightly coupled descriptions need speak actions 
execute actions sensing required takes care 
task spelled actions come mind 
phenomenon supports contention sensing situation driven just detailed action choice sheds little light problem developing sensing strategies rap library 
result sensing issues discussed discovered trial error design system implemented raps written cope delivery truck domain 
opportunism important aspect intelligent action ability exploit opportunities arise 
opportunity loosely defined previously unknown information change behavior advantageous manner 
example picking dollar bill sidewalk newly dis covered fuel drum going depot examples opportunistic execution time behavior 
examples represent quite different ways opportunities relate active execution goals 
people pick money ground immediate plans 
money deemed asset sufficient value actively acquire honest opportunity arises 
hand sense newly discovered fuel drum looking 
opportunities arise global utility consid erations connected particular goal temporary situations generated pursuit definite goal 
fact ability seize temporarily defined opportunities important execution system 
consider scenario 
delivery truck needs get specific tool perform task 
place saw tool warehouse sets get 
way warehouse truck discovers tool road 
truck immediately abandon plan going warehouse pick tool said demonstrating effective behavior 
scenario arises dynamic domains 
specific state world required execution system adopts best plan achieve state 
midst executing plan state achievable better way 
ubiquity pla delivery truck domain odd literature silent issue 
detecting acting opportunities execution time clearly dis detecting acting opportunities discovered planning time 
planning system generates new information expected projecting intended actions 
opportunities derived information available plan revision discussed length hayes roth hayes roth 
problem changing ones plan response opportunities arise execution time quite different problem 
birnbaum dis differences execution time plan time opportunism length 
problem acting opportunities allow state affairs improved picking money ground somewhat widely discussed problem acting response emergency situation fire 
particular kaelbling suggests concurrent tasks high priorities detect deal emergencies georgeff 
rap system uses approach deal emergency situations utility opportunities 
important consequence concurrent tasks recognize opportunities system react situations anticipated way task set advance reaction 
particular mechanisms rap system set tasks system specific birnbaum argues need anticipate opportunities accident system architecture unavoidable consequence way information processed interacting world 
impossible execution system automatically notice aspect world may relevant current goals 
goal look birnbaum set tasks look raps opportunities 
central characteristic rap system opportunism au 
raps set mechanisms recognizing notified useful opportunities arise 
mechanisms setting notifications utility plan revision opportunities discussed 
plan revision opportunism plan revision opportunity occurs task executing method ters situation enables effective method chosen 
get appropriate behavior task split tracks describing method situations watch opportunity efficient method 
track watching opportunity take form high priority monitor task waiting opportunity detected see section 
requirements define idiom define rap succeed goal method context usual task net monitor opportunity ti ti default method method context task net better method task comes execution opportunistic situation exist method chosen 
method instantiates default plan task concurrent monitor watch opportunity arise 
opportunity monitor generated higher priority default method interrupt opportunity arise 
opportunity arise monitor succeed fail giving second method chance execute instantiate better method 
monitor task active passive coding idiom 
strictly passive monitor similar behavior achieved placing constraints subtasks default method 
example task get coded manner define rap index get succeed method context shop task met watch donut shop tl tl goto supermarket supermarket buy supermarket method context shop task net ti buy donut shop task described rap come execution current situation checked local donut shop 
donut shop second method chosen purchased 
donut shop method chosen 
method spawns trip supermarket buy inferior sets task higher priority keep watch donut shop 
donut shop encountered getting supermarket watching task wakes takes control higher priority buys finishes 
completes method trip supermarket abandoned 
utility opportunism utility opportunism distinguished plan revision opportunism actions carried opportunity arises 
bill laying ground example opportunity 
picking money better method doing system committed 
picking money example behavior system exhibit situation 
emergencies encountering fire enemy troops examples reactions 
utility opportunism encoded raps single idiom 
task placed agenda constrained run situation containing opportunity arises 
task assigned high priority opportunity encountered eligible run interrupts done performs appropriate action 
example money opportunity routine encoded define rap index pickup money monitor state money ground succeed true method context money ground task met pick money utility opportunity monitor usually recognized fact contains monitor state clause triggered opportunity succeed clause satisfied 
monitor state clause allows task run appropriate unsatisfiable succeed clause prevents task leaving agenda 
examples behavior discussed sections 
examples opportunistic raps tasks opportunistic behavior deal features delivery truck domain 
principal plan revision opportunism take advantage discovery new items travelling place 
special case embodied raps shown 
raps describe task going location specific item 
go object rap includes single method appropriate location object sought known 
heart method task travel object location just expect 
method spawns tasks watch object scan object location arrival 
glance clear required 
monitoring task required object sought may moved 
particular object may moved away location new define rap index monitor object object succeed believe location object external monitor state believe location object external define rap index go object object succeed location object external method context location object place task net monitor object object tl tl truck travel place eye scan external finding specific item raps location way 
monitor task watch object situation truck drive right past look old location 
sense object encountered 
eye scan task needed perform routine scanning object location truck arrives 
normally task performed truck travel task case monitor task may interrupt travel task prevent making scan 
tasks describe opportunistic behavior required find object world simple form opportunism sure important 
example opportunism delivery truck domain illustrated raps 
raps shown implement part machinery keeping fuel truck moves world 
handle low fuel rap top level task routinely instantiated high priority truck task agenda 
spawns tasks exist concurrently act independently 
tasks monitors truck fuel level implements actions increase gets low 
actions taken usually consist finding full fuel drums dumping truck fuel tank 
second task spawned job keeping full fuel drum truck cargo bay case emergency 
truck far away full fuel drums fuel level gets low may run way get 
resort situations fix low fuel task fuel truck carrying cargo bays get nearest fuel depot 
replenish task sure fuel drum cargo bay 
define rap index handle low fuel method task net fix low fuel tl replenish fuel reserve define rap index replenish fuel reserve succeed true monitor state location drum bay class drum fuel drum true method context task net location drum external class drum fuel drum true quantity held drum unknown quantity held drum amount amount method context task net location thing external class thing fuel drum true quantity held thing amount amount move thing thing location thing external class thing fuel drum true quantity held thing amount amount unknown eye examine thing quantity held thing move thing thing delivery truck fuel monitoring raps replenish fuel reserve task utility opportunity monitor structured pick full fuel drums discovered normal course events cargo bay 
note second method includes task examine candidate drums sure hold fuel 
truck holds reserve fuel drum task checking drum encountered full moved cargo bay 
long fuel drum remains reserve task remain ineligible run task agenda 
soon drum task wakeup looking new reserve 
opportunistic raps plan revision opportunities arise new information suggests abandoning currently active plan favor better 
rap system means stopping execution task net instantiating 
system stick course action selected display odd behavior complex dy namic domains initial choices inaccurate information 
utility opportunities arise new information suggests action increase robots opportunity directly relevant active plan 
rap system implements opportunities placing special task task agenda purpose simply exploiting op 
utility opportunism special case reacting world suddenly changes 
problem discussed section 
type opportunistic behavior rap system represent choosing low priority task high priority task suddenly easy achieve 
consider problem stopping way fuel depot 
delivery truck domain getting fuel truck low high priority task running fatal 
fuel gets low truck stops doing sets find late 
suppose truck assigned task getting 
task obviously lower priority getting fuel require extra fuel donut store passed way 
type behavior supported rap system requires analysis expected task resource 
getting okay goal getting fuel 
robot passes donut store running enemy troops stopping terrible mistake 
way distinguish situations projecting effects stopping comparing effects stopping 
analysis precisely rap system designed 
task priorities heuristic designed avoid problem making complex trade decisions opportunities properly detected making trade offs exploited 
putting constraints world don put glass keep candy machine full keep rats factory examples goals ask states world maintained prevented 
natural constraint goals describing types behavior execution system called represent 
common application behavioral constraints literature planning protections 
sussman introduced term protection describe need planner enforce implicit constraints contained planning operators 
instance simple plan pickup glass goto kitchen putdown glass assumes glass held trip kitchen 
assumptions protected planning final plan behave expected 
planners built idea explicit protections vere dean ct charniak mcdermott joslin ct contain reviews 
tweak planner described chapman sonhe sense definitive protection planner 
protections don put glass arise frequently implicit virtually multi step method 
keep rats factory stay away fires treated strict protections generally satisfied completely 
rats prevented getting factory plans give opportunities better plans leave door open tinhe 
similarly fires prevented necessary get close 
keep rats factory stay away fires preferences constraints 
plans keep farther away fires better don 
mcdermott calls goals policies 
influence planning behavior discussed mcdermott 
plan time constraints usually take form notations prohibit planner adding steps change constrained facts 
method enforcing constraints relies planner complete control world 
autonomous agents state maintained prevented planner simply acting change 
dynamic domain states control system protected simply inaction 
making sure candy machine gets empty easy planner buying candy customers candy consumed unpredictably 
keeping rats factory hard rats hiding time 
states completely planner control holding glass maintained situations 
planner decide take glass kitchen protection prevents put way probably ignored fire discovered hands needed 
constraint goals execution time notion planning constraint discussed strong carry directly rap execution system 
strict constraint state usually appropriate changing state temporarily situation demands quite reasonable 
furthermore strict constraint world impossible agents changes asking 
execution time planning constraints translate strict prohibition precise de scription intent 
example keep rats factory mean bring rats take rats set rat traps combination 
similarly don put glass mean put glass ess picked leaving 
execution time strategies give system room respond goals arise 
example consider problem keeping chocolate bars candy ma chine 
generally impossible guarantee machine contains chocolate bars short preventing people strat egy situations 
task keeping chocolate bars machine really periodically checking machine necessary 
endless variety ways encode behavior depending critical machine empty machine checked frequently empty 
machine checked infrequently time increasing risk running chocolate bars 
machine checked passing pursuit task 
machine filled complains empty 
machine sound alarm chocolate bar removed 
strategies represented raps desired behavior explicit 
opportunistic task descriptions rap coding idiom captures notion constraint 
constraints foe annotations methods fact protected changed sort interference represents rudimentary notion prevention 
usually different states maintained world require different behavioral strategies 
resources required maintain state balanced cost having change 
making sure bomb get may crucial protection justifies dedicated vigilance exclusion tasks protecting holding glass suggestion ignored little cost situations 
maintaining protections may require actively altering current situation 
example preventing cake crushed party home may mean simply letting sit table preventing crushed may require putting special container 
coding idiom enforcing constraints rap system fact agents change state means protection strate gies usually fall tasks restore state changes code distributed rap library prevent state change place 
strategy chosen depends control system constraint cost associated failing maintain 
special code appro priate system control state cost failure high restoration tasks necessary state controlled 
combination usual course events 
example delivery domain consider policy putting ammunition boxes fuel drums sanhe delivery truck cargo bay sanhe tinhe 
assume danger trophic explosion great situation allowed happen 
assume agents truck move objects truck bays 
assumption means truck pap system structure behavior puts fuel ammunition circumstances 
second assumption means contents cargo bays taken granted 
truck adopt general preventive strategies putting sign cargo bay warning putting fuel ammunition general strategies decrease likelihood error 
guarantees agent behavior 
policy requires quite different behaviors implemented 
impossible guarantee fuel ammunition appear cargo bay truck periodically check cargo bays sure explosions imminent 
behavior enforce policy putting fuel ammunition attempt move apart late 
second raps move things cargo bays ensure put ammunition fuel 
sections go behaviors detail 
repairing constraint violation ammunition fuel policy requires cargo bay contain fuel drums ammunition boxes time 
agents may bring state truck knowing truck maintain backup strategy separating discovered 
strategy consists components passive monitor fix problem discovered active monitor check cargo bays periodically see problem arisen 
way representing behaviors shown 
rap passively waits fuel drums ammunition boxes appear cargo bay second wakes time units looks bay 
second rap sees fuel ammunition rap move apart 
rap methods 
method moves fuel drums cargo bay second moves ammunition boxes 
choice method particular situation random accordance algorithm outlined section 
methods assume remove type task place removed items cargo bay situation arise 
task defined task agenda fuel ammunition interactions arise 
task high priority interrupt happening deal problem immediately 
second rap simply waits task agenda time units wakes looks 
task defined rap agenda cargo bay watched tasks high priorities job timely manner 
observation task cargo bay working concert single task separate problem items enables truck actively recognize react unintentional violations fuel ammunition constraint constraint violated agent truck 
backup strategy useful protected state entirely execution system control 
define rap index deal fuel interaction succeed true monitor state location thing bay class thing fuel drum location thing bay class thing box method context location bay class fuel drum location thing bay class thing box task net tl remove type bay fuel drum method context location bay class fuel drum location thing bay class thing box task net tl remove type bay box define rap index monitor cargo bay bay succeed true monitor time method task net tl eye scan bay watching ammunition fuel interaction preventing constraint violation backup strategy separating fuel drums ammunition boxes outlined helps undo mistakes truck able prevent putting place 
best way prevent truck mixing fuel ammunition prevent lowest level arm rap putting presence 
strategy effective matter higher level behaviors encoded way get item cargo bay 
different ways implement strategy general ones described 
constraint clauses strategy simplest comes closest spirit strict plan time constraint 
load raps put fuel drums ammunition boxes cargo bays include explicit constraints cause subtasks fail problematic item bay 
code implement strategy shown 
raps dispatch type item loaded bay set appropriate constraint 
task load fuel drum executed method load rap 
generates task load fuel drum bay constrains require cargo bay hold ammunition box 
ammunition boxes loaded second method produces similar constraint fuel drums 
point execution subtasks constraint cause failure fuel drums ammunition boxes placed 
strategy effective preventing load tasks placing fuel tion long routine sensing 
raps place fuel drum ammunition box cargo bay 
instance rap need room cargo bay moving fuel drum 
encoding appropriate constraints rap handle fuel drum tedious complex writing new raps difficult 
explicit low level sensing try control assignment fuel drums ammunition boxes cargo bays constraints easier effective add explicit checks lowest level raps 
inherited constraint just execution time check memory state moving check matters produces results having specify different places 
effective way write low level rap includes check shown 
rap includes methods sure ammunition boxes fuel drum go check fuel drums ammunition box go things 
define rap index load type bay number resources counter count number succeed repeat value count method context type fuel drum task net ti load constrained fuel drum bay ammunition box counter sub counter method context type ammunition box task net ti load constrained ammunition box bay fuel drum counter sub counter method context type fuel drum type ammunition box task net ti load type bay counter sub counter define rap index load constrained type bay constraint constraints location thing bay class thing constraint true method task net ti load type bay enforcing constraint constraints notice way methods written rap 
explicit eye scan included ensure primitive step occurs situation free problems 
eye scan done explicitly ensure ammunition fuel appeared cargo bay tinhe scanned 
eye scan takes tinhe justified sonhe mistakes tolerated 
case errors avoided explicit sensing indicated 
subtlety coding rap inclusion know sensor name check context method 
room bay rap discussed section potential mix item involved referred define rap index arm arm thing succeed arm holding arm thing method context task net tl method context task net tl method context task net tl arm place arm place class thing fuel drum true know sensor name thing eye scan place location item place class item ammunition box real arm arm thing arm place arm place class thing ammunition box true know sensor name thing eye scan place location item place class item fuel drum real arm arm thing class thing ammunition box true class thing fuel drum true know sensor name thing real arm arm thing enforcing constraint explicit sensing long term memory description 
thing bound description unknown incorrect class appear fuel drum ammunition box third method put checking 
delivery truck donhain item sensor known class known 
actual rap slightly force identification cases sensor name known 
final comment strategy preventing fuel drums ammunition boxes coming 
tinhe lag gathering sensor data necessary assess situation issuing primitive action requests things happen 
tinhe interval sonhe agent mess things 
constraint issues rap system encode types constraint behavior spe cific constraint usually requires idiosyncratic representation 
general procedure translating planning constraint active execution time equiva lent 
strategies usually trade resource expenditure cost having constraint violated 
different situations demand different trade offs different strategies 
issue complicated lack look ahead rap system 
specific situations prevented actions cause problems anticipate situations try avoid 
planning system wishes put constraints sketchy plans realize constraints translate complex active strategies 
coordinating reaction tasks final consideration constructing rap library agent con adaptive reactive 
example mail delivery robot considered adaptive travels hallway moves people boxes obstructions 
moves adapt actions cope changing situation encounters way 
robot en countered fire went simply obstruction couldn said reacting appropriately 
discovering fire change task robot chooses delivering mail sounding alarm 
reactive behavior implies existence concurrent monitor tasks rap execution agenda 
monitor task waits react situation arises 
mail robot reactive hold task deliver mail task sound alarm case fire 
general reactive tasks agenda utility opportunities repairing constraint violations monitor currently accessible situation 
tasks designed interrupt tasks lesser importance react timely manner 
prevent confusion produce reasonable behavior monitors wake time priority levels assigned particular monitor tasks carefully considered 
task priorities ultimately derive consideration happen situation dealt quickly 
ignoring state change lead disaster task deal high priority quickly take control 
rap system look assessment severity ignoring various state changes done advance 
results assignment static priority initial reaction task system agenda 
assessment task suggests significantly different priorities different situations split separate tasks appropriate priorities situation 
rap system facility dynamically changing task priority priority assessment include looking 
properly coordinating system reactions universally discussed concurrent tasks different priorities 
schank abelson tax goals subgoals suggest classes goal give rise higher priority tasks 
goals giving rise preservation tasks usually higher priority goals enjoyment example 
mccalla el 
suggests adding concurrent high priority control tasks route plan execution appropriate reactions exhibited 
kaelbling discusses priority assignment system gives notation specification 
sky argued priorities static dynamically determined prs system georgeff el uses explicit meta planning information dynamic assessment 
delivery truck domain illustrate considerations go structuring rap execution system return delivery truck domain 
experiments described chapter basic reaction tasks run concurrently delivery tasks assigned truck 
shown tasks situation monitoring task task deal enemy troops task prevent truck running fuel 
tasks assigned priorities respectively regular tasks discussed chapter delivery tasks run priority 
separation level required 
rap execution state rap memory hardware interface state update state update action requests success failure sensor datum handlers primitive action handlers data action result robot hardware act sense delivery domain reaction tasks monitoring current situation situation monitoring sensory task assigned highest priority important 
purpose situation monitoring task produce eye scan primitive action request local situation checked time units eye scan returns accessible items surrounding truck periodically scanning ensures local situation description remains date 
importance high priority task stem fact enemy troops arrive time 
arrive truck busy task require eye scan operation presence remain undetected arbitrarily long time 
situation monitoring task prevents enemy troops going undetected time units 
dealing enemy troops presence enemy troops signals emergency situation dealt immediately prevent truck captured disabled 
method deal enemy troops shown consists methods fight flee 
things particular notice rap 
code task shown discussed page 
details methods rap discussed detail page 
task net fight method describes behavior involves fighting fight going badly 
support behavior run away task spawned priority higher shooting task 
added priority enables run away task take control promptly fighting time 
added priority puts run away task higher priority task care taken avoid having pre situation monitoring 
keep situation monitoring interfered assigned priority higher enemy troop handling 
define rap index handle enemy troops succeed true monitor state location enemy external class enemy enemy unit true method context location thing weapon bay class thing weapon true quantity held thing amount amount task net ti shoot enemy troops thing re run away enemy ti window method task net ti run away enemy rap dealing enemy troops second point notice enemy troops task passive monitor 
relies situation monitoring task gather information give system appropriate reactions 
passive monitor enemy troops task respond information gathered tasks 
gives system immediate response matter truck finds enemy troops 
maintaining reasonable fuel level rap descriptions fuel monitoring task shown figures 
fuel monitoring task splits concurrent tasks shown fig ure concert produce complex behavior 
fix low task waits task agenda fuel level gets units 
fuel level need actively monitored truck fuel gauge accessible sensing updated hardware interface primitive action exe 
fuel level goes units task eligible run interrupt delivery tasks truck 
meth ods selected depends situation 
fuel drums outside truck 
fuel drums outside truck fuel available trip truck goes search full fuel drums 
fuel short reserve stored cargo bay give truck chance find 
task agenda rap memory location truck location fuel monitoring tasks support fuel reserve utility opportunity monitor 
replenish reserve task waits execution agenda need new fuel reserve accessible fuel drum 
point task active puts fuel drum cargo bay emergency situation 
task priority replenish reserve task high fuel drums grabbed accessible 
replenish reserve task works conjunction physical memory strategy define rap index fix low fuel succeed true monitor state truck fuel level method local fuel context location thing external class thing fuel drum true quantity held thing amount amount unknown amount task net ti fuel locally method local finding context truck fuel level level task net fuel method dangerously low reserve context truck fuel level task net dump fuel reserves rap shared tasks system 
essence strategy reserve cargo bay truck cargo shipped bay 
separation prevents sensing confusion causing critical tools removed left 
fuel reserve removed truck mistake 
try construct complex series monitors sure tools fuel leave truck placed cargo bay 
loading unloading raps need stay away cargo bay prevent errors 
rap representation execution considerably better world avoid confusion way 
strategies affect structure relevant raps library 
notice fuel monitoring tasks placed priority levels away physical memory strategies discussed section 
enemy troop tasks 
enemy troop tasks priority takes time enemy troops dealt immediately 
levels tion required subtasks look fuel drums set plan revision keep opportunistic eye way see section 
separation troop handling tasks lead problems truck enemy troops 
low fuel levels dealt tasks higher priority 
cure problem write troop tasks contains special methods applicable 
example troop task method just fight fuel critically low flee location holding fuel 
reaction task issues important points consider embedding execution system domain appropriate set reaction tasks priority structure reaction tasks physical strategies improving rap execution behavior reaction tasks required monitor critical aspects world deal emer situations take advantage utility opportunities 
priority struc ture needed coordinate reaction tasks interrupt appropri 
physical strategies simplify rap code task behavior complex domains 
decisions dealing points major effect rap representations library 
reaction tasks priorities physical strategies concert rap methods produce reasonable behavior take account 
system react appropriately effective 
summary representation issues summary major issues arise various guises creating task descriptions rap execution system 
issues designing sensing strategies keep memory date need plan revision opportunism difficulties maintaining preventing situations world defining coordinating reaction tasks furthermore issues confronted execution system acting complex dynamic world 
soon system know problems involve tracking reacting changes world unavoidable 
raps include sensing strategies support different memory processes filling missing uncertain information item identification situation monitoring information routinely missing incomplete rap memory rap methods include sensing tasks fill relevant 
similarly sensor limitations leave memory multiple representations item raps generate sensing tasks gather specific information needed merge representations necessary 
dynamic nature world means important features checked repeatedly ensure changes noticed timely manner 
subtle interactions processes lead raps complex introspection suggest 
plan revision opportunities arise method choice basis incomplete incorrect information new information avail able suggests better method 
intelligent system recognize situations abandon initial method favor better 
nap system captures behavior task net idiom initial method concurrently higher priority task watching opportunity 
plan revision opportunities arise commonly 
moving predictable planning domains dynamic execution domains plan protections policies active strategies enforce constraint world 
example simple idea protecting sonhe state translated number different strategies ranging active defense agent tampering simply changing oneself 
fact undesirable states unavoidable best done repair occur 
planning constraints typically combinations prevention repair strategies 
execution system embedded donhain react appropri utility opportunities emergency situations 
rap system reactions generated concurrent tasks 
reaction indicated appropriate task interrupts currently active task deal situation 
coordinate interruptions sort interference multi ple reactions priorities donhain rap library carefully assessed assigned task 
chapter presents results running rap system simulated delivery truck donhain 
results show intelligent behavior relies heavily decisions dealing execution issues 
fact process struggling construct working rap library delivery truck subtleties discussed encountered 
chapter examples experiments rap situation driven execution system described detail previous chapters point time show actual implementation rap system cope effectively real world 
ideally show proof rap approach task execution solve problem systems 
system handle problems systems useful representation 
system behaves claimed 
unfortunately difficult prove things un clear form proof take 
definition coping doing reasonable situations 
reasonable situa tions vague give definition rigor 
rigorous definition prove things evaluation success situation driven execution system lie actual performance 
study rap system performance realistic problems implemented control simulated delivery truck 
simulator represent domain described firby hanks domain described ap implementation rap memory interpreter follow de chapters domain independent ability assertional database represent world 
domain dependent aspects system included hardware interface rap library tailored characteristics truck 
keep things honest rap system simulator completely isolated hardware interface 
system get information world issuing primi tive action requests truck getting information back sensors 
simulator execution system way truck treated exactly real 
evidence rap system cope effectively simulated delivery truck domain chapter offers types example detailed traces truck behav ior small problems aggregate measures truck behavior large problems 
detailed examples take form annotated execution traces show way truck actions adapt complexities world 
examples illus useful describing short behaviors large scale tasks typically require thousands primitive actions 
show aggregate performance large scale tasks graphs summarizing specific aspects system behavior 
aspects summarized chosen highlight ability system carry complex tasks face dynamic world 
evidence shows rap system behave sug preceding chapters 
extent system behaves suggested behavior suggested covers wide range interesting problems argued chapters rap approach situation driven execution proven successful 
delivery truck domain experiments delivery truck domain show rap situation driven execution system cope complex dynamic world 
discussed section appendix delivery domain simulated world truck controlled execution system 
world consists set locations connected roads truck move roads location location 
location truck may encounter mentioned chapter argue useful statements way system really behave obtained real robot hardware real world 
sympathy position argue firby hanks reasonable progress realistic simulators 
real hardware difficult get hands 
number items manipulated various ways 
domain complex usual planning research blocks world domains large number varied types item manipulation required 
furthermore aspects simulator operate probabilistic fashion 
example amount fuel traversing road chance primitive action failing reason effectiveness shooting enemy troops vary probabilistically 
domain dynamic containing agents move objects enemy troops appear 
basic domain map delivery truck donhain shown 
boxes represents location lines connecting represent roads 
right produce rocks different colors factories left consume 
warehouse top map contains tools weapons ammunition depot bottom map contains fuel drums 
warehouse depot active locations periodically produce new rocks ammunition fuel 
enemy troops appear world warehouse depot objects world move place place simulate actions unspecified autonomous agents 
gain knowledge world truck sensing tasks scan items current location examine detail 
warehouse zone factory zone qu factory zone blue qu depot delivery truck donhain key features domain test rap system complete knowledge objects world impossible agents dynamically change current situation truck primitive actions fail complete knowledge domain impossible attain truck sensing abilities limited current location 
example truck depot see objects find rest world 
furthermore keeping spirit experiments truck start initial picture world knowing connectivity map 
fact system connected truck world special rap shown instantiated look develop picture initial accessible state 
define rap index wakeup method task net ti eye scan external eye scan eye scan bay arm move folded arm move folded arm rap initially wake truck simulate actions agents simulator runs regular intervals randomly shuffle objects locations world 
frequency demon shuffles number objects get moved time variables experiments 
shorter interval shuffles truck scan location maintain date picture world 
objects get shuffled time date get scans 
independently shuffling enemy troops appear world 
enemy troops arrive truck location stay shot truck leaves 
enemy troops increasing probability truck captured 
truck leaves location enemy troops follow 
dynamic agents form shuffling demon enemy troops truck cope primitive action failures 
primitive actions fail world appropriate state 
example grasp fail arm positioned graspable object truck move pointed road 
similarly grasp may fail arm positioned properly shuffling demon moved object away 
primitive actions fail objects involve longer accessible 
addition small probability grasp primitive drop object trying pick 
appendix shows primitive actions truck execute way fail 
objects domain implied wakeup rap discussed truck controlled system arms cargo bays 
arms identical arm grasp bigger items 
cargo bays sanhe set aside tools fuel reserve discussed section leaving bay carrying cargo 
truck fuel bay capacity units fuel 
fuel consumed tinhe truck traverses road typically times large experiments discussed 
actual fuel consumption varies probabilistically nominal value precise consumption number tasks required experimental run determined advance 
support truck travels donhain contains fuel drums contain units fuel 
depot active location periodically removes empty fuel drums world generates new full ones 
truck needs fuel find fuel drums pour fuel bay 
enemy troops may appear described world contains weapon ammunition truck defend 
weapon moved truck special gun tool 
shoot enemy troops weapon contain ammunition toggled truck arm 
ammunition produced warehouse ammunition boxes may hold rounds 
truck pour ammunition boxes gun keep round magazine loaded 
shooting consumes ammunition occasional reloading required 
basic task assigned delivery truck move rocks place world 
rocks come different colors sizes quarry generates rocks color 
generate rocks periodically counted rocks hand time 
experiments period tuned truck wait occasionally 
rocks generated shuffling slowly world 
keep process populating world rocks fuel ammunition shuffling place new items location holds 
reason item producers generate new items exist location 
basic delivery task examples chapter basic task delivery sonic number rocks color factories 
truck rocks world fill order order may require truck arbitrary number trips 
busy delivering rocks truck run enemy troops run fuel 
rap system task agenda starts basic reaction tasks priorities discussed section fuel monitoring task enemy monitoring task situation monitoring task 
new delivery tasks truck added task agenda reaction tasks 
real sketchy plan necessary delivery task single rap executed concurrently 
prevent accidentally completing task truck shuffling appear factories 
truck uses order filling strategy steps 
go location believed hold rocks correct color 

rocks known rocks step go appropriate quarry 

pick rocks current location fill order truck 

go correct factory 

unload rocks picked step 
order complete go step 
strategy results truck trying find rocks knows doesn know going appropriate quarry waiting sonhe new rocks produced 
rap library support delivery truck donhain rap library holds raps defining separate methods 
complex feature donhain controlling truck arms 
moving arm place special cases arise depending starts going 
specific recovery strategies needed deal different types arm failure 
raps library smooth complexities define generally applicable arm move arm pickup arm putdown operations 
tasks move truck place place reasonably complex require raps 
basic sensing tasks take raps referenced rap raps required generate appropriate behavior raps define tasks handling enemy troops rap monitor current situation 
building structure raps needed define tasks implement rock delivery strategy described 
raps required implement delivery tasks routine truck control tasks associated failures independent high level tasks built 
problems involved moving things truck independent items just real world 
specific strategies necessary items different shapes sizes weights seldom item matter 
ability raps world encapsulating special purpose strategies needed carry tasks crucial planning possible 
idea sketchy plan sense useful high level tasks defined planner building blocks 
rap system proposed representation interpreter tasks significant library demonstrates structure 
raps required deal low level details world required define high level tasks details smoothed 
detailed examples way illustrate effectiveness rap system de tailed execution traces 
section includes traces long shows creation execution completion raps required execute simple adap tive behavior short shows way priorities monitors interact generate useful reactions 
traces intended show rap system adapting cope uncertain information primitive action failure dynamic situation changes 
traces give insight way rap interpreter functions 
trace follows process mounting weapon truck weapon bay 
level task simple consists going weapon picking putting bay 
reality trace complicated 
truck picks special tool needed pick gun doing finds gun large arm 
truck switches tool arm switch cope dropping tool couple times 
sort low level manipulation objects information gained size gun failures dealt dropping things exactly rap system designed 
second trace follows truck interactions enemy troops 
truck moving quarry factory runs enemy troops intermediate zones 
enemy troop monitor immediately wakes truck tries shooting troops 
shots enemy troops truck turns runs away 
type reaction basis rap ability cope dynamic situations 
traces actual output taken experiments delivery truck main 
trace includes tasks required instantiate mount weapon behavior second trace includes primitive action requests 
basic coping behavior behavior traced example mounting weapon weapon bay 
truck starts fuel depot assigned task getting weapon ready enemy troops appear 
truck move warehouse find gun lift weapon bay 
total primitive actions generated course picking gun 
mistake early truck know large gun juggling required sort things 
actions performed service low level arm movement grasping tasks correspond intuitively kinds manipulation people quite 
pick wrench discover won left hand switch right second thought 
trace included complete indicated serves example inner workings rap interpreter 
detailed examples difficult include context important raps controlling behavior 
example situation kept tame tried include state description required follow 
trace mounting weapon truck shoot enemy troops carrying loaded weapon weapon bay 
reaction task handling enemy troops added task agenda rap shown executed 
rap describes task mounts weapon weapon bay loads ammunition 
define rap index ready weapon weapon succeed location weapon weapon bay class weapon weapon true quantity held weapon amount amount method task net ti mount weapon weapon location weapon weapon bay re load weapon weapon getting weapon ready start execution trace point ready weapon task comes execution time 
truck near experimental run low fuel situation monitor reaction tasks agenda 
lines starting indicate interpreter just selected indicated rap execute lines show actions taken interpreter executing rap 
part trace considering task weapon 
creating task mount weapon 
creating task load weapon 
suspending task ready weapon output covers execution ready weapon task 
numbers af ter line assigned task created easily distin trace task completed number gets recycled 
method selected ready weapon task generates subtasks mount weapon load weapon 
placing subtasks agenda rap interpreter suspends ready weapon task placing back agenda constraining wait mount weapon load weapon tasks complete 
agenda holds tasks tasks running concurrently 
executing ready weapon task interpreter select new task execute important eligible run selects task define rap index mount weapon weapon succeed location weapon weapon bay class weapon weapon true method situations method context truck location warehouse task net tl truck travel warehouse truck location warehouse truck location warehouse look class weapon thing class thing weapon true move thing thing weapon bay arm examine thing rap mounting weapon truck ready weapon family 
mount weapon task shown 
mount weapon task contains methods different weapon locations known example truck know weapons 
weapon locations known rap directs truck go warehouse default 
trace continues shows choice 
considering task weapon 
creating task truck travel tt 
creating task look class 
creating task move thing 
suspending task mount weapon method chosen includes subtasks 
truck travel task moves truck warehouse look class task looks weapon move thing task moves weapon weapon bay 
adding tasks agenda interpreter suspends mount weapon task selects truck travel task run 
considering task tt tr edited considering task tt 
task accomplished 
removing task truck travel task generates subtasks move truck current location warehouse 
subtasks taken trace shorter completes truck travel task comes execution 
point truck warehouse succeed clause satisfied removed task agenda 
removal travel task enables execution look class task 
look class task loop check items currently accessible see weapon 
items truck just scanned step truck travel task 
accessible items known primary class 
weapon secondary characteristic objects determined examining item closely 
iteration loop examination produces trace fragment 
considering task 
creating task eye examine 
suspending task look class considering task 
creating task eye examine 
suspending task eye examine considering task 
creating task real eye examine 
suspending task eye examine considering task 
primitive operation eye examine external obj okay considering task 
task accomplished 
removing task 
task accomplished 
removing task 
task accomplished 
removing task look class task chooses unexamined accessible item internal name item generates eye examine task check 
eye examine task considers location item generates eye examine loca tion filled 
eye examine task force identification item sensor name known 
sensor name known real eye examine task generated immediately task primitive action request hardware interface 
notice time primitive action request internal names translated sensor names item comes oh 
primitive action succeeds hardware interface updates memory data returned examination 
instance item ammunition box 
completion primitive action eye examine related tasks complete removed agenda 
look class task comes execution sequence tasks generated item tool 
considering task 
creating task eye examine 
suspending task look class considering task 
creating task eye examine 
suspending task eye examine considering task ll 
creating task real eye examine 
suspending task eye examine considering task 
primitive operation eye examine external tool okay considering task 
task accomplished 
removing task 
task accomplished ll 
removing task 
task accomplished 
removing task piece trace internal sensor name tool replaced single name easier reading 
extra considering task lines come right task accomplished lines removed 
considering task 
creating task eye examine 
suspending task look class considering task 
creating task eye examine ll 
suspending task eye examine considering task 
creating task real eye examine 
suspending task eye examine eaa translation occur sensor name determined previous sensing operation 
case eye scan done truck travel task arrival warehouse generated sensor names 
considering task 
primitive operation eye examine external gun okay considering task 
task accomplished 
removing task 
task accomplished ll 
removing task 
task accomplished 
removing task examining tool look class task loops examines gun eye examine primitive action request returns data saying item weapon hardware interface note effect memory 
point succeed clause look class task satisfied gun accessible item known weapon 
notice output variable look class task bound succeed clause checked 
considering task 
task accomplished gun 
removing task considering task 
creating task pickup 
creating task putdown 
suspending task move thing look class task completes move thing task comes execution begins process moving gun weapon bay 
spawns subtasks pick gun second put weapon bay 
raps pickup task shown 
pickup rap describes task generated move gun uses general pickup rap constrains subtasks occur current location 
stops pickup continuing interrupted truck moves away gun picked 
putdown require constraint gun put inside truck moves truck moves 
pickup rap choose arm pick gun 
currently criterion choice arm known small 
truck experiments arml strong arm define rap index pickup thing constraints truck location succeed arm holding arm thing method task net tl pickup thing define rap index pickup thing preconditions small arml thing small arm thing succeed arm holding arm thing method context small arml thing task net tl arm empty arml arm holding arml arm pickup arml thing method context small arm thing task net tl arm empty arm arm holding arm arm pickup arm thing raps picking things items known big arml arm chosen 
item known large arm methods applicable arm selected random 
trace continues arml chosen 
considering task 
creating task pickup 
suspending task pickup considering task 
creating task arm empty 
creating task arm pickup 
suspending task pickup considering task 
task accomplished 
removing task arm empty task generated pickup task get rid extra items arm holding 
case aren arm empty task trivially satisfied 
arm pickup task chosen interpreter 
considering task 
creating task arm pickup 
creating task arm move 
creating task arm grasp thing 
suspending task arm pickup considering task 
creating task arm move 
creating task arm grasp thing 
suspending task arm pickup arm pickup task generates subtasks pick necessary tool move arm gun grasp gun 
arm pickup rap written special methods items require tools items class weapon known require tool tool 
pickup gun arml holding tool 
arm need tool picking tool tasks generated position arm grasp tool 
arm currently folded executing arm move task reach tool requires steps 
arm moved outside truck moved tool 
executing step produces trace 
arm move thing arm move external tasks generate single step plans contain different methods different arm motion scenarios 
considering task 
creating task arm move thing 
suspending task arm move considering task 
creating task arm move 
suspending task arm move thing considering task 
creating task arm move external 
suspending task arm move considering task 
creating task arm move 
suspending task arm move external considering task 
creating task real arm move 
suspending task arm move considering task 
primitive operation arm move arm external okay considering task 
task accomplished 
task accomplished 
task accomplished 
task accomplished removing task lines edited trace come task accomplished line 
accomplished tasks removed agenda 
step move arm tool 
considering task 
creating task arm move 
suspending task arm move thing considering task 
creating task real arm move 
suspending task arm move considering task 
primitive operation arm move arm tool okay considering task 
task accomplished 
task accomplished 
task accomplished 
task accomplished arm grasp thing task executes picks tool 
steps arm grasp force item identification sensor name tool wasn known 
considering task 
creating task arm grasp 
suspending task arm grasp thing considering task 
creating task real arm grasp 
suspending task arm grasp considering task 
primitive operation arm grasp arm tool okay considering task 
task accomplished 
task accomplished 
task accomplished 
task accomplished arm pickup tool task spawned arm pickup gun task com plete rap interpreter goes execute arm move task move arml pickup gun 
time moving arm takes step arm outside truck 
considering task 
creating task arm move thing 
suspending task arm move considering task 
creating task arm move 
suspending task arm move thing considering task 
creating task real arm move 
suspending task arm move considering task 
primitive operation arm move arm gun okay new rock order red rocks factory 
creating task deliver rocks considering task 
task accomplished 
task accomplished 
task accomplished 
task accomplished rock order slipped 
rock orders generated intervals experiments happened appear 
rock orders lower priority getting truck weapons ready interpreter continues picking gun 
quickly develops arml small hold tool gun 
considering task 
creating task arm grasp 
suspending task arm grasp thing considering task 
creating task real arm grasp 
suspending task arm grasp considering task 
primitive operation arm grasp arm gun arm full considering task 
goal failed interference arm full 
removing task considering task 
goal failed interference arm full 
removing task primitive action request pick gun fails arm full 
failure real arm grasp task executes try primitive action 
real arm grasp contains precondition saying valid method tried result rm full failure 
fails immediately arm grasp task starts 
arm grasp task structured way fails immediately 
failure preconditions low level keeps implicit looping behavior rap interpreter trying primitive actions clear point 
arm just small sense try grasp 
arm grasp thing task contain precondition strategies picking items fix problem level 
unfortunately gun item arm grasp thing task tries method 
considering task 
creating task arm grasp 
suspending task arm grasp thing considering task 
creating task real arm grasp 
suspending task arm grasp considering task 
primitive operation arm grasp arm gun arm full considering task 
goal failed interference arm full 
removing task considering task 
goal failed interference arm full 
removing task considering task 
goal failed infinite loop arm full 
removing task considering task 
goal failed interference arm full 
removing task retrying method results set failures futile loop detector prevents arm grasp thing task trying third time 
resulting failure causes arm pickup task executed gun come execution 
task immediately fails obscure reason 
looking back rap code pickup task show task net chosen includes arm empty task sure arml holding arm pickup begins 
time arm pickup executed arm holding time arm holding oo 
arm pickup fails immediately implied precondition generated clause task net satisfied case 
final result original pickup task comes execution 
considering task 
creating task arm empty 
creating task arm pickup 
suspending task pickup considering task 
task accomplished 
removing task notice time pickup task chosen arm arml method arm tried method arml failed 
simpler circumstances system learn try arml item 
arm grasp action handler hardware interface see assert arm grasp item small fails arm full arm empty 
pickup rap consider method arm 
raps coded appropriately type low level world structure learned quite naturally 
case arml pick gun holding tool 
action handler assert arml small arml may tried 
task executed get arm pick tool needed gun 
task complex tool held arml 
complexity subtask move arm tool 
considering task 
creating task arm pickup 
creating task arm move 
creating task arm grasp thing 
suspending task arm pickup considering task sense general type learning 
raps coded advance alter behavior available learned 
interesting learning theory cover construction new raps rap methods 

creating task arm move 
creating task arm grasp thing 
suspending task arm pickup considering task 
creating task arm move thing 
suspending task arm move considering task 
creating task arm putdown 
creating task arm move 
suspending task arm move thing arm move thing task chosen quite different method time tool outside truck 
tool outside arm move thing just generated task move arm directly tool 
generated tasks put tool move arm 
putdown task required truck switch items arm put item 
arm putdown task uses exchange set aside uses 
step moving arm moving arml 
notice arm move tasks chosen different methods moving arm moving outside 
considering task 
creating task arm putdown 
suspending task arm putdown considering task 
creating task arm move 
creating task arm 
suspending task arm putdown considering task 
creating task arm move basic 
suspending task arm move considering task 
creating task arm move 
suspending task arm move basic considering task 
creating task real arm move 
suspending task arm move considering task 
primitive operation arm move arm bay okay considering task 
task accomplished 
task accomplished 
task accomplished 
task accomplished step tool deposit 
considering task 
creating task real arm 
suspending task arm considering task 
primitive operation arm arm tool okay considering task 
task accomplished 
task accomplished 
task accomplished 
task accomplished tool put arm positioned pick 
moving arm requires moving bay tool 
trace step shows highlights just arm movements 
considering task 
creating task arm move thing 
suspending task arm move considering task 
creating task arm move 
suspending task arm move thing considering task lis missing 
primitive operation arm move arm bay okay 
task accomplished moving arm bay moved tool 
considering task 
creating task arm move 
suspending task arm move thing considering task 
creating task real arm move 
suspending task arm move considering task 
primitive operation arm move arm tool okay point arm movement task complete situation mon task wakes 
situation monitor reaction tasks task agenda eligible run current location scanned 
task mounting weapon required scan truck arrived situation monitor wakes 
situation monitor runs immediately high priority 
switching family 
creating task eye scan 
suspending task monitor situation considering task 
primitive operation eye scan external okay considering task 
task accomplished situation monitor longer eligible run location scanned eye scan just performed rap interpreter looks new task run 
family executed inter included weapon mounting tasks interpreter returns 
mounting tasks waiting arm motion complete continue just left 
switching family task accomplished task accomplished task accomplished task accomplished task accomplished task accomplished arm positioned tool pick 
develops domain physics allow object grasped arms positioned 
arm just moved tool arml remains put 
arm interference failure reported hard ware interface note memory arms interfering 
arm full failure low level tasks know repeat arm interference failure 
considering task 
creating task arm grasp 
suspending task arm grasp thing considering task 
creating task real arm grasp 
suspending task arm grasp considering task 
primitive operation arm grasp arm tool arm interference considering task 
goal failed interference arm interference 
removing task considering task 
goal failed interference arm interference 
removing task point arm grasp thing task comes execution chooses new method assertion arms interfering 
method starts moving arml away tool 
considering task 
creating task arm move away 
creating task arm grasp 
suspending task arm grasp thing considering task 
creating task arm move 
suspending task arm move away considering task 
creating task real arm move 
suspending task arm move considering task 
primitive operation arm move arm folded okay considering task 
task accomplished 
task accomplished 
task accomplished arm free try pick tool 
time clumsy nature arm comes play drops tool twice succeeding 
low level tasks allow retries arm dropped failure effective repair simply try futile loop detector stops real arm grasp task tries 
considering task 
creating task real arm grasp 
suspending task arm grasp considering task 
primitive operation arm grasp arm tool arm dropped considering task considering task 
goal failed futile loop arm dropped 
removing task considering task 
creating task real arm grasp 
suspending task arm grasp considering task 
primitive operation arm grasp arm tool okay considering task 
task accomplished 
task accomplished 
task accomplished 
task accomplished primitive operation arm grasp arm tool arm dropped arm holding tool 
step mounting weapon arm pick gun 
requires moving gun outside truck 
considering task li 
primitive operation arm move arm external okay li 
primitive operation arm move arm gun okay moving gun arm pick 
part way grasp situation monitor interrupts 
considering task 
creating task arm grasp 
suspending task arm grasp thing considering task 
creating task real arm grasp 
suspending task arm grasp considering task 
primitive operation arm grasp arm gun okay switching family 
creating task eye scan 
suspending task monitor situation considering task 
primitive operation eye scan external okay considering task 
task accomplished switching family 
task accomplished 
task accomplished 
task accomplished 
task accomplished 
task accomplished 
task accomplished task picking gun completed moved weapon bay 
steps proceed mount weapon task finished 
considering task 
creating task arm putdown 
suspending task putdown li 
primitive operation arm move arm weapon bay okay li 
primitive operation arm arm gun okay li 
task accomplished 
task accomplished 
task accomplished 
task accomplished gun summary trace trace see enormous amount detail simply moving gun outside truck weapon bay 
trace runs pages actual primitive actions executed 
reason length trace number intermediate raps required little decisions 
items selected examination arm chosen strategies selected moving arm different situations 
details represent exactly complexity rap system designed hide planner real world worse 
lot worry decisions don matter 
argue planner elected arm arm right size gun known 
choosing arm steps involved juggling tool arms avoided example 
fact arm clumsy drops things suggests arm possible 
way possibility error explicitly introduced arml entail switch arm drop things 
soon possibility error introduced form adaptive behavior required sort things run time 
example shows rap system handle errors due lack information choosing arml small errors due primitive actions failures dropping things 
reacting situation behavior highlighted trace encountering enemy troops way factory 
notice enemy troops detected sensing operation alerts system presence 
point reaction task handling enemy troops takes control runs away 
important point system drop doing deal emergency situation return left problem 
trace encountering enemy troops execution trace shorter cut primitive action requests 
truck way factory way runs enemy troops 
truck tries fight troops couple futile shots runs away 
rap describing strategies handling enemy troops shown 
trip factory starts truck moving place place travel raps shown 
movement requires pointing truck road travelled setting truck speed moving forward 
goes truck emerges road moves leg trip 
pick truck moves road 
considering goal 
primitive operation truck turn okay 
primitive operation truck speed medium okay 
primitive operation truck move okay point truck changed location discussed previously movement tasks include scan operation see accessible new destination 
case truck arrived location holds enemy troop units scan reveals presence 
new assertions memory presence enemy troops wakes enemy troops reaction task 
enemy task higher priority travel task interrupts begins execute 
primitive operation eye scan external okay switching family method chosen handle enemy troops task involves fighting running things aren working 
rap describing fighting task shown 
consists loop keep shooting enemy gone 
precondition specified weapon loaded 
methods rap essentially second includes additional step weapon necessary 
item world toggled truck arm positioned 
method includes sensing tasks 
arm examine task eye examine task slightly faster 
check amount ammunition left weapon 
eye scan task see enemy troops left outside truck 
excellent examples routine sensing required support rap execution 
succeed clause shoot enemy troops rap requires knowledge accessible enemy troops preconditions clause requires information ammunition gun 
rap generate sensing tasks gather information 
method chosen handle enemy troops rap shoot troops task run away task run concurrently 
run away task constrained execute time units passed 
delay gives shoot task chance try hand getting rid enemy troops see section 
result shoot enemy troops chooses method arm located gun fires 
primitive operation arm toggle arm gun okay 
primitive operation eye scan external okay 
primitive operation arm examine arm gun okay subtasks complete shoot task comes execution finds enemy troops outside 
gun shoot define rap index shoot enemy troops weapon succeed location enemy external class enemy enemy unit true preconditions quantity held weapon amount amount repeat location enemy external class enemy enemy unit true method context arm arm weapon task net tl arm toggle arm weapon arm examine weapon eye scan external method context arm arm weapon task net tl arm move thing arm weapon arm arm weapon arm toggle arm weapon arm examine weapon eye scan external rap shooting enemy troops time toggled time enemy driven 
troops shoot task loops chooses method 
time shooting enemy units left eye scan primitive picks 
time time units passed run away enemy task wakes 
task generated concurrently shoot task priority higher 
interrupts shoot task examine executed takes control 
primitive operation arm toggle arm gun okay 
primitive operation eye scan external okay 
primitive operation truck speed medium okay 
primitive operation truck move okay 
primitive operation eye scan external okay switching family run away task immediately picks direction straight ahead case moves truck 
reaching new location movement tasks generate eye scan time enemy troops 
eye scan ends movement task run away comes execution 
enemy troops outside truck run away task finishes 
run away task causes shoot enemy troops task handle enemy troops task goes back sleep 
point rap interpreter looks new task execute goes back travel task interrupted 
discussion detailed examples summarize detailed examples described show rap system deal effectively incomplete information primitive action failure dynamic situations 
system able cope need switch hands discovered gun heavy arml trouble changing behavior face arm interference arm dropped failures 
enemy troops example shows typical case system interrupting task deal important 
examples somewhat incomplete don cover behavior necessary delivery truck donhain believe evidence validity rap approach 
large experiments execution traces excellent illustrating inner workings program way handles specific interesting problems 
examples leave doubts system cope larger problems 
traditional planning research traces regularly show construction step plans solve sonhe interesting puzzle question planner build step plans remains unanswered 
planners employ algorithms computational properties hard scale lack results large problems surprising 
vere isis fox planning systems exceptions regard 
authors show experimental results give idea program constructing step schedules 
planning systems execution systems face difficulties problems scaled size 
particular execution systems run risk losing touch world time goes 
impossible keep track world time discrepancies real world system world model may accumulate point system incapable effective action 
similarly action descriptions account go wrong mistakes 
mistakes corrected accumulate point system longer knows going 
head questions rap execution system section presents set experiments simulator involve generation thousands primitive actions 
experiments described designed show rap system behaves way long problems short problems 
evidence system ability cope incomplete knowledge primitive failures inter comes readily examples rap code short execution traces studied detail 
shown large scale performance expected smaller examples merits system argued small examples 
experiments supply evidence claim 
important stress results experiments suggestive 
difficult design experiments analyzed way prove coping behavior 
idea show things expected general sense claims specific performance particular problem 
basic experiment sets results discussed variations basic experiment 
independent delivery tasks assigned truck amount simulated time taken carry recorded 
experiment uses delivery tasks varies shuffling interval effectiveness way 
shuffling appears occasionally world stay constant long periods time shuffling appears world truck changing constantly 
experiment enemy troops restricted zones factories experiments encounters kept rare 
reason restriction keep results dominated interactions truck troops 
experimental run begins world state truck fuel depot 
tasks performed get things set starting time zero 
wakeup task executed see state world 

truck fuels priority 
fuel level monitoring task priority 
truck situation monitoring task priority 

truck moves warehouse weapon mounted loaded 

enemy troops monitoring task priority 
process takes units 
starting new delivery task priority generated time units total introduced 
tasks include tasks delivery red rocks factory deliver blue rocks factory delivery yellow rocks factory 
tasks interleaved color 
time setup tasks complete delivery tasks introduced time delivery tasks agenda 
delivery task complete stops 
form experimental data example experimental data shown 
reports show results running experiment twice 
shuffling set wake time units effectiveness 
report shows time delivery order introduced time completed time rock consumed correct factory 
trial satisfied orders second trial ended unusually truck ran gas 
number effector sensor operations tallied total running time simulator time units 
rock order report trial number orders completed number orders pending completed orders order yellow order yellow order blue order red order io blue order los red order yellow order blue order red primitive operations sensor effector failed running time rock order report trial number orders completed number orders pending completed orders order yellow order yellow order blue order red pending orders order blue order red order blue order yellow order red primitive operations sensor effector failed 
running time experimental data things observe results 
notice orders runs start precisely times 
discrepancy arises way time stepped forward simulator 
time primitive action executed simulated time passes simulator returns 
amount time passes depends action executed traversing roads probabilistic 
orders generated simulator updates actual time appear depends somewhat actions generated 
second thing notice orders completed order generated 
initialization tasks previous order complete rap interpreter looks new task execute select pending order random 
order task take truck quarry rocks interested experimental run simulated time units takes hours apollo dn 
time includes lisp garbage collections execution time rap interpreter delivery truck simulator 
primitive action completes approximately minute average 
available immediately 
situation task waits agenda time pass interpreter select different task 
processes order delivery task execution non deterministic 
desired task ordering enforced ordering tasks explicitly sketchy plan placing deadline task influence interpreter choice 
interesting aspect results variable interval task finishing times 
expect finish times separated equal intervals tasks involve approximately number primitive actions 
minor variations occur due variability world chance encounters enemy troops actual intervals range time units large variation 
main cause variation need 
truck runs low fuel go find 
finding fuel drums dumping fuel bay takes significant amount time time time gets included delivery complete 
required times typical experimental run 
observation tasks completed 
trial may finish prematurely reasons 
disaster may truck 
experiments truck may run fuel captured enemy troops 
running fuel happens rarely occasion raps shuffling interact particularly badly 
consider happen truck far fuel depot runs low fuel 
fuel level low truck reserve buy time sets looking full fuel drums 
truck gets expects find fuel shuffling moved away truck may run fuel way place 
usually problem occur shuffling adds fuel drums new places 
long fuel drum encountered searching fuel opportunistically keep truck alive 
expected fuel source empty fuel encountered way difficulties arise 
captures rare encounters enemy troops kept infrequent rap strategies reacting appear reasonably effective 
second trial may finish prematurely truck forced give orders 
happens delivery task tried repeatedly unsuccessful time 
eventually futile loop detector fail task parent interpreter simply gives moves task agenda 
methods delivering rocks tried twice getting single rock correct color truck delivery task fails way 
failures occur world gets sufficiently random truck keep track rocks color 
experimental results include data incomplete delivery tasks trials involved truck disasters 
analysis data primary experimental results take form graphs plotting average time required complete order various features shuffling 
average delivery completion time task trial calculated dividing total time taken number tasks completed trial 
results trials averaged get data point 
vertical range bar shows spread average trial times calculate point 
rigorous data analysis methodology graph shapes reproducible shape graph actual completion times concerned 
controlled variables experiments frequency shuffling appears world efficiency shuffles 
shuffling interval controls frequency shuffling takes place shuf efficiency controls likelihood item get moved shuffle 
instance shuffling interval time units shuffling efficiency items shuffled units half items accessible truck moved time 
items locations may appear truck location shuffle 
shuffling efficiency item moved item move 
changing variables world predictable 
rap library delivery tasks assigned system kept constant experiments 
average amount time required complete delivery task set shuffling parameters represents measure library system cope amount uncertainty 
expect system able cope certain amount randomness built robustness 
world gets random system reach point built robustness correct errors occur rap system lose touch world 
point truck incapable delivering rocks effectively exactly behavior observed 
rap system gets robustness different sources 
natural robustness situation driven behavior 
soon errors memory discovered corrected system changes behavior deal new situation 
example suppose truck reaches red rock discovers isn shuffling demon moved 
memory immediately updated show rock gone system choose new rock pick 
type coping behavior heart situation driven execution concept 
dealing execution errors usually helps remove information mem ory longer true 
second source rap system robustness comes sensing tasks uses gather new information 
items get shuffled away detected removed memory trying manipulate new items identified added memory looking 
situation monitor sure new items overlooked waking tinhe units scanning current location 
experiment experiment holds shuffling efficiency fixed varies shuffling interval tinhe units tinhe units 
resulting average delivery times shown graph 
black diamond graph shows interval situation monitor task scans world 
seen shuffling items world little effect performance system occurs tinhe units 
point system begins take longer satisfy order shuffling interval reaches tinhe units things start fall apart 
tinhe units system fails fill orders gives shuffling interval gets time units system manages fill deliveries run 


oo 
ta 
hi 

ill rl results different shuffling intervals shuffling efficiency means items truck thinks accessible gone shuffle 
situation monitoring interval time units truck remain confused time units 
means errors truck model world location persist longer time units fully repaired 
expect shuffling interval longer time units world static time errors easily smoothed 
infrequent shuffling little effect system performance doesn 
shuffle world generate additional primitive actions frequency shuffling goes actions account system time 
additional actions mean actions get system closer satisfying delivery goals 
interval shuffle monitor scan primitive action requests referring items world failure 
failed actions eventually repeated failing add time experimental run 
similarly addition new items current location causes extra sensing occur 
particular new rock discovered system generate sensing tasks see correct color delivery task 
world remains static experiment shuffle interval tasks completed time taken effector actions sensor actions failed actions percent sensor percent failed table series experiments various shuffling intervals operation done item task 
new items keep appearing disappearing examinations done items get move away 
shuffling interval gets shorter additional actions increase tinhe taken order 
increase appears graph sharp rise delivery tinhe tinhe units 
shuffling interval tinhe units system continues complete delivery tasks 
continues successful item descriptions get confused tinhe better chance action 
shuffling interval goes tinhe units damage memory longer gets repaired shuffle occurs shuffles occur monitor scan 
memory errors rise eventually actions fail succeed 
happens system longer deal effectively world delivery tasks fail complete increasing rate 
insight may gained examining table 
table contains summary data single runs experiment different shuffling intervals 
increase sensor actions proportion effector actions clearly seen shuffling interval decreases 
similarly number failed actions increases shuffling interval goes 
tinhe interval reaches tinhe units system spends inordinate amount tinhe checking rocks reaching finding gone 
system fails achieve delivery goals result 
experiment second experiment similar varies shuffling efficiency holding interval constant time units 
resulting curve shown 
graph shows shuffling efficiency goes time required complete order goes efficiency just system begins give orders 

results different shuffling efficiencies curve shows increasing cost extra actions caused increasing number memory errors new item arrivals 
extra time due failed primitive actions 
incorrect actions taken scale 
truck sets find new rocks full fuel drums location chances decreases increased shuffling efficiency 
effect result actual failed primitive actions truck moves problem notices missing items arrival trying manipulate 
extra travelling causes stops increases average delivery times 
sample single run results shown table shows trends quite clearly 
notice particular large jump percentage sensing tasks static world shuffling efficiency random world shuffling efficiency experiment shuffle efficiency tasks completed time taken effector actions sensor actions failed actions percent sensor percent failed table series experiments various shuffling efficiencies 
similar large increase number failed primitive actions top level delivery tasks 
experiment third experiment sanhe second shuffling efficiency reset tinhe approximately half way run 
bottom curve shows results square data points 
top curve shows results second experiment sanhe curve 
results show sanhe increasing delivery tinhe experiment increase fast 
furthermore system continues complete delivery tasks initial shuffling interval 
decrease steepness due error correcting properties execution system 
constant shuffling keeps state erroneous actions result 
time world static system begins correct errors 
eventually errors corrected mistakes 
system seldom fails finish delivery task time 

ta experiment ni ti nii ren results different shuffling efficiencies discussion large experiments main point experiments show rap system continues cope effectively long series actions 
errors rap memory remain uncorrected accumulate system manages stay touch world time 
robustness ensures behavior combination inherent tendency rap system retry failed actions specific sensing strategies rap library deal delivery domain 
experimental curve shows rap system copes quite effectively occasional randomness world 
fact shuffling intervals greater time units appreciable effect system behavior 
interval time units begins slow system 
second curve shows clearly way rap system slows memory accurate 
slow due primarily actions chosen mistaken information 
actions take time produce desired effects repeated new information available 
world changing rapidly new information available system spends time sensing tasks 
static world information gathered location items move gathered 
third curve shows system recover random situations carry effectively world 
lack error accumulation propagation important requirement execution system deal dynamic world 
summary experiments examples chapter offers evidence rap system effective way implement situation driven execution behavior complex dynamic domain 
evidence consists types data gathered actual system simulated delivery truck domain 
type evidence consists execution traces truck execution typical behaviors 
trace shows way system adapts actions recover errors due incomplete information primitive action failure 
second trace shows system noticing reacting emergency situation 
traces taken show rap system cope complexity dynamic situations small scale 
second type evidence consists aggregate experimental data show system small scale behavior scales larger problems 
experimental evidence particularly rigorous show clearly delivery domain rap system capable coping robustly continuing levels uncertainty randomness world 
furthermore experiments show world random deal effectively rap system recover randomness decreases slowly repairing model world 
unexpected complexity chapter claim acting complex dynamic worlds requires behaviors intricate imagined 
need idiosyncratic sensing strategies support tasks need exploit plan revision opportunities difficulties maintaining constraints world complicate construction effective rap representations 
evidence claim relate examples unexpected behavior required fine tuning raps delivery truck donhain 
problem appeared thought finished raps required describe rock delivery tasks 
algorithm encoded essentially 
go location rocks correct color load rocks needed carried 
go destination location 
unload rocks count put 
count shows rocks required fill order go step trial runs case truck went location rocks picked needed delivered expected 
watched truck perform sequence actions 
assigned task delivering red rocks factory set find sonhe 
way red quarry red rock observed location truck plan revision opportunity stopped 
truck picked rock went factory put 
point rocks required closest red rock course just put 
truck delivered rock picked sanhe rock put times 
ways fix bug appropriate depends semantics wants give delivery task 
example succeed clause check rocks hand factory count delivered get new rocks quarry 
changed step algorithm go location holding rocks correct color rock destination number rocks delivered determined count factories delivery truck domain consume rocks arrive 
trip required factory consumes batch rocks truck gets back checking succeed clause rocks hand 
second problem appeared shuffling reasonably active resulted truck getting endless search fuel 
algorithm encoded raps time 
accessible fuel drums go location containing fuel drums 
dump local fuel drums fuel bay 
truck full go step algorithm works fine fuel drums kept groups shuffling active fuel drums get scattered world sets 
happens system get situation goes location expecting find full drum 
drum truck finds low fuel goes location finds full drum 
truck uses new fuel travelling drums cycle chasing single fuel drums world go long time 
correct problem changed step algorithm 
accessible fuel drums go location hold fuel fill 
condition represented believe clause check age fuel drum location assertion reject old ones changed shuffling 
believe time interval change shuffling raps cope different shuffling frequencies wanted keep raps constant experiments fixed time interval smallest shuffling interval 
effect sending truck fuel depot needs fuel location fuel drums 
interesting point dealing dynamic worlds requires semantics tasks worked carefully 
complexity real domains significant effect way behaviors encoded large experiments show representations adequate 
chapter preceding chapters describe rap approach situation driven execution give examples behavior implementation rap system simulated delivery truck donhain 
chapters describe rap execution system way interacts world generate behavior required situation driven execution 
chapter describes rap representation language way formally encodes run tinhe task behaviors 
chapter talks interest ing issues trying construct ps sketchy plans cope complex dynamic world 
particular sensing strategies op state maintenance reaction task organization discussed 
issues addressed peripherally traditional planning literature profound effect intelligent execution time behavior 
chapter shows examples way rap system works simulated delivery truck donhain 
chapter wraps discussion rap approach execution comparing attempts break traditional plan execute paradigm robot control 
way outline complete robot control system rap system proposed 
summary rap system traditional ai approaches robot control revolve notion central planner 
planner takes goals assigned robot constructs detailed plan consisting primitive robot actions 
robot executes action turn achieve goals 
procedure planner able anticipate state robot encounter choose appropriate primitive actions put plan 
unfortunately complex dynamic worlds impossible project robot detail 
way know initial state world uncertain action outcomes projection known difficult 
agents processes planner control complicate things 
ability project robot detail planners construct detailed plans action 
solution problem inadequate projection planning operators primitive actions hide complexity real world 
operators adapt variety situations handle variety routine error conditions applicable world states 
world states treated planner execution operator adjust situation encountered generate appropriate results regardless initial state 
planner need move range states range states 
long applicable operator range states need go detail 
rap system described previous chapters concrete proposal constructing planning operators adapt different world states execution time 
raps major characteristics adapt actual situation encountered execution time 
robust face primitive action errors uncertainty interfer ence 
look 
rap designed carry particular behavior starting variety possible initial states 
rap packages methods achieving goal different initial states execution time chooses situation encountered 
ability choose different methods execution time rap system adaptable 
raps robust face execution errors 
rap method may fail reasons may issue primitive action request fails hardware problem may issue action request incorrect picture current situation agent may interfere prevent actions generated method achieving purpose 
cope failures rap maintains success check method achieve state desired rap tries choosing method 
possible methods tried times rap give 
primitive action failures transient dropping object generate new information finding object heavy corrected trying 
similarly uncertain information usually corrected method fails rap chooses new method new information taken account 
planner primarily interested raps operators execution tinhe rap system 
world simple friendly plan may proceed start finish needed execution tinhe rap defined task choose methods required 
realistic worlds opportunities improvement disaster 
opportunities arise situations world predicted planning system 
new information uncovered execution may appropriate interrupt current plan 
emergency situations exactly sanhe new fact comes light system drop doing respond immediately 
rap system deals opportunities emergencies allowing reaction tasks exist execution agenda concurrently tasks making plan 
examples tasks procedures deal running low fuel discovering fire encountering enemy troops 
reaction tasks wait task agenda situation requiring execution arises wake handle problem 
rap system manages type behavior mechanisms state monitors task priorities task families 
task executed rap system priority family 
choosing task execution agenda rap system selects highest priority task eligible run 
tasks sanhe priority task sanhe family task selected 
executing tasks family tinhe focuses system attention high level goal tinhe 
priorities allow system attention shifted goal appropriate 
long reaction tasks high priority shift attention soon eligible run 
prevent reaction tasks system attention shutting tasks altogether reaction tasks remain ineligible run monitor clauses believed satisfied world 
reaction tasks set raps part planner original sketchy plan permanent part system execution agenda 
robot delivery truck donhain best place task deal low fuel execution agenda permanently difficult planner anticipate trip may carrying goal 
ensure truck runs fuel task hand fill fuel runs low 
hand planner sends truck sparsely populated road may wise set special task get fuel depot encountered 
depots far better fill possible wait fuel run low truck far away depot recover 
important feature rap execution system way returns task family reaction task interruption 
high priority reaction task eligible run immediately displaces current task family takes control execution 
emergency opportunity dealt tasks interrupted family preferred tasks sanhe priority 
task family part method instantiated interruption context different situation 
example truck may travelling factory interrupted new route necessary interruption moved truck location 
inherent robustness adaptability rap system come play point old method fail replaced new 
sanhe execution characteristics rap system appropriate plan operator representation help deal interruptions effectively 
extending rap system discussion rap execution system far treated system designed carry tasks 
experiments described chapter tasks defined single raps proceed completion entirely rap system 
planning done primitive actions completely self contained entities get executed tinhe 
rap system intended stand designed middle layer layer robot control system 
robot behavior controller exist rap system handle concurrent continuous interactions environment planner exist rap system look head problems arise 
design decisions confronted constructing rap system view larger system embedded 
instance obvious limitations way rap system interacts world limitations restrict types behavior rap system exhibit eliminated addition planner behavior controller 
section discusses major limitations rap system outlines layer robot control model remove 
limitations rap approach major limitations rap approach execution control assumptions primitive actions sensor reports realistic 
choosing method requires committing course action relevant information known 
look ahead task method choice sonhe obviously useful 
tinhe rap interpreter accounted approach 
limitations discussed 
unrealistic primitive actions unrealistic assumptions primitive actions take forms primitive actions atomic primitive actions executed tinhe 
atomic primitive actions imply single command required carry behavior eye examine arm grasp arm toggle 
quite clear com set joint movements tightly coupled sensory feedback required carry actions 
rap system pushed choosing simpler primitive actions sonhe point meet traditional control processes 
similarly situations obviously possible thing tinhe rap interpreter continued running robot hardware carrying primitive action able choose primitives exploit situations 
example task request arml pickup em waiting complete rap system task wants arm pickup tern 
problems arise interpreter wait 
rap memory reflect true state world primitive action progress 
world changing arml moving tasks choosing arm executing 
second problem primitive actions requiring sanhe resource execute sanhe tinhe 
robot move arml different places sanhe tinhe 
raps wait fail required resources busy 
unrealistic assumption primitive actions sensory information takes form symbolic messages items world 
assumption sensory data predicates long tradition ai rap system removes assumption fixed item designators current sensor technology trouble delivering predicates form 
area requires investigation 
recall chapter current rap interpreter algorithm waits primitive action executed 
task expansions considered results primitive action returned hardware interface 
interpreter time ignored limitation complicates primitive actions provision account tinhe taken rap interpreter 
simu lated delivery truck donhain real tinhe passes execution primitive actions tinhe required assimilate new sensory data choose prim itive action essentially line 
limitation easily lifted simply letting tinhe pass interpreter running 
problem change task expansions required primitive action issued system may lose touch changes occuring world 
solution problem assimilate new sensor information memory part task execution cycle primitive actions finish 
rap system cycle choose task choose method kept simple short queries rap memory include inference unification 
cycle short memory updates done cycle system lose touch world 
occasionally system cycle method choices executing primitive action cycle able react changes world 
long reaction tasks require cycles system trouble coping 
kaelbling discusses sonhe sanhe issues 
incorporating tinhe rap execution straightforward significant effect planning 
planner trying construct sketchy plan achieve time critical goals able estimate duration task plan 
estimates include tinhe taken rap interpreter tinhe taken primitive actions 
problem planning research dean boddy rap system easier doesn harder 
premature method commitment aspect rap system problem sonhe points view 
task chooses method commits fu ture course action get chance change mind method completes 
task methods explicitly set plan revision opportunity mon feel want change minds 
similarly methods subtask preconditions explicit clauses cause ex ecution things working expected 
notations step method run parent reconsider different choice 
incorporating appropriate notations complex non intuitive see section example 
hand committing course action advantages look ahead coordinate actions independent tasks 
planning system watching rap system keep trouble rap system expected behavior available examination 
planner want know rap system going changes trouble develops 
rap described tasks commit complete methods task agenda just picture rap system intentions 
system goals represented agenda methods goal execution chosen steps required added agenda 
furthermore agenda changed system behavior change 
committing course action provides clear picture expected expense requiring explicit mechanisms abandoning methods inappropriate 
projection final obvious limitation rap system looks 
design goal oversight strictly speaking problem approach 
anticipating important part intelligent behavior avoid difficulties 
example choosing route factory includes crossing low capacity bridge mistake heavy boxes picked way 
thinking boxes bridge reached way anticipate problem heavy 
bridge rap system prevent disaster moving boxes trips choosing route bridge avoid bridge place 
complete robot control system limitations rap approach situation driven execution mitigated placing rap system complete tiered robot control system 
system include planner project anticipate problems 
rap system adapt behavior current situation 
action system perform primitive actions 
fact rap system designed exactly tiered robot control system mind 
shows way system structured 
solving tasks interpreter primitives planning projection transform agenda tasks task agenda transformations qu memory world state hardware interface primitives sensor data effector sensor processes processes robot control 
complete robot control system layers design deals different facet robot control 
low level action system coordinates concurrent continuous processes required control real robot hardware 
general primitive robot action exe involve moving joints simultaneously coordinating motions continuous sensory feedback 
example grasping wrench require positioning robot arm gripper orientation information vision sensors 
furthermore pressure required hold wrench depend weight surface properties determined feed back gripper 
procedures carry behaviors easily encoded separate programs fast tightly interconnected 
purpose action system package bundles continuous proce primitive actions rap system 
rap system coordinates generation primitive actions carry higher level goals varied changing situations 
primitive actions implement single discrete behaviors raps package behaviors methods achieving complex goals 
rap system look interactions methods chosen different goals try construct new methods methods knows appropriate 
top level planning system job constructing sketchy plans goals raps job coordinating execution methods chosen independent raps 
rap system gives planner choice creating sketchy plans different levels abstraction execute tasks specified different levels detail 
rap execution sketchy plan proceeds task methods chosen interpreter may interact ways produce problems inefficiencies 
execution time planner additional responsibility watching execution agenda transforming proposed courses action different goals suggest undesirable futures 
ease planner manipulation tasks rap system hides problems coping failures changing situations 
time ease rap system manipulation simple behaviors execution system hides problems involved continuous robot control 
important note functionality interfaces layers 
primitive raps just easily encoded procedures action system raps easily replaced planning 
flexibility encouraging intuitively clear lines planning acting adaptability sharp 
robot action controller main purpose low level action controller hide complexity control ling real robot rap execution system 
rap system treats primitive actions discrete atomic entities world behave discrete atomic ways 
real robots move effectors continuous motor commands real sensors track quantities change continuously time 
pouring amount water pitcher glass example motion sensing coordination requires continuous real time arm position adjustment 
rap system assumptions primitive actions preserved robot controller built carry discrete primitive actions continuous robot commands 
executing primitive actions requirements action controller areas current active research 
promising idea opinion discrete processes hall move arml item implemented collection cooperating concurrent procedures 
example hall break independent procedures move straight ahead stay way left wall stay away right wall blocking way 
move ahead procedure send commands wheels move forward wall avoiding procedures direct sensors appropriate wall steer wheels away wall gets close 
procedure signal behavior looms front robot 
sensors effectors employed necessary procedure carry simple function interesting aggregate behavior emerges interplay active procedures real world 
rap primitive action request action controller initiate monitor particular set concurrent procedures 
action controller things set procedures needed carry primitive action 
monitor progress procedure terminate signals primitive action succeeded failed 
arbitrate contradictory robot originating separate procedures 
raps primitive actions activate just procedures move effectors procedures monitor success failure conditions logical primitive action detected world 
developed implementation just system described payton 
system called reflexive planner low level controller alv 
arkin discusses similar system implemented 
generating sensory predicates sonhe done turning continuously changing properties world discrete assertions current world state 
basic idea similar concurrent procedures implement discrete actions 
signif features world assigned separate continuous processes 
process monitors state feature long state stays sonhe range acceptability process stays quiet 
feature changes significant way process generates notification memory 
example item moving near robot assigned separate process 
long item overlap capabilities rap system controller particularly apparent 
raps deal robot control low level eventually point reached easier perspicuous processes coded traditional feedback control programs 
consider problem plugging extension cords 
cord picked hand mating pieces brought 
arms low positioning error frequent visual feedback required ensure pieces meet correctly get close 
raps primitive actions pushed level joint motor commands probably sense specific arm motion processes couple tightly appropriate visual feedback 
experience robots required determine best dividing line raps lower level processes 
danger colliding robot process silent 
item veer robot path process watching generate sensor notification saying item collision course 
ideas pre sented hendler processes called state affairs monitors 
robot memory needs modified state affairs changes 
payton discusses similar idea name virtual sensors type processes included arkin 
state affairs monitors help partition continuous sensor data discrete units support rap memory notion local sensor name 
assigning processes track individual items remain sensor range assigning items temporary sensor names 
great deal remains done extracting predicates item prop erties real sensor data 
believe rap system supplies new starting point applying top information problems 
rap memory expectation sets supply set candidates matching real items suggest special purpose sensory routines apply situations 
tasks invoke methods involve specific sensory routines particular circumstances 
rap library place encode mechanisms invoking procedures ullman visual routines 
interfacing rap system rap system take advantage low level action controller system limitations discussed lifted restriction primitive action executed time 
assumption rap interpretation takes time 
actions collections concurrent processes easy instantiate action time long processes involved conflict 
assume controller notifies rap system new primitive request conflicts processes active rap interpreter know wait 
waiting primitives finish wait primitive started 
change interpreter continue execute tasks agenda primitive actions way 
separate sensing processes sensory data available time state affairs monitor active just primitive actions 
interpreter cycle extended pick task pick method method new sensor data suggested section fine 
memory updated primitive action updated task expansion cycle 
task expansion cycles take real time 
memory changes significant way primitive actions errors task expansions due change handled exactly changes occurred primitive action boundaries 
changing rap interpreter algorithm allow memory updates task execution cycle action controller described leave rap system virtually unchanged 
planning rap system top layer tiered robot control architecture rap system part planner separate responsibilities 
planner create original sketchy plans required carry system goals execution time planner watch rap system progress sketchy plan adjust things looks problems may develop 
section discusses responsibilities separately 
problem solving sketchy plans application planning complete robot control system constructing initial sketchy plans required achieve particular goals 
rap system responsibility executing sketchy plans discussed section sketchy plans take form rap methods 
call process constructing new rap constructing new method existing rap problem solving differentiate responsibilities planner 
characteristics problem solving situations traditional ai plan ning research 
goal conjunction goals assigned planning system initial description world planner find combina tion known raps achieve assigned goals 
rap library disposal planner source planning operators planning paradigm supported 
single raps linear planning operators support strips type planning fikes nilsson raps different levels support hierarchical planning sacerdoti wilkins dean problem solving rap system places problem solving finds application rap sys tem initial construction sketchy plans construction new methods execution time 
sketchy plan rap constructed demand de scribe task achieving new system goal 
system assigned goals map directly raps library need initial problem solving appropriate task immediately rap library 
imagine assigning robot goals rap fingertips 
cases new rap constructed 
general planning techniques specialized problem solvers applicable situations 
note type top level planning done line robot begins execute 
problem solving construct new rap methods plan ex ecution underway 
raps library incomplete holding methods cover situations 
example spirit rap approach routes locations hard coded rap meth ods 
clever indexing schemes reduce problems causes set routes cities set city reach certain areas routes areas point system certainly want travel points included known existing raps carry goals examples experiments chapter 
initial reaction tasks delivery tasks assigned system mapped directly raps library 
sketchy plan construction required 
routes 
desire manifest instantiation task travel quarry fac ory travel rap method linking quarry fac ory 
simply fail situa tion rap system delivery truck donhain extended include route planning problem solver 
problem solver map donhain called tinhe truck travel locations 
notice method constructed need constructed just added travel known route rap library 
extensions rap system problem solving rap system extended ways support uses planner problem solving 
raps rap library additional annotations full blown planning operators 
raps succeed clauses specify achieve precondition clauses specify situations achieve 
raps generally effects included clauses 
instance travel rap consume fuel side effect shooting rap consume ammunition 
execution tinhe rap system lets world keep track things planner want know effects advance properly project 
rap descriptions extended include list effects expected task described pap executed world 
descriptions approximate task duration needed method chosen task 
operator descriptions operators expanded detail discussed dean 
second possible alteration rap system call problem solvers particular raps need new methods 
extension simple mentioned preliminary algorithm incorporated rap implemen tation delivery truck donhain 
task comes execution methods applicable current situation interpreter checks see special purpose problem solver task 
interpreter calls problem solver see generate new method task current situation 
new method produced new method produced task fails 
route planning problem solver delivery truck donhain imagine adding problem solvers specialized situations complicated grasping problems playing games example 
fact problem needs solved important feature separates problem solving responsibilities control system planner 
building sketchy plan building new rap constructing new method execution tinhe adding existing rap 
cases results added rap library sanhe problem arises 
saving reusing results problem solving activity way may provide natural link cased planning research rap execution 
case planner looks ways problem solved past attempts adapt solutions new situations arise hammond 
rap library saves previous problem solutions reuse anyway possible extend case library traditional planning operator library 
interesting avenue research 
altering plans execution responsibility planner robot control system look detect prevent problems proposed courses action arise 
task agenda contains things rap system intends viewed system current plan 
planner job monitoring task agenda predicting expect tasks agenda executed altering tasks achieve better appropriate 
example suppose agenda contains task deliver blue rocks factory separate independent task deliver yellow rocks factory 
rap system task selection heuristics discussed chapter tasks selected random run completion considered 
yellow blue rocks located near efficient collect rocks single trip factory 
planner able realize fact replace separate tasks single task deliver yellow blue rocks factory 
transformational planning monitor rap system execution time planner act task agenda cycle project expected task agenda best 
look bugs inefficiencies projection 
bugs inefficiencies suggest transformations agenda 
apply suggested transformation 
support algorithm planner able project plan containing steps different levels detail 
agenda holds tasks various levels expansion considered generate reasonable picture 
projecting situation exactly projecting problem solving requires raps levels abstraction annotated expected effects 
problem projecting context dependent uncertain effects active area current ai research hanks dean kanazawa shoham 
bug area inefficiency identified task agenda planner apply transformation agenda fix problem 
transfor mation change part agenda adding new tasks reordering old tasks replacing old tasks new ones leave task agenda executable state 
assuming planning takes significant amount time unreasonable assumption current planners rap system exe tasks planner working remove bugs inefficiencies parts agenda 
support concurrency transformations leave agenda usable state necessary 
bugs inefficiencies inadvertently left agenda fixed quickly rap system sort best arise 
planning system designed lines described linden top level mission planner alv 
restricted form transformation fix bugs geological interpretations simmons techniques research 
pointer literature fickas 
extensions rap system execution time planning planner rap interpreter run concurrently planner problem trying project changing agenda 
hand planner run interleaved interpreter may long pauses planning robot dead world 
sonhe sort compromise necessary things planner rap system able provide estimates long wait executing task 
rap interpreter tells planner long wait executing task agenda planner able alter behavior looking hard bugs making complex transformations tinhe superficial tinhe short 
dean boddy suggest anytime algorithms basis planner 
rap system calculate allowable delays task deadlines durations making information available planner difficult 
rap system remain awake planner activity process sensory information execute high priority reaction tasks necessary 
enemy troops show planner thinking best order execute set delivery tasks task handle enemy troops executed immediately 
sonhe type handshaking necessary planner interpreter 
best form handshaking remains investigated 
summary planning issues discussed major extensions required interface rap system high level planner 
rap representations library annotated include projection information 
information needed describe effects executing tasks described rap real world 
second extension required handshaking protocol allow planner rap interpreter share task agenda execution time 
agenda tells interpreter tasks needs perform tells planner expect 
interpreter trying carry tasks agenda planner trying organize coherent 
planner able tell interpreter wait executing task interpreter able interrupt planner act immediately situation changes suddenly 
planner tackle different types 
solve encapsulated problems building initial sketchy plan new method existing rap 
watch task agenda execution time suggest improvements appropriate 
transformational planning approach promising purpose 
transformational planner call different procedures suggest fixes task agenda library fixed transformations call domain experts route planners invoke general purpose problem solver 
transformational planning paradigm includes invocation problem solvers types appropriate build new raps rap methods 
single transformational planner may required top tier complete robot control system 
related reactive planning situated robot control embedded systems focus flurry research artificial intelligence years bodies require particular attention 
situated machines done brooks agre chapman 
second robot control system design rosenschein third procedural reasoning system lansky schoppers 
authors claim solving problems rap system appropriate save discussion rap system 
discussing robot control systems particularly interesting cognitive science books mention 
new book suchman term situation driven execution derived second older book relatively speaking miller presents idea encapsulating behaviors rap 
situated action coping behavior suchman argues actions plans language meaningless surrounding context 
context may explicit implied way sense sequences referents 
instance hard imagine instruction push lights inward orient logo upwards sense apollo dn am writing little front panel rotated quarter turn machine stood side 
panel little lights push turns just instruction says 
point actions plans specified detail avoid need interpret context execution time 
actions plans situated meaning way interpreted 
rap system seen attempt create situation interpreter sketchy plans 
detailed rap behavior hinges context raps find behavior described plan changes situation situation 
comparison pushed far suchman book oriented human machine interaction plan action representation 
book miller oriented plan action representation 
introduce idea unit 
stands test operate test exit unit represents behavior 
person wants achieve goal appropriate unit activated carry 
unit tests current situation chooses operation perform 
operation complete unit tests world sure goal achieved unit exits 
goal satisfied unit starts 
basic algorithm similar rap system miller discuss ways perform wide variety cognitive functions 
unfortunately authors go algorithm detail language representing units 
thesis aimed exactly problems 
books interesting help put ideas situated havior focus building actual robot control systems relevant rap system 
machines representation approach robot control discussed ai literature building action decision procedures hardware 
main ideas driving approach 
behavior appears complex surface arise simple interacting processes 
second central representation world necessary tasks world keep track 
illustrate ideas control systems built real hardware simulated real hardware enforces constraint internal state 
brooks implements ideas subsumption architecture control real robots moving world brooks brooks 
control system consists distinct layers hardware behaviors 
bottom level behavior move away obstacle near higher level behavior move forward blocked look reachable location move 
higher levels act influencing behavior lower levels high level behaviors subsume lower level behaviors 
example move forward bias robot motors move forward lower level avoid obstacles continue turn robot away stationary moving obstructions 
important aspects behaviors built hardware behavior maintains state required carry local hardwired goals 
control structure explicit plan internal model world brooks 
chapman agre argue similar model robot control call situated activity chapman agre 
implementation model pengi system explicit layered structure consists visual routine processor decision network built simple logic gates agre chapman 
information world comes visual processor supplies input decision network 
decision network takes inputs selects actions execute world 
decision network contains state best thought simply switch inputs actions 
world changes inputs network change different actions switched 
system exhibits behaviors actions stepped response changes world description behaviors explicitly represented hardware 
interesting aspect pengi idea indexical functional cues world 
visual routine processor structured return facts world form bee front block left 
referents facts change moment moment notion fixed designators objects world 
indexical functional cues item sensor names assumed rap memory 
item sensor thought equally drum drum left 
long term memory item taken granted explicitly sorted rap system 
common features approaches robot control behaviors hand crafted hardware 
explicit internal representation world 
explicit representation current goals 
specific objects world 
rap system different respect features 
rap system explicitly generates internal model world raps tasks specific items world 
argued chapter processes go hand hand 
model world required remember things world assumes sensors attach fixed designators objects world memory required hold descriptions item identified sanhe object encounter encounter 
rap system builds descriptions items world reasons 
brook sian robots totally indexical functional machines remember recognize items 
rap system represents intentions explicit tasks execution agenda 
agenda represents plan supplies avenue communication planning acting 
ability analyze alter ones behavior important part intelligent action requires manipulating representation intends 
state hard wired decision network possible goals behaviors built 
place deliberation machine 
rap system deliberate designed support process see section 
rap system brooks robots pengi really appropriate currently act different levels 
pengi robots behaviors rap system low level robot controller looks hard wired machine 
brooks chapman agre argue approach necessary demand confronted 
systems interesting agree complex behavior emerges interaction simple processes world representation obviously uses hand crafted hardware believe rap system addresses important issues connection symbolic computation hard wired behavior ignore 
hand brooks real working robots don 
virtual machines approach building robot control systems suggested kaelbling similar machines discussed 
idea specify goals achieved robot methods achievement language called 
specification compiled language called ex compiled virtual machine 
machine maps inputs sensors actions effectors guaranteed response time rosenschein kaelbling internal state 
complete robot control system hinted kaelbling language deals goals direct effectors sensing goals assumed implemented unspecified way 
furthermore virtual machine description sense robot goals assumed fixed advance 
approach similar brooks chapman agre additional description machine 
rap language appears support behaviors encoded language properties defined machine hard pin assumptions implicit sensing compile complete accurate model world need sensing actions specified operators 
sensing system generate arbitrary plans data structures routes world machine needing ask 
machine descriptions refer specific items world situation dependent routes plans having specify required sensory information comes 
kaelbling address sensing issues raised discussion rap memory chapter discussion rap coding strategies chapter 
sensing issues significant effect shaping rap system hard compare systems discuss sensing 
execution system literature useful comparisons possible 
schoppers presents approach robot control uncertain worlds comes close idea building virtual machine 
gives procedure constructing plas achieve goals autonomous processes changing world initial world state deter mined 
universal plan decision graph maps current world state best action execute 
actions execute successfully alter world state new state initiates step goal 
fact world state changes reason appropriate action initiated get things moving back goal 
universal plan similar concept ma chine designed specifically achieve fixed set tasks 
schoppers address problem sensing world state 
procedural reasoning system procedural reasoning system prs georgeff georgeff re quires special mention similar rap 
prs consists pieces database beliefs world state system 
library plans called kas 
graph intentions 
interpreter 
ka method carrying goal intention goal coupled ka achieving 
intention somewhat similar rap defined task 
prs interpreter proceeds selecting intention intention graph moving step ka 
step requires invoking ka encountered new intention created added intention graph 
step ka fails ka abandoned interpreter tries ka intention 
ka applicable intention fails 
ka tried intention 
terminology superficial internal structuring execution intention similar execution task rap system 
significant difference prs rap system way algo rithms implemented 
rap system fixed defined algorithm execution task 
prs uses meta kas control step execution intention allowing ka processed different way 
consider aspects task execution selecting task execute determining task complete 
rap system schedules task execution heuristics pre sented section 
heuristics depend task priority duration deadlines task type type tasks agenda 
rap system uses simple defined procedure determining task complete task succeed clause satisfied 
prs system handles intention scheduling completion quite differently 
prs belief database holds just assertions state world assertions system current intentions 
instance tions state intentions active intentions finished running instantiated ka intentions satisfied 
additional state available examination prs support meta kas manipulate internal intentions intention scheduling checking intention satisfaction 
new intention generated step executing existence asserted belief database activates meta kas determine placed current intention graph 
meta kas may arbitrary computation deciding new intention go 
similarly completes assertion effect belief database meta kas activated decide done supposed 
meta kas check arbitrary context dependent computation 
georgeff argues meta kas natural way integrate planning acting architecture extent correct 
prs behavior encoded meta kas hard separate 
intention scheduling satisfaction depend existence appropriate meta kas commitment algorithm processes absence applicable meta kas 
removing meta kas system ps general purpose rule interpreter particular orientation robot task execution 
interesting aspects system tied meta kas unfortunately purposefully left specified differently different tasks different domains 
leaves ps flexible possible hard compare ps rap system stronger commitments 
example rap system commits notion task having succeed clause satisfied task considered complete 
rap useful planning operator planner assume task keep trying clause satisfied 
furthermore information needed characterize rap planning operator explicitly represented rap 
prs intentions satisfied completed ka meta ka set meta kas checked results 
kas meta kas defined independently influenced meta kas hard say inferred world intention completes 
way intentions kas interact world defined meta kas control 
final point sensory data processing touched briefly papers prs apparently controlled invocation kas 
sensors assumed return completely reliable predicates asserted directly belief database return unreliable information processed 
processing done initiation kas messages generated sensors examples processing 
summary prs architecture interesting way control rule invocation looks similar rap system level 
prs robot control issues claim rule invocation job 
behavior prs controlled robot confronted uncertainty errors interruptions depends entirely meta ka library contents library assumed domain dependent 
prs claims architecture supports planning execution commit methodology 
summary reactive execution current reactive execution systems breaks basic areas hard wiring robot behaviors integrating planning execution single architecture 
areas generating interesting results covers quite ground rap system 
rap system level machine builders reached claim representation useful rap system shows grapple uncertainty low level failure 
rap system stretch downward realistic hardware connection ideas machine building 
integrating planning execution important rap system reaches upward include planning system 
planner rap interpreter share information clear merging planning action single homogeneous architecture correct route follow 
rap system designed fulfil goals carry tasks supervision complex uncertain world provide firm basis planning research 
goal supported committing rap system simple fixed control structure uniform action representation 
features give raps defined semantics planner reason 
rap representation control blurred general architecture raps lose claim representation action system meaningful 
final comment odd reactive execution systems described literature problems gathering information world 
rap system commitment gathering sensory data result deliberate action profound influence way raps represented implies information missing incorrect 
systems assume complete correct information world cutting corners cut 
tiered robot control system discussed previously chapter rap system seen interface processes action deliberation 
real action necessarily requires multiple concurrent behaviors tightly coupled fast sensory feedback 
contrast deliberation requires tinhe look consider effects alternate courses action 
robot react quickly cope changes world think things avoid making stupid mistakes 
way reconcile conflicting requirements package simple reactions larger actions 
deliberation actions efficient detail worry response tinhe critical situations held deliberation passed necessary 
rap system designed package execute actions exactly way 
rap system uses rap definitions describe actions 
execution tinhe rap defined actions tasks strong commitments respect task execution 
terminology ideas discussion developed long enjoyable discussions steve hanks 
discusses ideas different angle hanks 
action choices situation encountered 
looking 
execution decisions memory past sensory data sensors aware sanhe tinhe 
memory inevitably contain incorrect date information task definitions take fact account 
task may require attempts carry packaged actions success fully 
uncertainty world situation may cause inappropriate initial method choices interference agents may cause appropriate methods fail abandoned 
execution system respond situation changes interrupting pursuit task favor 
opportunities emergencies dealt effectively allowing system change focus attention situation demands 
experiments examples thesis show commitments em bodied rap system enable tasks succeed complex dynamic worlds 
separating action deliberation retaining ability cope local situation rap system opens new avenues investigation 
pursue methods low level robot control involve cooperating concurrent processes rap system generate structured behavior switching process sets 
separate requirements planning raised new raps rap methods generated rap task agenda monitored catch problems fix inefficiencies evident execution time 
remains seen single planning paradigm applied problems collection paradigms appropriate 
rap system reliance situation driven execution planning shows projection requirement action 
done 
rap system considered com plete proven tiered robot control system constructed 
am confident rap notion primitive action implemented raps planning operators proof requires demonstration 
ability current implementation control simulated robot complex dy namic world encouraging start 
done characterizing codifying sensing coping strategies discussed chapter 
am confident done task descriptions appear ad hoc structure little reason believe sensing strategies different 
coping sensing strategies codified need rap system increases 
structure placed interaction world harder construct courses action advance important pull specific behaviors situation demands 
believe act able plan clear plan able act 
bibliography agre chapman philip agre david chapman 
pengi imple mentation theory activity 
sixth artificial seattle wa july 
aaai 
allen bajcsy peter allen bajcsy 
object recognition vision touch 
artificial los angeles ca august 
ijcai 
arbib 
perceptual structures distributed motor control 
brooks editor physiology nervous system ii 

larkin ronald arkin 
motor schema navigation mobile robot approach programming behavior 
robotics atd raleigh nc march 
ieee 
larkin ronald arkin 
neuroscience motion application schema theory mobile robotics 
arbib editors coor models ad robots 
plenum publishing 
birnbaum lawrence birnbaum 
integrated processing planning standing 
technical report yaleu csd rr computer science depart ment yale university december 
bowen kang james bowen kang 
conflict resolution fuzzy forward chaining production systems 
artificial st paul mn august 
aaai 
brooks rodney brooks 
symbolic error analysis robot planning 
ai memo mit september 
brooks rodney brooks 
model dimensional interpretations dimensional images 
ieee pami 
brooks rodney brooks 
robust layered control system mobile robot 
ieee robotics ad ra march 
brooks rodney brooks 
intelligence representation 
workshop artificial ccc mit june 
ct farrell kant martin 
pro ram mi expert opss 
addison wesley reading ma 
chapman agre david chapman philip agre 
reasoning emergent concrete activity 
workshop ad actions portland oregon june 
chapman david chapman 
planning conjunctive goals 
technical report tr mit artificial intelligence laboratory 
charniak mcdermott eugene charniak drew mcdermott 
tio artificial 
addison wesley publishing 
dean boddy thomas dean mark boddy 
analysis time dependent planning 
artificial st paul mn august 
aaai 
dean kanazawa thomas dean kanazawa 
probabilistic tem reasoning 
seventh national artificial st paul mn august 
aaai 
dean thomas dean james firby david miller 

technical report yaleu csd rr computer science department yale university july 
dean thomas dean james firby david miller 
hierarchical planning involving deadlines travel time resources 
august 
dean thomas dean 
temporal imagery approach reasoning time planning problem solving 
technical report yaleu csd rr computer science department yale university october 
doyle richard doyle david atkinson rajkumar 
gener ating perception requests expectations verify execution plans 
fifth artificial philadelphia pa august 
aaai 
fickas stephen fickas 
automating transformational development software 
ieee transactions software engineering se 
fikes nilsson fikes nilsson 
strips new approach application proving problem solving 
artificial 
firby hanks james firby steve hanks 
simulator mobile robot planning 
workshop austin tx december 
darpa 
firby hanks james firby steve hanks 
simulator manual 
technical report yaleu csd rr computer science department yale university november 
firby mcdermott james firby drew mcdermott 
representing solving temporal planning problems 
cercone mccalla editors knowledge frontier 
springer verlag new york ny 
fox mark fox 
observations role constraints problem solving 
sixth artificial montreal quebec may 

genesereth nilsson michael genesereth nils nilsson 
logical artificial 
morgan kaufman publishing los altos ca 
georgeff michael amy lansky marcel schoppers 
reasoning planning dynamic domains experiment mobile robot 
tech note ai center sri international 
michael 
embedded reasoning planning system 
australian artificial intelligence center 
gini maria gini rajkumar sharon gather marc richard smith 
symbolic reasoning basis automatic error recovery robots 
technical report tr university minnesota july 
hammond kristian john hammond 
case planning integrated theory planning learning 
technical report yaleu csd rr computer science department yale university october 
hanks mcdermott steve hanks drew mcdermott 
nonmonotonic logic temporal projection 
artificial intelligence 
hanks steve hanks 
representing computing temporally scoped beliefs 
seventh national conference artificial intelligence st paul mn august 
aaai 
hanks steven hanks 
heuristic plan projection evaluation 
phd thesis computer science department yale university 
hayes roth hayes roth hayes roth hayes roth 
cognitive model planning 
science 
hendler james hendler james 
model reaction planning dynamic environments 
knowledge planning workshop austin tx december 
darpa 
john 
prevention techniques temporal planner 
seventh national artificial intelligence st paul mn august 
aaai 
horswill brooks ian douglas rodney allen brooks 
situ ated vision dynamic world chasing objects 
seventh national artificial intelligence st paul mn august 
aaai 
joslin david joslin david john roach 
analysis conjunctive goal planning 
technical report tr virginia tech 
kaelbling leslie pack kaelbling 
architecture intelligent reactive sys tems 
wor shop ad plas oregon june 
kaelbling leslie pack kaelbling 
rex programmer manual 
technical note sri international may 
kaelbling leslie pack kaelbling 
goals parallel program specifications 
artificial st paul mn august 
aaai 
lifschitz vladimir lifschitz 
pointwise circumscription 
fifth national artificial philadelphia pa august 
aaai 
linden theodore linden 
transformational synthesis applied alv mis sion planning 
wor shop austin tx december 
darpa 
lowe david lowe 
dimensional object recognition single dimensional images 
artificial march 
mccalla mccalla reid schneider 
plan creation plan execution knowledge acquisition dynamic microworld 
jour ma studies 
mccarthy hayes mccarthy hayes 
sonic philosophical prob lems standpoint artificial intelligence 
meltzer editors 
edinburgh university press edinburgh uk 
mccarthy john mccarthy 
circumscription form non monotonic rea 
bonnie lynn webber nils nilsson editors artificial 
tioga publishing palo alto ca 
mcdermott doyle drew mcdermott jon doyle 
non monotonic logic artificial 
mcdermott forgy mcdermott forgy 
production system con resolution strategies 
waterman hayes roth editors pattern directed 
academic press 
mcdermott drew mcdermott 
flexibility efficiency computer program designing circuits 
technical report mit ai laboratory 
mcdermott drew mcdermott 
planning acting 
cognitive science 
mcdermott sis 
ieee 
mcdermott cesses drew mcdermott 
contexts data dependencies transactions pattern recognition machine intelligence pami drew mcdermott 
temporal logic reasoning pro plans 
cognitive science 
mcdermott drew mcdermott 
reasoning plans 
jerry hobbs robert moore editors formal theories commonsense world 
ablex publishing 
miller miller 
plans structure behavior 
holt rinehart winston new york ny 
miller david miller 
planning search simulations 
technical report yaleu csd rr yale university department computer science 
nilsson nils nilsson 
principles artificial intelligence 
tioga publishing palo alto ca 
payton payton 
architecture reflexive autonomous vehicle con trol 
international conference robotics automation san francisco ca 
ieee 
reiter raymond reiter 
logic default reasoning 
artificial intelligence 
rosenschein kaelbling stanley rosenschein leslie pack kaelbling 
synthesis digital machines provable epistemic properties 
theoretical aspects reasoning knowledge asilomar ca 
sacerdoti earl sacerdoti 
structure plans behavior 
technical note stanford research institute 
schank abelson roger schank robert abelson 
scripts plans goals ad 
lawrence erlbaum associates 
schoppers schoppers 
composing decomposing universal plans 
research note advanced decision systems 
schoppers schoppers 
universal plans reactive robots environments 
artificial milan italy august 
ijcai 
shoham yoav shoham 
reasoning change time causation standpoint artificial intelligence 
technical report yaleu csd rr computer science department yale university december 
reid 
theory debugging plans interpretations 
artificial st paul mn august 
aaai 
slack miller marc slack david miller 
planning time space dynamic domains 
artificial milan italy august 
ijcai 
suchman lucy suchman 
plates atd situated problem 
cambridge university press 
sussman gerald sussman 
computer model skill 
elsevier new york ny 
austin 
generating project networks 
fifth joint artificial 
ijcai 
ullman ullman 
visual routines 
cognition 
vere steven vere 
planning time windows durations activities goals 
ieee ad 
vere steven vere 
temporal scope assertions window cutoff 
artificial los angeles ca august 
ijcai 
wilensky robert wilensky 
planning computational approach uma 
addison wesley publishing reading ma 
wilkins david wilkins 
recovering execution errors sipe 
comp february 
wilkins david wilkins 
practical planning classical ai paradigm 
morgan kaufmann publishers san mateo california 
appendix rap memory functions appendix describes functions interface rap memory 
functions hardware interface update memory reflect changes world 
functions appear explicitly query function called rap interpreter 
information included interested study rap memory way interacts simulated delivery truck hardware closely 
declarations rap memory assertion types memory declared 
plain propositions declared form declare memory proposition name declares assertions start name legal memory 
plain tions treated fluents see asserted removed explicitly erasing 
item property assertions declared form declare memory property name default says assertions ame treated item properties meaning treated see section 
default function generate value property query time assertion exists 
default function takes arguments memory structure queried index property needing default 
default function defun unknown default memory property index ignore memory property index unknown function including functions memory queries 
default functions alter memory 
user functions declared memory queries form declare memory function name function queries forms name function calls function 
memory structures rap memory system designed support multiple instances memory struc tures 
global declarations memory access functions take mem ory structure argument 
memory structures created function create memory structure memory structure name symbol identification purposes 
memory structures bookkeeping device recording assertions belong user 
assertions assertions rap memory database form memory assert memory proposition memory memory structure assertion assertion 
single proposition declared declare memory proposition declare memory property asserted tinhe 
assertion contain variables 
assertions erased rap memory database memory erase memory clause memory structure assertions erased clause assertion prefix 
assertion database sanhe prefix clause argument erased 
example memory erase mem color item red erases single assertion item red memory erase mem color erases assertion color database 
function seldom robot hardware item properties single valued fluents old values overwritten automatically 
queries queries rap memory form memory query memory binding environment query boolean memory memory structure checked binding environment struc ture record free variable bindings query query checked database 
binding environments created function create binding environment binding environment takes arguments returns empty structure 
structure ways 
memory query calls 
free variable query bound call binding recorded environment 
environment query bindings holds stay effect query 
example suppose query memory query memory env color item color process satisfying color bound red environment env hold binding 
query memory query memory env color item color succeed item red color bound envi ronment 
binding environment asked current value bindings contains 
form binding value binding environment variable value purpose returns current value bound variable 
example binding value env color return red 
query language queries appear memory query constructed rap query lan guage 
language consists declared propositions functions predefined functions connectives special form believe 
base query consists single proposition single query function 
examples base queries color item red color item red color red functions predefined defined numbers defined symbols strings 
base queries tied obvious way 
connectives act boolean counterparts query success failure true false arguments 
query succeeds constituents succeeds succeeds constituents succeeds succeeds constituent query fails 
constituents connective valid query including connective 
example color item red size item big contains item item true color item red color item blue color item red size item big final query language construct believe 
basic form believe believe proposition time interval proposition single non nested user declared proposition time interval interval time 
semantics construct different time interval takes different forms 
time interval bound specified integer variable bound integer believe succeeds assertion matching proposition specified amount time 
example believe color item red believe color item red time behave exactly assuming time bound 
succeed item color asserted red time units 
query fail contradicting assertion time interval 
assertion interval default value proposition matches proposition query succeed 
tinhe interval believe form unbound variable form behaves slightly differently form query asking matching assertion 
assertion matching proposition exists database believe succeed tinhe interval variable bound tinhe assertion 
example color item asserted blue tinhe units ago query believe color item color time succeed color bound blue time bound 
query processing query checked database processed clause variables bound way 
means little bit care required sure variables bound supposed 
example query believe capacity item size item capacity similar query believe capacity item size size bound description matching description matching done automatically memory system see section memory notified new item descriptions introduced change matching tried 
functions section interface robot hardware rap memory give memory notifications 
functions specialized donhain examples thesis 
particular expectation sets assumed indexed item class location immediately accessible sensors 
declaring comparator functions memory fixed algorithm comparing item descriptions context big difference descriptions merged 
fore comparator functions memory declared advance forms declare indistinct class class default comparator declare class comparator class location comparator declares default comparator function items type class second declares specific function items class particular 
comparator function takes arguments memory structure items compared 
item internally defined data structure access functions memory item class item memory item location item memory item properties item item class item location list item properties returns class item second returns item location third returns properties asserted item 
item property looks just memory assertion properties defined declare memory property returned 
comparator function generate integer value scoring match items 
higher score means better match 
comparator function robot deliver truck domain defun default item comparator memory item ignore memory memory item properties props memory item properties item loop score result score prop car member equal item properties props null prop eq unknown eq prop unknown setf score fx score function scores property items long value property unknown 
manipulating items expectation sets new item detected assigned new sensor name memory told function introduce new item memory amc class memory argument memory structure item stored sensor name name assigned object sensors class location specify expectation set item placed 
function informs new item accessible assigns name puts local model associates appropriate expectation set 
functions give information item match ing proceed correctly 
tells item moved expectation set second tells sible items expectation set detected 
functions take new item location memory sensor name location expectation set fix cardinality memory locations arguments obvious meaning class location expectation set effected 
function memory know expectation set inaccessible new layer pushed 
simulated world moving location causes happen expectation set single call expire active expectation sets 
call expectation set expire memory instructs expectation sets inaccessible 
delaying item matching situations sensors return messages item time 
cases appropriate property assertions item matching takes place 
item matching delayed temporarily delayed item matching 
body change memory scope form result item matching form exited 
appendix robot delivery truck domain appendix included give interested detailed picture simulated delivery truck donhain 
specific donhain outlined im plemented extensible simulator construction tool described firby hanks 
basically simulation consists delivery truck moves graph graph nodes locations graph edges roads 
truck moves location encounter interact various items 
behavior items world varied extensively appendix discusses experiments chapter 
appendix give information recreate experiments exactly give feeling way donhain works 
chapter section discuss aspects delivery truck donhain 
delivery truck robot delivery truck executor access simulated world 
truck responds external commands returns sensory data surroundings 
move location cargo bays loading arms vision sensor 
loading arms manipulate items near truck items carried location cargo bays 
sensor determine items current location new items arrive 
examine particular items detail 
example truck arrive new location scan area sensor discover fuel container pick container examine determine fuel inside 
truck arms arml capacity dropping frequency arm capacity dropping frequency 
truck cargo bays capacity bay capacity 
weapon bay weapon mounted fuel bay fuel poured truck 
primitive commands control delivery truck described 
arm commands commands control truck arms frequently domain 
commands refer place item arm bay external means outside truck 
arm commands may fail described 
arm move arm place move arm place 
command fail message arm cant find means requested place inaccessible 
arm grasp arm item arm item pick 
command fail messages arm full arm arm dropped arm cant grasp arm interference 
occurs arms item grasped second means tool required grasp item 
arm arm item arm holding item put 
com mand fail messages arm holding container full 
means place currently holding arm full hold item put 
arm pour arm vessel pour contents vessel item arm 
command transfering liquids containers 
possible failure arm holding 
arm arm vessel fill vessel item arm 
com mand moves liquids 
possible failures arm holding arm 
occurs arm positioned vessel holding liquid 
arm toggle arm item arm item turn 
command active items act weapon fired toggling 
command fail messages arm arm cant toggle 
second occurs item broken active 
arm commands manipulate items world 
arm move command move loading arms item move cargo bays containers 
arm grasp arm commands pick items near arm put items arm holding 
move fuel drum outside truck cargo bay commands issued arm move arm external arm move arm fuel drum arm grasp arm fuel drum arm move arm bay arm arm fuel drum hove arm outside truck hove arm drum pick drum hove arm cargo bay put fuel drum cargo bay arm pour arm commands move liquids con arm toggle command start items specific functions 
example way create ice cubes arm grasp arm move arm move arm ur arm pitcher arm water tank arm pitcher arm ice machine arm pitcher arm toggle arml ice machine pickup pitcher hove arm water tank fill pitcher firm tank hove arm ice machine fill ice machine firm pitcher turn ice machine movement commands primitive commands move truck truck turn direction turn truck face direction 
truck speed speed set truck speed speed 
truck move facing road travel 
command fail message truck means occured means simulation experiments chapter 
truck turn command point truck particular direction 
directions corresponding major compass points location may road leading directions 
truck move com mand send truck road 
truck reaches road goes fine road sonhe kind occurs 
roads truck roll going fast get stuck mud raining run gas encounter enemy troops 
sensory commands truck sensor called eye commands control eye examine item get sonhe sensory data item accessible 
command fail message eye cant find 
eye scan place scan place return accessible items 
commands generates obj ect seen road seen sensor messages 
eye monitor class notice item type class accessible eye class looking items type class eye scan command returns items location imme outside truck inside cargo bays 
eye examine command looks closely single item reports back detailed information type liquid container holds bullets gun machine running idle forth 
eye monitor command watch particular class item arrive current location 
command sensor notice item class appears 
truck traversing road encounters item sensor scanning 
example travel road looking fuel drum commands issued eye monitor fuel drum start looking drums truck turn north turn north road truck speed fast set truck speed fast truck move fast set road executing set truck location road fuel drums road fuel drums seen 
items world aspects items world manipulated truck arms examined truck sensors 
item manipulations de scribed main text section discusses item sensing 
item sensed sensory messages generated 
messages contain infor mation hardware interface update rap memory 
sensing commands eye scan eye examine 
eye scan command generates obj ect seen road seen messages eye examine command produces messages 
item characteristics items experiments box box class box vessel size capacity 
normally contains units treated liquid simulation 
exam produces vessel capacity sensor messages 
fuel drum drum class fuel drum vessel size capacity 
normally contains units liquid fuel 
examination produces vessel capacity messages 
rock simple item class rock size 
examination produces color messages 
weapon complex item class gun weapon size 
capacity hold units arm toggled fires shots local enemy units 
shot consumes unit chance making enemy unit go away 
weapon reloaded pouring new 
examination produces shots left messages 
gun tool simple item class gun tool size 
held weapon grasped truck arm 
enemy unit item class enemy unit 
manipulated shot 
sensory information items various sensory messages produced items object seen location sensor name class generated eye scan primitive ac tions 
states item sensor class currently accessible location 
location corresponds location scanned 
vessel sensor name liquid type amount states item holds amount liquid 
shots left sensor name number states gun sensor holds certain amount ammunition 
capacity sensor name size states item hold amount liquid 
color sensor name color states item color 
road seen direction road name generated eye scan primitive actions 
states road particular direction 
new location location generated truck move primitive actions 
states truck arrived location 
messages means getting information world features truck directly accessible 
directly accessible truck features speed fuel level current tinhe 
memory interface section discusses interfacing simulator rap memory 
described section hardware interface update rap memory response information robot sensors effectors 
section describes way interface constructed gives examples functions process information primitive actions see figures 
information available processed consists sensor primitive action failure messages described 
section briefly outlines contents rap memory altered response messages 
types item indistinct recognized en counter encounter fuel drums boxes rocks 
match descriptions items expectation sets default item competitor function discussed appendix 
item types declared declare indistinct class fuel drum default item declare indistinct class box default item declare indistinct class rock default item memory system declarations 
default function declare memory property class declare memory property holding declare memory property location declare memory property capacity declare memory property color declare memory property liquid held declare memory property quantity held declare memory property tool needed item properties kept track listed 
unknown default unknown default unknown default unknown default unknown default unknown default unknown default false default unknown default function described appendix false default defun unknown default memory property index ignore memory property index false addition item properties rap memory keeps track various features delivery truck 
features declared follows declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition arm place arm arm holding arm interference small full declare memory proposition direction declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition declare memory proposition eye examined eye scanned arm examined examined move scanned move examined toggle examined pour monitoring truck location truck heading truck fuel truck speed truck status truck time time arrived hardware interface translates sensory messages action results memory propositions defined 
raps queries refer memory propositions sensory messages 
