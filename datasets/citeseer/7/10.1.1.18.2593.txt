flute flexible real time data management architecture guarantees don kang sang son john stankovic abdelzaher department computer science university virginia son stankovic cs virginia edu june efficient real time data management increasingly important real time applications sophisticated data intensive 
data intensive real time applications online stock trading agile manufacturing sensor data fusion telecommunication network management essential execute transactions deadlines fresh temporally consistent sensor data reflect current real world states 
challenging meet fundamental requirement due potentially time varying workloads data access patterns applications 
user service requests sensor updates compete system resources making difficult achieve guaranteed real time database services terms deadline ratio data freshness 
novel real time data management architecture includes feedback control admission control flexible update schemes enforce deadline ratio admitted user transactions certain threshold 
time maintain data freshness presence unpredictable workloads access patterns 
simulation study illustrate applicability approach showing stringent performance specifications satisfied wide range workloads access patterns 
show approach significantly improve performance compared baselines 
real time applications sophisticated data intensive efficient real time data management increasingly important 
data intensive real time applications online stock trading agile manufacturing sensor data fusion telecommunication network management benefit database support efficient data access indexing correctness concurrent transaction executions 
conventional non real time databases essential real time databases execute transactions deadlines current market manufacturing network status changes fresh temporally consistent sensor data reflect current real world states current stock prices automated process state network status 
current databases poor supporting timing constraints data temporal consistency 
perform applications 
example lockheed commercial database system military real time applications implemented real time database system called 
polyhedra uk nec japan norway companies implemented real time databases various application areas supported part nsf eia ccr 
restrict notion sensor data data provided physical sensors 
consider broad meaning sensor data 
data item value reflects time varying real world status considered sensor data item 
similar reasons 
need real time data services demonstrated clear real time database systems initial attempts solved problems 
essential hard process real time transactions deadlines fresh sensor data 
generally transaction execution time data access patterns time varying 
example transactions stock trading may decide sell buy stock item considering current market state 
decision process transactions may read varying sets stock prices composite indexes necessary 
transactions rolled back restarted due data resource conflicts 
transaction timeliness data freshness pose conflicting requirements preferring user transactions updates deadline ratio improved data freshness reduced 
alternatively freshness increases updates receive higher priority 
address problem novel real time data management architecture called flute flexible updates timely transaction execution achieve ratio freshness guarantees presence unpredictable workloads data access patterns 
flute applies feedback ratio control flexible update admission control schemes 
novel notions real time qod quality data flexible validity intervals generally applicable real time database applications 
flute freshness traded range specified qod improve ratio necessary 
trade data item maintained fresh terms flexible validity intervals 
best knowledge approach guarantee ratio data freshness arbitrarily outdated data access 
simulation study provide stringent performance specifications illustrate applicability approach 
stringent requires ratio freshness trade 
performance evaluation results show flute achieve required ratio data freshness guarantees wide range workloads access patterns 
flute provide choice data freshness throughput considering specific application semantics violating specified ratio 
contrast baseline approaches fail support specified ratio 
rest organized follows 
section describes real time database model 
flexible update scheme section 
section real time data management architecture described 
section presents performance evaluation results 
related discussed section 
section concludes discusses 
real time database model section discuss basic database model real time transaction types deadline semantics considered 
deadline ratio defined terms average transient metrics 
database model transaction types consider main memory database model cpu considered main system resource 
main memory databases increasingly applied real time data management stock trading ecommerce voice data networking due decreasing main memory cost relatively high performance 
approach transactions classified user transactions sensor updates 
continuously changing real world states current sensor values captured periodic updates 
user transactions execute arithmetic logical operations current real world states reflected real time database take action necessary 
example process control transactions agile manufacturing may issue control commands considering current process state periodically updated sensor transactions 
approach user transaction certain deadline finish process control deadline 
sensor transaction deadline set corresponding update period 
apply firm deadline semantics transactions add value system finish deadlines 
transaction aborted deadline firm deadline semantics common real time database applications 
example late commit process control stock trading transaction adversely affect product quality profit due possible changes process market state 
database workloads data access patterns time varying discussed assume deadline misses inevitable single deadline incur catastrophic consequence 
deadline misses considered tolerable exceed threshold specified database administrator dba 
deadline ratio admitted transactions deadline ratio defined theta tardy tardy timely tardy timely represent number transactions missed deadlines number transactions committed deadlines respectively 
dba specify tolerable ratio threshold specific real time database application 
ratio threshold ratio time sec definition overshoot settling time real time databases long term performance metrics average ratio sufficient performance specification dynamic systems system performance time varying 
reason transient performance metrics overshoot settling time adopted control theory real time system performance specification shown ffl overshoot worst case system performance transient system state :10.1.1.14.8682:10.1.1.14.8682
considered highest ratio ratio threshold transient state 
ffl settling time time transient ratio overshoot decay reach steady state performance 
steady state ratio ratio threshold 
approach data freshness considered defer discussion section clarity presentation 
flexible sensor update scheme section discuss motivation flexible sensor update scheme 
notion data importance real time databases discussed 
define novel notions qod quality data flexible validity intervals measure maintain freshness sensor data real time database respectively 
definitions qod management scheme discussed detail 
give real time database qos specification describing required ratio qod illustrate applicability flute unpredictable workloads access patterns 
motivation real time databases sensor data classified relative importance popularity stock items 
overload reasonable approach increase update period relatively unimportant sensor data improve user transaction ratio 
example unpopular stock prices updated frequently affecting user transactions 
example aircraft classified hostile friendly 
enemy aircraft positions updated frequently friendly aircraft positions far air base updated frequently complex combat scenario 
case timely defense actions necessary taken expense potentially frequent updates friendly aircraft 
flexible sensor update scheme effective handling potential overloads 
overloaded approach reduce update workload reducing possible conflicts sensor updates user requests 
qod degraded update period sensor data object increased corresponding sensor data item may represent relatively old environmental state 
formal definition qod section data importance apply flexible sensor update scheme availability data importance required 
importance data derived qod management scheme specified corporate user stock trading automated manufacturing particular knowledge real time data semantics specific application 
limited scope qod management scheme able derive importance data 
example access update frequencies monitored sensor data classify sensor data sensor data item considered important access frequency benefit higher update frequency cost 
real time database applications access update ratio may able capture importance data aircraft types potential threat 
consider alternative approach provide general qod management scheme real time database applications assume importance data popularity stock items relative importance manufacturing steps regarding final product quality aircraft types potential threat available corporate users financial trading factory automation defense department 
reasonable assumption corporate users real time database developers usually better understanding application specific data semantics approach support required qod 
allowing corporate users re specify required qod qod management scheme directly reflect application specific qod requirements 
users specify range acceptable qod 
overload qod degraded specified range improve ratio 
system operation maintenance purposes dba sets qod parameters meet qod requirements specified user discussed section 
sharply contrasts current approaches temporal consistency management real time databases provide users interface specify required qod adaptive potential overload 
task period adjustment studied improve ratio real time non database systems data freshness considered 
existing real time database consider adjustment update periods regardless system behavior provide notion flexible validity intervals discussed section maintain freshness possible qod degradation 
quality data measure current freshness sensor data real time databases define notion qod follows 
notion qod introduced sensor update frequency relaxed reduce ratio 
definitions qod directly applicable flute 
sensor data objects real time database define current qod qod theta min new min minimum update period qod degradation new new update period possible qod degradation sensor data object database 
qod degradation qod new min sensor data object database 
qod decreases new increases 
metric measure current qod sensor data compared minimum sensor update periods real time databases 
flexible validity intervals real time databases validity intervals maintain temporal consistency real world states sensor data database 
sensor data object considered fresh temporally consistent current time gamma timestamp avi avi absolute validity interval update period set half avi support sensor data freshness data temporal consistency violated set avi 
shown updated time update may commit time theta case stale theta updates commit deadlines corresponding update period avoided setting theta avi 
gamma gamma pi pi gamma gamma gamma gamma periodic updates sensor data object notion absolute validity intervals unnecessarily strict inflexible sensor data objects updated minimum update periods regardless relative importance current system status 
common approach freshness management real time databases cost effective 
discussed overload important sensor data updated infrequently reduce number deadline misses lead loss profit reduced product quality delayed defense actions 
maintain freshness possible qod degradation define novel notion flexible validity intervals vi 
initially vi avi data 
overload update period important data object relaxed 
qod degradation set vi new theta new real time databases may include derived data stock composite indexes 
consider derived data management relative validity intervals 
considered fresh current time gamma timestamp vi new qod degradation 
freshness enforced updating half vi new 
qod management approach dba set qod parameters consider corporate user qod requirements fixed qod max step size follows 
ffl fixed qod certain fraction ranging gamma entire sensor data database user require fixed qod qod degradation 
set data database called qod degraded overload 
fixed qod qod degradation allowed contrast fixed qod qod degraded data necessary 
users select appropriate value considering specific real time database application semantics 
ffl max fixed qod users require avoid indefinite qod degradation specifying max 
sensor data object new max theta min qod degradation 
fixed qod max determine worst possible qod 
example fixed qod max lowest possible qod theta fixed qod gamma fixed qod max theta gamma 
case sensor data object current update period new theta min ffl step size users specify step size require graceful qod degradation 
example step size new theta qod degradation 
update period increased consecutive sampling periods necessary avoid sudden qod degradation 
providing interface specify required qod different qod requirements various real time database applications online stock trading agile manufacturing set requested users 
qos specification illustrate applicability approach give stringent qos specification called qos spec follows ffl ratio average ratio 
overshoot transient ratio exceed theta 
settling time shorter sec 
sampling period feedback control set sec 
control theory overshoot settling time usually trade relation 
hard possible optimize overshoot settling time 
consider marginal settling time increase tolerable long corresponding potential ratio overshoot lead loss profit reduced product quality low 
ffl qod requirements set max new sensor data object longer theta min potential qod degradation 
set step size 
new theta qod degradation necessary 
ffl cpu utilization avoid underutilization aim achieve cpu utilization 
maximizing cpu utilization main objective approach achieve higher utilization due dynamic adjustment utilization threshold discussed section 
qod management fix fixed qod consider workload variable directly affect system adaptability flexible sensor updates necessary 
measure possible performance effects apply increasing fixed qod performance evaluation 
way vary qos spec posing stringent performance requirements terms fixed qod 
example fixed qod qod degradation allowed 
case max step size irrelevant 
detailed discussion section 
real time data management architecture shows architecture real time data management 
transaction scheduled ready queues scheduling priority 
transaction handler executes queued transactions 
sampling instant current ratio cpu utilization monitored 
ratio utilization controllers derive required cpu utilization adjustment called du shown considering current performance error ratio overshoot cpu underutilization 
du qod manager adapts sensor update period reduce amount sensor update stream update workload necessary 
admission controller enforces remaining utilization adjustment potential update period adaptation du new detailed discussion system components subsections 
qod manager adapted update period admission controller ready queue update streams user transaction handler cc fm sch 
block queue monitor terminated abort restart blocked preempt dispatched new utilization controller 
ratio utilization utilization threshold manager real time data management architecture performance assurance transaction handler transaction handler provides infrastructure real time database services consists concurrency controller cc freshness manager fm real time scheduler 
concurrency control phase locking high priority pl hp low priority transaction aborted restarted conflict 
pl hp selected free priority inversion 
fm checks freshness accessing data item corresponding avi vi qod degradation 
blocks user transaction accessing data item currently stale 
blocked transaction transferred block queue ready queue soon corresponding update commits 
transactions scheduled ready queues shown 
transaction scheduled ready transaction preempted new transaction arrives queue transactions scheduled edf earliest deadline manner 
provide data freshness guarantee sensor updates scheduled 
user transactions scheduled may argue relatively unfair user transactions compared sensor updates 
user transactions blocked anyway accessing data items currently stale 
consider fairness apply feedback approach control user transaction ratio certain threshold 
sensor update frequency reduced improve user transaction ratio necessary 
user transactions treated completely unfair manner 
maintain data freshness sensor data updated immediately new sensor readings arrive 
avoid possible deadline misses due delay lazy updates demand updates 
sensor data updated demand possible user transactions accessing corresponding data deadlines waiting demand updates 
may stale data arbitrarily old demand update meet deadlines 

monitor deadline ratio cpu utilization 

sampling period compute ratio utilization control signals called du util current ratio utilization respectively 
get required cpu utilization adjustment du minimum du util smooth transition system state 
du perform alternative actions 

du admit user transactions avoid potential underutilization 

du specified ratio violated fixed qod max reached increase sensor update period step size sensor data objects adjust du new du cpu utilization saved qod degradation 
du new possible qod degradation apply admission control newly incoming transactions 
interactions feedback control qod management admission control qod manager admission controller interactions feedback control qod management admission control described 
deadline ratio cpu utilization measured sampling period sec 
required cpu utilization adjustment du derived ratio utilization feedback controllers shown 
detailed discussion feedback control scheme section du cpu utilization increased achieve target utilization admit transactions prevent potential underutilization 
system overloaded required cpu utilization adjustment du cpu utilization reduced current du overload qod degraded fixed qod specified max reached qod managed qod manager actuator control theory perspective 
consider designing separate feedback controller freshness management due potential conflicts ratio freshness requirements lead unstable feedback control system 
transactions utilization control loop ratio threshold ratio control loop measured ratio ratio controller error du utilization controller target utilization error du util measured transactions ratio utilization controllers qod manager entirely enforce du possibly due severe overload admission control applied handle potential overload lead loss profit reduced product quality 
note overload impossible support specified ratio threshold incoming transactions simply admitted 
reasonable control admission improve ratio 
trade requests resubmitted appropriate market status product come back manufacturing unit loop belt 
shown qod degradation applied admission control necessary 
order number dropped transactions due admission control reduced 
incoming transaction admitted system requested cpu utilization currently available 
current cpu utilization estimated adding cpu utilization estimates previously admitted transactions 
generally precise cpu utilization estimates available possible admission controller completely prevent potential overload 
reason approach admission control qod management schemes cooperate enforce required cpu utilization adjustment computed feedback control loop 
feedback control known feedback control effective supporting required performance specification system model includes uncertainties 
target performance achieved dynamically adapting system behavior current performance error measured feedback control loop 
apply extended version feedback control scheduling policy called fc um :10.1.1.14.8682
fc um selected provide certain ratio guarantee cpu unpredictable workloads 
shown fc um employs controllers 
utilization controller saturated utilization ratio controller saturated real time system underutilized ratio result 
ratio utilization controllers required ratio achieved cpu saturation conditions controllers mutually exclusive :10.1.1.14.8682
ratio controller current ratio error difference ratio threshold current ratio measured monitor shown ratio controller computes required cpu utilization adjustment support specified ratio threshold 
specifically sampling instant ratio control signal computed digital pi proportional integral controller kp theta error ki theta error error ratio threshold gamma current ratio 
kp ki stand control gains proportional integral controllers respectively 
control gains chosen combination profiling application mathematically established root locus method matlab avoid ad hoc testing tuning iterations 
profiling tuning feedback controllers discussed section 
utilization controller utilization control loop employed prevent potential underutilization similar fc um :10.1.1.14.8682
avoid trivial solution ratio requirements terms average transient metrics satisfied due underutilization 
sampling instant utilization controller computes utilization control signal du util utilization error difference target utilization utilization measured current sampling instant shown 
utilization control loop uses separate digital pi controller compute du util similar eq 
error target utilization gamma current utilization 
sampling instant set current control signal du minimum du util support smooth transition system state similar :10.1.1.14.8682:10.1.1.14.8682
integral controller proportional controller performance feedback control system improved 
care taken avoid erroneous accumulations control signals integrator lead substantial overshoot 
purpose integrator technique applied turn ratio controller integrator du util current du du util turn integrator utilization controller 
extend utilization controller employing utilization threshold manager follows 
utilization threshold manager complex real time systems schedulable utilization bound unknown pessimistic :10.1.1.14.8682
real time databases utilization bound hard derive exists 
partly database applications usually include unpredictable aborts restarts due data resource conflicts 
relatively simple way handle problem set enforce pessimistic utilization threshold 
lead unnecessary underutilization 
contrast excessively optimistic utilization threshold lead large ratio overshoot 
hard problem decide proper utilization threshold complex real time system real time database 
online approach dynamic adjustment utilization threshold target utilization 
utilization threshold dynamically adjusted considering current real time system behavior follows 
initially utilization threshold set relatively low value init 
deadline observed current sampling instant utilization threshold incremented certain step size resulting utilization threshold 
utilization threshold continuously increased long deadline observed 
utilization threshold switched back initial utilization set point init soon ratio controller takes control 
backoff policy somewhat conservative take approach prevent potential ratio overshoot due relatively slow back 
utilization threshold increased deadline observed sampling instants 
showed potentially time varying utilization threshold closely approximated self adaptive approach 
explore feature increasing init performance evaluation observe corresponding performance implication increase cpu utilization ratio overshoot 
profiling feedback controller tuning support required ratio cpu utilization specified qos spec tuned feedback controllers 
tune digital pi controllers fc um ratio gain gm maxf ratio increase unit load increase derived worst case set support certain ratio guarantee :10.1.1.14.8682
derive gm performance controlled system real time database profiled 
profiling average ratio measured loads increasing 
model worst case incoming transactions admitted system sensor data updated minimum update periods regardless current ratio 
observed gm load increases ratio gain gm applied root locus design method matlab tuning ratio controller meet specified overshoot settling time mathematically established root locus method avoid laborious testing tuning iterations 
support average transient ratio requirements qos spec selected closed loop poles 
feedback control system stable closed loop poles inside unit circle 
transient ratio overshoot decay settling time system enter steady state shown 
root locus design method kp ki determined selected closed loop poles 
corresponding kp ki 
performance evaluation performance evaluation developed real time database simulator models real time database architecture depicted 
system component selectively turned performance evaluation purposes 
main objective performance evaluation show approach support required ratio qod described qos spec presence wide range unpredictable loads access patterns 
section discuss experimental goals describe simulation model 
describing baseline approaches performance comparison purposes performance evaluation results 
simulation model simulation apply workload consisting sensor updates user transactions summarized tables respectively discussed follows 
sensor data updates sensor data objects simulated real time database 
data object periodically updated update stream stream associated estimated execution time eet update period 
eet uniformly distributed range ms ms range ms sec respectively 
generation update actual update execution time varied applying normal distribution normal eet eet stream introduce errors execution time estimates 
total update workload manipulated require approximately total cpu utilization ratio gain analytically derived relying profiling results 
reserved 
utilization controller tuned similar manner 
include utilization controller tuning process due space limitations 
qod degradation applied 
leaves remaining cpu utilization user transaction processing 
real time database applications current real world status usually monitored periodic updates sensor readings stock price trends 
example financial trading tools plus widely financial trading laboratories bridge center financial markets university virginia sloan trading room mit provides periodic stock price updates observe periodic market trends 
plus users select update period range minute minutes real time quote individual stock item 
consider advanced system setup update period sensor data item uniformly ranges ms gamma sec 
furthermore selected range update periods approximate data requirements real time database applications agile manufacturing electro mechanical robots controlled various sensor data 
table settings sensor data updates parameter value data objects update period uni orm ms eet uni orm ms ms actual exec 
time normal eet eet total update load user transactions source source generates group user transactions inter arrival time exponentially distributed 
source associated estimated execution time eet average execution time aet 
set eet uni orm ms ms 
generating multiple sources derive transaction groups different average execution time average number data accesses statistical manner 
increase load applied simulated real time database transactions may arrive certain period time increasing number sources 
set aet theta eet introduce execution time estimation errors 
note approaches tested including flute aware estimated execution time 
generation user transaction actual execution time generated applying normal distribution normal aet aet introduce execution time variance user transaction group 
number data accesses source derived proportion length eet data access factor theta eet 
result longer transactions access data general 
generation user transaction source associates actual number data accesses transaction applying normal introduce variance user transaction group 
set deadline arrival time average execution time theta slack factor user transaction 
slack factor uniformly distributed range 
update set deadline update period 
performance evaluation applied settings execution time data access factor slack factor different settings described table 
confirmed approach support dynamically adapting system behavior error measured feedback control loop different workload settings include results due space limitations 
table settings user transactions parameter value eet uni orm ms ms aet eet theta actual exec 
time normal aet aet theta eet actual data accesses normal slack factor uni orm baselines best knowledge previous research applied feedback control qod adaptation provide guarantees potentially conflicting ratio freshness requirements despite unpredictable data resource conflicts resulting aborts restarts real time databases 
reason developed baseline approaches follows 
ffl basic approach incoming transactions admitted sensor data updated minimum update periods 
qod long sensor updates commit deadlines 
shaded components turned 
feedback admission control qod adaptation applied 
note database systems take open loop non adaptive approach 
ffl basic ac variant basic admission control policy described section applied 
fairness performance comparisons apply admission control policy flute basic ac 
note tested approaches sensor data updated immediately new sensor readings arrive support temporal consistency 
previous considered baselines demand update policy 
consider eliminate arbitrarily old data due demand updates 
workload variables experiments adjust workload experimental purposes define workload variables describe performed experiments workload variables 
workload variables ffl computational systems usually show different performance increasing loads especially overloaded 
variable called update load user transaction load user transaction load apply different workloads simulated real time database 
performance evaluation applied 
note variable indicates load assuming incoming transactions admitted sensor data item updated min actual load reduced tested approach applying admission control qod degradation necessary 
actual load related workload variable fixed qod 
ffl fixed qod increasing fixed qod qod increase flexibility provided overload management 
applied fixed qod ranging increased observe average transient ratio specified qos spec supported increasing fixed qod 
simulation settings resulting cpu utilization requirement sensor updates full qod degradation approximately theta fixed qod gamma fixed qod new theta min full qod degradation qos spec 
table show tested fixed qod values approximate update workload full qod degradation load relieved full degradation 
example fixed qod actual load reduced approximately full qod degradation 
admission controller handle remaining overload support specified ratio qod necessary 
table fixed qod vs update workload fixed qod update load relieved load ffl execution time estimation error introduce errors execution time estimates described 
evaluated performance 
actual execution time approximately equal estimated execution time 
actual execution time roughly twice estimated execution time actual execution time theta estimated execution time 
general high execution time estimation error induce difficulty real time scheduling 
ffl hss hot spot size database performance vary degree data contention changes 
reason apply different access patterns gamma access scheme data accesses directed entire data database example access pattern means data accesses directed database hot spot 
data accessed uniform manner 
call certain hot spot size hss 
performance evaluated hss uniform access pattern 
ffl init initial target utilization utilization control loop 
run time target utilization dynamically adjusted considering current ratio discussed section 
experimental results increasing init utilization throughput slightly increase expense increasing ratio overshoot 
results included due space limitations 
experiments performed sets experiments varying values workload variables representative sets experiments summarized table clarity presentation 
verified experiments including experiment sets show consistent performance trend approach provide guarantee ratio enforcing qod specified qos spec time 
contrast baseline approaches fail support specified ratio presence unpredictable workloads access patterns 
experiments discussed follows 
ffl experiment set described table error considered execution time estimation 
note ideal assumption precise execution time estimates usually available 
performance evaluated 
fix increased experiment set 
best case settings experiments applied experiment set 
table experiments exp varied fixed fixed qod init hss fixed qod gamma init hss hss gamma uniform access init fixed qod ffl experiment set set experiments set worst case values applied experiments 
increase fixed qod stress modeled real time database 
fixed qod increases ratio may increase due adaptability potential overload discussed 
ffl experiment set vary hot spot size gamma observe qos spec supported varying degrees data contention 
shown table set fixed qod 
addition worst values tested allow qod degradation 
worst case set tested simulation settings 
experiments simulation run lasts minutes simulated time 
performance data taken average simulation runs derived confidence intervals 
confidence intervals plotted vertical bars graphs showing performance evaluation results 
performance data vertical bars may noticeable due small confidence intervals 
experiment set effects increasing load section compare performance basic basic ac flute increasing 
average ratio shown increasing flute shows near zero ratio meets specified ratio threshold basic basic ac show significant ratio increase 
flute measured transient ratio specified overshoot settling time satisfied values 
observed average transient ratio near zero flute experiments 
reason section compare average performance tested approaches 
shown basic ac improved ratio basic applying admission control 
basic ac shows high ratio reaching sigma 
observe basic ac adaptable potential overloads 
mainly hard possible predict potential rollbacks restarts resulting waste cpu cycles admission control stage 
basic ac admission control may able completely handle potential average ratio basic basic ac flute average ratio exp average qod basic basic ac flute average qod exp average utilization basic basic ac flute average utilization exp average qod th utilization ratio qod throughput average performance flute exp time sec qod utilization ratio qod transient performance flute exp fixed qod time sec qod utilization ratio qod transient performance flute exp fixed qod overloads 
contrast flute controls admission newly arriving transactions adapts qod control signal computed feedback control loop considering current ratio 
average qod shown basic basic ac provide qod approaches minimum update period maintained data regardless current ratio 
flute qod decreases increases achieving sigma improve ratio shown 
increasing approach showed lower qod values compared baselines 
argue approach sacrificed qod improve ratio 
qod degradation bounded required qod specification qod degradation allowed max reached 
sensor data fresh terms vi qod degradation 
importantly sections show flute support required ratio qod degradation allowed providing perfect qod 
average utilization basic basic ac utilization quickly increases leading large number deadline misses increases 
contrast flute shows relatively stable utilization ranging gamma increasing supporting required ratio freshness guarantees 
due relatively poor performance terms ratio baseline approaches remainder mainly performance results flute varying workloads performance comparisons flute baseline approaches experiment set 
experiment set effects increasing fixed qod real time database applications corporate users require high qod low ratio time qod ratio 
consider section evaluate performance flute increasing fixed qod observe specified average transient ratio supported 
utilization throughput measured performance comparisons different fixed qod values 
average ratio qod utilization shown increasing fixed qod average qod increases fixed qod 
increasing fixed qod flute provides near zero average ratio expense slightly decreased cpu utilization ranging gamma due relatively strict admission control prevent ratio overshoot shown 
utilization decrease small sensor transactions executed fixed qod increases 
average throughput increasing fixed qod smaller number user transactions processed timely manner due increasing update workloads 
timely submitted represent number user transactions committed deadlines number user transactions submitted system admission control respectively throughput theta timely submitted maximum possible user transaction throughput fixed qod theoretically derived follows 
applied update user transaction workloads approximately respectively 
maximum possible throughput approximately total cpu capacity gamma update workload applied user transaction workload assuming deadline cpu utilization 
compare throughput flute baseline approaches throughput 
shown flute throughput decreases sigma sigma increasing fixed qod 
means approximately submitted user transactions admitted committed deadlines fixed qod respectively 
fixed qod increases smaller number user transactions admitted due increasing update workload 
result user transaction throughput decreases 
throughput flute exceeds fixed qod expense reduced bounded qod specified qos spec 
basic ac showed sigma throughput lower flute fixed qod sigma experimental settings experiment set shown table qod degradation applied basic ac 
basic ac admits transactions due relatively high execution time estimation errors experiment 
result admitted transactions may eventually deadlines aborted firm real time database model 
fixed qod approach improves user transaction throughput gamma compared basic ac 
basic throughput due deadline misses 
observe sensible approach prevent potential overload qod management admission control 
flute number timely transactions gamma transactions commit deadlines gamma increased compared baseline approaches model widely accepted real time database frameworks 
transient performance figures show transient ratio qod utilization fixed qod respectively 
measured transient performance fixed qod values observed similar performance results 
due space limitations performance results ends fixed qod range 
observe ratio near zero exceeding threshold ratio overshoot shown figures 
qod decreasing avoid potential ratio overshoot 
qod degraded fixed qod 
time ratio ratio overshoot expense relatively low throughput compared smaller fixed qod values shown 
observe transient performance better required qos spec terms overshoot settling time 
shows effectiveness qod management admission control schemes required cpu utilization adjustment computed feedback control loop enforced degrading qod controlling admissions necessary 
experiment sets show effectiveness flute wide range workloads access patterns support specified average transient ratio providing perfect qod required 
time flute showed higher throughput compared baseline approaches 
approach corporate user select appropriate qod considering application specific throughput data semantics free potential ratio overshoot qod violations 
experiment set effects varying access patterns shown flute average performance hardly affected varying access patterns average ratio near zero utilization approximately throughput approximately qod hss utilization ratio qod throughput average performance flute exp fixed qod set experiments 
concerning transient performance transient ratio overshoots observed hss hss possibly due relatively high data contention compared hss values tested 
hss ratio overshoot gamma slightly violating specified overshoot qos spec gamma observed decayed sec sampling period 
hss ratio overshoot decayed sampling period 
considering relatively high data contention hss demanding experimental settings applied experiment set table conclude approach closely met qos spec terms overshoot settling time 
hot spot values including uniform access ratio overshoot observed similar results section 
performed similar experiments lower fixed qod 
values ratio overshoot achieving higher throughput utilization compared results shown 
include results due space limitations 
generally concurrency improves database performance hot spot transactions access data object 
hot spots usually eliminated changing corresponding database application tolerated special concurrency control techniques 
directly applicable real time databases 
example lots transactions stock trading may access varying sets data items depending market status 
results experiment set claim approach considerable adaptability potential data contention due hot spots supporting specified ratio perfect qod 
mainly flute dynamically adapts update user workloads feedback control signal 
result required database qos achieved presence wide range unpredictable workloads data access patterns 
related trade issues timeliness data freshness studied 
stanford real time information processor strip addressed problem balancing possibly conflicting freshness timing constraints real time databases 
study trade freshness timeliness scheduling algorithms introduced schedule updates transactions performance compared 
similar trade problem studied derived data 
trade issues response time data freshness considered context web server 
dynamically generated data materialized web server continuously refreshed back database 
response time improved views materialized data freshness reduced vice versa 
certain number views materialize adaptive view selection algorithm materialization improve response time data freshness 
database self tuning project called going microsoft research reduce cost database tuning specific applications 
currently focuses physical database design identifying indexes materialized views appropriate application specific workload optimize performance database systems 
provided performance guarantee terms ratio data freshness 
qod management scheme contrasts previous 
access update frequencies measured sensor data item 
data item considered hot important access frequency higher update frequency 
considered cold 
overload cold data updated demand reduce update workload necessary 
approach cold data updated demand arbitrarily old demand update chances low 
novel notions qod flexible validity intervals 
notions new qod management scheme bound qod degradation necessary maintain freshness qod degradation 
approach overhead keep track access update ratio statistics accordingly classify data 
various aspects real time database performance data freshness traded improve ratio 
correctness answers database queries traded enhance timeliness 
query processor called approximate provide approximate answers depending availability data time 
imprecise computation technique milestone approach applied approximate 
milestone approach accuracy intermediate result increases monotonically computation progresses 
correctness answers query monotonically increase query processing progresses 
relational database system called case db produce approximate answers queries certain deadlines 
approximate answers provided processing segment database sampling correctness answers improve data processed 
data processing case db determines segment processing finished time 
replicated databases consistency traded reduce response time 
epsilon serializability allows query processing despite concurrent updates 
approach deviation answer query bounded 
adaptable security manager proposed database security temporarily traded enhance timeliness 
overload covert channels illegal information flow different security classes temporarily allowed controlled manner improve ratio 
priority adaptation query resource scheduling provided timeliness differentiation query processing memory constrained environment 
intelligent memory management differentiate ratio service classes 
note support guarantee terms ratio data freshness 
feedback control widely applied qos management real time scheduling due robustness unpredictable operating environments 
best knowledge considered performance guarantee issues regarding timing data freshness constraints real time databases 
demand real time database services increasing 
essential challenging process transactions deadlines fresh data reflecting current real world status 
key contribution new real time data management architecture provide guarantees deadline ratio sensor data freshness 
flute users explicitly specify required ratio qod specific real time database applications 
specified ratio qod supported presence unpredictable workloads data access patterns 
novel notions qod flexible validity intervals 
flexible qod management scheme derived effectively manage qod considering current system behavior maintaining freshness sensor data qod degradation 
applying qod management scheme feedback admission control flute support potentially conflicting ratio freshness requirements time non adaptive baseline approaches fail 
approach important data intensive real time database applications 
due increasing demand real time services increasing complexity data needs research effort devoted area 
initial provide guaranteed real time database services importance increase real time applications sophisticated data intensive 
currently investigating differentiated real time database service framework provide preferred services important service classes overload 
considering important research issues secure real time transaction processing timeliness freshness issues distributed real time databases 
abbott garcia molina 
scheduling real time transactions performance evaluation 
acm transactions database system 
garcia molina kao 
applying update streams soft real time database system 
acm sigmod 
kao garcia molina 
database support efficiently maintaining derived data 

chaudhuri weikum 
rethinking database system architecture self tuning database system 
large databases 
storage manager main memory database performance critical applications acm sigmod industrial session database storage management 
gray reuter 
transaction processing concepts techniques 
morgan kaufmann 
hsu zhang 
performance evaluation cautious waiting 
acm transactions database systems 
kang son stankovic 
service differentiation real time main memory databases 
th ieee international symposium object oriented real time distributed computing april 
kang son stankovic abdelzaher 
qos sensitive approach timeliness freshness guarantees real time databases 
th euromicro conference real time systems june 
kim son stankovic 
performance evaluation real time database 
ieee real time technology applications symposium 
appear 
roussopoulos 
adaptive webview materialization 
fourth international workshop web databases held conjunction acm sigmod may 
lee shih sha 
service class online qos management surveillance radar systems 
ieee real time systems symposium december 
li nahrstedt 
control middleware framework quality service adaptations 
ieee journal selected areas communications 
lin natarajan liu 
imprecise results utilizing partial computations real time systems 
real time system symposium december 
lu stankovic tao son :10.1.1.14.8682:10.1.1.14.8682
feedback control real time scheduling framework modeling algorithms 
journal real time systems special issue control theoretical approaches real time computing 
appear 
lu saxena abdelzaher 
differentiated caching services control theoretical approach 
st international conference distributed computing systems phoenix arizona april 
ozsoyoglu 
hou 
research time error constrained database query processing 
workshop real time operating systems software may 
pang carey livny 
multiclass query scheduling real time database systems 
ieee transactions knowledge data engineering august 
phillips nagle 
digital control system analysis design rd edition 
prentice hall 
polyhedra plc 
www polyhedra com 
pu leff 
replica control distributed systems asynchronous approach 
acm sigmod may 
ramamritham 
real time databases 
international journal distributed parallel databases 
son david 
integrating security real time requirements covert channel capacity 
ieee transaction knowledge data engineering 
steere goel mcnamee pu walpole 
feedback driven proportion allocator real rate scheduling 
third symposium operating systems design implementation 

plus 
www com 
performance software 
white 
available world wide web www com library index html 

approximate query processor produces monotonically improving approximate answers 
phd thesis university illinois urbana champaign 
xiong stankovic ramamritham towsley 
scheduling transactions temporal constraints exploiting data semantics 
real time systems symposium december 

