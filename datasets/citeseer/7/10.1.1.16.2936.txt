authentic third party data publication prem devanbu michael gertz chip martel stuart stubblebine department computer science university california broad street suite davis california ca usa new york ny devanbu gertz martel cs ucdavis edu stubblebine cs columbia edu integrity critical databases financial information high value decisions frequently published internet 
publishers data satisfy integrity authenticity non repudiation requirements clients 
providing protection public data networks expensive proposition 
part due difficulty building running secure systems 
practice large systems verified secure frequently penetrated 
negative consequences system intrusion publisher severe 
problem complicated data server replication satisfy availability scalability requirements 
knowledge kind give general approaches reduce trust required publisher large infrequently updated databases 
separate roles owner publisher 
digital signatures part owner trust required publisher give techniques merkle hash trees publishers provide authenticity non repudiation answer database query 
done requiring key held line system reducing impact due system penetration 
reducing trust required publisher solution step publication large databases scalable manner 
consider financial markets database businesses high value decisions 
examples include financial data range investment vehicles stocks bonds mortgage backed securities 
databases financial portals republish information insecure public networks 
data queried high rates example client investment tools 
focus attention data changes infrequently assume extremely high query update ratios millions queries executed daily 
data needs delivered promptly reliably accurately 
approach problem digitally sign results query 
represents signature private signature key 
client owner query nonce 
owner client data timestamp data nonce client may assured correctness answer response query data adequately signed owner satisfies non repudiation requirements 
issues owner may willing able provide reliable efficient database service query data scale rates required clients information 
second owner willing able continuous revision forwarding copy please get latest cs ucdavis edu devanbu pdf examples relatively static information include financial earnings reports market history individual trades offers bids intra inter day volume financial ratings 
provide service owner needs maintain high level physical computer security required defend attacks 
done protect signing key resident database server times sign outgoing data 
practice large software systems vulnerabilities 
patched albeit usually partially great deal skill effort time expense 
cryptographic techniques threshold cryptography hardware devices protect private key help solve systems vulnerability problem generally expensive implement application domain 
scalable approach problem trusted third party publishers data conjunction key management mechanism allows certification signing keys publishers speak author data 
database updates db provided securely publishers 
owner publishers pi 
db timestamp db followed clients accessing publishers query response style similar previous protocol description publishers signing answers 
pi presumably market useful data db motivate publishers provide service owner need 
owner simply needs sign data distribute publishers 
demand increases publishers emerge making approach inherently scalable 
approach suffers problem expense maintaining secure system accessible internet 
furthermore client worry publisher engages deception 
client find publisher trust trusted brand name belonging large 
client trust infra structure allowed keys publishers certified 
addition believe publisher competent careful site administration physical access database 
particularly worry private signing key publisher resident database server vulnerable attack 
get client trust provide really valuable data publisher adopt careful stringent administrative policies expensive client 
abovementioned need trusted publishers increase reliance brand names limit tendency market competition reduce costs 
tygar lists important open problem commerce 
asks protect re sold re distributed information 
approach problem 
approach propose approach certifying responses queries completely untrusted publisher provide verification object vo client answer query vo generated publisher provides independent means verifying answer query correct 
verification object small number summary signatures distributed periodically clients data owner 
summary signatures bottom hashes computed recursively tree type indexes entire set tuples relation owner database signed answers queries various combinations subsets relations 
query publisher computes answer 
show answer correct publisher constructs vo tree structures owner compute summary signatures 
vo validates answer set providing unforgeable proof links answer appropriate signed owner 
approach features 
exception security client host client needs trust key owner addition owner needs distribute update cycles 
private signing key need resident online machine better protected hardware token sign hash digests updates 
techniques founded cryptographic assumptions regarding security hash functions public key cryptosystems 

clients need trust publishers keys 

techniques describe vo linear size answer query 

vo guarantees answer exact superfluous missing tuples 

publisher evaluates queries data structures owner compute publisher overhead compute vo relatively minor 
incorrect answer vo rejected client infeasible publisher forge correct vo wrong answer 
offer solutions authenticity specific context 
directly address orthogonal issue access control policies restrict queries updates issues confidentiality privacy 
techniques restricted relational databases 
addition handle relational queries 
techniques involve construction complex data structures cost amortized efficient query processing 
approaches similar view materialization enable data warehouses provide efficient query processing 
outline follows 
section discussion problem space framed briefly set context preliminary results open issues remain 
brief background relational databases describe essence extension naor nissim secure third party data publication :10.1.1.109.5235
section give basic approach 
section give 
design space clarify problem setting outlined map potential design space solutions 
general setting described 
owner populates relations database pre computation database construct data structures support query processing trees computes summary signatures data structures signed 
owner distributes clients database publishers 

client sends query publisher 
publisher computes answer verification object vo sends back client 

client verifies correctness completeness recomputing vo ko 
general problem publishing data securely third parties different approaches possible lead different computing storage costs clients publishers owners 
extreme approach example owner simply deliver entire database clients query processing 
approach entails huge data transmission costs requires great deal storage processing clients 
extreme owner pre compute sign range possible queries 
publishers simply cache queries applicable signatures owner return signatures answers queries 
client perspective approach attractive pre computed answer comes constant length verification object signature directly owner 
approach practical general just simply possible queries 
goal compromise design require pre computation arbitrary query answers shipment entire database clients 
particular database client choose potentially infinite set queries constrained query patterns implemented applications client sites 
adopt position requires certain amount effort parties owner publisher client 
suggested techniques owner log time space size database small constant denoting roughly number operations selections projections query 
particular simple selections particular attribute single relation require owner 
construction index structures amortized repeated efficient query processing 
index structures transmitted publishers exactly precisely recomputed 
query processing algorithms similar performance standard databases 
construction vo small constant overhead standard query processing algorithms 
importantly size vo grows linearly size answer set poly logarithmically size database 
verification step takes time linear size vo 
view suggests may perspectives problem secure third party data publication 
differing assumptions levels storage computational effort expected owners publishers clients may lead different viable solutions problem 
believe addition techniques useful operating points await discovery 
preliminaries section discuss basic notions definitions concepts necessary approach 
section basic notions underlying relational databases queries formulated relational algebra 
section discuss computation usage merkle hash trees 
relational databases data model underlying approach relational data model see 
assume data owner publisher manage data relational database management system dbms 
basic structure underlying relational data model relation 
relation schema 
consists relation name ordered set attribute names 
denoted schema 
attribute ai defined domain di 
extension relation schema arity called relation short finite subset cartesian product 
dn 
extension relation schema denoted value tuple attribute ai denoted ai 
assume relation schema set pk 
associated designates primary key 
number tuples relation called cardinality relation denoted 
database schema collection relation schemas 
rm 
database schema extension relation schemas particular point time called database instance database 
queries database formulated sql 
queries typically translated dbms query processing engine expressions relational algebra purpose query optimization execution 
mainly concerned providing verification objects query results queries formulated expressions relational algebra 
queries simple containing basic operator complex containing composition basic operators 
basic operators relational algebra follows relation schemas selection relation name condition form ai ai schema di 
projection ak 
ak 

cartesian product tq 
union operator 
union compatible 
set difference operator 
union compatible 
additional operators relational algebra typically complex queries natural join equi join condition join theta join condition join attributes set intersection 
operators derived basic operators 
merkle hash trees describe computation merkle hash tree relation relation schema 
assume ai 
ak list attributes schema 
merkle hash tree computed denoted mht 

compute tuple hash ht tuple ht 
tuple hash collision resistance hash function functions nearly unique tuple identifier hash length bits probability collisions approaches 

compute merkle hash tree relation assume sorted values distinct tuples ti ti ti ti leaf nodes ht ti 


log note hash value level log root hash merkle tree 
sequel denote values compute hash siblings parent 
construction illustrated 
parent hash siblings 
note construction easily generalizes higher branching factor tree presentation primarily binary trees 
approach works best owner publisher build mht index structures query evaluation 
case constructing vo minor overhead query evaluation process 
note cryptographic assumption collision resistant hash function correct value parent known client publisher forge value hash siblings 
entire approach flows signed correct value root merkle tree just naor nissim :10.1.1.109.5235
definition hash path leaf node mht corresponding tuple ti nodes necessary compute hash path root hash denoted path ti 
hash path length log comprises log nodes exactly nodes leaf nodes 
log need provided recompute value root 
hash paths provided non leaf nodes 
computation merkle hash tree log nodes path ti constitute vo showing ti relation rooted hash value root node owner signature root node certifies authenticity 
interior node hash tree authenticated giving path root 
definition boundaries non empty contiguous sequence ti 
tj leaf nodes merkle hash tree mht special leaf nodes lub glb describe lowest upper greatest lower bound values respectively defined follows glb ti ti lub tj tj assume glb lub singletons 
easily accomplished adding pk list attributes leaves mht ordered 
definition lowest common ancestor non empty contiguous sequence ti 
tj leaf nodes merkle hash tree mht lowest common ancestor lca mht defined root minimal subtree mht tuples leaf nodes 
situation illustrated 
lca show hash path path lca authenticated root hash value 
done shorter hash paths tuple lca provide evidence membership entire tree 
useful build vo showing nodes occur consecutively tree 
definition proximity subtree consider consecutive pair tuples leaf nodes mht lowest common ancestor lca 
node paths showing respectively rightmost leftmost element left right subtree lca constitute proximity subtree denoted ptree 
proximity subtrees boundary cases glbs lubs show near tuple occurs just outside answer set lies extremal tuple answer set 
case important note construction just need reveal relevant attribute value near show near just hash attributes tuple hash rest proximity tree exhibited 
define important properties answer set returned publisher 
assume owner database system process queries client fashion done publisher definition assume query issued client 
denote query result computed data publisher data owner site respectively 
proximity subtree lub path lca proximity subtree merkle tree contiguous subrange common ancestor lca upper lower bounds 
note verifiable hash path lca root proximity subtrees thick lines near tuples lub glb show complete 
glb said inclusive answer iff holds 
said complete answer iff holds 
base level relational queries section outline computation vo answers queries 
illustrate basic idea approach selection projection queries section respectively 
slightly complex types queries join queries set operators discussed sections 
selections assume selection query form ai di determines result set furthermore assume merkle hash tree mht ai constructed 
possible comparison predicate show publisher construct vo client verify inclusiveness completeness query answer emphasize cases merkle hash tree constructed owner publisher index structures querying overhead constructing vo minor 
consider cases comparison predicate 
ai pk vo just path tuple satisfies selection condition 
case size vo log 
ii ai pk show tuple exists satisfies selection 
provide paths tuples surround non existing tuple 
tuples determined glb lub determining path glb path lub requires searching associated tuples leaf nodes mht ai 
proximity subtree ptree glb lub provides required evidence answer set empty 
size vo log 
iii ai primary key 
result set tuples build contiguous sequence leaf nodes mht ai 
order provide vo approach taken 
identify lca glb lub mht ai show verifiable path root 
identify proximity subtrees showing glb lub occur consecutively smallest largest element entire sub tree elements set constructed hash values tuples verifies entire set occurs leaf nodes tree 
construct subtree verify root hash lca subtree length vo log 
proximity subtrees establish tuples left 
iv ai primary key apply approach ii 
fundamental techniques proving answers selections relation inclusive complete simple 
normal query evaluation answer set determined 
consider simple relational queries answer set contiguous subset mht ai 
retrieve additional tuples glb respectively lub immediately smaller larger smallest largest tuple regard answer set ordering ai 
noted answer set empty occur consecutively merkle tree 
cost readily seen log 
observation answer set query pattern ai determines contiguous sets leaf nodes mht ai 
sets follow approach similar iii shown 
scenario follows 
answer set query pattern ai ai determines contiguous sets leaf nodes mht ai 
set follow approach similar iii discussed 
empty just give vo tuple min analogous 
cases handled similar fashion just shifting boundaries 
projections queries pattern schema projection operator eliminates attributes tuples relation eliminates duplicates set shortened tuples yielding final answer may different possible projections relation client wishes choose dynamically may best client perform projection 
client eliminate duplicates automatically eliminated sql relational algebra 
case client provided relation subset thereof intermediate selections vo projection vo linear size smaller size final result 
note projection may mask attributes client allowed see just hash attributes tuple client compute tuple hash vo 
consider case particular projection projects attributes values projected attributes poorly distributed tuples values attribute case duplicate elimination remove numerous tuples leaving small final answer just pre projection tuple set client 
suppose merkle tree mht assume sets retained attribute values mapped single values corresponds building equivalence classes applicable total order 
case provide vo projection step linear size projected result tuple result set potentially results set tuples tuple identical values projected attribute need establish set inclusive projection complete tuple missing 
accomplished follows 

show find witness tuple attribute value show hash path tuple merkle root 
establishes tuple belongs result set witness tuple preferably chosen boundary value describe 

show tuples missing say 
show sets occur immediately sorted order 
done showing hash paths prove boundary tuples occur merkle tree mht observe bits evidence provided displaying hash paths length log 
meets constraint size authentication evidence bounded log 
assume merkle tree exist precisely intermediate result just prior projection 
accomplished called multi dimensional range trees discussed section 
joins joins relations common type operators relational algebra formulate complex queries 
holds particular equi joins relations combined primary key foreign key dependencies 
alternative realizations merkle tree structures provide vos query results computed joins 
focus pairwise joins pattern condition join attributes pattern ar ar schema schema 
assume data types underlying ar compatible respect 
equality predicate obtain called equi join 
query pattern merkle hash tree structure supports efficient computation vo query result materialization physical storage cartesian product note structure constructed publishers accept query clients 
reason choosing materialization cartesian product structure supports types joins mentioned 
due fact joins formulated terms basic relational algebra operators ar ar 
important issue constructing merkle hash tree queries pattern cartesian product determined resulting tuples sorted difference values ar assuming operation defined 
obtain groups leaf nodes merkle tree nodes difference ar tuples supporting equi joins nodes difference positive supporting predicate nodes difference negative supporting predicate 
cases assume query result set burden provide inclusiveness completeness evidence query result 

tuple provide hash path sorted merkle tree showing tuple relation 

show tuples missing show pairs boundary hash paths verifying boundaries answer set 
known result equi joins database optimized merkle tree structure 
sketch basic concept structure 
space consuming materialization cartesian product materialize full outer join pads tuples matching tuples relation exist null values see 
result tuples obtained full outer join operator grouped classes tuples ts join condition holds tuples matching tuples exist tuples matching tuples exist 
constructing vo result query pattern ar done fashion outlined 
set operations set operations involve relations may assume intermediate results query evaluation subsets relations respectively sorted possibly different attributes merkle tree mht mht root signed usual 
consider set operations union set intersection 
union case answer set evidence inclusive complete straightforward sufficient provide verification paths element showing belongs sets 
additionally single pass union show elements omitted 
done vo size log max 
contiguous subsets inclusiveness done faster necessary check union order elements occur authenticating information sets respectively 
order inclusiveness completeness evidenced vo linear size 
intersection approach union produce compact vos set intersection 
suppose 
inclusiveness easy vo providing verification paths showing elements belong completeness harder 
user needs assurance elements belong 
pick smaller set say element construct vo show general intermediate results occurring contiguously merkle tree vo linear size smaller set say 
consider example set tuples name age salary wishes select tuples specific salary age range 
assume obtained performing selection salary age 
verified vo resulting different merkle hash trees sorted salary sorted age 
computing intersection result vo size linear vo provide inclusiveness evidence element shows completeness showing remaining element leaves unsatisfactory situation vo linear size potentially larger intermediate result 
similar problem occurs set differences solved general problem constructing vo linear size result intersections set differences 
question remains general linear size vos constructed objects 
section provide approach constructing linear size vos specific type intersection range query 
accomplished data structure drawn computational geometry called multi dimensional range tree 
approach set differences range different attributes 
multi dimensional verification objects dimensional computational geometry dealing sets points space ask space range query 
consider spatial interval 
xd xd represents axis aligned rectilinear solid space 
query ask points occur solid 
problems solved efficiently computational geometry called range trees see chapter 
draw analogy problem database query form 
ad 
ad schema relation multi dimensional range tree data structure solve queries provide compact verification objects 
excerpt dimensional range tree sorted attributes consider example shown 
assume relation schema attributes want perform combined selections provide vo final answer 
consider dimensional labeled 
simply tree sorts tuples attribute 
numbers leaves denote unique primary keys tuples 
interior node tree ancestor set tuples 
consider interior node ancestor tuples 
contains link root associated tree denote 
dimensional contains set tuples tree sorted attribute 
likewise interior node vi ancestor set tuples contains pointer associated dimensional vi sorts tuples subtree vi attribute 
general node dimensional contains pointer dimensional 
nodes final dimensional tree corresponding attribute ad pointers 
space range query structure follows 
tuple set values attribute range identified tree 
simplicity assume relax assumption tuples form leaves balanced tree root lca 
range roughly time log time takes find points interval tree 
follow link associated tree attribute tree sorts just tuple set attribute 
find subset satisfying log time 
gives intuition efficient processing conjunctive range queries 
relax assumption result selection includes just leaves balanced tree 
call leaves subtree rooted node canonical subset denoted 
leaf pp shown subset leaves lies range expressed disjoint union log canonical subsets range query 
roots log time process finding bounding paths interval 
range search tree find node vsplit paths split 
search left right subtree 
point search path goes left right subtree belongs range search goes just opposite way 
result quick identification roots canonical subtrees precisely cover leaves values interval see 
ccrs vsplit finding canonical covering roots call covering canonical roots ccrs 
consider example dimensional range query attributes 
ccrs tree range attribute log 
ccrs go associated trees attribute find ccrs tree range 
results log ccrs tree 
union leaves ccrs constitute answer 
general shown dimensional range queries computed time log 
range trees require log storage space constructed time log 
show produce vo size log intersection query form 
ad 
construct merkle hash tree dimensional 
assume associated tree node attribute range tree hash node 
base case base dimensional build merkle hash tree 
induction root hashes dimensional leaves height dimensional compute tuple hashes usual way 
node height compute hash value 
append hashes children say hash root associated dimensional range tree hash result 
construction completed time log overlapped construction range tree 
consider construction vo way intersecting range selection query 
vo essentially follows search algorithm 
tree range query corresponding interval results set ccrs 
vos group log ccrs providing verification path node vsplit root verifiable paths length ccr path vsplit 
addition readily seen construction path ccr vsplit canonical subtrees ccr form contiguous non overlapping answer set 
provide proximity trees lub glb interval smallest largest contained intervals show selected tuples belongs ccr 
total size vo log log log 
process needs repeat showing verification paths log ccr process evaluating way intersecting range selection query gives vo size kd log log show tuples belong answer log ccrs cover intervals prescribed query 
situations results selection may large final intersection small approach gives small vos 
pragmatic issues related examine pragmatic considerations approach related 
canonical join select project queries typical sql select 


thought joins followed combined selection followed projection 
describe efficient evaluation construction compact vos queries 
specifically consider query involves join relations followed series selections final projection 
assume theta join attribute occurring relations followed selections attributes final projection attributes jointly represented discussed section 
sorted attribute sorted join attribute sorted projection attribute sorted selection attribute excerpt dimensional range tree sorted attributes construction see range tree constructed join attribute explained section 
follow trees sorted projected attributes 
query evaluation plan construction vo follows set range trees described leading efficient evaluation steps vo linear size final result 
query flexibility efficient verification query answering different trees sorted tuple sets 
trees approach provide small verification objects 
points tion approach queries merkle trees pre computed evaluated compact verification objects 
approach support arbitrary interactive querying compact verification objects 
arbitrary interactive querying quite rare presence fixed applications client sites 
practice data intensive applications fixed set queries 
mechanisms embedded sql see database queries compiled applications 
queries parameters entered user typically selection conditions 
approach compatible applications 
essentially client applications commit priori queries wish execute owner publisher pre compute required merkle hash trees produce short verification objects 
approach provide compact verification objects context arbitrary interactive database querying quite compatible widely practice embedding predetermined parameterizable queries data intensive applications 
conventions important note interested parties owner publisher client share consistent schema databases published 
addition needs secure binding schema queries query evaluation process constructed merkle trees 
convention include information hash trees needs established 
parties need agree data structures vo 
important publisher client agree format vo query result encoded transmitted 
tagged data streams xml provide attractive option 
query evaluations verifiers verify query evaluation due adequately snapshot database old version 
assume technique secure authentication solving problem 
risk takers organizations relying accuracy data specify freshness policies fresh database 
digital signatures database include timestamp update versioning information 
assumptions concerning trusted synchronization paths synchronization bounds clients interpret timestamps verify database adequately respect freshness policies 
related merkle hash trees authentication data new 
closely related naor nissim revocation :10.1.1.109.5235
haber similar techniques timestamping 
similar schemes 
schemes including share common theme leveraging trust provided digital signatures trusted party multiple hashes hash paths hash trees goal protecting integrity content efficient verification hashes efficient digital signatures 
trees authentic data publication new 
quite bit related general area database security particularly access control statistical querying 
anderson discusses approach third party publication data files querying contents :10.1.1.16.1952
knowledge particular problem authentic database publication remained unexamined 
approach viewed providing proof carrying answers database queries 
explored problem authentic third party data publication 
particular developed techniques allow untrusted third parties provide evidence inclusive complete query evaluation clients public key signatures 
addition evidence provided linear size query answers checked linear time 
techniques involve construction complex data structures cost construction amortized efficient query evaluation production compact verification objects 
precomputation views indexing structures uncommon data warehousing applications 
techniques suggest single hash function 
particularly high integrity applications tolerance failure low multiple way hash functions construct merkle tree 
clients requiring higher levels integrity may check hash computation 
techniques restricted currently relational model 
techniques allow interactive querying embedded queries applications 
currently construct linear size vos general sql queries ones including arbitrary intersections leave open lower bound question vos possible 
believe techniques start important problem area subsequent remove limitations 
amato loui 
checking linked data structures 
proceedings th annual international symposium fault tolerant computing ftcs 
anderson :10.1.1.16.1952
eternity service 
proceedings 
blum evans gemmell kannan 
checking inclusiveness memories 
algorithmica 
originally appeared focs 
castano samarati database security addison wesley date 
database systems th ed addison wesley 
date darwen 
guide sql standard th ed addison wesley 
haber stornetta 
timestamp digital document cryptology 
berg kreveld overmars schwarzkopf 
computational geometry 
springer verlag new york 
jajodia samarati subramanian bertino unified framework enforcing multiple access control policies proceedings acm sigmod 
lunt ed 
research directions database security springer verlag merkle 
certified digital signature 
advances cryptology crypto 
melton simon 
understanding new sql 
morgan kaufmann 
naor nissim :10.1.1.109.5235
certificate revocation certificate update 
proceedings th usenix security symposium 

necula 
proof carrying code 
proceedings popl 
acm sigplan 

building data warehouse john wiley sons 
yung 
amortized signature flexible second usenix workshop electronic commerce proceedings silberschatz korth sudarshan database system concepts mcgraw hill 
tygar open problems electronic commerce proceedings acm sigmod pods 
assume client knows rh correct root hash value merkle tree associated relation attribute 
assume client program including hash function correctly check vo answer 
show long adversary forge values cause collisions precision client verify incorrect answer 
include proof simple selections unforgeable 
proof induction height merkle tree corresponding selection full proof shows checks operators unforgeable need induction nesting depth operators query 
proof binary trees easily extended multiway trees trees 
giving proof need preliminaries 
correct answer selection query relation tuples tj tj 
tr 
tj isn smallest tuple return tj tr isn largest tuple return tr largest smallest tuples call larger set sb plus boundary tuples 
assume tree may special tuples smaller larger case smallest tuple right child largest left child 
addition sb client provided hash values internal nodes merkle tree 
specifically answer computed publisher follows initially calling function answer root tree 
show definition answer answer leaves subtree rooted sb return single tuple leaf values leaves pair leaves left subtree leaves right subtree leaf subtree rooted sb return hash value merkle tree leaves subtree rooted sb return pair answer answer right child note construction algorithm answer implies simple checking mechanism compute hash value left child ul root string leftmost group compute right child value vr compute rh values 
check validity client compute status variable current subtree rooted status empty tuples returned right terminated rt tuple large right full rf valid right terminated left full lf left terminated lt defined similarly invalid tuples known invalid answer 
compute status follows leaf left full right full left terminated right full small left full right terminated large 
general node child invalid invalid 
children valid table shows get parent status 
stands lt lf rt rf 
appears child parent status times 
left right parent empty empty invalid empty lf invalid empty lt lt non empty lt invalid lt rf lf lt lf rf lf rf lf rf rt empty rt rt non empty invalid 
exact security argument 
considering security parameters 
attack model assume owner constructed merkle hash tree relation selection attribute client knows correct root hash value rh 
assume publisher adversary access relation construct merkle hash tree assume hash function chosen owner feasibly forged 
specifically assumption adversary 
selection query correct answer client supposed receive correct verification computation 
course correct verification computation client hashes tuple creates sequence triples xj yj zj zj xj yj result jth application hash function 
assume adversary 
tuple tj tj 
answer course protocol client compute zj aj bj aj xj bj yj intuitively mean adversary alternate pair values hash answer 
answer course protocol client compute aj bj tj tj don need client knows height tree 
lemma cryptographic assumptions client executes verification protocol answer adv provided publisher client computes correct root hash value rh root status valid adv fact correct answer status root correct 
basis show induction 
consider merkle hash tree height root just leaves 
root hash rh known definition final step accepting protocol compute vl vr rh vl vr correct hash values left right subtrees 
security assumption way protocol get vl vr directly correct value hashing 
protocol vl vr directly mean sb empty client knows impossible 
way adv accepted provides tuples tuple value 
case answer adv tuples children root tuple tuple dummy tuple maximum minimum attribute value empty tuples dummy claimed sb 
client able look tuples see part correct answer boundary tuples 
user computes vl vr vl vr 
assumption hash computation occur processing adv rh answer 
furthermore hash computation listed results 
rh correct tuple values values provided 
protocol completeness proof 
example large client knows right sibling largest tuple case root status left full right terminated 
case adversary get correct root value computed providing tuple value say hash value tuple essence claiming sb 
means protocol see right subtree empty root valid left subtree right terminated 
case large algorithm correct value know case 
setting adv vl analogous 
step assume lemma holds tree height apply protocol non empty tree height get correct root value valid status correct answer tuples hash values tree 
consider merkle hash tree height rooted height immediate subtrees rooted ul ur hash values vl vr 
adv form ar ar answer strings answer protocol parse 
answer doesn high level form immediately rejected correct answer empty boundary tuples 
final step accepting protocol compute rh vl vr 
assumption way protocol run adv yield rh final value protocol evaluates vl ar vr ends valid status nodes 
trees rooted ul ur height 
furthermore protocol treats non empty subtrees exactly entire tree 
induction hypothesis non empty produces correct hash value valid status include correct tuples correct status ul similarly ur 
ar non empty evaluate correct hash values valid status correct trees fit valid way right terminated 
trees empty apply induction hypothesis works non empty trees 
suppose ul empty simply vl part adv easy adversary vl known 
order root get valid status status ur left terminated don care right terminated full ok 
ur left terminated correct know ul empty correct conclude root status valid 
case ur empty analogous 
cases extend correctness protocol tree height lemma follows 

