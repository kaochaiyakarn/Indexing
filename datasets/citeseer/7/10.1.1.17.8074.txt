selecting cryptographic key sizes lenstra lenstra com eric eric nl com november 
article offer guidelines determination key sizes symmetric cryptosystems rsa discrete logarithm cryptosystems finite fields groups elliptic curves prime fields 
recommendations set explicitly formulated hypotheses combined existing data points cryptosystems 


cryptography important tools enable commerce cryptography possible protect electronic information 
effectiveness protection depends variety unrelated issues cryptographic key size protocol design password selection 
issues equally important key small protocol badly designed incorrectly password poorly selected protected protection fails improper access gained 
article give guidelines determination cryptographic key sizes 
protocol password related issues discussed 
aim predict current trends persist guidelines result acceptable security commercial applications cryptography 
key size recommendations scattered cryptographic literature may particular cryptosystem vendor documentation 
unfortunately hard tell premises recommendations 
far know article uniform clearly defined properly documented treatment subject important generally accepted cryptosystems 
formulate set explicit parameter settings apply uniformly existing data cryptosystems 
resulting key size recommendations obtained uniform mechanical way depending default settings independent assumptions non scientific considerations 
despite attempt objective expect defaults taste 
easily changed affecting approach making article useful object choices resulting key size recommendations 
papers containing key size recommendations symmetric key cryptosystems rsa rsa elliptic curve cryptosystems :10.1.1.47.3862
choice key sizes usually gets attention nearly failures experience due inadequate key sizes protocol password deficiencies 
illustrate cryptographic key sizes popular email pretty privacy pgp offer acceptable level security current applications 
user password protects private pgp keys stored internet accessible pc necessarily offer security 
user relatively security conscious selects password consisting characters randomly chosen alphanumeric choices resulting security comparable security offered broken data encryption standard unacceptable today standards 
disturbing example network configurations 
user may select password consists characters principle offer security 
transmission network passwords encrypted interesting feature password split parts characters resulting parts treated separately encrypted transmitted network 
effectively reduces password length sufficiently secure 
examples refer 
application guidelines sense convinced security design implementation system engineering 
suggestions reasonable extrapolations developments taken place decades 
approach may fail single bright idea may prove currently popular cryptographic protocols considerably effective expected 
may render completely ineffective shown examples 
early eighties popular knapsack cryptosystems suddenly wiped new type attack 
independent groups researchers showed elliptic curve cryptosystems curves trace easily breakable 
article discuss cryptosystems believed catastrophes occur 
systems non trivial non catastrophic new cryptanalytic insights obtained fairly regular basis 
far gradual increase key sizes effective countermeasure new insights 
application point view hoped change anytime soon 
purpose article give idea key sizes increased maintain comfortable margin security 
sufficiently large quantum computers built asymmetric key cryptosystems discussed article insecure cf 
:10.1.1.47.3862
unclear quantum computers feasible 
suggestions take quantum computers account 
incorporate potential effects molecular computing cf 


run time convention run time estimates article actual run times reliable estimates run times mhz pentium ii processor currently popular commonly available processors 
pc refers processor 
literature computing power measured mips years mips year defined amount computation performed year single dec vax 
measure criticized unclear consistent manner processors instruction sets different vax 
fully agree concerns expressed 
popularity wide acceptance gained measure 
convention year computing pc equivalent mips years kept mind ultimately estimates run times pc actual definition definition mips years 
shown definitions sufficiently close 
mips year figures compatible mips years figures 
write mips years 

lower bounds 
guidelines article meant lower bounds sense keys sizes equal larger recommended sizes attain certain specified level security 
security point view acceptable err conservative side recommending keys may slightly larger required 
key size guidelines article obtained systematically underestimating computational effort required successful attack 
keys estimated weaker reality acceptable purpose finding lower bounds 
cases slight overestimates attack effort cases factors ensure desired level security achieved 

equivalence attack efforts key size recommendations different cryptosystems 
certain specified level security recommendations may expected equivalent sense computational effort number mips years successful attack cryptosystems consideration 
computational point view different cryptosystems offer equivalent security recommended key sizes 
computationally equivalent security confused necessarily equipment cost equivalent security cost equivalent security short 
say systems offer cost equivalent security accessing acquiring hardware allows successful attack certain fixed amount time costs amount dollars systems 
note price hardware required may quite different different attacks attacks may pcs attacks may possible get required mips years relatively cheaply special purpose hardware 
guidelines necessarily result cost equivalent security 
indicate guidelines may changed obtain cost equivalence possibly giving computational equivalence 
reasons opted computationally equivalent security opposed cost equivalent security 
importantly computational equivalence allows rigorous analysis independent judgment preferences 
analysis cost equivalence hand depends subjective choices change time considerable effect outcome 
cost equivalence spectrum reasonable outcomes depending perception reasonable 
points spectrum 
reason restricted computational equivalence model adopted need workable notion equivalence achieve goal determining acceptable key size recommendations achieving type equivalence goal 
resulting recommendations acceptable depends acceptable model 

cryptographic primitives 
arrangement coordinating committee multilateral export controls international organization regulating mutual control export strategic products including cryptographic products member countries countries jeopardize national security 
member countries european countries implemented regulations national legislation 
arrangement follow regulations 
current restrictions arrangement december respect cryptography detailed cf 
www org 
types cryptographic primitives maximum key size export require license 
article limit cryptographic primitives 
due nature arrangement surprising turns key sizes provide adequate protection majority commercial applications 
distinguish cryptographic primitives symmetric key secret key asymmetric key public key cryptosystems 
systems instrumental build commerce enabling solutions specifically achieve confidentiality integrity authenticity non repudiation electronic information 
simplicity loss generality assume communicating parties sender receiver want maintain confidentiality communication section briefly mention cryptographic hash functions 

symmetric key cryptosystems description 
symmetric key cryptosystems share key 
maintain confidentiality key kept secret 
size key number bits depends symmetric key cryptosystem 
message encryption consist number blocks block consists fixed number bits depends symmetric key cryptosystem 
best known symmetric key cryptosystem data encryption standard des introduced key size bits block size bits 
examples symmetric key cryptosystems key triple des key size block size idea key size block size rc variable key block sizes forthcoming advanced encryption standard aes key sizes bits block size 
arrangement 
maximum symmetric key size allowed arrangement bits niche market applications bits mass market 
attacks 
despite years research method published breaks des encrypted message substantially faster exhaustive key search trying different keys 
expected number trials exhaustive key search software data points 
nowadays des considered sufficiently secure 
des key successfully retrieved internet search approximately months cf 
www rsa com des 
expected computing power required software exhaustive key search underestimated cf 

estimate pentium figures single des block encryption fixed key requires pentium clock cycles cf 
pentium clock cycles variable key cf 

furthermore estimate lies dec vax estimates :10.1.1.47.3862
follows mips years convention sufficiently accurate 
half mips years roughly months pc 
equivalent months pcs exhaustive key search evenly divided number processors 
proper security analysis evaluate keep track total computational power internet 
special purpose hardware data points 
cost time investment hardware attack substantially faster software attack 
parallel des key searching machine proposed expected search time hours cf 
corrected days cf 

design wiener cf 
cost expected time dollar hours respectively 
machine built expected search time hours cf 
see 
effectiveness guessing 
possibility may find key simply guessing 
reasonable key sizes probability happens small bit key total probability people different guess 
effort probability success halves additional key bit bit key 
note exhaustive key search systematic guessing 
incomplete attacks 
success probability exhaustive key search proportional fraction key space searched chance key searching fraction key space 
cryptanalytic progress 
assume major changes symmetric key cryptosystem designs allow faster attacks exhaustive key search 
assume design turns allow faster attack longer 
assume existence generic symmetric key cryptosystem arbitrary key size exhaustive key search best attack 
bit key successful attack expected require order invocations underlying function 

asymmetric key cryptosystems asymmetric key cryptosystems receiver private key keeps secret corresponding public key including access 
sender uses public key encrypt information intended uses private key decrypt encrypted message 
private key derived public key system broken 
private public keys consist hard break system depends type asymmetric key cryptosystem 
cryptanalytic historic reasons distinguish types 
classical asymmetric systems 
subgroup discrete logarithm systems 
elliptic curve systems 

classical asymmetric systems refer rsa due rivest shamir adleman traditional discrete logarithm systems diffie hellman scheme elgamal systems 
rsa description 
rsa public key contains large non prime number called rsa modulus 
chosen product large primes 
primes private key breaking system 
security rsa difficulty integer factorization problem 
size rsa key refers bit length rsa modulus 
confused actual number bits required store rsa public key usually slightly 
tdl description 
traditional discrete logarithm tdl system public key consists finite field fp size generator multiplicative group fp fp element fp equal 
assume field size prime factor roughly order magnitude private key smallest positive integer referred discrete logarithm respect private key 
system broken 
security tdl systems difficulty computing discrete logarithms multiplicative group finite field 
size tdl key refers bit length field size actual number bits required store tdl public key larger public key contains 
arrangement 
maximal rsa modulus size maximal field size allowed arrangement bits rsa moduli attacks 
factoring rsa modulus exhaustive search amounts trying primes finding discrete logarithm exhaustive search requires order operations fp 
exhaustive search best attack systems bit rsa moduli bit give security comparable des 
efficient attacks exhaustive search larger keys required 
surprisingly methods attack entirely different problems similar reason treat rsa tdl systems category 
fastest factoring algorithm published today number field sieve invented john pollard 
originally factor numbers special form ninth fermat number factored 
original version currently referred special number field sieve opposed general number field sieve nfs handle numbers arbitrary form including rsa moduli 
heuristic grounds nfs expected require time proportional 
ln ln ln factor rsa modulus term goes zero goes infinity 
run time called subexponential goes infinity 
storage requirements nfs proportional expected run time follows replacing faster nfs attack rsa moduli 
prime number discrete logarithm variation nfs finds discrete logarithm fp expected time proportional 
run time estimates directly estimate number operations required factor certain compute discrete logarithms certain fp 
instance size current range interest approximately equal omitted discrete logarithm problem fp considerably difficult factoring shown extensive experiments estimates limited range extrapolation 
knows experimentation factoring rsa modulus nfs takes time factoring rsa modulus take time close omitting sizes differ 
bigger effect going zero longer ignored overestimate time factor cf 

run time extrapolation method applies 
nfs background 
better appreciation security offered classical asymmetric systems comparing asymmetric systems describe details nfs 
consists major steps sieving step matrix step theory take equal amount computing time goes infinity 
numbers current range interest matrix step takes fraction computing time sieving step 
sieving step evenly distributed number processors hardly need communication resulting linear speedup 
computing power required sieving step large scale factorizations principle quite easily obtained loosely coupled network computers internet 
matrix step hand allow straightforward parallelization 
situation worse 
nfs sieving matrix steps theory equally hard matrix step orders magnitude time memory consuming nfs matrix step 
currently matrix step considered major bottleneck obstructing substantially larger factorizations mildly interesting discrete logarithm computations 
efforts underway implement fast high bandwidth network pcs 
effectiveness approach uncertain early experiments look encouraging cf 
reason believe successful 
software data points 
largest published factorization nfs bit number rsa rsa modulus decimal digits august cf 

factoring effort estimated cost years pc mbytes memory single day pcs 
time spent entirely sieving step 
mips years corresponds fewer operations omitting 
shows overestimates number operations carried factorization run time actual run time rsa factoring effort confused estimates appeared time times high cf 

largest number factored digit bit number april slightly mips years 
run times fraction cost software des key search amount memory needed nfs orders magnitude larger 
practical experience limited 
generally accepted current range interest factoring bit integers takes amount time computing discrete logarithms bit fields small constant 
going infinity distinction hardness bit factoring bit discrete logarithms 
separate key size suggestions tdl systems recommend rsa key size suggestions tdl systems 
special purpose hardware data points 
special purpose hardware devices occasionally proposed time consuming step factoring algorithms sieving step nfs useful data points published 
adi shamir proposed electronic sieving device cf 

device feasible affect asymptotic run time nfs affect matrix step 
due complexity underlying factorization algorithms corresponding hardware design special purpose hardware factoring device difficult achieve parallelization reasonable cost scale comparable hardware attacks des may impossible 
time specialpurpose design operational conceivable longer competitive due new algorithmic insights faster general purpose processors 
current state art consider special purpose hardware noticeable impact security rsa moduli 
find ignore possibility altogether warn strong reliance belief specialpurpose attacks rsa impossible 
illustrate quadratic sieve factoring method implemented successfully single instruction multiple data architecture cf 

simd machine means special purpose hardware relatively cheap compared ordinary pcs 
effectiveness guessing 
obviously key sizes classical asymmetric systems larger obtain security size broken rsa modulus rsa 
may safely assumed breaking system guesswork question require correctly guessed bits rsa bits tdl 
point view classical asymmetric systems secure symmetric key cryptosystems 
rsa story shown 
incomplete attacks 
nfs effective run completion 
chance results obtained early 
rsa attacked elliptic curve method ecm 
relatively small amount method produces factor substantially higher probability mere guesswork 
give example people attack bit rsa modulus running ecm just hour pc probability factor modulus 
bit rsa modulus probability success computational effort 
admittedly low success probability tremendous effort success probability orders magnitude larger guessing amount order magnitude 
discrete logarithm equivalent ecm published 
details ecm run time predictions scope article 
see 
cryptanalytic progress 
classical asymmetric systems prime example systems effectiveness cryptanalysis steadily improving 
current state art factoring discrete logarithm algorithms interpreted culmination years research just snapshot progress 
may due relative complexity methods independent improvements refinements doubt 
illustrate point list developments early seventies substantial effect difficulty factoring computing discrete logarithms continued fraction method linear sieve quadratic sieve multiple polynomial variation gaussian integers loosely coupled parallelization multiple large primes special number field sieve structured gaussian elimination number field sieve singular integers lattice sieving block lanczos conjugate gradient sieving polynomial selection nfs parallelized block lanczos 
find reasonable assume trend continuous algorithmic developments continue years come 
proved breaking rsa equivalent factoring rsa modulus 
rsa evidence equivalence hold socalled public exponent part rsa public key small 
explicitly assume breaking rsa equivalent factoring rsa modulus 
results area public exponent rsa sufficiently large 
popular values longer recommended commonly values fine 
prefers stay safe side may select odd bit bit public exponent random 
furthermore restrict tdl protocols attacks provably equivalent computing discrete logarithms solving diffie hellman problem 
strong evidence problem equivalent computing discrete logarithms 
subgroup discrete logarithm systems description 
subgroup discrete logarithm sdl systems traditional discrete logarithm systems generates relatively small sufficiently large subgroup multiplicative group fp idea due schnorr 
size subgroup prime indicated private key 
security sdl difficulty computing discrete logarithms subgroup multiplicative group finite field 
computed discrete logarithms full multiplicative group computed 
security sdl system relies sizes size sdl key simply refers bit length subgroup size field size context 
actual number bits required store sdl public key substantially larger sdl key size public key contains 
arrangement 
maximum sdl field size allowed arrangement bits maximum allowed key size 
popular subgroup size bits 
choice digital signature algorithm field sizes varying bits 
attacks 
methods attack tdl systems attack sdl systems 
field size satisfy security requirements tdl systems 
subgroup discrete logarithm problem attacked directly pollard rho method dates older baby step method 
methods applied group long group elements allow unique representation group law applied efficiently rely special properties group element representations may 
expected run time pollard rho method exponential group operations multiplications fp 
storage requirements small 
method needs number operations needs storage group elements 
pollard rho method easily parallelized number processors limited communication resulting linear speedup cf 

illustration power parallelization reason keep track computational power internet 
furthermore post processing involved pollard rho dl nfs completion sieving step cumbersome matrix step carried parallelized version substantial amounts storage space available central location 
data points 
able find useful data effectiveness attack sdl systems parallelized version pollard rho method 
figures adaptation data points elliptic curve systems 
described detail 
effectiveness guessing 
long sdl keys shorter bits permitted arrangement ec systems see guessing private key requires guessing bits may safely assumed infeasible 
incomplete attacks 
success probability pollard rho method roughly speaking proportional square fraction performed chance key performing fraction expected 
group operations 
doing percent yields percent success rate 
cryptanalytic progress 
invention pollard rho method new results obtained threaten sdl systems exception efficient parallelization pollard rho method 
reasonable extrapolation rate algorithmic progress assume substantial progress 
progress necessarily imply entirely new approach may instantaneously wipe practical sdl systems 
results certain generic model computation pollard rho method essentially best may context :10.1.1.17.8074
kept mind generic model apply practical situation aware possibility subexponential attack sdl systems ruled 

elliptic curve systems description 
elliptic curve ec systems sdl systems generates subgroup group points elliptic curve finite field fp idea independently due koblitz miller 
size subgroup generated prime private key range 
security ec systems difficulty computing discrete logarithms subgroup group points elliptic curve finite field 
computed discrete logarithms full group points elliptic curve finite field computed 
problem known ecdl problem 
better method solve ecdl problem known solving problem cyclic subgroups combining results 
difficulty ecdl problem depends size largest prime divisor order group points curve close 
reason usually chosen sizes close 
security ec systems relies size size ec key refers bit length subgroup size actual number bits required store ec public key may substantially larger ec key size public key contains 
description group points elliptic curve finite field points represented operated scope article 
discuss appropriate elliptic curves finite fields selected 
arrangement 
maximum ec key size allowed arrangement bits unspecified field size 
prime fields popular size bits field size subgroup size 
non prime fields popular choice bit attacks 
equivalent subexponential method attack ec systems published 
efficient method published attack ec systems pollard parallelizable rho method expected run time group operations 
run time exponential field inversions properly handled average number field multiplications group operation approximately 
software data points 
assumed order magnitude cost group operation proportional log data effectiveness attack pollard rho method www com chal 
estimates derive bit ec system take years pc equivalently year pcs 
computation feasible large network computers 
follows www com chal attack bit ec system prime bits take 
underestimate primes special form overly optimistic general primes cf 

basis extrapolations estimate effort required software attacks larger ec systems prime fields cf 

special purpose hardware data points 
attack bit ec system sketched published years cf 
specialpurpose hardware design achieves fold parallelism specialpurpose processor chips running independent pollard rho processes 
building machine cost run time days 
designers claim attacker better current silicon technology optimization may obtained pipelining 
hand www com mentioned bit ec systems expected infeasible realistic software hardware attacks bit systems bit fields times harder break bit systems bit fields 
attempt reconcile possibly contradictory evaluations 
pipelined design considered 
effectiveness guessing 
long ec keys shorter bits permitted arrangement guessing private key requires guessing bits may safely assumed infeasible 
incomplete attacks 
pollard rho attack sdl systems chance key performing fraction expected group operations 
expected number iterations smaller sdl systems due result independently described :10.1.1.47.3862
cryptanalytic progress 
remarks sdl systems apply exception result :10.1.1.47.3862
unreasonable assume substantial progress years come 
ec systems feel comfortable ec related cryptanalytic results obtained quite regularly 
far results affected special cases curves order group points special properties 
user hardly ec systems relatively complicated designers apply special cases avoid nasty implementation problems 
figures explicit assumption curves picked random special cases curves prime fields 
hard find researchers find ec systems long fully trust rich mathematical structure elliptic curves may surprises store 
argue ecdl problem studied extensively lack progress affecting ec systems indicates sufficiently secure 
want take position argument simply suggest key sizes ec systems cryptanalytic progress cryptanalytic progress rate comparable rsa tdl systems despite fear conviction new cryptanalytic insight ec systems subexponential method may prove fatal 
reader may interpolate types extrapolations taste 

cryptographic hash functions description 
cryptographic hash function function maps arbitrary length message fixed length hash message satisfying various properties scope article 
size hash function length bits resulting hash 
examples cryptographic hash function md md size sha size 
attacks 
cryptographic hash functions attacked describe successful attack exactly called birthday paradox attack 
number hash function applications required successful attack expected proportional size hash function 
assume cryptographic hash functions collision resistant 
hash functions target collision resistant sizes may halved assuming hash function properly 
software data points 
pentium cycles reported md md sha respectively 
compares cycles des depending fixed variable keys cf 

software speed hash function application birthday paradox attack comparable software speed single des block encryption 
special purpose hardware data points 
special purpose hardware designed hash functions 
may assume speed comparable speed special purpose exhaustive key search hardware 
cryptanalytic progress 
assume existence generic cryptographic hash function birthday paradox attack best attack 
proposed design allows faster attack assume longer 
assume exhaustive key search attack generic symmetric key cryptosystem key size expected take time birthday paradox attack generic cryptographic hash function size 
lower bound size cryptographic hash functions follows doubling lower bound size symmetric key cryptosystems 
simple rule thumb sizes cryptographic hash functions discussed sequel 
speeds differ adjust accordingly 

model 
key points choice cryptographic key sizes depends primarily points life span expected time information needs protected 
ii 
security margin acceptable degree infeasibility successful attack 
iii 
computing environment expected change computational resources available attackers 
iv 
cryptanalysis expected developments cryptanalysis 
efficiency storage considerations may influence choice key sizes directly security related discussed 

life span table figures section key sizes suggested cryptosystems discussed section depending expected life span cryptographic application 
user responsibility decide year protection effective expected life span corresponds popular security measures short term medium term long term security 

security margin cryptosystem assumed secure considered sufficiently infeasible mount successful attack 
unfortunately hard quantify precisely meant sufficiently infeasible 
instance decide key size certain cryptosystem secure current applications breaking say times harder largest key size currently broken cryptosystem 
problems approach 
choice arbitrary 
secondly reason believe largest key broken far accurately represents best currently done 
third place cryptographic primitives considered data may available tdl sdl may outdated ruling uniform application approach 
problem fixed security margin users prefer different choice 
opt different approach offering flexible choice security margin 
definition security margin defined year user willing trust des 
rationale definition security margin security offered des users relate instance des certain year 
furthermore different choices allow satisfy different security needs 
advantage choice security margin discussed 
default setting 
des introduced stipulated reviewed years assume des sufficiently secure commercial applications 
default setting 
default setting assumes computational effort provided adequate security margin commercial des applications software attacks cf 

far hardware attacks concerned default setting assumes days des key searching machine cf 
serious threat commercial applications des 
stress commercial applications budgets days means insurmountable obstacle certain organizations 
default setting discussed cf 

results default setting easily derive key size recommendations reasonable value indicated done 

computing environment estimate computing power available attackers may change time moore law 
moore law states density components integrated circuit doubles months 
widely accepted interpretation law computing power chip doubles months 
skepticism law hold longer new technologies eventually developed keep 
allow user define slight variation moore law technology dependent 
definition ii 
variable defined number months takes average expected fold processor speed memory size increase 
definition iii 
valued variable defines interpreted 
amount computing power random access memory ram gets dollar expected double months 
amount computing power ram expected double irrespective price 
default setting ii 
default setting corresponds popular interpretation moore law 
default setting iii 
default setting leads technology dependent version moore law may hold moore traditional law longer holds technological limitations 
far default settings sufficiently accurate months amount computing power ram gets dollar doubles 
default settings follows cost expects get factor computing power fast memory years software multipurpose chips pcs special purpose hardware 
illustrate unreasonable assume cheaper slower version days des key searching machine dollar days machine times hardware times slower 
default settings dollar machine may expected times faster months 
version need days hours close hours required wiener dollar design 
hand extrapolation suggests dollar machine may expected take hours machine take hours times faster machine built cf 

anomaly due fact building machine relatively speaking small scale enterprise doubling budget performance 
obviously nonlinear improvement applies long device relatively small 
assumed computational resources available attackers double months budgets immediately relevant 
effect budget increases inflation taken account 
leads definition 
definition iv 
variable defined number years takes average expected fold increase budget 
default setting iv 
default setting gross national product shows trend doubling years measured dollars measured dollars default settings leads assumption budgets organizations including ones breaking cryptographic keys doubles years 
combination defaults settings ii ii iv 
amount computing power assumed infeasible invest attack commercial cryptographic application infeasible 
furthermore infeasible infeasible 
figures agree odlyzko estimates computing power may available internet cf 
:10.1.1.47.3862
estimates obtained entirely different fashion 

cryptanalysis indicated cryptanalytic progress paragraphs section impossible say cryptanalytic developments take place taken place 
find reasonable assume pace published cryptanalytic findings impact going vary dramatically compared seen 
allow flexibility choice expected cryptanalytic progress 
definition number defined number months expected take average cryptanalytic developments affecting classical asymmetric systems twice effective months may expect attacking classical asymmetric system costs half computational effort costs today 
default setting default setting corresponds closely cryptanalytic progress affecting classical asymmetric systems past years 
definition vi 
number defined number months expected take average cryptanalytic developments affecting ec systems twice effective case ec cryptanalytic progress expected 
default setting vi 
default setting substantial cryptanalytic progress affecting ec systems assuming system properly chosen cf 

cryptanalytic progress affecting sdl systems invention pollard rho method parallelization progress affecting full multiplicative group assume cryptanalytic progress affecting sdl systems 
ec systems situation similar properly chosen parameters progress speak years chose allow progress ec cryptanalysis default progress sdl systems hard find researchers find ec cryptanalytic progress 
find realistic exclude possibility cryptanalytic progress affecting classical asymmetric systems assumed strictly positive 

software versus special purpose hardware attacks proposed key sizes section obtained combining default settings vi software mips years data points section 
implies extrapolations software attacks result computationally equivalent key sizes cf 

may object take special purpose hardware attacks account 
discuss extent reasonable decision results interpreted take special purpose hardware attacks account 
symmetric key systems 
des broken cost days key searching machine 
shown consistent default setting ii wiener design 
reasonable assume des attack comparable attack days hardware default setting ii day hardware 
follows relation software special purpose hardware attacks des changed 
particular assumes des sufficiently resistant special purpose hardware attack holds symmetric key sizes suggested extrapolations software attacks 
note estimates resulting cost special hardware designs exhaustive key search consistent estimates 
ec systems 
cost software attack bit ec system estimated attacking bit ec system take times mips years 
days hardware design attacking bit ec system cf 
comparable 
designers hardware device design older technology improved technology 
default setting ii upgraded days hardware design comparable 
follows ec attack comparable day hardware 
find equivalent day hardware depending ec des attack 
consistency conversions tempting suggest approximately equivalent day hardware generally equivalent day hardware year equivalent day hardware 
conversion formula allow go back forth software special purpose hardware attacks entire model applicable hardware attacks 
opinion consistency conversions mere coincidence practical merit 
place estimate holds relatively simple minded des ec cracking devices elliptic curves non prime fields elliptic curves prime fields certainly pcs 
prime fields hardware considerably slower software ec systems prime fields attacked faster non prime fields cf 

special purpose hardware attacks ec systems prime fields consistency longer holds 
second place pipelined version ec attacking special purpose hardware referred times faster means special purpose hardware attacks ec systems non prime fields consistency des ec attacks lost 
prime field version pipelined device times slower non prime field version 
noted details pipelined device published published cf 

mentioned consider ec systems randomly selected curves prime fields 
may base recommendations software attacks software data point bit ec system attacked cf 

seen follows 
underestimates true cost lower cost attack non prime field equivalent size 
done non pipelined special purpose hardware way consistent des infeasibility assumption argued 
special purpose hardware non prime field attacked faster prime field equivalent size naive des consistent hardware conversion hypothetical special purpose hardware follows extrapolation larger prime fields substantially underestimates true hardware cost 
means resulting key sizes going large acceptable deriving lower bounds key sizes cf 

realistic prime field equivalent non des consistent pipelined device fields figures times slower hypothetical hardware 
implies realistic hardware lead lower key sizes hypothetical hardware 
acceptable stick cf 

follows assumes des sufficiently resistant special purpose hardware attack year indicated security margin holds ec key sizes suggested extrapolations software attacks 
sdl systems 
holds sdl systems analysis sdl key sizes ec analysis described 
classical asymmetric systems 
classical asymmetric systems consider special purpose hardware attacks argued 
issue software attacks classical asymmetric systems versus special purpose hardware attacks cryptosystems discussed 
equipment cost comparison software special purpose hardware attacks 
key size recommendations computationally equivalent cf 
argued offer security equivalent security des default setting software special purpose hardware attacks 
necessarily imply key sizes various cryptosystems cost equivalent cf 
equipment costs software specialpurpose hardware attacks des necessarily equal 
point view accessing hardware required software attacks ultimately essentially free 
supported internet cryptosystem attacks far large computational internet projects seti 
adoption simple minded rule computational cost equivalence identical certainly generally acceptable cf 

unfortunately precise equipment cost comparison exact analysis primarily precise cost pc truly complete analysis carried pipelined ec attacking design cf 

pointed reasons decided computational equivalence basis results 
sketch analysis cost equivalence carried 
definition vii 
number defined price dollars stripped pc megabytes ram 
stripped pc mean mhz pentium ii processor mother board communications hardware 
default setting vii 
default setting 
newspaper advertisements fully equipped pcs bought prices varying 
free machines support point view software attacks free 
default setting assumes want deal strings attached free machines wholesale extrapolation current prices 
choice disregards possibility larger quantum discount able negotiate large order 
assuming default setting vii software mips years equivalent day hardware 
compared exhaustive key search day day hardware software mips year times expensive 
compared pipelined day day hardware attack ec systems non prime fields software mips year times expensive times expensive prime field version pipelined design 
follows purposes software mips years times expensive mips years produced special purpose hardware 
shown factor derive equipment cost equivalent key sizes computationally equivalent ones 
note factor taken large grain salt 
scientific merit opinion questionable presumed infeasibility special purpose hardware attacks rsa cf 
pipelined design 

memory considerations processors contributing parallelized exhaustive key search require substantial amount memory 
case processors involved parallelized attack pollard rho method sdl ec systems 
parallelized version pollard rho method substantial storage space available central location assume storage requirements taken account estimate sdl ec system key sizes 
parallelized nfs attacks classical asymmetric systems contributing processors needs large amount ram speed compatible processor speed 
memory access times processor speeds determined effective run times nfs sieving step twice faster clock rate result marginally faster sieving 
sieving step consists constant updates random locations large chunk memory allow efficient caching 
straightforward extrapolation nfs run times faster processors impossible 
surprisingly newer generations processors suffer drawback type sieving mainly result 
instance speed nfs lattice sieving pentium processors grows strictly linearly processor speed interesting super linear speed moving pentium pentium ii processors 
illustrate important point average sieving step operation takes seconds mhz pentium seconds mhz pentium seconds mhz pentium ii seconds mhz pentium ii processors execute binary uses mb mb rams cf 

may due improvement processors inspired bulky unwieldy operating systems currently enjoy increasing popularity 
may consequence relatively compute intensive nature lattice sieving technique 
case reason extrapolate nfs run times standard fashion 
amount memory required nfs grows squareroot run time 
cf 
definition ii assumed strictly positive available ram grows linearly processor speed 
current processors general memory problems currently solved nfs may assume processors memory tackle problems 
combining observations conclude nfs memory requirements explicitly taken account extrapolating nfs run times processors larger rsa moduli field sizes 

security margin incomplete attacks understood definition security margin takes account probability success incomplete attacks 
trusting des implies finds sufficiently resistant types potential attackers 
spectrum hand attackers search fraction close key space hand attackers search fraction close key space 
assumed expensive carry assumed probability success low 
note success probability exhaustive key search proportional fraction key space searched cf 
pollard rho method probability success proportional square fraction performed cf 

incomplete attack ec sdl systems smaller probability success similarly incomplete attack des 
ec sdl key sizes may expected satisfy certain security margin offer resistance incomplete attacks equivalent resistance offered des 
furthermore incomplete attacks rsa dl expected successful cf 
conclude effect incomplete attacks effectively taken care model 
see 

expect agrees default settings 
particular default setting debatable 
note assume des 
assumes des offered security commercial applications funded government agencies unable break back 
context may entertaining mention mike wiener presenting hours hardware design cryptography conference told done nice piece offered similar machine cost catch years old cf 

case feels default infeasibility assumption weak strong resulting key size recommendations 
explained may done 
expect agrees default settings ii iii iv 
argue moore law hold longer cf 
find big machines moore law pessimistic 
default settings ii iii iv represent reasonable compromise 

lower bound estimates cryptographic key sizes section formulas derive lower bounds cryptographic key sizes 
concentrate key size recommendations expected offer acceptable security margin year specified user 
described key size recommendations derived expected offer level security currently time writing article equivalent symmetric key size specified user 
progress parameters measured months corresponds way moore law formulated 
time measured years security margin principle adopt finer granularity instance precise data point bit rsa modulus broken 
opinion give misleading sense precision inappropriate article 

key size formulas year suppose key sizes determined achieve specified security margin year breaking des takes mips years 
amount computation offered acceptable level security year definitions iv follows year years amount computation imy mips years offers acceptable level security 
factor due expected processor speed period year year factor reflects expected increase budget available attacker 
resulting value imy stands infeasible number mips years year derive key sizes offer acceptable level security year cryptographic primitives considered section 
symmetric key cryptosystems introduce possibility speed symmetric key system different speed des 
definition viii 
variable defined ratio number cycles required single block encryption des symmetric key system user wishes 
default setting viii 
default setting 
symmetric key system times slower des attacking goes times slower 
follows symmetric key system key log imy log bits security offered symmetric key system year computationally cost equivalent security offered des year classical asymmetric systems asymptotic run time nfs omitting combined data point bit key broken cost mips years cf 

furthermore expect cryptanalytic progress factor compared state art year data point 
follows classical asymmetric key size chosen imy security offered classical asymmetric systems year computationally equivalent security offered des year hand classical asymmetric key size chosen imy security offered classical asymmetric systems year cost equivalent security offered des year cf 

data point overestimates cost factoring bit key omit difficulty breaking classical asymmetric systems overestimated cf 
classical asymmetric key sizes larger table 
attempt correct may regarded reasonable compensation matrix step nfs cf 

computations involved breaking systems discussed step parallelization published making application nfs cumbersome compared exhaustive key search pollard rho 
ec systems expected growth rate number group operations required pollard rho method expected growth cost group operations optimistic estimate bit ec system broken 
furthermore expect cryptanalytic progress factor compared state art year data point 
set 
follows ec key size chosen imy security offered ec systems year computationally cost equivalent security offered des year factors account relatively speed arithmetic operations performed pollard rho method 
sdl systems finite field size equal 
suitable sdl data points available estimate arithmetic operations bit finite field times expensive arithmetic operations elliptic curve group bit finite field 
sdl iterations pollard rho method may expected ec systems follows subgroup size satisfies imy finite field size security offered sdl systems year equivalent security offered des year computationally equivalent cost equivalent 
note expression equivalent log imy 
resulting sizes large estimate low side 
optimism small extent corrected optimistic choice field multiplications accurate cf 

follows straightforward analysis resulting subgroup size required difficulty multiplication field size takes pentium clock cycles 
experiments reasonably fast non optimized software field multiplication done pentium clock cycles resulting subgroup sizes bits large cf 

years ranging default settings resulting computationally equivalent key size recommendations table 
furthermore table contains key size recommendations cryptanalytic progress affecting ec systems comparable default setting cryptanalytic progress affecting classical asymmetric systems 
growth rates various key sizes table illustrated figures article 
cost equivalent key size recommendations see 

remarks computation table 
strictly speaking data years sense ec column know random curves prime fields progress occur 
data table italics 
described circumstances data data italics may 

data table change significantly bit mips years data point replaced instance bit mips years digit factorization bit mips years factorization rsa challenge despite mips years overestimates time took break rsa challenge 
validates default setting cryptanalytic progress affecting classical asymmetric systems 

table assuming agrees default settings table follows 
suppose develops commercial application confidentiality integrity electronic information guaranteed years year 
looking row year table finds amount computing mips years year may considered infeasible mips years 
security computationally equivalent cf 
security offered des obtained year symmetric keys bits hash functions bits rsa moduli bits meaning second entry column explained 
subgroup discrete logarithm systems subgroups bits finite fields bits 
elliptic curve systems prime fields bits confident cryptanalytic progress take place bits prefers careful 
finite fields sdl ec systems allow significantly faster arithmetic operations suggested estimates data table field arithmetic goes times faster keys roughly log bits larger indicated table 
noted field arithmetic assumed quite fast 
similarly agree data point ec systems underestimates actual cost overestimated cost factor attack bit ec systems add roughly log bits suggested ec key sizes 
table lower bounds computationally equivalent key sizes assuming symmetric classical key size asymmetric key size sdl field year size subgroup discrete logarithm key size elliptic curve key size progress infeasible number mips years lower bound hardware cost day attack cf 
corresponding number years mhz pc 
alternative security margin default setting assumes des offered security commercial applications year 
corporations des late nineties resulting default infeasibility assumption may strong 
may weak 
explain table look key sizes year example trusts des year negative infeasibility assumption considered weak positive 
assume default settings parameters 
example trusts des 
symmetric keys take entry year example 
resulting symmetric key size suggestion bits 
classical asymmetric keys take entry year example 
bit rsa tdl keys 
sdl keys take classical asymmetric key size year sdl size year classical asymmetric key size year subgroup size log log field size 
example subgroup size log log bits bit field 
ec systems take entry year example 
resulting ec key size suggestion bits 
ec systems take entry year example 
resulting ec key size suggestion bits 
table entries italics years may application italics entries may 
correctness methods seen follows 
denoting classical asymmetric key size recommendation certain year security margin want find year 
definition imy way chosen follows find default settings 
results follow way 

equipment cost equivalent key sizes table derive equipment cost equivalent key sizes manner default settings 
lower bound equipment cost successful day attack second column table year dollars year symmetric key sizes derived definition security margin imply sufficient resistance software special purpose hardware attacks 
ec key sizes estimates cost consistent symmetric key sizes cf 

systems corrections necessary 
classical asymmetric systems mips years supposedly times expensive 
computational purposes equivalent assuming des offers acceptable security close default setting 
classical asymmetric key sizes equipment cost equivalent symmetric ec key sizes year table classical asymmetric key size column year 
resulting key sizes rounded nearest multiple second entry classical asymmetric key sizes column table 
breaking keys requires substantially smaller number mips years infeasible number mips years year acquiring required mips years supposed prohibitively expensive 
subgroup discrete logarithm systems year subgroup finite field size respectively year finite field size year 
cost equivalence symmetric ec key sizes year subgroups size log log finite fields size 
rule thumb subgroups size finite fields size 
example year key sizes equipment cost equivalent bit symmetric keys bit classical asymmetric keys bit subgroups bit finite fields bit ec keys 
similar straightforward analysis carried setting parameter instance changed respectively 

formulas key sizes currently equivalent symmetric key size suppose key sizes determined currently equivalent symmetric key size note resulting formulas independent assumptions security margin hardware advances cryptanalytic progress 
settings settings relevant current circumstances 
compared breaking bit des key expected cost mips years breaking key size conjunction symmetric key system times slower des expected take emy mips years emy stands equivalent number mips years 
classical asymmetric key size chosen emy security offered classical asymmetric systems currently computationally equivalent security offered symmetric key size classical asymmetric key size chosen emy security offered classical asymmetric systems currently cost equivalent security offered symmetric key size ec key size chosen emy security offered ec systems currently computationally cost equivalent security offered symmetric key size sdl subgroup size satisfies log emy finite field size security offered sdl systems currently equivalent security offered symmetric key size computationally equivalent cost equivalent 
formulas obvious formulas obtained key sizes equivalent symmetric key size year formulas imy replaced emy 
assuming default settings table look key sizes follow formulas 
symmetric key size asymmetric key sizes currently computationally equivalent looked follows 
classical asymmetric systems look classical asymmetric key size year 
formula follows solving equation emy imy cf 

systems year table occurs symmetric key size column 
sdl look sdl key size year classical asymmetric key size year classical asymmetric key size year subgroups size log log field size offer security currently computationally equivalent year symmetric keys size ec simply look ec key size year 
classical asymmetric key size currently computationally equivalent symmetric key size looking year occurs symmetric key size follows immediately 
example symmetric key size find 
currently computationally equivalent key sizes bits classical asymmetric keys subgroups size bits fields ec systems bits 
similarly classical asymmetric key size find currently computationally equivalent symmetric key size 
corresponds currently computationally equivalent ec key size bits 
symmetric key size asymmetric key sizes currently cost equivalent looked similar way just replace formula follows solving equation emy imy consequently 
default setting 
example symmetric key size find 
currently cost equivalent key sizes bits classical asymmetric keys subgroups size bits fields ec systems bits 
similarly classical asymmetric key size find currently cost equivalent symmetric key size 

practical consequences table 
dss digital signature standard dss uses bit subgroups field sizes ranging bits bit hash function 
table sizes recommended commercial applications year field size hash function subgroup size 
assuming default settings security offered dss may questionable soon dss combination bit finite field 
change field size affect size dss signatures 
bit size sha cryptographic hash function conjunction dss may longer adequate 
note hash size may match subgroup size changing hash size may force change subgroup size necessary 
nist working revision dss key sizes reported table hash size matching size 
table proposed key sizes revised dss size size values close agreement values follow current cost equivalence model 
follows table sizes grow faster proposed table current cryptanalytic trends persist equivalence sizes maintained 

effect cryptosystem speed rsa keys supposed secure times larger popular bit rsa keys currently secure 
large keys times slower signature verification encryption assuming fixed length public exponent corresponding signature generation decryption 
tdl systems slowdown factor compared currently secure 
sdl systems slowdown factor compared currently secure sdl systems growth underlying finite field combined growth subgroup size 
speed ec systems hardly affected slowdown factor assuming cryptanalytic progress 
years faster processors solved performance problems default setting turns reasonable 
note may case restricted environments smartcards bandwidth power consumption constraints limiting effect key sizes 

bit rsa keys despite fact considered suspicious bit rsa keys widely web 
instance bit rsa moduli international version secure socket layer ssl secured exchange session keys 
attacker breaks ssl rsa modulus able access session keys ssl server information protected keys 
table bit rsa keys 
noted apart security risk bit rsa keys considerable publicity risks organizations may get bad media coverage bit rsa key factored august 
result published factorization bit rsa modulus na believe time factorization obtained 

bit rsa keys table usage bit rsa keys longer recommended 
equipment cost equivalent model bit rsa keys soon longer offer security comparable security des 

rsa ec evaluates omitting result close number bit operations performed attack pollard rho method bit ec system 
shown substantially overestimates actual number operations performed nfs factorization commercial cryptographic literature bit rsa bit ec systems advertised offering level security 
interested currently computationally equivalent security bit rsa bit ec systems bit rsa bit ec systems may considered comparable follows example 
currently cost equivalent security second example suggests bit bit rsa bit ec systems may comparable 
comparison depends strongly setting deems reasonable parameter explained 

sdl ec gap suggested sdl ec key sizes widens slowly cf 

due rapidly growing size underlying finite fields sdl finite field operations required attack pollard rho method relatively slow 
note field size sdl systems classical asymmetric key size column 

effectiveness guessing sizes suggested table year practice infeasible guess 

effectiveness incomplete attacks spending fraction imy full effort imy required break system key sizes suggested year leads success probability exhaustive search symmetric systems cf 
dl nfs classical asymmetric systems ecm see pollard rho method sdl ec cf 

implies average incomplete attacks expected pay 
despite lack appreciable economic incentive attacker may try harness small fraction required run time get non negligible chance efforts bear fruit 
noted definition security margin cf 
acceptable risk acceptable 

effectiveness elliptic curve method elliptic curve method ecm finds bit factor bit number probability spending mips years assumption factor exists cf 

data point computed probability ecm successfully factors rsa moduli sizes specified table assuming invest corresponding imy mips years factoring attempt bit rsa modulus probability success spending mips years deteriorating probability bit modulus bits 
follows despite large investment ecm expected break keys suggested sizes 
ecm success probability vanishes years consistent fact nfs asymptotically superior ecm 

arrangement mass market applications currently arrangement allows bit symmetric keys bit classical asymmetric keys mass market applications 
table publicly available data successful attacks advisable increase bit bound classical asymmetric keys reasonable bound bits 
disclaimer 
contents article sole responsibility authors employers 
authors employers accept responsibility cryptographic key sizes suggested article 
authors financial material interests attained article inspired sponsored party commercial interests cryptographic key size selection 
data article obtained stage approach strictly adhered formulation model collection data points followed computation lower bounds 
attempt alter resulting data better match authors possibly expectations taste 
authors attempt unbiased choice favorite cryptosystem 
analysis resulting guidelines quite robust longer case chart cryptanalytic computational progress affecting cryptosystems considered 
authors strong long term reliance current cryptosystem strong physical protection keys involved including public ones 

authors want joe buhler bruce stuart haber paul alfred menezes andrew odlyzko michael wiener paul zimmermann helpful remarks don johnson bringing attention 

ross anderson cryptosystems fail comm 
acm nov 

eli biham fast new des implementation software 

blaze diffie rivest schneier thompson wiener minimal key lengths symmetric ciphers provide adequate commercial security www bsa org policy encryption cryptographers html january 

faster hashing pentium manuscript katholieke universiteit leuven may 

brazier possible nsa decryption capabilities com nsa study htm 

lenstra murphy montgomery te factorization bit rsa modulus manuscript october 

www com speed html 

desmedt quisquater efficient hardware software implementations des proceedings crypto 

diffie report 

diffie hellman exhaustive cryptanalysis nbs data encryption standard computer 

dixon lenstra factoring integers simd proceedings eurocrypt lncs 

electronic frontier foundation cracking des reilly july 

rob gallant personal communication august 

gallant lambert vanstone improving parallelized pollard lambda search binary anomalous curves available www com chal download ps 

johnson ecc resiliency high security systems march available www com 

kocher breaking des rsa laboratories cryptobytes www rsa com pubs cryptobytes 

kocher personal communication september 

lenstra shamir analysis optimization factoring device manuscript october 

personal communication september 

menezes personal communication september 

montgomery letter editor ieee computer august 

complexity determinate algorithm discrete logarithm mathematical notes 
translated 
result dates back 

circuits hold prospect explosive computer speeds new york times july chip designers look life silicon new york times july 

odlyzko integer factorization rsa laboratories cryptobytes www research att com amo doc crypto html www rsa com pubs cryptobytes 

shamir factoring integers device manuscript april 

shor algorithms quantum computing discrete logarithms factoring proceedings ieee th annual symposium foundations computer science 

shoup lower bounds discrete logarithms related problems proceedings eurocrypt lncs 

silverman rump session presentation crypto 

silverman 
exposing mythical mips year ieee computer august 

van oorschot wiener parallel collision search cryptanalytic applications journal cryptology 

wiener efficient des key search manuscript bell northern research august 

wiener performance comparison public key cryptosystems rsa laboratories cryptobytes www rsa com pubs cryptobytes 

wiener personal communication 

wiener faster elliptic curve cryptosystems 
meijer eds selected areas cryptography lncs 

zimmermann personal communication 

suggested lower bounds key sizes symmetric key cryptosystems 

suggested lower bounds key sizes classical asymmetric key systems 

suggested lower bounds key sizes subgroup discrete logarithm elliptic curve systems 

