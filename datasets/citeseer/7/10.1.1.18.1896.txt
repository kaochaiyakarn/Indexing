internet congestion control high bandwidth delay product environments dina mark handley charlie mit lcs icsi dk mit edu icsi berkeley edu mit edu theory experiments show flow product bandwidth latency increases tcp inefficient prone instability regardless queuing scheme 
failing increasingly important internet evolves incorporate high bandwidth optical links large delay satellite links 
address problem develop novel approach internet congestion control outperforms tcp conventional environments remains efficient fair scalable stable bandwidth delay product increases 
new explicit control protocol xcp generalizes explicit congestion notification proposal ecn 
addition xcp introduces new concept decoupling utilization control fairness control 
allows flexible analytically tractable protocol design opens new avenues service differentiation 
control theory framework model xcp demonstrate stable efficient regardless link capacity round trip delay number sources 
extensive packet level simulations show xcp outperforms tcp conventional high bandwidth delay environments 
xcp achieves fair bandwidth allocation high utilization small standing queue size near zero packet drops steady highly varying traffic 
additionally new protocol maintain flow state routers requires cpu cycles packet implementable high speed routers 
internet continue thrive congestion control mechanism remain effective network evolves 
technology trends indicate internet large number high bandwidth links 
ubiquitous commonplace satellite wireless links high latency 
trends problematic tcp reacts adversely increases bandwidth delay 
mathematical analysis current congestion control algorithms reveals regardless queuing scheme delay bandwidth product increases tcp oscillatory prone instability 
casting problem control theory framework low show capacity delay increases random early discard red random early marking rem proportional integral controller virtual queue eventually prone instability :10.1.1.128.5092
argue active queue management scheme aqm maintain stability high capacity large delay links 
analysis uses reno tcp argument valid current tcp implementations throughput inversely proportional round trip time rtt square root drop rate 
furthermore blake show adaptive virtual queue avq prone instability link capacity large gigabit links 
addition mathematical models intuitive reasoning shows slow start lead instability internet 
capacity increases majority flows short flows exit slow start 
flows slow start increase rate exponentially dramatically unstable behavior 
currently number short flows large bytes long lived flows 
consequently dynamics aggregate traffic usually dominated additive increase policy 
fraction flows slow start grows exponential increase may dominate dynamics aggregate traffic causing instability 
potential instability problem facing tcp internet 
delay bandwidth product increases performance degrades 
tcp additive increase policy limits ability acquire spare bandwidth packet rtt 
bandwidth delay product single flow links may thousands packets tcp waste thousands rtts full utilization burst congestion 
tcp throughput inversely proportional rtt fairness issue flows internet traverse satellite links wireless wans 
users substantially different rtts compete bottleneck capacity considerable unfairness result 
full impact large delay bandwidth products come see seeds problems current internet 
example tcp satellite links revealed network utilization issues tcp undesirable bias long rtt flows 
currently problems mitigated ad hoc mechanisms ack spacing split connection performance enhancing proxies 
simulation results similar support argument showing regardless queuing scheme tcp performance degrades significantly capacity delay increases 
develops novel protocol congestion control outperforms tcp conventional environments remains efficient fair stable link bandwidth round trip delay increases 
new explicit control protocol xcp generalizes explicit congestion notification proposal ecn 
bit congestion indication ecn routers inform senders degree congestion bottleneck 
new concept decoupling utilization control fairness control 
control utilization new protocol adjusts aggressiveness spare bandwidth network feedback delay 
prevents oscillations provides stability face high bandwidth large delay ensures efficient utilization network resources 
control fairness protocol reclaims bandwidth flows rate fair share flows 
putting control state packets xcp needs flow state routers scale number flows 
implementation appendix requires cpu cycles packet making practical high speed routers 
control theory framework motivated previous show fluid model protocol stable link capacity feedback delay number sources 
contrast various aqm schemes parameter values depend capacity delay number sources analysis shows set parameters new protocol constant values effective independent environment 
extensive packet level simulations show performance tcp red avq rem degrades substantially capacity delay increases 
contrast new protocol achieves high utilization small queues drops independent capacity delay 
conventional environments simulations show protocol exhibits better fairness higher utilization smaller queue size packet drops 
maintains better performance dynamic environments short web flows bias long rtt flows 
started goal solving tcp limitations high bandwidth large delay environments design derivative advantages 
decoupling fairness control utilization control opens new avenues service differentiation schemes provide desired bandwidth aggressive weak controlling congestion 
simple scheme implements shadow prices model 
second protocol facilitates distinguishing error losses congestion losses useful wireless environments 
xcp drops caused congestion highly uncommon packets simulations protocol uses explicit precise congestion feedback congestion drop preceded explicit feedback tells source decrease congestion window 
losses preceded followed explicit increase feedback error losses 
xcp improves security making easier detect attacks isolate unresponsive flows described 
xcp performance provides incentive users network providers deploy protocol 
possible deployment paths 
design rationale initial objective step back rethink internet congestion control caring backward compatibility deployment 
build new congestion control architecture scratch look 
observation loss poor signal congestion 
believe cost effective network avoid loss dropping packets congestion signal resort 
implicit signal loss bad congestion source loss definite decision packet lost quickly 
binary signal loss signals congestion loss loss 
senders probe network point congestion backing 
feedback imprecise increase policy conservative decrease policy aggressive 
tight congestion control requires explicit precise congestion feedback 
congestion binary variable congestion signalling reflect degree congestion 
propose precise congestion signalling network explicitly tells receiver state congestion react 
allows senders decrease sending windows quickly bottleneck highly congested performing small reductions sending rate close bottleneck capacity 
resulting protocol responsive oscillatory 
second aggressiveness sources adjusted delay feedback loop 
dynamics congestion control may abstracted control loop feedback delay 
fundamental characteristic system unstable large feedback delay 
counter destabilizing effect system slow feedback delay increases 
context congestion control means delay increases sources change sending rates slowly 
issue raised researchers important question exactly feedback de pend delay establish stability 
tools control theory conjecture congestion feedback rate mismatch inversely proportional delay feedback queue mismatch inversely proportional square delay 
robustness congestion independent unknown quickly changing parameters number flows 
fundamental principle control theory states controller react quickly dynamics controlled signal controller lag controlled system ineffective 
context current proposals congestion control controller active queue management scheme aqm 
controlled signal aggregate traffic traversing link 
controller seeks match input traffic link capacity 
objective unachievable input traffic consists tcp flows dynamics tcp aggregate depend number flows 
aggregate rate increases packets rtt decreases proportionally number flows aggregate constant changes time aqm controller constant parameters fast operate arbitrary number tcp flows 
third objective system dynamics aggregate traffic independent number flows 
leads need decoupling efficiency control control utilization congestion fairness control 
robustness congestion requires behavior aggregate traffic independent number flows 
fair bandwidth allocation intrinsically depends number flows traversing bottleneck 
rule dividing bandwidth individual flows aggregate independent control law governs dynamics aggregate 
traditionally efficiency fairness coupled control law aimd tcp obtain fairness efficiency simultaneously 
conceptually efficiency fairness independent 
efficiency involves aggregate traffic behavior 
input traffic rate equals link capacity queue builds utilization optimal 
fairness hand involves relative throughput flows sharing link 
scheme fair flows sharing link throughput irrespective congestion 
new paradigm router efficiency controller ec fairness controller fc 
separation simplifies design analysis controller reducing requirements imposed 
permits modifying controllers redesigning re analyzing 
furthermore decoupling opens new avenues service differentiation bandwidth allocation schemes provide controlled unfairness aggressive weak controlling congestion 
congestion header 
protocol tcp xcp window congestion control protocol intended best effort traffic 
flexible architecture easily support differentiated services explained 
description xcp section assumes pure xcp network 
show xcp coexist tcp internet tcp friendly 
framework give overview control information flows network explain feedback computation 
senders maintain congestion window cwnd round trip time rtt communicate routers congestion header packet 
routers monitor input traffic rate output queues 
difference link bandwidth input traffic rate router tells flows sharing link increase decrease congestion windows 
annotating congestion header data packets 
feedback divided flows cwnd rtt values system converges fairness 
congested router path reduce feedback congestion header overwriting 
ultimately packet contain feedback bottleneck path 
feedback reaches receiver returned sender acknowledgment packet sender updates cwnd accordingly 
congestion header xcp packet carries congestion header communicate flow state routers feedback routers receivers 
field cwnd sender current congestion window rtt sender current rtt estimate 
filled sender modified transit 
remaining field feedback takes positive negative values initialized sender requirements 
routers path modify field directly control congestion windows sources 
document notation rtt refers physical round trip time rtt refers variable maintained source software rtt refers field congestion header 
xcp sender tcp xcp sender maintains congestion window outstanding packets cwnd estimate round trip time rtt 
packet departure sender attaches congestion header packet sets cwnd field current cwnd rtt current rtt 
packet flow rtt set zero indicate routers source valid estimate rtt 
sender uses feedback field request desired window increase 
example application desired rate sender sets feedback desired increase congestion window rtt cwnd divided number packets current congestion window 
bandwidth available initialization allows sender reach desired rate rtt 
new acknowledgment arrives positive feedback increases senders cwnd negative feedback reduces packet size cwnd max cwnd feedback addition direct feedback xcp needs respond losses rare 
similar manner tcp 
xcp receiver receiver similar tcp receiver acknowledging packet copies congestion header data packet acknowledgment 
xcp router control laws xcp router uses drop tail red queue equipped efficiency controller fairness controller 
compute estimates average rtt flows traversing link smooths burstiness control protocol 
estimating parameters intervals longer average rtt leads sluggish response estimating parameters shorter intervals leads erroneous estimates 
average rtt computed information congestion header 
xcp controllers single control decision average rtt 
motivated need observe results previous control decisions attempting new control 
example router tells sources increase congestion windows wait see spare bandwidth remains telling increase 
router maintains link estimation control timer set estimate average rtt link 
timeout router updates estimates control decisions 
remainder refer router current estimate average rtt emphasize feedback delay 
efficiency controller ec efficiency controller purpose maximize link utilization minimizing drop rate persistent queues 
looks aggregate traffic need care fairness issues flow packet belongs 
xcp window ec computes desired increase decrease number bits aggregate traffic transmits control interval average rtt 
aggregate feedback computed control interval constant parameters values set stability analysis respectively 
term average rtt spare bandwidth defined difference input traffic rate link capacity 
persistent queue size opposed transient queue results bursty nature window protocols 
compute minimum queue seen arriving packet propagation delay estimate subtracting local queuing delay average rtt 
equation feedback proportional spare bandwidth link underutilized want send positive feedback link congested want send negative feedback 
insufficient mean give feedback input traffic matches capacity queue drain 
drain persistent queue aggregate feedback proportional persistent queue 
feedback bits spare bandwidth multiplied average rtt 
achieve efficiency dividing aggregate feedback small chunks allocate single packets feedback 
ec deals aggregate behavior care packets get feedback individual flow changes congestion window 
ec requires total traffic changes control interval 
exactly divide feedback packets flows affects fairness job fairness controller 
fairness controller fc job fairness controller fc feedback individual packets achieve fairness 
fc relies principle tcp uses converge fairness additive increase multiplicative decrease aimd 
want compute packet feedback policy allocate increase throughput flows 
allocate decrease throughput flow proportional current throughput 
ensures continuous convergence fairness long aggregate feedback zero 
prevent convergence stalling efficiency optimal introduce concept bandwidth shuffling 
simultaneous allocation deallocation bandwidth total traffic rate consequently efficiency change throughput individual flow changes gradually approach flow fair share 
shuffled traffic computed follows max input traffic average rtt constant set 
equation ensures average rtt traffic redistributed aimd 
choice tradeoff time converge fairness disturbance shuffling imposes system optimal efficiency 
compute packet feedback allows fc enforce policies 
increase law additive decrease multiplicative convenient compute feedback assigned packet combination positive feedback negative feedback feedback 
compute case aggregate feedback positive 
case want increase throughput flows amount 
want change throughput flow proportional constant throughput constant 
dealing window protocol want compute change congestion window change throughput 
change congestion window flow change throughput multiplied rtt 
change congestion window flow proportional flow rtt cwnd rtt 
step translate desired change congestion window packet feedback reported congestion header 
total change congestion window flow sum packet feedback receives 
obtain packet feedback dividing change congestion window expected number packets flow router sees control interval number proportional flow congestion window cwnd inversely proportional round trip time rtt find packet positive feedback proportional square flow rtt inversely proportional congestion window rtt cwnd 
positive feedback rtt cwnd constant 
total increase aggregate traffic rate max max ensures computing positive feedback 
equal sum increase rates flows aggregate sum positive feedback flow received divided rtt max rtt number packets seen router average rtt 
derived max rtt cwnd 
similarly compute packet negative feedback aggregate feedback negative 
case want decrease throughput flow proportional current throughput throughput throughput 
consequently desired change flow congestion window proportional current congestion window cwnd cwnd 
desired packet feedback desired change congestion window divided expected number packets flow router sees interval find packet negative feedback proportional flow rtt rtt 
negative feedback rtt constant 
increase case total decrease aggregate traffic rate sum decrease rates flows aggregate max rtt 
derived max 
notes efficiency fairness controllers points worth noting design efficiency controller fairness controller 
mentioned earlier efficiency fairness controllers decoupled 
specifically efficiency controller uses multiplicative increase multiplicative decrease law mimd fairness controller uses additive increase multiplicative decrease law aimd 
independence maintained ensuring individual flows follow feedback fairness controller aggregate traffic obeys efficiency controller 
xcp guarantees independence equations implementation ensure sum feedback individual flows control interval adds aggregate feedback computed efficiency controller 
particular control laws efficiency con mimd fairness controller aimd possible choices 
example describe fairness controller uses binomial law similar described 
chose control laws analysis simulation demonstrate performance 
note efficiency controller satisfies requirements 
dynamics aggregate traffic specified aggregate feedback stay independent number flows traversing link 
additionally contrast tcp increase decrease rules indifferent degree congestion network aggregate feedback sent ec proportional degree utilization 
furthermore aggregate feedback average rtt xcp aggressive round trip delay increases 
fairness controller uses aimd significantly fairer tcp 
note aimd flows increase equally regardless current rate 
multiplicative decrease helps converging fairness 
tcp multiplicative decrease tied occurrence drop rare event 
contrast xcp multiplicative decrease decoupled drops performed average rtt 
xcp fairly robust estimation errors 
example estimate value prediction value control interval 
underestimate fail allocate positive feedback current control interval 
bandwidth fail allocate appear estimation input traffic spare bandwidth allocated partially allocated control interval 
control interval portion spare bandwidth allocated left 
underestimation causes reduced allocation convergence efficiency slower prediction correct 
error xcp reaching full utilization 
similarly overestimate allocate feedback flows control interval run aggregate feedback quickly 
uneven spread feedback allocation interval affect convergence utilization slows convergence fairness 
similar argument estimation errors mainly affect convergence time correctness controllers 
xcp congestion control independent number sources capacity bottleneck delay relation xcp dynamics feedback delay hard fully grasp equation 
refer interested reader equation shows change throughput rate mismatch inversely proportional delay change queue mismatch inversely proportional square delay 
type error may prevent convergence complete efficiency unbalanced allocation deallocation shuffled traffic 
example control interval deallocate shuffled traffic fail allocate shuffling prevent reaching full link utilization 
note shuffled traffic input traffic 
furthermore shuffling exists 
single bottleneck topology 
parking lot topology 
choose constant values parameters environments 
significant improvement previous approaches parameters specific environments red chosen differently depending number sources capacity delay avq 
show constant values chosen 
implementing efficiency fairness controllers fairly simple requires lines code shown appendix note xcp router performs additions multiplications packet making attractive choice backbone router 
stability analysis fluid model traffic analyze stability xcp 
analysis considers single link traversed multiple xcp flows 
sake simplicity tractability similarly previous analysis assumes flows common finite positive round trip delay neglects boundary conditions queues bounded rates negative 
demonstrate extensive simulations larger topologies different rtts boundary conditions results hold 
main result stated follows 
theorem 
suppose round trip delay parameters satisfy system stable independently delay capacity number sources 
details proof appendix idea underlying stability proof 
assumptions system linear feedback system delay 
stability systems may studied plotting open loop transfer function nyquist plot 
prove choosing stated system satisfies nyquist stability criterion 
gain margin greater phase margin positive independently delay capacity number sources 
performance section demonstrate extensive simulations complying conditions theorem choose constant values capacity delay number sources 
simulations cover capacities mb gb propagation delays ms sec number sources 
simulate way traffic resulting ack compression dynamic environments arrivals departures short web flows 
simulations set showing robustness results 
additionally simulations show contrast tcp new protocol oscillations smoothly converges high utilization small queue size fair bandwidth allocation 
demonstrate protocol robust highly varying traffic demands high variance flows round trip times 
simulations compare xcp various aqm schemes running similar conditions 
show xcp outperforms previous proposals aspect 
simulation setup simulations packet level simulator ns extended xcp module 
compare xcp tcp reno queuing disciplines random early discard red :10.1.1.128.5092
experiments gentle mode set parameters authors recommendations 
minimum maximum thresholds set third thirds buffer size respectively 
random early marking rem 
experiments set rem parameters authors recommendation provided code 
particular update interval set transmission time packets set third buffer size 
adaptive virtual queue avq 
recommended authors experiments compute equation 
shown equation setting admit solution high capacities 
cases 
gain margin magnitude transfer function frequency 
phase margin frequency magnitude transfer function 
prove robust stability 
code simulation scripts publicly available 
bottleneck capacity mbps xcp red rem avq bottleneck capacity mbps xcp red rem avq bottleneck capacity mbps xcp red rem avq xcp significantly outperforms tcp high bandwidth environments 
graphs compare efficiency xcp tcp red rem avq function capacity 
core stateless fair queuing 
contrast goal achieve high utilization small queue size aims providing high fairness network cloud flow state core routers 
compare xcp show xcp framework improve fairness efficiency 
parameters set values chosen authors ns implementation 
simulator code aqm schemes provided authors 
allow schemes exhibit best performance simulate ecn enabled 
simulations xcp parameters set 
experimented xcp drop tail red dropping policies 
difference cases xcp dropped packets 
simulations topology 
bottleneck capacity round trip delay number flows vary objective experiment 
buffer size set delay bandwidth product 
data packet size bytes 
simulations topology show results generalize larger complex topologies 
specified differently reader assume simulation topology flows rtts equivalent sources long lived ftp flows 
simulations running times vary depending propagation delay round trip propagation delay sec xcp red rem avq round trip propagation delay sec xcp red rem avq round trip propagation delay sec xcp red rem avq xcp significantly outperforms tcp high delay environments 
graphs compare bottleneck utilization average queue number drops round trip delay increases flows tcps red rem avq 
larger rtts 
simulations run long ensure system reached consistent behavior 
comparison tcp aqm schemes impact capacity show increase link capacity cause significant degradation tcp performance irrespective queuing scheme 
experiment long lived ftp flows share bottleneck 
links propagation delay ms additionally flows traversing reverse path merely create way traffic environment potential ack compression 
xcp fluid model estimates parameters existence reverse traffic tends stress protocol 
demonstrates capacity increases tcp bottleneck utilization decreases significantly 
happens regardless queuing scheme 
contrast xcp utilization near optimal independent link capacity 
furthermore xcp shows considerably smaller queue size drop rate tcp 
particularly note experiments xcp drop single packet 
impact feedback delay fix bottleneck capacity mb study impact increased delay performance congestion control 
parameters values previous experiment 
number ftp flows xcp red rem avq number ftp flows xcp red rem avq number ftp flows xcp red rem avq xcp efficient number flows 
graphs compare efficiency xcp tcp various queuing schemes function number flows 
shows propagation delay increases tcp utilization degrades considerably regardless queuing scheme 
xcp hand maintains high utilization independently delay 
adverse impact large delay tcp performance noted satellite links 
bursty nature tcp suggested potential explanation packet pacing proposed solution experiment shows burstiness minor factor 
particular xcp bursty window protocol copes delay better tcp 
adjusting aggressiveness round trip delay 
impact number flows fix bottleneck capacity mb round trip propagation delay ms repeat experiment varying number ftp sources 
parameters values previous experiment 
shows xcp exhibits better utilization reasonable queue size packet losses 
increase xcp queue number flows increases side effect high fairness see 
number flows larger fair congestion window packets 
fair congestion window real number effective congestion window integer number packets rounding error increases causing disturbance 
consequently queue choose capacity mb round trip delay ms guarantee pipe large flows send packet stay active 
mice arrival rate new mice sec xcp red rem avq mice arrival rate new mice sec xcp red rem avq mice arrival rate new mice sec xcp red rem avq xcp robust efficient environments arrivals departures short web flows 
graphs compare efficiency xcp tcp various queuing schemes function short flows arrival rate 
increases absorb disturbance 
impact short web traffic large number flows internet short web flows important investigate impact dynamic flows congestion control 
experiment long lived ftp flows traversing bottleneck link 
flows traversing reverse path presence emulates way traffic environment resulting ack compression 
bottleneck bandwidth mb round trip delay ms short flows arrive poisson process 
transfer size derived pareto distribution average packets ns implementation shape complies real web traffic 
graphs bottleneck utilization average queue size total number drops functions arrival rate short flows 
shows xcp outperforms schemes experiments 
utilization queue size drop rate obtained xcp close optimal behavior 
importantly particular experiment demonstrates xcp robustness dynamic environments large numbers flow arrivals departures 
fairness experiment shows xcp significantly fairer tcp regardless queuing scheme 
long lived ftp flows sharing single mb bottleneck 
conduct sets simulations 
set flows common round trip propagation delay ms equal rtt flow id xcp red rem avq different rtt flow id xcp red rem avq xcp fair equal different rtt flows 
graphs compare xcp fairness tcp red rem avq 
second set simulations flows different rtts range ms ms rtt rtt ms 
figures demonstrate contrast approaches xcp provides fair bandwidth allocation bias long rtt flows 
furthermore demonstrates xcp robustness high variance rtt distribution 
xcp computes estimate average rtt system operates correctly environments rtt varies widely flow 
information point see appendix section worth noting average drop rate xcp orders magnitude smaller schemes despite ecn 
dynamics xcp simulations focus long term average behavior section shows short term dynamics xcp 
particular show xcp utilization queue size throughput exhibit limited oscillations 
average behavior section highly representative general behavior protocol 
convergence dynamics show xcp oscillations converges smoothly high utilization small queues fair bandwidth allocation 
experiment long lived flows share mb bottleneck com time seconds throughput flow throughput flow throughput flow throughput flow throughput flow time seconds bottleneck utilization time seconds bottleneck queue xcp smooth convergence high fairness utilization small queue size 
xcp flows share mb bottleneck 
start transfers times seconds 
mon rtt ms flows start transfers seconds apart seconds 
shows new flow starts fairness controller bandwidth maintain min max fairness 
shows decoupling utilization fairness control ensures reallocation achieved disturbing link high utilization 
shows instantaneous queue effectively absorbs new traffic drains 
robustness sudden increase decrease traffic demands experiment examine performance traffic demands dynamics vary considerably 
start simulation long lived ftp flows sharing mb bottleneck round trip propagation delay ms seconds start new flows stabilize 
seconds flows leaving original flows system 
shows utilization queue case flows xcp tcps traversing red queues 
xcp absorbs new burst flows dropping packets maintaining high utilization 
tcp hand highly disturbed sudden increase traffic takes long time 
flows suddenly stopped seconds xcp quickly spare bandwidth continues high utilization 
contrast sudden decrease demand tcp causes large sequence oscillations 
complex topology experiment uses link topology results similar topologies links 
link lowest capacity mb mb links 
links ms way propagation delay 
flows represented solid arrow traverse links forward direction 
cross flows illustrated small dashed arrows traverse individual link forward direction 
flows traverse links reverse path 
illustrates average utilization queue size number drops link 
general schemes maintain reasonably high utilization links note trade optimal utilization small queue size handled differently xcp various aqm schemes 
xcp trades percent utilization considerably smaller queue size 
xcp lower utilization experiment compared previous ones due disturbance introduced shuffling 
particular links fairness controller tries shuffle bandwidth cross flows long distance flows lower throughput 
long distance flows throttled downstream link benefit positive feedback 
effect mitigated links downstream link observe upstream throttling correspondingly reduce amount negative feedback see implementation appendix 
event total shuffled bandwidth utilization higher 
possible modify xcp maintains queue target value draining 
cause disturbance induced shuffling appear fluctuation queue drop utilization 
believe maintaining small queue size valuable percent increase utilization flows traverse multiple congested links 
particular leaves safety margin bursty arrivals new flows 
contrast large queues maintained links tcp simulations cause packet wait queues considerably increases latency 
quality service xcp renders differentiated services easier design implement decouples fairness control efficiency control 
particular high utilization small queues guaranteed efficiency controller designing differential services matter allocating aggregate feedback individual flows converge desired rates 
designer need worry flows increase aggressively causing congestion slow grabbing spare bandwidth 
describing service differentiation scheme note xcp bandwidth differentiation meaningful quality service qos 
xcp provides small time seconds xcp time seconds xcp time seconds tcp time seconds tcp xcp robust sudden increase decrease traffic demands tcp 
ftp flows share bottleneck 
time seconds start additional flows 
seconds flows suddenly stopped original flows left stabilize 
link id xcp red rem avq link id xcp red rem avq link id xcp red rem avq simulation multiple congested queues 
utilization average queue size number drops consecutive links topology 
link lowest capacity path 
queue size near zero drops qos schemes guarantee small queuing delay low jitter redundant 
section describe simple scheme provide differential services shadow prices model defined kelly 
model user chooses price unit time willing pay 
network allocates bandwidth throughputs users competing bottleneck proportional prices time seconds flow flow flow xcp provide differential services making users throughputs proportional price pay 
xcp flows transferring mbytes file shared mb bottleneck 
flow price flow price flow price 
throughput averaged ms rtts 
throughput price throughput price 
model allows continuous spectrum service differentiation changing price user achieve rate desires 
note users sharing bottleneck pay price unit bandwidth 
observing rate user gets particular price predict increase price needs order obtain certain desired rate 
model easily provide quality service xcp network 
sender replaces cwnd field current congestion window divided price willing pay cwnd price 
minor modification produce service complies model allows throughput differentiation user desires 
show simulation results support claims 
xcp sources share mb bottleneck 
corresponding prices 
source wants transfer file mbytes start 
results show transfer rate depends price flow pays 
flows active throughputs mb mb mb proportional corresponding prices 
flow finishes transfer remaining flows grab freed bandwidth throughputs continue proportional prices 
note high responsiveness system 
particular flow finishes transfer freeing half link capacity flows sending rates adapt rtts 
security section show xcp improves network security attacks target network infrastructure attempting links deny bandwidth legitimate flows 
attacks target server particular software bug router module highly important outside scope 
xcp facilitates detecting network attacks isolating unresponsive sources features operation near zero drops explicit feedback 
simulation results demonstrate xcp drop packets 
sustained high drop rate strong sign unresponsive flows 
xcp easy detect flows respond congestion signals attempt deny flows legitimate share bandwidth 
contrast tcp network drops normal events drop rate depends number flows flows unresponsive 
detecting attacks tcp network requires continuous scrutiny subset sources imposes extra load congested router xcp network detection happens naturally 
additionally isolating misbehaving source faster easier router explicit feedback test source 
precisely tcp isolating unresponsive source requires router monitor average rate suspect source fairly long interval decide source reacting aimd 
source rtt unknown correct sending rate specified complicates task 
contrast xcp isolating suspect flow easy 
router send flow test feedback requiring decrease congestion window particular value 
flow react single rtt unresponsive 
fact flow specifies rtt packet monitoring easier 
flow tell router monitoring behavior follow explicit feedback 
example consider flow tries increase sending rate claiming rtt larger really result input traffic exceed link capacity drops 
router notices drops raises bit packets forwards high drop period 
exit border routers notice bit monitor suspect flows 
particular send flows negative feedback monitor gradual deployment xcp amenable gradual deployment follow paths 
xcp core stateless fair queuing xcp deployed cloud approach similar proposed core stateless fair queuing 
approach benefits 
force unresponsive udp flows fair share needing flow state network core 
improve efficiency network xcp core allows higher utilization smaller queue sizes minimal packet drops 
allow isp provide differential bandwidth allocation internally network 
obviously shares objectives simulations indicate xcp give better fairness higher utilization lower delay 
xcp way map tcp udp flows network cloud xcp flows ingress egress border routes 
xcp flow associated queue ingress router 
arriving tcp udp packets enter relevant queue corresponding xcp flow core determines leave 
purpose rtt measured propagation delay ingress egress routers cwnd set xcp congestion window maintained ingress router tcp congestion window 
maintaining xcp core simplified 
need attach congestion header packets feedback collected small control packet exchanged border routers rtt 
second multiple micro flows share pair ingress egress border routers mapped single xcp flow 
weighted fairness scheme described allows xcp macro flow obtain throughput proportional number micro flows 
router forward packets queue xcp macro flow rate 
tcp naturally cause micro flows converge share xcp macro flow fairly care taken mix responsive unresponsive flows macro flow 
tcp friendly xcp section describe mechanism allowing xcp compete fairly tcp network 
design allow xcp exist multi protocol network mechanism incremental deployment 
start xcp connection sender check receiver routers path 
sender reverts tcp conventional protocol 
checks done simple tcp ip options 
resulting traffic rate 
misbehaving source show higher rate claiming discovered rtt 
extend design xcp router handle mixture xcp tcp flows ensuring xcp flows tcp friendly 
router distinguishes xcp traffic non xcp traffic queues separately 
tcp packets queued conventional red queue queue 
xcp flows queued xcp enabled queue queue described 
fair router process packets queues average throughput observed xcp flows equals average throughput observed tcp flows irrespective number flows 
done weighted fair queuing queues weights dynamically updated converge fair shares xcp tcp 
weight update mechanism uses queue drop rate compute average congestion window tcp flows 
computation uses approach tcp throughput equation cwnd tcp average packet size 
timer fires weights updated follows cwnd tcp cwnd tcp wx wx cwnd tcp cwnd tcp small constant range wx queue queue weights 
updates weights decrease difference tcp xcp average congestion windows 
difference zero weights changing stabilize 
aggregate feedback modified cause xcp traffic converge fair share link bandwidth sx qx constant parameters average round trip time qx size queue sx xcp fair share spare bandwidth computed sx wx yx wx xcp weight capacity link yx total rate xcp traffic traversing link 
shows throughputs various combinations competing tcp xcp flows normalized fair share 
bottleneck capacity mb common delay ms simulations results demonstrate xcp tcp friendly protocols currently consideration deployment internet 
tcp xcp tcp xcp tcp xcp tcp xcp tcp xcp tcp xcp tcp xcp tcp xcp xcp tcp friendly 
related xcp builds experience learned tcp previous research congestion control :10.1.1.128.5092
particular explicit congestion feedback proposed authors explicit congestion notification ecn 
xcp generalizes approach send information degree congestion network 
explicit congestion feedback controlling available bit rate abr atm networks 
contrast abr flow control protocols usually maintain flow state switches xcp keep flow state routers 
abr control protocols usually rate xcp window protocol enjoys self clocking characteristic considerably improves stability 
additionally xcp builds core stateless fair queuing putting flow state packets provide fairness flow state core routers 
related active queue management disciplines detect anticipated congestion attempt prevent active counter measures :10.1.1.128.5092
contrast schemes xcp uses constant parameters effective values independent capacity delay number sources 
analysis motivated previous control theory framework analyzing stability congestion control protocols 
theory simulations suggest current internet congestion control mechanisms run difficulty long term current technology trends continue 
motivated step back re evaluate control law signalling congestion control 
motivated chose convey control information systems routers bytes packet header 
important consequence explicit control permits decoupling congestion control fairness control 
turn decoupling allows efficient network resources flexible bandwidth allocation schemes 
ideas devised xcp explicit congestion control protocol architecture control dynamics aggregate traffic independently relative throughput individual flows aggregate 
controlling congestion done analytically tractable method matches aggregate traffic rate link capacity preventing persistent queues forming 
decoupling permits xcp reallocate bandwidth individual flows worrying aggressive dropping packets slow utilizing spare bandwidth 
demonstrated fairness mechanism bandwidth shuffling converges faster tcp showed implement min max fairness shadow prices model 
extensive simulations demonstrate xcp maintains utilization fairness low queuing delay drops packets 
evaluated xcp comparison tcp red rem avq queues steady state dynamic environments web traffic impulse loads 
case xcp performs significantly worse tcp 
fact flow delay bandwidth product large xcp performance remains excellent tcp suffers significantly 
believe xcp viable practical congestion control scheme 
appears defense denial service attacks easier current internet 
proposed possible strategies xcp tcp gracefully exist network 
focuses directions 
xcp motivated experience tcp degraded performance gigabit links 
currently implementing xcp freebsd kernel gigabit testbed 
second developed simple approach differential services 
think decoupling design guaranteed services easier pursuing idea 
network simulator ns 
www isi edu nsnam ns 
red parameters 
www icir org floyd red html parameters 
afek mansour 
phantom simple effective flow control scheme 
proc 
acm sigcomm 
allman glover sanchez 
enhancing tcp satellite channels standard mechanisms jan 
li low yin 
rem active queue management 
ieee network 
bansal balakrishnan 
binomial congestion control algorithms 
proc 
ieee infocom apr 
bansal balakrishnan floyd 
dynamic behavior slowly responsive congestion control algorithms 
proc 
acm sigcomm 
border 
performance enhancing proxies nov 

algorithm rate allocation network feedback 
chiu jain 
analysis increase decrease algorithms congestion avoidance computer networks 
computer networks isdn systems page 
crovella bestavros 
self similarity world wide web traffic evidence possible causes 
ieee acm transactions networking dec 
floyd handley padhye widmer 
congestion control unicast applications 
proc 
acm sigcomm aug 
floyd jacobson :10.1.1.128.5092
random early detection gateways congestion avoidance 
ieee acm transactions networking aug 
kelly 
distributed connection acceptance control connectionless network 
proc 
th intl 
congress june 
misra towsley gong 
designing improved controllers aqm routers supporting tcp flows 
proc 
ieee infocom apr 
jacobson 
congestion avoidance control 
acm computer communication review proceedings sigcomm symposium aug 
jain fahmy goyal 
switch algorithm abr traffic management atm networks part ii requirements performance evaluation 
ohio state university department cis jan 
jain viswanathan 
osu scheme congestion avoidance atm networks lessons learnt extensions 
performance evaluation journal vol 
dec 
blake 
note stability requirements adaptive virtual queue 
mit memo 
kelly tan 
rate control communication networks shadow prices proportional fairness stability 
srikant 
analysis design adaptive virtual queue 
proc 
acm sigcomm 
low wang doyle 
dynamics tcp aqm scalable control 
proc 
ieee infocom june 
bellovin floyd ioannidis paxson shenker 
controlling high bandwidth aggregates network 
submission ccr july 
misra gong towsley 
fluid analysis network aqm routers supporting tcp flows application red 
aug 
dawkins vaidya 
long thin networks jan 
names affiliations removed anonymity 
precise feedback congestion control internet 
technical report 
doyle low 
scalable laws stable network congestion control 
ieee cdc 
ramakrishnan floyd 
proposal add explicit congestion notification ecn ip 
rfc jan 
stoica shenker zhang 
core stateless fair queuing scalable architecture approximate fair bandwidth allocations high speed networks 
proc 
aug 
implementation implementing xcp router fairly simple best described pseudo code 
relevant blocks code 
block executed arrival packet involves updating estimates maintained router 
packet arrival input traffic sum rtt cwnd rtt cwnd sum rtt square cwnd rtt rtt cwnd second block executed estimation control timer fires 
involves updating control variables estimation variables rescheduling timer 
estimation control timeout avg rtt sum rtt square cwnd sum rtt cwnd avg rtt capacity input traffic queue shuffled traffic input traffic max shuffled traffic avg rtt sum rtt cwnd max shuffled traffic avg rtt input traffic residue pos max shuffled traffic avg rtt residue neg max shuffled traffic avg rtt input traffic sum rtt cwnd sum rtt square cwnd timer schedule avg rtt third block code involves computing feedback executed packets departure 
packet departure pos rtt rtt cwnd neg rtt feedback pos neg feedback feedback feedback feedback residue pos pos rtt residue neg neg rtt feedback residue pos feedback rtt residue neg feedback feedback rtt residue neg feedback rtt feedback residue neg feedback rtt residue pos residue neg note code executed timeout fall critical path 
packet code substantially faster replacing cwnd congestion header rtt cwnd having routers return feedback rtt feedback sender dividing value rtt 
modification spares router division operation case router additions multiplications packet 
average rtt flows packets 
proof theorem model consider single link capacity traversed xcp flows 
common round trip delay users sending rate user time aggregate traffic rate 
shuffled traffic rate 
router sends aggregate feedback control interval feedback reaches sources round trip delay 
changes sum congestion windows 
aggregate feedback sent time unit sum derivatives congestion windows dw dt input traffic rate derivative traffic rate ignoring boundary conditions system expressed delay differential equations 
notation equivalent max 
equation expresses aimd policy fc positive feedback allocated flows equal negative feedback allocated flows proportional current throughputs 
stability change variable proposition linear system stable constant delay constants satisfying 
proof 
system expressed delayed feedback see 
open loop transfer function ds small closed loop system stable 
shape nyquist plot 
slightly modifying notations 
refers input traffic average rtt input traffic rate input traffic unit time 
true 
feedback loop bode plot open loop transfer function 
nyquist plot open loop transfer function small delay 
prove phase margin remains positive independent delay 
magnitude angle open loop transfer function arctan wk break frequency zero occurs wz simplify system decided choose break frequency zero wz crossover frequency wc frequency wc 
substituting wc wz wc leads 
maintain stability delay need sure phase margin independent delay remains positive 
means need wc substituting previous paragraph find need case gain margin larger phase margin positive see bode plot 
true delay capacity number sources 
xcp robustness high variance round trip time time seconds flow msec rtt flow msec rtt xcp robustness high rtt variance 
xcp flows transferring mbytes file shared mb bottleneck 
flow rtt ms second flow rtt ms flows converge throughput 
throughput averaged ms intervals 

