compositionality tool application modelling industrial applications ath dipartimento di informatica universit di torino torino italy di implementation compositionality generalized stochastic petri nets stochastic formed nets swn included tool 
labelling function places transitions possible produce third superposition places transitions equal label swn color domains arc functions treated appropriately 
main motivation extension need evaluate library fault tolerant mechanisms defined implementation european project called goal project devise portable software solution problem fault tolerance embedded systems goal evaluation provide evidence efficacy proposed solution 
modularity natural project tried reflect modelling effort 
discuss implementation compositionality tool show modelling mechanisms called local voter 
motivations tailorable fault tolerance framework embedded applications european esprit project involving european partners industries universities defining implementing new approach fault tolerance embedded systems 
solution built software solution provides fault tolerance capabilities automation systems 
basically consists library functions add fault tolerant behaviour software support execution language specify react errors called framework 
framework meant allow application programmer equip programs variety software solutions fault masking error detection isolation recovery 
framework currently development different hardware platforms pilot applications developed test framework 
modelling meant validation evaluation library documentation 
models built software specification document 
validation done respect acknowledge contribution eec project 
number environment scenario include application model fault model recovery action specification 
role modelling team project provide models single mechanism system software way easily composed models different target applications developed partners test cases library 
mechanism usually set tasks interact communication primitive offered run time support 
due high complexity problem colored nets mechanisms 
important feature require colored nets efficient solution mechanism modularity reuse easy modifications models 
mechanism specification swn model model construction mechanism specification swn model model construction 
recovery action specification swn model recovery model recovery construction hardware specification swn model hardware model hardware construction user behaviour specification swn model users model user construction integrated model swn compositional operator parametric swn compositional operator fault specification swn model faults model fault construction complete model construction compositional modelling shows compositional approach modelling 
starting specification components mechanisms hardware specification user behaviour model component built 
different models integrated single swn model evaluation framework 
number boxes tagged model construction may require different construction techniques input specification different types specification mechanisms done uml diagrams typically state message charts plus textual comments fault specification taken requirements specification document describes type faults type affected component semi formal language hardware specification included user specification requirement specification document 
mechanisms built collection tasks usually state diagram task plus specification interactions corresponding models built swn compositional facility described 
construction integrated model general complicated task model reuse really comes play 
adequately support composition class defined allows definition parametric color classes compositional operator defined allows import export values types 
unfortunately implementation available 
swn natural choice efficient analysis techniques state space generation performance evaluation aggregated markov chains tool nicely supports state space generation exploiting symmetries steady state computation exploiting discrete event simulation confidence interval computation number weak points ffl support modularity ffl tools debugging model invariant computation check reachability analysis possible apart checking properties relevant performance evaluation typically presence home space inspection reachability graph written ascii form ffl concept parameterized library models overcome weak points number activities planned implementation group particular ffl implement composition places transitions swn ffl export model prod nets apply prod tools reachability analysis ffl export model cpn ami nets apply invariant computation swn nets available 
ffl implement defined allow reuse colored models different contexts ffl extend definition implement psr methodology modelling layered hardware software architecture 
deals point implementation available shows non trivial modelling case taken library mechanism implement application replication voting 
export prod nets latest stages implementation remaining points 
compositional rule implemented sophisticated point view treatment color classes concept parametric color classes import export values types defined class 
number techniques proposed literature composition compositional analysis high level models thorough survey methods concentrate tool support compositional construction compositional analysis 
section introduces compositional rule swn implementation section recall definition local voter mechanism specification document section shows discusses swn models local voter 
section concludes 
composition swn tool composition labelled swn composition labelled swn performed operations ffl superposition transitions matching labels ffl superposition places matching labels ffl simultaneous application 
nets involved operation may non injective labelling label may appear connected transitions places 
nets may 
constraint motivated fact having operands definition operators non trivial task 
constraint colour domains places superposed identical 
giving rigorous definition functioning operators described 
concentrate case transitions superposed 
elements tuple hp pre post inh pri cd describing labelled swn obtained composition ffl set places resulting net simply union sets places renaming place names may necessary order avoid matching names 
colour domain function cd gives cd cd 
ffl unlabelled transitions considered non observable labels appear operand involved superposition 
transitions simply copied places renaming may necessary 
show operation proceeds transitions assume labelling non injective 
denote set transitions gives set labels replica element cartesian product 
example shown fig 
transition fl defined cartesian product elements ft ft 
composed net obtained superposing 
non injective example arcs connected different transitions involved superposition identical variable names arc expression variables renamed arc expression arcs connected transitions 
variables appear guard transition arcs expressions changed renaming performed guard 
example fig 
superposition variable arcs guard function connected renamed 
superposed transitions guard function guard functions joined logical relation 
ffl matrices pre post inh describing arc structure built way 
arcs connected transitions involved superposition simple copied arc connected transition involved superpositions instances times transition superposed 
example arc instances composed net 
superposition places transitions ffl priority function pri gives value transitions involved superposition 
transition resulted superposition inherits priority value involved transition labelling function handled similarly 
assume marking dependent weights rates basically leave user task redefining pri final net 
find sophisticated compositional way handle pri open question attempts address problem may 
ffl set basic colour classes definitions assumed common operation places direct counterpart operation described 
places complicated require renaming arc guard expressions assuming places superposed colour domain 
simultaneous application superposing places transitions features shown description 
having arc place transition involved superpositions delta instances arc composed net connecting instances place instances transition 
second having arcs places transitions superposed arc expressions arcs added 
example shown fig 
places transitions superposed 
implementation preliminary implementation compositional operators described previous subsection carried producing format 
modeler may build component nets graphical interface 
interface allow define labels labels encoded name transitions superposition places 
transition place names structure jlabel tag name transition place followed labels separated bars 
user may define set labels taken account composition 
feature may useful composing nets modeler wish avoid labels considered stages composition 
composing tool attempts create readable net 
shape original components maintained 
user may define individual components placed composed model 
transition place multiple instances resulting net additive instances placed original position transition 
result composition arcs place transition different subnets arc drawn broken arc resulting net 
small example output tool fig 

draw arc expressions broken arcs written hand 
fig 
demonstrate feature tool variable name starts character renamed superposition 
allows modeler variables different components unify values 
tool may called command line 
algebra net net op labels net placement operands net net resulting swn net 
operator defined op may transitions places places transitions 
set labels superposition performed may file labels file format transition ftl tl place fpl pl pl labels file considered operation 
file exist labels considered 
argument may define placement components parameter placement nets placed horizontally vertically second net shifted compared net 
best knowledge tool offering possibility composing nets labelling 
tools assist modular modeling 
cpn ami gives possibility paste modules model modular services graphical interface fusion places transitions 
design cpn hierarchy assist user build complex models transition represent complex activity may replaced subnet 
models may combined operations replicate join operations provide common places communication submodels 
local voter specification app app plane plane plane back bone soft real time description local voter description local voter mechanism lv taken specification document 
local voter allows replicated execution piece code voting algorithm replicas considered voting performed 
replicas executed separate planes naturally correspond separate processing nodes 
application split parts part require replicated execution part requires 
applications lv application distinct piece code executed called app 
replica receive input data task ir input replicator performs replica planes input data data go directly application replica plane id input dispatcher takes care passing right application 
similar approach collect results replica ends computation sends output data plane oc output collector takes care forwarding appropriate voting task ov voting task application 
acr 
description 
app application ir input replicator id input dispatcher ist replicated software vote oc output collector ov output voter bb backbone table components local voter interacts backbone bb sort runtime support library mechanism handles exceptions recovery actions 
interactions tasks mailbox communications 
table lists acronyms different tasks task lists copies task lv serves applications 
observe separated acronyms application app piece code app replicated called ist 
shows state diagram describes ov specification document 
additional textual specification states soon ov application receives output replicas sets time receiving replicas 
observe ov sends message back corresponding application replicas received time expires match results 
cases bb comes play 
receiving voting voting bb notify received match received timeout received timeout match bb reply wait bb notified bb reply received msg appl msg appl state diagram output voter swn model local voter assumptions model lv tasks communicate asynchronous manner mailboxes mailbox ordered pair tasks time required prepare message general negligible time transmit task output buffer recipient mailbox 
concerns graphical representation shadowed boxes delimit portions nets corresponds recovery actions explained subsection 
color classes defined ap color class applications request replicated execution piece code defined ap say single static subclass unordered defined app fap color planes planes lv fpl pl pl exc color distinguish positive negative outcome lv activity built static subclasses exc ecx exc fe means time expiration exc fe means time expiration 
ap ap ap ir ap ap ap idle appl ap ap ap ap ap ap ap activity rcv reply snd lv application model shows swn model application cyclically executes activity sends message task ir local voter waits message coming backbone bb 
shows swn model input replicator ir waits messages coming applications soon request replicated execution application app received broadcasts input dispatcher task plane waits acknowledge id ir task colors needed 
shows swn model input dispatcher id task id planes receives ir identity application executed acknowledges reception ir activates task corresponding requested replica called instance plane 
ir ap ir id ap ir ap ir ir ap ir ir ap ir ap idle ir ir broad pls id rcv data ir ir input replicator model shows swn model replica code executed different planes framework allows static tasks correct assume replica activated suspend waiting message id tasks 
jap theta jp instances application plane 
instance waits message id message received instance application plane starts activity modelled timed transition comp sends result computation oc 
shows swn model output collector oc process task oc waits message coming replicas running plane forwards output voter 
textual portion specification oc wait ready message ov conditions ov send ready message specified assume ov willing accept messages mailbox 
shows swn model output voter task ov ov application lv 
ov executes voting algorithm majority voting replicas application independently 
ov waits replicas outcome different planes 
soon outcome received timeout reception replicas outcome set 
situations may occur outcomes received time expiration transition recv fires voting outcomes takes place time expired outcomes received firing transition recv vote replicas takes place time expired outcomes received ov firing transition recv 
id ap id ap id ist ap id ap id id ap idle id id ap id ir ap snd ply ist id id ir ir id id id id input dispatcher model condition message exception type time occurred sent backbone bb cases message exception type time occurred sent bb 
observe passing backbone information vote successful trivial extension success failure algorithm state diagram modelled details swn 
message sent bb ov waits acknowledge bb return back idle state 
observe assuming direct answer goes back directly ov app case normal voting impose restarted caused bb 
shows swn model backbone task precisely part bb devoted interactions lv 
bb idle state receive exception message coming ov 
exception type time occurred bb sends acknowledge ov application 
exception type time occurred reset operation needed sending back messages ov app 
local voter recovery actions open model analysis performed case single run application 
order obtain complete model single nets composed program algebra explained section follows 
algebra appl ir step 
algebra step id step 
algebra step ist step 
algebra step oc step ist oc ap ist ap ist ist ap idle ist ap ist ap ist ap ist comp oc id ist ist ist model replicated code 
algebra step ov step 
algebra step bb complete nets shadowed portion message passed ov bb application executed 
resulting swn net solved single application case symbolic reachability graph construction produces output tangible markings vanishing markings dead markings ordinary tangible markings ordinary vanishing markings ordinary dead markings time required 
list deadlock states symbolic dead markings corresponding ordinary dead markings marking described terms dynamic color subclasses associated places dynamic subclass cardinality 
symbolic marking number corresponding ordinary marking 
marking ordinary marking dead oc ov app pl pl pl pl pl app pl app pl ap app exception app exc 
exc exc app pl pl oc ap oc ov ap idle oc oc oc ap oc ap snd oc ist oc oc oc model output collector deadlock corresponds case time expiration replica received ov time expired waiting remaining replicas 
components ov app initial states idle state app ov waiting msg bb course arrive 
observe symbolic marking provide information respect ordinary case abstraction identity replica plane finished 
deadlocks marking ordinary marking dead time expiration 
marking ordinary marking dead time expiration replicas received 
local voter recovery actions ergodic model deadlock describe expected behaviour sense proceed add reconfiguration activities needed restart application 
model obtained composing nets including shadowed portions ergodic single strongly connected component 
basic idea recovery action taken bb ffl remove messages mailboxes refer application signaled exception ffl take corresponding tasks back initial states 
accomplish bb enables number immediate transitions model component labelled way cleaning transitions model components 
observe transitions assigned different priority ov bb ov ap exc ov ap ov ov ap fired ap ap exception ap exc idle ov ap ov ov ap ov ap ov ap ov ap ov ap ap ov timeout vote vote ok ko ko ok ok recv recv ko recv ov ap exc model output voter mainly avoid generation useless interleavings significantly slow state space generation 
symbolic reachability graph single application case tangible states ordinary 
initial marking home state 
generation took minutes standard mbyte pentium machine 
running time reachability graph generation grows significantly increasing number applications tried discrete event simulation available compute performance indices lv model 
table shows list timing parameters rates weights assigned transitions perform simulation 
timing assignment rates differ orders magnitude applications simulator able provide estimates throughput mean value tokens places minutes accuracy level set percent confidence level 
local voter recovery actions explicit faults models considered faults explicitly included model time expire due delay completion replicas 
bb ap ap bb ap bb ov ap bb ap clean ap bb ap idle bb bb ap bb bb ap exc bb bb rcv ov reset exc rcv ov exc ack ov ap bb bb bb bb bb model backbone goal model ist modified include timing transition model fault takes ist error state place 
resulting model single application case gives tangible markings vanishing markings dead markings ordinary tangible markings ordinary vanishing markings ordinary dead markings time required 
sec 
symbolic dead markings corresponding ordinary dead markings 
interesting marking ordinary marking dead instances error state correspond case replica reach ov time set 
case considered specification document 
observe produce ergodic model consider reset activity bb explicit testing replicas error state added model 
act time spent applications perform normal operations tr time msg ir broad time spent ir perform broadcast ids snd time spent id send msg running plane tr time ack ir tr time msg ids tr time msg comp time spent perform operations related data received ids tr time msg ocs snd time spent oc send replica ov tr time msg time vote time spent vote replicas vote time spent vote replicas tr time msg bb tr bb ov time ack bb ov tr bb ap time reply application 
table timing parameters described compositional operator implemented superposition labelled places transitions swn nets application study mechanism fault tolerance called local voter 
tool support fundamental model developing phase specification changing definition abstraction level modelling set 
provide flexibility models include modular definition communication example investigate rendez vous mailboxes different models fault 
open point take account hardware applications framework run point planning extend definition psr swn models 
size models allow simulation models produced quite detailed meant validation interesting open problem derive models compact ones performance evaluation purposes 
mentioned little support reachability analysis right net error place unbounded state space generation simply 
running state space generation run simulation allows checking accumulated performance indices check certain place markings grows suspicious manner 
experience modelling shown necessary restart net fault occurs planning extend compositional operator composition restart model deadlock state takes net back initial state 

parametric stochastic formed nets compositional modelling 
proc 
st international conference application theory petri nets aarhus denmark june 
springer verlag 
lncs published 
de 
incremental specification power plant control system class modular algebraic nets 
proc 
th international conference application theory petri nets torino italy 
springer verlag 
volume lncs 
best anf hopkins 
class composable high level petri nets application semantics pn proc 
th international conference application theory petri nets torino italy 
springer verlag 
volume lncs 
de 
approach reusing software implemented fault tolerance 
proc 
th euromicro workshop parallel distributed processing pdp greece jan 
buchholz 
view impact qualitative quantitative analysis 
journal parallel distr 
computing july 
haddad 
formed coloured nets symbolic reachability graph 
proc 
th intern 
conference application theory petri nets paris france june 
reprinted high level petri nets 
theory application jensen rozenberg editors springer verlag 
haddad 
symbolic reachability graph coloured petri nets 
theoretical computer science logic semantics theory programming april 

graphical editor analyzer timed stochastic petri nets 
performance evaluation special issue performance modeling tools november 
christensen 
modular state space analysis coloured petri nets 
proc 
th international conference application theory petri nets torino italy 
springer verlag 
volume lncs 
martinez 
linear invariants commutative high level nets 
proc 
th intern 
conference application theory petri nets bonn germany june 
cpn ami environment 
www src lip fr cpn ami html 

psr methodology integrating hardware software models 
proc 
th international conference application theory petri nets osaka japan june 
springer verlag 
lncs vol 
design cpn computer tool coloured petri nets 
www daimi au dk 
haddad 
evaluation high level petri nets means aggregation decomposition 
proc 
th international workshop petri nets performance models durham north carolina october 
jane 
nature synchronization 
herzog editors proc 
nd workshop process algebra performance modelling erlangen 
jensen 
coloured petri nets basic concepts analysis methods practical 
volume 
springer verlag 
jensen 
coloured petri nets basic concepts analysis methods practical 
volume 
springer verlag 
isabel rojas compositional construction analysis petri net systems 
phd thesis university edinburgh 
de pierro 
clarifying priority specification detached priorities 
proc 
th intern 
workshop petri nets performance models zaragoza spain september 
ieee cs press 
software 
www crhc uiuc edu 

prod manual 
technical report series number helsinki university technology august 

