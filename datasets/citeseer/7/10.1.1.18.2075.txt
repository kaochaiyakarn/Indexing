international computer science institute center st suite berkeley california fax improving tcp performance reordering dsack ming zhang brad karp sally floyd larry peterson tr july tcp performs poorly paths reorder packets significantly order delivery packet loss 
sender responds fast retransmit actual loss occurred 
repeated false fast retransmits keep sender window small severely degrade throughput attains 
persistent reordering occasionally occurs day networks 
tcp requirement nearly order delivery complicates design beneficial systems diffserv multi path routing parallel packet switches 
relaxing constraint internet architecture enhancements tcp improve protocol robustness reordered delayed packets 
extend sender detect recover false fast retransmits dsack information avoid false fast retransmits proactively adaptively varying dupthresh 
algorithm adaptively balances increasing dupthresh avoid false fast retransmits limiting growth dupthresh avoid unnecessary timeouts 
demonstrate delayed packets negatively impact accuracy tcp rto estimator enhancements estimator ensure sufficiently conservative timestamps additional tcp header bits 
simulations show enhancements significantly improve tcp performance paths reorder delay packets 
cs princeton edu icir princeton university icsi berkeley edu icir floyd icir org icir llp cs princeton edu princeton university icsi tr july motivation today internet deployment systems introduce packet reordering normal course operation regardless benefits practically impossible 
taboo derives poor throughput tcp achieves reordering predominance tcp traffic internet 
extent reordering occurs today generally perceived transient malfunction indication technology tcp 
examples include measured transient behavior route particular destination oscillates multiple alternatives may different round trip time rtt reordering may result 
routers observed cease forwarding processing routing update delayed packets new arrivals causing reordering 
high speed switches bennett show mae east reordered packets frequently 
argue striping packets multiple links neighboring switches combined conserving switch architectures produce reordering 
satellite links satellite links long rtts typically order milliseconds 
keep pipe full link layer retransmission protocols links continue sending subsequent packets awaiting ack nak previously sent packet 
link layer retransmission reordered packets sent original transmission packet return ack nak 
reordering robust tcp perform better cases 
compelling reasons improve tcp robustness reordering beneficial systems deployed introduce reordering restricted utility order delivery requirement 
systems include multi path routing routing tcp flow packets multiple routes distinct bottlenecks increase total endto bandwidth available flow 
overlay networks poised offer functionality 
resulting divergent routes easily rtts differ sufficiently cause significant packet reordering 
multi path routing scheme offer benefit routing single flow packets route approach doesn flow total available capacity routes requires router dividing packets routes flow identifier information making packet forwarding decisions 
differentiated services packets sent host may different hop behaviors diffserv 
phb markings cause routers treat packets different drop behaviors forwarding precedences hop behaviors 
single tcp flow packets generally marked different different forwarding behaviors may cause reordering 
restriction minor limit usefulness diffserv 
entirely possible single flow sending rate may exceed permitted traffic profile enforced traffic conditioner premium phb 
case conditioner may drop profile packets assign different phb risk reordering flow packets 
alternatives reduce tcp throughput 
avoid pitfalls flow packets may premium phb profile 
sender loses utility premium phb entirely realize example lower drop rate packets flow marked assured forwarding phb 
mobile networks attention ad hoc routing mobile networks resulted routing protocols offer high delivery success rates highly mobile topologies 
tcp generally unusable networks 
transport problem multi hop wireless networks facets reordering 
ad hoc routing protocols deliver packets successfully changing routes frequently track changing topology 
frequent route changes cause reordering 
seek restriction internet architecture enhancing tcp improve robustness network paths reorder packets 
tcp inability distinguish reordering packet loss causes protocol perform poorly paths deliver packets order 
losses falsely detected genuine cause tcp send slowly 
reordering loss fundamental window congestion control 
artifact design tcp fast retransmit mechanism arbitrarily concludes packet lost missing receiver packets sent arrived receiver 
network path reorders packets minimally choice aggressive concluding loss waiting longer concluding loss reveal packet wasn lost delayed en route 
lie fundamental costs improving tcp throughput reordering delay packets dropped subsequently retransmitted increase reordering tolerance means sender wait longer determining loss occurred 
congestion response timely detection loss primary feedback detecting network congestion 
clearly tension timely detection loss forgiving case packets arrive order 
demonstrate properly extended tcp sender achieve significantly improved robustness reordering sending significantly aggressively face genuine congestion 
dsack extension sack tcp useful tool making tcp sender robust reordering 
dsack reports sender duplicate packets sequence number arrive receiver 
sender incorrectly conclude packet dropped reordered retransmit packet learn dsack receiver returns original packet spurious retransmission arrive 
dsack doesn specify sender actions provides duplicate receipt information sender 
sender learns spurious retransmission dsack full rtt show icsi tr july information quite useful adapting sender behavior backing incorrect window reduction avoiding spurious retransmissions 
control loop dynamically adapting trigger tcp fast retransmit measurements sender takes reordering behavior network 
control loop uses reordering behavior learned sacks fast retransmit events timeout events feedback aims maximize throughput achieved connection 
key difference control loop prior area information concerning timeouts avoid making tcp tolerant reordering show sections excessive reordering tolerance leads timeouts reduced throughput 
control loop uses state sender previous approaches seek demonstrate additional state confers greater performance benefits prior lower cost approaches 
propose simple change tcp rto estimator renders sufficiently conservative paths significantly delay packets requiring tcp header information provided dsack 
result tcp significantly enhanced throughput reordering paths demonstrated simulations 
deployment substantially loosen order delivery restriction internet architecture 
proceed remainder follows section describes phenomenon false fast retransmit responsible tcp poor performance reordering paths reports dynamics fast retransmit affect performance reordering paths 
section catalogs related tcp reordering 
section algorithmic components reordering adaptation control loop 
detailed performance evaluation algorithms simulation section 
conclude suggesting avenues research section summarizing findings section 
fast retransmit reordering fast retransmit fast recovery mechanism implemented bsd reno tcp described rfc allows tcp detect loss experiencing retransmit timeout rto 
loss packets arrive receiver cause repeatedly acknowledge highest contiguous sequence number received far 
sender implements fast retransmit uses return duplicate duplicate acks detect loss 
fast retransmit allows sender reduce congestion window half going idle second minimum retransmit timer expires having slow start window single packet 
fast retransmit obviously requires choice duplicate acks sender receive concludes network dropped packet 
parameter dupthresh fixed duplicate acks fast retransmit specification states tcp know duplicate ack caused lost segment just reordering segments waits small number duplicate acks received 
clearly choice assumes network hardly perturbs packet position stream sent sender packets distance fast retransmit incorrectly conclude loss occurred halve congestion window needlessly 
section describes interactions fast retransmit reordering affect tcp performance 
restrict attention effects reordering tcp sender retransmission behavior window size 
sender enhancements propose robust reordered data packets reordered acks 
reordered acks shown effects outside scope increasing burstiness sender 
false fast retransmit false fast retransmit phenomenon limits tcp throughput network reorders connection packets 
demonstrate phenomenon 
packet window shown delayed seconds subsequent packets delayed packet arrives remainder packets window 
just second cluster duplicate acks arrives sender triggering fast retransmit delayed packet causing window size halved loss occurred 
reorderings recur process repeat beat sender window resulting severe throughput reduction unwarranted network congestion status 
network paths reorder value dupthresh greater distance packets segment displaced packet stream prevent false fast retransmits 
packets time data ack example false fast retransmit packet number vs time 
times sender 
packet sent delayed important aspect demonstrates dsack information recovering window reduction caused false fast retransmit 
sender learn dsack receives retransmitted packet dropped undo window reduction time retransmission 
dsack arrives approximately time 
note sender restores old window sixteen packets 
prior tcp response reordering described section investigates recovery learning spurious retransmission extends recovery additionally avoiding false fast retransmits 
risks increasing dupthresh unfortunately increasing dupthresh cost 
progressively greater dupthresh values prevent tcp sender icsi tr july wrongly concluding progressively longer reorderings losses greater dupthresh values tcp sender respond slowly real packet drops 
dupthresh grow large risks include generation timeouts insufficient duplicate acks return trigger fast retransmit loss significantly increased delay dropped packets duplicate acks return fast retransmit delayed arrive interactive transfers video tcp done popular application intolerant spikes packet delay delayed response tcp congestion fast retransmit delayed limited transmit described section may send multiple congestion windows cwnd additional packets duplicate acks arrive drastic lengthening transfer times short transfers loss occurs near short transfer insufficient packets left send provoke fast retransmit second minimum timeout result 
clear tradeoff avoiding false fast retransmits enumerated risks 
scheme adapting dupthresh balance opposing goals 
increasing dupthresh insufficiently adaptive algorithm reducing dupthresh needed 
limited transmit dupthresh detail fast retransmit bears mention limited transmit extension currently proposed standard ietf 
limited transmit sender permitted send new data packet duplicate acks arrive 
behavior aids sender accumulating duplicate acks loss window small 
majority paths rtt far shorter second 
limited transmit allows senders paths window packets recover single packet loss fast retransmit timeout 
limited transmit permits sender send packets current congestion window sends packets response ack clock significantly deviate tcp congestion control model 
proposers limited transmit specifically avoid considering dupthresh value 
consider greater dupthresh values degree sender sends current congestion window increase 
varying dupthresh extend limited transmit permit sending additional congestion window worth packets 
note limit matters dupthresh greater current congestion window size dupthresh limits number packets sent limited transmit 
reasons attention number packets limited transmit allows current congestion window 
include flows limited transmit send fewer packets loss flows 
extra transmissions limited transmit may cause retransmissions competing flows dropped 
cases little statistical multiplexing bottleneck flow limited transmit may substantially responsible congestion bottleneck may send packets limited transmit bottleneck 
limited transmit delay fast retransmit reduction congestion window 
single loss dupthresh great sending times congestion window size packets limited transmit delays window reduction rtts 
statements relate aggressiveness tcp uses limited transmit vs tcp 
note apply incarnations limited transmit regardless dupthresh value limited transmit send dupthresh packets 
number packets sent limited transmit affects degree arguments concern 
matter packets limited transmit sends self clocking 
bansal show conditions appreciable statistical multiplexing congestion control protocols cause high packet drop rates bottleneck protracted periods 
result applies protocols respond slowly congestion tfrc requires rtts cut sending rate half persistent congestion 
choice permitting limited transmit send ack clocked additional congestion window worth data dupthresh great tcp significantly aggressive merely slides tcp direction slowly responding congestion control protocol 
importantly stress independent number packets limited transmit may send 
algorithms varying dupthresh response reordering confer quantitatively similar performance improvements permit limited transmit congestion window worth congestion window worth 
note number packet transmissions permitted limited transmit determines maximum reordering length increased dupthresh useful improving tcp throughput 
dupthresh greater total number packets limited transmit willing send sender unable keep pipe full reorderings longer bound limited transmit 
tradeoff maximum reordering length tcp robust restricting delay tcp response loss limiting bound limited transmit 
delay reordering phenomena delay reordering related 
possible delay reordering router buffers packets period order continues forwarding case scope investigation 
view reordering process causes packet packets delayed arrive packets sent sender 
eyes tcp delaying packet accelerating icsi tr july packet equivalent cause packet higher sequence number arrive packet lower sequence number 
convention referring reordering caused delay packets 
model delay provides percentage packets delayed distribution delay times packets selected delayed 
packet delayed independently noted 
related section describes prior improving tcp performance networks delay reorder packets differentiates earlier research 
floyd proposes extended version sack information back window reduction learning false fast retransmit 
proposal evolved dsack offers sender information duplicate packets reach receiver doesn specify sender uses information recover spurious retransmissions 
ludwig studies spurious retransmission problem spurious timeouts spurious fast retransmits 
consider adaptation dupthresh avoid spurious retransmissions backs window reductions response packet delays reorderings 
ludwig dsack notify sender duplicates 
proposes alternatives 
tcp timestamps packet different timestamps original retransmission return acks reveal sender acks distinct transmissions packet 
second reserved bit tcp header dubbed rtx bit mark packet original retransmission 
ack reflects rtx bit value data packet acknowledges 
timestamps add twelve bytes packet length render header compression schemes ineffective requiring strongly undesirable 
rtx bit uses remaining unused bits tcp header primarily reason withdrawn ietf standards process 
timestamp rtx bit proposals advantages dsack 
timestamps rtx bit fully disambiguate ack corresponds original packet transmission retransmission dsack 
second dsack notify sender duplicates original retransmitted packets reach receiver ludwig schemes may notify sender rtt earlier retransmission spurious 
examine performance difference rtx bit dsack section 
allman dsack information restore sender congestion window size detecting false fast retransmits increase dupthresh aim avoiding false fast retransmits 
study potential negative effects increased dupthresh strategy reducing dupthresh resetting packets timeout 
consider strategies increasing dupthresh name short textual tags ease referring 
dsack bl detects recovers false fast retransmit doesn vary dupthresh 
strategies directly manipulate dupthresh increasing dupthresh constant value simulations time false fast retransmit occurs dsack bl averaging dupthresh number duplicate acks caused false fast retransmit time event occurs dsack bl avg setting dupthresh exponentially weighted moving average number duplicate acks received sender ewma 
schemes limit dupthresh maximum current congestion window 
strategies involve timer delay fast retransmit 
sets timer value delay arrival duplicate ack return ack delayed packet dsack bl 
increments timer value constant value ms simulations time false fast retransmit encountered dsack timer schemes maximum value timer reach half tcp smoothed round trip time estimate timer reduced length 
schemes hold state sender ones propose address negative effects great dupthresh long timer 
algorithms section describes algorithms enhancing tcp robustness reordering 
simple scheme sender uses sample reordering length distribution experienced data packets sent connection 
show reordering length distribution increase dupthresh way avoid false fast retransmits 
increasing dupthresh lossless paths yields improved throughput simplistic strategy problematic lossy paths dropped packet triggered fast retransmit default dupthresh may cause timeout 
motivated difficulty strategy reducing dupthresh adaptively response timeouts 
combined increase decrease scheme dupthresh balances tradeoff false fast retransmits timeouts cost function quantifies reduction throughput associated false fast retransmit vs reduction throughput associated timeout 
result heuristic adapting dupthresh response false fast retransmit timeout events sender experiences 
complement dupthresh adaptation algorithm improvement tcp rto estimator eliminates sampling bias causes rtos aggressive paths delay packets 
today sack tcp avoids sampling rtts retransmitted packets accordance karn algorithm fast retransmit timeout sender know ack matches data packet original transmission retransmission 
delayed reordered packets trigger retransmissions included tcp rto estimator produce rto estimates short 
enhance rto estimator include rtt samples falsely retransmitted packets requiring timestamps extension tcp header 
icsi tr july reordering related state scoreboard sack tcp scoreboard data structure stores packet state sender concerning transmitted packets 
offers natural framework storing packet information fast retransmit false duration false fast retransmit length reordering packet experiences 
record fast retransmit starting time window reduction amount scoreboard entry retransmitted packet 
fast retransmit identified false record interval start false fast retransmit window unnecessarily halved 
measurement reordering length nuanced 
phases sampling distribution reordering lengths experienced packets measuring reordering length packet aggregating samples histogram reordering lengths observed connection path 
important note extensions describe scoreboard change asymptotic storage computation requirements scoreboard maintainance 
fields add scoreboard affect bytes packet recorded scoreboard number packets stored scoreboard 
reordering length histogram small stores events reordered packets 
techniques describe significantly different cost sack tcp widely deployed 
packet reordering length tcp sender avoid false fast retransmit packet reordered dupthresh greater number duplicate acks reordering generates 
packet delayed duplicate ack arrive sender packet arrives receiver packet worst case number duplicate acks generated delay packet difference highest packet number acked far number delayed packet 
intuitively packet delayed arrives order hole sender scoreboard packet sender receives sacks packets sent delayed packet receiving ack sack delayed packet 
measuring reordering length amounts detecting returning ack sack fills hole scoreboard corresponding packet number greater highest contiguous packet number previously acknowledged difference packet number hole greatest ack sack number received far reordering length 
moment assume acks dropped reordered delayed 
arrival packet receiver triggers cumulative selective ack communicates receipt packet 
case returning ack sack block delayed packet close exactly packet hole scoreboard 
hole lie previously acknowledged packet greatest contiguous packet number greatest packet number newly arriving ack packet numbers clarity exposition correspondence packet numbers sequence numbers abstracted away scoreboard data structure 
length packet stream receiver sacks sender acked 
sequence number example reordering measurement scoreboard 
sack 
greatest packet number newly arriving ack sack sender measures reordering length scanning scoreboard follows greatest contiguously acked packet number greatest ack sack number received far foreach packet current ack newly acks sacks hole endif endif acks dropped reordered single returning ack close hole scoreboard 
test ignores samples returning ack closes hole erroneous samples caused dropped reordered acks 
important note test reordering length measurement mechanism robust reordered acks section demonstrate simulation reordered acks affect throughput achieved tcp sender 
shows simple example reordering length measurement mechanism 
packet displaced packets stream data packets arrive receiver 
sacks return sender packets 
scoreboard shown moment cumulative ack packet returns 
sender finds hole packet concludes reordering length 
packet retransmitted ambiguity ack corresponds original transmission retransmission 
dsack retransmission returns sender discards reordering length sample retransmitted packet packet lost reordered 
dsack return sender pairs original transmission ack return retransmission second computes reordering length takes mean conservative approximation reordering length encountered packets 
note mean value regardless possible pairings acks data packets 
tcp receivers intended delayed acks receive order packets promote accumulation duplicate acks sender 
look freebsd tcp code reveals receiver uses delayed ack newly arrived segment contiguous previously acknowledged data reassembly queue containing icsi tr july packets sequence numbers greater contiguously acknowledged empty 
conclude facts delayed acks extremely occur reordering epoch receipt non contiguous packet receiver emptying reassembly queue 
possible number duplicate acks measure reordering length 
number duplicate acks affected strongly delayed dropped reordered acks 
method described allows measure multiple reordering events single window packets 
aggregating reordering histogram samples reordering lengths transmitted packet stored reordering histogram acks return sender 
bins histogram reordering lengths count number packets experienced reordering length configurable maximum 
histogram tracks reordering history configurable period time 
reordering event stored histogram holds timestamp 
periodically events older history period deleted histogram 
cost associated state connection histogram provides details reordering distribution dupthresh adjustment algorithms 
choice histogram storing state related reordering possible allman explore alternatives accumulate state 
goal demonstrate best case performance improvement attained accurate detailed reordering information histogram trades increased accuracy detail increased state size 
note reordering length samples retransmitted packets delayed insertion histogram 
retransmission packet sender wait return ack dsack described previously able determine packet reordering length 
dsack returns assume original retransmitted packet dropped 
storage computational costs standard sack sender implementation keeps scoreboard open tcp connection 
reordering length measurement scheme described keeps additional state places connection scoreboard reordering length histogram 
standard sack scoreboard measures packet retransmitted acknowledged 
reordering length measurement adds little state packet index scoreboard additional fields reordering length field dsack block counter field 
single byte storage packet index suffices reordering lengths packets bits counting dsack blocks bits 
sender buffer unacknowledged packet bytes sized packets adding byte storage scoreboard packet truly insignificant 
reordering length histogram stores reordering events contains timestamp bytes provide sufficient resolution magnitude pointer bytes 
histogram allocated dynamically reordering encountered 
costs storage connections encounter reordering storage proportional degree reordering connections maximum 
storage requirements restrict cost connections benefit 
goal explore best throughput attainable reordering schemes may keep state compared uses detailed reordering information 
computational cost reordering length measurement scheme involves scanning scoreboard receipt ack sack dsack modifying reordering length histogram time reordered packet 
note scheme scans number scoreboard entries standard sack examine scoreboard entries previous greatest contiguously acknowledged sequence number sequence number newly arrived ack sack determine new greatest contiguously sequence number 
detecting reordered packet single histogram insertion requiring constant time 
reordered packet expires histogram removal costs constant time 
oldest histogram members checked expiration insertion 
coarse grained timer expires insertions occur long period 
computational costs measuring reordering length negligibly greater standard sack 
avoiding false fast retransmits increasing dupthresh reordering histogram summarizes distribution reorderings experienced connection packets 
simple strategy avoiding false fast retransmits choose desired percentage reorderings false fast retransmits avoided set dupthresh equals percentile value reordering length cumulative distribution 
reordering events packets fewer dupthresh avoid false fast retransmits 
fixed percentile choice dupthresh may vary time reordering histogram contents change accordance reordering behavior connection path 
refer algorithm dsack fa false fast retransmit avoidance percentage reorderings algorithm avoids fa ratio 
avoiding timeouts adapting fa ratio described section increasing dupthresh cost 
potential negative effects large dupthresh include timeouts long delays packets retransmitted drops delayed response tcp congestion 
avoid algorithm reducing dupthresh needed 
directly varying dupthresh propose varying fa ratio 
increasing fa ratio increase dupthresh decreasing fa ratio decrease dupthresh 
natural approach building control loop governs adaptation fa ratio consider relative costs false fast retransmits timeouts set fa ratio accordingly 
cost function rtos false fast retransmits timeouts opportunity costs needlessly missed packet transmissions 
false fast icsi tr july mit causes window reduction half smaller window prevails return permit reinstatement previous window value 
contrast timeouts main costs idle period full window packets sent rto expires slow start congestion window size grow smaller half previous congestion window size multiple rtts 
distinguish types timeouts false timeouts dsack eventually returns occur delay loss causes rto 
true timeouts dsack returns occur loss causes rto 
suppose tcp connection steady state window size smoothed rtt retransmission timeout period tcp send maximum cwnd additional packets duplicate acks return limited transmit permits tcp send new data response returning duplicate acks ease triggering fast retransmit 
true timeout consists phases idle period slow start linear increase halved window 
fast retransmits reduce throughput timeouts consist halving window linear increase halved window 
additional cost suffering true timeout fast retransmit idle period slow start 
idle period sender misses opportunity transmit packets 
slow start sender misses opportunity send packets log log packets 
total cost true timeout true timeout log packets 
false timeout dsack information returns pre timeout congestion window restored 
period opportunity cost linear increase congestion window cost false timeout window restoration dsack roughly equal true timeout 
cost function false fast retransmits transmission opportunity cost false fast retransmit depends interval required sender receive dsack identifies fast retransmit false 
recall section scoreboard measures false fast retransmit duration wrongly reduced window window reduction return dsack 
maintain exponentially weighted moving average false fast retransmit duration cost costs approximately equal dsack information may delayed returning case linear increase may old window restored 
false fast retransmit merely window halved unnecessarily rtt 
cost greater reduced window effect longer period 
note subsequent rtt costs linear increase congestion window progresses rtts original window value restored 
dd re cost false fast retransmit bounded false fast retransmit packets 
note limit regardless cap cost appropriately 
estimated exponentially weighted moving averages values instantaneously accurate 
actual cost false fast retransmit lies cost high dd re cost low bd rc 
discrete single value small change provoke disproportionate change false fast retransmit linearly interpolate low high cost function limited transmit bound limited transmit introduces opportunity cost idle time fa ratio dupthresh great 
situation may happen limited transmit insufficient accumulate number duplicate acks trigger fast retransmit idle period results 
say limited transmit problematic 
contrary dupthresh large idle time provides downward pressure fa ratio incurring severe cost associated timeout 
specifically large dupthresh effect rtt small relation minimum rto sender may remain idle exhausts limited transmit 
timeout may occur delayed packet easily acknowledged rto expires 
idle period indicates dupthresh grown large 
sender exhausts limited transmit store time event occurs 
ack returns permits window advance rto occurred idle period difference time ack returns stored time limited transmit exhausted 
period count number duplicate acks return duplicate acks partially filled pipe time idle period began part opportunity cost idle period 
cost idle period limited transmit steady state window size smoothed rtt 
reducing fa ratio cost idle period risk increasing number false fast retransmits experienced 
decrease fa ratio limited transmit induced idle period limited transmit false fast retransmit 
adapting fa ratio combined cost function having defined cost functions associated timeouts false fast retransmits limited transmit explain icsi tr july vary fa ratio 
parameter fundamental step adapt fa ratio 
results chosen permit fine adjustment fa ratio control loop 
rules adapting fa ratio false fast retransmit detected increase fa ratio timeout decrease fa ratio timeout false fast retransmit limited transmit induced idle period provided limited transmit false fast retransmit decrease fa ratio limited transmit false fast retransmit rules heuristically adapt fa ratio dupthresh way maximizes throughput connection experiencing reordering 
false fast retransmits cause gradual increase fa ratio 
timeouts significant idle periods triggered great dupthresh values cause fa ratio decrease proportion relative throughput reductions create compared throughput reduction associated false fast retransmit 
refer algorithm uses cost functions rules adapt fa ratio timeout avoidance 
collected enhancements sender result tcp achieves significantly greater throughput standard sack tcp important note disparity directly imply fairness difficulties sender dsack enhancements sender standard sack tcp 
reordering causes standard sack tcp perform poorly 
dsack enhanced sender doesn cause reordering responsible poor throughput sack achieves reordering 
cases tcp competes sack tcp reordering path replacing dsack tcp sack tcp materially improve performance sack tcp 
choosing accurate conservative rto karn algorithm dictates retransmitted packets included rtt sampling retransmission ambiguity described section 
paths packets delayed delayed packets provoke retransmissions 
presence reordering karn algorithm introduces sampling bias including long rtt samples rto estimator 
cases packets delayed significant periods relative rtt bias may cause tcp adopt rto insufficiently conservative causes false timeouts 
falsely retransmitted packets fast retransmit timeout acks return second dsack 
acks arrive sender sender may approximate rtts experienced packets pairing ack return transmission second ack second transmission computing time elapsed mean values single rtt algorithm name description sack standard sack dsack dsack ffr recovery dsack fa dsack fixed fa ratio dsack dsack fa enhanced rtt sampling dsack ta dsack fa timeout avoidance dsack taes dsack ta enhanced rtt sampling dsack hg dsack ta histogram rto estimator table algorithms compared simulation 
ffr recovery includes detection false fast retransmits restoration old larger window size 
sample rto estimator 
scoreboard holds time information associated packet transmission retransmission 
note mean value doesn change regardless packets acks paired properly 
packet delayed delayed mean rtts include portion delay rtt sample ignored karn algorithm 
sample exceed true rtt longer delayed packets 
sense dsack enables rtt sampling inclusive delayed packets conservative 
dsack returns original retransmitted packet lost don sample packet rtt 
sense comply karn algorithm retransmissions caused packet drops include additional rtt samples retransmissions caused packet delays 
term rtt sampling extension dsack es enhanced rtt sampling 
experimental evaluation section presents simulation results demonstrate improvement dsack sender side algorithms tcp performance paths reorder delay packets 
compare performance variants dsack propose section proposed prior 
table summarizes algorithms compare simulation 
ms ms ms mb mb mb network topology simulations 
simulate algorithms ns network simulator version includes support generation dsack information receiver sack implementation 
introduce reordering extended ns delay configurable percentage packets traverse link 
delay distribution configurable simulation delays distributed random processes supported ns normal exponential hyperexponential pareto pareto ii uniform possible 
independently delay control drop rate associated link 
simulations consist single long lived tcp flow traversing network topology shown 
flow lasts seconds 
data points simulation results plots means runs different pseudorandom number icsi tr july parameter value initial fa ratio ile sampled rtt histogram ratio ile sampled minimum dupthresh pkts maximum dupthresh pkts maximum sending window pkts limited transmit bound cwnd reordering length sample lifetime ewma ffr duration table simulation parameters 
ffr denotes false fast retransmit 
generator seeds packet reordering process noted 
reordering events packet drops introduced bottleneck link link speed propagation delay vary 
simulations maximum window size permitted sender fixed packets 
achieve precise control loss behavior bottleneck bottleneck link rtt set capacity packets second link don introduce controlled packet delay dropping process link tcp flow achieves throughput steady state window size exactly 
greater bottleneck link periodically cause packet drops tcp congestion window varied saw tooth fashion bracketing packets 
show parameters simulations table 
note bound number packets tcp may send limited transmit current congestion window value 
limit ensures sender delays window reduction loss fast retransmit longer rtt 
false fast retransmit avoidance show dsack sender improves tcp performance detecting recovering avoiding false fast retransmits 
delay link ms packet delay process normally distributed mean ms standard deviation ms packets selected delay delayed ms ms note parameters represent typical internet link delays relatively mild reordering 
varying packet delay rate vary percentage delayed packets introducing packet drops 
shown packets delayed throughput sack drops rapidly dsack fa ta better 
dsack ta performs best throughput decreases slowly schemes 
dsack fa ta avoid false fast retransmits varying dupthresh 
reveals fraction packets resent fast retransmit retransmission false dsack fa 
dsack ta prevents false fast retransmits 
show sack fraction false note sack single point plotted dsack ta mean dsack ta rtx plotted atop 
throughput pkts packet delay rate sack dsack dsack fa mean dsack fa rtx dsack ta mean dsack ta rtx sack throughput vs fraction delayed packets 
ms propagation delay normally distributed pkt delay mean ms stdev ms false fast retransmit ratio packet delay rate dsack dsack fa mean dsack fa rtx dsack ta mean dsack ta rtx false fast retransmit ratio vs fraction delayed packets 
ms propagation delay normally distributed pkt delay mean ms stdev ms fast retransmits sack implementation detect events 
cases virtually rtos simulation dsack ta adjusts fa ratio false fast retransmits avoided 
sack shows ideal throughput tcp achieves packet delay 
dsack ta maintain throughput possible packet delays packets delayed 
rtx mean variants ta fa algorithms show comparison different strategies measuring reordering lengths retransmitted packets 
recall ambiguity matching acks retransmitted packets 
rtx variant uses rtx bit reserved bit tcp header mark retransmitted packets acks differently resolving ambiguity 
mean variant uses technique described section rtx bit packets paired acks order acks return mean reordering lengths sample reordering length histogram 
subsequent simulations plots mean rtx suffix mean variant 
performance dsack ta mean comparable dsack ta rtx fa mean variant performs bit better fa rtx variant 
dsack fa mean averages transmitted packets measured reordering lengths dsack fa rtx uses reordering length original transmission 
simulation reordering length original packet shorter retransmitted packet original packet ack usu icsi tr july ally arrives earlier 
dsack fa mean tends measure slightly longer reorderings selects slightly larger dupthresh turn causes fewer false fast retransmits 
result higher throughput dsack fa mean 
varying packet drop rate throughput pkts packet drop rate sack dsack dsack fa mean dsack fa rtx dsack ta mean dsack ta rtx sack throughput vs drop rate 
packets delayed 
ms propagation delay normally distributed pkt delay mean ms stdev ms study behavior dsack packets delayed lost 
example packets delayed packet drop rate varies 
shown throughput achieved dsack fa decreases sharply loss rate increases 
expects tcp variants suffer reduced throughput loss 
sack shows throughput sack tcp achieves loss rates packets reordered 
case reordering robust dsack variants fast retransmit identified false fast retransmit packet losses window packets 
drop rate increases increasingly packet drop occurs window 
result percentage false fast retransmits decreases rapidly performance difference dsack sack diminishes 
timeout avoidance throughput pkts link delay sack dsack dsack fa mean dsack fa rtx dsack ta mean dsack ta rtx throughput vs link propagation delay 
packets delayed packets dropped uniform packet delay 
demonstrate performance benefits dynamically adapting fa ratio balance false fast retransmits timeouts 
delay packets drop packets vary link propagation delay ms ms packet delay time varies uniformly rtts 
parameters represent cases upper range internet link delays moderate packet delay 
shown dsack ta performs best 
dsack ta causes lowest percentage false fast retransmits dsack fa causes smaller percentage 
examine relationship closely fix link delay ms vary target fa ratio dsack fa 
shows rto behavior fast retransmit behavior throughput behavior dsack fa conditions 
fraction sent packets encounter timeouts decreases rapidly fa ratio decreases decreases slightly fa ratio decreases 
note dsack ta adaptively chooses fa ratio approximately point diminishing returns fewer timeouts avoided 
reveals fa ratio dupthresh decreases actual fraction fast retransmits increase 
dsack ta decrease fa ratio timeouts avoided progressively fast retransmits result 
shows dsack ta achieves higher throughput dsack uses fixed dupthresh dsack fa fixes fa ratio balances false fast retransmits timeouts 
note dsack ta adapts dupthresh achieves approximately maximum throughput available possible fixed fa ratios 
fa ratio duplicate ack threshhold pkts time fa ratio duplicate ack threshhold fa ratio dupthresh vs simulated time single simulation 
shows dynamic behavior dsack ta adapts fa ratio dupthresh note ratio oscillates point shown offer roughly maximum throughput fa ratios 
dupthresh oscillates 
shows effect increasing propagation delay link 
note performance difference dsack ta dsack fa narrows 
phenomenon occurs link delay increases idle cost associated timeout decreases cost difference timeout false fast retransmit 
performance dsack fa approaches dsack ta link delay increases 
icsi tr july fa ratio sack dsack dsack ta dsack fa fraction packets encounter timeouts vs fa ratio 
fa ratio sack dsack dsack ta dsack fa fraction fast retransmitted packets vs fa ratio 
fa ratio sack dsack dsack ta dsack fa throughput vs fa ratio 
timeout avoidance comparing dsack fa dsack ta 
conservative rto estimator study effect rto estimator performance dsack sack 
explained previously retransmissions provoked delayed packets may cause karn algorithm choose rto values biased short leading overly aggressive rto 
propagation delay ms 
delay packets drop 
packets delayed normally distributed process mean kp standard deviation delays kp seconds mean rtt 
parameters represent cases upper range internet link delays extreme stress severe packet delays 
observe similar phenomena cases packet delay exceed second minimum rto satellite links link layer retransmission fall category 
throughput pkts average delay sack dsack dsack fa dsack ta dsack taes dsack hg throughput vs average delay time 
packets delayed packet drops ms propagation delay normally distributed pkt delay mean kp stdev figures gradually increase 
grows rtt delayed packet may exceed rto second may trigger false timeout 
packet delay increases throughput decreases expected 
goes corresponds mean delay seconds throughput dsack ta drops sharply worse dsack fa 
may timeout avoidance mechanism dsack ta doesn cause rto estimator timeout avoidance 
shows fraction packets encounter timeouts dsack ta increases rapidly exceeds dsack fa timeout ratio average delay sack dsack dsack fa dsack ta dsack taes dsack hg fraction packets encounter timeout vs average delay time 
packets delayed packet drops ms propagation delay normally distributed pkt delay mean kp stdev mean delay surpasses seconds 
dsack ta designed avoid timeouts increasing number fast retransmits 
karn algorithm causes false fast retransmits skew sampling rtts excluding rtt samples delayed packets 
dsack taes implements enhanced rtt sampling strategy described section maintains low incidence timeouts packet delays severe including conservative mean rtt samples packets experience false retransmits 
conservative rto chosen dsack taes leads fewer timeouts increased throughput 
timeout ratio fa ratio sack dsack dsack ta dsack taes dsack hg dsack fa dsack fraction packets encounter timeout vs fa ratio 
packets delayed packet drops ms propagation delay normally distributed pkt delay mean ms stdev ms icsi tr july sack dsack dsack fa dsack ta dsack taes dsack hg table mean rto rtos 
throughput pkts fa ratio sack dsack dsack ta dsack taes dsack hg dsack throughput vs fa ratio 
packets delayed packet drops ms propagation delay normally distributed pkt delay mean ms stdev ms look interaction timeout avoidance rto estimator closely fix vary fa ratio figures 
shown fraction timeouts dsack fa fa ratio far dsack ta causes packets encounter timeouts 
note dsack fa packets encounter timeouts fa ratio decreases prior results incidence timeouts steadily decreases fa ratio decreases 
consider dsack samples rtts packets falsely retransmitted 
incidence timeouts dsack remains low 
table reveals effect sampling additional rtts false retransmits mean rto value simulation 
additional samples average rto dsack ta shorter dsack fa fa ratio 
adding samples falsely retransmitted packets dsack taes eliminates bias long rtt samples restores rto value comparable dsack fa 
comparison include curve uses detailed histogram rtt samples packet exponentially weighted moving average compute rto 
dsack hg targets point cumulative rtt distribution formulating rto estimate 
note dsack fa dsack taes conservative dsack hg 
standard ewma rto estimator inherently conservative skewed false fast retransmits compared estimate histogram nearly perfect information concerning rtt distribution 
shows timeout avoidance continues perform severe packet delays sufficiently conservative rto estimator added dsack taes 
matches best throughputs achieved dsack fa ratio values dsack hg 
range delays figures dsack taes offers high throughput low timeout incidence comparable dsack hg 
robustness ack reordering mechanisms propose making tcp sender robust reordering address effects reordered data packets sender window size 
reordering may occur reverse path acks arrive order sender 
algorithms ack stream measure reordering lengths data packets important verify reordered acks diminish effectiveness 
confine interest avoidance false fast retransmits false timeouts goals reordered acks effects including increasing burstiness sender investigated previously 
shows throughput attained previously described dsack aware sender variants fraction ack packets reordered increases 
note reordered acks significant negative effect sender throughput reasons previously explained section 
similarly negligible effect throughput link delays data ack packet delay distributions simulated 
throughput pkts ack delay rate sack dsack dsack fa mean dsack fa rtx dsack ta mean dsack ta rtx throughput vs fraction reordered acks 
ms propagation delay data packets dropped data packets delayed normally distributed data ack pkt delay mean ms stdev ms comparison prior allman propose techniques adapting dupthresh response reordering 
increase dupthresh measuring reorderings explicitly weigh tradeoff false fast retransmits timeouts 
timeout propose resetting dupthresh 
advantage proposals require little state sender false fast retransmit timeout avoidance algorithms maintain reordering histogram 
section compares behavior allman algorithms interest exploring space alternatives different costs sender side state 
characterizing expected behavioral differences algorithms 
allman algorithms dupthresh increases great value great maximum reordering length seen simulation 
great dupthresh value may increase delay dropped packets cases reordering length heavy tailed distribution 
network path reorders severely algorithms dupthresh decrease strategy rely timeout reset dupthresh 
icsi tr july comparison exchange extra state associated reordering histogram timeout avoidance algorithm avoids false fast retransmits ignoring rare extremely long reorderings 
reordering lengths change distribution time histogram reflects change causes dupthresh change accordingly 
resetting dupthresh discards history learned network reordering behavior re accumulating history takes time 
exchange increased state reordering length histogram preserves knowledge path characteristics timeouts 
timeouts expensive allman limit dupthresh current congestion window 
limit may prevent timeouts avoided smaller dupthresh multiple packets delayed lost single window timeout may inevitable 
dupthresh limit cwnd prevent false fast retransmits cases reordering lengths longer cwnd long trigger false timeouts second 
congestion window small cases occur frequently 
allman simulator code ns delay loss models previously 
observations simulating algorithms identical networks follow 
throughput pkts average delay sack dsack bl dsack bl dsack bl avg dsack bl ewma dsack bl dsack bl dsack ta throughput vs average delay time 
link delay ms packets delayed dropped 
packet delay normally distributed mean kp stdev compare approaches network link ms propagation delay mb link capacity packets delayed normal distribution mean kp standard deviation packet delays lie kp 
shown figures gradually increase vary packet delay ms ms dsack bl xxx curves represent results allman algorithms 
shown kp small schemes perform similarly better sack kp increases dsack ta achieves increasingly higher throughput compared schemes simulated 
shows fraction fast retransmits suffered hovers schemes suffer increasingly fast retransmits mean packet delay increases 
code runs ns runs ns 
interest maximal comparability results tcp parameter defaults running code 
fast retransmit ratio average delay sack dsack bl dsack bl dsack bl avg dsack bl ewma dsack bl dsack bl dsack ta incidence fast retransmits vs average delay time 
link delay ms packets delayed dropped 
packet delay normally distributed mean kp stdev cwnd bound dupthresh prevents schemes avoiding false fast retransmits caused longer reorderings 
drops drops drops drops total total fr ratio fr ratio packets packets dsack bl dsack ta table throughput fast retransmit ratios bursty packet loss 
duplicate ack threshhold time dsack ta dsack bl dupthresh values dsack ta dsack vs time single simulation 
explore behavior allman algorithms bursty packet loss multiple packets dropped window 
dropping pattern occur low statistical multiplexing connections slow start exponential window increase causes drop tail router drop burst packets 
link ms propagation delay packets delayed normal distribution mean ms standard deviation ms packet delays lie ms packets delayed 
introduce small fraction packet drops 
drop event lasts period varies uniformly ms consecutive packets arrive dropped 
drop behavior trigger timeouts icsi tr july cwnd bound dupthresh 
table see throughput dsack bl comparable dsack ta aren bursty packet drops 
introduce small fraction bursty packet drops throughput dsack bl suffers dsack ta dsack bl experiences false fast retransmits 
shows variation dupthresh dsack ta dsack bl timeout resulting drop burst cause dsack bl reset dupthresh dsack bl loses reordering length history 
linearly increases dupthresh encounters reordering 
contrast dsack ta keeps dupthresh optimal value maintains histogram reordering events 
dsack ta suffers fewer false fast retransmits offers higher throughput 
compared variants dsack extensive set network conditions vary link delay ms packet drop rate percent fraction delayed packets percent mean packet delays ms random processes supported ns normal exponential hyperexponential pareto pareto ii uniform 
expected dsack taes best performance combines benefits false fast retransmit avoidance timeout avoidance enhanced rtt sampling 
cases schemes especially dsack fa dsack offer slightly better throughput dsack taes 
cases throughput differences 
believe factors cases include cost functions ewma estimate parameters steady state window size duration false fast retransmits 
averages computed instantaneously accurate 
control loop adapting fa ratio takes time converge optimum initial value 
converges oscillates value 
exhaustively evaluated dsack taes simulation look forward implementing widely distributed host operating system linux freebsd 
completing implementation allow gain deployment experience enhanced protocol learn minimize processing overhead incurs 
pursued sender side designs reordering robustness 
designs require sender store extra state connection sack scoreboard reordering histogram 
busy server thousands open connections additional state requirements may burdensome 
believe dsack taes built receiver side fashion receiver measures reordering keeps relevant histogram applies dupthresh adjustment algorithms dynamically informs sender dupthresh value tcp option 
design reordering related state requirements server client cost requiring modification wire protocol 
reordering robust transport protocol step viable multi path routing 
transport problems spreading single flow packets multiple paths remain unaddressed 
different paths packets take may different rtts different loss rates 
understanding tcp behavior cases require study 
tcp congestion control algorithms act granularity single window 
choosing number packets limited transmit may send affects maximum reordering length dsack taes avoid false fast retransmits 
limited transmit permits multiple windows packets sent result reordering robustness granularity greater single window 
ack clocking ensures limited transmit cause tcp unresponsive congestion long term choice maximum allowed extent limited transmit bears investigation 
considered long lived flows interest simplifying evaluation algorithms properties 
web transfers short lived 
believe sharing reordering state reordering histogram fa ratio short lived flows occur serially time confer benefits dsack taes short lived flows 
believe little risk network sharing state way congestion state reordering state cause sender send aggressively current network conditions permit 
cost functions adapt fa ratio decisions individual false fast retransmit timeout limited transmit idling events 
plan investigate history form event counts past period event types adapt fa ratio way causes converge quickly optimal value change smoothly time outcomes affects throughput dsack taes achieves 
network environments modified conservative rto estimator described may conservative 
multi hop ad hoc networks rtts extremely variable link layer arq 
ieee example backs exponentially retransmissions delays subsequent packets backoff periods 
cascaded chain hops offers formidable rtt variability 
tcp estimates rto rto srtt 
standard tcp rto estimator 
control loop increase dynamically response spurious timeouts decay back minimum periods spurious timeouts may aid making tcp rto estimator sufficiently conservative environments rtts severely variable 
extensions tcp allow sender distinguish reordering loss interest improving tcp robustness paths reorder packets 
extensions histogram reordering lengths packets experience adapt tcp dupthresh control loop adapt fa ratio fraction reordering events sender avoid losses 
simulations networks wide range link delays packet delays loss patterns show dsack taes algorithm consistently im icsi tr july proves tcp throughput significantly face reordering compared standard sack tcp previously published reordering robustness enhancements sack tcp 
key novel feature dsack taes timeout avoidance control loop varying fa ratio mindful costs false fast retransmits costs timeouts idle periods limited transmit 
control loop converges fa ratio offers throughput nearly great maximum attainable fixed fa ratio 
reordering histogram sender allows sender profit knowledge connection reordering history timeouts 
noteworthy just limited transmit aids avoiding timeouts dupthresh fixed aids avoiding timeouts dsack taes limited transmit cost function allows dsack taes reduce fa ratio dupthresh having incur costly timeout circumstances 
sampling rtts delayed packets dsack taes significantly improves tcp throughput ensuring rto estimator sufficiently conservative packets severely delayed 
despite improved throughput reordering paths dsack taes steal bandwidth sack tcps reordering limits throughput non enhanced sack transmission behavior dsack taes 
face persistent network congestion dsack taes significantly aggressive sack tcp uses limited transmit obeys ack clocking 
dsack taes outperforms sack tcp previously published dsack variants limited transmit regimes send half congestion windows worth data 
choice extent dsack taes allows limited transmit reason worst case delay tolerable application length reordering sender able respond properly 
dsack taes reordering robust tcp safe deploy 
believe deployment substantially loosen order delivery restriction internet architecture 
simulation code dsack taes ns may www icir org rr tcp 
sally floyd ethan mark allman helpful discussions reordering problem 
allman balakrishnan floyd 
enhancing tcp loss recovery limited transmit 
rfc jan 
allman paxson stevens 
tcp congestion control 
rfc apr 
bansal balakrishnan floyd shenker 
dynamic behavior slowly responsive congestion control algorithms 
proceedings acm sigcomm aug 
bennett partridge 
packet reordering pathological network behavior 
ieee acm transactions networking dec 
blake black carlson davies wang weiss 
architecture differentiated services 
rfc dec 
allman 
making tcp robust packet reordering 
acm computer communication review jan 
floyd 
re tcp order delivery 
email interest mailing list feb 
floyd handley padhye widmer 
equation congestion control unicast applications 
proceedings acm sigcomm aug 
floyd mahdavi mathis podolsky 
extension selective sack option tcp 
rfc july 
ieee computer society lan man standards committee 
wireless lan medium access control mac physical layer phy specifications 
ieee standard 
jacobson braden borman 
tcp extensions high performance 
rfc may 
karn partridge 
estimating round trip times reliable transport protocols 
proceedings acm sigcomm aug 
ludwig katz 
eifel algorithm making tcp robust spurious retransmissions 
acm computer communication review jan 
mathis mahdavi floyd romanow 
tcp selective options 
rfc oct 
ns online 
www isi edu nsnam ns 
padhye floyd 
inferring tcp behavior 
proceedings acm sigcomm aug 
paxson 
routing behavior internet 
proceedings acm sigcomm aug 
paxson 
internet packet dynamics 
proceedings acm sigcomm pages sept 
paxson allman 
computing tcp retransmission timer 
rfc nov 
ward choi hain 
data link control protocol leo satellite networks providing reliable datagram service 
ieee acm transactions networking feb 

