environment reverse engineering executable programs cristina cifuentes department computer science university gpo box hobart tas australia cifuentes cs edu au reverse engineering software systems traditionally centered generation high level abstractions specifications high level code databases 
report reverse engineering environment low level executable code reverse compilation decompilation environment aids understanding underlying executable program 
reverse compilation process recovers high level code executable programs higher representation level produced disassemblers fact disassembly part stage process 
tools aid process reverse compilation loaders signature generators library prototype generators disassemblers library bindings language language translators 
integration tools process 
results obtained prototype reverse compilation system dcc encouraging high level code regenerated correct expressions control structures complete elimination registers condition codes 
elimination rate low level instructions reached representing improvement decompiler system previous decompilers disassemblers rate tends nil 
sample decompilation program 
keywords reverse engineering reverse compiler disassembler signatures dos language 
reverse engineering software systems defined analysis subject system identify system components interrelationships create representation system form higher level abstraction 
aim reverse engineering software systems gain research partly funded australian research council arc author queensland university technology brisbane australia 
understanding system structure purposes maintenance case reverse engineering hardware systems system normally analyzed create duplicate copy 
reverse engineering environments reported literature concentrate generation high level specifications graphical representations cobol fortran source code extraction design representations specification documents source code 
recovery design information database incorporated case computer aided software engineering tools 
concentrate reverse engineering tools lower level tools recover high level source code executable programs 
tools category include disassemblers debuggers decompilers disk editors unpacking utilities interested disassemblers decompilers 
long argued decompilers difficult write due variety output vendor compiler suite tools help process decompilation disassembly 
disassembler program reads executable program translates equivalent assembler program decompiler goes step translating program equivalent high level language pascal program 
cases executable program translated arbitrary program compiled high level language 
general decompiler comprises disassembler step intermediate generation high level code 
reverse engineering tools disassemblers decompilers semi automated tools fully automated tools 
uses decompilation traditionally decompilation help migration computer software old new machine architecture 
advent high performance machines transitional migration platform needed provide users soft ware run soon old machines new machine 
technique known binary translation developed disassembly decompilation techniques provides run time support environment run code successfully translated new machine environment developed digital aid translation vax mx software new alpha machine 
alpha binary translation environment uses decompilation require tools help process extraction high level information 
mainly due fact software large complex decompilation incomplete process 
uk nuclear electric plc developed decompiler verify code produced proprietary compiler code run prom safety critical environment compiler trusted 
environment incorporated decompiler data type information original high level language program decompiled executable program determined high level code regenerated similar functionality initial high level code 
uk group oxford university worked automatic generation decompilers compiler specifications logic functional languages approach generate decompiler subset compiler 
research aimed provision reverse engineering tools maintenance 
china decompiler executable programs compiled microsoft version compiler written 
decompiler recognition library functions hand crafted method 
attempt high level data type recognition arrays structures mentioned detail 
decompiler mentioned 
australia dcc decompiler written help detection virus code executable program aid maintenance legacy code extraction source code systems 
case decompiler reports suspicious malicious code comments generated high level language program case decompiler produces high level program aids understanding legacy system rewritten different newer language 
need extra tools theoretical practical limitations writing decompilers 
problems solved heuristic methods determined completely 
due limitations decompiler performs automatic program translation source programs semi automatic program translation source programs 
differs compiler performs automatic program translation source programs inline semi automation reverse engineering tools 
main problem disassembly derives representation data instructions von neumann architecture indistinguishable 
data located instructions implementations indexed jump case tables 
representation idioms code practices hard disassemble executable program 
fact separation data instructions unsolvable general algorithm determine separation algorithm solve halting problem 
problem great number subroutines introduced compiler linker bound executable program 
compiler introduces startup subroutines set environment runtime support routines required 
routines normally written assembler cases higher level representation 
operating systems provide mechanism share libraries executable programs self contained library routines bound binary image 
library routines written language compiler written assembler 
means executable program contains routines written programmer great number routines linked linker 
example hello world program compiled generates different subroutines executable program 
program compiled pascal generates subroutines 
decompiling example interested main subroutine subroutines 
legal issues questions raised years regarding legality decompilation 
debate supporters decompilation claim fair com idiom sequence instructions form logical entity taken meaning derived considering primary meanings instructions 
possible decompilation tools opponents decompilation claim copyright decompilation currently held fact debate reported literature 
law different countries modified determine cases decompilation 
commercial software sold software agreements ban user disassembling decompiling product 
example part lotus software agreement reads may alter merge modify adapt sofware way including disassembling decompiling 
purpose debate legal implications decompilation 
topic covered 
rest structured way describes complete reverse compilation system reports results achieved implementation dcc system provides sample decompilation benchmark multiplication program compares previous provides 
reverse compilation system steps involved typical decompilation contemporary executable program shown 
text boxes represent tools aid process decompilation text represents data files 
system completely automated provides partial results aid understanding underlying program 
general consider user source information process particular separating data code option included system 
loader typical information contained executable program header contains information sizes segments default values registers entry point program relocation table code segment data segment 
loader reads header information executable program determines amount memory required load binary image program code data segments allocates memory loads performs relocation data elements relocation table 
loader determines entry point program 
signature generator signature generator program automatically determines library signatures 
signature binary pattern uniquely identifies compiler library subroutine particular library file 
signatures attempts reverse task performed linker links compiler start code library subroutines executable program 
disassembler decompiler uses information determine linked subroutines required analyzed eliminated case start code replaced name case library routines 
subroutines user compiled initial high level language program 
library signatures needed statically linked libraries case dos executable programs windows programs dynamic link libraries 
example compiled program displays hello world different subroutines executable program subroutines added compiler set environment routines form part printf added linker subroutine forms part initial program 
determination library signatures aids matching printf complete subtree subroutines called 
compiler signatures aid determination real entry point main program code introduced compiler setting environment allowing disassembler decompiler skip compiler set routines example 
signature generator reduces number subroutines analyze increases documentation final programs library names arbitrary subroutine names 
lookup signatures implemented perfect minimal hashing algorithm constant lookup expected time determine subroutine matches signature known subroutine signatures library 
automatic method generating library signatures described :10.1.1.105.6048
prototype generator prototype generator program automatically determines types formal arguments library subroutines type return value functions 
programs prototypes derived library header files provided compiler case pascal information stored library file determined parsing file 
information decompiler determine type arguments library subroutines number arguments possible return type functions 
oe oe xy library signatures assembler program library bindings absolute machine code loader disassembler decompiler hll program postprocessor hll program executable program relocatable machine code prototype generator library prototypes library headers compiler signatures libraries signature generator decompilation system disassembler disassembler parses binary image program translate assembler 
aid compiler signatures disassembler firstly determines bytes entry point provided loader match known compiler signature real main program determined code point onwards 
compiler signature matched code disassembled entry point compiler setup routines disassembled 
note compiler signatures done lose generality performs parsing algorithm entry point 
main problem encountered disassembler determining data instruction 
parsing program performed traversing paths program entry point assuming paths followed program 
new paths determined transfers control sections code new entry points means conditional unconditional jumps subroutine calls 
algorithm stops paths searched 
note paths may partially searched due instruction decoded 
general case indexed indirect jumps rely value register 
cases heuristics applied determine bounds register example implementation indexed case instructions 
instruction decoded flagged commenting generation final high level program 
conventional approach able disassemble great percentage executable program 
normally generates assembler program part decompiler needs provide control flow graph program call graph control flow graphs attached subroutine node 
graph needed analysis decompiler performs 
decompiler decompiler transforms low level representation program high level language representation 
section treat decompilation complete process translation binary image high level language program discussion disassembler incorporated part decompiler assembler code intermediate code analysed transformed decompiler 
conceptually decompiler structured similar way compiler series phases transform source executable program representation 
phases grouped implementation purposes different modules front udm back seen 
theory grouping phases decompiler easy write different decompilers different machines languages writing different front ends language dependent binary program machine dependent analysis udm front back hll program decompiler modules different machines different back ends different target languages 
practical applications result limited generality intermediate language 
front consists phases machine machine language dependent 
module parses binary image program implements disassembler stores intermediate language representation analyzes disassembled code determination base data types integers long integers reals constructs control flow graph program 
udm universal decompiling machine intermediate module completely machine language independent performs core decompiling analysis 
phases included module 
data flow analysis phase improves intermediate code eliminating machine low level concepts register condition codes regenerating high level language concepts expressions 
example intermediate language code asgn ax bp eh asgn bx bp ch asgn bx bx asgn ax ax bx asgn bp eh ax converted high level expression asgn bp eh bp eh bp ch rely registers 
phase traditional compiler optimization theory implements extended register copy propagation algorithm eliminate registers regenerate high level expressions eliminate intermediate language instructions push pop performs intra procedural live register analysis determine register variables function return registers 
complete algorithms perform analysis described 
analysis data types done stage attempt recover compound data types arrays structures 

control flow analysis analysis structures control flow graph subroutine program generic set high level language constructs 
generic set contains control instructions available languages looping conditional transfers control 
implementation generic set composed case conditionals repeat endless loop loops 
language specific constructs allowed available languages 
shows sample control flow graphs conditional loop 
aim structuring algorithm detect underlying generic control structures program eliminate possible unconditional transfers control goto statements 
note goto construct forms part generic set control structures languages pascal allow construct underlying graph representable higher level language goto statement 
complete algorithms structuring arbitrary graphs graph theory 
back generates final high level language code control flow graph improved intermediate code subroutine 
variable names selected local variables stack register variables arguments 
subroutine names selected different routines program 
control structures intermediate instructions translated high level language statement 
library bindings target high level language generated decompiler different original language oe ae oe gamma gamma psi gamma gamma psi generic constructs compile executable source program generated target code library names library signatures detected program correct recompiled target language library routines language 
library bindings solves problem binding subroutines language 
iso committee sc working group concerned creation standards language independent access service facilities 
define language independent bindings languages modula 
information library bindings placed file back decompiler produce target code uses target language library routines ones matched disassembly 
postprocessor postprocessor program transforms highlevel language program semantically equivalent high level program written language 
example target language code loc loc code loc loc converted postprocessor loc loc loc code semantically equivalent program control structures available language generic set structures decompiled decompiler 
experimental results dcc prototype decompiler system written dos operating system 
dcc initially developed decstation running ultrix ported intel architecture dos 
dcc takes input exe com files intel architecture produces target assembler programs 
decompiler built techniques summarized fully described composed phases shown 
seen decompiler built loader disassembler library bindings postprocessing phase 
compiler library signatures generated compilers including borland turbo microsoft visual 
prototype decompiler determines base types byte integer long pointer able determine compound types arrays structures implemented 
library signatures library prototypes compiler signatures assembler binary program parser loader generator program semantic analyzer data flow analyzer control flow analyzer code generator generator control flow graph intermediate code code generation assembler program structure dcc decompiler system section reports test suite exe programs originally written compiled borland turbo dos 
programs base type variables illustrate different aspects decompilation process 
programs run batch mode generating disassembly file file call graph program statistics intermediate code instructions 
statistics reflect percentage intermediate instruction reduction subroutines generated subroutines translate assembler considered statistics 
program total count intermediate instructions analysis total percentage reduction 
programs test suite follow programs deal arithmetic operations different base types byte integer long integer original programs code variables defined different type 
programs benchmark programs plum hall benchmark suite 
programs written eric raymond freely available network 
programs modified ask arguments program scanf scanning argv command line array arrays supported dcc 
programs calculate fibonacci numbers compute cyclic redundancy check crc character multiply matrixes 
program illustrate array address computation left dcc terms expression analyzed type propagated array 
presents summary results programs considered test suite 
total number intermediate instructions analysis compared final intermediate instructions gives reduction instructions 
reduction instructions mainly due optimizations performed data flow analysis particularly elimination registers subroutines reconstruction high level expressions 
recognition idioms initial intermediate code reduces number instructions helps determination data types long integers 
decompiled programs number user subroutines plus runtime support routines program 
routines translatable high level representation assembler generated 
percentage reduction rate represents code explosion performed compiler translating high level language machine language 
rate needs fully reverted decompiler high level abstraction expected 
note reduction rate disassembler zero disassembler need generate higher representation merely translate machine instructions assembler program reduction fibo crc total results test suite programs mapping 
example decompilation benchmark program plum hall benchmarks 
program benchmarks integer multiplication executing multiplications loop 
disassembly program shown decompiled program initial program 
long variables loop large number times program integer variables perform operations variables program 
seen disassembly long variables located stack offsets integer variables offsets register variable si 
final code identical initial code reduction instructions achieved program seen 
comparison previous decompilers variety purposes summarized 
decompilers help migration nd rd generation machines decompiler conversion languages cobol reported 
decompilers automatic migration programs systems piler attempted support large number source target languages design language aircraft system theses described different methodologies decompilation complete ones 
main proc near push bp mov bp sp sub sp ch push si lea ax bp push ax mov ax push ax call near ptr scanf pop cx pop cx push word ptr bp push word ptr bp mov ax push ax call near ptr printf add sp lea ax bp ch push ax mov ax push ax call near ptr scanf pop cx pop cx lea ax bp ah push ax mov ax push ax call near ptr scanf pop cx pop cx mov word ptr bp mov word ptr bp mov dx bp mov ax bp cmp dx bp jl jg cmp ax bp push word ptr bp ch mov ax push ax call near ptr printf pop cx pop cx pop si mov sp bp pop bp ret mov si cmp si decompilers written recover inaccessible source code case decomp documentation assembler code migrated machine 
sample decompilers written previously mentioned 
add word ptr bp adc word ptr bp jmp synthetic inst mov ax bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mul word ptr bp ch mov dx mul dx mov bp ch ax si jmp synthetic inst main endp continued due amount information lost compilation process able regenerate high level language hll code experimental decompilers limitations way including decompilation source assembly files object files symbolic debugging information simplified compiler source high level language compile source executable program fed decompiler requirement compiler specification 
decompilation system dcc differs previous decompilation projects ways analyses source executable programs assembler object files performs idiom analysis capture essence sequence instructions special meaning performs data flow analysis registers condition codes eliminate regenerate highlevel expressions structures program control flow graph generic set high level structures accommodated different high level languages eliminating possible input file exe file type exe include dcc void main takes parameters 
high level language prologue code 
int loc int loc long loc long loc int loc scanf ld loc printf executing ld iterations loc scanf loc scanf loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc loc printf loc goto statement 
dcc compiler library signatures library prototypes available decompilation time 
presents overview set tools reverse engineering executable programs tools loader disassembler signature generator prototype generator decompiler 
report results obtained implementation system prototype decompiler system intel architecture dos operating system dcc 
structure dcc decompiler structure compiler phases implemented machine language dependent independent modules front machinedependent universal decompiling machine benchmark int multiply thomas plum plum hall machine traps overflow unsigned type execution time milliseconds average time operator major usec inner loop exactly operations define auto define type int include stdio main int ac char av type long major scanf ld major printf executing ld iterations major scanf scanf major inner loop executes selected operations printf example migration nd rd language conversion migration piler system language design trainer aircraft methodology description theses recover inaccessible code decomp modify binaries documentation zebra migration binary translation security prom comparator automatic generation decompiler compiler maintenance dcc uses decompilation decades machine language independent back language dependent 
results reported test suite programs base data type variables byte integer long integer 
statistics obtained show average reduction number intermediate instructions 
reduction possible complete data flow analysis program represents improvement decompiler previous decompilers generate high level code looks assembler reduction rate nil 
resultant programs variables opposed registers correct type control structures minimum goto statements 
comments provided system 
decompiler generates assembler code subroutines rest 
decompiler compiler library signatures available code analyses subroutines including low level subroutines included compiler setting environment library routines linked linker 
michael van emmerik coding signature prototype generators modifying disassembler professor john gough discussions decompilers 
research partly supported sun microsystems laboratories 
information refer crg cs edu au chikofsky cross 
reverse engineering design recovery taxonomy 
ieee software january 
lano breuer 
cobol formal methods 
journal software maintenance research practice march 
mallory 
reverse engineering fortran programs possible 
july 

ide adds reverse engineering code generation package 
digital review june 

art reverse engineering 
computer june 
sites chernoff kirk marks robinson 
binary translation 
communications acm february 

demonstrating equivalence source code prom contents 
computer language 
bowen 
programs object code back logic programming compilation decompilation 
journal software maintenance research practice 
breuer bowen 
decompilation enumeration types grammars 
transaction programming languages systems september 
breuer bowen 
generating decompilers 
appear information software technology journal 
li 
design implementation techniques decompiling system 
mini micro systems 
cifuentes gough 
decompilation binary programs 
software practice experience july 
chapman chia 
generic re engineering environment design criteria evaluation software refinery tm 
australian computer journal november 
horspool 
approach problem computer programs 
computer journal 
swartz 
case reverse engineering 
business computer systems december 
van emmerik 
signatures library functions executable files 
technical report faculty information technology queensland university technology gpo box brisbane australia april 
cifuentes 
reverse compilation techniques 
phd dissertation queensland university technology school computing science july 
raymond 
plum hall benchmarks 
url ftp plaza edu au usenet comp sources unix volume plum benchmarks gz 
halstead 
machine independent computer programming chapter pages 
spartan books 

study decompiling machine languages high level machine independent languages 
phd dissertation purdue university computer science august 

piler system computer program translation 
technical report probe consultants september 

language design decompilation 
technical report university central florida december 

decompilation 
phd dissertation university california irvine computer science 
reuter 
url ftp cs washington edu pub decomp 
tar public domain software 

transportation assembly language software decompilation 
technical report naval underwater systems center october 
