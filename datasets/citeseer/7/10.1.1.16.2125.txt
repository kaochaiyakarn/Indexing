planning model checking extended goals non deterministic domains marco pistore paolo traverso itc irst sommarive povo trento italy irst itc research addressed problem planning non deterministic domains 
classical planning extended case goals express temporal properties 
combination aspects trivial 
non deterministic domains goals take account fact plan may result possible different executions requirements enforced possible executions may enforced executions 
address problem 
define planning algorithm generates automatically plans extended goals nondeterministic domains 
provide preliminary experimental results implementation planning algorithm uses symbolic model checking techniques 
real world planning domains intrinsically nondeterministic 
case instance robotics control space application domains 
applications non deterministic domains require planners deal goals general sets final desired states 
planner needs generate plans satisfy conditions execution paths sequences states resulting execution 
robotic application may need specify mobile robot move room avoiding certain areas path 
dealing non deterministic domains task extending notion goal leads main key issue related fact execution plan may nondeterministically result sequence states 
consider previous example robotics context 
hand require plan guarantees reach room guarantees dangerous areas avoided 
hand realistic domains plan satisfy strong requirement 
accept plans satisfy weaker requirements accept robot possibility reaching room guaranteed guaranteed avoid dangerous areas 
alternatively may require plan guarantees robot reaches desired location just trying possible avoid certain areas areas crowded 
define implement planning algorithm generates automatically plans extended goals non deterministic domains 
extended goals ctl formulas emerson express temporal conditions take account fact action may non deterministically result different outcomes 
extended goals allow distinguish temporal requirements possible executions executions plan 
plans built algorithm strictly expressive plans simply map states actions executed universal plans schoppers memory policies bonet geffner state action tables cimatti daniele expressing conditional iterative behaviors generated plans execute different actions state depending previous execution history 
expressiveness required deal extended goals 
implemented planning algorithm inside mbp cimatti mbp uses symbolic techniques bdds burch provide ability represent compactly explore efficiently large state spaces 
preliminary experimental results show proposed algorithm works practice 
structured follows 
define nondeterministic planning domains extended goals 
define structure plans achieve extended goals 
describe planning algorithm describe implementation show experimental results 
planning domains non deterministic planning domain described terms basic propositions may assume different values different states actions transition relation describing action leads state possibly different states 
definition planning domain tuple finite set basic propositions set states finite set actions transition relation 
write 
adjust adjust unlock lock load load unload lock unlock simple non deterministic domain require transition relation total denote act set actions performed state act fa denote exec set states reached performing action act exec fq depict simple planning domain item loaded unloaded container locked unlocked 
actions load adjust nondeterministic 
load succeed lead state item loaded correctly container locked may fail lead state item needs adjusted correct position order lock container 
action adjust may turn fail leave item positioned incorrectly 
states domain assume action wait represented leaves state unchanged 
basic propositions loaded locked misplaced 
loaded holds states locked states misplaced state 
independent language describing planning domains 
languages adl languages pddl able represent non deterministic domains extended allowing disjunctive effects actions 
instance action load described extension pddl follows 
action load precondition loaded locked misplaced effect loaded misplaced extended goals extended goals expressed ctl formulas 
definition set basic propositions domain syntax extended goal ax ex time strong weak temporal operators respectively 
universal existential path quantifiers path infinite sequence states 
allow specify requirements take account non determinism 
intuitively formula ax ex means holds immediate successor current state 
means path path exists initial prefix path holds state prefix holds states prefix 
formula similar allows paths holds states holds 
formulas af ef temporal operator stands eventually abbreviations respectively 
ag stands globally abbreviations 
respectively 
order allowed front basic propositions easy define generic ctl formula pushing negations instance ax ex 
goals ctl formulas allow specify different interesting requirements plans 
consider examples reachability goals 
af reach states condition guaranteed reached plan spite non determinism 
ef try reach states condition possibly reached exists execution achieves goal 
example strong requirement locked loaded af locked loaded satisfied weaker requirement locked loaded ef locked loaded satisfied unlocking container loading item possible locking container 
reasonable reachability requirement stronger ef ef allows execution loops possibility terminating goal guaranteed achieved 
goal locked loaded ef locked loaded locked loaded satisfied plan unlocks loads outcome state locks item misplaced state repeatedly tries adjust position item hopefully state reached locks container 
distinguish different kinds maintainability goals ag maintain ag avoid try maintain try avoid 
instance robot harm people avoid dangerous areas 
weaker requirements needed critical properties fact robot try avoid run battery 
compose reachability maintainability goals 
states plan guarantee executions reach eventually set states maintained 
instance air conditioner controller required reach eventually state temperature maintained range 
alternatively consider case pump fail turn selected require exists possibility reach condition maintain temperature desired range 
example goal intuitively means maintain possibility reaching 
reachability preserving goals operators express reachability goals property preserved 
instance air conditioner required reach desired tem leaving pumps 
example domain consider goal state container unlocked empty lock container maintain possibility reaching state item loaded container locked state 
formalized locked loaded misplaced 
af locked locked loaded 
rest call example goal lock load goal 
notice examples ability composing formulas universal existential path quantifiers essential 
logics provide ability ltl emerson express kinds goals plans extended goals plan describes actions performed state world 
order satisfy extended goals actions executed may depend internal state executor take account previous execution steps 
consider lock load goal domain 
plan starting state lead state state 
state time execute action lock load item second time 
general plan defined terms action function state execution context encoding internal state executor specifies action executed terms context function depending action outcome specifies execution context 
definition plan domain tuple hc act set execution contexts initial context act action function ctxt context function 
state execution context act returns action executed plan ctxt associates reached state new execution context 
functions act ctxt may partial state context pairs reached execution plan 
example plan satisfies load goal shown 
notice context changes execution reaches state 
allows plan execute different actions state 
rest consider plans executable complete 
say plan executable act ctxt say complete act context ctxt act defined 
intuitively complete plan specifies proceed possible outcomes action plan 
general ctl ltl incomparable expressive power see emerson comparison 
focus ctl provides ability expressing goals take account nondeterminism 
act lock ctxt act unlock ctxt act load ctxt ctxt act adjust ctxt ctxt act lock ctxt act wait ctxt example plan example execution structure execution plan results change current state current context 
described terms transitions pairs state context 
formally domain plan transition plan tuple 
act ctxt 
run plan state infinite sequence 




transitions 
plan may infinite number runs due nondeterminism domain 
case plan execution loop non deterministically pair state context 
provide finite presentation set possible runs plan execution structure kripke structure emerson set states set state context pairs transition relation corresponds transitions runs 
definition execution structure plan domain state structure hs li act 
fb qg example execution structure plan depicted 
define goal true written standard semantics ctl formulas kripke structure complete formal definition emerson order self contained cases 
propositional formulas treated usual way 
ax iff path 
iff path 
exists definition similar case existential path quantifiers 
define notion plan satisfies goal 
definition planning domain goal plan corresponding execution structure 
plan satisfies goal initial state written plan satisfies goal set initial states instance plan satisfies lock load goal state 
planning algorithm planning algorithm searches domain trying satisfy goal state goal defines conditions current state states reached 
intuitively hold conditions projected states 
algorithm extracts information conditions states progressing goal instance ef holds ef hold state hold basic building blocks algorithm function progr rewrites goal progressing states 
progr defined induction structure goals 
progr progr progr progr progr progr progr progr progr progr progr ax ax progr ex ex progr progr ax progr progr progr ex progr progr progr progr progr progr ex progr 
formula progr written normal form 
write disjunction kinds conjuncts form ax form exh need distinguish formulas hold states hold states progr ax exh ax exh belongs th disjunct progr 
ji different disjuncts correspond alternative evolutions domain alternative plans search 
represent progr set pairs pair containing parts disjunct progr ig progr progr 
disjunct progr define function assigns goals satisfied states 
denote assign progr set possible assignments universally quantified goal assigned states existentially quantified goal assigned states particular 
consider example domain 
af locked ex misplaced ex loaded current state 
locked ex misplaced ex loaded progr 
consider action load states 
af locked hold misplaced loaded hold 
possible state formulas assignments explored write af locked misplaced loaded simple example easy see assignment may lead successful plan basic building blocks progr assign progr describe planning algorithm build plan goal initial state returns plan failure 
algorithm reported 
performs depth forward search starting initial state picks action progresses goal successor states iterates goal satisfied search path leads failure 
algorithm uses contexts plan list active goals considered different stages exploration 
precisely context list active goals computed functions progr progr order list represents age goals goals active steps come list 
main function algorithm function build plan aux pl open builds plan context state plan returned function 
returned 
argument pl plan built far algorithm 
initially argument passed build plan aux pl hc act argument open list pairs state context currently open problems open currently trying build plan context state function build plan aux called pair state context open loop states sub goal enforced 
case function loop open called checks loop valid 
loop plan pl returned function build plan aux fails 
function loop computes set loop goals goals active loop iteratively considers pairs appear open occurrence current pair intersects loop goals set setof goals list function loop checks strong goal loop goals 
case loop bad semantics ctl requires strong goals eventually fulfilled goals easy extend algorithm case initial state 
function build plan plan return build plan aux function build plan aux pl open plan open loop open return pl return defined pl act return pl foreach act foreach progr foreach assign progr exec pl pl pl pl fcg pl act open conc open foreach exec order goals pl ctxt pl build plan aux pl open pl return pl return function loop open boolean loop goals setof head open head open loop goals loop goals setof open tail open loop goals return false return true planning algorithm 
stay active loop 
fact difference strong weak goals executions weak goal continuously active fulfilled acceptable strong eventually fulfilled active 
pair open plan pl range function act condition defined pl act true plan pair branch search return immediately success 
pair state context open plan algorithm considers turn executable actions state different possible progresses returned function progr possible assignments exec 
function build plan aux called recursively destination state exec 
new context computed function order goals function returns list goals ordered age goals old appear appear order new appear appear list order 
recursive call argument pl updated take account fact action selected state context new list open problems updated conc open pair added front argument open 
recursive call build plan aux updates current plan pl recursive calls successful final value plan pl returned 
recursive calls returns combination assign decomposition progress component action tried 
combinations fail plan returned 
example call build plan lock load successful returns plan goals af locked locked loaded locked loaded respectively 
algorithm terminates correct complete state domain goal build plan build plan plan symbolic implementation experimental results implemented planning algorithm performed experimental evaluations 
preliminary experiments define basic test cases planning ctl goals non deterministic domains show approach effective practice cases significant complexity settle basis comparisons 
implemented algorithm inside mbp cimatti 
mbp uses symbolic techniques bdds burch overcome problems explicit state planning algorithm due huge size realistic domains particular non deterministic domains 
order provide bdd implementation explicit algorithm previous section revisited account fact bdds effectively sets states single states 
lack space describe symbolic bdd algorithm details information algorithm test cases mbp home page sra itc tools mbp 
examples planning extended goals non deterministic domains literature robot moving objects search problem kabanza test planner ltl goals 
domain consists set rooms connected doors set objects rooms robot grasp objects carry different rooms 
non determinism domain due fact doors defective close explicit action robot 
performed experiments different extended goals 
lack space report results goal moving objects rooms keeping experiment kabanza 
framework goal form problem parametrized number possible objects moved number defective doors 
time required build plan reported tests defective doors objects time sec 
experimental results performed pentium ii mhz mb ram memory running linux 
time scale logarithmic shows required time grows exponentially number objects corresponds exponential growth size domain 
due usage symbolic techniques performance influenced nondeterminism 
case objects domain quite complex states 
results reported kabanza show complementary behavior scales respect number objects explicit state search suffers significantly case non deterministic domains 
efficient behavior case deterministic domains depends enforced domain dependent search control strategies able cut largest part search graph 
experiments show mbp outperforms executed control strategies 
result surprising symbolic techniques shown dramatically efficient explicit techniques case huge search space 
related approach automatic planning non deterministic domains goals expressed ctl formulas 
implemented algorithm symbolic model checking techniques open possibility deal large state space 
objectives 
symbolic implementation naive transcription explicit algorithm needed develop symbolic algorithm fully exploits potentiality bdds symbolic exploration huge state spaces 
plan perform extensive test different kinds extended goals set realistic domains show approach practical 
focus case full observability 
extension case planning extended goals partial observability main objectives research 
problem planning ctl goals solved 
starting point framework planning symbolic model checking see cimatti daniele bertoli 
previous works framework deals temporally extended goals 
issue temporally extended goals certainly new 
works direction restrict deterministic domains see instance de giacomo vardi bacchus kabanza considers extended goals non deterministic domains described kabanza see section comparison 
extended goals planning problem close automatic synthesis controllers see asarin kupferman vardi 
area focuses theoretical foundations providing practical implementations 
different technical assumptions actions interaction environment 
asarin asarin maler pnueli 
symbolic controller synthesis discrete timed systems 
hybrid system ii lncs 
bacchus kabanza bacchus kabanza 
planning temporally extended goals 
annals mathematics artificial intelligence 
bertoli bertoli cimatti roveri traverso 
planning nondeterministic domains partial observability symbolic model checking 
proc 
ijcai 
bonet geffner bonet geffner 
planning incomplete information heuristic search belief space 
proc 
aips 
burch burch clarke mcmillan dill hwang 
symbolic model checking states 
information computation 
cimatti cimatti roveri traverso 
automatic obdd generation universal plans non deterministic domains 
proc 
aaai 
daniele daniele traverso vardi 
strong cyclic planning revisited 
proc 
ecp 
de giacomo vardi de giacomo vardi 
automata theoretic approach planning temporally extended goals 
proc 
ecp 
emerson emerson 
temporal modal logic 
van leeuwen editor handbook theoretical computer science volume formal models semantics chapter 
elsevier 
kabanza kabanza 
planning control rules reactive agents 
artificial intelligence 
kupferman vardi kupferman vardi 
synthesis incomplete information 
proc 
nd international conference temporal logic 
schoppers schoppers 
universal plans reactive robots unpredictable environments 
proc 
ijcai 
