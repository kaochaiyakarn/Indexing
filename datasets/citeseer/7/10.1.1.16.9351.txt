execution monitoring high level robot programs 
giuseppe de giacomo dip 
di informatica sistemistica universit di roma la sapienza roma italy dis uniroma ray reiter dept computer science university toronto toronto canada reiter cs toronto edu mikhail soutchanski dept computer science university toronto toronto canada mes cs toronto edu imagine robot executing program line insofar reasonable wishes continue line program execution matter exogenous events occur world 
execution monitoring robot process observing world discrepancies actual world internal representation recovering discrepancies 
provide situation calculus account line program executions monitoring 
account relies specification single step interpreter logic programming language golog theory supported implementation illustrated standard blocks world robot executing golog program build suitable tower 
monitor simple kind planner recovering malicious exogenous actions performed agent 
performing sequence actions generated recovery procedure robot eliminates discrepancy resumes executing program 
indicate formalism formulate various correctness properties monitored systems 
motivation 
imagine robot executing program line insofar reasonable wishes continue line program execution matter exogenous events occur world 
example setting treat robot executing program build certain towers blocks environment inhabited malicious agent arbitrarily move author names alphabetical 
block robot looking 
robot equipped sensors observe world fails conform internal representation world absence malicious agents 
robot observes discrepancy actual world model world 
possibilities 
give trying complete execution program 

call programmer give sophisticated program anticipates possible discrepancies actual world internal model additionally instructs recover failures 

available repertoire general failure recovery methods invoke needed 
recovery technique involves planning detects discrepancy robot computes plan executed restore state world exogenous action occurred 
executes plan resumes execution program 
execution monitoring robot process observing world discrepancies physical reality mental reality recovering perceived discrepancies 
approach execution monitoring take option 
option certainly valuable important believe difficult write programs take account possible exceptional cases 
easier especially inexperienced programmers write simple programs language golog sophisticated execution monitor written different presumably experienced programmer keep robot track actual execution program 
general picture robot executing program line 
mean physically performing actions sequence specified program 
execution primitive action program test action execution monitor observes exogenous action occurred 
monitor determines exogenous action affect successful outcome line execution 
simply continues execution 
serious discrepancy robot sensed internal world model 
discrepancy interfere execution robot program monitor needs determine corrective action form program robot continue executing line original program 
understand execution monitor mechanism gets output sensors compares sensor measurements internal model necessary produces new program line execution things right 
purpose provide situation calculus account line program executions monitoring 
illustrate theory implementation consider standard blocks world environment robot executing golog program build suitable tower 
monitor simple kind planner recovering malicious exogenous actions performed agent 
robot performs sequence actions generated recovery procedure discrepancy eliminated robot resume building goal tower 
situation calculus golog version situation calculus described :10.1.1.51.3134
situation calculus second order language specifically designed representing dynamically changing worlds 
changes world result named actions 
possible world history simply sequence actions represented order term called situation 
constant denote initial situation empty history 
non empty histories constructed distinguished binary function symbol ff denotes successor situation resulting performing action ff 
actions may parameterized 
example put stand action putting object object case put denotes situation resulting placing history situation calculus actions denoted order terms situations world histories order terms 
example putdown walk pickup situation denoting world history consisting allow nondeterministic programs idea line execution program problematic 
see section 
sequence actions pickup walk putdown 
notice sequence actions history order occur obtained situation term reading actions right left 
relations truth values vary situation situation called relational fluents 
denoted predicate symbols situation term argument 
similarly functions values vary situation situation called functional fluents denoted function symbols situation term argument 
example robot meaning robot carrying package situation relational fluent location robot denoting location robot situation functional fluent 
simplicity shall treat functional fluents 
axiomatize primitive actions fluents domain application provide axioms 
action precondition axioms primitive action having syntactic form oss pi pi formula free variables situation term action precondition axioms characterize formula pi conditions possible execute action situation addition provide suitable unique names axioms actions 

successor state axioms fluent having syntactic form phi phi formula free variables situation term successor state axioms embody solution frame problem reiter 

axioms describing initial situation true initially actions occurred 
finite set sentences mention situation term situation independent 
golog traditional approach high level robotic control provide suitable goals derive plans achieving goals robot execute plans 
planning known computationally intractable general case question deriving complex behaviors involving hundreds possibly thousands actions 
perspective pursued cognitive robotics group university toronto reduce reliance planning eliciting inter robot behaviors provide robot programs written suitable high level language case golog congolog 
extended golog logic programming language primitive actions background domain theory :10.1.1.22.558:10.1.1.54.7045
typically golog programs intended executed line sequence actions returned line computation executed line 
consider variant golog intended executed entirely line 
includes constructs nil empty program primitive action oe test truth condition oe ffi ffi sequence ffi ffi nondeterministic choice actions ffi nondeterministic choice argument action ffi nondeterministic iteration proc fi procedure formal parameters body fi 
contrast straight line partially ordered plans golog program arbitrary complex including loops recursive procedures nondeterministic choice 
example blocks world golog program nondeterministically builds tower blocks spelling paris rome 
turn procedure building rome tower nondeterministically determines block letter clear table nondeterministically selects block letter moves block similar procedure procedure parameters 
proc tower endproc 
proc ontable clear 

move 
move 
move endproc proc ontable clear 

move 
move 
move 
move endproc associate programs transition semantics semantics single steps program execution :10.1.1.22.558
informally semantics declares program proceeds program counter moves program intermediate states 
configuration pair consisting program state part original program left perform situation 
specify semantics introduce predicates trans final 
ffl trans ffi ffi program ffi situation tells possible step computation returning resulting situation program ffi remains executed 
words trans ffi ffi denotes transition relation configurations 
ffl final ffi tells configuration ffi considered final computation completed program remains executed 
final nil final ffi ffi requires repetitions ffi possible execute ffi completing program immediately 
trans predicate trans characterized axioms 
empty program trans nil ffi false 
primitive actions trans ffi poss ffi nil 
test actions trans oe ffi oe ffi nil 
sequence trans ffi ffi ffi fl trans ffi fl ffi fl ffi inal ffi trans ffi ffi 
nondeterministic choice trans ffi ffi ffi trans ffi ffi trans ffi ffi 
pick trans ffi ffi trans ffi ffi 
iteration trans ffi ffi fl trans ffi fl ffi fl ffi write oe denote term representing situation calculus formula suppressed situational argument oe denote formula restored argument 
assume standard way encoding order situation calculus formulas 
ffi program resulting substituting uniformly ffi 
assertions characterize configuration ffi evolve single step configuration ffi 
intuitively read follows 
nil evolve configuration 

evolves nil provided possible execute notice having performed remains performed 

oe evolves nil provided oe holds 
proceed 
notice case situation remains unchanged 

ffi ffi evolve ffi ffi provided ffi evolve ffi 
evolve ffi provided ffi final configuration ffi evolve ffi 

ffi jffi evolve ffi provided ffi ffi 

ffi evolve ffi provided exists ffi evolve ffi 

ffi evolve ffi ffi provided ffi evolve ffi 
observe ffi evolve ffi final definition see 
simplify discussion omitted axioms procedures 
extended version :10.1.1.22.558
final predicate final characterized axioms 
empty program final nil true 
primitive action final false 
test action final oe false 
sequence final ffi ffi final ffi final ffi 
nondeterministic choice final ffi ffi final ffi final ffi 
pick final ffi final ffi 
iteration final ffi true trans possible configurations reached program ffi starting situation obtained repeatedly transition relation denoted trans starting ffi reflexive transitive closure transition relation 
relation denoted trans defined secondorder situation calculus formula trans ffi ffi oe ffi ffi stands conjunction universal closure sentences ffi ffi trans ffi ffi ffi ffi oe ffi ffi trans final give new definition relation ffi ffi trans ffi ffi final ffi words ffi holds iff possible repeatedly single step program ffi obtaining program ffi situation ffi legally terminate vs line golog interpreters describing approach execution monitoring distinguish carefully online line golog interpreters :10.1.1.54.7045
relation fl means terminating situation resulting execution program fl situation relation natural prolog implementation terms step interpreter trans offline prog sf final prog sf trans prog prog offline prog sf 
brave line interpreter difference line interpretation golog program select action program commit physical world repeat rest program 
interpreter online prog sf final prog sf trans prog prog select action prog 
commit action 
online prog sf 
line interpreter trans final originally proposed give account golog congolog programs sensing actions 
simplified line interpreter deal sensing actions suitable coupling execution monitor 
line interpreters differ prolog cut 
prevent backtracking trans select alternative action prog 
effect commit action selected trans 
need robot undo actions performed physical world 
commitment qualifies clause understood line interpreter 
refer brave may reach dead program interpreting terminating situation 
cautious line interpreter avoid possibility dead paths define cautious line interpreter follows online prog sf final prog sf trans prog prog select action prog 
offline prog sure rest prog terminates 
commit action 
online prog sf 
cautious brave counterpart commits action action guaranteed lead successful line termination program 
provided program terminating situation cautious line interpreter reaches dead 
cautious line interpreter appeals offline execution robot program process guaranteeing committing program action remainder program terminates 
requirement precludes cautious interpretation robot programs appeal sensing actions actions performed line 
brave interpreter looks ahead suitable programs sense actions 
price pays greater risk dead paths 
committing action intrinsically procedural notion highly desirable logical approach modeling dynamical systems tightly delimit theory implementation nonlogical notion appears 
case point prolog cut operator line interpreters exact point procedural notion commitment realized 
interpreters implemented prolog lifted directly final trans introduced 
interpreters require domain specific action precondition successor state keep mind golog programs may nondeterministic 
imagine cautious interpreter verifies line program terminates possible outcomes sensing actions 
better programmer proved 
axioms axioms initial situation expressible prolog clauses 
implementation inherits prolog closed world assumption limitation implementation general theory 
full version cautious line interpreter 
execution monitoring golog programs section give situation calculus specification behavior golog program influence execution monitor 
provide general framework committing particular details monitor 
describe specific monitor forms basis implementation section 
general framework discuss line interpretation golog programs combined monitor 
imagine executing primitive action evaluating test condition robot compares mental world model reality 
assume discrepancies robot mental world reality result exogenous actions robot observes actions 
execution monitor observes exogenous action changed values fluents necessary recovers unanticipated event 
cycle line interpreting sensing recovering necessary repeats program terminates 
just specified semantics rans golog programs section want specify similar idealization observability exogenous events common assumption discrete event control theory 
face idealization dubious practice 
argue convincingly agents observe action occurrences fido ate sandwich effects sandwich longer table 
reconcile points view supposing directly sensing exogenous actions robot sense truth values certain fluents 
introduce set new fictitious actions fluent effects alter corresponding fluents truth values 
robot compute successor state axioms fluents hold mental world 
robot observes values fluents physical world compares values mental world discrepancies determined directly 
determine fictitious actions occurred account observed discrepancies physical world robot mental world 
inferred fictitious actions assume role observable exogenous actions mentioned 
semantics golog programs execution monitoring 
definition parallel section 
closed loop system online interpreter execution monitor characterized formally new predicate symbol ffi ffi describing step transition consisting single rans step program interpretation followed process called monitor execution monitoring 
role execution monitor get new sensory input form exogenous action necessary generate program counter balance perceived discrepancy 
result system passes configuration ffi configuration ffi specified follows ffi ffi ffi rans ffi ffi monitor ffi ffi brave version cautious counterpart ffi ffi ffi rans ffi ffi ffi monitor ffi ffi possible configurations reached program ffi situation execution monitoring obtained repeatedly transitions reflexive transitive closure relation 
implementing line golog interpreters section describe brave cautious versions line golog interpreters execution monitoring 
brave line execution monitor prog sf final prog sf trans prog prog monitor prog prog prog sf 
cautious line execution monitor prog sf final prog sf trans prog prog offline prog monitor prog prog prog sf 
focus monitor 
exo exogenous event simple primitive action complex arbitrary golog program 
specify behavior generic monitor monitor ffi ffi exo exo relevant ffi ffi ffi relevant ffi recover ffi ffi relevant ffi predicate specifies discrepancy relevant current state ffi program 
discrepancy matter relevant ffi execution monitor takes action ffi ffi monitor recover exogenous action 
predicate recover ffi ffi provides determining new program ffi execution situation intended achieve outcome equivalent sense left open moment program ffi exogenous event occurred 
wide range monitors achieved defining relevant recover different ways 
section elaborate choice form basis implementation section 
specific monitor develop simple realization general framework fixing particular predicates relevant recover 
assuming application domain programmer provides 
specification primitive actions robot exogenous effects axiomatization initial situation described section 
golog program may may take account exogenous actions occurring robot executes program 
shall assume program particular form takes account programmer goal writing 
specifically assume program programmer provides order sentence describing program goal programmers call program postcondition 
assume postcondition program 
words ffi original program goal postcondition program shall dealing ffi goal 
may useless thing ffi known satisfy postconditions shall see approach execution monitoring change ffi shall need guarantee modified program terminates situation satisfying original postcondition 
take relevant ffi ffi definition monitor monitor ffi ffi exo exo ffi ffi ffi ffi recover ffi ffi monitor checks existence exogenous program determines situation reached program monitored program ffi terminates offline monitor returns ffi invokes recovery mechanism determine new program ffi monitor appeals recover resort prefers monitored program keep control long guaranteed terminate line situation program goal holds 
remember goal original program described 
remains specify predicate recover ffi ffi true ffi current state program monitored situation prior occurrence exogenous program situation exogenous event ffi new program executed line place ffi situation adopt specifications recover forms basis implementation described recover ffi ffi rog ffi ffi ffi rog ffi oe length length recovery mechanism conceptually quite simple determines shortest straight line program prefixed program ffi yields program terminates line 
quite easy implement simplest form simply generate length prefixes test yield terminating line computation length prefixes succeeds complexity bound exceeded 
notice appealing assumption monitored programs goal conditions 
need recovery mechanism changes program monitored adding prefix 
resulting program may terminate doing may behave ways unintended programmer 
long goal condition original program terminating executions altered program satisfy programmer intentions 
disadvantage recovery mechanism recognize instances exogenous events happen help achieving goal condition 
extreme case exogenous event create situation satisfies goal 
recovery procedure blind possibilities modify current program state prefixing suitable plan execute result despite fact reality wants 
effect recovery procedure built assumption exogenous events neutral respect achieving goal malicious 
imagine sophisticated realizations simple idea actions performed exo pursue topic 
implementation theory execution monitoring supported implementation prolog demonstrate blocks world program example 
cautious line monitor section straightforward implementation monitor rog 
prolog code provided 
blocks world example section blocks world axiomatized successor state action precondition axioms 
function predicate constants 
actions ffl move move block block provided clear 
ffl able move block table provided clear table 
fluents ffl block block situation ffl clear block blocks top situation ffl ontable block table predicate constants predicates true arguments blocks corresponding letters 
successor state axioms move able move ontable able ontable move clear move able clear move action precondition axioms oss move clear clear oss able clear ontable unique names axioms actions move able move move oe able able oe example initial situation blocks table clear see 
block letter blocks letters spelling aris rome blocks letters irrelevant building tower spelling rome paris 

part initial situation 
program goal goal aris ontable clear aris ontable clear goal arrangement blocks 
represents arrangement blocks satisfies program goal 
implementation eclipse prolog provided 
execution trace original procedure tower simple designed respond external disturbances kind 
trace demonstrates execution monitor able produce fairly sophisticated behavior response unforeseen exogenous events 
golog tests change situation primitive actions 
time program performs primitive action evaluates test exogenous program may occur 
example sequence actions possible current situation performed external agent 
selected arrangement intentionally illustrate difference cautious brave interpreters 
realized implementation interactively asking user provide exogenous events elementary program operation test primitive action annotated trace steps implementation blocks world setting 
font actual output program italics states golog program tower example 
symbol prolog implementation interpreter corresponds sequential composition golog prolog term pi corresponds golog eclipse tower goal 
program state nil pi move pi move pi move goal current situation cautious interpreter tried execute line 
failed block 
proceeded 
implementation cautious line interpreter see section rans step ontable clear 
determining block base goal tower 
remainder program program state output nil 
move 
move 
move goal 
nil results step see axioms rans ffi oe 
enter exogenous program noop occurs 
move move move 
recovery necessary 
proceeding step program 
program state nil move pi move pi move goal current situation move move move exogenous program covered blocks see fig 
remaining program nil move brave interpreter eventually failed trying 

move 
move goal successfully completed remain uncovered blocks right kind construct rome continues 
enter exogenous program noop occurs 
move move 
start recovering 
new program movetotable nil move pi move pi move goal current situation move move move move move second exogenous program move move blocks letter covered see 
possible move blocks precondition axiom move remaining program completed 
monitor gives control recover help planner rog determines shortest corrective sequence actions movetotable order allow program resume prefixes action previous program state able nil move 
move 
move goal point line evaluation continues doing step new program 
exogenous disturbances occur steps execution new program reach program state nil move 
move goal 
exogenous disturbance occurred program ready move top 
second exogenous disturbance 

pile blocks covers block assume point third exogenous program occurs see enter exogenous program noop occurs 
move move move 
start recovering 
new program movetotable movetotable movetotable nil move pi move goal program state nil movetotable movetotable nil move pi move goal current situation movetotable move move move move movetotable move move move move move recovery procedure determined sequence corrective actions movetotable movetotable movetotable lead situation program resumed shortest correction 
exogenous actions happen program eventually successfully terminate having built tower rome 
correctness properties execution monitors definitions monitor section possible formulate ultimately prove various correctness properties execution monitors 
properties intended capture suitable concepts controllability intuition similar concepts introduced discrete event systems 
informally controllability property characterizes closed loop system golog program coupled execution monitor ability monitored program behave correctly exogenous actions occur robot execution program 
possible definitions varying degrees generality counts correct behavior monitored system 
focus various correctness properties want prove monitor 
recall general execution monitor specified relation monitor ffi ffi meaning ffi state monitored program situation situation resulting exogenous event occurrence line execution resume new program ffi analogy floyd hoare style correctness termination properties formulate variety verification tasks examples describe 
parameterized predicates 
desirable property terminating situation satisfy 
example describe postcondition program monitored 

ffi relationship current program state ffi current situation situation resulting exogenous event occurring example express ffi terminates line executed executed weak termination correctness ffi ffi oe monitor ffi ffi oe ffi task verify condition monitor determines new program resume system computation exogenous event occurrence program terminating line computation resulting final situation holds 
strong termination correctness ffi ffi oe ffi monitor ffi ffi ffi condition monitor determines new program resume system computation exogenous event occurrence program terminating line computation resulting final situation holds 
stronger termination correctness ffi ffi oe ffi monitor ffi ffi ffi ffi oe correctness property condition monitor determines new program terminates line terminating situations satisfy possible formulate various correctness properties entire monitored system example weak property provided monitored program terminates desirable situation ffi ffi nil oe transitive closure variations themes possible purpose pursue issues depth simply point correctness properties monitored systems easily formulated framework 
framework entirely situation calculus correctness proofs constructed totally classical logic 
discussion systems designed interleave monitoring plan execution rogue speedy :10.1.1.22.558
differ similar proposals formal approach secondly fact story monitoring arbitrary programs simply straight line partially ordered plans 
assume monitored plan generated automatically scratch provided programmer 
sequence papers schoppers proposes defends idea universal plans address tension reasoned behavior timely response caching reactions classes possible situations 
point view notion universal plan closely related notion controllable languages developed discrete event systems control 
language set linear plans controllable iff effects possible uncontrollable events lead outside set plans language contains 
words just schoppers required system reactions possible contingencies compiled controllable language 
framework different complementary favors line generation appropriate reactions exogenous events opposed golog program 
congolog richer version golog supports concurrency prioritized interrupts exogenous actions :10.1.1.22.558
reactive behaviors easily representable congolog interrupt mechanism combination reactive behaviors deliberative execution monitoring possible 
allow experiment different mixtures execution monitoring reactivity advantage preserving unifying formal framework situation calculus remains open research problem 
theory embedded planning introduces notions planning failure motivations similar 
authors propose formal languages golog include constructs sequence conditionals loops recursion 
emphasis reactive programs proposal provide replanning execution 
authors rely formal theories actions purposes characterizing appropriate notions action failures consider execution monitoring se 
sophisticated existing plan execution monitor system beetz mcdermott 
provides continual modification robot plans programs execution rich collection failure models plan repair strategies 
proposal far rival functionality system 
primary objective approach provide compact declarative representations entire process execution monitoring recovery failure framework research program 
remains see logical purity approach pay clear analyzable specifications lead implementations rivaling 
general situation account execution monitoring high level robot programs illustrated theory implementation simulation mode specific monitor 
approach advantage completely formal suitable formulating ultimately proving correctness properties monitored systems 
plans ongoing include issues 
draw closer parallels concept controllable systems discrete event control theory 

explore realizations execution monitors different section 

investigate techniques proving correctness properties various monitors monitored systems 

investigate concept execution monitoring non terminating golog programs 

extend ideas temporal domains example monitoring robot control programs written sequential temporal golog 

implement ideas cognitive robotics group rwi autonomous robot university toronto 
research supported natural sciences engineering research council canada institute robotics intelligent systems government canada information technology research centre government ontario 
people contributed ideas suggestions evolution thinking issues yves lesp erance hector levesque jeff lloyd john mylopoulos brian nixon pirri eric sandewall murray shanahan murray wonham 
steel 
integrating planning execution monitoring 
aaai 
morgan kaufmann publishers san francisco ca 
baral son 
relating theories actions reactive control 
robots softbots theories action planning control working notes workshop held july conjunction aaai providence rhode island 
:10.1.1.22.558
speedy monitoring execution dynamic environments 
reasoning actions planning complex environments proceedings workshop international conference formal applied practical reasoning bonn germany june 
available technical report aida intellektik technische hochschule darmstadt germany 
beetz mcdermott 
improving robot plans execution 
nd int 
conf 
ai planning systems aips kris hammond editor 
beetz mcdermott 
expressing transformations structured reactive plans 
th european conference planning ecp sam steel editor toulouse france september 

chung ling 
limited lookahead policies supervisory control discrete event systems 
ieee transactions automatic control volume 
fikes hart nilsson 
learning executing generalized robot plans 
artificial intelligence volume 
de giacomo lesp erance levesque :10.1.1.22.558
reasoning concurrent executions prioritized interrupts exogenous actions situation calculus 
th international joint conference artificial intelligence ijcai 
de giacomo levesque 
congolog incremental interpreter 
technical report computer science department university toronto 
preparation 
de giacomo reiter soutchanski execution monitoring high level robot programs 
working notes th symposium logical formalizations commonsense reasoning london uk jan jan 
electronic version available www ida liu se ext nj fcs listing html de giacomo reiter 
nonterminating processes situation calculus 
robots softbots theories action planning control working notes workshop held july conjunction aaai providence rhode island 
giunchiglia traverso 
planning failure 
nd international conference ai planning systems aips chicago il june 
haigh veloso 
interleaving planning robot execution asynchronous user requests 
int 
conf 
intelligent robots systems iros november osaka japan 
bajcsy 
discrete event systems autonomous mobile agents 
robotics autonomous systems volume 
levesque 
planning presence sensing 
aaai volume portland oregon 
levesque reiter 
high level robotic control planning 
integrating robotics research big leap 
position 
aaai spring symposium stanford university march 
available www cs toronto edu levesque reiter lesp erance lin scherl :10.1.1.54.7045
golog logic programming language dynamic domains 
logic programming special issue actions volume 
lin reiter :10.1.1.51.3134
state constraints revisited 
logic computation special issue actions processes volume 
mccarthy hayes philosophical problems standpoint artificial intelligence 
meltzer michie editors machine intelligence volume edinburgh university press 
ramadge wonham 
control discrete event systems 
proceedings ieee 
reiter frame problem situation calculus simple solution completeness result goal regression 
vladimir lifschitz editor artificial intelligence mathematical theory computation papers honor john mccarthy 
academic press san diego ca 
reiter 
knowledge action logical foundations describing implementing dynamical systems 
draft chapters book 
available www cs toronto edu reiter 
sequential temporal golog 
principles knowledge representation reasoning 
proceedings th international conference kr trento italy june volume 
sandewall 
logic modelling goaldirected behavior 
linkoping electronic articles computer information science volume 
available www ep liu se ea cis schoppers 
universal plans reactive robots unpredictable environments th international joint conference artificial intelligence ijcai 
schoppers 
defense reaction plans caches 
ai magazine volume 
schoppers 
building monitors exploit open loop closed loop dynamics 
proceedings st international conference artificial planning systems aips june college park maryland soutchanski 
execution monitoring highlevel robot programs 
university toronto phd thesis forthcoming 
traverso cimatti 
single planning paradigm introspective planning 
th european conference artificial intelligence ecai vienna august 
traverso 
logic acting sensing planning 
th international joint conference artificial intelligence volume 
