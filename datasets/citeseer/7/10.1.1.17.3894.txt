mpi message passing interface standard message passing interface forum june supported part arpa nsf asc national science foundation science technology center cooperative agreement 
ccr commission european community esprit project 
version june 
march message passing interface forum correct errors clarifications mpi document may referred version 
discussions resulted version document 
changes version minor 
version document changes marked available 
paragraph example change 
version june 
message passing interface forum participation organizations meeting january discuss define set library interface standards message passing 
sanctioned supported official standards organization 
goal message passing interface simply stated develop widely standard writing message passing programs 
interface establish practical portable efficient flexible standard message passing 
final report version message passing interface forum 
document contains technical features proposed interface 
copy draft processed june 
please send comments mpi mpi comments cs utk edu 
comment forwarded committee members attempt respond 
fl university tennessee knoxville tennessee 
permission copy fee part material granted provided university tennessee copyright notice title document appear notice copying permission university tennessee 
contents acknowledgments vi mpi overview goals standard 
platforms targets implementation 
included standard 
included standard 
organization document mpi terms conventions document notation procedure specification semantic terms data types opaque objects array arguments state named constants choice addresses language binding fortran binding issues binding issues processes error handling implementation issues independence basic runtime routines interaction signals posix examples point point communication blocking send receive operations blocking send message data message envelope blocking receive return status data type matching data conversion type matching rules data conversion communication modes semantics point point communication buffer allocation usage model implementation buffered mode nonblocking communication communication objects communication initiation communication completion semantics nonblocking communications multiple completions probe cancel persistent communication requests send receive null processes derived datatypes datatype constructors address extent functions lower bound upper bound markers commit free general datatypes communication correct addresses examples pack unpack collective communication overview communicator argument barrier synchronization broadcast example mpi bcast gather examples mpi gather mpi scatter examples mpi scatter mpi gather examples mpi mpi scatter gather global reduction operations reduce predefined reduce operations user defined operations reduce reduce scatter scan example mpi scan correctness groups contexts communicators features needed support libraries mpi support libraries basic concepts groups contexts intra communicators predefined intra communicators group management group accessors group constructors group destructors communicator management communicator accessors communicator constructors communicator destructors motivating examples current practice current practice approximate current practice example library example library example inter communication inter communicator accessors inter communicator operations inter communication examples caching functionality attributes example formalizing loosely synchronous model basic statements models execution process topologies virtual topologies embedding mpi overview functions topology constructors cartesian constructor cartesian convenience function mpi dims create general graph constructor topology inquiry functions cartesian shift coordinates partitioning cartesian structures low level topology functions application example mpi environmental management implementation information environmental inquiries error handling error codes classes timers synchronization startup profiling interface requirements discussion logic design miscellaneous control profiling examples profiler implementation mpi library implementation complications multiple levels interception bibliography language binding defined constants fortran bindings point point communication bindings collective communication bindings groups contexts communicators bindings process topologies bindings environmental inquiry bindings profiling fortran bindings point point communication fortran bindings collective communication fortran bindings groups contexts fortran bindings process topologies fortran bindings environmental inquiry fortran bindings profiling mpi function index acknowledgments technical development carried subgroups reviewed full committee 
period development message passing interface mpi people served positions responsibility listed 
ffl jack dongarra david walker meeting chairs ffl ewing lusk bob minutes ffl marc snir william gropp ewing lusk point point communications ffl geist marc snir steve otto collective communications ffl steve otto editor ffl rolf process topologies ffl ewing lusk language binding ffl william gropp environmental management ffl james profiling ffl tony skjellum lyndon clarke marc snir richard mark sears groups contexts communicators ffl steven initial implementation subset list includes active participants mpi process mentioned 
ed anderson robert babb joe baron eric scott rob nathan anne elster jim fernando sam jon flower daniel ian adam greenberg robert harrison leslie hart tom haupt don heller tom henderson alex ho howard ho gary howell john james kohl susan bob leary arthur maccabe peter alan mainwaring oliver mcbryan phil mckinley charles dan peter howard palmer paul pierce sanjay ranka peter arch erich singh alan sussman robert tomlinson robert voigt dennis weeks stephen wheat steve zenith university tennessee oak ridge national laboratory draft available anonymous ftp mail servers instrumental distributing document 
mpi operated tight budget reality budget meeting announced 
arpa nsf supported research various institutions contribution travel academics 
support european participants provided esprit 
chapter mpi overview goals message passing paradigm widely certain classes parallel machines especially distributed memory 
variations basic concept processes communicating messages understood 
years substantial progress casting significant applications paradigm 
vendor implemented variant 
systems demonstrated message passing system efficiently portably implemented 
appropriate time try define syntax semantics core library routines useful wide range users efficiently implementable wide range computers 
designing mpi sought attractive features number existing message passing systems selecting adopting standard 
mpi strongly influenced ibm watson research center intel nx express ncube vertex 
important contributions come zipcode pvm chameleon 
mpi standardization effort involved people organizations mainly united states europe 
major vendors concurrent computers involved mpi researchers universities government laboratories industry 
standardization process began workshop standards message passing distributed memory environment sponsored center research parallel computing held april williamsburg virginia 
workshop basic features essential standard message passing interface discussed working group established continue standardization process 
preliminary draft proposal known mpi put forward dongarra hey walker november revised version completed february 
mpi embodied main features identified williamsburg workshop necessary message passing standard 
mpi primarily intended promote discussion get ball rolling focused mainly point point communications 
mpi brought forefront number important standardization issues include collective communication routines thread safe 
november meeting mpi working group held minneapolis decided place standardization process formal footing chapter 
mpi generally adopt procedures organization high performance fortran forum 
formed major component areas standard email discussion service established 
addition goal producing draft mpi standard fall set 
achieve goal mpi working group met weeks days months draft mpi standard supercomputing conference november 
meetings email discussion constituted mpi forum membership open members high performance computing community 
main advantages establishing message passing standard portability ease 
distributed memory communication environment higher level routines abstractions build lower level message passing routines benefits standardization particularly apparent 
furthermore definition message passing standard proposed provides vendors clearly defined base set routines implement efficiently cases provide hardware support enhancing scalability 
goal message passing interface simply stated develop widely standard writing message passing programs 
interface establish practical portable efficient flexible standard message passing 
complete list goals follows 
ffl design application programming interface necessarily compilers system implementation library 
ffl allow efficient communication avoid memory memory copying allow overlap computation communication offload communication processor available 
ffl allow implementations heterogeneous environment 
ffl allow convenient fortran bindings interface 
ffl assume reliable communication interface user need cope communication failures 
failures dealt underlying communication subsystem 
ffl define interface different current practice pvm nx express provides extensions allow greater flexibility 
ffl define interface implemented vendor platforms significant changes underlying communication system software 
ffl semantics interface language independent 
ffl interface designed allow thread safety 
standard 
standard intended want write portable message passing programs fortran includes individual application programmers developers software designed run parallel machines creators environments tools 
order attractive wide audience standard provide simple interface basic user semantically precluding high performance message passing operations available advanced machines 

platforms targets implementation 
platforms targets implementation 
attractiveness message passing paradigm partially stems wide portability 
programs expressed way may run distributed memory multiprocessors networks workstations combinations 
addition shared memory implementations possible 
paradigm obsolete architectures combining shared distributed memory views increases network speeds 
possible useful implement standard great variety machines including machines consisting collections machines parallel connected communication network 
interface suitable fully general mimd programs written restricted style spmd 
explicit support threads provided interface designed prejudice 
version mpi support provided dynamic spawning tasks 
mpi provides features intended improve performance scalable parallel computers specialized interprocessor communication hardware 
expect native high performance implementations mpi provided machines 
time implementations mpi top standard unix interprocessor communication protocols provide portability workstation clusters heterogenous networks workstations 
proprietary native implementations mpi public domain portable implementation mpi progress time writing 
included standard 
standard includes ffl point point communication ffl collective operations ffl process groups ffl communication contexts ffl process topologies ffl bindings fortran ffl environmental management inquiry ffl profiling interface included standard 
standard specify ffl explicit shared memory operations ffl operations require operating system support currently standard example interrupt driven receives remote execution active messages chapter 
mpi ffl program construction tools ffl debugging facilities ffl explicit support threads ffl support task management ffl functions features considered included standard 
happened number reasons time constraint finishing standard 
features included offered extensions specific implementations 
versions mpi address issues 
organization document list remaining chapters document brief description 
ffl chapter mpi terms conventions explains notational terms conventions mpi document 
ffl chapter point point communication defines basic pairwise communication subset mpi 
send receive associated functions designed basic communication powerful efficient 
ffl chapter collective communications defines process group collective communication operations 
known examples barrier broadcast group processes necessarily processes 
ffl chapter groups contexts communicators shows groups processes formed manipulated unique communication contexts obtained bound communicator 
ffl chapter process topologies explains set utility functions meant assist mapping process groups linearly ordered set richer topological structures multi dimensional grids 
ffl chapter mpi environmental management explains programmer manage inquiries current mpi environment 
functions needed writing correct robust programs especially important construction highly portable message passing programs 
ffl chapter profiling interface explains simple name shifting convention mpi implementation support 
motivation ability put performance profiling calls mpi need access mpi source code 
name shift merely interface says actual profiling done fact name shift useful purposes 

organization document ffl annex language bindings gives specific syntax fortran mpi functions constants types 
ffl mpi function index simple index showing location precise definition mpi function fortran bindings 
chapter mpi terms conventions chapter explains notational terms conventions mpi document choices rationale choices 
document notation rationale 
document rationale design choices interface specification set format 
readers may wish skip sections readers interested interface design may want read carefully 
rationale 
advice users 
document material speaks users illustrates usage set format 
readers may wish skip sections readers interested programming mpi may want read carefully 
advice users 
advice implementors 
document material primarily commentary implementors set format 
readers may wish skip sections readers interested mpi implementations may want read carefully 
advice implementors 
procedure specification mpi procedures specified language independent notation 
arguments procedure calls marked inout 
meanings ffl call uses update argument marked ffl call may update argument marked ffl call uses updates argument marked inout 
special case argument handle opaque object terms defined section object updated procedure call argument marked 
marked way handle modified attribute denote handle updated 

semantic terms definition mpi tries avoid largest possible extent inout arguments error prone especially scalar arguments 
common occurrence mpi functions argument processes processes 
argument syntactically inout argument marked semantically call input output 
frequent situation arises argument value needed subset processes 
argument significant process arbitrary value passed argument 
specified argument type type inout aliased argument passed mpi procedure 
example argument aliasing appears 
define procedure void int pin int pout int len int len pout pin call code fragment aliased arguments 
int language allows usage mpi procedures forbidden specified 
note fortran prohibits aliasing arguments 
mpi functions specified language independent notation 
immediately ansi version function shown version function fortran 
semantic terms discussing mpi procedures semantic terms 
usually applied communication operations 
nonblocking procedure may return operation completes user allowed re resources buffers specified call 
blocking return procedure indicates user allowed re resources specified call 
local completion procedure depends local executing process 
operation require communication user process 
non local completion operation may require execution mpi procedure process 
operation may require communication occurring user process 
collective processes process group need invoke procedure 
chapter 
mpi terms conventions data types opaque objects mpi manages system memory buffering messages storing internal representations various mpi objects groups communicators datatypes memory directly accessible user objects stored opaque size shape visible user 
opaque objects accessed handles exist user space 
mpi procedures operate opaque objects passed handle arguments access objects 
addition mpi calls object access handles participate assignment comparisons 
fortran handles type integer 
different handle type defined category objects 
types support assignment equality operators 
fortran handle index table opaque objects system table index pointer object 
bizarre possibilities exist 
opaque objects allocated deallocated calls specific object type 
listed sections objects described 
calls accept handle argument matching type 
allocate call argument returns valid object 
call deallocate inout argument returns null handle value 
mpi provides null handle constant object type 
comparisons constant test validity handle 
call deallocate invalidates handle marks object deallocation 
object accessible user call 
mpi need deallocate object 
operation pending time deallocate involves object complete normally object deallocated 
mpi calls change value handles exception calls allocate deallocate objects call mpi type commit section 
null handle argument erroneous argument mpi calls exception explicitly stated text defines function 
exception allowed handles request objects wait test calls sections 
null handle passed function allocates new object returns handle 
opaque object handle significant process object created transferred process 
mpi provides certain predefined opaque objects predefined static handles objects 
objects may destroyed 
rationale 
design hides internal representation mpi data structures allowing similar calls fortran 
avoids conflicts typing rules languages easily allows extensions functionality 
mechanism opaque objects loosely follows posix fortran binding standard 
explicit separating handles user space objects system space allows deallocation calls appropriate points user program 
opaque objects user space careful go scope pending operation requiring object completed 
specified design allows object marked deallocation user program 
data types go scope object persists pending operations complete 
requirement handles support assignment comparison operations common 
restricts domain possible implementations 
alternative allow handles arbitrary opaque type 
force routines assignment comparison adding complexity ruled 
rationale 
advice users 
user may create dangling assigning handle value handle deallocating object associated handles 
conversely handle variable deallocated associated object freed object inaccessible may occur example handle local variable subroutine subroutine exited associated object deallocated 
user responsibility avoid adding deleting opaque objects result calls allocate deallocate objects 
advice users 
advice implementors 
intended semantics opaque objects opaque object separate call allocate object copies information required object 
implementations may avoid excessive copying substituting referencing copying 
example derived datatype may contain components copies components call mpi comm group may return group associated communicator copy group 
cases implementation maintain counts allocate deallocate objects visible effect objects copied 
advice implementors 
array arguments mpi call may need argument array opaque objects array handles 
array handles regular array entries handles objects type consecutive locations array 
array additional len argument required indicate number valid entries number derived 
valid entries array len indicates need entire size array 
approach followed array arguments 
state mpi procedures various places arguments state types 
values data type identified names operation defined 
example mpi errhandler set routine state type argument values mpi errors fatal mpi errors return named constants mpi procedures assign special meaning special value basic type argument tag integer valued argument point point communication operations special wild card value mpi tag 
arguments range regular chapter 
mpi terms conventions values proper subrange range values corresponding basic type special values mpi tag outside regular range 
range regular values queried environmental inquiry functions chapter 
mpi provides predefined named constant handles mpi comm world handle object represents processes available start time allowed communicate 
named constants exception mpi bottom fortran initialization expressions assignments 
constants change values execution 
opaque objects accessed constant handles defined change value mpi initialization mpi init call mpi completion mpi finalize call 
choice mpi functions arguments choice union data type 
distinct calls routine may pass actual arguments different types 
mechanism providing arguments differ language language 
fortran document uses type 
represent choice variable void 
addresses mpi procedures address arguments represent absolute address calling program 
datatype argument integer size needed hold valid address execution environment 
language binding section defines rules mpi language binding general fortran ansi particular 
defined various object representations naming conventions expressing standard 
actual calling sequences defined 
expected fortran implementations fortran ansi bindings respectively 
consider premature define bindings fortran current bindings designed encourage discourage experimentation better bindings adopted 
word parameter keyword fortran language word argument denote arguments subroutine 
normally referred parameters expect programmers understand word argument specific meaning allowing avoid unnecessary confusion fortran programmers 
important language binding issues addressed standard 
standard discuss interoperability message passing languages 
fully expected implementations features features sign quality implementation 
fortran binding issues mpi names mpi prefix characters capitals 
programs declare variables functions names prefix mpi mandated 
language binding double precision integer call mpisend 
call mpisend 
example calling routine mismatched formal actual arguments 
avoid possible name collisions 
mpi fortran subroutines return code argument 
mpi operations functions return code argument 
return code value successful completion mpi success 
error codes implementation dependent see chapter 
handles represented fortran integers 
binary valued variables type logical 
array arguments indexed 
explicitly stated mpi binding consistent ansi standard fortran 
points standard diverges ansi fortran standard 
exceptions consistent common practice fortran community 
particular ffl mpi identifiers limited significant characters 
ffl mpi identifiers may contain underscores character 
ffl mpi subroutine choice argument may called different argument types 
example shown 
violates letter fortran standard violation common practice 
alternative separate version mpi send data type 
ffl required strongly suggested named mpi constants parameters provided include file called systems support include files implementation specify values named constants 
ffl vendors encouraged provide type declarations file fortran systems support user defined types 
define possible type mpi address integer size needed hold address execution environment 
systems type definition supported user integer right kind represent addresses integer bit machine integer bit machine 
mpi named constants entity declared parameter attribute fortran 
exception rule mpi constant mpi bottom section buffer argument 
binding issues ansi declaration format 
mpi names mpi prefix defined constants capital letters defined types functions capital letter chapter 
mpi terms conventions prefix 
programs declare variables functions names prefix mpi mandated avoid possible name collisions 
definition named constants function prototypes type definitions supplied include file mpi functions return error code 
successful return code mpi success failure return codes implementation dependent 
functions return values implemented macros 
type declarations provided handles category opaque objects 
pointer integer type 
array arguments indexed zero 
logical flags integers value meaning false non zero value meaning true 
choice arguments pointers type void 
address arguments mpi defined type mpi aint 
defined int size needed hold valid address target architecture 
named mpi constants initialization expressions assignments constants 
processes mpi program consists autonomous processes executing code mimd style 
codes executed process need identical 
processes communicate calls mpi communication primitives 
typically process executes address space shared memory implementations mpi possible 
document specifies behavior parallel program assuming mpi calls communication 
interaction mpi program possible means communication shared memory specified 
mpi specify execution model process 
process sequential multi threaded threads possibly executing concurrently 
care taken mpi thread safe avoiding implicit state 
desired interaction mpi threads concurrent threads allowed execute mpi calls calls reentrant blocking mpi call blocks invoking thread allowing scheduling thread 
mpi provide mechanisms specify initial allocation processes mpi computation binding physical processors 
expected vendors provide mechanisms load time run time 
mechanisms allow specification initial number required processes code executed initial process allocation processes processors 
current proposal provide dynamic creation deletion processes program execution total number processes fixed intended consistent extensions 
identify processes relative rank group consecutive integers range 
error handling mpi provides user reliable message transmission 
message sent received correctly user need check transmission errors time outs 
error handling error conditions 
words mpi provide mechanisms dealing failures communication system 
mpi implementation built unreliable underlying mechanism job implementor mpi subsystem insulate user unreliability reflect unrecoverable errors failures 
possible failures reflected errors relevant communication call 
similarly mpi provides mechanisms handling processor failures 
error handling facilities described section restrict scope unrecoverable error design error recovery application level 
course mpi programs may erroneous 
program error occur mpi call called incorrect argument non existing destination send operation buffer small receive operation type error occur implementation 
addition resource error may occur program exceeds amount available system resources number pending messages system buffers 
occurrence type error depends amount available resources system resource allocation mechanism may differ system system 
high quality implementation provide generous limits important resources alleviate portability problem represents 
mpi calls return code indicates successful completion operation 
possible mpi calls return error code error occurred call 
certain circumstances mpi function may complete distinct operations may generate independent errors mpi function may return multiple error codes 
default error detected execution mpi library causes parallel computation abort 
mpi provides mechanisms users change default handle recoverable errors 
user may specify error fatal handle error codes returned mpi calls 
user may provide error handling routines invoked mpi call returns abnormally 
mpi error handling facilities described section 
factors limit ability mpi calls return meaningful error codes error occurs 
mpi may able detect errors errors may expensive detect normal execution mode errors may catastrophic may prevent mpi returning control caller consistent state 
subtle issue arises nature asynchronous communications mpi calls may initiate operations continue asynchronously call returned 
operation may return code indicating successful completion cause error exception raised 
subsequent call relates operation call verifies asynchronous operation completed error argument associated call indicate nature error 
cases error may occur calls relate operation completed error value indicate nature error error send ready mode 
error treated fatal information returned user recover 
document specify state computation erroneous mpi call occurred 
desired behavior relevant error code returned effect error localized greatest possible extent 
highly erroneous receive call cause part receiver memory overwritten area specified receiving message 
implementations may go document supporting meaningful manner mpi calls defined erroneous 
example mpi specifies strict type chapter 
mpi terms conventions matching rules matching send receive operations erroneous send floating point variable receive integer 
implementations may go type matching rules provide automatic type conversion situations 
helpful generate warnings behavior 
implementation issues number areas mpi implementation may interact operating environment system 
mpi mandate services signal handling provided strongly suggest behavior provided services available 
important point achieving portability platforms provide set services 
independence basic runtime routines mpi programs require library routines part basic language environment date write fortran printf malloc ansi executed mpi init mpi finalize operate independently completion independent action processes mpi program 
note way prevents creation library routines provide parallel services operation collective 
program expected complete ansi environment regardless size mpi comm world assuming available executing nodes 
int rank argc argv mpicommrank mpicommworld rank rank printf starting program corresponding fortran program expected complete 
example required particular ordering action routines called tasks 
example mpi requirements recommendations output program assuming available executing nodes 
mpicommrank mpicommworld rank printf output task rank rank addition calls fail resource exhaustion error considered violation requirements required complete just complete successfully 
interaction signals posix mpi specify interaction processes signals unix environment events relate mpi communication 
signals significant view point mpi implementors attempt implement mpi signals transparent mpi call suspended signal resume 
examples complete signal handled 
generally state computation visible significant view point mpi affected mpi calls 
intent mpi thread signal safe number subtle effects 
example unix systems signal alarm signal cause mpi routine behave differently absence signal 
course signal handler issues mpi calls changes environment mpi routine operating example consuming available memory space mpi routine behave appropriate situation particular case behavior multithreaded mpi implementation 
second effect signal handler performs mpi calls interfere operation mpi 
example mpi receive type occurs signal handler cause erroneous behavior mpi implementation 
note implementation permitted prohibit mpi calls signal handler required detect 
highly desirable mpi 
implementation required clearly document signals mpi implementation uses place information unix man page mpi 
examples examples document illustration purposes 
intended specify standard 
furthermore examples carefully checked verified 
chapter point point communication sending receiving messages processes basic mpi communication mechanism 
basic point point communication operations send receive 
illustrated example 
include mpi main argc argv int argc char argv char message int myrank status argc argv mpicommrank mpicommworld myrank myrank code process zero strcpy message hello mpisend message strlen message mpicommworld code process mpirecv message mpicommworld status printf received message example process zero myrank sends message process send operation mpi send 
operation specifies send buffer sender memory message data taken 
example send buffer consists storage containing variable message memory process zero 
location size type send buffer specified parameters send operation 
message sent contain characters variable 
addition 
blocking send receive operations send operation associates envelope message 
envelope specifies message destination contains distinguishing information receive operation select particular message 
parameters send operation specify envelope message sent 
process myrank receives message receive operation mpi recv 
message received selected value envelope message data stored receive buffer 
example receive buffer consists storage containing string message memory process 
parameters receive operation specify location size type receive buffer 
parameters selecting incoming message 
parameter return information message just received 
sections describe blocking send receive operations 
discuss send receive blocking communication semantics type matching requirements type conversion heterogeneous environments general communication modes 
nonblocking communication addressed followed channel constructs send receive operations 
consider general datatypes allow transfer efficiently heterogeneous noncontiguous data 
conclude description calls explicit packing unpacking messages 
blocking send receive operations blocking send syntax blocking send operation 
mpi send buf count datatype dest tag comm buf initial address send buffer choice count number elements send buffer nonnegative integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle int mpi send void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi send buf count datatype dest tag comm ierror type 
buf integer count datatype dest tag comm ierror blocking semantics call described sec 

message data send buffer specified mpi send operation consists count successive entries type indicated datatype starting entry address buf 
note specify chapter 
point point communication message length terms number elements number bytes 
machine independent closer application level 
data part message consists sequence count values type indicated datatype 
count may zero case data part message empty 
basic datatypes specified message data values correspond basic datatypes host language 
possible values argument fortran corresponding fortran types listed 
mpi datatype fortran datatype mpi integer integer mpi real real mpi double precision double precision mpi complex complex mpi logical logical mpi character character mpi byte mpi packed possible values argument corresponding types listed 
mpi datatype datatype mpi char signed char mpi short signed short int mpi int signed int mpi long signed long int mpi unsigned char unsigned char mpi unsigned short unsigned short int mpi unsigned unsigned int mpi unsigned long unsigned long int mpi float float mpi double double mpi long double long double mpi byte mpi packed datatypes mpi byte mpi packed correspond fortran datatype 
value type mpi byte consists byte binary digits 
byte uninterpreted different character 
different machines may different representations characters may byte represent characters 
hand byte binary value machines 
type mpi packed explained section 
mpi requires support datatypes listed match basic datatypes fortran ansi additional mpi datatypes provided host language 
blocking send receive operations additional data types mpi long long int bit integers declared type int mpi double complex double precision complex fortran declared type double complex mpi real mpi real mpi real fortran reals declared type real real real respectively mpi integer mpi integer mpi integer fortran integers declared type integer integer integer respectively rationale 
goal design allow mpi implemented library need additional preprocessing compilation 
assume communication call information datatype variables communication buffer information supplied explicit argument 
need datatype information clear section 
rationale 
message envelope addition data part messages carry information distinguish messages selectively receive 
information consists fixed number fields collectively call message envelope 
fields source destination tag communicator message source implicitly determined identity message sender 
fields specified arguments send operation 
message destination specified dest argument 
integer valued message tag specified tag argument 
integer program distinguish different types messages 
range valid tag values ub value ub implementation dependent 
querying value attribute mpi tag ub described chapter 
mpi requires ub 
comm argument specifies communicator send operation 
communicators explained chapter brief summary usage 
communicator specifies communication context communication operation 
communication context provides separate communication universe messages received context sent messages sent different contexts interfere 
communicator specifies set processes share communication context 
process group ordered processes identified rank group 
range valid values dest 
number processes group 
communicator inter communicator destinations identified rank remote group 
see chapter 
predefined communicator mpi comm world provided mpi 
allows communication processes accessible mpi initialization processes identified rank group mpi comm world 
advice users 
users comfortable notion flat name space processes single communication context offered existing communication libraries need predefined variable mpi comm world chapter 
point point communication comm argument 
allow communication processes available initialization time 
users may define new communicators explained chapter 
communicators provide important encapsulation mechanism libraries modules 
allow modules disjoint communication universe process numbering scheme 
advice users 
advice implementors 
message envelope normally encoded fixed length message header 
actual encoding implementation dependent 
information source destination may implicit need explicitly carried messages 
processes may identified relative ranks absolute ids 
advice implementors 
blocking receive syntax blocking receive operation 
mpi recv buf count datatype source tag comm status buf initial address receive buffer choice count number elements receive buffer integer datatype datatype receive buffer element handle source rank source integer tag message tag integer comm communicator handle status status object status int mpi recv void buf int count mpi datatype datatype int source int tag mpi comm comm mpi status status mpi recv buf count datatype source tag comm status ierror type 
buf integer count datatype source tag comm status mpi status size ierror blocking semantics call described sec 

receive buffer consists storage containing count consecutive elements type specified datatype starting address buf 
length received message equal length receive buffer 
overflow error occurs incoming data fit truncation receive buffer 
message shorter receive buffer arrives locations corresponding shorter message modified 
advice users 
mpi probe function described section receive messages unknown length 
advice users 

blocking send receive operations advice implementors 
specific behavior mandated mpi erroneous programs recommended handling overflow situations return status information source tag incoming message 
receive operation return error code 
quality implementation ensure memory outside receive buffer overwritten 
case message shorter receive buffer mpi quite strict allows modification locations 
lenient statement allow optimizations allowed 
implementation ready copy receiver memory exactly receive buffer odd address 
advice implementors 
selection message receive operation governed value message envelope 
message received receive operation envelope matches source tag comm values specified receive operation 
receiver may specify wildcard mpi source value source wildcard mpi tag value tag indicating source tag acceptable 
specify wildcard value comm 
message received receive operation addressed receiving process matching communicator matching source source mpi source pattern matching tag tag mpi tag pattern 
message tag specified tag argument receive operation 
argument source different mpi source specified rank process group associated communicator remote process group range valid values source argument number processes group 
note asymmetry send receive operations receive operation may accept messages arbitrary sender hand send operation specify unique receiver 
matches push communication mechanism data transfer effected sender pull mechanism data transfer effected receiver 
source destination allowed process send message 
unsafe blocking send receive operations described may lead deadlock 
see sec 
advice implementors 
message context communicator information implemented additional tag field 
differs regular message tag wild card matching allowed field value setting field controlled communicator manipulation functions 
advice implementors 
return status source tag received message may known wildcard values receive operation 
multiple requests completed single mpi function see section distinct error code may need returned request 
information returned status argument mpi recv 
type status mpi defined 
status variables need explicitly allocated user system objects 
chapter 
point point communication status structure contains fields named mpi source mpi tag mpi error structure may contain additional fields 
status mpi source status mpi tag status mpi error contain source tag error code respectively received message 
fortran status array integers size mpi status size 
constants mpi source mpi tag mpi error indices entries store source tag error fields 
status mpi source status mpi tag status mpi error contain respectively source tag error code received message 
general message passing calls modify value error code field status variables 
field may updated functions section return multiple statuses 
field updated function returns error code mpi err status 
rationale 
error field status needed calls return status mpi wait duplicate information returned function 
current design avoids additional overhead setting cases 
field needed calls return multiple statuses request may different failure 
rationale 
status argument returns information length message received 
information directly available field status variable call mpi get count required decode information 
mpi get count status datatype count status return status receive operation status datatype datatype receive buffer entry handle count number received entries integer int mpi get count mpi status status mpi datatype datatype int count mpi get count status datatype count ierror integer status mpi status size datatype count ierror returns number entries received 
count entries type datatype bytes 
datatype argument match argument provided receive call set status variable 
shall see section mpi get count may return certain situations value mpi undefined 
rationale 
message passing libraries inout count tag source arguments specify selection criteria incoming messages return actual envelope values received message 
separate status argument prevents errors attached inout argument mpi tag constant tag receive 
libraries calls refer implicitly message received 
thread safe 
datatype argument passed mpi get count improve performance 
message received counting number elements contains count value needed 
allows function call mpi probe 
rationale 

data type matching data conversion send receive operations buf count datatype source dest tag comm status arguments way blocking mpi send mpi recv operations described section 
data type matching data conversion type matching rules think message transfer consisting phases 

data pulled send buffer message assembled 

message transferred sender receiver 

data pulled incoming message disassembled receive buffer 
type matching observed phases type variable sender buffer match type specified entry send operation type specified send operation match type specified receive operation type variable receive buffer match type specified entry receive operation 
program fails observe rules erroneous 
define type matching precisely need deal issues matching types host language types specified communication operations matching types sender receiver 
types send receive match phase operations identical names 
mpi integer matches mpi integer mpi real matches mpi real 
exception rule discussed sec 
type mpi packed match type 
type variable host program matches type specified communication operation datatype name operation corresponds basic type host program variable 
example entry type name mpi integer matches fortran variable type integer 
table giving correspondence fortran appears sec 

exceptions rule entry type name mpi byte mpi packed match byte storage byte addressable machine irrespective datatype variable contains byte 
type mpi packed send data explicitly packed receive data explicitly unpacked see section 
type mpi byte allows transfer binary value byte memory unchanged 
summarize type matching rules fall categories 
ffl communication typed values datatype different mpi byte datatypes corresponding entries sender program send call receive call receiver program match 
ffl communication untyped values datatype mpi byte sender receiver datatype mpi byte 
case requirements types corresponding entries sender receiver programs required 
ffl communication involving packed data mpi packed 
chapter 
point point communication examples illustrate cases 
example sender receiver specify matching types 
call mpicommrank comm rank ierr rank eq call mpisend mpireal tag comm ierr call mpirecv mpireal tag comm status ierr code correct real arrays size 
fortran correct code size array reals 
example sender receiver specify matching types 
call mpicommrank comm rank ierr rank eq call mpisend mpireal tag comm ierr call mpirecv tag comm status ierr code erroneous sender receiver provide matching datatype arguments 
example sender receiver specify communication untyped values 
call mpicommrank comm rank ierr rank eq call mpisend tag comm ierr call mpirecv tag comm status ierr code correct irrespective type size results bound memory access 
advice users 
buffer type mpi byte passed argument mpi send mpi send data stored contiguous locations starting address indicated buf argument 
may unexpected results data layout casual user expect 
example fortran compilers implement variables type character structure contains character length pointer actual string 
environment sending receiving fortran character variable mpi byte type anticipated result transferring character string 
reason user advised typed communications possible 
advice users 

data type matching data conversion type mpi character type mpi character matches character fortran variable type character entire character string stored variable 
fortran variables type character substrings transferred arrays characters 
illustrated example 
example transfer fortran characters 
character character call mpicommrank comm rank ierr rank eq call mpisend tag comm ierr call mpirecv tag comm status ierr characters string process replaced characters string process 
rationale 
alternative choice mpi character match character arbitrary length 
runs problems 
fortran character variable constant length string special termination symbol 
fixed convention represent characters store length 
compilers pass character argument routine pair arguments holding address string holding length string 
consider case mpi communication call passed communication buffer type defined derived datatype section 
communicator buffer contains variables type character information length passed mpi routine 
problem forces provide explicit information character length mpi call 
add length parameter type mpi character add convenience functionality achieved defining suitable derived datatype 
rationale 
advice implementors 
compilers pass fortran character arguments structure length pointer actual string 
environment mpi call needs dereference pointer order reach string 
advice implementors 
data conversion goals mpi support parallel computations heterogeneous environments 
communication heterogeneous environment may require data conversions 
terminology 
type conversion changes datatype value rounding real integer 
chapter 
point point communication representation conversion changes binary representation value hex floating point ieee floating point 
type matching rules imply mpi communication entails type conversion 
hand mpi requires representation conversion performed typed value transferred environments different representations datatype value 
mpi specify rules representation conversion 
conversion expected preserve integer logical character values convert floating point value nearest value represented target system 
overflow underflow exceptions may occur floating point conversions 
conversion integers characters may lead exceptions value represented system represented system 
exception occurring representation conversion results failure communication 
error occurs send operation receive operation 
value sent message untyped type mpi byte binary representation byte stored receiver identical binary representation byte loaded sender 
holds true sender receiver run distinct environments 
representation conversion required 
note representation conversion may occur values type mpi character mpi char transferred example encoding ascii encoding 
conversion need occur mpi program executes homogeneous system processes run environment 
consider examples 
program correct assuming real arrays size 
sender receiver execute different environments real values fetched send buffer converted representation reals receiver site stored receive buffer 
number real elements fetched send buffer equal number real elements stored receive buffer number bytes stored need equal number bytes loaded 
example sender may byte representation receiver byte representation reals 
second program erroneous behavior undefined 
third program correct 
exact sequence bytes loaded send buffer stored receive buffer sender receiver run different environment 
message sent exactly length bytes binary representation message received 
different types type different data representations bits stored receive buffer may encode values different values encoded send buffer 
data representation conversion applies envelope message source destination tag integers may need converted 
advice implementors 
current definition require messages carry data type information 
sender receiver provide complete data type information 
heterogeneous environment machine independent encoding xdr receiver convert sender representation sender conversion 
additional type information added messages order allow system detect mismatches datatype sender receiver 
particularly useful slower safer debug mode 
advice implementors 

communication modes mpi require support inter language communication 
behavior program undefined messages sent process received fortran process vice versa 
rationale 
mpi handle inter language communication agreed standards correspondence types fortran types 
mpi programs mix languages port 
rationale 
advice implementors 
mpi implementors may want support inter language communication allowing fortran programs mpi types mpi int mpi char allowing programs fortran types 
advice implementors 
communication modes send call described section blocking return message data envelope safely stored away sender free access overwrite send buffer 
message copied directly matching receive buffer copied temporary system buffer 
message buffering decouples send receive operations 
blocking send complete soon message buffered matching receive executed receiver 
hand message buffering expensive entails additional memory memory copying requires allocation memory buffering 
mpi offers choice communication modes allow control choice communication protocol 
send call described section standard communication mode 
mode mpi decide outgoing messages buffered 
mpi may buffer outgoing messages 
case send call may complete matching receive invoked 
hand buffer space may unavailable mpi may choose buffer outgoing messages performance reasons 
case send call complete matching receive posted data moved receiver 
send standard mode started matching receive posted 
may complete matching receive posted 
standard mode send non local successful completion send operation may depend occurrence matching receive 
rationale 
reluctance mpi mandate standard sends buffering stems desire achieve portable programs 
system run buffer resources message sizes increased implementations may want provide little buffering mpi takes position correct portable programs rely system buffering standard mode 
buffering may improve performance correct program doesn affect result program 
user wishes guarantee certain amount buffering buffer system sec 
buffered mode send 
rationale 
additional communication modes 
chapter 
point point communication buffered mode send operation started matching receive posted 
may complete matching receive posted 
standard send operation local completion depend occurrence matching receive 
send executed matching receive posted mpi buffer outgoing message allow send call complete 
error occur insufficient buffer space 
amount available buffer space controlled user see section 
buffer allocation user may required buffered mode effective 
send uses synchronous mode started matching receive posted 
send complete successfully matching receive posted receive operation started receive message sent synchronous send 
completion synchronous send indicates send buffer reused indicates receiver reached certain point execution started executing matching receive 
sends receives blocking operations synchronous mode provides synchronous communication semantics communication complete processes rendezvous communication 
send executed mode non local 
send uses ready communication mode may started matching receive posted 
operation erroneous outcome undefined 
systems allows removal hand shake operation required results improved performance 
completion send operation depend status matching receive merely indicates send buffer reused 
send operation uses ready mode semantics standard send operation synchronous send operation merely sender provides additional information system matching receive posted save overhead 
correct program ready send replaced standard send effect behavior program performance 
additional send functions provided additional communication modes 
communication mode indicated letter prefix buffered synchronous ready 
mpi buf count datatype dest tag comm buf initial address send buffer choice count number elements send buffer integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi buf count datatype dest tag comm ierror type 
buf 
communication modes integer count datatype dest tag comm ierror send buffered mode 
mpi buf count datatype dest tag comm buf initial address send buffer choice count number elements send buffer integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi buf count datatype dest tag comm ierror type 
buf integer count datatype dest tag comm ierror send synchronous mode 
mpi buf count datatype dest tag comm buf initial address send buffer choice count number elements send buffer integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi buf count datatype dest tag comm ierror type 
buf integer count datatype dest tag comm ierror send ready mode 
receive operation match send modes 
receive operation described section blocking returns receive buffer contains newly received message 
receive complete matching send completed course complete matching send started 
multi threaded implementation mpi system may de schedule thread blocked send receive operation schedule thread execution address space 
case user responsibility access modify chapter 
point point communication communication buffer communication completes 
outcome computation undefined 
rationale 
prohibit read accesses send buffer send operation supposed alter content buffer 
may stringent necessary additional restriction causes little loss functionality allows better performance systems consider case data transfer done dma engine cache coherent main processor 
rationale 
advice implementors 
synchronous send complete matching receive posted normally buffer messages sent operation 
recommended choose buffering blocking sender possible standard sends 
programmer signal preference blocking sender matching receive occurs synchronous send mode 
possible communication protocol various communication modes outlined 
ready send message sent soon possible 
synchronous send sender sends request send message 
receiver stores request 
matching receive posted receiver sends back send message sender sends message 
standard send protocol may short messages second protocol long messages 
buffered send sender copies message buffer sends nonblocking send protocol standard send 
additional control messages needed flow control error recovery 
course possible protocols 
ready send implemented standard send 
case performance advantage disadvantage ready send 
standard send implemented synchronous send 
case data buffering needed 

users expect buffering 
multi threaded environment execution blocking communication block executing thread allowing thread scheduler de schedule thread schedule thread execution 
advice implementors 
semantics point point communication valid mpi implementation guarantees certain general properties point point communication described section 
order messages non overtaking sender sends messages succession destination match receive operation receive second message pending 
receiver posts receives succession match message second receive operation satisfied message pending 
requirement facilitates matching 
semantics point point communication sends receives 
guarantees message passing code deterministic processes single threaded wildcard mpi source receives 
calls described mpi cancel mpi additional sources nondeterminism 
process single thread execution communications executed process ordered 
hand process multi threaded semantics thread execution may define relative order send operations executed distinct threads 
operations logically concurrent physically precedes 
case messages sent received order 
similarly receive operations logically concurrent receive successively sent messages messages match receives order 
example example non overtaking messages 
call mpicommrank comm rank ierr rank eq call buf count mpireal tag comm ierr call buf count mpireal tag comm ierr rank eq call mpirecv buf count mpireal comm status ierr call mpirecv buf count mpireal tag comm status ierr message sent send received receive message sent second send received second receive 
progress pair matching send receives initiated processes operations complete independently actions system send operation complete receive satisfied message completes receive operation complete message sent consumed matching receive posted destination process 
example example intertwined matching pairs 
call mpicommrank comm rank ierr rank eq call buf count mpireal tag comm ierr call buf count mpireal tag comm ierr rank eq call mpirecv buf count mpireal tag comm status ierr call mpirecv buf count mpireal tag comm status ierr processes invoke communication call 
send process zero uses buffered mode complete irrespective state process 
matching receive posted message copied buffer space 
insufficient buffer space available program fail 
second send invoked 
point matching pair send receive operation enabled operations chapter 
point point communication complete 
process invokes second receive call satisfied buffered message 
note process received messages reverse order sent 
fairness mpi guarantee fairness handling communication 
suppose send posted 
possible destination process repeatedly posts receive matches send message received time message sent source 
similarly suppose receive posted multi threaded process 
possible messages match receive repeatedly received receive satisfied receives posted node executing threads 
programmer responsibility prevent starvation situations 
resource limitations pending communication operation consumes system resources limited 
errors may occur lack resources prevent execution mpi call 
quality implementation small fixed amount resources pending send ready synchronous mode pending receive 
buffer space may consumed store messages sent standard mode consumed store messages sent buffered mode matching receive available 
amount space available buffering smaller program data memory systems 
easy write programs overrun available buffer space 
mpi allows user provide buffer memory messages sent buffered mode 
furthermore mpi specifies detailed operational model buffer 
mpi implementation required worse implied model 
allows users avoid buffer overflows buffered sends 
buffer allocation described section 
buffered send operation complete lack buffer space erroneous 
situation detected error signalled may cause program terminate abnormally 
hand standard send operation complete lack buffer space merely block waiting buffer space available matching receive posted 
behavior preferable situations 
consider situation producer repeatedly produces new values sends consumer 
assume producer produces new values faster consumer consume 
buffered sends buffer overflow result 
additional synchronization added program prevent occurring 
standard sends producer automatically throttled send operations block buffer space unavailable 
situations lack buffer space leads deadlock situations 
illustrated examples 
example exchange messages 
call mpicommrank comm rank ierr rank eq call mpisend sendbuf count mpireal tag comm ierr call mpirecv recvbuf count mpireal tag comm status ierr rank eq call mpirecv recvbuf count mpireal tag comm status ierr 
semantics point point communication call mpisend sendbuf count mpireal tag comm ierr program succeed buffer space data available 
standard send operation replaced example synchronous send 
example attempt exchange messages 
call mpicommrank comm rank ierr rank eq call mpirecv recvbuf count mpireal tag comm status ierr call mpisend sendbuf count mpireal tag comm ierr rank eq call mpirecv recvbuf count mpireal tag comm status ierr call mpisend sendbuf count mpireal tag comm ierr receive operation process complete send complete matching send second processor executed 
receive operation second process complete send complete matching send process executed 
program deadlock 
holds send mode 
example exchange relies buffering 
call mpicommrank comm rank ierr rank eq call mpisend sendbuf count mpireal tag comm ierr call mpirecv recvbuf count mpireal tag comm status ierr rank eq call mpisend sendbuf count mpireal tag comm ierr call mpirecv recvbuf count mpireal tag comm status ierr message sent process copied send operation returns receive operation starts 
program complete necessary messages sent buffered 
program succeed communication system buffer count words data 
advice users 
standard send operations deadlock situation may occur processes blocked buffer space available 
certainly happen synchronous mode 
buffered mode buffer space available program complete 
deadlock situation shall buffer overflow error 
program safe message buffering required program complete 
replace sends program synchronous sends program run correctly 
conservative programming style provides best portability program completion depend amount buffer space available communication protocol 
chapter 
point point communication programmers prefer leeway able unsafe programming style shown example 
cases standard sends provide best compromise performance robustness quality implementations provide sufficient buffering common practice programs deadlock 
buffered send mode programs require buffering situations programmer wants control 
mode debugging purposes buffer overflow conditions easier diagnose deadlock conditions 
nonblocking message passing operations described section avoid need buffering outgoing messages 
prevents deadlocks due lack buffer space improves performance allowing overlap computation communication avoiding overheads allocating buffers copying messages buffers 
advice users 
buffer allocation usage user may specify buffer buffering messages sent buffered mode 
buffering done sender 
mpi buffer attach buffer size buffer initial buffer address choice size buffer size bytes integer int mpi buffer attach void buffer int size mpi buffer attach buffer size ierror type 
buffer integer size ierror provides mpi buffer user memory buffering outgoing messages 
buffer messages sent buffered mode 
buffer attached process time 
mpi buffer detach buffer addr size buffer addr initial buffer address choice size buffer size bytes integer int mpi buffer detach void buffer addr int size mpi buffer detach buffer addr size ierror type 
buffer addr integer size ierror detach buffer currently associated mpi 
call returns address size detached buffer 
operation block messages currently 
buffer allocation usage buffer transmitted 
return function user may reuse deallocate space taken buffer 
example calls attach detach buffers 
define int size char buff malloc buffer bytes buff size buffer size reduced zero buff size buffer bytes available advice users 
functions mpi buffer attach mpi buffer detach argument type void arguments differently pointer buffer passed mpi buffer attach address pointer passed mpi buffer detach call return pointer value 
advice users 
rationale 
arguments defined type void void void respectively avoid complex type casts 
example buff type char passed argument mpi buffer detach type casting 
formal parameter type void need type cast call 
rationale 
statements section describe behavior mpi buffered mode sends 
buffer currently associated mpi behaves zero sized buffer associated process 
mpi provide buffering outgoing messages outgoing message data buffered sending process specified buffer space circular contiguous space allocation policy 
outline model implementation defines policy 
mpi may provide buffering may better buffer allocation algorithm described 
hand mpi may signal error simple buffering allocator described run space 
particular buffer explicitly associated process buffered send may cause error 
mpi provide mechanisms querying controlling buffering done standard mode sends 
expected vendors provide information implementations 
rationale 
wide spectrum possible implementations buffered communication buffering done sender receiver buffers dedicated sender receiver pair shared communications buffering done real virtual memory dedicated memory memory shared processes buffer space may allocated statically changed dynamically feasible provide portable mechanism querying controlling buffering compatible choices provide meaningful information 
rationale 
chapter 
point point communication model implementation buffered mode model implementation uses packing unpacking functions described section nonblocking communication functions described section 
assume circular queue pending message entries pme maintained 
entry contains communication request handle identifies pending nonblocking send pointer entry packed message data 
entries stored successive locations buffer 
free space available queue tail queue head 
buffered send call results execution code 
ffl traverse sequentially pme queue head tail deleting entries communications completed entry uncompleted request update queue head point entry 
ffl compute number bytes needed store entry new message 
upper bound computed follows call function mpi pack size count datatype comm size count datatype comm arguments mpi call returns upper bound amount space needed buffer message data see section 
mpi constant mpi overhead provides upper bound additional space consumed entry pointers envelope information 
ffl find contiguous empty space bytes buffer space queue tail space start buffer queue tail close buffer 
space raise buffer overflow error 
ffl append pme queue contiguous space new entry contains request handle pointer packed message data mpi pack pack data 
ffl post nonblocking send standard mode packed data 
ffl return nonblocking communication improve performance systems overlapping communication computation 
especially true systems communication executed autonomously intelligent communication controller 
light weight threads mechanism achieving overlap 
alternative mechanism leads better performance nonblocking communication 
nonblocking send start call initiates send operation complete 
send start call return message copied send buffer 
separate send complete call needed complete communication verify data copied send buffer 
suitable hardware transfer data sender memory may proceed concurrently computations done sender send initiated completed 
similarly nonblocking receive start call initiates receive operation complete 
call return message stored receive buffer 
separate receive complete call needed complete receive operation verify data received receive buffer 
suitable hardware transfer 
nonblocking communication data receiver memory may proceed concurrently computations done receive initiated completed 
nonblocking receives may avoid system buffering memory memory copying information provided early location receive buffer 
nonblocking send start calls modes blocking sends standard buffered synchronous ready 
carry meaning 
sends modes ready started matching receive posted nonblocking ready send started matching receive posted 
cases send start call local returns immediately irrespective status processes 
call causes system resource exhausted fail return error code 
quality implementations mpi ensure happens pathological cases 
mpi implementation able support large number pending nonblocking operations 
send complete call returns data copied send buffer 
may carry additional meaning depending send mode 
send mode synchronous send complete matching receive started 
receive posted matched send 
case send complete call non local 
note synchronous nonblocking send may complete matched nonblocking receive receive complete call occurs 
complete soon sender knows transfer complete receiver knows transfer complete 
send mode buffered message buffered pending receive 
case send complete call local succeed irrespective status matching receive 
send mode standard send complete call may return matching receive occurred message buffered 
hand send complete may complete matching receive occurred message copied receive buffer 
nonblocking sends matched blocking receives vice versa 
advice users 
completion send operation may delayed standard mode delayed synchronous mode matching receive posted 
nonblocking sends cases allows sender proceed ahead receiver computation tolerant fluctuations speeds processes 
nonblocking sends buffered ready modes limited impact 
nonblocking send return soon possible blocking send return data copied sender memory 
nonblocking sends advantageous cases data copying concurrent computation 
message passing model implies communication initiated sender 
communication generally lower overhead receive posted sender initiates communication data moved directly receive buffer need queue pending send request 
receive operation complete matching send occurred 
nonblocking receives allows achieve lower communication overheads blocking receiver waits send 
advice users 
chapter 
point point communication communication objects nonblocking communications opaque request objects identify communication operations match operation initiates communication operation terminates 
system objects accessed handle 
request object identifies various properties communication operation send mode communication buffer associated context tag destination arguments send tag source arguments receive 
addition object stores information status pending communication operation 
communication initiation naming conventions blocking communication prefix buffered synchronous ready mode 
addition prefix immediate indicates call nonblocking 
mpi buf count datatype dest tag comm request buf initial address send buffer choice count number elements send buffer integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror start standard mode nonblocking send 

nonblocking communication mpi buf count datatype dest tag comm request buf initial address send buffer choice count number elements send buffer integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror start buffered mode nonblocking send 
mpi buf count datatype dest tag comm request buf initial address send buffer choice count number elements send buffer integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror start synchronous mode nonblocking send 
chapter 
point point communication mpi buf count datatype dest tag comm request buf initial address send buffer choice count number elements send buffer integer datatype datatype send buffer element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror start ready mode nonblocking send 
mpi buf count datatype source tag comm request buf initial address receive buffer choice count number elements receive buffer integer datatype datatype receive buffer element handle source rank source integer tag message tag integer comm communicator handle request communication request handle int mpi void buf int count mpi datatype datatype int source int tag mpi comm comm mpi request request mpi buf count datatype source tag comm request ierror type 
buf integer count datatype source tag comm request ierror start nonblocking receive 
calls allocate communication request object associate request handle argument request 
request query status communication wait completion 
nonblocking send call indicates system may start copying data send buffer 
sender access part send buffer nonblocking send operation called send completes 
nonblocking receive call indicates system may start writing data receive buffer 
receiver access part receive buffer nonblocking receive operation called receive completes 

nonblocking communication communication completion functions mpi wait mpi test complete nonblocking communication 
completion send operation indicates sender free update locations send buffer send operation leaves content send buffer unchanged 
indicate message received may buffered communication subsystem 
synchronous mode send completion send operation indicates matching receive initiated message eventually received matching receive 
completion receive operation indicates receive buffer contains received message receiver free access status object set 
indicate matching send operation completed indicates course send initiated 
shall terminology null handle handle value mpi request null 
persistent request handle inactive request associated ongoing communication see section 
handle active null inactive 
empty status status set return tag mpi tag source mpi source internally configured calls mpi get count mpi get elements return count 
set status variable empty value returned significant 
status set way prevent errors due accesses stale information 
mpi wait request status inout request request handle status status object status int mpi wait mpi request request mpi status status mpi wait request status ierror integer request status mpi status size ierror call mpi wait returns operation identified request complete 
communication object associated request created nonblocking send receive call object deallocated call mpi wait request handle set mpi request null 
mpi wait non local operation 
call returns status information completed operation 
content status object receive operation accessed described section 
status object send operation may queried call mpi test cancelled see section 
allowed call mpi wait null inactive request argument 
case operation returns immediately empty status 
advice users 
successful return mpi wait mpi implies user send buffer reused data sent copied buffer attached mpi buffer attach 
note point longer cancel send see sec 

matching receive posted buffer freed 
runs somewhat counter stated goal mpi cancel chapter 
point point communication able free program space committed communication subsystem 
advice users 
advice implementors 
multi threaded environment call mpi wait block calling thread allowing thread scheduler schedule thread execution 
advice implementors 
mpi test request flag status inout request communication request handle flag true operation completed logical status status object status int mpi test mpi request request int flag mpi status status mpi test request flag status ierror logical flag integer request status mpi status size ierror call mpi test returns flag true operation identified request complete 
case status object set contain information completed operation communication object created nonblocking send receive deallocated request handle set mpi request null 
call returns flag false 
case value status object undefined 
mpi test local operation 
return status object receive operation carries information accessed described section 
status object send operation carries information accessed call mpi test cancelled see section 
allowed call mpi test null inactive request argument 
case operation returns flag true empty status 
functions mpi wait mpi test complete sends receives 
advice users 
nonblocking mpi test call allows user schedule alternative activities single thread execution 
event driven thread scheduler emulated periodic calls mpi test 
advice users 
rationale 
function mpi test returns flag true exactly situations function mpi wait returns functions return case value status 
blocking wait easily replaced nonblocking test 
rationale 
example simple usage nonblocking operations mpi wait 
call mpicommrank comm rank ierr rank eq call mpireal tag comm request ierr 
nonblocking communication computation mask latency call request status ierr call mpireal tag comm request ierr computation mask latency call request status ierr request object deallocated waiting associated communication complete operation 
mpi request free request inout request communication request handle int mpi request free mpi request request mpi request free request ierror integer request ierror mark request object deallocation set request mpi request null 
ongoing communication associated request allowed complete 
request deallocated completion 
rationale 
mpi request free mechanism provided reasons performance convenience sending side 
rationale 
advice users 
request freed call mpi request free possible check successful completion associated communication calls mpi wait mpi test 
error occurs subsequently communication error code returned user error treated fatal 
questions arise knows operations completed mpi request free 
depending program logic may ways program knows certain operations completed usage mpi request free practical 
example active send request freed logic program receiver sends reply message sent arrival reply informs sender send completed send buffer reused 
active receive request freed receiver way verify receive completed receive buffer reused 
advice users 
example example mpi request free 
call mpicommrank mpicommworld rank rank eq call mpireal req ierr call req ierr chapter 
point point communication call inval mpireal req ierr call req status ierr rank eq call inval mpireal req ierr call req status call mpireal req ierr call req ierr call inval mpireal req ierr call req status ierr call mpireal req ierr call req status semantics nonblocking communications semantics nonblocking communication defined suitably extending definitions section 
order nonblocking communication operations ordered execution order calls initiate communication 
non overtaking requirement section extended nonblocking communication definition order 
example message ordering nonblocking operations 
call mpicommrank comm rank ierr rank eq call mpireal comm ierr call mpireal comm ierr rank eq call mpireal comm ierr call mpireal comm ierr call status call status send process zero match receive process messages sent process executes receive 
progress call mpi wait completes receive eventually terminate return matching send started send satisfied receive 
particular matching send nonblocking receive complete call executed sender complete send 
similarly call mpi wait completes send eventually return matching receive started receive satisfied send call executed complete receive 
example illustration progress semantics 

nonblocking communication call mpicommrank comm rank ierr rank eq call mpireal comm ierr call mpisend mpireal comm ierr rank eq call mpireal comm ierr call mpirecv mpireal comm ierr call status ierr code deadlock correct mpi implementation 
synchronous send process zero complete process posts matching nonblocking receive process reached completing wait call 
process zero continue execute second send allowing process complete execution 
mpi test completes receive repeatedly called arguments matching send started call eventually return flag true send satisfied receive 
mpi test completes send repeatedly called arguments matching receive started call eventually return flag true receive satisfied send 
multiple completions convenient able wait completion operations list having wait specific message 
call mpi mpi wait completion operations 
call mpi mpi wait pending operations list 
call mpi mpi complete enabled operations list 
mpi count array requests index status count list length integer inout array requests array requests array handles index index handle operation completed integer status status object status int mpi int count mpi request array requests int index mpi status status mpi count array requests index status ierror integer count array requests index status mpi status size ierror blocks operations associated active requests array completed 
operation enabled terminate arbitrarily chosen 
returns index index request array returns status status completing communication 
array indexed zero chapter 
point point communication fortran 
request allocated nonblocking communication operation deallocated request handle set mpi request null 
array requests list may contain null inactive handles 
list contains active handles list length zero entries null inactive call returns immediately index mpi undefined empty status 
execution mpi count array requests index status effect execution mpi wait array requests status value returned index value index mpi undefined 
mpi array containing active entry equivalent mpi wait 
mpi count array requests index flag status count list length integer inout array requests array requests array handles index index operation completed mpi undefined completed integer flag true operations complete logical status status object status int mpi int count mpi request array requests int index int flag mpi status status mpi count array requests index flag status ierror logical flag integer count array requests index status mpi status size ierror tests completion operations associated active handles 
case returns flag true returns index index request array returns status status operation request allocated nonblocking communication call request deallocated handle set mpi request null 
array indexed zero fortran 
case operation completed returns flag false returns value mpi undefined index status undefined 
array may contain null inactive handles 
array contains active handles call returns immediately flag true index mpi undefined empty status 
array requests contains active handles execution mpi count array requests index status effect execution mpi test array requests flag status count arbitrary order call returns flag true fail 
case index set value case set mpi undefined 
mpi array containing active entry equivalent mpi test 
rationale 
function mpi returns flag true exactly situations function mpi returns functions return case values remaining parameters 
blocking mpi 
nonblocking communication easily replaced nonblocking mpi 
relation holds pairs wait test functions defined section 
rationale 
mpi count array requests array statuses count lists length integer inout array requests array requests array handles array statuses array status objects array status int mpi int count mpi request array requests mpi status array statuses mpi count array requests array statuses ierror integer count array requests integer array statuses mpi status size ierror blocks communication operations associated active handles list complete return status operations includes case handle list active 
arrays number valid entries 
th entry array statuses set return status th operation 
requests created nonblocking communication operations deallocated corresponding handles array set mpi request null 
list may contain null inactive handles 
call sets empty status entry 
error free execution mpi count array requests array statuses effect execution mpi wait array request array statuses count arbitrary order 
mpi array length equivalent mpi wait 
communications completed call mpi fail return specific information communication 
function mpi return case error code mpi err status set error field status specific error code 
code mpi success specific communication completed specific error code failed mpi err pending failed completed 
function mpi return mpi success request error return error code failed reasons invalid arguments 
cases update error fields statuses 
rationale 
design streamlines error handling application 
application code need test single function result determine error occurred 
needs check individual status error occurred 
rationale 
chapter 
point point communication mpi count array requests flag array statuses count lists length integer inout array requests array requests array handles flag logical array statuses array status objects array status int mpi int count mpi request array requests int flag mpi status array statuses mpi count array requests flag array statuses ierror logical flag integer count array requests array statuses mpi status size ierror returns flag true communications associated active handles array completed includes case handle list active 
case status entry corresponds active handle request set status corresponding communication request allocated nonblocking communication call deallocated handle set mpi request null 
status entry corresponds null inactive handle set empty 
flag false returned request modified values status entries undefined 
local operation 
errors occurred execution mpi handled errors mpi 
mpi incount array requests outcount array indices array statuses incount length array requests integer inout array requests array requests array handles outcount number completed requests integer array indices array indices operations completed array integers array statuses array status objects operations completed array status int mpi int incount mpi request array requests int outcount int array indices mpi status array statuses mpi incount array requests outcount array indices array statuses ierror integer incount array requests outcount array indices array statuses mpi status size ierror waits operations associated active handles list completed 
returns outcount number requests list array requests completed 
returns outcount locations array array indices indices operations index array array requests array indexed 
nonblocking communication zero fortran 
returns outcount locations array array status status completed operations 
request completed allocated nonblocking communication call deallocated associated handle set mpi request null 
list contains active handles call returns immediately outcount mpi undefined 
communications completed mpi fails desirable return specific information communication 
arguments outcount array indices array statuses adjusted indicate completion communications succeeded failed 
call return error code mpi err status error field status returned set indicate success indicate specific error occurred 
call return mpi success request resulted error return error code failed reasons invalid arguments 
cases update error fields statuses 
mpi incount array requests outcount array indices array statuses incount length array requests integer inout array requests array requests array handles outcount number completed requests integer array indices array indices operations completed array integers array statuses array status objects operations completed array status int mpi int incount mpi request array requests int outcount int array indices mpi status array statuses mpi incount array requests outcount array indices array statuses ierror integer incount array requests outcount array indices array statuses mpi status size ierror behaves mpi returns immediately 
operation completed returns outcount 
active handle list returns outcount mpi undefined 
mpi local operation returns immediately mpi block communication completes passed list contains active handle 
calls fulfill fairness requirement request receive repeatedly appears list requests passed mpi mpi matching send posted receive eventually succeed send satisfied receive similarly send requests 
errors occur execution mpi handled mpi 
advice users 
mpi efficient mpi 
returns information completed communications new call required communication completes 
chapter 
point point communication server multiple clients mpi starve client 
clients send messages server service requests 
server calls mpi receive request client handles receives completed 
call mpi client starve requests client 
advice users 
advice implementors 
mpi complete pending communications possible 
advice implementors 
example client server code starvation occur 
call comm size ierr call mpicommrank comm rank ierr rank client code true 
call mpireal tag comm request ierr call request status ierr rank server code size call mpireal tag comm ierr true 
call size index status ierr call index handle message call index mpireal index tag comm index ierr example code mpi 
call comm size ierr call mpicommrank comm rank ierr rank client code true 
call mpireal tag comm request ierr call request status ierr rank server code size call mpireal tag comm requests ierr 
probe cancel true 
call size indices statuses ierr call indices call indices mpireal tag comm requests indices ierr probe cancel mpi probe mpi operations allow incoming messages checked receiving 
user decide receive information returned probe basically information returned status 
particular user may allocate memory receive buffer length probed message 
mpi cancel operation allows pending communications canceled 
required cleanup 
posting send receive ties user resources send receive buffers cancel may needed free resources gracefully 
mpi source tag comm flag status source source rank mpi source integer tag tag value mpi tag integer comm communicator handle flag logical status status object status int mpi int source int tag mpi comm comm int flag mpi status status mpi source tag comm flag status ierror logical flag integer source tag comm status mpi status size ierror mpi source tag comm flag status returns flag true message received matches pattern specified arguments source tag comm 
call matches message received call mpi recv source tag comm status executed point program returns status value returned mpi recv 
call returns flag false leaves status undefined 
mpi returns flag true content status object subsequently accessed described section find source tag length probed message 
chapter 
point point communication subsequent receive executed context source tag returned status mpi receive message matched probe intervening receive occurs probe 
receiving process multi threaded user responsibility ensure condition holds 
source argument mpi probe mpi source tag argument mpi tag probe messages arbitrary source arbitrary tag 
specific communication context provided comm argument 
necessary receive message immediately probed message may probed times received 
mpi probe source tag comm status source source rank mpi source integer tag tag value mpi tag integer comm communicator handle status status object status int mpi probe int source int tag mpi comm comm mpi status status mpi probe source tag comm status ierror integer source tag comm status mpi status size ierror mpi probe behaves mpi blocking call returns matching message 
mpi implementation mpi probe mpi needs guarantee progress call mpi probe issued process send matches probe initiated process call mpi probe return message received concurrent receive operation executed thread probing process 
similarly process busy waits mpi matching message issued call mpi eventually return flag true message received concurrent receive operation 
example blocking probe wait incoming message 
call mpicommrank comm rank ierr rank eq call mpisend comm ierr rank eq call mpisend mpireal comm ierr rank eq call comm status ierr status call mpirecv status ierr call mpirecv mpireal status ierr 
probe cancel message received right type 
example similar program previous example problem 
call mpicommrank comm rank ierr rank eq call mpisend comm ierr rank eq call mpisend mpireal comm ierr call comm status ierr status call mpirecv status ierr call mpirecv mpireal status ierr slightly modified example mpi source source argument receive calls statements labeled 
program incorrect receive operation may receive message distinct message probed preceding call mpi probe 
advice implementors 
call mpi probe source tag comm status match message received call mpi recv source tag comm status executed point 
suppose message source tag communicator tag argument probe call value mpi tag message probed earliest pending message source communicator tag case message probed earliest pending message source tag communicator message received preserve message order 
message continues earliest pending message source tag communicator received 
receive operation subsequent probe uses communicator probe uses tag source values returned probe receive message received receive operation 
advice implementors 
chapter 
point point communication mpi cancel request request communication request handle int mpi cancel mpi request request mpi cancel request ierror integer request ierror call mpi cancel marks cancellation pending nonblocking communication operation send receive 
cancel call local 
returns immediately possibly communication canceled 
necessary complete communication marked cancellation call mpi request free mpi wait mpi test derived operations 
communication marked cancellation mpi wait call communication guaranteed return irrespective activities processes mpi wait behaves local function similarly mpi test repeatedly called busy wait loop canceled communication mpi test eventually successful 
mpi cancel cancel communication uses persistent request see sec 
way requests 
successful cancellation cancels active communication request 
call mpi cancel subsequent call mpi wait mpi test request inactive activated new communication 
successful cancellation buffered send frees buffer space occupied pending message 
cancellation succeeds communication succeeds 
send marked cancellation case send completes normally case message sent received destination process send successfully canceled case part message received destination 
matching receive satisfied send 
receive marked cancellation case receive completes normally receive successfully canceled case part receive buffer altered 
matching send satisfied receive 
operation canceled information effect returned status argument operation completes communication 
mpi test cancelled status flag status status object status flag logical int mpi test cancelled mpi status status int flag mpi test cancelled status flag ierror logical flag integer status mpi status size ierror returns flag true communication associated status object canceled successfully 
case fields status count tag undefined 

persistent communication requests returns flag false 
receive operation canceled call mpi test cancelled check operation canceled checking fields return status 
advice users 
cancel expensive operation exceptionally 
advice users 
advice implementors 
send operation uses eager protocol data transferred receiver matching receive posted cancellation send may require communication intended receiver order free allocated buffers 
systems may require interrupt intended receiver 
note communication may needed implement mpi cancel local operation completion depend code executed processes 
processing required process transparent application need interrupt interrupt handler 
advice implementors 
persistent communication requests communication argument list repeatedly executed inner loop parallel computation 
situation may possible optimize communication binding list communication arguments persistent communication request repeatedly request initiate complete messages 
persistent request created thought communication port half channel 
provide full functionality conventional channel binding send port receive port 
construct allows reduction overhead communication process communication controller overhead communication communication controller 
necessary messages sent persistent request received receive operation persistent request vice versa 
persistent communication request created calls 
calls involve communication 
mpi send init buf count datatype dest tag comm request buf initial address send buffer choice count number elements sent integer datatype type element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi send init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request chapter 
point point communication mpi send init buf count datatype dest tag comm request ierror type 
buf integer request count datatype dest tag comm request ierror creates persistent communication request standard mode send operation binds arguments send operation 
mpi init buf count datatype dest tag comm request buf initial address send buffer choice count number elements sent integer datatype type element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request mpi init buf count datatype dest tag comm request ierror type 
buf integer request count datatype dest tag comm request ierror creates persistent communication request buffered mode send 
mpi init buf count datatype dest tag comm request buf initial address send buffer choice count number elements sent integer datatype type element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request mpi init buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror creates persistent communication object synchronous mode send operation 

persistent communication requests mpi init buf count datatype dest tag comm request buf initial address send buffer choice count number elements sent integer datatype type element handle dest rank destination integer tag message tag integer comm communicator handle request communication request handle int mpi init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request mpi init buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror creates persistent communication object ready mode send operation 
mpi recv init buf count datatype source tag comm request buf initial address receive buffer choice count number elements received integer datatype type element handle source rank source mpi source integer tag message tag mpi tag integer comm communicator handle request communication request handle int mpi recv init void buf int count mpi datatype datatype int source int tag mpi comm comm mpi request request mpi recv init buf count datatype source tag comm request ierror type 
buf integer count datatype source tag comm request ierror creates persistent communication request receive operation 
argument buf marked user gives permission write receive buffer passing argument mpi recv init 
persistent communication request inactive created active communication attached request 
communication send receive uses persistent request initiated function mpi start 
chapter 
point point communication mpi start request inout request communication request handle int mpi start mpi request request mpi start request ierror integer request ierror argument request handle returned previous calls 
associated request inactive 
request active call 
request send ready mode matching receive posted call 
communication buffer accessed call operation completes 
call local similar semantics nonblocking communication operations described section 
call mpi start request created mpi send init starts communication manner call mpi call mpi start request created mpi init starts communication manner call mpi 
mpi count array requests count list length integer inout array requests array requests array handle int mpi int count mpi request array requests mpi count array requests ierror integer count array requests ierror start communications associated requests array requests 
call mpi count array requests effect calls mpi start array requests executed count arbitrary order 
communication started call mpi start mpi completed call mpi wait mpi test derived functions described section 
request inactive successful completion call 
request deallocated activated anew mpi start mpi call 
persistent request deallocated call mpi request free section 
call mpi request free occur point program persistent request created 
request deallocated inactive 
active receive requests freed 
possible check receive completed 
preferable general free requests inactive 
rule followed functions described section invoked sequence form create start complete free indicates zero repetitions 
communication object concurrent threads user responsibility coordinate calls correct sequence obeyed 

send receive send operation initiated mpi start matched receive operation likewise receive operation initiated mpi start receive messages generated send operation 
send receive send receive operations combine call sending message destination receiving message process 
source destination possibly 
send receive operation useful executing shift operation chain processes 
blocking sends receives shift needs order sends receives correctly example processes send receive odd processes receive send prevent cyclic dependencies may lead deadlock 
send receive operation communication subsystem takes care issues 
send receive operation conjunction functions described chapter order perform shifts various logical topologies 
send receive operation useful implementing remote procedure calls 
message sent send receive operation received regular receive operation probed probe operation send receive operation receive message sent regular send operation 
mpi sendbuf sendcount sendtype dest recvbuf recvcount recvtype source comm status sendbuf initial address send buffer choice sendcount number elements send buffer integer sendtype type elements send buffer handle dest rank destination integer send tag integer recvbuf initial address receive buffer choice recvcount number elements receive buffer integer recvtype type elements receive buffer handle source rank source integer receive tag integer comm communicator handle status status object status int mpi void sendbuf int sendcount mpi datatype sendtype int dest int void recvbuf int recvcount mpi datatype recvtype int source mpi datatype mpi comm comm mpi status status mpi sendbuf sendcount sendtype dest recvbuf recvcount recvtype source comm status ierror chapter 
point point communication type 
sendbuf recvbuf integer sendcount sendtype dest recvcount recvtype source recv tag comm status mpi status size ierror execute blocking send receive operation 
send receive communicator possibly different tags 
send buffer receive buffers disjoint may different lengths datatypes 
mpi replace buf count datatype dest source comm status inout buf initial address send receive buffer choice count number elements send receive buffer integer datatype type elements send receive buffer handle dest rank destination integer send message tag integer source rank source integer receive message tag integer comm communicator handle status status object status int mpi replace void buf int count mpi datatype datatype int dest int int source int mpi comm comm mpi status status mpi replace buf count datatype dest source comm status ierror type 
buf integer count datatype dest source comm status mpi status size ierror execute blocking send receive 
buffer send receive message sent replaced message received 
semantics send receive operation obtained caller forked concurrent threads execute send execute receive followed join threads 
advice implementors 
additional intermediate buffering needed replace variant 
advice implementors 
null processes instances convenient specify dummy source destination communication 
simplifies code needed dealing boundaries example case non circular shift done calls send receive 
special value mpi proc null rank source destination argument required call 
communication process mpi proc null 
derived datatypes effect 
send mpi proc null succeeds returns soon possible 
receive mpi proc null succeeds returns soon possible modifications receive buffer 
receive source mpi proc null executed status object returns source mpi proc null tag mpi tag count 
derived datatypes point point communication involved contiguous buffers containing sequence elements type 
constraining accounts 
wants pass messages contain values different datatypes integer count followed sequence real numbers wants send noncontiguous data sub block matrix 
solution pack noncontiguous data contiguous buffer sender site unpack back receiver site 
disadvantage requiring additional memory memory copy operations sites communication subsystem scatter gather capabilities 
mpi provides mechanisms specify general mixed noncontiguous communication buffers 
implementation decide data packed contiguous buffer transmitted collected directly resides 
general mechanisms provided allow transfer directly copying objects various shape size 
assumed mpi library cognizant objects declared host language 
wants transfer structure array section necessary provide mpi definition communication buffer mimics definition structure array section question 
facilities library designers define communication functions transfer objects defined host language decoding definitions available symbol table dope vector 
higher level communication functions part mpi 
general communication buffers specified replacing basic datatypes far derived datatypes constructed basic datatypes constructors described section 
methods constructing derived datatypes applied recursively 
general datatype opaque object specifies things ffl sequence basic datatypes ffl sequence integer byte displacements displacements required positive distinct increasing order 
order items need coincide order store item may appear 
call pair sequences sequence pairs type map 
sequence basic datatypes displacements ignored type signature datatype 
typemap type disp type gamma disp gamma type map type basic types disp displacements 
ftype type gamma associated type signature 
type map base address buf specifies communication buffer communication buffer consists entries chapter 
point point communication th entry address buf disp type type message assembled communication buffer consist values types defined 
handle general datatype argument send receive operation basic datatype argument 
operation mpi send buf datatype 
send buffer defined base address buf general datatype associated datatype generate message type signature determined datatype argument 
mpi recv buf datatype 
receive buffer defined base address buf general datatype associated datatype 
general datatypes send receive operations 
discuss sec 
case second argument count value 
basic datatypes section particular cases general datatype predefined 
mpi int predefined handle datatype type map int entry type int displacement zero 
basic datatypes similar 
extent datatype defined span byte byte occupied entries datatype rounded satisfy alignment requirements 
typemap type disp type gamma disp gamma lb typemap min disp ub typemap max disp sizeof type ffl extent typemap ub typemap gamma lb typemap type requires alignment byte address multiple ffl nonnegative increment needed round extent typemap multiple max complete definition extent page 
example assume type double char double displacement zero followed char displacement 
assume furthermore doubles strictly aligned addresses multiples 
extent datatype rounded multiple 
datatype consists character immediately followed double extent 
rationale 
definition extent motivated assumption amount padding added structure array structures needed fulfill alignment constraints 
explicit control extent provided section 
explicit control needed cases assumption hold example union types 
rationale 
datatype constructors contiguous simplest datatype constructor mpi type contiguous allows replication datatype contiguous locations 

derived datatypes mpi type contiguous count oldtype newtype count replication count nonnegative integer oldtype old datatype handle newtype new datatype handle int mpi type contiguous int count mpi datatype oldtype mpi datatype newtype mpi type contiguous count oldtype newtype ierror integer count oldtype newtype ierror newtype datatype obtained concatenating count copies oldtype 
concatenation defined extent size concatenated copies 
example oldtype type map double char extent count 
type map datatype returned newtype double char double char double char alternating double char elements displacements 
general assume type map oldtype type disp type gamma disp gamma extent ex 
newtype type map count delta entries defined type disp type gamma disp gamma type disp ex type gamma disp gamma ex type disp ex delta count gamma type gamma disp gamma ex delta count gamma vector function mpi type vector general constructor allows replication datatype locations consist equally spaced blocks 
block obtained concatenating number copies old datatype 
spacing blocks multiple extent old datatype 
mpi type vector count blocklength stride oldtype newtype count number blocks nonnegative integer blocklength number elements block nonnegative integer stride number elements start block integer oldtype old datatype handle newtype new datatype handle int mpi type vector int count int blocklength int stride mpi datatype oldtype mpi datatype newtype chapter 
point point communication mpi type vector count blocklength stride oldtype newtype ierror integer count blocklength stride oldtype newtype ierror example assume oldtype type map double char extent 
call mpi type vector oldtype newtype create datatype type map double char double char double char double char double char double char blocks copies old type stride elements delta bytes blocks 
example call mpi type vector oldtype newtype create datatype double char double gamma char gamma double gamma char gamma general assume oldtype type map type disp type gamma disp gamma extent ex 
bl blocklength 
newly created datatype type map count delta bl delta entries type disp type gamma disp gamma type disp ex type gamma disp gamma ex type disp bl gamma delta ex type gamma disp gamma bl gamma delta ex type disp stride delta ex type gamma disp gamma stride delta ex type disp stride bl gamma delta ex type gamma disp gamma stride bl gamma delta ex type disp stride delta count gamma delta ex type gamma disp gamma stride delta count gamma delta ex type disp stride delta count gamma bl gamma delta ex type gamma disp gamma stride delta count gamma bl gamma delta ex call mpi type contiguous count oldtype newtype equivalent call mpi type vector count oldtype newtype call mpi type vector count oldtype newtype arbitrary 

derived datatypes function mpi type identical mpi type vector stride bytes elements 
types vector constructors illustrated sec 

stands heterogeneous 
mpi type count blocklength stride oldtype newtype count number blocks nonnegative integer blocklength number elements block nonnegative integer stride number bytes start block integer oldtype old datatype handle newtype new datatype handle int mpi type int count int blocklength mpi aint stride mpi datatype oldtype mpi datatype newtype mpi type count blocklength stride oldtype newtype ierror integer count blocklength stride oldtype newtype ierror assume oldtype type map type disp type gamma disp gamma extent ex 
bl blocklength 
newly created datatype type map count delta bl delta entries type disp type gamma disp gamma type disp ex type gamma disp gamma ex type disp bl gamma delta ex type gamma disp gamma bl gamma delta ex type disp stride type gamma disp gamma stride type disp stride bl gamma delta ex type gamma disp gamma stride bl gamma delta ex type disp stride delta count gamma type gamma disp gamma stride delta count gamma type disp stride delta count gamma bl gamma delta ex type gamma disp gamma stride delta count gamma bl gamma delta ex chapter 
point point communication indexed function mpi type indexed allows replication old datatype sequence blocks block concatenation old datatype block contain different number copies different displacement 
block displacements multiples old type extent 
mpi type indexed count array array displacements oldtype newtype count number blocks number entries array displacements array nonnegative integer array number elements block array nonnegative integers array displacements displacement block multiples oldtype extent array integer oldtype old datatype handle newtype new datatype handle int mpi type indexed int count int array int array displacements mpi datatype oldtype mpi datatype newtype mpi type indexed count array array displacements oldtype newtype ierror integer count array array displacements oldtype newtype ierror example oldtype type map double char extent 

call mpi type indexed oldtype newtype returns datatype type map double char double char double char double char copies old type starting displacement copy starting displacement 
general assume oldtype type map type disp type gamma disp gamma extent ex 
array blocklength argument array displacements argument 
newly created datatype delta count gamma entries type disp delta ex type gamma disp gamma delta ex type disp gamma delta ex type gamma disp gamma gamma delta ex 
derived datatypes type disp count gamma delta ex type gamma disp gamma count gamma delta ex type disp count gamma count gamma gamma delta ex type gamma disp gamma count gamma count gamma gamma delta ex call mpi type vector count blocklength stride oldtype newtype equivalent call mpi type indexed count oldtype newtype delta stride count gamma blocklength count gamma function mpi type identical mpi type indexed block displacements array displacements specified bytes multiples oldtype extent 
mpi type count array array displacements oldtype newtype count number blocks number entries array displacements array integer array number elements block array nonnegative integers array displacements byte displacement block array integer oldtype old datatype handle newtype new datatype handle int mpi type int count int array mpi aint array displacements mpi datatype oldtype mpi datatype newtype mpi type count array array displacements oldtype newtype ierror integer count array array displacements oldtype newtype ierror assume oldtype type map type disp type gamma disp gamma extent ex 
array blocklength argument array displacements argument 
newly created datatype type map delta count gamma entries type disp type gamma disp gamma chapter 
point point communication type disp gamma delta ex type gamma disp gamma gamma delta ex type disp count gamma type gamma disp gamma count gamma type disp count gamma count gamma gamma delta ex type gamma disp gamma count gamma count gamma gamma delta ex struct mpi type struct general type constructor 
generalizes previous allows block consist replications different datatypes 
mpi type struct count array array displacements array types newtype count number blocks integer number entries arrays array types array displacements array array blocklength number elements block array integer array displacements byte displacement block array integer array types type elements block array handles datatype objects newtype new datatype handle int mpi type struct int count int array mpi aint array displacements mpi datatype array types mpi datatype newtype mpi type struct count array array displacements array types newtype ierror integer count array array displacements array types newtype ierror example type type map double char extent 
mpi float type mpi char 
call mpi type struct newtype returns datatype type map float float double char char char char copies mpi float starting followed copy type starting followed copies mpi char starting 
assume float occupies bytes 

derived datatypes general array types argument handle typemap type disp type gamma disp gamma extent ex array blocklength argument array displacements argument 
count argument 
newly created datatype type map gamma delta entries type disp type disp type disp gamma delta ex type disp gamma delta ex type gamma disp gamma gamma type gamma gamma gamma disp gamma gamma gamma gamma type gamma disp gamma gamma gamma gamma delta ex gamma type gamma gamma gamma disp gamma gamma gamma gamma gamma gamma delta ex gamma call mpi type count oldtype newtype equivalent call mpi type struct count newtype entry equal oldtype 
address extent functions displacements general datatype relative initial buffer address 
absolute addresses substituted displacements treat displacements relative address zero start address space 
initial address zero indicated constant mpi bottom 
datatype specify absolute address entries communication buffer case buf argument passed value mpi bottom 
address location memory invoking function mpi address 
mpi address location address location location caller memory choice address address location integer int mpi address void location mpi aint address mpi address location address ierror type 
location integer address ierror returns byte address location 
example mpi address array 
chapter 
point point communication real integer diff call ierror call ierror diff value diff values implementation dependent 
advice users 
users may tempted avoid usage mpi address rely availability address operator 
note pointer address 
ansi require value pointer pointer cast int absolute address object pointed commonly case 
furthermore referencing may unique definition machines segmented address space 
mpi address variables guarantees portability machines 
advice users 
auxiliary functions provide useful information derived datatypes 
mpi type extent datatype extent datatype datatype handle extent datatype extent integer int mpi type extent mpi datatype datatype mpi aint extent mpi type extent datatype extent ierror integer datatype extent ierror returns extent datatype extent defined page 
mpi type size datatype size datatype datatype handle size datatype size integer int mpi type size mpi datatype datatype int size mpi type size datatype size ierror integer datatype size ierror mpi type size returns total size bytes entries type signature associated datatype total size data message created datatype 
entries occur multiple times datatype counted multiplicity 
lower bound upper bound markers convenient define explicitly lower bound upper bound type map override definition page 
allows define datatype 
derived datatypes holes datatype entries extend upper bound lower bound 
examples usage provided sec 

user may want alignment rules compute upper bounds extents 
compiler may allow user default alignment rules structures program 
user specify explicitly bounds datatypes match structures 
achieve add additional pseudo datatypes mpi lb mpi ub respectively mark lower bound upper bound datatype 
pseudo datatypes occupy space extent mpi lb extent mpi ub 
affect size count datatype affect content message created datatype 
affect definition extent datatype affect outcome replication datatype datatype constructor 
example mpi lb mpi int mpi ub 
call mpi type struct type creates new datatype extent included contains integer displacement 
datatype defined sequence lb int ub type replicated twice call mpi type contiguous type type newly created type described sequence lb int int ub 
entry type ub deleted entry type ub higher displacement entry type lb deleted entry type lb lower displacement 
general typemap type disp type gamma disp gamma lower bound typemap defined lb typemap min disp entry basic type lb min type lbg similarly upper bound typemap defined ub typemap max disp sizeof type ffl entry basic type ub max type extent typemap ub typemap gamma lb typemap type requires alignment byte address multiple ffl nonnegative increment needed round extent typemap multiple max formal definitions various datatype constructors apply amended definition extent 
functions finding lower bound upper bound datatype 
mpi type lb datatype displacement datatype datatype handle displacement displacement lower bound origin bytes integer int mpi type lb mpi datatype datatype mpi aint displacement chapter 
point point communication mpi type lb datatype displacement ierror integer datatype displacement ierror mpi type ub datatype displacement datatype datatype handle displacement displacement upper bound origin bytes integer int mpi type ub mpi datatype datatype mpi aint displacement mpi type ub datatype displacement ierror integer datatype displacement ierror commit free datatype object committed communication 
committed datatype argument datatype constructors 
need commit basic datatypes 
pre committed 
mpi type commit datatype inout datatype datatype committed handle int mpi type commit mpi datatype datatype mpi type commit datatype ierror integer datatype ierror commit operation commits datatype formal description communication buffer content buffer 
datatype committed repeatedly reused communicate changing content buffer content different buffers different starting addresses 
advice implementors 
system may compile commit time internal representation datatype facilitates communication change compacted representation flat representation datatype select convenient transfer mechanism 
advice implementors 
mpi type free datatype inout datatype datatype freed handle int mpi type free mpi datatype datatype mpi type free datatype ierror integer datatype ierror 
derived datatypes marks datatype object associated datatype deallocation sets datatype mpi datatype null 
communication currently datatype complete normally 
derived datatypes defined freed datatype affected 
example code fragment gives examples mpi type commit 
integer type type call mpireal type ierr new type object created call type ierr type communication type type type communication 
handle object type call mpireal type ierr new uncommitted type object created call type ierr type anew communication freeing datatype affect datatype built freed datatype 
system behaves input datatype arguments derived datatype constructors passed value 
advice implementors 
implementation may keep count active communications datatype order decide free 
may implement constructors derived datatypes keep pointers datatype arguments copying 
case needs keep track active datatype definition order know datatype object freed 
advice implementors 
general datatypes communication handles derived datatypes passed communication call datatype argument required 
call form mpi send buf count datatype count interpreted call passed new datatype concatenation count copies datatype 
mpi send buf count datatype dest tag comm equivalent count datatype newtype newtype mpisend buf newtype dest tag comm 
similar statements apply communication functions count datatype argument 
suppose send operation mpi send buf count datatype dest tag comm executed datatype type map type disp type gamma disp gamma extent extent 
empty entries pseudo type mpi ub mpi lb listed type map affect value extent 
send operation sends delta count chapter 
point point communication entries entry delta location addr buf extent delta disp type type count gamma gamma 
entries need contiguous distinct order arbitrary 
variable stored address addr calling program type matches type type matching defined section 
message sent contains delta count entries entry delta type type similarly suppose receive operation mpi recv buf count datatype source tag comm status executed datatype type map type disp type gamma disp gamma extent extent 
empty entries pseudo type mpi ub mpi lb listed type map affect value extent 
receive operation receives delta count entries entry delta location buf extent delta disp type type incoming message consists elements delta count delta th element message type matches type type matching defined type signature corresponding datatypes sequence basic type components 
type matching depend aspects datatype definition displacements layout memory intermediate types 
example example shows type matching defined terms basic types derived type consists 
call mpireal type 
call mpireal type 
call type type 
call mpisend mpireal 
call mpisend type 
call mpisend type 
call mpisend type 
call mpirecv mpireal 
call mpirecv type 
call mpirecv type 
call mpirecv type 
sends matches receives 
datatype may specify overlapping entries 
datatype receive operation erroneous 
erroneous actual message received short write entry 
datatype may specify overlapping entries 
datatype receive operation part receive buffer written receive operation call erroneous 
suppose mpi recv buf count datatype dest tag comm status executed datatype type map type disp type gamma disp gamma 
derived datatypes received message need fill receive buffer need fill number locations multiple number basic elements received count delta number basic elements received retrieved status query function mpi get elements 
mpi get elements status datatype count status return status receive operation status datatype datatype receive operation handle count number received basic elements integer int mpi get elements mpi status status mpi datatype datatype int count mpi get elements status datatype count ierror integer status mpi status size datatype count ierror previously defined function mpi get count sec 
different behavior 
returns number top level entries received number copies type datatype 
previous example mpi get count may return integer value count 
mpi get count returns number basic elements received value returned mpi get elements delta number basic elements received multiple receive operation received integral number datatype copies mpi get count returns value mpi undefined 
example usage mpi get count mpi get element 
call mpireal type ierr call type ierr 
call mpicommrank comm rank ierr rank eq call mpisend mpireal comm ierr call mpisend mpireal comm ierr call mpirecv type comm stat ierr call stat type ierr returns call stat type ierr returns call mpirecv type comm stat ierr call stat type ierr returns call stat type ierr returns function mpi get elements probe find number elements probed message 
note functions mpi get count mpi get elements return values basic datatypes 
rationale 
extension definition mpi get count natural expect function return value count argument chapter 
point point communication receive buffer filled 
datatype represents basic unit data wants transfer example record array records structures 
able find components received bothering divide number elements component 
occasions datatype define complex layout data receiver memory represent basic unit data transfers 
cases needs function mpi get elements 
rationale 
advice implementors 
definition implies receive change value storage outside entries defined compose communication buffer 
particular definition implies padding space structure modified structure copied process 
prevent obvious optimization copying structure padding contiguous block 
implementation free optimization impact outcome computation 
user force optimization explicitly including padding part message 
advice implementors 
correct addresses successively declared variables fortran necessarily stored contiguous locations 
care exercised displacements cross variable 
machines segmented address space addresses unique address arithmetic peculiar properties 
addresses displacements relative start address mpi bottom restricted 
variables belong sequential storage belong array common block fortran structure valid addresses defined recursively follows 
function mpi address returns valid address passed argument variable calling program 

buf argument communication function evaluates valid address passed argument variable calling program 

valid address integer valid address provided sequential storage 

valid address mpi bottom valid address 
correct program uses valid addresses identify locations entries communication buffers 
furthermore valid addresses integer difference computed sequential storage 
arithmetic operations meaningfully executed addresses 
rules impose constraints derived datatypes long define communication buffer wholly contained sequential storage 
construction communication buffer contains variables sequential storage obey certain restrictions 
basically communication buffer variables sequential storage specifying communication call buf mpi bottom count datatype argument displacements valid absolute addresses 

derived datatypes advice users 
expected mpi implementations able detect erroneous bound displacements overflow user address space mpi call may know extent arrays records host program 
advice users 
advice implementors 
need distinguish absolute addresses relative displacements machine contiguous address space mpi bottom zero addresses displacements integers 
machines distinction required addresses recognized expressions involve mpi bottom 
advice implementors 
note fortran fortran integers may small contain address bit integers machine bit pointers 
fortran implementations may restrict absolute addresses part process memory restrict relative displacements subranges process memory constrained size fortran integers 
examples examples illustrate derived datatypes 
example send receive section array 
real integer myrank ierr integer status extract section store 
call mpicommrank mpicommworld myrank call mpireal ierr create datatype section call mpireal ierr create datatype section call ierr create datatype entire section call ierr call ierr call myrank mpireal myrank mpicommworld status ierr example copy strictly lower triangular part matrix 
chapter 
point point communication real integer disp ltype myrank ierr integer status copy lower triangular part array lower triangular part array call mpicommrank mpicommworld myrank compute start size column disp block create datatype lower triangular part call block disp mpireal ltype ierr call ltype ierr call ltype myrank ltype myrank mpicommworld status ierr example transpose matrix 
real integer row myrank ierr integer status transpose matrix call mpicommrank mpicommworld myrank call mpireal ierr create datatype row call mpireal row ierr create datatype matrix row major order call row ierr call ierr send matrix row major order receive column major order call myrank mpireal myrank mpicommworld status ierr example approach transpose problem real 
derived datatypes integer disp type row row integer myrank ierr integer status call mpicommrank mpicommworld myrank transpose matrix call mpireal ierr create datatype row call mpireal row ierr create datatype row extent real number disp disp type row type call disp type row ierr call row ierr send rows receive column major order call row myrank mpireal myrank mpicommworld status ierr example manipulate array structures 
struct int class particle class double particle coordinates char additional information struct particle int dest rank mpicomm comm build datatype describing structure mpidatatype mpidatatype type mpiint int chapter 
point point communication disp int base compute displacements structure components particle disp particle disp particle disp base disp disp base disp type compiler padding mysterious ways may safer mpidatatype type mpiint int disp compute displacements structure components particle disp particle disp particle disp particle disp base disp disp base build datatype describing structure disp type send entire array mpisend particle dest tag comm send entries class zero particles preceded number entries mpidatatype datatype describing particles class zero needs recomputed 
derived datatypes classes change mpidatatype int int mpidatatype compute displacements class zero particles particle class create datatype class zero particles prepend particle count particle mpiint mpisend dest tag comm probably efficient way defining consecutive particles index zero handled block particle index particle index chapter 
point point communication send coordinates entries mpidatatype allpairs datatype pairs coordinates computed subtracting address particle address particle allpairs allpairs mpisend particle allpairs dest tag comm alternative solution mpidatatype datatype pair coordinates extent particle entry disp mpidatatype type int particle disp particle disp particle disp base disp disp base disp type mpisend particle dest tag comm example manipulations previous example absolute addresses datatypes 
struct int class double char struct particle 
derived datatypes build datatype describing array entry mpidatatype mpidatatype type mpiint int block disp particle disp particle disp particle disp block disp type describes array entry absolute addresses send entire array mpisend dest tag comm send entries class zero preceded number entries mpidatatype int int mpidatatype particle index particle index describe particles class zero absolute addresses chapter 
point point communication prepend particle count mpiint mpisend dest tag comm example handling unions 
union int float fval int entries identical type variable keeps track current type mpidatatype type int disp mpidatatype compute mpi datatype possible union type assume values left aligned union storage 
disp disp type type mpiint disp type type disp type actual communication mpisend dest tag comm 
pack unpack pack unpack existing communication libraries provide pack unpack functions sending noncontiguous data 
user explicitly packs data contiguous buffer sending contiguous buffer receiving 
derived datatypes described section allow cases avoid explicit packing unpacking 
user specifies layout data sent received communication library directly accesses noncontiguous buffer 
pack unpack routines provided compatibility previous libraries 
provide functionality available mpi 
instance message received parts receive operation done part may depend content part 
outgoing messages may explicitly buffered user supplied space overriding system buffering policy 
availability pack unpack operations facilitates development additional communication libraries layered top mpi 
mpi pack inbuf incount datatype position comm inbuf input buffer start choice incount number input data items integer datatype datatype input data item handle output buffer start choice output buffer size bytes integer inout position current position buffer bytes integer comm communicator packed message handle int mpi pack void inbuf int incount mpi datatype datatype void int int position mpi comm comm mpi pack inbuf incount datatype position comm ierror type 
inbuf integer incount datatype position comm ierror packs message send buffer specified inbuf incount datatype buffer space specified outcount 
input buffer communication buffer allowed mpi send 
output buffer contiguous storage area containing bytes starting address length counted bytes elements communication buffer message type mpi packed 
input value position location output buffer packing 
position incremented size packed message output value position location output buffer locations occupied packed message 
comm argument communicator subsequently sending packed message 
chapter 
point point communication mpi unpack inbuf position outcount datatype comm inbuf input buffer start choice size input buffer bytes integer inout position current position bytes integer output buffer start choice outcount number items unpacked integer datatype datatype output data item handle comm communicator packed message handle int mpi unpack void inbuf int int position void int outcount mpi datatype datatype mpi comm comm mpi unpack inbuf position outcount datatype comm ierror type 
inbuf integer position outcount datatype comm ierror message receive buffer specified outcount datatype buffer space specified inbuf 
output buffer communication buffer allowed mpi recv 
input buffer contiguous storage area containing bytes starting address inbuf 
input value position location input buffer occupied packed message 
position incremented size packed message output value position location input buffer locations occupied message unpacked 
comm communicator receive packed message 
advice users 
note difference mpi recv mpi unpack mpi recv count argument specifies maximum number items received 
actual number items received determined length incoming message 
mpi unpack count argument specifies actual number items unpacked size corresponding message increment position 
reason change incoming message size predetermined user decides unpack easy determine message size number items unpacked 
fact heterogeneous system number may determined priori 
advice users 
understand behavior pack unpack convenient think data part message sequence obtained concatenating successive values sent message 
pack operation stores sequence buffer space sending message buffer 
unpack operation retrieves sequence buffer space receiving message buffer 
helpful think internal fortran files similar function 
messages successively packed packing unit 
effected successive related calls mpi pack call provides position successive call inputs value position output previous call values outcount comm 
packing unit contains 
pack unpack equivalent information stored message send call send buffer concatenation individual send buffers 
packing unit sent type mpi packed 
point point collective communication function move sequence bytes forms packing unit process 
packing unit received receive operation datatype type matching rules relaxed messages sent type mpi packed 
message sent type including mpi packed received type mpi packed 
message unpacked calls mpi unpack 
packing unit message created regular typed send unpacked successive messages 
effected successive related calls mpi unpack call provides position successive call inputs value position output previous call values inbuf comm 
concatenation packing units necessarily packing unit substring packing unit necessarily packing unit 
concatenate packing units unpack result packing unit unpack substring packing unit separate packing unit 
packing unit created related sequence pack calls regular send unpacked unit sequence related unpack calls 
rationale 
restriction atomic packing unpacking packing units allows implementation add head packing units additional information description sender architecture type conversion heterogeneous environment rationale 
call allows user find space needed pack message manage space allocation buffers 
mpi pack size incount datatype comm size incount count argument packing call integer datatype datatype argument packing call handle comm communicator argument packing call handle size upper bound size packed message bytes integer int mpi pack size int incount mpi datatype datatype mpi comm comm int size mpi pack size incount datatype comm size ierror integer incount datatype comm size ierror call mpi pack size incount datatype comm size returns size upper bound increment position effected call mpi pack inbuf incount datatype outcount position comm 
chapter 
point point communication rationale 
call returns upper bound exact bound exact amount space needed pack message may depend context message packed packing unit may take space 
rationale 
example example mpi pack 
int position char buff 
mpicommrank mpicommworld myrank myrank sender code position mpiint buff position mpicommworld mpiint buff position mpicommworld mpisend buff position mpicommworld receiver code mpirecv mpiint mpicommworld example elaborate example 
int position float char buff 
mpicommrank mpicommworld myrank myrank sender code int len disp mpidatatype type newtype build datatype followed len len disp disp 
pack unpack type mpiint type len disp type newtype newtype pack followed position newtype buff position mpicommworld send mpisend buff position mpicommworld replace lines mpisend newtype mpicommworld myrank receiver code status receive mpirecv buff status unpack position buff position mpiint mpicommworld unpack buff position mpicommworld example process sends count followed count characters root root concatenate characters string 
int count gsize counts displs position char chr rbuf 
comm gsize mpicommrank comm myrank chapter 
point point communication allocate local pack buffer mpiint comm count char malloc pack count followed count characters position count mpiint position comm chr count position comm myrank root gather root sizes packed messages position mpiint null null null root comm gather root packed messages buf position null null null null root comm root code gather sizes packed messages position mpiint counts mpiint root comm gather packed messages displs gsize displs displs counts gsize counts gsize rbuf char malloc char malloc position rbuf counts displs root comm unpack messages concatenate strings gsize position rbuf displs displs position count mpiint comm rbuf displs displs position count comm count chapter collective communication overview collective communication defined communication involves group processes 
functions type provided mpi ffl barrier synchronization group members sec 

ffl broadcast member members group sec 

shown 
ffl gather data group members member sec 

shown 
ffl scatter data member members group sec 

shown 
ffl variation gather members group receive result sec 

shown 
ffl scatter gather data members members group called complete exchange sec 

shown 
ffl global reduction operations sum max min user defined functions result returned group members variation result returned member sec 

ffl combined reduction scatter operation sec 

ffl scan members group called prefix sec 

collective operation executed having processes group call communication routine matching arguments 
syntax semantics collective operations defined consistent syntax semantics point point operations 
general datatypes allowed match sending receiving processes specified chapter 
key arguments communicator defines group participating processes provides context operation 
collective routines broadcast gather single originating receiving process 
processes called root 
arguments collective functions chapter 
collective communication scatter gather data broadcast collective move functions illustrated group processes 
case row boxes represents data locations process 
broadcast initially just process contains data broadcast processes contain 

overview specified significant root ignored participants root 
reader referred chapter information concerning communication buffers general datatypes type matching rules chapter information define groups create communicators 
type matching conditions collective operations strict corresponding conditions sender receiver point point 
collective operations amount data sent exactly match amount data specified receiver 
distinct type maps layout memory see sec 
sender receiver allowed 
collective routine calls required return soon participation collective communication complete 
completion call indicates caller free access locations communication buffer 
indicate processes group completed started operation indicated description operation 
collective communication call may may effect synchronizing calling processes 
statement excludes course barrier function 
collective communication calls may communicators point point communication mpi guarantees messages generated behalf collective communication calls confused messages generated point point communication 
detailed discussion correct collective routines sec 

rationale 
equal data restriction type matching avoid complexity providing facility analogous status argument mpi recv discovering amount data sent 
collective routines require array status values 
statements synchronization allow variety implementations collective functions 
collective operations accept message tag argument 
revisions mpi define non blocking collective functions tags similar mechanism need added allow dis multiple pending collective operations 
rationale 
advice users 
dangerous rely synchronization side effects collective operations program correctness 
example particular implementation may provide broadcast routine side effect synchronization standard require program relies portable 
hand correct portable program allow fact collective call may synchronizing 
rely synchronization side effect program allow 
issues discussed sec 

advice users 
advice implementors 
vendors may write optimized collective routines matched architectures complete library collective communication routines written entirely mpi point point communication functions auxiliary functions 
implementing top point point hidden special communicator created collective operation avoid interference going point point communication time collective call 
discussed sec 

advice implementors 
chapter 
collective communication communicator argument key concept collective functions group participating processes 
routines group identifier explicit argument 
communicator argument 
purposes chapter communicator thought group identifier linked context 
inter communicator communicator spans groups allowed argument collective function 
barrier synchronization mpi barrier comm comm communicator handle int mpi barrier mpi comm comm mpi barrier comm ierror integer comm ierror mpi barrier blocks caller group members called 
call returns process group members entered call 
broadcast mpi bcast buffer count datatype root comm inout buffer starting address buffer choice count number entries buffer integer datatype data type buffer handle root rank broadcast root integer comm communicator handle int mpi bcast void buffer int count mpi datatype datatype int root mpi comm comm mpi bcast buffer count datatype root comm ierror type 
buffer integer count datatype root comm ierror mpi bcast broadcasts message process rank root processes group included 
called members group arguments comm root 
return contents root communication buffer copied processes 
general derived datatypes allowed datatype 
type signature count datatype process equal type signature count datatype root 

gather implies amount data sent equal amount received pairwise process root 
mpi bcast data movement collective routines restriction 
distinct type maps sender receiver allowed 
example mpi bcast example broadcast ints process process group 
mpicomm comm int array int root 
array mpiint root comm example code fragments assume variables comm assigned appropriate values 
gather mpi gather sendbuf sendcount sendtype recvbuf recvcount recvtype root comm sendbuf starting address send buffer choice sendcount number elements send buffer integer sendtype data type send buffer elements handle recvbuf address receive buffer choice significant root recvcount number elements single receive integer significant root recvtype data type recv buffer elements significant root handle root rank receiving process integer comm communicator handle int mpi gather void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype int root mpi comm comm mpi gather sendbuf sendcount sendtype recvbuf recvcount recvtype root comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype root comm ierror process root process included sends contents send buffer root process 
root process receives messages stores rank order 
outcome chapter 
collective communication processes group including root process executed call mpi send sendbuf sendcount sendtype root root executed calls mpi recv recvbuf delta recvcount delta extent recvtype recvcount recvtype extent recvtype type extent obtained call mpi type extent 
alternative description messages sent processes group concatenated rank order resulting message received root call mpi recv recvbuf recvcount deltan recvtype 
receive buffer ignored non root processes 
general derived datatypes allowed sendtype recvtype 
type signature sendcount sendtype process equal type signature recvcount recvtype root 
implies amount data sent equal amount data received pairwise process root 
distinct type maps sender receiver allowed 
arguments function significant process root processes arguments sendbuf sendcount sendtype root comm significant 
arguments root comm identical values processes 
specification counts types cause location root written 
call erroneous 
note recvcount argument root indicates number items receives process total number items receives 

gather mpi sendbuf sendcount sendtype recvbuf recvcounts displs recvtype root comm sendbuf starting address send buffer choice sendcount number elements send buffer integer sendtype data type send buffer elements handle recvbuf address receive buffer choice significant root recvcounts integer array length group size containing number elements received process significant root displs integer array length group size 
entry specifies displacement relative recvbuf place incoming data process significant root recvtype data type recv buffer elements significant root handle root rank receiving process integer comm communicator handle int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcounts int displs mpi datatype recvtype int root mpi comm comm mpi sendbuf sendcount sendtype recvbuf recvcounts displs recvtype root comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcounts displs recvtype root comm ierror mpi extends functionality mpi gather allowing varying count data process recvcounts array 
allows flexibility data placed root providing new argument displs 
outcome process including root process sends message root mpi send sendbuf sendcount sendtype root root executes receives mpi recv recvbuf disp delta extent recvtype recvcounts recvtype messages placed receive buffer root process rank order data sent process placed jth portion receive buffer recvbuf process root 
jth portion recvbuf begins offset displs elements terms recvtype recvbuf 
receive buffer ignored non root processes 
chapter 
collective communication processes rbuf root root process gathers ints process group 
type signature implied sendcount sendtype process equal type signature implied recvcounts recvtype root 
implies amount data sent equal amount data received pairwise process root 
distinct type maps sender receiver allowed illustrated example 
arguments function significant process root processes arguments sendbuf sendcount sendtype root comm significant 
arguments root comm identical values processes 
specification counts types displacements cause location root written 
call erroneous 
examples mpi gather mpi example gather ints process group root 
see 
mpicomm comm int gsize int root rbuf 
comm gsize rbuf int malloc gsize sizeof int mpiint rbuf mpiint root comm example previous example modified root allocates memory receive buffer 
mpicomm comm int gsize int root myrank rbuf 
mpicommrank comm myrank myrank root comm gsize rbuf int malloc gsize sizeof int mpiint rbuf mpiint root comm 
gather example previous example derived datatype 
note type entire set gsize ints type matching defined pairwise root process gather 
mpicomm comm int gsize int root rbuf mpidatatype rtype 
comm gsize mpiint rtype rtype rbuf int malloc gsize sizeof int mpiint rbuf rtype root comm example process send ints root place set stride ints apart receiving 
mpi displs argument achieve effect 
assume stride 
see 
mpicomm comm int gsize int root rbuf stride int displs 
comm gsize rbuf int malloc gsize stride sizeof int displs int malloc gsize sizeof int int malloc gsize sizeof int gsize displs stride mpiint rbuf displs mpiint root comm note program erroneous stride 
example example receiving side send ints th column theta int array see 
mpicomm comm int gsize int root rbuf stride mpidatatype stype int displs chapter 
collective communication stride rbuf root processes root process gathers ints process group set placed stride ints apart 
rbuf root stride processes root process gathers column theta array set placed stride ints apart 
comm gsize rbuf int malloc gsize stride sizeof int displs int malloc gsize sizeof int int malloc gsize sizeof int gsize displs stride create datatype column array mpiint stype stype stype rbuf displs mpiint root comm example process sends ints ith column theta int array received buffer stride previous examples 
see 
mpicomm comm int gsize sptr int root rbuf stride myrank mpidatatype stype 
gather rbuf root stride processes root process gathers ints column theta array set placed stride ints apart 
int displs 
comm gsize mpicommrank comm myrank rbuf int malloc gsize stride sizeof int displs int malloc gsize sizeof int int malloc gsize sizeof int gsize displs stride note change previous example create datatype column sending myrank mpiint stype stype sptr address start myrank column sptr myrank sptr stype rbuf displs mpiint root comm note different amount data received process 
example example done different way sending 
create datatype causes correct sending read column array 
similar thing done example section 
mpicomm comm int gsize sptr int root rbuf stride myrank disp mpidatatype stype type int displs chapter 
collective communication 
comm gsize mpicommrank comm myrank rbuf int malloc gsize stride sizeof int displs int malloc gsize sizeof int int malloc gsize sizeof int gsize displs stride create datatype int extent entire row disp disp sizeof int type mpiint type disp type stype stype sptr myrank sptr myrank stype rbuf displs mpiint root comm example example sending side receiving side stride received blocks vary block block 
see 
mpicomm comm int gsize sptr int root rbuf stride myrank mpidatatype stype int displs offset 
comm gsize mpicommrank comm myrank stride int malloc gsize sizeof int 
stride gsize set set displs vectors displs int malloc gsize sizeof int int malloc gsize sizeof int offset gsize displs offset 
gather stride rbuf root processes root process gathers ints column theta array set placed stride ints apart varying stride 
offset stride required buffer size rbuf easily obtained displs gsize gsize rbuf int malloc sizeof int create datatype column sending myrank mpiint stype stype sptr myrank sptr stype rbuf displs mpiint root comm example process sends num ints ith column theta int array complicating factor various values num known root separate gather run find 
data placed contiguously receiving 
mpicomm comm int gsize sptr int root rbuf stride myrank disp mpidatatype stype types int displs num 
comm gsize mpicommrank comm myrank gather nums root int malloc gsize sizeof int num mpiint mpiint root comm chapter 
collective communication root correct set displs data placed contiguously concatenated receive displs int malloc gsize sizeof int displs gsize displs displs create receive buffer rbuf int malloc gsize displs gsize gsize sizeof int create datatype int extent entire row disp disp sizeof int type mpiint type disp type stype stype sptr myrank sptr num stype rbuf displs mpiint root comm scatter mpi scatter sendbuf sendcount sendtype recvbuf recvcount recvtype root comm sendbuf address send buffer choice significant root sendcount number elements sent process integer significant root sendtype data type send buffer elements significant root handle recvbuf address receive buffer choice recvcount number elements receive buffer integer recvtype data type receive buffer elements handle root rank sending process integer comm communicator handle int mpi scatter void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype int root mpi comm comm mpi scatter sendbuf sendcount sendtype recvbuf recvcount recvtype root comm ierror 
scatter type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype root comm ierror mpi scatter inverse operation mpi gather 
outcome root executed send operations mpi send sendbuf delta sendcount delta extent sendtype sendcount sendtype process executed receive mpi recv recvbuf recvcount recvtype alternative description root sends message mpi send sendbuf sendcount deltan sendtype 
message split equal segments ith segment sent ith process group process receives message 
send buffer ignored non root processes 
type signature associated sendcount sendtype root equal type signature associated recvcount recvtype processes type maps may different 
implies amount data sent equal amount data received pairwise process root 
distinct type maps sender receiver allowed 
arguments function significant process root processes arguments recvbuf recvcount recvtype root comm significant 
arguments root comm identical values processes 
specification counts types cause location root read 
rationale 
needed restriction imposed achieve symmetry mpi gather corresponding restriction multiple write restriction necessary 
rationale 
mpi sendbuf displs sendtype recvbuf recvcount recvtype root comm sendbuf address send buffer choice significant root integer array length group size specifying number elements send processor displs integer array length group size 
entry specifies displacement relative sendbuf take outgoing data process sendtype data type send buffer elements handle recvbuf address receive buffer choice recvcount number elements receive buffer integer recvtype data type receive buffer elements handle root rank sending process integer comm communicator handle int mpi void sendbuf int int displs mpi datatype sendtype void recvbuf int recvcount chapter 
collective communication mpi datatype recvtype int root mpi comm comm mpi sendbuf displs sendtype recvbuf recvcount recvtype root comm ierror type 
sendbuf recvbuf integer displs sendtype recvcount recvtype root comm ierror mpi inverse operation mpi 
mpi extends functionality mpi scatter allowing varying count data sent process array 
allows flexibility data taken root providing new argument displs 
outcome root executed send operations mpi send sendbuf displs delta extent sendtype sendtype process executed receive mpi recv recvbuf recvcount recvtype send buffer ignored non root processes 
type signature implied sendcount sendtype root equal type signature implied recvcount recvtype process type maps may different 
implies amount data sent equal amount data received pairwise process root 
distinct type maps sender receiver allowed 
arguments function significant process root processes arguments recvbuf recvcount recvtype root comm significant 
arguments root comm identical values processes 
specification counts types displacements cause location root read 
examples mpi scatter mpi example reverse example 
scatter sets ints root process group 
see 
mpicomm comm int gsize sendbuf int root rbuf 
comm gsize sendbuf int malloc gsize sizeof int 
sendbuf mpiint rbuf mpiint root comm example reverse example 
root process scatters sets ints processes sets stride ints apart sending buffer 
requires mpi 
assume stride 
see 

scatter sendbuf root processes root process scatters sets ints process group 
sendbuf root processes stride root process scatters sets ints moving stride ints send send scatter 
mpicomm comm int gsize sendbuf int root rbuf displs 
comm gsize sendbuf int malloc gsize stride sizeof int displs int malloc gsize sizeof int int malloc gsize sizeof int gsize displs stride sendbuf displs mpiint rbuf mpiint root comm example reverse example 
varying stride blocks sending root side receiving side receive ith column theta array 
see 
mpicomm comm int gsize int root sendbuf myrank stride chapter 
collective communication sendbuf root processes stride root scatters blocks ints column theta array 
sending side blocks stride ints apart 
mpidatatype rtype int displs offset 
comm gsize mpicommrank comm myrank stride int malloc gsize sizeof int 
stride gsize set sendbuf comes displs int malloc gsize sizeof int int malloc gsize sizeof int offset gsize displs offset offset stride create datatype column receiving myrank mpiint rtype rtype myrank sendbuf displs mpiint rtype root comm 
gather gather mpi sendbuf sendcount sendtype recvbuf recvcount recvtype comm sendbuf starting address send buffer choice sendcount number elements send buffer integer sendtype data type send buffer elements handle recvbuf address receive buffer choice recvcount number elements received process integer recvtype data type receive buffer elements handle comm communicator handle int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype mpi comm comm mpi sendbuf sendcount sendtype recvbuf recvcount recvtype comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype comm ierror mpi thought mpi gather processes receive result just root 
jth block data sent process received process placed jth block buffer recvbuf 
type signature associated sendcount sendtype process equal type signature associated recvcount recvtype process 
outcome call mpi 
processes executed calls sendbuf sendcount sendtype recvbuf recvcount recvtype root comm root 
rules correct usage mpi easily corresponding rules mpi gather 
chapter 
collective communication mpi sendbuf sendcount sendtype recvbuf recvcounts displs recvtype comm sendbuf starting address send buffer choice sendcount number elements send buffer integer sendtype data type send buffer elements handle recvbuf address receive buffer choice recvcounts integer array length group size containing number elements received process displs integer array length group size 
entry specifies displacement relative recvbuf place incoming data process recvtype data type receive buffer elements handle comm communicator handle int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcounts int displs mpi datatype recvtype mpi comm comm mpi sendbuf sendcount sendtype recvbuf recvcounts displs recvtype comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcounts displs recvtype comm ierror mpi thought mpi processes receive result just root 
jth block data sent process received process placed jth block buffer recvbuf 
blocks need size 
type signature associated sendcount sendtype process equal type signature associated recvcounts recvtype process 
outcome processes executed calls sendbuf sendcount sendtype recvbuf recvcounts displs recvtype root comm root 
rules correct usage mpi easily corresponding rules mpi 
examples mpi mpi example gather version example 
mpi gather ints process group process 
mpicomm comm int gsize int rbuf 

scatter gather comm gsize rbuf int malloc gsize sizeof int mpiint rbuf mpiint comm call process group wide concatenation sets data 
scatter gather mpi sendbuf sendcount sendtype recvbuf recvcount recvtype comm sendbuf starting address send buffer choice sendcount number elements sent process integer sendtype data type send buffer elements handle recvbuf address receive buffer choice recvcount number elements received process integer recvtype data type receive buffer elements handle comm communicator handle int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype mpi comm comm mpi sendbuf sendcount sendtype recvbuf recvcount recvtype comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype comm ierror mpi extension mpi case process sends distinct data receivers 
jth block sent process received process placed ith block recvbuf 
type signature associated sendcount sendtype process equal type signature associated recvcount recvtype process 
implies amount data sent equal amount data received pairwise pair processes 
usual type maps may different 
outcome process executed send process included call mpi send sendbuf delta sendcount delta extent sendtype sendcount sendtype receive process call mpi recv recvbuf delta recvcount delta extent recvtype recvcount arguments processes significant 
argument comm identical values processes 
chapter 
collective communication mpi sendbuf sendtype recvbuf recvcounts recvtype comm sendbuf starting address send buffer choice integer array equal group size specifying number elements send processor integer array length group size 
entry specifies displacement relative sendbuf take outgoing data destined process sendtype data type send buffer elements handle recvbuf address receive buffer choice recvcounts integer array equal group size specifying number elements received processor integer array length group size 
entry specifies displacement relative recvbuf place incoming data process recvtype data type receive buffer elements handle comm communicator handle int mpi void sendbuf int int mpi datatype sendtype void recvbuf int recvcounts int mpi datatype recvtype mpi comm comm mpi sendbuf sendtype recvbuf recvcounts recvtype comm ierror type 
sendbuf recvbuf integer sendtype recvcounts recvtype comm ierror mpi adds flexibility mpi location data send specified location placement data receive side specified 
jth block sent process received process placed ith block recvbuf 
blocks need size 
type signature associated sendcount sendtype process equal type signature associated recvcount recvtype process implies amount data sent equal amount data received pairwise pair processes 
distinct type maps sender receiver allowed 
outcome process sent message process mpi send sendbuf displs delta extent sendtype sendtype received message process call mpi recv recvbuf displs delta extent recvtype recvcounts recvtype arguments processes significant 
argument comm identical values processes 

global reduction operations rationale 
definitions mpi mpi give flexibility achieve specifying independent point point communications exceptions messages datatype messages scattered gathered sequential storage 
rationale 
advice implementors 
discussion collective communication terms point point operation implies message transferred directly sender receiver implementations may tree communication pattern 
messages forwarded intermediate nodes split scatter concatenated gather efficient 
advice implementors 
global reduction operations functions section perform global reduce operation sum max logical members group 
reduction operation predefined list operations user defined operation 
global reduction functions come flavors reduce returns result reduction node reduce returns result nodes scan parallel prefix operation 
addition reduce scatter operation combines functionality reduce scatter operation 
reduce mpi reduce sendbuf recvbuf count datatype op root comm sendbuf address send buffer choice recvbuf address receive buffer choice significant root count number elements send buffer integer datatype data type elements send buffer handle op reduce operation handle root rank root process integer comm communicator handle int mpi reduce void sendbuf void recvbuf int count mpi datatype datatype mpi op op int root mpi comm comm mpi reduce sendbuf recvbuf count datatype op root comm ierror type 
sendbuf recvbuf integer count datatype op root comm ierror mpi reduce combines elements provided input buffer process group operation op returns combined value output buffer process rank root 
input buffer defined arguments sendbuf count datatype output buffer defined arguments recvbuf count datatype number elements type 
routine called chapter 
collective communication group members arguments count datatype op root comm 
processes provide input buffers output buffers length elements type 
process provide element sequence elements case combine operation executed element wise entry sequence 
example operation mpi max send buffer contains elements floating point numbers count datatype mpi float recvbuf global max sendbuf recvbuf global max sendbuf 
sec 
lists set predefined operations provided mpi 
section enumerates datatypes operation applied 
addition users may define operations overloaded operate datatypes basic derived 
explained sec 

operation op assumed associative 
predefined operations assumed commutative 
users may define operations assumed associative commutative 
canonical evaluation order reduction determined ranks processes group 
implementation take advantage associativity associativity commutativity order change order evaluation 
may change result reduction operations strictly associative commutative floating point addition 
advice implementors 
strongly recommended mpi reduce implemented result obtained function applied arguments appearing order 
note may prevent optimizations take advantage physical location processors 
advice implementors 
datatype argument mpi reduce compatible op 
predefined operators mpi types listed sec 
sec 

user defined operators may operate general derived datatypes 
case argument reduce operation applied element described datatype may contain basic values 
explained section 
predefined reduce operations predefined operations supplied mpi reduce related functions mpi mpi reduce scatter mpi scan 
operations invoked placing op 
name meaning mpi max maximum mpi min minimum mpi sum sum mpi prod product mpi land logical mpi band bit wise mpi lor logical mpi bor bit wise mpi logical xor 
global reduction operations mpi bit wise xor mpi max value location mpi min value location operations mpi mpi discussed separately sec 

predefined operations enumerate allowed combinations op datatype arguments 
define groups mpi basic datatypes way 
integer mpi int mpi long mpi short mpi unsigned short mpi unsigned mpi unsigned long fortran integer mpi integer floating point mpi float mpi double mpi real mpi double precision mpi long double logical mpi logical complex mpi complex byte mpi byte valid datatypes option specified 
op allowed types mpi max mpi min integer fortran integer floating point mpi sum mpi prod integer fortran integer floating point complex mpi land mpi lor mpi integer logical mpi band mpi bor mpi integer fortran integer byte example routine computes dot product vectors distributed group processes returns answer node zero 
subroutine comm real local slice array real result node zero real sum integer comm ierr local sum sum sum sum global sum call sum mpireal comm ierr return example routine computes product vector array distributed group processes returns answer node zero 
chapter 
collective communication subroutine comm real local slice array real result real sum integer comm ierr local sum sum sum sum global sum call sum mpireal comm ierr return result node zero garbage nodes return operator mpi compute global minimum index attached minimum value 
mpi similarly computes global maximum index 
application compute global minimum maximum rank process containing value 
operation defines mpi ffi max min mpi defined similarly ffi min 
global reduction operations min operations associative commutative 
note mpi applied reduce sequence pairs gamma gamma value returned max index global maximum sequence 
process supplies value rank group reduce operation op mpi return maximum value rank process value 
similarly mpi return minimum index 
generally mpi computes lexicographic minimum elements ordered component pair ties resolved second component 
reduce operation defined operate arguments consist pair value index 
fortran types provided describe pair 
potentially mixed type nature arguments problem fortran 
problem circumvented fortran having mpi provided type consist pair type value coercing index type 
mpi provided pair type distinct types index int 
order mpi mpi reduce operation provide datatype argument represents pair value index 
mpi provides predefined datatypes 
operations mpi mpi datatypes 
fortran name description mpi real pair reals mpi double precision pair double precision variables mpi integer pair integers name description mpi float int float int mpi double int double int mpi long int long int mpi int pair int mpi short int short int mpi long double int long double int datatype mpi real defined see section 
mpireal mpi real similar statements apply mpi integer mpi double precision mpi int 
datatype mpi float int defined sequence instructions 
chapter 
collective communication type type mpiint disp disp sizeof float block block block disp type similar statements apply mpi long int mpi double int 
example process array doubles locations compute value rank process containing largest value 
process array double ain double ain aout int ind struct double val int rank int myrank root mpicommrank mpicommworld myrank val ain rank myrank root comm point answer resides process root myrank root read ranks aout val ind rank example example fortran 
process array double ain double precision ain aout integer ind double precision 
global reduction operations integer myrank root ierr mpicommrank mpicommworld myrank ain myrank myrank coerced double mpi root comm ierr point answer resides process root myrank eq 
root read ranks aout ind rank coerced back integer example process non empty array values 
find minimum global value rank process holds index process 
define len float val len local array values int count local number values int myrank minrank float minval struct float value int index local value val index count value val value val index global mpicommrank mpicommworld myrank index myrank len index root comm chapter 
collective communication point answer resides process root myrank root read answer minval value minrank index len index len rationale 
definition mpi mpi advantage require special case handling operations handled reduce operation 
programmer provide definition mpi mpi desired 
disadvantage values indices interleaved indices values coerced type fortran 
rationale 
user defined operations mpi op create function commute op function user defined function function commute true commutative false 
op operation handle int mpi op create mpi user function function int commute mpi op op mpi op create function commute op ierror external function logical commute integer op ierror mpi op create binds user defined global operation op handle subsequently mpi reduce mpi mpi reduce scatter mpi scan 
user defined operation assumed associative 
commute true operation commutative associative 
commute false order operands fixed defined ascending process rank order process zero 
order evaluation changed talking advantage associativity operation 
commute true order evaluation changed advantage commutativity associativity 
function user defined function arguments len datatype 
ansi prototype function 
typedef void void void int len mpidatatype datatype fortran declaration user defined function appears 

global reduction operations function len type type 
len len integer len type datatype argument handle data type passed call mpi reduce 
user reduce function written holds 
len len elements communication buffer described arguments len datatype function invoked 
len len elements communication buffer described arguments len datatype function invoked 
len len elements communication buffer described arguments len datatype function returns ffiv 
len ffi reduce operation function computes 
informally think arrays len elements function combining 
result reduction writes values name 
invocation function results pointwise evaluation reduce operator len elements function returns value ffi count gamma ffi combining operation computed function 
rationale 
len argument allows mpi reduce avoid calling function element input buffer 
system choose apply function chunks input 
passed reasons compatibility fortran 
internally comparing value datatype argument known global handles possible overload single user defined function different data types 
rationale 
general datatypes may passed user function 
datatypes contiguous lead inefficiencies 
mpi communication function may called inside user function 
mpi abort may called inside function case error 
advice users 
suppose defines library user defined reduce functions overloaded datatype argument select right execution path invocation types operands 
user defined reduce function decode datatype argument passed identify correspondence datatype handles datatype represent 
correspondence established datatypes created 
library library initialization preamble executed 
preamble code define datatypes library store handles datatypes global static variables shared user code library code 
fortran version mpi reduce invoke user defined reduce function fortran calling conventions pass fortran type datatype argument version calling convention representation datatype handle 
users plan mix languages define reduction functions accordingly 
advice users 
chapter 
collective communication advice implementors 
outline naive inefficient implementation mpi reduce 
rank recv count datatype rank 
sendbuf count datatype rank send sendbuf count datatype rank 
answer resides process send root rank send sendbuf count datatype root 
rank root recv recvbuf count datatype 
reduction computation proceeds sequentially process process 
order chosen respect order possibly non commutative operator defined function user reduce 
efficient implementation achieved advantage associativity logarithmic tree reduction 
commutativity advantage cases commute argument mpi op create true 
amount temporary buffer required reduced communication pipelined computation transferring reducing elements chunks size len count 
predefined reduce operations implemented library user defined operations 
better performance achieved mpi reduce handles functions special case 
advice implementors 
mpi op free op op operation handle int mpi op free mpi op op mpi op free op ierror integer op ierror marks user defined reduction operation deallocation sets op mpi op null 
example user defined reduce time example user defined reduction 
example compute product array complex numbers 
global reduction operations typedef struct double real imag complex user defined function void complex complex inout int len mpidatatype int complex 
len real inout real real inout imag imag imag inout real imag inout imag real inout inout call 
process array complexes complex answer mpidatatype ctype explain mpi type complex defined ctype ctype create complex product user op true answer ctype root comm point answer consists complexes resides process root chapter 
collective communication reduce mpi includes variants reduce operations result returned processes group 
mpi requires processes participating operations receive identical results 
mpi sendbuf recvbuf count datatype op comm sendbuf starting address send buffer choice recvbuf starting address receive buffer choice count number elements send buffer integer datatype data type elements send buffer handle op operation handle comm communicator handle int mpi void sendbuf void recvbuf int count mpi datatype datatype mpi op op mpi comm comm mpi sendbuf recvbuf count datatype op comm ierror type 
sendbuf recvbuf integer count datatype op comm ierror mpi reduce result appears receive buffer group members 
advice implementors 
reduce operations implemented reduce followed broadcast 
direct implementation lead better performance 
advice implementors 
example routine computes product vector array distributed group processes returns answer nodes see example 
subroutine comm real local slice array real result real sum integer comm ierr local sum sum sum sum global sum 
reduce scatter call sum mpireal comm ierr return result nodes return reduce scatter mpi includes variants reduce operations result scattered processes group return 
mpi reduce scatter sendbuf recvbuf recvcounts datatype op comm sendbuf starting address send buffer choice recvbuf starting address receive buffer choice recvcounts integer array specifying number elements result distributed process 
array identical calling processes 
datatype data type elements input buffer handle op operation handle comm communicator handle int mpi reduce scatter void sendbuf void recvbuf int recvcounts mpi datatype datatype mpi op op mpi comm comm mpi reduce scatter sendbuf recvbuf recvcounts datatype op comm ierror type 
sendbuf recvbuf integer recvcounts datatype op comm ierror mpi reduce scatter element wise reduction vector count recvcounts elements send buffer defined sendbuf count datatype 
resulting vector results split disjoint segments number members group 
segment contains recvcounts elements 
ith segment sent process stored receive buffer defined recvbuf recvcounts datatype 
advice implementors 
mpi reduce scatter routine functionally equivalent mpi reduce operation function count equal sum recvcounts followed mpi equal recvcounts 
direct implementation may run faster 
advice implementors 
chapter 
collective communication scan mpi scan sendbuf recvbuf count datatype op comm sendbuf starting address send buffer choice recvbuf starting address receive buffer choice count number elements input buffer integer datatype data type elements input buffer handle op operation handle comm communicator handle int mpi scan void sendbuf void recvbuf int count mpi datatype datatype mpi op op mpi comm comm mpi scan sendbuf recvbuf count datatype op comm ierror type 
sendbuf recvbuf integer count datatype op comm ierror mpi scan perform prefix reduction data distributed group 
operation returns receive buffer process rank reduction values send buffers processes ranks inclusive 
type operations supported semantics constraints send receive buffers mpi reduce 
rationale 
defined inclusive scan prefix reduction process includes data process alternative define scan exclusive manner result includes data 
definitions useful 
advantages inclusive scan computed exclusive scan additional communication non invertible operations max min communication required compute exclusive scan inclusive scan 
complication exclusive scan define unit element reduction case 
explicitly say occurs process 
thought complex user defined operations exclusive scan dropped 
rationale 
example mpi scan example example uses user defined operation produce segmented scan 
segmented scan takes input set values set delineate various segments scan 
example values result operator produces effect 
scan ffi note non commutative operator 
code implements 
typedef struct double val int log user defined function void inout int len mpidatatype int 
len log inout log val val inout val val inout val log inout log inout inout note inout argument user defined function corresponds righthand operand operator 
operator careful specify non commutative 
int base answer mpidatatype type mpiint disp int mpidatatype explain mpi type defined chapter 
collective communication disp log disp base disp disp base disp type create segmented scan user op false 
answer root comm correctness correct portable program invoke collective communications deadlock occur collective communications synchronizing 
examples illustrate dangerous collective routines 
example erroneous 
switch rank case buf count type comm buf count type comm break case buf count type comm buf count type comm break assume group comm 
processes execute broadcast operations reverse order 
operation synchronizing deadlock occur 
collective operations executed order members communication group 
example erroneous 
switch rank case buf count type comm buf count type comm break case buf count type comm buf count type comm break case 
correctness buf count type comm buf count type comm break assume group comm comm comm 
broadcast synchronizing operation cyclic dependency broadcast comm completes broadcast comm broadcast comm completes broadcast comm broadcast comm completes broadcast comm 
code deadlock 
collective operations executed order cyclic dependences occur 
example erroneous 
switch rank case buf count type comm mpisend buf count type tag comm break case mpirecv buf count type tag comm status buf count type comm break process zero executes broadcast followed blocking send operation 
process executes blocking receive matches send followed broadcast call matches broadcast process zero 
program may deadlock 
broadcast call process zero may block process executes matching broadcast call send executed 
process definitely block receive case executes broadcast 
relative order execution collective operations point point operations collective operations point point operations synchronizing deadlock occur 
example correct non deterministic program 
switch rank case buf count type comm mpisend buf count type tag comm break case mpirecv buf count type tag comm status buf count type comm mpirecv buf count type tag comm status break case mpisend buf count type tag comm chapter 
collective communication execution second execution recv broadcast broadcast broadcast send recv process send match match broadcast recv recv send broadcast send broadcast match match race condition causes non deterministic matching sends receives 
rely synchronization broadcast program deterministic 
buf count type comm break processes participate broadcast 
process sends message process broadcast process sends message process broadcast 
process receives broadcast wildcard source argument 
possible executions program different matchings sends receives illustrated 
note second execution peculiar effect send executed broadcast received node broadcast 
example illustrates fact rely collective communication functions particular synchronization effects 
program works correctly execution occurs broadcast synchronizing erroneous 
multithreaded implementations concurrently executing collective communication call process 
situations user responsibility ensure communicator concurrently different collective communication calls process 
advice implementors 
assume broadcast implemented point point mpi communication 
suppose rules followed 

receives specify source explicitly wildcards 

process sends messages pertain collective call sending message pertain subsequent collective call 

correctness messages belonging successive broadcasts confused order point point messages preserved 
implementor responsibility ensure point point messages confused collective messages 
way accomplish communicator created create hidden communicator collective communication 
achieve similar effect cheaply example hidden tag context bit indicate communicator point point collective communication 
advice implementors 
chapter groups contexts communicators chapter introduces mpi features support development parallel libraries 
parallel libraries needed encapsulate distracting complications inherent parallel implementations key algorithms 
help ensure consistent correctness procedures provide higher level portability mpi provide 
libraries prevent programmer repeating defining consistent data structures data layouts methods implement key algorithms matrix operations 
best libraries come variations parallel systems different data layouts different strategies depending size system problem type floating point needs hidden user 
refer reader information writing libraries mpi features described chapter 
features needed support libraries key features needed support creation robust parallel libraries follows ffl safe communication space guarantees libraries communicate need conflicting communication extraneous library ffl group scope collective operations allow libraries avoid unnecessarily synchronizing processes potentially running unrelated code ffl process naming allow libraries describe communication terms suitable data structures algorithms ffl ability set communicating processes additional user defined attributes extra collective operations 
mechanism provide means user library writer effectively extend message passing notation 
addition unified mechanism object needed conveniently denoting communication context group communicating processes house process naming store 

mpi support libraries corresponding concepts mpi provides specifically support robust libraries follows ffl contexts communication ffl groups processes ffl virtual topologies ffl attribute caching ffl communicators 
communicators see encapsulate ideas order provide appropriate scope communication operations mpi 
communicators divided kinds intra communicators operations single group processes inter communicators point point communication groups processes 
caching 
communicators see provide caching mechanism allows associate new attributes communicators par mpi built features 
advanced users communicators mpi implement communicator functions 
example virtual topology functions described chapter supported way 
groups 
groups define ordered collection processes rank group defines low level names inter process communication ranks sending receiving 
groups define scope process names point point communication 
addition groups define scope collective operations 
groups may manipulated separately communicators mpi communicators communication operations 
intra communicators 
commonly means message passing mpi intra communicators 
intra communicators contain instance group contexts communication point point collective communication ability include virtual topology attributes 
features follows ffl contexts provide ability separate safe universes message passing mpi 
context akin additional tag differentiates messages 
system manages differentiation process 
separate communication contexts distinct libraries distinct library invocations insulates communication internal library execution external communication 
allows invocation library pending communications communicators avoids need synchronize entry exit library code 
pending point point communications guaranteed interfere collective communications single communicator 
ffl groups define participants communication see communicator 
chapter 
groups contexts communicators ffl virtual topology defines special mapping ranks group topology 
special constructors communicators defined chapter provide feature 
intra communicators described chapter topologies 
ffl attributes define local information user library added communicator 
advice users 
current practice communication libraries unique predefined communication universe includes processes available parallel program initiated processes assigned consecutive ranks 
participants point point communication identified rank collective communication broadcast involves processes 
practice followed mpi predefined communicator mpi comm world 
users satisfied practice plug mpi comm world communicator argument required consequently disregard rest chapter 
advice users 
inter communicators 
discussion dealt far intra communication communication group 
mpi supports inter communication communication non overlapping groups 
application built composing parallel modules convenient allow module communicate local ranks addressing second module 
especially convenient client server computing paradigm client server parallel 
support inter communication provides mechanism extension mpi dynamic model processes preallocated initialization time 
situation necessary support communication universes 
inter communication supported objects called inter communicators 
objects bind groups communication contexts shared groups 
inter communicators features follows ffl contexts provide ability separate safe universe message passing groups 
send local group receive remote group vice versa 
system manages differentiation process 
separate communication contexts distinct libraries distinct library invocations insulates communication internal library execution external communication 
allows invocation library pending communications communicators avoids need synchronize entry exit library code 
general purpose collective communication inter communicators contexts just isolate point point communication 
ffl local remote group specify recipients destinations inter communicator 
ffl virtual topology undefined inter communicator 
ffl attributes cache defines local information user library added communicator 

basic concepts mpi provides mechanisms creating manipulating inter communicators 
point point communication related manner intra communicators 
users need inter communication applications safely ignore extension 
users need collective operations inter communicators layer top mpi 
users require inter communication overlapping groups layer capability top mpi 
basic concepts section turn formal definition concepts introduced 
groups group ordered set process identifiers henceforth processes processes implementation dependent objects 
process group associated integer rank 
ranks contiguous start zero 
groups represented opaque group objects directly transferred process 
group communicator describe participants communication universe rank participants giving unique names universe communication 
special pre defined group mpi group empty group members 
predefined constant mpi group null value invalid group handles 
advice users 
mpi group empty valid handle empty group confused mpi group null turn invalid handle 
may argument group operations returned group freed valid argument 
advice users 
advice implementors 
group may represented virtual real translation table 
communicator object see pointer table 
simple implementations mpi enumerate groups table 
advanced data structures sense order improve scalability memory usage large numbers processes 
implementations possible mpi 
advice implementors 
contexts context property communicators defined allows partitioning communication space 
message sent context received context 
furthermore permitted collective operations independent pending point topoint operations 
contexts explicit mpi objects appear part realization communicators 
advice implementors 
distinct communicators process distinct contexts 
context essentially system managed tag tags needed communicator safe point point mpi defined collective communication 
chapter 
groups contexts communicators safety means collective point point communication communicator interfere communication distinct communicators don interfere 
possible implementation context supplemental tag attached messages send matched receive 
intra communicator stores value tags point point collective communication 
functions collective communication agree new group wide unique context 
analogously inter communication strictly point point communication context tags stored communicator group send group receive second group send group receive 
contexts explicit objects implementations possible 
advice implementors 
intra communicators intra communicators bring concepts group context 
support implementation specific optimizations application topologies defined chapter chapter communicators may cache additional information see section 
mpi communication operations communicators determine scope communication universe point point collective operation operate 
communicator contains group valid participants group includes local process 
source destination message identified process rank group 
collective communication intra communicator specifies set processes participate collective operation order significant 
communicator restricts spatial scope communication provides machine independent process addressing ranks 
intra communicators represented opaque intra communicator objects directly transferred process 
predefined intra communicators initial intra communicator mpi comm world processes local process communicate initialization included defined mpi init called 
addition communicator mpi comm self provided includes process 
predefined constant mpi comm null value invalid communicator handles 
static process model implementation mpi processes participate computation available mpi initialized 
case mpi comm world communicator processes available computation communicator value processes 
implementation mpi processes dynamically join mpi execution may case process starts mpi computation having access processes 
situations mpi comm world communicator incorporating processes joining process immediately communicate 
mpi comm world may simultaneously different values different processes 

group management mpi implementations required provide mpi comm world communicator 
deallocated life process 
group corresponding communicator appear pre defined constant may accessed mpi comm group see 
mpi specify correspondence process rank mpi comm world machine dependent absolute address 
mpi specify function host process 
implementation dependent predefined communicators may provided 
group management section describes manipulation process groups mpi 
operations local execution require interprocess communication 
group accessors mpi group size group size group group handle size number processes group integer int mpi group size mpi group group int size mpi group size group size ierror integer group size ierror mpi group rank group rank group group handle rank rank calling process group mpi undefined process member integer int mpi group rank mpi group group int rank mpi group rank group rank ierror integer group rank ierror chapter 
groups contexts communicators mpi group translate ranks group ranks group ranks group group handle number ranks ranks ranks arrays integer ranks array zero valid ranks group group group handle ranks array corresponding ranks group mpi undefined correspondence exists 
int mpi group translate ranks mpi group group int int ranks mpi group group int ranks mpi group translate ranks group ranks group ranks ierror integer group ranks group ranks ierror function important determining relative numbering processes different groups 
instance knows ranks certain processes group mpi comm world want know ranks subset group 
mpi group compare group group result group group handle group second group handle result result integer int mpi group compare mpi group group mpi group group int result mpi group compare group group result ierror integer group group result ierror mpi ident results group members group order exactly groups 
happens instance group group handle 
mpi similar results group members order different 
mpi unequal results 
group constructors group constructors subset superset existing groups 
constructors construct new groups existing groups 
local operations distinct groups may defined different processes process may define group include 
consistent definitions required groups arguments communicator building functions 
mpi provide mechanism build group scratch previously defined groups 
base group groups defined group associated initial communicator mpi comm world accessible function mpi comm group 
rationale 
follows group duplication function analogous mpi comm dup defined chapter 
need group duplicator 
group created making copies 
group management handle 
constructors address need subsets supersets existing groups 
rationale 
advice implementors 
group constructor behaves returned new group object 
new group copy existing group avoid creating new objects count mechanism 
advice implementors 
mpi comm group comm group comm communicator handle group group corresponding comm handle int mpi comm group mpi comm comm mpi group group mpi comm group comm group ierror integer comm group ierror mpi comm group returns group handle group comm 
mpi group union group group newgroup group group handle group second group handle newgroup union group handle int mpi group union mpi group group mpi group group mpi group newgroup mpi group union group group newgroup ierror integer group group newgroup ierror mpi group intersection group group newgroup group group handle group second group handle newgroup intersection group handle int mpi group intersection mpi group group mpi group group mpi group newgroup mpi group intersection group group newgroup ierror integer group group newgroup ierror chapter 
groups contexts communicators mpi group difference group group newgroup group group handle group second group handle newgroup difference group handle int mpi group difference mpi group group mpi group group mpi group newgroup mpi group difference group group newgroup ierror integer group group newgroup ierror set operations defined follows union elements group group followed elements second group group 
intersect elements group second group ordered group 
difference elements group second group ordered group 
note operations order processes output group determined primarily order group possible necessary order second group 
union intersection commutative associative 
new group empty equal mpi group empty 
mpi group incl group ranks newgroup group group handle number elements array ranks size newgroup integer ranks ranks processes group appear newgroup array integers newgroup new group derived order defined ranks handle int mpi group incl mpi group group int int ranks mpi group newgroup mpi group incl group ranks newgroup ierror integer group ranks newgroup ierror function mpi group incl creates group newgroup consists processes group ranks rank rank process rank newgroup process rank ranks group 
elements ranks valid rank group elements distinct program erroneous 
newgroup mpi group empty 
function instance reorder elements group 
see mpi group compare 

group management mpi group excl group ranks newgroup group group handle number elements array ranks integer ranks array integer ranks group appear newgroup newgroup new group derived preserving order defined group handle int mpi group excl mpi group group int int ranks mpi group newgroup mpi group excl group ranks newgroup ierror integer group ranks newgroup ierror function mpi group excl creates group processes newgroup obtained deleting group processes ranks ranks ranks 
ordering processes newgroup identical ordering group 
elements ranks valid rank group elements distinct program erroneous 
newgroup identical group 
mpi group range incl group ranges newgroup group group handle number triplets array ranges integer ranges array integer triplets form rank rank stride indicating ranks group processes included newgroup newgroup new group derived order defined ranges handle int mpi group range incl mpi group group int int ranges mpi group newgroup mpi group range incl group ranges newgroup ierror integer group ranges newgroup ierror ranges consist triplets stride stride newgroup consists sequence processes group ranks stride gamma stride stride stride gamma stride stride computed rank valid rank group computed ranks distinct program erroneous 
note may stride may negative zero 
chapter 
groups contexts communicators functionality routine specified equivalent expanding array ranges array included ranks passing resulting array ranks arguments mpi group incl 
call mpi group incl equivalent call mpi group range incl rank ranks replaced triplet argument ranges 
mpi group range excl group ranges newgroup group group handle number elements array ranks integer ranges dimensional array integer triplets form rank rank stride indicating ranks group processes excluded output group newgroup 
newgroup new group derived preserving order group handle int mpi group range excl mpi group group int int ranges mpi group newgroup mpi group range excl group ranges newgroup ierror integer group ranges newgroup ierror computed rank valid rank group computed ranks distinct program erroneous 
functionality routine specified equivalent expanding array ranges array excluded ranks passing resulting array ranks arguments mpi group excl 
call mpi group excl equivalent call mpi group range excl rank ranks replaced triplet argument ranges 
advice users 
range operations explicitly enumerate ranks scalable implemented efficiently 
recommend mpi programmers possible high quality implementations take advantage fact 
advice users 
advice implementors 
range operations implemented possible enumerating group members order obtain better scalability time space 
advice implementors 
group destructors mpi group free group inout group group handle int mpi group free mpi group group 
communicator management mpi group free group ierror integer group ierror operation marks group object deallocation 
handle group set mpi group null call 
going operation group complete normally 
advice implementors 
keep count incremented call mpi comm create mpi comm dup decremented call mpi group free mpi comm free group object ultimately deallocated count drops zero 
advice implementors 
communicator management section describes manipulation communicators mpi 
operations access communicators local execution require interprocess communication 
operations create communicators collective may require interprocess communication 
advice implementors 
high quality implementations amortize overheads associated creation communicators group subsets thereof calls allocating multiple contexts collective communication 
advice implementors 
communicator accessors local operations 
mpi comm size comm size comm communicator handle size number processes group comm integer int mpi comm size mpi comm comm int size mpi comm size comm size ierror integer comm size ierror rationale 
function equivalent accessing communicator group mpi comm group see computing size mpi group size freeing temporary group mpi group free 
function commonly shortcut introduced 
rationale 
advice users 
function indicates number processes involved communicator 
mpi comm world indicates total number processes available version mpi standard way change number processes initialization taken place 
call call determine amount concurrency available specific library program 
call mpi comm rank chapter 
groups contexts communicators indicates rank process calls range size gamma size return value mpi comm size advice users 
mpi comm rank comm rank comm communicator handle rank rank calling process group comm integer int mpi comm rank mpi comm comm int rank mpi comm rank comm rank ierror integer comm rank ierror rationale 
function equivalent accessing communicator group mpi comm group see computing rank mpi group rank freeing temporary group mpi group free 
function commonly shortcut introduced 
rationale 
advice users 
function gives rank process particular communicator group 
useful noted conjunction mpi comm size 
programs written master slave model process rank zero process play supervisory role processes serve compute nodes 
framework preceding calls useful determining roles various processes communicator 
advice users 
mpi comm compare comm comm result comm communicator handle comm second communicator handle result result integer int mpi comm compare mpi comm comm mpi comm comm int result mpi comm compare comm comm result ierror integer comm comm result ierror mpi ident results comm comm handles object identical groups contexts 
mpi congruent results underlying groups identical constituents rank order communicators differ context 
mpi similar results group members communicators rank order differs 
mpi unequal results 
communicator constructors collective functions invoked processes group associated comm 

communicator management rationale 
note chicken egg aspect mpi communicator needed create new communicator 
base communicator mpi communicators predefined outside mpi mpi comm world 
model arrived considerable debate chosen increase safety programs written mpi 
rationale 
mpi comm dup comm newcomm comm communicator handle newcomm copy comm handle int mpi comm dup mpi comm comm mpi comm newcomm mpi comm dup comm newcomm ierror integer comm newcomm ierror mpi comm dup duplicates existing communicator comm associated key values 
key value respective copy callback function determines attribute value associated key new communicator particular action copy callback may take delete attribute new communicator 
returns newcomm new communicator group copied cached information new context see section 
advice users 
operation provide parallel library call duplicate communication space properties original communicator 
includes attributes see topologies see chapter 
call valid pending point point communications involving communicator comm 
typical call involve mpi comm dup parallel call mpi comm free duplicated communicator call 
models communicator management possible 
call applies intra inter communicators 
advice users 
advice implementors 
need copy group information add new increment count 
copy write cached information advice implementors 
mpi comm create comm group newcomm comm communicator handle group group subset group comm handle newcomm new communicator handle int mpi comm create mpi comm comm mpi group group mpi comm newcomm mpi comm create comm group newcomm ierror chapter 
groups contexts communicators integer comm group newcomm ierror function creates new communicator newcomm communication group defined group new context 
cached information propagates comm newcomm 
function returns mpi comm null processes group 
call erroneous group arguments value group subset group associated comm 
note call executed processes comm belong new group 
call applies intra communicators 
rationale 
requirement entire group comm participate call stems considerations ffl allows implementation layer mpi comm create top regular collective communications 
ffl provides additional safety particular case partially overlapping groups create new communicators 
ffl permits implementations avoid communication related context creation 
rationale 
advice users 
mpi comm create provides means subset group processes purpose separate mimd computation separate communication space 
newcomm emerges mpi comm create subsequent calls mpi comm create communicator constructors subdivide computation parallel sub computations 
general service provided mpi comm split 
advice users 
advice implementors 
processes calling mpi comm dup mpi comm create provide group argument theoretically possible agree group wide unique context communication 
local execution functions requires larger context name space reduces error checking 
implementations may strike various compromises conflicting goals bulk allocation multiple contexts collective operation 
important new communicators created synchronizing processes involved communication system able cope messages arriving context allocated receiving process 
advice implementors 
mpi comm split comm color key newcomm comm communicator handle color control subset assignment integer key control rank integer newcomm new communicator handle int mpi comm split mpi comm comm int color int key mpi comm newcomm 
communicator management mpi comm split comm color key newcomm ierror integer comm color key newcomm ierror function partitions group associated comm disjoint subgroups value color 
subgroup contains processes color 
subgroup processes ranked order defined value argument key ties broken rank old group 
new communicator created subgroup returned newcomm 
process may supply color value mpi undefined case newcomm returns mpi comm null 
collective call process permitted provide different values color key 
call mpi comm create comm group newcomm equivalent call mpi comm split comm color key newcomm members group provide color key rank group processes members group provide color mpi undefined 
function mpi comm split allows general partitioning group subgroups optional reordering 
call applies intra communicators 
value color nonnegative 
advice users 
extremely powerful mechanism dividing single communicating group processes subgroups chosen implicitly user number colors asserted processes 
resulting communicator non overlapping 
division useful defining hierarchy computations multigrid linear algebra 
multiple calls mpi comm split overcome requirement call overlap resulting communicators process color call 
way multiple overlapping communication structures created 
creative color key splitting operations encouraged 
note fixed color keys need unique 
mpi comm split responsibility sort processes ascending order key break ties consistent way 
keys specified way processes color relative rank order parent group 
general different ranks 
essentially making key value zero processes color means doesn really care rank order processes new communicator 
advice users 
rationale 
color restricted nonnegative value assigned mpi undefined 
rationale 
communicator destructors mpi comm free comm inout comm communicator destroyed handle int mpi comm free mpi comm comm chapter 
groups contexts communicators mpi comm free comm ierror integer comm ierror collective operation marks communication object deallocation 
handle set mpi comm null 
pending operations communicator complete normally object deallocated active 
call applies intra inter communicators 
delete callback functions cached attributes see section called arbitrary order 
advice implementors 
count mechanism may count incremented call mpi comm dup decremented call mpi comm free 
object ultimately deallocated count reaches zero 
collective anticipated operation normally implemented local debugging version mpi library choose synchronize 
advice implementors 
motivating examples current practice example main int argc char argv int size 
argc argv mpicommrank mpicommworld mpicommworld size void printf process size size 
example program initializes legally refers communicator prints message 
terminates legally 
example imply mpi supports printf communication 
example supposing size main int argc char argv int size int 
argc argv mpicommrank mpicommworld local 
motivating examples mpicommworld size local send highest numbered process size mpisend mpicommworld mpirecv mpicommworld 
example schematically illustrates message exchanges odd processes communicator 
current practice main int argc char argv int count void data 
argc argv mpicommrank mpicommworld get input create buffer data 
data count mpicommworld 
example illustrates collective communication 
approximate current practice main int argc char argv int count count chapter 
groups contexts communicators void sendbuf recvbuf sendbuf recvbuf mpicomm static int ranks 
argc argv mpicommworld mpicommrank mpicommworld local ranks local mpicommworld compute slave 
sendbuf count mpiint 
zero falls immediately reduce 
sendbuf count mpiint mpicommworld example illustrates group consisting zeroth process group created communicator formed new group 
new communicator collective call processes execute collective call mpi comm world context 
example illustrates communicators inherently possess distinct contexts protect communication 
communication mpi comm world insulated communication vice versa 
summary group safety achieved communicators distinct contexts communicators enforced unique process 
example example meant illustrate safety point point collective communication 
mpi guarantees single communicator safe point point collective communication 
define define main int argc char argv 
motivating examples int request status subgroup int ranks mpicomm 
argc argv mpicommworld ranks subgroup local subgroup local mpicommworld subgroup buff count request buff count request request status subgroup library example main program main int argc char argv int done void dataset dataset 
argc argv mpicommworld mpicommworld dataset chapter 
groups contexts communicators dataset done 
mpicommworld 
see done user library initialization code void mpicomm comm handle save save local comm save 
comm inits 
handle save user start code void handle void data handle comm handle 
handle comm handle 
user communication clean code void handle status handle 
status handle 
status 
motivating examples user object clean code void handle handle 
comm free handle library example main program main int argc char argv int ma mb mpicomm comma static int lista defined example defined example static int example static int endif int sizeof lista sizeof int int sizeof sizeof int 
argc argv mpicommworld lista mpicommworld comma mpicommworld comma mpicommrank comma ma comma mpicommrank mb comma comma chapter 
groups contexts communicators comma comma library void mpicomm comm int done mpicommrank comm done mpirecv comm mpisend comm 
ifdef example include resp exclude safety resp safety comm endif example really examples depending includes rank list synchronize included lib call 
example illustrates despite contexts subsequent calls lib call context need safe colloquially back masking 
safety realized mpi barrier added 
demonstrates libraries written carefully contexts 
rank excluded synchronize needed get safety back masking 
algorithms reduce strong source selectivity properties inherently okay provided mpi provides basic guarantees 
multiple calls typical tree broadcast algorithm root different roots see 
rely guarantees mpi pairwise ordering messages processes context source selectivity deleting feature removes guarantee required 

inter communication algorithms try non deterministic broadcasts calls include wildcard operations generally properties deterministic implementations reduce broadcast 
algorithms utilize monotonically increasing tags communicator scope keep things straight 
foregoing supposition collective calls implemented point topoint operations 
mpi implementations may may implement collective calls point point operations 
algorithms illustrate issues correctness safety independent mpi implements collective calls 
see section 
inter communication section introduces concept inter communication describes portions mpi support 
describes support writing programs contain user level servers 
point point communication described far involved communication processes members group 
type communication called intra communication communicator called intra communicator noted earlier chapter 
modular multi disciplinary applications different process groups execute distinct modules processes different modules communicate pipeline general module graph 
applications natural way process specify target process rank target process target group 
applications contain internal user level servers server may process group provides services clients client may process group uses services servers 
natural specify target process rank target group applications 
type communication called inter communication communicator called inter communicator introduced earlier 
inter communication point point communication processes different groups 
group containing process initiates inter communication operation called local group sender send receiver receive 
group containing target process called remote group receiver send sender receive 
intra communication target process specified communicator rank pair 
intra communication rank relative second remote group 
inter communicator constructors blocking require local remote groups disjoint order avoid deadlock 
summary properties inter communication inter communicators ffl syntax point point communication inter 
communicator send receive operations 
ffl target process addressed rank remote group sends receives 
ffl communications inter communicator guaranteed conflict communications different communicator 
chapter 
groups contexts communicators ffl inter communicator collective communication 
ffl communicator provide intra inter communication 
routine mpi comm test inter may determine communicator inter intra communicator 
inter communicators arguments communicator access routines 
inter communicators input constructor routines intra communicators instance mpi comm create 
advice implementors 
purpose point point communication communicators represented process tuple consisting group send context receive context source inter communicators group describes remote group source rank process local group 
intra communicators group communicator group remote local source rank process group send context receive context identical 
group represented rank address translation table 
inter communicator discussed sensibly considering processes local remote groups 
imagine process group cp process group inter communicator cq ffl cp group describes group cq group describes group ffl cp send context cq receive context context unique cp receive context cq send context context unique ffl cp source rank cq source rank assume sends message inter communicator 
uses group table find absolute address source send context appended message 
assume posts receive explicit source argument 
matches receive context message context source argument message source 
algorithm appropriate intra communicators 
order support inter communicator accessors constructors necessary supplement model additional structures store information local communication group additional safe contexts 
advice implementors 

inter communication inter communicator accessors mpi comm test inter comm flag comm communicator handle flag logical int mpi comm test inter mpi comm comm int flag mpi comm test inter comm flag ierror integer comm ierror logical flag local routine allows calling process determine communicator intra communicator 
returns true inter communicator false 
inter communicator input argument communicator accessors described intra communication table describes behavior 
mpi comm function behavior inter communication mode mpi comm size returns size local group 
mpi comm group returns local group 
mpi comm rank returns rank local group furthermore operation mpi comm compare valid inter communicators 
communicators intra inter communicators mpi unequal results 
corresponding local remote groups compare correctly get results mpi congruent mpi similar 
particular possible mpi similar result local remote groups similar identical 
accessors provide consistent access remote group local operations 
mpi comm remote size comm size comm inter communicator handle size number processes remote group comm integer int mpi comm remote size mpi comm comm int size mpi comm remote size comm size ierror integer comm size ierror chapter 
groups contexts communicators mpi comm remote group comm group comm inter communicator handle group remote group corresponding comm handle int mpi comm remote group mpi comm comm mpi group group mpi comm remote group comm group ierror integer comm group ierror rationale 
symmetric access local remote groups important function mpi comm remote size provided 
rationale 
inter communicator operations section introduces blocking inter communicator operations 
mpi bind intra communicators inter communicator function mpi intercomm merge creates intra communicator merging local remote groups inter communicator 
comm dup comm free introduced previously duplicate free inter communicator respectively 
overlap local remote groups bound inter communicator prohibited 
overlap program erroneous deadlock 
process multithreaded mpi calls block thread process dual membership supported 
user responsibility sure calls behalf roles process executed independent threads 
function mpi intercomm create create inter communicator existing intra communicators situation selected member group group leader ability communicate selected member group peer communicator exists leaders belong leader knows rank leader peer communicator leaders process 
furthermore members group know rank leader 
construction inter communicator intra communicators requires separate collective operations local group remote group point point communication process local group process remote group 
standard mpi implementations static process allocation initialization mpi comm world communicator preferably dedicated duplicate thereof peer communicator 
dynamic mpi implementations example process may spawn new child processes mpi execution parent process may bridge old communication universe new communication world includes parent children 
application topology functions described chapter apply 
users require capability utilize mpi intercomm merge build intra communicator apply graph cartesian topology capabilities intra communicator creating appropriate topology oriented intra communicator 
alternatively may reasonable devise application topology mechanisms case loss generality 

inter communication mpi intercomm create local comm local leader peer comm remote leader tag local comm local intra communicator handle local leader rank local group leader local comm integer peer comm peer communicator significant local leader handle remote leader rank remote group leader peer comm significant local leader integer tag safe tag integer new inter communicator handle int mpi intercomm create mpi comm local comm int local leader mpi comm peer comm int remote leader int tag mpi comm mpi intercomm create local comm local leader peer comm remote leader tag ierror integer local comm local leader peer comm remote leader tag ierror call creates inter communicator 
collective union local remote groups 
processes provide identical local comm local leader arguments group 
wildcards permitted remote leader local leader tag 
call uses point point communication communicator peer comm tag tag leaders 
care taken pending communication peer comm interfere communication 
advice users 
recommend dedicated peer communicator duplicate mpi comm world avoid trouble peer communicators 
advice users 
mpi intercomm merge intercomm high intercomm inter communicator handle high logical new intra communicator handle int mpi intercomm merge mpi comm intercomm int high mpi comm mpi intercomm merge intercomm high ierror integer intercomm ierror logical high function creates intra communicator union groups associated intercomm 
processes provide high value chapter 
groups contexts communicators group group group group pipeline 
groups 
processes group provided value high false processes group provided value high true union orders low group high group 
processes provided high argument order union arbitrary 
call blocking collective union groups 
advice implementors 
implementation mpi intercomm merge mpi comm free mpi comm dup similar implementation mpi intercomm create contexts private input inter communicator communication group leaders contexts inside bridge communicator 
advice implementors 
inter communication examples example group pipeline groups communicate 
groups communicate 
group requires inter communicator group requires inter communicators group requires inter communicator 
main int argc char argv mpicomm intra communicator local sub group mpicomm inter communicator mpicomm second inter communicator group int int rank argc argv mpicommrank mpicommworld rank user code generate range rank build intra communicator local sub group mpicommworld rank build inter communicators 
tags hard coded 
group communicates group 
mpicommworld 
inter communication group group group group ring 
group communicates groups 
mpicommworld mpicommworld group communicates group 
mpicommworld 
switch free communicators appropriately case case case break example group ring groups communicate 
groups communicate 
groups communicate 
requires inter communicators 
main int argc char argv mpicomm intra communicator local sub group mpicomm inter communicators chapter 
groups contexts communicators mpicomm status int int rank argc argv mpicommrank mpicommworld rank 
user code generate range rank build intra communicator local sub group mpicommworld rank build inter communicators 
tags hard coded 
group communicates groups 
mpicommworld mpicommworld group communicates groups 
mpicommworld mpicommworld group communicates groups 
mpicommworld mpicommworld 
free communicators terminating 

inter communication example building name service procedures exemplify process user create name service building rendezvous involving server communicator tag name selected groups 
mpi processes execute mpi init process calls example function init server defined 
new world returned null process getting null required implement server function reactive loop server 
just prescribed computation new world new effective global communicator 
designated process calls undo server get rid server needed longer 
features approach include ffl support multiple name servers ffl ability scope name servers specific processes ffl ability servers come go desired 
define define static int attribute management copy callback void mpicomm int keyval void void void int flag copy handle flag indicate copy happen int mpicomm int mpicomm mpicomm new effective world sans server mpicomm int size color key int mpicommrank size size size return chapter 
groups contexts communicators create communicators splitting server process size arbitrary choice color color key color key attach communication attribute critical section multithreading acquire process local name server keyval null null cache handle intra communicator inter communicator void return 
inter communication actual server process commit running code int mpicomm void int enqueue dequeue keep triplets integers matching fns shown mpicomm comm status int int int buffer count void queue queue mpirecv buffer count mpiint status accept client determine client status status buffer client terminates server dequeue queue break dequeue queue matched pair tag tell 
buffer mpisend buffer mpiint chapter 
groups contexts communicators buffer mpisend buffer mpiint enqueue queue particular process responsible server longer needed 
call undo server terminate server function 
int example client ends server mpicomm int buffer mpisend buffer mpiint blocking name service inter communication semantic restrictions mpi intercomm create simplified syntax 
uses functionality just defined create name service 
int tag comm mpicomm int tag mpicomm comm int error int attribute acquisition mgmt comm void val mpicomm int buffer rank int val mpicomm val retrieve cached handle mpicommrank rank rank local group rank 
caching buffer rank mpisend buffer mpiint tag mpirecv buffer mpiint tag error buffer tag comm return error caching mpi provides caching facility allows application attach arbitrary pieces information called attributes communicators 
precisely caching facility allows portable library ffl pass information calls associating mpi intra inter communicator ffl quickly retrieve information ffl guaranteed date information retrieved communicator freed handle subsequently reused mpi 
caching capabilities form required built mpi routines collective communication application topology 
defining interface capabilities part mpi standard valuable permits routines collective communication application topologies implemented portable code mpi extensible allowing user written routines standard mpi calling sequences 
advice users 
communicator mpi comm self suitable choice posting process local attributes attributing caching mechanism 
advice users 
functionality attributes attached communicators 
attributes local process specific communicator attached 
attributes propagated mpi communicator communicator duplicated mpi comm dup application give specific permission callback functions attribute copied 
advice users 
attributes type void 
typically attribute pointer structure contains information handle mpi object 
fortran attributes type integer 
attribute handle mpi object just integer valued attribute 
advice users 
chapter 
groups contexts communicators advice implementors 
attributes scalar values equal size larger language pointer 
attributes hold mpi handle 
advice implementors 
caching interface defined represents attributes stored mpi communicator 
accessor functions include ffl obtain key value identify attribute user specifies callback functions mpi informs application communicator destroyed copied 
ffl store retrieve value attribute advice implementors 
caching callback functions called synchronously response explicit application requests 
avoid problems result repeated crossings user system space 
synchronous calling rule general property mpi 
choice key values control mpi 
allows mpi optimize implementation attribute sets 
avoids conflict independent modules caching information communicators 
smaller interface consisting just callback facility allow entire caching facility implemented portable code 
minimal callback interface form table searching implied need handle arbitrary communicators 
contrast complete interface defined permits rapid access attributes pointers communicators find attribute table cleverly chosen key values retrieve individual attributes 
light efficiency hit inherent minimal interface complete interface defined seen superior 
advice implementors 
mpi provides services related caching 
process local 
mpi keyval create copy fn delete fn keyval extra state copy fn copy callback function keyval delete fn delete callback function keyval keyval key value access integer extra state extra state callback functions int mpi keyval create mpi copy function copy fn mpi delete function delete fn int keyval void extra state mpi keyval create copy fn delete fn keyval extra state ierror external copy fn delete fn integer keyval extra state ierror generates new attribute key 
keys locally unique process opaque user explicitly stored integers 
allocated key value associate attributes access locally defined communicator 
copy fn function invoked communicator duplicated mpi comm dup 
copy fn type mpi copy function defined follows 
caching typedef int mpicomm int keyval void void void int flag fortran declaration function follows subroutine copy function keyval extra state attribute val attribute val flag ierr integer keyval extra state attribute val attribute val ierr logical flag copy callback function invoked key value arbitrary order 
call copy callback key value corresponding attribute 
returns flag attribute deleted duplicated communicator 
flag new attribute value set value returned attribute val 
function returns mpi success success error code failure case mpi comm dup fail 
copy fn may specified mpi null copy fn mpi dup fn fortran mpi null copy fn function returning flag mpi success 
mpi dup fn simple minded copy function sets flag returns value attribute val attribute val returns mpi success 
advice users 
formal arguments attribute val attribute val type void usage differs 
copy function passed mpi attribute val value attribute attribute val address attribute allow function return new attribute value 
type void avoid messy type casts 
valid copy function completely duplicates information making full duplicate copy data structures implied attribute just data structure count mechanism 
types attributes copy specific 
advice users 
advice implementors 
interface assumed copy delete functions associated key values created fortran calling interface assumed key values created fortran 
advice implementors 
analogous copy fn callback deletion function defined follows 
delete fn function invoked communicator deleted mpi comm free call explicitly mpi attr delete 
delete fn type mpi delete function defined follows typedef int mpicomm comm int keyval void void fortran declaration function follows subroutine delete function comm keyval attribute val extra state ierr integer comm keyval attribute val extra state ierr chapter 
groups contexts communicators function called mpi comm free mpi attr delete mpi attr put needed remove attribute 
function returns mpi success success error code failure case mpi comm free fail 
delete fn may specified mpi null delete fn fortran mpi null delete fn function returning mpi success 
special key value mpi keyval invalid returned mpi keyval create 
static initialization key values 
mpi keyval free keyval inout keyval frees integer key value integer int mpi keyval free int keyval mpi keyval free keyval ierror integer keyval ierror frees extant attribute key 
function sets value keyval mpi keyval invalid 
note erroneous free attribute key actual free communicators process key freed 
need freed program calls mpi attr delete free attribute instance calls mpi comm free free attribute instances associated freed communicator 
mpi attr put comm keyval attribute val comm communicator attribute attached handle keyval key value returned mpi keyval create integer attribute val attribute value int mpi attr put mpi comm comm int keyval void attribute val mpi attr put comm keyval attribute val ierror integer comm keyval attribute val ierror function stores stipulated attribute value attribute val subsequent retrieval mpi attr get 
value outcome mpi called delete previous value callback function delete fn executed new value stored 
call erroneous key value keyval particular mpi keyval invalid erroneous key value 
call fail delete fn function returned error code mpi success 

caching mpi attr get comm keyval attribute val flag comm communicator attribute attached handle keyval key value integer attribute val attribute value flag false flag true attribute value extracted false attribute associated key int mpi attr get mpi comm comm int keyval void attribute val int flag mpi attr get comm keyval attribute val flag ierror integer comm keyval attribute val ierror logical flag retrieves attribute value key 
call erroneous key value keyval 
hand call correct key value exists attribute attached comm key case call returns flag false 
particular mpi keyval invalid erroneous key value 
advice users 
call mpi attr put passes attribute val value attribute call mpi attr get passes attribute val address location attribute value returned 
attribute value pointer type void actual attribute val parameter mpi attr put type void actual attribute val parameter mpi attr put type void 
advice users 
rationale 
formal parameter attribute val type void void avoids messy type casting needed attribute value declared type void 
rationale 
mpi attr delete comm keyval comm communicator attribute attached handle keyval key value deleted attribute integer int mpi attr delete mpi comm comm int keyval mpi attr delete comm keyval ierror integer comm keyval ierror delete attribute cache key 
function invokes attribute delete function delete fn specified keyval created 
call fail delete fn function returns error code mpi success 
communicator replicated function mpi comm dup callback copy functions attributes currently set invoked arbitrary order 
communicator deleted function mpi comm free callback delete functions attributes currently set invoked 
chapter 
groups contexts communicators attributes example advice users 
example shows write collective communication operation uses caching efficient call 
coding style assumes mpi function results return error statuses 
advice users 
key module stuff static int typedef struct int refcount count stuff want comm 
mpicomm comm group int comm group get key call void get key assigning copy delete callback behavior 
comm comm module executed group 
cached information group cached 

allocate storage stuff want initialize count malloc sizeof 
caching null abort memory error 
refcount second fill want 
part isn shown third store attribute value comm case contents global op 
routine called mpi group freed comm keyval extra mpicomm comm int keyval void extra keyval abort programming error group freed removes 
refcount remain free storage 
refcount free void routine called mpi group copied comm keyval extra flag mpicomm comm int keyval void extra keyval abort programming error new group adds 
refcount chapter 
groups contexts communicators formalizing loosely synchronous model section statements loosely synchronous model particular attention intra communication 
basic statements caller passes communicator contains context group callee communicator free side effects execution subprogram active operations communicator involve process 
provides model libraries written safely 
libraries designated callee permission communication likes communicator guarantee knows communications interfere 
permit implementations create new communicators synchronization preallocated contexts communicators impose significant overhead 
form safety analogous common computer science usages passing descriptor array library routine 
library routine right expect descriptor valid modifiable 
models execution loosely synchronous model transfer control parallel procedure effected having executing process invoke procedure 
invocation collective operation executed processes execution group invocations similarly ordered processes 
invocation need synchronized 
say parallel procedure active process process belongs group may collectively execute procedure member group currently executing procedure code 
parallel procedure active process process may receiving messages pertaining procedure currently execute code procedure 
static communicator allocation covers case point time invocation parallel procedure active process group executing processes fixed 
example invocations parallel procedures involve processes processes singlethreaded recursive invocations 
case communicator statically allocated procedure 
static allocation done preamble part initialization code 
parallel procedures organized libraries procedure library concurrently active processor sufficient allocate communicator library 
dynamic communicator allocation calls parallel procedures nested new parallel procedure invoked subset group executing parallel procedure 
processes execute parallel procedure execution stack 

formalizing loosely synchronous model case new communicator needs dynamically allocated new invocation parallel procedure 
allocation done caller 
new communicator generated call mpi comm dup callee execution group identical caller execution group call mpi comm split caller execution group split subgroups executing distinct parallel routines 
new communicator passed argument invoked routine 
need generating new communicator invocation alleviated avoided altogether cases execution group split allocate stack communicators preamble manage stack way mimics stack recursive calls 
take advantage ordering property communication avoid confusing caller callee communication communicator 
needs abide rules ffl messages sent procedure call return procedure received matching call return receiving ffl messages selected source mpi source 
general case general case may multiple concurrently active invocations parallel procedure group invocations may nested 
new communicator needs created invocation 
user responsibility sure distinct parallel procedures invoked concurrently overlapping sets processes communicator creation properly coordinated 
chapter process topologies chapter discusses mpi topology mechanism 
topology extra optional attribute give intra communicator topologies added 
topology provide convenient naming mechanism processes group communicator additionally may assist runtime system mapping processes hardware 
stated chapter process group mpi collection processes 
process group assigned rank 
parallel applications linear ranking processes adequately reflect logical communication pattern processes usually determined underlying problem geometry numerical algorithm 
processes arranged topological patterns dimensional grids 
generally logical process arrangement described graph 
chapter refer logical process arrangement virtual topology 
clear distinction virtual process topology topology underlying physical hardware 
virtual topology exploited system assignment processes physical processors helps improve communication performance machine 
mapping done outside scope mpi 
description virtual topology hand depends application machine independent 
functions proposed chapter deal machine independent mapping 
rationale 
physical mapping discussed existence virtual topology information may advice runtime system 
wellknown techniques mapping grid torus structures hardware topologies hypercubes grids 
complicated graph structures heuristics yield nearly optimal results 
hand way user specify logical process arrangement virtual topology random mapping result 
machines lead unnecessary contention interconnection network 
details predicted measured performance improvements result process processor mapping modern wormhole routing architectures 
possible performance benefits virtual topology function convenient process naming structure tremendous benefits program readability 
virtual topologies notational power message passing programming 
rationale 
virtual topologies communication pattern set processes represented graph 
nodes stand processes edges connect processes communicate 
mpi provides message passing pair processes group 
requirement opening channel explicitly 
missing link user defined process graph prevent corresponding processes exchanging messages 
means connection neglected virtual topology 
strategy implies topology gives convenient way naming pathway communication 
possible consequence automatic mapping tool exists runtime environment take account edge mapping 
edges communication graph weighted processes simply connected connected 
rationale 
experience similar techniques show information usually sufficient mapping 
additionally precise specification difficult user set interface functions substantially complicated 
rationale 
specifying virtual topology terms graph sufficient applications 
applications graph structure regular detailed set graph inconvenient user efficient run time 
large fraction parallel applications process topologies rings higher dimensional grids tori 
structures completely defined number dimensions numbers processes coordinate direction 
mapping grids tori generally easier problem general graphs 
desirable address cases explicitly 
process coordinates cartesian structure numbering 
row major numbering processes cartesian structure 
means example relation group rank coordinates processes theta grid follows 
coord rank coord rank coord rank coord rank embedding mpi support virtual topologies defined chapter consistent parts mpi possible functions defined 
topology information associated communicators 
added communicators caching mechanism described chapter 
chapter 
process topologies overview functions functions mpi graph create mpi cart create create general graph virtual topologies cartesian topologies respectively 
topology creation functions collective 
collective calls program written correctly call synchronizes 
topology creation functions take input existing communicator comm old defines set processes topology mapped 
new communicator comm created carries topological structure cached information see chapter 
analogy function mpi comm create cached information propagates comm old comm 
mpi cart create describe cartesian structures arbitrary dimension 
coordinate direction specifies process structure periodic 
note dimensional hypercube dimensional torus processes coordinate direction 
special support hypercube structures necessary 
local auxiliary function mpi dims create compute balanced distribution processes number dimensions 
rationale 
similar functions contained express 
rationale 
function mpi topo test inquire topology associated communicator 
topological information extracted communicator functions mpi get mpi graph get general graphs mpi get mpi cart get cartesian topologies 
additional functions provided manipulate cartesian topologies functions mpi cart rank mpi cart coords translate cartesian coordinates group rank vice versa function mpi cart sub extract cartesian subspace analogous mpi comm split 
function mpi cart shift provides information needed communicate neighbors cartesian dimension 
functions mpi graph neighbors count mpi graph neighbors extract neighbors node graph 
function mpi cart sub collective input communicator group functions local 
additional functions mpi graph map mpi cart map section 
general functions called user directly 
communicator manipulation functions chapter sufficient implement topology functions 
section outlines implementation 

topology constructors topology constructors cartesian constructor mpi cart create comm old ndims dims periods reorder comm cart comm old input communicator handle ndims number dimensions cartesian grid integer dims integer array size ndims specifying number processes dimension periods logical array size ndims specifying grid periodic true false dimension reorder ranking may reordered true false logical comm cart communicator new cartesian topology handle int mpi cart create mpi comm comm old int ndims int dims int periods int reorder mpi comm comm cart mpi cart create comm old ndims dims periods reorder comm cart ierror integer comm old ndims dims comm cart ierror logical periods reorder mpi cart create returns handle new communicator cartesian topology information attached 
reorder false rank process new group identical rank old group 
function may reorder processes possibly choose embedding virtual topology physical machine 
total size cartesian grid smaller size group comm processes returned mpi comm null analogy mpi comm split 
call erroneous specifies grid larger group size 
cartesian convenience function mpi dims create cartesian topologies function mpi dims create helps user select balanced distribution processes coordinate direction depending number processes group balanced optional constraints specified user 
partition processes size mpi comm world group dimensional topology 
mpi dims create nnodes ndims dims nnodes number nodes grid integer ndims number cartesian dimensions integer inout dims integer array size ndims specifying number nodes dimension int mpi dims create int nnodes int ndims int dims chapter 
process topologies mpi dims create nnodes ndims dims ierror integer nnodes ndims dims ierror entries array dims set describe cartesian grid ndims dimensions total nnodes nodes 
dimensions set close possible appropriate divisibility algorithm 
caller may constrain operation routine specifying elements array dims 
dims set positive number routine modify number nodes dimension entries dims modified call 
negative input values dims erroneous 
error occur nnodes multiple dims dims 
dims set call dims ordered non increasing order 
array dims suitable input routine mpi cart create 
mpi dims create local 
example dims function call dims call return mpi dims create dims mpi dims create dims mpi dims create dims mpi dims create dims erroneous call general graph constructor mpi graph create comm old nnodes index edges reorder comm graph comm old input communicator handle nnodes number nodes graph integer index array integers describing node degrees see edges array integers describing graph edges see reorder ranking may reordered true false logical comm graph communicator graph topology added handle int mpi graph create mpi comm comm old int nnodes int index int edges int reorder mpi comm comm graph mpi graph create comm old nnodes index edges reorder comm graph ierror integer comm old nnodes index edges comm graph ierror logical reorder mpi graph create returns handle new communicator graph topology information attached 
reorder false rank process new group identical rank old group 
function may reorder 
topology constructors processes 
size nnodes graph smaller size group comm processes returned mpi comm null analogy mpi cart create mpi comm split 
call erroneous specifies graph larger group size input communicator 
parameters nnodes index edges define graph structure 
nnodes number nodes graph 
nodes numbered nnodes 
ith entry array index stores total number neighbors graph nodes 
lists neighbors nodes nnodes stored consecutive locations array edges 
array edges flattened representation edge lists 
total number entries index nnodes total number entries edges equal number graph edges 
definitions arguments nnodes index edges illustrated simple example 
example assume processes adjacency matrix process neighbors input arguments nnodes index edges index degree node zero index index degree node nnodes list neighbors node zero stored edges index gamma list neighbors node stored edges index gamma index gamma 
fortran index degree node zero index index degree node nnodes list neighbors node zero stored edges index list neighbors node stored edges index index 
advice implementors 
topology information stored communicator ffl type topology cartesian graph ffl cartesian topology 
ndims number dimensions 
dims numbers processes coordinate direction 
periods periodicity information 
position grid computed rank dims ffl graph topology chapter 
process topologies 
index 
edges vectors defining graph structure 
graph structure number nodes equal number processes group 
number nodes stored explicitly 
additional zero entry start array index simplifies access topology information 
advice implementors 
topology inquiry functions topology defined functions topology information looked inquiry functions 
local calls 
mpi topo test comm status comm communicator handle status topology type communicator comm choice int mpi topo test mpi comm comm int status mpi topo test comm status ierror integer comm status ierror function mpi topo test returns type topology assigned communicator 
output value status mpi graph graph topology mpi cart cartesian topology mpi undefined topology mpi get comm nnodes comm communicator group graph structure handle nnodes number nodes graph integer number processes group number edges graph integer int mpi get mpi comm comm int nnodes int mpi get comm nnodes ierror integer comm nnodes ierror functions mpi get mpi graph get retrieve graph topology information associated communicator mpi graph create 
information provided mpi get dimension vectors index edges correctly call mpi graph get 

topology constructors mpi graph get comm index edges comm communicator graph structure handle length vector index calling program integer length vector edges calling program integer index array integers containing graph structure details see definition mpi graph create edges array integers containing graph structure int mpi graph get mpi comm comm int int int index int edges mpi graph get comm index edges ierror integer comm index edges ierror mpi get comm ndims comm communicator cartesian structure handle ndims number dimensions cartesian structure integer int mpi get mpi comm comm int ndims mpi get comm ndims ierror integer comm ndims ierror functions mpi get mpi cart get return cartesian topology information associated communicator mpi cart create 
mpi cart get comm dims periods coords comm communicator cartesian structure handle length vectors dims periods coords calling program integer dims number processes cartesian dimension array integer periods periodicity true false cartesian dimension array logical coords coordinates calling process cartesian structure array integer int mpi cart get mpi comm comm int int dims int periods int coords chapter 
process topologies mpi cart get comm dims periods coords ierror integer comm dims coords ierror logical periods mpi cart rank comm coords rank comm communicator cartesian structure handle coords integer array size ndims specifying cartesian coordinates process rank rank specified process integer int mpi cart rank mpi comm comm int coords int rank mpi cart rank comm coords rank ierror integer comm coords rank ierror process group cartesian structure function mpi cart rank translates logical process coordinates process ranks point point routines 
dimension periods true coordinate coords range coords coords dims shifted back interval coords dims automatically 
range coordinates erroneous non periodic dimensions 
mpi cart coords comm rank coords comm communicator cartesian structure handle rank rank process group comm integer length vector coord calling program integer coords integer array size ndims containing cartesian coordinates specified process integer int mpi cart coords mpi comm comm int rank int int coords mpi cart coords comm rank coords ierror integer comm rank coords ierror inverse mapping rank coordinates translation provided mpi 

topology constructors mpi graph neighbors count comm rank comm communicator graph topology handle rank rank process group comm integer number neighbors specified process integer int mpi graph neighbors count mpi comm comm int rank int mpi graph neighbors count comm rank ierror integer comm rank ierror mpi graph neighbors count mpi graph neighbors provide adjacency information general graph topology 
mpi graph neighbors comm rank neighbors comm communicator graph topology handle rank rank process group comm integer size array neighbors integer neighbors ranks processes neighbors specified process array integer int mpi graph neighbors mpi comm comm int rank int int neighbors mpi graph neighbors comm rank neighbors ierror integer comm rank neighbors ierror example suppose comm communicator shuffle exchange topology 
group members 
process labeled neighbors exchange gamma gamma shuffle gamma graph adjacency list illustrated 
node exchange shuffle neighbors neighbors neighbors suppose communicator comm topology associated 
code fragment cycles types neighbors performs appropriate permutation 
chapter 
process topologies assume process stored real number extract neighborhood information call mpicommrank comm myrank ierr call comm myrank neighbors ierr perform exchange permutation call mpireal neighbors neighbors comm status ierr perform shuffle permutation call mpireal neighbors neighbors comm status ierr perform permutation call mpireal neighbors neighbors comm status ierr cartesian shift coordinates process topology cartesian structure mpi operation coordinate direction perform shift data 
input mpi takes rank source process receive rank destination process send 
function mpi cart shift called cartesian process group provides calling process identifiers passed mpi 
user specifies coordinate direction size step positive negative 
function local 
mpi cart shift comm direction disp rank source rank dest comm communicator cartesian structure handle direction coordinate dimension shift integer disp displacement 
upwards shift downwards shift integer rank source rank source process integer rank dest rank destination process integer int mpi cart shift mpi comm comm int direction int disp int rank source int rank dest mpi cart shift comm direction disp rank source rank dest ierror integer comm direction disp rank source rank dest ierror direction argument indicates dimension shift coordinate value modified shift 
coordinates numbered ndims ndims number dimensions 
depending periodicity cartesian group specified coordinate direction mpi cart shift provides identifiers circular shift 
case shift value mpi proc null may returned rank source rank dest indicating source destination shift range 

topology constructors example communicator comm dimensional periodic cartesian topology associated 
dimensional array reals stored element process variable wishes skew array shifting column vertically column steps 
find process rank call mpicommrank comm rank ierr find cartesian coordinates call comm rank coords ierr compute shift source destination call comm coords source dest ierr skew array call mpireal dest source comm status ierr advice users 
fortran dimension indicated direction dims nodes dims array create grid 
dimension indicated direction dimension specified dims 
advice users 
partitioning cartesian structures mpi cart sub comm remain dims newcomm comm communicator cartesian structure handle remain dims ith entry remain dims specifies ith dimension kept subgrid true dropped false logical vector newcomm communicator containing subgrid includes calling process handle int mpi cart sub mpi comm comm int remain dims mpi comm newcomm mpi cart sub comm remain dims newcomm ierror integer comm newcomm ierror logical remain dims cartesian topology created mpi cart create function mpi cart sub partition communicator group subgroups form lower dimensional cartesian build subgroup communicator associated subgrid cartesian topology 
function closely related mpi comm split 
example assume mpi cart create comm defined theta theta grid 
remain dims true false true 
call comm chapter 
process topologies create communicators processes theta cartesian topology 
remain dims false false true call mpi cart sub comm remain dims comm new create non overlapping communicators processes dimensional cartesian topology 
low level topology functions additional functions introduced section implement topology functions 
general called user directly creating additional virtual topology capability provided mpi 
mpi cart map comm ndims dims periods comm input communicator handle ndims number dimensions cartesian structure integer dims integer array size ndims specifying number processes coordinate direction periods logical array size ndims specifying periodicity specification coordinate direction reordered rank calling process mpi undefined calling process belong grid integer int mpi cart map mpi comm comm int ndims int dims int periods int mpi cart map comm ndims dims periods ierror integer comm ndims dims ierror logical periods mpi cart map computes optimal placement calling process physical machine 
possible implementation function return rank calling process perform reordering 
advice implementors 
function mpi cart create comm ndims dims periods reorder comm cart reorder true implemented calling mpi cart map comm ndims dims periods calling mpi comm split comm color key comm cart color mpi undefined color mpi undefined key 
function mpi cart sub comm remain dims comm new implemented call mpi comm split comm color key comm new single number encoding lost dimensions color single number encoding preserved dimensions key 
cartesian topology functions implemented locally topology information cached communicator 
advice implementors 
corresponding new function general graph structures follows 

application example mpi graph map comm nnodes index edges comm input communicator handle nnodes number graph nodes integer index integer array specifying graph structure see mpi graph create edges integer array specifying graph structure reordered rank calling process mpi undefined calling process belong graph integer int mpi graph map mpi comm comm int nnodes int index int edges int mpi graph map comm nnodes index edges ierror integer comm nnodes index edges ierror advice implementors 
function mpi graph create comm nnodes index edges reorder comm graph reorder true implemented calling mpi graph map comm nnodes index edges calling mpi comm split comm color key comm graph color mpi undefined color mpi undefined key 
graph topology functions implemented locally topology information cached communicator 
advice implementors 
application example example example shows grid definition inquiry functions application program 
partial differential equation instance poisson equation solved rectangular domain 
processes organize dimensional structure 
process ranks neighbors directions right left 
numerical problem solved iterative method details hidden subroutine relax 
relaxation step process computes new values solution grid function points owned process 
values inter process boundaries exchanged neighboring processes 
example exchange subroutine contain call mpi send neigh rank 
send updated values left hand neighbor 
chapter 
process topologies integer ndims num neigh logical reorder parameter ndims num neigh reorder true 
integer comm comm cart dims ndims neigh def ndims ierr integer neigh rank num neigh position ndims logical periods ndims real data dims ndims comm mpi comm world set process grid size periodicity call mpi dims create comm ndims dims ierr periods true 
periods true 
create grid structure world group inquire position call mpi cart create comm ndims dims periods reorder comm cart ierr call mpi cart get comm cart ndims dims periods position ierr look ranks neighbors 
process coordinates 
neighbors position position neigh def neigh def call mpi cart rank comm cart neigh def neigh rank ierr neigh def neigh def call mpi cart rank comm cart neigh def neigh rank ierr neigh def neigh def call mpi cart rank comm cart neigh def neigh rank ierr neigh def neigh def call mpi cart rank comm cart neigh def neigh rank ierr initialize grid functions start iteration call init call relax exchange data neighbor processes call exchange comm cart neigh rank num neigh continue call output set process structure dimensional parallel poisson solver 
chapter mpi environmental management chapter discusses routines getting appropriate setting various parameters relate mpi implementation execution environment error handling 
procedures entering leaving mpi execution environment described 
implementation information environmental inquiries set attributes describe execution environment attached communicator mpi comm world mpi initialized 
value attributes function mpi attr get described chapter 
erroneous delete attributes free keys change values 
list predefined attribute keys include mpi tag ub upper bound tag value 
mpi host host process rank exists mpi proc null 
mpi io rank node regular facilities possibly myrank 
nodes communicator may return different values parameter 
mpi global boolean variable indicates clocks synchronized 
vendors may add implementation specific parameters node number real memory size virtual memory size predefined attributes change value mpi initialization mpi init mpi completion mpi finalize updated deleted users 
advice users 
note binding value returned attributes pointer int containing requested value 
advice users 
required parameter values discussed detail chapter 
mpi environmental management tag values tag values range value returned mpi tag ub inclusive 
values guaranteed unchanging execution mpi program 
addition tag upper bound value 
mpi implementation free value mpi tag ub larger example value gamma legal value mpi tag ub 
attribute mpi tag ub value processes mpi comm world 
host rank value returned mpi host gets rank host process group associated communicator mpi comm world 
mpi proc null returned host 
mpi specify means process host requires host exists 
attribute mpi host value processes mpi comm world 
io rank value returned mpi io rank processor provide language standard facilities 
fortran means fortran operations supported open rewind write 
means ansi operations supported fopen fprintf 
process provide language standard value mpi source returned 
calling process provide language standard rank returned 
process provide language standard rank process returned 
value need returned processes 
process provide language standard value mpi proc null returned 
advice users 
note input collective attribute indicate process provide input 
advice users 
clock synchronization value returned mpi global clocks processes mpi comm world synchronized 
collection clocks considered synchronized explicit effort taken synchronize 
expectation variation time measured calls mpi half round trip time mpi message length zero 
time measured process just send process just matching receive second time higher 
attribute mpi global need clocks synchronized attribute key mpi global valid 
attribute may associated communicators mpi comm world 
attribute mpi global value processes mpi comm world 

error handling mpi get processor name name name unique specifier actual opposed virtual node 
length printable characters result returned name int mpi get processor name char name int mpi get processor name name ierror character name integer ierror routine returns name processor called moment call 
name character string maximum flexibility 
value possible identify specific piece hardware possible values include processor rack mpp cs org actual processor number running homogeneous system 
argument name represent storage mpi max processor name characters long 
mpi get processor name may write characters name 
number characters written returned output argument 
rationale 
function allows mpi implementations process migration return current processor 
note mpi requires defines process migration definition mpi get processor name simply allows implementation 
rationale 
advice users 
user provide mpi max processor name space write processor name processor names long 
user examine ouput argument determine actual length name 
advice users 
constant mpi overhead provides upper bound fixed overhead message buffered call mpi see section 
error handling mpi implementation may choose handle errors occur mpi calls 
include errors generate exceptions traps floating point errors access violations 
set errors handled mpi 
error generates mpi exception 
text takes precedence text error handling document 
specifically text states errors handled read may handled 
user associate error handler communicator 
specified error handling routine mpi exception occurs call mpi communication communicator 
mpi calls related communicator considered attached communicator mpi comm world 
attachment error handlers communicators purely local different processes may attach different error handlers communicator 
chapter 
mpi environmental management newly created communicator inherits error handler associated parent communicator 
particular user specify global error handler communicators associating handler communicator mpi comm world immediately initialization 
predefined error handlers available mpi mpi errors fatal handler called causes program abort executing processes 
effect mpi abort called process invoked handler 
mpi errors return handler effect returning error code user 
implementations may provide additional predefined error handlers programmers code error handlers 
error handler mpi errors fatal associated default mpi initialization 
user chooses control error handling error mpi handles treated fatal 
mpi calls return error code user may choose handle errors main code testing return code mpi calls executing suitable recovery code call successful 
case error handler mpi errors return 
usually convenient efficient test errors mpi call error handled non trivial mpi error handler 
error detected state mpi undefined 
user defined error handler mpi errors return necessarily allow user continue mpi error detected 
purpose error handlers allow user issue user defined error messages take actions unrelated mpi flushing buffers program exits 
mpi implementation free allow mpi continue error required 
advice implementors 
quality implementation greatest possible extent circumscribe impact error normal processing continue error handler invoked 
implementation documentation provide information possible effect class errors 
advice implementors 
mpi error handler opaque object accessed handle 
mpi calls provided create new error handlers associate error handlers communicators test error handler associated communicator 
mpi errhandler create function errhandler function user defined error handling procedure errhandler mpi error handler handle int mpi errhandler create mpi handler function function mpi errhandler errhandler mpi errhandler create function handler ierror 
error handling external function integer errhandler ierror register user routine function mpi exception handler 
returns errhandler handle registered exception handler 
language user routine function type mpi handler function defined typedef void mpicomm int argument communicator 
second error code returned mpi routine raised error 
routine returned mpi err status error code returned status request caused error handler invoked 
remaining arguments arguments number meaning implementation dependent 
implementation clearly document arguments 
addresses handler may written fortran 
rationale 
variable argument list provided provides hook providing additional information error handler hook ansi prohibits additional arguments 
rationale 
mpi errhandler set comm errhandler comm communicator set error handler handle errhandler new mpi error handler communicator handle int mpi errhandler set mpi comm comm mpi errhandler errhandler mpi errhandler set comm errhandler ierror integer comm errhandler ierror associates new error handler communicator comm calling process 
note error handler associated communicator 
mpi errhandler get comm errhandler comm communicator get error handler handle errhandler mpi error handler currently associated communicator handle int mpi errhandler get mpi comm comm mpi errhandler errhandler mpi errhandler get comm errhandler ierror integer comm errhandler ierror returns errhandler handle error handler currently associated communicator comm 
example library function may register entry point current error handler communicator set private error handler communicator restore exiting previous error handler 
chapter 
mpi environmental management mpi errhandler free errhandler errhandler mpi error handler handle int mpi errhandler free mpi errhandler errhandler mpi errhandler free errhandler ierror integer errhandler ierror marks error handler associated errhandler deallocation sets errhandler mpi errhandler null 
error handler deallocated communicators associated deallocated 
mpi error string errorcode string errorcode error code returned mpi routine string text corresponds errorcode length printable characters result returned string int mpi error string int errorcode char string int mpi error string errorcode string ierror integer errorcode ierror character string returns error string associated error code class 
argument string represent storage mpi max error string characters long 
number characters written returned output argument 
rationale 
form function chosen fortran bindings similar 
version returns pointer string difficulties 
return string statically allocated different error message allowing pointers returned successive calls mpi error string point correct message 
second fortran function declared returning character referenced example print statement 
rationale 
error codes classes error codes returned mpi left entirely implementation exception mpi success 
done allow implementation provide information possible error code mpi error string 
possible application interpret error code routine mpi error class converts error code small set standard error codes called error classes 
valid error classes include 
error codes classes mpi success error mpi err buffer invalid buffer pointer mpi err count invalid count argument mpi err type invalid datatype argument mpi err tag invalid tag argument mpi err comm invalid communicator mpi err rank invalid rank mpi err request invalid request handle mpi err root invalid root mpi err group invalid group mpi err op invalid operation mpi err topology invalid topology mpi err dims invalid dimension argument mpi err arg invalid argument kind mpi err unknown unknown error mpi err truncate message truncated receive mpi err known error list mpi err intern internal mpi implementation error mpi err status error code status mpi err pending pending request mpi err error code error classes subset error codes mpi function may return error class number function mpi error string compute error string associated error class 
error codes satisfy mpi success mpi err mpi err rationale 
difference mpi err unknown mpi err mpi error string return useful information mpi err 
note mpi success necessary consistent practice separation error classes error codes allows define error classes way 
having known nice sanity check 
rationale 
mpi error class errorcode errorcode error code returned mpi routine error class associated errorcode int mpi error class int errorcode int mpi error class errorcode ierror integer errorcode ierror function mpi error class maps standard error code error class 
chapter 
mpi environmental management timers synchronization mpi defines timer 
timer specified message passing timing parallel programs important performance debugging existing timers posix fortran inconvenient provide adequate access high resolution timers 
mpi double mpi void double precision mpi mpi returns floating point number seconds representing elapsed wall clock time time past 
time past guaranteed change life process 
user responsible converting large numbers seconds units preferred 
function portable returns seconds ticks allows high resolution carries unnecessary baggage 
double starttime endtime starttime stuff timed endtime printf took seconds endtime starttime times returned local node called 
requirement different nodes return time 
see discussion mpi global 
mpi double mpi void double precision mpi mpi returns resolution mpi seconds 
returns double precision value number seconds successive clock ticks 
example clock implemented hardware counter incremented millisecond value returned mpi gamma startup goal mpi achieve source code portability 
mean program written mpi complying relevant language standards portable written require source code changes moved system 
explicitly say mpi program started launched 
startup command line user set environment mpi program run 
implementation may require setup performed mpi routines may called 
provide mpi includes initialization routine mpi init 
mpi init int mpi init int argc char argv mpi init ierror integer ierror routine called mpi routine 
called subsequent calls erroneous see mpi initialized 
mpi programs contain call mpi init routine called mpi routine apart mpi initialized called 
version ansi accepts argc argv provided arguments main int main argc argv int argc char argv argc argv parse arguments main program see fortran version takes ierror 
mpi implementation free require arguments binding arguments main 
rationale 
command line provided mpi init allow mpi implementation initializing mpi environment 
passed allow mpi implementation provide environments command line arguments provided main 
rationale 
mpi finalize int mpi finalize void mpi finalize ierror integer ierror routines cleans mpi state 
routine called mpi routine mpi init may called 
user ensure pending communications involving process completes process calls mpi finalize 
chapter 
mpi environmental management mpi initialized flag flag flag true mpi init called false 
int mpi initialized int flag mpi initialized flag ierror logical flag integer ierror routine may determine mpi init called 
routine may called mpi init called 
mpi abort comm errorcode comm communicator tasks abort errorcode error code return invoking environment int mpi abort mpi comm comm int errorcode mpi abort comm errorcode ierror integer comm errorcode ierror routine best attempt abort tasks group comm 
function require invoking environment take action error code 
unix posix environment handle return errorcode main program abort errorcode 
mpi implementations required define behavior mpi abort comm mpi comm world 
mpi implementations may ignore comm argument act comm mpi comm world 
rationale 
communicator argument provided allow extensions mpi environments example dynamic process management 
particular allows require mpi implementation abort subset mpi comm world 
rationale 
chapter profiling interface requirements meet mpi profiling interface implementation mpi functions 
provide mechanism mpi defined functions may accessed name shift 
mpi functions normally start prefix mpi accessible prefix 

ensure mpi functions replaced may linked executable image causing name clashes 

document implementation different language bindings mpi interface layered top profiler developer knows implement profile interface binding implementing lowest level routines 

implementation different language bindings done layered approach fortran binding set wrapper functions call implementation ensure wrapper functions separable rest library 
necessary allow separate profiling library correctly implemented unix linker semantics profiling library contain wrapper functions perform expected 
requirement allows person builds profiling library extract functions original mpi library add profiling library bringing unnecessary code 

provide op routine mpi mpi library 
discussion objective mpi profiling interface ensure relatively easy authors profiling similar tools interface codes mpi implementations different machines 
mpi machine independent standard different implementations unreasonable expect authors profiling tools mpi access chapter 
profiling interface source code implements mpi particular machine 
necessary provide mechanism implementors tools collect performance information wish access underlying implementation 
believe having interface important mpi attractive users availability different tools significant factor attracting users mpi standard 
profiling interface just interface 
says way 
attempt lay information collected interface collected information saved filtered displayed 
initial impetus development interface arose desire permit implementation profiling tools clear interface specified may prove useful purposes internetworking multiple mpi implementations 
defined interface objection useful 
issues addressed intimately tied way executable images built may differ greatly different machines examples treated solely way implementing objective mpi profiling interface 
actual requirements implementation detailed requirements section rest chapter justification discussion logic requirements 
examples show way implementation constructed meet requirements unix system doubtless equally valid 
logic design provided mpi implementation meets requirements possible implementor profiling system intercept mpi calls user program 
collect information requires calling underlying mpi implementation name shifted entry points achieve desired effects 
miscellaneous control profiling clear requirement user code able control profiler dynamically run time 
normally purposes ffl enabling disabling profiling depending state calculation 
ffl flushing trace buffers non critical points calculation ffl adding user events trace file 
requirements met mpi 
mpi level level profiling level int mpi const int level 
examples mpi level integer level mpi libraries routine simply return immediately user code 
presence calls routine allows profiling package explicitly called user 
mpi control implementation profiling code unable specify precisely semantics provided calls mpi 
vagueness extends number arguments function datatypes 
provide level portability user codes different profiling libraries request meanings certain values level 
ffl level profiling disabled 
ffl level profiling enabled normal default level detail 
ffl level profile buffers flushed 
may op profilers 
ffl values level profile library defined effects additional arguments 
request default state mpi init called profiling enabled normal default level 
mpi just called argument 
allows users link profiling library obtain profile output having modify source code 
provision mpi op standard mpi library allows modify source code obtain detailed profiling information able link exactly code standard mpi library 
examples profiler implementation suppose profiler wishes accumulate total amount data sent mpi send function total elapsed time spent function 
trivially achieved static int static double int mpisend void buffer const int count mpidatatype datatype int dest int tag mpicomm comm double pass arguments int extent int result buffer count datatype dest tag comm datatype extent compute size count extent time chapter 
profiling interface return result mpi library implementation unix system mpi library implemented various possible options obvious 
better depends linker compiler support weak symbols 
systems weak symbols compiler linker support weak external symbols solaris system machines single library required pragma weak pragma weak int appropriate args useful content effect pragma define external symbol mpi example weak definition 
means linker complain definition symbol instance profiling library definition exists linker weak definition 
systems weak symbols absence weak symbols possible solution macro pre processor ifdef ifdef define function name name define function name name endif define function name name endif user visible functions library declared int function appropriate args useful content 
examples source file compiled produce versions library depending state macro symbol 
required standard mpi library built way inclusion mpi functions achieved time 
somewhat unpleasant requirement may mean external function compiled separate file 
necessary author profiling library need define mpi functions wishes intercept fulfilled normal mpi library 
link step look cc 
contains profiler functions intercept mpi functions 
contains name shifted mpi functions contains normal definitions mpi functions 
complications multiple counting parts mpi library may implemented basic mpi functions portable implementation collective operations implemented point point communications potential profiling functions called mpi function called profiling function 
lead double counting time spent inner routine 
effect useful circumstances allow answer question time spent point point routines re called collective functions decided enforce restrictions author mpi library overcome 
author profiling library aware problem guard 
single threaded world easily achieved static variable profiling code remembers inside profiling routine 
complex multi threaded environment meaning times recorded linker unix linker traditionally operates pass effect functions libraries included image needed time library scanned 
combined weak symbols multiple definitions function cause odd unexpected effects 
consider instance implementation mpi fortran binding achieved wrapper functions top implementation 
author profile library assumes reasonable provide profile functions binding fortran eventually call cost wrappers assumed small 
wrapper functions profiling library profiled entry points undefined profiling library called 
profiling code included image 
standard mpi library scanned fortran wrappers resolved pull base versions mpi functions 
effect code link successfully profiled 
chapter 
profiling interface overcome ensure fortran wrapper functions included profiling version library 
ensure possible requiring separable rest base mpi library 
allows base library profiling 
multiple levels interception scheme directly support nesting profiling functions provides single alternative name mpi function 
consideration implementation allow multiple levels call interception unable construct implementation disadvantages ffl assuming particular implementation language 
ffl imposing run time cost profiling place 
objectives mpi permit efficient low latency implementations business standard require particular implementation language decided accept scheme outlined 
note possible scheme implement multi level system function called user may call different profiling functions calling underlying mpi function 
unfortunately implementation may require cooperation different profiling libraries required single level implementation detailed 
bibliography bala 
process groups mechanism coordination communication processes venus collective communication library 
technical report ibm watson research center october 
preprint 
bala rudolph marc snir 
designing efficient scalable portable collective communication libraries 
technical report ibm watson research center october 
preprint 
bangalore nathan anthony skjellum 
mpi issues features 
ski page press 
beguelin dongarra geist manchek sunderam 
visualization debugging heterogeneous environment 
ieee computer june 
luc rolf 
argonne gmd macros fortran portable parallel programming implementation intel ipsc 
parallel computing 
butler lusk 
user guide programming system 
technical report tm anl argonne national laboratory 
ralph butler ewing lusk 
monitors messages clusters parallel programming system 
journal parallel computing 
appear argonne national laboratory mathematics computer science division preprint 
robin rolf hans christian hoppe peter 
portable programming message passing library 
parallel computing special issue message passing interfaces appear 

performance evaluation mesh connected wormhole routed networks interprocessor communication multicomputers 
proceedings supercomputing conference pages 

predicting effect mapping communication performance large multicomputers 
proceedings international conference parallel processing vol 
ii software pages ii ii 
dongarra geist manchek sunderam 
integrated pvm framework supports heterogeneous network computing 
computers physics april 
bibliography dongarra hey walker 
proposal userlevel message passing interface distributed memory environment 
technical report tm oak ridge national laboratory february 
nathan william gropp ewing lusk anthony skjellum 
model implementation mpi 
technical report argonne national laboratory 
edinburgh parallel computing centre university edinburgh 
concepts june 
edinburgh parallel computing centre university edinburgh 
version interface may 
feitelson 
communicators object multiparty interactions parallel programming 
technical report dept computer science hebrew university jerusalem november 
franke peter hochschild marc snir 
efficient implementation mpi 
international conference parallel processing 
geist heath peyton 
user guide portable instrumented communication library 
technical report tm oak ridge national laboratory october 
william gropp barry smith 
chameleon parallel programming tools users manual 
technical report anl argonne national laboratory march 
kramer muhlenbein 
mapping strategies message multiprocessor systems 
parallel computing 
ncube 
ncube programmers guide december 
pasadena ca 
express user guide version edition 
paul pierce 
nx operating system 
proceedings third conference hypercube concurrent computers applications pages 
acm press 
skjellum leung 
zipcode portable multicomputer communication library atop reactive kernel 
walker stout editors proceedings fifth distributed memory concurrent computing conference pages 
ieee press 
skjellum smith leung morari 
zipcode message passing system 
technical report lawrence livermore national laboratory september 
anthony skjellum nathan bangalore 
writing libraries mpi 
anthony skjellum donna reese editors proceedings scalable parallel libraries conference pages 
ieee computer society press october 
anthony skjellum steven smith nathan alvin leung manfred morari 
design evolution zipcode 
parallel computing 
invited appear special issue message passing 
bibliography anthony skjellum steven smith nathan charles alvin leung manfred morari 
zipcode portable communication layer high performance 
technical report jc revised lawrence livermore national laboratory march 
appear concurrency practice experience 
walker 
standards message passing distributed memory environment 
technical report tm oak ridge national laboratory august 
annex language binding section summarize specific bindings fortran bindings fortran bindings 
listings alphabetical chapter 
defined constants fortran required defined constants defined files mpi fortran 
return codes fortran assorted constants fortran 
defined constants fortran status size reserved index values fortran error handling specifiers fortran maximum sizes strings elementary datatypes mpiint elementary datatypes fortran mpireal annex language binding datatypes reduction functions mpi int datatypes reduction functions fortran mpi real mpi mpi integer optional datatypes fortran mpireal mpireal mpireal optional datatypes special datatypes constructing derived datatypes reserved communicators fortran mpicommworld results communicator group comparisons environmental inquiry keys fortran collective operations fortran 
defined constants fortran null handles empty group topologies fortran defined type definitions included file mpi opaque types handles assorted structures mpicomm mpidatatype prototypes user defined functions typedef int mpicomm int keyval void void void int flag typedef int mpicomm comm int keyval void void annex language binding typedef void mpicomm int typedef void void void int len mpidatatype datatype fortran examples user defined functions declared 
user function argument mpi op create declared function len type type 
len len integer len type copy function argument mpi keyval create declared procedure keyval flag ierr integer keyval ierr logical flag delete function argument mpi keyval create declared procedure comm keyval ierr integer comm keyval ierr bindings point point communication order appearance chapter 
int mpi send void buf int count mpi datatype datatype int dest int tag mpi comm comm int mpi recv void buf int count mpi datatype datatype int source int tag mpi comm comm mpi status status int mpi get count mpi status status mpi datatype datatype int count int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm int mpi buffer attach void buffer int size int mpi buffer detach void buffer int size int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request 
bindings point point communication int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request int mpi void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request int mpi void buf int count mpi datatype datatype int source int tag mpi comm comm mpi request request int mpi wait mpi request request mpi status status int mpi test mpi request request int flag mpi status status int mpi request free mpi request request int mpi int count mpi request array requests int index mpi status status int mpi int count mpi request array requests int index int flag mpi status status int mpi int count mpi request array requests mpi status array statuses int mpi int count mpi request array requests int flag mpi status array statuses int mpi int incount mpi request array requests int outcount int array indices mpi status array statuses int mpi int incount mpi request array requests int outcount int array indices mpi status array statuses int mpi int source int tag mpi comm comm int flag mpi status status int mpi probe int source int tag mpi comm comm mpi status status int mpi cancel mpi request request int mpi test cancelled mpi status status int flag int mpi send init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request int mpi init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request int mpi init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request int mpi init void buf int count mpi datatype datatype int dest int tag mpi comm comm mpi request request int mpi recv init void buf int count mpi datatype datatype int source int tag mpi comm comm mpi request request annex language binding int mpi start mpi request request int mpi int count mpi request array requests int mpi void sendbuf int sendcount mpi datatype sendtype int dest int void recvbuf int recvcount mpi datatype recvtype int source mpi datatype mpi comm comm mpi status status int mpi replace void buf int count mpi datatype datatype int dest int int source int mpi comm comm mpi status status int mpi type contiguous int count mpi datatype oldtype mpi datatype newtype int mpi type vector int count int blocklength int stride mpi datatype oldtype mpi datatype newtype int mpi type int count int blocklength mpi aint stride mpi datatype oldtype mpi datatype newtype int mpi type indexed int count int array int array displacements mpi datatype oldtype mpi datatype newtype int mpi type int count int array mpi aint array displacements mpi datatype oldtype mpi datatype newtype int mpi type struct int count int array mpi aint array displacements mpi datatype array types mpi datatype newtype int mpi address void location mpi aint address int mpi type extent mpi datatype datatype mpi aint extent int mpi type size mpi datatype datatype int size int mpi type lb mpi datatype datatype mpi aint displacement int mpi type ub mpi datatype datatype mpi aint displacement int mpi type commit mpi datatype datatype int mpi type free mpi datatype datatype int mpi get elements mpi status status mpi datatype datatype int count int mpi pack void inbuf int incount mpi datatype datatype void int int position mpi comm comm int mpi unpack void inbuf int int position void int outcount mpi datatype datatype mpi comm comm 
bindings collective communication int mpi pack size int incount mpi datatype datatype mpi comm comm int size bindings collective communication int mpi barrier mpi comm comm int mpi bcast void buffer int count mpi datatype datatype int root mpi comm comm int mpi gather void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype int root mpi comm comm int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcounts int displs mpi datatype recvtype int root mpi comm comm int mpi scatter void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype int root mpi comm comm int mpi void sendbuf int int displs mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype int root mpi comm comm int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype mpi comm comm int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcounts int displs mpi datatype recvtype mpi comm comm int mpi void sendbuf int sendcount mpi datatype sendtype void recvbuf int recvcount mpi datatype recvtype mpi comm comm int mpi void sendbuf int int mpi datatype sendtype void recvbuf int recvcounts int mpi datatype recvtype mpi comm comm int mpi reduce void sendbuf void recvbuf int count mpi datatype datatype mpi op op int root mpi comm comm int mpi op create mpi user function function int commute mpi op op int mpi op free mpi op op int mpi void sendbuf void recvbuf int count mpi datatype datatype mpi op op mpi comm comm int mpi reduce scatter void sendbuf void recvbuf int recvcounts annex language binding mpi datatype datatype mpi op op mpi comm comm int mpi scan void sendbuf void recvbuf int count mpi datatype datatype mpi op op mpi comm comm bindings groups contexts communicators int mpi group size mpi group group int size int mpi group rank mpi group group int rank int mpi group translate ranks mpi group group int int ranks mpi group group int ranks int mpi group compare mpi group group mpi group group int result int mpi comm group mpi comm comm mpi group group int mpi group union mpi group group mpi group group mpi group newgroup int mpi group intersection mpi group group mpi group group mpi group newgroup int mpi group difference mpi group group mpi group group mpi group newgroup int mpi group incl mpi group group int int ranks mpi group newgroup int mpi group excl mpi group group int int ranks mpi group newgroup int mpi group range incl mpi group group int int ranges mpi group newgroup int mpi group range excl mpi group group int int ranges mpi group newgroup int mpi group free mpi group group int mpi comm size mpi comm comm int size int mpi comm rank mpi comm comm int rank int mpi comm compare mpi comm comm mpi comm comm int result int mpi comm dup mpi comm comm mpi comm newcomm int mpi comm create mpi comm comm mpi group group mpi comm newcomm int mpi comm split mpi comm comm int color int key mpi comm newcomm int mpi comm free mpi comm comm int mpi comm test inter mpi comm comm int flag int mpi comm remote size mpi comm comm int size int mpi comm remote group mpi comm comm mpi group group 
bindings process topologies int mpi intercomm create mpi comm local comm int local leader mpi comm peer comm int remote leader int tag mpi comm int mpi intercomm merge mpi comm intercomm int high mpi comm int mpi keyval create mpi copy function copy fn mpi delete function delete fn int keyval void extra state int mpi keyval free int keyval int mpi attr put mpi comm comm int keyval void attribute val int mpi attr get mpi comm comm int keyval void attribute val int flag int mpi attr delete mpi comm comm int keyval bindings process topologies int mpi cart create mpi comm comm old int ndims int dims int periods int reorder mpi comm comm cart int mpi dims create int nnodes int ndims int dims int mpi graph create mpi comm comm old int nnodes int index int edges int reorder mpi comm comm graph int mpi topo test mpi comm comm int status int mpi get mpi comm comm int nnodes int int mpi graph get mpi comm comm int int int index int edges int mpi get mpi comm comm int ndims int mpi cart get mpi comm comm int int dims int periods int coords int mpi cart rank mpi comm comm int coords int rank int mpi cart coords mpi comm comm int rank int int coords int mpi graph neighbors count mpi comm comm int rank int int mpi graph neighbors mpi comm comm int rank int int neighbors int mpi cart shift mpi comm comm int direction int disp int rank source int rank dest int mpi cart sub mpi comm comm int remain dims mpi comm newcomm int mpi cart map mpi comm comm int ndims int dims int periods int annex language binding int mpi graph map mpi comm comm int nnodes int index int edges int bindings environmental inquiry int mpi get processor name char name int int mpi errhandler create mpi handler function function mpi errhandler errhandler int mpi errhandler set mpi comm comm mpi errhandler errhandler int mpi errhandler get mpi comm comm mpi errhandler errhandler int mpi errhandler free mpi errhandler errhandler int mpi error string int errorcode char string int int mpi error class int errorcode int int double mpi void int double mpi void int mpi init int argc char argv int mpi finalize void int mpi initialized int flag int mpi abort mpi comm comm int errorcode bindings profiling int mpi const int level fortran bindings point point communication mpi send buf count datatype dest tag comm ierror type 
buf integer count datatype dest tag comm ierror mpi recv buf count datatype source tag comm status ierror type 
buf integer count datatype source tag comm status mpi status size ierror mpi get count status datatype count ierror integer status mpi status size datatype count ierror mpi buf count datatype dest tag comm ierror type 
buf 
fortran bindings point point communication integer count datatype dest tag comm ierror mpi buf count datatype dest tag comm ierror type 
buf integer count datatype dest tag comm ierror mpi buf count datatype dest tag comm ierror type 
buf integer count datatype dest tag comm ierror mpi buffer attach buffer size ierror type 
buffer integer size ierror mpi buffer detach buffer size ierror type 
buffer integer size ierror mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror mpi buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror mpi buf count datatype source tag comm request ierror type 
buf integer count datatype source tag comm request ierror mpi wait request status ierror integer request status mpi status size ierror mpi test request flag status ierror logical flag integer request status mpi status size ierror mpi request free request ierror integer request ierror mpi count array requests index status ierror integer count array requests index status mpi status size ierror mpi count array requests index flag status ierror logical flag annex language binding integer count array requests index status mpi status size ierror mpi count array requests array statuses ierror integer count array requests array statuses mpi status size ierror mpi count array requests flag array statuses ierror logical flag integer count array requests array statuses mpi status size ierror mpi incount array requests outcount array indices array statuses ierror integer incount array requests outcount array indices array statuses mpi status size ierror mpi incount array requests outcount array indices array statuses ierror integer incount array requests outcount array indices array statuses mpi status size ierror mpi source tag comm flag status ierror logical flag integer source tag comm status mpi status size ierror mpi probe source tag comm status ierror integer source tag comm status mpi status size ierror mpi cancel request ierror integer request ierror mpi test cancelled status flag ierror logical flag integer status mpi status size ierror mpi send init buf count datatype dest tag comm request ierror type 
buf integer request count datatype dest tag comm request ierror mpi init buf count datatype dest tag comm request ierror type 
buf integer request count datatype dest tag comm request ierror mpi init buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror mpi init buf count datatype dest tag comm request ierror type 
buf integer count datatype dest tag comm request ierror mpi recv init buf count datatype source tag comm request ierror type 
buf 
fortran bindings point point communication integer count datatype source tag comm request ierror mpi start request ierror integer request ierror mpi count array requests ierror integer count array requests ierror mpi sendbuf sendcount sendtype dest recvbuf recvcount recvtype source comm status ierror type 
sendbuf recvbuf integer sendcount sendtype dest recvcount recvtype source comm status mpi status size ierror mpi replace buf count datatype dest source comm status ierror type 
buf integer count datatype dest source comm status mpi status size ierror mpi type contiguous count oldtype newtype ierror integer count oldtype newtype ierror mpi type vector count blocklength stride oldtype newtype ierror integer count blocklength stride oldtype newtype ierror mpi type count blocklength stride oldtype newtype ierror integer count blocklength stride oldtype newtype ierror mpi type indexed count array array displacements oldtype newtype ierror integer count array array displacements oldtype newtype ierror mpi type count array array displacements oldtype newtype ierror integer count array array displacements oldtype newtype ierror mpi type struct count array array displacements array types newtype ierror integer count array array displacements array types newtype ierror mpi address location address ierror type 
location integer address ierror mpi type extent datatype extent ierror integer datatype extent ierror mpi type size datatype size ierror integer datatype size ierror annex language binding mpi type lb datatype displacement ierror integer datatype displacement ierror mpi type ub datatype displacement ierror integer datatype displacement ierror mpi type commit datatype ierror integer datatype ierror mpi type free datatype ierror integer datatype ierror mpi get elements status datatype count ierror integer status mpi status size datatype count ierror mpi pack inbuf incount datatype position comm ierror type 
inbuf integer incount datatype position comm ierror mpi unpack inbuf position outcount datatype comm ierror type 
inbuf integer position outcount datatype comm ierror mpi pack size incount datatype comm size ierror integer incount datatype comm size ierror fortran bindings collective communication mpi barrier comm ierror integer comm ierror mpi bcast buffer count datatype root comm ierror type 
buffer integer count datatype root comm ierror mpi gather sendbuf sendcount sendtype recvbuf recvcount recvtype root comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype root comm ierror mpi sendbuf sendcount sendtype recvbuf recvcounts displs recvtype root comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcounts displs recvtype root comm ierror mpi scatter sendbuf sendcount sendtype recvbuf recvcount recvtype root comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype root comm ierror 
fortran bindings collective communication mpi sendbuf displs sendtype recvbuf recvcount recvtype root comm ierror type 
sendbuf recvbuf integer displs sendtype recvcount recvtype root comm ierror mpi sendbuf sendcount sendtype recvbuf recvcount recvtype comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype comm ierror mpi sendbuf sendcount sendtype recvbuf recvcounts displs recvtype comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcounts displs recvtype comm ierror mpi sendbuf sendcount sendtype recvbuf recvcount recvtype comm ierror type 
sendbuf recvbuf integer sendcount sendtype recvcount recvtype comm ierror mpi sendbuf sendtype recvbuf recvcounts recvtype comm ierror type 
sendbuf recvbuf integer sendtype recvcounts recvtype comm ierror mpi reduce sendbuf recvbuf count datatype op root comm ierror type 
sendbuf recvbuf integer count datatype op root comm ierror mpi op create function commute op ierror external function logical commute integer op ierror mpi op free op ierror integer op ierror mpi sendbuf recvbuf count datatype op comm ierror type 
sendbuf recvbuf integer count datatype op comm ierror mpi reduce scatter sendbuf recvbuf recvcounts datatype op comm ierror type 
sendbuf recvbuf integer recvcounts datatype op comm ierror mpi scan sendbuf recvbuf count datatype op comm ierror type 
sendbuf recvbuf integer count datatype op comm ierror annex language binding fortran bindings groups contexts mpi group size group size ierror integer group size ierror mpi group rank group rank ierror integer group rank ierror mpi group translate ranks group ranks group ranks ierror integer group ranks group ranks ierror mpi group compare group group result ierror integer group group result ierror mpi comm group comm group ierror integer comm group ierror mpi group union group group newgroup ierror integer group group newgroup ierror mpi group intersection group group newgroup ierror integer group group newgroup ierror mpi group difference group group newgroup ierror integer group group newgroup ierror mpi group incl group ranks newgroup ierror integer group ranks newgroup ierror mpi group excl group ranks newgroup ierror integer group ranks newgroup ierror mpi group range incl group ranges newgroup ierror integer group ranges newgroup ierror mpi group range excl group ranges newgroup ierror integer group ranges newgroup ierror mpi group free group ierror integer group ierror mpi comm size comm size ierror integer comm size ierror mpi comm rank comm rank ierror integer comm rank ierror mpi comm compare comm comm result ierror integer comm comm result ierror mpi comm dup comm newcomm ierror integer comm newcomm ierror mpi comm create comm group newcomm ierror integer comm group newcomm ierror 
fortran bindings process topologies mpi comm split comm color key newcomm ierror integer comm color key newcomm ierror mpi comm free comm ierror integer comm ierror mpi comm test inter comm flag ierror integer comm ierror logical flag mpi comm remote size comm size ierror integer comm size ierror mpi comm remote group comm group ierror integer comm group ierror mpi intercomm create local comm local leader peer comm remote leader tag ierror integer local comm local leader peer comm remote leader tag ierror mpi intercomm merge intercomm high ierror integer intercomm ierror logical high mpi keyval create copy fn delete fn keyval extra state ierror external copy fn delete fn integer keyval extra state ierror mpi keyval free keyval ierror integer keyval ierror mpi attr put comm keyval attribute val ierror integer comm keyval attribute val ierror mpi attr get comm keyval attribute val flag ierror integer comm keyval attribute val ierror logical flag mpi attr delete comm keyval ierror integer comm keyval ierror fortran bindings process topologies mpi cart create comm old ndims dims periods reorder comm cart ierror integer comm old ndims dims comm cart ierror logical periods reorder mpi dims create nnodes ndims dims ierror integer nnodes ndims dims ierror mpi graph create comm old nnodes index edges reorder comm graph ierror annex language binding integer comm old nnodes index edges comm graph ierror logical reorder mpi topo test comm status ierror integer comm status ierror mpi get comm nnodes ierror integer comm nnodes ierror mpi graph get comm index edges ierror integer comm index edges ierror mpi get comm ndims ierror integer comm ndims ierror mpi cart get comm dims periods coords ierror integer comm dims coords ierror logical periods mpi cart rank comm coords rank ierror integer comm coords rank ierror mpi cart coords comm rank coords ierror integer comm rank coords ierror mpi graph neighbors count comm rank ierror integer comm rank ierror mpi graph neighbors comm rank neighbors ierror integer comm rank neighbors ierror mpi cart shift comm direction disp rank source rank dest ierror integer comm direction disp rank source rank dest ierror mpi cart sub comm remain dims newcomm ierror integer comm newcomm ierror logical remain dims mpi cart map comm ndims dims periods ierror integer comm ndims dims ierror logical periods mpi graph map comm nnodes index edges ierror integer comm nnodes index edges ierror fortran bindings environmental inquiry mpi get processor name name ierror character name integer ierror mpi errhandler create function handler ierror external function 
fortran bindings profiling integer errhandler ierror mpi errhandler set comm errhandler ierror integer comm errhandler ierror mpi errhandler get comm errhandler ierror integer comm errhandler ierror mpi errhandler free errhandler ierror integer errhandler ierror mpi error string errorcode string ierror integer errorcode ierror character string mpi error class errorcode ierror integer errorcode ierror double precision mpi double precision mpi mpi init ierror integer ierror mpi finalize ierror integer ierror mpi initialized flag ierror logical flag integer ierror mpi abort comm errorcode ierror integer comm errorcode ierror fortran bindings profiling mpi level integer level mpi function index mpi abort mpi address mpi mpi mpi mpi mpi mpi attr delete mpi attr get mpi attr put mpi barrier mpi bcast mpi mpi init mpi buffer attach mpi buffer detach mpi cancel mpi cart coords mpi cart create mpi cart get mpi cart map mpi cart rank mpi cart shift mpi cart sub mpi get mpi comm compare mpi comm create mpi comm dup mpi comm free mpi comm group mpi comm rank mpi comm remote group mpi comm remote size mpi comm size mpi comm split mpi comm test inter mpi dims create mpi errhandler create mpi errhandler free mpi errhandler get mpi errhandler set mpi error class mpi error string mpi finalize mpi gather mpi mpi get count mpi get elements mpi get processor name mpi graph create mpi graph get mpi graph map mpi graph neighbors mpi graph neighbors count mpi get mpi group compare mpi group difference mpi group excl mpi group free mpi group incl mpi group intersection mpi group range excl mpi group range incl mpi group rank mpi group size mpi group translate ranks mpi group union mpi mpi init mpi initialized mpi intercomm create mpi intercomm merge mpi mpi mpi mpi mpi mpi keyval create mpi keyval free mpi op create mpi function index mpi op free mpi pack mpi pack size mpi mpi probe mpi recv mpi recv init mpi reduce mpi reduce scatter mpi request free mpi mpi init mpi scan mpi scatter mpi mpi send mpi send init mpi mpi replace mpi mpi init mpi start mpi mpi test mpi test cancelled mpi mpi mpi mpi topo test mpi type commit mpi type contiguous mpi type extent mpi type free mpi type mpi type mpi type indexed mpi type lb mpi type size mpi type struct mpi type ub mpi type vector mpi unpack mpi wait mpi mpi mpi mpi mpi 
