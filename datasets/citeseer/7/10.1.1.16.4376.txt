scalable management data mining astrolabe growing degree applications expected self configuring self managing range permissible configurations grows enormously complex undertaking 
management subsystem distributed system complex application 
technology options building management mechanisms lagged 
current solutions cluster management systems directory services event notification services scale adequately designed relatively static settings 
describe new information management service called astrolabe 
astrolabe monitors dynamically changing state collection distributed resources reporting summaries information users 
dns astrolabe organizes resources hierarchy domains call zones avoid confusion associates attributes zone 
dns attributes may highly dynamic updates propagate quickly typically tens seconds 
astrolabe continuously computes summaries data system fly aggregation 
aggregation mechanism controlled sql queries understood type data mining capability 
example astrolabe aggregation monitor status set servers scattered network locate desired resource basis attribute values com research funded part darpa afrl part nasa ree program administered jpl part nsf cise part afrl cornell information assurance institute 
full version available www cs cornell edu ken astrolabe pdf 
robbert van renesse kenneth birman department computer science cornell university ithaca ny ken cs cornell edu pute summary description loads critical network components 
information changes astrolabe automatically rapidly recompute associated aggregates report changes applications registered interest 
astrolabe system looks user database virtual database reside centralized server 
database presentation extends aspects 
importantly zone viewed relational table containing attributes child zones turn queried sql 
database integration mechanisms odbc jdbc standard database programming tools access manipulate data available astrolabe 
design astrolabe reflects principles 
scalability hierarchy astrolabe achieves scalability zone hierarchy 
bounds size amount information zone computational storage communication costs astrolabe bounded 

flexibility mobile code restricted form mobile code form sql aggregation queries allows users customize astrolabe fly 

robustness randomized peer peer protocol systems centralized servers vulnerable failures attacks 
astrolabe agents run host communicating epidemic protocol highly tolerant failures easy deploy efficient 
example level astrolabe tree 
top level root zone child zones 
zone including leaf zones hosts attribute list 
host runs astrolabe agent 

security certificates astrolabe uses digital signatures identify reject potentially corrupted data control access potentially costly operations 
zones astrolabe gathers disseminates aggregates information zones 
structure astrolabe zones viewed tree 
leaves tree represent hosts root contains hosts see 
associated zone unique identifier pathname attribute list contains information associated zone 
borrowing terminology snmp call attribute list management information base mib 
astrolabe attributes directly writable generated called aggregation functions 
zone set aggregation functions calculate attributes zone mib 
aggregation function zone sql program takes list mibs zone child zones produces summary attributes 
leaf zones form exception 
leaf zone set virtual child zones local corresponding agent 
attributes virtual zones updated directly local data source 
standard data sources available virtual child zone called system agent allows new virtual child zones created 
mib zone required contain attributes id zone identifier timestamp version mib replacement strategy epidemic protocol failure detection contacts small set addresses representative agents zone peer peer protocol agents run total number hosts zone constructed sum attributes child zones 
aggregation function certificates aggregation functions programmable 
code functions embedded called aggregation function certificates signed certificates installed attributes inside mibs 
evaluation produces values corresponding attributes 
purposes 
information request afc specifies information application wants retrieve participating host aggregate information zone hierarchy 
specified sql queries 
configuration afc specifies run time parameters applications may dynamic line configuration 
considering adding action specify actions taken hosts managed astrolabe doing security implications need addressed 
agents gossip host runs astrolabe agent keeps local copy subset astrolabe zone tree 
include zones path root sibling zones 
particular agent local copy root mib mibs child root 
note centralized servers associated internal zones mibs replicated agents zones 
replicated zone information replicated lock step different agents zone guaranteed identical copies mibs queried time updates leaf attribute rapid agents updates agents perform 
astrolabe protocols guarantee mibs lag old version mib forever 
astrolabe implements probabilistic consis tency model updates leaf mibs cease long operational agent arbitrarily reflect updates seen operational agents 
astrolabe propagates information epidemic peer peer protocol known gossip 
basic idea simple periodically agent selects agent exchanges state information 
agents zone state exchanged relates mibs zone different zones exchange state associated mibs common ancestor 
manner states astrolabe agents converge data ages 
similarly disseminated gossip protocol 
communication tacitly assumed astrolabe agents simple way address exchange gossip messages 
unfortunately age firewalls network address translation nat dhcp hosts way addressing firewalls stand way establishing contact 
solution mail gossip messages hosts rejected efficiency considerations 
realized ipv may long time coming managers reluctant create holes firewalls 
currently offer solutions problem 
solutions involve communication protocol underlying gossip rely ability firewalls nat boxes set connections firewall server outside firewall possibly proxy server 
solution deploys astrolabe agents core internet reachable relay servers rendez vous servers aol instant messenger groove jxta 
solutions mutually compatible time 
administrative control administration astrolabe decentralized zone centrally administered 
zone may administrator zone nested 
administrator zone responsible creating child zones signing distributed zone setting protocol parameters gossip rate zone managing keys 
api applications invoke astrolabe interfaces calls library see table 
library allows applications information astrolabe tree setting new connections necessary 
creation termination connections transparent application processes programmer think astrolabe single service 
native interface library sql interface allows applications view node zone tree relational database table row child zone column attribute 
programmer simply invoke sql operators retrieve data tables 
selection join union operations programmer create new views astrolabe data independent physical hierarchy astrolabe tree 
odbc driver available sql interface existing database tools astrolabe directly databases import data astrolabe 
example peer peer multicast distributed games applications require form multicast scales fairly reliable put tcp unfriendly load internet 
face slow participants multicast protocol flow control mechanism force entire system grind halt 
section describes multicast facility 
uses astrolabe control sets tree tcp connections transporting messages 
multicast group name say game 
participants notify interest receiving messages group installing tcp ip address attribute game leaf zone mib 
attribute aggregated query select game game method description find contacts time scope search astrolabe agents scope set contacts addresses specify addresses initial agents connect get attributes zone event queue report updates attributes zone get children zone event queue report updates zone membership set attribute zone attribute value update attribute zone selects participants tcp ip addresses 
participants exchange messages form zone data 
participant wants initiate multicast lists child zones root domain child non empty game attribute sends message child zone data selected participant child zone selection 
time participant receives message zone data finds child zones zone non empty game attributes recursively continues dissemination process 
tcp connections created cached 
effectively constructs tree tcp connections spans set participants 
tree automatically updated astrolabe reports zone membership updates 
sure dissemination latency suffer slow participants tree measures taken 
participant post astrolabe rate messages able process 
aggregation query updated follows select highest performing participants internal routers select game game order rate senders monitor outgoing tcp pipes 
fills may want try participant corresponding zone 
possible participant construct fat tree dissemination care taken reconstruct order messages 
mechanisms effectively route messages slow parts internet resilient overlay networks accomplishes pointto point traffic 
table application programmer interface 
publish subscribe systems receivers subscribe certain topics interest publishers post messages topics 
multicast protocol described easily modified implement publish subscribe generalized concept call selective multicast selective publish subscribe 
idea tag messages sql condition chosen publishers 
example publisher wants send update hosts version object condition min version 
participants multicast protocol condition decide participants forward message 
example receiving message zone data condition participant executes sql query find participants forward message select game zone condition idea publisher specifies set receivers 
basic publish subscribe expressed publisher specifying message delivered subscribers particular topic 
simplest way create new attribute name topic 
subscribers set attribute attribute aggregated sum 
condition attribute 
scale case topics 
solution scales better bloom filter 
solution uses single attribute idea directory service ninja system expected rounds members bf bf bf flat average number rounds necessary infect participants different branching factors 
measurements number representatives failures 
contains fixed size bit map 
attribute aggregated bitwise 
topic names hashed bit bit map 
condition tagged message hash topic 
case hash collisions may lead messages routed destinations strictly necessary 
scalability know time gossip disseminate flat population grows logarithmically size population face network links participants failing certain probability 
question true astrolabe uses hierarchical protocol 
answer appears albeit somewhat slower 
demonstrate conducted simulated experiments 
results experiment described 
simulated members 
gossip occurred rounds members gossiping time 
assumed successful gossip exchanges complete round 
typically astrolabe agents configured gossip seconds assumption reasonable 
experiment conducted times 
small numbers members 
experiments variance observed low 
experiment varied branching factor tree 
branching factors 
representative contact zone failures 
measured average number rounds necessary disseminate information node nodes 
show results log scale compare flat non hierarchical gossip 
flat gossip impractical real system required memory grows linearly network load quadratically membership provides useful baseline 
flat gossip provides lowest dissemination latency 
corresponding line graph slightly curved astrolabe agents gossip significantly improves performance number members small 
hierarchical gossip scales slower flat gossip 
latency improves branching factor increased increases overhead 
example members branching factor levels tree 
member maintain gossip mibs 
gossip messages include mibs destination agent gossip message contains mibs 
branching factor member maintains gossips mibs 
limit flat gossip member maintain gossip tical mibs 
shows typical output experiments conducted scalability current astrolabe implementation 
configured sets mhz pentium machines set mhz xeon machines variety regular trees branching factors representatives zone 
machines connected gigabit ethernet switches 
machine ran astrolabe agent 
agents gossiped rate exchange seconds udp 
data injected agent longest gossiping distance agents measured worst case dissemination times 
experiment run times shows frequency bf time seconds frequency bf time seconds frequency bf time seconds latency distribution measurements system agents branching factors 
times latency occurred second bins 
peaks seen second intervals explained agents gossip rounds jittering gossip interval provide smoother background load 
seen agents quickly obtain new data occasionally appears agent takes longer time 
turned late values single agent apparently broken network interface 
experiment highlights robustness protocols type failure 
plan report comprehensive evaluation looks astrolabe analytically simulation detailed experimental evaluation larger configurations stress high rates updates 
detailed description astrolabe protocols examples applications extensive discussion related please read www cs cornell edu ken astrolabe pdf 
people various contributions astrolabe design tim clark demers dan eager johannes gehrke barry gupta kate jenkins anh look yaron minsky andrew myers richard emin gun sirer werner vogels zhou 
andersen balakrishnan kaashoek morris 
resilient overlay networks 
proc 
eighteenth acm symp 
operating systems principles pages banff canada october 
bloom 
space time tradeoffs hash coding allowable errors 
cacm july 
demers greene hauser irish larson shenker sturgis swinehart terry 
epidemic algorithms replicated database maintenance 
proc 
sixth acm symp 
principles distributed computing pages vancouver bc august 
gribble welsh von behren brewer culler czerwinski gummadi hill joseph katz mao ross zhao 
ninja architecture robust internet scale systems services 
appear special issue computer networks pervasive computing 
oki siegel skeen 
information bus architecture extensible distributed systems 
proc 
fourteenth acm symp 
operating systems principles pages asheville nc december 
van renesse minsky hayden 
gossip style failure detection service 
proc 
middleware pages 
ifip september 
