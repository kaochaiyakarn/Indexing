domain specific embedded compilers leijen erik meijer university utrecht department computer science tb utrecht netherlands cs uu nl www cs uu nl domain specific embedded languages expressed higher order typed hot languages provide composable framework domain specific abstractions 
framework greater utility collection stand domain specific languages 
usually embedded domain specific languages build top set domain specific primitive functions ultimately implemented form foreign function call 
sketch general design pattern embedding client server style services haskell domain specific embedded compiler server source language 
particular apply idea implement haskell db domain specific compiler dynamically generates sql queries monad comprehensions executed arbitrary odbc database server 
databases ubiquitous computer science 
instance web site usually fancy facade front conventional database information available convenient browsable form 
servers running directly database engine generates pages database records fly 
surprising database vendors provide hooks enable client applications access manipulate database servers 
unix platforms usually done odbc windows confusingly possibilities ado ole db odbc 
common database bindings queries communicated database unstructured strings usually representing sql expressions 
low level approach disadvantages ffl programmers get static safeguards creating syntactically incorrect ill typed queries lead hard find runtime errors 
ffl programmers distinguish different languages sql scripting language generates queries submits database engine perl visual basic 
programming complex 
ffl programmers exposed accidental complexity idiosyncrasies particular database binding making code harder write robust vendor 
argue domain specific embedded languages expressed higher order typed hot languages haskell case provide composable framework domain specific abstractions greater utility collection standalone domain specific languages ffl programmers learn language domain specific abstractions exposed host language extension libraries 
ffl cases possible libraries convenient domain specific syntax 
ffl nearly possible guarantee programmers produce syntactically correct target programs cases able impose domain specific typing rules 
instance value type haskell prevent programmers producing infinite partially defined values 
ffl programmers seamlessly integrate domain specific libraries cgi mail accessible way library 
largely underestimated benefit embedded approach 
connecting different domain specific languages usually quite difficult 
ffl programmers leverage existing language infrastructure module type system built abstraction mechanisms 
note ideas underlying thesis date way back peter landin observed programming languages comprise domain independent linguistic framework domain dependent set components 
new show embed terms type system domain specific programming language haskell framework dynamically compiles executes programs written embedded language 
changes syntax additions primitives needed embed language haskell 
overview giving minuscule haskell crash course relational databases show typical visual basic typical haskell program access relational database 
sketch general design pattern term type safe embedding client server style services haskell evaluator subset sql expressions example server 
turn attention challenging task embedding database server haskell 
section contrasts haskell visual basic implementations example web page generates html database exam marks 
finish ideas 
minuscule haskell main virtue functional language functions class citizens stored lists passed arguments returned functions 
emphasize fact functions type 
status kind value usually write lambda expressions 
common notation function application juxtaposition haskell associates left 
argument function line line 


application line denotes single argument function 

type line function specified explicitly line int 
int 
int 
int type shows line takes int arguments returns int 
case expressions define functions case distinction instance factorial function defined haskell fac num 

fac 
case 

fac haskell polymorphic types constrained means type contexts 
type factorial function fac num 


says function fac type 

types instances num class 
unsurprisingly case num int num float num double true 
represent database rows extensible records experimental feature currently supported trex extension hugs implementation haskell 
record association list field value pairs 
instance record false rec int bool fields type int type bool 
record type rec extended field provided occur fact record lack field indicated constraint type function adds foo field record foo 

rec 
rec foo 

foo unfortunately labels class values trex write generic function extends record new field wrong 

case lack class labels means repeat lot code differs names labels 
deficiency current implementation trex records fact impossible formulate constraint values record instance constrain record contain values equality defined 
currently just built constraint indicates values row show class 
interacting outside world accessing object models deal side effects 
haskell effectful computations live io monad 
value type io effectful computation executed produce value type instance command getchar io char read character standard input executed 
functions effectful computations class citizens passed arguments stored list returned results 
example putchar char 
io function takes character returns computation executed print character standard output 
effectful computations composed notation 
command ma io latent computation executed executes command ma io obtain value passes action producing function 
io executes obtain value type io example executed command getchar putchar reads character standard input copies standard output 
usefulness monads goes far input output type constructors monads 
section define query monad allows write queries notation introduced 
adopt style conventions emphasize dealing effectful computations 
specifically expressions monadic type io query written explicit 
reflect influence oo style postfix function application object method method object mimic object method notation 
convention writing functions lambda expressions results highly stylized programs easy tell type expression looking syntactic shape 
crash course relational databases relational database data represented sets tuples 
example take database rogerson objects properties object edible inheritance president rich people false false true bean plants true false false corba false true false com false false false conclude table bean plants edible rich people run president 
query database systematically relational algebra 
selection operator oe specifies subset rows attributes satisfy property 
example eliminate entries objects run president database expression oe president alse rogerson object edible inheritance president bean plants true false false corba false true false com false false false projection operator specifies subset columns database 
example return objects edible query object oe edible true rogerson object bean plants typical operation relations join combines relations merging tuples common attributes identical values 
join residents table name president starr false clinton true rogerson table name object residents rogerson get table name object description people run president name object clinton rich people sql way select statement sql defacto standard programming language formulate queries relational databases 
sql query select columns tables criteria combines selections projections joins powerful primitive 
select clause specifies columns project clause specifies tables columns located clause specifies rows tables selected 
query oe president alse rogerson expressed sql select rogerson president false query object oe edible true rogerson select object rogerson edible true query name object residents rogerson expressed select name object rogerson presidents president president vb way unstructured strings common way query processing visual basic build unstructured string representing sql query submitting database server object discuss ado object model detail section 
instance query oe president alse rogerson expressed visual basic select rogerson president false set rs rs open rogerson rs eof print rs object print rs edible print rs inheritance print rs president rs loop fp way comprehensions functional programming community people argued list comprehensions query notation database programming languages 
example comprehension notation supported haskell db query oe president alse rogerson expressed table rogerson restrict president 
constant false return query object oe edible true rogerson table rogerson restrict edible 
constant true project object object queries projections joins name object residents rogerson harder formulate indicate explicitly common fields compare create resulting tuple table rogerson table president restrict president 
president project name name object object comprehensions fully typed automatically translated correct sql strings send low level database server 
describes sql tries give general recipe embedding languages strongly typed language 
put question embedding sql aside section look general embed languages haskell 
term embedding sql embedded specific case general strategy embedding services hot language 
illustrate simple sql expression service example 
sql expressions search conditions clauses perform computations comparisons columns values 
sql expression server lets assume sql expression server provides interface evaluating expressions described idl interface void string char expr void char result simple interface captures essence dynamic services desk calculator finger ftp nntp dns odbc ado similar information servers 
haskell access interface functions automatically generated direct idl compiler string 

io 
io string able write evaluator function takes expression sends server returns result string 
io int expr 
server expr server server expr result server return read result essentially kind interface sql server protocols odbc ado 
unstructured sql string directly sent server 
problem prevents programmer sending invalid strings server leading errors runtime unpredictable behavior server 
clearly unacceptable critical business applications 
syntax prevent construction syntactically incorrect expressions define syntax terms input language specific server targeting code generator map syntax trees concrete syntax input language 
syntax primexpr simply defines literal constants unary binary operators 
section add row selection data primexpr binop primexpr primexpr unop primexpr string data binop 
types unop binop just enumerations unary binary operators sql expressions 
writing expressions directly syntax convenient provide combinators programmer life comfortable 
sql operator represented haskell operator surrounded dots 
definitions constant show 

primexpr 
primexpr 
primexpr 
primexpr 
primexpr 
primexpr 
primexpr 
primexpr 
primexpr 
primexpr write constant 
constant cumbersome show show 
embedded domain specific languages 
concrete syntax order evaluate expressions map exact concrete syntax required server component 
code generator expression server straightforward print expressions fully parenthesized concrete representation simple inductive function primexpr 
string 
case 
op 
op op constant function unsafe value show class 
real library introduce separate class defined basic types 
op 
normally step involved see sql example 
embedding expressions know construct expressions generate code rewrite evaluator function structured expressions primexpr 
io int expr 
server expr server server expr result server return read result sql expressions haskell built 
function dynamically compile primexpr program target code execute expression server coerce result back haskell integer value sum int 
primexpr sum 
constant constant 
sum test sum type embedding embedding superior constructing unstructured string pass server impossible construct syntactically incorrect requests 
possible construct ill typed request example shows wrong constant 
constant result wrong print result primexpr data type completely untyped way prevent construction terms wrong crash server operands expression boolean type 
phantom types syntax trees ensure generate syntactically correct request dollar question course similar trick ensure generate type correct requests 
fortunately answer 
possible add extra layer top primexpr effectively serves type system input language expression server 
trick introduce new polymorphic type expr expr expr means expr expression type type variable definition expr data type hold type occur right hand side definition physically data expr expr primexpr refine types functions construct values type expr encode typing rules expressions constant show 

expr 
expr int 
expr int 
expr int 
eq 
expr 
expr 
expr bool expr bool 
expr bool 
expr bool example definition 

eq 
expr 
expr 
expr bool expr 
expr expr making expr type data type ensure primitive functions unsafe primexpr type 
combinators write constant 
constant haskell type checker complain type expr int operand constant match required type expr bool 
typing expressions phantom type variables extends immediately values built haskell primitives 
example function sum instance type sum int 
expr int 
phantom type variables exciting uses instance encoding inheritance typing pointers 
show multiple phantom type variables give type safe encoding attribute selection records 
embedding sql armed knowledge safely embed simple language haskell return original task embedding sql haskell 
sql server activex data objects ado sql server component 
ado com framework odbc compliant database ms sql server oracle db ms access 
ado object model rich tiny fraction functionality 
ado represents relation object 
creates set records query open method void open optional variant source optional variant optional optional optional long options bool eof void fields argument open method source sql string name table stored procedure 
second argument open method connection string case new connection create connection object created earlier 
optional arguments open method provide signature open open variant src variant 
src 


io eof methods allow navigate 
haskell signatures 
io eof 
io bool 
io fields interface gives access fields row accessed position name fields long field variant index field object corresponds column field variant getvalue getname getvalue property field object obtain value column current row 
getname property returns name field getvalue variant 

io getname 
io string ado object model somewhat refined expression evaluator example seen earlier fits basic clientserver framework 
requests submitted open method responses inspected iterating individual field objects fields collection 
haskell haskell iterating record set access result performing query list fields 
faces choice returning list eagerly creating lazily 
case fields read list 
case fields encapsulated lazy stream field read demand 
functions defined terms function takes io action transformer function additional argument io 
io 

io perform 
records 
perform records eof return field records records rest rs perform return field rest perform identity get function reads list fields strictly perform io delaying function obtain function reads list fields lazily 
simple query evaluator written string 
io query 
records ado records open query fields records id return fields course approach suffers weaknesses described section 
syntax just previous example define syntax expressing database operations 
language expressing operations relational algebra 
code generator take expressions translate concrete syntax sql statements preserve semantics original expression 
syntax relation algebra type string type attribute string type scheme attribute type assoc attribute primexpr data scheme project assoc restrict primexpr binary relop empty data relop times union intersect divide difference data primexpr attribute string binop primexpr primexpr unop primexpr example relational expression returns objects edible object oe edible true rogerson expressed syntax project object object restrict edible true rogerson object edible inheritance president concrete syntax straightforward generate concrete sql statements data type special care taken preserve correct semantics relational algebra due idiosyncrasies sql 
relational algebra project constructor projection renaming 
intermediate language allows target wide range different database languages 
planning add bindings dialects sql languages asn 
portable simple semantics relational algebra allows perform powerful set optimizations quite easily transforming expression concrete syntax 
times sql server capable doing transformations due complex semantics sql 
benefit add operations table comparisons hard express languages sql easy generate relational expression 
comprehensions proceed earlier example define friendly combinators specifying relational expressions previous example 
serious drawback relational expressions directly programming language 
relational algebra attributes specified name 
separate binding mechanism distinguish attributes different tables 
suppose take cartesian product relation 
sql write select name mark students students mark mark name 
name relational algebra unable common common attributes name city lead ambiguity 
take cartesian product relation needs rename attributes 
join operator especially introduced easier specify common products renaming necessary 
covering common cases notoriously hard typecheck join expressions haven way embed typing rules haskell 
approach sql 
introduce binding mechanism monad comprehensions qualifying relations 
identifying attributes just name name relation 
query formulated haskell db table students table students restrict mark 
mark restrict name 
name project name name grade grade hood generate relational algebra expressions renaming done automatically combinators 
automatic renaming haskell type checker prevent writing silly queries ask project non existing city attribute student table students project name name city city designs implementing comprehensions increasingly type safe time increasingly complex 
attempt untyped comprehensions attempt hides automatic renaming attribute names making solution safer convenient writing syntax directly 
attempt phantom types queries type safe 
defined query monad express queries 
monad gives advantages ffl notation provides nice syntax write queries comprehensions 
ffl monads enable custom binding mechanism table 
qualify names 
alternative approach explicitly renaming attributes cumbersome practice 
ffl invisible state maintained 
state query monad contains partially completed relational expression fresh name supply automatic renaming attributes 
query language consists basic combinators restrict project table monad operations query monad 
usual binary combinators union type state data query query state 
state 
query query 

query 
query restrict expr bool 
query project rec 
query rel table table 
query rel union query rel 
query rel 
query rel exact details doing correct renaming attributes subtle thorough discussion outside scope 
provide details separate report 
rec rel types explained section add typed layer top comprehension language 
attempt typed comprehensions know expression sublanguage type safe phantom types 
comprehension language trick 
central discussion attribute selection operator 
rel 
attribute 
primexpr relation attribute name operator returns attribute value expression 
attribute defined type parametrize attribute type return expression type data attr attr attribute 
rel 
attr 
expr attribute expression right type system doesn prevent selecting non existent attributes relation 
solution parametrize rel type scheme 
similarly parametrize attr type scheme relation type attribute functions allow syntax 
data rel rel scheme data table table scheme data attr attr attribute rel table retain associated scheme 
needed read concrete values returned actual query 
selection operator 
expresses type relation scheme attribute type returns expression type polymorphic types basic combinators surprising 
rel 
attr 
expr restrict expr bool 
query project rec 
query rel table table 
query rel desire guarantee type safety bears additional cost user 
attribute attr occurs query define attribute definition attr attr 
attr attr hand trex provide class labels 
similarly base table scheme need definition type table example database section students table name string mark char name name 
attr name string string mark mark 
attr mark char char written tool called db direct queries system tables automatically generates suitable database definition 
tool course written haskell db 
haskell type checker checks consistency queries 
accepts query passed problems fails type check query failed condition student mark 
constant wrongly attempts compare character integer programmer accidentally attribute ame name passed query rel name string passed student table students restrict student mark 
constant project name student name failed query rel name string failed student table student restrict student mark 
constant project name student ame exam marks commercial exploitation web today uses server side scripts connect database deliver html page composed dynamic data obtained querying database information client request 
example simple server side web script generates html page database exam marks student names 
database accessed simple web page text entry submit button underlying html form element submits query script server 
html 
head 
title find mark title 
head 
body 
form action asp method post 
name input type text name name 
input type submit value show mark 
form 
body 
html 
visual basic simplest visual basic solution uses different languages 
visual basic business logic glue sql query html asp directives generate result page 

asp pages scripts separated rest document 
tags 
prelude script declares variables construct query retrieves results students database 
asp request object contains information passed client server 
form collection contains form variables passed post query 
request form name returns value user typed name html page 
select student name student mark students student student name request form name set rs ado rs open cs 
body contains actual html returned client table containing student name mark 

tags enclose visual basic expressions included output text 
snippet tr 
td rs name td 
td rs mark td 
tr 
creates table row contains name mark student request html 
head 
title marks title 
head 
body 
table border 
tr 
th name th 
th mark th 
tr 
rs eof 
tr 
td rs name td 
td rs mark td 
tr 
rs 
loop 
table 
body 
html 

clean phase disconnects databases releases rs close set rs haskell haskell version example web page coherent visual basic version 
different languages need need haskell embedded minimal asp page language 
module main import asp import main io main wrapper request 
name request lookup name name cs return function analog code prelude part visual basic page defined separate function parametrized name student type student row name string mark char string 
query student 
student table students restrict student name 
lift project name student name mark student mark function nice html page result performing query student rs 
page marks table headers name mark rows name mark rs haskell program concise modular visual basic version 
functions tested separately importantly easily reuse complete program run traditional cgi environment importing cgi module asp language standard ml parametrized server interface status main lesson new design principle embedding domain specific languages embedded programs compiled fly executed submitting target code server component execution 
shown embed sql haskell principle numerous possible application domains embedded compilers implementation technology choice unix services accessible completely text protocol sockets 
traditionally domain abstractions available external libraries 
instance component available time writing www net provides plethora methods compose email messages show just execute void email sender void sender rhs subject void subject rhs body void body rhs providing bunch methods construct email message imperative style alternative approach raw smtp mail server component accepts email messages rfc format directly set combinators build email messages compositional style 
ultimately email messages compiled raw strings submitted mail server piping appropriate telnet port 
ultimate goal domain specific embedded compiler provide hard compile time guarantees type safety syntactical correctness generated target program 
syntactical correctness target programs hiding construction programs data types 
phantom types polymorphic types type parameter compile time values carry value parameter type elegant mechanism impose haskell type system embedded language 
final example shows domain specific embedded compilers server side web scripting productive 
leverage abstraction mechanisms haskell higher order functions module system compared vb solution haskell program higher quality easier change maintain 
formulation queries notation extensible records neat exact translation sql turned subtle 
haskell db db direct packages available web url www haskell org 
hans brushing knowledge databases dsl referees van jim hook constructive remarks helped improve presentation 
joe armstrong talk services components dagstuhl workshop component development different paradigms provided initial inspiration 
william brown raphael hays skip mccormick ii thomas 
refactoring software architectures projects crisis 
wiley computer publishing 
peter buneman leonid libkin dan suciu val tannen limsoon wong 
comprehension syntax 
acm sigmod record march 
peter buneman atsushi ohori 
polymorphism type inference database programming 
acm transactions database systems march david crocker 
standard format arpa internet text messages 
technical report rfc 
www imc org rfc 
date 
database systems th edition 
addison wesley 
finne leijen meijer peyton jones 
direct binary foreign language interface haskell 
icfp 
finne leijen meijer peyton jones 
calling hell heaven heaven hell 
icfp 
jones 
polymorphic type system fo extensible records variants 
technical report tr department computer science university nottingham 
paul hudak 
modular domain specific languages tools 

simon peyton jones john hughes eds 
report language haskell 
available online www haskell org report february 
peyton jones meijer leijen 
scripting com components haskell 

landin 
programming languages 
cacm march 
leijen meijer 
translating notation sql 

erik meijer 
server side scripting haskell 
journal functional programming accepted publication 
peyton jones philip wadler 
imperative functional programming 
th acm symposium principles programming languages charlotte north carolina january 
jonathan postel 
simple mail transfer protocol 
technical report rfc 
www imc org rfc 
dale rogerson 
inside com 
microsoft press 
