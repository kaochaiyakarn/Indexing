graduate school arts sciences university tokyo acm org presents semantics compilation framework aspect oriented programming language operational semantics model 
partial evaluation framework explain issues compilation processes including find places program text insert aspect code remove unnecessary run time checks 
illustrates optimization calling context sensitive pointcuts cflow implemented real compilers 
keywords aspect sandbox dynamic join point model partial evaluation futamura projection compile time weaving contextsensitive pointcut designators cflow 
part larger project aspect sand box aims provide concise models aspectoriented programming aop theoretical studies provide tool prototyping alternative aop semantics implementation techniques 
avoid difficulties develop formal semantics directly artifacts complex aspectj hyper provides suite interpreters simplified languages 
languages sufficient features characterize existing aop languages 
report result project explanation compilation strategy advice dispatch aspectj languages 
idea partial evaluation perform tests possible compile time insert applicable advice bodies directly program 
semantic framework carried visit university british columbia 
compilation semantics aspect oriented programs gregor kiczales department computer science university british columbia gregor cs ubc ca chris department computer science university british columbia cs ubc ca explains optimization aspectj compiler context sensitive pointcuts cflow 
issues semantic framework clarifies include mapping dynamic join points points program text join point shadows compiler operates 
dispatch compiled done runtime 
performance impact different kinds advice pointcuts program 
compiler handle recursive application advice 
join point models aspect oriented programming aop paradigm modularize crosscutting concerns 
aop program effectively written multiple concerns local diffuse vice versa 
far aop languages proposed practical experimental levels 
ability aop language support crosscutting lies join point model jpm 
jpm consists elements join points points aspect programs refer computation program 
lexical join points locations program text body method 
dynamic join points run time entities events take place execution program invocation method 
means identifying join points 
bodies methods particular class invocations particular method means specifying semantics join points 
run code example aspectj join points nodes runtime control flow graph program method called returns field read value returned 
call method set int class point means identifying join points pointcut mechanism pick join points things name method package caller forth 
call void point set int means specifying semantics advice mechanism possible specify additional code run join points 
call void point set int log add set working simplified jpm similar aspectj 
see section details 
rest organized follows 
section introduces aop language ajd shows interpreter 
section presents compilation framework ajd excluding context sensitive pointcuts deferred section 
section relates study formal studies aop compilation frameworks 
section concludes directions 

ajd dynamic join point model aop language section introduces small aop language ajd implements core features aspectj dynamic join point model 
language consists simple object oriented language aop extension 
operational semantics interpreter written scheme 
formalization procedural subset ajd wand second third authors 
informal semantics informally semantics ajd 
short ajd aop language simple object oriented language classes objects instance variables methods 
aop features covers essential part aspectj version 
object semantics example program 
readability java syntax defines point class integer instance variable unary constructor methods set move main 
method main point object executed line creates point object runs constructor defined line 
line invokes method move created object 
line reads displays value variable object 
simplicity onedimensional points example 
implementation uses expression syntax 
class point int point int ix set ix void set int void move int dx set dx void main point new point move write newline example program 
write newline primitive operators 
pointcuts method signatures constructor signatures identifiers types call execution new target args 
cflow syntax pointcuts 
aspect semantics explain semantics aop features ajd define jpm 
join point join point action program execution including method calls method execution object creation advice execution 
note method invocation treated call join point caller side execution join point receiver side 
kind join point kind action call execution 
means identifying join points means identifying join points pointcut mechanism 
pointcut predicate join points specify join points piece advice applies 
syntax pointcuts shown 
pointcuts parameters evaluation pointcut respect join point results bindings satisfy pointcut meaning true false 
pointcuts call execution new match join points kind signature pointcut 
pointcuts target args match join point values specified types 
operators logically combine negate pointcuts 
pointcuts match join points join point matching sub pointcuts 
discussed section detail 
interpretation pointcuts formally literature 
means specifying semantics means specifying semantics advice mechanism 
piece advice contains pointcut body expression 
join point created matches pointcut piece advice body advice executed 
call void point set int args int write set write newline example advice 
define eval lambda exp env jp cond const exp exp const value exp var exp exp lookup env var name exp call exp exp call call signature exp eval call target exp env jp eval call exp env jp jp define call lambda sig obj args jp execute lookup method object class obj sig obj args jp define execute lambda method args jp class method class method params method params method eval method body method new env list host params list class args jp expression interpreter 
types advice 
advice executed original action taken place 
similarly executed original action completed 
shows example advice lets example program print message call method set 
keyword specifies type advice 
pointcut written colon 
pointcut matches join points call method set class point args sub pointcut binds variable argument method set 
line body prints messages value argument 
program executed advice advice matches call set twice constructor method set print set set 
ajd interpreter interpreter ajd consists expression interpreter definitions aop features including data structure join point wrappers creating join points weaver pointcut interpreter 
expression interpreter shows core expression interpreter excluding support aop features 
main function eval field available information kind call execution name name method class target target method invocation args arguments method stack explained section table fields join points define call lambda sig obj args jp weave jp call sig obj args jp lambda args jp body original call goes args wrapper 
takes expression environment join point parameters 
join point execution join point enclosing method constructor 
expression parsed syntax tree 
predicates const exp call exp selectors const value call signature syntax trees 
environment binds variables mutable cells assignment variable implemented side effect scheme 
object scheme data structure class information mutable fields instance variables 
likewise assignment instance variable implemented side effect 
action creates join points defined separate sub function add aop support 
example interpreter evaluates method call expression manner 
sub expressions target object operand values recursively evaluated ll 
function call method looked class target object 
function execute environment binds formal parameters operand values created ll body method evaluated newly created environment ll 
join point join point data structure created action expression interpreter 
piece advice obtains information advised action join points 
implementation join point record kind name target args stack 
table summarizes values fields 
selectors jp kind constructor jp accessing creating join points 
wrapper order advice actions performed expression interpreter wrap interpreter functions conceptually create dynamic join points 
shows call function wrapped 
method called function creates join point pseudo variable host looking methods super classes 
define weave define pointcut match 
lambda jp action args lambda pc jp call args jp cond result action args jp call pointcut 
pc call jp 
jp call args jp sig match 
pointcut sig pc jp name jp result env args pointcut 
pc define call types match 
jp args jp lambda args jp pointcut arg types pc call args jp env pointcut arg names pc jp args jp 
define call lambda args jp lambda adv pointcut interpreter 
env pointcut match 
advice pointcut adv jp env execute adv env jp define execute lambda adv env jp weave jp adv jp lambda args jp eval advice body adv env jp weaver 
represents call action applies weave executes advice applicable join point explained 
lambda closure passed weave ll defines action call executed weaving process 
likewise functions including method execution object creation advice execution defined wrapped 
weaver shows definition weaver 
function weave takes join point jp lambda closure continuing original action action list arguments action args 
uses advice definitions global variables 
defines order advice execution executes original action followed 
function call processes list advice 
matches pointcut piece advice current join point ll executes body advice match ll 
order potentially advise execution advice function execute wrapped 
line executes advice body environment provides bindings expressed pointcut 
calling advice basically structure 
complicated due interleaved execution proceed mechanism 
pointcut interpreter pointcut interpreter pointcut match shown matches pointcut join point 
due space limitations show rules types pointcuts 
rule ll defines call pointcut matches call join point name field matches returns empty environment represent true 
args 
pointcut type variable respectively matches join point arguments type 
ll 
returns environment binds variable pointcut value argument join point 
false returned matching fails 

compiling ajd programs partial evaluation outline compilation framework partial evaluation interpreter known futamura projection 
interpreter language program interpreted partially evaluating interpreter respect subject program generates compiled program called residual program 
scheme expect partial evaluation aop interpreter respect subject program advice definitions generate compiled statically woven program 
ajd interpreter written test execute pieces advice dynamic join point compilation framework successfully inserts applicable advice shadow join points 
achieved way 
compilation framework runs partial evaluator ajd interpreter method definition 

partial evaluator processes expression interpreter virtually walks expressions method 
shadows join points instantiated 

shadow join points partial evaluator processes weaver 
statically advice definitions conceptually inserts test sequence advice 

piece advice partial evaluator reduces test execute code conditional branch constant dynamic value condition advice body clause 
depending condition entire code test code may removed 

partial evaluator processes code executes advice body 
instantiates shadows join points advice body 
steps recursively compiles advised advice execution mentioned step run partial evaluator respect method definition 
applicable method method call determined compile time object oriented languages 
start partially evaluator execute function method parameter 
rest parameters env jp set unknown partial evaluation time 
residual program serves compiled statically woven code method written scheme 
function stored dispatch table directly called run time 
partial evaluation pgg offline partial evaluator scheme 
ajd partially evaluated offline partial evaluator processes program way 
annotates expressions program static dynamic dependency statically known parameters 
annotations called binding times 
processes program evaluating static expressions returning symbolic expressions dynamic expressions 
resulted program called residual program consists dynamic expressions statically computed values embedded 
subsection explains ajd interpreter partially evaluated respect subject program emphasizing operations performed partial evaluation time 
partial evaluation automatic process believe understanding process crucially important identifying compile time information developing better insights design hand written compilers 
compilation expressions essence futamura projection perform computation involving exp partial evaluation time 
specialization execute static method eval exp static subsequent execution keeps static property exp contrast call applies method parameter dynamic value execute due nature dynamic dispatching object oriented languages 
configure partial evaluator process execute call downgrade binding time exp dynamic 
environment env treated dynamic 
careful interpreter design partially static rewrite call call execute execute manually give dynamic binding time execute 
data variable names static values dynamic 
focus 
compilation advice mentioned section compilation framework inserts advice bodies applicable shadows join points appropriate guards 
explain done partial evaluator 

wrapper creates join point calling weave 
fields join point kind name static merely depend program text 
rest fields values computed run time 
static fields passed weaver partially static data structure rewriting program keep values split data structure 
took approach ease debugging technical reasons 

function weave executed partially static join point action dynamic arguments 
advice definitions statically available partial evaluator loops test advice definition eval 

explained section matching static pointcut partially static join point may result static dynamic value 
test sequence eval statically false action taken code inserted compiled code 
statically true body advice partially evaluated body inserted compiled code guards 
dynamic case partial evaluation pointcut match 
generates expression clause statically true case clause statically false case 
essentially advice body inserted guard 

statically true dynamic cases step partial evaluator processes evaluation advice body 
wrapper calls weave application advice advice body compiled 

original action evaluated residual code original action inserted 
residual code weave original computation surrounded applicable advice bodies 
compilation pointcut step pointcut interpreter partially evaluated static pointcut static fields join point 
partial evaluation process depends type pointcut 
pointcuts depend static fields join point call execution new condition statically computed environment true false 
pointcuts test values join point define point move lambda args jp jp jp execution move args jp args list get field car args jp jp call set args jp type match 
args int write set write car args newline execute lookup method object class set args jp compiled code move method point class 
target args partial evaluator returns residual code dynamically tests types values join point 
example pointcut match 
partially evaluated respect args int expression returned residual code 
types match 
jp args jp int env jp args jp logical operators partially evaluated expression combines residual expressions sub pointcuts 
remaining pointcuts cflow discussed section 
actual pointcut match 
written continuationpassing style partially evaluator reduce conditional branch weaver ll static cases 
standard technique partial evaluation 
compiled code shows compiled code move method defined combined advice 
readability post processed residual code eliminating dead code propagating constants renaming variable names resolving environment accesses forth 
join points combine static dynamic fields readability manually split actual implementation 
creates join point method execution ll parameter list ll join point ll method call 
lines advice body guard 
guard checks residual condition args pointcut 
note run time checks performed call pointcut 
matched body advice executed ll 
original action method call performed ll 
see advice execution successfully compiled 
shadow execution join points method advice bodies inserted compiled function match advice 
call void point set int cflow call void point move int args int write move write newline advice cflow pointcut 

compiling calling context sen pointcuts briefly mentioned cflow pointcuts investigate join points call stack truth value sensitive calling context 
show straightforward implementation stack join points 
inefficient compiled properly 
show optimized implementation aspectj compiler 
implementation exploits incremental natures pointcuts shown modified version ajd 
see pointcuts properly compiled compilation framework 
keep discussion simple explain cflow section 
extending idea easy done experimental system 
calling context sensitive pointcut cflow pointcut cflow matches join points join point matches call stack 
example 
cflow pointcut lines specifies join points created method call move 
pointcut matches join point args int sub pointcut gets parameter move stack 
result execution program pieces advice figures prints set set move followed 
call set constructor advised advice cflow 
stack implementation straightforward implementation keep stack join points examine join point stack top cflow evaluated 
stack field join point maintain stack 
new join point created record previous join point stack field done argument jp 
join points passed method calls join points chained stack field current form stack join points 
restoring old join points implicitly achieved merely original join point caller continuation 
algorithm evaluate cflow simply runs stack finds join point matches shown 
reaches bottom stack result false 
problem implementation run time overhead 
define pointcut match 
lambda pc jp cond 
cflow pointcut 
pc bottom 
jp pointcut match 
pointcut body pc jp pointcut match 
pc jp stack jp naive algorithm evaluating cflow 
order manage stack push join point time new join point created 
evaluation cflow takes linear time stack depth worse 
cflow pointcuts program match specific join points keeping join points stack testing waste time space 
compilation help problems 
highlights problems 
relationship caller receiver unknown partial evaluator stack field join point dynamic 
consequently stack join points partially static fields topmost element static elements totally dynamic 
partial evaluator processes pointcut match 
static cflow pointcut partially static join point second recursive call supplies dynamic partially static join point 
residual code loop dynamically tests join point stack top element tests involving cflow performed runtime 
state implementation optimized implementation cflow aspectj compiler exploit incremental nature 
idea explained example 
assume pointcut cflow call void point move int program 
pointcut true move called 
control returns move call move taken place truth value pointcut unchanged 
means system needs manage state cflow update state join points true 
note state managed stack may previous state returning actions 
state optimization explained regards state implementation avoids repeatedly matching cflow bodies join point stack happen stack implementation 
achieved evaluating bodies cflow join point advance records result state 
having pointer current join point parameters function pop automatically done returning function 
partial evaluator supported polyvariant specialization 
test topmost element coerced dynamic 
define weave lambda jp action args new jp update states cflow pointcuts jp body original weave 
fold list define update states lambda pcs jp fold lambda pc env pointcut match 
pointcut body pc jp env update state pointcut id pc env jp pcs define pointcut match 
lambda pc jp cond 
cflow pointcut 
pc lookup state jp pointcut id pc state implementation cflow 
update state jp id new state returns copy jp id state changed new state 
lookup state jp id returns state id jp state implementation static evaluation compilation cflow bodies possible stack implementation 
bodies evaluated shadow join points 
state implementation usually performs smaller number stack operations state cflow pointcut needs updated join points matching body 
hand stack implementation push join points stack 
state implementation evaluate cflow pointcut constant time having stack states cflow pointcut 
difficult implement idea ajd 
outlines algorithm 
running subject program system collects cflow pointcuts program including appear inside cflow pointcuts 
collected pointcuts stored global variable cflow pointcuts 
system gives unique identifiers accessible pointcut id rename field join point stack state stores current states cflow pointcuts 
interpreter creates join point updates states cflow pointcuts wrapping weave 
wrapper creates copy new join point updated cflow states ll performs original action 
function update states evaluates sub pointcut cflow val create point object 
args jp jp args jp state jp types match 
args int execute lookup method object class val move val args state update jp new env args write newline 
omitted compiled code move cflow advice 
definitions variables env jp omitted 
define point move lambda args jp args list get field car args jp jp args jp state jp types match 
args int write set write car args newline val execute lookup method object class set args jp env state lookup jp env write move write lookup env newline val omitted compiled code method move cflow advice 
pointcut ll updates state result true ll 
interpretation cflow pointcut merely looks state current join point 
implementation pointcuts straightforward notice current value value cflow previous join point 
implementation pair states pointcut state cflow regarding current join point state cflow regarding previous join point truth value current join point 
compilation result figures show excerpts compiled code program pieces advice figures 
compiler gave cflow pointcut identifier 
corresponds move 
method call move cflow true compiled code updates state environment created args pointcut join point ll passes updated join point method 
shows compiled move method 
see additional code advice cflow lines 
dynamically evaluates cflow pointcut merely looking state runs body advice pointcut true 
value variable bound args pointcut cflow taken recorded state cflow pointcut 
state updated move called gives argument value move method 
summarize framework compiles program cflow pointcuts state update operations join point matches sub pointcut cflow pointcut state look ups guard advice bodies 
terms run time checks pointcuts code basically identical generated aspectj compiler 

related reflective languages crosscutting concerns controlled meta programming 
researchers including author successfully compiled reflective programs partial evaluation 
difficult reflective languages ensure successful compilation programmer easily write meta program confuses partial evaluator 
wand second third authors formal model procedural version ajd 
model compilation optimizing cflow pointcuts 
douence showed operational semantics aop system 
system monitor observes behavior subject program weaving triggered means pattern matching stream events 
gave program transformation system inserts code trigger monitor subject program 
framework automatically performs insertion partial evaluation 
andrews proposed process algebras formal basis aop languages 
system advice execution represented synchronized processes compilation static weaving transformation processes removes synchronization 
experience suggests powerful transformation techniques partial evaluator needed effectively remove run time checks dynamic join point models 

compilation framework aspect oriented programming aop language ajd operational semantics partial evaluation techniques 
framework explains issues aop compilers including identifying shadows join points compiling pointcuts recursively applying advice 
optimized cflow implementation aspectj compiler explained framework 
partial evaluation allows keep simple oper semantics processed runtime relate semantics compilation 
partial evaluation allows understand data dependency interpreter means binding time analysis 
believe approach useful prototyping new aop features effective compilation mind 
language supports core features practical aop languages believe bridge formal studies practical design implementation aop languages 
directions study include topics 
optimization algorithms studied aop programs model example elimination run time checks aid static analysis 
model refined formal systems relate semantics compilation correctness proofs 
system applied design test new aop features 

james andrews 
process algebraic foundations aspect oriented programming 
yonezawa matsuoka pages 
asai satoshi matsuoka akinori yonezawa 
duplication partial evaluation better understanding reflective languages 
lisp symbolic computation 
bergmans mehmet 
composing crosscutting concerns composition filters 
communications acm october 
anders bondorf 
improving binding times explicit cps conversion 
acm conferenceon lisp functional programming pages 

polyvariant mixed computation analyzer programs 
acta informatica 
gregor kiczales mike feeley norm hutchinson ong 
structuring operating system aspects aop improve os structure modularity 
communications acm october 
gregor kiczales mike feeley greg 
improve modularity path specific customization operating system code 
proceedings th european software engineering conference held jointly th acm sigsoft symposium foundations software engineering pages vienna austria 
mi douence olivier mario 
formal definition crosscuts 
yonezawa matsuoka pages 
futamura 
partial evaluation computation process approach compiler compiler 
higher order symbolic computation 
reprinted systems computers controls 
gregor kiczales jim des rivi res daniel bobrow 
art metaobject protocol 
mit press cambridge ma 
gregor kiczales erik hilsdale jim hugunin mik kersten jeffrey palm william griswold 
getting started aspectj 
communications acm october 
gregor kiczales erik hilsdale jim hugunin mik kersten jeffrey palm william griswold 
overview aspectj 
ecoop pages 
gregor kiczales john lamping anurag chris maeda cristina lopes jean marc loingtier john irwin 
aspect oriented programming 
mehmet ak sit satoshi matsuoka editors ecoop object oriented programming th european conference number lecture notes computer science pages jyv skyl finland 
springer verlag 
satoshi matsuoka asai akinori yonezawa 
compiling away meta level object oriented concurrent reflective languages partial evaluation 
mary loomis editor proceedings object oriented programming systems languages applications volume acm sigplan notices pages austin tx october 
acm 
akinori yonezawa 
design partial evaluation meta objects concurrent reflective language 
eric jul editor european conference object oriented programming ecoop volume lecture notes computer science pages brussels belgium july 
springer verlag 
doug orleans karl lieberherr 
dj dynamic adaptive programming java 
yonezawa matsuoka pages 
harold ossher peri tarr 
multi dimensional separation concerns hyperspaces 
technical report ibm 
brian smith 
reflection semantics lisp 
conference record symposium principles programming languages pages 
peter thiemann 
cogen lines 
international conference functional programming icfp 
mitchell wand gregor kiczales christopher 
semantics advice dynamic joint points aspect oriented programming 
proceedings ninth international workshop foundations object oriented languages fool january 
akinori yonezawa satoshi matsuoka editors 
third international conference reflection volume lecture notes computer science japan september 
springer verlag 
