active approach characterizing dynamic dependencies problem determination distributed environment brown kar keller computer science division uc berkeley ibm watson research center soda hall box berkeley ca usa yorktown heights ny usa cs berkeley edu ibm com describe methodology identifying characterizing dynamic dependencies system components distributed application environments commerce systems 
methodology relies active perturbation system identify dependencies statistical modeling compute dependency strengths 
traditional passive techniques active approach requires little initial knowledge implementation details system potential provide greater coverage direct evidence causality dependencies identifies 
experimentally demonstrate efficacy approach applying prototypical commerce system tpc web commerce benchmark active approach correctly identifies characterizes true dependencies potential space dependencies 
consider dependencies computed approach simplify guide task root cause analysis important part problem determination 
keywords application management dependency analysis problem determination 
significant challenges managing modern enterprise systems lies area problem determination detecting system problems isolating root causes identifying proper repair procedures 
problem determination crucial reducing length system outages quickly mitigating effects performance degradations increasingly difficult task systems grow complexity 
especially true number system hardware software components increases components result places system manager examine order identify cause user reported problem done author intern ibm watson research center 
paths effects problems propagate components masking original root cause 
promising approach managing complexity simplifying problem determination lies study dependencies system hardware software components 
evident literature describing dependency models important root cause analysis stage problem determination process determining system component ultimately responsible symptoms problem 
little requisite task automatically obtaining accurate detailed date dependency models complex distributed system existing problem determination assumes pre existence manually constructed dependency model optimistic assumption complexity dynamics today enterprise internet service systems 
automatically extracting static single node dependencies appear existing solution automatically detecting dynamic runtime dependencies especially cross system domain boundaries 
addresses deficiency new technique automatically identifying characterizing dynamic cross domain dependencies 
technique differs considerably traditional dependency detection techniques active approach explicitly systematically perturbing system components monitoring system response 
results perturbation experiments feed statistical model estimate dependency strengths 
compared traditional passive approaches knowledge discovery learning algorithms active approach potential obtain evidence dependencies faster accurately greater coverage 
hand invasive technique requires greater care applied production systems 
implemented active dependency discovery add technique applied implementation characterize subset dependencies prototype commerce environment tpc web commerce benchmark simulates behavior online web 
particular add approach generate dependency graph distinct user interactions supported tpc environment graph maps dependencies user interaction particular database tables interaction depends 
results experiments reveal power active approach relying knowledge implementation details test system add technique correctly classified potential dependencies automatically characterized relative importances strengths 
describes active technique experimental verification thoughts assist root cause analysis phase problem determination 
sections overview dependency models root cause analysis related 
section presents details active technique discovery dynamic cross domain dependencies 
section describe discuss results experimental validation sample dependency graph 
edge labels represent dependency strengths 
dependency discovery technique context tpc web commerce environment conclude pointers section 
dependency models basic premise underlying dependency models model system directed acyclic graph nodes represent system components services applications os software hardware networks weighted directed edges represent dependencies nodes 
dependency edge drawn nodes failure problem node head edge affect node tail edge weight edge represents impact failure effects tail node 
dependency graph heavily simplified commerce environment depicted 
dependency graphs provide straightforward way identify possible root causes observed problem simply trace dependency edges problematic node entity discover potential root causes 
example dependency graph reveals performance degradation commerce application may result problem web service turn may caused problem occurring name service 
weights available dependency edges shown provide means optimizing graph search heavier edges represent significant dependencies root causes 
provide detailed discussion dependency models problem determination section describing active technique obtaining dependency models 

related customer commerce application web service web application service name service ip service db service os significant interest literature dependency models problem diagnosis root cause analysis 
main approaches stand 
context event correlation systems described yemini choi 
systems incoming alarms events mapped corresponding nodes dependency graph dependencies nodes examined identify set nodes alarm event nodes depend 
nodes root causes observed alarms events 
main technique dependency models root cause analysis model graph map performing systematic examination system search root cause problem described context network fault management 
dependency root cause analysis techniques consider details required dependency models obtained 
believe techniques effective supplied high quality dependency models reflect accurate date view system state 
surprisingly little existing problem automatically generating high quality dependency models especially system levels network layer level dynamic detail believe necessary 
little focused passive approaches constructing dependency models 
kar describe technique automatically extracting dependencies software components machine data contained existing software deployment repositories 
technique effective identifying static dependencies address problem obtaining dynamic operational dependencies dependencies arise activated runtime operation system 
important dependencies modeled dependency model reflects generic view system potentially 
furthermore approach consider issue identifying dependencies cross machine boundaries key component required dependency models realistic systems 
interesting approach attempt characterize dynamic cross machine dependencies described 
approach provides indirect evidence dependencies detect dependencies exercised monitoring active 
provide evidence causality correlation guarantee identified dependencies real 
contrast active perturbation approach provides evidence causality detect dependencies rarely occur naturally monitoring period 

detecting characterizing operational dependencies overview assistance detailed operational dependency model provide task root cause analysis natural consider models constructed automatically extracted real system 
basic approaches taken 
system simple internal operation understood direct approach suffice 
task system component perform human expert analytically compute operational dependencies components 
approach quickly breaks system grows complex source code implementation details system unknown 
real life situations indirect approach dependency discovery needed particular measurement inference 
essence indirect approach instrument system monitor behavior specific cases failures degradations occur 
dependencies revealed correlating monitoring data tracing propagation degradations failures network hardware software components system 
dependency strengths calculated measuring impact dependent component varying levels degradation antecedent component 
main challenges indirect approach causality coverage 
causality involves differentiating causal relationships indicating dependencies simple correlations monitoring data coverage implies collecting dependency model possible especially including portions revealed faulty operation 
indirect approaches considered sufficiently address challenges typically rely various styles time correlation analysis performed monitoring data covering subset possible failure states detailed discussion scope 
choose investigate novel active perturbation approach explicitly inject problems system monitor service behavior infer dynamic dependencies strengths analyzing monitored data 
approach solves challenges controlled perturbation applied system component providing full coverage knowledge component perturbed disambiguates cause effect identifying causality 
section explains approach sets background specific perturbation experiments conducted 
active dependency discovery idea explicit system perturbation elucidate dependencies crux procedure denote active dependency discovery add 
add procedure builds operational dependency graph particular combination system workload requiring details internal implementation system 
procedure consists major steps node component identification system instrumentation system perturbation dependency extraction 
step identify nodes operational dependency graph 
essence step boils enumerating hardware software components system excluding components quality service potential failure irrelevant system 
information step come variety sources system deployment descriptions inventory management systems tivoli inventory coarser grained dependency models structural models described kar 
step instrument system 
involves establishing monitors performance availability relevant metrics 
instrumentation level user visible metrics placed various levels system 
step apply active perturbation system order dependencies 
step begins applying workload system workload representative mix seen production operation targeted workload designed explore dependencies corresponding component production workload 
workload applied components system perturbed varying levels intensity system instrumentation record system behavior performance availability 
key decision implementing perturbation step lies selection perturbation patterns components perturbed order 
starting point systematically perturb component system component time 
exists priori knowledge structure dependency graph example nodes obtained static dependency model graph simply traced leaves root obtain perturbation ordering ordering may arbitrary 
complex perturbation patterns involving multiple components uncover dependencies replicated redundant components 
step analyze perturbation data extract dependency information 
done combination standard statistical modeling regression techniques simple graph operations 
instrumented system component metric statistical model constructed relates measured values metric levels perturbation various system components 
models identify potential dependencies estimate strengths effect perturbation term statistically significant assume existence dependency instrumented entity entity corresponding perturbation term value effect coefficient perturbation term model taken dependency strength 
statistical models operational dependency graph built set nodes obtained add step adding directed edges corresponding statistically significant dependencies identified models 
active dependency discovery procedure provides straightforward method obtaining operational dependency model system 
issues arise considering practical deployment add 
consider important 
add procedure workload specific produces dependency models reflect operation system workload perturbation experiments 
hinder dependency model problem determination workload problem occurs match constructing model 
solution build dependency model components system workload select appropriate model progress problem occurs 
approach take experiments section 
second importantly add procedure invasive 
add perturbation procedure noticeably impact behavior perfor web application service apache tomcat mance availability system progress 
degradation unacceptable production environment avoided masked running perturbation part special characterization period initial system deployment scheduled downtime redundant backup component production 
alternately may possible develop techniques perturbation allow add procedure run albeit slowly peak periods production operation 
believe add procedure entirely automated description implementation rely manual intervention particular designing placing measurement perturbation points statistical analysis extract dependencies fully automated 
particular concern multi tier systems monitoring perturbation may need placed tier boundary system 
research needed gauge automated add system existing inter tier interfaces purposes manual instrumentation remain requirement 
illustrate working add example shown 
dependency edge represented label expanded include operational dependency edges come play runtime web application service database service 
broken web application service multiple nodes reflecting different workload components user operations transaction types applied system 
operational dependencies web application service database service internal database tables broken workload component 
goal add discover operational dependencies estimate values strengths denoted 
experimental validation add overview workload op op ibm db eee cluster orders shop cart customer database service order validate add effectiveness chose implement procedure context small fully functional web commerce environment 
partic dependency strength represents weighted average strengths operational dependency edges weights determined typical applied workload 
node node ular specification industry standard tpc web commerce benchmark built tier testbed system implementing line application fictitious internet 
goal experiments add identify characterize operational dependencies environment aid problem determination example commerce systems 
dependencies chose investigate service application individual tables back database similar labeled dependencies 
particular built operational dependency models fourteen different types user interaction service computed dependencies model indicated database tables needed process associated user request strengths dependencies characterized importance tables user request 
particularly appropriate set dependencies study experiments discovery problem reasonably challenging results easily validated examining application source code 
testbed environment primary goal constructing testbed environment realistic possible constraints available hardware software 
major requirement testbed implement service application close possible deployed real life 
address requirement chose application specification supplied tpc web commerce benchmark 
tpc respected industry standard benchmark released transaction processing performance council designed simulate operation realistic business oriented transactional web server 
includes specification fictitious internet application detailed specification generating reproducible user workload designed representative actual user traffic patterns 
note tpc supply implementation tpc benchmark java implementation developed university wisconsin included application business logic workload generator database population tool 
tpc comes close goal deploying realistic service 
includes required components commerce application web interface reasonably sophisticated business logic including catalog searches product recommendations best sellers large back database 
tpc testbed system organized typical multi tier fashion web browser client tier web server front tier middleware tier back database tier 
middle tier implemented application business logic java servlets deployed web application server 
system partitioned machines web server application server sharing machine 
wisconsin tpc implementation installed system configured scale parameters items database expected simultaneous users 
database tables web server static image repository populated synthetic data tpc specification 
workload perturbation experiments applied standard tpc shopping workload mix designed mimic actions typical internet shoppers combination roughly browsing type interactions ordering type interactions 
total possible user interactions tpc environment workload mix noted goal generate operational dependency model types interaction 
workload mix applied wisconsin supplied remote browser emulator rbe threaded java workload generator 
applied load concurrent users simulated user carried state machine sessions server distributions specified shopping mix 
server significantly saturated experiments 
workload generator recorded start time response time simulated user interaction carried experiments 
user think time simulated specification 
crucial part experiments perturbation system 
introduced goal establish dependencies particular tables tpc back database needed way perturb tables 
solution perturb tables introducing lock contention db command exclusively locks particular table accesses transactions 
effectively denies access locked table forcing transactions queries wait table lock released perturbing execution 
toggled exclusive lock execution full cycle time seconds duty cycle determined requested degree perturbation 
table perturbation managed java client developed allows multiple simultaneous perturbation different database tables varying levels perturbation course experiments 
results carried sequence experiments extract dependencies testbed system 
experiment characterized normal behavior system applied tpc shopping workload mix minutes measured response time transaction generated workload mix 
remaining experiments investigated effects perturbation tables tpc back database 
experiments applied tpc shopping workload mix hours perturbing database tables 
half hour perturbation level set remaining minute periods perturbation levels set respectively 
discussion results experiments examining data illustrates power perturbation technique 
shows graphs plot response times particular user transaction different levels perturbation database tables 
know priori transaction depends item author tables 
left hand graph shows response time ms cc perturbation level time raw response times tpc execute search transaction various levels perturbation 
perturbation level values plotted increasing order transaction start time 
response time transaction table cc holding credit card transaction data perturbed right hand graph shows response time behavior item table perturbed 
notice clear difference graphs left hand graph displays discernible indication response time varies different perturbations table right hand graph shows clear shift response time distribution involved table item perturbed increasing levels 
data directly suggests presence absence dependencies transaction type evident shifts distribution right hand graph reveal apparent dependency item table lack shifts left hand graph excludes possibility dependency cc table 
data analysis response time ms item perturbation level time visual inspection scatter plots effective detecting dependencies especially efficient provide numerical characterization dependency strength 
prefer able identify measure dependencies automatically applying statistical modeling techniques described 
obstacles overcome performing modeling notably distribution data sheer number data points 
seen data distribution shifts clearly heavy tailed distribution case perturbation evenly distributed block higher perturbation levels 
variance increases significantly perturbation level 
addressed problems sheer number data points summarizing data perturbation level simple mean logs original response times 
reduces number data points approximately distribution close normal central limit theorem 
side effect appears linearize data quite 
data reduced linearized easy fit regression line relating mean log response time perturbation level 
regression line key automatically identifying characterizing dependencies statistically nonzero slope line indicates existence dependency magnitude slope characterizes strength 
formally consider order linear regression model form rik ik ik mean log response time item addr country author perturbation level mean log response times tpc buy request transaction varying levels perturbation database tables 
plots corresponds perturbation single database table 
dashed lines regression lines obtained fitting order linear model form data 
indexes transaction type rik value mean log response time th execution th transaction type indexes database tables pj level perturbation table mean log response time unperturbed state effect perturbation table mean log response time transaction corresponds slope regression line 
model fits measured data terms direct measures dependencies transaction type table specifically statistically non zero say confidence level conclude transaction type depends table strength example consider data collected different user transaction case buy request transaction 
user executes transaction clicking checkout button indicating ready purchase contents virtual shopping cart 
plots mean log response times transaction cases corresponding perturbation different tables item address country author 
plots fitted model results dashed lines 
correlation coefficient fit ij ij ij ij 
seen clear differences slopes various lines 
line corresponding author table slope close zero case assume dependency author table 
lines positive slopes respectively indicating dependencies 
differences slope draw address author cc country customer item orderline orders summary operational dependencies discovered applying add tpc system 
tpc transaction types listed top tpc database tables side 
non empty box intersection transaction table indicates transaction depends table 
symbols represent dependency strengths 
dependencies different strengths item table having strongest dependency followed address table country table order 
consider transaction types tables defined tpc potential dependencies claimed dependencies static analysis system 
referring back potential dependencies obtained adding edges workload component application server table database 
dependency edges practice fact tpc case study application add technique identified potential true dependencies 
verify result carried detailed time consuming manual analysis source code tpc business logic directly determine true dependencies 
manual analysis total true dependencies system add procedure correctly identified misclassification due insufficient monitoring data 
conclude case add procedure performed remarkably correctly classifying potential dependencies easily automated procedure 
application add problem determination depicts tabular form operational dependencies discovered applying add tpc system 
information content identical included standard graph representation calculated operational dependency models 
visualizing dependencies manner suggestive useful operational dependency models assisting root cause analysis 
example say system manager fictitious commerce receives report client system performing correctly report take form service level agreement violation report 
home take steps narrow root cause 
identify faulty transaction problem report test transactions 

find appropriate column table 
select rows representing dependencies 
gives set potential root causes weights 
investigate potential root causes starting highest weight 
unfortunately procedure may uniquely identify root cause problem 
notice tabular representation dependency data suggestive matrix 
consider basis dependency space set user transactions taken different combinations provides way isolate effects specific tables 
example notice subtract dependencies dependencies left just dependency table 
find sets transactions gave basis tables performance results basis set transactions uniquely isolate faulty table 
example case knew buy conf transactions slow transactions running normally know immediately problem table 
tpc example basis exist 
plan extending application extra business logic define synthetic transactions complete basis set 
provide extra power needed automatic root cause analysis portion system modeled dependency graphs 
extended complete system model restricted database tables experiments automated dependency analysis extension add approach offer significant improvement state art problem determination 

introduced active dependency discovery add novel technique determining dynamic operational dependencies services components distributed system environments demonstrated effectiveness realistic case study 
add differs significantly existing techniques area relies active perturbation system 
invasive technique quite powerful accurately revealing dependencies components characterizing strengths conclusively identifying causality 
efficient accurate procedure discovering distributed system operational dependency graph key component proposed problem determination root cause analysis techniques key components system management problem 
add provides procedure furthermore potential improving existing root cause analysis techniques providing accurate complete dependency information providing dependency strength information optimize search root causes forming foundation potential extensions notion operation basis automatically precisely isolate root causes observed problems 
described initial step probing potential power applicability add technique 
add practically deployed host open research issues resolved 
importantly techniques developed integrating add perturbation production non disruptive manner potentially low grade perturbation techniques hybrid active passive approaches 
add verified extended complex commerce environments tpc particular tradeoffs layer layer application add examined especially systems shared queuing decouple tiers 
research needed determine best add discovered dependency models management tasks promising directions include automated model root cause analysis dependency strengths system performance optimization 
cain characterizing java implementation tpc third workshop computer architecture evaluation commercial workloads toulouse france 
choi choi lee alarm correlation fault identification scheme osi managed object classes ieee international conference communications vancouver bc canada pp 

automated generation dependency models service management workshop university assoc bologna italy 
integrated event management event correlation dependency graphs proceedings th ifip ieee international workshop distributed systems operation management 
apache jakarta project jakarta apache org 
kar keller calo managing application services service provider networks architecture dependency analysis proceedings seventh ieee ifip network operations management symposium honolulu hi 
fault isolation event correlation integrated fault management fifth ifip ieee international symposium integrated network management im san diego ca 
keller kar dynamic dependencies application service management international conference parallel distributed processing techniques applications las vegas nv 
tivoli tivoli inventory www tivoli com products index inventory 
tpc java www ece wisc edu 
tpc benchmark specification transaction processing performance council san jose ca www tpc org html 
yemini high speed robust event correlation ieee communications magazine vol 

pp 
may 
