requirements model quality attributes isabel brito ana moreira jo ara jo instituto polit cnico de portugal isabel sofia pt departamento de inform tica fct unl portugal amm ja di fct unl pt quality attributes assumptions constraints goals stakeholders 
process identify specify quality attributes integrate functional requirements 
crosscutting nature quality attributes influences negatively example reusability traceability stages software engineering process 
minimize influence start proposing template specify quality attributes requirements stage 
extend cases sequence diagrams specify integration attributes functional requirements 
quality attributes response time accuracy security reliability properties affect system 
approaches deal quality attributes separately functional requirements system 
means integration difficult achieve usually accomplished stages software development process 
furthermore current approaches fail dealing crosscutting nature attributes difficult represent clearly attributes affect requirements simultaneously 
integration supported requirements implementation software engineering principles abstraction localization modularisation uniformity reusability compromised 
propose model identify specify quality attributes crosscut requirements including systematic integration functional description early stage software development process requirements 
rest organised follows 
section presents model early quality attributes discusses main activities 
section applies approach case study 
concluding remarks section 
model early quality attributes process model propose uml compliant composed main activities identification specification integration requirements 
activity consists identifying requirements system select quality attributes relevant application domain stakeholders 
second activity divided main parts specifying functional requirements case approach describe quality attributes special templates identify cut crosscutting functional requirements 
third activity proposes set models represent integration crosscutting quality attributes functional requirements 
depicts model 
identify specify integrate identify actors cases build case diagram specify cases integrate crosscutting quality attributes functional requirements identify quality attributes specify quality attributes templates identify crosscutting quality attributes requirements model quality attributes template propose specify quality attribute influenced mylopoulos see 
name name quality attribute 
description brief description 
focus quality attribute affect system product development process 
source source information stakeholders documents 
decomposition quality attributes decomposed simpler ones 
sub quality attributes needed achieve quality attribute relationship 
sub quality attributes necessary achieve quality attribute relationship 
priority expresses importance quality attribute stakeholders 
priority max high low min 
obligation optional mandatory 
influence activities software process affected quality attribute 
list models sequence diagrams requiring quality attribute 
requirements requirements describing quality attribute 
contribution represents quality attribute affect quality attributes 
contribution positive negative 
template quality attributes identify crosscutting nature quality attributes need take account information contained rows requirements 
quality attribute cuts required requirements models crosscutting 
integration accomplished weaving quality attributes functional requirements different ways overlap quality attribute adds new behaviour functional requirements 
case quality attribute may required requirements may required 
override quality attribute functional requirements 
case behaviour substitutes functional requirements behaviour 
wrap quality attribute encapsulates requirements 
case behaviour requirements wrapped behaviour quality attribute 
weave quality attributes functional requirements standard diagrammatic representations case diagram interaction diagrams new diagrams 
applying approach case study case study chosen simplified version toll collection system implemented portuguese highways 
road traffic pricing system drivers authorised vehicles charged toll gates automatically 
gates placed special lanes called green lanes 
driver install device gizmo vehicle 
registration authorised vehicles includes owner personal data bank account number vehicle details 
gizmo read toll gate sensors 
information read stored system debit respective account 
authorised vehicle passes green lane green light turned amount displayed 
unauthorised vehicle passes yellow light turned camera takes photo plate 
green lanes type vehicles pay fixed amount toll bridge ones amount depends type vehicle distance travelled identify requirements requirements system classified functional non functional quality attributes 
functional requirements statements services system provide system react particular inputs system behave particular situations 
different types methods specify functional requirements 
case driven approaches describe ways user uses system case diagram capturing functional requirements 
quality attributes define global properties system 
usually dealt stages software development process design implementation 
identify actors cases 
road pricing system actors identified vehicle owner responsible registering vehicle vehicle driver vehicle driver gizmo installed bank represents entity holds vehicle owner account system clock represents internal clock system monthly triggers calculation debits 
cases required actors listed register vehicle responsible registering vehicle owner communicate bank guarantee account pass single toll responsible dealing tolls vehicles pay fixed amount 
reads vehicle gizmo checks 
gizmo ok light turned green amount paid calculated displayed 
gizmo ok light turned yellow photo taken 
enter checks gizmo turns light registers entrance 
gizmo invalid photo taken registered system 
exit checks gizmo vehicle entrance turns light accordingly calculates amount paid function distance travelled displays records passage 
gizmo ok vehicle enter green lane light turned yellow photo taken 
pay bill sums passages vehicle issues debit sent bank copy vehicle owner 
identify quality attributes 
quality attributes assumptions constraints goals stakeholders 
analysing initial set requirements potential quality attributes identified 
example owner vehicle indicate registration bank details automatic transfers performed automatically security issue system needs address 
fundamental quality attribute response time issue vehicle passes toll gate customer activates gizmo atm toll gate components react time driver see light amount displayed 
concerns identified similar fashion multiuser system compatibility legal issues correctness availability 
specify functional requirements quality attributes functional requirements specified uml models cases sequence class diagrams 
quality attributes described templates form 
build case diagram 
set cases represented case diagram see existing relationships cases ones cases actors 
shows case diagram road traffic system 
register vehicle pay bill pass single toll exit enter bank 
case diagram road traffic pricing system versions case diagram show relationships cases particular cases share common set events shown adding extra case related original cases include relationship 
extend relationship applied deal error situations example 
specify cases 
cases described techniques ranging natural language scenarios formal representations 
prefer scenarios described list numbered steps 
scenario particular path execution case 
cases fully described primary scenario secondary scenarios depending case complexity 
primary scenario represents main path case optimistic view 
secondary scenarios describe alternative paths including error conditions exception handling 
scenario better described sequence diagram 
sequence diagram shows temporal order interactions objects involved scenario 
case study identify scenarios case 
example cases pass single toll enter exit scenario deal authorised vehicles deal non authorised vehicles 
shows primary scenario pass single toll gate ok 
read sensor light display gizmo vehicle bankaccount getclass 
sequence diagram primary scenario building sequence diagram identify objects system needed handle corresponding scenario 
case identified interface object composed display light sensor entity objects gizmo vehicle bankaccount control object 
actors interface objects interact system 
entity objects represent core entities system objects data 
control objects decision makers objects decide done 
specify quality attributes 
specify quality attributes template section 
describe security quality attributes see figures 
name response time description period time system respond service focus system source stakeholders original description problem decomposition priority max obligation mandatory influence design system architecture implementation actors bank cases requirements 
toll gate react intime order read gizmo create identifier turn light green yellow driver leaves toll gate area display amount paid driver leaves toll gate area photograph unauthorised vehicle plate number rear 
bank react time customers re atm 
contribution security multi user 
template response time detected templates depicted figures priority conflict response time security 
trade negotiated stakeholders resolve conflict 
identify crosscutting quality attributes 
quality attribute affects case see crosscutting 
confirmed analysing requirements row 
example response time cuts 
integrate functional requirements crosscutting quality attributes integration composes quality attributes functional requirements obtain system 
uml diagrams show integration 
examples response time security fall categories described overlap wrapper 
extend uml diagrams represent quality attributes 
example sequence diagram shown extended show response time affects scenario see 
name security description restricts access system data system focus system source stakeholders decomposition integrity confidentiality 
relationship security priority max obligation mandatory influence design system architecture read sensor light display implementation actors bank cases requirements system 
protect vehicle owner registration data 
guarantee integrity data transmitted bank 
guarantee integrity data changed queried operator 
contribution response time multi user compatibility 

template security 
response time quality attribute wrap functional requirements represents response time wrapping functional requirements sequence diagram 
arrows grey rectangles identify points constraint applies 
represents security crosscutting cases 
remember security decomposed confidentiality integrity 
example overlap situation confidentiality execution cases integrity 
dashed lines represent condition dark lines represent condition 
response time gizmo vehicle bankaccount getclass bank pay bill confidentiality security register vehicle create integrity 
security overlaps cases sub qualities relationship security see 

concluding remarks approach identify specify integrate requirements 
identify requirements system select quality attributes relevant application domain stakeholders 
specify functional requirements case approach describe quality attributes special templates identifying crosscut functional requirements 
propose set models represent integration crosscutting quality attributes functional requirements 
year major conferences software engineering requirements engineering published interesting quality attributes crosscutting concerns 
part investigate approaches architecture tradeoff analysis method composition patterns goal oriented requirements engineering relate 
bergmans aksit 
composing software multiple concerns model composition anomalies 
multi dimensional separation concerns software engineering workshop icse limerick ireland 
clark moreira constructing formal specifications informal requirements proc 
software technology engineering practice ieee computer society los alamitos california pp 

clarke walker composition patterns approach designing reusable aspects 
proceedings international conference software engineering icse toronto canada 
bader aspectoriented design framework 
acm computing surveys march 
ibm research software engineering hyperspace www research ibm com hyperspace malan defining non functional requirements www com papers htm malan functional requirements cases www com papers htm mylopoulos chung nixon representing non functional requirements process oriented approach ieee transactions software engineering special issue knowledge representation reasoning software development vol 
pp 

sommerville sawyer requirements engineering practice guide john wiley sons 
schneider winters applying cases practical guide addison wesley 
suzuki yamamoto 
extending uml aspects aspect support design phase 
aop workshop ecoop lisbon portugal 
xerox parc aspectj 
www org 

