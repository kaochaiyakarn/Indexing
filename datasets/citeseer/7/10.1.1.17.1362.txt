supporting program comprehension semantic structural information focuses investigating combined semantic structural information programs support comprehension tasks involved maintenance reengineering software systems 
semantic refers domain specific issues problem development domains software system 
dimension structural refers issues actual syntactic structure program control data flow represents 
advanced information retrieval method latent semantic indexing define semantic similarity measure software components 
components software system clustered similarity measure 
simple structural information file organization software system assess semantic cohesion clusters files respect 
measures formally defined general application 
set experiments demonstrates measures assist understanding nontrivial software system version ncsa mosaic 

program comprehension complex task 
software engineer examine structural aspect source code programming language syntax nature problem domain comments documentation variable names extract information needed fully understand part software system 
number tools methods investigated address aspects 
general jonathan maletic marcus division computer science department mathematical sciences university memphis campus box memphis tn usa memphis edu memphis edu structural information easy extract real problem utilize information properly 
semantic information hand difficult extract 
knowledge systems form address problem 
typically knowledge base programming plans schemes constructed automatically identify concepts program 
inherent knowledge bases construct 
assembling domain specific knowledge time consuming expensive 
research take approach cheaper accurate methods extract semantic information 
specifically investigating information retrieval methods extract relevant semantic information software 
system uses advanced information retrieval technique latent semantic indexing lsi identify semantic similarities pieces source 
semantic similarity measure cluster software components 
presents model incorporates structural information assist comprehension task 
set experiments demonstrates measures utilized understanding nontrivial software system version mosaic 
drawn experiments research directions discussed 

information retrieval software variety information retrieval methods including traditional approaches signature short program comprehension combining semantic structural information 
pronounced proxy 
files inversion clustering 
methods try capture information documents achieve better performance include parsing syntactic information natural language processing techniques methods neural networks advanced statistical methods 
deals natural language text large number techniques exist indexing classifying retrieving text documents 
methods produce document profile 
profile abbreviated description original document easier manipulate 
research conducted specific applying information retrieval methods source code associated documentation typically relates indexing reusable components 
notable maarek ir approach automatically constructing software libraries 
success inefficiencies high costs constructing knowledge base associated natural language parsing approaches problem main motivations research 
short expensive impractical construct knowledge base necessary parsing approaches extract reasonable semantic information source code associated documentation 
ir methods statistical heuristic methods may produce results inexpensive apply coupled structural information program produce quality low cost results 

latent semantic indexing latent semantic indexing lsi statistical method inducing representing aspects meanings words passages natural language reflective usage 
method generates real valued vector description documents text 
representation compare index documents variety similarity measures 
applying lsi source code associated internal documentation comments candidate components compared respect similarity measures 
results shown lsi captures significant portions meaning individual words passages sentences paragraphs short essays 
central concept lsi information word contexts particular word appears appear provides set mutual constraints determines similarity meaning sets words 
lsi relies single value decomposition svd matrix word context derived corpus natural text pertains knowledge particular domain interest 
svd form factor analysis acts method reducing dimensionality feature space serious loss specificity 
typically word context matrix large quite sparse 
svd reduces number dimensions great loss 
single value decomposition underlying operation number applications including statistical principal component analysis text retrieval pattern recognition dimensionality reduction natural language understanding :10.1.1.117.3373
complete details latent semantic indexing see 
resulting profile word represented vector dimensional space 
performance depends strongly choice number dimensions 
optimal number typically may vary corpus corpus domain domain 
similarity words text passages word text passage computed measures vectors 
cosine contained angle vectors space degree qualitative similarity meaning 
length vectors useful measure 
criticisms method applied natural language texts word order syntactic relations morphology 
representations results derived information 
characteristic suited domain source code internal documentation 
informal abstraction problem concept may embodied names key operators operands implementation word ordering little meaning 
source code hardly english prose selective naming high level meaning problem hand conveyed reader programmer developer 
internal source code documentation commonly written subset english may lend ir methods utilized 
fundamental deficiency number ir methods fail deal properly major issues synonymy polysemy 
synonymy general sense describe fact ways refer object 
people different contexts different knowledge linguistic habits describe information different terms 
polysemy refers general fact words distinct meaning 
different contexts different people term takes varying referential significance 
software developers may tend standard terms concepts working flexible technique capable deal variability needed 
shown lsi tends address issues 
ir methods lsi utilize grammar predefined vocabulary 
ir methods list non essential words low discriminatory power 
automation simpler supports programmer defined variable names implied meanings avg english language vocabulary 
meanings derived usage predefined dictionary 
stated advantage traditional natural language approach subset grammar english language developed 

clustering source code components clustering source code semantic structural information useful maintenance evolution legacy software systems 
instance clustering assist remodularization systems identification data types 
system reengineered object oriented language structured type clustering prove useful 
objective reduce amount source code engineer needs view time give clues possible relationships system apparent current organization files documentation 
focuses profile generated ir methods case vector representation lsi compare components classify clusters semantically similar concepts 
software system broken set individual source code documents 
profiles document generated ir method 
cluster source code documents partitioned similarity value respect documents semantic space 
variety clustering algorithms divided broadly categories graph theoretical algorithms construction algorithms optimization algorithms hierarchical algorithms 
hybrid methods ideas different categories specific problems 
simple graph theoretic approach number types clustering algorithms cluster software 
minimal spanning tree mst algorithm cluster documents threshold similarity measure 
document added cluster similar documents cluster 
strategy attempts group documents similarity range 
similarity measures computed cosine vector representations source code documents 
similarity value domain value exactly similar 
simple parsing source code done break source proper granularity remove non essential symbols 
comment delimiters syntactical tokens removed add little semantic knowledge problem domain 
lsi method inherently see ubiquitous tokens semi colon totally non discriminating feature source code components 
meaningful component contains semi colon 
variance feature low zero components semi colon said similarity 
granularity source code input lsi interest point 
applications lsi natural language corpuses typically paragraph section granularity document 
sentences tend small chapters large 
source code analogous concepts function structure module file class obviously statement granularity small file containing multiple functions may large 

previous experiments lsi previous experiments done authors function class declaration levels 
readily available software systems data experiments leda library efficient data structures algorithms operating system 
leda library data types algorithms combinatorial computing provides sizable collection data types algorithms form allows non experts 
leda composed classes 
simple version unix operating system widely university level computer science os courses 
written consists approximately lines code 
leda written object oriented methodology granularity chosen class leda source code documents 
function level files data structure definitions 
resulted source code documents 
previous supported concept lsi similarity measure clustering software level granularity class function level 
clusters automatically produced method tended reflect reality source code 
pieces source code large amounts semantic similarity general grouped modules relation remained apart 
clusters leda library reflect class categories groups related classes function similar concepts solve common types problems 
system clusters quite different due different methodology programming language utilized 
case clusters represented sets documents represent class data type 
larger clusters typically composed data structure definitions number functions utilize data structures 
experiments support lsi source code fact software systems written documented organized 
systems large 
general need complex tools help understanding types software systems 
demonstrate methods real world type problem section 
developing system experimental platform order test methods usefulness general problem program comprehension 
system utilizes number metrics measures derived semantic information produced lsi 
metrics described 
cluster cluster html part relationship graph representing mosaic 
files drawing shown entirely 
edges shown 

metrics comprehension cluster file semantic similarity source code document cluster file system uses graph theoretic approach define metrics comprehension task 
choice representation multi graph similar data flow control flow graph represented see 
node represents source code document 
document relates level granularity clustering 
automatically label nodes unique document number generated parsing 
best case nodes labeled name document function name class name derived associated source basic definitions model 
definition 
source code document simply document contiguous set lines source code text 
typically document function block declarations definitions class declaration including associated internal documentation comments 
definition 
software system set documents dn 
total number documents system 
definition 
cluster ck set documents ck size cluster ck number documents cluster noted ck 
definition 
file fi composed number documents union files size file fi number documents file noted fi 
file cluster defined developers 
definition 
relationship graph represented multi graph nodes documents set weighted edges function di dj di dj di dj 
function defines nodes connected edge 
edges called parallel multiple edges 
parallel edge represents relationship nodes documents connects 
types edges represents different relationships source code documents 
consider types relationships semantic similarity structural relationships 
defined follows 
definition 
function sem defines edges represents semantic similarity source code documents 
edges defined sem function called semantic edges 
definition 
function struct defines edges represent structural relationship data flow control flow coupling 
edges defined struct function called structural edges 
cluster ck represented connected edges type sub graph 
node zero degree represents singleton cluster 
types clusters edge types 
particular define semantic clusters having edges defined semantic similarity function structural clusters having edges defined structural connectivity function 
multiple semantic similarity structural connectivity functions incorporated model 
currently type 
weighted semantic edges di dj represent similarity measure adjacent nodes case lsi di dj function lsi real value represents similarity measure document arguments 
represents cosine vector descriptions documents 
particular interest edges represent similarity documents value corresponds angle vectors 
edges fit constraint disregarded removed graph 
semantic similarity function di dj lsi di dj 
structural information currently derived file structure software system 
simple form structural information shown convey deal information 
addition existing software clustering methods graph representation model files simple nodes 
considered files implicitly cohesive units software system 
unfortunately case legacy systems 
un weighted structural edges di dj represents file 
function file argument documents source code file 
structural connectivity function di dj di dj 
case structural cluster represent file 
definitions build set metrics comprehension task 
simplicity refer semantic clusters simply clusters structural clusters files 
set measures metrics pertain semantic clusters source code documents definition 
number files contain document cluster ck definition 
semantic cohesion cluster respect files ck definition 
number documents cluster file number common nodes clusters ck fi ck fi 
definition 
degree relationship file cluster ri fi 
set measures metrics deal directly files structural clusters software system definition 
number clusters contain document file ck ck fi definition 
semantic cohesion file respect clusters fi definition 
number files related cluster file fi rfi rfi ck fi fi ck 
definition 
number files strongly related cluster file fi rfi max ck ck lck lck set clusters contain documents fi low semantic cohesion respect files 
fdc lck fdc cj empirically established threshold 
definitions generalized relate semantic clusters structural clusters kind 

experiments mosaic determine selected ir method supports program understanding process source code version mosaic table 
mosaic 
loc vocabulary number parsed documents number clusters produced input lsi clustered previously described method 
resulting partitioning help support understanding portions source code 
experiment undertaken control ir method serious structural information 
felt reasonable results produced ir method combining structural information lead powerful tool 
mosaic written programmed developed multiple individuals 
single coding standard observed entire system times different standards file 
little external documentation design architecture available internal documentation scarce missing 
short mosaic reflects kinds realities commercial software due external issues affect software development project 

clustering mosaic table gives size mosaic system files containing approximately kloc 
semantic space dimensionality documents table 
distribution size clusters 
number clusters contain number documents 
number number documents clusters generated 
documents clustered stated previously angle degrees vectors resulted groupings 
distribution clusters number documents contain table 
large number singleton clusters really large clusters 
numbers reflect type trends earlier experiments 
large number clusters size reflects fact functions stand semantically 
largest cluster part composed common header comment file 
includes large number small documents parsed lines code 
number scenarios envisioned require understanding large software system little existing external documentation 
system may maintenance person little knowledge system reengineering system may planned 
case software written reengineering system language say may planned 
fact reengineering mosaic took place current versions written 
clustering source code gives dimension view relationships pieces source code 
grouping functions structures file represents semantic relationship grouping 
instance data type adt encapsulated language implementation file associated specification file 
unfortunately software systems written habits coupling cohesion mind 
legacy systems quite common little semantic encapsulation concepts spread multiple files files contain multiple concepts 

understanding mosaic metrics described section computed clustering mosaic generated 
resulting values identify groups documents software system investigated 
guidelines utilized assessment clusters files semantic cohesion file respect clusters high 
number files strongly related cluster file low 
semantic cohesion cluster respect files high 
degree relationship file cluster ri high 
examples presents group files clusters related 
selected solely values associated metrics conjunction additional domain knowledge file names existence variables files 
files satisfy mentioned conditions considered manual inspection 
step selecting files candidates manual inspection automated reduce amount manual needed understand software system 
files clusters measurements metrics computed groups tables metrics measurements dealing files tables metrics dealing clusters tables third degree relationship files clusters tables 
table 
metrics important files related file fi fi html 
example example shows group related files table selected file names natural choice analyst starting understand software system 
goal experiment see measurements values metrics identify related files 
selected file existing measurements indicated strongly related files see table 
degree relationship cluster low see table related files cluster considered analysis 
measurements metrics table indicated strong candidates analysis 
names files surprising finding 
values indicated html best candidate rest related files 
html satisfy entirely table 
semantic cohesion clusters respect files cluster mentioned constraints fact relates clusters having high metric values see table relatively high cohesion table promoted candidate depth analysis 
depth analysis revealed strongly related files implement minimalist drawing area widget 
additionally files implement welldefined data type drawing area 
form information hiding separate file implement private functions 
functions connect files files cluster 
closer inspection revealed functions fact constructors lines code 
similar constructor type functions induced relationships ignored 
values metrics table table signify fact degree 
analysis confirmed coincidental relationship 
metrics indicated weak relationship html file relating functions analyzed 
functions html cluster related definitions similar structures defines defines 
definitions constant names similar identifiers true false null initialize inherit resize 
table 
degree relationship file cluster file fi cluster ri html html html semantic similarities indicated functions global constructs user defined types identifiers adts relate fact specializations parent class 
related function html file geometry manager widget drawing area adt 
findings indicated html analyzed conjunction table 
metrics important files related file fi fi closely related files 
metrics considering html starting file file related concepts derived previously 
concluded files contain definitions general widget structure adt class implementation specializations 
example proved analyzing metrics groups files contain cohesive implementation adts classes representing concepts drawing area identified 
metrics helped identify files contain implementation similar structures html table 
semantic cohesion clusters respect files cluster record implementation general concept widget generalization previous ones 

example chunk handling flexible arrays experiment file selected random high semantic cohesion respect clusters containing documents 
selected file documents cohesion value table 
point similar procedure described example followed 
metrics indicated highly cohesive set files analysis determined functions related perform similar functions different data structures adding character list characters share variables constants name ch file null 
addition size functions relatively small lines code 
file considered analysis 
similarity shows contains functions implement sort list directly related chunks concept 
separate analysis recommended 
similar facts file metrics lower 
remaining files table 
degree relationship file cluster file fi cluster ri implement adt deals flexible arrays chunks 
chunk system structure may extended 
routines create append data chunks automatically reallocate necessary 
generality structure determined weaker relationships files 
suggested files implement similar structures lists concepts files news articles chunks 
study related files clusters indicated cluster see tables analyzed table 
metrics important files related file fi fi separately 
supports values table indicated interestingness strongly relates cluster table 
example showed solely metrics groups strongly related cohesive files identified implemented general structure chunks flexible arrays 
metrics helped identify files contain similar structures lists 
fact mosaic written authors led interesting facts fact different authors implemented module general system 
case identified similarities help finding structures lists 
easy manually identify concepts objects handled structures stored lists 

example cluster password access control example cluster chosen starting element analysis 
starting cluster indicated previous example candidate separate analysis 
cluster spans highly related cohesive files 
manual analysis revealed files implemented basic functions structures handle passwords access control 
files functions structures 
time names files indicated relationships 
due limited space actual metrics shown 

example top clusters newsgroup example deals analysis number clusters high cohesion respect files 
second example chunk handling showed file candidate manual inspection observed relationships relevant table 
semantic cohesion clusters respect files cluster group files 
mentioned relationships indicated type list structure implemented file 
related file high cohesion table 
related top table cohesive clusters 
exact type clusters considered starting elements experiment 
analysis showed implements number structures deal concepts news group news article 
relationship file strong significant implements things network news transfer protocol module www library 
order uses structures implemented file 
list structure indicated relationships second example fact list news articles 

related related research similarity measures includes girard koschke 
similarity metrics software components defines similarity metrics combine structural semantic information 
structural information defined resource flow graph representation source code semantic information uses 
parnas information hiding principle tversky research 
proposed differs clusters parameter metrics 
research clusters software components includes merlo lakhotia 
lakhotia lists number works software clustering 
formal features structural information semantic information referred non formal descriptive features 
research conducted specific applying information retrieval methods source code includes 

experiments system show semantic similarity source code documents provides valuable information tasks software maintenance evolution 
shows concepts problem domain spread multiple files files contain multiple concepts 
steps development system incorporate additional structural information model 
low cost methods system flexibility allows experiments software written languages 
necessary change initial parsing software system 
tasks performed fully automated performed relatively short time repeatedly different kinds information 
examples describe methods assist program comprehension process 
methods appear reasonable automatically grouping semantically similar software components variable type names comment text 
clusters produced methods represent abstraction source code semantic similarity relate higher level concepts 
clusters produced similar produced programmer knowledge particular software 
adding structural information allow development tools assist understanding large scale software systems 
development cost effective methods rely acquisition representation large amounts knowledge necessary support program comprehension tools widely usable 

abd el basili knowledge approach analysis loops ieee transactions software engineering vol 
may pp 

comparison graphs concept reverse engineering proceedings iwpc limerick ireland june 
lethbridge extracting concepts file names new file clustering criterion proceedings th international conference software engineering icse 
lethbridge experiments clustering software remodularization method proceedings th working conference reverse engineering 
berry large scale singular value computations international journal supercomputer applications vol 
pp 

berry dumais brien linear algebra intelligent information retrieval siam review vol 
pp 

biggerstaff webster program understanding concept assignment problem cacm vol 
may pp 

canfora experiments identifying reusable data types program code proceedings ieee nd workshop program comprehension pp 

deerwester dumais furnas landauer harshman indexing latent semantic analysis journal american society information science vol 
pp 

duda hart pattern classification scene analysis wiley 
dumais latent semantic indexing lsi trec proceedings second text retrieval conference trec march pp 

bowen davis approach program understanding natural language understanding natural language engineering vol 
pp 

davis automatically identifying reusable oo legacy code ieee computer vol 
october pp 

faloutsos oard survey information retrieval filtering methods university maryland technical report cs tr august 
fischer specification browsing software component libraries proceedings th ase pp 

frakes software reuse information retrieval proceedings th annual hicss hi jan pp 

girard koschke comparison data type objects recovery techniques journal science computer programming elsevier 
girard koschke comparison data type state encapsulation detection techniques architectural understanding proceedings working conference reverse engineering pp 

girard koschke metric approach detect data types state journal automated software engineering vol 
october 
ning knowledge program ieee software vol 
january pp 

basili system structure analysis clustering data bindings ieee transactions software engineering vol 
pp 

jolliffe principal component analysis springer verlag 
kruskal shortest spanning subtree graph traveling salesman problem proc 
amer 
math 
soc vol 
pp 

lakhotia unified framework expressing software subsystem classification techniques journal systems software vol 
march pp 

landauer dumais solution plato problem latent semantic analysis theory acquisition induction representation knowledge psychological review vol 
pp 

leda leda manual version leda research webpage date accessed www mpi sb mpg de leda index html 
toolset program understanding proceedings ieee nd workshop program comprehension pp 

maarek berry kaiser information retrieval approach automatically constructing software libraries ieee transactions software engineering vol 
pp 

maarek smadja full text indexing lexical relations application software libraries proceedings sigir cambridge ma june pp 

maletic marcus latent semantic analysis identify similarities source code support program understanding proceedings th ieee international conference tools artificial intelligence vancouver british columbia november pp 

maletic reynolds tool support knowledge software maintenance software service bay proceedings th ieee international conference tools artificial intelligence new orleans la nov pp 

maletic automatic software clustering latent semantic analysis proceedings th ieee international conference automated software engineering ase cocoa beach florida october pp 

mitchell chen gansner automatic clustering produce high level organization source code proceedings th international workshop program comprehension iwpc italy june 
merlo de mori source code informal information analysis connectionist models proceedings int joint conference artificial intelligence ijcai pp 

notkin assessing software libraries browsing similar classes functions relationships proceedings international conference software engineering 
mosaic mosaic source code ncsa ftp site date accessed ftp ftp ncsa uiuc edu mosaic unix source 
ller orgun tilley uhl reverse engineering approach subsystem structure identification software maintenance research practice vol 
pp 

ning recovering reusable components legacy systems proceedings working conference reverse engineering 
parnas information distribution aspects design methodology information processing north holland 
press teukolsky vetterling flannery numerical recipes art scientific computing cambridge university press 
rich waters programmer apprentice research overview ieee computer vol 
november pp 

rist plans program design understanding proceedings workshop notes ai automated program understanding aaai san jose ca pp 

salton automatic text processing transformation analysis retrieval information computer addison wesley 
intelligent tool re engineering software modularity proceedings th international conference software engineering pp 

soloway ehrlich empirical studies programming knowledge ieee transactions software engineering vol 
september pp 

strang linear algebra applications nd ed academic press 
tanenbaum operating systems design implementation prentice hall 
tversky features similarity psychological review vol 
july 
clustering algorithms legacy systems remodularization proceedings working conference reverse engineering pp 

