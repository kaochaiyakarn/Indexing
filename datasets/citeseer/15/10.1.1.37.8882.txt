javelin internet parallel computing java peter bernd christiansen mihai michael klaus schauser daniel wu department computer science university california santa barbara santa barbara ca bernd schauser cs ucsb edu java offers basic infrastructure needed integrate computers connected internet seamless parallel computational resource flexible easily installed infrastructure running coarsegrained parallel applications numerous anonymous machines 
ease participation seen key property resource realize vision multiprocessing environment comprising thousands computers 
javelin java infrastructure global computing 
system internet software technology essentially ubiquitous web technology 
architecture implementation require participants access java enabled web browser 
security constraints implied resulting architecture current implementation 
javelin architecture intended substrate various programming models may implemented 
models linda tuple space spmd programming model barriers support message passing 
experimental results form micro benchmarks mersenne prime application runs heterogeneous network parallel machines workstations pcs 
keywords global computing internet java just time compilation world wide web 
late global computing active area research 
expect see hosts connected internet 
ideally combined resources computers harnessed form powerful global computing infrastructure 
difficult achieve machines run different cpus different operating systems 
machines administered individually making extremely difficult obtain login access view file resources large set machines 
result individual small group organization usually purchases cpu time maximum intended usage requirements resulting resource fragmentation poor utilization 
advent portable language system java provided tools mechanisms interconnect computer systems globe cooperative efforts 
goal developing flexible scalable easily installed infrastructure permits run coarse grained parallel applications numerous anonymous machines internet 
concept architecture designed java global computing infrastructure called javelin 
model kinds participating entities brokers clients hosts 
client process seeking computing resources host process offering computing resources 
broker process coordinates supply demand computing resources 
illustrates architecture 
clients register tasks run broker hosts register intention run tasks broker 
broker assigns tasks hosts run assigned tasks done send results back clients 
role host client fixed 
machine may serve javelin host idle night hours client owner wants additional computing resources 
december draft clients broker hosts javelin architecture 
goals philosophy important goal simplicity enable connected internet intranet easily participate javelin 
design widely components web browsers portable language java 
simply pointing browser known url broker users automatically resources available host part parallel computations 
achieved downloading executing applet spawns small daemon thread waits listens tasks broker 
simplicity approach easy host participate needed java capable web browser url broker 
infrastructure simple clients 
client needs run job contacts broker pointing web browser specific url 
provides broker necessary program code form java applet 
broker turn schedules jobs distributing program code available hosts 
basic implementation don assume client server 
needs web browser uploading applets spawning threads 
additionally dial accounts mobile computing common clients disconnect network submitting task retrieve result 
similarly hosts receive task compute line re establish network connection return results 
key technology underlying approach ability safely execute untrusted piece java code sent internet www browsers assuming security bugs fixed 
existing java virtual machines currently high interpretation overhead new technologies just time compilation dynamic compilation software fault isolation commercially available 
eventually eliminate interpretation overhead allow efficient execution java maintaining safety 
standard www browser register cpu time user level changes operating system 
expect thousands hosts participate 
scope purpose provide simple efficient infrastructure supports different programming models possible compromising portability flexibility 
discussed aiss important issues infrastructure provide successful 
attempt study issues focus particular design discussing constraints imposed standard java enabled web browsers 
versions take aspects account 
issues include security hosts able trust programs executed machines 
assume usual java security restrictions apply applets 
example applets downloaded broker permitted communicate broker 
additional java security issues discussed 
version provide levels security java enabled web browsers offer 
december draft scalability envision extending broker scalable network brokers 
local broker contact brokers resources run job 
high priority enhancement 
fault tolerance broker responsible scheduling load balancing fault tolerance 
version concentrate issues 
economic aspects participation global computing infrastructure encouraged providing hosts benefits digital cash bartering computer resources 
construction exchange mechanisms undertaken tools provided javelin 
result verification clients level assurance results received anonymous hosts correct 
assurance methods exist kinds computations 
general computations appears interesting research topic 
privacy clients may want secure program data hosts 
initial implementation javelin organizations intranets consisting large number heterogeneous computers 
running restricted intranet simplifies security privacy network performance issues full internet applications 
contributions system easy computers world cooperate parallel computations 
doing ffl identify architectural implications heterogeneous secure internet execution environment form java applets running standard web browsers ffl set behaviors implemented realize architecture discuss implementation tradeoffs ffl design implement portable flexible infrastructure called javelin illustrate implement programming models including linda tuple space spmd programming ffl provide measurements javelin current performance popular parallel application mersenne primes 
measurements shed light aspects system benefit greater efficiency 
design implementation basic design issues important goals design minimize administrative overheads associated operations installing broker registering resources host submitting tasks client 
web browsers available platform architecture common user expect framework allow registration hosts submission tasks clients web browser 
similarly implementing broker want leverage existing server technology ways extending server functionality cgi scripts rob servlets sun 
words want architecture build top existing internet infrastructure 
consequently design premises tasks task host operate represented applet embedded html page 
resides server accessible url 
december draft hosts simplest form host just java enabled web browser 
task host opens corresponding url 
clients clients create tasks producing equivalent applet 
assume clients run server 
fact just host simplest form client just java enabled web browser uploads applet broker 
broker broker server performs separate functions may implemented separate servers 
stores applet secondly matches client task host 
client broker ftpd httpd host 
upload applet 
register url 
retrieve url 
retrieve applet 
store result 
retrieve result steps involved remote execution applet 
shows steps involved remote execution applet 
steps 
client uploads applet embedding html page server 
clients run server may skip step 

client registers corresponding url broker 

host daemon acting behalf asks broker retrieves url 

host downloads applet server executes 

host stores result server site 

client retrieves result 
design implications approach plain web browsers enables easily participate javelin 
ensure security java enabled web browser introduces certain limitations 
example applet open network connection computer server downloaded 
consequence server function gateway communication client applets case parallel program running multiple hosts 
additionally java api provides interface tcp udp protocols 
applets allowed listen accept network connections port local system broker send datagrams applet 
communication established shared namespace exchanging files highly inefficient 
section discusses alternative communication channels 
furthermore applets allowed access december draft local file system 
data stored persistently broker client file access involves communication 
communication routed server additionally may serve file system large numbers clients hosts 
single server bottleneck 
propose network servers 
clients hosts files migrated servers connected high bandwidth communication channels 
host migrated brokers making corresponding daemon download new daemon broker moving terminating 
similarly registration information migrated brokers asking brokers urls 
physical migration applets supposed reduce number requests original site respect synchronization dependencies applets terms sharing memory site applets connect 
communication stubs reduce number hits propose perform physical balancing applets time submission redirecting clients requests upload applet 
especially client request redirected multiple times 
additionally propose distribute large numbers applets need synchronized brokers providing library application programmer implementing virtual shared memory 
applet allowed create instances classes stream bytes received network daemon ask underlying web browser open new location initiate downloading embedded applet step indirection 
unfortunately corresponding java api call restricted applets currently displayed web browser daemon live different web browser different frame applets executed behalf clients 
considerations complicate applications programming programmer architecture concern restrictions hidden libraries discussed section 
broker server services order upload files clients provided home directory private namespace mechanism upload files server 
furthermore broker allows clients register unregister urls allows hosts retrieve urls 
services implemented servlets 
abstractions storage communication channels synchronization constructs implemented hosts clients top file system dedicated services broker site provide better performance convenience 
general developed servers extended ways common gateway interface rob spawning new process installing servlets sun 
servlets contrast applets executed server side cgi scripts allow dynamic creation web pages 
embedded web pages invoked cgi scripts 
currently servlets supported javasoft jeeves sun jigsaw 
feel servlets supported server released near 
propose extend server services allow efficient implementation parallel programming paradigms efficient communication convenience functions wrapping applet compiled java classes html page applet 
fast communication crucial parallel programs services allowing efficient message passing provided 
basically communication implemented establishing socket connection requests 
receiver continuously invoke corresponding service pick messages communication routed server applets listen requests 
unfortunately clients hosts continuously connecting server increase contention load affect performance 
avoided delaying responses requests returning tokens sporadically avoid time outs requesting site 
object java lang class newinstance void java applet url url december draft additionally request increases load number requests polling event minimized introducing gaps keep overhead low 
propose adaptive polling client host polling broker returned new polling interval depends current load assigned intervals 
long clients hosts obey intervals overhead reduced may increase individual applications 
final measurements different loads different numbers participants 
furthermore completed applets query broker new parameters quitting host avoid overhead sending applet different host 
reloading applet host may unnecessary web browser uses cache 
similarly socket connection requires peer server site 
establishing socket connection server site creation peer requested connecting server 
servlet approach convenient way extending functionality servers application specific services 
prototype implementation allow application upload new servlets 
unfortunately ensuring security easy 
envision final deployed system fixed set servlets provided 
interesting open research questions resources cpu time memory disk space individual user able get servers 
shows steps involved establishing socket connection applets 
applet broker applet 
request peer 
create socket connection 
create socket connection steps involved establishing socket connection applets 
implementation implementation server entirely written java runs servlets compatible api javasoft jeeves sun 
broker implemented servlet schedules applets fifo queue 
furthermore servlets provide additional services form file upload described rfc semaphores linda tuple space communication channels described previous section 
form file upload supported broker servlet clients submit applet visiting broker web page filling form shown 
form data posted servlet creates new directory task wraps applet html page residing task directory enqueues corresponding url task queue 
daemon continuously polls broker servlet receives url broker queue 
receipt url daemon asks underlying web browser open frames 
url points web page embedding applet web browser indirectly asked download execute applet 
unfortunately current implementation netscape internet explorer applet security prevent hostile applets killing daemon 
december draft submitting applet javelin parallel programming language layer javelin services previous sections provide low level layer code distribution communication process execution 
provide flexible layer communication process creation programming low level layer daunting exercise 
reason describe simple programming models enable programmers express parallel programming constructs client applet code 
programming models realized executing specialized servlets broker 
language support javelin language support distributed parallel programming environment usually involves suite programming tools libraries compilers pre processors stub generators 
javelin programming environment provides number library support classes tools map different programming models current applet infrastructure 
illustrate language constructs mapped consider programming models spmd programming model single program multiple data programming model widely supported form parallel programming 
node network executes common copy program code 
parallelism obtained providing different data inputs node combining computations common result 
spmd model easily mapped javelin 
node network executes common applet december draft representing single program code 
data read run time broker coded applet replicated hosts node working portion data 
synchronization mechanisms conducted broker provided coordinate tasks involved 
explore commons forms synchronization primitives support send receive message passing required parallel program pass information hosts direct flow computation 
illustrate map send receive javelin 
steps performed ffl pair host passes send receive requests broker 
ffl send arrives receive request broker stores data acknowledges sending process 
sending process continue computation 
receive request arrives broker passes data receiving process receiving process continue processing 
ffl receive request arrives send broker reply receiving process send data available 
receiving process turn blocks proceeds poll broker corresponding send request arrives data 
send request arrive eventually receive request times 
indicated polling required send receive request receive arrives send 
polling expensive process involving issuing repeated get requests contact broker check sending data arrived 
mapping javelin perform modest optimization keeping get connection active send data arrived 
broker periodically sends noop data host order prevent get connection timing 
host ignores noop message intended send data arrives 
optimization employ socket connections host broker avoid polling altogether expense maintaining connections 
support barriers common form synchronization support spmd program barrier 
processor executing barrier wait processors reached point computation processor fully synchronized continue subsequent execution 
send receive requests fairly simple implement barrier javelin extending broker barrier servlet 
ffl host executes barrier operation sending barrier request broker indicating number hosts participating barrier synchronization 
host polls broker waiting broker acknowledge release reply 
ffl barrier request arrives broker indicates broker number pending barrier requests gamma expect releasing barrier 
broker receives subsequent barrier requests decrements number pending requests 
ffl number pending requests broker acknowledges host poll release reply replies release 
just send receive requests barrier time polling host receive release reply broker allotted amount time 
perform optimizations keeping get connection alive host polls broker employing socket connections 
december draft linda tuple space illustrate flexibility javelin design show spmd programming achieved building javelin applet layer programming abstraction known linda tuple space 
linda programming model wl originally developed david gelernter nicholas carriero yale university 
linda model provides construct known tuple space concurrent processes access insert delete update data known tuples 
atomic operations known rd provide synchronization accesses 
tuple space viewed central pool storage hosts contact share data 
programming vastly simplified parallel program need invoke primitives pass update information 
mapping linda tuple space javelin applet layer fairly straightforward 
broker serve tuple space manager executing dedicated servlet implements response handler rd operations 
host machines running applet programs contact broker invoke high level linda primitive exchange data information 
show spmd synchronization mechanisms implemented tuple space 
linda support send receive earlier saw send receive required broker executing dedicated servlet handle synchronization requests 
broker execute servlet provide tuple space management facilities programming send receive vastly simplified tuple space abstraction host processor performing send inserts message tuple space executing command receiving processor executes blocking 
command deletes message tuple space delivers receiving processor 
linda support barriers provide barrier extend functionality tuple space include general semaphore 
processor reaches barrier signals tuple space manager decrement count semaphore queries semaphore current value 
barrier host processor performs busy wait polling tuple space manager semaphore value reaches 
linda tuple space provides simple programming model implement message passing shared memory abstractions 
extending tuple space additional synchronization primitives barrier fully realize benefits spmd programming javelin 
experimental results section performance results initial prototype implementation 
conducted experiments heterogeneous network computers consisting node meiko cs sun pcs connected sci mbit ethernet networks 
micro benchmarks client point view overhead executing applets remotely overhead passing messages remote applets great interest 
experimental results implementation discuss implications advantageously proposed architecture 
remote execution applets executed host applet sent broker downloaded host 
results sent back client broker 
client posts applet broker servlet enqueues 
daemon polls broker url web page embedding applet sent 
daemon opens url december draft invokes embedded applet 
micro benchmark applet immediately invokes servlet broker indicate done 
client polls corresponding servlet broker site results 
standard mb ethernet network downloading invoking applet takes milliseconds idle broker 
basic overhead increases load broker increases 
imply coarse grained applications take advantage proposed architecture 
hand reader forget parallel machines similarly high start costs spawning parallel 
having paid start cost communication implemented efficiently discussed 
message passing applet open network connection site loaded messages applets routed broker 
additionally java api provides interface tcp udp protocols 
applets allowed listen accept network connections port local system broker send datagrams applet 
message passing applets tcp 
basically possibilities enable message passing 
permanent socket connection established connection protocol 
establishing permanent socket connection allows single message sent milliseconds standard mb ethernet network introduces upper bound number hosts clients served single broker site 
long applications coarse grained overhead opening socket connection neglected 
receiver poll broker site continuously response request message delayed arrives 
applying technique single message takes milliseconds 
message passing top tcp slow compared dedicated parallel machines networks heterogeneous machines produce unpredictable applet runtimes computation intensive parallel applications take advantage proposed architecture 
mersenne prime application interesting application javelin infrastructure implement parallel primality test search prime numbers 
shall see type application suited javelin coarse grained high computation communication ratio testing large mersenne primes 
mersenne prime prime number form gamma exponent prime 
discovery prime numbers time relegated domain mathematicians working number theory advent computer provided powerful tool search verify mersenne primes 
discovery th mersenne prime raphael robinson rob subsequent mersenne primes computer 
date mersenne primes discovered 
larger larger prime exponents search primes progressively difficult 
current implementation developed java application test mersenne primality range prime numbers 
application works follows 
client submits broker applet containing mersenne primality test servlet coordinates range numbers checked 

broker running servlet waits hosts participate mersenne prime test 
maintains fifo primes checked hosts join computation 

user registers broker host daemon downloads mersenne applet host site executes applet 
applet contacts broker obtain prime exponent check resulting mersenne gamma prime 
december draft 
host applet completed computation reports result back broker 
broker marks prime exponent host tested corresponds mersenne prime 
host asks prime test broker dispenses subsequent primes fifo empty 
measurements measurements chose test mersenne primality prime exponents 
conducted experiments heterogeneous computing environment consisting various architectures sun ultrasparc single multiprocessor pentium pc sgi mips single multiprocessor node meiko cs 
netscape navigator browser platforms pentium pcs running windows microsoft internet explorer explorer just time compiler performed measurements compiled interpreted versions test program 
started measuring total execution time architecture separately 
shows total time needed test prime numbers single machine 
tests performed javelin infrastructure reported times include overheads 
see newly released compilers java ones pcs dramatic impact execution time example times improvement case mhz pentium 
mac solaris sgi win ultrasparc win compiled code mersenne primality test prime exponents 
tested architectures mhz mhz pentium running solaris windows sun ultrasparc sgi mips 
second set measurements performed clusters identical machines 
presents speedup curves test runs node meiko cs left cluster sun right 
cases speedup close linear long ratio job size number processors big achieve distribution tasks processors 
tests chose worst case scenario biggest tasks large amount computation enqueued task queue strongly affected speedup full parallelism exploited tasks 
shows clever task distribution important issue taken consideration 
tested prototype heterogeneous environment consisting pcs running windows meiko nodes running solaris 
chose uneven distribution platforms reflect possible real situation computing resources registered broker moment 
broker job distribute tasks close optimal utilization resources 
shows total execution times different combinations previously mentioned architectures 
note pcs just time java compiler perform just fast sparc running java nodes cs sparc processors running enhanced version solaris 
december draft meiko processors ultrasparc processors speedup curves primality test node meiko cs sparc processors cluster 
interpreter 
combined resources machines showed improvement substantial due big difference computing speed compiled versus interpreted versions 
shows tasks ratio communication computation small primality test assigned faster processors 
ensure fast cpu cycles doing communication 
ultra pc sparc pc ultra pc ultra sparc primality test heterogeneous platform consisting sparc 
measured difference java versions mersenne primality test program 
shows execution times test mersenne prime gamma mhz pentium ultrasparc 
tested version program java version just time compilation see performance just time compilers closer case pentium processor version faster java compiled version 
related rapidly expanding body vision seamlessly integrating networked computers global computing resource 
new java generation projects aimed establishing time measurements didn just time compiler solaris announced released coming weeks 
final measurements interpretation results focused compiled version java primality test program 
december draft version compiled java code interpreted java code pentium mhz ultrasparc comparison java versions mersenne primality test program large prime gamma 
software infrastructure shared vision implemented 
include projects charlotte atlas bbb 
elegantly proposes extensions java extending runtime system speed execution third party applications extending libraries java parallel class library supporting message passing parallelism applications exploited 
appears require clients applications behavior violates security constraints imposed applets 
proposed extension java runtime system cleanly implement virtual shared memory 
appear scale 
atlas extends cilk project blu provide safe heterogeneous execution java hierarchy managers 
generalization stealing hierarchical stealing key scalability 
url file system contributions currently read written java hurting portability 
atlas programming model enables scalability dynamic parallelism fault tolerance limited tree structured computations 
retaining properties broadening programming model challenging open problem 
charlotte programming environment parallel computing uses java achieve security heterogeneity 
fault tolerance load balancing achieved transparently clients eager scheduling repeatedly assigning job hosts host completes conjunction memory management technique called phase idempotent execution strategy ties ensures shared variables consistent state 
charlotte distributed shared memory concurrent read exclusive write semantics requires modifying os compilers 
implementation entails ties shared name space wrapper classes putting granularity shared memory client application programmer control 
charlotte method brokering clients hosts scale works moderately sized computations 
time publication request host required human intervention 
approaches relying java applications applets require user familiar java interpreter compiler trust runtime bytecode executed local host applications restricted access network local resources 
javelin provides single framework limitations addressed focusing simplicity scalability 
volunteer computing sar presents preliminary concepts java system javelin identifying fundamental issues related incentives hosts efficiency security clients 
benefited mature networked computer projects network workstations ap pvm sun mpi mpi webos nexus tri linda wl piranha sch legion project 
earlier projects distinguished december draft javelin require user login access machines computation require operating system modifications require maintenance binaries architectures computation 
eliminating requirements intend javelin administrative overhead fraction earlier systems easing participation larger community networked resources 
systems fer java mpi tay overcome heterogeneity today large scale networks scale quite 
contrast javelin designed allow individual user register computing resources broker arbitrary java capable browser netscape navigator violating local security policies 
simplicity thousands users register computing resources broker giving javelin ability harness extraordinary amount computational power 
java build distributed systems execute internet proposed chandy cdl fox ff 
mechanisms needed implement proposed framework eventually may realized released standard java components remote method invocation rmi sun object serialization sun provided research groups sc 
example jada ros gut implement version linda tuple space 
large variety java performance available free bytecode compilers free just time compilers kaffe fja guava sof 
approach extending function servers relies servlets supported javasoft jeeves jigsaw con 
commercial just time compilers vm symantec caf sym available netscape int announced 
secure execution arbitrary binaries addressed techniques 
software fault isolation techniques guard insecure system calls programs patching binaries 
example sof uses technique cost recompilation 
second secure remote helper applications operating system tracing facilities slic gpa intercept subset system calls possibly violate system integrity 
designed implemented javelin prototype infrastructure internet parallel computing java 
javelin allows machines connected internet portion idle resources available remote clients times utilize resources machines computational power needed 
believe infrastructure transforming web immense parallel computing resource successful flexible foremost easy install 
requiring clients hosts access java enabled web browser javelin achieves ease participation os compiler modifications needed system administrative costs zero 
furthermore system implementation server entirely written java current web technology 
discussed possible extensions servers allow efficient implementations parallel programming paradigms 
analyzed limitations imposed security restrictions web browsers showed influenced design implementation 
extend functionality javelin system provide parallel programming language layer offers support spmd programming model linda tuple space applet 
experimental results consisting micro benchmarks measurements mersenne primality tests coarse grain compute intensive application running heterogeneous environment consisting node meiko cs sun pcs connected sci mbit ethernet networks 
noticeably just time compilers differences java versions performance issue 
expect versions javelin see performance boost due optimized compilers 
believe javelin successfully internet parallel computation versions solve remaining challenges result verification fault tolerance client privacy 
december draft aiss alexandrov schauser 
web global computing infrastructure 
appear international parallel processing symposium may 
ap anderson 
magic router application fast packet interposing 
submitted osdi 

vm 
www com vm 
bbb blumofe brewer 
atlas infrastructure global computing 
proceedings seventh acm sigops european workshop system support worldwide applications 
kedem wyckoff 
charlotte metacomputing web 
proceedings th conference parallel distributed computing systems 
blu blumofe 
executing multithreaded programs efficiently 
phd thesis department electrical engineering computer science massachusetts institute technology september 
sandhu shan talbot 
world wide supercomputing 
proceedings seventh acm sigops european workshop system support worldwide applications 
cdl chandy dimitrov le richardson rifkin tanaka 
world wide distributed system java internet 
proceedings fifth ieee international symposium high performance distributed computing syracuse ny august 
con world wide wed consortium 
jigsaw server 
www org pub www jigsaw 
dean felten wallach 
java security hotjava netscape 
proceedings ieee security privacy oakland ca may 
fer ferrari 
java parallel virtual machine 
www cs virginia edu html 
ff fox 
web java high performance distributed computing evolving virtual machine 
proceedings fifth ieee international symposium high performance distributed computing syracuse ny august 
fja free java compilers 
cygnus com projects java html 
gpa petrou anderson 
slic secure loadable interposition code 
technical report csd university california berkeley 
gut 

info gte com ftp circus 
grimshaw wulf french weaver reynolds jr synopsis legion project 
technical report cs department computer science university virginia june 
goldberg wagner thomas brewer 
secure environment untrusted helper applications confining hacker 
proceedings usenix security symposium 
sun microsystems jeeves alpha release sun microsystems 
www javasoft com products java server alpha 
int netscape intranet vision product roadmap 
www netscape com white intranet 
mpi mpi message passing interface standard 
international journal supercomputer applications high performance computing 
rob robinson 
www common gateway interface 
internet draft 
version 
rob raphael robinson 
mersenne fermat numbers 
proceedings american mathematical society volume pages 
ros rossi 
jada 
www cs unibo rossi jada 
sar 
volunteer computing 
draft preliminary concept project proposal october 
sc chandy 
reliable synchronization primitives java threads 
technical report cs tr california institute technology june 
sch schrage 
piranha processing utilizing time 
electronic newsletter august 
sof 
software guava just time compiler 
guava com au 
sof software 
technical overview 
www com 
sun sunderam 
pvm framework parallel distributed computing 
technical report ornl tm dept math computer science emory university atlanta ga usa february 
sun sun microsystems java object serialization specification may 
revision 
sun sun microsystems java remote method invocation specification may 
revision 
sun sun microsystems java servlet application programming interface november 
draft version 
december draft sym symantec just time compiler windows nt 
cafe symantec com jit index html 
tay taylor 
prototype java mpi package 
anu edu au sam java java mpi prototype html 
tri tripathi 
overview nexus distributed operating system design 
ieee transactions software engineering 
vahdat dahlin anderson 
turning web computer 
submitted publication 
wl 
linda supercomputing local area network 
technical report yaleu dcs tr department computer science yale university new haven connecticut 
