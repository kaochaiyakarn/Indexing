sensor resetting localization poorly modelled mobile robots scott lenser manuela veloso school computer science carnegie mellon university pittsburgh pa new localization algorithm called sensor resetting localization extension monte carlo localization 
algorithm adds sensor resampling monte carlo localization robot lost 
new algorithm robust modelling errors including unmodelled movements systematic errors 
algorithm real time systems limited computational power 
algorithm successfully autonomous legged robots sony legged league robotic soccer competition robocup 
results real robots demonstrating success algorithm results simulation comparing algorithm monte carlo localization 
describes new localization algorithm called sensor resetting localization srl extension monte carlo localization 
localization algorithm developed sony legged league robotic soccer competition robocup 
algorithm tested domain separate tests hardware environment simulation 
part devoted detailing environment localization algorithm operates 
start description robot software follow description soccer field robot plays 
rest explains features domain localization problem especially challenging 
hardware robots competition tests generously provided sony 
robots excellent platform research development provide exceptional hardware commercially viable 
robot consists designed look small dog 
robot approximately cm long plus cm due head 
neck legs degrees freedom 
neck pan ffi side allowing robot scan field markers 
robot stands cm high shoulder head extending cm 
vision vision provided color ccd camera resolution 
robot field view ffi horizontally ffi vertically 
input camera processed color separation hardware analyzed vision system return distance angle markers seen 
distance estimated distance color blob centers 
distance estimates vary sigma robot standing 
mean value usually distance ffi angle 
markers partially camera look noise vision system 
sides edges markers commonly missed vision system 
effects sensor readings occasionally larger errors usual 
vision system subtracts neck angle passing result localization algorithm 
neck angle sensed board sensor accurate high granularity 
locomotion locomotion tests developed sony 
due complexities legged locomotion lot variability motion performed robot motion commands 
repeatedly executing path approximately length turns results final positions robot vary 
robot moves feet slip randomly surface field contributing large movement error 
robot transition different types motion forward forward right right forward turn right backward different gaits 
robot slips randomly field surface transitioning motion 
slippage transitions ffi tend affect position 
additional errors movement introduced different results robot behavior slight changes environment slightly different field surface somewhat lower battery charge 
day day variations robot behavior expensive model time takes determine model parameters 
systematic errors observed lab 
field field robot operates length width 
field surrounded low walls keep robots ball field 
color coded goal field cyan yellow input localization 
surface field short goals surface smooth plastic 
field surrounded markers long sides field 
marker corner center line 
marker color coded cylinder mounted cm surface field eye level robot 
cylinder cm high cm diameter 
cylinder divided vertically equal sized colored patches pink cyan green yellow indicate position long axis field refer axis 
pink top bottom indicates side field marker 
uniquely distinguishable markers robot estimate distance angle 
challenges sony legged league robotic soccer competition robocup provides challenging domain localization 
due nature legged locomotion significant errors odometry occur robot moves 
noise introduced odometry readings frequent extended collisions walls robots 
unable detect collisions unable locate robots model collisions robots introducing error system 
noise vision processing localization difficult 
additional complication introduced rules specify certain circumstances robot moved referee telling robot 
challenges addressed localization system ffl errors occasionally large sensor readings ffl systematic errors sensor readings ffl large amounts noise odometry ffl systematic errors odometry ffl collision induced unmodelled movements ffl referee induced large unmodelled movements localization section gives brief overview bayesian approach localization year followed description monte carlo localization sensor resetting localization 
previous localization approach previous sony dogs robocup team vision navigation system developed bayesian localization algorithm 
able landmarks effectively robots probabilistic method localization triangulation landmarks 
described classical bayesian approach field discretized grid locations continuous robot head angle discretized set possible values 
grid cells robot headings define state space 
observations landmarks combined state space position calculation 
localization algorithm passes uses bayes rule updates 
pass incorporates observations probability distribution discretized state space grid cells robot headings 
second pass updates probabilities function movement actions selected 
monte carlo localization monte carlo localization mcl uses general bayesian approach localization 
monte carlo localization represents probability density location robot set discrete samples 
sample exact point locale space updates samples easy implement 
density samples area proportional probability robot area 
points distributed evenly entire locale space mcl focusses computational resources needed increase resolution near believed location robot 
position robot calculated samples mean 
uncertainty estimate estimated calculating standard deviation samples 
kinds update operations applied sample set movement updates sensor updates 
movement updates require convolution locale probability density movement probability density jl 
movement updates done updating samples sample set independently 
new sample drawn move ment probability density jl replace locale sample 
note known may depend 
sensor updates require multiplication locale probability density sensor reading probability density ljs 
sensor updates done steps 
samples weights equal probability locale sensor readings ljs 
second new set unweighted locale samples generated randomly sampling replacement old locale sample set probability sample selected proportional weight 
note step generates new sample points 
optionally random noise added sensor update help algorithm recover errors 
total weight samples gives indication approximation error resampling step 
total weight proportional probability locale sample set sensor readings 
possible information adjust sample set size dynamically try keep errors roughly constant 
complete description monte carlo localization please see fox dellaert 
summary monte carlo localization movement update 
jm convolved jm 
foreach sample 
draw sample jm 
replace sensor update 
js ljs ff ff constant 

optional step replace samples random samples 
foreach sample 
set weight sample equal probability sensor reading ljs 
foreach sample 
calculate store cumulative weight samples current sample cw 
calculate total weight samples tw 
foreach sample desired 
generate random number tw 
binary search find sample maximum cw 
add sample monte carlo localization discussion modelled movements gaussians movement distance movement direction heading change 
represented sensor distributions gaussians distance landmark egocentric angle landmark 
set deviation equal percentage mean distance constant value angle 
attempted sensor update stage movement update stage 
discovered samples localization algorithm slow 
algorithm real time ignored sensor readings localization algorithm fell movement updates 
throwing away sensor readings able execute twice fast sacrificed small amount accuracy large amount precision 
samples monte carlo localization global localization tracking similar resolution needed samples spread larger area 
mcl run samples global localization locale probability density prematurely collapses points 
testing samples commonly observed sample set collapse distinct samples global localization single marker 
number samples remains constant course number distinct samples reduced greatly sensor update phase 
single marker reading localizes robot circle marker set distance heading relative center circle 
obviously distinct samples sufficient represent circle accurately 
adaptive sample set sizes help movement update step resampled 
robot takes steps sees marker probability density consist tightly grouped blobs points doesn fix problem 
premature collapse probability density results increased time global localization misleading error position global localization 
robots continually losing track position due collisions moved falling extremely important localization algorithm capable globally localizing quickly 
mcl capable handling small systematic errors movement 
sensor reading gives mcl chance correct small amount systematic error 
amount systematic error corrected increases larger movement deviations larger numbers samples 
systematic error movement gets large mcl slowly accumulate error 
need handle systematic errors movement measuring movement parameters robot time consuming 
systematic errors movement occur environment changes unmodelled ways 
example robot moves plastic surface goal movement robot motion commands change 
mcl handle unexpected unmodelled robot movements 
time mcl takes recover proportional magnitude unexpected movement 
time mcl reports incorrect locations 
unexpected movements happen frequently robotic soccer domain working 
collisions robots walls result motions having unexpected results 
collisions difficult detect robots modelled localization algorithm 
unexpected movement incur teleportation due application rules referee 
mcl takes long time recover 
drawbacks mcl alleviated adding adaptive sample set sizing 
adaptive sample set sizing mcl sensitive systematic errors movement srl 
mcl adaptive sample set sizing requires different computational resources number samples changes 
adaptive sample set sizing described fox take extremely long time robot thinks position sensor readings indicate different position especially robot movements accurate 
unable apply mcl adaptive sample set sizing working real time domain additional computational power available 
sensor resetting localization sensor resetting localization srl extension monte carlo localization 
srl motivated desire fewer samples handle larger errors modelling handle unmodelled movements 
srl adds new step sensor update phase algorithm 
probability locale designated samples low sensor readings ljs replace samples samples drawn probability density sensors ljs 
number samples kept proportional average probability locale sample sensors divided expected average probability locale samples 
average probability threshold samples kept 
average probability locale samples falls threshold samples replaced samples sensor readings ljs 
call sensor resampling 
logic step average probability locale sample approximately proportional probability locale sample set covers actual location robot probability think 
minus value probability wrong suggests replace proportion samples equal probability wrong samples sensors 
constant proportionality average probability locale sample probability wrong parameter tweaked control localization algorithm resets 
summary sensor resetting localization movement update 
jm convolved jm monte carlo localization 
sensor update 
js ljs ff ff constant 

monte carlo localization 

calculate number new samples ns gamma avg sample prob prob threshold num samples 
ns repeat ns times 
draw sample ljs 
replace sample sensor resetting localization discussion modelled robot movements sensor readings way monte carlo localization 
sensor resampling threshold equal expected result samples distributed sensor gaussians having probability 
sensor resetting localization applicable domains possible sample sensor readings ljs 
problem landmarks sensor readings sensor distributions easy sample 
possible locations robot known sensor sampling done rejection sampling 
rejection sampling increases run time resampling proportion probability having reject sample 
advantages srl fewer samples sacrificing accuracy 
possible part efficient globally localizing 
marker seen global localization probability samples low 
average probability sample small srl replaces locale samples samples sensors 
results samples distributed evenly circle determined marker 
samples samples mcl represent circle marker 
naturally reduces misleading errors global localization 
reduces time required converge correct localization correct answer thrown prematurely 
seeing marker circle collapses small area circles intersect 
average probability locale samples higher seeing marker samples concentrated right place sensor reading 
threshold sensor resampling set correctly new samples drawn due second sensor readings 
long tracking working new samples generated sensors algorithm behaves exactly mcl 
srl handle larger systematic errors movement error accumulated srl replace current estimate robot location sensor readings effectively resetting localization 
adaptive sample set sizing helps mcl mcl sensitive systematic errors movement unexpected unmodelled robot movements 
srl easier apply real time domains running time step nearly constant easy bound 
srl handle larger unmodelled movements mcl 
localization algorithm needs handle extended collisions robots wall gracefully 
srl resetting estimate current robot position gets far sensor readings 
srl able handle large unmodelled movements movement referee easily 
srl resetting time gets sensor reading conflicts estimated position 
mcl take long time correct long distance teleportation error movement occur move mean samples new location 
results tested sensor resetting localization robots provided sony simulation 
simulation testing compared sensor resetting localization monte carlo localization random noise samples added 
tested srl real robots parameters robocup 
samples tests 
order execute real time forced ignore sensor readings 
due inevitable changes conditions measuring model parameters parameter distance moved angle movement ffi amount rotation ffi step 
deviations reported localization movement vision 
test robot run set trajectory steps slowly turning neck side side 
robot instructed different numbers steps executed 
final position robot measured hand run 
runs number steps averaged results 
compared actual location robot data points location reported localization algorithm 
calculated error mean position time deviation localization reported time 
calculated interval dimension mean reported localization adding subtracting standard deviations reported localization 
calculated distance interval dimension refer interval error 
report average interval error root mean squared interval error 
feel root mean squared interval appropriate measure weights larger misleading errors heavily 
calculated percentage time actual location robot fell box defined intervals 
table shows localization accurate cm ffi despite erroneous parameter values 
actual location robot box time outside box close box 
fact localization seldom gives misleading information important making effective behaviors 
show error position quickly converges steady level 
shows deviation reported algorithm quickly converges fairly steady level 
deviation tends go time error goes keeps interval error low avoids misleading output 
competition observed localization algorithm quickly resets unmodelled errors picked occur 
mm mm theta ffi average error average interval error rms interval error box percentage steps taken srl real robots mean steps taken srl real robots mean simulation tested sensor resetting localization monte carlo localization random noise 
developers monte carlo localization suggested adding random samples help algorithm recover errors tested monte carlo localization adding random noise samples adding random noise samples 
test run times results averaged 
tests run samples noted 
simulator models movement robot probability density localization algorithm 
step probability density motion sampled generate new position robot 
parameters movement model parameters robocup 
robot vision system modelled assuming vision system correctly identifies robot view cone estimates correct distance angle marker 
reported deviation vision information localization algorithm 
modelled movement robot neck simulator having sweep set degrees relative body pace real robot 
neck movement allowed robot see different markers field positions 
shows srl error mcl localization small sample sets 
show mean error confidence interval error bands 
sample set increased samples algorithms give identical performance 
performance mcl noise samples slightly worse mcl noise samples especially small sample sizes mcl noise shown figures 
interestingly error srl stayed constant samples usable samples 
shows srl gives fewer misleading results mcl 
srl gives fewer misleading results intermediate sample counts error srl mcl disappeared 
samples position error mm srl mean error bands mcl noise mean error bands samples position interval error mm srl rms error bands mcl noise rms error bands figures show srl able global localization quicker mcl samples 
figures show mean error standard deviations mean deviation lines error bars 
srl able globally localize steps mcl takes steps 
noisy domains adversarial robots afford spend steps localizing 
global localization performed srl consistent mcl making output easier reason 
surprisingly adding noise mcl hurts global localization 
noticed testing mcl noise pays penalty larger deviations algorithms 
shows average interval error time algorithms see experiment real robots description interval error 
srl mcl generates large interval errors global localization indicates producing misleading outputs 
steps taken srl rms standard deviations mcl noise rms standard deviations steps taken srl rms standard deviations mcl noise rms standard deviations steps taken srl rms mcl noise rms mcl noise rms tested response srl mcl systematic errors movement vision 
simulated systematic movement errors multiplying actual distance robot moved turned simulator constant factor telling localization algorithm 
shows sensitivity algorithm movement parameters important movement parameters expensive difficult measure 
simulated systematic error vision multiplying distance estimates passed localization constant factor 
figures show srl robust modelling error mcl especially regards systematic movement error 
shown figures mean confidence interval error bands 
systematic movement error position error mm srl mean error bands mcl noise mean error bands systematic movement error srl mean error bands mcl noise mean error bands systematic vision error position error mm srl mean error bands mcl noise mean error bands systematic vision error srl mean error bands mcl noise mean error bands tradeoff robustness systematic movement error systematic vision error 
srl mcl noise favor robustness movement errors mcl noise favors robustness vision errors 
mcl noise performs better srl large systematic vision errors 
srl performs better mcl noise cases similar response vision errors lower errors movement errors 
srl robust errors movement mcl noise especially movement error larger standard deviations 
summary sensor resetting localization srl provides effective localization option real time systems limited computational resources 
technique applicable markovian domains locale samples drawn sensor readings possible sample ljs 
srl requires constant amount processing power monte carlo localization mcl adaptive sample set sizes attempt address issues srl 
srl achieves better results mcl small sample sets translates smaller computational resource requirements 
srl able localize effectively small sample sets little computational power 
part reason srl able accomplish srl ability globally localize fewer samples 
srl automatically resets errors accumulate allowing gracefully recover errors modelling collisions teleportation 
srl sensitive mcl systematic errors modelling large errors vision mcl random noise samples added 
srl particularly robust respect systematic errors movement 
addition benefits algorithm returns misleading information 
algorithm correctly reports reliability best guess location robot 
sensor resetting localization accurate easy technique able perform robust localization small computational resources 
acknowledgments sony providing wonderful robots walking movements 
jim bruce developing vision system winner developing behavior system robots 
tucker balch suggesting ways display data collected 
research sponsored part defense advanced research projects agency darpa air force research laboratory afrl agreement numbers 
views contained document authors interpreted necessarily representing official policies endorsements expressed implied air force united states government 
burgard fox schmidt estimating absolute position mobile robot position probability grids proceedings thirteenth national conference artificial intelligence aaai vol 
pp 

dellaert fox burgard thrun monte carlo localization mobile robots proceedings international conference robotics automation 
fox burgard thrun active markov localization mobile robots robotic autonomous systems vol 
pp 

fox burgard dellaert thrun monte carlo localization efficient position estimation mobile robots proceedings sixteenth national conference artificial intelligence aaai 
fujita veloso uther asada kitano 
vision strategy localization sony legged robots robocup ai magazine appear 

gutmann burgard fox konolige experimental comparison localization methods proc 
ieee rsj international conference intelligent robots systems iros 
simmons koenig probabilistic robot navigation partially observable environments proceedings international conference machine learning icml 
veloso uther sony legged robot team asada kitano eds robocup robot soccer world cup ii springer 
