empirical study evaluating depth inheritance maintainability object oriented software john daly andrew brooks james miller marc roper murray wood dept computer science university strathclyde livingstone tower richmond street glasgow xh scotland email cs strath ac uk isern empirical research undertaken part multi method programme research investigate unsupported claims object oriented technology 
series subject laboratory experiments including internal replication tested effect inheritance depth maintainability object oriented software 
subjects timed performing identical maintenance tasks object oriented software hierarchy levels inheritance depth equivalent object software inheritance 
replicated experienced subjects 
second experiment similar design subjects timed performing identical maintenance tasks object oriented software hierarchy levels inheritance depth equivalent object software 
collected data showed subjects maintaining object oriented software levels inheritance depth performed maintenance tasks significantly quicker maintaining equivalent object software inheritance 
contrast subjects maintaining object oriented software levels inheritance depth took longer average subjects maintaining equivalent object software statistical significance obtained 
subjects source code solutions debriefing questionnaires provided evidence suggesting subjects began experience difficulties deeper inheritance hierarchy obvious object oriented software going maintainable long run 
findings sufficiently important attempts verify results independent researchers 
daly fraunhofer institut kaiserslautern germany object oriented technology increasingly popular result anecdotal evidence expert intuition despite various warnings relying evidence bur hhl 
evidence derived variety empirical techniques data collected substantiate findings identify discrepancies act platform investigation 
unfortunately research performed objectoriented technology means little empirical evidence exists support claims 
example jones jon details visible lack empirical data support assertions substantial gains software productivity quality reduction defect potential probable number defects causes encountered development production improving defect removal efficiency percentage defects removed operation code inspection reuse software components 
henry hhl provide list state claims having qualitative appeal little supporting quantitative data 
contrast related research reported aggregation dynamic binding inheritance polymorphism introduce difficulties programmers attempting understand maintain test object oriented software see cvm dvo lmr wh 
example wilde wh argue mechanisms inheritance polymorphism dynamic binding responsible creation plans pieces code conceptually related physically located non contiguous parts program spl 
consequence relatively easy understand data structures member functions individually understanding combined functionality extremely difficult lmr 
addition inheritance polymorphism create large amount dependencies need considered object oriented program wh 
number dependencies considered far greater conventional system consequence maintainer great difficulty identifying impact changes 
clearly alleged advantages disadvantages technology require substantial empirical investigation 
realisation led multi method programme research dal dbm 
programme research began exploratory investigation structured interviews conducted academics opinions merits failings object oriented approach 
findings primary investigation design implement questionnaire key aspects object oriented systems intention confirm findings phase larger wider practitioner group 
series subject laboratory experiments conducted including internal replication tested important interesting outcomes questionnaire survey controlled setting 
details design experiments describes procedures subjects tasks materials 
statistical tests applied time data collected interpreted conjunction inductive analysis explore possible explanations data 
threats internal external validity discussed 
collected data shows subjects maintaining object oriented software levels inheritance depth performed maintenance tasks significantly quicker maintaining equivalent object software inheritance 
contrast subjects maintaining object oriented software levels inheritance depth took longer average subjects maintaining object software statistical significance obtained 
subjects source code solutions debriefing questionnaires provide evidence suggesting subjects began experience difficulties deeper inheritance hierarchy 
experimental justification structured interview phase multi method approach consensus object oriented developers inheritance depth affects programmer ability understand object oriented software 
questionnaire phase majority object oriented practitioners responses agreed inheritance depth factor attempting understand object oriented software 
largest proportion indicated levels inheritance depth difficulties 
documented program understanding major factor providing effective software maintenance software maintenance accounts large part total software development budget finding major importance 
investigate phenomenon controlled manner series subject laboratory experiments including replication conducted attempt evaluate effect inheritance depth maintainability object oriented software 
students graduates subjects 
student subjects justified brooks bro adopted researchers previous empirical studies 
drawing generalisations performance carefully considered 
example curtis voiced concern novice programmers subjects cur 
hand series experiments conducted multi method programme research hoped results confirm findings structured interview questionnaire phases 
confirmatory power achieved drawn reliable generalisable 
subsequent studies seek scale findings maintenance larger software systems professional programmers 
experimental design experiments sought determine inheritance depth effect maintainability object oriented software 
article definitions apply inheritance depth level class hierarchy base class level 
consequently class level gamma superclasses 
level deepest leaf class quoted depth hierarchy 
maintenance modification software product delivery correct faults improve performance attributes adapt product changed environment sch 
maintainability ease software system corrected errors deficiencies occur expanded contracted satisfy new requirements sch 
maintainability measured number ways complexity metrics subjective evaluations experts 
study operational terms difference maintainability measured differences times takes subjects perform maintenance tasks 
software system easy understand modify difference expected manifest differences performance times 
controlled experiment impact software structure maintainability rombach rom reports correlations complexity measures staff hour effort 
times reported reflect snap shot view maintainability relative maintainability change maintenance process evolves 
regardless program versions experiment internal replication maintenance task described subjects 
regarding program versions effort ensure maintenance tasks sufficiently similar allow meaningful comparisons 
table suggests task effects arising programs 
second experiment regardless program versions maintenance task described subjects 
programs regarded representatives solution spaces contrived assumed resemble solutions programmers adopt 
design experiment standard significance testing adopted experiment stated null hypothesis hierarchy levels inheritance depth affect maintainability object oriented programs rejected favour alternative hypothesis hierarchy levels inheritance depth affect maintainability object oriented programs 
note direction specified alternative hypothesis predicted effect maintainability positive negative varying opinions expressed maintenance literature object oriented software ii depth empirically investigated borders range indicated frequently practitioners questionnaire phase difficulties occur completely range 
depth chosen provide intermediate point flat code second experiment provides depth range frequently indicated 
test hypothesis subjects randomised block design subjects matched object oriented knowledge randomly allocated groups group performed maintenance task program inheritance hierarchy group performed identical task equivalent version program inheritance hierarchy referred flat version 
counter balance reverse carried group performed similar maintenance task second similar program inheritance hierarchy group maintained equivalent flat version section explains design full 
counter balancing groups manner eliminated task direction bias subsequently ability effect possibility counter balancing introduce learning effect 
data examined effect see section 
traditional experimental design provided single independent single dependent variable 
program version inheritance flat maintained independent variable dependent variable time taken complete maintenance task frequent measure programmers efforts software maintenance time taken fos 
data gathering discussed section limited dependent variable allow inductive analysis performed discussed section 
anticipation subjects completing group test power curves lip tailed significance level indicated experimental design probability detecting medium sized effect difference means standard deviation probability detecting large sized effect difference means standard deviation 
pairing anticipation power levels improved 
procedure experiment performed taught postgraduate conversion course information technology 
students see section enrolled object oriented programming class intensively taught week period approximately hours supervised practical time week weeks hours week 
students taught concepts object encapsulation inheritance message passing polymorphism working knowledge required complete maintenance tasks 
practical exercises concepts students designing implementing classes inheritance relations integrating existing code 
students practical research purposes practical tests experiments constituting final class mark conducted final week class 
practical test student sheet detailing experimental instructions packet containing maintenance task second packet containing listing source code 
experimental instructions explained verbally 
information different versions program existed stated reduce students concern relative performance individual test 
procedure followed practical tests 
subjects allowed minutes read instructions ask questions 
time passed subjects indicated happy instructions instructed open packet 
packet contained maintenance task subjects attempt 
subjects minutes read task ask questions 
time passed subjects indicated happy maintenance task instructed open packet 
packet contained experimental code listing 
packet opened data recording began subject hour minutes complete maintenance task compile execute code program output matched required output provided 
subjects opinion completed task monitor checked 
output correct data recording terminated subject asked continue modification 
group experiment experiment program inheritance equivalent flat version version program equivalent flat version program inheritance program version table group allocations tasks experiment completing maintenance task subjects asked complete debriefing questionnaire leaving 
questionnaire elicited personal details programming experience impressions maintenance task just attempted task difficulty approach modification taken aspect caused difficulty 
subjects students enrolled object oriented programming course completed week class imperative programming turbo pascal 
subject sat multiple choice tests counting class mark assessed objectoriented programming knowledge gained class 
subjects distributed groups subjects group subjects group matching pairs subjects results multiple choice tests randomly assigning group pre screening matching performed reduce subject variability groups 
groups counter balanced program versions inheritance illustrated table 
allocation manner ensured subjects performed maintenance task flat program version inheritance program version 
subjects complete task included statistical analysis nature study prevented subjects continuing allocated time period 
efforts subjects taken account 
maintenance tasks programs modified designed object oriented fashion implemented 
programs simple database systems allowed records created displayed modified deleted 
system stored information types university staff students classes lecturer secretary student 
displays inheritance hierarchy database system 
classes staff student inherit univ community class lecturer secretary inherit staff professor added inherits lecturer 
classes univ community staff classes instances classes merely features common print department firstname lastname univ community print staff print print lecturer student professor secretary print print inheritance hierarchy database system university staff students 
specialisation classes 
instances lecturer secretary professor receive message member function super class staff executed 
member functions subclasses manipulate instance variables firstname lastname department means appropriate member functions superclass 
class overloads member function print implement version 
second system stored information types written classes book conference thesis 
inheritance hierarchy system similar university database number fields class 
versions system flat inheritance program version 
equivalent flat program versions created removing inheritance links classes hierarchy adding data members individual member functions class previously inherited 
classes deleted leaving flattened equivalent version inheritance hierarchy 
flat program versions lines code simple line count including approximately comment lines identify constructs class relationships lecturer constructor assign initial values 
inheritance program versions lines code approximately comment lines 
inheritance depth system 
test hypothesis maintainability object oriented software maintenance tasks devised introduced new requirements case increasing amount information database store 
subjects task add single class system 
professor class added university system phd thesis class library system 
professor class consist fields shown intended specialised class lecturer 
phd thesis class consist different fields intended specialised class thesis 
tasks designed similar 
line common programming practices class expected member variables declared private ii constructor iii destructor iv public member functions required output obtained practices adhered 
subjects create instance new class initial default values modify values display object 
regardless program version inheritance flat maintenance task 
materials subject experimental materials ffl workstation subjects group sitting ffl full experimental maintenance task instructions ffl complete source code listing program line ffl test data determine successful task completion 
environment sun sparc workstations sun compiler gnu emacs editor 
experiment run laboratory conditions form communication subjects 
allowed access class textbook ski 
data collection data automatically collected highly controlled environment designed specifically study 
subject required start shell script provided workstation prompt login name time 
script kept running experiment recorded process subject adopted modification allowed reader decipher example long spent particular problem 
shell script introduced compiling subject files generate executable automatically copied file time stamp backup directory 
meant number compilations calculated allowed examination subject solution written compiled stage 
summary data collected conducting experiment subject time complete task ii automatic file backups iii script subject experimental procedure iv final version subject solution answers debriefing questionnaire 
pilot study pilot study academic staff conducted find introduced assumptions experimental materials ii find mistakes experimental procedure iii test experimental instructions clear iv check tasks reasonable complexity completed allotted time ensure performance automated data collection techniques vi attempt identify unforeseen circumstances 
significant issues encountered pilot study subjects require clarification points instructions subjects mentioned description required program output specific 
instructions subsequently amended clearer 
design internal replication internal replication conducted confirm direction findings experiment 
decided perform replication experienced programmers planned executed relatively soon experiment results known 
anticipation subjects completing group test power curves lip tailed significance level indicated experimental design probability detecting medium sized effect probability detecting effect 
subjects mixture bsc 
computer science students going final fourth year new graduates volunteered participate 
subjects expected versed programming 
subjects participated week long intensive course internal replication library database system performed 
half subjects maintained flat version half inheritance version 
internal replication performed university database system subjects participate second experiment involved deeper inheritance hierarchy see section 
subjects randomly allocated groups manner detailed group internal replication second experiment inheritance version equivalent flat version level hierarchy equivalent flat version inheritance version levels table group allocations tasks replication second experiment section blocked average computer science exam marks 
groups counter balanced program versions inheritance illustrated table 
allocation manner ensured subjects performed maintenance task flat program version inheritance program version performed flat program version replication inheritance program version second experiment vice versa 
procedures materials environment experiment see section 
internal replication null hypothesis stated hierarchy levels inheritance depth affect maintainability object oriented programs rejected favour alternative hypothesis results internal replication direction experiment 
direction specified hypothesis indicates results replication expected similar results experiment 
design second experiment subjects participated second experiment tested effect deeper inheritance hierarchy maintainability object oriented software 
subjects replication plus students missed due prior commitments 
procedures materials environment experiment kept 
anticipation subjects completing group statistical power estimates similar internal replication 
system experiment larger version university database system experiment see 
inheritance hierarchy extended include members university community undergraduate student postgraduate student technician senior technician supervisor classes incorporated software 
department print print print print print print print print print print student lastname firstname univ community staff pg student ug student lecturer secretary technician professor senior technician office director supervisor hierarchy levels inheritance second experiment 
addition member functions introduced wages salaries calculated university employees 
displays inheritance hierarchy system 
versions system constructed flat program version inheritance program version 
inheritance depth system 
inheritance program version approximately lines code approximately comment lines distributed classes class distributed header implementation file main file 
flat program version constructed manner detailed section fewer classes classes deleted lines longer approximately comment lines 
maintenance task complex system devised meet new requirements 
task involved adding new class director expected specialised class supervisor detailed 
task required member functions create modify display delete instances class 
addition member function written calculate salary director 
subject create instance new class send messages invoke actions meet required program output 
second experiment null hypothesis stated hierarchy levels inheritance depth affect maintainability object oriented programs rejected favour alternative hypothesis hierarchy levels inheritance depth affect maintainability object oriented programs subjects maintaining inheritance program version take longer subjects maintaining flat program version 
hypothesis direction provided depth empirically investigated range indicated frequently practitioners difficulties occur 
experimental results section details subjects mean completion times maintenance tasks provides interpretation discovered timing trends 
experiment timing data collected experiment summarised form table 
column gives mean time time column gives standard deviation time columns give minimum maximum times column gives number observed times column gives number incomplete times 
rows summary run university database system 
rows summary second run library database system 
note average times inheritance flat program versions similar software systems suggests task effects 
difference average times flat versus inheritance software system direction statistically significant 
addition rows grouped mean flat inheritance times runs 
examination times shows mean difference minutes total inheritance flat times 
time stime min 
max 
program flat program inheritance program flat program inheritance grouped flat grouped inheritance table statistical summary experiment times minutes statistical tests applied 
formal skewness kurtosis tests performed data distributions non normal confidence interval confidence intervals provided bcm 
consequently conservative non parametric statistical tests applied non parametric test similar result obtained alternative parametric tests 
wilcoxon signed ranks related test takes account difference positive negative paired values performance difference subject time complete inheritance program version flat program version calculated 
statistical test subjects completed flat inheritance program versions produced significant result tailed gamma subjects performed better inheritance flat opposite achieved time versions discounted test calculation 
reject null hypothesis favour alternative hypothesis concern subjects failed complete tasks allotted time 
important note significant statistical result paired observations include subjects 
subjects failed complete program versions subjects completed inheritance flat version completed flat inheritance program version 
studying questionnaires subjects source code common reason working flat version attempted develop solution inheritance 
students successfully completed task working flat version appeared existing class template 
attempted introduce inheritance flat version template existing code 
combining complete failed complete time provides performance ratio approximately subjects performed better maintaining object oriented software inheritance 
time stime min 
max 
replication flat replication inheritance table statistical summary replication times minutes internal replication timing data collected summarised table format table 
results direction experiment difference time minutes groups similar experiment 
note average times replication groups faster experiment minutes flat program version minutes inheritance program version 
improvement performance interpreted due replication subjects greater programming experience 
wilcoxon rank sum unrelated test calculated times experiment paired value available comparison 
statistical result tailed gamma arguably close level provide confirmatory power experiment result 
reject null hypothesis favour alternative hypothesis experiment 
questionnaire data suggests subjects suffered significant problems inheritance syntax 
second experiment table presents collected timing data usual summarised form 
note direction mean times matches predicted direction hypothesis 
cross checking mean times replication experiment see tables shows mean time flat group increased marginally approximately minutes mean time inheritance group increased substantially average approximately minutes longer subject 
possible reasons large turn discussed 
wilcoxon rank sum test unrelated show significance mean times tailed gamma time stime min 
max 
flat deeper inheritance table statistical summary second experiment times minutes null hypothesis rejected 
null hypothesis rejected important consider power levels 
design chance detecting large effect probability detecting medium sized effect 
power estimates weakened need arose non parametric statistics 
small medium sized effect may exist second experiment simply necessary statistical power draw way regarding existence small medium sized effect 
hand direction mean times reversed experiment 
important finding worth exploring 
experiment 
collected source code shows subject attempted reconstruct complete inheritance hierarchy flat code bias results 
inductive analysis interpretation displays spread collected times boxplots see full description 
boxplots represent times experiment inheritance group flat group boxplots represent inheritance group flat group times replication boxplots represent inheritance group flat group times second experiment 
boxplots show similarity spread data experiment replication show difference performance flat inheritance groups depth hierarchy increased 
demonstrates clearly trends performance 
immediate interest subjects relative performance deteriorated inheritance program version deeper hierarchy 
possible interpretations placed data hypothesis related interpretation working deeper hierarchy affect maintainability objectoriented programs 
discount program size predictor performance 
despite near size flat program versions internal replication second experiment flat times worse average second experiment 
subjects required understand search line code required decide class specialise copy template needed understand code related selection 
experiment internal replication acknowledged little thought required decide class specialise superclass copy template 
flat inheritance flat inheritance flat inheritance boxplots completion times experiment left internal replication centre second experiment deeper inheritance hierarchy right second experiment flat program version classes consider doubling experiment inheritance program version classes consider doubling experiment 
subjects initially faced search problem solved satisfying optimising way 
search problem exacerbated fact subjects provided conceptual model domain supplied strategy base selection superclass copy template 
possible interpretation experiment internal replication simply revealed modifiability advantage inheritance cancelled second experiment demanding search problem generated greater number classes interconnected inheritance mechanisms 
need depth se cause performance deterioration shallow broad inheritance hierarchy just easily result demanding search problem 
subjects questionnaire responses provide evidence relating interpretation 
table indicates number comments indications received categories flat inheritance program groups 
categories 
problems choosing superclass class copy template 
problems tracing inheritance hierarchy 
problems virtual functions 
problems lack provided conceptual model experiment second experiment replication time mins 
inheritance flat average completion times experiment internal replication second experiment deeper inheritance hierarchy 
adopted optimising selection strategy common 
despite indicating common chose optimal class 
adopted satisfying strategy basis 
derivation class selection time minutes 
derivation class selection time minutes approach drawing tables data order detect common patterns behaviour view understanding underlying processes called inductive analysis approach may called qualitative analysis 
data tables may drawn questionnaire data measurement taken paradigm important give due attention sorts additional data gathered data formal statistical testing 
patterns may detected directly table drawn data mining tools may applied table 
emphasis paradigm explaining took place provides check operational definitions explicitly implicitly bound null hypotheses 
note subject responded question questionnaires subjects recorded table category 
categories table inheritance subjects recorded 
note estimate inter rater reliability suggest odd comment classified different category comment virtual functions categorised problem tracing problem tracing categorised problem choosing superclass 
flat inheritance table frequency comments indicators questionnaires assuming responses representative table suggests subjects adopted optimising selection strategy took inheritance program group typically minutes selection 
subjects inheritance program group settled wrong class despite claiming optimising strategy subjects inheritance program group essentially invented conceptual models domain meant chose superclass common 
contrast experiment internal replication considerable complete agreement choice superclass second experiment inheritance program group subjects categorised groups subjects inheriting class lecturer subjects subjects inheriting class staff subjects subjects inheriting common class supervisor subjects 
reasonably clear indication demanding search problem inheritance program group 
believe data supports dvorak ideas conceptual entropy dvo systems frequently changed characteristically tend disorder term recognised entropy 
object oriented systems conceptual entropy manifested increasing conceptual inconsistency travel hierarchy 
deeper level hierarchy greater probability subclass consistently extend specialise concept superclass 
dvo 
dvorak identified concept experiment subjects construct class hierarchy class specifications deeper hierarchy got agreement subjects class placement hierarchy 
essentially similar effect 
search problem explain away worsening performances inheritance program group 
table indicates subjects inheritance program group reported suffered problems due tracing virtual functions 
data categories separate subjects 
problems probably go way explaining rest worsening performances inheritance program group 
noted earlier difficulty affects program understanding maintenance presence plans pieces code conceptually related physically located non contiguous parts program 
wilde mechanism inheritance creates opportunities 
related difficulty understanding single line code may require tracing line method invocations inheritance hierarchy 
shallow hierarchy may represent large overhead hierarchy deeper overhead increase 
case maintainer wants view actual implementation method tracing line invocations source conducted 
tracing may affected subjects maintenance times 
note subject experiment internal replication commented problems choosing superclass class copy template problems tracing hierarchy 
subject took far longest time inheritance program group tries different points hierarchy 
subject datum excluded average time inheritance program group match average time flat program group 
reason exclude datum subject behaviour particularly example conceptual entropy 
summarise 
program size discounted predictor performance 

inheritance program group working deeper inheritance hierarchy demanding search problem choosing superclass account relative deterioration performances 

conceptual entropy arise programmers forced create conceptual models domain free choice satisfying optimising strategies specialising inheritance hierarchy 

problems tracing virtual functions go way explaining performances 

demanding search problem problems tracing virtual functions probably explain general relative deterioration performances 
threats validity threats internal validity major concern empirical study unobserved independent variable exerting control dependent variable possibility minimised 
threats identified selection effects ii maturation effects iii instrumentation effects 

selection effects due natural variations subject performance see bro 
example dbm majority high ability subjects randomly assigned groups obviously biased results study 
bias catered study creating subject groups equal ability detailed sections 

maturation learning effects caused subjects learning experiment proceeds 
threat subjects learn run performance second run biased 
data analysed significant effect 

instrumentation effects may result differences experimental materials employed 
study effects arise differences software systems maintenance tasks 
explicit attempt ensure similarity possible variation difficult avoid 
collected timing data experiment similar runs internal replication repeated results 
increases confidence effect minimised 
instrumentation effects appear minimal replication second experiment increase mean time inheritance group similar flat group 
evidence suggesting threats internal validity impacted results study 
threats external validity greater external validity results empirical study generalised actual software engineering practice 
threats external validity identified limit ability apply generalisation subject representativeness ii size software systems iii maintenance process implementation phase process considered experiments 

subjects participated experiments may representative software professionals 
participants replication second experiment mixture final year students new graduate computer scientists classed experienced programmers categorised experienced software professionals 
pragmatic considerations having students subjects viable option laboratory experiments 

software systems experiments large may representative real software systems 
inheritance depth software systems representative real inheritance hierarchies see characteristics objectoriented class hierarchies ck 
furthermore may control isolate effect inheritance maintainability object oriented software small systems required effect may difficult detect 
noted control exerted experiment gained expense realism til attempt achieve fine balance possible 

maintainability software best evaluated respect entire maintenance process laboratory experimentation scale practical study concentrated implementation phase maintenance process 
second threats external validity common reported empirical studies hhl 
argued justification conclude effect inheritance consistently reported multi method programme research dal threat external validity 
fully overcome threats replication package proposed order allow researchers conduct external replications different subjects variables procedures see cha detailed discussion making generalisations 
empirical study interest designing maintaining object oriented software 
results suggest obvious class specialise little tracing hierarchies demanded inheritance provides gains modifiability object oriented software maintainable equivalent objectbased software 
contrary conceptual entropy exists conceptual model domain provided strategies specialising specified common tracing hierarchies required sound comprehension modifiability gains cancelled object oriented software maintainable object software 
subjects provided particularly example conceptual entropy attempting specialisations points hierarchy 
interpretation solely experimental hypotheses misleading 
deteriorating performances simply depth increased tracing difficulties conceptual entropy played part imagine shallow broad hierarchies suffering conceptual entropy narrow deep 
inductive analysis vital component research 
threats external validity identified argued results confirmed multi method programme research threats reduced 
subsequent experimentation larger software systems professional programmers subjects 
experimentation consider categories maintenance aspects maintenance process 
obvious object oriented software going maintainable long run 
authors wish acknowledge efforts participated experiments 
extended pete hendry dave lloyd technical assistance 
bcm brooks clarke 
investigating stellar variability normality tests 
astronomy 
bro brooks 
studying programmer behavior experimentally problems proper methodology 
communications acm april 
bur burgess 
finding experimental basis software engineering 
ieee software 
chambers cleveland tukey 
graphical methods data analysis 
wadsworth international group edition 
cha 
generalisations generalisation 
human factors 
ck chidamber kemerer 
metrics suite object oriented design 
ieee transactions software engineering june 
cur curtis 
way study real programmers 
soloway iyengar editors empirical studies programmers workshop pages 
ablex publishing 
cvm crocker von mayrhauser 
maintenance support needs object oriented software 
proceedings international computer software applications conference pages november 
dal daly 
replication multi method approach empirical software engineering research 
phd thesis department computer science university strathclyde glasgow 
dbm daly brooks miller roper wood 
verification results software maintenance external replication 
proceedings ieee international conference software maintenance pages september 
dbm daly brooks miller roper wood 
multi method approach performing empirical research 
software engineering technical council newsletter spn fall 
daly miller brooks roper wood 
issues object oriented paradigm questionnaire survey 
research report department computer science university strathclyde glasgow 
dvo dvorak 
conceptual entropy effect class hierarchies 
ieee computer june 
daly wood brooks miller roper 
structured interviews object oriented paradigm 
research report department computer science university strathclyde glasgow 
fos foster 
program lifetime vital statistic maintenance 
proceedings ieee conference software maintenance pages 
hhl henry humphrey lewis 
evaluation maintainability objectoriented software 
ieee conference computer communication systems pages september 
kolb 
integrating testing object oriented software 
proceedings european conference software testing analysis review pages 
siemens ag 
jon jones 
gaps object oriented paradigm 
ieee computer june 
kung gao hsia wen chen 
change impact identification object oriented software maintenance 
proceedings ieee international conference software maintenance pages september 
lewis henry kafura schulman 
relationship object oriented paradigm software reuse empirical investigation 
journal object oriented programming 
lip mark 
design sensitivity statistical power experimental research 
sage publications 
lmr meyers reiss 
support maintaining object oriented programs 
ieee transactions software engineering se december 
pb ponder bush 
polymorphism considered harmful 
acm sigsoft software engineering notes april 
porter votta basili 
comparing detection methods software requirements inspections replicated experiment 
ieee transactions software engineering june 
rom rombach 
controlled experiment impact software structure maintainability 
ieee transactions software engineering march 
sch 
state software maintenance 
ieee transactions software engineering se 
sch 
software maintenance distributed computer environments system complexity versus component simplicity 
proceedings ieee international conference software maintenance pages 
ski skinner 
primer gentle 
silicon press prentice hall edition 
spl soloway pinto letovsky littman 
designing documentation compensate delocalized plans 
communications acm 
til 
experimental design analysis 
fenton editor software metrics rigorous approach pages 
chapman hall 
wh wilde 
maintenance support object oriented programs 
ieee transactions software engineering se december 
wilde matthews 
maintaining object oriented software 
ieee software 

