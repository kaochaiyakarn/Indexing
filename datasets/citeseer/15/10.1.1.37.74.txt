inductive families peter dybjer november general formulation inductive recursive definitions martin lof type theory 
extends backhouse type theory include inductive definitions families sets definitions functions recursion way elements sets generated 
formulation natural deduction intended natural generalization type theory martin lof theory iterated inductive definitions predicate logic 
formal criteria correct formation rules new set capturing definition strictly positive iterated generalized induction 
inversion principle deriving elimination equality rules formation rules 
alternative schematic presentation definition recursion 
resulting theory flexible powerful language programming constructive mathematics 
hint wealth possible applications showing basic examples predicate logic generalized induction formalization untyped lambda calculus 
inference rules martin lof type theory separated parts ffl general rules ffl rules ordinary set formers ffl rules universes 
typically second part includes set formers pi sigma list martin lof remarked collection extended need 
desire extensions common general principles need layed ensure correctness 
possibilities ffl general purpose construction part theory ffl giving external criteria correct extensions theory 
author address department computer sciences chalmers university technology goteborg sweden 
email cs chalmers se 
shorter preliminary version appeared title inversion principle martin lof type theory proceedings workshop programming logic may programming methodology group report chalmers university technology university goteborg pages 
example general purpose construction impredicative quantification part system calculus constructions related systems 
construction part martin lof type theory predicative 
extensional version 
example proved strictly positive set operator phi built constants variables theta set family sets phi sigma satisfies isomorphism sigma justified representation set generated inductively phi 
method intensional version type theory martin lof see nordstrom petersson smith extensional isomorphisms possibility add fixed point operators type theory 
formulations mendler drawback needs notion subtype require fundamental changes theory 
new formulation assume notion subtype proposed coquand paulin 
second possibility topic specify scheme determines correct extensions theory 
deal fixed theory open theory 
note consider fixed open matter convention 
theory closed formalizing rules sequents gamma judgement current theory context assumptions gamma formal rules correct current theory correct context gamma 
compare presentation rules edinburgh lf system harper honsell plotkin contain rules correct signatures contexts 
signatures play similar rule current theories contain definitional equalities 
correctness signature form type correctness require constants interpreted terms inductive definitions 
main point martin lof type theory theory inductive definitions formulated natural deduction 
set logical constant defined inductively rules 
elimination rule expresses principle definition recursion proof induction 
equality rules express definitions eliminated proofs normalized 
specify means correct definition set giving formal criteria formation rules 
show definition determines elimination equality rules called inversion principle 
give alternative formulation recursive definitions schematically 
scheme monomorphic intensional type theory covers strictly positive iterated generalized induction 
ordinary set formers pi sigma list follow scheme 
cover forms intuitionistically meaningful induction ways forming sets martin lof type theory 
example definition universe la tarski defined simultaneously decoding function family maps element set codes 
appears negatively rule example 
possible extend scheme natural way include universes similar constructions see dybjer 
scheme close scheme developed independently thierry coquand christine paulin 
arrived essentially combinatorial structure develop context impredicative system differences type structure 
resulting system calculus inductive constructions basis coq system interactive proof extension calculus constructions 
am grateful thierry coquand christine paulin interesting discussions topic inductive definitions type theory 
possibility developing general formulation inductive definitions type theory mentioned early type theory martin lof page type just prime example type introduced ordinary inductive definition 
preferable treat special case give necessarily complicated general formulation include sigma special cases 
see martin lof general formulation inductive definitions language ordinary order predicate logic 
scheme generalizes scheme backhouse name doit type theory 
existence scheme relies schroeder heister notion rule higher level possible martin lof formulate rules pi conform pattern set formers 
note pi mentioned quotation 
schroeder heister formulated scheme martin lof logical theory close backhouse scheme type theory 
scheme subsumes martin lof scheme intuitionistic theory iterated inductive definitions mentioned quotation translated language type theory propositions sets principle backhouse scheme 
generalizes backhouse scheme ways ffl main point families sets predicates relations identity relation finite sets viewed family sets natural numbers covered scheme 
ffl definitions may depend earlier definitions iterated induction 
example definition set ordinals second number class depends having defined earlier 
ffl sets may defined simultaneous induction 
examples simultaneous induction backhouse chisholm malcolm 
ffl general parameters elements families sets allowed 
generalized founded trees petersson covered scheme 
nice application having general notion parameter new definition equality relation 
usual definition equality type theory reflexive relation set see martin lof 
alternative definition due christine paulin instance scheme define unary predicate equal set element elimination rule new equality predicate rule substitution provided proof objects suppressed 
discuss quotients sets arising stipulating definitional equalities elements sets backhouse chisholm malcolm 
hand easy introduce quotients arising propositional equalities section untyped calculus fi conversion 
accompanying presents essentially scheme 
purpose prove consistency constructing set theoretic model 
purpose show examples hint wealth possible applications 
differences formulation scheme 
scheme uses martin lof theory logical types theory formulated style martin lof earlier presentations 
difference shows explicitly derive elimination equality rules new set formers 
class admissible schematic recursive definitions extended 
contents 
section theory logical types underlying framework inductive recursive definitions 
section scheme inductive definitions 
illustrate scheme giving simple instances natural numbers lists lists certain length 
section recursive definitions schematically 
section give examples 
show predicate logic subsumed scheme 
discuss generalized induction orderings founded part relation 
show formalization untyped calculus proving metamathematical properties 
section extend scheme simultaneous inductive definitions 
section finish giving theory extensive examples 
theory logical types theory logical types logical framework 
see nordstrom petersson smith presentation theory general martin lof type theory 
typed fij calculus dependent function types written oe oe depend special base type set rule states set object type set base type 
application written abstraction written 
ordinary conventions parentheses apply 
repeated application may written delta delta delta repeated abstraction may written delta delta delta 
theory formulated la martin lof type theory forms judgements oe type oe oe oe 
judgements lists assumptions form oe oe gamma 
formulate rules natural deduction 
addition rules assumption substitution rules 
rules type formation set type set type ff type ff type ff type directly discipline introducing new constants alf system developed augustsson coquand magnusson nordstrom implementation martin lof theory logical types notation explicitly indicates expression may depend rules object formation oe oe oe oe equality rules typed fi conversion oe oe oe oe equality equivalence relation may substitute equals equals oe type oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe oe set oe oe oe oe oe oe oe oe oe theory framework sense specified giving finite sequence typings fresh constants oe finite sequence equalities terms oe 
framework formalizing martin lof type theory rules framework general rules 
formation elimination rules set formers typing fresh constants 
example universe rule equality rules equalities terms 
shall need distinguish set types types types wish rules pi constant elimination rule see preface martin lof instances scheme 
type set types functions type types 
possible name type purely functional type 
de bruijn telescope notation write oe abbreviation sequence oe delta delta delta oe refer oe sequence types 
scheme inductive definitions section shall scheme introducing new set 
firstly general form formation rules 
secondly inversion principle deriving elimination equality rules formation rules 
scheme illustrated presenting rules inductive sets natural numbers list lists elements set inductive family list lists elements set indexed length list 
general definition set may depend set formers defined previously 
stand theory contains formation elimination equality rules previously defined set formers 
section propose theory open respect recursive definitions inductive definitions 
case stands theory contains formation rules previous set formers defined inductively typing equality rules functions defined recursion 
scheme state requirements oe sequence types means oe type oe type assumptions oe gamma oe gamma 
formation rule scheme formation rule simultaneous induction see section 
form oe ff set ffl oe sequence types ffl ff sequence types assumptions oe 
refer parameters observe premises oe appear rules global definition 
pa thought family sets indices 

write arguments index position improve readability 
examples natural numbers 
formation rule set parameters indices 
lists 
formation rule list set set set parameter appear premise rules lists 
indices 
lists certain length 
formation rule list set set set parameter 
index set 
definition depends natural numbers having defined 
rules scheme finitely rules set 
rule form intro oe fi fl pa ffl fi sequence types assumptions oe ffl fl form pa sequence types assumptions oe fi ff assumptions oe fi ffl ff assumptions oe fi 
refer non recursive recursive arguments constructor intro 
provision generalized induction 
occur induction strictly positive 
empty ordinary induction 
examples natural numbers 
rule non recursive recursive premises 
second rule recursive premise ordinary 
lists 
rule nil set list recursive non recursive premises 
second rule cons set list list non recursive premise ordinary recursive premise list lists certain length 
rule nil set list recursive non recursive premises 
distinguished corresponding rule list presence index 
second rule cons set list list non recursive premises ordinary recursive premise list 
rule distinguished rule list presence index recursive premise index 
elimination rule scheme formation rules derive elimination rule elim oe ff pa set ffl ff pa pa called major premise ffl called minor premises 
minor premise constructor 
type ffl minor premise corresponding constructor intro fi fl ffi intro ffi length fl ffi elimination rule viewed induction rule minor premise case induction 
intro recursive argument base case step case 
generalized induction hypothesis predecessors intro 
examples natural numbers 
information formation rules lists derive elimination rule rule primitive recursion mathematical induction set lists 
derive elimination rule rule list recursion list induction listrec set list set nil list cons list lists certain length 
derive elimination rule listrec set list set nil list cons list equality rules scheme equality rule rule 
corresponding constructor intro elim intro oe ff pa set ffl fi fl intro elim examples natural numbers 
equality rule constructor set equality rule constructor set lists 
equality rule constructor nil listrec nil set list set nil list cons nil equality rule constructor cons listrec cons listrec set list set nil list cons list cons lists certain length 
equality rule constructor nil listrec nil set list set nil list cons nil equality rule constructor cons listrec cons listrec set list set nil list cons list cons application list recursion define function maps list list corresponding list list listrec list nil cons set list list definition derive recursion equations equality rules listrec nil nil list cons cons list scheme recursive definitions desirable generalize scheme elimination equality rules allowing arbitrary family types requiring family sets 
way result function defined recursion object arbitrary type example set necessarily element set 
standard way achieving effect usual elimination rule conjunction pi sets universes 
convenient integrate principle directly scheme simply replace set type typing type type 
solution index elimination rule family types see smith want keep notion finitary theory extend theory logical types treat theory open potentially infinite respect recursive definitions inductive definitions 
argument leads idea recursive scheme elimination rule basic concept see dybjer 
furthermore view essential matter convenience enlarging scheme capture universes simultaneous inductive recursive definitions coquand approach pattern matching dependent types 
shall give precise criteria schematic recursive definitions similar way schematic inductive definitions 
schema example yield typing rule recursion equations instances necessary define terms elimination rule 
note elimination equality rules instances schema 
schema specifies general form typing rule recursion equations new function family defined recursion 
definition may depend constants defined previously induction recursion 
stand theory contains formation rules inductive set family typing equality rules recursive function family 
similar modification notion current theory inductive definition course needed section 
schematic elimination rule typing rule function defined recursion form ff pa ffl sequence types ffl oe assumptions ffl type assumptions ff pa oe ff refer formation rule refer parameters 
note sequence constants define arbitrary parameters instantiate parameters note appropriate choice yield ordinary elimination equality rules 
example check typing rule instance scheme set list schematic equality rules equality rule rule corresponding constructor intro intro fi fl intro fi fl refer rule intro 
examples predicate logic logical constants theta oe sigma pi examples inductive propositions sets part backhouse scheme 
just point unique set rule show rules oe notion type essential 
show rules propositional equality inductive predicate family covered backhouse scheme 
versions 
formulation martin lof inductive relation 
second formulation christine paulin unary inductive predicate seen predicative version equality 
nice example definition parameterized elements set 
implication formation rule 
oe set set set parameters 
rule 
set set oe rule non recursive premise type type set 
elimination rule 
set set set oe oe elimination rule introduced schroeder heister 
general form families pi elimination rule introduced preface martin lof 
synonym 
equality la martin lof equality defined reflexive relation 
formation rule 
set set set parameter elements indices 
rule 
set elimination rule 
set set equality la paulin equality defined unary predicate containing element predicative version equality 
formation rule 
set set set element parameters index 
rule 
set elimination rule 
set set note difference visible elimination rule usual rule equality elimination predicate logic simpler equality elimination la martin lof 
generalized induction definitions far ordinary induction lists premises recursive premises empty 
shall give examples generalized induction introduced martin lof wellfounded part relation 
examples ordinals second higher number classes see martin lof petersson generalized trees 
orderings orderings important instance scheme 
special case define inductive set rule non recursive premise recursive premise hypothesis 
instance backhouse scheme word possibly replaced 
backhouse coquand paulin allowed inessential generalization recursive premises may precede non recursive ones 
prefer put non recursive premises recursive ones depend situation changes dybjer 
restriction simplifies presentation scheme emphasizes relationship orderings 
formation rule 
set set set rule 
sup set set wa elimination rule 
set set wa set sup wa founded part relation set binary relation set acc true iff founded part application notion context type theory nordstrom 
suggested add general recursion founded relation version type theory propositions sets identified extended subset formation 
compare discussion dybjer 
formation rule 
acc set set set rule 
acc set set acc acc elimination rule 
set set acc set acc acc acc finite sets tuples subsection theory formalizing basic notions untyped calculus 
formalization uses bounded de bruijn indices compare curien common unbounded ones see example calculus theory developed huet 
bounded de bruijn indices elements inductive family finite sets indexed defined similar way list 
rules formation set notation 
shall somewhat formal notation drop parameters need sets tuples 
list purpose define recursion natural numbers 
typing rule set set set parameter set scheme section 
notation 
equality rules theta note defines heads natural defining substitutions calculus 
similar way define map function tuples map set recursion set parameters notation map 
equality rules hi hf fst snd projection function set defined recursion set parameter notation 
equality rules snd sn fst need consider certain tuples elements nm creating certain substitutions calculus 
firstly sequence identity substitution id defined recursion id hi id hs id sequence lifting thinning projection defined recursion hi hs untyped calculus define terms inductive family indexed represents terms free variables 
formation set var ap reader check rules follow scheme 
note index varies rule identity combinator represented var combinator xy represented var shall define simultaneous substitution terms free variables term 
need tuples terms substitutions substitution function explicit sense formalized explicitly type theory serves metalanguage 
explicit sense abadi cardelli curien evy constructor terms defined recursion sub fs fs sub var fs fs sub fs sub fs var sub ap fs ap sub fs sub fs lifting lift defined lift rename rename simultaneous substitution variables free variables changes variables term 
defined recursion rename rename var var rename rename hs rename ap fs ap rename fs rename fs define fi convertibility inductive family relations 
formation indices 
var var ap ap fi ap sub id fi trans sym continue formalize proofs theorems untyped calculus induction simultaneous induction scheme introduces new set time 
generalized finitely introduced simultaneously 
call definition block 
formation rules scheme formation rule set introduced block 
form oe ff set ffl oe sequence types common set formers block ffl ff sequence types assumptions oe 
example odd numbers definition presupposes parameters 
index set formation rules 
set odd set rules scheme rule form intro oe fi fl ka ffl fi sequence types assumptions oe ffl fl form sequence types assumptions oe fi ff assumptions oe fi ffl ff assumptions oe fi 
example intro intro odd intro odd elimination rules scheme elim oe oe ffl ff length oe number set formers introduced block 
oe ff ka set minor premise constructor block 
type ffl minor premise corresponding constructor intro follows pattern 
example set odd set intro intro odd intro set odd set intro intro odd intro odd equality rules omitted 
scheme recursive definitions omitted 
examples initial sorted algebras 
simultaneous induction easy see construct initial sorted algebras 
sort denote constant set operator rule ordinary recursive premises 
equations associate inductively defined relation set 
note inversion principle gives formal structural induction principle inside type theory 
iterated inductive definitions predicate logic 
essentially interpret martin lof intuitionistic theory iterated inductive definitions provided allow finitely predicate symbols theory 
define set individuals letting function symbol correspond constructor 
see ordinary generalized production predicate symbol corresponds rule inductive family 
level predicate symbol determine order introduced linked predicate symbols introduced block 
application theory foundation logic programming proposed hagiya sakurai 
people formulation inductively defined sets families sets predicates type theory formal machine assisted program derivation theorem proving 
example normalization expression occurs part boyer moore tautology checker propositional logic 
set expressions inductively defined set subset normalized expressions naturally represented type theory inductively defined predicate see dybjer 
michael looked similar simpler example normalization binary trees normalizing associative law 
uses inductively defined sets predicates variety ways show martin lof type theory integrated logic curry howard identification external logic verifying externally general recursive program 
implemented examples paulson isabelle system 
nora formalized proof ackermann function primitive recursive 
basic definition binary inductive family tuples primitive recursive functions tpr number functions tuple arity function 
implemented proof alf system 
presently number ongoing formalization projects type theory inductive definitions implemented new version alf system coquand magnusson nordstrom 
version supports powerful form pattern matching dependent types proposed thierry coquand 
viewed strengthening schematic approach elimination rules described section 
firstly allows definition functions case analysis arguments simultaneously uses criterion recursive calls refer structurally smaller arguments ensure termination 
secondly unification generate possible cases 
entails strengthening case analysis inductively defined families 
example proof peano 
follows directly pattern matching 
rule equality reflexivity rule unified cases generated 
reader referred coquand details 
refer developments similar schemes inductive definitions context impredicative type theory explored groups inria coq system edinburgh lego system 
abadi cardelli 
curien 
evy 
explicit substitutions 
acm conference principles programming languages san francisco 
backhouse 
meaning construction rules martin lof theory types 
proceedings workshop general logic edinburgh february 
laboratory foundations computer science department computer science university edinburgh 
ecs lfcs 
backhouse chisholm malcolm 
type theory part 
formal aspects computing pages 
boyer moore 
computational logic 
academic press 
coquand 
pattern matching dependent types 
proceedings workshop types proofs programs june 
coquand huet 
calculus constructions 
information computation 
coquand paulin 
inductively defined types preliminary version 
lncs international conference computer logic 
springer verlag 

curien 
framework environment machines 
theoretical computer science 
de bruijn 
telescopic mappings typed lambda calculus 
information computation 
dowek felty herbelin huet paulin werner 
coq proof assistant version user guide 
technical report inria rocquencourt cnrs ens lyon 
dybjer 
inductively defined sets martin lof type theory 
proceedings workshop general logic edinburgh february 
laboratory foundations computer science department computer science university edinburgh 

dybjer 
comparing integrated external logics functional programs 
science computer programming 
dybjer 
inductive sets families martin lof type theory set theoretic semantics 
logical frameworks pages 
cambridge university press 
dybjer 
universes general notion simultaneous inductive recursive definition type theory 
proceedings workshop types proofs programs 
goguen thatcher wagner wright 
initial algebra approach specification correctness implementation data types 
prentice hall 
hagiya sakurai 
foundation logic programming inductive definition 
new generation computing 
harper honsell plotkin 
framework defining logics 
second annual symposium logic computer science pages 

normalizing associative law experiment martin lof type theory 
formal aspects computing 
huet 
residual theory calculus complete development 

luo pollack taylor 
lego preliminary user manual 
technical report university edinburgh 
martin lof 
intuitionistic theory iterated inductive definitions 
fenstad editor proceedings second scandinavian logic symposium pages 
north holland 
martin lof 
intuitionistic theory types 
unpublished report 
appear years type theory 
martin lof 
intuitionistic theory types predicative part 
logic colloquium pages 
north holland 
martin lof 
constructive mathematics computer programming 
logic methodology philosophy science vi pages 
north holland 
martin lof 
domain interpretation type theory lecture notes 
karlsson petersson editors workshop semantics programming languages abstracts notes chalmers university technology university goteborg august 
programming methodology group 
martin lof 
intuitionistic type theory 
bibliopolis 
mendler 
inductive definition type theory 
phd thesis cornell university september 
nordstrom 
terminating general recursion 
bit 
nordstrom petersson smith 
programming martin lof type theory 
oxford university press 
paulin mohring 
inductive definitions system coq rules properties 
proceedings typed calculus applications pages 
springer verlag lncs march 
paulson 
foundation generic theorem prover 
journal automated reasoning 
petersson 
set constructor inductive sets martin lof type theory 
category theory computer science pages 
springer verlag lncs 
schroeder heister 
natural extension natural deduction 
journal symbolic logic december 
schroeder heister 
judgements higher levels standardized rules logical constants martin lof theory logic 
unpublished june 
smith 
propositional functions families types 
notre dame journal formal logic 

machine checked proof ackermann function primitive recursive 
huet plotkin editors proceedings second workshop logical frameworks 
cambridge university press 

