chapter regular approximation context free grammars transformation mehryar mohri labs research mohri research att com mark jan nederhof labs research nederhof research att com algorithm approximating context free languages regular languages 
algorithm simple transformation applies context free grammar guarantees result compiled finite automaton 
resulting grammar contains new nonterminal nonterminal symbol input grammar 
result remains readable necessary modifiable 
extend approximation algorithm case weighted context free grammars 
report experiments grammars showing size minimal deterministic automata accepting resulting approximations practical applications speech recognition 
despite availability extensive literature topic efficient contextfree parsing large ambiguous grammars context free parsing poses serious problem practical applications real time speech recognition 
grammars applications rules annotated weights efficient processing weights forms additional challenge implementation context free parsers 
attractive computational properties attributed finite weighted automata theory practice 
commu jean claude van noord eds robustness language speech tech nology 
kluwer academic publishers pp 

mehryar mohri mark jan nederhof nication deals ideas allow advantageous properties approximating context free languages regular languages 
weighted approximations play crucial role constructing robust speech recognition systems computationally demanding context free grammars general give accurate model syntactic semantic properties natural languages classical gram language models 
approximations described existing literature pereira wright evans johnson extensive bibliography approximations nederhof 
approximations provides insight language changed approximation process difficult impossible influence process order fine tune approximating language application 
example pereira wright proposes construction specific kind pushdown automaton grammar subsequently approximated finite automaton 
structure pushdown automaton different structure context free language constructed close impossible grammar writer predict influence approximating language result understanding grammar 
objective solve problem defining approximation simple transformation original grammar 
grammar writer may inspect transformed grammar structure original grammar visible change way suitable application 
approximation algorithm applies context free grammar guarantees result compiled finite automaton 
resulting grammar contains new nonterminal nonterminal symbol input grammar new rules formed rules input grammar means straightforward decomposition 
result remains readable necessary modifiable 
show algorithm extended case weighted context free grammars 
experiments grammars show size minimal deterministic automata accepting resulting approximations practical applications speech recognition 
preliminaries context free grammar tuple sigma sigma finite disjoint sets terminals nonterminals respectively start symbol finite set rules 
rule form ff ff denotes sigma 
relation theta extended relation theta usual way transitive regular approximation context free grammars reflexive closure denoted 
language generated fw sigma wg called context free language 
denote empty string ffl 
jgj denote number rules grammar define size total number occurrences symbols denote kgk 
generally symbols range symbols range sigma symbols range symbols ff fi fl range symbols range sigma consider regular languages class languages accepted finite automata 
assume reader familiar concepts details refer hopcroft ullman 
algorithm analysis compilation context free grammars may generate languages regular 
describe subclass grammars strongly regular grammars guaranteed generate regular languages 
class grammars coincides grammars self embedding chomsky 
furthermore strongly regular grammars mapped equivalent finite automata efficient algorithm 
approximation algorithm transforms grammar strongly regular 
note mapping arbitrary cfg generating regular language corresponding finite automaton realized algorithm 
approximation guarantee language preserved grammar generates regular language 
guaranteed grammar strongly regular 
relation defined set nonterminals ff fi ff fi hard show defines equivalence relation 
partitions subsets called sets mutually recursive nonterminals 
convenience refer rules left hand side rules generally rules left hand side rules strongly regular grammars grammars rules set mutually recursive nonterminals right linear left linear 

nonterminals belong considered terminals determining rule right linear left linear 
mehryar mohri mark jan nederhof exist efficient algorithms computing finite automaton accepting language generated strongly regular grammar 
finite automaton constructed line shown nederhof proposed mohri pereira may construct alternative compact representation regular language finite automaton may computed compact representation may line processing input 
steps construction processing input sketched follows 
determine sets mutually recursive nonterminals 
done linear time size input grammar computing strongly connected components graph grammar 

construct finite state machine set mutually recursive nonterminals classical construction automaton regular grammar aho ullman 
effect finite automaton initial state case right linear set set final states case left linear set left unspecified 
finite automaton describing language corresponding nonterminal easily derived specifying state corresponding non terminal initial final state depending type set right linear left linear case 
combined start symbol grammar give compact representation approximating language 

input string obtain satisfies automaton expanded lazy way substituting automata occurrences encountered processing states transitions finite automaton complete language constructed demand needed recognition actual input string 
construction compact representation optimal sense requires linear size input grammar formally kgk 
compact representation optimized ffl removal determinization minimization algorithms possibly combination substitution subautomata 
transformation describe grammar transformation creates strongly regular grammars 
set mutually recursive nonterminals corresponding rules right linear left linear respect nonterminals apply grammar transformation defined follows 
nonterminal introduce new nonterminal 
graph grammar node nonterminal edge node node nonterminal appears right hand side rule left hand side 
rules input grammar left unchanged 
regular approximation context free grammars add rule grammar ffl 
consider rule left hand side ff ff ff delta delta delta bm ff bm ff ff sigma gamma replace set rules ff ff ff gamma ff gamma bm ff case set rules merely contains ff rules replaced right linear rules resulting grammar strongly regular compiled finite automaton discussed 
attractive property grammar transformation applied large grammars new nonterminal introduced nonterminal input grammar size resulting grammar twice input grammar 
convenient property transformed grammar parsing 
nonterminals form correspond recognition strings generated original grammar 
fact compile transformed grammar finite state transducer outputs bracketed strings equivalent parse trees 
resulting parse trees retain structure original grammar 
see nederhof related idea 
language generated transformed grammar superset original grammar 
clear way rule original grammar split rules string accepted series derivations input grammar accepted resulting grammar 
size result transformation comparable input grammar symbols newly introduced admit syntactic interpretation resulting grammar remains readable necessary modified user 
shall see experiments transformation leads automata reasonable size practical interest 

refined adding rule directly reachable strongly connected component 
mehryar mohri mark jan nederhof ffl ffl ffl 

regular approximation simple context free grammar 
grammar arithmetic expressions 
transformed grammar 
finite automaton accepting language generated transformed grammar 
approximation algorithm works stages grammar approximated transformation just defined 
resulting grammar compiled finite automaton 
mentioned compilation performed demand case automaton constructed expanded far required recognition input string automaton completely expanded optimized 
options useful practice choice depends time space trade offs 
note long substitute optimize subautomata total construction comprising grammar transformation compilation linear size grammar 
grammar transformation illustrated figures 
simple grammar formed arithmetic expressions 
shows result transformation 
original grammar nonterminals interpreted corresponding expression term factor 
transformed grammar example corresponds suffix expression starting factor corresponds suffix expression just factor 
transformed grammar strongly regular compiled finite automaton 
grammar transformation bears similarity transformation nederhof equivalent rtn approximation nederhof 
fact approximation viewed refined variant new transformation 
disadvantage old approximation method requires quadratic number jn nonterminals resulting grammar may unacceptable large grammars practice 
light approximation method just give simpler formulation older approximation follows 
set mutually recursive nonterminals grammar transformed steps 
regular approximation context free grammars 
defined 
introduce new nonterminals 
nonterminal add rule grammar ffl 
consider rule left hand side ff ff ff delta delta delta cm ff cm ff ff sigma gamma replace set rules ff ff ff gamma ff gamma ff 
replace occurrence old rules grammar subset represents set nonterminals may reached parts grammar involved recursion set start symbol set 
nonterminals root subtree parse tree constructed nonterminals nonterminals maintained superscripts new nonterminals needed ensure approximating grammar commits single nonterminal root subtree 
omitting superscripts transformed grammar leads transformation simplifies irrespective weighted grammars grammars applications related speech processing incorporate weights 
weights interpreted probabilities rank different hypotheses purpose disambiguation 
weighted context free grammar context free grammar rules additionally annotated weights 
weight set general mehryar mohri mark jan nederhof algebraic structure semiring phi omega identity element phi identity element omega weights rules single derivation combined omega product weights alternative derivations case ambiguous grammars combined phi sum 
assume phi sum weights defined cases 
approximation method transformation context free grammars extended weighted case cases ffl unweighted grammar corpus 
grammar transformed equivalent finite automaton constructed 
weights assigned transitions applying learning algorithm corpus 
ffl weighted grammar 
corpus constructed grammar weights removed grammar 
rest process identical previous case 
ffl weighted grammar 
transformation extended assign weights output rules way weight rule broken rules transformation equals omega product rules 
consider case extend transformation weighted grammars follows 
set mutually recursive nonterminals corresponding rules right linear left linear transformation applied 
nonterminal symbol introduce new nonterminal add rule weight grammar ffl 
consider rule left hand side weight ff ff ff delta delta delta bm ff bm ff ff sigma gamma replace set rules ff ff ff gamma ff gamma bm xm gamma ff xm xm omega omega delta delta delta omega xm regular approximation context free grammars table approximation experiments 
jgj jaj transf 

opt 
exists admissible choice values xm defined delta delta delta xm semiring general weight distributed new rules different ways 
derivation original weighted grammar derives string weight derivation deriving weight transformed grammar 
transformed grammar may additionally admit derivations strings weights corresponding derivation original grammar 
unweighted case resulting weighted grammar compiled weighted automaton mohri pereira 
experiments full implementation approximation algorithm previous section general case weighted context free grammars 
algorithm corresponding utilities incorporated set general purpose grammar tools grm library mohri 
implementation carried experiments grammars small large sizes 
grammars various experiments nederhof 
approximation results experiments exactly coincide obtained rtn approximation nederhof 
grammar obtained carroll grammar 
table illustrates approximation results grammars 
second column gives number rules grammar 
column gives number rules transformed grammar 
column ja exp gives size terms number transitions expanded automaton exp recognizing transformed grammar produced algorithm 
column gives size minimal deterministic automaton equivalent exp time required apply grammar transformation indicated column transf time compile grammar exp column time needed compute minimal deterministic automaton optimizing subautomata combination mehryar mohri mark jan nederhof expansion column opt sgi origin 
results show size transformed grammar size resulting automata small practical demanding applications real time speech recognition 
contrasts existing approximation methods shown produce automata large size small grammars rules nederhof 
approximation time including stages transformation compilation finite automaton extremely fast practical obstacle 
applied approximation algorithm weighted grammar rules translation transformed grammar rules 
approximation process including creation finite automaton accepting grammar took minute algorithm machine 
algorithm approximating context free languages regular languages 
algorithm shown efficient 
experiments grammars showed size resulting automata practical applications 
aho ullman theory parsing translation compiling prenticehall 
carroll practical unification parsing natural language technical report university cambridge computer laboratory england 
phd thesis 
chomsky certain formal properties grammars information control 
evans approximating context free grammars finite state calculus th annual meeting acl pp 

hopcroft ullman automata theory languages computation addison wesley 
johnson finite state approximation constraint grammars left corner grammar transforms th annual meeting acl th international conference computational linguistics vol 
pp 

mohri weighted grammar tools grm library 
van noord eds robustness language speech technology kluwer academic publishers 
volume 
mohri pereira dynamic compilation weighted context free grammars th annual meeting acl th international conference computational linguistics vol 
pp 

nederhof regular approximations grammatical view international workshop parsing technologies massachusetts institute technology pp 

nederhof context free parsing regular approximation proceedings international workshop finite state methods natural language processing ankara turkey pp 

regular approximation context free grammars nederhof practical experiments regular approximation context free languages computational linguistics 
pereira wright finite state approximation phrase structure grammars roche schabes eds finite state language processing mit press pp 

computational linguistics delft status report report tt delft university technology applied linguistics unit 
partial algorithm problems context free languages information control 
