transformers symbolic computation formal deduction william farmer martin department computing software mcmaster university main street west hamilton ontario canada mcmaster ca mcmaster ca june 
transformer function maps expressions expressions 
transformational operators expression evaluators simpli ers rewrite rules rules inference decision procedures represented transformers 
computations deductions formed applying sound transformers sequence 
introduces machinery de ning sound transformers context axiomatic theory formal logic 
intended rst step development integrated framework symbolic computation formal deduction 
mechanized mathematics study computer support improve automate mathematical reasoning process 
eld divided quite separated camps computer algebra theorem proving 
computer algebra focuses symbolic computations concrete structures implemented fast necessarily sound algorithms 
theorem proving focuses construction sound deductions theories expressed formal logics 
computer algebra systems usually restricted just areas mathematics mathematically unreliable provide strong support computation relatively easy 
theorem proving systems tend wide scope mathematically rigorous provide little support computation dicult 
workshop role automated deduction mathematics cade carnegie mellon university pittsburgh pennsylvania june 
mechanized mathematics system today ers symbolic computation capabilities computer algebra systems formal deduction capabilities theorem proving systems 
mechanized mathematics potential revolutionize mathematics learned practiced students engineers scientists possibly mathematicians 
potential achieved combining capabilities computer algebra theorem proving systems 
developing integrated framework symbolic computation formal deduction intended serve basis implementation new kind mechanized mathematics system 
framework allows computation deduction freely mixed 
result parts deduction performed computations 
example assertion says derivative veri ed directly computing derivative inferring assertion axioms previously proven theorems 
result computation directed context assumptions possibly causing computation branch 
example computation integral possible branches depending true false 
branches may eliminated proved disproved assumptions placed key ideas framework integrating computation deduction notion transformer axiomatic theory 
purpose de ne transformers explain means transformers sound illustrate techniques creating sound transformers 
organized follows 
underlying logic framework brie discussed section 
transformers introduced section computations deductions formed applying sound transformers sequence de ned section notion transformational theory section 
techniques de ning new sound transformers subject section 
papers ends short 
underlying logic integrated framework version bernays odel set theory called 
traditional set theories zermelo fraenkel zf set theory suited foundation mechanized mathematics 
allows terms unde ned de nite description operator provides sort system classifying terms value includes lambda notation term constructors function application function abstraction 
short includes set theoretic machinery set theory function theoretic machinery lutins logic imps interactive mathematical proof system 
purposes reader need intimate understanding 
language contains kinds expressions terms may unde ned formulas denote true false de ned 
axiomatic theory pair language set formulas called axioms language axiomatic theory mean language axiomatic theory respectively 
terms formulas constructed usual logical connectives application plus special connectives 
terms means de ned value means unde ned 
formulas means implies means de nite description operator forming de nite descriptions form ix term constructor forming conditional terms form de nedness operator forming de nedness assertions form 
expressions means alpha equivalent identical renaming bound variables 
serves syntactic identity 
chosen highly expressive logic special machinery reasoning unde nedness functions ideas sophisticated logics 
transformers transformer key notion framework 
meanings 
algorithmic meaning function expressions axiomatic meaning set expressions 
transformational operations expression evaluators simpli ers rewrite rules rules inference decision procedures represented transformers 
rest axiomatic theory 
term transformer total function terms formula transformer total function formulas term formula transformer 
moves member domain identical 
transformer mean transformer expression mean expression transformer sound di erent ways 
term transformer computationally sound terms 
formula transformer computationally sound formulas 
formula transformer deductively sound formulas 
formula transformer sound formulas example 
axiomatic theory formalizes real arithmetic standard way term transformer de ned rules 
term sort sort real numbers canonical unde ned term sort 
computationally sound sound formalization unsound simpli cation procedure commonly computer algebra systems 
computations deductions expression term formula transformer 
subexpression occurrence uniquely represented sequence positive integers called path occurrence subexpression occurrence contains subexpression occurrence path initial segment path 
subexpression occurrences disjoint contains 
target occurrence subexpression moved target maximal path initial segment path target set maximal targets obviously pairwise disjoint 
expressions means pairwise disjoint set targets obtained simultaneously replacing target 
max means obtained simultaneously replacing maximal target 
course max implies computation expression expression set transformers sequence 


deduction computation formula term formula transformer 
computation computationally sound computationally sound deduction ha deductively sound provided term transformer computationally sound formula transformer statements true 
computationally sound 
deductively sound applied positive subformula occurrences 
sound applied negative subformula occurrences deduction ha sound provided term transformer computationally sound formula transformer statements true subformula occurrence formula positive negative occurrence scope odd number occurrences occurrence de nite description conditional term 

computationally sound 
sound applied positive subformula occurrences 
deductively sound applied negative subformula occurrences proposition 
axiomatic theory computation 
term computation computationally sound 
formula computation computationally sound 
deduction deductively sound 
deduction sound forward proof formula deduction true deductively sound backward proof formula deduction true sound example 
simple transformers introducing eliminating theorems axioms deductions 
suppose axiomatic theory theorem 
elimination formula transformer de ned rules 
true 

formula transformer de ned rule computationally sound transformational theories transformational theory tuple ct cf df rf true canonical true formula 
language 

set formulas called explicit axioms 
ct set term transformers called primitive computational term transformers 
cf set formula transformers called primitive computational formula transformers 
df set formula transformers called primitive deductive formula transformers 
rf set formula transformers called primitive reductive formula transformers axiomatic theory written ax thy axiomatic theory ct cf df rf 
ct fs ct term lg 

cf fa cf formula lg 

df fa df formula lg 

rf rf formula lg 
formula axiom theorem axiom theorem respectively ax thy 
means ax thy proposition 
ct cf df rf transformational theory ax thy 
ct cf computationally sound df deductively sound rf sound de ning new transformers axiomatic theory developed de ning new constants proving theorems 
transformational theory developed de ning new constants proving theorems de ning new transformers proving soundness 
ways de ning sound transformers 
sound transformers generated automatically theorems ways depending syntactic form theorem 
second sound transformers constructed sound cases possibly unsound transformers constructors produce sound transformers 
third transformer manually de ned manually proven sound 
ways de ning transformers illustrated examples inspired mechanism imps see 
generating transformers theorems ways sound transformers automatically generated theorems 
give representative examples 
example implication transformers 
suppose formula transformer de ned rules 
substitution domain fx 

formula transformer de ned rules 
substitution domain fx 

deductively sound sound forward chaining rule inference backward chaining rule inference 
example term conditional rewrite transformers 
suppose term transformer de ned rules 
substitution domain fx 

forward conditional rewrite rule computationally sound corresponding backward conditional rewrite rule de ned similar way 
constructing new transformers sound term formula transformers constructed transformer constructors 
lift term lift transformer term transformer lift de ned rule lift max formula lift transformer formula transformer lift de ned similar way lift 

composition composition term formula transformers transformer de ned rule 
transformer transformer 
times 
fixpoint xpoint term formula transformer transformer de ned rule 
identity term formula transformer expression alpha equivalent 

conditional term transformers formula 
conditional respect transformer cond de ned rule cond 

term formula transformers 
respect transformer sound de ned rules sound 
sound proposition 
axiomatic theory term formula transformers formula 
computationally sound lift lift computationally sound 
computationally deductively sound cond computationally deductively sound respectively 

computationally sound sound computationally sound manually de ning transformers transformer de ned program written programming language takes expression input returns expression output 
responsibility uses transformer verify transformer sound transformer sound way 
may require proving program sound 
done employing sound transformer constructor 
illustrate example example 
term transformer de ned program computes integral function term transformer maps function derivative transformer maps term canonical representation 
assume known computationally sound may unsound inputs 
integration derivative inverses sound apply sound 
illustrates simpler transformer performing di erentiation check complex transformer performing integration 
introduced notion transformer shown computations deductions formed applying sound transformers sequence demonstrated transformers de ne axiomatic theories machinery generating sound transformers theorems de ning new sound transformers old sound transformers 
intended rst step development integrated framework symbolic computation formal deduction 
second step development framework introduce branching computations 
branch potentially introduced computation conditional term appears expression transformed 
branching controlled contexts sets formulas serve local assumptions 
branching computations convenient humans software linear computations 

farmer 
partial functions version church simple theory types 
journal symbolic logic 

farmer 
simple type theory partial functions subtypes 
annals pure applied logic 

farmer 
theory interpretation simple type theory 
heering editor higher order algebra logic term rewriting volume lecture notes computer science pages 
springer verlag 

farmer 
set theory mechanized mathematics 


farmer guttman 
set theory support partial functions 
studia logica 
forthcoming 

farmer guttman thayer 
imps updated system description 
slaney editors automated deduction cade volume lecture notes computer science pages 
springer verlag 

farmer guttman thayer 
imps interactive mathematical proof system 
journal automated reasoning 

farmer guttman thayer 
imps user manual 
technical report mitre 
available imps mcmaster ca doc 

farmer guttman thayer 
contexts mathematical reasoning computation 
journal symbolic computation 

odel 
consistency axiom choice generalized continuum hypothesis axioms set theory volume annals mathematical studies 
princeton university press 

mendelson 
mathematical logic 
van nostrand 

monk 
inference rules local contexts 
journal automated reasoning 

