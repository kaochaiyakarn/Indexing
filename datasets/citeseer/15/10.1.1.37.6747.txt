implementing constraint relaxation finite domains assumption truth maintenance systems narendra jussien patrice boizumault ecole des mines de nantes 
departement informatique 
rue alfred 
la 
nantes cedex france 
jussien patrice fr 
real life constraint satisfaction problems overconstrained 
order provide kind solution problems proposes constraint relaxation mechanism fully integrated constraint solver 
constraint relaxation system able perform fundamental tasks identi cation constraints relax cient constraint suppression 
assumption truth maintenance systems propose uniform framework tackle requirements 
main idea proposal atms record ciently information provided constraint solver checking consistency 
detail atms particular scheme ciency comparing existing algorithms systems menezes 
real life problems constrained time tabling cad 
constraint relaxation mechanism integrated constraint solver necessary 
constraint relaxation system able perform fundamental tasks identi cation constraints relax cient constraint suppression 
research area initiated constraint logic programming community works borning logic programming community freuder rst theoretical framework csp community 
systems algorithms proposed provide constraint relaxation system nite domains 
propositions similarities rst deal single point constraint relaxation nite domains intelligent identi cation constraint relax cient constraint suppression second record supplementary information provided constraint solver 
worth noticing information cited systems removed value variable domain records constraint rst removed value checking consistency just information di ers 
aim propose constraint relaxation scheme clp fd languages integrating time appropriate relaxation decision identi cation responsibilities constraint suppression 
truth maintenance systems propose uniform framework tackle requirements 
main idea proposal atms record ciently information provided constraint solver checking consistency 
framework provides direct management constraint deletion precise identi cation constraints relax 
brie recall de nitions results constraint relaxation 
framework constraint relaxation finite domains recall basic results atms 
describe atms implement system illustrate example 
rst implementation draw works 
constraint relaxation order deal constrained systems various approaches developed years 
constraint hierarchies introduced borning freuder proposed rst theoretical framework 
section brie recall basic concepts review di erent proposals 
basic concepts introduces hierarchy constraints 
weight assigned constraint 
weight represents relative importance constraint 
weight allows setting partial order relation constraints 
constraints weight assimilated zero weight called required mandatory constraints positive weight called preferred constraints 
recall greater weight important constraint substitution values variables satis es required constraints satis es preferred constraints best possible way respect comparator called solution 
maximal agiven criterion sub problem initial problem searched 
subproblem existing solutions 
di erent approaches constraint relaxation problem handled di erent ways 
problem seen modi cation solved instance repairing algorithms 
approach needs existing solution order start needs explicit operations tell system operation executed suppressing constraint adding constraint 
criterion called comparator borning approach 
constraint relaxation problem solved branch bound methods preferred constraints objective function 
approaches known operations research results techniques 
approaches programmer user specify labeling strategy control resolution guided objective function 
fages proposed reactive scheme ciently add suppress constraints 
abstracted framework terms transformations trees 
approach constraint suppress selected user automatically detected system 
constraint relaxation problem studied handling tower constraints example system considers problem solution 
tries nd solution respecting required constraints re nes solution adding preferred constraints level level failure 
unfortunately approach usable finite domains paradigm consistency techniques local variables instantiated insure existence solution required constraints 
systems satisfactory purpose providing automated constraint relaxation system embedded constraint logic programming language finite domains 
constraint relaxation finite domains review works cient addition suppression constraints dynamic csp identifying constraint relax intelligent backtracking 
sharing objectives keep justi cation system 
general framework 
dynamic arc consistency years csp community interested dynamic csp 
algorithms developed achieve dynamic arc consistency allows cient addition suppression constraints 
extends ac recording justi cations restrictions 
justi cation consists recording removed value domain variable constraint rst removed 
deleting constraint nds values put back domains system justi cations 
procedure cient re running ac algorithm new problem scratch 
set constraints weight forms level hierarchy constraints 
identifying constraint relax logic programming community interested years intelligent backtracking 
results study clp fd framework identify responsibility constraint inconsistency identify constraints relax 
achieving arc consistency cousin approach records 
domain variable empty easy identify appropriate constraints notion responsibility isvery limited just identify immediate responsible constraint 
worth noticing recorded information cousin usage information 
cousin approach appears rudimentary strategy determining constraints relax short range view problem 
gives deeper analysis situation 
uses justi cation 
de nes dependency relation constraints constraint depends constraint constraint modi es domain variable appearing resulting graph order identify responsibility failures 
constraint fails easy identify set constraints responsible failure 
set transitive closure failing constraint dependency graph 
problem system encountered fact analysis done constraints lot information lost values domains variables dependency analysis general unnecessary possibilities relaxation handled 
worth noticing orthogonal works lie notion justi cation constraint domain variable 
general framework state constraint relaxation finite domains relies main points treated separately relax exactly computation constraint 
start relaxation process contradiction raised ensuring non existence solution 
exploiting approach easy standard clp fd scheme 
scheme kinds contradictions contradiction caused wrong value labeling phase contradiction due intractability problem 
possibilities lead di erent treatments rst case simple backtrack lead possibility second case start relaxation process 
possibilities single start relaxation process case contradiction 
achieved rede ning labeling terms adding suppressing constraints constraint suppress constraint set constraints need suppress relax order obtain satis able subproblem 
previous systems cousin system proposed answers question see section 
accurately exploiting information solver gather justi cations deletions values trivial justi cation 
delete constraint ciently perform suppression constraint 
obvious answer systems add retract constraints incremental systems 
answer comes csp community stated achieves dynamic arc consistency enforces maintenance arcconsistency deletion constraint 
constraint relaxation system provide cient answer questions 
example perform ective suppression allow cient answer question 
reason perform deletion easily keeping mind answer questions 
method suppression information really putting back avalue merely temporarily deletion 
propose sections specialization truth maintenance systems concepts implement constraint relaxation system fully answers basic questions framework lies 
truth maintenance systems overview truth maintenance systems stated de kleer problem solvers search constantly confronted obligation select equally plausible alternatives 
solving problems aims provide answer questions search space ciently explored maximum information transferred point space conceptually problem solver organized classical backtracking techniques provide cient scheme achieve tasks 
problems caused approaches lead development truth maintenance systems tms 
systems clean division components problem solver draw inferences component tms solely concerned recording inferences called justi cations see gure 
tms serves roles maintains cache inferences 
inferences need repeated contradictions discovered avoided allows non monotonic inferences needs procedure called truth maintenance determine data believed ensures database contradiction free 
contradictions removed identifying absent justi cation addition database remove contradiction 
called dependency directed backtracking 
assumption truth maintenance systems atms extend tms architecture extending cache idea simplifying truth maintenance avoiding dependency directed backtracking 
classical justi cation tms datum associated status believed believed 
entire set data de nes current context 
atms datum labeled sets assumptions representing environment holds 
environments computed atms problem solver supplied justi cations 
labels enable cient way shifting context 
shifting contexts wants know believed previous context believed new 
ciently achieved atms labels testing accuracy current context 
chronological backtracking failure looses useful information assertions derived data una ected remain useful 
assertions directly ected contradiction causing failure removed 
atms tell easily assertion ected 
example order label variable domain rst step add constraint succeeds perform retract add 
problem solver justifications assumptions beliefs contradictions tms fig 

tms problem solver basic de nitions basic de nitions atms 
node corresponds problem solver datum 
assumption designates decision assume commitment 
assumption special kind node 
justi cation describes node derivable nodes 
context formed assumptions consistent environment combined nodes derivable assumptions 
label set environments associated node 
label consistent label set justi cations prove current node believed 
justi cation describes datum derived immediately preceding antecedents label environment describes datum ultimately depends assumptions 
sets assumptions computed justi cations computing time disable advantage atms 
fundamental task atms guarantee label node consistent sound complete minimal respect justi cations see details 
constraint relaxation atms section handle uniformly components constraint relaxation system 
architecture architecture system stated gure 
gure problem solver clp fd solver uses arc consistency algorithm labeling procedure coupled analyzer computes constraint relax atms information 
arc consistency labeling analyzer justifications assumptions beliefs contradictions atms fig 

atms clp fd give meaning atms concepts constraint relaxation scheme 
node re ects suppression value domain variable represents atomic operation constraint solver nite domains 
constraint solver gives justi cation operation 
justi cation composed conjunction constraints responsible suppression 
justi cation fact environment explaining corresponding suppression 
de nition justi cation represent di erence approach cousin method 
constraint problem appears assumption 
assumption constraint considered system system 
current context represented assumptions active constraints 
label node set environments indicates reason avalue retracted 
architecture exible allows constraint solver finite domains 
ciency system related precision accuracy justi cations provided constraint solver 
constraint solver uses lot information domain give information system allow cient relaxation procedure 
system gives useful help constraint solver create information information contained solver 
utilization atms previously described provides uni ed framework answer main questions 
identi cation responsibility node label answers question 
stated label gives conjunctions constraints responsible deletion 
determine set constraints relaxation free value back domain 
contradictions raised domain variable empty 
contradiction occurs domain variable failing variable empty current system constraints satis able start determination constraint relax 
answer question 
incrementality ensured keeping useful information relaxation labels 
answer question 
relax constraint just specify related atms assumptions may believed anymore 
done switching status assumption constraint status status 
problem solver raises contradiction labeling phase answering question responsibility answering question ciently determined examining associated labels 
labels contain necessary information enforce task 
responsibility determined previously called analyzer just need retract answering question corresponding assumption labeling phase order ensure complete exploration new search space example describe constraint relaxation scheme atms considering conference problem 
stating conference problem michael john alan attend sessions place half days 
john alan want michael michael wants john alan 
ma mj am jm presentations michael alan michael john alan michael john michael respectively 
variables domain 
presentation takes half day 
michael wants know john alan done presenting 
michael come fourth half day michael want alan john time 
attends presentation half day 
di erent persons person time 
introduce constraints ma am ma jm mj am mj jm 
constraints important ones weight 
ma mj am jm constraints important ones weight 
ma mj 
constraint quite important weight 
ma am ma jm mj am mj jm am jm 
constraints required weight 
search space modi ed suppression constraint 
variable labels resulting domain ma mj am jm table 
rst constraints variable labels resulting domain ma mj am jm table 
constraints solving conference problem atms labels associated removal value domain label attached corresponding value creating explicitly atms node 
example rst constraints obtain table 
variable ma set labels read value removed domain constraint believed constraint believed 
values removed current information constraints labels table 
variable am set labels read values removed current information 
value removed domain constraints believed constraints believed 
value removed domain constraint believed constraint believed constraint believed 
arc consistency ac 
parameterize real signi cation label achieved degree consistency 
domain value label table 
second contradiction considering context active constraints nd current domain variable 
ensure existence solution problem variables 
labeling phase 
choose rst enumerate variable am 
giving value am weight am leads contradiction variable mj try give value am weight 
leads contradiction variable mj 
handling contradictions contradictions occur current domain variable empty got non empty label labels valid believed current context 
order nd responsible constraint read labels variable provoked contradiction 
conference problem labels variable mj second contradiction table 
valid environments justi cations labels 
real labels contained information constraint valid relaxed current context 
classical interpretation labels leads statement order recover inconsistency lying variable mj free value domain label invalid modifying current context 
modi cation lies relaxation 
order recover inconsistency relax andc formulation satisfactory value want free 
order avoid choice transform preceding disjunction conjunctions conjunction disjunctions arbitrary great value 
wemust rst relax constraint 
sure conjunction true component considering true constraint relaxed false 
problem seen determination set covering problem hypergraph vertices di erent disjunctions edges di erent constraints 
edge represents sharing constraint di erent disjunctions 
edge involve disjunction 
set covering minimize certain criterion 
criterion de nes nature solutions want determine solve constraint relaxation problem 
criterion minimizing cost relaxation minimize sum weights edges 
case inverse weight associated constraint 
problem np complete 
example method leads set constraints fc 
minimizing maximum weight covering ensuring important relaxed constraint important 
answered simply selecting important constraint disjunction selecting vertex better edge smaller weight 
done linear time represents size formula 
example method leads set constraints fc 
performing relaxation simply context change status immediate constraints determined previous step labeling procedure 
labeling procedure bene previously done marks changed relaxation erase deduction 
giving answer labeling procedure achieved current solution solution satis ed constraints current context 
example reconsider value variable am leads solution ma am jm violates constraint 
results implemented system prolog 
chose ac algorithm achieve arc consistency 
complete system represents lines code 
system relaxed constraint backtracks ac atms table 
complete results conference problem comparing systems conference problem chose compare system complete answering basic questions systems literature 
compare incremental algorithms important basic questions 
implemented related papers comparisons di erent systems 
system 
system uses known techniques van hentenryck oracles create constraint relaxation system fully uniformly answering basic questions 
system interactive user give constraint add retract gives choice judicious constraints deal prolog program 
nd results conference problem systems table 
obtain solution conference problem needs relax constraint 
systems gave answer system ac atms 
relax constraints obtain feasible solution 
recall works failing constraint failing variable works incomplete information relax inaccurate constraints 
re ects real ciency systems see generates lot backtracks compared systems 
illustrates inaccuracy method incomplete solvers addition variable ensure exist solution exhibit arc consistency 
system cient illustrates incremental 
words cache inferences atms cient van hentenryck oracles 
complexity section give rst results complexity worst case implemented system 
really compare complexity system systems propose complete treatment relaxation problem answering basic questions system far know proposes 
number constraints problem number variables size largest domain 
give nal results complexity ac constraint solver 
spatial complexity space system increase adding justi cations 
justi cations solver removes values 
justi cation contain constraints 
adding justi cation depends constraint solver 
ac step algorithm justi cation added explain removal value domain variable 
space complexity nd ed case nd labels system 
complexity considered atms treatment ensure minimal size label suppressing redundant justi cations label 
conference problem number added justi cations worst case ned 
nal number justi cations conference problem 
time complexity time complexity constraint solver ected atms system removal constraint solver justify removal atms recording system operation signi cant 
set labels variable transformed normal conjunctive form relaxation 
transformation achieved size treated set 
set contain worst case added justi cations ned 
conference problem stated table set contains justi cations 
selection constraints relax see section depends retained criterion 
second criterion complexity course rst criterion try solve complete problem complexity remain polynomial 
works atms constraint relaxation provides uniform framework answer basic questions 
framework exible constraint solver domain reduction provide automated constraint relaxation system nite domains 
system focused single aspect problem 
results utility questions framework 
works done evaluate average behavior approach particular terms space complexity plan study retain useful information adding justi cation 
research area lacks signi cant benchmarks 
plan study generate random instances intractable problems avoiding simple contradictions 
de kleer shows csp mapped atms encoding domain constraint achieving arc consistency de ning inference rules 
interesting extend scheme dynamic csp giving semantics constraint deletion 
saraswat initiated works actively atms labels boolean formulas 
leads integration formulas inside constraint language 
interesting approach worth study nite domains 

christian 
arc consistency dynamic constraint satisfaction problems 
proceedings aaai 

patrice boizumault narendra jussien 
cient labeling constraint relaxation solving time tabling problems 
pierre lim jean jourdan editors proceedings ilps post conference workshop constraint languages systems problem modeling volume applications modelling technical report ecrc ecrc munich germany november 

alan borning michael maher amy wilson 
constraint hierarchies logic programming 
giorgio levi maurizio martelli editors iclp proceedings th international conference programming pages lisbon portugal june 
mit press 

xavier cousin 
solutions en programmation logique 
proceedings avignon 
french 

johan de kleer 
assumption tms 
arti cial intelligence 

johan de kleer 
comparison atms csp techniques 
ijcai proceedings th international joint conference onarti cial intelligence pages detroit 



research report laboratoire informatique de de micro de montpellier 
french 

francois fages julian fowler thierry 
handling preferences constraint logic programming relational optimization 
plilp madrid september 

francois fages julian fowler thierry 
reactive constraint logic programming scheme 
international conference programming iclp tokyo 

bjorn freeman benson john maloney alan borning 
incremental constraint solver 
communications acm january 

eugene freuder 
partial constraint satisfaction 
ijcai proceedings th international joint conference onarti cial intelligence pages detroit 

alois thomas markus 
revising inconsistent variable assignments constraint satisfaction problems 
manfred meyer editor constraint processing proceedings international workshop st petersburg july research report rr pages dfki kaiserslautern august 

michael david gilbert 
fair hierarchical constraint logic programming 
manfred meyer editor proceedings ecai workshop constraint processing amsterdam august 

francisco menezes pedro barahona philippe 
incremental hierarchical constraint solver 
paris kanellakis jean louis lassez vijay saraswat editors workshop principles practice programming providence ri 

vijay saraswat johan de kleer brian williams 
atms constraint programming 
technical report xerox parc october 

gilles 
complete constraint maintenance algorithm constraint programming 
manfred meyer editor constraint processing proceedings international workshop st petersburg july research report rr pages dfki kaiserslautern august 

pascal van hentenryck 
incremental constraint satisfaction logic programming 
proceedings th international conference programming 

pascal van hentenryck yves deville man teng 
generic arcconsistency algorithm specializations 
arti cial intelligence october 
article processed atex macro package llncs style 
