treemaps mark kees huizing jarke van wijk eindhoven university technology dept mathematics computer science box mb eindhoven netherlands win tue nl 
extension treemap method visualization hierarchical information directory structures organization structures 
standard treemap method gives thin elongated rectangles 
result rectangles difficult compare select 
new method generate lay outs rectangles approximate squares 
visualization structure shaded frames groups related nodes 
hierarchical structures information directory structures organization structures family trees catalogues computer programs 
small hierarchical structures effective locate information content organization large structures harder grasp 
new visualization method large hierarchical structures treemaps 
method treemaps developed shneiderman johnson 
treemaps efficient compact displays particularly effective show size final elements structure 
previous introduced cushion treemaps provide shading extra cue emphasize hierarchical structure 
attack problem standard treemaps emergence thin elongated rectangles 
propose new method subdivide rectangular areas resulting lower aspect ratio 
rectangles space efficiently easier point interactive environments easier estimate respect size 
resulting structures somewhat harder grasp introduce improved method visualize nested structures 
variant nested treemaps rectangular enclosures replaced shaded frames 
combination methods leads displays hierarchical structures efficient easy understand 
section discuss existing methods visualize hierarchical structures 
new method improved subdivision section 
shaded frames described section 
discuss results section 
background methods exist browse display hierarchical information structures short trees 
file browsers best known example 
usually listing files directories levels hierarchy shown means indentation 
number files directories shown simultaneously limited problem knows search 
want get overview want answer global question disk full scrolling opening closing subdirectories intensively 
process hard form mental image structure 
techniques proposed visualize structures effectively 
important category node link diagrams fig 

elements shown nodes relations shown links parent child nodes 
sophisticated techniques improve efficiency aesthetic qualities diagrams 
diagrams effective small trees usually fall short couple elements visualized simultaneously 
main reason limitation simply node link diagrams display space inefficiently pixels background 
treemaps tree diagram fig 

tree diagram treemap developed remedy problem 
full display space visualize contents tree 
overview concept depth treatment original 
shows example 
node shown tree diagram name letter associated size number 
size leaves may represent instance size individual files size non leaf nodes sum sizes children 
treemap constructed recursive subdivision initial rectangle 
size sub rectangle corresponds size node 
direction subdivision alternates level horizontally vertically etcetera 
result initial rectangle partitioned smaller rectangles size rectangle reflects size leaf 
structure tree reflected treemap result construction 
color annotation give extra information leaves 
treemaps effective size important feature displayed 
shows overview file system files shown effortlessly determine largest ones 
treemaps limitations 
problem treemaps fall short visualize structure tree 
worst case balanced tree parent file system organization fig 

treemaps number children leaf size 
treemap degenerates regular grid 
example shows artificial organization chart modeled structure university 
levels hierarchy shown final rectangles denote individual employees 
previous shown shading employed improve perception structure 
study problem treemaps 
examples thin elongated rectangles emerge result straightforward subdivision technique standard treemaps 
children level treated presentation small file degraded compared larger siblings think large unix home directory small top level 
presentation nodes leaves square rectangles advantages display space efficiently 
number pixels border proportional circumference 
rectangles number minimal square square items easier detect point thin rectangles clutter give rise aliasing errors comparison size rectangles easier aspect ratios similar accuracy presentation improved 
rectangle prescribed width say pixels sizes coarse steps 
advantages inspired study alternative subdivision techniques aim rectangles nearly square nodes leaves 
late stage writing exceptional interest 
concept applied independently clear effective visualization stock market 
rectangle recursively rectangles aspect ratios max height width width height approach close possible 
number possible large 
problem falls category np hard problems 
application need optimal solution solution computed short time required 
experimented different algorithms 
section method empirically turned give best results 
key idea notions 
consider subdivision levels simultaneously 
leads explosion computation time 
strive produce square rectangles set siblings rectangle fit apply method recursively 
level square rectangle gives opportunities subdivision 
second replace subdivision process set siblings standard treemap technique width height rectangle subdivided direction process similar hierarchical subdivision process standard treemap 
method example followed description complete algorithm 
example suppose rectangle width height furthermore suppose rectangle subdivided rectangles areas 
standard treemap algorithm uses simple approach rectangle subdivided horizontally vertically 
thin rectangles emerge aspect ratios respectively 
areas problem horizontal vertical fig 

subdivision problem step algorithm split initial rectangle 
choose horizontal subdivision original rectangle wider high 
fill left half 
add single rectangle 
aspect ratio rectangle 
add second rectangle 
aspect ratios improve 
add area original rectangles aspect ratio rectangle 
decide reached optimum left half step start processing right half 
initial subdivision choose vertical rectangle higher wide 
step add rectangle area followed rectangle area step 
aspect ratio decreases 
addition area improve result accept result step start fill right top partition 

step step step step step step step step step fig 

subdivision algorithm step steps repeated rectangles processed 
optimal result guaranteed counterexamples set 
order rectangles processed important 
decreasing order usually gives best results 
initially large rectangle filled larger 
algorithm example algorithm layout children rectangle recursive procedure 
procedure lays rectangles horizontal vertical rows 
rectangle processed decision alternatives 
rectangle added current row current row fixed new row started remaining 
decision depends adding rectangle row improve layout current row 
assume datatype rectangle contains layout computation global procedure 
supports function width gives length shortest side remaining current row placed function adds new row children rectangle 
keep description simple list notation concatenation lists list containing element empty list 
input basically list real numbers representing areas children laid 
list row con tains rectangles currently laid 
function worst gives highest aspect ratio list rectangles length side laid 
function discussed 
procedure list real children list real row real real head children worst row worst row tail children row row children width fi list areas total sum 
function worst defined worst max max term increasing decreasing equal max maximum minimum current maximum minimum row laid 
applying algorithm data sets results 
shows clearly algorithm succesful sense rectangles far elongated black areas cluttered rectangles disappeared 
show hierarchical structure far obvious standard treemap algorithm 
alternating directions scheme aids providing viewer direct cues structure regular scheme visual cues disappear 
sizes vary strongly subtle cue provided 
lower left corner upper right corner size rectangles decreases shows child nodes parent 
leaves size cue 
way improve visualization structure 
global structure obvious instance hard detect nodes highest level 
studied additional methods emphasize structure 
frames nesting introduced shneiderman johnson strengthen visualization structure 
rectangle represents non leaf node provided border show children parent 
example binary tree shown file system organization fig 

treemaps file system organization fig 

cushion treemaps 
method disadvantages 
extra screen space furthermore gives rise maze images puzzling viewer 
second disadvantage remedied similar way visualization nodes 
fill borders grey shades simple geometric model 
width dl pixels border level nis dl width root level border factor decrease width lower level borders 
profile border parabola zl sl sl sl xl di zl height profile level distance outside border level coefficients control shape parabola 
nesting frames profile fig 

binary tree shows result binary tree 
exaggerated example andb gives parabola top shifted interior 
gives profile frames example 
applications similar profile shown 
gives effects nested borders appear solid frames depth node tree visualized directly height frame surrounds neighbouring level boundaries boundary node get indent shift parabola neighbouring second level boundaries boundary node smooth top lower level boundaries sharp top 
discussion extensions standard treemaps 
shown rectangles forced square 
gives rectangles easier com fig 

profile frames file system organization fig 

framed treemaps pare point represent sizes accurately 
second shown frames improve perception structure 
methods limitations 
relative ordering siblings lost images tend regular standard patterns standard treemaps 
structure tree important ordering data methods useful 

klein wood 
drawing trees nicely tex electronic publishing 

card robertson mackinlay 
information visualizer information workspace 
proc 
acm chi conference human factors computing systems pages 

chimera wolman shneiderman 
evaluation interfaces browsing hierarchical tables contents 
technical report technical report car tr cs tr university maryland february 

eick 
visualization interaction techniques 
chi tutorial notes information visualization 
acm sigchi march 

furnas 
generalized fisheye views 
proc 
acm chi conference human factors computing systems pages 

johnson shneiderman 
treemaps space filling approach visualization hierarchical information structures 
proc 
nd international ieee visualization conference pages october 

knuth 
fundamental algorithms art computer programming volume 
addison wesley reading ma 

robertson mackinlay card 
cone trees animated visualizations hierarchical information 
proc 
acm chi conference human factors computing systems pages 

shneiderman 
tree visualization tree maps space filling approach 
acm transactions graphics september 

van wijk van de 
cushion treemaps visualization hierarchical information 
wills keim editors proceedings ieee symposium information visualization infovis pages october 

wattenberg 
map market 
com smart money com 
