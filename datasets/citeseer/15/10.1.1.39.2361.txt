integrating normalization evaluation staged programming language designed metaml multi stage programming language meta programming system system write programs meta programs sole purpose build manipulate programs 
metaml programs simply ml programs annotated staging operators 
strong connection line partial evaluation staged programming 
staging operators metaml thought manual form binding time analysis 
metaml binding time annotations rst class operators users place explicitly automatic binding time analysis place implicitly 
metaml stage line partial evaluator replaced run time code generation compilation upper limit number stages 
powerful technique simple programs automatic binding time analysis su cient hand staging simply annoyance 
metaml combined advantages allowing simple type directed binding time analysis coexist manual staging annotations 
integration subject 
metaml staged language section introduces metaml statically typed multi stage programming language :10.1.1.17.4285
describe staging operators metaml 
bracket operator building pieces code metaml stage expression denoted enclosing meta brackets 
instance pieces code denoting constant isgiven val int expression pronounced bracket type int pronounced code int 
consider example length refers previously de ned function 
tim sheard paci software research center oregon graduate institute sheard cse ogi edu length val length int returned value indicates length lifted value constant piece code :10.1.1.103.291
call lexical capture free variables 
explained detail section 
metaml operators identi ers free occurrences operators appear front 
escape operator composing pieces code bracketed expressions viewed frozen evaluation apply brackets 
convenient allow reduction steps inside large frozen expression constructed 
metaml allows escape frozen expression pre xing subexpression tilde tilde appear inside brackets level higher 
instance examine function pair fun pair val pair fn function pair takes piece code type input produces new piece code type 
transforms input code code pair 
splice resulting code places 
done escaping occurrences de nition pair 
appears inside brackets level system evaluates piece code 
spliced bracketed expression location escaped expression lexically appears 
function pair construct new code old pair val int int run operator executing user constructed code run operator explicit annotation indicate time execute delayed computation piece code 
val val int run val int run operator allows reduce piece code value executing code 
computation longer deferred resulting value pure value 
lift operator way build code similar meta brackets lift transforms expression piece code 
lift di ers reduces input freezing 
contrasted examples 
val int execution lift executed val int noted lift applied higher order functional arguments unde ned 
lexical capture free variables constant pieces code mentioned earlier value lifted constant stage 
call cross stage persistence illustrate di erences di erent ways construct pieces code val val int val quad lift val quad int int int int variable de ned stage inside fourth component tuple quad occurs free referenced stage 
runtime expression evaluated system compute piece code related value piece code constant known 
call phenomenon cross stage persistence 
pretty printer code prints lexically captured constants annotation followed name free variable value construct constant 
free variables regardless type inside meta brackets construct constants 
way functions code 
normalization evaluation normalization evaluation nbe partial evaluation thought simple binding time analysis uses type information place binding time annotations 
language staging annotations rst class quite convenient 
implemented versions nbe metaml primitives functions built type safe interfaces user 
staged programming requires placing staging annotations program take advantage run time invariants 
example staged interpreter takes advantage run time invariant program interpreting constant 
generating specialized program rst stage executing program second stage 
behaves compiler 
annotations place irrelevant 
metaml annotations placed manually automatic staging mechanism nbe 
interface nbe prede ned polymorphic function reify 
type universally quanti ed type variable 
implemented follows metaml hindley milner type inference mechanism translates metaml programs polymorphic lambda calculus 
metaml implemented interpreter polymorphic lambda calculus 
run time reify applied system knows type bound 
implementation reify intensional analysis place binding time annotations 
see section details 
feature generally writing version function 
partially applying function arguments reifying result 
code produced incorporated manual staging process escape operator 
illustrate suppose function needed tests integers greater suppose known early stage known version function specialized generated early stage 
generate specialized version reify library functions hand annotation necessary part process 
fun member false member ys true member ys fun count count fun filter filter xs filter xs filter xs fun mod fun member filter count partially applying function type int bool obtained 
reifying obtain piece code 
example reify returns piece code fn true true false code incorporated larger second stage code 
dangers nbe nbe useful sophisticated process 
easy build values rei cation function terminate 
termination example guided strictly static value termination depended value rei cation terminate 
strength integrated approach manual annotations automatic annotation nbe user control nontermination behaviors explicitly 
extended example illustrate extended example providing polytypic functions 
polytypic function de ned just useable di erent datatypes 
generalized map functions structural equality examples 
metaml proceed follows 
de ne universal domain datatype 
rst order datatype single type parameter list mapped universal domain 
done datatype looses type 
encode generic function function values universal domain applicable datatypes 
applying generic function answer projected universal domain back typed domain 
strategy uses staging specialize generic function remove universal domain 
illustrate rst order datatypes single parameter 
call datatypes universal domain encoded variant 
parameters encode type parameter recursive component set datatypes datatype vint int string real string option string list fun fun strategy map arbitrary members type 
illustrate lists 
injection function list projection function list de ned follows list list val fn xs xs list list val fn xs xs functions unroll rollup list structure type exactly layer recursion 
pattern layer rolling higher order datatype polymorphic components datatype reg reg 
val list reg abstraction de ne generic rolling unrolling functions type values type reg exist 
unroll reg val unroll fn reg tov tov rollup reg val rollup fn reg tov de ne map function datatype datatype parameters map function takes function valued arguments transformer function parameters pf transformer recursions rf fun pf rf fun loop pf loop rf loop vint vint loop loop loop loop loop loop loop zs map fn loop zs loop machinery de ne generic map function datatypes build reg structures 
fun mp fun mapf rollup mapf unroll mapf local recursive helper function mapf works follows unroll push mapping function parameter positions mapf recursion positions rollup result 
sample function mp mp list fn val int list metaml supports extensions ml type system higher order type constructors local polymorphic functions arguments data constructors elegant cient :10.1.1.103.291:10.1.1.43.8213
rolling unrolling consumes lot resources allocation memory constructors datatype time spent walking data structure 
particular reg structure partially apply mp partially evaluate away ine ciencies 
unfortunately rei cation mp list terminate termination controlled list unknown 
combination manual staging automatic staging comes rescue 
write helper function combines unrolling pushing mapping function recursive call rolling recursion 
fun mapf rollup mapf unroll fun fn fun map reify map map stage recursive call reify helper function splice staged recursive call 
applied reg structure function construct specialized version map function 
example list val fn fun case strategy construct polytypic functions show equality fold crush 
implementing nbe staged language metaml binding time annotations rst class features possible express nbe source level program 
reasons 
hindley milner typed language compute types manner nbe 
second program typed typing rules metaml 
wehave implemented versions nbe underneath type checker primitives functions built type safe interfaces user 
nbe expressed mutually recursive functions reify reflect :10.1.1.103.291
give continuation passing style versions reify reflect stage programs 
allows implementation control operators shift reset 
introduce datatype thought types reify reflect functions control guided typed arguments 
function reify type 
operation described follows value typ value type represented typ produce piece code representing apply code code continuation produce answer piece code 
continuation identity function behaves reify function :10.1.1.103.291
function reflect type 
purpose construct body lambda expression constructed function clause reify 
value typ representing type domain lambda constructed piece code variable lambda type represented typ produce piece code representing body lambda 
combining things 
code valued argument second code obtained applying value code continuation job reify construct expanded value shape encoded valued argument typ apply continuation obtain second piece code 
generalized expansion purpose generalized expansion re ect structure value type explicit re ect continuation needs value shape succeed 
note continuation applied explicit expression shape corresponding type 
illustrate expansion table type expansion code fn case case left left right right function reflect implements expansion handling staging annotations 
note function type generalized expansion simply eta expansion 
things note note reify analysis argument context provided analysis argument typ knows type 
reify uses body di erent types 
reify typed 
note lift operator parameterized type lift typ aswell maintain non analysis invariant 
doing analysis important places restrictions implementation 
particular nbe implemented compiled language ml :10.1.1.103.291
limitations experience reify reflect de ned values derived closed terms base types int string example appear covariant positions type represented typ 
covariant positions primitive lift operator 
conjecture formalize parametricity argument logical relations 
currently working 
datatype alpha arrow prod sum base reify fun reify typ case typ alpha base lift typ arrow fn reflect fn reify id prod case reify fn reify fn sum case left reify fn left right reify fn right reflect reflect typ case typ alpha base error base type contravariant position arrow fn run reify fn arg reflect arg fn prod case reflect fn reflect fn sum case left reflect fn left right reflect fn right continuation passing style reify re ect stage programs 
primitive functions simply coercion functions implemented identity 
base types contravariant positions problematic 
consider ml function fn fn type int int 
hard reify value doing intensional analysis term itwas derived 
argue problem term stems pattern matching constants requires equality term isn really closed 
consider function fn fn true 
function type int int int 
note second occurrence int contravariant position term 
stepping evaluation reify reflect problem arises attempts lift avalue type int integer piece code representing application 
xed allowing lift analyze argument playing role identity passed piece code 
allows stronger system signi cantly restricts implementation requiring tagging values test piece code 
metaml implemented ml type tags values 
implemented strategies 
second strategy strengthened handle primitive operators open terms considerably complicated 
olivier danvy :10.1.1.103.291
type directed partial evaluation 
conference record popl rd acm sigplan sigact symposium principles programming languages pages st petersburg beach florida january 
olivier danvy andrzej filinski 
abstracting control 
lisp pages nice france june 
olivier danvy jens palsberg 
essence eta expansion partial evaluation 
lisp symbolic computation 
andrzej filinski 
representing monads 
acm symposium principles programming languages 
mark jones 
system constructor classes overloading implicit higher order polymorphism 
journal functional programming january 
martel tim sheard 
multi stage programming metaml 
technical report ogi portland september 
martin odersky konstantin laufer 
putting type annotations 
proc 
rd acm symposium principles programming languages pages january 
tim sheard 
type directed line partial evaluator polymorphic language 

walid taha tim sheard 
multi stage programming explicit annotations 
proceedings acm sigplan symposium partial evaluation semantic program manipulations pepm amsterdam pages 
acm 
