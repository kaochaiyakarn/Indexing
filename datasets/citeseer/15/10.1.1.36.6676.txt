computing edit distance unrooted ordered trees philip klein department computer science brown university 
ordered tree tree node incident edges cyclically ordered think tree embedded plane 
ordered trees 
edit distance minimum cost sequence operations contract edge edge modify label edge needed transform give log algorithm compute edit distance ordered trees 
tree said ordered node assigned cyclic ordering incident edges 
assignment cyclic orderings constituted combinatorial planar embedding tree called rotation system see 
application areas involve comparison planar embedded trees 
examples biochemistry comparing secondary structures di erent rna molecules computer vision comparing trees represent di erent shapes 
way comparing trees edit distance minimum cost transform tree elementary operations 
edit distance trees computed dynamic programming 
provides faster dynamic programming algorithm previously known 
ordered trees 
assume edges labeled node labels handled similarly 
kinds elementary operations allowed label modi cation edge contraction 
assume subroutines tables provided 
rst subroutine labels outputs cost changing label 
second label outputs cost contracting edge label 
assume costs nonnegative 
algorithmic goal nd minimum cost set operations perform turn tree 
left gives example 
stating time bounds algorithms assume cost subroutines take constant time 
familiar edit distance problem computing string edit distance 
edit distance strings minimum cost set symbol modi cations required turn string 
research supported nsf ccr tree tree fig 

diagram left shows comparison planar embedded trees transformed tree follows 
contract edges contract edge change labels top right shown rooted tree bold corresponding euler string indicated arrows 
bottom right small trees shown labeled 
euler tour left tree aa bcc second edit distance trees simple paths equivalent string edit distance problem 
simple ab time algorithm compute distance length string length string 
worst case time bound 
modi cation string edit distance problem cyclic string problem 
problem strings considered cyclic algorithm determine best alignment beginnings strings 
arbitrarily rst string try possibilities second string computes ordinary edit distance 
brute force approach reduces cyclic edit distance instance ordinary edit distance instances yields time algorithm 
algorithm due maes takes log time 
problem rooted ordered tree edit distance previously considered 
problem arises settings parse trees need compared natural language processing image understanding 
problem input consists rooted trees node children ordered left right 
fastest previously known algorithm due zhang shasha runs time jaj jbj lr lr jt denotes size tree lr quantity de ne called collapsed depth 
zhang shasha bound collapsed depth tree number leaves tg worst case collapsed depth tree jt 
worst case algorithm runs time sum sizes trees 
unrooted ordered trees rooted ordered trees cyclic strings ordinary strings possible similar brute force reduction edit distance unrooted trees edit distance rooted trees 
brute force reduction yield algorithm worst case required time 
give algorithm runs log time 
solves rooted unrooted tree edit distance problems 
improves worst case time rooted trees nearly factor depending input trees zhang shasha algorithm may faster 
beats naive time algorithm unrooted case nearly factor 
particular trees algorithm runs time jaj jbj log jbj 
algorithm uses essentially approach algorithm zhang shasha 
de ne variant collapsed depth logarithmic generalize algorithm variant 
loosely speaking complexity analyzing reduced jbj lr jbj log jbj 
price pay complexity analyzing goes jaj bound consider possible roots solve unrooted problem bounds 
notation rooted tree root denoted root 
node subtree consisting descendents called rooted subtree denoted 
special case arises tree descending path rst node taken root tree case denotes subpath edge denote subtree rooted whichever endpoint farther root note occur 
ordered rooted tree replace edge fx yg directed arcs called 
depth rst search traversal visiting node children order de nes euler tour dart appears exactly 
see top right 
interpret tour string euler string denote string 
rst dart string goes root leftmost child root 
dart directed arc corresponding edge denoted stands mate called mate substring string de ned consecutive subsequence string 
reverse string denoted contains elements reverse order 
dart rst symbol denote substring obtained deleting denote empty string log denote log euler strings parenthesized strings representing trees take goal calculating edit distance rooted trees 
purpose notationally conceptually useful represent trees euler strings 
interpret edit distance problem trees edit distance problem strings 
string edit distance problem ordinary dart occurring tree euler string mate pairing ects edit distance calculation 
think pair pair parentheses 
euler string tree nesting parentheses 
comparing euler string respect 
contracting edge tree corresponds deleting pair paired parentheses corresponding string 
matching edge tree edge corresponds matching pairs parentheses matching inside pair inside pair 
see 
comparing substrings euler strings subproblems arising comparing euler strings involve comparing substrings strings 
purpose comparing substring ignore dart mate occur interested measuring distance substrings euler strings trees operations allowed delete pair parentheses strings contracting corresponding edge match pair parentheses string pair match edge tree edge 
subsection give recurrence relation edit distance dist substrings 
recurrence relation implies dynamic program shapiro compares trees comparing euler strings 
treat paired special way compares strings ordinary string edit distance algorithm 
compute true tree edit distance 

fig 

matching edge tree edge corresponding matching pair parentheses string pair 
note match edge edge match interior pair parentheses corresponding edge interior pair corresponding fact simpli ed ecient version algorithm zhang shasha rst give auxiliary de nition match form dist dist cost change cost term represents cost changing label edge tree corresponding label edge tree corresponding 
give recurrence relation 
base case dist recursive part dist dist cost delete dart dist cost delete dart cost deletion zero dart mate appear string 
notation denote string obtained deleting dart 
note notation di erent zhang shasha 
described algorithm terms disconnected forests induced subsequences nodes ordered preorder substrings euler strings 
example recurrence applied consider trees bottom right 
applying recurrence relation euler strings trees obtain dist aa bcc aa bcc cost delete dist aa bcc cost delete match aa bcc invoking de nition match term equal dist aa dist cc yy cost change bb xx 
correctness recurrence relation observation turn fact deletions label modi cations change order remaining symbols string 
proposition zhang shasha 
consider cheapest set operations transform string dart deleted dart deleted correspond dart value dist minimum expressions depends distance smaller substrings 
compute distance euler strings dynamic program subproblem compute dist pair substrings 
subproblems solved increasing order jsj jtj 
number pairs substrings jaj jbj value dist calculated constant time 
time required jaj jbj 
obtaining faster dynamic program zhang shasha take advantage fact substring pairs need considered obtain algorithm depending input trees faster naive algorithm 
worst case algorithm takes time naive algorithm 
modify ideas obtain algorithm takes log time 
section new ingredients algorithm employs 
section discuss algorithm relates zhang shasha 
start presenting ingredients sequence substrings tree euler string decomposition tree paths 
show combine ingredients obtain algorithm 
special substrings tree path starting root descending leaf 
shall de ne sequence substrings called special substrings 
rst special substring simply subsequent substring obtained deleting rst dart previous substring 
convenient de ne sequence substrings de ning sequence deleted call di erence sequence 
recursive procedure de nes sequence 
denote concatenation sequences 
di root 
children return empty sequence child left denote pre 
right denote sux 
return left right di je denote di erence sequence 
example tree shown right procedure di erence sequence aa bc ee ff gg de ne special substrings je respect substring obtained deleting lemma 
sequence special substrings respect properties 

substring substring shorter dart 
suppose dart 

node string special strings 
de nition 
nonempty special substring de ne successor de ne di erence dart successor obtained deleting di erence dart note di erence dart leftmost rightmost dart occuring decomposition rooted tree paths idea employment tree decomposition heavy paths 
decomposition dynamic tree data structure 
rooted tree de ne weight node size subtree rooted nonleaf node heavy denote child having greatest weight breaking ties arbitrarily 
sequence nodes heavy heavy heavy de nes descending path called heavy path denote path 
subtrees hanging size jt heavy path enter subtree 
recursively de ne tree decomposition include path union tree decompositions subtrees hanging 
fig 

left picture tree heavy path indicated bold 
right depicted decomposition tree heavy paths associated special subtrees 
dots indicate trivial node heavy paths 
descending paths comprising tree decomposition rst nodes paths 
example root de ne collapsed depth node number ancestors members fr lemma sleator tarjan 
node collapsed depth log jt subtree rooted call special subtree 
denote heavy path starts special substrings special subtrees tree equipped decomposition heavy paths de ne relevant substrings union special subtrees special substrings respect 
lemma 
number relevant substrings jt log jt proof 
proof consists combining slight modi cation lemma zhang shasha lemma 
analogue zhang shasha lemma states special subtree jt collapsed depth prove equality note node number special subtrees containing collapsed depth contributes amount left right sides 
special subtree number special substrings plus number jt 
total number relevant substrings sum special subtrees jt combining lemma bound sum jt log jt lemma 
node euler string subtree rooted relevant substring 
proof 
node occurs heavy path special subtree part lemma special substring relevant substring unrooted ordered trees unrooted ordered tree denote euler tour interpreted cyclic string 
dart obtain non cyclic string designating starting dart string 
string obtained euler string rooted versions conversely rooted version obtained way 
denote set euler strings 
note jr jt 
new dynamic program nally give new algorithm computing edit distance trees essentially algorithm rooted case unrooted case 
unrooted root arbitrarily 
find heavy path decomposition identify relevant substrings special subtree dynamic programming calculate dist substring cyclic string relevant substring rooted distance output dist euler string rooted tree unrooted distance output min dist 
note min euler strings rooted versions unrooted edit distance see algorithm arbitrarily roots compares rooted edit distance rooted version correctness approach intuitively evident formally proved consider analysis 
dominant step dynamic programming 
number substrings jaj 
lemma number relevant substrings jbj log jbj 
show value dist calculated constant time easier values dist 
time space required jaj jbj log jbj log 
show answer subproblem computed constant time answers easier subproblems 
note recurrence relation section correctness observation relies deletion rightmost substrings 
invoke symmetric version observation justify alternative recurrence relation deletion leftmost 
ability delete left gives freedom exploit follows 
goal compute dist easier values dist js jt smaller jsj jtj 
need ensure value substring relevant substring relevant successor relevant substring successor substring obtained deleting dart substring obtained deleting rst dart give formula computing dist 
computed minimum terms 
dist delete match proceed de ne terms 
delete empty string return di erence dart occurs return dist cost delete return dist delete empty string return 
empty string rightmost dart di erence dart rightmost dart rightmost dart leftmost dart occurs return dist cost delete return dist match empty return 
di erence dart form write form write return dist dist cost match correctness formula follows observation symmetric version 
remains verify easier distance subproblem dist appearing formula relevant substring 
delete substring di erence dart successor relevant 
match check substrings euler string rooted subtree relevant lemma 
part lemma show relevant 
assume form case symmetric 
say th di erence dart st special substring part th special substring th di erence dart 
concluding remarks algorithm zhang shasha algorithm solves edit distance problem rooted unrooted ordered trees 
algorithm better worse case bound previous algorithm rooted trees zhang shasha especially suitable unrooted case zhang shasha algorithm insucient 
rooted case zhang shasha algorithm may run faster depending structure trees compared 
reason may useful research interpret algorithm framework combine advantages algorithms 
algorithm zhang shasha analogue decomposition heavy paths called decomposition leftmost paths 
leftmost path descends leftmost children 
disadvantage decomposition guarantee small collapsed depth collapsed depth 
fig 

decomposition tree leftmost paths depicted 
dots indicate trivial node leftmost paths 
leftmost decomposition considerable bene 
de ne special substrings subtree pre xes euler string subtree 
successor special substring obtained deleting symbol 
advantage rightmost deletes needed algorithm 
reason decomposition idea applied trees compared just number subproblems jaj lr jbj lr jaj jbj lr 
verify analogue lemma holds set special substrings 
part holds trivially 
part easy verify 
part hold leftmost decomposition just useful hold 
say substrings equivalent removal unmatched strings equal 
note ignore computing edit distance edit distance equivalent substrings zero 
notion equivalence gives variant part node leftmost path subtree special substring pre equivalent 
related problems trees zhang shasha point dynamic program adapted solve similar problems give examples possible generalizations approximate string matching trees problems involve nding modi ed version pattern tree text tree 
applications comparison unordered trees sense 
unfortunately computing edit distance unordered trees np complete shown zhang statman shasha 
zhang algorithm computing kind constrained edit distance unordered trees 
consider generalizing edit distance ordered trees edit distance planar graphs 
problem nding hamiltonian path planar graph reduced nding edit distance planar graphs dual graph 
perceptive remarks skepticism 
great help research 

gross tucker topological graph theory wiley 

maes cyclic string string correction problem information processing letters pp 


shapiro algorithm comparing multiple rna secondary structures computer applications biosciences pp 


sleator tarjan data structure dynamic trees journal computer system sciences pp 



tai tree tree correction problem journal association computing machinery pp 


personal communication 

wagner fischer string string correction problem journal association computing machinery pp 



wang zhang jeong shasha system approximate tree matching ieee transactions knowledge data engineering pp 


zhang constrained edit distance unordered labeled trees algorithmica pp 


zhang shasha simple fast algorithms editing distance trees related problems siam journal computing pp 


zhang shasha approximate tree pattern matching chapter pattern matching algorithms oxford university press 
zhang statman shasha editing distance unordered labeled trees information processing letters pp 

