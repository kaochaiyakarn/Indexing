game theoretic analysis call value computation kohei honda nobuko yoshida 
general semantic universe call value computation elements game semantics validate appropriateness semantic universe full abstraction result call value pcf generic typed programming language call value evaluation 
key idea consider distinction call name call value structure information flow determines basic form games 
way call name computation call value computation arise independent instances sequential functional computation distinct algebraic structures 
elucidate type structures universe standard categorical framework developed context domain theory 
mutual relationship category games corresponding call name universe clarified 

call value mode calling procedures widely imperative functional programming languages evaluates arguments applying concerned procedure 
semantics higher order computation call value evaluation widely studied researchers context domain theory cf 
clear semantic framework needed capture call value computation basic difference call name computation see basic topic 
difference semantics call value call name context may roughly captured difference classes involved functions call name take continuous functions pointed cpos call value takes strict continuous functions 
equivalently presentable partial continuous functions possibly cpos 
distinction leads basic algebraic difference induced categorical universe compared call name universe studied 
offers semantic analysis call value computation different angle elements game semantics 
game semantics computation modelled specific classes interacting processes called strategies suitable notion composition form categorical universe appropriate type structures 
may compare approach bohm trees sequential algorithms cf 
computation modelled set theoretic functions certain kind objects internal structures reflect computational behaviour concerned class computation 
game semantics origin logics semantics analysis programming languages especially characterising notion sequentiality cf 
concentrating specific forms interaction obey basic constraints approach possible extract desired classes interacting processes high level abstraction offering suitable semantic universes varied calculi programming languages including imperative features cf 

forms interaction universes inherently call name clear call value computation captured setting game semantics spite equally significant status mode computation 
lfcs department computer science university edinburgh king buildings mayfield road edinburgh eh jz uk 
mail kohei dcs ed ac uk 
computer science school cognitive computing sciences university sussex brighton bn qh 
mail nobuko cogs susx ac uk 
cbv cbn nat nat oq pq oa pa oa pa nat nat shown general semantic universe call value higherorder computation simply constructed employing basic elements foregoing game semantics key difference structures interaction 
specifically find distinction call name call value game semantics arises form flow information 
illustrate point simple examples 
depicts function doubles natural number modelled foregoing game semantics opponent player answer question 
computation starts opponent asks question right requesting answer player function asks argument left number received returns right answer initial question double received number 
function modelled call value game 
time flow starts left component carries value function just returns answer right 
may notice means interaction start answer regarded anomaly preceding convention game semantics 
turns parameter games initiates game answers questions orthogonal basic elements game semantics leading simple construction categorical universe representative functional calculi call byvalue evaluation faithfully interpreted 
independence parameter suggests may obtain suitable universe model say imperative call value computation simply altering parameters cf 

note possibility model data driven computation contrast demand driven computation games discussed early game semantics abramsky jagadeesan 
main technical contribution validation semantic exactness induced universe captures call value sequential higher order computation full abstraction result call value version pcf paradigmatic functional calculus 
interpretation done intensional category games strategies compact elements appropriate types definable language transferred extensional quotient obtain fully model done game semantics 
result kind context easily extendible languages shall indicate section 
clarify relationship universe games corresponding call name universe showing faithfully embeddable 
results indicate preceding results call name pcf basic notions calling procedures higher order computation representable game semantic framework exact way arise independent mutually related semantic universes equal status parallels findings domain theoretic universes cf 

notable clarify universe games call value computation assumes basic type structures arisen categorical analysis independent concurrent similar result riecke sandholm game semantics 
see section discussions 
domain theoretic universes call value partial computation cf strong intensional flavour 
particular intensional category extensional quotient isomorphic kleisli category strong monad respective subcategory total maps notions pairing exponentiation arise reminds pcpo category possibly cpos partial continuous functions 
suggest notion call value computation may delineated apart standard domain theoretic constructions cf 

structure games shall conservative extension constructions hyland ong 
restricted class types construction essentially equivalent games 
particular category games arises full subcategory call name counterpart universe games discussed section 
having call value call name leads general simple framework games strategies call value call name universes arise simply restricting concerned classes types 
hope related constructions offer useful tool study area 
full version technical summary :10.1.1.37.813
earlier full version substantially revises presentation 
full proofs extended discussions provided 
rest section introduces basic notion games strategies 
section studies algebraic structures category games 
section briefly outlines basic results extensional quotient 
section gives interpretation call value pcf universes establishing inequational full abstraction 
section discusses mutual embeddings call name call value universes 
section gives discussions point issues 
main sections easier read proofs relegated appendices 
particular include proofs basic properties operational structures call value hyland ong games 
appendices include brief calculus representation call value strategies 

deep go marcelo fiore suggestions concerning pertinent categorical structures 
anonymous referees beneficial suggestions 
grateful samson abramsky vincent danos guy mccusker pasquale malacaria paul jon riecke comments discussions raja hospitality bombay 

games strategies hyland ong introduced notion arenas innocent strategies full abstraction result pcf 
strategies class interacting processes representing interactive aspects programs behaviours arenas give basic notion types processes 
notions represent interactive behaviour call name sequential higher order functions 
give corresponding notions representing call value computation 
readability proofs section appendix start generalisation original notion arenas restricted arenas call value 
construction related notion sorting calculus discussed 
presentation including due marcelo fiore 
forest mean directed graph sigma 
sigma set nodes 
relation sigma representing directed edges connected component tree 
root forest root tree forest 

definition 
pre arenas pre arena forest sigma 
nodes called sorts ranged labelling functions sigma fo pg sigma fq ag satisfies 
read justifies opponent justifies player player justifies opponent question may justify answer question answer justifies question 
range pre arenas 
sort pre arena initial root underlying forest 
init denotes set initial sorts sort non initial pre arena element sort said non initial 
ii arenas cbv arena simply arena pre arena init 
iii operations pre arenas pre arenas 
denotes pre arena labelling resp iff resp 
denotes pre arena sorts disjoint union edges labelling functions inherited extends arbitrary disjoint union written 
conventions 
fix 
sort labelled resp 
question resp 
answer 
similarly labelled resp 
opponent resp 
player 
may combine designations saying player question player answer opponent question opponent answer abbreviated question answer question answer 
correspondingly combined labels pq pa oq oa 
answer initial called signal 


notice pre arenas general allow initial sorts answers questions cf 

inevitable consequence justification structure answers justify questions 
notable notion arises necessity having sum types call name games discussed mccusker 
ii terminology calculus pre arena corresponds specific kind sorting particular input output sorting studied pierce sangiorgi 
concretely sort pre arena labelled standing opponent corresponds sort sense calculus input capability sort labelled standing player corresponds output capability 
term sorting called pre arena :10.1.1.37.813
terminology may better emphasise specific notion form sorting games employ accordingly call arenas types :10.1.1.37.813
observe difference call name call value interactive behaviours sorting originally discussed starting point 
note viewpoint sorting calculus may graphs forests conference version affect resulting operational consequence categorical structure :10.1.1.37.813
preferred forests sake simplicity presentation 
iii conference version general presentation sort set element 
means kinds actions sort useful concisely notion value passing ground values 
particular interpret pcfv arenas trees resulting categories equivalent 
regard sorts elements simplicity presentation 

examples 
empty pre arena arena definition 
pre arena distinguished unique pa labelled sort arena 
nat set natural numbers sorts 
similarly bool ftrue falseg 
way set induces arena called ground arena 
ii nat pre arena sort nat labelled oa 
nat nat sorting copies labelled oa labelled pa iii define nat nat arena sorts disjoint union distinguished sort labelled pa labelled oq justified theta labelled pa hi ji theta justified 
sequence elements set considered partial function defined finite initial segment undefined rest 
call associated initial segment indices sequence 
example sequence abc indices 
denotes empty sequence 
notion represents essentially speaking history interactions processes called player called opponent 

definition 
action sequence arenas 
action sequence sequence sorts say gamma justification relation indices saying justifies satisfying fi 
action unique initial component unjustified initial component answer question answered gamma opponent resp 
player player resp 
opponent opponent player strictly alternate 
range action sequences 
denotes 
notation 
write sequence underlying simply associated justification relation jsj length resp 
denotes projection underlying sequence resp 
second component inherited may action sequence 
simply write def gamma leaving associated implicit 
spite prefix equality considered incorporating justification relation 
ii index action sequence called action 
action say may denoted associated element sequence say confusion arises 
action action sequence gamma opponent player question answer question answer 
action opponent resp 
player say action resp 
action 
action action sequence free justified 
action def gamma resp 
resp 
second component sum written resp 

action sequences constrained conditions 
condition bracketing specifies proper nesting call return sequences functional computation 
second condition visibility says action done respect context called view specific subsequence preceding action sequence 

definition 
bracketing condition say action answers action answer 
action sequence bracketed asked question answered action sequence gamma answered fi fi question answered fi 
ii views visibility def gamma action sequence 
define pv pv pv pv pv sx fig free action pv pv pv fi jg action pv pv pv fi action ov ov ov ov ov sx ig free action ov ov ov fi jg action ov ov ov fi action 
satisfies visibility condition prefix free pv resp 
ov action resp 
action 
case say action visible view 
assuming pv fi gamma resp 
ov fi gamma fi set psq resp 
sequence gamma relation index iff psq resp 
called view resp 
view deltaq deltay called view functions 
iii legal position action sequence legal bracketed satisfies visibility condition 
legal action sequence called legal position 
clearly prefix legal action sequence legal 
show view view legal action sequence legal see appendix 
shall call legal action sequence view resp 
view view resp 
view 
notable property legal action sequences follows frequently 

proposition 
switching condition gamma action sequence necessarily action 
proof see appendix 
main definition section follows 

definition proposition 
strategy arenas 
innocent strategy simply strategy prefix closed set oe legal action sequences determinacy action sx sy oe implies sx sy 
contingency completeness oe empty ends action def sx legal oe 
innocence oe action ps ps ps yq oe ps xq ps yq particular 
oe range strategies 
write oe oe strategy strategies oe write oe oe ae strategy oe innocent function oe denoted oe partial function set views oe iff oe odd length prefix jsj js gamma 
oe oe ae 
ii set innocent strategies ordered algebraic cpo di domain 
proof clauses ii just hyland ong establish ii 
completeness list proof appendix 
note formulated arena define strategies arenas done case cbn games 
cbv games arena shall define definition adds additional move originally result composition strategies straightforward 
discussions see discussions definition 
simple examples strategies follow 

examples 
undefined arenas strategy innocent function totally undefined ordering write strategy ii ground value ground arena 
set strategies bijection set nodes responding unique initial signal selecting specific node action possible 
iii order function set strategies nat nat precisely correspond set partial functions initial action oe nat nat react returns natural number action 
iv higher order function strategy oe nat nat nat corresponding behaviour open call value pcf term succ behaviour receiving signal nat nat gives function oe asks result applying function receiving answer returns successor domain 
identity strategy arbitrary arena 
identity denoted id strategy write denote second components pre arena defined inductively follows id id length sx legal sx id sx id odd length sxy id sxy sxy notice value projected differently 
check inductively id length implies condition redundant 
means id reacts action copying component including justification 
behaviour called copy cat 
clearly behaviour contingently complete deterministic 
innocence notice immediately implies player acts action dual action view justification action action immediately preceding action justifies action relative position action view required 
shall show soon id function identity 
strategies denote certain kind deterministic processes precisely representable name passing synchronisation trees see appendix presentation useful describing reasoning strategies full abstraction result originally obtained setting 
inductive definition composition strategies lemma suggested presentation coincides hand various presentations composition strategies hyland ong games hand standard expansion law name passing processes 

lemma 
zipper lemma legal action sequences composable written suppose composable 
actions resp 
ends action resp 
resp 
ends action proof see appendix 

definition 
composition oe define oe composition oe order oe def fs oe define legal action sequence underlying sequence inductively def def def delta def delta justification relation satisfies 
clauses ambiguous lemma 
resulting sequence action sequence particular strictly alternating switching condition 

example 
identity example consider composition id oe id identity strategy example show result coincides oe 
note legal sequence unique length id easy induction jsj 
suppose oe take id show induction length base case just take required 
induction assume induction hypothesis length id write move interacts projected sort help understanding 

simply take def get def delta delta justification component change result coincides 
action 
take def id decides uniquely 
calculate def delta delta delta 
notice action id oe interact 
justification required 
action 
take def id similar calculation omit know required 
know id oe oe oe 
direction simply note id composable oe length sequence prefix resulting sequences generated induction due prefix closure cf 
proposition concluding proof 

proposition 
oe oe innocent strategy 
ii associative left right identity 
iii bi continuous respect ordering proof see appendix 
category 

definition proposition 
category cbv data ffl objects cbv arenas 
ffl arrows strategies composed ordered cbv enriched cpo category possibly cpos continuous functions 
respect induced ordering homset owns element respect composition left strict oe oe 
initial weakly terminal cbv 
proof structure cpo enrichment means order homset gives cpo composition continuous know proposition 
strictness notice iff fx initial signal cg oe 
initial contain initial signal means determine weakly terminal arrow exists note means object weakly terminal 
study universe detail section 

intensional universe type structures semantic universe offer basic articulation algebraic properties needed example interpreting various programming languages 
section clarifies basic type structure cbv light distinction total partial maps 
introduce notion totality cf 


definition 
oe total oe implies 
write oe oe total 
immediately identities total oe total oe oe total oe total 
deduce isomorphisms total 
oe total oe oe oe total monotonicity composition oe oe 
couple different characterisations total maps 

proposition 
statements equivalent 
def oe total 
ii elm oe 
iii square oe bi weak pullback 
iv beh oe immediately emits signal initial signal 

characterisations elm relates definition standard notion totality noticing set total maps gives possibly cpo may regarded elements note non total map bottom map 
categorically natural 
beh basic behavioural characterisation 
notice notion arises equivalently set theoretic arrow theoretic behavioural forms 
prove proposition need notion 

definition lemma 
insensitive arrows say arrow insensitive factors insensitive iff oe oe alternatively insensitive iff 
proof write unique arrow set insensitive statement direction direct definition 
direction calculate oe def oe required 
second characterisation direction composing say factors 
direction suppose insensitive means written required 
notice behavioural level insensitivity means strategy domain 
typical example insensitive arrows 
prove proposition 
proof proposition 
prove chain implications def elm beh def establish equivalence 
def elm immediate 
elm beh suppose elm holds oe take immediately returns signal unique signal undefined 
case oe oe immediately returns signal initial signal behavioural characterisation holds 
beh suppose oe satisfies beh 
clearly oe bi commutes initial cbv 
suppose hc oe bi commutes 
show existence weak universal arrow equivalent insensitive 
insensitive find standard terminology arrow far 
know lemma oe shows take weak universal arrow 
direction definition 
show insensitive 
insensitive gives point signal oe immediately reacts implies oe insensitive insensitive done 
def suppose holds 
suppose oe insensitive apply arrow type say get oe oe total required 
identities isomorphisms gives basic examples total maps 

examples 
unique arrow type total definition 
just unique function empty set definition total 
just total map 
ii unique total map denoted reacts initial action unique answer 
switching condition cf 
proposition action possible 
iii strategy oe nat nat total underlying number theoretic function total 
similarly ground arenas 

definition 
cbv denotes category arenas total strategies 
relationship total maps usual called partial maps clarified notion lifting 
write 
arena adding sorts initial justifies justifying init rest see 
pa pa pa oq see set total arrows 
bijection set partial arrows order isomorphic 
mediated copy cat strategies dn 
obvious behaviours reacts initial action domain going added sorts 
dual action initial action top domain go copy cat behaviour non initial actions domain corresponding actions domain specified just identity strategies dn just dual 
familiar way induces adjoint situation associated monad 
basic facts cbv monad including mentioned bijection 
operations arenas 

definition 
operations arenas denote arenas 

discussed formally take add edge initial sort initial sort initial sort pa oq oa pa pa pa pa pa pa ii omega arena constructed component tree respective initial sorts result initial sorts respectively 
take fhx ig add edge hx initial sort resulting arena omega def 
iii arena constructed maximal tree form relabel initial sort opponent question add edge initial sort notice 
result denoted take add edge initial sort resulting arena depict formation omega tree single initial sort 
notice take dual replace label initial sort opponent question 
behavioural idea underlying construction player tells am initial sort receives question opponent interaction component answers initial sort possibly continuing interaction back necessary 
notice construction closely corresponds sorting strategies inhabit additional initial sort 
verify switching occurs player initial sort opponent definition 
indicates defined cbv strategies arena 
definition composition variant form strategies need take initial action need compose question answer non trivial manipulation strategies composition 
original structure information flow preserved adding additional action value contrast situation call name games cf 

simplicity composition definition may indicate naturalness formulation formally forms induce isomorphic category 

proposition 
cbv initial object finite products omega giving binary product cbv denote theta induces bi functor cpo enriches giving terminal object 
ii inclusion functor cbv cbv right adjoint 
unit ja unit ffl dn cpo enriches 
monad ht ja dn denoted tensorial strength st theta tb theta strength sense st ta theta theta 
iii kleisli category cbv isomorphic cbv 
representation oe 
kleisli category oe written oe inverse representation total map oe cbv oe dn denoted oe proof know initial terminal 
products projections copy cat omega acts receiving initial signal tuple initial signal extracts component part tuple dual action domain just copy cat domain domain 
omega behaves symmetric way 
describing pairing note basic fact legal sequences omega omega legal projection omega property opponent switches components 
see appendix proof 
notice means view signal omega total pairing hoe omega behaviour signal reacts domain combining reactions oe signal note totality essential view action essentially view reacts oe similarly reacts views action commutativity clear see appendix 
universality fact views behaviour strategy omega completely determined reacts component component past interactions 
equations ffi oe ffi uniquely determine ffi required 
construction pairing clearly continuous variables cpo enrichment follows 
ii oe define oe ta tb simply reacts initial signal ta going initial signal tb reacts question second sort tb doing answer second sort ta behaves precisely oe notice construction obviously continuous 
easily show adjointness 
total oe tb take oe def oe dn construction oe oe oe total universality holds oe dn oe dn equation construction done 
consider strength 
define st theta tb theta total strategy initial theta tb uniquely determined consecutive actions theta returns tb right component domain act twice copy cat component 
st ta theta theta dual 
satisfy defining equations evident uses process representation see 
iii classical result kleisli noticing identity objects 
observe kleisli triple ht delta proving ii 
note cbv cbv product denoted phi simply injections simple copy cats construction omega phi easily extended arbitrary products products 
proposition obtain 
definition proposition 
partial pairing oe oe left pairing hhoe oe ii omega right hhoe oe ii omega hhoe oe ii def hoe oe hhoe oe ii def hoe oe st ta st dn st tb st dn 
ii premonoidal tensor define omega omega omega deltab omega delta omega omega ii omega oe def hh oe omega def hh oe ii denote projections 
omega omega define functors cbv cpo enrich 
define oe oe omega oe omega omega ii oe omega omega oe omega 
iii partial exponential functor delta omega viewed going cbv cbv right adjoint delta cbv cbv cpo enriches 
equivalently exists arrow ev omega oe omega unique total arrow oe satisfying oe omega id ev oe continuous operator homset 
proof ii corollary 
cpo enrichment comes pairing cbv iii ev omega receives initial signal domain essentially initial sort asks dual action starts copy cat rest rest opponent answers domain dual action domain starts copy cat 
oe theta oe behaviour initial signal answers immediately unique player signal 
opponent asks initial sort possibility switching condition gives oe data precisely oe gotten receives initial signal 
oe act precisely oe domain domain note 
defining equations easily established list calculation process representation appendix 
universality follows view second action domain kind total arrow essentially omega turn legal action sequence switches player turn just proposition 
note iii means homset cbv represented cbv maps cbv correspond hom order 
give basic properties partial pairings simply call pairings 
particular shows strongly intensional character cbv 

proposition 
partial pairings exist oe oe hhoe oe ii hhoe oe ii 
ii omega omega cbv gives bifunctor oe appropriate types oe omega oe omega oe omega oe 
iii right left pairings tensors right left strict respectively preserve reflect totality variables 
right left pairings coincide total diagonal arrows identical particular 
right left tensors coincide iff total bottoms 
write hhoe oe ii resp 
oe omega oe left right pairings resp 
tensors coincide 
iv hhoe oe ii oe oe total similarly hhoe oe ii oe oe total 
hhoe oe ii hh oe oe ii total 
hhoe oe ii omega hhoe oe ii total similarly hhoe oe ii omega hhoe oe ii total 
vi oe omega hh oe ii 
vii hhp oe oe ii ev hhid oe ii oe oe omega oe omega 
useful intuitive understanding behaviour partial pairings embarking proof 
take say hhoe ii omega right pairing just dual 
initial signal behaviour oe assuming initial signal oe signal domain 
point note action action behaviour starting just initial signal action signal domain 
pair actions oe combine signal omega rest strategy behaves just disjoint union rest respective strategies 
noted moggi hhoe oe ii hhoe oe ii reflect order evaluation 
shows algebraic situation cbv described quite analogous pcpo detailed study related universes see strong intensional character algebraic structures implicit cpo come explicitly 
proof take example oe nat nat nat example iv oe nat nat nat behaviour oe gives say domain 
obviously hhoe oe ii hhoe oe ii ii follows corollary 
iii statements immediate definition 
example hh def hh 
oe ii st tb st dn initial action domain immediate signal ta theta ta st tb going actions domain asks left component ta domain action unique signal ta 
notice terms behavioural description rephrase reasoning simply initial signal behaviour hh start arrow 
similarly statements iv obvious hhoe oe ii oe total behaviour hhoe oe ii acts domain oe reacts domain interacts left component copy cat behaviour oe total hhoe oe ii omega behaves domain oe oe reaching domain eventually hhoe oe ii vi calculate definition tensor oe omega oe def hh oe ii id omega oe hh oe oe ii required 
vii derived hhp oe oe ii ev hhid oe ii oe omega id ev hhid oe ii oe equation 
discuss recursion arises setting 

definition 
pointed arenas pointed unique initial sort equivalently homset cbv pointed cpo 
write dn ta unique total map dn id 
ii call value fixed point combinator cf pointed 
fix strategy behaviour unique initial signal domain reacts asking initial sort domain opponent asks question subsequent behaviour opponent answers initial sort domain visits initial sort domain say action say domain visits initial sort domain opponent answers domain say copies domain say justified continuing copy cat domain actions justified domain actions justified way action codomain immediately justified initial action done strategy visits initial action proceeds copy cat 
hand opponent asks domain action say immediately justified visits initial sort domain waits action say initial sort domain copy cat actions justified justified similarly action instances 
iii recursion pointed oe theta define recursion oe denoted rec oe rec oe def oe fix 
basic example pointed arena higher order arena notable pointed arenas precisely objects category eilenberg moore algebra monad dn arrow type 
ii behaviour fix call value fixed point combinator complex ones copy cat 
essential idea new dialogue opened action second level sort positive types domain domain view clearing moves done initial sorts domain copy cat starts copying action action immediately justified second view clearing move 
form essential legality actions realising structure nested feedback done domain domain recursion described proof proposition 
note fix innocent views copy cat behaviours independent reasoning identity strategy cf 
example 
observe existence fixed point combinator derived recursive types cbv cf recursion underlying total category :10.1.1.37.813
basic properties recursion follow 

proposition 
homset form hom omega pointed rec delta continuous operator 
letting pointed oe omega rec omega id oe rec oe 
ii rec oe hhid rec oe ii oe rec oe hhid rec oe ii oe oe total 
iii define ae ae ae hh ae dn ii oe 
fae increasing chain tae rec oe 
proof see appendix 
give diagrammatic representation rec oe equations figures 
fix id id section studies extensional universe derived cbv 

extensional universe cbv represents notion execution call value computation 
interpretation programming languages abstraction level standard semantic universe category domains may need universe construct cbv simple quotient construction 
universe useful understanding behaviour arrows cbv way 
define ordering cf 


definition 
standard ordering define homset hom oe oe def oe oe 
proposition 
preorder homset composition monotone respect 
ii oe insensitive oe oe oe oe total oe oe implies oe total 
letting oe iff oe 
iii oe oe iff oe oe 
proof immediate 
ii statement oe insensitive oe insensitive arrows total case statement vacuous 
second statement immediate id sides definition 
statement direction immediate definition 
direction suppose oe 
oe immediately oe required 
iii right hand side hold oe take foe cg ranges initial actions oe just unique signal initial action ceases react 
clearly oe oe initial action assumption oe oe immediately shows behavioural characterisation totality proposition oe required 

ii converse statement hold particular bottom map cbv see may include non insensitive strategies 
explication situation see appendix 
note property iii general phenomenon see 

definition proposition 
cbv data ffl objects cbv 
ffl arrows equivalence classes arrows cbv denoted ordered induced partial order denote cbv enriched poset category posets monotone maps homset having bottom denoted strict composition sides 

proposition 
zero object cbv terminal initial 
iff iff ae ae iff ae ae 
ii say total written implies equivalently square bi pullback 
total iff implies iff oe oe iff oe oe 
iii iff 
iv iff 
ff chain cbv fae cbv ae ff exists ae proof initial cbv 
showing terminal observe second part immediate proposition ii says insensitive arrows extensionally elements notice statements just different characterisations insensitive arrows cbv cf 
arrows cbv definition insensitive know terminal 
ii equivalence definitions 
implies statement definition 
suppose statement holds implies equivalently oe oe implies 
implies know oe 
suppose oe implies oe 
suppose oe show 
statement vacuous suppose 
proposition ii statement 
oe case know required 
statements equivalent proposition ii second statement 
iii direction holds monotonicity composition 
direction implies 
required 
iv contrapositive iff immediate iii rephrasing 
clearly ae ae ae ae ii properties total maps cbv carry corresponding arrows cbv 
iii iv show extensional nature arrows cbv write cbv subcategory total maps extensional universe 
gives corresponds proposition setting 

proposition 
cbv pointed initial object finite products give bifunctor poset enriches inheriting cbv 
ii inclusion functor cbv cbv right adjoint inheriting constructions write poset enriches 
corresponding monad denoted strengths commutative morphisms 
kleisli category cbv isomorphic cbv proof contrapositive proposition iii 
initial terminal products come cbv 
show monotone 
oe oe oe suppose oe oe proposition set 
fix theta define oe theta id theta oe immediately oe oe hoe oe oe hoe oe implies hoe oe monotonicity required 
notice trivial reasoning pairing order reflecting 
ii adjointness ja ta tb total 
ae total ae ae tb implies ae ae dn ae dn ae write ae ae defined 
definition suppose ae putting ffl dn tb ffl ae required 
rest st st give strength come cbv 
commutativity regarded arrows cbv singletons holds differ order visiting initial sorts component oa ta pa component oq tb pa ta theta tb 
consecutively exactly sequence actions independent views player opponent visible difference come codomain theta order reversed 
easily established case analysis actions ta omega tb tracing interactions steps strategies converge exactly behaviour 
state basic facts type structures cbv write 
proposition 
cbv symmetric monoidal category tensor omega enriched poset pairings hhf gii ii hhoe ii oe gg satisfy omega hh ii ii hhf ii hhf fii delta omega viewed going cbv cbv right adjoint delta counit ev cbv poset enriches 
proof corollary proposition immediately cbv symmetric monoidal properties pairings follow 
final clause oe oe theta assume oe 

decomposition components say oe hh ii oe views entirely hh ii oe oe required 
note functor easily extends poset enriched bifunctor type cbv op theta cbv cbv check recursion operator defined finite approximation result cbv 

proposition 
pointed omega define rec def rec oe oe rec delta defined monotone operator type hom omega hom regardless choice oe 
rec omega id rec 
ii rec hhid rec ii 
iii define 
dn ii fe increasing chain exists rec 
proof show oe oe omega implies rec oe rec oe definedness immediate 
suppose oe oe theta construct fae approximating rec oe fae approximating rec oe proposition iii 
monotonicity hh delta immediately know ae ae behaviours arrows entirely depend approximations readily conclude rec oe rec oe proposition iii implies rec oe rec oe know rec delta defined monotone cbv show iii 
immediate proposition 
ii proposition ii know rec hhid rec ii proposition iii know rec hhid rec ii required 
iii omega take oe definition fe obviously chain associated fae constructed iii know limit rec oe rec required 
cbv arbitrary products products allows treatment recursive types see constructions far need current purpose :10.1.1.37.813
section type structures interpret call value pcf 

interpretation pcfv pcfv typed programming language call value evaluation 
syntax evaluation rules standard literature cf briefly reviewed appendix basically recursion defined function types cf :10.1.1.37.813
cbv extensional quotient conceived represent call value partial higher order functional computation 
type structure include pcfv may seek represent pcfv terms computation universes 
primarily consider interpretation cbv step move cbv start interpretation types 

types 
types pcfv mapped objects cbv def nat def bool ff fi def ff fi 
define mapping environments def gamma ff def gamma omega ff 
give interpretation terms 

definition 
pcfv term gamma ff define gamma ff arrow cbv type gamma ff inductively follows assuming left right pairings tensors selected uniformly 
gamma ff ff def gamma omega ff appropriate projection 
ii gamma ff ff fi def oe gamma fi gamma ff fi oe gamma omega ff fi 
iii gamma mn fi def hhoe oe ii ev gamma fi gamma ff fi oe gamma 
ff fi gamma ff oe gamma ff 
iv gamma ff ff def rec oe gamma ff gamma ff ff oe gamma omega ff ff notice function type pointed 
gamma cond ff def hh hhoe oe iiii fl ff gamma ff gamma gamma bool gamma ff oe gamma ff gamma ff oe gamma ff fl bool omega omega appendix 
vi constant type ff set gamma ff def gamma gamma ff ff strategy appropriate behaviour see appendix concrete constructions 
key observations interpretation follow 
denotes value pcfv constant omega gamma abstraction 

proposition 
totality gamma ff total 
ii substitution lemma gamma xg fi hhid gamma ii oe gamma fi gamma ff oe gamma ff fi 
proof immediate definition 
ii induction structure totality 
base cases conditional easy 
cases case gamma ff ff fi oe gamma ff ff oe induction know hhid ii oe hhid ii oe give interpretation fv xg fv xg 
hhid ii total calculate gamma fv fv xg ii oe hhid ii oe ii ev hhid ii hhoe oe ii ev required 
case ff oe gamma ff fi fl oe gamma fi ff fl 
oe ii ii oe assumption gamma fi yg fl hhid ii oe calculate totality id hhid ii ii ii oe ii hh ii hhid ii ii oe ii ii oe hh hhid gamma ii ii oe hhid gamma ii omega id fi oe observing ae omega id oe ae oe ae total get hhid gamma ii omega id fi oe hhid gamma ii oe required 
case fi oe fl fi 
calculation obtain hhid gamma ii omega id fi oe apply proposition ii get rec hhid ii omega id oe hhid ii rec oe hhid ii oe concluding proof 
observe results proceeding 

lemma 
gamma mfx ff yg proof gamma ff fx ff yg proof bigger mfx ff yg proof write oe substitution 
oe oe result obvious 
mn oe oe oe fv xg proofs contain induction know noticing fv xg fv xg oe fv xg appropriate bigger proofs 
cases immediate 
prove basic adequacy results interpretation 

proposition 
gamma implies 
proof induction size proof rules 
rules involving constants easily reason 
fi rule ii proposition vii 
recursion show gamma mfx xg ff gamma mfx xg ff gamma ff 
lemma know proof length shows particular gamma ff ff def oe total immediately implies rec oe total 
gamma ff rec oe hhid rec oe ii oe proposition gamma mfx xg ff proposition ii required 

proposition 
computational adequacy ff closed term 
ff value proof standard reasoning chain complete relation terms elements proposition iii reason recursion 

spite proposition interpretation pcfv terms cbv allow obvious equations 
example mn general distinct interpretation cbv left pairing clearly extensional behaviour 

corollary 
adequacy closed terms implies obs proof write note ff closed ff fi xg ff lfn xg easy structural induction 
suppose 
assuming xg xg lfn xg required 
adequacy result remaining task show interpretation considered modulo exactly captures observational congruence obs pcfv main tool utilise subset pcfv terms called finite canonical forms 
finite canonical forms faithfully capture behaviour compact strategies pcf types cbv 
specific syntax show new syntax just abbreviation old 
assume program type 
incorporation type straightforward 

definition 
finite canonical forms define finite canonical forms fcfs short type ff syntax 
gamma omega ff gamma fcf 
ii gamma ff ff fi fcf gamma ff fi 
iii gamma ff zm fl fcf gamma ff fl fcf type fi ff gamma gamma fi fcf 
iv gamma 
case ff fcf gamma gamma ff fcf 
note iii iv just abbreviations pcfv terms way gamma ff zm fi stands gamma 
ff fi zm 
ii gamma case ff stands cond cond omega gamma assume encoding equality check natural numbers pcfv 
proof definability give intuition correspondence strategies fcfs obvious ones 
essentially finite canonical forms lies making order evaluation exactly order interaction explicit 
ff ff fi represents initial signal domain action sequence pa ff fi oq ff oq ff justified pa ff fi behaves 
ii gamma fl fl delta ff fi interacts pq fl opponent may ask fl higher order type interaction answered player opponent answer oa fl actions move 
iii case statement corresponds situation interactions acts view containing received ground value natural numbers 
variable tuple natural numbers reduced isomorphisms 
establish main result section 
proof shows innocence visibility bracketing allow translate strategies pcfv terms 
basic reasoning method follows hyland ong give proof detail illustrates basic correspondence fcf compact strategies 

theorem 
definability compact element oe ff pcfv type ff cbv fcf ff ff oe 
conversely interpretation fcf compact element respective type 
proof second half easy induction structure terms 
half induction cardinality oe compact strategy oe form omega ff fi ff fi pcf types constructing fcf oe ffi gamma fx ff gamma choice variables matter oe gamma fi compact 
jf oe oe ffi gamma omega fi obviously satisfies condition 
assume statement holds jf oe 
assume loss generality variables gamma function types 
notice oe defined finite subset tuples oe compact 
defined tuples say fhn hn lk ig 
writing case hx xm hn hn lk nested case statement case case case set oe ffi gamma case hx hn hn lm give gamma fi oe reacts specified tuple natural numbers 
subsequent reasoning shall confuse pcf types interpretation 
case oe reacts pa fi initial signal fi 
fi action form final action switching condition alternatively bracketing condition simply put corresponding integer 
fi fl fl action initial sort fi uniquely determined possible action question fl 
construction views question remains view question fl asked 
view action sequence question fl form oa omega ff pa fi oq fl oq fl denotes action initial sort fl labelled oq actions hereditarily justified oa omega ff oq fi pa fi uniquely determined effect oe sequences considered innocent function views form oa omega ff omega fl inherits justification original view actions originally justified pa justified initial signal original answer oq fl unjustified signal 
innocent strategy type gamma fl fl say clearly action pa taken away 
induction fcf gamma fl fl defines set def gamma fl fi realise behaviour oe specified initial signal gamma interpretation delta 
case ii oe reacts pq oe reacts question gamma justified initial signal 
pq belongs th component tensor say ff ff form fl fl form fcf behaviour form fl 
fl strategy pq fl opponent answer fl say oa show views oa take form oa omega ff pq oa fl easy induction actions done clear 
start action say justified action say pq notice justify view view induction contains initial actions done 
transform part oe views innocent function acts views form oa omega ff omega fl actions originally justified oa justified new oa associated innocent strategy type gamma fl fi 
notice simply omit original action pq fixed 
notice construction innocent function defined specified tuple initial signal 
original pq deleted innocent function strictly cardinality oe induction form fcf gamma fl fi 
gamma fi interpreted act oe initial tuple gamma 
fl immediately pq fl opponent ask back question answer fl views initial actions take form oa omega ff pq fl oq oa omega ff pq fl oa fl simply verified just case 
consider cases separately form fcf behaviour combine form required fcf 
case 
question third action view 
note contain action oa fl justified pq view form justifies contain free initial signal fi say pa fi case pq answered pa see proposition appendix implies oq occur view structure views noted 
transform part oe acting innocent function action views form oa omega ff omega answer originally justified oq free 
gives innocent strategy type gamma 
innocent function obviously smaller cardinality oe induction corresponding fcf say gamma case 
answer fl third action view 
notice pq fl directly justifies oa answers questions justified pq immediate form views 
transform part oe maps views form innocent function mapping view form oa omega ff omega fl corresponding 
notice delete fl original pq justifies oa justification actions originally justified oa oa new oa innocent strategy type gamma fl fi smaller cardinality oe corresponding form fcf gamma fl fi 
putting construct gamma fi interpreted asks ff initial signal opponent questions back corresponding interacts answer comes fl corresponding starts interacting behave oe receives specified initial signal 
combining case statement discussed constructed fcf corresponding oe required 
write gamma ff interpretation pcfv terms cbv gamma ff ready prove 
theorem 
full abstraction assume closed pcfv terms ff ff 
ff obs ff iff ff ff proof direction show proposition implies result cbv result immediate 
proposition ii oe ff total cbv iff equivalence class cbv iff cbv iff cbv required 
direction suffices show left hand side implies ff ff cbv 
note easily replace target nat proposition measure observability type suffices 
suppose obs ff nat nat obvious strategy corresponding write compact continuity take corresponding fcf ff ffi 
def ff ffi fcf 
hhp ii ev hhp oe oe ii ev hhid oe ii oe hhid oe ii oe omega id ev hhid oe oe ii ev totality oe id 
proposition computational adequacy know fm fn implies required 
result generalised open terms essentially argument 

relationship category call name games known context domain theory call name universe say cppo category pointed cpo continuous functions call value universe say pcpo category cpo partial continuous functions mutually embeddable 
discuss analogous result holds setting 
start introducing universe call name games conservative extension original category games hyland ong 

definition 
cbn arenas cbn arena pre arena initial sorts labelled oq 
ii action sequences cbn arenas action sequence defined definition reading arenas cbn arenas changing initial justified initial case preceding action initial 
iii legal positions action sequence cbn arena cbn arena bracketed precisely condition definition holds 
visibility condition just definition ii change ov ov sx fi jg free action free action pv sx 
action sequence cbn arena cbn arena legal bracketed satisfies visibility condition 
iv innocent strategy cbn arenas innocent strategy simply strategy defined precisely definition reading arenas cbn arenas 
call strategies cbn strategies distinguish strategies cbv 
set cbn strategies fixed cbn arenas ordered oe oe just definition 
composition composition cbn strategies defined exactly definition reading arenas cbn arenas 

ii extra condition concerns preceding action unjustified actions necessary existence multiple initial actions possible initial sort labelled question cbn arenas switching condition invalid 

definition proposition 
category cbn data 
ffl objects cbn arenas 
ffl arrows strategies cbn arenas composed ordered cbn cartesian closed enriched cppo category pointed cpos continuous functions 
show 
proposition 
full subcategory cbn proof outline call cbn arena answers justify questions hyland ong arena 
full subcategory cbn hyland ong arenas isomorphic objects associate hyland ong arena arena corresponding shape 
arrows form strategies action sequences differs sequence unjustified action initial representation innocent function immediate notions coincide 
verify notion composition definition cbn strategies coincide section 
best done showing uncovering coincides expanded form composition appendix transforming definition board form appendix 
omit details 
cbn close relationship mccusker category hyland ong games linear decomposition equivalence may hold verified extensional quotient cbn allows fully interpretation call name fpc variant allows interpretation imperative constructs 
interest section universe relates cbv 
result shows simply embed cbn cbv 

theorem 
cbn isomorphic full subcategory cbv pointed arenas 
proof embedding cbn arena mapped pointed cbv arena ffi pre arena justification initial sort arrows cbn strategy oe define oe ffi ffi ffi fs ffi js oeg construct ffi follows apart injection element adjust types ffi unique opponent answer add initial signal ffi followed initial signal ffi prefix resp 
second signal justify originally free actions resp 
graph structure ffi ffi gives functor mechanical verification 
full initial actions total strategy pointed cbv arenas fixed 
notice exact analogue situation arises domain theoretic setting cppo precisely subcategory cpo pointed types note cpo total subcategory pcpo 
just domain theoretic setting pointed arenas arise objects eilenberg moore algebra lifting monad cbv easily verified 
observed outset known fact domain theory embed pcpo cppo 
method simple take full object sub category cppo arrows restricted strict ones 
similar idea exact analogue time works setting 
need notion 

definition 
cbn arena pointed unique initial sort cf 

cbn arena sharply pointed pointed justifies sorts labelled 
ii suppose pointed cbn arenas 
strategy oe strict initial question immediately asks question alternatively oe 
linear strict asks unique initial question unique initial question asked 

proposition definition 
oe linear cbn strategies oe category pointed types linear strategies denoted cbn proof clearly strict strategies compose linearity oe action comes oe 

linearity call value computation mind malacaria different setting games abramsky games :10.1.1.41.840
state second embedding result 

theorem 
cbv isomorphic full subcategory cbn sharply pointed arenas 
proof object level embedding functor turns cbv arena cbn arena adding sort labelled oq justifies initial original cbv arena strategies innocent functions 
cbv strategy oe innocent function oe construct function follows oe set result adding prefix consists unique initial action question followed unique initial action question 
newly formed sequence justifies initial justifies initial addition easy show fs prefix closed characterise cbn innocent strategy oe mechanical verify delta define full functor 
embedding results may best seen simple translation information flows 
note full object subcategory cbn strict maps notion strictness generalised non pointed types obvious way isomorphic cbv category eilenberg moore algebras monad 
discussions 
related works 
showed category games originally introduced hyland ong simply extendable call value changing parameter representing form information flow resulting category algebraic structures parallel foregoing domain theoretic call value universe pcpo strong intensional flavour 
faithfulness universe captures call value sequential higher order computation exhibited full abstraction result call value pcf 
discuss works related 
completing full version authors informed independent essentially concurrent riecke sandholm obtained full abstraction call value fpc easily implies pcfv :10.1.1.37.813
construction kripke logical relations pcpo quite different 
quotienting necessary reach semantic universe sense universe cbv construction universe substantially complicated 
brief comparison may say approach give better insights understanding continuous function sequential construction directly model dynamic aspects sequential call value computation may lead insights context 
methods play different roles semantic analysis 
ii conference version abramsky mccusker categorical universe call value hyland ong games 
universe suggested construction related mccusker early idea close relationship presentation cbv cbv basic idea represent initial opponent player answers total strategies certain indexing function 
strategy index function innocent time callby name initial actions gone strategy 
category total strategies stipulate required monadic structures form universe partial arrows kleisli category 
construction originally done algebraic clarification construction personal communication applied interpretation certain imperative constructs changing base call name category 
advantage approach just noted foregoing call name universes mccusker base universe corresponds changing parameters games setting see 
hand initial construction universe somewhat complex may obscure glance couple intensional elements universe form information flow 
construction offer deep categorical analysis semantic universes call value games cbv contribute deeper understanding game semantics call value computation 
iii setting abramsky jagadeesan malacaria games malacaria working game semantics call value computation extracting linear strategies original universe variant 
study lead basic clarification notion call value games hand deeper understanding relationship ajm games ho games hand 
gives preliminary study direction :10.1.1.41.840

extensions full abstraction results 
discuss extensions full abstraction results 
proofs section easily extend pcfv sums products considering strategies type omega ff isomorphisms omega phi ff phi omega ff phi ff fi omega ff fi extending fcf mn omega ff refined case statement 
ii immediate extension untyped call value calculus 
arena take initially directed graph forest sorts respectively labelled oa oq pq pa directed edges oa 
pq pq 
oa oq 
pa pa 
oq oq 
pq pq 
oq 
unfold graph corresponding infinite tree standard way setting oa root 
essentially canonical solution equation full abstraction result easily follows 
way directly interpret lazy calculus cbn discussed section 
interesting compare constructions 
showed fully domain theoretic models various extensions pcf emerge call value pcf presence parallel 
interesting see similar result may obtained setting 
iii recursively typed calculi fpc traditional approach interpretation types free variables possible cbv tensors give bifunctors :10.1.1.37.813
couple methods solve issue 
approaches marcelo fiore author successfully interpreted call value fpc cbv shown fully 
particular axiomatic framework adapted setting gain computational adequacy 
see details :10.1.1.37.813
note situation may similar significant difference definability argument finite types carried intensional level 
related issue interesting see cbv algebraically compact general poset enriched functors cf left issue 
iv discussed simple change parameters may result semantic universe call value computation capturing various language features 
context call name computation proposals treat imperative constructs abramsky mccusker block structures laird control constructs 
categorical level corresponding changes setting result coherent algebraic universes distinct features just altering concerned parameter 
just changing class strategies simply construct semantic universe imperative language order cells fully translation call name version formed just cbn section gives interpretation idealised algol just 
shows parameter games pertaining form information flow words pertaining difference call name call value independent basic parameters games 
study direction study type structures arising context interpretation call value languages impure constructs interesting subject research 
direction presentation 
topic related iv restricted study refined type structures related semantic universes 
lead elucidation algebraic structures cbv related universes 
vi referees suggested similarity lorenzen original games context proof theory notion games 
formal relationship clear partly due difference presentation interesting open issue approach try understand call value terms forms information flow may relate approaches logical viewpoint 
context danos suggested possible connection notion call value games proof system systems dual characters conceptually corresponding call name call value 
worth studying distinction call name call value proof theoretic perspective may relate distinction context 

relationship process theories 
strongly intensional character cbv level abstraction say pcpo 
said call name counterpart categories games sense reflect notion execution albeit abstractly cf 

viewpoint primary purpose semantic representation programming languages lies giving equations programs general possible feature may considered drawback 
take different perspective ask novel way representing programs put significant especially full abstraction result semantic justification representation 
step may exploit representation development theory execution including formal optimisation techniques 
type structures studied section may put effective context 
interest regard interpretation pcfv cbv gives simple implementation language form name passing processes 
representation closely related milner direct encoding doing simple optimisation performing fi reduction name passing interactions excepting buffering actions cf 
physical character universe suggests may study execution say call value programming languages new level mathematical abstraction line girard studies semantics cut elimination 
induced encodings suggest possibility relating game semantics process theories fundamental level 
study behavioural types milner may suggest possible directions study started 
abelson sussman structure interpretation computer program mit press 
abramsky jagadeesan games full completeness multiplicative linear logic journal symbolic logic pp 

abramsky honda mccusker fully game semantics general 
logic computer science july 
abramsky jagadeesan malacaria full abstraction pcf 
appear 
abramsky mccusker games full abstraction lazy calculus lics pp 

abramsky mccusker linearity sharing state fully game semantics idealized algol active expressions entcs vol north holland 
abramsky mccusker call value games csl august lncs springer verlag 
barendregt lambda calculus syntax semantics 
north holland 
berry curien sequential algorithms concrete data structures theoretical computer science pp 
july 
blass game semantics linear logic pure applied logic 
boreale sangiorgi fully semantics causality calculus 
lfcs report university edinburgh 
curien sequentiality full abstraction 
proc 
application categories computer science lnm pp cambridge press 
danos herbelin regnier games semantics machines 
lics ieee 
danos schellinx sequent calculi second order logic 
advances linear logic 
pages 
cambridge university press 
dialogue games foundation intuitionistic logic handbook philosophical logic vol pp reidel publishing 
fiore axiomatic domain theory category partial maps phd thesis university edinburgh 
published cambridge university press distinguished dissertations series 
fiore enrichment theorem axiomatisation categories domains continuous functions math 
struct 
comp 
science 
fiore honda recursive types games process representation logic computer science july :10.1.1.37.813
fiore plotkin axiomatisation computationally adequate domain theoretic models fpc lics pp ieee 
freyd algebraically complete categories proc 
como 
category theory conference lnm pp springer verlag 
freyd remarks algebraically complete categories proc 
application categories theory conference lms pp cambridge university press 
girard linear logic theoretical computer science vol 
pp 
gunter semantics programming languages structures techniques mit press :10.1.1.37.813
honda yoshida name passing games ii functional universe pp 
november 
honda yoshida game theoretic analysis call value computation short version :10.1.1.37.813
proc 
icalp proceedings th international colloquium automata languages programming lecture notes computer science pp springer verlag july 
honda yoshida game theoretic analysis call value computation full version pp 
announced type mailing list february 
ftp able ftp dcs ed ac uk export kohei ps gz feb 
hyland ong full abstraction pcf ii iii 
pages 
ftp able theory doc ic ac uk papers ong 
hyland ong pi calculus dialogue games pcf proceedings th annual acm conference functional programming languages computer architecture june 
kahn plotkin concrete domains theoretical computer science vol 
number pp 
december 
originally appeared inria report 
laird full abstraction functional languages control lics ieee 
longo moggi cartesian closed categories enumerations effective structures lncs springer 
malacaria linear foundations game semantics sep :10.1.1.41.840
mccusker games full abstraction fpc 
lics ieee 
mccusker games full abstraction functional metalanguage recursive types ph thesis imperial college 
milner calculus communicating systems lncs springer verlag 
milner functions processes 
mathematical structure computer science 
pp 
milner sorts types calculus manuscript pp 
milner polyadic calculus tutorial 
proceedings international summer school logic algebra specification marktoberdorf 
milner parrow walker calculus mobile processes information computation pp 
milner tofte harper definition standard ml mit press 
moggi partial morphisms categories effective objects information computation 
moggi notions computations monads 
information computation 
hereditarily sequential functionals lncs pp springer verlag 
peter hearn jon riecke kripke logical relations pcf information computation pp 
ong correspondence operational semantics denotational semantics handbook logic computer science vol 
pp oxford university press 
plotkin call name call value lambda calculus tcs 
plotkin lcf considered programming language tcs north holland 
plotkin lecture predomains partial functions 
notes course center study language information stanford 
pierce sangiorgi 
typing subtyping mobile processes 
lics pp ieee 
power robinson premonoidal categories notions computation proc 
math 
structures computer science 
priami enhanced operational semantics concurrency ph thesis department computer science universit di pisa 
riecke sandholm relational account call value sequentiality lics 
relating full abstraction results different programming languages th fst tcs pp 
lncs springer verlag 
winskel synchronization trees tcs vol 
pp 
north holland 
winskel formal semantics programming languages mit press 
winskel nielsen models concurrency handbook logic computer science vol 
pp oxford university press 
appendix basic operational structures call value games appendix gives proofs omitted sections pertain basic operational structure call value games 
proof independent matrix game board presentation action sequences composition formal definitions 

basic proofs operational structures hyland ong games hyland ong somewhat different framework mccusker thesis setting call name computation 
nearer start small restriction operational structure possible 
notable difference presentation exists example composition strategies apart difference call name call value 
shares couple important technical points construction particular treatment bracketing 
addition difference call byvalue call name basic differences exist operational structures notably projection convention stipulated derived 
sake completeness believe listing verification basic operational properties call value games may superfluous 
properties common call name games cases try give reasoning intuitive reveals internal structure games clearly possible effort may seen proof view projection 
start proposition 
shows simpler bracketing condition definition equivalent conference version :10.1.1.37.813

proposition 
def gamma bracketed action sequence initial signal definition 
questions occurring answered questions occurring proof labels oa denote actions kind suppose way contradiction situation oa ipa ia pa initial signal answered denotes subsequences respective positions 
notion subsequence action sequence closed bracketing simply closed questions answered answer answers question notice closed subsequence number actions zero 
preparation assume maximum question answered answer occurring notice assumption implies subsequence closed bracketing condition 
similarly closed subsequences length 
means actions strict alternation case contradiction 
prove basic properties legal positions 
start closure properties legal positions 

proposition 
legal action sequence psq prefixes proof closure prefix definition 
closure view functions note resulting sequence inherits original justification visibility condition strict alternation conditions action sequences immediate construction views action sequences 
show legal 
visibility take example case view sequence 
observe action justified action immediately precedes action non justifies trivially action view justified view view action goes preceding actions sequence surely occurs 
similarly views op dual views initial action 
bracketing 
induction length legal action sequence 
take case view 
base cases pv resulting views obviously bracketed 
pv ps ps qx question ps qx bracketed ps ps qx induction 
answer ps bracketed induction question answered get bracketed sequence 
pv ps ps qx question view bracketed induction 
answer question say original sequence form def oq pa answers show claim 
psq subsequence corresponding form pq delta oa delta pq delta oa pq gamma delta gamma oa answers pq proof assume actions remains psq 
statement vacuous suppose 
show induction gamma th action satisfies mentioned property 
base case case action preceding answer wrongly answers gamma question say pq gamma required 
induction form delta gammak gamma delta pq gammak oa gammak delta pq gammak oa gammak delta pq gamma oa gamma alternative short proof see mccusker thesis lemma 
justification oa pq gammak gamma question violates bracketing condition gammak gamma answer get gammak gamma pq gammak gamma required 
proof claim claim questions subsequence psq answered know psq bracketed 
views exactly reasoning ov action meet trace back view initial proposition know views legal action sequences legal action sequences 

proof proposition switching condition 
hyland ong proved simultaneously view projection suppose oe ends action resp 
xs ay resp 
xs 
induction length def base case free action case statements obvious 
inductive step show view projection 
free result trivial 
suppose free say case 
write action binding notice induction switching condition action xs xs yx ov xs xs yx induction switching condition suppose action action visibility bound action xs inductive hypothesis view projection xs xs ay says xs contradiction 
case exactly 
prove technical lemma legal action sequences 
henceforth write necessarily consecutive subsequence inheriting justification relation justification relation may uniquely determined concern 

lemma 
view projection oe suppose ends action 
psq ps may notice statement simpler corresponding proposition occurrence initial actions respective component 
proof lemma done idea hyland ong proof corresponding lemma appendix simplification argument 
form general necessary assuming multiple free occurrences actions actions possible valid say call name strategies 
list basic notions shall 
ii key idea proof coming 

definition 
oe fl range consecutive subsequences 
block block consecutive subsequence including null sequence solely consists actions 
ii bounded segment cf 
bounded segment consecutive subsequence form ws 
action action called boundary 
open segment singleton subsequence free action boundary 
iii block sequence block sequence consecutive subsequence assuming fl fl fl block fl bounded segment fl bounded segment case non terminal fl singleton sequence free action case terminal 
called component block fl called component segment called simply components 
note components uniquely determined block sequence oe ends action contains action general non uniquely written block sequence immediate consequence switching condition 
observe bounded segment may naturally contain blocks bounded segments components 
board presentation strategies 
idea formalised follows 
partial matrix mean matrix indexing function partial may filled 
count columns rows customary 

definition 
board presentation action sequences def action sequence game board presentation partial theta matrix defined coefficients follows denotes original element sort injection gamma index gamma coefficient th row th column justification relation defined coefficients corresponding original justification relation 
usually call rows matrix associated arenas writing presentation pre arena explicit 
prove simple lemma block sequences prove view projection 
say view resp 
view touches action index pv resp 
ov view constructed action 

lemma 
block lemma oe block sequence 
action component block hereditarily justified component blocks non terminal view touches actions component blocks boundaries component segments non terminal similarly view excepting boundaries component segments 
proof fl fl fl reason induction base case 
prove assume 
non terminal fl fl ws bounded segment block 
situation depicted 

delta delta delta argue induction length base case action switching condition 
view goes reaching touching shows justified turn shows view touch actions required 
induction step suppose yx action resp 
action statement holds view resp 
view view resp 
view touches resp 
inductive hypothesis particular justified shows induction necessary view resp 
view touches fw resp 
required 
case terminal proved way noticing base case free view view goes reasoning induction step 
concludes case 
inductive step assume statement holds establish case depicted 


fl fl fl delta delta delta fl readily verify reasoning base case suffices arguing induction length replacing boundaries fl fl fl argument 

proof lemma 
establish view projection 
oe action say argument exchanging 
induction length prove psq ps base case case result immediate 
induction case analysis 
action action case induction calculate psq ps ps yq ps ps yx required 
ii action action nx bounded segment free action note 
nx bounded segment ends action holds immediately psq ps note psq ps bounded 
structure ps clarified claim due hyland ong cf 
lemma says orderly shrinks jumping boundaries 
claim 
suppose ws oe ws bounded segment 
prefix block sequence occurs component block situation 
op 
po fl fl fl proof suppose satisfy terminal block sequence postfix contradicts 
lemma find satisfying case occurs lemma says action occurs component block block sequence justified action block sequence occur component block block sequence satisfied 
proof claim returning case notice bounded sequence ps ps gamma ffi sequence boundaries component bounded segments way write ps ps ffi nx psq ps ps ps ffi ffi nx ps required 
iii action 
free case result immediate action component switching condition case ii 
exhausts cases 
view projection results prove basic property legal action sequences 
arena action sequence sequence elements sorts relation indices just definition replaced simpler initial legal satisfies precisely conditions definition iii 

proposition 
projection convention legal resp 
legal action sequence resp 

proof legal action sequence board presentation po 
po call consecutive subsequence solely consisting resp 
actions block resp 
block appeared 
picture shows consists alternating maximal blocks maximal blocks 
switching condition tells shown maximal block initial starts action ends action 
project surely strictly alternating 
projection justification preserved notice justification different components know action sequence 
bracketed bracketed 
visibility condition take action view projection know justified view projected action view projection lemma says view taken projection covers actions taken original required 
prove basic properties innocent strategies 

proof proposition 
characterisation innocent function oe ae implies oe ae definition 
direction suppose oe ae show induction action sequences oe base case trivial 
suppose def sx oe induction action follows contingency completeness 
hand action oe required 
ii set strategies di domain argue just deal set partial functions say 
show basic data 
situation exactly described hyland ong 
lub directed bounded foe just take oe 
fact partial function odd length views length views case incrementing original view additional action innocent function strategy implies odd length prefix say defined prefix notice trivially holds union directed bounded set strategies 
meet set theoretic meet original innocent functions defined compatible 
compatibility compatibility sets sequences innocent functions 
finite element strategy innocent function finite cardinality 
prime element finite element defined action stage equivalently strategy oe maximum length sequence length sequences prefixes 
prove lemma notion composition strategies defined 

proof lemma 
assuming argue induction js js gamma js bj remember jsj denotes length ordinary sequence 
base case trivially holds 
suppose holds consider 
set case analysis 

assumption holds holds holds holds holds contradiction suppose ends action 
holds ends action 
take minimum prefix say eliminated postfix consists actions 
switching condition action opponent 
action compensating action player legal switching condition 
ends action showing hold 


board presentation composition action sequences formalised partial matrix cf 

definition 
board presentation composition composable 
define sequence elements sorts ii pairs elements sorts pre arena way hx define game board presentation composition partial theta matrix defined coefficient gamma element resp 
coefficient resp 
fourth row th column value resp 

ii gamma element hx yi coefficient second resp 
third row th column value resp 

justification relation defined coefficients corresponding original justification relations 
call presentation game board composition 
call rows matrix associated arenas writing presentation pre arena explicit 
give example presentation 
nat nat nat nat nat notion corresponds uncovering 
proofs labels actions board presentation 
prove proposition 
show 
lemma 
composable legal action sequences legal action sequence proof game board presentation 
notice projection board presentation components 
show action sequence satisfying switching condition player switches shows legal 
action sequence satisfying switching condition 
justification actions resp 
actions precisely resp 
issue strict alternation 
lemma board starts block followed block block followed block block possibility block block contiguous violating lemma 
new block block starts action block 
establishes strict alternation switching condition situation depicted 
po 
po op op po po ii legal establish bracketing visibility independently 

bracketing 
bracketing notice possible violation condition sy resp 
resp 
answers left unanswered draw situation game board po 

po op 

op po 

po 

note length odd switching condition 
number questions larger answers answers question 
contrarily number answers larger questions answered answer cases contradict assumption bracketed 

visibility 
suppose sx 
consider visibility view 
free prove suppose 
cases 
action 
action 
note component switching condition 
justifying action component action just continue arriving initial free action thing view original come visibility done 
action 
originally say ps just touches component thing done 
case tracing back view construction ps come action say consecutive actions 


op 

po 
po 
notice view construction psq comes directly go back going intermediate actions exist 
call maximal block immediately precedes non free action touched psq bridge simply bridge 
establish claim 
claim 
action bridge free justified action different bridge 
notice claim holds know actions ps psq ps occurs psq visibility condition 
claim proved induction number bridges claim holds counting left 
case 
left bridge action free psq go back bridge left contradicts left bridge 
second action bridge visibility immediately know free justified preceding action 
way clear actions left bridge justified bridge 
case 
assume property holds actions th bridge 
go bridge 
pair actions player switched action say justified view going backward action immediately precedes position diagram 
thing view reach previous back previous bridge free action bridge expected 
take view view second action start action reach left bridge required 

proof proposition 
assume oe 
oe innocent know oe legal sequence oe prefix closed example oe oe similarly oe note consider 
contingency completeness immediate view projection 
show oe innocent 
composed sequence po pop po 
denote 
write rows considered action sequence similarly write forth rows third fourth rows respectively 
prove done hyland ong properties extended sequences say actions ps cq ps cq ps bq ps bq ii similarly actions ps cq ps cq ps cq ps cq argue induction length longer sequence 
base case holds immediately 
suppose holds sequences length cases ends 
show key case 
assume ends way 
po po 
po 
op 
may write xy xy denote consecutive interactions action action moment may empty shall soon know 
write nb ps ps know ps ps 
induction know ps bq ps bq 
action doing action zipper decides done lower component oe way precisely sequence actions done leading switching final actions know ps bq ps bq required 
cases similarly verified 
ii proved suppose composite oe oe action done say oe action determined corresponding view action action composite 
hand action oe consecutive actions visible action uniquely determined zipper argument action composite strategy uniquely determined views required 
iii associativity show oe oe oe iff oe oe oe oe thing showing oe pairwise composable reduce composable ones 
case obvious 
suppose cases defined 
inductive hypothesis 
secondly inductive hypothesis 
cases similar 
iv continuity conclude proof proposition showing continuous operator 
clearly monotone construction 
toe oe 
toe oe toe oe 
similarly reason case know defined bi continuous operator strategies 
give proof recursion 

proof proposition 
assume pointed oe omega 
direct construction oe 
detail rec omega id oe def omega id oe fix omega id oe gets initial signal reacts going initial player signal invisible fix reacts asking invisible interact reaches point oe start interaction 
rec oe def oe fix signal interact just reaches oe goes fix reacts asking oe start interaction 
rest behaviour precisely simulated modulo copy cat identity neglect done 
ii give behavioural description strategies shows strategies simulate behaviour 
underlying induction length expanded composition sequences inductively construct simulation relation sequences expanded composition mean composition eliminate interacting actions see appendix definition 
behavioural reasoning hopefully clear indicate underlying formal construction concise 
articulate behaviour stages 
assume total prove simply 
strategies start unique signal observe action possible forget arena 
distinguish copy second 
initial stage ffl rec oe def oe fix reacts initial signal going oe reacts reaching immediately 
fix reacts asking oe react ways underlying behaviour oe 
possibly interaction answers interacting deadlocks asks behaviour deadlocks 
fix answers domain 
ffl hhid rec oe ii oe def hhid oe oe omega initially reacts goes id poe total oe gets initial signal 
classification oe behaviour 
case clearly behaviour deadlocks just 
second case oe eventually answer precisely notice pointed kind reaction possible 
behaviours stage simulate 
second stage ffl oe fix fix relates domain domain copy cat prefixed view clearing actions domain oe view concern repetition view clearing actions situation precisely oe omega interacting domain far interact domain 
point stage 
move third stage 
ffl hhid oe oe omega interaction domain oe interactions mediated id precisely behaviours continue 
oe ask domain simulation exact emulation id fix negligible reasoning gave 
oe fed oe fix move third stage 
third stage ffl oe fix fix effect relates oe action fix domain copy cat 
notice oe interacts 
notice oe questioned acts fresh view starts second level sort basis behaviour due innocence 
interaction second copy oe copy 
oe may ask fresh question interaction sequence third copy copies invoke copies 
ffl hhid oe oe omega question done oe domain forwarded fix oe precisely view second copy 
interactions oe oe precisely proceed case example oe asks fresh question domain copy oe precisely thing domain invoked copy reacts fresh view 
way histories interactions precisely correspond copy cat id fix 
particular visible behaviours domain strategy coincide 
notice innocence oe essential reasoning 
stronger statement case oe total verified similarly 
iii assume total 
immediate fae increasing chain 
notice ae ae ae hh ae ii oe 
unfold recursion ii follows rec oe hhid rec oe ii oe hh rec oe ii oe final equation total cf 
proposition iv 
show ae rec oe induction 
base case 
ae def hh dn ii 
initial signal hh dn ii immediately reacts omega point oe interact reach asking domain deadlocks 
case know proof ii oe deadlocks behaviour coincides 
case signal omega oe reacts precisely oe ae visiting domain oe ae ask domain point behaviour deadlocks may case rec oe 
know ae rec oe 
induction 
ae prove suppose 
ae hh ae ii oe ae hh rec oe ii oe done 
establish tae rec oe reason length composed action sequences including invisible moves 
unfold rec oe times 
particular exactly configuration ae unfolding rec oe times dn stage 
means question reaches dn exactly behaviour done strategies 
interaction sequence certain length ae shows particular action sequence visible behaviour rec oe contained ae done 
list proof switching conditions legal action sequences domains arenas specific kinds tensors exponentials 
properties proof proposition 
correspond similar properties call name games see 

proposition 
switching condition tensor legal action sequence omega def omega action component resp 
component succeeding component resp 
component action 
ii switching condition partial exponential legal action sequence def action component resp 
component succeeding component resp 
non initial sort component action 
proof situation legal sequence omega may displayed op po 
omega op po op row omega records unique free signal omega notice decompose second row game board sense components 
say action block belongs resp 
block immediately block resp 
block 
prove specified switching condition tensors take view action resp 
touches actions resp 
omega take view action belongs resp 
touches actions resp 
omega maximal block belonging resp 
immediately succeeding action action resp 

proof induction number non initial blocks sequence case induction number actions initial action block 
base case holds action immediately signal induction switching condition immediate inductive hypothesis preceding actions 
non initial block belongs say action satisfies inductive hypothesis preceding action follows far block 
switch induction go holds 
inductively switching condition hold actions combining inductive hypotheses 
ii proved similarly 

discussions 
conclude appendix discussions strategies constitute bottom map cbv natural idea oe implies oe insensitive case mentioned proposition 
gives counterexample 
fact 
oe nat strategy unique initial signal domain asks domain iff opponent answers questions domain action iff opponent answers answers unique initial signal domain action action possible 
oe 
proof notice innocent strategy nat answer differently questions domain view 
oe statement proposition ii required 
note avoid situation changing notion strategy way definition change contingency completeness contingency completeness oe empty ends action def sx legal odd length prefix xs implies xs yy sx oe 
extra condition written italic says strategy expect possibility opponent innocent 
resulting universe exactly algebraic properties including intensional full abstraction extensional universe isomorphic strategies oe fact disappear oe cbv iff oe insensitive 
senses cleaner universe preferred formulation due simplicity particular conformance original definition hyland ong 
may observe identify insensitive strategies intensionally zero object notable setting intensional universe algebraically compact sense respect cpo functors revision may natural operational viewpoint 
appendix process representation strategies observed section lemma strategies composition cbv precisely captured process representation standard notion process composition 
note arisen study relationship strategies game semantics name passing processes cf 

process representation succinct clear way describe strategies composition 
give brief review representation describe reason conspicuous strategies appear main sections 
reasoning considered way describing composition actions concise precise way 
full discussions process representation games applications discuss basic technical constructions needed purpose 
basic idea process description strategies consider sorting sense assign calculus action action sequence justification represented binding effect strategy name passing synchronisation tree essentially equivalently term calculus 
ways formulating idea 
may concise 
appendix write denote sorts clearly distinguish sorts names labels calculus 

names sorting labels 
denote proper class names ranged 
fix arenas say cbv sorting simply sorting assignment mutually disjoint sets names sorts pre arena countable set names assigned non initial sort singleton name assigned initial sort 
write assigned sort 
ii fix sorting 
set action labels simply labels ranged data form ffl fb input ffl fb output 
sg labels collectively written sigma fb 
sigma fb sub label sequence binding relation names delta act binders 
object binds subject label say binds abuse terminology 
deal label sequences binders distinct 
ff equality denoted ff sequences defined standard way 
notice extend usual labels calculus carry arbitrary family names sequence names 
example action sequence nat nat represented denote reaction successor function input 
notation ccs write transition ah bh concrete examples 
remember sorts 
definition proposition 
fix label sequence represents action sequence sub ii action resp 
action iff input resp 
output 
iii initial sub free label sequence binds action sequence label sequence represents determined uniquely ff equality 

terminology object dependency represent justification relation 
conventions indispensable clarity expressions 

convention 
identity ff convertible label sequences discussing representation 
ii presentation simple assume linear order siblings sort arena write say fb give concrete examples 
assume number siblings sort finite 
particular name sequence null omit 
give simple example representation action sequences 

example 
consider sorting nat nat nat assign initial sort nat nat initial sorts nat 
alpha convertible identified represents action sequence distinguishing elements copies superscripts sequence strategy example iv 
notice binding justification correspond 
noted may write label sequence bh may notationally intelligible 
process representation action sequences process representation strategy may prefix closed set label sequences precisely conditions definition ff equality 
just prefix closed set sequences induce tree prefix closed set viewed synchronisation tree sense define composition strategies standard way process theory 
primary presentation shall define follows 

strategies 
fix sorting oe synchronisation tree representation strategy oe tree acyclic directed connected simple graph say edges labelled action labels set label sequences traced root denoted jp precisely set label sequences representing action sequences oe modulo ff label sequence root goes node say set outgoing edges correspond labelled set fl jp jg label sequences considered modulo ff identifying alpha equal label sequences tree determined uniquely 
shape resulting tree observe counting root node depth node depth outgoing edge output odd depth node input actions done 
may write synchronisation tree 
efg efg denotes branching sum root nodes adjoined pn efg denote tree names occur free 
composition strategies carried standard expansion law name passing processes hiding operator induced new name passing modification complementary labels vanish point corresponds equation equation valid weak bisimilarity 
rules written assuming appropriate ff conversion follows 

range subtrees synchronisation trees representing strategies simply call processes 

composition 
write bn set names subject 
hiding process set names ff define ff recursion ff def ff ff def ff ff ff def fn ae ff ff def ff ii parallel composition processes def def define bn iii oe oe consider sorting concerned pre arenas name assignments sorts coincide disjoint 
fi set names initial sorts resulting process representations 
define def fi 
proposition 
oe represents oe oe sorting union original 
holds essentially switching condition strategies 
omit proof 
convenience conventions listed 

conventions 
notation question actions answers questions may repeated arbitrarily times discretion environment 
represent situation textually notation 
question starts question 
notation read denoting process ready marked input action question action legal words interaction done level question turn opponent notice notion different calculus 
algebraic properties expressions may simple analyse causes problem 
ii generic arenas simplicity regard involved type initial sort 
types strategy oe needs free names initial sorts write oe ab representation unique ff conversion 
compose oe consider process composition say oe ab bc resulting oe ac extend notation case domain domain ground arena nat writing oe oe ab assume domain say nat initial sorts assigned names fa 

copycat law 
brief touching frequently occurring behaviour copy cat strategies formal definition case identity example 
behaviour infinitely continues replication dual actions algebraic law simple 
copy cat behaviours deal essentially identity connecting copy say copy copies assigned distinct names represent copy cat specifying families simplicity sequences names writing cc 
case opponent sort corresponding player sort copy cat starts opponent action copied sort 
laws copy cat behaviour cc 
copycat act renaming 
corresponds fact copy cat interactions done extensively law 
deeper study copy cat behaviours see :10.1.1.37.813
utilise process representation strategies description reasoning 
notice algebraic equation processes precisely describes deduction may reason terms action sequences composition process composition reasoning clearer simpler 

equations proposition projection strength 
involved strategies process representation 
projection theta simply ea def cc 
simply dual 
notice clearly projections total 
depict behaviour hoe assume oe ca cb define hoe ce theta def copycat functions renaming setting get hoe ce ea oe ca 
ii strengths written process representation way st def ae cc 
theta tb theta cc 
copy cat assumed singleton unique initial sorts 
representation mechanically verify satisfy defining equations strengths cf 

show example 
similar 
notice isomorphisms witnessing associativity commutativity products essentially copy cat strategies isomorphisms neglected 
assume id def cc 
cc 
st def cc 
id theta st ef cc 
cc 
hand suppose st fg thetac def cc 
note agents composed pairs hf cancelled 
id theta st ef st fg thetac cc 
ff equal st thetab establishing coherence associativity products 

equations proposition iii partial exponential 
repeat construction partial exponential evaluation map 
scheme follows usual game semantics adapted call value behaviour 
oe omega assume oe form oe eb def na comes comes form oe cw ii ev ef omega wa cc 
check defining commutativity oe 
functionality copy cat renaming cf 
construction omega easy transpose identity total 
ln oe omega id lm ev mn cc 
ev mn ab ev mn ab cc 
ag cc 
def oe required 
uniqueness reason induction length sequences possible candidate curried map easy 

interpretation constants 
give interpretation constant process representation clarity 
generic strategy fl type interpret conditional 
write oe oe omega ff def ef nat def hni succ ef nat nat def 

hn zero 
ef nat bool def ch fl ea bool omega omega def cc 
cc 
observe conditional constant pcfv bool def fl notice obvious inverse translation 
appendix pcfv assuming reader familiar language pcf call value variant cf 
give brief review syntax operational semantics working exposition 
treatment nearest :10.1.1.37.813

syntax 
assume infinite set variables ranged syntax language follows 
ff ff fi ff mm cond ff fi constant introduce 

typing rules 
environment list pairs variable type variables distinct ranged gamma delta typing rules pcfv follows 
gamma ff gamma ff constant type ff gamma ff gamma ff fi gamma ff ff fi gamma ff fi gamma ff gamma mn fi gamma gamma ff gamma ff gamma cond ff gamma ff fi ff fi gamma ff fi set constants assume numeral omega ff type ff succ zero 
terms form ff called closed term 
values natural numbers abstraction boolean values function constants 
write values 
may include variables values difference semantics comes far closed terms go 

evaluation relation 
style natural semantics define evaluation relation follows omit environment type assignment 
fv xg mn mfx xg succ zero true zero false true cond false cond conditional taken constant type 
essential difference comes see appendix respective interpretations 
similarly call value combinators recursion cf 


assume constants conditionals pcf types cond ff ff ff ff evaluation rules true cond ff ff ff false cond ff ff ff notice translate cond ff cond ff fresh cond ff ff ff cond easy check translations preserve reflect observability 

observational preorder 
define observational preorder closed terms obs iff typed context program type delta iff note thing considering convergence types situation quite different case call name evaluation 
write obs induced equivalence 

