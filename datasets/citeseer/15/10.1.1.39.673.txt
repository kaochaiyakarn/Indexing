configuration structures van glabbeek computer science department stanford university stanford ca usa cs stanford edu plotkin department computer science university edinburgh edinburgh eh jz uk gdp dcs ed ac uk configuration structures provide model concurrency generalising event structures 
considered logically classes propositional models sub classes axiomatised formulae simple prescribed forms 
uniform way equivalence relations event structures generalised configuration structures general petri nets 
labelled configuration structure shown st bisimulation equivalent labelled prime event structure binary conflict equivalence holds tighter history preserving bisimulation 
petri nets self loops collective token interpretation shown behaviourally equivalent configuration structures sense translations directions respecting history preserving bisimulation 
fails nets self loops 
consider general model concurrency set systems 
structures set set system represent concurrent system called configuration structure 
elements events elements configurations 
event represents occurrence action system may perform configuration represents state system state events performed 
set systems isomorphism extensional chu spaces gupta pratt 
idea considering structures model concurrency arose 
pointed generalise event structures winskel 
behaviour described terms configurations consistent secured sets events 
set systems seen special kinds event automata studied poign 
model computation notion behaviour possibility comparing behaviours respect suitable observational equivalence relations 
section equip configuration structures functions act labelling events actions derive associated asynchronous labelled transition relations 
consider bisimulation relations adapted concurrency resulting labelled transition graphs various notions trace equivalence isomorphism 
propositions investigate configuration structures isomorphic transition graphs 
section considers various classes event structures framework 
previously known classes event structure general arbitrary configuration structures depends notion equivalence comparison 
theorems noteworthy respect imply original event structures st bisimulation universal 
section consider set systems point view infinitary propositional logic thought set propositions set models 
give number results equating closure certain operations axiomatisation formulas certain simple forms 
ad hoc logical view event structures propositional theories 
supported onr number 
somewhat different logical view 
precise relations investigated 
section consider relationship petri nets 
equipped labelling function giving rise labelled transition relations 
translations classes nets configuration structures proved correct observational equivalence 
corollary states nets equivalent configuration structures classes nets equivalence relations 
theorem reverses translation configuration structure finite configurations containing configuration equivalent petri net restricted type 
contrast proposition asserts petri net equivalent appropriate sense configuration structure 
preliminary exploration 
consider equivalence relations appropriate study concurrency notions multiple observers 
event structures winskel employed various notions morphism notion occurs category chu spaces 
importance understand relation equivalence approach 
computational interpretation set systems order interpret configuration structure concurrent system necessary know admissible states system evolve state 
propose definition 
definition configuration structure 
write gamma 
gamma finite ae ae 
relation gamma 
called step transition relation 
gamma 
indicates represented system go state state concurrently performing number events ones gamma 
requirement unavoidable 
second represents assumption finite time finitely events happen 
requirement says number events performed concurrently simultaneously performed order 
requirement represents postulate different events synchronise way happen step causally independent 
transition relation gamma 
corresponding computational interpretation configuration structures called asynchronous 
noted computational interpretations configuration structures possible 
gupta pratt obtained dropping requirements definition 
labelling events may observe transitions definition labelled configuration structure alphabet act triple set system act 
components labelled configuration structure denoted ec cc respectively convention applies structures tuples 
labelled transition relation gamma 
finite multiset labels holds iff fl je gamma labelled configuration structures represented graphically configurations vertices transitions labelled action 
transitions derivable 
example fdg fd fg fdg feg fd fg fe fg fd fgg fd fdg fd gg fd gg fdg feg fd fg fe gg fd fg fd ggg fd fdg feg fd egg fd gg fdg feg fd fg fe gg fd fg fd ggg 
labelling structures graphs follows ffl ffl ffl ffl gamma gamma ffl ffl ffl gamma gamma ffl ffl gamma gamma ffl ffl gamma gamma ffl gamma gamma ffl ffl ffl ffl ffl gamma gamma ffl ffl ffl ffl ffl ffl ffl gamma gamma ffl ffl ffl ffl ffl pictures configuration structures somewhat misleading representations suggest notion global time time represented system states moving state transitions 
constitutes certainly valid interpretation favour truly concurrent view events performed independently absence certain configurations indicates 
interpretation configurations thought possible states system point view possible observer 
introduced indicate absence dependencies conflicts causal links events represented system 
particular structure example actions completely independent need assume performed simultaneously particular order 
diagonal transition labelled fa bg part picture independence events 
terms higher dimensional automata indicates square filled 
hand absence diagonals indicates distinct linearly ordered computations 
happen turn wait causal ordering way view independent configuration reachable fa bg transition 
care order configuration structure say topmost configuration fd concurrent history 
configuration fd fg structure histories 
order count histories formally introduce concept monoidal homotopy paths graph representations configuration structures 
definition finite path configuration structure finite non empty sequence configurations delta delta delta transition gamma gamma 
homotopy smallest equivalence relation paths path obtained deleting configuration path ae ae equivalent ae 
configuration reachable path delta delta delta history configuration homotopy class paths 
equivalence relations equivalence relations occurring literature positioned dimensional classification diagram cf 

axis equivalences ordered respect preserved level detail runs systems 
paradigms line interleaving semantics runs represented sequences actions step semantics runs represented sequences multisets actions multisets steps representing simultaneous occurrences st semantics actions run thought intervals may overlap case concurrency causal history preserving semantics causal dependencies action occurrences runs systems preserved 
axis equivalences ordered respect preserved level detail branching structure runs 
extreme trace semantics system fully determined set partial runs completely neglecting branching structure 
side bisimulation semantics information preserved different causes action diverge branching identical causes action neglected various notions isomorphism preserve branching 
equivalences finer discriminating moving upwards right 
equivalence notions defined various places literature terms models concurrency seen special configuration structures 
definitions generalised structures 
models equivalences originally studied fifth sixth columns collapse 
configurations associated models history yield partial order 
split history preserving equivalences depending histories configurations preserved 
name history preserving fifth column keep connection causality find needs ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl ffl interleaving step st interval augmentation preserving history preserving configuration preserving event isomorphism isomorphism trace bisimulation equivalences configuration structures fifth column preserve causal information 
finest equivalence configuration structures event isomorphism definition configuration structures said event isomorphic bijection ec ed event isomorphism cc cd 
define equivalences parameter ranges columns 
left reader check corresponds definitions 
definition run configuration configuration structure non empty set paths delta delta delta run write denotes set configurations occur paths unique run empty configuration denoted 
transition relation configurations inherited runs configuration structure gamma 
gamma 

morphism runs event isomorphism configuration structures 
write indicate morphism notion computation function associates configuration structure set runs cc consider notions computation corresponding columns 
configuration semantics run consists paths leading reachable configuration 
restriction reachable configurations indicates consider unreachable part configuration structure insignificant 
history semantics run history 
augmentation closed partial order semantics run family paths arises partially ordered set events 
st interval semantics run defined way considering special kind partial orders called interval orders 
step semantics run set path obtained flattening step transitions single action transitions 
interleaving semantics run just single path single action transitions starting empty configuration 
concepts run define notions equivalence definition notion computation 
configuration structures labelled act isomorphic exists bijection isomorphism gamma 
gamma 
act 
preserving bisimulation equivalent exists collection morphisms preserving bisimulation ffl ffl gamma 
gamma 
gamma 
gamma 
preserving trace equivalent run run connected morphism vice versa 
proposition equivalences section ordered inclusion indicated 
inclusions strict 
structures seen equivalent isomorphisms notion bisimulation 
structures history isomorphic configuration preserving trace equivalent 
configuration isomorphic event isomorphic 
isomorphisms study configuration history isomorphism detail 
configuration structure standard configurations reachable events occur configuration 
standard configuration structures coincidence free 
configuration structure respectively iff distinct events occurring configuration sub configuration containing 
deleting non reachable configurations labelled configuration structure events occurring reachable configuration obtain standard part configuration structure evidently configuration isomorphic original structure 
better 
instance example transitions regarded event occurrence difference interposition events arriving result fd fg 
event occurrence labelled configuration structure pair configuration take equivalence relation event occurrences equivalent gamma 
say configuration structure occurrence recognisable events evident map equivalence classes events bijection 
say configuration structure configuration reducible labelling labelling second set actions configuration isomorphic 
equivalences labelled configuration structures give rise corresponding unlabelled structures 
proposition shows occurrence recognisable configuration structures provide normal forms configuration reducibility 
proposition configuration structure configuration reducible standard events 
standard configuration structure occurrence recognisable events reduces standard configuration structure event isomorphic 
standard configuration structures occurrence recognisable events configuration isomorphic event isomorphic 
prefer view event occurrence covering pair configurations meaning gamma singleton 
view reason equate actions equate transitions difference independent event transition occurred 
call occurrences transitions take equivalence relation gamma 
gamma 
gamma 
gamma 
equivalent 
say configuration structure history recognisable events evident map equivalence classes events bijection 
idea fits history isomorphism 
proposition configuration structure history reducible standard events 
standard configuration structures history recognisable events history isomorphic event isomorphic 
event structures event structures introduced winskel definition general event structure triple con set events con nonempty consistency predicate con con con theta enabling relation satisfies con idea enabling relation event happen set events enabling occurred previously con consists finite sets events potentially occur single run system 
winskel explained behaviour event structures associating family configurations possible states runs system definition set secured configurations event structure con consists ffl consistent finite subset con ffl secured fe gamma immediately yields configuration structure gamma 
defines labelled event structures corresponding labelled configuration structures evident way 
equivalence relations concepts previous section inherited event structures labelled event structures gamma 
secured configurations number pleasing properties proposition event structure 

finite configuration gamma reachable configurations precisely directed unions finite ones 

ae finite configurations gamma path paths homotopic 

gamma occurrence recognisable events iff history recognisable events 
winskel gave intrinsic characterisation configuration structures event structures 
essentially showed configuration structure non empty properties finite completeness finiteness coincidence freeness configuration structure associated event structure 
finitely complete iff closed directed unions bounded unions equivalently bounded binary unions finiteness means event occurs configuration occurs finite coincidence freeness explained 
show standard part configuration structure event structure iff standard part contains closed bounded binary unions holds configuration structure 
brands event structures classify general event structures dimensions stability having recognisable events degree conflict 
subclass synchronisation trees considered 
classes considered literature example bundle event structures flow event structures boudol castellani 
definition stable iff feg cone imply winskel defined stable event structures 
causal dependencies events configuration structure partial order 
winskel showed intrinsic characterisation configuration structure stable event structure needs gamma stable meaning closed bounded non empty intersections 
stability equivalent interesting local completion principle ae ae ae follows characterisation stability standard part configuration structure stable event structure iff contains closed bounded binary unions bounded binary intersections holds structure 
possess particularly pleasing description event structures recognisable events associated configuration structures 
case stable 
definition prime iff equivalent original definition 
proposition configuration structure associated event structure 
prime iff stable recognisable events 
configuration structures associated prime event structures characterised strengthening stability requirement prime meaning closed non empty intersections 
primality equivalent global completion principle ae ae standard part configuration structure prime event structure iff contains closed bounded binary unions binary intersections holds structure 
prime event structures possess global causal dependency transitive relation iff occurs configuration configuration containing dimension variation degree consistency 
consider possibility definition binary conflict con subset con elements 
see direct definition stable case 
prime event structures binary conflict equivalent original event structures nielsen plotkin winskel 
configuration structures seen stable event structures binary conflict recognisable events 
characterised winskel requirements plus primality coherence 
noted rensink extend stable event structures 
standard part configuration structure prime event structure binary conflict iff contains closed bounded binary unions binary intersections coherent holds structure 
consider synchronisation trees 
say prime event structure binary conflict linear iff consistent events synchronisation trees defined configuration structures structures equivalent definition 
characterised configuration structures closed directed unions binary intersections linear sense bounded pair configurations ae ae standard parts characterised properties 
classes structures section related indicated 
ffl ffl ffl ffl gamma gamma gamma ffl ffl gamma gamma gamma ffl ffl gamma gamma gamma ffl gamma gamma gamma synchronisation trees prime binary conflict prime stable general event structures event structures binary conflict binary conflict recognisable events classes event structures difference brands structures equivalence notions turn comparing classes event structures configuration structures respect test range equivalences 
considering configuration history isomorphism 
event structure may recognisable events 
proposition event structure reducible event structure recognisable events 
interleaving bisimulation synchronisation trees introduced considering concurrency interleaving proposition may surprising 
asserts synchronisation trees universal configuration structures respect interleaving bisimulation 
proposition configuration structure interleaving bisimulation reducible synchronisation tree 
surprise may regards st bisimulation prime event structures universal 
theorem configuration structure st bisimulation reducible prime event structure reduce binary conflict theorem prime event structure history preserving bisimulation reducible event structure respectively prime event structure binary conflict 
putting see configuration structure st reducible prime event structure binary conflict 
hand configuration structure history preserving bisimulation reducible event structure 
terminology section events axiomatised 
axiomatisation set systems section consider set systems logical point view thought collection propositions collection models 
connecting computational point view associate event proposition happened 
associated theory valid sentences holding models laws precise choose language infinitary propositional logic set propositional variables closed negation conjunctions sets formulae 
formula oe valid iff true elements equally class phi formulae set define configuration structure phi phi phi set models phi interpretations making formula phi true 
say phi phi point view due pratt 
noted natural conjunctive normal form 
subsets abbreviate propositional sequent phi collection sequents valid phi configuration structure axiomatized set propositional sequents 
consider correspondences axiomatisations classes formulae closure conditions set systems 
logical interest scott sequents antecedent consequent finite tarski sequents consequent singleton 
proposition set system scott sequent iff closed product topology tarski sequent iff closed intersections directed unions 
consider closure conditions arise naturally considering configuration structures 
denote closure non empty intersections ffl bounded non empty intersections ffl bounded non empty unions ffl directed unions table presents results 
third column indicates form allowed formulae implications 
example indicates sequent restriction antecedent consequent element ddc indicates implication antecedent conjunction propositional letters consequent form delta sets letters write delta phi phi oe oe oe oe phi oe oe disjoint disjunction phi 
example sixth entry states table configuration structure characterisations stable ffl ddc ffl finite ddc ffl ffl ddc ffl ffl ddc finite prime ffl ffl finite ffl ffl ffl ffl finite union ffl ffl finite finite configuration structure sequents form finite iff closed nonempty bounded intersections directed unions essentially due larsen winskel axiomatisations form finite correspond scott information systems 
entries indicate implication right left holds counterexample provided collection finite proper subsets natural numbers 
minor useful variation restrict configuration structures containing column changes non empty finite finite non empty left implications right 
table standard part characterisations unknown finite non empty general ffl finite non empty stable ffl ffl ddc finite non empty prime ffl ffl finite non empty consider axiomatisations event structures 
set theoretic characterisation event structures involves closure conditions finiteness coincidence freeness expect precise result 
say phi configuration structure standard part iff standard parts phi event isomorphic 
results table hold parenthetical conjunctions assumed configuration structures involved contain 
example second row asserts standard parts configuration structures general event structures containing closed non empty bounded unions directed unions axiomatised formulae forms finite non empty 
row suggests intriguing possibility general form event structure corresponding arbitrary configuration structures 
petri nets definition petri net tuple ffl disjoint sets places german transitions ffl theta theta flow relation ffl capacity allocation ffl initial marking satisfying labelled petri net labelling function act 
petri nets pictured drawing places circles subscripted finite capacity transitions boxes containing label 
arrows arcs 
petri net represents concurrent system global state system marking function satisfying state depicted placing dots tokens place initial state marking order describe behaviour net describe step transition relation markings 
definition sn marking net finite multiset tn transitions enabled sigma delta sigma delta gamma case fire yielding marking written gamma 
firing sequence net chain gamma 
gamma 
delta delta delta un gamma 
starting initial marking marking reachable sequence set transitions fires transition arc place token moves arc tokens consumed firing new tokens created outgoing arc places arcs 
occurs times happens times parallel 
firing possible sufficiently tokens ones incoming arcs come firing capacities outgoing arcs go exceeded 
expressed conditions definition 
definition net said capacities range range 
equivalence relations nets correspondence set systems different schools thought interpreting causal behaviour nets described individual collective token philosophy 
example illustrates difference 
ffl ffl ffl net transitions labelled fire 
fired tokens middle place 
individual token philosophy difference tokens firing token certainly case happens token arrives transitions causally independent 
token produced causally dependent net maximal computations characterised partial orders collective token philosophy hand middle place occurrence number 
preconditions fire change consequently causally independent individual token approach formalised notion process described goltz reisig 
causality respecting bisimulation relation approach proposed best devillers name fully concurrent bisimulation 
regarded form history preserving bisimulation takes processes runs 
contribute form history preserving bisimulation related equivalences collective token philosophy 
philosophies yield incomparable notions equivalence follows example 
individual token interpretation ordinary nets concept petri nets individual tokens individuality hardwired syntax nets 
ffl ffl ffl ffl collective token philosophy initial token middle place redundant equivalent net right 
fully concurrent bisimulation equivalent lacks computation hand fully concurrent bisimulation equivalent net left 
individual token philosophy nets computations run collective token philosophy equivalent causality preserving way 
interested behaviour nets far expressed terms transition firings 
places seen just tool specifying behaviour 
view discriminating behavioural equivalence think collective token framework notion marking equivalence definition nets marking equivalent tn tn exists bijection reachable markings initial markings related gamma 
gamma 
nets labelled requires note marking equivalence preserves causal information net representation concurrent system 
transitions causally independent context sensitive matter 
depends markings enabling 
marking transitions independent iff fire step 
kind information step transition relation gamma 
nets marking equivalent 
purposes marking equivalence fine 
definition configuration net finite multiset transitions property function mx sn mx sigma delta gamma marking mx 
firing relation markings inherited configurations net gamma 
mx gamma 
set configurations denoted cn labelled configuration structure associated tuple cn gamma 

note mx gamma 
phi configuration mx follows reachable configurations equivalently defined multisets transitions firing sequence gamma 
gamma 
delta delta delta un gamma 
note configuration structure associated net configuration structure sense definition 
structure class enriches set systems ways multisets sets second addition transition relation 
define definition nets configuration equivalent 
reachable configuration equivalence defined similarly strictly coarser reachable marking equivalence 
determine class nets described means set systems 
definition occurrence net net configuration plain set 
implies transition fire 
interested reachable configurations equivalently require firing sequence gamma 
delta delta delta un gamma 
multisets sets disjoint 
general firing relation gamma 
net determined set configurations nets different behaviour actions done parallel mutual exclusion 
configurations ffl ffl ffl ffl ffl corresponds configuration structure example corresponds similar structure diagonal ab 
idea equate net configuration structure cn 
definition self loop petri net subnet shape previous page 
net pure self loops 
proposition pure net gamma 
iff ae ae cn cn follows pure nets transition relation completely determined associated set configurations 
obtain corollary pure occurrence net exists configuration equivalent configuration structure 
consequence equivalence notions available configuration structures available pure occurrence nets 
nets equivalent iff associated configuration structures 
fact difficult generalise equivalence notions section configuration structures enriched explicit step transition relation 
definition event isomorphism add requirement gamma 
gamma 

requirement redundant plain configuration structures 
definitions equivalences remain unchanged account refer new notion event isomorphism 
ask occurrence net possibly self loops equivalent pure occurrence net configuration structure 
net configuration isomorphic configuration structure 
history isomorphic 
hold general 
proposition exists occurrence net history preserving trace equivalent configuration structure 
occurrence net st bisimulation equivalent configuration structure fact prime event structure binary conflict 
show restriction occurrence nets crucial net unfolded occurrence net changing behaviour essential way 
unfolding configuration equivalent original avoid changing identity transitions 
definition petri net 
unfolding occurrence net ffl theta ffl theta fg ffl ffl ffl ffl transition replaced countably copies wired environment flow relation exactly way original 
furthermore copy extra place created containing initial token incoming arcs outgoing arc going place 
place guarantees copy fire 
reachable marking unfolded net see exactly transitions fired transitions place empty 
marking configuration 
proposition nets configuration equivalent iff unfoldings 
equivalences occurrence nets equivalent iff unfoldings 
proposition shows possible define equivalences general nets 
definition nets said equivalent iff unfoldings 
proposition guarantees definition consistent occurrence nets 
definition net configuration preserving bisimulation equivalent unfolding configuration isomorphic 
trivial element choice introduced construction 
proposition net configuration preserving fully concurrent bisimulation equivalent unfolding 
tells notion unfolding preserves behaviour nets collective individual token interpretation 
possible give slightly different interpretation nets excluding transitions firing concurrently 
amounts simplifying definition requiring set multiset 
interpretation unfolding introduce concurrency 
purpose definition adapted removing initial tokens places leaving token adding arc transition place 
definition adapted indicated proposition holds 
note construction definition introduce self loops 
unfoldings pure nets remain pure 
corollary petri net exists st bisimulation equivalent configuration structure 
pure net exists history preserving bisimulation equivalent configuration structure 
pure occurrence net exists configuration equivalent configuration structure 
shows corollary inverse 
configuration structure finite configurations containing obtained image pure occurrence net 
theorem configuration structure finite configurations containing exists configuration equivalent pure occurrence net capacities 
proof transitions net take events configuration structure 
transition add place incoming arcs outgoing arc going transition 
places sure transition fires 
phi axiomatisation configuration structure consisting propositional sequents 
sequent introduce place net 
place outgoing arcs transitions incoming arcs places distinction independent individual collective token dichotomy yielding computational interpretations nets 
cardinality results section may assume positive finite 
finish construction putting gamma initial tokens created place 
place belonging sequent place restrictions firing gamma transitions fire extra token arrives place 
happen firing transitions firing transitions adversary effects transitions fire 
place places restriction occurrence events corresponding sequent 
follows constructed net exactly reachable configurations original configuration structure 
corollary obtain alternative proof possibly known fact pure net configuration preserving bisimulation equivalent net capacities 
pure occurrence net configuration isomorphic net capacities 
best devillers concurrent bisimulations petri nets 
acta informatica pp 

boudol flow event structures flow nets 
editor semantics systems concurrent processes proceedings spring school theoretical computer science la roche france lncs springer verlag pp 

gabbay semantic investigations heyting intuitionistic logic synthese library 
reidel 
van glabbeek refinement theorem st bisimulation semantics 
broy jones editors proceedings ifip tc working conference programming concepts methods sea israel north holland pp 

goltz reisig non sequential behaviour petri nets 
information computation pp 

causal automata 
theoretical computer science pp 

gupta chu spaces model concurrency 
phd thesis stanford university 
tech 
report available ftp boole stanford edu pub ps gupta pratt gates accept concurrent behavior 
proc 
th ann 
ieee symp 
foundations comp 
sci pp 

transformations semantics lotos 
phd thesis department computer science university twente 
larsen winskel information systems solve recursive domain equations 
information computation pp 

milner calculus communicating systems lncs 
springer verlag 
nielsen plotkin winskel petri nets event structures domains part theoretical computer science pp 

michele axel nature events 
proc 
th symposium mathematical foundations computer science lncs 
pratt chu spaces complementarity uncertainty rational mechanics 
technical report summer school budapest 
manuscript available pub bud tex anonymous ftp boole stanford edu 
pratt modeling concurrency geometry 
proc 
th ann 
acm symposium principles programming languages pp 

pratt second calculus binary relations 
proceedings mfcs springer verlag gda poland pp 

scott completeness axiomatizability valued logic 
henkin editors proc 
tarski symposium ams pp 

vogler failures semantics interval congruence refinement 
lengauer editor proceedings stacs lncs springer verlag pp 

winskel event structures 
brauer reisig rozenberg editors petri nets applications relationships models concurrency advances petri nets part ii proceedings advanced course bad september lncs springer verlag pp 

winskel event structures 
de bakker de roever rozenberg editors rex school workshop linear time branching time partial order logics models concurrency noordwijkerhout netherlands may june lncs springer verlag pp 


