static slicing threaded programs jens krinke krinke ips cs tu bs de tu braunschweig abteilung static program slicing established method analyzing sequential programs especially program understanding debugging testing 
slicing method threaded programs handles interference correctly 
method calculates precise static slices 
extends known structures control flow graph program dependence graph threaded programs interference 
new technique require serialization threaded programs 
static program slicing established method analyzing sequential programs especially program understanding debugging testing 
today small programs parallelism method slice programs required 
dynamic slicing threaded concurrent programs researched authors 
approach static slicing threaded programs known 
drawback approach calculated slices precise handle interference 
interference data flow introduced variables common parallel executing statements 
approach problem precise algorithm static slicing threaded programs interference 
analysis programs statements may explicitly executed parallel new 
static analysis programs complicated execution order parallel executed statements dynamic 
testing debugging threaded programs increased complexity produce different behavior input 
nondeterministic behavior program hard understand finding harmful nondeterministic behavior harder 
supporting tools required 
unfortunately tools sequential programs applicable threaded programs cope nondeterministic execution order statements 
simple way circumvent problems simulate programs sequentialized serialized programs 
product programs possible execution order statements modeled path statements executed sequentially 
may lead exponential code explosion unacceptable analysis 
special representations parallel programs developed 
sections introduce notation threaded programs show extend control flow graphs cfgs program dependence graphs pdgs threaded pdgs base slicing 
problem static slicing threaded programs explained section algorithm slice programs 
sections related discuss 
threaded cfg common way represent procedures program control flow graphs cfg 
cfg directed graph node set edge set statements predicates represented nodes flow control statements represented edges written special nodes distinguished start node exit node represent procedure 
node predecessors node successors 
variables referenced node denoted ref variables defined assigned denoted def 
rest node statement interchangeable bijectively mapped path sequence 
node reachable node path 
transitive reflexive closure 
assume path cfg possible execution order statements program 
pick statements sequence witness possible execution 
definition call sequence 
nodes witness iff means sequence nodes witness nodes part path cfg order sequence 
path witness 
thread part program executed single processor 
threads may executed parallel different processors interleaved single processor 
model assume threads created cobegin coend statements properly synchronized statement level 
set threads 

simplicity consider main program thread sample program threads shown 
thread block statements thread block part main program threaded cfg extends cfg special nodes represent cobegin coend statements 
enclosed threads handled complete procedures represented cfgs embedded surrounding cfg 
start exit nodes cfgs connected nodes special parallel flow edges 
distinguish edges sequential control flow edge nodes parallel flow edge 
shows example program 
function returns node innermost enclosing thread 
example function returns node set threads execute parallel execution 
definition witnesses cfgs may applied 
take possible interleaving nodes account extend definition definition sequence 
nodes threaded witness iff 
subsequence 
nodes removed 
cobegin coend 
threaded program start 
start start exit exit exit control flow parallel flow threaded cfg start 
start start control parallel flow data dependence control dependence interference dependence threaded pdg intuitively threaded witness interpreted witness sequentialized cfg 
definition assures sequence nodes part different threads witness different threads 
ordinary witness automatically threaded witness 
example threaded witnesses 
sequence ordinary witness sequence 
threaded pdg program dependence graph transformation cfg control flow edges removed kinds edges inserted control dependence data dependence edges 
definition node called data dependent node 
path cfg 

variable def ref 
nodes path def 
node called postdominator node path exit go node called path start go typical programs statements loop bodies loop entry loop exit 
definition node called direct control dependent node 
path cfg 

postdominator node 
postdominator pdg consists nodes cfg control dependence edges cd nodes control dependent nodes data dependence edges dd nodes data dependent nodes definition node called transitive dependent node 
path 
control data dependent 
witness cfg note composition control data dependence transitive dependence dependence implying path definition control data dependence 
attempts define threaded variants pdgs 
best knowledge explicitly represents dependences result interference 
interference occurs variable defined thread referenced parallel executing thread 
example interference variable value statement cobegin cobegin coend coend program nested threads may value computed value statement may value computed statements properly synchronized value 
definition node called interference dependent node 
may potentially executed parallel 
variable def ref dependences threads executed parallel ordinary data dependences 
dependences introduced interference handled normal data dependence normal dependence transitive interference dependence 
transitivity data control dependence results definitions sequential path dependent nodes demanded 
composition paths cfg results path 
interference dependence transitive statement interference dependent statement interference dependent dependent iff possible execution statement executed sequence statements threaded witness 
example statement interference dependent statement turn interference dependent statement possible execution executed interference dependent threaded witness 
threaded program dependence graph consists nodes edges addition control data interference dependence edges 
contrast standard pdg control flow edges start start start control parallel flow data dependence control dependence interference dependence removed need control parallel flow edges reasons explain 
usual exit nodes removed control parallel flow edges adapted accordingly 
example shown 
complicated structures loops nested threads may handled way 
example shown 
data interference dependence edge statement statements threads may executed parallel interference dependence 
statements threads may executed sequentially different iterations enclosing loop 
technique calculate edges scope papers calculated standard algorithms 
simple version assume existence boolean function parallel returns true possible nodes execute parallel see overview ways calculate function 
interference dependence edge id inserted variable defined referenced parallel true 
slicing slicing pdg sequential programs simple graph reachability problem control data dependence transitive 
definition backward slice sequential pdg node consists nodes transitively depends node called slicing criterion 
definition may easily implemented graph reachability algorithm 
interference dependence transitive definition slice pdgs valid standard algorithms really applicable 
basic idea approach stems simple observation path pdg witness corresponding cfg node reachable node pdg reachable corresponding cfg 
hold threaded variants 
definition slice establishes similar property demands contains threaded witness node slice slicing criterion 
definition backward slice node consists nodes transitively depends 

cd dd threaded witness slice statement example program shown framed nodes 
responsible edges drawn thicker style 
note interference edges statement force inclusion statement slice reachable 
standard slicing algorithm include statement slice albeit correct inaccurate 
algorithm slice sequential programs simple reachability algorithm 
easy transform definition threaded slice algorithm calculation threaded witnesses costly 
classical definition slice subset program change behaviour respect criterion program correct slice 
interference modelled normal data dependence resulting slices correct 
input slicing criterion node output slice set nodes initialize worklist initial state tuple 
worklist slice repeat remove element examine reaching edges edges cd dd normal dependence threads reset exited threads execute parallel calculated mark calculated edges id inclusion edge results threaded witness calculated mark calculated worklist empty 
slicing algorithm different slicing algorithm 
basic idea coding possible states execution threads tuples 
nodes value represents node reached execution thread possible reach node value restrict state execution 
keep track nodes thread left interference edge 
follow interference edge back thread node able check reachable assures paths interference edges threaded witnesses 
reason keep control parallel flow edges 
denote extraction th element tuple 

substitution th element tuple 
value denoted 
algorithm keeps worklist pairs nodes state tuples examined 
edge reaching node examined handled dependently type 
case control data dependence edge new pair consisting source node modified state tuple inserted worklist 
new state tuple source node actual state thread 
edge crosses threads state left threads 
case interference dependence edge 
may considered state node source node thread reachable source node examined paths threaded witnesses 
new pair updated state tuple inserted worklist 
resulting slice set nodes constructed elements inserted pairs 
demonstrate application algorithm calculate backward slice node worklist initialized element 
element immediately removed worklist edges reaching examined 
edge cd cross threads state thread updated created element inserted worklist 
edge dd cross threads state exited threads reset 
creates new element 
edge id creates state 
step forward calculation assume worklist 
edges reaching 
dd crosses threads creates element 
element visited inserted worklist 

cd cross threads inserts element worklist 

id condition fulfilled edge ignored 

id condition fulfilled edge ignored 
third step edge ignored destroy property node slice part threaded witness 
condition step may relaxed drop assumption program properly synchronized statement level 
remaining calculations 
cd dd id cd dd cd dd visited cd id fulfilled id fulfilled cd cd worklist edge reaching exists cd worklist cd visited calculation assume analyzed programs threads algorithm similar sequential slicing algorithm 
case second iteration interference dependence edges executed worklist contain tuples form node pdg 
standard slicing algorithm pdgs special case algorithm time space complexity case 
threaded case reachability calculated iteratively 
determines worst case time complexity number interference edges traversal edges force visit nodes may reach source edge 
worst case exponential number interference dependence edges 
believe number interference dependence edges small program interference error prone hard understand debug 
required calculation time time required analyze serialized programs 
related variations program dependence graph threaded programs parallel program graphs 
unusable static slicing 
dynamic slicing threaded concurrent programs approached different authors surveyed 
approach static slicing threaded programs known author cheng 
introduces dependences specialized interference dependence 
needed variant pdg program dependence net pdn 
selection dependence special kind control dependence synchronization dependence mixture control data dependence 
interference dependence similar communication dependence dependence introduced explicit interprocess communication 
pdn vice versa graphs similar number nodes edges 
cheng defines slices simply graph reachability 
resulting slices precise take account dependences parallel executed statements transitive 
integration technique slicing threaded programs slicing threaded object oriented programs problem 
extended versions control flow program dependence graphs threaded programs called threaded control flow graph threaded program dependence graph 
similar extensions cfg threaded programs 
new captures interference threaded programs 
able calculate better static slices threaded programs previous approaches 
believe programs threads static slicing important 
plan extend method handle procedures 
algorithm works intraprocedural 
known techniques interprocedural slicing integrated straightforward 
synchronization 
simplicity assumed implicit synchronization analyzed programs 
plan integrate explicit synchronization similar 
different threads 
cobegin coend model sufficient model different types parallelism 
planning extend technique different kind threads fork join 
object orientation 
problem slicing object oriented programs orthogonal slicing threaded programs integration slicing object oriented programs possible similar techniques 
goal integration technique slicing tool sequential standard programs 
tool able generate simplify path conditions program slices develop new constraints stemming threaded program path conditions obtain better slice accuracy 
acknowledgments author wishes gregor snelting torsten robschink especially bernd fischer helpful support 
funded fur und forschung 
cheng 
slicing concurrent programs 
automated algorithmic debugging st intl 
workshop lncs 
cheng 
dependence analysis parallel distributed programs applications 
intl 
conf 
advances parallel distributed computing 

choi miller netzer 
techniques debugging parallel programs analysis 
acm transactions programming languages systems 
duesterwald gupta soffa 
distributed slicing partial re execution distributed programs 
th workshop languages compilers parallel computing lncs 
ferrante ottenstein warren 
program dependence graph optimization 
acm transactions programming languages systems 
snelting 
durch program slicing und constraint solving 
des bmbf berlin 
horwitz reps binkley 
interprocedural slicing dependence graphs 
acm transactions programming languages systems 
knoop steffen 
parallelism free efficient optimal bitvector analyses parallel programms 
acm transactions programming languages systems 
korel ferguson 
dynamic slicing distributed programs 
applied mathematics computer science 
korel laski 
dynamic program slicing 
information processing letters 
larsen harrold 
slicing object oriented software 
proc 
th intl 
conf 
software engineering 
mcdowell helmbold 
debugging concurrent programs 
acm computing surveys 
miller choi 
mechanism efficient debugging parallel systems 
proc 
acm sigplan conf 
programming language design implementation 
ottenstein ottenstein 
program dependence graph software development environment 
proc 
acm sigsoft sigplan software engineering symposium practical software development environments 
sarkar simons 
parallel program graphs classification 
proc 
th workshop languages compilers parallel computing lncs 
snelting 
combining slicing constraint solving validation measurement software 
static analysis third intl 
symposium lncs 
tip 
survey program slicing techniques 
journal programming languages 
seki 
hypersequential programming 
ieee concurrency july september 
weiser 
program slicing 
ieee transactions software engineering 
zhao cheng 
static slicing concurrent object oriented programs 
proc 
th ieee annual intl 
computer software applications conf 
