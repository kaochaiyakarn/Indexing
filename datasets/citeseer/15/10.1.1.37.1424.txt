th acm sigops european workshop pc new challenges operating system september th th denmark 
www diku dk ew 
increasing relevance memory hardware errors case recoverable programming models milojicic alan james fu alberto munoz hp labs page mill road ms palo alto ca hpl hp com common belief computer system failures nowadays stem programming errors 
computer systems complex harder maintain administer making software errors common case contemporary computer architectures optimized price performance availability 
raise case increasing relevance memory hardware soft errors 
particular bit processors memory scaling significantly increased resulting higher probability memory errors 
time due ubiquitous computers higher altitudes environmental conditions impact errors terrestrial cosmic rays 
shared memory systems failure node memory take machine 
current commodity systems tolerate memory errors commodity hardware processors memories interconnects software operating systems applications application environments 
time users expect increased reliability 
problems errors solutions memory error recovery processor operating system programming model level 
demand increased performance high availability commodity computers increasing ubiquitous computers internet services serve 
commodity systems tackling performance issues availability received attention 
common belief software sw errors administration time continue probable cause loss availability 
failures clearly commonplace especially desktop environments believed certain hardware hw errors probable 
processors caches memories larger faster dense increasingly ubiquitous adverse environments high altitudes space industrial applications 
ziegler shown changes lead increased transient errors cmos memory due effects cosmic rays approximately fit fit equals failure mbit dram 
tandem indicates errors apply processor cores chip caches modern die sizes voltage levels 
claim processors cache main memory susceptible high transient error rates 
typical processor silicon soft error rate fit approximately affect processor logic large chip cache 
due increasing speeds denser technology lower voltages errors probable single hardware component failures 
increasing evolution larger tightly interconnected commodity machines sun enterprise machines probability soft errors error containment problems increases 
soft error probability increases due increased system scale due increased number components memory access path 
machines memory path soft errors introduce error containment problems form software error containment lead complete loss availability 
techniques error correction codes ecc main memories interconnects correct errors ecc 
unfortunately techniques help reduce visible error rates semiconductor elements covered codes large storage elements 
raw error rates increasing technological progress complicated interconnected memory subsystems ecc unable address soft error problems 
example gb memory system mbit drams combined visible error rate fit single error correct double error detect sec ded ecc 
equivalent errors machines years 
unfortunately current commodity hardware software provide little support recovery errors covered ecc detected 
problems considered mainframe technology years field commodity hardware currently cost effective provide full redundancy support order mask errors 
burden falls commodity hardware software attempt handle errors highest availability 
contemporary commodity computer systems providing performance pay little attention availability issues resulting errors 
example ia architecture supports ecc main memory system requiring system reboot errors covered ecc 
consequently commodity software os middleware applications unable deal problem 
commodity processor architectures may provide support detect notify system probable errors 
instance upcoming ia processors recoverable general case offer support certain limitations 
problems errors context support ia hardware 
propose certain software techniques different levels firmware operating system applications allow availability maintained software 
rest organized follows 
section describes related 
section recovery memory errors 
describe ia recovery model section os recovery section recoverable programming models section 
section summarize 
related availability computer systems determined hardware software reliability 
hardware reliability traditionally existed proprietary servers specialized redundantly configured hardware critical software components possibly support processor pairs ibm parallel tandem nonstop 
supports hot swap execution redundant shared disk system software error detection fail restart 
tandem supports redundant fail processors nonstop kernel middleware provide improved integrity software stack 
systems provide full automatic support mask effects data resource loss 
rely reliable memory fail direct memory error recovery 
approach fault containment recovery node granularity 
systems node kernel 
node fails recover continue provide services 
systems type include early cluster systems numa architectures hive 
hardware faults difficult catch repeat 
lot research development emulation injection hardware faults 
faults injected specially designed hardware software 
give survey comparison different injection methods 
software reliability difficult achieve commodity software extensive testing detect error log state interpret state attempt recovery notify level recovery complete fail error recovery 
errors detected typically hardware error state logged interpreted recovery attempted 
unsuccessful level may notified 
quality assurance 
commodity software fault recovery evolved far 
operating systems support form memory protection units execution detect prevent wild read writes 
commodity operating systems tackled problems memory errors taken software reliability research general 
examples include windows linux 
typically rely failover solutions microsoft 
lot undertaken fault tolerant community regarding problems reliability recovery software 
include techniques checkpointing backward error recovery 
lot conducted context distributed systems single systems 
techniques efficient recoverable software components rio file cache recoverable virtual memory rvm 
rio takes interesting software approach fault containment aimed fault tolerant file cache general uses 
instrumenting access shared data structures memory protection operations wild access shared data structures improbable 
containment software techniques viewed similar concept motivate general investigation framework recovery 
memory errors recovery overview ideal solution hardware replicated processors able detect notify recover hardware errors affected operations restarted errors recovered 
way errors masked hardware higher levels software need aware errors 
unfortunately expensive high servers partially provide form support commodity systems provide little support rely software recover errors 
believe software needs recover errors different levels pre detect memory error hardware firmware os application processor specific platform specific mca specific os specific log uncorrected gather info gather info registers notify fw notify level notify level gather info notify level gather info notify level memory failure recovery scenario 
memory error typically detected hw parity error logged 
error contained notified fw 
fw gathers information attempts recovery 
recovery performed processor platform level 
recovery possible state prepared os notified 
os attempts recovery mca os level 
case successful os recovery application notified relevant state 
application analyzes state attempts recover 
arrows optional 
sented 
error typically detected hardware level interpreted logged needed level notified 
interpret log notify phases repeated different levels error recovered determined non recoverable 
order events firmware fw level split processor platform specific os level machine check abort mca serious error exception os specific 
systems don support full chain recovery application 
provide little error detection indicated shaded portion subsequent tables 
steps lead recovery described detail table 
hardware typically detects errors timeout memory access parity error illegal machine state 
hardware detect errors possible software detect inconsistent data usually resulting silent data corruption typically represented form invalid pointers incorrect checksums 
hardware logs error registers error corrected notifies firmware raising mca uses erroneous data 
erroneous data raises notification accessed postponing recovery data 
firmware determines contain error notifies os 
currently software recovery done existing systems believe framework continue allowing os application attempt distinguish error type criticality order determine error table failure recovered different system levels 
level timeout par hardware ity illegal machine state recovery detect interpret log notify write registers distinguish failure translate firmware type criticality hw state thread restartable fw state sw detected distinguish failure translate os data type criticality fw state tency os app thread os state sw detected distinguish failure translate apps data type criticality os state tency data lost app state eager raise mca signal lazy erroneous data raise os mca raise app exception alert user application specific gather info recoverable 
part logging state translated levels parity error converted physical page enqueued bad page list 
outcome recovery hierarchy full partial recovery system failure see table 
full recovery effectively masks errors higher levels error may logged statistical purposes action needed higher levels 
case recovery possible system halted rebooted prevent corrupt data propagating network disk 
ia recovery model processors machine check notifies execution serious error leaves processor undefined state requiring system reboot due loss containment 
ia architecture extends recoverability machine checks providing types defined error scenarios 
provides potential information allow software containment error 
ia complex architecture 
current processor implementations mckinley support completion memory operations speculative prefetching advanced instruction retirement exposed vliw long instruction word architecture 
leads difficulties providing full error detection handling remaining cost effective due extra complexity 
order isolate software implementation dependencies ia architecture abstracts machine check handling 
allows implementations support different detection logging maintaining architectural interface 
ia architecture defines flags describe state error processor table memory failures recovery outcome read horizontally 
level hardware mask errors full recovery recovery partial recovery system failure halt downgrade performance functionality halt reboot firmware mask error notify os notify os reboot os notify app continue execute os kill user thread reboot continue execute application application notify user terminate table description ia machine check system state 
flag description storage integrity synchronized machine check isolated storage damage hardware damage loads stores machine check occurred appear occurred 
flight operations completed tagged erroneous incomplete restartable re issue 
machine check isolated system may may recoverable 
error contained storage hierarchy may contain corruption 
non essential hardware damaged processor continue run degraded performance 
presence machine check see table 
depending processor platform implementation combination flags signalled operating system processor firmware 
storage integrity synchronized execution storage damage contained repercussions software processor quite severe 
current execution may restartable corruption may occurred state user kernel space 
believe cases scope software recovery especially probable error cases 
containment may lost corrupt state may propagated system hierarchy 
table gives outline typical kinds error handling ia system 
current commodity systems support software level recovery certain classes hardware faults leaving recovery firmware hardware 
enables simple recovery common cases sufficient information level available 
cases execution believe recovery insufficient level requires semantic information operating system application levels 
architectural assertion identify exactly effects loss containment recover shaded area 
ia firmware os interface possible techniques believe extend recoverability cases processor implementations lose containment 
center techniques additional containment information recovery errors 
additional information higher level recovery may improved techniques 
determine error affected user kernel space 
backtrack execution point locate erroneous execution ia recovery may improved techniques 
susceptible versions instruction sequences 
checkpointing execution table error detection containment recovered ia system recovery level detection interpretation containment recovery single bit ecc certain types hw signals memory ecc memory access platform side hardware form error log bus errors inter instruc 
access effects ging information connect exceptions instruc 
firmware implementation sensitive error specific error cases information mask report nested errors os architectural error critical error info 
os data struc os error info 
app 
recovery error effects possible notify units execu localized tion threads terminate processes reboot applications error transaction error tion info 
os errors single transaction restart operation important part analyze ia implementations determine error scenarios effects system state 
wish determine probable scenarios typical executions 
allow focus investigation techniques improve availability probable beneficial 
memory errors operating systems error recovery os level attempt improve availability kernel containment recovery process thread granularity 
complete error masking support os level large complex task attempt recover errors 
believe availability effectively improved os awareness containment probable errors recovery critical data structures 
increase availability effective passing rare errors requiring complex recovery application rebooting system severe 
machine checks recovered lower levels require form os localization dependencies notification potential application recovery containment potential termination dependent execution 
localized system survive depends state system respect current execution 
execution state may classified order increasing complexity recovery 
user threads accessing user data 

kernel threads restartable idempotent modify kernel state get time day 

kernel threads modifying non critical kernel data copy buffers holding critical locks 

kernel threads inside critical sections errors transaction replica 
believe intend investigate states cover large number error scenarios require traditional reboot 
lead application recovery exists kernel assisted retry containment execution termination recovery fails 
data structures taylor aims critical data structures resilient asynchronous notification errors errors data structures 
support aims enable roll back re execution errors contained replication data corruption recovery 
critical data structures help reduce important problem memory errors silent data corruption 
tandem details errors caught ecc cause potential data corruption 
detected illegal instructions invalid computation benign locations accessed cause silent data corruption 
critical data structures reduces probability affecting os causing reboot 
recoverable programming models section investigate software firmware os application react errors 
task hardware detect errors log event notify errors firmware operating system masked 
hardware mask error action required system software software needs aware error needs react accordingly 
compare programming models hardware support models attempt find appropriate tradeoffs optimal balance 
simplest model software perspective errors masked hardware 
case programming model requires changes 
programs errors concern 
hardware mask errors needs expose level hierarchy 
ways different repercussions software model 
simplest software wise approach hardware notify software exact restartable manner raising signal interrupt ia definition guaranteed exact restartable interruptions 
software react signal invoking exception handler 
handlers minimal impact software extension existing code 
error notified exact manner notification delivered asynchronously case ia mca software needs offer increasing software support table recoverable shared memory programming models hardware support reasonable match empty entries powered 
increasing hardware support software model logging hardware support async 
notification synch 
notification reliable hardware recovery exception handler transactions checkpointing polling errors mem access support recovery 
achieved terms structured exception handling code excerpt order able restart memory transaction required part kip clause sufficient architectural state saved addition guaranteeing completion operations clause 
support notification notification guarantees sufficient asynchronous notification delivery guarantee recovery hardware logging errors combined software polling errors described details omitted disabling notifications enabling logging table compare different programming models match hardware support 
columns describe increasing hardware support logging errors async 
notification sync 
notification reliable hardware 
rows describe increasing complexity software support recovery case exception handlers structured exception handling polling errors 
table entries capital mark reasonable match software hardware 
small marks possible powered model hardware provides support utilized programming software model 
empty entries describe forbidden powered cases hardware provide sufficient support proposed recoverable programming model 
table compare programming models perspective code complexity performance error proneness application error awareness suitability os applications need extra hardware 
intuitively hardware support available software support needed table recoverable programming models comparison programming model legacy complexity performance characteristic impl 
error prone application error awareness os app 
suited recovery change fast app exception handler transactions checkpoint min 
change relatively complex expensive save arch 
state modest save partial state minimal small extra hw feature fairly poll error complex slow os 
ery better performance error prone implementation model 
hardware support awareness errors required software 
alternatively aware software extra hardware support required 
complex software support potentially applicable os level typically appealing applications 
summary position emphasized case recovering memory errors commodity systems 
common belief software errors dominate errors 
acknowledging fact believe ia systems significantly larger memories ubiquitous computers high altitudes increasing complexity multiprocessors commodity interconnects probability memory errors significantly increase expectations users 
overviewed current state ia processor support errors os support compared recoverable programming models 
believe recovery memory errors important requirement commodity systems tomorrow clear understanding processor architecture os application support needed systems require high reliability 
important point recovery aspects discussed existed mainframe technology years 
contribution address issues commodity hardware software resulting suggested framework compose distribute recovery functionality commodity hardware software improved availability 
consist understanding behavior ia experimental improvements os architecture susceptibility errors continued research tradeoffs recoverable programming models 
acknowledgments indebted valentin anders john dan todd mike tom john wilkes reviewing contributing project 
comments significantly improved content presentation 
bartlett nonstop kernel proceedings eighth symposium operating systems principles asilomar ca pp dec 
brown pradhan processor memory checkpoint rollback recovery ieee computer pp feb 
chapin hive fault containment shared memory multiprocessors proc 
th sosp dec pp 
extending smp envelope ieee micro january february pp 
chen rio file cache surviving operating system crashes proc 
th asplos pp october 
compaq product description tandem nonstop kernel 
download feb www tandem com prod des pd pd htm 
dell white benefits correct ecc pc server main memory ibm microelectronics division nov 
gray reuter transaction processing concepts techniques morgan kaufmann 
tsai iyer fault injection techniques tools ieee computer pp april 
intel ia architecture software developer manual volume intel intel 
kanawati ferrari flexible fault error injection system ieee transactions computers vol pp feb 
kao fine fault injection monitoring environment tracing unix system behavior faults ieee se vol pp november 
kermarrec recoverable distributed shared memory integrating coherence recoverability proc 
th ftcs pp june 
lampson hints computer system design proc 
th sosp october pp 
nick cluster technology parallel ibm systems journal vol pp 
pfister search clusters prentice hall 
satyanarayanan lightweight recoverable virtual memory 
proc 
sosp pp dec 
tandem compaq data integrity compaq nonstop servers white 
taylor redundancy data structures improving software fault tolerance ieee se vol pp 
hardware fault containment scalable shared memory multiprocessors proc 
th isca pp june 
ziegler ibm experiments soft fails computer electronics ibm journal vol pp january 
ziegler terrestrial cosmic rays ibm journal vol pp january 
