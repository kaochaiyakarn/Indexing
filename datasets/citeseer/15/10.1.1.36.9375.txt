program understanding tool type inference robert callahan daniel jackson school computer science school computer science carnegie mellon university carnegie mellon university forbes avenue forbes avenue pittsburgh pa usa pittsburgh pa usa roc cs cmu edu cs cmu edu determining statically structure program requires sets variables share common representation identify data types detect abstraction violations find unused variables functions fields data structures detect simple errors operations datatypes locate sites possible value 
compute representation sharing type inference types encode representations 
method efficient fully automatic smoothly integrates pointer aliasing higher order functions 
show prototype tool answer user questions line program written keywords restructuring abstraction representation interesting properties programs described terms constraints underlying representation data values 
example value instance data type client code constrain representation 
program requires representations supposedly types abstraction violation 
obviously value variable program places constraints representation 
furthermore communication induces representation constraints necessary condition value defined site values representation extending notion representation encode kinds useful information 
shall see example refinement treatment pointers allows reads writes distinguished storage leaks exposed 
show generate solve representation constraints solutions find data types detect abstraction violations identify unused variables functions fields data structures detect simple errors operations datatypes failure close open locate sites possible value display communication relationships program modules 
new type system representation information encoded types express representation constraints type constraints obtain solve type inference 
type inference algorithm computes new types variables textual expressions program actual usage languages may allow single value viewed having different types different points program example implicit coercions 
just views single underlying representation meaningful transmission data agreed common representation 
role primitive operations ignores explicit type declarations 
type system underlying analysis different type system source language allows finer distinctions language type system allow handle potential sources imprecision type casts flexible way 
inferred types amount set representation constraints 
variable textual expression interest examine inferred type draw variable usage behavior finding occurrences type values share representation track propagation aliasing relationships global program 
type inference attractive basis analysis reasons 
fully automatic 
elegantly handles complex features rich source languages recursive pointer data structures function pointers 
type system straightforward elaboration standard type system employ standard inference algorithm minor adaptation confident soundness scheme 
algorithm known time complexity worst case practice performance excellent 
implemented compilers standard ml proved bottleneck 
application demanding contrast ml counterparts programs important get notions type confused 
normally referring types specialized type system 
rarely recursion pass functions 
tool usually consumes space time little linear size program analyzed 
built tool called demonstrate feasibility applying type inference analyses programs program understanding tasks experiment kind quality information available 
general architecture tool shown 
multiple downward arrows indicate modules processed individually fed database fat upward arrows show information entire system passed 
remaining sections describe type inference system results applying tool reallife program discuss user interface issues 
system advantages tools know analyzing source code program understanding see 
lexical tools grep rigi reflection model tool lack semantic depth fail capture effects aliasing vital understanding manipulation data large programs 
dataflow tools vdg slicer scale handle large programs 
code checking tools lclint try high level views large system 
furthermore lclint compute semantic information framework accurate global analysis 
example consider trivial program 
suppose programmer interested value pointed analysis determine contents may value value pointed preprocessor parser type inference code parse tree constraint generator intermediate code database constraints translator constraints query engine signatures postprocessor signatures output user query tool architecture tool semantic depth global display scalability grep rigi rmt vdg slicer lclint tool feature comparison result query argument copied referenced variables program 
analysis determine relationship occurs call tool display information graphically 
analysis example analysis assigns extended types variables types encode information representations 
declared type variable usually determines representation simply matter convenience 
program operate correctly different representations int provided version int semantics consistently intuitively determine consistency augmenting declared type representation type checking program 
shows consistent augmentation trivial program 
names superscripted capital letters indicate polymorphic type variables choice representations int int function typecheck just different versions choice int int free assign different representations 
note global variable argument polymorphic representation fixed different calls observations introduce context sensitivity analysis polymorphic type variable may instantiated differently different call sites 
type signatures extract information behavior functions connected 
example allows course propose implementing scheme 
merely pedagogical device 
different representations values pointed conclude cause locations aliased copy values 
examining calls body shows data flows functions 
interested tracking contents passed simply look occurrences type int includes occurrences int occurrences int instantiated int call 
find values may propagated contents arguments furthermore suppose specify arguments primitive arithmetic operations representation int consistent 
intended file descriptor see annotated type arithmetic operations performed type int conclude abstraction preserved 
motivation type inference reduce incidental sharing representations lead spurious connections compute general assignment representations variables consistent communication patterns program 
viewing representations types problem type inference 
program type inference proceed follows 
type int type int assignment type type int type types pointer int 
unconstrained type int observe int int void int int int int void int int int int int int trivial program int int void int int int int void int int int int int int trivial program annotated representations choices int int arbitrary polymorphic int int perform arithmetic type int int int find type int analyzing function calls obtain types function actual arguments instantiating polymorphic type variables formal arguments 
call instantiate int fresh variable int int fresh int find type int int int pointer int respectively 
simultaneously int int set int int second call instantiate int fresh variable int int fresh int find type int int int pointer int 
int int arbitrary choices previous derivation valid possible values int int polymorphic arguments 
note type int int arbitrary fixed intuitively different versions different representations destroy sharing implied global data 
set int arbitrary representation int maximum generality choice unique 
type inference inference procedure formalized simple polymorphic type system 
monotypes obey productions monomorphic type polymorphic quantification type variable function ref pointer tuple int scalar metavariable ranges infinite set type variables 
ignoring tags described completely standard polymorphic type system 
standard inference algorithm compute types variables source program initial type declarations 
roughly speaking works assigning variables types unifying type expressions program structure requires manner described informally 
defined simple functional fact number type includes integer floating point values int simplifies presentation 
language provide translation language see technical report details 
computes type language construct proceeding structural induction syntax tree 
constructs statements associated value assigned special type 
type assigned construct inference rule 
shall illustrate contrived rules give flavor analysis tool directly constructs 
rule assignment assignment means order compute type assignment operator satisfy constraint rule antecedent common type conclude result assignment type allows chained assignments 
detect assignment operator introduce constraint type 
rule equality tests similar equality test result comparison need type comparison arguments constraint type 
require result boolean interested relationships variables type checking se 
dereferencing pointer converts expression type type expression type ref dereference statement imposes special constraints rule necessary simply invoke recursive application inference rules constituent statements rule function call expected types actual formal arguments matching constrained continuation function type takes dummy argument returns type result enclosing function 
see technical report details 
binary function call tags note type expressions productions include superscripted tags marked track identity type constructors 
fresh tag generated type constructor introduced new constraint 
find types constrained identical unify type constructors merge tags tags partition set occurrences type constructors 
example variables ref constructors different tags aliases variables tuples tag structures type abstraction violations occurred 
tags simple implement top algorithm treated merely extra parameter type constructor change algorithm required 
supply type signatures built primitives library functions called signatures information external code require 
signatures result analysis techniques modular contributes scalability 
adjusting signatures customize analysis compute different kinds information 
basic signatures listed appendix 
interesting signature cast operator 
treat cast identity function hope casts merely lack polymorphism type system program typable type system 
true handle program albeit loss accuracy report type errors display context continue analysis 
user able check results interested compromised 
example lines just bad type casts affected results queries user requested 
reader familiar type theory may interested details 
recursive types treated infinite see steensgaard points analysis 
similarly comparing tags function types tags declared functions gives analysis higherorder control flow 
polymorphic type system complicated relation just tag equality see 
regular trees see coppo details 
polymorphic recursion letrec bindings places perform polymorphic generalization 
value restriction polymorphic lets side effects safe 
representation tags correspond closely region variables region inference 
obtaining displaying global information result type inference phase mapping source variables functions type signatures extended type system 
provide ways extract interesting information display graphically way clear relationship source program 
basic approach produce graph summarizing information single component variable see 
nodes graph represent global declarations edges represent declaration text program 
arrows point declarations declarations 
tool determined inspecting signatures see transmit value queried component omit corresponding edge 
eliminating unreachable nodes show just part program able access value 
value transmitted passing data structure containing parameter function call returning data structure function call referencing global data containment includes reachability pointers 
inspection signatures filter edges works follows 
user specified global variable function result function parameter local variable component thereof chain pointer dereferences structure fields 
accesses run time values component agree representation types components accesses tags compatible tag type queried component 
monomorphic type system compatibility relation just tag equality polymorphism consider polymorphic tag may instantiated tag means run time value accessible different tags 
example value accessed tags 
define tags compatible tag program exhibits chain instantiations chain instantiations chains may empty 
note relation symmetric transitive 
example compatible compatible result infer values may passed determine set tags interest compatible tag queried component locate declarations signatures contain occurrences tags interest 
declarations signatures contain occurrences tags interest transmit interesting values uses omitted graph 
polymorphic signatures instantiated different types different usage sites omit uses type usage site contain tags interest 
difficult tradeoff detail clarity choosing kinds information display node edge 
useful visually distinguish functions global data highlight nodes interesting example functions directly access representation variable 
clearly beneficial interactive display plan add 
obtaining local information type inference compute local information 
example wish determine function directly accesses piece data just passing function 
apply type inference single global function ignoring constraints induced global declarations 
example determine definition map mgr convert pixel coords directly access representation vehicle object calls function 
results tool analyze robot vehicle control program consisting lines code functions global variables 
restructured adapted support new features 
developer responsible asked determine certain structures 
course answering questions highlighted representation exposures 
computed results queries form functions program directly access representation component variable 
shows results query current vehicle field map manager global global variable allow queries involving local variables function parameters 
shaded nodes definitions directly access representations code constrains representation value question 
case value question structure shaded nodes constrain type accessing fields structure 
veh functions operations vehicle data type easy see abstraction may violated functions map mgr process image map mgr process geometry range window map mgr comp range window 
built constraint database lines source seconds wall clock time 
database mb 
type inference took seconds seconds user level cpu time 
individual queries answered instantaneously 
numbers mhz pentium mb ram running windows nt 
discuss certain optimizations dramatically improve performance 
process building database carried map mgr process image veh free queues map mgr comp range window map mgr process geometry range window veh copy world destroy map manager global veh get old mast body trans veh get adaptation speed veh get max safe veh get turn react time phys io event dispatch veh get plan window map mgr convert pixel coords world create map manager global cur veh independently source module potential performance bottlenecks solver 
type inference algorithm processes functions time iteratively computing signature function adding type environment 
processing function main operation unification types cost proportional smaller sizes descriptions types number unifications performed proportional size code body function preserved constant factor translator 
size inferred types bounded solver takes time space little linear size program 
types small practice 
attempt characterize sizes query results computed possible query upper bound approximation number nodes graph produce see 
maintain equivalence classes type variables union find path compression superlinear component inverse ackermann function 
practical purposes show sizes results queries pointers structures scalars respectively 
large spikes right hand sides due set integer variables grouped chains arithmetic operations queries hit set queries integer valued components probably produce information useful 
queries structures pointers produce results manageable size 
extensions type system analyze broader range program properties extending type system simple ways 
example useful know memory location read written piece storage allocated deallocated effects occur 
encode properties introducing specialized type constructors subtype relation see 
primitives assign deref constrain arguments written refs read refs respectively 
easy implement properties vector boolean values constraints form approximate number nodes graph frequency distribution graph sizes queries approximate number nodes graph frequency distribution graph sizes queries pointers approximate number nodes graph frequency distribution graph sizes queries structures approximate number nodes graph frequency distribution graph sizes queries integers property true simply existing type inference procedure attach additional parameters type constructors boolean 
operations constrain property arguments results special type appropriate parameter type constructor type variable 
example give pointer type read written ref signature deref ref 
type inference finished signatures functions local global variables easily inspect discover anomalous types memory locations read read parameter type variable dynamic storage may allocated deallocated allocated parameter deallocated parameter type variable 
condition interest written form includes examples report anomaly exists assuming dead code call primitive operation program input cause executed 
type property call primitive operation constrains type property dead code execution invokes operation run time value property 
type property operation constrains properties true solution recover general solution 
example may discover program consistent memory location read unread case may legitimately treat unread eliminate offending variable structure element 
type run time value obtain property report spurious anomalies give upper bound approximation actual site problems occurrences type tag described 
course may anomalies depend control paths taken program 
results techniques perform specialized analyses detection data read detection memory leaks 
correspond checking type memory location location created variable entering scope dynamic allocation read location dynamically allocated dynamically deallocated 
reported candidates shown non spurious manual inspection source code 
reported global variables local variables read 
addition reported local variables structures containing fields read 
checking memory leaks reported global variables refer dynamic data structures freed 
cause problems practice freed operating system process terminates symptom poor programming style 
discovered fields data structures pointers memory freed 
genuine problem pointers updated frequently executed loop 
current status front currently written pccts toolkit 
database simply sequential binary file implemented hand solver query engine written currently query language simple bit unwieldy 
query engine outputs relational tables text format 
perl script converts tables graph process performing postprocessing analyses described 
dot graph drawing tool produce graph 
performance currently greatly improved 
particular recursive descent parser rewritten lalr parser speed 
gain lot performance cost flexibility simplicity eliminating intermediate language generating constraints directly syntax steensgaard 
importantly ref ref read ref written ref read written read write attributes memory locations arrows point supertypes subtypes simplifying constraints front produce order magnitude saving size database processing time solver 
important solver potential performance bottleneck number source files increases 
tool easy need better query interface preferably providing program source code context 
tables output query engine large suggesting postprocessing folded query engine reduce output parse time 
biggest problem graph drawing program dot 
scale large systems 
explore interactive visualizations techniques data useful way 
intend experiment alternative type systems 
may able incorporate type inference ill behaved programs 
encode information types increase scope accuracy techniques 
interesting problem enrich type system handle wider class source languages example adding subtyping objectoriented languages 
related basic analysis technique similar region inference tofte improve space efficiency implementations functional languages 
store partitioned distinct regions value associated region way associate values representation types analogue approximation side effects functions 
knowledge techniques program understanding 
researchers investigating type inference methods inferring properties programs 
steensgaard presents method type inference yields linear time points analysis 
algorithm monomorphic context insensitive distinguish elements compound structures variants constructed overcome limitations 
wright cartwright polymorphic type inference analyze scheme programs 
system similar infer type information relying declarations infer types richer type system language provides 
extension vectors attributes simple case unions prime types 
try distinguish different occurrences type constructor 
griswold star diagram tool aids encapsulating data types 
assume single global variable abstracted discuss extending method operate data structures multiple instances 
consider operating data structures certain type comment potential shortcoming approach data structures representation type particularly arrays sufficiently different purposes really instances type abstraction 
method provides answer problem 
muller proposed reverse engineering technique static analysis performed graphical output visualized manipulated user help various automatic tools reveal impose structure 
analysis powerful incorporated rigi tool certainly benefit greatly visualization manipulation techniques 
lclint tool finds inconsistencies programs simple specifications 
overlap properties able check example abstraction violations unused data methods simultaneously distinguish different instances type handle complex data structures 
hand checks incorporate information flow sensitive dataflow analysis catch errors 
tools complementary 
robert harper lars birkedal helpful advice 
grateful reid simmons time explain needs allowing code 
members cmu software group help feedback 
research sponsored part research initiation award national science foundation nsf ccr trw wright laboratory aeronautical systems center air force materiel command usaf advanced research projects agency arpa 
views contained document author interpreted representing official policies expressed implied nsf trw wright laboratory arpa government 

robert william griswold 
automated support encapsulating data types 
proc 
acm sigsoft conf 
foundations software engineering new orleans december 

coppo 
type inference recursive types syntax semantics 
information computation number pp 


damas milner 
principal type schemes functional programs 
proceedings ninth annual acm sigplan sigact symposium principles programming languages january pp 


michael ernst 
practical fine grained static slicing optimized code 
technical report msr tr microsoft research microsoft redmond july 
summer tr ps 
evans guttag horning tan 
lclint tool specifications check code 
proc 
acm sigsoft conf 
foundations software engineering new orleans december 

gansner north vo 
dag graph drawing program 
software practice experience volume number november pp 


hume 
tale 
software practice experience volume number november pp 


daniel jackson eugene rollins 
abstractions program dependencies reverse engineering 
proc 
acm sigsoft conf 
foundations software engineering new orleans december 

robin milner 
theory type polymorphism programming 
journal computer system sciences 

gail murphy david notkin 
lightweight source model extraction 
proc 
acm sigsoft conf 
foundations software engineering 

mller tilley orgun 
reverse engineering environment spatial visual software interconnection models 
sigsoft proceedings fifth acm sigsoft symposium software development environments tyson corner virginia december pages december 
acm software engineering notes 

callahan jackson 
practical program understanding type inference 
technical report cmu cs school computer science carnegie mellon university pittsburgh may 
ps 
parr dietz cohen 
pccts manual version 
acm sigplan notices february pp 


bjarne steensgaard 
points analysis linear time 
proceedings rd annual acm sigplan sigact symposium principles programming languages january 

mads tofte jean pierre 
implementation typed call value calculus stack regions 
proceedings st annual acm sigplan sigact symposium principles programming languages january pp 


andrew wright 
simple imperative polymorphism 
lisp symbolic computation volume number december pp 


andrew wright robert cartwright 
practical soft type system scheme 
proceedings acm conference lisp functional programming june 
appendix built signatures primitives translator 
primitive signature ref ref assign ref deref ref mk tuple 
elem tuple 
ref array 
ref copy array ref ref ref undefined scalar null ref cast scalar int pointer arith op ref int ref translate array initializers 
assign structure value contains array 
initialize scalars aren initialized allows store pointers allowing handle programs integers polymorphically integers pointers 
unary arith op int int binary arith op int int int binary relational op int int int pointer relational op ref ref int pointer unary op ref int pointer arithmetic operators pointer add pointer subtract unary arithmetic operators negate bitwise logical unary plus binary arithmetic operators add subtract multiply divide modulus left shift right shift bitwise bitwise bitwise xor binary relational operators greater equal equal greater equal equal pointer relational operators greater equal equal greater equal equal pointer unary operators logical 
