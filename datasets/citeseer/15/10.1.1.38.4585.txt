orca language distributed programming henri bal andrew tanenbaum frans kaashoek dept mathematics computer science vrije universiteit amsterdam netherlands simple model shared data objects extends data type model support distributed programming 
model essentially provides shared address space semantics message passing semantics requiring physical shared memory target system 
propose new programming language orca shared 
compiler different run time systems orca exist year 

growing interest distributed computing systems resulted large number languages programming systems bal 
languages oriented systems programming typically distributed operating systems file servers systems programs 
discuss language designed implementing distributed user applications 
particular language intended parallel high performance applications 
important reason implementing parallel applications distributed systems shared memory multiprocessors fact distributed systems scale 
relatively easy build distributed computing system hypercube transputer grid collection workstations connected ethernet hundreds processors 
connecting number processors shared memory difficult expensive 
addition distributed systems offer price performance ratio available people 
hand programming distributed systems potentially difficult programming shared memory machines impossible processes different machines share data 
process needs information remote process send message process ask information 
message passing introduces noticeable delays information may date time arrives 
multiprocessors problem shared data simply put shared memory accessible processor immediately 
research supported part netherlands organization scientific research 
approach tries combine advantages distributed systems sharedmemory multiprocessors 
language programming distributed systems logically shared data message passing 
words programmer shared data multiprocessor implementation language need physical shared memory 
structure rest follows 
section describe underlying model language called shared data object model language called orca 
section give examples distributed programming orca 
section compare approach briefly describe current implementation status project 

overview shared data object model model uses processes expressing parallelism shared data objects communication synchronization processes 
object model passive entity contains data 
object instance object type essentially data type 
data stored object accessed operations defined object type 
process active component 
processes created dynamically 
process contains single thread control 
objects created declaring variables object types 
process spawns child process pass objects shared parameters child 
children pass object children 
way object gets distributed descendants process declared object 
processes share object perform set operations defined object type 
changes object process visible processes shared object communication channel processes 
mechanism similar call sharing clu liskov 
operation applied single shared data object 
operations executed processes see intermediate states operation 
data object get inconsistent state due simultaneous operation invocations 
object type definition consists specification part implementation part 
specification part defines operations objects type 
declaration object type shown 
object specification operation append eger append queue operation head eger wa un queue emp urn head specification object type 
implementation part contains data object code initialize data new instances objects type code implementing operations 
code implementing operation object access object internal data 
operation term indivisible atomic atomicity usually implies recoverability 
block simply consists sequence statements 
blocking operations consist guarded commands operation name parame ers guard exp od guard exp od 
guard exp od expressions side effect free boolean expressions 
operation blocks suspends guards evaluates true 
true guard selected nondeterministically sequence statements executed 
outline implementation object type shown 
object implementation eger operation append eger ng opera add operation head eger eger guard emp fi om return od emp za ob ec outline implementation object type 
objects created operated follows ea ob ec ype 
append add 
remove head fi shared objects transfer data processes synchronize processes 
synchronization orca operations block 
example process executing statement head suspends empty 
queue initially empty process waits process appends element queue 
contains element processes try execute statement simultaneously process succeed calling head 
processes suspend elements appended queue 
summary processes communicate synchronize objects passed call sharing parameters processes created 
call sharing restricted indivisible objects data passed value 
distribution objects participating processors left entirely implementation 
decision significantly contributes simplicity language 
design orca allows compiler run time system deal efficiently distribution objects 
global objects objects passed parameter run time system keep track processes access objects 
semantics operation invocation depend object invoker different processors 
location independence possible move objects dynamically 
shared data accessed defined set operations 
enables system dynamically replicate objects 
operation access single object allowing indivisible operations implemented complicated locking version management scheme 

distributed programming orca shared data object model described general supports different programming styles 
illustrate show model simulate shared variables build distributed data structures emulate explicit message passing constructs 
introductory example consider specification data type shown 
object specification ec operation va ue eger urn cu en va ue operation ass gn va eger ass gn new va ue va eger se va ue mi cu en va ue va va eger se va ue max imum cu en va ue va 
specification object type 
instances objects type created distributed processes 
object effectively shared integer variable operations read change value 
operations va ue ass gn indivisible 
processes simultaneously invoke mi mi new value minimum old value hand sequence operations ass gn fi indivisible 
rule defining actions indivisible easy understand flexible single operations indivisible sequences operations 
set operations tailored needs specific application 
programming distributed data structures studied extensively carriero language linda carriero 
interesting example replicated worker model structures program collection replicated worker processes processor repeatedly take item perform possibly generate 
implemented distributed data structure accessible workers 
combined advantages simulated shared variables design distributed traveling salesman problem tsp algorithm earlier algorithm described bal 
algorithm uses process generate partial routes salesman containing part cities number worker processes expand search partial solutions 
worker systematically generates full routes start initial route checks better shorter current best solution 
time worker finds shorter full route updates variable shared workers containing length shortest route far 
variable cut partial routes longer current shortest route lead optimal solution 
shared variable implemented object type see 
workers may simultaneously try decrease value variable updated indivisible mi operation 
stored ordered order determined heuristics exist traveling salesman problem 
similar data type elements routes integers 
orca provides generic objects express conveniently 
basic algorithm worker processes outlined 
show termination worker processes dealt requires extension 
conceptually distributed algorithm simple sequential tsp algorithm 
shared data objects construct lower level message passing primitives 
asynchronous message passing example specified message queue data type similar data type 
message sent appending queue received statement msg head data types general collected library building standard environment language 
way programmers access lot useful primitives language kept simple 

discussion technique extends data type model distributed systems 
resulting language uses minimum features support distributed programming 
data types parallel distributed languages especially monitor object oriented languages 
concurrent pascal brinch hansen uses monitors encapsulate data shared multiple processes 
traditionally monitors single processor systems multiprocessors shared memory 
monitors distributed system putting data specific processor invoking operations remote procedure calls 
approach truly distributed data centralized 
process synchronization monitors condition variables operation wait suspend false variable signal inform suspended processes variable true 
orca intentionally lacks feature 
orca process blocked operation operation guards re evaluated object changed 
adding signal primitive traveling salesman problem problem finding shortest route salesman visit number cities territory exactly 
process mi shared ec shared ou remove head sp mi od function sp ou mi shared ec cu par ou es han cu en bes eng cover ng es ou sho er han cu en bes ou cu en bes mi mi eng es ou sea ch ou ex ended sp mi od fi fi algorithm tsp worker processes 
increase efficiency spirit keeping language design simple possible 
emerald black object oriented language considers entities objects 
objects emerald active passive data 
objects dynamically move processor program system control 
default compiler run time system decide objects stored 
increase efficiency programmer move objects 
orca emerald entirely hide locations objects programmer 
languages systems provide logically shared data 
interesting example linda tuple space ahuja 
orca differs primarily allowing programmers define operations arbitrary complexity shared data structures 
linda supports fixed number low level primitives manipulating single tuples feel disadvantage kaashoek 
designers distributed operating systems proposed implemented shared memory models 
examples cheriton problem oriented shared memory cheriton li shared virtual memory li hudak agora shared memory forin popek 
systems unit sharing typically physical page logical programmer defined entity model 
comparison systems refer reader bal tanenbaum 
built compiler prototype run time systems orca 
rts runs multiprocessor system mc connected vme bus 
second rts runs top amoeba mullender tanenbaum distributed operating system 
third rts runs bare hardware collection mc connected ethernet bal 
rts uses efficient reliable broadcast protocol kaashoek updating copies object 
replication techniques distributed rtss discussed bal 
implementations year 
orca parallel applications including chess problem solving elias branch graph algorithms matrix algorithms numerical algorithms bal bal 

authors wim van implementing orca compiler robert jan elias jack jansen implementing distributed run time systems 

ahuja carriero gelernter linda friends ieee computer vol 
pp 
aug 
bal programming distributed systems silicon press summit nj 
bal kaashoek tanenbaum distributed implementation shared data object model usenix serc workshop experiences building distributed multiprocessor systems pp 
ft lauderdale fl oct 
bal kaashoek tanenbaum experience distributed programming orca ieee cs int 
conf 
computer languages new orleans louisiana mar 
bal kaashoek tanenbaum jansen replication techniques speeding parallel applications distributed systems report ir vrije universiteit amsterdam netherlands oct 
bal steiner tanenbaum programming languages distributed computing systems acm computing surveys vol 
pp 
sep 
bal tanenbaum distributed programming shared data proc 
ieee cs int 
conf 
computer languages pp 
miami fl oct 
bal van renesse tanenbaum implementing distributed algorithms remote procedure calls proc 
afips nat 
computer conf vol 
pp 
afips press chicago il june 
forin architectural support multilanguage parallel programming heterogenous systems proc 
nd int 
conf 
architectural support programming languages operating systems pp 
palo alto ca oct 
black hutchinson jul levy carter distribution types emerald ieee trans 
softw 
eng vol 
se pp 
jan 
brinch hansen programming language concurrent pascal ieee trans 
softw 
eng vol 
se pp 
june 
carriero gelernter distributed data structures linda proc 
th acm symp 
princ 
progr 
lang pp 
st petersburg fl jan 
cheriton preliminary thoughts problem oriented shared memory decentralized approach distributed systems oper 
syst 
rev vol 
pp 
oct 
elias chess problem solver orca master thesis vrije universiteit amsterdam netherlands july 
popek coherent distributed shared memory design proc 
th acm symp 
operating system principles pp 
park az dec 
kaashoek bal tanenbaum experience distributed data structure paradigm linda usenix serc workshop experiences building distributed multiprocessor systems pp 
ft lauderdale fl oct 
kaashoek tanenbaum flynn hummel bal efficient reliable broadcast protocol operating systems review vol 
pp 
oct 
li hudak memory coherence shared virtual memory systems proc 
th ann 
acm symp 
princ 
distr 
computing pp 
calgary canada aug 
liskov snyder atkinson schaffert abstraction mechanisms clu commun 
acm vol 
pp 
aug 
mullender tanenbaum design capability distributed operating system computer vol 
pp 
aug 

