arc consistency soft constraints thomas schiex toulouse france thomas schiex toulouse fr www fr schiex 
traditionally local consistency de ned relaxation consistency checked polynomial time 
accompanied corresponding ltering enforcing algorithm computes polynomial time csp equivalent unique csp satis es local consistency property 
question notion local consistency extended soft constraint frameworks addressed papers settings :10.1.1.48.4353
main positive works notion local consistency extended soft constraints frameworks rely idempotent violation combination operator 
question done non idempotent operators max csp problem clear lead di erent notions arc consistency 
proposals lacks original properties local consistency 
show small additional axiom satis ed existing soft constraints proposals including max csp possible de ne notion arc consistency keeps properties classical arc consistency unicity arc consistent closure 
show notion directly provides improved lower bounds 
stronger alternative de nitions allow partial inconsistencies propagate considered 
compared combinatorial optimisation frameworks csp framework essentially characterised ubiquitous called local consistency properties enforcing algorithms arc consistency certainly 
notion local consistency easily characterised set desirable properties local consistency relaxation consistency consistent csp equivalent non empty locally consistent csp 
finding equivalent locally consistent csp unique achievable polynomial time called enforcing ltering algorithms 
papers tried extend classical notion arc consistency weighted constraint frameworks 
frameworks aim nd assignment minimises combined violations 
rst direction probably de ned arc consistency ltering fuzzy csp 
extension straightforward think case frameworks max csp framework introduced aim nd assignment minimises weighted number violated constraints 
case 
works tried extend arc consistency systematic way axiomatic frameworks characterise properties operator combine violations semi ring csp framework introduced 
extension arc consistency enforcing induced generalisation fundamental relational operators projection intersection join 
essential extended arc consistency works far operator combine violations idempotent 
includes case fuzzy csp cases partial orders 
max csp related cases algorithm may terminate may provide non equivalent csp 
valued csp framework introduced 
extension arc consistency property essentially notion relaxation 
semi ring csp framework reached idempotent operators 
frameworks max csp framework shown problem checking extended arc consistency property de nes np complete problem 
parallel tentative extensions arc consistency works tried er improved lower bounds max csp 
works abandon idea extending arc consistency order simply er important service ability detect csp solution cost threshold 
globally proposals violates desirable properties local consistency 
show possible addition valued csp framework single axiom de ne extended arc consistency notion desirable properties classical arc consistency unicity arc consistent closure 
nice property idempotent operator cases reduces existing working de nitions unicity recovered 
show lower bound easily built arc consistent closures lower bound generalises improves existing lower bounds 
section consider stronger enforcing algorithms may improve lower bounds propagating partial inconsistencies value deletions 
notations de nitions constraint satisfaction problem csp triple hx ci 
set variables ng 
variable domain values assigned value noted 
set constraints 
constraint de ned set variables subset cartesian product xc de nes consistent tuples values 
cardinality jx arity constraint denote largest arity csp 
assume loss generality constraint de ned set variables 
set partitioned sets contains unary constraints 
unary constraint variable denoted projection tuple values set variables denoted extended constraints projection constraint set variables constraint de ned equal set projections tuples tuple fig support value tuple values satis es constraint xc tuple values solution satis es constraints csp 
valued csp valued csp vcsp initially introduced 
valued csp obtained associating mathematical object called valuation constraint original csp 
set valuations assumed completely ordered maximum element important constraints hard constraints 
assignment violates set constraints compute valuation combining valuations violated constraints dedicated operator noted 
operator satisfy set properties captured set axioms de ning called valuation structure 
de nition 
valuation structure de ned tuple set elements called valuations totally ordered minimum element noted commutative associative closed binary operation satis es identity 
monotonicity absorbing element 
structure totally ordered commutative monoid monotonic operator known uncertain reasoning restricted triangular norm 
rest assume computation polynomial size arguments 
assume countable 
possible de ne valued csps 
sake generality considering valuation associated constraint consider valuation associated tuple constraint 
observed approaches essentially equivalent 
de nition 
valued csp tuple hx si valuation structure set variables ng 
variable set possible values set constraints 
constraint de ned set variables function xc assignment values variables simply evaluated combining assigned constraints valuations tuple de nition 
vcsp hx si valuation assignment de ned vp xc xc problem usually considered nd complete assignment minimum valuation 
globally semantics vcsp distribution valuations assignments choice axioms quite natural usual eld uncertain reasoning 
ordered set simply allows various impact violations expressed 
commutativity associativity guarantee valuation assignment depends set valuations combined 
monotonicity guarantees assignment valuations decrease constraint violations increase 
detailed analysis justi cation vcsp axioms invite reader read emphasise di erence idempotent strictly monotonic operators 
de nition 
operator idempotent strictly monotonic 
shown properties incompatible soon jej 
valuation structures idempotent operator corresponds classical fuzzy csp max combination operator 
soft csp frameworks max csp lexicographic csp probabilistic csp strictly monotonic operator 
arc consistency enforcing yield equivalent problem called closure 
notions equivalence introduced enable compare pairs vcsp di erent valuations structure 
notion equivalence compare pairs vcsp valuation structure simpli ed strengthened 
vcsp said equivalent de ne distribution complete assignments de nition 
vcsp hx si hx si equivalent complete assignment vp vp arc consistency revisited section rst give slightly unusual naive de nition classical arc consistency extension soft constraints easier 
consider nal domains csp de ned unary constraints de nition 
classical csp arc consistent constraint variable fig fig 
traditionally csp said arc consistent simply fig 
de nition usual implicit assumption tuples deleted value removed constraints fig 
fact csp empty domains may arc consistent de nition equivalent usual de nition consider possible emptiness arc consistent closure separate property 
rst condition guarantees value tuple supporting second condition guarantees tuples viable values 
globally value supported viable tuple 
corresponding enforcing algorithm de ned iterated application quiescence procedures enforcing conditions projection enforces fact fig deleting values support 
extension enforces fact fig deleting tuples contain deleted value 
unary constraints mark deleted values 
termination follows fact iteration ac removes value tuple 
binary case projection extension iteration ac shows naive arc consistency enforcing algorithm 
algorithm naive arc consistency enforcing projection fig delete return extension foreach fig delete return ac mc foreach foreach xc foreach mc mc projection foreach foreach xc foreach extension mc ac returns csp equivalent original csp projection extension remove values tuples participate solution 
nal csp arc consistent closed projection extension 
poor time complexity naive algorithm compared optimal time complexity rst achieved ac binary csp considered consequence intended simplicity aim show arc consistency extended 
max csp 
chosen describe enforcing algorithm easy extend vcsp 
achieve mainly guarantee extended versions elementary operations projection extension preserve semantics problem 
arc consistency soft constraints start introductory example 
sequel order illustrate notions introduced concrete examples consider binary weighted max csp correspond valued csp strictly monotonic valuation structure hn describe problems graph representation vertices represent values weighted edges connect values pairs variables connected constraint 
representation omit edges weighted 
weights equal 
unary constraints actual domains represented weights associated vertices weights equal omitted 
consider weighted max csp gure 
variables called values single constraint 
constraint forbids pair cost forbids pairs completely cost 
pair authorised corresponding edge omitted 
fig 

equivalent max csp assign value variable known sure cost best support cost 
projection explicit induce unary constraint forbids cost 
simply add constraint max csp proposed cases idempotent operator resulting csp equivalent 
complete assignment initially cost cost 
order preserve equivalence compensate induced unary constraint 
done simply subtracting tuples contain value 
corresponding equivalent csp described gure edge cost disappeared associated weight edge una ected nite cost 
repeat process variable supports value nite cost 
add unary constraint completely forbids value 
speci case valuation compensate gure gure 
cases equivalent max csp obtained 
weight associated edges connected value ect semantics csp value completely forbidden 
csp interesting completely solved 
prefer problem information explicit domain constraint level 
new axiom vcsp generalise idea possible valuation structures able compensate information added projection 
possible additional axiom de nition 
valuation structure fair pair valuations exist valuation called di erence unique maximum di erence noted simple axiom satis ed existing concrete frameworks including concrete idempotent strictly monotonic operators 
classical csp de ned vcsp valuation set 
combination operator max 
max 
note di erence maximum 
possibilistic csp de ne min max problem dual classical maxmin problem fuzzy csp de ned valuation set ordered usual max 
di erences exist show max 
weighted max csp de ned valuation set ordered usual 
di erences exist show nite valuations 

note concrete frameworks probabilistic csp lexicographic csp reduced weighted max csp shown bene results 
particularly important lexicographic csp di erence de ned 
theorem 
fair valuation structure 

proof 
de nition monotonicity proves inequality strict strictly monotonic 
second property follows commutativity associativity 
ut soft arc consistency enforcing possible de ne extended version ac enforcing algorithm 
aim de ne generic algorithm consistently fair valuation structures 
remember denotes unary constraint variable current csp 
valuation associated value unary constraint 
similarly value removals classical ac enforcing statements means valuation associated tuple set require de nitions de nition 
valuations 
say absorbing 
say ects assume properties tested constant time 
case concrete valuation structures considered 
note absorbing valuation structures 
idempotent valuations absorbing 
ready extend elementary procedures projection extension 
algorithm extended procedures soft ac enforcing projection foreach fig min ects choose foreach fig return extension absorbing choose foreach fig ects return analyse procedures 
function choose takes valuation argument returns valuation 
assume choose identity function 
projection rst look cheapest support value constraint keep valuation assignment pay valuation 
gives possible new unary constraint 
adding constraint rst check modify csp test ects existing valuation unary constraint level 
add induced unary constraint csp note csp modi ed compensate addition subtracting valuations supports 
done valuation structure fair construction equal valuations supports 
extension rst check valuation value absorbing 
needed termination see section 
supports check ect valuation support modify tuple valuation 
line numbered compensates unary level 
line useless absorbing useful version procedure extension may non absorbing 
theorem 
fair vcsp hx si application projection extension yields equivalent vcsp 
proof 
consider complete assignment fig valuation assignment una ected application projection extension procedures modify valuations tuples containing value 
fig note xc 
initial valuation written contains combined valuations constraints application projection valuation theorem una ected 
similarly application extension yields valuation theorem 
ut consider initial ac algorithm new projection extension procedures 
terminates necessarily returns equivalent problem 
termination general case easy prove important cases idempotent strictly monotonic idempotent case equal max see obviously max 
number di erent valuations may obtain combining valuations max nite equal number di erent valuations exist originally csp 
application projection extension may increase valuations domains constraints 
take nite number values algorithm 
strictly monotonic case absorbing value 
valuations 
follows strict monotonicity 
consider valuations inside constraints call projection may reduce valuations call extension set constraint valuations maximum element absorbing value decrease 
globally iteration ac algorithm lower constraint valuations set 
rst case valuation decrease second case modi ed 
termination guaranteed nite number tuples inside constraints 
note proof valid choose returns value smaller equal strictly larger 
extended enforcing algorithm terminates yields equivalent problem fair valuation structures idempotent strictly monotonic operator 
note specialisation classical csp described vcsp corresponds classical ac enforcing algorithm 
de ne corresponding arc consistency property follows de nition 
fair vcsp arc consistent constraint variable value minimum valuation supports ect 
absorbing ect valuations supports ac enforcing algorithm correct de nition ac property precisely corresponds properties enforced projection extension respectively 
note specialisation classical csp described vcsp corresponds classical ac de nition 
prove algorithm polynomial time 
haven built generic proof decided limit ourself signi cant case binary weighted max csp 
case projection extension 
ac iteration performs ed calls procedures 
iteration deletes value sets tuple valuation 
tuples values naive ac enforcing algorithm ectively polynomial time 
naturally needed turn theoretical result tuned time space ecient algorithm 
fig 

max csp di erent equivalent arc consistent closure observe con uence arc consistency enforcing lost 
means arc consistent closure problem necessarily unique example gure shows 
max csp considered similar problem gure non authorised tuples cost 
start enforcing arc consistency variable detect minimum cost support cost obtain csp 
csp arc consistent equivalent csp 
start variable detect minimum cost support cost obtain csp 
csp arc consistent equivalent csp di erent csp 
lower bounds comparison vcsp framework csp framework variable assigned value 
valuation lower bound cost optimal solution min computed ac enforcing lower bound noted ac depends arc consistent closure depends order constraints variables examined ac enforcing 
csp said maximally arc consistent arc consistent ac maximum equivalent arc consistent problems 
problem enforcing maximum arc consistency certainly important reasons think np hard problem see 
example consider csp gure 
variables values contains constraints 
enforcing arc consistency problem yields csp right 
lower bound ac equal 
compare ac lower bounds binary max csp 
rst lower bound considered reversible directed arc consistency counts lower bound 
parameterised booleans indicating direction binary constraint 
constraint value variable indicated direction selected counter incremented value support constraint 
induced lower bound sum minimum ia variable 
enforce ac examine constraints order starting variable examines quite obvious projection discover exactly counts unary constraints 
additionally examine side constraint possibly infer unary constraints may lead strictly better lower bound 
consider example exactly value domain support cost 
able infer counts values 
ideally constraints correctly oriented 
constraints directed variable variable costs induce lower bound 
useless lower bound inferred constraints poorly oriented 
constraint oriented variable 
second lower bound considered weighted arc consistency counts lower bound wac 
parameterised real number constraint 
shown generalisation 
number associated constraint counts inferred wac fig 

max csp arc consistent closure times counts inferred direction times counts inferred direction 
parameterise ac enforcing modifying choose procedure returning returns side side conclude ac yield lower bounds wac start applying projection constraint variable choose procedure parameterised csp obtained exhibits costs wac unary constraints may non arc consistent 
nish enforcing arc consistency standard choose procedure increase costs increase lower bound 
consider problem gure wac ideally infer lower bound 
constraints 
ac enforcing algorithm provides stronger lower bounds proposals 
furthermore preserves equivalence de ned non binary constraints 
propagating local inconsistencies section consider possibility procedure extension processing valuations absorbing 
corresponding procedure called extension simply deduced extension removing test absorbing see algorithm 
propagation non absorbing valuations forbidden basic version order guarantee termination non absorbing valuations extension exactly cancels ect previous call projection lead nite loops 
termination forced natural 
nd agreeable section consider ac enforcing local search process space equivalent csp 
criterion optimised lower bound 
rst neighbourhood de ned possible applications projection extension 
corresponds ac enforcing algorithm greedy local search process terminates locally optimal csp reached arc consistent 
fig 

propagating non absorbing valuations may improve ac second larger neighbourhood de ned possible applications projection extension 
particularly interesting context 
propagation non absorbing valuations may key reach maximum arc consistent closure 
consider rst max csp gure 
includes binary constraint forbids pair unary constraints forbid values 
csp arc consistent corresponding lower bound ac equals 
apply extension value get equivalent csp arc consistent 
apply projection value obtain csp arc consistent corresponding lower bound ac 
propagation non absorbing valuations may allow transport local unary constraints variable variable 
variables may increase minimum valuation lower bound ac question maximum arc consistent closure reached csp second neighbourhood open obviously rst neighbourhood suce 
needed determine get similar results ac enforcing algorithm terminates 
de ned extended version arc consistency applies classical csp fuzzy csp weighted max csp 
extends usual notion equivalent arc consistent problem systematic way including frameworks notion available general case non binary constraints 
directions worth attention 
obviously needed turn naive arc consistency enforcing algorithm tuned space time ecient algorithm 
combined existing arc consistency technology ac trick 
resulting algorithm injected tree search algorithms solving max csp pfc mrdac 
generally technique extend arc consistency allow extension existing local consistency properties classical csp max csp provide stronger lower bounds 
want verfaillie stimulating discussions tre comments rst version 
weighted arc consistency technique max csp 
proc 
th ecai brighton united kingdom pp 

schiex comparaison de deux param pour max csp 
actes de pp 

fargier montanari rossi schiex verfaillie semiring csps valued csps frameworks properties comparison 
constraints 
montanari rossi constraint solving semirings 
proc 
th ijcai montr eal canada aug 
montanari rossi semiring constraint solving optimization 
journal acm 
dubois prade class fuzzy measures triangular norms 
general framework combination uncertain information 
int 
journal intelligent systems 
fargier lang uncertainty constraint satisfaction problems probabilistic approach 
proc 
ecsqaru lncs spain nov pp 

fargier lang schiex selecting preferred solutions fuzzy constraint satisfaction problems 
proc 
st european congress fuzzy intelligent technologies 
freuder wallace partial constraint satisfaction 
arti cial intelligence dec 
larrosa meseguer schiex maintaining reversible dac max csp 
arti cial intelligence jan 
larrosa meseguer schiex verfaillie reversible dac improvements solving max csp 
proc 
aaai madison wi july 
rosenfeld hummel zucker scene labeling relaxation operations 
ieee trans 
systems man cybernetics 
schiex maximizing reversible dac lower bound max csp np hard 
tech 
rep july 
schiex fargier verfaillie valued constraint satisfaction problems hard easy problems 
proc 
th ijcai montr eal canada aug pp 

shapiro haralick structural descriptions inexact matching 
ieee transactions pattern analysis machine intelligence 
wallace directed arc consistency preprocessing 
selected papers ecai workshop constraint processing meyer ed lncs 
springer berlin pp 

