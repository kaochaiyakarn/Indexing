priority driven ray tracing roni yagel john department computer information science ohio state university auto des sys columbus oh typical ray tracing algorithm traces ray screen pixel spawns secondary rays ray object intersection points 
traditional ray tracers follow rays recursively assign priority value newly spawned ray insert priority queue 
priority assigned ray variety criteria explore 
ray trace highest priority queue 
occasionally trigger display updates checkpoint predefined threshold reached providing intermediate images review evaluation 
classical ray tracers rendering specifications controllable user 
priority driven ray tracing hand provides user mechanism steer rendering deliver intermediate images processing 
describes illumination model non recursive priority driven ray tracer evaluates memory time requirements 
show worst case memory requirements overwhelming practice method useful feasible 
areas intense interest computer graphics photorealistic image synthesis 
achievement dictates global illumination model incorporates effects indirectly reflected transmitted light 
global illumination models today ray tracing radiosity 
methods computationally expensive time consuming generate imagery 
approaches popular questionable practicality standpoint 
provided strong stimulus investigation development efficient implementations techniques 
ray tracing computes color pixel tracing light ray backwards viewer eye scene determining object intersected ray 
object hit reflection transmission rays may spawned depending object surface properties reflectivity transparency 
global illumination effects due diffuse reflections modeled ambient light term 
global shading model best suited highly reflective specular environments popular past decade spectacular images created technique 
compared traditional scanline algorithms ray tracing take significant amount time produce image 
development efficient solutions ray tracing problem area active research decade 
acceleration techniques proposed dramatic decreases rendering time images achieved methods 
complete survey techniques reader referred 
disadvantages conventional ray tracing algorithm addressed solutions com complete solution pixel time entire image rendered 
ray tracing support generation partial images prove useful scene design modeling phase 
employing common acceleration techniques ray tracing require significant amount time complete image available viewer 
efficiency technique applied ray tracing address problem progressive screen sampling 
method allows user specify low screen sampling rate 
rays cast pixels apart missing pixel values interpolated screen space 
subsampled areas cast additional rays improve image quality 
gives user control generation image gross features image may early possible allows process short circuited user expectations met 
global illumination technique gained popularity mid radiosity 
radiosity computes interchange light diffuse surfaces approach heat transfer principles 
energy equilibrium system modeled independently viewer position computed preprocessing step 
completion step view dependent visible surface determination shading performed 
method produces best results diffuse environments suffers problem ray tracing large computational cost generation single image 
efficiency considerations radiosity method focus vigorous research years 
led development progressive refinement approach radiosity 
algorithm iterates final solution generates intermediate images way 
partially alleviates problem long delay algorithm initiation generation image 
merit method initial interim images produced progressive radiosity useful incomplete 
progressive approach provides user interim images quickly successively refines output final accurate solution 
importance driven radiosity algorithm smit improves progressive radiosity solution incorporating view dependency radiosity computations 
accomplished assigning importance value patches scene guides iterative solution 
importance factors updated algorithm iterates final solution 
provides significant speedup reduces amount computation areas contribute little final image 
describe priority driven ray tracing algorithm developed spirit progressive refinement solution radiosity algorithm produce intermediate useful images iterating final solution 
different priority criteria allow refinement image progress variety ways providing adaptability needs user 
basic theory traditional approach ray tracing scan image plane pixel pixel left top bottom computing color pixel 
computation casting ray called primary ray eye pixel scene 
point ray intersects object secondary rays spawned simulate light reflection reflected rays light transmission transmitted rays see 
shadow rays sent intersection point light sources order determine intensity incident light point 
secondary rays recursively traced color result compute color assigned primary ray 
set rays spawned descendants primary ray form called ray tree shown 
tree created pixel image plane depth traversal tree yields color pixel 
call set ray trees rooted screen pixels ray forest 
determine final color pixel moving pixel render complete image computed final color pixel 
complexity scene high sampling high rate anti aliasing generation entire image take significant amount time 
initial image generated breadth traversal ray forest 
ray tracing reduces ray casting primary ray pixel processed 
depicted currently processed rays case primary rays represented solid lines 
produces correct image respect visible surface determination incomplete image respect global illumination 

level tree rays rooted single pixel generation labeled primary ray emitted pixel 
intersection point denoted solid circle reflected rays spawned shadow 
third generation rays labeled local illumination intersection point 
primary reflected reflected reflected transmitted transmitted transmitted shadow shadow shadow generation shadow shadow shadow shadow processing primary rays continue refining image iterative fashion 
reflection rays wide arrows branching right transmitted rays thin arrows branching right spawned appropriate depending material attributes intersected object 
bottom left pixel spawn secondary rays possibly intersection pixel colored background color 
results rays combined values image produce second image method describe section 
processing third fourth generation rays sequence images generated converges final image 
order rays processed important final image 
ray tree level establish sequence rays handled depicted breadth traversal entire ray forest ensuing result 
interactive ray tracing algorithm sous developed shortens time generate image manner similar progressive radiosity 
speedup occurs generating image results primary eye rays 
detail 
forest ray trees 
results primary rays generate intermediate image 
rays participating computation second image solid lines reflection rays drawn wide arrows branching right 
third fourth generation images 
grey areas denote pixels final color computed 
added stages considering recursive reflection transmission rays 
user interactive control rendering process permitting specification parameters increase realism image abort synthesis image converging desired result 
approach propose broader sous allows convergence final image ways 
observe establishing ray processing order basically prioritizing scheme assigns priority ray 
ray tree level control processing rays prioritizing method 
intensity ray contributes image called weight contribution govern generation image 
scheme allow rays contribute intensity image processed 
possibility prioritizing ray type primary reflection transmission shadow rays receive different priorities 
provides capability initially generate crude approximation final image ray casting precedence may example translucent reflective objects shadow determination performed 
similar way object type object complexity surface properties may control order rays processed 
gives ability selectively render certain objects areas screen may particular interest user 
incremental screen accommodated 
example cast rays pixel assign high priority ray pixel lower priority second 
encounter low priority ray queue indicates ray pixel traced pixels 
trigger image display go trace second ray pixels 
priority scheme deals mainly shadow rays 
traced intensity light source try reach 
example assign low priority shadow aimed low intensity light source result tracing ray greatly influence image intensity 
alternatively assign higher priority light sources color schemes possible deserve consideration potential usefulness 
sequence images shown generated modified tree level priority scheme shadow assigned lower priority reflection transmission rays generated level tree 
accelerates time image shadow processing delayed stage 
dataset evaluate performance approach see section 
illumination model intensity screen pixel denoted indicates wavelength rgb 
ray passes intersect object set background intensity 
ray intersects object 
sphere flake model positioned center room mirror walls 
scene rendered primary rays added reflection transmission rays generations shadow rays 
assigned intensity surface intersection point 
typically computed rendition phong illumination equation coordinates point illuminate 
ambient light intensity 
diffuse color object 
number light sources 
ambient diffuse specular transmission coefficients surface 
light source occlusion factor 
light source attenuation factor 
light source intensity 
surface normal direction light source half way vector viewer 
specular reflection exponent 
intensity reflected ray 
intensity transmitted ray 
terms equation compute commonly called local illumination 
expressions compute global illumination model influence objects environment 
terms computed shadow light sources 
values computed recursively tracing reflection transmission rays respectively 
long recursive computation global illumination complete value assigned pixel illumination equation ray tracer basically reordering summation equation allows nonrecursive handling secondary rays 
likewise processing shadow differs way traditional ray tracers handle rays priority driven ray tracer defer processing shadows time 
dl li dl rl tl dl li rl tl rl tl priority ray tracing approach give ray unique identifier number ray parent denoted 
primary rays undefined 
associate ray weight denoted defined denote coordinate pixel ray belongs 
primary ray traced pixel descendants value denote intensity contributed local illumination components equation point ray intersects object 
assume time deal shadowing effects 
extract equation expression expand recursive terms equation eventually large sum solely consisting terms similar ones equation local illumination computations intersection points rays ray tree 
intensity pixel formulated sum local illuminations defined equation computed rays ray tree rooted ray primary ray ray reflection ray transmission ray dl li dl rl tl run time ray popped queue traced resulting value added pixel value equation assume occlusion exists point ray object intersection light sources unity assumption stage shadow processed 
time light source partially occluded light intensity subtracted pixel 
shadow ray spawned ray sent light source associated light intensity denoted define intensity contributed light source ray assumption 
equation re written run time shadow spawned ray light source traced returns value denoted value pixel adjusted implementation need control processing order rays user specified criteria li li li dl li dl li dl li li li core ray tracer priority queue implemented heap data structure 
obtain performance approach heap support priority queue operation set size log time 
schemes prioritize rays weight contribution ray 
ray type primary reflection transmission shadow 
ray origin incremental 
ray tree depth 
object complexity type 
surface properties 
light source attributes intensity color 
combination schemes 
selection priority scheme easily accomplished encoding choice input configuration file 
gives user maximum flexibility image image basis 
implementation begins reading input configuration files including priority criteria selection scene description file 
ray processing begins inserting primary rays record px py integer pixel coordinates ray tree origin heap key integer heap property priority key float real rgb color components ray level integer ray tree level ray type primary reflection transmission shadow weight float ray contribution ray ray record origin coordinate direction vector ray li 
data structures representing ray queue 
priority queue steps 
step insert rays queue arbitrary order regardless priority 
initial number rays equal number pixels image plane number larger anti aliasing techniques employed 
second step completion ray entry step queue heap property key user specified priority scheme 
ready ray tracing 
data structure queue entry representing ray contain data fields enable ray tracer identify affected pixel heap key parameters needed shader correct rendering pixel color 
data structure shown implementation 
fields px py heap key added priority driven ray tracing fields traditional recursive ray tracers 
addition queue entire image maintained dimensional array floating point rgb values representing pixel sub pixel anti aliasing performed 
entities updated ray produces update information pixel 
update performed equation reflection transmission rays equation shadow rays 
compared traditional recursive ray tracing algorithm requires substantially larger amount memory consumed priority queue floating point image buffer 
severe limitation due relatively low cost memory current workstations 
analysis memory needs algorithm section test case results described section 
remove ray top heap head priority queue re maintain heap property 
need process ray decide display update performed 
decide inspecting heap key ray 
example priority values ray tree level display update triggered processing rays passes level heap key value transitions value 
incremental nature algorithm visually demonstrated display updates see 
shoot ray origin direction values obtained data structure see 
step space subdivision grid structure path ray perform ray object intersection calculations objects current grid cell traditional ray tracers 
depart classical recursive ray tracing intersect object recursively follow reflection transmission rays originating intersection point 
rays shadow light source assigned priority value inserted priority queue 
compute local illumination model slightly different manner recursive ray tracers 
typically local shading model includes logic generation shadow 
rays shot ray object intersection point light source determine intersection point shadow partial shadow translucent objects scene 
intensity light reaching intersection point appropriately attenuated light sources occluded objects scene 
shadow placed priority queue rays delay part local illumination model calculations shadow shot 
initially local shading model assume full intensity light source reaches point intersection 
shadow removed queue processed intensity pixel interest may adjusted attenuated light sources partially fully occluded 
way implement idea follows ray currently process primary reflection transmission ray local illumination computed equation 
value multiplied weight added pixel px py described equation 
intersection points reflection transmission rays spawned assigned px py value new weight computed equation heap key assigned user defined priority scheme 
shadow spawned light source value computed equation stored fields 
shadow popped queue traced value computed 
color pixel px py adjusted described equation 
analysis memory advantages priority driven approach classical ray tracing come free 
compared classical ray tracing priority driven ray tracer requires significantly memory 
example consider synthesis image resolution nm pixels 
double precision representation floating point values bytes amount memory needed floating point rgb frame buffer mn 
need mbyte traditional ray tracer processes pixel time require storage 
biggest memory consumer priority queue 
consider worst case scenario trace rays generations environment light sources 
assume objects reflective transparent 
furthermore background hit li ray terminate ray tree reaching maximum recursion level 
assume shadow rays lower priorities reflection transmission rays 
case point ray tracer maintain priority queue corresponds maximal ray forest 
ray forest tree binary tree height additional sub nodes internal tree node shown 
carefully compute number rays trees contain 
pop operation shadow ray queue reduces length 
pop operation reflection transmission ray queue leads intersection calculations 
level generation popped ray intersected object reflective assume rays pushed queue shadow reflected ray transmitted ray 
level popped ray equal shadow pushed queue 
assume shadow rays lower priority perform second type pop reach level worst case queue size occur iterated lowest level ray forest ray tree height examining queue corresponding pixel consist shadow rays intersection points tree nodes rays level leaf nodes shown 
show induction queue length corresponding worst case tree level denoted 
find queue shadow rays intersection point primary ray object represented node tree assume queue corresponding worst case tree level having rays equation 
generate tree level add reflection transmission ray node 
pop rays queue replace shadow 
tree level leaf nodes add rays replace shadow 
result length worst case queue level 
proves correctness equation induction 
image nm pixels super sampled rays total queue length denoted 
assume rays 
structure described section requires approximately bytes memory requirement heap data structure potentially reach worst case scenario mbytes 
high resolution image rays cast pixel assuming memory needs may soar gigabytes 
fortunately conditions arise contrived worst case examples occur practice 
memory consumption cases tested range affordable common workstations described section 
priority schemes developed priority schemes level object ray type region contribution 
level priority scheme rays th generation higher priority rays th generation 
practice method translates breadth traversal tree 
trigger image display priority changes image generated depicts scene rendered primary rays see second image shows contribution generation shadow rays generation secondary rays 
object scheme priority assigned objects rays 
ray hits object inherits object priority 
leads priority scheme objects scene 
rendering level priority scheme 
primary rays shadow rays secondary rays third generation rays 
rendered accurately objects shown rendered primary rays 
observe scene rendered primary rays 
sphere flake rendered secondary rays 
ray tracer render secondary rays boxes left floor 
ray type scheme priority assigned type ray 
levels priority primary reflection transmission shadows 
primary rays set highest priority 
rendering object priority scheme 
primary rays ray tracing spheres boxes floor 
priorities set user 
example shadow rays computed reflection transmission rays processed 
region scheme user prioritizes rectangular disjoint screen regions 
rays assigned priority priority assigned region belong 
outcome regions higher priority rendered regions lower priority 
shows example ray tracing chess pieces region priority scheme 

rendering region priority scheme 
contribution scheme priority assigned ray contribution potentially final image see 
priority function ray weight shown equation stored ray data structure see 
show section priority scheme converges quickly final image user see image early rendering process 
addition show section scheme requires 
rendering contribution priority scheme 
primary rays shadow rays contribute reflections big sphere floor appear secondary reflections minor reflections boxes 
amount memory ray queue 
results explore relative advantages disadvantages priority schemes implemented chose scene sphere flake mirror room shown applied schemes measuring number type rays rendered queue size moment rendering process 
intermediate image measured difference image final image determine fast priority scheme converges final image 
schemes assumed rendering ray generations light source 
objects scene completely opaque transmission rays traced 
realize test case extreme example trace rays closed environment room ray hits background objects perfect reflectors mirrors 

number rays rendered rendering ray type priority scheme 
vertical lines denote image display 
rays time primary reflection shadows shows behavior ray tracer driven priority scheme section 
graph shows number rays rendered function time 
seconds primary rays processed 
exhausted image display triggered denoted vertical spike ray tracer processes reflective rays see shadow rays 
comparison show behavior ray tracer contribution priority scheme 
diagram observe secondary rays significantly contribute image shadow rays processed time primary rays 
shows size queue rendering sphere flake room mirrors different priority schemes 
traditional ray tracer needs space ray time 
worst case scenario image required queue rays example queue reaches 
rays rendered rendering contribution priority scheme 
sum graph denoted points sum types rays rendered 
rays time primary reflection shadows size 
observe groups priority schemes 
group ray type level object contribution region 
ray type scheme user chose delay tracing shadow rays consequently requiring queue worst case queue length 
shadow rays higher priority reflection rays requires space similar second group 
second group level object needs maximum worst case queue length 
group region priority scheme require small amount memory regions user defines small 
third group useful scheme contribution require worse case queue length 
terms time performance see significant penalty priority driven ray tracing traditional method 
takes seconds priority driven methods take seconds 
show example reflects experience rendering scenes 
queue size rays time level region contribution object ray type traditional 
queue length various priority schemes 
measured speed convergence final image 
results shown 
traditional method advances linearly priority schemes region converge faster final image intermediate images generated rendering closer final image 
methods converge final image methods ray type contribution provide user rapid feedback generating complete images early stages rendering 
plan priority light source shadow rays intersection point receive priority popped queue rendered time 
push queue shadow ray assigned priority information ray direction fields see 
record popped priority queue spawn shadow trace update pixel value 
approach con difference time contribution level priority region traditional 
convergence various priority schemes final image 
serves large amounts memory equivalent assigning equation 
result strategy beneficial scheme 
example shown lights queue length scheme peak queued rays reduction 
image rendered light sources required half queue size applied optimization 
observe plan employ screen criteria region scheme primary rays traced secondary ray shadow 
need push primary rays queue 
primary rays traced traditional ray tracers exception secondary rays shadow recursively processed pushed queue 
optimization manifested graph causing methods region start time zero empty queue queue containing nmr rays 

final position match fischer red held september 
images rendered light sources rays pixel 
center image shows generation shadows right took minutes compute includes contribution levels secondary rays shadow 
existing ray tracers rendering specifications controllable user 
priority driven ray tracing provides mechanism steer rendering deliver intermediate images processing 
demonstrated utility priority schemes shown require reasonable amounts memory consume negligible amount overhead time 
priority driven ray tracing extended support priority schemes mixtures priority criteria 
current implementation priority assigned ray changed 
ability demote promote queued rays provide support needed dynamic steering 
addition various priority schemes explored 
examples include priority assigned rays cache performance optimization gree priority assigned shadow light source intensity distance 
numerical methods show faster convergence priority method 
employ perceptual metric rush better control priority ray tracer achieve faster effective image comprehension 
acknowledgments partially supported national science foundation ccr 
yair raghu klaus mueller especially ed swan reviewing manuscript 
bibliography cohen chen wallace greenberg progressive refinement approach fast radiosity image generation computer graphics 
cormen leiserson rivet algorithms mit press pp 

foley van dam feiner hughes computer graphics principles practice second edition wesley 
fuji fujimoto iwata arts accelerated ray tracing system ieee computer graphics applications april 
glassner space subdivision fast ray tracing ieee computer graphics applications october 
glassner ray tracing academic press 
torrance greenberg modelling interaction light diffuse surfaces computer graphics 
gree green 
exploiting coherence multiprocessor ray tracing 
ieee computer graphics applications november 
rush rushmeier ward sanders rust comparing real synthetic images ideas metrics th eurographics workshop rendering dublin ireland june pp 

sous arvo salesin importance driven radiosity algorithm computer graphics 
sous sousa costa ferreira interactive ray tracing image production increasing realism proceedings eurographics pp 

whitted improved illumination model shaded display communications acm june 
