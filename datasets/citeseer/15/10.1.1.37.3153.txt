analysis girard paradox thierry coquand cmu inria purpose article applications forti paradox formal systems 
application due girard showed original system martin lof inconsistent considering extension church type system secondorder types 
parts article 
part study extensions church higherorder logic 
extensions uniform way 
logical system components functional part type calculus purely logical part natural deduction system built top functional system 
systems study particularity logical types types functional system 
essence impredicativity show impredicativity harmless lot calculus handled precaution 
extension introduces second order types 
explain calculus inconsistent apply result type system martin lof ideas girard thesis basic construction different 
natural extension ml polymorphism show inconsistent known essence russell 
note paradox applies tries extend church system notion category categories 
possible generalize church system weak notion polymorphism consistent way corresponding type system 
second part reformulation natural deduction framework consider explicitely structure proofs 
derivation corresponds roughly term 
normalisation entails consistency easy see conversely existence paradox entails existence non normalisable terms 
term represents explicit writing forti paradox natural deduction style 
give applications inconsistency extension construction calculus levels inconsistency extension construction calculus strong notion sums la martin lof 
explain results appear step analysis curry howard analogy propositions types 
general argument paradox entails general undecidability type checking idea due meyer 
important point constructions terms checked computer complete formal hand checking quite impossible 
hope mechanisation metamathematical results help better understanding purely syntactical phenomena appear mathematical foundations design type systems programming languages 
intuitionistic church higher order logic assume known basic notions calculus fi reduction 
terms inductive structure 
constants rop type 

identifiers 
abstraction term identifier 
application terms notion reduction usual notion fi reduction relation noted red 
write conv smallest congruence terms abstraction application contains reduction 
adding operators pure calculus shall indicate new rules reduction conversion new operators 
simple type calculus types generated inductive rules rop type type type type definition 
type environment calculus church list pairs identifiers types identifiers pairwise 
shall denote fl concatenation environment fl pair distinct written terms definition 
typing relation smallest relation type environment pairs identifiers types environment fl environment fl rop rop rop fl rop fl rop fl fl fl fl fl fl says term type environment fl 
example type rop empty environment type rop rop note presentation martin lof unicity type 
logic order logical calculus define notion provable formulae 
comparaison rule hol may 
definition 
fl formula term type rop environment fl class provable fl formulae defined inductive rules fl provable conv fl provable fl rop fl rop fl provable fl rop fl rop fl rop fl provable fl provable fl fl provable fl provable occur fl provable rule inference modus ponens fl provable fl provable fl provable instance show provable formula environment rop 
provable formula empty environment 
known logical connectives definable calculus shall sequel common logical notations denoting translation system 
instance terms type rop denotes ffi ffi ffi denotes ffi ffi ffi 
note important points presentation 
firstly system special rules equality terms dependant mutual type equality syntactic notion fi conversion system intensional opposition instance presentation lambek secondly logic calculus intuitionistic logic opposition original calculus church classical framework 
points relevant discussion give forti paradox extends framework topos theory shown church theory axiom extensionality 
want classical logic sufficient add fl rop fl provable usual double negation law term stands absurd proposition intuitionistic logic 
possibility add pierce axiom fl rop rop fl provable derivations forti paradox valid extensional classical framework 
easy prove truth table valuation method calculus consistent definition 
interpretation rop set function 
definition 
valuation environment function defined fx value term type environment element defined induction construction 

type function defined associate value extends putting 

usual semantic meaning 
theorem 
previous calculus consistent sense exist formulae provable 
valuation provable formula direct induction definition notion truth valuation 
note simple finitary argument done add system infinity axiom case consider enumerable sets sets cardinality continuum 
relations sets type theory translation set theoretic concepts going derive variants forti paradox various type system question address represent binary relation type theory 
answer easy simply pair consisting type term type rop 
subtlety definition 
example naive definition embedding relation relation says exists term type properly tries develop relation theory type system 
reason general relation defined type condition strong 
needs consider field relation follows definition 
field binary relation type predicate 
shall write field relation definition 
shall say relation defined type embedded relation defined type exists 
fact forced consider term type predicate particular case general phenomenon appears translation type theory topos theory object free topos simply type pair consisting type binary relation rop transitive thought partial equality relation 
case field simply thought existence predicate type 
equality type rop logical equivalence 
equality equality define equality 
summarize relativize mathematical statements respect existence predicates type theory 
example statement class predicates 
general statement true extensional classes relativize assertion extensionality predicate type predicates predicates 
instance situation rop rop closed arbitrary union rop rop union union predicate rop relation want say class contains empty predicate 
take type rop rop class empty class union 
furthermore union extensionally equal want need class extensional 
rop rop having 
extensionality predicate natural example existence predicate type 
example equality type intentional equality type follows idea leibniz elements type intentionally equal proposition rop provable satisfies property satisfies possible prove relation reflexive symmetric transitive understand code set theoretical concepts type theory develop relation concepts order founded relation embedding relation orders 
formulation practice suitable usual set theory 
inadequacy church calculus previous calculus roughly principia called typical ambiguity sufficient practice development real proofs theoretical point view quite sufficient 
problem system lack uniformity 
example explain 
suppose want define notion inclusion predicates 
church calculus define relative inclusion type type corresponding notion inclusion 
clearly theorems inclusion completely polymorphic type instance statement inclusion relation transitive relation rop 
said notion transitivity 
natural try extend church calculus general types capturing uniformity 
precisely second order calculus 
motivation extending simple type calculus completely distinct context computer science context reynolds basically 
section shall try mix notion second order types logic church calculus obtaining formal system fundamentally system girard extension second order types extend class types 
introduce set type variables allow quantification variables prop type prop type piv type symbol pi binder convention holds 
example piv concrete representation pi 
intuitive meaning piv product types varies set types 
clearly kind circularity may type piv 
extend class terms 
fl appear fl fl piv fl type fl fl piv rop fl rop note allow non homogeneous application abstraction extend notion reduction conversion new notions 
girard shown calculus normalisation property 
formula church calculus second order types term type rop previous typing rules 
need extend class provable formulae 
fl provable conv fl provable fl provable occur fl provable fl provable type fl provable take care previous objections church calculus 
state prove generic statement 
example define predicate reflexive relation polymorphic term type piv rop rop 
consistency 
note result girard normalisation property second order calculus shows paradox russel 
paradox lays existence non normalisable term type rop 
discovered girard inconsistency sense theorem girard paradox 
formulae calculus church second order types provable 
shows calculus valid logical calculus normalisation property terms 
section presents proof theorem 
girard paradox presentation forti paradox definition 
relations 
morphism term provable 
main concept existence entails paradox type system definition 
universal system notations relations type type term piv rop intentionally equal exists morphism 
allow uncurried notation 
system say type piv rop follow forti paradox 
define embedding relation emb pia rop pib rop rop predicate wf pia rop rop usual way 
define predicate wf wf rop wf denotes intensional equality define way emb rop emb rop rop emb note need universal system proving emb transitive relation 
define emb emb wf wf main properties wf emb rop wf emb emb show rop wf emb 
contradiction emb emb emb emb emb emb 
derivation thought scheme forti paradox 
type system inconsistent soon possible construct universal system notation 
application girard paradox shall apply general scheme special case second order church calculus 
construct universal system notation orders 
pib type rop rop rop shall take term little simpler girard thesis 
choice motivated usual way embedding type associated type class rop rop 
general method construction class principia give instances method 
view pairs types elements type rop rop 
way equivalence relation type equivalence class built element type rop rop 
method solves problem definition universal system notation relations 
lemma 
universal system notations 
suppose intentionally equal proof rop show exists morphism 
mor relation mor instantiate proof equality predicate term mor convertible mor mor reflexive relation obtain way proof mor 
proves universal notation system relations 
define piv rop obtained copying level types translation existential quantifier intuitionistic higher order logic 
define term 
look back rules see paradox surprising operation varies types correspond set theoretic product sets 
operation allowed set theory 
church calculus ml polymorphism think second order types strong mean allow generic statement 
shall study weaker notion polymorphism ml notion polymorphic type 
solution uniformity problem milner proposed notion polymorphic constant 
assume known notion example definition concept inclusion sufficient understanding going 
ml type calculus able define generic constant type rop rop rop denotes type variable 
way able define generic constant transitive type rop rop term transitive typed term expresses generic way relation inclusion transitive 
fundamental milner unification algorithm herbrand robinson suited kind type checking 
system attractive practical type theory 
weak notion convenient programmation functionals appears strong logic 
theorem 
church calculus ml polymorphism inconsistent provable calculus 
reasoning close case second order calculus 
define generic constant wf wf says relation founded 
define generic constant emb emb says founded relation strictly previous case second order type 
possible show wf emb provable formula wf emb emb wf emb 
contradiction emb emb emb emb emb emb 
provable 
interesting note notion stratified formula quine close notion generic statement 
test checking formula stratified particular case ml type checking algorithm 
see derivation rosser forti paradox earlier version system quine 
consistent extensions church calculus predicative polymorphism worth note language hol gordon generalisation church calculus type variable allow full polymorphism ml previous contradiction apply calculus 
shall try give consistent formal system consistent allows weak form polymorphism thought formalisation type system hol 
introduce constant type type type type relativize rules second order typing predicative way environments list pairs type type type fl type type fl type fl appear fl fl fl fl type fl fl rop fl pi rop important point longer consider types homogeneous usual types belong type system right formalisation polymorphism lcf mechanisation higher order logic presents uniformity develop generic way usual mathematic arguments consistent 
instance state generic way definition equivalence relation related proof equivalence relation 
instantiate situation concrete example inclusion specialize definition proof obtaining concept equality proof equivalence relation 
practice necessary types arguments mechanism analogous general type checker algorithm ml 
system appears formalisation type system principia notion typical ambiguity 
synthesis facility lcf system hol gordon seen polymorphism ml logical calculus 
sum operator add sum operator types introduce pairing operation projections new conversion rule convertible 
introduce new binder sigmax rules fl type type fl sigmav type type fl type fl fl sigmav type fl sigmav type fl type fl sigmav type fl define notion provable formula calculus second order types 
note system macqueen furthermore logical calculus notion proposition provable formula 
truth table method church calculus show calculus consistent 
possible extend addition hierarchy cumulative universes predicative system martin lof type system right formalism describing modules ml 
addition small products sums useful extend previous calculus addition small product pix sums sigmax type inductive rules fl type fl type fl pix type fl type fl type fl sigmax type pix fl fl fl type fl fl pix fl type fl type fl fl fl sigmax fl sigmax fl fl sigmax fl fl type fl conv fl notion provable formula determined rules church calculus truth table argument shows calculus consistent 
generalisation church calculus done independently products sums types 
combination notions small large powerful natural expression lot mathematical concepts 
system small large products axiomatize categories follows 
context type hom pix piy type pix piy hom hom rop id pix hom pix piy piz hom hom hom define cat hom id saying type objects category determined congruence hom identity id composition formal typed system natural axiomatisation categories 
note formal system object represents category small categories built way sum object type type small category 
natural ask possible add special constant calculus capture formally idea category categories 
cat cat appears possible apply ideas typed checked paradox derive contradiction fact category categories 
argument informal way showing argument independant underlying formalisation higher order logic church type system 
definition 
category order defined obj non empty empty shall say founded founded ordering 
definition 
categories functor said dominated object object 
proposition 
category objects founded categories morphisms identities dominated functors exist 
reason reproduce typed checked example category exists category exits founded exists dominated functor 
argument developed informal way possible apply precise formal system extends church system addition category categories 
add calculus previous section special type cat type constants rules fl cat hom id fl hom id cat fl cat fl cat rules conversion say convertible 
special type cat seen type objects category category 
define terms hom id cat hom id represents category category morphisms functor categories 
cat hom id cat 
previous reasoning shows typed system consistent 
formalisation notion category categories appears necessary weaken logic logic strong expression usual categorical theorem 
approach equational horn clauses formulae possible 
calculus type type application inconsistency calculus martin lof seen generalisation calculus church intuitionistic framework add type type types 
definition 
class term calculus type type class defined inductive rules 
type term 
identifier term 
integer de bruijn index term 
terms term 
term term 
terms pi term extend notion conversion terms relation contains fi reduction congruence abstraction application product 
system constructs typing sequents sequents form gamma gamma list typings identifier terms 
relation read valid term type type assignment gamma 
assignments empty environment valid gamma valid gamma type occur gamma gamma valid type inference rule gamma valid gamma type type gamma valid occurs gamma type gamma gamma gamma pix gamma type gamma pix type gamma pix gamma gamma mn gamma gamma type conv gamma comments necessary connection type system previous extension church calculus 
note pi constants replaced binding pix may thought product type family depend get intuitively type getting pi calculus church idea think proposition type proof 
see pix effectively type proofs proposition propositions pix type proofs proposition pi type proof 
original motivation system identification types propositions 
rop identified type write calculus church identification get calculus 
proposition thought type proof conversely type proposition proposition type non empty 
longer need inductive rules notion provable formula 
define simply provable formula type term type type non empty 
elegant aspect calculus formal system 
wrong inconsistency church system second order type done 
logical calculus system contains intuitionistic church calculus second order quantification types propositions types identified 
get proposition pip type provable definition truth get closed term type pip type term head normal form normalisable 
give identification propositions types 
possible solution calculus constructions keep identification proposition type proof longer identify type proposition 
proposed programming specification languages contains idea type type types fact type type type possible ideas scott martin lof build models theory type type notion model logical side calculus appear 
termination property primary concern computer programmer important study relevance girard paradox lost forever possibility doing proofs programs systems 
calculus constructions levels strengthen system system constructions particular temper fourth level cautious rock close capitol 
girard general idea write previous results explicit proofs 
going apply results study extension calculus construction general formalism mechanical study higher order proofs natural check computer girard paradox formalism 
rules typing extension construction calculus allow context variables general polymorphism 
corresponds extension church calculus second order types 
extend class terms representing proofs terms 
definition 
class term calculus construction class defined inductive rules 
type rop terms 
identifier term 
integer de bruijn index term 
terms term 
term term 
terms pi term note introduce binary operator products 
shall need special constant special rules inference 
motivation shall simply express proposition types principle identify proposition type proofs previous quantifier product pi 
definable pi 
building type system associated logic need operation product formation 
semantic rule provable formulae church calculus appear derived rules simple typing mechanism 
shall generalize previous rules construction calculus type type called contexts shall try extend calculus levels 
assignments empty assignment valid gamma valid gamma rop appear gamma gamma valid gamma valid gamma type appear gamma gamma valid gamma valid appear gamma gamma type valid type inference rules gamma valid gamma rop type gamma valid occurs gamma type gamma gamma gamma pix gamma rop gamma pix rop gamma type gamma pix type gamma pix gamma gamma mn gamma gamma rop conv gamma gamma gamma type conv gamma want usual calculus constructions simply delete rule type variable 
see way calculus close unpublished de bruijn note fact type rop play similar role 
automath languages define degree term degree type 
definition 
shall say type degree rop gamma conv rop 
proposition 
gamma degree degree degree 
proposition 
gamma degree resp 
gamma rop resp 
gamma type 
shows intuitively systems levels proofs propositions types supertypes type degree 
nearly said system type type repeated context 
particular define arrow pi types pi props type assignment 
notions arrows 
view type collection sets viewed exponentiation rop type propositions viewed implication 
way sorts quantifications variable type type 
quantification level types pix type type type hypothesis type quantification level propositions pix type rop rop hypothesis type 
seen core paradox lies double quantification second represent product set represents simply usual quantification sets 
worth compare presentation typed calculus contains higher order logic standard presentations higher logic takeuti want usual higher order type system restrict formation type assignments forbidding type variables 
obtain calculus constructions main addition relation calculus church concise notation proofs 
shall able study manipulations proofs especially cut simply fi reduction 
show calculus general church calculus second order type sense define provable formula term type rop exists term type empty environment 
provable formula church calculus second order type provable translation calculus 
apply previous results obtaining theorem 
exists term pip rop term satisfying condition normalisable 
term head normal form type pip rop look process reduction process understanding proof say proof girard paradox complex try understand 
calculus constructions sums shall study notions sums weak package definable pure calculus construction versus strong projections framework calculus constructions 
result may interesting analysis representation data types typed system notion sum need previously operation pairing projections adds sum formation sigma convention product 
rules derivation construction calculus strong sum empty assignment valid gamma valid gamma rop appear gamma gamma valid gamma valid gamma type appear gamma gamma valid gamma valid gamma rop type gamma valid occurs gamma type gamma gamma gamma pix gamma rop gamma pix rop gamma rop gamma sigmax rop gamma type gamma pix type gamma pix gamma gamma mn gamma gamma gamma sigmax gamma sigmax gamma gamma sigmax gamma gamma gamma rop conv gamma gamma gamma type conv gamma weak notion sum need introduce new binary operator rep fact rep convertible 
replace starred rules gamma sigmax gamma rop gamma pix gamma rep note weak notion sum definable calculus constructions 
usual translation existence quantifier higher order intuitionistic logic define sigmax rop calculus construction weak notion sum consistent normalisation property 
strong notion sum possible build level propositions universal system notation relation rop rop 
previous considerations show possible build term type pip rop term normalisable term head normal form 
result appears metamathematical justification idea package allow user see program projections sum type system inconsistent 
idea package purely programming motivation consistent extensions construction calculus apply various consistent extensions church calculus described previously construction calculus 
formal system implemented ml 
terms 
type integer rop terms 
identifier term 
integer de bruijn index term 
terms term 
term term 
terms pi term 
assignments empty assignment valid gamma valid gamma rop appear gamma gamma valid gamma valid gamma type appear gamma gamma valid type inference rule gamma valid gamma rop type gamma valid gamma type type gamma type gamma type gamma valid occurs gamma type gamma gamma gamma pix gamma rop gamma pix rop gamma type gamma type gamma pix type max gamma pix gamma gamma mn gamma gamma rop conv gamma gamma gamma type conv gamma author know proof theoretic strength system conjecture exceeds zermelo 
possible prove system normalisation theorem girard system powerful higher order arithmetic 
possible add sums inductive types 
important point power calculus fact formal system natural predicative expression reflection principle calculus construction girard paradox show impredicative extension call system levels inconsistent 
show non contradictory concepts simply level proposition may level type predicative 
considerations raise problem curry howard isomorphism propositions types really isomorphism 
problem levels 
choice priori level programs term degree degree 
choose degree general polymorphism programs 
calculus construction shows add dependent product consistent way 
choose degree lose definitely general polymorphism clear set theoretic semantics programs clear way development proofs programs construction system 
macqueen relevant 
girard paradox connections result reynolds set theoretical models second order calculus 
show extensional models polymorphic notion equality entails directly reynolds theorem definition set theoretic model weak conditions 
derivation reynolds produce non normalisable term general polymorphic calculus shorter typed checked 
generally raises questions possible derive kind paradox general polymorphic calculus example russel paradox 
possible different ideas paradoxes characterized behavior corresponding terms reduction 
derivation paradox general polymorphic system seen syntactical counterpart fact set theoretical model second order typed calculus 
explanation non existence typed systems showed formal systems syntax complex usually regarded semantics set theory 
girard told results system show calculus constructions levels inconsistent 
idea presenting forti paradox general system notation ordinals suggested huet 
amadio longo 
type free look types parameters universita di pisa barendregt 
lambda calculus syntax semantics 
north holland 
burstall lampson 
kernel language data types modules 
lecture notes computer science springer verlag 
de bruijn 
lambda calculus notation nameless dummies tool automatic formula manipulation application church rosser theorem 

math 

de bruijn 
survey project automath curry volume acc 
press 
de bruijn 
extensions automath aut family 
unpublished 
cardelli 
polymorphic calculus type type 
private communication 
church 
formulation simple theory types 
journal symbolic logic 
th 
coquand 
une th eorie des constructions de eme cycle paris vii 
th 
coquand 
extensions theory constructions 
preparation 
th 
coquand huet 
constructions higher order proof system mechanizing mathematics 
linz springer verlag lncs 
th 
coquand huet 
concepts math ematiques es dans le calcul des constructions 
au colloque de logique orsay 
girard 
interpretation elimination des coupures de ordre 
etat paris vii 
gordon 
hol machine oriented formulation higher order logic 
cambridge technical report 
lambek 
types sets 
advances mathematics 
macqueen 
dependent types express modular structure 
acm 
martin lof 
theory types unpublished 
martin lof 
intuitionistic theory types predicative part 
logic colloquium northholland 
martin lof 
intuitionistic type theory 
bibliopolis 
meyer mitchell 
second order logical relations 
extended 
milner 
theory type polymorphism programming 
jcss 
mitchell 
lambda calculus models typed programming languages 
ph 
thesis 

mohring algorithm development calculus constructions 
volume 
quine 
mathematical logic 
harvard university press 
rosser 
forti paradox 
journal symbolic logic 
reynolds 
theory type structure 
programming symposium paris 
springer verlag lncs 
reynolds 
polymorphism set theoretic 
lecture notes computer science springer verlag 
russel whitehead 
principia mathematica 
volume cambridge university press 
scott 
data types lattices 
siam journal computing 
takeuti 
proof theory 
north holland part ii 

