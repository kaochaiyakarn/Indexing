correspondence operational denotational semantics 
ong oxford university computing laboratory course introduces operational denotational semantics pcf examines relationship 
topics syntax operational semantics pcf activity lemma parallel context lemma principles proof proof logical relations denotational semantics pcf induced interpretation standard scott model adequacy weak adequacy proof computability predicate domain theory sfp scott domains non full abstraction standard model definability compact elements full abstraction pcf parallel properties order extensional continuous models pcf milner model mulmuley construction excluding proofs additional topics time permitting results pure simply typed lambda calculus friedman completeness theorem minimal model logical relations definability undecidability lambda definability excluding proof di domains stable functions homepage www comlab ox ac uk people luke ong html contents contents historical remarks syntax pcf types 
terms 
typing rules pcf 
term substitution versus context substitution 
operational semantics pcf type theory plotkin style transition relation 
parallel activity lemma 
martin lof style evaluation relation 
pcf type theory 
call value pcf 
turing completeness 
observational equivalence context lemma observational applicative preorders 
context lemma 
proof context lemma 
denotational semantics standard model model pcf 
standard model 
denotational semantics induced interpretation 
adequacy weak adequacy adequacy weak adequacy 
computability argument 
proof context lemma logical relations 
primer sfp domains scott domains 
characterizations sfp domains 
contents full abstraction standard model fully pcf 
pcf plus parallel 
definability compact elements 
inequational full abstraction 
restrictive approach full abstraction 
full abstraction definability simply typed lambda calculus friedman completeness theorem 
logical relations definability 
undecidability lambda definability 
minimal model 
loader decidability result 
di domains stable functions model pcf 
sample historical remarks historical remarks early godel considered notion primitive recursive functionals finite type call godel system connection came known dialectica interpretation 
godel results contribution version hilbert programme 
godel extended bar recursive functionals spector give constructive consistency proof classical analysis 
full blown generalization ordinary recursion theory higher types kleene late see formulation terms computation schemes 
kleene theory notion partial recursive function higher type defined total type structure 
recursion introduced computation scheme essentially encapsulates second recursion theorem 
theory partial recursive functions closed substitution natural formulation recursion theorem fails 
kleene exhibited features observed passing theory involving application partial functions partial functions possible 
attempt platek thesis develop recursion theory partial functions higher type avoids problems kleene theory 
type structure platek considers hereditarily order preserving functions call flat cpo natural numbers 
platek couched thesis terms computation schemes recursion introduced scheme amounting recursion theorem 
essentials theory definition cases fixed points platek introduce calculus formulation regarded precursor pcf 
formal system pcf introduced scott famous remained unpublished manuscript long time appearance bohm festschrift 
syntax pcf simple essentially simply typed calculus augmented general recursion form fixed point operator type augmented basic arithmetic 
scott intended pcf logical calculus algebra studying computability logical properties programs type theory 
major theme scott relationship logical types higher types data types ground order types 
study theory data types requires higher type objects computable functional formalization emphasized scott 
course scott mind semantics terms call scott continuous functions interpretation quite straightforward operational semantics appropriate think computations finite 
theory introduced scott principle implementable focus attention computer science 
theme scott hilbert set justify classical mathematics systematically terms notions intuitively clear possible 
focus programme consistency classical number theory wanted find intuitively clear notions domain finitary mathematics 
bernays subsequently pointed order prove consistency classical number theory necessary extend hilbert finitary standpoint admitting concepts certain kind addition combinatorial concepts relating symbols 
godel introduced system essentially simply typed calculus augmented primitive recursion vehicle expressing notion inclusion believed hilbert programme modified sense viable 
scott considered version pcf typed gamma combinators 
historical remarks completeness asked questions 
question concerns power expression language respect continuous function space model word definability 
came known full abstraction problem pcf scott observed parallel definable language implementation sequential machine require dovetailing strategy 
system pcf formal system sense scott original presentation opposed programming language similar various ways important difference scott approach admits partial functions godel concerned total functions 
syntax pcf syntax pcf plotkin pcf explicitly programming language studied relationship operational semantics denotational semantics 
types pcf types simply types ranged defined follows natural number boolean function ff range ground types standardly associates right parsed 
pcf type expressed uniquely delta delta delta ff abbreviate delta delta delta ff case shall write simply ff 
abbreviates abbreviates 
rank type defined follows rank ff def rank def max rank rank rank measures higher order type call th order type rank mathematical difficulties associated higher order objects stem nesting left 
terms groups pcf terms 
basic arithmetic 
definition cases conditionals 
recursion fixed point operator 
lambda calculus 
typing rules pcf pcf constants simply constants follows numerals natural number booleans succ successor pred predecessor zero test zero cond integer conditional cond boolean conditional constant prescribed type indicated 
range constants 
candidate terms pcf defined recursion follows constant variable st application abstraction term 
ranges set variables ar delta delta delta shall omit type labels write gamma cond cond simply gamma cond respectively 
standardly application associates left st delta delta delta abbreviates delta delta delta st delta delta delta 
routinely omit parentheses safely 
typing rules pcf typing judgements form gamma gamma typing context finite sequence form delta delta delta variables distinct 
gamma delta range typing contexts 
read gamma context gamma term type 
say term candidate typed just case gamma provable gamma case say type 
valid typing judgements defined induction rules term substitution versus context substitution cst gamma prescribed type var delta delta delta fix gamma gamma app gamma gamma gamma st abs gamma gamma pcf term simply term mean typed term candidate 
notions free bound variables standard closed term defined term free variables 
shall mean syntactic equality modulo renaming bound variables terms 
term substitution versus context substitution write term substitution means substitute term free occurrence renaming bound variables necessary avoid variable capture example xz zx zx zx 
henceforth write shall assume typed type 
program mean closed term ground type 
pcf contexts just terms holes represented hole variables delta delta delta subterms 
contexts ranged defined recursion follows cc ranges ar pcf constants fixed set hole variables delta delta delta shall write delta delta delta holes taken set delta delta delta may write 
context substitution defined recursively follows 
delta delta delta def variable constant hole delta delta delta delta delta delta delta delta delta delta delta delta 
crucial difference context substitution term substitution capture permitting variables may bound result capture avoiding adopt variable convention barendregt book bound variables renamed necessary ensure name clash bound variable free variable occurs term context 
term substitution versus context substitution variables bound 
example take xx xy xy bound result xy xy xy bound variable wx renamed avoid capture result term substitution gamma xy 
problems show xx typed 
ii define term type computes factorial function 
prove properties typing judgement gamma appear gamma free 
ii determinacy gamma delta gamma delta agree variables occur free 
iii permutation gamma delta gamma delta 
iv weakening gamma gamma gamma 
contraction gamma provable occurring gamma gamma 
vi substitution gamma delta delta gamma disjoint gamma delta operational semantics pcf type theory operational semantics pcf type theory evaluate pcf programs normal order reduction strategy 
strategy permits weak reduction reduction allowed lambda 
plotkin style transition relation define evaluation contexts recursion follows es ce ranges terms constants 
construction evaluation context exactly hole 
step reduction binary relation pcf terms defined induction axioms succ cond ff ff ff cond ff ff ff zero pred pred zero rule unique hole evaluation context intended site reduction really takes place 
refer instances left hand side axioms redexes 
value shall mean abstraction constant 
term write 
mean 

cond 
convention write shall assume fixed context gamma gamma provable determines types free variables stress assumption applies binary relations terms introduced sequel obs app introducing binary relation terms adopt formal approach define reduction context judgement form gamma prefer simpler notation 
exercise check term 
constant abstraction form evaluation context 
ii satisfies subject reduction type type parallel activity lemma iii substitutive 
iv deterministic proposition term unique evaluation context unique redex subterm delta delta 
deterministic shall call redex delta ii active redex define def reflexive transitive closure 
def delta delta delta def def 

def 
def range values 

henceforth write omega shorthand term 
parallel activity lemma certain parallel operations parallel pcf definable 
scott observed see kind dovetailing strategy needed order compute simulate parallel pcf 
proposition parallel definable pcf closed term satisfies omega omega omega omega prove proposition need lemma 
lemma activity suppose closed type omega program omega gamma 

closed term type omega gamma closed martin lof style evaluation relation 
context closed appropriate types 
active redex active redex copy value active redex su cs constant note mutually exclusive 
proof seen substitutive 
take variables types respectively 
impossible supposition 
context 

constant ii abstraction iii evaluation context reject case supposition 
cases ii correspond case 
consider case iii 
case closed appropriate types cf evaluation context depends active redex delta 
structural induction case case 
prove proposition 
suppose contradiction context satisfies required properties 
omega gamma omega omega gamma proposition cases omega 
case possible cases contradict omega 
martin lof style evaluation relation may operational semantics pcf equivalently terms martin lof style evaluation relation see big step relation 
formally define relation closed terms values induction rules 
read closed term evaluates value 
succ pred pred cond ff ff ff cond ff ff ff zero zero sy vt st pcf type theory check deterministic presentations coincide 
proposition agreement program pcf type theory operational semantics pcf encapsulates deterministic reduction strategy programming language reflects intuitive understanding meaning terms 
view reductions justified replacement term equal term 
intuitive semantics expression equational theory 
case pcf amounts type theory related scott original formulation 
type theory pcf follows 
kinds judgements ffl typing gamma ffl equality gamma seen rules typing judgements 
valid equality judgements defined induction rules gamma gamma gamma gamma gamma gamma gamma gamma delta gamma delta gamma gamma sx free gamma gamma succ gamma pred gamma pred gamma cond ff ff ff ff ff ff gamma cond ff ff ff ff ff ff gamma zero gamma zero require axioms reflexivity fi satisfy typability side condition expressions sides symbol declared type typing context 
consequence gamma provable force gamma gamma provable 
call value pcf important relation reduction relation operational semantics equality type theory 
proposition 
proposition programs equal pcf type theory ground value proof straightforward application church rosser theorem standardization theorem example treatment 
corollary program type theory ground value provable type theory call value pcf call value cbv short pcf terms pcf shall refer call name pcf necessary distinguish cbv version 
step reduction relation defined redex rules fi axiom replaced ranges values 
cbv evaluation contexts defined recursion es ranges values abstractions constants 
exercise define big step evaluation relation cbv pcf prove agrees small step transition relation sense proposition 
turing completeness take argument numeric partial function theta say strongly definable term delta delta delta just case tuple delta delta delta undefined ii proposition pcf turing complete 
say partial recursive function strongly definable 
turing completeness problems construct pcf closed term computes equality function type construct pcf closed terms add add compute addition function add examines left argument right add reverse 
suppose omega 
true type 
justify answer 
prove proposition ii closed value unique evaluation context unique redex subterm delta delta 
prove agreement proposition program hint define family evaluation relations closed terms values mutual rule induction means intuitively evaluates steps 
prove closed term closed omega fp ii omega fp 
note able ascertain input arguments evaluated 
prove proposition partial recursive function strongly definable pcf 
reconcile parallel computed effective procedure turing completeness pcf 
observational equivalence context lemma observational equivalence context lemma purely symbol pushing operational notion program equivalence called observational equivalence programmers know program fragments equivalent interchanged affecting observable outcome computation 
formally suppose terms type 
say observationally equivalent written obs just case context programs value observational applicative preorders definition suppose terms type delta delta delta ff 
define observational preorder obs follows say observationally approximates written obs context programs value obs obs obs 
ii suppose closed terms 
say approximates written app closed terms delta delta delta value sp delta delta delta tp delta delta delta define app app app straightforward check obs app preorders reflexive transitive example readily see omega app omega true omega obs omega proof take context omega omega program 
exercise 


evaluation context cases trivial 
case gamma ce gamma 
impossible 
consider second illustration 
active redex omega omega omega gamma 
active redex omega form omega omega 
ii reader invited check add app add add obs add 
quantification contexts general quite hard check directly terms observationally equivalent 
iii verify obs true set free variables obs 
context lemma definition obs qualification ranges programs redundant 
reason assuming obs necessarily follow context program program consider obs take state useful property equivalences obs app pcf theories sense 
see problems hints proof 
theorem gamma provable obs app context lemma aim establish important connexion preorders 
applicative context shall mean evaluation context form xp delta delta delta closed term 
suppose closed terms type 
observe app equivalent statement applicative context programs obs implies app fact converse true 
theorem context lemma suppose closed terms type delta delta delta ff 
app obs proof statement closed terms type app context programs value aim prove induction base case true implies app ground value case 
establish inductive case case analysis 
observe syntactic shapes cc delta delta delta cm constant delta delta delta cm delta delta delta cm xc delta delta delta cm 
proof context lemma consider case cond illustration 
suppose cond suppose note induction hypothesis cond argument entirely similar case 
suppose delta delta delta cm delta delta delta cm delta delta delta cm 
closed terms infer 
suppose delta delta delta cm define new context delta delta delta cm infer conclude 
suppose sc delta delta delta cm observe syntactic shapes constant set sc delta delta delta cm note shape respectively context type 
applying contexts type case may infer sc delta delta delta cm app tc delta delta delta cm context lemma tells applicative contexts determine observational preorder closed terms 
proof due berry 
milner similar result family languages expressed formalism combinatory logic 
proof context lemma proof due martin hyland 
fix hole variables define simultaneous recursion fc cf range constants variables respectively 
construction exactly occurrence finitely occurrences hole variable proof context lemma addition term evaluation context 
call pre evaluation context 
observe app problem pre evaluation context term typed app 
suppose closed terms app assume abstraction 
take context programs suppose 
aim suffices see problem prove 
assumption finitely distinct pre evaluation context delta delta delta say 

delta delta delta 


ground value ii fresh variable 

intuitively ii says intermediate reduction steps touch new copy occupying hole 
ii substitutivity 
see exercise iii 
app preceding observation app 
reason 

app 
inductively 
desired 
problems prove principles omega obs omega omega obs succ 
prove principles app app evaluation context 
ii suppose obs true context obs 
justify answer 
closed term write mean suppose terms type 
prove obs context programs 
ii closed terms app equivalent closed appropriate types 
consider variant notions observational preorder defined open terms 
suppose terms type 
closure abstraction abs said hold delta delta delta closed terms context programs proof context lemma ii closure substitution sub said hold closing substitutions closed terms type contexts programs 
prove obs abs sub equivalent 
propose way app extended preorder terms general 
new preorder obs closed term type prove obs ii converse true 
prove obs px obs occur free obs sy 
ii prove gamma provable obs 
iii converse ii true 
prove context lemma call value pcf 
proof theorem 
denotational semantics standard model denotational semantics standard model model pcf 
pcf typed functional language interpretation language provide system domains gives interpretation types domain type 
denotation pcf term type respecting valuation function takes term environment giving denotations variables occurring free term returns denotation term element appropriate domain 
style denotational semantics valuation function defined compositionally 
models simply typed calculus cartesian closed categories 
interpretation standard cartesian closed category types interpreted objects terms maps 
important feature pcf recursion form fixed point operator type 
appeal knaster tarski fixed point theorem construct fixed point continuous function complete partial order cpo 
combining seek cartesian closed category cpos continuous functions 
cpo mean partially ordered set directed subset upper bound lub 
function gamma 
cpo said continuous directed subsets set continuous functions gamma 
cpo induced pointwise ordering 
question model pcf best addressed categorical terms see appendix concise account 
shall introduce class models cartesian closed category cpos continuous functions shall focus canonical interpretation studied scott 
approach shall concrete attempt general 
collection value domains pcf family cpos type 
said standard flat cpo natural numbers flat cpo booleans 
interpretation pcf ffl collection value domains ffl map gamma gamma 
set pcf constants constant type element ffl semantic fixed point operator fix gamma 
type standard model standard model mean continuous function space model proposed scott 
say standard interpretation standard collection value domains exact equivalence category simply typed lambda calculi surjective pairing category cartesian closed categories see 
denotational semantics induced interpretation interpretation write gamma standard scott cond bde zero succ pred gamma fixed point operation fix gamma 
defined fix fix interpretation pcf 
say environment function set variables ar environments ranged ae ae say ae gamma environment just case gamma ae write set env gamma 
update operation defined follows ae 
def ae 
undefined environment sends variable 
denotational semantics induced interpretation define denotational semantics induced interpretation pcf follows 
take typing judgement gamma take gamma environment ae define gamma ae recursion follows gamma ae ae gamma ae gamma st ae gamma ae gamma ae gamma ae gamma ae gamma ae fix gamma ae denotational semantics induced interpretation fix fixed point operation specified interpretation fourth clause denotation set theoretic function 
gamma ae need check definition gamma provable ae gamma ae element value domain proposition interpretation pcf 
structural properties induced denotational semantics satisfied weakening 
suppose gamma ae ae gamma environments 
ae ae occurs free gamma ae gamma ae ii substitution 
gamma delta environments ae gamma delta ae gamma ae delta ae iii compositionality 
gamma environments ae gamma ae gamma ae context gamma delta gamma delta provable gamma delta environment ae gamma delta ae gamma delta ae notation henceforth consider denotation gamma ae provable judgement gamma gamma environment ae 
ii save writing shall write gamma ae simply ae shall assume free variables implicitly typed fixed gamma 
standard interpretation induces model pcf sense 
proposition denotational semantics induced standard interpretation model pcf type theory 
gamma provable ae gamma environment ae gamma provable ffl gamma simply ffl typing context known ae ae gamma environment ae 
denotational semantics induced interpretation problems cpo 
prove fixpoint operator fix gamma 
continuous function 
prove interpretation pcf induces denotational semantics compositional satisfies properties substitution weakening sense defined section 
prove proposition 
prove proposition 
adequacy weak adequacy adequacy weak adequacy operational point view program fragments equal interchanged affecting observable outcome computation definition observational equivalence 
denotational semantics meaning program term semantic function denotes 
denotational point view programs equal denotation model 
definition denotational semantics gamma said adequate pcf denotational equality implies observational equivalence terms gamma gamma provable ae env gamma ae ae obs say gamma valid written gamma just case gamma environment ae gamma ae gamma ae 
ii converse true denotational semantics said equationally fully pcf 
define theory induced collection equality judgements valid equationally fully pcf just case theory induced coincides observational equivalence 
iii say denotational semantics weakly adequate program ground value 
adequacy weak adequacy proposition interpretation pcf weak adequacy implies adequacy 
proof take terms ae ae environment ae 
program context programs suppose value weak adequacy 
compositionality proposition ii 
deduce program context 
weak adequacy exactly way show implies theorem weak adequacy standard model weakly adequate 
program ground value notation shall write standard semantics gamma ae simply gamma ae clear mean 
closed term ae shall write ae 
computability argument proof strategy called computability argument 
illustrates common feature inductive reasoning typed calculus necessary establish property uniformly example applicable terms opposed just closed terms types opposed just ground types terms types really interested validity smaller collection terms 
computability argument range ground values 
define predicate called computability terms 
ground type closed term said computable satisfies weak adequacy theorem 
notion computability extended higher type terms 
definition computability predicate defined follows ff closed computable implies 
ii closed computable just case st computable closed computable term 
iii free variables delta delta delta bm computable substitution mapping closed computable term term delta delta delta computable 
regard substitution type respecting map variables terms 
combining observe term delta delta delta ff computable ffl substitution mapping free variables closed computable terms ffl closed computable terms delta delta delta term delta delta delta computable 
proposition pcf term computable 
proof prove induction structure delta delta delta ff 
substitution said closed computable maps free variables closed computable terms 
case take closed computable substitution sequence closed computable terms definition computable 
assume gamma gamma free variables delta delta delta xn computability argument case constant shall just consider case cond ff illustration 
closed computable terms type type suppose cond ff 
definition standard interpretation say 
closed computable terms cond ff case closed computable substitution sequence closed computable terms suppose 
note valid def 

putting observe delta delta delta delta delta delta 
induction hypothesis computable substitution closed computable delta delta delta appeal case case requires introduce syntactic approximants fixed point operator 
extend definition typing judgements pcf rule gamma gamma extend rules defining step reduction axioms sy easy see denotation approximant 
extend inductive definition denotational semantics rule gamma ae gamma ae note sy 
need claim proof leave exercise reader claim 
ii ff closed computable substitution sequence closed computable terms suppose 
claim compositionality delta delta delta delta delta delta computability argument step justified application continuous operation 
flat cpo delta delta delta computable delta delta delta claim ii desired result delta delta delta case prove induction base case obvious 
closed computable substitution sequence closed computable terms suppose 
semantic function sound induction hypothesis computable case application consider possible shapes ffl xp ffl cp constant ffl ffl ffl consider case illustration 
closed computable substitution sequence closed computable terms suppose 
induction hypothesis closed computable computable established previous case rest entirely similar 
computability argument central proof traced back important tait 
variation theme called logical relation independently developed plotkin see 
logical relations useful tool proving properties typed lambda calculi 
plotkin adequacy result pcf extended richer computational settings 
example shown adequacy holds meta language denotational semantics elaborate type system including recursive types 
interesting line research prove adequacy general computational setting possible 
related problem investigation proof techniques adequacy 
example pitts applies general powerful machinery mixing inductive inductive reasoning investigate adequacy proofs respect domains defined recursive domain equations 
denotational semantics prescribes meanings syntactic entities compositionally meaning composite term defined terms meanings respective components 
mathematical properties denotational model understood denotational approach lends algebraic mode reasoning global properties programs termination 
useful denotational semantics predicting behaviour programs depends fits operational behaviour programs 
adequacy establishes just goodness fit criterion fundamental importance 
proof context lemma logical relations proof context lemma logical relations henceforth shall consider standard model refers value domain standard collection 
pcf denote collection closed terms type definition type define relation theta pcf follows ff pcf de st observe immediate consequences definition 
delta delta delta ff pcf ff ii de st saving writing shall omit type label write simply 
establish basic property logical relation 
lemma transitivity type delta delta delta ff gamma app gamma proof take assumption gamma assumption gamma 
suppose gamma say 
weak adequacy app assumption weak required 
need result logical relations called fundamental theorem logical relations 
theorem reflexivity closed term types name closed terms follows xyz xz yz xy restriction closed terms shall consider terms generated constants application fixed point operators 
call terms pcf combinators 
note result proposition closed term pcf combinator type proof context lemma logical relations need check cases constant ii iii 
leave verification cases exercise reader 
iii set delta delta delta ff take terms domain elements aim prove sy suppose lhs non 
element appropriate ground type value domain 
inductively omega ff omega say omega sy done 
prove reflexivity lemma take closed term proposition combinator app pcf theory sense theorem app standard interpretation induces model pcf type theory sense proposition 
just shown result follows transitivity lemma 
corollary closed context typed 
proof proof induction structure context programs 
note base cases just reflexivity lemma 
inductive cases completely straightforward 
prove context lemma 
take closed type app take closed context suppose lemma theorem corollary 
weak adequacy definition 
weak adequacy problems prove proposition 
proof context lemma logical relations prove constant ii extend logical relation introduced definition terms necessarily closed 
hint consider closed substitution oe maps variables type compatible closed terms 
ii new definition rework proof context lemma 
need terms argument 
logical relation argument call value pcf 
define new type indexed family logical relations theta pcf follows ff pcf de st logical relations prove weak adequacy theorem 
primer sfp domains primer sfp domains complete partial order cpo short partially ordered set directed subset upper bound lub recall subset poset said directed just case pair elements upper bound note cpo element denoted simply lub directed subset element cpo compact finite isolated directed subset scott domains cpo algebraic element subset compact directed lub algebraic denumerably compact elements 
subset cpo said consistent compatible upper bound write set proposition cpo properties equivalent consistent completeness consistent subset lub 
compatible pair elements lub subset greatest lower bound glb cpo said consistently complete conditions satisfied 
shall call consistently complete algebraic cpo scott domain 
key property category scott domains closed function space construction 
fact cartesian closed category 
see 
inverse system projections cpo countable collection 
continuous functions satisfying conditions projection ffi ii finiteness image finite finite cpo iii approximation iv limit id 
proposition cpo inverse system projections algebraic 
set compact elements characterizations sfp domains characterizations sfp domains proposition cpo conditions equivalent inverse system projections 
colimit directed diagram finite posets category cpos embedding projection pairs 
algebraic satisfies condition finite subset compact elements set mub minimal upper bounds finite complete sense upper bound mub set finite def def mub def 
cpo said strongly algebraic conditions satisfied 
strongly algebraic cpo known sfp domain 
name acronym sequence finite posets arises main descriptions sfp domain bilimit direct limit embeddings equivalently limit colimit coincidence due scott inverse limit projections sequence finite posets 
reason sfp domain called bifinite cpo 
recommended ch 

lemma sfp domain elements greatest lower bound scott domain 
problems prove lemma ann sfp domain elements greatest lower bound scott domain 
full abstraction full abstraction plotkin proved standard model fully pcf pcf extended parallel conditional construct 
shall prove full abstraction standard model different extension pcf pcf extended parallel 
proof due curien 
standard model fully pcf theorem standard model fully pcf 
proof set cond omega gamma cond omega cond omega omega gamma omega define respectively 
considering small step reduction closed term type ffl tp satisfies operational properties parallel proposition 
ffl fp satisfies properties 
view proposition app app context lemma obs por function gamma 
recall flat cpo booleans defined por 
por monotone standard model 
por por preceding proposition shows standard model rich structure pcf 
observation scott 
ways try achieve full abstraction 
fixes model extends language second cuts model size fit language 
shall call approach expansive second restrictive 
pcf plus parallel pcf augmented parallel 
curien shown addition gives expressive power pcf compact elements standard model definable 
full abstraction straightforward consequence 
definability compact elements obtained pcf augmenting constant type step reduction extended axioms term type definition evaluation contexts additional rules note new step reduction longer deterministic zero zero zero church rosser 



evaluation defined 
exercise define evaluation relation agrees 
define ary parallel recursively delta delta delta delta delta delta define negation term neg type parallel left type ary parallel follows neg cond neg delta delta delta delta delta delta cond cond similarly extend ary version definability compact elements recall useful fact domain theory 
lemma scott scott domains cpo continuous functions form induced pointwise ordering 
definability compact elements ii compact elements upper bounds finite sets step functions ranging compact elements respectively ground type value domains standard model scott domains lemma value domain scott domain 
scott domain write collection compact elements fix type delta delta delta ff 
lemma compact element just ranges finite subsets satisfying element shape delta delta delta delta delta delta elements delta delta delta delta delta delta delta delta delta delta delta delta compatible fact set satisfying satisfies consistent subset gunter call set satisfying crisp 
interpret standard model extending standard interpretation setting por see proof theorem 
lemma definability type compact elements domain standard model definable 
proof suffices prove type term defining term defining incompatible term defining 
prove simultaneously structural induction 
base cases corresponding ground types straightforward 
inductive case delta delta delta ff take compact element 
argue induction number crisp set satisfying call breadth statement compact element breadth definable 
zero just 
write delta delta delta delta delta delta subcases modulo permutations delta delta delta definability compact elements delta delta delta delta delta delta case induction hypotheses respectively terms defining respectively easy see delta delta delta cond ff delta delta delta delta delta delta delta delta delta omega defines case crisp pair depending incompatible 
induction hypothesis term defining 
induction hypotheses gamma respectively terms defining compact elements delta delta delta delta delta delta respectively 
remains observe term ad delta delta delta ad delta delta delta delta delta delta ii ad delta delta delta delta delta delta straightforward see term delta delta delta cond ff dx delta delta delta delta delta delta delta delta delta defines consider term delta delta delta gammak delta delta delta delta delta delta delta delta delta 
gammak delta delta delta delta delta delta delta delta delta recall term type delta delta delta denotation satisfying delta delta delta similarly verify satisfies necessary properties suppose ad delta delta delta gammak delta delta delta delta delta delta delta delta delta inequational full abstraction delta delta delta suppose ad delta delta delta 
ff flat cpo delta delta delta delta delta delta 
simplicity may write delta delta delta 
induction hypotheses respectively terms defining compact elements respectively 
term defines xm delta delta delta xm write previous case write delta delta delta 
incompatible incompatible say compatible 
applying induction term defines 
similarly define respectively 
cond ff xm neg defines 
concludes proof definability result 
inequational full abstraction plotkin shown standard model fully pcf extended parallel conditional construct terms gamma gamma provable ae env gamma ae ae obs theorem plotkin standard model fully 
proof suppose gamma gamma delta delta delta ff gamma delta delta delta xm bm provable 
assume obs aim show gamma environment ae ae ae algebraicity domains suffices consider ae ae take definability lemma terms define ae respectively 
set delta delta delta xm delta delta delta delta delta delta ae delta delta delta delta delta delta xm delta delta delta delta delta delta proposition ii obs weak adequacy ae delta delta delta proposition ii algebraicity ae ae done 
restrictive approach full abstraction milner shown order extensional fully model pcf unique isomorphism 
theorem milner unique isomorphism fully order extensional continuous model pcf 
milner model essentially term model 
construction uses suitable completion terms appropriate equivalence relation way reminiscent construction sfp domains see 
restrictive approach full abstraction mulmuley gave construction milner model mixture semantic syntactic methods 
starting point continuous space model built standard lattice interpretation numerals booleans 
family logical relations indexed types defined elements standard model closed pcf terms follows ground type function type de st type preorder defined domain term standard model equivalence associated preorder complete 
value domain top element quotients may turned retraction 
milner fully model obtained removing top element domain 
problems give evaluation relation presentation operational semantics 
prove step reduction relation church rosser 
show relation deterministic parallel conditional pcf definable closed term satisfies boolean values omega restrictive approach full abstraction extend pcf parallel conditional constants cond extend definition axioms value appropriate type cond ff cond ff ff ff cond ff ff ff extend definition evaluation context rules cond ff cond ff cond ff prove parallel definable extended language parallel conditional definable 
prove lemma 
scott domains 
prove compact elements scott domain exactly ranges crisp sets 
full abstraction definability full abstraction definability theorem definability model pcf sense definition 
suppose enriched category cpo cpos continuous functions order extensional 
interpretation type scott domain 
ii fully compact element value domain definable 
divide result couple propositions prove turn 
proposition theorem 
interpretation type scott domain 
proof suffices prove type ffl inverse system projections ffl elements meet show semantic objects projection function meet operation exist exhibiting terms psi glb define respectively 
pcf constant tests equality ground values integer type test definable terms test zero constant fixed point operator 
integers decrement step reaches zero check zero 
term type eq implements algorithm cond zero zero zero zero pred pred left left type defined follows def cond cond def cond xt cond define psi def psi def cond zero omega psi def succ psi pred glb def cond cond yt omega gamma cond omega glb def cond omega full abstraction definability easy see psi psi recursively define psi def psi psi glb def glb xz yz ary version term glb defined glb def delta delta delta glb glb delta delta delta proposition milner theorem 
fully compact element value domain definable 
proof prove contraposition 
suppose type natural number compact element ffl ffl definable 
delta delta delta ff minimal type compact element definable subset definable elements 
partition gamma def ffl finite set may write fl gamma ffi 
assumption terms gamma delta define elements fl ffi respectively 
consider case 
write gamma psi glb gamma delta delta delta gamma set fl def gamma 
fl fl delta delta delta fl fl delta delta delta fl fl delta delta delta fl ffl fl psi fl fl say fl note ffl fl ffl definable 
order extensionality oe delta delta delta oe delta delta delta oe delta delta delta oe assumption minimality terms delta delta delta defining oe delta delta delta oe respectively 
similarly terms defining ffl delta delta delta ffi delta delta delta claim ground type ff compact ff ground type ff compact ff step function ff ff pcf definable 
write term defines element 
take ff 
cond omega cond xt omega cond omega full abstraction definability consider terms type ff xi def glb ff ffl delta delta delta psi xt delta delta delta 
ffl delta delta delta psi xt delta delta delta delta delta delta oe psi xs delta delta delta xi def glb ff ffl delta delta delta psi xt delta delta delta 
ffl delta delta delta psi xt delta delta delta delta delta delta oe psi xs delta delta delta straightforward see xi ffl xi ffl 
show xi obs xi context lemma weak adequacy theorem suffices prove xi xi closed term type note cases ffl psi xi xi ffl psi gamma xi xi 
consider case 
result achieved terms xi def glb ff ffl delta delta delta psi xt delta delta delta 
ffl delta delta delta psi xt delta delta delta xi def omega theorem proved argument proof theorem 
problems verify psi glb define respectively system projections collection meet operations value domains 
simply typed lambda calculus additional topics simply typed lambda calculus friedman completeness theorem logical relations definability undecidability lambda definability minimal model loader decidability result di domains stable functions model pcf 
model pcf 
definition fix category cartesian closed category equipped additional structure conditional 
object maps gamma 
gamma 
family maps fl theta theta gamma 
object property theta theta theta theta theta theta theta oe theta theta theta theta theta fst psi gamma gamma gamma gamma gamma snd fl commutes 
ii fixed points 
family maps object ya gamma 
property diagram theta theta ya theta delta ya ev commutes 
definition suppose symmetric monoidal category 
fix category enriched mean category enriched cartesian closed enriched sense natural isomorphisms characterizing products function spaces maps appropriate hom objects ii underlying category ordinary fix category 
note things stand interaction enrichment conditional fixed points 
model pcf 
definition suppose category finite products object equipped maps take numerals gamma 
just defined 
map gamma 
represents expresses numerical function gamma 
just composite delta delta delta equal delta delta delta gamma 
natural numbers delta delta delta suppose object equipped maps map gamma 
represents ary relation just composite delta delta delta gamma 
delta delta delta gamma 
delta delta delta definition suppose category finite products terminal object suffices equipped diagram consider object equipped maps say equipped simple object numerals relative just model pcf 
diagrams commute 
course gamma 
numerals derived gamma 
gamma 
definition concrete version categorical model pcf fix category equipped simple object numerals 
hope clear equational theory pcf modelled structure 
note passing fix category may contain non isomorphic simple objects numerals choice definitely part structure 
general categories concrete natural way global sections functor faithful 
gamma 
gamma 
gamma 
say model extensional 
similarly common order enriched situation may ask global sections functor regarded poset enriched functor enriching category poset enriched faithful 
gamma 
gamma 
gamma 
say model order extensional 
category theorists talk category enriched category having points 
problems categorical model pcf 
show model pcf type theory 
sample sample correspondence operational denotational semantics problems 
prove program hint define family evaluation relations closed terms values mutual rule induction means intuitively evaluates steps 

prove closed term closed closed type omega fp ii omega fp 
note able ascertain input arguments evaluated 

prove denotational semantics induced standard interpretation model pcf type theory gamma provable ae ae gamma environment ae 

extend logical relation introduced section terms necessarily closed 
hint consider closed substitution oe maps variables type compatible closed terms 
ii new definition rework proof context lemma 
need terms argument 

define new type indexed family logical relations theta pcf follows ff pcf de st logical relations prove weak adequacy theorem 
may barendregt 
lambda calculus 
north holland revised edition 
berry 
mod eles compl ad des lambda typ es 
technical report universit paris vii 
th ese de doctorat etat 
church 
formulation simple theory types 
symbolic logic 
crole 
categories types 
cambridge university press 

curien 
observable algorithms concrete data structures 
information computation 
appear 
davey priestley 
lattices order 
cambridge university press 
cambridge mathematical textbooks 
godel 
uber eine noch nicht erweiterung des 
dialectica pages 
godel 
kurt godel collected works volumes ii feferman editors 
oxford univ press 
gunter 
semantics programming languages structures techniques 
mit press 
gunter scott 
semantic domains 
van leeuwen editor handbook theoretical computer science vol 
pages 
elsevier 
kleene 
recursive functionals quantifiers finite types trans 
american mathematical society 
kleene 
recursive functionals quantifiers finite types ii 
trans 
american mathematical society 
lambek scott 
higher order categorical logic 
cambridge studies advanced mathematics 
cambridge university press 
martin lof 
constructive mathematics computer programming 
international congress logic methodology philosophy science pages 
north holland 
milner 
fully models typed lambda calculus 
theoretical computer science 
mulmuley 
fully submodels typed lambda calculus 
journal computer system sciences 
mulmuley 
full abstraction semantic equivalence 
mit press 
pitts 
computational adequacy mixed inductive definitions 
proc 
th int 
symp 
mathematical foundations computer science ix new orleans 
springer 
lncs 
appear 
platek 
foundations recursion theory 
phd thesis standford university 
plotkin 
set theoretical definition application 
technical report mip school univ edinburgh 
plotkin 
call name call value lambda calculus 
theoretical computer science 
plotkin 
powerdomain construction 
siam computing 
plotkin 
lcf programming language 
theoretical computer science 
plotkin 
cpo tools making meanings 
post graduate lecture notes advanced domain theory dept computer science univ edinburgh 
plotkin 
types partial functions 
post graduate lecture notes dept computer science university edinburgh 
scott 
type theoretical alternative cuch iswim 
theoretical computer science 
spector 
provably recursive functionals analysis consistency proof analysis extension principles formulated current intuitionistic mathematics 
recursive function theory proc 
symposia pure mathematics pages 
american mathematical society providence ri 
statman 
logical relations typed calculus 
information control 
tait 
intensional interpretation functionals finite type symb 
logic 
tarski 
lattice theoretical fixpoint theorem applications 
pacific mathematics 
index gamma environment algebraic active redex adequate algebraic approximates bifinite cpo fix category fix category enriched categorical model pcf collection value domains compatible computability condition conditionals consistent consistently complete constants contexts crisp evaluation contexts extensional fixed points fully fully interpretation inverse system projections represents observationally approximates observationally equivalent step reduction order extensional pcf theories pcf type theory program rank redexes scott domain sfp domain simple object numerals standard interpretation step functions strongly algebraic strongly definable term theory induced types typing judgements valid value weakly adequate 
