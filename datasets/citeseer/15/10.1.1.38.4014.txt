modularity expressibility nets relations alexander rabinovich department computer science raymond beverly faculty exact sciences tel aviv university tel aviv israel modularity reflects frege principle expressions expr expr meaning semantics replaced appropriate context changing meaning expression 
identified observable relations nets observable relations appropriate tools investigation dataflow networks nondeterministic agents 
observable relations input output behaviors general nondeterministic dataflow agents 
semantics nets observable relations consistent input output behavior dataflow agents 
showed main source brock ackerman anomaly semantics nets relations 
turns semantics modular 
central objective characterization modular classes relations indirectly set dataflow nets anomalies 
major theme plays technical role characterization interesting expressibility relational nets 
investigation reveals interesting role played stable functions introduced berry 
contents modularity substitutivity compositionality 
historical background 
overview results 
preliminary 
results 
plan 
background nets syntax 
substitution 
algebra nets 
domains 
observable approximating relations 
notational proviso 
nets functions 
semantics nets relations 
algebra observable relations 
semantics terms net vs semantics nets relations 
algebra relations modularity laws 
looping modular classes 
classification observable relations expressibility non modular classes modular classes streams domains research structure degrees 
characterizations non modular classes 
modular classes 
reasoning 


modularity substitutivity compositionality modularity reflects frege principle expressions expr expr meaning semantics replaced appropriate context changing meaning expression sem expr sem expr implies sem expr sem expr gamma substitutivity binary relation semantical domain meanings broader notion 
means sem expr expr implies sem expr expr particular may happen equivalence relation semantical domain 
example dataflow net may specify process pr mainly interested inputoutput behavior rel pr process relation input histories output histories pr rel substitutivity substitutivity equivalence rel pr rel pr fundamental importance 
general necessarily equivalence relation 
matter fact dataflow nets consider substitutivity rel rel pr rel pr 
conventional syntax call textual opposed graphical syntax nets signature sigma 
complex piece syntax expr may uniquely decomposed simpler sub pieces expr op expr delta delta delta expr op sigma 
fact usually referred unique decomposition theorem 
compositional semantics corresponding semantical clause format sem expr def op sem expr sem expr 
op semantical constructor corresponds op situation natural clear notion context quite evident compositional semantics guarantees modularity 
compositional semantics may characterized homomorphism free sigma algebra syntactical domain sigma algebra semantical domain 
typically denotational semantics formulated compositional style supports modularity 
starts operational semantics lacks compositional structure 
standard way prove modularity discover compositional semantics equivalent operational 
net models concurrency syntax provided specific class nn labeled graphs called nets semantics usually defined globally operational style appropriate firing enabling rules solution system equations 
example semantics petri nets defined rules specify set enabled transitions effect execution enabled transition 
graphical syntax nets notions context subnet substitution sense gamma substitutivity particular modularity may defined investigated 
note modularity issues nets investigated introducing textual syntax descriptions nets 
operations nets defined 
broy considered operations loop aggregation nets 
textual language net describing nets 
different terms textual language may describe net 
terms textual language net graph equivalent describe isomorphic nets 
compositional semantics textual language net semantics nets graphs defined way net choose term describes call standard description semantics net defined semantics standard description 
semantics defined way necessarily modular 
sufficient condition modularity requirement graph equivalent terms net semantics 

historical background petri nets dataflow nets fundamental paradigms concurrency 
historically modularity topics appeared paradigms follows 
dataflow 
substitutivity issues dataflow nets identified early sharp way 
theories concurrency main concern dataflow behavior system 
kahn principle states special deterministic agents input output behavior net obtained behaviors components 
behaviors kahn agents sequential functions behavior net agents obtained solution appropriate system equations constructed functions computed components 
kahn principle implies dataflow nets deterministic agents rel substitutive 
attempt generalize kahn result nondeterministic agents brock ackerman observed rel substitutivity fails 
celebrated counterexample illustrates called brock ackerman anomaly 

petri nets 
elementary petri nets modularity established mazurkiewicz pattern mentioned textual syntax 
discovered compositional semantics elementary petri nets equivalent original token game semantics 
novelty case textual syntax may different decompositions net subnets 
words textual syntax compositional semantics homomorphism sigma algebra system free generators case nets generators obey nontrivial relations 
clearly exists homomorphism syntactical algebra semantical algebra equations hold syntactical algebra hold semantical domain 
mazurkiewicz fundamental observation elementary petri nets signature sigma consists binary operation interpreted combination nets syntactical level synchronization processes semantical level nontrivial relations amount commutativity associativity operation 
sequel formulated compositional semantics kind general classes nets comparing existing token game semantics 
seminal works dataflow nets petri nets inspired strongly influenced research modularity net models 

note works modularity compositionality clearly distinguished 
modularity issues models net concept constitute major goals previous papers 
mazurkiewicz approach formulate alternative compositional semantics token game semantics nets 
hand main concern phenomena brock ackerman anomaly rely specific textual syntax nets 
important conceptual technical novelty started developed idea consider semantics nets relations addition semantics nets processes 
identified observable relations nets observable relations appropriate tools investigation dataflow networks nondeterministic agents 
observable relations behaviors general nondeterministic dataflow agents 
semantics nets observable relations unique semantics consistent fixed point solution systems equations input output behavior dataflow agents 
turns semantics modular 
showed main source brock ackerman anomaly semantics nets relations 
considers nets subclass observable relations may happen semantics nets modular 
say subclass relations modular nets relations meaning subnet net relations replacing obtain net meaning net appears nontrivial cases tasks reducible ffl find class dataflow agents rel substitutive 
ffl find modular class observable relations 
asked nonfunctional agents may dataflow nets producing modularity anomaly 
net central objective characterization modular classes relations indirectly set dataflow nets anomalies 
major theme plays technical role characterization interesting expressibility relational nets 
investigation reveals important role played stable functions introduced berry 

overview results 
preliminary simplicity consider finite nets 
net arcs channels divided input output internal channels 
fig 
suggests 
names places appropriate types 
example input channels input channels net output channels output channels net 
net piece syntax semantics defined appropriate interpretation places 
relational net places net interpreted input output relation values input output channels node 
semantics assigns net relation values input output channels net values internal channels hidden computation global relation uses values passed internal channels 
definition semantics called relational semantics semantics nets relations justification section 
remarks modularity net semantics order 
usually textual syntax 
repertoire operations legal syntactical expression unique decomposition form op exp exp exp op operation exp legal syntactical expressions 
syntax suggests notions context 
nets non standard syntax 
may define operations nets nets unique decomposition theorem hold 
spite natural notion subnet brings notion context 
definition semantics called modular iff nets meaning net obtained net replacing subnet meaning 
example consider nets fig 

type sets input output channels 
subnet net fig 

replacing obtain net fig 

modularity relational semantics imply specify equal input output relations specify equal relations 
noted earlier relational semantics modular 
modularity reflects frege principle crucial property semantics alternatives possible 
relations wrong structure apply net composition relational semantics little interest 

relations widely programming 
source brock ackerman anomaly relational semantics 
important find classes relations semantics modular 
ambiguous unambiguous finite sequential stable functional classification relations explore second alternative 

results consider relations stream domains classify functional nonfunctional 
continuous function represented approximating relation def functions subdivided different classes sequential ae stable ae continuous 
classification standard precise definitions 
relations classified ambiguous unambiguous 
roughly speaking ambiguous relation consistent domain inputs may produce inconsistent outputs 
relations unambiguous 
simplest ambiguous relation relation inputs output channel produce output 
functional relations unambiguous unambiguous nonfunctional relations 
example unam relation inputs output channels produced second channel 
unam unambiguous nonfunctional 
simplest nonfunctional relation 
interesting subclass subclass finite relations 
classification relations fig 

deal classes relations properties class basic computational power amounts requirement class contains finite sequential functions identity function 
second require class closed net constructs net relations class specifies relation class 
ready state results 
theorem modular class contain ambiguous relation 
theorem modular class contain nonfunctional relation unstable function 
theorem class functional relations modular 
maximal modular class maximal modular classes 
theorem class generated stable functions relation unam modular 

plan sequel exposition organized follows section deals conceptual background 
definitions semantics provided justifications semantics nets relations reasonable semantics recalled 
exposition 
semantics nets relations tightly connected fixed point operator denote loop relations 
functions simultaneous fixed point coincides corresponding nested fixed points 
relations case source failure modularity 
section show class relations modular iff relations simultaneous corresponding nested fixed points 
laws valid algebra relations provided 
section deals classification relations 
section state expressibility results 
particular find simplest relations different classes 
expressibility issues classical topic recursion theory 
panangaden promote topic dataflow 
section derive theorem theorem stated 
theorems announced 
section contains proof class generated stable functions relation unam modular 
proof relies interesting connection nets relations nets functions relations 
dataflow theory inspired mainly developed stream processing reason focus specific stream domains 
section sketch modification done general cpos called domains 
section discusses open problems 

background section introduce basic notions 
sections deal nets syntactical objects 
section full syntax nets section substitution nets defined section operations nets defined 
section observable relations introduced connection multi valued functions explained 
section defines semantics nets functions solutions corresponding systems equations 
section semantics nets observable relations defined natural extension semantics nets functions 
sections describe operations observable relations state connections semantics nets relations 
material 

nets syntax fig 
presents syntax nets 
net appropriate labeled graph 
provide requirements topology labeling nets 
graph net non empty bipartite directed graph nodes kinds pictured circles boxes called respectively places ports see fig 

edges net called channels 
channel ch port place pl say pl adjacent require net ffl port adjacent place 
ffl parallel channels allowed port place net exists channel connects 
ports net partitioned input output internal ports follows input ports ports entering channel 
output ports ports exiting channel 
internal ports ports 
port external port net input output port labeling channels place pl arity entering channels exiting channels 
entering channels place arity labeled numbers exiting channels labeled numbers pl pl pl nets syntax channel ch port place pl port place pl input output port pl number assigned ch called th input output port pl labeling ports ports net labeled port labels 
require external ports net different labels 
type place pl pair hp qi set labels input ports pl set labels output ports pl labeling places places net labeled place labels 
places labeled label arity 
type net pair hi oi set labels input ports set labels output ports net 
net atomic place 
fig 
suggests 
example pl adjacent ports 
port adjacent places pl pl definition nets isomorphic exists bijective map oe nodes 
oe preserves labeling places 

oe preserves labeling input output ports 

oe preserves adjacency relation exists channel place port channel number exists channel place oe port oe number assigned similar condition required channels entering place 
note net isomorphic net ports different names 
net context definition net context similar definition net places unlabeled 
places called holes context 
required ports adjacent hole different names 
required context isomorphism preserves labels ports adjacent holes 
dataflow nets usually dataflow theory restriction topology nets port entering exiting channel 
simplicity consider nets satisfy restriction 
alternative syntax dataflow nets 
dataflow nets alternative syntax ports literature 
obtained full syntax follows delete ports channels port label deleted channel entering place pl channel exiting place pl connect pl pl arc label hn assigned input output port label deleted connected place pl channel arc labeled hp ni added enters exits place pl alternative syntax previous pictures sequel 
parallel channels 
alternative syntax dataflow allowed arc exits enters place pl translation net syntax create parallel channels 
general nets modeled inserting additional places nets semantically behave identity see fig 


substitution pl hole net context say net substitutable place pl 
sets labels input output ports sets labels input output ports pl 
common places ports 
result substitution pl net defined follows 
gamma 
ports ports gamma ports pl ports 
port place pl connected cases holds pl connected pl connected external port pl connected port hole pl label identical label 
nodes channels inherit labels channels inherit directions 

algebra nets consider set sigma operations nets allow construct complex nets elementary ones 
operations renaming operation nodes channels inherit labels channels inherit directions 
aggregation aggregations nets defined nets external input output ports label 
set nodes resulting net union set nodes port place connected connected nodes inherit labels channels inherit directions labels 
looping looping output port labeled input port labeled net operation loop defined adjacent place 
recall external ports different labels 
definition refer external ports labels 
net loop constructed follows 
delete 
connect place connected simultaneous loop loop defined similarly delete connect place connected vector notations loop simultaneous loop 
comments note looping constructors partially defined order avoid creation nets parallel channels 
note constructors preserve number ports adjacent place 
parallel channels allowed looping constructors totally defined invariant violated 
renaming function port labels 
notation net obtained renaming ports 
relying aggregate loop renaming constructors appropriate notations atomic nets formulate language net spirit description nets 
example terms loop pl ag pl ag pl loop pl ag loop pl ag pl describe net fig 

set external ports term defined standard way 
terms net describe isomorphic nets say graph equivalent write graph recall net dataflow net port entering channel exiting channel 
recall port net adjacent place atomic net net place 
lemma set dataflow nets generated atomic nets renaming aggregate loop constructors 
equivalences allow prove terms net describe net lemma complete axiomatization graph equivalence set equations sound complete proving graph terms net 

aggregation commutative associative 

loop loop graph loop 
loop ag graph loop ag provided external ports 
graph external port 
renaming distributes aggregation ag graph ag 

loop graph loop 

renaming atomic nets pl graph pl 
say term language net normal form constructed follows rename atomic nets take aggregation take simultaneous looping 
term normal form term graph normal form 
lemma normal form term normal form 

domains definition delta arbitrary set 
stream domain stream delta delta consists finite infinite strings delta including empty string partially ordered relation prefix 
obviously set streams ordered cpo 
notation upper bound greatest lower bound 
cpo 
recall element called finite satisfies condition assume upper bound lub sequence easy see finite elements stream delta finite strings delta 
say consistent elements upper bound say set fx ig consistent upper bound 

observable approximating relations definition domains 
relation elements said observable relation iff 
may hold finite elements 

finite exists finite 

increases inputs decreases outputs finite imply 
definition continuous function approximating relation defined def finite 
relation approximating functional relation easy see approximating relation observable relation iff terminology 
terms approximating relations functional relations synonyms sequel 
comments observable relations play role multi valued functions approximating relations continuous functions 
exactly isomorphism observable relations continuous functions hoare power domain 
consider processes process algebraic framework 
mention class observable relations class behaviors input output linear processes 
observable relations ordered inclusion 
ordering set observable relations cpo 

notational proviso set data set port names 
element fp naturally coerced tuple hx elements indexed corresponding port names 
accordingly relation ae fp uniquely associated relation ae remarks hold mutual coercion function corresponding function sequel rely coercions mentioning explicitly 
example talk identity function fpg fqg meaning corresponding coerced function identity function abuse notation avoid cumbersome expressions hopefully harmless way 
sets ports 
observable relation say observable relation type hp qi function say type hp qi 

nets functions recall definitions 
net functions pair hn oei directed net oe functional environment maps labels places continuous functions arity 
define semantics fun oe solution appropriate system equations sigma oe 
definition quite standard note hiding internal ports step 
mentioned consider nets port entering channel 
net isomorphic net ports different labels definition assume ports net different labels 
associate function fq mg set functions step 
constructing system sigma oe 
local internal output port corresponds equation system sigma oe 
local port 
assume unique place pl channel mapped input ports pl equation corresponds port step 
minimal solution sigma oe fixed inputs 
way abstracting inputs defines routine way function type input local step 
hiding internals 
semantics net type net hide internal ports get way functional type input output definition fun oe 
example oe assigns places pl pl pl net fig 

corresponding system equations sigma oe 
semantics nets relations section define semantics nets relations axiomatic way 
net relations pair hn aei net ae relational environment maps labels places observable relations type 
say relational net hn aei approximates functional net hn oei place pl relation assigned pl ae approximating relation function assigned pl oe 
relational semantics mapping sem nets relations observable relations 
formulate properties expect relational semantics 

sem respects type net input ports output ports relational environment ae semantics assign hn aei observable relation type oi 

sem continuous cpo observable relations ae sem ae continuous 
sem consistent semantics nets functions hn aei approximates hn oei sem ae approximating relation function fun oe 
remarks recall set obs observable relations partially ordered inclusion cpo 
ordering observable relations induces pointwise ordering set env relational environments ae ae ae ae place label second requirement states ae sem ae continuous function env obs 
set continuous functions env obs ordered pointwise usual 
theorem 
mappings satisfy exists minimal 
definition relational semantics minimal mapping satisfies 
terminology notations say net relations hn aei specifies relation relation assigned semantics hn aei 
notation rel ae relational semantics 
semantics nets relations synonym relational semantics 

algebra observable relations fundamental operations define observable relations aggregations renaming 
aggregation type stream stream respectively agr iff 
aggregation conjunction 
loop type stream stream stream stream respectively 
loop iff chain 


element domain lies gamma 



note loop distribute union relations 
loop loop loop 
renaming function ports 
renaming relation type hp qi notation relation type defined usual 
term net ae environment maps atoms observable relations appropriate arity 
compositional way define sem ae meaning environment ae 

semantics terms net vs semantics nets relations theorem provides connection semantics nets relations defined axiomatically section semantics normal terms net 
theorem term normal form describes net ae environment 
rel ae sem ae denote observable relation 

algebra relations modularity 
laws claim state equational laws valid algebra relations 
claim laws algebra relations 
agr agr 
ag agr agr agr 
loop agr ag loop provided input ports output ports 
loop agr loop ag loop provided input ports output ports 
renaming distributes aggregation ag ag 

loop loop 
looping functions tightly connected fixed point operator 
fact simultaneous fixed point corresponding nested fixed points coincide easy show simultaneous looping functions approximating relations corresponding nested coincide 
general observable relations simultaneous looping may different corresponding nested equalities hold claim anomalies 
equations valid 

loop loop loop 
loop loop loop loop proof example shows fail 
example fail observable relation stream stream defined table follows tuple appears table fail holds 
similar conventions relations described tables 
example port name value passed port ambiguity resolved context 
fail input output 

loop fail input output loop fail input output defined loop fail 
easy calculate see section definition loop holds iff 
hand corresponding nested looping loop loop fail produce output 
check delta loop fail described table 
easy see approximation relation function hy hy relation defined delta loop 
easy see holds iff 
loop fail loop loop fail 
easy check relation loop fail described table 
delta loop loop fail 
easy check holds iff 
algebras nets vs algebra relations 
instructive compare lemma gives complete set equations algebra nets claims 
see identities lemma hold algebra relations equality simultaneous corresponding nested 
simultaneous looping different nested easy show claim simultaneous looping equal corresponding nested loop loop loop 
semantics nets relations rel vs semantics sem terms net claims lemma imply graph normal form sem ae sem ae 
theorem semantics nets relations characterized follows rel ae ae describes ng 

looping modular classes set relations containing approximation relation identity function 
definition set observable relations closed net constructs net environment ae maps places relational semantics hn aei relation lemma set relations contains approximation relation identity function closed net constructs iff closed aggregation looping 
id id con loop proof note dataflow net exists term net describes net isomorphic implication right left follows theorem 
direction proved 
relations arity hn hn respectively 
consider net aggr places arity hn places disjoint sets ports environment ae assigns place second place clearly hn aggr aei aggregation closed aggregation 
order show closed looping consider net context con loop fig 

place arity approximation relation identity function assigned hole 
ae environment assigns relation hole con loop 
easy show loop aei specifies relation loop follows theorem law algebra observable relations loop loop loop ag id ag id 
closed net constructs contains approximation relation identity function closed looping 
definition modular sets relations set observable relations modular rel ae rel ae implies rel pl ae rel pl ae environment ae assigns relations id nets claim says simultaneous looping relation may differ corresponding nested 
relation modular set meanings simultaneous nested 
claim set observable relations contains approximation relation identity function closed net constructs 
modular iff relations simultaneous nested coincide 
proof assume modular 
show relation loop loop loop consider nets fig 
loop note belongs lemma 
clear specify relation consider context con fig 

meaning follows nets con con meaning modularity theorem follows meaning con meaning normal term loop equal loop loop definition similarly meaning con meaning normal term loop validity follows 
id con id id con id con context con nets con con proof equality simultaneous nested case channels connected similar 
sketch opposite direction 
note closed net constructs 
show context con net meaning nets con con meaning 
relations assigned places context relations assigned places 
express con loop aggregation renaming express con loop aggregation renaming apply expressions laws claim equality simultaneous nested loops order show expressions equal 
calculations simple omit 
corollary set relations closed net constructs contains approximation relation identity function 
modular contain relation fail example section 
proof example section shown loop fail different loop loop fail 
fail belong modular set claim 

classification observable relations definition relation unambiguous holds consistent imply consistent 
relation ambiguous unambiguous 
clearly approximating functional relation see definition section unambiguous opposite wrong see example 
example approximating relation identity function relation holds iff finite 
example choice relation input output port choice choice choice hold 
ambiguous relation 
choice 
defined similar way 
holds natural number 
clear choice ambiguous relation 
example unam relation output ports input ports 
holds 
unambiguous functional relation 
classify approximating relations properties corresponding functions 
definition elements cpo 
step function defined note finite iff finite elements 
say relation finite upper bound finite set finite step functions 
finite relations finite elements domain relations 
choice unam finite relations choice finite 
relation see example functional finite 
function stream stream assume hy say sequential output port input port increased increasing formally hz greater hx assume hv function sequential sequential clearly step function sequential function 
definition sequentiality introduced kahn plotkin 
notion sequentiality defined cartesian products stream domains general concrete domains 
stable functions introduced berry generalization sequential functions 
definition function stable iff consistent sequential function stable non sequential stable functions 
example finite elements 
assume inconsistent 
upper bound step functions sequential function 
hold upper bound step functions pairwise inconsistent 
example 
upper bound stable non sequential 
example function par 
recall stream delta set finite infinite sequences elements set delta 
stream delta partially ordered prefix relation 
ff delta denote ff sequence ff length 
delta 
function par stream delta stream delta defined follows par par stable function par par par par 
par finite upper bound 
set relations 
say hn aei net relations ae assigns places net relations claim closure properties relations nets 

net unambiguous relations specifies unambiguous relation 

net finite relations specifies finite relation 

net functional relations specifies functional relation 

net step functions specifies step function 

net sequential functions specifies sequential function 

net stable functions specifies stable function 
comments note deal nets relations deal nets functions 
functions replaced approximating relations 
example modified follows net approximating relations step functions specifies approximating relation step function 

expressibility set relations relation denote exp set relations specified nets say weakly expressible iff exp say strongly expressible just expressible iff net relations context nets specify relations 
strong expressibility defines preorder relations 
strongly expressible say degree iff semantics modular weak expressibility define preorder 
happen weakly expressible weakly expressible weakly expressible clear context say expressibility expressibility degree degree notation notation set finite sequential functions 
claim minimal degrees 

choice expressible ambiguous relation 
minimal degree ambiguous relations 

unam expressible unambiguous nonfunctional relation 
minimal degree unambiguous nonfunctional relations 

par expressible unstable functional relation 
minimal degree unstable functional relations 
par expressible unam 
modularity results need facts choice weakly expressible ambiguous relation 
unam weakly expressible unambiguous nonfunctional relation 
par weakly expressible unstable functional relation 
proofs facts 
proof ambiguous relation 
consistent inconsistent 
recall observable relations increase inputs see definition section 
consider net fig 
constant function sequential function 
finite follows finite functions 
function sequential constant function 
function sequential inconsistent 
easy calculations show net fig 
specifies choice weakly expressible easy see context con nets con con specify relations choice strongly expressible proof note construction choice ambiguous relation split construction unam nonfunctional relation fact unambiguous relation functional relation iff imply 
unambiguous nonfunctional relation fact 
consider net fig 
constant function produces 
split def ui 
copies inputs inputs 
step functions defined def def 
easy see net specifies unam 
shown net strongly equivalent unam 
note construction approximation relations finite sequential functions 
proof easy show lemma assume finite elements consistency implies 

stable 
unstable 
lemma finite check construction par ffl consistent ffl defined 
show finite elements domain stream function finite sequential 
check clear check finite sequential 
par hu vi check hu vi 
net corresponds expression pictured fig 

claim weak expressibility 
finite relation weakly expressible choice 
fail weakly expressible par unam 
proof finite relation see section 
natural number step functions fa 
net fig 
specifies relation addition channels new input channel defined fhi 
finite sequential function 
input channels output channel 
input channel reads element 
produces output number tuple reads binary representation clearly finite sequential function 
places net interpreted choice easy see net fig 
specifies order prove consider net fig 

consists par unam finite sequential functions fork delta delta fh ig 
choice choice weak expressibility choice fork unam par par par construction fail delta 
fig 
provided labels channels entering exiting places channels labeled arbitrary 
easy check net specifies relation fail example section 
comment shown finite relation strongly expressible choice purpose construction needed 
net fig 
strongly equivalent fail context con nets con con fail specify relations 

non modular classes definition class set relations properties 

basic computational power 
amounts requirement contains approximating relations finite sequential functions approximation relation identity function 

closed net constructs net relations specifies relation recall corollary 
says modular class contains relation fail 
fail finite relation follows claim class containing choice contains fail 
choice minimal degree ambiguous relations 
theorem modular class contains ambiguous relation 
words corollary modular class contains unambiguous relations 
claim implies class containing par unam contains fail 
par minimal degree approximating relations unstable functions unam minimal degree nonfunctional relations 
theorem modular class contains approximating relation unstable function nonfunctional relation 
corollary modular class contains approximating relation unstable function subclass approximating functional relations 

modular classes known simultaneous nested fixed points coincide continuous functions 
semantics nets functions modular 
recalling connection nets functions nets relations definition section obtain claim theorem set functional relations modular 
class contains unstable functional relations applying corollary obtain corollary set functional relations maximal modular class 
corollary modular classes contain unambiguous relations 
corollary modular class contains nonfunctional relation contain stable functions 
going show theorem class generated unam approximating relations stable functions modular class 
note class contains unambiguous relations inputs relations expressible unam 
introduce class stable relations contains class generated unam approximating relations stable functions show modular 
know class maximal modular class 
may happen extension class unambiguous relations input modular 
definition set functions ff ig stable bunch type stable function theta consistent set fa ae 
definition stable relation stable bunch unam stable relation 
stable bunch defined identity function stream stream clear stable function approximating relation stable relation 
theorem set stable relations modular class 
rest section proof theorem 
sketch structure proof 
relation represented special set stable functions stable bunch 
holds iff uniquely determined different stable bunches may represent relation 
bunches property see lemma stable bunch fg stable bunch loop say class relations generated set relations minimal class see definition relations contains note occurrence loop denotes operation continuous functions second occurrence loop denotes operation observable relations 
ambiguous notation employed sequel 
hope clear context version loop 
recall simultaneous nested loops continuous functions equal 
modularity proved follows bunch fg bunch loop loop loop fg bunch loop loop simultaneous looping functions corresponding nested coincide loop loop loop coincide 
loop loop loop coincide 
show closed net constructs lemma modular follow claim section 
proof organized follows 
technical properties stable functions proved 
define investigate stable bunches prove property stated implies modularity 
show lemma set stable relations closed net constructs 
recall function stable iff consistent note claim lemma lemma set stable functions closed aggregation looping 
technical lemma theta stable function consistent imply proof stable note assumptions monotonicity lemma stable bunches closed aggregation looping 
proof follows directly definitions lemma 
recall notation approximation relation function relation defined bunch lemma stable bunch relation loop fg proof loop loop monotonic follows oe loop oe fg 
reverse inclusion holds reasons note definition loop see section requirement definition 
section observable relations increase inputs decrease outputs chain gamma indices functions hv hv yi recall stable bunch 
stable function consistent values fa ig ff equations imply hv gamma hv yi lemma obtain hv gamma hv yi loop ae fg 
recall looping observable relations consistent looping functions particular loop approximation relation loop lemma lemma follows lemma stable bunch fg stable bunch loop lemma net stable relations specifies stable relation 
proof recall theorem relation specified net coincides relation assigned term normal form describes term constructed follows 
rename relation assigned places net 

take aggregation relations 

apply simultaneous looping relation obtained step internal ports clear stable relations closed aggregation renaming 
lemma closed looping 

streams domains theory investigating inspired mainly developed stream processing reason focus specific stream domains 
sketch modification done general cpos called 
relevant definitions 
recall finite element characterized condition assume upper bound sequence say immediately precedes covers element finite chain fx ng called strict immediately precedes say strict chain leads finitely reachable strict chain leading definition cpo said domain obeys finiteness conditions 
element set finitely reachable elements bounded directed upper bound 

finitely reachable chain fx ng immediately precedes example domains multiset domain delta set 
multiset delta mean mapping delta 
multiset delta delta called multiplicity multisets say included delta 
multiset domain consists multisets ordered inclusion 
easy check multiset domain domain 
streams holes dataflow theory domain stream holes considered 
domain consists infinite sequence delta 
partially ordered pointwise ordering 
isomorphic set partial functions natural numbers delta 
easy check domain stream holes domain 
note concrete domain domain 
domains definitions results sections unchanged 
notion sequentiality defined domains definitions classes section unchanged consider questions modularity classes containing finite stable functions 
definition choice unam par changed way choice 
finite inconsistent elements domain consideration 
choice holds unam 
finite consistent elements domain consideration definition unam holds par 
finite elements consistent par modifications results section hold claim 
results section hold replace expressibility expressibility 
results sections unchanged 

research 
structure degrees interesting investigate structures degrees 
clear aggregation relations upper bound degrees 
show claim observable relation strongly expressible choice approximation relation sequential functions 
choice maximal seq degree 
case degrees parallelism infinite decreasing chains degrees 
questions structure degrees investigated 
example know infinite increasing chains degrees 
considered degrees respect finite sequential functions 
structures degrees respect sequential functions stable functions functions important 

characterizations non modular classes recall proved classes modular section 
proved classes contain specific relation called fail belong modular class 
suppose true 
conjecture finite set relations class modular iff contain 
modular classes proved modularity classes class functional relations class generated unam stable functions 
maximal modular class 
natural extension second class class relations stability property 
consistent imply class modular 
conjecture class maximal modular class maximal modular classes 

reasoning reasoning relational nets developed 
section laws provided 
fact simultaneous nested fixed points different reasoning nets difficult 
working subject initial steps 
laws connection relational semantics conjunction relations hand synchronization concurrent processes hand 
mention claim universal context 
sequential functional context pair nets replaceable context iff replaceable fact nets functional relations modular contrasts fact nets nonfunctional relations specify functional relations functional context con nets con con specify different functions 
acknowledgments am grateful trakhtenbrot encouragement writing content influenced ideas 
wish anonymous referees detailed comments helpful suggestions 
abramsky 
generalized kahn principle asynchronous networks 
mathematical foundations programming languages semantics volume lncs springer verlag 
brock ackerman 
scenarios model non determinate computation 
formalization programming concepts volume lncs springer verlag 
berry stable models typed lambda calculi proceedings th international colloquium automata language programming pp 
lncs vol 
springer verlag 
broy semantics finite infinite networks concurrent communicating agents distributed computing 
rabinovich trakhtenbrot 
discerning causality interleaving behavior 
meyer editors proceedings logic volume lect 
notes computer science 
springer verlag 
jonsson 
fully trace model dataflow networks 
proceedings th acm symposium principles programming languages 
kahn 
semantics simple language parallel programming 
information processing 
north holland publ 

kahn plotkin concrete domains technical report 
mazurkiewicz 
semantics concurrent systems modular fixed point trace approach 
advanced petri nets volume lect 
notes computer science 
springer verlag 
mazurkiewicz 
concurrency modularity synchronization 
mathematical foundation computer science volume lect 
notes computer science 
springer verlag 
mazurkiewicz rabinovich trakhtenbrot 
connectedness synchronization 
images programming 
north holland publ 

misra 
equational reasoning nondeterministic processes 
proceedings th acm symposium principles distributed computing 
panangaden mccarthy amb implement fair merge 
proceedings th conference 
panangaden expressiveness indeterminate dataflow networks 
information computation may 
park 
fairness problem nondeterministic computing networks 
proceedings th advanced course theoretical computer science 
mathematisch centrum 
pratt 
mail correspondence 
rabinovich non modularity expressibility nets relations extended proceedings symposium logical foundations computer science lect 
notes computer science 
springer verlag 
rabinovich trakhtenbrot 
nets data flow interpreters 
proceedings fourth symposium logic computer science 
rabinovich trakhtenbrot 
communication relations 
icalp volume lncs 
springer verlag 
rabinovich trakhtenbrot 
nets algebras modularity 
international conference theoretical aspects computer software volume lncs 
springer verlag 
yu 
sazonov expressibility functions scott lcf language algebra logic vol 

stark 
simple generalization kahn principle indeterminate dataflow networks 
semantics concurrency workshops computing 
springer verlag 
trakhtenbrot relationship classes monotonic functions theoretical computer science 
winskel events computations ph 
thesis cs dept university edinburgh 
wadge ashcroft lucid data flow programming language academic press 
