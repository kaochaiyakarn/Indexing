construction state graphs pvs susanne graf saidi verimag centre equation avenue de la grenoble gi eres imag fr contact author susanne graf appeared proceedings cav lncs describe method interpretation theoretical point view similar splitting methods proposed dgg dam weaker transition relation allows construct automatically state graphs paying reasonable price 
consider particular set states set monomials set state predicates successor state transition program monomial satisfied successors concrete states satisfying successor determined exactly predicate determined postcondition order pvs theorem prover sor pvs interface defined gs 
tactic proof verification conditions powerful upper approximation successor constructed 
allows compute upper approximations set reachable states sufficient verification invariants 
price state graph constructed expensive part algorithm computation successor requires validity checks 
relatively small state graphs constructed additional cost storage transition relation negligible 
state graph verification property expressible temporal logic formula existential quantification paths due results property preservation cgl lgs model checker 
state graph represents relatively precise global control graph system guards system construction state graph backwards verification invariants described gs 
global control graph allows generate stronger structural invariants tool described bbc initial presentation parallel composition processes 
case control system completely independent data part control graph obtained easier partial evaluation proposed method allows construction global control graph control variables depend data example protocol studied section 
implemented particular case method tool gs successors complete monomials constructed successor complete monomial split complete monomials 
interfaced tool state space analysis tools ald fgk 
verified bounded retransmission protocol developed philips proven correct coq theorem prover hsv pvs hs 
proofs powerful auxiliary invariants user 
tool correctness protocol proved user intervention 
web page concerning experience verification bounded retransmission protocol address www imag fr verimag people saidi brp construction state graphs infinite systems pvs susanne graf saidi verimag propose method automatic construction state graph infinite state system pvs theorem prover 
system partition state space induced predicates concrete program variables defines state space construct state graph starting initial state 
possible successors state computed pvs theorem prover verifying index postcondition 
allows state space exploration arbitrary systems 
method automatically verified bounded retransmission protocol proved backward analysis providing strong auxiliary invariants 
keywords interpretation state graph exploration theorem proving widely accepted abstraction techniques useful necessary successful verification kur cgl gl lgs gra dam df 
case system infinite state space difficult construction system state graph 
gl tools described system variables finite domains set boolean variables abstraction relation relating concrete variables construct automatically corresponding system may analyzed model checker 
analysis real time particular hybrid systems exist tools analysis means interpretation methods polyhedra hh hpr restricted systems linear assignments 
gra df methods construction state graphs general infinite state systems proposed require important amount user intervention necessary give atomic operation system corresponding operation proven correct 
definition operations corresponding correctness proofs general time consuming case modification system non satisfaction desired properties system need modified 
describe method interpretation theoretical point view similar splitting method proposed dgg dam weaker transition relation allows construct automatically state graphs paying reasonable price 
centre equation avenue de la grenoble gi imag fr consider particular set states set valuations tuple boolean variables representing tuple state predicates abstraction introduces non determinism successor state transition may single state set states represented boolean expression exp 
consider particular successors representable monomials successor set state exp transition program monomial representing successors concrete states represented exp 
successor determined exactly predicate determined postcondition exp order pvs theorem prover sor pvs interface defined gs 
tactic proof verification conditions powerful upper approximation successor constructed 
allows compute upper approximations set reachable states sufficient verification invariants 
price state graph constructed expensive part algorithm computation successor requires validity checks 
relatively small state graphs constructed additional cost storage transition relation negligible 
state graph verification property expressible temporal logic formula existential quantification paths due results property preservation cgl lgs model checker 
state graph represents relatively precise global control graph system guards system construction state graph backwards verification invariants described gs blo 
global control graph allows obtain stronger structural invariants tool described bbc bl initial presentation parallel composition processes 
implemented particular case method tool described gs successors canonical monomials constructed 
interfaced tool state space analysis tool ald fgk 
verified bounded retransmission protocol developed philips proven correct theorem provers hsv hs 
proofs powerful auxiliary invariants user 
tool protocol verified user intervention 
construction state graphs preliminary definitions consider systems parallel compositions processes form consider parallel composition interleaving synchronization shared variables unity cm definition processes name declarations xn tn transitions initial states init name variables type may type definable pvs 
list variables declared process indicates variables intended process fact variable declarations global 
transition guarded assignment form gamma 
ass boolean pvs expression ass tuple pvs expressions ass type order structural invariant generation effective process finite domain control variable tested assigned constant expression 
semantics parallel composition unity state graph associated parallel composition processes state graph associated single process having variables union variables processes transitions union transitions processes initial predicate intersection initial predicates processes 
means parallel composition useful better readability generation structural invariants bl 
consider loss generality systems single process defines state graph sp qp rp ffl qp theta theta tn ffl rp ae false ass denotes partial transition function associated transition ffl fq init trueg set initial states 
predicate transformers recall briefly notion predicate transformers associated relations known characterization guarded command programs 
sequel consider sets states represented predicates name predicate transformer 
definition predicate transformers binary relation set represent subset ffl post ffl pre post defines set successors strongest postcondition 
pre represents largest set states successors satisfy weakest precondition preconditions guarded commands form expressed quantifiers pre ass quantifiers postconditions general systematically eliminated 
reason symbolic forward analysis difficult backward analysis difficult compute effectively state graph forward analysis successor state representing predicate concrete states represents upper approximation postcondition concrete transition relation 
predicate transformers interesting properties see example sif need post iff pre semantics programs results section application interpretation cc 
suppose reader familiar interpretation 
limit abstractions representing supersets concrete system fact execution sequences interested verifying properties system satisfies property system smaller transition relation set reachable states 
definition state graphs rp state graph program lattice states ff 
fl 
galois connection abstraction iff ffl fl ffl post fl fl abstraction function ff associates set concrete states corresponding state state space lattice larger states represent larger sets concrete states 
concretization function fl associates state set concrete state represents 
definition simply expresses initial state represents concrete initial states successor state transition represents successors set concrete states represented corresponding concrete transition 
concrete execution sequence represented 
intuitively smaller represented superset execution paths properties satisfied system 
reason lattice necessarily form set states efficiency reasons want consider set states 
example coarse approximation approximate non singleton set states top element lattice representing set concrete states 
galois connection pair functions ff fl satisfying ff fl qa fl ff 
fl ff implicitly defined ff fl particular abstraction scheme choice state lattice consider state lattice induced set predicates variables concrete program choose state space set predicates boolean variables variable represents concrete states satisfying predicate means set concrete states represented element lattice easily computed substituting occurrence variable concrete predicate represents fl exp exp implicitly defined abstraction function ff exp general easily computed 
reason upper approximation function expensive compute yields particular elements lattice monomials ff fb notice set monomials boolean variables forms complete lattice ff fl connection set concrete predicates set atoms lattice set canonical monomials representing states 
transitions concrete transition program define transition function associating set states exp set states representing successors concrete states represented exp set ff post fl exp seen expensive compute 
choose weaker approximation ff post fl exp easier compute form monomial exp false exp post exp post exp true notice exp successor states satisfying fl exp enabled 
properties allow recognize easily involved implications expressed introducing existential quantifiers 

equivalent predicates define partition qp independent monomial conjunction containing 
furthermore consider predicate false monomial 
exp ass means successor state computed possible check validity implications 
case implications decidable theory done means appropriate decision procedure 
choose automatic theorem prover implements interesting decision procedures 
case sure compute exactly transition relation defined indices proved 
impossibility prove implications may different causes ffl may case post exp non empty intersection case non determinism transition relation due fact set starting states exp chosen big cut smaller pieces successors computed separately consider monomials successors state space fine 
ffl may simply case applied proof strategy powerful 
initial state initial state choose ff init 
notice practical cases initial state defines exactly possible value variables computed easily evaluating predicates initial state 
state space exploration methods allows state space exploration starting initial state 
defined transition functions different upper approximations set reachable states invariants defined 
approximation obtained imposing computed approximations set reachable states restriction monomial denote lub operator lattice monomials ae approximations monomials 
longest chains length computed iterations 
second approximation strongest invariant obtained obtained allowing approximations arbitrary elements lattice boolean expressions applying canonical monomials representing single state ae pg corresponds invariant obtained enumerative state exploration successor sets computed individually reached state 
notice increases precision inverse implication hold general 
differ values variables set successors depend fact holds inverse implication holds useful compute successors states separately 
complexity issues reasonable express complexity computation invariants means number necessary proofs 
order compute successor set states exp proofs enabledness proofs predicate transition needed 
computation invariant needs maximally proofs general weak 
second invariant worst case successors states canonical monomials computed leading maximally proofs 
practice number necessary proofs smaller 
transitions leave predicates trivially unchanged transform independently predicates case better compute successors set states represented monomial reachable state contained set 

small subset states reachable probably chosen 
required predicates independent 
canonical monomials represent non empty set concrete states 
case dependency predicate allows consider non spurious states 
improvement computed invariants invariants ik improved starting point backward analysis suggested cc ae pre improved versions backward analysis theorem proving discharge verification conditions implemented bbc gs blo 
notice approximations arbitrary predicates concrete property lattice necessarily boolean combinations order backward analysis cf 
cc lower approximation pre needed 
construction state graph computation successor requires proofs relatively small state spaces successor computations reasonably explored 
circumstances additional cost storing set reachable states transition relation negligible 
advantages ffl property representable temporal logic formula atomic propositions fb existential quantification executions verified state graph model checker 
ffl obtained state graph represents relatively precise global control graph especially states represent set concrete states enabling exactly transitions case guards program boolean combinations predicates 
method tool described bl generate stronger structural invariants control graph initial control structure 
invariants improve result backward analysis defined 
refinement state graph state space exploration means allow property verified try construct precise abstraction adding predicates consider finer partition concrete state space 
computation successor exp new refined transition relation implications definition checked new ones proved valid computation successors exp notice information deduced far constructed transition relation necessary keep list valid assertions 
means construction sufficiently precise state graph obtained incremental manner 
mean idea start single predicate compute state graph add incrementally predicates 
general better start directly reasonable set predicates refine turns sufficient 
implementation tool invariant checker gs sai implements backward computation inductive invariants methods described bbc bl generation structural invariants implemented state graph generation 
achieved integration pvs theorem prover implications necessary compute successors reached state submitted pvs prover 
proof strategy combining decision procedures rewriting boolean simplification bdds systematically applied 
proof strategy sufficient prove valid implications generated 
tool handle programs explicit control locations state tuple ctrl ctrl concrete control configuration valuation set boolean variables defined preceding section 

set concrete predicates upper approximation dependency predicate computed order generate consistent successors 
exact dependency predicate computed divided syntactical independency set small sets potentially dependent predicates 

auxiliary invariants generated initial control structure control configurations system consisting parallel components considered reachable 

state graph generated 
invariant conjunction known invariants system relevant transition study construct smaller successors state replacing implications weaker ones 
example implication fl exp ass implications generated compatible generated dependency predicate directly obtained computed transition relation 
considers successors states take care add successors representing non empty set concrete states experimentation showed represents lot effort small number states eliminated 
algorithm version algorithm systems explicit control locations 
representation state transition sets means boolean expressions respectively bdds 
problems interface pvs external bdd package actual implementation sets represented explicitly lists 
preliminary definitions ffl construct invariant obtained analysis dependencies predicates furthermore generate concrete invariant facilities tool 
successor computation useful conjuncts 
ffl try find static analysis constraint transition example examine predicates touched allows intersect constraint ffl define predicate ff transition general predicates chosen way represents exactly guard transition ffl represents stage algorithm far computed set reachable states 
termination represents invariant program 
ffl represents stage algorithm upper approximation transition relation ffl explore auxiliary variable representing set states compute successors 
transition relation represented predicate form trans represents start target state represented transition initializations ff init explore iteration explore false choose explore explore explore compute set successors succ update transition relation set reachable states boolean decision succ idem idem post fl post fl true succ explore explore succ succ algorithms allows generate state graph totally automatic manner try prove interactively generated implication proof valid implication fails weaker successor obtained 
user guides verification re defining predicates definition state graph defining automatic proof strategy 
constructed state graph transformed format ald tool fgk analyzed techniques available ald minimization modelchecking graphical display graphs 
near foreseen represent state sets transition relation bdds convenient incremental construction state graph efficient representation global constraints 
choice predicates order obtain results essential guards appearing transitions system 
allows construct successors transitions enabled represented concrete states replaces enabledness check boolean test 
order prove invariant system property involving try definition state space 
furthermore predicate split set literals 
verification invariant take tail disjunction cases information lost 
may helpful example applied method verification simple alternating bit protocol 
protocol correct list received messages prefix list far sent messages element expressed tail implemented backward verification method prove computation appropriate inductive invariant terminate interesting structural invariants generated 
predicates appearing guards program express processes received bit expected deterministic state graph obtained algorithm implemented tool 
decidable implications submitted prover states reachable construction takes seconds 
literals construction state graph leads state graph states non determinism precise 
methods obtain precise approximation 
refined far obtained state graph internal predicate message message channel head expressing sent message head refinement allow eliminate state transition resulting state graph exactly initial states satisfy tail 

computed state graph control graph tool generates stronger structural invariants original system 
apply suggested backward analysis strengthen obtained invariant 
property proved single iteration 
simple example control depends finite domain variables easier construct control graph partial evaluation proposed 
example section control depends non instantiated parameters partial evaluation possible 
case study bounded retransmission protocol method verify bounded retransmission protocol brp developed philips 
brp protocol extension alternating bit protocol single messages message packets transmitted number possible retransmissions message bounded number max 
consider fully parameterized version protocol packets size max positive number 
protocol proved theorem prover hsv hs large amount user interaction necessary provide powerful auxiliary invariants 
weakest inductive invariant implying tail sender receiver client input conf sending receiving client mess ack architecture brp protocol description protocol sender receives sending client message packet transmit 
sender delivers confirmation client ok messages transmitted acknowledged ok transmission aborted max retransmissions necessary deliver message dont know message acknowledged case possible know message acknowledgment lost 
receiver acknowledges received message delivers indication receiving client 
indication received message packet incomplete intermediate message ok message 
sender abandons transmission packet sending successfully message receiver delivers ok indication 
timers 
timeout indicates sender message acknowledgment lost 
timeout indicates receiver sender definitively abandoned transmission packet 
correctness criterion prove sequences received messages sent messages consistent property section 
proved packet indication confirmation delivered clients consistent 
means sender delivers ok confirmation receiver delivers ok indication 
receiver delivers ok indication sender delivers dont know ok confirmation 
properties easily expressed temporal logic formulas 
verification protocol construct state graph brp predicates appearing guards system 
constructed graph states transitions obtained hours sparc 
possible global control configurations reachable 
graph control properties concerning confirmations indications verified ald 
property verified weaker abstraction predicates concerning transmission single message considered obtained ald mentioned complex abstraction 
obtained state graph similar obtained alternating bit protocol moment transmission abandoned maximal number retransmissions may reached 
implemented method allowing construct state graphs arbitrary infinite state systems states valuations set predicates concrete variables 
sight method may look expensive construction successor requires proofs construction state graph brp states takes hours 
actual implementation extremely inefficient independence transitions predicates really exploited 
furthermore proofs done user interaction single tactic tactic fails prove valid statements weaker abstraction obtained 
user provided predicates tool proposes set consisting literals occurring guards properties proved construction completely automatic 
case execution time critical 
possible apply method get approximation system point view human effort free 
constructed state graph reasonable size explored model checker 
finite global control graph invariant generation backward analysis 
initial set predicates defining state space give satisfactory abstraction try add new predicates obtain precise abstraction 
provide new predicate similar providing auxiliary invariant usually necessary prove program properties 
easier provide predicates leading sufficiently refined state graph corresponding auxiliary invariant expressing predicates hold 
refining predicates obtained far constructed state graph examining nondeterminism occurring sequences leading states violating required invariant 
construction state graph sense complementary tableau construction implemented step bbc tableau property proved disproved taken starting point state graph construction expanding fits program 
take control program program starting point refine satisfies property verified 
particularity method integrates reachability analysis order avoid costly computation successors unreachable states 
interesting characteristics ffl incremental refinement generates new implications weakenings generated previous partition 
implications valid partition valid finer partition 
furthermore order fact necessary store proved implications corresponding transition relation 
ffl state graphs constructed method interesting debugging 
guide search concrete execution sequence violating required property especially transition enabled state enabled concrete states represents 
version new results direction obtained 
blo bensalem similar abstraction framework improves essentially points ffl successors sets states predicates single states constructed 
successors form monomial constructed 
fact transitions system predicates trivially unchanged cut subsets transformed independently subsets small may consider arbitrary successor sets 
ffl computation transition relation combined state space exploration 
hand may lead computations successors unreachable states 
hand independencies described number unnecessary successor computations may fact quite small 
advantage construct transition relation transition concrete system obtained set transition relations directly appropriate model checker state graph generation fly model checking compositional verification 
improved method data abstractions message queues similar proposed gra obtain finite abstraction bounded retransmission protocol data properties 
bbc bjorner browne chang colon kapur manna sipma uribe 
step deductive algorithmic verification reactive real time systems 
conference computer aided verification cav 
lncs springer verlag 
bl bensalem lakhnech 
automatic generation invariants 
formal methods system design 
appear 
blo bensalem lakhnech owre 
computing abstractions infinite state systems automatically compositionally 
accepted cav 
blo bensalem lakhnech owre 
invest tool verification invariants 
accepted cav 
cc cousot cousot 
interpretation unified lattice model static analysis programs construction approximation fixpoints 
th popl january 
cgl clarke grumberg long 
model checking abstraction 
acm transactions programming languages systems september 
cm chandy misra 
parallel program design 
addison wesley massachusetts 
dam dams 
interpretation partition refinement model checking 
phd thesis technical university eindhoven july 
df th 

model checking infinite state systems data abstraction assumption style reasoning theorem proving 
proc 
th cav li ege 
lncs springer verlag 
dgg dams grumberg gerth 
generation reduced models checking fragments ctl 
proceedings cav crete gr volume pages 
lecture notes computer science 
olivero tripakis yovine 
tool kronos 
hybrid systems iii verification control volume lncs pages 
springer verlag 
fgk jean claude fernandez hubert alain radu laurent 
cadp caesar aldebaran development package protocol validation verification toolbox 
rajeev alur thomas henzinger editors proceedings th conference computer aided verification new brunswick new jersey usa volume lncs pages 
springer verlag august 
gl graf 
tool symbolic program verification abstraction 
conference computer aided verification cav heraklion crete 
lncs springer verlag 
gra graf 
characterization sequentially consistent memory verification cache memory abstraction 
accepted distributed computing 
gs graf saidi 
verifying invariants theorem proving 
conference computer aided verification cav volume lncs july 
groote van de pol 
bounded retransmission protocol large data packets 
technical report logic group preprint series utrecht university 
grumberg damm 
model checking truly symbolic 
workshop tools algorithms construction analysis systems tacas 
lncs 
hh henzinger ho 
hytech cornell hybrid technology tool 
hybrid systems ii 
lncs springer verlag 
hpr halbwachs 
raymond 
verification linear hybrid systems means convex approximations 
editor international symposium static analysis sas namur september 
lncs springer verlag 
hs havelund shankar 
experiments theorem proving model checking protocol verification 
proceedings formal methods europe 
hsv sellink vaandrager 
proof checking data link protocol 
cs centrum voor wiskunde en informatica 
dams gerth 
efficient symbolic model checking full calculus compositional abstractions 
technical report computing science reports eindhoven university technology october 
kur kurshan 
computer aided verification coordinating processes automata theoretic approach 
princeton series computer science 
princeton university press 
lgs graf sifakis bouajjani bensalem 
property preserving abstractions verification concurrent systems 
formal methods system design vol iss january 
sai saidi 
invariant checker automated deductive verification reactive systems 
proceedings th conference computer aided verification cav lncs 
springer verlag 
sif joseph sifakis 
unified approach studying properties transition systems 
tcs 
sor shankar owre rushby 
tutorial specification verification pvs 
sri international menlo park ca 

