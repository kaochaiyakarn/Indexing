group communication infrastructure distributed system network management thesis submitted fulfillment requirements degree master science david supervised prof danny dolev institute computer science hebrew university jerusalem jerusalem israel 
acknowledgments advisor prof danny dolev helpful guidance infinite patience great encouragement 
carefully read drafts assisted formulation algorithms structuring thesis 
support accomplished 
am especially thankful dr yair amir original ideas advice enthusiasm project possible 
special go gregory chockler started am grateful precious time efforts 
really enjoyed time worked 
discussions resulted number interesting solutions 
contribution original coding design ideas hardly underestimated 
special go tal shamir helped advice useful discussion 
parents wife valuable moral financial support 
optimism finished project 
contents motivation related osf distributed management environment 
network information service 
distributed smit 
tivoli management environment 
environment model fault model 
transis system 
transis membership service 
architecture short term services grouping service 
simultaneous execution service ses 
simultaneous software installation service sis 
long term consistency services network table management subsystem ntms 
overview network table management subsystem 
general architecture ntms 
basic operation ntms updates absence failures 
basic operation ntms updates presence failures 
diagnostics updates supplied management client 
basic operation ntms queries 
ntms server api 
data structures 
service groups 
local data structures ntms server 
message formats 
ntms server operation 
initialization 
contents main event loop 
handling request management client 
handling update message 
handling membership changes 
handling state messages 
garbage collection 
action queue operation 
dynamically reconfigurable ntms meta management table management service 
meta management standard table management solutions 
definition ntms meta management 
ntms architecture extended meta management 
addition new ntms server 
removal ntms server 
reassignment primary ntms server 
reassignment primary server regular service group 
reassignment primary server meta group 
list figures group communication management platform 
open system management model 
layout nis 
basic architecture tme version 
throughput function message size 
levels architecture 
short term services part management server main loop sample management client grouping service 
simultaneous execution part management client 
assistant functions 
simultaneous installation part management client 
child process monitor responsible installation 
child process management server responsible installation service groups 
message formats 
view change 
state machine ntms server 
ntms server init procedure 
ntms server event loop 
handling request management client 
handling update message 
view change handler 
handling state messages 
garbage collection procedure 
action queue procedures 
level service group architecture 
extended group communication management platform 
proposes group communication facilitating development fault tolerant efficient scalable distributed management solutions 
suggest generic management platform includes reliable services may building blocks distributed system management applications 
specifically provide services distributed configuration management software distribution remote execution management actions efficient grouping targets management requirements 
distributed configuration management service improvement nis defacto standard configuration management 
implementation fully distributed substantially improve nis consistency availability 
grouping service allows group management targets machines devices user defined criteria 
example machines cpu load exceeded threshold value grouped group treated single logical entity 
grouping service may dynamic discovering problems managed system 
groups built service may utilized handles services remote execution management actions software distribution 
administrator may simultaneously invoke management command shutdown script member group 
invocation performed single location results monitored group communication layer 
similarly software package configuration files may efficiently propagated members group parallel 
provide single point control 
consistency members group preserved reliable virtually synchronous group communication layer 
efficiency achieved usage reliable multicast service provided group communication system utilizes hardware broadcast capabilities possible 
believe distributed management applications greatly benefit group communication paradigm 
see group communication extremely powerful tool achieve consistency reliability efficiency management software 
part published proceedings third international workshop services distributed networked environments chapter motivation grouping service configuration management network table management subsystem simultaneous software installation service simultaneous command execution service group communication management platform rapid growth distributed environments motivated number advantages provided distributed architectures centralized ones 
advantages better cost performance ratio potential higher availability provisioning geographical spread organizations autonomy users 
unfortunately distributed environments harder manage 
distributed system contains large amount data controlled appropriately order maintain desired configuration 
presently order maintain relatively simple cluster networked workstations manage system configuration starting users accounts printing services network file system application level identification network components assigning addresses service access points management routing tables 
system administrator required handle management data scattered duplicated locations 
system grows controlling management data keeping consistent complex tedious task 
adequately solved human effort solely 
integrated automated chapter 
motivation semi automated efficient reliable management tools needed 
fact lack proper management solutions constitute major bottleneck true scalability distributed environments recognized major intermediate players world distributed computing 
thesis suggests group communication mechanisms help build efficient reliable solutions management distributed environments 
proposed architecture exploits group communication service order minimize communication costs provide complete consistent operation despite potential communication link failures host crashes 
focus unix environment de facto standard distributed environments mechanisms applicable settings 
see proposed integration group communication paradigm distributed management main contributions thesis 
address infra structural problems areas distributed management ffl configuration management set facilities allow 
record current configuration 
monitor current configuration register changes configuration 
redefine current configuration 
identify configuration components 
refer configuration management table management concerned consistent management various network tables maps 
examples table management include handling user accounts passwords maintenance unified file system various network tables routing tables user defined tables 
show advanced group communication replication techniques render table management services efficient symmetric consistent highly available preserving existing interface services 
configuration management service part management standard defined osi management framework osf distributed management environment osf dme 
ffl software distribution upgrade presently software distribution upgrade performed manually system manager machine basis 
show group communication techniques exploit multicast broadcast capabilities local area networks speed distribution process minimize latency network load software distribution process 
solution problem software distribution client server paradigm 
membership service provided group communication toolkit show servers perform installation software packages elegantly reliably controlled coordinated 
software distribution service defined part osf dme 
ffl simultaneous execution necessary invoke management action locations simultaneously 
simultaneity mean event chapter 
motivation command invocation occurs exactly physical absolute time event interleaved execution involved sites 
execution referred simultaneous 
example electricity shutdown time expected advisable shut system 
consequently beneficial reliable method invoke shutdown command control station targeting group machines 
example monitoring remote systems 
helpful possibility invoke monitoring command number targets simultaneously 
develop may think invocation entire scripts multiple targets may dynamically grouped target sets 
chapters show management tools easily constructed framework architecture 
ffl grouping convenient group managed machines logical groups criteria 
logical group may order apply management action members group single logical operation 
necessary purposes software distribution simultaneous execution described 
grouping may efficient performance monitoring 
managed hosts may grouped arbitrary semantic criteria 
example system manager may wish find machines cpu utilization exceeding certain threshold 
having grouping service may require machines satisfying criteria join distinct group 
services form proposed distributed system management platform 
platform open useful services may added needed 
general services compete existing established management standards osf dme osi mf suggest efficient way implement extend 
aspects distributed management completely left scope thesis 
discussion security problems doubt great importance success distributed systems 
remarks implications solution security profound discussion topic 
rest thesis organized 
chapter related 
chapter depicts environment assumptions error model group communication toolkit 
chapter presents architecture management platform 
chapter describes grouping simultaneous execution software installation services 
chapter presents configuration management solution 
chapter provides extension configuration management service flexible 
chapter provides directions 
chapter related chapter briefly survey existing solutions distributed system management 
particular osf dme example industry level management standard 
network information service nis examined kernel level distributed configuration management subsystem 
distributed smit discussed tool concurrent execution system administration tasks heterogeneous environment 
tivoli management environment tme discussed example leading integrated solution distributed management part osf dme 
osf distributed management environment open software foundation distributed management environment osf dme defines multi vendor platform distributed management software 
dme set distributed management apis systems management model defined open systems management group shown 
model build common object request broker architecture corba interface specification 
corba specification introduces interface definition language idl concepts object request broker orb basic object adaptor boa provide mechanism methods invocation return results 
open model provides set enabling management services interfaces cover specific issues distributed systems management application domain 
services include scheduling collections logical grouping instance management configuration change management software distribution upgrade event notification logging important understand osf dme prescribe implementation apis inter operability purposes 
efficient efficient implementations possible standard 
network information service network information service nis supplied part operating system major unix vendors 
nis collection network tables maps constituting chapter 
related non object interface object interface common object request broker user interface managed objects management applications hosts printers data file system object services omg software distribution configuration change collection management event open system management model configuration database optionally replicated group servers 
updates configuration database distinguished server termed master may propagated servers called slaves exist 
clients nis bind nis server master slave order receive information nis maps 
binding allowed hosts administratively defined nis domain 
architecture master configuration management slaves higher availability better performance see 
architecture proved successful current implementations nis lack built facilities guaranteeing consistency replicas presence network partitions server crashes 
particular propagation updates done automatically natural update basis relayed system administrator performed periodically external scheduling tools 
may lead undesirable temporal inconsistencies system stable 
update corresponding table completely rebuilt table sent network 
tcp ip number slaves reasonably employed limited 
slaves allowed propagate updates slaves 
network partition occurs partition master absent reach consistent state replicas 
configured nis allow certain reconfigurations complete halt services provided 
impossible change master fly 
chapter 
related nis slave server nis slave server nis master server client client client client map propagation nis requests layout nis mention drawback original nis remedy 
nis utilities send data base synchronization replicas performed 
update done manually ascii file corresponding table ascii editor table completely rebuilt 
system crashes difficult pinpoint update system 
administrators external tools version control rcs order log changes system configuration 
problems occur versions ascii files corresponding tables examined inconsistencies resolved manually 
chapter show nis implementation substantially improved preserving appealing features 
distributed smit distributed smit presents integrated tool heterogeneous system management 
consists clients emit management commands servers unified platform independent syntactic form 
servers translate commands platform specific form perform parallel 
main difference solution concurrent execution management tasks transport layer 
utilize transis copes omission reordering faults transport level 
contrast utilizes reliability layer built top udp layer extensive acknowledgments order cope omission faults handled udp 
monitor status participating server clients retain acknowledged transmission 
contrast solution monitors status group management servers 
need care particular target arises membership change reported group communication layer 
full underlying hardware capabilities network data multicast group servers 
hardware capabilities exploited simulates multicast unicasts 
tcp transport layer limits number simultaneously opened connections limits system scalability 
chapter 
related tivoli management framework tivoli application services tas nis tivoli admin tivoli courier 
tme tivoli third party applications basic architecture tme version primary reason group communication toolkits transis efficient group communication solutions restricted lans time development 
demonstrates group communication paradigm effectively extended wan environment 
group communication technology wan matures reliability layer implemented efficient 
chapter shows group communication transport layer utilized building efficient reliable solutions problems designed tackle 
tivoli management environment january open systems management group voted adopt tivoli specifications base document complete specification object oriented framework distributed systems management 
tivoli part osf dme open systems management model 
tivoli management environment tme probably comprehensive integrated solution distributed system management existing today 
tivoli provides unified management platform problems distributed system network management 
tme uses object oriented approach provides generic set managed objects object determined attributes behavior 
tme open system 
allows efficient elegant integration best third party management solutions original tivoli platform 
tivoli network management hp 
depicts basic architecture tme 
merge ibm tivoli started generation family tme integrates management techniques developed ibm dm tivoli management environment 
tme technical concepts migrated tme 
tivoli management environment consists major components tivoli management platform tmp tivoli third party management applications developed top tmp 
shown tme tmp composed components tivoli management framework tivoli application services tas 
provides implementation corba object request broker orb basic object adaptor chapter 
related boa related object management desktop services 
tas runtime library includes convenience functions depend application 
functions facilitate scheduling service event notification service data manipulation data encryption directory services regular expression pattern matching message logging catalog service inter object message facility top tmp application level services 
interesting applications context include nis tivoli admin tivoli courier 
tivoli admin tivoli courier deal configuration management software distribution respectively 
services multiplexed distribution service 
order distribute large amounts data distribution tivoli courier software packages configuration data managed tivoli admin nis maps configuration files 
designed distribute large amount data single source predefined set target machines point point communication 
targets receivers turn distributors 
participants organized tree constructed order speed data distribution improve scalability 
operates wan allows flexible scheduling takes network load account 
tivoli admin allows replication certain configuration data order increase availability performance 
consistency different copies maintained phase commit protocol 
phase commit performs acknowledgment replicas update 
resource consuming protocol achieves limited performance deteriorates linearly number replicas increases 
drawback protocol may indefinitely block coordinator current transaction fails 
introduces problems determining system blocked recovering blocked transaction 
cases manual intervention necessary 
nis developed sun solaris operating system incorporated tme 
new substantially improved version nis 
nis supports hierarchical domains 
contrast original nis nis master server transfer map order propagate changes slaves 
updates sent 
update messages propagated slave replicas immediately avoiding usage external scheduling mechanisms 
security features nis improved 
nis clients authenticated binding nis server 
nis certainly superior nis important drawbacks 
master update slaves precluding consistency network components primary absent due crash communication link failure 
nis uses pointto point communication order propagate updates 
presence network host failures transactions log order perform rollback recovery failed transactions 
rollback generally expensive time consuming operation 
solution configuration management addresses problems nis suggest improvements features 
concepts developed tivoli certainly constitute integrated comprehensive distributed management solution 
compete industry standard 
solution oriented incorporated standard 
open design tme solutions integrated tme coexist chapter 
related approaches 
chapter environment model fault model view networked system collection components ffl hosts network devices entities may asynchronously crash recover 
assume physical clock synchronization hosts network devices 
assume failures hosts non volatile storage 
assume non volatile storage may recovered host crashes 
note modern networked configuration crashes recoveries cases simply correspond autonomous reboot workstations network devices ffl daemon processes daemons processes continuously run hosts devices capable running processes 
assume daemon fail independently host network device 
words host alive daemon run ffl communication links network assume communication links may fail recover arbitrarily 
particular assume due failures network may partition number components 
processes run hosts belonging components may communicate communication links 
processes run hosts devices belonging different components able communicate 
messages transmitted communication links may lost duplicated reordered arbitrary way 
assume messages may corrupted communication links 
transis system transis group communication sub system developed hebrew university jerusalem 
transis supports process group paradigm 
transis messages addressed entire process group specifying group name character string selected user 
group membership changes new process joins leaves chapter 
environment model message size bytes messages second utilization throughput function message size 
group processor containing processes belonging group crashes network partition re merge occurs 
processes belonging group receive notification event occurs 
transis incorporates sophisticated efficient algorithms group membership reliable ordered delivery multicast messages 
transis transparently handles message omission errors provides strong semantics helping build fault tolerant applications tolerate processors crashes recoveries network partitions re merges 
high performance achieved utilizing non reliable broadcast multicast possible local area networks 
transis performance seen 
transis limited lan 
version transis operates wan environment available 
transis implemented daemon process 
transis daemon handles physical multicast communication 
keeps track processes participate group communication run host keeps track hosts membership connectivity hosts running transis daemons 
benefits structure significant 
main advantages context ffl message ordering reliability maintained level daemons group basis 
number groups system influence system performance 
ffl flow control maintained level daemons level individual process group 
leads better performance 
ffl implementing open group semantics easy processes members group multicast group 
process linked library connects transis daemon 
process connects transis inter process communication handle similar socket handle created 
process maintain multiple connections transis 
process may voluntarily join specific process groups specific connection 
chapter 
environment model transis group multicast paradigm transis application programming environment supports multicast communication process groups 
basic communication primitive provided transis multicast message group 
transis delivers multicast message currently connected members group including sender member group 
transis supports open group semantics process necessary member group order send messages 
transis guarantees sending process member group receive message 
property called self delivery algorithms 
transis delivers message target application process say application receives message 
group created may undergo transient view membership changes new processes join group leave group members group taken group view due network partition host crash 
membership service transis reports changes application level special view change messages 
view change messages delivered applications stream regular messages 
message delivered process joins group view change message containing set processes currently members group 
execution application transis environment receives transis delivers sequence regular messages interleaved view change notifications 
definition say message delivered process view view change message preceding received cause ambiguity simply say delivered transis supports virtually synchronous communication 
stated simply virtual synchrony property guarantees processors proceed view membership receive set messages 
transis membership service known reaching agreement asynchronous environment impossible 
practical realization membership protocol capable represent network situation precisely 
words snapshot network membership service specific time may differ actual network situation moment 
existing implementation membership protocols circumvent difficulty number ways 
essentially widespread approach suggests process presumed faulty taken view 
case course process crashed slow 
case rejoin group 
principle adversary may bring membership service knees simply delaying messages network 
cause membership service change view currently connected processes constantly making progress 
membership service transis uses approach 
practice claim membership service fine tuned round trip time measurements way false detections rare 
termination algorithms directly depends chapter 
environment model termination membership service 
sake simplicity giving full overview transis membership message delivery semantics 
information greater detail 
necessary order understand algorithms 
transis deliver message application membership sent transis daemon 
words application multicasts message transis know membership sent daemon application receives message transis knows sent membership reported transis 
transis works order provide virtual synchrony new membership agreed processors proceed membership agree set messages deliver new membership 
obviously order agree message sending stopped sufficiently long period time agreement protocol performed 
application control actual time message sending 
chapter architecture long term short term transis api representation converter transis transis transis external application external application long term short term transis api representation converter management server api monitor transis api management server management server levels architecture 
chapter architecture proposed distributed management platform see 
osi dme includes services concurrent execution management tasks concurrent software distribution grouping services maintenance consistent configuration data table management 
services basic building blocks distributed systems management application 
architecture composed layers depicted 
bottom layer transis group communication toolkit provides reliable multicast membership services 
top layer composed management server management client monitor 
management server daemon process 
monitor externally developed management application uses management servers api exploits transis order communicate management servers monitor activity 
transis group communication layer existing toolkits totem horus newtop 
terms interchangeably chapter 
architecture respect consistency reliability demands management server provides classes services long term services short term ones 
long term services provide consistent semantics network partitions time 
replication network tables maps password database maintained secondary storage 
services implement efficient replica control protocol applies changes update basis 
long term services provided management server cope network partitions servers crashes recoveries guaranteeing replicas tables residing hosts belonging network partition automatically converge updated consistent state 
long term service blocks read query operations 
limited number cases described long term services may allow perform new update operations violates consistency table replicas network component 
replica control protocol specifically tailored needs distributed systems management 
kept simple order remove overhead general purpose distributed data base system 
short term services called provide consistency reliability session basis 
example consider management session consists concurrent execution management command number workstations 
session want reliable consistent consistency reliability sense execution completed 
short term services best effort ones 
services reliable long network partitioned management server crash 
case network partition server crash management client management servers receive notification transis 
management client application may take steps provided algorithm 
short term services include grouping concurrent task execution software installation services 
presence faults mentioned previous chapter guarantee consistency 
example concurrent management command execution session command may applied hosts execution group executed 
short term services provide fairly reliable diagnostics allowing identify failed hosts 
diagnostics may efficiently management application order pin point problems fix 
management client monitor provides user interface services management server 
process may run hosts run transis 
monitors may run simultaneously network host 
management server runs daemon participating hosts 
event driven program 
events generated monitors management servers transis membership notifications 
server maintains vector contexts entry monitor currently interacting 
entry contains things current working directory server set corresponding monitor 
entry vector reflects current state session corresponding monitor management server 
monitor decides change working directory management server influence sessions monitors currently receive services management server 
long term services constitute non intervening improvement standard nis 
chapter 
architecture hosts nis map repositories retain original format applications rpc retrieve information changed 
service quality improved replication scheme implemented management server guarantees consistency efficient compared ad hoc solutions nis 
explained chapter 
management server api contains main services ffl status return status server host machine ffl chdir change server working directory requesting monitor ffl group specified management servers join particular transis process group ffl simex execute command concurrently number specified hosts 
command executed relevant servers relatively working directory corresponds initiating monitor 
monitor receives results executions host indication hosts execution failed ffl install software package number specified hosts 
installation performed relatively working directory corresponds initiating monitor 
analogously simex set hosts current installation possibly failed returned case errors ffl update table update table preserving consistency replicas ffl query table retrieve information table ffl exit terminate management server daemon 
practice system may heterogeneous terms software operating system hardware 
generic platform independent representation management commands reports execution 
representation format communication protocol entities 
representation converter see responsible converting generic representation platform specific form 
architecture enables support new platforms relative ease 
order support new platform enhance representation converter 
management platform constitutes set application level services 
may beneficial integrate lower level management frameworks tivoli management framework see chapter provide implementation generic managed objects 
requires extension management objects transis api transis alternative transport protocol 
extension performed relatively straightforward deriving new sub classes existing object classes 
application services may included tivoli management platform part tivoli application services see chapter 
integrated platform representation converter necessary managed objects corba ones 
chapter 
architecture believe integration management platform tivoli tmp improve infrastructure making reliable efficient 
prototype architecture partially implemented top transis tested cluster unix workstations 
code developed programming language spans approximately lines 
table management protocol sophisticated part constitutes half code 
chapter short term services chapter presents short term services provided platform 
chapter contains sections describe solutions coordination management servers simultaneous execution management commands simultaneous software installation respectively 
services chapter simultaneous installation service represent different efficient implementation distributed services known existing standards osf dme 
services re implementation existing solutions part major management platform important simultaneous execution service alternative implementation functionality provided distributed smit 
defined basic short term services practical importance system administrator 
sophisticated services may created basis elementary ones 
fact services framework efficient reliable implementation management platforms solutions discussed chapter 
grouping service necessary group machines managed cluster temporary groups order perform management action sequence management actions machines 
typical examples include grouping machines purposes software installation command execution 
grouping service allows group managed hosts intuitive reliable efficient manner 
shows main event loop management server depicts part management client interacts grouping service 
management client event driven 
events generated transis delivers messages application user system administrator 
sake simplicity assume user directly interacts management client 
general case management client may take user generated events file run script 
time management client may states grouping service idle run 
current state recorded variable grouping state 
initially management client idle state 
order invoke grouping service chapter 
short term services user submit grouping command specifying machines wants grouped new group desired machines specified regular expression 
parsing users command management client creates message special type join contains regular expression defining target hosts name transis group join join message multicast transis process group cluster contains management servers management client 
receiving join message management server checks set machines defined regular expression message includes host 
management server joins group specified message 
discards message 
member cluster process group monitor receive join message 
receiving monitor joins new group changes state run 
eventually management servers specified regular expression join group building new process group accomplished 
sake simplicity assume grouping commands executed synchronously 
words management server proceed pending grouping request finished current 
regular expression mechanism may generalized support arbitrary filtering predicates machines cluster running sun os having mbyte free disk space 
order support arbitrary filtering special filtering language may defined 
leave details scope 
scheme works fine long failures host crashes network partitions 
order cope failures management client keeps track membership groups cluster maintaining variables cluster view group view respectively 
membership change reported transis management client checks current membership includes hosts specified original user command 
case management client checks absent machines members group cluster 
management client wait slow servers join new group management client adds hosts specified regular expression longer cluster group faulty set point user asked confirm continuation service members process building new group terminates hosts originally specified user command find faulty set members new group 
differentiate server crash network partition presumably fault server may join happens server received join message got disconnected rest cluster due network partition 
server re merges rest cluster joins formation group terminates taken faulty set 
termination guaranteed reasons 
hand transis membership service eventually detect failed crashed disconnected hosts remove membership new group cluster group 
hand due virtual synchrony property management client receives accurately entity joins process group hosts management server 
chapter 
short term services join message membership cluster hosts remain connected membership cluster guaranteed receive message 
join message eventually processed servers crash 
implicitly assume servers progress assumptions speed processes 
scope thesis check membership newly created group broader required user 
suppose management servers specified regular expression join message try join group server inadvertently maliciously join reasonable approach modern configurations firewall impose security policies users outside organization users inside organization trusted 
efficient design secure group communication 
current research directions transis project augment transis secure secure group communication mechanisms 
grouping service section serves foundation higherlevel short term services described sections simultaneous command execution simultaneous software installation 
services grouping service grouping management servers subgroups group cluster demand 
may note general managed separate grouping service essentially filtering mechanism filters undesired machines 
principle add filtering mechanism message sent group cluster suffice 
technique clumsy practice 
solution imposes unnecessary computational overhead members group cluster message seen member cluster order decide targeted member 
simultaneous execution service ses system administrator needs capability simultaneous execution management commands number machines managed cluster 
activation particular daemon script machines simultaneously shutdown operation performed hosts examples 
additional example consider simultaneous monitoring cpu load memory usage relevant system parameters part machines cluster 
management framework meets needs system administrator providing simultaneous execution service 
simultaneous execution service provided management server supports simultaneous semantics 
simultaneity mean physical synchronization command execution 
service guarantees logical simultaneity 
words event interleaved execution management command target host 
membership service semantics provided transis system easily allows identify subset machines execution command fail due network errors host crash communication link failure 
execution command may repeated restricted subset 
chapter 
short term services management station desires execute management command simultaneously number hosts define execution group place 
execution group collection machines represented respective management servers specific management command executed 
management station represented respective management client member execution group 
execution group represented distinct transis process group 
execution group formed grouping service described previous section 
execution group formed prior invocation ses 
duration group may span single command execution 
words system manager may define execution group entire sequence management commands combined meaningful way 
responsibility system administrator dispose execution groups longer needed 
discussion assume existence execution group prior invocation ses 
part management client interacting ses shown shows assistant functions 
algorithm management server 
generally part monitor algorithm 
monitor event driven 
states simultaneous execution service idle await run 
current state monitor recorded variable simex state 
monitor moves back force states response events occur locally network 
kinds events handled monitor receiving command user receiving message transis 
initially monitor idle state ses 
receiving user command idle state monitor forms message type simex 
simex message contains execution group name required command private transis process group name monitor monitor id managed cluster may hosts run different operating systems 
may happen commands semantically differ syntax platform platform action field simex message bears command universal semantic form 
representation converter see convert user command platform specific form platform independent vice versa 
simex message formed monitor multicasts execution group transis changes state await 
state monitor accept user commands 
monitor stays state receives message back member execution group 
monitor receives simex message initializes set nr membership execution group message received 
due virtual synchrony property transis members execution group connected monitor moment simex message received guaranteed receive message transis level 
words crash transis eventually deliver simex message application layer management server 
nr stands responded 
initial set management servers expected execute command reply result crash 
example commands ps ax ps ef different syntactic forms sun os system semantically chapter 
short term services noted set may different system manager expects 
time elapsed execution group initially formed coordination service receiving simex message membership changes happened 
current membership execution group may narrow initially required 
order user asked confirm continuation simultaneous execution session servers nr set 
user confirms session monitor changes state run 
state alike await state monitor process user commands completes current 
somewhat sacrifice parallelism synchronous mode usually mode system administrator really needs 
kinds events received transis relevant monitor view change message reflects membership change execution group simex result message bears result command execution specific member execution group 
monitor maintains data structures sets set holds membership execution group reported time view change message transis 
initially initialized contain private group name monitor 
monitor joins execution group time receives view change message transis reassigned hold members execution group 
membership change execution group monitor computes set management servers longer membership 
servers added problematic set simex result message received monitor removes sender message nr set 
simultaneous execution session terminates management servers original nr set find respond simex result message contains result command execution 
obviously results commands reported back management server 
consider shutdown command 
successful management server 
case transis membership service sufficient order control command execution terminate simultaneous execution session 
management server taken view high probability shutdown command successful host 
local log files management servers set inspected order determine outcome command hosts 
note host set guaranteed receive simex message transis level imply message received application level 
host may crash transis daemon time deliver message application layer 
examination hosts set way find really happened command hosts 
ses allows administrator identify set difficult time consuming task 
members may organized special group log files may requested issuing appropriate simultaneous command ses 
depending results examination logs subgroups original execution group may formed failed command replayed subgroups 
presents relevant part management server deals chapter 
short term services simultaneous command execution 
shows implementation general user interface management server discussed chapter 
chdir command particular interest 
explained chapter management server maintains vector contexts entry monitor works agent 
principle context may complete snapshot session particular monitor similar context process os process scheduler sake simplicity refer single parameter current working directory management server set particular monitor 
simultaneous execution service section basic building block development higher level services simultaneous software installation service described section 
ability execute management commands number machines single logical operation extremely precious 
saves time human efforts 
prone human errors common management paradigm system administrator repeatedly invoke command script machine basis 
ability easily group regroup target machines demand purposes command execution provided transis system allows deal complex distributed system higher level abstraction 
system administrator insulated idiosyncrasies networking details physical location involved entities 
concept process groups allows think entire collections processes involved command execution single logical entity 
simplifies view system allows keep track happening system easier 
group communication toolkits transis membership service implemented processor level process level 
joining leaving process group local matter affect transis daemons 
fact order join process group process inform local transis daemon 
additional communication needed 
renders representation execution group distinct transis process group expensive 
considerable performance advantage achieved service 
commands executed parallel gives immediate performance advantage sequential command execution 
speed simultaneous execution session limited speed slowest management server allow asynchronous mode monitor 
second process group abstraction need maintain multiple sessions order keep control command execution individual host 
transis multicast service order propagate command target hosts saves bandwidth utilizes hardware broadcast capabilities network 
simultaneous software installation service sis software installation upgrade constitute time consuming system management tasks 
large heterogeneous sites comprise tens hundreds machines subgroups computers identical similar architecture running copies application software operating system 
presently common practice perform installation upgrade repeating procedure locations chapter 
short term services subgroup separately 
installation upgrade procedures include transfer packages execution installation utilities scripts update relevant configuration files 
traditionally mentioned operations performed tcp ip protocol transport layer 
approach wasteful terms bandwidth time due point point nature tcp ip 
addition repeating procedure times prone human errors resulting inconsistent installations 
contrast conventional approach transis disseminate relevant files members subgroup efficiently 
process group paradigm system administrator dynamically organize hosts installation requirements single multicast group 
view software package collection files residing package directory 
objective simultaneous installation service consistent copies package specified target hosts fast possible 
prior installation process system manager organize target hosts single initial installation group coordination service described section 
step set contexts management servers appropriate working directory 
done management client see determines files package transferred hosts initial installation group done simultaneous command execution service described section 
fact monitor just lists content current working directories management servers outcome info simultaneous command monitor creates array installation subgroups gr 
hosts belonging subgroup transferred set files 
element array gr pair fm fg desired membership subgroup ile list list files package 
example illustrates ideas 
suppose installation package consists files target hosts suppose hosts need files gamma complete packet hosts need files complete packet 
installation subgroups formed gr gr inconsistencies hosts may result previously failed installation procedure 
soon installation subgroups defined monitor creates slave process subgroup slave algorithm shown 
actual concerning installation process fragmentation files transmission file fragments gathering acknowledges done slave process 
installation procedure time consuming task 
inappropriate suspend activities monitor simultaneous execution coordination services installation progress 
background mode needed 
slave installation subgroup installation process proceeds concurrently subgroups renders entire time installation shorter 
management client event driven 
events created user transis delivers membership notifications messages slaves 
management client creates slave processes state run 
state installations started current finishes fails 
monitor may conduct installation time possible monitor system running installation simultaneously 
chapter 
short term services soon management client created slave processes waits messages 
ffl fail message signals membership change installation subgroup sending slave 
case message carries list management servers got disconnected monitor 
list added problematic set user decides continue installation session disconnected hosts names remembered delivered user session 
hosts inspected round installation procedure 
ffl finish message reports slave process succeeded transfer files associated subgroup members subgroup servers gr servers acknowledged files reception failed 
slaves report successful termination fail session terminates 
management client informs user hosts may missed files package installation procedure 
hosts gathered set installation procedure may repeated members management client slave process operates steps 
creation joins designated subgroup gr inherited father process groups management servers gr servers list group grouping service 
message holding name installation subgroup formed multicast message causes certain activity management server side receives message see 
management server creates slave process installation associated subgroup name message 
server slave see runs simple algorithm 
primary function re assembly fragments files 
details re assembly shown 
slave receives fragment file finishes re assembly sends ack message management client slave coordinates installation 
fragments file missing slave finish re assembly 
important understand due fact transis handles omission faults transparently situation may caused solely fact installation session membership change 
words problematic host disconnected missed fragments connected 
note see membership changes detected management client slave member ps set reported management client fail message 
note monitor slave start transmission file members installation subgroup set na acknowledged file ack removed current view subgroup transis due network failure 
monitors slave finishes transmission files associated subgroup reports father process described finish 
simultaneous installation session hosts remained connected monitor consistent copies package 
target hosts chapter 
short term services missed files installation package listed set participate second round installation procedure 
organized new installation group monitor divide installation subgroups identical requirements automatically 
target hosts consistent packages simultaneous execution service may order execute necessary installation scripts update configuration files summarize simultaneous installation service advantages traditional point point techniques implement distributed installation service ffl service faster files transmitted concurrently ffl service saves bandwidth transport layer transis utilizes hardware broadcast file transmitted exactly ffl long network failures service consistent ffl inconsistencies discovered automatically reliably case network failures ffl inconsistencies removal performed minimal user intervention 
chapter 
short term services procedure server main loop connect transis join unique private group name server id join group cluster loop forever management server event loop receive message msg transis switch msg type case chdir management client msg sender contexts msg sender working dir msg dir send ack monitor private group msg sender case exit allowed junior administrators terminate process case join invocation grouping service server id msg reg expr join msg group case simex invocation simultaneous execution service convert msg action platform specific form chdir contexts msg sender working dir result execute msg action convert result platform independent form form message type simex result sender server id result result send msg sender send result case invocation simultaneous installation service msg get installation subgroup create slave process see short term services part management server main loop chapter 
short term services define command group name define servers command servers define cluster view membership group cluster define group view membership group procedure monitor main loop grouping state idle connect transis join unique private group name monitor id join group cluster loop forever monitor event loop user grouping command received servers ae cluster view form message msg type join msg reg expr reg expression command executors msg group msg sender monitor id multicast msg cluster servers cluster view user decides continue reinitialize grouping state return gg receive message transis switch type case view change grouping state idle delivered group group view view delivered group cluster cluster view view servers cluster view try terminate servers group id fn group view deliver set user inform termination reinitialize grouping state return gg case join sender monitor id join group grouping state run discard switch sample management client grouping service chapter 
short term services simultaneous execution part monitor event loop procedure monitor main loop simex state idle connect transis join unique private group name monitor id idg loop forever monitor event loop receive user simultaneous execution command simex state idle join command join execution group form message msg type simex msg type simex msg source monitor id msg action converter command action multicast msg command simex state await receive message command transis switch type case simex sender monitor id nr fm servers nr guaranteed receive command transis level user confirms continuation nr simex reset simex state run case view change simex state run mnm view nr user confirms continuation simex reset view case simex result collect result order deliver nr sender switch try terminate simex state run simex terminate simultaneous execution part management client chapter 
short term services assistant functions procedure simex reset simex state idle idg leave command procedure simex terminate nr deliver result command execution user inform user members simex reset return assistant functions chapter 
short term services simultaneous installation part monitor event loop procedure monitor main loop state idle nf connect transis join unique private group name monitor id loop forever monitor event loop receive user simultaneous installation command state idle state run info simex list directory gr build subgroups info foreach subgroup gr create slave process see nf nf gg receive message transis switch type case fail group child state idle ask user continue ps suggest files missed locations user decides continue user decides session foreach nf kill state idle simex kill slaves break ps case finish child group nf nf deliver set user inform installation session simex kill slaves state idle break switch simultaneous installation part management client 
chapter 
short term services define set holding view installation subgroup reported transis time define ps set holding slaves management server got disconnected propagation specific file define monitor id private process group slave father procedure installation monitor slave connect transis join private group monitor slave id join group cluster join join installation subgroup created monitor group installation slaves subgroup group gr servers grouping service form message type sender monitor slave id subgroup multicast part performed validated transis membership slave servers gr servers joined got disconnected cluster due failure foreach file gr ile list fragment multicast fragments transis ps true receive msg transis switch msg type case fragment fragment remember set slaves acknowledge reassembly na case view change ps ps mnm view ps form message msg type fail msg sender monitor slave id msg ps ps send monitor id msg na nan view msg view case ack na source try finish file na break switch foreach form message type finish sender monitor slave id subgroup send monitor id child process monitor responsible installation 
chapter 
short term services define monitor slave id private group monitor slave procedure installation slave server join join installation subgroup 
inherited father process true receive msg receive message transis msg fragment file msg finish file form message type ack type ack sender send monitor slave id reinitialize necessary counters child process management server responsible installation chapter long term consistency services network table management subsystem ntms chapter address problem maintaining consistent system configuration distributed environment 
task requires maintenance various network tables contain configuration information managed computer system 
examples tables include mentioned nis maps application profile databases policy profiles network topology maps configuration information kept network tables crucial services provided system 
usually table associated specific service provided 
having specific table location simplifies maintaining introduces bottleneck single point failure 
order improve performance availability services provided system tables replicated number servers 
introduces non trivial problem maintaining consistent state replicas presence network partitions host failures 
traditional approaches point point communication impose limitation number replicated servers efficiently employed 
particular pointto point communication difficult inefficient maintain consistency large number replicas replica synchronized individually 
solutions perform periodical synchronization table replicas 
includes multiple transfers table data network usage acknowledgments order cope network errors 
performance solutions degrades linearly number deployed replicas grows 
difficulty algorithms implementation consistency maintenance schemes point point communication extremely complex 
cases developers relax error models allow table replicas enter inconsistent states requiring system manager discover resolve inconsistencies manually 
problems lead fact practice number servers employed replication usually quite small 
limits availability services bottleneck system expands 
chapter shows group communication paradigm utilized building efficient reliable scalable solutions consistent distributed table management 
solution adapts novel techniques object replication chapter 
long term consistency services algorithms modified tailored specific demands system management 
solution symmetric 
system manager host presence network component helps define component primary uniquely 
primary component active respect updates network tables time 
components kept best possible consistent state serve query transactions 
primary component scheme preferable management application allows system administrator perform updates provided certain machine administrator workstation connected operational 
contrast known solutions primary component majority quorum criteria order establish primary component 
criteria presence administrator defined machine component 
necessary order prevent situations administrator resides component primary component contains majority replication servers 
situation useless majority allows updates management application generating disconnected majority 
keidar allows non primary components initiate updates 
updates applied totally ordered servers participating replication 
architecture powerful general purpose data base replication overkill system management applications 
believe best system uptime report problem manager refusing updates mask failure away manager think update successfully applied 
address problems nis see chapter show table management technique substantially improve implementation de facto standard compromising appealing features 
solution intervene kernel 
preserve standard format nis maps nis clients read nis maps rewritten 
updates nis maps performed table management subsystem 
supply library provides api service 
api applications management clients need change nis maps content 
features characterizing ntms outlined ffl consistency replicas network tables maintained automatically natural update basis ffl guarantee update table lost network partition host crash applied replica ffl architecture intrinsically supports update logs full system history restored ffl solution allows highly efficient propagation updates utilizing efficient reliable group communication transport layer transis exploits available hardware broadcast capabilities possible 
conserves network resources allows increase number replicas efficiently employed chapter 
long term consistency services ffl approach allows treat group servers involved replication table logical entity relieving system administrator idiosyncrasies dealing individual servers 
provides easier employment replicas ffl solution updates reach replication server servers directly connected 
called eventual path property 
property remedies drawback nis secondary servers reach consistent state absence primary server 
architecture replication servers reach updated consistent state absence primary server ffl explicit transfers table data network performed synchronization replicas states 
may needed synchronization retransmission update messages may missed servers 
considerably amount data overhead synchronization lower 
ffl ntms facilitates arbitrary replication policy 
contrast nis allow arbitrary subset tables replicated arbitrary subset ntms servers 
nis contrast enforces total replication maps secondary servers deployed 
rest chapter organized 
section give general overview network table management subsystem basic functionality underlying algorithms 
section describes part management server api deals table management 
section data structures part management server dealing table management 
section depicts formats messages exchanged entities protocol 
section provides detailed description part algorithm including pseudo code 
overview network table management subsystem network table management subsystem ntms part management server supplied platform 
ntms constitutes long term consistency service provided management server 
refer part management server ntms server 
shown ntms operates top group communication layer transis membership reliable services 
general architecture ntms architecture ntms outlined 
order boost performance availability network tables replicated number servers 
servers hold replicas table members service group sg 
sg consists primary secondary servers 
sgs passwd groups shown 
see server may primary server sg secondary server 
time primary server sg 
chapter 
long term consistency services secondary groups primary passwd secondary groups server secondary passwd secondary passwd management client application management client application passwd service group groups service group serv er serve serv er nt external client query query update update service groups chapter 
long term consistency services designation servers primary secondary ones done system administrator system initialization time 
reconfiguration system addition new servers removal reassignment primary server addition removal sg performed needed 
ntms servers event driven programs 
servers run daemon processes hosts provide ntms 
basic operation ntms updates absence failures key idea ntms algorithm impose single total order update messages single sg 
new request management client update table corresponding specific sg forwarded primary server sg place 
noted management client may connect arbitrary ntms server sg matter order generate requests updates 
requests management client targeted specific sg forwarded primary server sg server client got connected 
primary server assigns logical time stamp monotonically increasing counter new update applies requested update action local replica table multicasts secondary servers sg 
primary server enforces single total order update messages secondary servers apply order consistency servers replicas preserved long servers comprising upsilon sg connected 
update message exist secondary servers multicast primary 
network partitions component active updates certain table contains primary server corresponding sg 
updates attempted components contain primary server rejected appropriate diagnostics 
conflicting updates exist 
result need serialize conflicting updates arises network re merges 
server belonging sg logs update messages receives primary server local queue 
primary server remembers messages queue 
updated backup queue maintained non volatile storage disk server 
update messages queue may retransmitted servers missed due network partition server crash 
server discards logged update messages disk known messages locally stable members sg order obtain update messages status member sg periodically multicasts live message transis 
live message contains knowledge sender update message primary server sg received member sg 
live message vector entry corresponds member sg 
means originator live message knows update message primary server received server corresponding entry logical time stamp message saved disk 
need demand servers applied update messages respective replicas table 
case server failure recover disk part recovery procedure 
recovered server eventually apply update messages replica table 
chapter 
long term consistency services basic operation ntms updates presence failures sg implemented transis process group 
membership change caused network partition merge server crash reported transis connected servers exchange information converge updated consistent state known 
consistency convergence performed phases 
phase servers exchange state messages containing vector representing knowledge update message primary received server sg 
second stage updated server multicasts update messages missed member currently connected component 
primary server component performing retransmission 
updated secondary servers deterministically chosen server lowest identifier lexicographic order 
current implementation recovery procedure requires ntms server send state message 
shown necessary 
number state messages may minimized requiring servers send state messages 
explained previous section update messages removed disk known need 
knowledge obtained periodic live messages 
necessary send members sg connected 
case impossible find state absent servers 
live messages emitted members sg connected reported transis membership service 
diagnostics updates supplied management client management client receive notifications response request regular update ffl update successfully resolved acknowledgment primary server applied update action local replica table multicast members sg 
mean secondary servers applied action replicas 
fact update message travel network delayed secondary server 
guaranteed applied primary update message lost update message applied server sg 
ffl update rejected primary primary server sg current membership updates table allowed temporarily 
ffl update possibly failed primary server sg local component request issued got disconnected acknowledgment received management client 
knowledge corresponding update successfully applied 
words differentiate crash primary server network partition tell primary server applied update possibly network component 
precise diagnostics case impossible 
chapter 
long term consistency services basic operation ntms queries contrast update messages queries immediately resolved servers local tables replicas 
ordering requirements imposed query messages 
system performance number queries considerably exceeds number updates 
known characteristic configuration management application 
words average queries information network tables generated user applications considerably exceed number table updates generated management clients 
time inappropriate block user application configuration update 
ntms guarantees connected sufficiently long ntms servers sg belonging network component provide answer query 
updates client connect arbitrary ntms server 
query forwarded server belonging target sg possible 
ntms server api section depicts api ntms server 
open ntms session function invoked management client wants open session ntms server 
call returns session descriptor sd api functions 
function analogous yp bind function provided nis 
update table sd table name update function invoked management client wants update specific table 
analogous provided nis 
query table sd table name query function invoked client application wants retrieve information specific table 
analogous yp match function provided nis 
close ntms session sg function invoked client application want close session ntms server 
analogous yp unbind provided nis 
data structures section describes data structures ntms 
service groups initialization time ntms server reads local configuration file disk depicts current layout ntms 
information includes description currently supported service groups primaries secondaries order suffer disk latency ntms server maintains vector sg layouts entry sg main memory 
entry vector structure consisting fields chapter 
long term consistency services ffl name logical name sg ffl table file name table corresponding sg ffl primary identifier primary server sg ffl servers vector contains unique identifiers server sg ffl total number servers sg ffl group transis group servers sg members time ignore question configuration files initially created distributed ntms servers 
local data structures ntms server apart sg layouts ntms server maintains data structures server id unique identifier server 
fact name private transis group view structure representing currently connected ntms servers sg matter reported group communication layer 
structure contains fields ffl id unique identifier view ffl set vector identifiers currently connected ntms servers 
state vector entry sg currently supported ntms 
server member specific sg corresponding entry state reflects status server respect sg 
entry state null 
state server may 
regular state server view changes reported group communication layer due network failures progress primary server sg connected 
primary regular primary server sg view reported group communication layer 
state server reject incoming requests regular updates serve queries 
view change special state management server enters view change reported transis order converge updated state replica sg table sg controls vector entry sg currently supported ntms 
ntms server member specific sg corresponding entry sg controls contains pointer sg control structure null 
vector date backup disk 
sg control structure contains fields chapter 
long term consistency services ffl mq queue received updates 
queue kept ordered logical time stamps update messages 
mq partitioned zones white green colors model defined described bellow white zone update zone locally stable server knows servers belong sg update disk 
white line server maximal logical time stamp message server white zone 
obviously messages bellow white line discarded 
green zone update zone globally ordered locally stable 
updates algorithm propagated single server primary update enters green zone immediately arrival primary server 
element mq termed mq node consists fields msg content update message re multicast primary server sg applied flag tells update applied local replica sg table 
ffl vector contains server belonging sg highest logical time stamp update propagated primary server sg received saved disk server 
words reflects local knowledge server members sg respect update primary 
lowest entry definition white line server 
order perform garbage collection server update vector periodically advance white line accordingly 
order servers sg periodically issue live messages containing vector 
sg data structure recovery procedure membership change order retransmit missing messages updated servers 
consists fields ffl min lt max lt lamport time stamps messages range min lt max lt retransmitted 
ffl 
order determine messages require retransmission servers exchange information state merging partition 
number state messages received particular server 
sg vector contains sg corresponding sg structure server member sg null 
aq action queue holds action update query initiated server forwarded server order processed 
stands retransmission data chapter 
long term consistency services explained management client user application may connect arbitrary ntms server order submit request 
forwarding mechanism ntms transparent user 
forwarded actions kept aq server action sent resolved action got disconnected 
node queue aq node consists fields ffl client identifier management client user application invoked action ffl action id sequence number action server ffl server identifier server action forwarded 
message formats section depicts message types entities ntms protocol 
message formats 
request update message targeted primary update message received primary replayed secondary query message reply message type action id sender sg name type view id sender sg name sender sg name type action id lt sender sg name type action id type action id reply data action action action state live messages message formats ntms server send receive types messages state live contains fields chapter 
long term consistency services ffl type type message state live ffl sg name name service group ffl sender identifier server sent message ffl view id identifier membership view message sent ffl vector sender sg name 
request message originally created management client order update table associated specific sg 
message forwarded primary server sg 
request message contains fields ffl type type message request ffl sg name name service group ffl sender identifier originator message ffl action id local identifier counter message originator 
necessary order correlate reply primary server originator request message ffl action data specific update 
update created primary server sg corresponding request message 
message may received directly primary replayed secondary server consistency convergence procedure membership change 
message contains fields ffl type type message update ffl sg name name sg update targeted ffl sender identifier primary ffl lt logical time stamp update ffl action id replicated corresponding request message ffl action update specific data 
query initiated user application connected arbitrary ntms server 
message contains fields ffl type type message query ffl sg name name service group ffl sender identifier ntms server message originally created ffl action id local identifier message originator 
field correlate responses pending queries ffl action action specific data 
reply reply action request query 
message contains fields chapter 
long term consistency services ffl type type message reply ffl action id unique action identifier replicated original request query message ffl data reply data view change message generated transis reports membership change caused network failure host crash 
message contains fields ffl type type message view change ffl id unique identifier current membership ffl set set identifiers servers currently connected 
server server server merge merge server server server passwd mq mq passwd mq passwd passwd mq mq mq view change ntms server operation section details operation ntms server outlined section 
ntms server event driven program 
reception message group communication layer represents event triggers different actions server side 
group communication layer messages deliver management server blocks receive operation 
order understand algorithm important realize chapter 
long term consistency services regular handle request handle update handle query handle view change view change handle state handle view change handle request view change message primary handle query handle view change update query state message state messages received primary state messages received primary absent view change message query init view change message handler may invoked server primary sg request request event relevant primary sg state machine ntms server server start handle event completed handle previous ones 
represents state machine ntms algorithm 
sake simplicity explain terms single service group 
fact ntms server may simultaneously different states respect different sgs member 
main states server 
fully operational state regular 
state management server handles incoming requests updates forwarding primary server replies queries forwards relevant sg performs garbage collection update messages local stable storage corresponding handlers listed inside state ellipse 
case full membership members sg connected server periodically multicasts live message members sg allowing perform garbage collection update messages locally stable member sg 
live message irrelevant current membership sg complete help advance knowledge absent members sg 
case ntms server temporarily multicasting live messages 
show incomplete membership distinguished state contribute general intuition constitutes optimization 
implementation handles issue properly 
special case incomplete membership absence primary 
chapter 
long term consistency services show case distinguished state primary 
management server get state view change state 
transition view change state happens management server receives view change message transis reporting transient membership change 
state state ntms server enters reboot 
part initialization procedure ntms server joins transis group implements sg server member 
message delivered transis server join group membership notification reflecting server 
view change state primary ntms server handles incoming requests regular updates usual way exception updates known rest sg membership change completed network stable 
entering view change state ntms server performs phase recovery procedure order converge updated consistent state replica 
phase server sends state message reflects server maximal knowledge update message primary server sg 
messages received members new membership set messages needed retransmitted computed updated server performs retransmission 
primary server new membership necessity updated server 
server server lexicographically minimal identifier messages retransmitted perform retransmission 
result servers converge common updated consistent state 
illustrated 
servers comprising sg connected network splitted independent components 
state servers message queues shown server server primary sg continues 
messages shown head mq represent green update messages ordered locally stable replicas 
second server bit longer primary 
green update 
server obviously disconnected idea new updates table corresponding sg 
lower part shows servers network merge view change described phase recovery procedure completed 
shows servers update messages white discarded 
final view change state noted nested view changes new view change message transis recovery procedure restarted 
order differentiate state messages sent different invocations recovery procedure state message stamped membership identifier reported transis 
irrelevant messages simply discarded 
membership stabilizes recovery procedure finished ntms server move states regular state primary state 
case new membership contain primary server sg 
state management server responds queries local replica table chapter 
long term consistency services define group sg layouts sg index group define able sg layouts sg index table define mq sg controls sg index mq define sg controls sg index define state sg layouts sg index state procedure init build sg layouts configuration file sgn number service groups listed sg layouts read sg controls disk schedule procedure periodic sending live messages connect transis join unique private transis group server id sg index sg index sgn server id sg layouts sg index servers join group mq node applied false apply mq node msg action table mq node applied true server id mq node msg lt force changes mq disk sg index sg index ntms server init procedure inactive respect updates 
new update generated network component contain primary 
requests updates rejected appropriate diagnostics 
ntms server return regular state new membership change occurs new membership contains primary server 
course order return regular state ntms server go view change state place 
noted phase recovery procedure depend primary 
secondary ntms servers may bring best possible updated consistent state primary 
secondary servers directly connected primary server may learn new updates secondary servers connected primary 
initialization depicts pseudo code initialization procedure ntms server 
reboot ntms server reads configuration file recovers corresponding different sgs server member 
node mq examined order find update message containing node applied associated table 
server applies update message modifies data chapter 
long term consistency services define sg index index msg sg name sg layouts vector procedure main init loop forever server event loop receive msg receive message transis switch msg type case request handle request msg sg index case query handle query msg sg index case update handle update msg sg index case live garbage collect msg sg index case state garbage collect msg sg index handle state msg sg index case reply aq node find action msg aq node null send msg aq node client reclaim aq node memory case view change discard actions msg handle view change msg switch loop forever main ntms server event loop structures accordingly 
main event loop pseudo code main event loop ntms server 
events messages different types management server receives network transis 
receiving messages performed primitive receive supplied part transis api 
transis provides synchronous asynchronous receive synchronous version 
message delivered application ntms server receive blocks 
message received ntms server targeted certain sg 
assume sg name converted sg index index target sg sg layouts sg vectors 
chapter 
long term consistency services handling request management client ntms server receives request update message management client forwards request primary server target sg 
primary server creates update message request applies required action replica table multicasts update message secondary members sg transis 
shows pseudo code implement steps 
possible primary server receives request update just membership change reported transis 
case primary server middle recovery procedure 
block application new requests primary 
primary creates new update message applies table usual multicast secondary members sg 
explained subsection new update messages lost retransmitted second phase recovery procedure 
handling update message update messages created primary server corresponding sg 
primary server sg enforces single total order update messages secondary servers receive messages order 
update message accepted secondary server logical time stamp message greater logical time stamp message received primary server exactly 
new message discarded received server order 
depicts pseudo code update messages handler 
handling membership changes presents pseudo code handler called transis reports transient membership change notification 
handler implements phase recovery procedure described section 
response membership change event ntms server enters view change state sg member 
state ntms server generates state message sg member multicasts members sg 
addition handle view change handler initializes min lt max lt variables retransmission data structures involved sgs 
variables initialized logical time stamp update message primary server sg received ntms server 
view change state primary server sg continues resolve requests updates usual multicasting update messages 
obviously newly created updates may reflected state message sent primary server sg 
new updates lost retransmitted secondary members sg explained subsection 
chapter 
long term consistency services handling state messages subsection describe handler invoked time valid state message received ntms server 
handle constitutes second phase consistency convergence procedure described subsection 
explained subsection state message created ntms server sg member receives membership change view change notification transis 
membership events may cascade state message contains unique membership identifier reported transis 
state messages taken consideration state messages discarded 
shown ntms server receives state message targeted specific sg decides view id field message valid state message 
ntms server updates appropriate min lt max lt variables initialized handle view change see subsection 
variables order compute set update messages missed ntms server retransmitted servers 
time state message received receiving server compares entry sender vector values min lt max lt min lt min lt reset value 
entry sender state message greater max lt max lt set value 
way min lt holds logical timestamp update message known servers max lt holds logical time stamp update message emitted primary server sg 
relevant state messages sg received member sg deterministically decides retransmit missing update messages 
obviously primary server sg component perform retransmission missing update messages updated server 
secondary server may perform retransmission messages logical time stamps semi open range min lt max lt 
secondary server lexicographically lowest name may deterministically chosen purpose 
order find necessary messages suffices check server entry vector equals max lt shown server decides perform retransmission retransmits update messages message queue starting message time stamp min lt note retransmitting server primary server sg may update messages message queue logical time stamps greater max lt may happen example primary server received requests updates management client view change state applied emitted state message 
explained earlier corresponding update messages multicast secondary members sg 
messages multicast primary server retransmission received secondary servers correct order 
finishing handle state handler ntms server moves possible states regular primary depending primary server sg membership reported transis 
chapter 
long term consistency services garbage collection pseudo code handler invoked time ntms server receives live message state message targeted server sg 
contents live message identical state message 
difference live messages emitted periodically ntms server belonging specific sg order perform garbage collection 
state messages contrast generated response membership changes 
messages represent local knowledge sending server updates locally stable servers comprising sg 
local stability update mean update saved local non volatile storage disk 
time minimal entry vector holds logical time stamp update locally stable members sg 
obviously updates time stamps lower minimal entry old white line discarded safely 
ntms server receives live state message recomputes vector maximum local vector message 
result minimal entry local vector may increase 
update messages logical time stamps lower new minimal entry may safely discarded 
live messages emitted ntms server members corresponding sg connected 
done optimization explained periodical sending live messages incomplete membership help discover state servers disconnected 
information available state message merge networks components occurs 
action queue operation presents pseudo code auxiliary functions maintain action queue server 
explained earlier action request update query may initiated arbitrary ntms server 
server member sg action targeted forwards action right server possible 
right server sg layouts vector see 
note server action forwarded primary server corresponding sg 
function forward action gives forwarded action sequence number remembers action queue aq server performs sending 
reply action received contains sequence number 
handle function find action retrieves corresponding action action queue 
original initiator action determined reply forwarded 
ntms server receives notification membership change calls discard actions function discards actions forwarded servers got disconnected see 
appropriate diagnostics sent originators discarded actions 
chapter 
long term consistency services define index index server id sg layouts sg index servers vectors define mq sg controls sg index mq define sg controls sg index define able sg layouts sg index table define group sg layouts sg index group define state sg controls sg index state procedure handle request msg sg index server id sg layouts sg index primary am primary index index allocate new mq node mq node applied false mark msg applied msg lt index msg type update mq node msg msg append mq node mq force changes mq disk apply msg action table send reply action successfully applied msg sender mq node applied true force changes mq disk state view change multicast msg group sg layouts sg index primary iew set forward action msg sg layouts sg index primary send reply update rejected primary msg sender handling request management client chapter 
long term consistency services define index index server id vector procedure handle update msg sg index msg lt index allocate new mq node mq node applied false mq node msg msg append mq node mq index msg lt force changes mq disk apply msg action table mq node applied true force change mq disk discard msg update handling update message chapter 
long term consistency services define min lt sg sg index min lt define max lt sg sg index max lt define sg sg index define sg controls sg index define state sg controls sg index state define servers sg layouts sg index servers define group sg layouts sg index group define sg name sg layouts sg index name define index index server id sg layouts sg index servers array procedure handle view change msg state view change iew id msg id iew set msg set sgn number currently supported service groups sg index sg index sgn server id sg layouts sg index servers min lt max lt index servers iew set state state exchange prepare state message type state sg name sg name sender server id iew id iew id multicast group sg index sg index view change handler chapter 
long term consistency services define min lt sg sg index min lt define max lt sg sg index max lt define sg sg index define sg controls sg index define mq sg controls sg index mq define state sg controls sg index state define primary sg layouts sg index primary define servers sg layouts sg index servers define group sg layouts sg index group define sender index index msg sender define index index server id sg layouts sg index servers vector procedure handle state msg sg index msg view id iew id return msg sender index min lt min lt msg sender index msg sender index max lt max lt msg sender index gamma states members received server id primary primary iew set index max lt server id min id servers iew set id start node node mq node msg lt min lt foreach node mq starting start node multicast node msg group primary iew set state primary state regular handling state messages chapter 
long term consistency services define sg controls sg index define sg layouts sg index define mq sg layouts sg index mq define able sg layouts sg index table procedure collect garbage msg sg index old white line min serv number serv number serv number max serv number msg serv number serv number serv number new white line min old white line new white line mq lt new white line mq force changes mq disk garbage collection procedure chapter 
long term consistency services procedure forward action msg server action id action id allocate memory new aq node aq node client msg sender aq node action id action id aq node server server append aq node aq msg sender server id msg action id action id send msg server procedure find action msg foreach node aq node action id msg action id return node return null procedure discard actions new conf foreach node aq node server new conf send answer action possibly failed node client reclaim node memory action queue procedures chapter dynamically reconfigurable ntms sg primary meta group primary sg primary sg secondary meta group secondary sg secondary sg primary sg secondary meta group secondary sg sg secondary sg meta group sg sg secondary sg level service group architecture chapter show ntms layout reconfigured fly compromising availability consistency network tables 
meta management table management service problems replication schemes safe reconfiguration 
replication paradigms provided chapter assume set servers participating replication algorithm fixed known advance 
may turn restricting real needs system administrator 
administrator may want chapter 
dynamically reconfigurable ntms example add new replication servers demand order improve availability response time 
problem reassign protocol roles replication servers 
replication paradigm provided dec primary component paradigm 
primary server may re elected time membership change occurs 
primary server elected component contains majority replication 
primary component may re established quorum replication servers remained connected 
cases lack direct control master server primary component establishment precludes direct usage algorithms purposes management 
obviously system administrator wants specific server security convenience system planning optimization reasons established primary server server primary 
words administrative algorithmic decision 
configuration management configuration management service ntms nis nis referred meta management 
meta management standard table management solutions serious drawbacks traditional nis impossibility reconfigure demand 
impossible reassign nis master server halt currently running services 
relatively simple add new secondary nis servers remove nis servers 
addition performed simply scheduling new server 
similarly removal operation essentially mentioned routines removed server 
note operations external nis 
nis propagation mechanism internal nis system 
propagation configuration changes secondary nis servers done update basis 
mentioned advantages complicates reconfiguration nis 
nis transfer table secondary servers clear safe external file transfer mechanism 
obviously updates stopped time table transfer 
removal server easy original nis 
nis provide better solution helps reassign primary server complete reconfiguration currently running nis 
chapter extend ntms architecture order address problems 
definition ntms meta management specify consistent continuous ntms reconfiguration ffl allowed basic reconfigurations include addition new ntms server specific service group removal ntms server specific service group chapter 
dynamically reconfigurable ntms reassignment primary ntms server role secondary ntms server service group 
ffl reconfiguration service group block operation read requests queries regular updates ffl update reported successfully applied lost result reconfiguration 
ffl update may applied order server comprising service group result reconfiguration 
meta management ntms basic reconfiguration operations 
ntms architecture extended meta management shows extended architecture ntms 
introduce new service group called meta group mg contains primary servers service groups currently supported ntms 
mg single primary server regular sg introduced chapter 
basic reconfiguration operations take form updates targeted mg 
updates termed meta updates 
members mg replica meta table contains information previously kept configuration file maintained ntms server see chapter 
table associated specific service group initially located primary sg 
secondary server comes receives table copy primary 
secondary server operational member sg receives complete table 
reconfiguration ntms required system administrator initiate sequence meta updates implement reconfiguration 
meta update forwarded primary service group turn forwards primary server meta group 
key idea extended ntms algorithm impose single total order meta updates regular updates applied members modified service group 
addition new ntms server order add new ntms server service group system administrator ffl issue corresponding request meta update primary server ffl validate status update ffl start new server configured join transis process group implements chapter 
dynamically reconfigurable ntms initialization new ntms server enters special state table joins transis process group associated sg joins state ntms server passively waits table transferred 
messages server may receive member ignored state 
server receives table copy vector acknowledges reception enters unrecognized state 
state new server vector 
unrecognized state discard updates may receive receives update commands create copy vector described 
primary server mg treats request meta update just regular primary server handles request regular update 
words primary server receives corresponding ordered meta update secondary server mg 
meta update received primary server enters special state try transfer 
state equivalent regular state see chapter time primary server detects new server membership tries transfer table purpose primary server maintains pending list servers requested join successfully added 
primary server finishes transfer table service group new server marks server vulnerable pending list 
events possible primary finished transfer table servers pending list ffl request new update received vulnerable servers pending list update rejected appropriate diagnostics 
applied regular manner 
ffl meta update received 
similarly previous case vulnerable servers pending list update queued processing 
ffl ack received new server case primary server performs steps removes server identifier pending list 
pending list empty primary server returns regular state corresponding data structures vector rebuilt order reflect new server primary server multicasts corresponding regular update update contains vector primary entry new server set primary server vulnerable servers pending list meta updates dequeued updates exist 
update received secondaries change vector reflect new server 
update received applied new server creates copy vector moves regular state unrecognized state 
table transfer interrupted new server remains pending list primary server marked vulnerable 
chapter 
dynamically reconfigurable ntms ffl membership notification received new membership include vulnerable server 
case primary server remains try transfer state vulnerable servers current membership unmarked 
queued meta updates dequeued 
new membership includes vulnerable server state message server sent consistency recovery procedure see chapter indicates table unrecognized state 
depending server state primary server tries retransmit table creates regular update message commanding create entry new server vector 
new server may return table state unrecognized state 
may happen receives table acknowledges reception promotes unrecognized state gets disconnected ack received primary server new server re merges rest recovery procedure run 
state message chapter sent primary server augmented state regular try transfer list pending servers 
finds pending list returns table state 
removal ntms server order remove ntms server appropriate request meta update issued primary server request re multicast meta update primary servers sgs apply immediately replicas meta table 
primary server modified group re multicasts meta update request regular update 
words lt counter update computed done regular update see chapter 
secondary members receive re multicast meta update immediately change vector accordingly 
removed secondary server receives re multicast leaves membership change occurs various versions may exchanged servers may come different network components 
vector primary server received taken correct 
longest vector adopted 
problem arises server removed meta update disconnected 
case rest group may remove keep messages missing server 
includes meta update 
removed server re connects finds vectors rest contain pending list 
consequently server may understand removed added leave reassignment primary ntms server reassignment primary server regular service group reassignment primary server done steps chapter 
dynamically reconfigurable ntms ffl member add grouping service chapter ffl validate status status function chapter ffl add meta group 
addition procedure explained section terminate new server try configure new primary server described 
receives complete meta table enters special state tries new primary primary 
state ignores messages may receive member mg tries send request meta update primary server receives acknowledgment update successfully applied 
corresponding meta update received current primary server secondary server mg primary re multicasts order consistent regular updates secondary server leaves mg 
receives corresponding re multicast meta update promotes primary server rest members receive re multicast meta update change notion primary server reassignment primary server meta group case somewhat easier 
need add server meta group member primary server service group 
thing system manager issue request meta update current primary server meta group 
algorithm request issued new server received complete meta table 
rest steps previous subsection 
chapter grouping service configuration management network table management subsystem simultaneous software installation service simultaneous command execution service reliable mid level manager service extended group communication management platform distributed management platform utilizes group communication order provide efficient reliable management solutions 
common management tasks grouping simultaneous execution software installation table management addressed 
resulting services convenient consistent presence failures complementary existing standard mechanisms 
prototype platform partially implemented programming language 
tested cluster sun sparc machines running sunos operating system connected ethernet 
implementation extensions chapter basic ntms protocol progress 
currently developing convenient gui provide services 
management platform may extended order general applied problems distributed system network management 
chapter 
realms traditionally viewed separate issues common 
current trend distributed management integrate realms 
tme intends provide functionality system network management 
challenging problems cases provide truly distributed implementation control representation functions managed resources 
administrator provided illusion centralized environment helps human keep track complex distributed configurations 
today management applications provide illusion centralized environment implement centralized way 
wide spread paradigm management rigid client server 
paradigm management algorithm located manager station issues commands evaluated management agent server 
management agent left simple passive role 
approach especially widespread network management world 
problem approach scale 
propose extend platform see reliable mid level manager service facilitates development reliable hierarchical management applications 
mid level manager may efficient aggregation low level management data higher level data higher level management application 
mid level manager possible distribute management algorithms moving part closer data manage 
may done form dispatched scripts dynamically linked programs 
moving management application closer data manages reduce traffic overhead improve response time 
removing single point failure render management application available robust 
mid level manager concept hierarchical management new concepts aware suggests systematic way deploy entities reliably 
extended management platform may augmented distributed reliable backup notification logging services specified osf dme standard see chapter 
bibliography iso information processing systems open systems interconnection basic model part management framework 
geneva 
acm 
communications acm special issue group communications systems april 
amir amir dolev 
highly available application transis environment 
proceedings workshop hardware software architectures fault tolerance lecture notes computer science june 
amir 
replication group communication dynamic network 
phd thesis institute computer science hebrew jerusalem israel 
amir 
spread group communication toolkit wan 
private communication 
amir chockler dolev 
group communication infrastructure distributed system management 
proceedings third international workshop services distributed networked environments june 
amir chockler dolev 
efficient state transfer partitionable environments 
nd european research seminar advances distributed systems march 
appear 
amir dolev kramer malki 
membership algorithms multicast communication groups 
proceedings th international workshop distributed algorithms lecture notes computer science pages november 
amir dolev kramer malki 
transis communication sub system high availability 
proceedings nd annual international symposium fault tolerant computing pages july 
amir moser melliar smith agrawal 
totem single ring ordering membership protocol 
transactions computing systems november 
bibliography amit 
distributed smit system management tool large unix environments 
research report ibm israel science technology 
preparation 
baker 
communication infrastructure constructing reliable applications large scale distributed systems 
technical report tr ublcs university bologna laboratory computer science 
ben 
corba guide common object request broker architecture 
mcgraw hill 
isbn 
birman renesse 
reliable distributed computing isis toolkit 
ieee computer society press 
birman joseph 
exploiting virtual synchrony distributed systems 
proceedings th annual acm symposium operating systems principles pages november 
hadzilacos goodman 
concurrency control recovery database systems chapter 
addison wesley 
case rose 
manager manager management information 
rfc april 
case rose 
structure management information version simple network management protocol snmpv 
rfc april 
chandra hadzilacos toueg charron bost 
impossibility group membership 
proceedings acm symp 
prin 
distributed computing podc pages may 
cheswick bellovin 
firewalls internet security 
addison wesley 
el abbadi 
dynamic accessibility protocol replicated databases 
data knowledge engineering 
el abbadi toueg 
availability partitioned replicated databases 
proceedings th acm sigact sigmod symposium principles database systems pages march 
macedo shrivastava 
newtop fault tolerant group communication protocol 
proceedings th international conference distributed computing systems june 
fischer lynch paterson 
impossibility distributed consensus faulty process 
journal acm april 
bibliography goldszmidt 
distributed management delegation 
phd thesis graduate school arts sciences columbia university 
hewlett packard 
hp technical evaluation guide 

efficient ordering messages wide area networks 
master thesis institute computer science hebrew university jerusalem israel march 
telescript white 
available www com telescript whitepapers 
tme deployment migration 
available www tivoli com products deploy 
jajodia 
dynamic voting algorithms maintaining consistency replicated database 
acm transactions database systems june 

managers ease snmp information overload 
data communications 
keidar 
highly available paradigm consistent object replication 
master thesis institute computer science hebrew university jerusalem israel 
dme framework design chapter 
addison wesley publishing 
mann hisgen swart 
algorithm data replication 
technical report digital equipment june 
mishra peterson schlichting 
membership protocol partial order 
proc 
intl 
working conf 
dependable computing critical applications feb 
moser amir melliar smith agarwal 
extended virtual synchrony 
proceedings th international conference distributed computing systems pages june 
moser melliar smith agrawala 
membership algorithms asynchronous distributed systems 
proceedings ieee th international conference distributed computing systems pages arlington tx may 
moser melliar smith agrawala 
processor membership asynchronous distributed systems 
ieee transactions parallel distributed systems may 
peck 
exploring java 
reilly 
isbn 
ramsey 
administering nis 
sunsoft press second edition 
pages isbn 
bibliography rose 
manage network snmp 
prentice hall 
rowley 
secure group communication groupware applications 
proceedings nd european research seminar advances distributed systems march 

hierarchical network management concept prototype snmpv 
proceedings 
skeen 
quorum commit protocol 
berkeley workshop distributed data management computer network number pages february 
stallings 
snmp snmpv practical guide network management standards 
addison wesley 
stern 
managing nfs nis chapter 
reilly associates edition june 
tichy 
rcs system version control 
software practice experience july 
tivoli systems multiplexed distribution november 
available anonymous ftp ftp tivoli com pub info 
tivoli systems tme technology concepts facilities 
technology white discussing tivoli components capabilities 
available anonymous ftp ftp tivoli com pub info 
van renesse birman friedman hayden karr 
framework protocol composition horus 
proceedings acm symposium principles distributed computing august 

