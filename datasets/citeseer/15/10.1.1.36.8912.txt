equational theories inductive types ralph loader august revised march 
provides characterisations equational theory model typed lambda calculus inductive types 
characterisation may cast full abstraction result words show equations terms valid model coincides certain syntactically defined equivalence relation 
way give characterisations equivalence domain model version kreisel theorem allows transfer result domain model model 
concerns typed calculus inductive types correspond semantically initial algebras covariant functors calculus lies godel girard proof theoretic strength 
goal analyse structure model calculus category partial equivalence relations natural numbers 
shall show equational theory model nice syntactical characterisations model fully sense equality model coincides indistinguishable respect certain observable properties programs formally terms 
case calculi pcf observables termination non termination programs 
case calculus strongly normalising terminates termination suitable distinguishing terms 
take observable term sum type comes left part right part sum 
development material sections 
calculus inductive types concerns defined 

define categorical models calculus 

category shown model 

totality domain model stepping stone syntactical notions model 
merton college oxford ox jd england 
loader maths ox ac uk 
am indebted doctoral supervisor dr wallen dr normann useful advice suggestions 
author grateful financial support commonwealth scholarship 

term model constructed 

show various equational theories coincide concluding fully 
appendix category theoretic constructs needed model calculus defined discussed 
choice calculus consider motivated power techniques available abstraction involved meant analysed degree abstraction sufficient look calculus essentially propositional fragment martin lof iterated inductive definitions ml presentation different wish expedite semantical syntactical constructions 
author considers category intended model calculus 
calculus meant core programming language implementable recursive turing complete stored program machine 
arguments theorems ii ii odi appears mathematical representation implementation function application isomorphic kleene application 
wish study calculus extensional viewpoint impose structure extensional notions equality 
considerations appear fix interpretation types isomorphism 
view taken role model tode term model merely technical construction enable analysis important model 
argued tode natural representation implementation programs distinct data sense part program intensional access structure part program high level computer languages user programmer abstraction nature seemingly require analysis issues sequentiality scope addressed 
notation conventions logical notation types calculus 
logical entailment overloaded sequent gamma noun referring syntactical object proposition asserting syntactical object derivable 
categorical models notation propositional connectives represent corresponding categorical structure 
particular categorical products sums 
may odd entrenched theta notation lesser shall confusing situation considering structures objects categories different structure 
notation linear logic shall follow category theory reason categories logic 
specifically monoidal closed category tensor omega unit internal hom set products coproducts theta 
conventional girard linear exponential course 
category sets theta product coproduct cartesian product disjoint union 
ignores question appropriate notion extensional equality point addressed different sensible notions extensional equality fact coincide 
shall consider finite sets finiteness indicated subscript fin ae fin means finite subset possibly infinite set fin ae fin relations identified graphs convenient shall write xr image set relation backwards image shall consider application fin 
shall kleene bracket notation feg indicate th recursive function applied feg finite fragment function feg computed fewer steps 
domains feg feg respectively 
choose fixed recursive enumeration structures finite sets finite tuples appropriate identify comment objects encodings 
section recursive functionals 
fact need composition relations recursive functional 
usual representation sets domains partial recursive functions usual notion recursive functional case 
alternatives choose different representation sets allow non sequential functionals 
take option recursive functional purposes recursive functional usual sense allowing oracle 
minor change graph basic results recursive functionals apply immediately notion recursive functional 
calculus inductive types definition fix countably infinite set type variables 
sequence ff ff distinct members define set ff ff inductive types free type variables ff ff clauses ff ff ff ff ff ff ff ff ff ff ff ff fi fi ff note condition clause ensures free type variables member ff occur strictly positively left scope 
system terms types 
shall deal terms inhabiting closed types follows easily extended terms inhabiting open types 
type constructors usual meanings product sum function space respectively 
motivate informally operator associated term constructs 
free variable ff occurs positively type ff type interpreted monotone operator tarski theorem suggests suitable models may take fixed point ff ff 
inclusion ff ff gives definitions induction elements ff gamma gamma gamma gamma gamma gamma gamma gamma hr si gamma gamma left gamma gamma right gamma gamma inl ab gamma gamma inr ab gamma gamma gamma gamma gamma case inl inr delta gamma ff ff gamma ff ff gamma ff gamma ff gamma term assignment inductive types consider example reasoning informally types sets 
ff ff nat fi fi 
fixed point identity empty set singleton containing just empty function 
function determined inl ffi inr particular nat nat may decomposed zero inl nat succ ffi inr nat nat 
terms built succ zero just succ zero may identified natural numbers 
determined object 
fact expressed reduction rules 
shall need give constructions terms induction derivations lemma provides appropriate unique reading property justify 
proof simple induction terms omitted 
lemma term inhabits type context derivations sequent unique 
reduction rules types exactly usual reductions types 
state reductions types need turn types functors 
fi appear positively type fi fi term type able derive term type 
terms free variables terms function types 
ff ff gamma gamma delta ff define term theta ff ff clauses 
induction definition shows inference valid 
gamma delta ff gamma delta ff ff lemma shall show definition really give functors appropriate categorical models 
give basic reductions gamma 
fi reduction ff ff ff sx omega ff left ff right ff case inl inl ff inr inr ff fi gamma ff fi delta types functors gamma 
si gamma 
si gamma 
case inl inl inr gamma 
case inr inl inr gamma 
ff gamma 
theta ff basic reductions terms partial order gamma 
fi contains gamma 
compatible term constructs 
proposition proof omitted shown directly standard techniques interpreting calculus polymorphic calculus 
proposition fi reduction strongly normalising church rosser 
note types functors behaved substitution lemma suppose ff ff fi fi gamma equality theta ff theta fi theta ff fi holds categorical semantics give reasonably unified treatment semantics various models develop categorical semantics construct models showing give suitable categories 
appendix brief discussion categorical constructs complete presentation technicalities see mac 
models readily understood category precise presentation categorical ideas difficult particular invariance reduction definition term model essential functors 
ffl type ff ff represented ary functor 
ffl connectives interpreted applying corresponding constructs bicartesian closed category point wise functors representing types 
ffl constructor interpreted initial algebra see appendix definition 
fact need give functors interpreting types little additional structure 
types functors translation term may addition free variables 
categorical notion strong functor definition model 
definition model inductive types consists bicartesian closed category collections strong functors assignment initial algebra member satisfied 
contains projections parameters collectively closed composition 

closed point wise products coproducts 

point wise function space member interpretation types straightforward define type ff ff interpretation jak jak defined induction jff ja bk jak jbk ja bk jak jbk je ak jek jak jfi ak jak initial algebra taken argument jak corresponding fi 
interpretation types behaves correctly substitutions lemma ff ff fi fi ff ff jak ffi omega jb jb ff general holds coherent isomorphism 
cases considered isomorphisms identities 
derivable judgement interpretation morphism ja delta delta delta ja jak definition induction derivation sequent typing clauses induction categorical structure associated appropriate types follows 
jx th projection ja delta delta delta ja gamma 
jak 

gamma sk transpose adjunction gamma delta jak delta gamma jak delta delta 
gamma gamma jf ev ffi hf ri ev evaluation map ev gamma jak jbk delta jak gamma 
jbk 
gamma gamma ha bi omega jak jbk ff 
gamma pk ffi pk ffi 

gamma gamma ak ffi jak bk ffi jbk respectively 

gamma gamma gamma inl inr sk composite gammak id gammak ja bk dist gamma gammak jbk delta gamma gammak jbk delta dist morphism giving distributivity products sums cartesian closed category 

gamma ff ff jin ff ak 

gamma ff gamma ff composite gammak id gammak jff ak jbk jbk fact jff ak strong initial algebra strong functor jak see appendix lemma 
just interpretation types interpretation terms behaves correctly substitution lemma suppose gamma derivable 
jak ffi omega jb jb ff allowed terms types closed strong natural transformation 
precisely define interpretations derivable sequents terms 
show types functors defined interpreted model gives functor interpretation deltak types 
fact show interpretation terms invariant reduction 
lemma take ff ff suppose gamma derivable gamma ff ff ff derivable 
ff jak note strength strong functor jak definition statement 
proof induction type induction step follows uniqueness part appropriate universal property interpretation connective question 
induction step case fi notation convenience assume 
need show jfi maps jtk ff writing oe ff oe oe ff oe fi case induction hypothesis strong functor fi ff fi gamma delta jek delta maps jtk fresh variable type 
unique morphism making diagram commute gamma ja fi fflffl gamma fflffl fflffl gamma ff jtk 
diagram commutes jak jtk morphisms equal required 
proposition valuation term invariant fi reduction 
proof reductions standard ls 
reduction types suppose gamma ff ff gamma ff derivable gamma derivable 
valuation term composite gammak jbk lower left edges diagram 
gammak hid ri gammak ak jak fflffl ini gammak fflffl gammak jff ak jbk previous lemma valuation theta ff composite top right edges 
diagram commutes square instance shows result reductions types 
interpretation calculus inductive types straightforward recursion theoretic interpretation 
show category partial equivalence relations natural numbers model 
definition category follows 
objects partial equivalence symmetric transitive relations set natural numbers 
objects define partial equivalence fe fe defined gamma fe fe delta hom set set equivalence classes identities composition induced appropriate operations indices recursive functions 
known bicartesian closed category 
letting delta deltai gamma 
recursive bijection phi gamma ha bi ha delta fi fi psi union phi fi fi psi phi fi fi psi internal hom set 
projections injections evaluation maps obvious manner 
interpret need find collection strong functors closed type constructors 
provided definition 
definition inclusion objects morphism gamma 
equivalence class identity contained morphism witnesses fact 
functor called monotone maps inclusions inclusions 
functor called effective behaviour morphisms recursive function indices gamma 
gamma 
note effective functor strong functor natural transformation gamma 
equivalence class index recursive function effective monotone functors easily seen closed bicartesian closed structure 
lemma gamma 
monotone effective functor partial equivalence relations 
fixed point objects tarski theorem gives initial algebras functor results monotone effective 
little extra shown effective functor initial algebra effective functor monotonicity dropped monotonicity simplifies details allowing tarski theorem define initial algebra quite simple manner 
proof verification fixed point initial algebra may assume unary 
gamma 
identity 
gamma 
second recursion theorem satisfy phi psi phi psi ffi phi psi induction gives defined morphism gamma 
universal diagram commute morphism 
effective seen fact action morphisms may defined terms turn recursive function monotonicity follows induction proposition collection effective monotone functors category forms model totality domain model section define model certain effective topological spaces effectively continuous functions 
model defined certain domains sets totality structure name totality domain tod model 
section model intermediary analyse relation model syntax defining totality domains directly build model steps approach advantage making definition categorical structure model significantly easier follow 
define simple domain model intuitionistic linear logic 
top define totality structures 
kleisli category cartesian closed 
identify full subcategory kleisli category objects certain nice features 
subcategory natural equivalence relation factoring hom sets equivalence relation gives category totality domains 
shall wish compare category eventually effective version construction showing gives model nearly identical notions totality structures developments basic properties particular crucial density property definition correlating closely section appeared previously literature articles normann kri kn kn kn 
type systems involving inductive types constructs dependent types considered 
similar definitions properties concerning structures function spaces stable functions specialised purpose mind 
stable functions easier obtain cartesian closedness essential eventually continuous functions 
include ad 
hoc 
manner space total objects treatment smooth normann 
berger ber considers notions totality setting scott domains leading results similar proposition appears nearly sufficient knowledge linear logic required structures give models linear logic 
totality domains working concrete presentations advantage purposes lemma 
notable works mentioned ones arrive pleasantly similar notions totality despite having different motivations driving development particular duality definition extensionality density separation properties definition analogs mentioned 
set domains definition set domain pair gamma jaj con delta jaj set con ae satisfies 
con con finite ae 
fxg con jaj 
jaj called underlying set members con said consistent set domains similar girard qualitative domains gir addition requiring con consider translation function space continuous stable functions 
definition multiplicative linear operators omega set domains defined ja omega bj jaj theta jbj ja bj omega con phi ae jaj theta jbj fi fi con con psi con phi ae jaj theta jbj fi fi con con psi unit omega jij fg 
category sd set domains defined set domains objects hom set sd defined con identities composition identity relation phi fi fi jaj psi composition relations respectively 
tensor omega extended functor setting omega phi fi fi psi trivial boring verify omega sd symmetric monoidal closed category sd model mill see see bie 
content proving omega adjoint 
note ae con con pr ae jaj theta jbj con iff con particular ae gamma jaj theta jbj delta theta jcj letting phi fi fi psi gamma omega delta con iff theta con con con turn holds iff gamma delta con follows immediately sd omega sd isomorphic 
definition additive operators theta coproducts products ja bj jaj jbj con phi fi fi con psi phi fi fi con psi theta con phi fi fi con con psi ja theta bj theta con units defined con con verification really coproduct product initial object terminal object easy omitted 
note ja theta bj jaj jbj con con 
give exponential set domains definition set domain set domain defined aj fin jaj con elements con con phi ae aj fi fi con psi gamma 
define set ae gamma fx fy delta fi fi fi fi fx con oe clearly gamma 
functor model ill need natural transformations satisfying certain equalities 
natural transformations ffl phi fxg fi fi jaj psi gamma 
ffi phi fi fi aj psi gamma 
phi fi fi omega psi omega gamma 
omega phi fg psi gamma 
phi fi fi aj psi gamma 
da phi fi fi aj psi gamma 
omega details satisfy required equations trivial tedious 
interested reader referred bie details needed 
weak totality domains weak totality domains form category built set domains objects set domains totality structure 
shall isolate totality domains satisfy certain properties need 
axioms totality isolated sake gave rise loa 
paragraphs discuss informally consider weak totality domains 
totality domains presentations certain topological spaces working axiomatisation sub bases 
totality domain set domain certain extra structure 
set jaj thought representing sub basis topology 
subset jaj represents set topological space intersection sub basic sets represented elements finite represented set basic open set 
consistent sets con thought sets nearly point intersection represented sub basic opens 
points topology represented certain consistent sets represent singleton set topology 
consistent sets called total 
subject certain closure axiom vital proof proposition technical heart analysis model 
closure axiom certain computational explanation terms relation objects type programs accepting objects type see loa discussion 
weak totality domains qualitative domains totality kri normann coherence spaces totality kn 
definition weak totality domain quadruple gamma jaj con 

delta gamma jaj con delta set domain 
phi con fi fi gamma gamma 
psi 
phi gamma ae jaj fi fi gamma 
psi members 

called total respectively 
definition close normann 
objects called chains subsets fin jaj just jaj difference disappears due eventual linear exponential 
observation immediate axioms lemma weak totality domain 

upwards closed subsets respectively con 
convenient introduce notation rhs axioms 
define phi con fi fi gamma gamma psi phi gamma ae jaj fi fi gamma psi note notations implicitly depend choice set domain clear set domain intended 
axioms read 


letting clearly remove 
definition replacing 


ae iff 
ae 
ae con 
ae delta delta form galois connection 
particular gamma jaj con delta weak totality domain set domain ae con extend linear operators set domains weak totality domains follows 
phi theta fi fi 

psi 
omega 
phi theta fi fi 

psi 
phi fg psi 
gamma 

delta 
theta 
phi fi fi 

psi 
phi fin fi fi 
psi 
lemma 
ae con ae con 

con 
equivalent 
equivalent 



omega 
phi theta fi fi psi 
proof 
suppose 
ae 
con con 
theta theta shows holds 
conversely suppose holds con 
shows 


theta 

equivalence similar 

arguments similar 
show ae jaj omega 
equivalent 

omega 
equivalent turn equivalent theta omega 
theta 
follows 
define category objects weak totality domains hom sets 
obvious faithful functor sd throws away totality structure 
easy verify categorical structure sd section inherited 
functor sd faithful suffices verify functors giving structure associated natural transformations restrict category 
example closed composition follows easily lemma associativity omega note gamma omega omega delta phi theta theta fi fi 


psi 
gamma omega omega delta phi theta theta fi fi 


psi 
clearly give isomorphic objects 
kleisli category tod gamma 
objects hom sets tod identity ffl tod composite tod tod composite ffi model ill kleisli category cartesian closed bie product theta internal hom set category weak coproduct take subcategory tod form quotient giving category tod totality domains 
totality domains specialise weak totality domains give totality domains 
totality domains weak totality domains satisfying desirable properties properties sensible light previous subsection reading totality domains computational terms attempts justify conditions 
having defined totality domains proceed verify form cartesian closed sub category weak totality domains 
construct sufficient initial algebras effective setting model inductive types 
definition weak totality domain 
set con extensional phi fi fi fxg con psi con extensional 
extensional 
dense finite con 
ae separated dense 
strongly dense dense separated 
note terminal object separated strong density implies density 
totality domain extensional strongly dense separated weak totality domain 
notions virtually identical similar definitions kri kn kn 
works stable function spaces avoid strong density 
ber similar definitions properties proved preserved various constructs axioms 
includes separation version duality definition form single predicate 
non trivial totality domain determines information system sco scott domain closure information system finite con ae maximal total having worked details appears correspondence information systems scott domains totality domains close total dense subsets scott domains ber 
elements underlying set jaj totality domain may considered represent pieces information values datatype represented member 
con represents set pieces information valid particular value program respectively type computational terms consistency meant indicate computations exhibit uniquely defined behaviour words computations deterministic 
computation finitely information object putative object gives rise uniquely defined behaviour context finite fragment putative object 
justifies having set consistent finite ae consistent 
reading extensionality states values completely determined 
representing object information sufficient characterise object piece information consistent true object 
set phi jaj fi fi fxg con psi set describing object particular consistent 
shown extensionality equivalent having defined notion extensional equality motivation term extensional 
density shows notion consistency relates values datatype finite set consistent precisely partially describes value 
allowing infinite consistent sets hold object corresponds fact computations finite infinite consistent set may describe object finite computation reveal fact 
canonical example minimisation operation nat bool clearly computable extension total functional 
density familiar topological notion 
dense con scott topology sub basic opens sets form jaj 
separation states inconsistent pieces information type inconsistent program producing clearly distinct results programs access information representations objects 
point view notions observability cf full abstraction saying inconsistent pieces information observably distinct certain sense 
wish model function spaces want cartesian closed category 
notion strong density introduced ensure case author know particular informal justification property 
verify totality domains closed operations cartesian closed category weak totality domains 
details similar normann slightly complicated need strong density 
lemma weak totality domain extensional relation con equivalence relation 
equivalence relation 
written ja just proof relation clearly reflexive symmetric 
suppose extensional 
order show transitivity take 
fxg ae con ae phi fi fi fxg con psi con required 
conversely suppose relation equivalence 
fix 
take fx con fx show induction con 
ae con con lemma 
con fx fx con fx con supposition 
follows fx ae con phi fi fi fxg con psi member con finite subsets shows extensional 
lemma straightforward details left reader 
note density property needed parts 
lemma totality domains 
take ae ja bj 
con con 




extensional 


ja jb 
extensional 
totality domain definition separation equal element set shall write 
phi psi lemma weak totality domain separated phi psi 
con finite con proof fin con con phi psi con follows separation 
direction suppose condition satisfied fix finite con say phi psi phi psi con ae con ij ij set ffl ff delta delta delta ff ff delta delta delta ff con ff ij ffl ff delta delta delta ff ff delta delta delta ff con ng ff ij defined con ffl mg ng ij ffl mg ng ij 
clearly con 
exactly 

mg ij delta delta delta ng ij delta delta delta ij ae separated 
lemma totality domains 
separated strongly dense 
proof case simpler 
show separated separated weak totality domains 
verify condition previous lemma 
suppose ab con ab con con con consider case con similar 
phi fi fi fin con psi required lemma separated totality domains separated dense strongly dense 
strongly dense 
show separated lemma 
take finite con con say phi psi phi psi ae mg ae ng con con density may take 
ae lemma gamma delta gamma delta cartesian closedness tod gamma delta 

ae ae 
phi psi member gamma delta con lemma gamma delta clearly ab ab extensional totality domains lemma lemma show proposition totality domains definition tod full sub category tod objects totality domains 
proposition tod fact sub cartesian closed category tod define category tod objects tod hom sets factored extensional equivalence tod tod ja easy check composition identities tod cartesian closed structure compatible extensional equivalence quotient tod gamma 
tod cartesian closed 
weak coproduct tod induces weak coproduct tod 
extensionality easy verify weak coproduct fact true coproduct tod 
effective totality domains going dealing recursion theoretic ideas need effective version tod 
effective weak totality domain quadruple gamma jaj con 

delta jaj recursively enumerable set relation con finite ae jaj recursive subset fin jaj sets 

collections subsets jaj satisfying sets 
phi con fi fi gamma gamma 
psi sense relation characteristic function defined fin jaj 

phi gamma ae jaj fi fi gamma 
psi entire development tod carried setting effective totality domains essentially needed observation development tod needs constructive classical reasoning 
give effective versions strong density separation terms suitable witnesses properties 
convenient recursive functionals effective operations godel numbers appropriate 
definition density witness effective weak totality domain partial recursive function delta finite con ae delta 
separation witness oe effective weak totality domain density witness 
strong density witness recursive functional sigma sigma oe density witness effective weak totality domain separation witness oe 
effective totality domain extensional effective weak totality domain witnesses strong density separation 
effective version proposition holds bicartesian closed category tod effective version tode bicartesian closed 
interpretation tode collection strong endofunctors tode interpret inductive types satisfying monotonicity conditions 
definition endofunctor tode 
effective structure recursive functionals effective structure operation morphisms recursive functional called effective 
called monotone preserves inclusion relation objects defined jaj ae jbj 
ae 
con con con 
sigma oe ae sigma oe effective totality domain finite con oe ae oe finite con 

jb 
slightly odd conditional initial object tode initial respect proofs section 
note strong density witness recursive functional need consider higher type functionals 
note effective functors strong recursive functionals suitably continuous effect morphisms gives strength natural transformation gamma 

examining proof proposition see bicartesian closed structure tode effective monotone functors 
show class functors closed initial algebras reasonably straightforward matter 
set total objects fixed point axioms necessarily preserved unions increasing chains 
hint fact tod take fixed point enable show 
kri similar interpretation type constructors including inductive types collection qualitative domains totality 
treatment simplified compared due working effective situation need sure total object complicates argument 
proposition ary effective monotone functor tode initial algebra ary effective monotone functor tode 
monotone effective functionals tode give model proof construct initial algebra may assume 
define ff ordinal ff 


ff ff 

limit ordinal define jf ff 
jf ff con phi ae jf fi fi fin ae ff 
ff con fin psi ff 
ff take note limit ordinals finite ae jf con iff ff 
ff con induction ff verify definition gives monotone sequence objects tode 
straightforward successor ordinals step trivial infinite ff required witnesses effective structure fixed points recursive functionals recursive 
difficult point need show limit ordinals phi fin fi fi ff 
ff psi show phi gamma ae jf fi fi gamma gamma psi clearly ae follows contained rhs 
conversely arbitrary element gamma rhs gamma jf ff ff ff 
gamma ff 
ff gamma 
shows 
define jf ff 
jf ff con phi ae jf fi fi fin ae ff 
ff con psi ff 
ff 
fix ae con show 
gamma set phi jf fi fi con psi con con gamma gamma 
fin fin gamma 
ff ff 
choice gamma con ae fin con ae ff con ff con show ff 
fix gamma ff wish show gamma 
gamma gamma phi jf fi fi con psi clearly fin cases hold ffl con ff fin gamma oe fin gamma 
ffl con ae fin con fin phi jf fi fi con psi ae fin gamma shows gamma gamma 
clearly phi jf fi fi con psi gamma 
verifies ff 
ff arbitrary required show clearly sequence ff eventually constant 
define ff large ff 
morphism tode gamma delta equivalence class identity morphism 

fflffl fflffl commutes tode letting ff restriction ff commutes ff 
take fixed point ffi delta considered ff ff fflffl fflffl ff ff recursive functional representatives morphisms 
induction ff commutes ff ff sufficiently large commutes 
making commute show induction ff restrictions identical gives uniqueness morphisms making commute 
need composition recursive functional see comments notation conventions 
functor additional parameters verify resulting functor monotone effective 
monotonicity immediate induction ff effectiveness follows noting functionals associated fixed points recursive functionals recursive functionals 
term model construction term model reasonably standard little careful say simply typed calculus dealing predicative calculus 
define certain equivalence relations collections terms type show give rise model 
construction similar model terms natural numbers 
definition define category partial equivalences terms 
objects partial equivalences ja closed terms closed types compatible fi reduction terms equivalent normal forms equivalent 
objects ja jb define ja jb equivalence type ja jb iff jb ja hom set ja jb set equivalence classes ja jb 
identities composition obvious 

term model full sub category containing objects ja gamma delta ja ja object ja satisfies refer associated type generalise type ff ff notion associated type gives functors shall model inductive types 
definition ary functor associated type ff ff satisfies ffl associated object associated ff ff ffl gamma 
equivalence class equivalence class theta ff ff term model say simply typed calculus equivalence relation terms type contains fi conversion 
term thought expansion gives explanation 
note condition means constant functors associated corresponding closed types 
functor associated closed type completely determined behaviour objects 
lemma composite functors associated types associated type appropriate substitution 
category bicartesian closed structure associated corresponding type constructs follows ffl gamma 
fi ha gamma 
fi ha ffl 
gamma 
fi inl gamma 
fi inl 
gamma 
fi inl gamma 
fi inl ffl definition 
case canonical natural transformations associated structures obvious constructs terms 
projections equivalence classes left right satisfy equations required give appropriate categorical structure straightforward fi reduction 
details similar simpler calculation proof lemma 
functor associated type ff easily seen strong objects associated respectively strength natural transformation equivalence class gamma delta gamma ff delta theta ff considering action functor associated type ff monotone sense associated type ae ae 
lemma functor associated type ff ff fi initial algebra associated fi ff ff proof ease notation consider case ff fi general case similar 
define sequence fl object associated fl gamma fl delta gamma 
fi gamma 
fi fl 
fl limit ordinals verify induction fl fl defined increasing sequence functors associated fl equal zero limit ordinal trivial 
suppose fl associated ff fi 
need show fl associated fi ff 
done calculation verifies 
associated respectively suppose representative member 
closed term type ff gamma 
fi gamma ff delta gamma 
fi ff gamma ff fi delta gamma 
fi theta ff fi gamma ff theta fi ff delta theta ff fi gamma theta ff fi ff delta final equality follows lemma fact closed theta fi ff delta delta associated gamma delta long term related fl theta ff fi ff identical term fi ff 
summarise gamma gamma ff delta fi ff delta fl suppose fl say gamma 
fi gamma 
fi gamma fl delta fl associated slightly abusing notation gamma fi ff fi ff delta gamma fl delta follows fi delta gives defined action fl morphisms 
similar argument shows action preserves identities composition shows fl functor associated define fl sufficiently large fl morphism gamma 
equivalence class term type ff fi define gamma ff delta gamma delta easy induction shows gives defined operation hom sets initial algebra proposition functors associated types give model inductive types 
lemma proved induction term proof omitted corollary follows immediately 
lemma derivable valuation equivalence class delta delta delta term giving appropriate projection corollary natural isomorphism element functor delta functor sending set equivalence classes carries interpretation jak closed term equivalence class containing particular object jak total equivalence relation closed terms type equational theories examine equational theories models calculus inductive types considered previous sections 
turns equational theories models identical theory nice syntactical characterisations 
analysis carried follows equational theory term model easily seen smallest extensional theory lemma largest consistent theory proposition 
show theory tode extensional proposition follows fact terms dense tode lemma 
result carried proposition proving version proposition kreisel shoenfield theorem stated certain faithful functor tode full 
definition equational theory collection ja ja equivalence relations closed terms type gamma 
fi implies ja ja implies jb model type system get equational theory making terms equivalent denotation equational theories natural syntactical definitions 
example fi symmetric transitive closure gamma 
fi theories considered intentional nature gamma 
fi syntactical theories proposition largest consistent terms type equivalent equational theory proof type ff ff 
normal form term type forms inl delta inr delta 
closed terms set closed normal forms form inl delta form inr delta 
obviously equivalence relation satisfies 
normal form gamma delta follows 
holds 
letting inl inr consistent 
equational theory contained find ja reduce terms form inl delta inr delta respectively 
case inl inr inconsistent 
shall call equational theory extensional types terms implies comparing equational theories results give characterisations independent construction term model 
lemma equational theory term model extensional 
furthermore extensional theory contains proof note corollary equivalence relation jak extensional immediate 
extensional equational theory 
induction types ff ff objects associated ae jd jak ae ff induction step extensionality trivial 
follows ae 
proposition identical 
proof call object associated restriction equivalently equivalence class equivalence class clearly restriction total equivalence relation identical 
suffices show ff ff objects restrictions jak restriction ff 
induction induction step cases depending 
suppose jak ff take jek 
gamma delta jbk ff induction hypothesis gamma delta jbk 
jak required 
suppose fi clearly property restriction closed unions increasing chains 
considering construction initial algebras proof lemma suffices show restriction ff defined set jbk gamma 
fi fix gamma 
jbk ff corollary term gamma valuation inverse fi ff gamma 
ff 
gamma gamma gamma clearly consistent contained induction hypothesis jbk restriction ff 
theory tode shall show equational theory tode extensional 
shown proving density properties totality domains suitably witnessed terms 
proof fact essentially induction finite elements jak con induction needs certain amount care set 
done follow arguments proposition verifying total objects constructed represent terms 
previous concerned calculi terms explicitly constructed kri constructions pseudo code similar terms construct 
lemma give interpretations closed terms type form subset tode gamma jak delta dense scott topology 
words finite gamma jak delta con closed term type ae tode note extensionality axiom totality domains need show consistent representative equivalence class 
proof induction size function hereditarily finite objects defined condition size finite set tuple greater sum sizes components 
easy see members fi fi jak fi fi founded hereditarily finite objects choose recursive encoding finite sets tuples sensibly true effective totality domain 
induction predicate 
fin gamma ja delta delta delta ja jak delta con size derivable sequent ae 

phi psi gamma jak delta con size ae 
case 
done separately induction type 
show ff jak con ff inhabited ff inhabited 
non trivial case form fi fi positive ff fi inhabited clearly fi ff ff inhabited 
hand type ff fi gamma ff delta gamma delta type ff 
case 
empty trivial 
non empty various cases induction step depending type induction steps essentially follow constructions lemma checking total objects constructed interpretations term 
typical cases 
suppose fi conditions 
satisfied 
phi fi fi psi gamma jb fi delta con induction hypothesis ae jtk 
letting gamma fi jin gamma inverse take gamma 
jak 
clearly jtk 
ae required 
suppose conditions 
satisfied 
form phi psi jak con jbk con case induction hypothesis gives term ij left ij ij case jbk con term ij satisfying similarly constructed 
letting oe term case oe inl inr define letting oe term case oe inl inr define um take 
con mg jt ij ng ju hand ja bk con jt ij rg ju rg rg 
follows consistent contained required 
suppose conditions 
satisfied 
form phi fi fi psi phi fi fi psi define phi fi fi psi phi fi fi psi phi fi fi psi phi fi fi psi case done induction hypothesis ae 
induction hypothesis ae ae jtk 
follows easily ae case inl inr separation axiom fact application continuous proposition immediate lemma 
proposition tode extensional identical tode gamma jak delta jfk jfk closed terms type 
theory proceed analyse model inductive types show equational theory coincides preceding theories 
carried showing certain functor tode preserves interpretation inductive types 
definition functor tode gamma 
defined follows 
object tode iff wm equivalent members 


function 

gives recursive function indexes members 
lemma induces defined map tode gamma 
ea eb clearly map preserves identities composition 
hard see preserves products sums 
fact obvious faithful functors tode set preserve products sums 
obvious preserves internal hom sets 
show preserves external hom sets 
faithful immediate definition full extension kreisel shoenfield theorem kls 
proof uses ideas gandy proof gan 
ber proof similar result total subsets domains 
generality results appears similar despite differing abstractions presentation 
concrete presentations spaces involved simplify arguments simple useless definition topologies reflects fact proof obtained reverse engineering see required spaces involved berger goal extending original theorem scott domains general manner possible 
proposition functor effectively full recursive index oe ea eb find recursively index tode ef oe 
proof fix representative oe member ea eb 
define ff fi partial recursive functions convenient define ff fi terms define 
shall members encode finite subsets jbj identify encoded ae fin jbj 
ff fi computed searching member set fin foeg search succeeds fi element number steps taken find ff code finite set second recursion theorem follows 
words taken satisfy fr phi recursive phi 
specification explicitly implicitly ff fi 
computation frg converges fewer steps takes find member fin foeg set fr frg hand member fin foeg ff defined computation frg terminates search finite ffl ff ae con ffl ae foeg delta ae delta 
density ffl fi con finding depend put fr delta claims suppose ff fi defined 
computation 
search succeeds foeg delta fi con ff ae con 
ff ae 
foeg fi con note search succeeded wr delta 
gamma foeg foeg delta delta eb fi ae foeg delta foeg con contradicting choice search fails 
show take ff ae con finite ae foeg delta fi con finite subset foeg delta fi con assume contrary claim ff ae 
foeg fi con index set phi con fi fi finite fi con psi suppose fi undefined 
finite ae foeg fi con taken algorithmic sense sense arithmetic comparison 
words run computations parallel terminates take appropriate action waiting see computation terminates 
imply foeg fi con supposition wr foeg jb foeg extensionality foeg fi con contradicting 
supposition hold ff fi defined 
ff ff ae fin con twice foeg delta fi foeg delta fi con foeg delta 
extensional fi fi con contradicting fact fi assumption false claim holds 
index phi fyg fi fi psi set phi ff fi fi fi fi fyg psi prove proposition showing 
maps equivalence class oe 
take 
claim foeg fyg con extensional ae phi fi fi foeg fyg con psi con show 
show 
suppose 
particular fi undefined wr 
foeg 
foeg implies fi defined contradiction 

foeg 
lemma maps oe required 
corollary functor presents tode full sub category 
isomorphism internal hom sets preserved isomorphism map corresponding evaluation map correspondence tode gamma eb delta tode gamma ea eb delta tode gamma ea eb delta inverse isomorphism map oe 
constructed proof 
note indexes isomorphism inverse recursively recursive indexes density sets jaj con jbj con proposition functor preserves isomorphism categorical structure needed model inductive types 
models tode identical equational theories 
proof easy see isomorphism functor preserves products sums corollary shows internal hom sets preserved 
show preserves initial algebras 
effective monotone endofunctors tode respectively ff natural isomorphism ffi ffi fi unique natural transformation commutes fi gamma fi fflffl ef ff ef fi ef second recursion theorem satisfy phi fi gamma psi phi gamma psi ffi phi fg fi gamma psi ffi phi ff gamma psi ff gamma gamma indexes inverse ff gamma effect morphisms ef gamma 
ef respectively 
induction ordinal gives defined commutative diagram ef ff gamma ef fi gamma ef oo gamma fi gamma similar inductions show fi gamma ef gamma 
inverse fi 
shows isomorphic object fact ef range uniqueness initial algebras range shows ef give isomorphic initial algebras 
shown preserves categorical structure define valuation terms 
preserves valuations isomorphism tode jak derivable gamma ej gammak fflffl fflffl gammak jak commutes 
proposition follows faithful 
theorem model extensional equational theory coincides minimum extensional maximum consistent theories 
model fully sense elements jak ffi ffi 
worth noting gives slightly surprising result logical complexity inductive types 
shown relation jak complete logical complexity class expect inspecting definition example pi complete 
complexity lies domain jak actual equivalences corollary predicate jak restriction relation carried quite successfully analysis equational theory intended model calculus inductive types way showing variety equational theories identical deriving structural information certain models 
mentioned seen full abstraction results models 
discussion relationship results usual full abstraction setting pcf order 
case pcf fully models quite intentional example constant zero function distinguished function just happens zero 
case calculus inductive types clear results show models extensional 
motivation studying full abstraction pcf specifically problem produce analysis sequentiality setting higher order functions 
case models carry information manner computations carried presumably notion full abstraction closer pcf introduced embedding calculus extension non normalising terms 
reader may noted obvious model mentioned far article set theoretic model 
model functors ordinal preserves union increasing sequences sets greater desired foundational problems avoided restricting ff ff provably existing zf 
reason omitting model example due kreisel see final exercises appendices bar show equational theory set different 
author feel bad discrepancy results example classical sets give bad models calculi 
presumably results stated terms universe constructive sets cf rey pit 
modern history typed calculi choice calculus considered needs comment typical calculi study consider system going consider strictly stronger godel author immune prejudices techniques extend readily point raised kri ber 
constructions fix point fixed point ad crucial place proofs approach arbitrary element induction 
extending results far quite difficult example far know topological model terms dense system reveal results extendible settings 
bie bierman 
categorical model intuitionistic linear logic 
dezani ciancaglini plotkin editors typed lambda calculi applications 
lecture notes computer science 
springer 
bar barendregt 
lambda calculus syntax semantics 
northholland 
ber berger 
total sets objects domain theory 
annals pure applied logic volume number 
north holland 
gan gandy 
effective operations recursive functionals 

journal symbolic logic volume 
association symbolic logic 
gir 
girard 
system variable types fifteen years 
theoretical computer science 
north holland 
ls lambek scott 
higher order categorical logic 
cambridge university press 
loa loader 
linear logic totality full completeness 
proceedings ninth annual symposium logic computer science 
ieee 
kls kreisel shoenfield 
partial recursive functionals effective operations 
heyting editor constructivity mathematics proceedings colloquium held amsterdam 
north holland 
kri 
totality qualitative domains 
ph thesis 
university oslo 
kn normann 
interpreting higher computations types totality 
technical report institute mathematics university oslo 
kn normann 
semantics constructors type theory 
fritsch editors symposia conf 
walter 
kn normann 
total objects inductively defined types 
oslo preprint series mathematics number 
university oslo 
mac mac lane 
categories working mathematician 
graduate texts mathematics 
springer verlag 
ml martin lof 
iterated inductive definitions 
fenstad editor proceedings second scandinavian logic symposium 
north holland 
normann 
formalizing notion total information 
editor mathematical logic 
plenum press 
odi odifreddi 
classical recursion theory 
studies logic foundations mathematics volume 
north holland 
pit pitts 
polymorphism set theoretic constructively 
pitt editors category theory computer science 
lecture notes computer science 
springer 
sco scott 
domains denotational semantics 
nielson schmidt editors international colloquium automata languages programs 
lecture notes computer science 
springer 
see seely 
linear logic autonomous categories cofree coalgebras 
gray scedrov editors categories computer science logic contemporary mathematics 
american mathematical society 
rey reynolds 
polymorphism set theoretic 
kahn editors semantics data types 
lecture notes computer science 
springer 
appendix give categorical constructs required model inductive types bicartesian categories merely defined strong functors initial algebras developed detail 
additional category theoretic material mac categorical models calculi ls 
constructs model inductive types follow quite closely syntax language 
types contexts represented objects term type context gamma morphism gamma products property pairing projections give bijection terms type context gamma pairs consisting term type term type context gamma 
suggests bijection hom gamma theta hom gamma hom gamma ab 
pairing projections commute substitution require bijection natural gamma 
gives categorical product 
nullary version construction gives terminal object hom gamma singleton gamma 
eliminator case allows construct term type context ab terms type contexts conversely substituting injections gives terms type contexts term type context ab 
making inverse give bijection hom hom theta hom 
requiring natural operations commute substituted gives coproduct 
nullary version initial object hom singleton operation lambda abstraction takes term type context gamma gives term type context gamma 
conversely applying function variable takes term type context gamma gives term type context gamma making inverse natural gamma gives internal hom set 
category called cartesian products terminal object bicartesian cartesian coproducts initial object 
bi cartesian category internal homs called bi cartesian closed 
type ff free type variable acts functor terms 
construction valid terms concerned contain additional free variables reason need consider functors strong sense 
definition strong functor category finite products functor transformation gamma 
natural terminology exponential common conflict usage linear exponential 
preserves composition identities sense diagram ffih commutes gamma 
gamma 
natural transformations equal 
fx fx natural transformation called strength functor note strength equivalent lifting kleisli category delta manner natural naturality states left diagram commutes right diagram 
fflffl gf fx fx fflffl ff fx gff fx considering case gamma 
id gamma 
see pointed models considered article functor strength 
cartesian closed equivalences delta gamma 
delta fx fy delta gamma 
delta fx fy fx fy adjunction second yoneda lemma 
having strength functor equivalent having natural transformation preserving composition identity appropriately words action morphisms internal external hom sets 
product functor strong coproduct functor strong products distribute coproducts particular sums bicartesian closed category strong 
categorical notion corresponding fixed point type constructor initial algebra 
initial algebra categorical constructs associated corresponding corresponds uniqueness property follows fact recursion define unique object 
definition initial algebra endofunctor object morphism gamma 
object gamma 
unique morphism commutes 
fflffl fflffl strong functor strong initial algebra gamma 
unique gamma 
making commute 
equivalent fflffl fflffl gamma 
giving initial algebra kleisli category delta 
ary strong functor 
strong initial algebra extends strong functor natural transformation unique manner 
diagram fflffl fflffl commutes diagram commutes 
unique id fflffl id making commute 
functoriality follows immediately uniqueness property 
lifting kleisli categories product functors strong initial algebras ary strong functors ary strong functors 
initial algebra gamma 
letting gamma unique morphism making left square diagram commute see outside gamma fflffl fflffl fflffl gamma diagram commutes ffi gamma id ffi gamma id diagonal left square ffi gamma ffi gamma id gamma ffi id 
isomorphism 
lemma definition interpretation terms inductive types models 
probably follows general property adjoints cartesian closed categories direct diagram chasing argument difficult 
lemma suppose strong endofunctor cartesian closed closed category initial algebra 
initial algebra strong 
proof fix morphism gamma 
define gamma 
transpose composite ev note fflffl fflffl commutes diagram bf fflffl bin ev fflffl bg commutes 
naturality gives gamma ev ffi bg delta ev ffi gamma bf delta second component composite top edge diagram 
follows setting ev ffi strong initial algebra 
