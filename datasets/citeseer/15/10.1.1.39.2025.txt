short running title implementing real time semantics contact author gerald luttgen address institute computer applications science engineering icase mail nasa langley research center hampton va usa phone fax email icase edu practical approach implementing real time semantics bhat division systems parkway suite cary nc rance cleaveland department computer science state university new york stony brook stony brook ny gerald luttgen institute computer applications science engineering nasa langley research center hampton va icase edu extended appeared proceedings formal description techniques protocol specification testing verification forte xvii mizuno eds chapman hall osaka japan pp 

research supported nsf ccr ccr ccr int afosr aro ma 
research supported national aeronautics space administration nasa contract nos 
nas nas third author residence institute computer applications science engineering icase nasa langley research center hampton va 
investigates implementations process algebras suitable modeling concurrent real time systems 
suggests approach efficiently implementing real time semantics dynamic priorities 
purpose process algebra dynamic priority defined semantics corresponds traditional real time semantics 
advantage dynamic priority approach drastically reduces state space sizes systems question preserving properties functional real time behavior 
utility technique demonstrated case study deals formal modeling verification aspects widely scsi bus protocol 
case study carried concurrency workbench north carolina automated verification tool process algebra dynamic priority implemented 
turns state space bus protocol model order magnitude smaller resulting real time semantics 
accuracy model proved applying model checking verifying mandatory properties bus protocol 
ii bhat cleaveland luttgen implementing real time semantics variety formal approaches introduced modeling verifying concurrent distributed systems common scheme consisting basic components depicted specification language semantic model verification method 
specification languages provide syntactic means describing abstractions real world systems graphical nature statecharts harel term process algebras hoare milner variants logics monadic logics 
illustrates different looks feels languages small example modeling behavior simple place buffer cyclically offers communications ports 
specification languages common semantics terms operational models 
precisely syntactic models compiled labeled transition systems describe real world system operational behavior 
transition systems provide convenient structure verification methods simple reachability analyses allow analyzing deadlock behavior advanced techniques model checking clarke 
advent verification tools cleaveland henzinger holzmann larsen decade formal approaches emerged practical aids system designers baeten cleaveland 
addresses problem modeling verifying concurrent systems real time plays important role functional behavior 
hand real time implement synchronization constraints distributed environments 
example synchronization constraint consider communication protocol protocol phase may entered components agree 
hand electric phenomena wire glitches may lead malfunction avoided delays 
accurately modeling systems necessary capture real time aspects motivating need real time specification languages real time process algebras moller yi efficient implementation 
existing implementations real time process algebras typically cause state spaces explode making verification methods impracticable 
reason state explosion time considered part state new state generated clock tick 
tackle problem dynamic priorities model real time 
introduce new process algebra called ccs dp calculus communicating systems dynamic priority essentially extends calculus communicating systems ccs milner assigning priority values actions 
conventional process algebras priority winskel cleaveland hennessy cleaveland actions algebra fixed static priority values may change systems evolve 
sense refer ccs dp process algebra dynamic priority 
contrast traditional real time process algebras bhat cleaveland luttgen implementing real time semantics works model checking reachability analysis 
labeled transition systems formal verification methods compiled semantic operational models finite automata statecharts specification languages monadic logic graph process algebra empty 
full 
typical verification framework 
variation temporal ccs moller refer ccs rt ccs real time semantics ccs dp interprets delays preceding actions priority values attached actions 
words longer delay preceding action lower priority 
ccs dp semantics avoids unfolding delay values sequences elementary steps consuming time unit providing formal foundation efficiently implementing real time semantics 
soundness completeness technique proved establishing correspondence ccs dp ccs rt semantics terms bisimulation milner temporal logics clarke 
important note approach away aspects real time 
quantitative timing explicit ccs rt semantics analyzed ccs dp semantics 
utility technique shown means real world example modeling verifying aspects bus protocol small computer system interface scsi protocol today computers 
protocol model derived official ansi standard american national standard institute real time delays recommended implementing synchronization constraints ensuring correct behavior presence signal glitches 
accurate model bhat cleaveland luttgen implementing real time semantics scsi bus protocol requires consider real time 
model protocol syntax common ccs rt ccs dp generate state spaces semantics show size model order magnitude smaller ccs dp semantics ccs rt semantics 
modeling protocol carried concurrency workbench north carolina cleaveland sims cwb nc tool analyzing verifying concurrent systems 
order testify accuracy modeling extract mandatory properties bus protocol specify modal calculus kozen 
local model checker bhat integrated cwb nc automatically validating properties consideration 
remainder organized follows 
section presents process algebraic framework including real time process algebra ccs rt process algebra ccs dp dynamic priority 
relationship ccs dp ccs rt semantics established section 
overview scsi bus protocol section section describes modeling language 
properties bus protocol formalized checked model section 
section discusses approach compares related 
section contains directions 
process algebraic framework section introduce process algebra ccs rt inspired moller develop process algebra ccs dp syntax different semantics 
ccs rt extension ccs milner order capture discrete quantitative timing aspects respect single global clock ccs dp extends ccs concept dynamic priority 
syntax language syntax ccs rt ccs dp differs ccs associating delay priority values actions respectively 
include disabling operator known lotos brinksma allows compact notation bus protocol model 
formally countable set action labels ports including called internal unobservable action associate complementary action intuitively action may thought representing receipt input port constitutes deposit output define df fa take denote set actions fg 
follows range ff fi complementation lifted actions called visible actions defining df ccs action communicates complement produce internal action syntax actions associated delay values priority values taken set natural numbers bhat cleaveland luttgen implementing real time semantics precisely notation ff ff specifies action ff ready execution minimum delay time units respectively action ff possesses priority priority interpretation smaller numbers encode higher priority values represents highest priority 
syntax language defined bnf ff ip jp pnl mapping relabeling fg restriction set variable taken countable domain relabeling satisfies properties 
ff fi ff ff ff ff write fi ff fi ff fi ff adopt usual definitions free bound variables open closed terms guarded recursion refer closed guarded terms processes milner 
syntactic substitution free occurrences variable term term symbolized syntactic equality ranged denote set processes 
real time semantics section introduces real time semantics language context referred ccs rt semantics explicitly represents timing behavior 
formally semantics process defined labeled transition system contains explicit clock transitions representing delay time unit action transitions 
respect clock transitions operational semantics set processes willing communicate process running parallel able wait communication partner ready 
soon available communication take place idling prohibited 
assumption usually referred maximal progress assumption yi synchrony hypothesis berry gonthier employed successful specification languages including statecharts harel esterel berry gonthier 
formally labeled transition system process tuple hp gamma set states alphabet satisfying gamma 
transition relation represents start state 
transition relation gamma 
theta theta defined tables operational rules 
sake simplicity fl representative write fl gamma 
hp fl gamma 
say may engage transition fl behave process fl speak clock transition action transition 
convenient abbreviate fl gamma 
fl gamma 
order ensure maximal progress semantics set way gamma 
gamma clock transitions prevented long engage internal computation 
intuitively process ff may engage clock transition behave ff gamma process ff performs ff transition state ff may idle bhat cleaveland luttgen implementing real time semantics table operational semantics ccs rt action transitions 
act gamma gamma ff ff gamma 
sum ff gamma 
ff gamma 
sum ff gamma 
ff gamma 
rec ff gamma 
ff gamma 
rel ff gamma 
ff gamma 
dis ff gamma 
iq ff gamma 
iq dis ff gamma 
iq ff gamma 
res ff gamma 
pnl ff gamma 
nl ff com ff gamma 
jq ff gamma 
jq com ff gamma 
jq ff gamma 
jq com gamma 
gamma 
jq gamma 
jq table operational semantics ccs rt clock transitions 
gamma gamma gamma 
tact gamma gamma gamma 
tact gamma gamma ff gamma 
ff gamma gamma 
gamma 
gamma 
gamma 
gamma 
iq gamma 
iq gamma 
gamma 
jq gamma 
jq jq gamma 
trec gamma 
gamma 
trel gamma 
gamma 
tres gamma 
pnl gamma 
nl performing clock transition 
summation operator denotes non deterministic choice may behave time proceed equally sides summation 
engage clock transition delay choice engage clock tick 
process iq involving disabling operator semantics clock transitions 
action transitions behaves additionally capable disabling engaging restriction operator nl prohibits execution actions permits scoping actions 
behaves exactly actions renamed relabeling process jq stands parallel composition interleaving semantics synchronized communication complementary actions resulting internal action similar summation disabling synchronize clock transitions rule 
side condition ensures maximal progress pending communication denotes recursive process distinguished solution equation semantics satisfies properties 
bhat cleaveland luttgen implementing real time semantics proposition gamma 
implies gamma 
idling ii gamma 
implies gamma 
maximal progress iii gamma 
gamma 
implies time determinacy 
validity part consequence idling capability ff ff properties ii iii checked inductions structure maximum depths derivation trees gamma 
gamma 
respectively 
ccs rt semantic theory bisimulation milner developed 
restrict strong bisimulation 
definition temporal bisimulation symmetric relation theta called temporal bisimulation hp qi fl holds fl gamma 
implies fl gamma 
hp write rt hp qi temporal bisimulation behavioral relation rt shown equivalence enjoys pleasant properties 
important congruence property gives rise compositional reasoning allows substitution equals equals inside larger systems 
note temporal bisimulation requires equivalent processes match behavior exactly including timing behavior 
unfortunately ccs rt semantics unfolds delay value sequence elementary time units creating states 
example process ff states ff cf 
section 
efficient represent ff single transition labeled ff leading state 
representation state spaces real time systems implemented viewing priority value assigned ff 
words may consider delay value time stamp action ff 
elaborate idea 
dynamic priority semantics order formalize intuition new semantics language uses notion priority taken cleaveland hennessy generalized multi level priority scheme luttgen 
refer process algebra ccs dp interpreted respect new semantics contrast classical approaches priority dynamically adjusts priorities transitions 
intuitively visible actions represent potential synchronizations process may willing engage environment 
choice synchronization high priority low priority process choose 
high priority actions pre low priority actions 
reason high priority visible actions pre emptive power low priority actions visible actions indicate potential synchronization potential progress actions describe complete synchronizations real progress model 
formally ccs dp semantics process labeled transition system hp theta gamma presentation operational rules defining transition relation gamma 
requires auxiliary definitions 
bhat cleaveland luttgen implementing real time semantics table potential initial action sets 
ff df fff kg df df ff ff ff df iq df pnl df fff ff lg jq df introduce potential initial action sets defined smallest set satisfying equations table 
intuitively denotes set potential initial actions priority convenience abbreviate fi kg write ff ff important potential initial action sets defined independently transition relation gamma gamma 
defined 
proposition states definition potential initial action sets faithful internal actions fundamental encoding desired notion pre emption 
proof luttgen definitions encoding notion pre emption multi level static priority framework 
proposition ff gamma 
table priority adjustment function 
df df df df ff df ff gamma iq df nl df nl ff df ff jq df df second auxiliary presenting transition relation define priority adjustment function shown table 
intuitively semantics set way parallel component process engages action priority priority values initial actions parallel components decreased actions important 
semantics parallel composition deploys kind fairness assumption priorities dynamic character 
priority adjustment function applied process natural number denoted returns process term identical priorities initial actions decreased phrase identical mean syntactic equality syntactic equality unfolding recursion 
formally stand smallest congruence contains satisfies axiom 
semantics respects ff gamma 
implies ff gamma 
satisfying remainder fact silently write ff gamma 
ff gamma 
bhat cleaveland luttgen implementing real time semantics table operational semantics ccs dp act gamma gamma gamma 
sum ff gamma 
ff gamma 
sum ff gamma 
ff gamma 
act gamma gamma gamma 
dis ff gamma 
iq ff gamma 
dis ff gamma 
iq ff gamma 
rec ff gamma 
ff gamma 
com ff gamma 
jq ff gamma 
jq com ff gamma 
jq ff gamma 
jq jq rel ff gamma 
ff gamma 
res ff gamma 
pnl ff gamma 
nl ff com gamma 
gamma 
jq gamma 
jq jq operational rules table capture intuition 
process may engage action priority yielding process side condition reflects specify exact priority maximal priority initial transition may interpreted lower bound timing constraint 
due notion pre emption incorporated ccs dp may perform transition lower priority process may behave pre able engage higher prioritized internal transition 
pre emption reflects implicit upper bound timing constraints 
jq denotes parallel composition interleaving semantics synchronized communication complementary actions having priority results internal action attached priority value cf 
rule com 
interleaving rules com com encode dynamic behavior priority values explained side conditions implementing pre emption 
operational semantics disabling restriction relabeling recursion expected 
proposition proved structural induction shows notion pre emption coincides intuition 
proposition ff satisfying ff gamma 

ccs rt may adapt notion strong bisimulation referred prioritized bisimulation 
prioritized bisimulation equivalence contains property mentioning 
definition prioritized bisimulation symmetric relation theta called prioritized bisimulation hp qi ff holds ff gamma 
implies ff gamma 
hp write dp hp qi prioritized bisimulation bhat cleaveland luttgen implementing real time semantics implementing ccs dp ccs rt semantics process algebras ccs dp ccs rt front ends concurrency workbench north carolina cwb nc cleaveland sims created process algebra compiler pac cleaveland meta compiler developed interfacing cwb nc new process algebras 
implementation ccs rt straightforward needed effort regarding ccs dp reason rule act ccs dp semantics gives rise potentially infinite branching transition systems priority value side condition ranges natural numbers greater equal fortunately problem avoided practical purposes 
possibility provide upper bound upper reflecting maximal priority value action occurring process consideration 
validity solution stems fact higher priority value upper effect process semantics priority values adjusted value zero 
idea refined implementation ccs dp semantics follows 
choosing value upper respect process determine value respect particular system state process consideration currently 
consequence number transitions process ccs dp semantics equal number transitions respect ccs rt semantics 
want point solutions touch compositionality implemented ccs dp semantics 
system combined having greater upper priority value additional system behavior possible 
computed parts semantics need re computed 
relating ccs dp ccs rt semantics section show ccs dp ccs rt semantics closely related 
underlying intuition best illustrated simple example dealing prefixing operator 
depicts real time semantics process 
transition systems intuitively reflect process delay times may engage transition 
ccs rt semantics process consecutively engages time steps passing states gamma may continue idling state engage transition inaction process 
time explicitly part states visible clock transitions representing step time unit 
contrast ccs dp semantics encodes delay time units transitions states 
just possesses states connected transitions labeled sight price saving intermediate states forced deal infinite branching upper bound provided discussed previous section 
example upper bound delay time units results idling enable new disable existing system behavior 
dynamic priority transition system bhat cleaveland luttgen implementing real time semantics just consists states symbolic transition labeled real time transition system possesses states transitions 
simple example clearly suggests ccs dp semantics yields compact models ccs rt semantics 
dynamic priority semantics real time semantics relating ccs dp ccs rt semantics 
paragraphs aim proving correspondence semantics ccs dp semantics understood efficient encoding ccs rt semantics 
needs sure notion pre emption employed ccs dp reflects notion maximal progress adopted ccs rt making relationship semantics precise state important lemma part presents connection clock transitions priority adjustment function 
lemma symbol gamma 
stands consecutive clock transitions 
lemma holds ii iii gamma 

proof part follows immediately definitions adjustment function 
parts ffl part ii proved induction structure 
definitions 

ff ff definition delta delta ff gamma ff definition delta delta fffg 
gamma fffg definition delta delta ff bhat cleaveland luttgen implementing real time semantics 
jq jq definition delta delta definition delta delta induction hypothesis definition delta delta jq cases easier establish ones omitted 
ffl prove part iii induction case trivial 
directly consider statement 
direction may observe gamma 
implies gamma 
proposition ii proposition 
remains establish structural induction 
ff ff gamma 
implies ff ccs rt semantics 
case ff gamma ff definition adjustment function 
case obtain ff ff desired 

jq jq gamma 
implies gamma 
gamma 
jq induction hypothesis may conclude jq jq definition adjustment function 
cases follow similar reasoning 
direction gamma 
proposition 
gamma 
proposition 
direction proof part 
induction step 
gamma 
gamma 
gamma 
induction hypothesis part iii exactly case lemmas ii respectively 
able state prove main result 
proposition correspondence ff theta ff gamma 
gamma 
ff gamma 
proof lemma iii sufficient show ff gamma 
ff gamma 
proof done induction structure 
statement trivially holds engage transition 
bhat cleaveland luttgen implementing real time semantics 
ff ccs rt semantics ff ff gamma 
valid ff ff exactly case know ff ff ff gamma 
ccs dp semantics 
reversely ff ff gamma 
implies ff ccs dp semantics 
ff ff ff ff gamma 
definitions adjustment function ccs rt semantics 
ff ff implies 
ccs rt semantics definitions adjustment function potential initial action sets proposition obtain ff gamma 
ff gamma 
ff gamma 

induction hypothesis proposition exactly case ff gamma 
ff gamma 
holds ff gamma 
ccs dp semantics 

jq jq ff gamma 
exploiting definition adjustment function jq 
semantics parallel composition may split case sub cases 
ff gamma 
jq implies definition potential initial action sets may apply induction hypothesis conclude ff gamma 
exactly case jq ff gamma 
ccs dp semantics fact jq 
ff gamma 
jq case shown symmetric fashion previous 
ff gamma 
gamma 
fg jq premise jq know 
induction hypothesis implies gamma 
gamma 
jq 
ccs dp semantics equivalent jq gamma 
jq desired 
remaining cases easier establish omitted 
proposition explicitly reflects intuition meaning natural number attached action calculi 
ccs rt interpret ff action ff enabled delay time units value indicates level urgency ff ccs dp bisimulation correspondence correspondence ccs dp ccs rt semantics reflected proposition key proving theorem states prioritized temporal bisimulation coincide 
bhat cleaveland luttgen implementing real time semantics theorem bisimulation correspondence dp rt proof prove direction showing rt prioritized bisimulation 
ff satisfying ff gamma 
proposition may conclude existence gamma 
ff gamma 
rt exist satisfying gamma 
ff gamma 
rt rt formally derived straightforward induction definition rt proposition implies ff gamma 
desired 
direction sufficient show df fh dp ng temporal bisimulation 
note hp qi choosing cf 
lemma fact delta 
arbitrary dp 
consider ff gamma 
conclude gamma 
ff gamma 
lemma iii 
ff gamma 
proposition 
dp know existence ff gamma 
dp proposition lemma iii order obtain ff gamma 
derived dp desired 
second gamma 
gamma 
proposition ii proposition lemma iii lemmas iii 
case know gamma proposition lemma iii 
lemma iii applicable gamma 
holds lemma 
definition finishes proof 
consequence result prioritized temporal bisimulation possess algebraic properties 
especially may conclude prioritized bisimulation congruence 
logical correspondence ccs dp ccs rt semantics logically related 
correspondence formally established variant modal calculus kozen temporal logic 
syntax defined bnf uses set variables phi tt phi phi phi hff ki phi phi formulas required satisfy additional constraint phi occurrence phi inside number negations 
define dual operators ff df tt phi phi df phi phi ff phi df hff ki phi phi df phi denotes substitution free occurrences introduce abbreviations theta hli phi df ki phi ff lg gammai phi df ha theta phi phi df theta li phi phi df phi hli phi df phi 
denote set formulas 
bhat cleaveland luttgen implementing real time semantics table semantics modal calculus 
tt oe df phi phi oe df phi oe phi oe oe df oe hff ki phi oe df fp ff gamma 
phi oe phi oe df phi oe phi oe df fp phi oe semantics phi calculus formula phi defined respect environment oe gamma 
maps variables sets processes 
intuitively phi oe denotes set processes satisfy phi environment oe 
formally semantic mapping delta theta gamma 
stands set environments inductively defined structure formulas shown table 
phi closed formula semantics independent environment 
case simply write phi phi oe 
say process satisfies property phi phi intuitively formula tt satisfied process boolean operators interpreted usual 
formula hff ki phi satisfied processes ff successor phi holds 
phi stands solution equation phi respect boolean lattice ff smaller tt 
basis definitions deduce process satisfies ff phi ff derivatives satisfy phi satisfies phi process reachable sequence transitions labeled actions formula phi valid 
similarly hli phi holds process sequence transitions labels drawn leads process satisfying phi 
ccs rt suitable version calculus obtained changing definition semantics hff ki phi fp gamma 
ff gamma 
phi oe important result processes satisfy formulas independently interpreted regarding ccs dp ccs rt semantics 
theorem logical correspondence phi oe phi dp oe phi rt oe 
proof proof done induction structure formula phi 
induction base phi tt straightforward cases induction step 
consider nontrivial case phi hff ki psi 
hff ki psi dp oe definition delta dp fp ff gamma 
psi dp oe induction hypothesis fp ff gamma 
psi rt oe proposition fp gamma 
ff gamma 
psi rt oe definition delta rt hff ki psi rt oe bhat cleaveland luttgen implementing real time semantics properties processes interpreted respect ccs dp semantics hold ccs rt interpretation vice versa 
worth noting leaving fixed point operator obtain versions called hennessy milner logic characterizes bisimulation milner 
logical characterizations bisimulations importance investigate 
case study scsi bus protocol demonstrate utility approach implementing real time semantics dynamic priorities case study dealing bus protocol widely small computer system interface american national standard institute scsi short 
scsi bus designed provide efficient peer peer connection peripheral devices disks tapes printers processors usually connects devices host adapter resides computer motherboard 
contrast host adapter peripherals attached directly bus controllers called logical units 
provide physical logical interface bus peripherals 
conceptually connected bus lun support peripherals 
practice peripherals contain scsi controller cf 

host adapter id motherboard computer device controller id device typical scsi configuration 
scsi bus protocol implements logical mechanism regulating peripherals host adapter communicate bus 
communication scsi bus point point time exactly may communicate 
order allow easy addressing lun assigned fixed scsi id form number ranging zero 
id reserved host adapter conceptually lun 
communication bus organized signal lines actual information messages commands data status information transferred data bus 
scsi bus protocol organized distinct phases bus free arbitration selection command data status message phase 
time scsi bus exactly phase 
usual progression phases shown 
bus free phase device possession bus may request access 
device competes bus bhat cleaveland luttgen implementing real time semantics data status bus free arbitration selection message message command usual progression scsi bus phases 
order initiate communication highest scsi id granted access 
arbitration phase lun posed request determines won competition 
lose may compete bus winner referred initiator proceeds selection phase 
phase initiator tries connect desired destination called target 
link initiator target established called information transfer phases including command data status message phases entered 
command phase target may request command initiator 
data may transferred target initiator data phase 
message phase information exchanged initiator target concerning bus protocol 
status phase transfer status information initiator completion command executed target 
key idea accelerating communication bus significantly contributed success scsi target free bus receives time intensive command initiator 
soon execution command finished target competes bus order transmit result initiator 
simple example may think initiator host adapter target hard disk command request read certain block hard disk 
accessing hard disks takes time bus purposes requested block data ready transmission 
modeling scsi bus protocol section model scsi bus protocol language implemented cwb nc 
syntax slightly departs introduced section writing nil inaction process proc term action notation ff obs may interpreted ff section 
actions obs come play section serve probes verification purposes 
modeling scsi bus protocol imposed assumptions 
restrict modeling called lun lun having id id respectively 
sufficient dealing aspects scsi bus protocol interested 
note situation exists competition bus 
timeout procedures contents bhat cleaveland luttgen implementing real time semantics messages commands data 
abstractions justified affect conceptual parts bus protocol behavior 
example sole purpose timeout determine target alive 
contents information sent bus messages representing completion transmission relevant device specific part bus protocol 
additionally bus signals busy sel select wired signals reality 
need model behavior model deals just lun time assert sel signal 
quantitative timing information occurring model measured relative time unit ns including arbitration delays time units bus clear delays time units bus settle delays time units delays time units cable skew delays time units 
underlying structure bus protocol explicitly reflected model 
lun connected bus modeled separate parallel component containing models different bus phases discussed previous section 
logical behavior bus protocol implemented bus signals 
signal physically consists wire model separate process similar global boolean variable 
note signal delays modeled wires operations transmitting information scsi bus 
away content information need model bit data bus 
arbitration modeled global variable stores highest id requesting access bus 
accordingly model called consists parallel composition including regular signals data path 
formally proc lun lun restriction restriction contains actions internal protocol concerned setting releasing signals requesting signal status placing reading information data bus 
modeling bus signals data bus conceptually bus signal modeled boolean variable true signal false signal 
processes representing signals busy sel select command data input output msg message atn attention req request ack acknowledgment generically created relabeling actions process cf 
table 
ports set rel set release signal switch state respectively 
actions indicate signal currently state 
note atomicity actions process algebras guarantees conflicts arising setting signals simultaneously avoided 
away contents messages 
distinguished messages disconnect complete explicitly considered require exit information transfer phases switch initial state lun 
accordingly may model data bus variable bhat cleaveland luttgen implementing real time semantics table model bus signals data bus arbitration variable 
proc arbitrator set rel set rel proc set rel proc set rel proc 
release proc proc arbitrator undef 
clear arbitrator proc undef id id undef undef proc id id id id id proc id id id id id store read information actions respectively 
labels record events placing reading messages bus 
modeling arbitration introduce process arbitrator models variable stores value highest id compete bus 
situation lun wants access bus captured special undefined state 
accordingly process arbitrator possesses states shown table called undef id id respectively 
may set variable state port current state arbitrator undef idj words variable maintains maximum value 
may reset initial state undef bhat cleaveland luttgen implementing real time semantics port clear 
reality want compete access broadcast id data bus 
acquiring bus lun check higher id asserted 
modeling technique requires implement bit wide data bus corresponds maximal number attached bus 
induces complexity states compared states technique 
modeling bus phases connection establishment section focus modeling logical characteristics scsi bus protocol see section american national standard institute initial bus phases handling connection establishment 
bus free phase device possession bus available arbitration 
scsi bus defined bus free phase soon signals sel bus settle delay 
accordingly process lun detects bus free phase actions absent time units cf 
table 
actions observed bus occupied lun returns start state 
bus free logical unit asserts signal action sets arbitration variable accordingly action performs arbitration delay switches arbitration phase 
arbitration phase lun competes access bus looks won arbitration checking device having higher id asserted id bus 
winner proceeds selection phase asserts sel signal 
lost arbitration return initial states 
models arbitration phase selection phase table lun model lun similar behaviors lun lun completely symmetric arbitration phase 
asymmetries arise different priority values assigned devices 
arbitration phase lun check lun set id bus 
lun lost arbitration 
lun need check lun set id bus lun assigned lower scsi id assuming devices necessity lun check scsi id asserted bus 
selection phase distinguished phase de asserted signal 
selection phase winning lun initiator tries connect desired destination target logical unit lun case selection 
writes id target data bus action asserts atn signal force device check desired target 
initiator waits delays releases signal 
short delay looks response target 
signal asserted target responded taken control bus protocol 
case initiator releases sel signal action behaves initiator target case phase 
atn signal asserted bhat cleaveland luttgen implementing real time semantics table bus free arbitration selection phase 
proc lun start lun start proc arbitrate lun lun proc arbitrate selection lun proc selection 
initiator target proc release 
clear target initiator lun proc initiator 
lun proc proc target 
lun device verifies bus protocol selection phase cf 
process 
checks sel signal action waits initiator releases signal action 
asserts signal action releases data bus action release re initializes arbitration variable action clear behaving target initiator 
arbitration re selection phases target master bus protocol proceeds phase depending selected target wants re connect initiator indicated status io signal cf 
table 
initiator slave bus protocol continuously checks status signals msg order determine phase selected target 
may indicate wish proceed phase asserting atn signal action 
detection de assertion signal action caused target expected unexpected release scsi bus initiator de asserts atn signal action returns initial state 
bhat cleaveland luttgen implementing real time semantics table command phase 
proc setack release setack release initiator proc proc 

modeling information transfer phases processes target initiator initiate information transfer phases subsume command data status message phases 
phases information exchanged initiator target 
data message phases divided phases direction information flow 
phases concerned transferring information target initiator phases concerned transferring information direction 
information transfer takes place byte wise handshake mechanism 
explain command phase modeling cf 
table 
refer reader luttgen complete model 
command phase entered target intends request command initiator 
target indicates command phase de asserting msg signals asserting signal 
waiting delay target requests command initiator setting req signal action 
initiator detects target switched command phase observing status msg signals cf 
process table 
detection asserted req signal action initiator places byte command data bus action waits delay asserts ack signal action setack 
target detects asserted ack signal action reads command data bus action releases req signal action 
point handshake procedure receiving byte command completed 
initiator may release data bus action release ack signal action 
alternatively command may consist byte bus may remain command phase handshake mechanism may repeated message finished action transferred 
note real world protocol length command encoded byte 
bhat cleaveland luttgen implementing real time semantics verifying bus protocol section specify safety liveness properties model expected satisfy modal calculus kozen verify employing local model checker bhat integrated cwb nc 
correspondence ccs dp ccs rt semantics ensures properties verified ccs dp model hold ccs rt model 
order construct state spaces model run cwb nc sun sparc workstation 
model states transitions ccs rt semantics possesses states transitions respect ccs dp semantics 
drastic saving state space emphasizes utility dynamic priorities implementing discrete real time semantics 
properties interest desired requirements scsi bus protocol extracted official ansi document american national standard institute 
ffl property bus phases reachable 
implies model free deadlocks 
ffl property bus phase entered eventually exited 
ffl property signals req ack change information transfer phases 
ffl property signal signal sel information transfer phases 
ffl property device sends message eventually received intended lun 
ffl property atn signal set bus eventually enters phase 
note properties describe functional behavior scsi bus protocol explicit realtime issues concerned hard deadlines response times 
may delay priority values calculus formulas replacing operators hff ki introduced section hffi 
semantically define hffi phi rt oe df fp gamma 
ff gamma 
phi rt oe hffi phi dp oe df fp ff gamma 
phi dp oe adaptation theorem easily shown hold modified temporal logics 
verify properties scsi bus protocol compact ccs dp model conclude valid ccs rt model 
notational convenience introduce meta formulas ff fi phi ff fi phi df ff phi fi gammafi gammaff fair follows ff fi phi df ff phi fi gamma ffig gammaff bhat cleaveland luttgen implementing real time semantics meta formula ff fi phi states 
path case ff formula phi true state fi seen 
note fi need occur ff fi releases requirement phi true state 
meta formula fair follows ff fi phi encodes path case ff seen phi true fi seen phi true action occurs infinitely path 
note paths actions occur infinitely action fi appear eventually 
notion fairness encode messages transferred scsi bus finite length properties validated 
unfortunately ccs dp ccs rt turn visible action internal action communicating port order prove interesting property deadlock observe certain actions system modeling assertion de assertion bus signals 
attach actions input output action belonging channel internal action visible action probe leading complex action respectively 
transition labeled synchronizes transition labeled resulting annotated 
produced 
communication port immediately observed probe intended 
model includes probes phase phase marking information transfer phase respectively ii probes ph signaling particular phase ph iii probes obs place obs read observing writing reading information data bus respectively iv probes obs obs indicating assertion de assertion signal sig respectively 
properties formalized 
ffl property property ensures model possess undesired livelocks bus phase ph consider formula gamma gammai 
ffl property check path probe phase eventually followed probe phase phase observed 
fair follows phase phase fairness constraint ensures initiator ignore target wish enter new phase forever continuously asserting atn signal 
ffl property encode paths probes obs obs obs setack obs occur phase phase 
phase phase obs obs obs setack obs ff ffl property formalization done lines property 
phase phase obs obs obs obs ff bhat cleaveland luttgen implementing real time semantics ffl property encode obs place followed obs read 
incorporated fairness constraint corresponds property 
fair follows obs place obs read obs place ff ffl property formalize probe obs eventually followed probe 
note property require fairness assumption 
fair follows obs obs ff verification results able validate property model minutes running cwb nc sun sparc workstation 
model checker local model checker fragment modal calculus bhat 
applying local model checker contrast global remarkably speeds task verification initial modeling attempts 
fact modeling scsi bus protocol done stages 
early modeling stages model checker invalidated properties immediately 
encountered errors ranged missed fairness constraints wrong timing information identified examining diagnostic information displayed form failure traces provided model checker 
process verification realized timing constraints bus protocol imposed avoiding wire glitches order implement necessary synchronization constraints initial bus phases 
constraints may gain access bus arbitration leads deadlock 
emphasizes necessity dealing real time constraints reactive systems explicit real time behavior interest 
discussion related may wonder ccs dp semantics consider actions minimal delays priority values labels transitions 
particular avoid side condition rule act allowing communication different priority levels 
reason followed approach imposes unsound abstraction respect ccs rt semantics 
simple example consider process df 
modified ccs dp semantics engage transition priority process 
transition transition pre empted communication priority pending 
original ccs dp semantics may engage transition priority yielding 
exists path starting transition may observed 
cutting additional path changes behavior modified ccs dp semantics incorrect 
bhat cleaveland luttgen implementing real time semantics regarding related formal relationship quantitative real time process algebra process algebra static priority adapted cleaveland hennessy established jeffrey 
jeffrey translates real time priority idea time stamping presents semantic correspondence bisimulation 
contrast ccs rt semantics process modeled jeffrey framework may immediately engage action idle forever 
semantics reflect intuition behavior reactive systems process wait desired communication partner available engaging livelock 
design decision jeffrey need choose dynamic priority framework 
br gr variant br gr referred introduced allows modeling static dynamic priority 
focuses specifying verifying concurrent real time systems ability capturing scheduling behavior needed 
consequently notion dynamic priority occurs priority inheritance earliest deadline scheduling algorithms adopted 
br gr dynamic priorities function history system consideration priority values calculated system history 
accordingly operational semantics redefined include historical contexts 
authors show dynamic priorities general lead compositional semantics give sufficient condition ensures compositionality 
introduced process algebra ccs dp dynamic priority semantics corresponds toone discrete quantitative real time semantics ccs rt utility stems fact ccs dp semantics yields significantly compact models ccs rt semantics abstracting away aspects real time 
ccs dp provides means efficiently implementing real time semantics 
compactness models improved interested verifying properties involving quantitative time semantics compositionality 
case ccs dp model may minimized standard bisimulation ignoring priority values labels 
implemented ccs dp ccs rt concurrency workbench north carolina formally model reason scsi bus protocol 
size model order magnitude smaller constructed ccs dp ccs rt semantics handled easily workbench 
addition specified desired properties bus protocol modal calculus validated model checking 
regarding scsi bus protocol modeled detail enable verification additional interesting properties 
bhat cleaveland luttgen implementing real time semantics american national standard institute ansi information systems small computer systems interface ansi 
baeten ed 
applications process algebra volume cambridge tracts theoretical computer science cambridge university press cambridge uk 
berry gonthier esterel synchronous programming language design semantics implementation science computer programming 
bhat 
tableau approaches model checking ph thesis north carolina state university raleigh nc usa 
brinksma iso specification language lotos computer networks isdn systems 
br gr davidson lee calculus communicating shared resources dynamic priorities north american process algebra workshop eds workshops computing springer verlag stony brook ny usa pp 

br gr lee gerber process algebra communicating shared resources dense time priorities theoretical computer science 
brinksma cleaveland larsen margaria steffen eds 
international workshop tools algorithms construction analysis systems tacas volume lecture notes computer science aarhus denmark springer verlag 
winskel ccs priority choice information computation 
clarke emerson sistla automatic verification finite state concurrent systems temporal logic specifications acm transactions programming languages systems 
cleaveland hennessy priorities process algebra information computation 
cleaveland luttgen natarajan priority process algebra handbook process algebra bergstra ponse smolka eds elsevier appear 
cleaveland sims generating front ends verification tools brinksma pp 
pp 

cleaveland natarajan sims luttgen modeling verifying distributed systems priorities case study software concepts tools 
cleaveland parrow steffen concurrency workbench semantics tool bhat cleaveland luttgen implementing real time semantics verification finite state systems acm transactions programming languages systems 
cleaveland sims ncsu concurrency workbench computer aided verification cav alur henzinger eds volume lecture notes computer science springerverlag new brunswick nj usa pp 

cleaveland verification active control system temporal process algebra engineering computers 
jensen jrgensen klarlund sandholm mona monadic second order logic practice brinksma pp 
pp 

harel 
statecharts visual formalism complex systems science computer programming 
henzinger 
ho wong toi hytech model checker hybrid systems software tools technology transfer 
hoare 
communicating sequential processes prentice hall london uk 
holzmann 
design validation computer protocols prentice hall 
jeffrey 
translating timed process algebra prioritized process algebra proceedings symposium real time fault tolerant systems ed volume lecture notes computer science springer verlag nijmegen netherlands pp 

kozen 
results propositional calculus theoretical computer science 
larsen pettersson yi uppaal nutshell software tools technology transfer 
luttgen 
pre emptive modeling concurrent distributed systems ph thesis university passau germany published shaker verlag aachen germany 
milner 
communication concurrency prentice hall london uk 
moller temporal calculus communicating systems concur concurrency theory baeten klop eds volume lecture notes computer science springer verlag amsterdam netherlands pp 

yi 
ccs time interleaving model real time systems automata languages programming icalp albert monien artalejo eds volume lecture notes computer science springer verlag madrid spain pp 

