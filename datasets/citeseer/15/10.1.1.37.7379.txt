maintaining authenticated communication presence break ins ran canetti ibm watson research center shai halevi ibm watson research center amir herzberg ibm haifa research lab tel aviv annex april study problem maintaining authenticated communication untrusted communication channels scenario communicating parties may occasionally repeatedly broken transient periods time 
party broken cryptographic keys exposed modified 
want parties security compromised regain ability communicate authenticated way aided parties 
mathematical model highly adversarial setting exhibiting salient properties parameters describe practically appealing protocol task maintaining authenticated communication model 
key element solution devising proactive distributed signature pds schemes model 
pds schemes known literature designed model authenticated communication broadcast primitives available 
show schemes modified model primitives available priori 
process devising schemes new definition pds schemes distributed signature schemes general 
definition may independent interest 
maintaining authenticated communication untrusted network basic goals cryptography 
practically cryptographic application get ground authenticity authenticity achieved cryptographic goals secrecy achieved known tools 
authenticated communication achieved variety standard cryptographic techniques communication links fully controlled adversary provided extended appeared proceedings principles distributed computing 
pob yorktown heights ny canetti watson ibm com 
part research done laboratory computer science mit 
pob yorktown heights ny watson ibm com 
part research done laboratory computer science mit 
ibm weizmann st tel aviv israel vnet ibm com cryptographic keys distributed ahead time see instance :10.1.1.53.2439:10.1.1.59.6682
cryptographic techniques rely ability communicating parties maintain integrity secrecy cryptographic keys 
attacks security communication systems obtaining modifying keys system penetration cryptanalysis 
call attacks break attacks 
authenticated communication maintained presence repeated break attacks 
particular party recover break regain security 
answering questions focus 
questions heart proactive approach cryptography 
approach introduced aimed maintaining security cryptosystems presence repeated break ins 
distributed cryptography approach see proactive approach calls distributing cryptographic capabilities signing key signature scheme servers designing protocols servers securely carry task hand generating signatures long servers broken 
addition proactive solution introduces periodic refreshment phases servers help regain security possible break ins 
consequently proactive system remains secure long servers broken invocations refreshment protocol 
see survey proactive security 
contributions 
viewed levels conceptual level investigate problem proactive authenticated communication presence repeated break attacks devise framework analyzing describe protocol solving problem framework 
technical level main contribution transformation converts proactive distributed signature pds scheme works reliable communication links faulty links 
defining formal model problem proactive authentication faulty links exhibiting fundamental properties parameters model 
concentrate construction secure pds schemes unreliable links model 
formal definition secure pds schemes show constructed model 
note definition may independent interest 
particular may define general distributed signature schemes just proactive ones providing alternative approach 
describe method transforming protocol works reliable communication links faulty links analyze properties 
method uses essential way pds schemes constructed 
stress solution problem essential realizing known proactive protocols realistic system :10.1.1.40.2085
model computation consider synchronous network nodes communicate totally unreliable communication links prone break ins 
faulty links modeled allowing adversary full control 
adversary read modify delete duplicate messages sent links inject messages 
break ins modeled allowing adversary occasionally compromise nodes obtaining secret data secret data may modified adversary 
highly adversarial model address problem recovering break ins authenticated communication 
solution possible assume adversary limited ways 
sure adversary modify code recovery protocol hope recovery 
assume program node written read memory rom modified 
see discussion rom assumption 
second hard see protocol guarantee authenticated communication adversary simultaneously break nodes network 
adopt proactive approach described introducing periodical short refreshment phases nodes jointly try refresh keys regain security assuming bound number nodes broken successive refreshment phases 
refer time successive refreshment phases time unit 
consider adversaries breaks minority nodes time unit 
third note solution may impossible nodes broken time adversary prevent node recovering simply failing deliver messages node rest network 
overcome assume limit number connectivity links adversary corrupts deletes messages 
gain intuition problems involved maintaining authenticated communication model instructive consider attack consider node broken adversary knows secret cryptographic keys 
adversary controlling communication cut rest nodes impersonate eyes 
impersonation kept longer broken node notice attack 
worse adversary modified cryptographic keys memory verify incoming messages adversary impersonate nodes eyes jumping ahead approach dealing seemingly hopeless situation follows 
protocol guarantees adversary cut large fraction network order impersonate reasonably restricted adversary impersonate nodes 
second sure node aware allowing keep small piece data rom piece data order bootstrap verification process 
piece data essentially verification key signature scheme chosen protocol startup remains unchanged public 
defining goals formulating reasonable notion solution proactive authentication problem important contributions 
general ensuring secure communication faulty links involves requirements ffl authenticity 
requirement ensures node accept authentic incoming message modified injected adversary 
ffl delivery 
requirement ensures messages sent network arrive destination 
settings requirements dealt separately 
authentication mechanisms literature deal ensuring authenticity explicitly ignore delivery issue 
proactive setting different recovering break requires recovering nodes able communicate nodes network 
forced combine authenticity delivery issues construct authentication mechanisms guarantee delivery provided adversary reasonably restricted 
sequel refer links enjoy authenticity delivery reliable links 
defining authenticators 
solution proactive authentication problem centered notion proactive authenticator 
informally authenticator compiler transforms protocol designed reliable links faulty links 
defining notion follow general paradigm defining secure multiparty protocols 
precisely define real life model computation 
call unauthenticated links ul model 
formalize idealized model computation want emulate adversary similar capabilities exception deliver messages faithfully links 
call authenticated links model 
notion emulation formulated standard way define global output protocol aimed capturing functionality protocol say protocol ul model emulates protocol designed model reasonably limited adversary ul model exists adversary model global output running indistinguishable global output running define proactive authenticator compiler property protocol protocol emulates ul model 
awareness 
notion emulation guarantees similar functionality global point view allows adversary occasionally impersonate node 
inevitable say cut network described 
complement definition proactive authenticator requiring node aware situation 
require node outputs special alert signal realistic settings handled higher layer protocol operator 
power adversary 
properties proactive authenticator hold long adversary appropriately limited 
limit adversary number broken nodes number connectivity broken links 
capturing power adversary especially ul model requires come care 
specifically time protocol distinguish categories nodes node broken disconnected links tampered operational 
adversary power captured tree parameters number nodes broken refreshment phases number connectivity links tampered order disconnect node number disconnected nodes 
see details 
related definitions 
authentication problem considered large number works :10.1.1.59.6682
approach taken notion authenticators adopted 
model differs important aspects 
deal recovery break ins model node corrupted remains 
frees having provide reliable communication afford assume limit number links nodes adversary may tamper corrupt 
deal asynchronous networks synchrony inherent allow joint refreshment phases 
emphasize notion independent sessions run parties 
deal session incorporated similar way 
solution take approach solution obtain authenticity refreshment phase node chooses random pair signing verification keys signature scheme 
keys meant authentication standard way 
node signs outgoing message received message accepted verification sender signature succeeds 
alternatively nodes exchange symmetric session keys authenticate messages 
crux problem get newly chosen verification key nodes possibly faulty links 
simply sending verification key signed old signing key consider node just recovering break 
old signing key compromised 
adversary forge signature send fake new verification key name successfully impersonating explained want design mechanism ensures twofold task hand hard mount attack hand node aware fact 
may attempt obtain awareness signed node acknowledge new verification key back sign acknowledgment signature key verify got new public key 
solution may verification key 
broken adversary erase verification key memory plant fake key adversary knows corresponding signature key place 
adversary impersonate eyes fact eyes nodes time impersonate nodes eyes mentioned section counter attack bootstrap trust refreshment phases node trust memory letting node keep small unchanging public key rom code protocol 
solution main technical tool solution proactive distributed signature scheme pds 
distributed signature schemes roughly described follows 
signature scheme public key verify signatures 
corresponding secret key kept single node shared nodes way enables large subset nodes jointly sign message preventing adversary forging signatures breaking nodes 
proactive distributed signature scheme nodes refresh shares private signing key refreshment phase 
done way prevents adversary forging signatures long nodes broken consecutive refreshment phases 
stress shares signature key changed periodically public verification key remains unchanged 
pds schemes known literature designed model authenticated communication broadcast primitives available 
main technical contribution schemes model see section 
pds scheme model proactive authenticator proceeds follows 
node keep copy unchanging public verification key pds scheme rom 
node able verify trust signatures respect key 
signatures generated jointly nodes 
refreshment phase node executes protocol ffl choose new set personal signature verification keys standard signature scheme 
ffl obtain certificate generated jointly nodes pds scheme new verification key 
certificate may read certified personal verification key time unit 
pds scheme ensure certificate generated node time unit 
obtains certificate time unit guaranteed adversary obtain fake certificate name round 
stress single instance pds scheme generate certificates nodes 
ffl done order maintain pds scheme 
rest time unit obtained certificates standard way node signs messages current signature key attaches corresponding verification key newly obtained certificate 
recipient message verifies certificate verification key secure rom verifies sender signature messages 
alternatively nodes certificates exchange shared key rest time unit shared key authenticate messages 
node fails obtain certificate new verification key fails refresh share pds scheme node issues alert signal signals node attack adversary may able authenticate communication 
settings alert handled band higher level protocol operator 
show simple implement construction meets definition long adversary break disconnect half nodes single time unit 
proactive signatures faulty links 
obtain pds scheme model unauthenticated links describe specialized version authenticator takes secure pds scheme model transforms secure pds scheme ul model 
note schemes literature assume broadcast channel top reliable links assumption removed standard agreement protocols resulting schemes reliable point topoint links 
pick schemes starting point solution 
defining proactive signatures 
describe prove transformation definition secure pds 
unfortunately literature far contain satisfactorily definition start presenting 
definition quite general applies distributed non proactive signature schemes 
alternative definition 
regarded generalization notion centralized signature schemes existentially secure chosen message attacks 
definition follows usual paradigm secure multi party protocols 
formalize ideal model signature schemes 
ideal model signing verification keys 
trusted party keeps database signed messages 
signers wish sign message time frame trusted party adds message database 
verify message signed suffices query database 
define pds scheme ul model model emulates ideal model process notion emulation usual 
realizing proactive signatures faulty links 
explained assume starting point pds scheme works model reliable authenticated point point links 
simple tools show pds scheme transformed pds scheme ul model 
transformation need reliability links 
obtain delivery simple echo mechanism assumed limitations adversary ensures messages arrive destinations 
get authenticity apply essentially method general proactive authenticator pds scheme certify nodes local keys refreshment phase 
purpose obtaining secure pds scheme possible simpler transformation 
transformation order get extra properties needed guarantee awareness proactive authenticator 
discussion rom assumption 
recall solution assume existence rom node attacker read modify 
requirement justifiable implemented variety ways corresponds neatly accepted mechanisms virus detection removal 
particularly appealing method implementing rom advantage appropriately designed operating system guarantee virtual rom software 
os deny writing access certain memory locations process processes active start time 
easy put public key virtual rom enabling solution 
absence rom nodes try network source reliable memory described refreshment phase nodes send verification key pds node decides right key majority vote 
solution drawbacks 
nodes need rom store recovery code 
addition solution guarantee awareness node knowing adversary sends wrong key refreshment phase 
importance awareness 
awareness condition somewhat non standard aspect treatment security requirement behavior non functional nodes 
view condition crucial invest effort achieving 
level awareness condition represents fact model impossible completely prevent impersonation case node cut network ensure measure resistance cases 
settings detecting attack preventing 
practice computer security accepted attack detected system managers security officers equipped regain control expose attackers 
threat alert amy sufficient deter hackers attacking system 
level awareness condition important complementing model assumptions recall order obtain solution need assume adversary break nodes time tamper links time 
particular sequel show important adversary inject messages links refreshment phase 
real life injecting messages links easier attacker modifying existing messages easier breaking nodes 
viewed light awareness condition ensures adversary gets worse results mounting easy attacks impersonate node node aware 
tolerate stronger adversaries 
common problem distributed cryptographic protocols assume limitations ability adversary corrupt nodes network 
protocol adversary corrupt players pre set bound bets protocol guarantee security 
problem acute solution assume limitations ability adversary tamper communication links 
said realistic scenarios easier disrupt communication links break nodes network 
desirable mechanism alert fact adversary disrupting links 
important note difference type awareness type discussed 
awareness condition local node aware condition supposed hold protocol holds long adversary appropriately limited 
awareness hand global node protocol went wrong may holds time goes wrong may able guarantee anymore hold presence stronger adversaries 
current solution partially guarantee global awareness property 
specifically guarantee awareness adversary capable injecting bogus messages links stronger assumptions 
know guarantee awareness case adversary modify delete messages links 
drawback overcome pds scheme secure model links authenticated necessarily reliable adversary modify discard arbitrarily messages links 
know pds schemes exist interesting open problem 
dealing erasures 
basic assumption underlying proactive approach nodes successfully completely erase certain pieces sensitive data refreshment phase 
specifically protocol nodes erase old shares signing key pds scheme 
node fails erase data security nodes may compromised 
trusting nodes locally erase data consequently proactive general may problematic completely distributed setting nodes fully trusted 
see discussion issue 
setting threshold cryptography trusting nodes manner clear case guarantee nodes able produce signatures may possible ensure adversary forge signatures 
may reasonable 
reason typically nodes participating protocols servers may administrative domain running code protocol reasonable trust remote nodes locally erase data trust local node 
scalability issues 
protocol large network internet possible partition network local neighborhoods perform protocol local neighborhoods neighborhood run pds scheme 
node obtain certificate neighborhoods belongs 
unchanging verification keys neighborhoods signed system start global certification authority 
partition impact security performance protocol designer pick partition offers tradeoff 
practical scenarios level solution involved partitioning node network clusters nodes give tradeoff 
original scheme tolerate adversaries break upto nodes resulting scheme tolerate adversaries break upto nodes 
may exist refinements scheme handle scalability better partitions asymptotic terms 
interesting research problem 
road map rest organized follows 
section formally define main computational models discussed authenticated links model unauthenticated links ul models 
define central primitive proactive authenticators 
section define proactive distributed signature pds schemes model ul models section show construct pds scheme ul model pds scheme model 
sections independent interest read separately notion authenticators skipping sections 
section construct prove security proactive authenticator described 
bulk invested defining constructing proving security pds scheme ul model 
proving security authenticator pds scheme done similarly proof security pds scheme 
models computation proactive authenticators defining proactive authenticators describe underlying computational models 
models postulate adaptive mobile adversary adversary may break different nodes different points time identities broken nodes chosen information gathered far 
model section assumes communication links authenticated reliable model section allows messages maliciously modified deleted injected links 
models definition proactive authenticators section definition pds schemes section 
authenticated links model consider synchronous network nodes nodes connected reliable communication channel 
node input randomness input consists pieces piece node onset communication round model ability nodes fresh random choices think consisting pieces piece chosen node onset communication round addition node number nodes security parameter encoded unary nodes polynomial input length 
protocol collection programs run nodes 
computation adversary 
computation proceeds rounds round node receives messages sent previous round messages received unmodified 
gets local input randomness round 
node engages internal computation specified protocol computation may depend internal state messages received current time generates outgoing messages local output round 
probabilistic polynomial time adversary called mobile adversary denoted gets input security parameter number nodes encoded unary interacts nodes follows learns communication parties may break nodes leave broken nodes wish 
breaking node adversary learns current internal state node 
furthermore rounds point leaves adversary may send messages name may modify internal state memory contents restriction may read memory rom fixed onset protocol changed adversary 
typically protocol code stored 
unauthenticated links model allow additional small part memory rom 
adversary leaves node longer send messages name access internal state particular adversary see random choices forthcoming rounds 
allow protocol initial set phase parties communicate intervention adversary 
phase adversary break parties learn messages sent links 
typically set phase choose exchange cryptographic keys 
setup phase replaced execution centralized setup algorithm 
chose distributed formalization somewhat simplifies syntax 
time units refreshment phases power adversary 
divide lifetime system time units canonical way time units small overlap time unit starts slightly preceding time unit ends 
call small overlap refreshment phase 
see 
typically duration refreshment phase communication rounds seconds time unit may hours days months 
durations time units refreshment phases thought parameters model protocol fits model specific values parameters 
simplicity leave parameters implicit presentation 
definition limited adversary adversary called limited respect protocol inputs randomness parties adversary breaks nodes time unit 
protocol clear context omit just say limited 
reason name nodes typically refresh cryptographic keys overlap 
oe oe time unit refreshment phase time unit time units refreshment phases 
noted limited adversary break nodes point long node broken time unit 
executions transcripts outputs 
execution protocol security parameter input vector adversary randomness node process running inputs randomness described 
transcript execution denoted trans records information relevant execution 
includes inputs randomness nodes adversary messages sent links local outputs nodes adversary 
trans denote random variable having distribution trans uniformly chosen domain 
sequel identify execution transcript 
notion transcripts proofs security sections 
global output execution contains information relevant functionality protocol regards external world 
roughly includes local outputs parties specified protocol adversary output relevant data 
precisely communication round non broken node outputs instructed protocol broken nodes empty output adversary may output 
node broken line node compromised added output 
line node recovered added output adversary leaves global output computation round concatenation local outputs rounds nodes adversary 
dealing protocols specific tasks may convenient global output contain additional information relevant functionality protocols 
example definition pds schemes global output contains information messages valid signatures 
see section 
denote global output execution transcript trans 
convenient think global output vector th component contains adversary output ith component contains output denote random variable describing uniformly chosen domain 
possible generalizations 
syntax generalized ways 
example address going executions terminate defining prefixes executions global outputs communication round 
adversary nodes arbitrary auxiliary information top inputs randomness capturing information gathered protocols run nodes 
may important secure composition stress node necessarily know broken recovered 
notices thought part system log added externally node output order better capture functionality protocol 
protocols see discussion 
generalization deals interactive inputs letting inputs nodes round depend execution protocol upto round dependence may may control adversary depending context protocol 
unauthenticated links ul model unauthenticated links ul model similar model modifications 
addition capabilities model adversary called ul mobile adversary denoted may modify delete inject messages sent links 
model round node sends messages nodes 
adversary decides values messages received nodes round 
values need related way values sent 
second allow nodes set special small rom set phase 
described provision reasonable solution possible 
execution protocol random inputs input vector ul adversary defined similar manner model adversary additional capabilities described 
stress adversary remains inactive set phase 
transcripts adversary views defined model 
ul trans ul trans analogous meaning ul model trans trans 
outputs defined bit differently described section 
power ul adversary 
capturing type adversaries constructions withstand ul model takes care 
characterize power adversary parameters 
roughly parameter specifies number nodes adversary time unit specifies number connectivity communication links disrupts 
precise start definition reliable links 
definition reliable links execution protocol adversary link nodes reliable certain time interval time broken 
message sent link arrives unmodified node communication round sent receive message link 
hold say link unreliable 
time execution protocol adversary distinguish categories nodes network broken disconnected operational 
broken nodes broken adversary 
defining disconnected operational nodes subtle 
principle parameter node disconnected time interval time unit 
part time unit span time units 
unreliable links operational 
formalizing notion meaningful way requires care 
recall nodes reliable links regain security break 
consider set nodes broken time unit gamma broken time unit reliable links time unit nodes broken reliable links time unit may unable recover break 
reason able communicate nodes broken previous time unit help recover 
formulate notion operational node inductive manner making sure node operational time unit able communicate nodes operational time unit gamma 
definition operational nodes execution node protocol ul adversary communication round execution set operational nodes round defined inductively follows 
communication round time unit operational nodes broken 

node operational previous communication round remains operational current round provided broken round round reliable links gamma nodes operational previous communication round 
alternatively unreliable links operational nodes 

node operational time unit operational refreshment phase time unit broken refreshment phase set consisting gamma nodes operational refreshment phase reliable links nodes refreshment phase 
definition disconnected nodes node said disconnected certain communication round time unit broken operational communication round 
intuitively node disconnected unreliable links 
just broken nodes identities disconnected nodes point execution determined actions adversary point 
difference broken disconnected nodes broken zero situation node broken disconnected parameterized 
disconnected node disconnected disconnected node 
purpose defining power adversary need count nodes impaired adversary set threshold node considered disconnected disconnected 
power adversary defined means parameters disconnection threshold bound number nodes impaired adversary time unit 
definition limited adversary consider execution ul adversary say limited execution time unit nodes broken disconnected 
limited respect limited execution nodes running output execution 
output execution defined model line node compromised added output broken disconnected line node recovered added output operational 
ul ul analogous meaning ul model 
proactive authenticators section define requirements compiler transforms protocols designed run network authenticated links repeated break ins protocols run network unauthenticated links repeated break ins 
call compilers proactive authenticators 
syntactically node authenticator takes input description protocol nodes model outputs description protocol nodes ul model 
main security requirement compiler called emulation roughly means protocol model transformed protocol ul model essentially functionality 
requirement follows general paradigm defining secure multi party protocols 
complement requirement called awareness 
awareness roughly means node notice adversary 
definition emulation protocols ul models respectively 
say emulates ul model limited ul adversary exists limited adversary input vectors ul denotes computationally indistinguishable 
note requirement incorporates conditions 
particular combined distributions outputs parties adversary output identities broken nodes indistinguishable sides 
general condition captures required notion security equivalence protocols sense consequences actions strong ul adversary nodes running protocol imitated achieved weaker adversary nodes running protocol requiring breaking different nodes 
see discussion 
definition authenticator emulating protocol model generates protocol emulates ul model 
model definition protocol output depends parameter different definitions output protocol depending properties want prove protocol 
distribution ensembles computationally indistinguishable polynomialtime algorithm polynomial sufficiently large ak gamma prob bk jkj awareness 
simulatability guarantees global behavior system remains unchanged ul model allow limited number nodes disconnected rest network consequently adversary 
discussed inevitable characteristic model 
guarantee node locally aware fact attacked 
guarantees may valuable particular nodes operate environment higher level protocol human operator band communication restore security detecting attack may nearly preventing 
glance may talking global protocol behavior irrelevant context distributed protocols setting true 
case example consider operating system nodes execute protocols secure usual operating system services access file system printers networks addition operating system typically applications running nodes distributed 
case may care behavior non distributed applications consider behavior individual nodes network 
start defining means adversary impersonate node network eyes nodes 
restrict special type authenticators call layered authenticators 
protocol layered authenticator generates protocol consists modules called layers 
top layer runs unchanged 
bottom layer message instructs send receive node follows procedure specified addition system set refreshment phase nodes execute refreshment protocol specified definition internal external views impersonation node layered authenticator node protocol consider execution presence ul model adversary consider time unit execution node broken time unit internal view sequence messages sent received top layer protocol external view time unit consists messages appear internal views non broken nodes network received say node time unit external view contains message internal view 
definition layered authenticator aware protocol generated satisfies property limited ul adversary node outputs special alert signal time unit negligible probability security parameter 
defining proactive distributed signature schemes pds main technical tool transformation secure pds scheme model secure pds scheme ul model 
construction need define secure pds schemes 
general paradigm defining secure distributed signature schemes 
paradigm generalizes notion security existential forgery presence chosen message attack seeing signatures messages choice adversary unable come new message valid signature message 
instantiate general paradigm definitions secure pds schemes ul models 
general paradigm particular instantiations may independent interest 
definition follows general framework defining secure distributed protocols 
describe ideal process captures required functionality distributed signature scheme define secure scheme emulates ideal process standard sense section 
approach require distributed signature scheme traditional centralized signature scheme 
reduced special case centralized signature schemes definition coincides definition 
section briefly discuss alternative approach defining secure distributed signature schemes taken 
section describe ideal model pds schemes 
section describe syntax related pds schemes ul models section definition 
section discuss choices 
ideal process describe ideal process distributed threshold signatures 
note functionality care signature scheme potential verifiers able distinguish messages properly signed messages 
precisely need functionality threshold 
message signed large subset signing parties agree sign 
correctness 
message verified signed 
public verifiability 
status message verified participation signing parties view signatures attached messages keys verify signatures merely tools obtaining functionality 
cryptographic keys signatures appear ideal process 
ideal process trusted party keeps database signed messages 
initially database empty 
trusted party inserts message database asked appropriate subset signing parties 
verification message signed done simply checking message appears database 
precisely ideal process signers signature verifier parties communicate trusted party probabilistic polynomial time ideal model forger communication parties 
process parameterized threshold signature verifier ensure signed messages verified interacting signers 
signing messages security parameter addition forger signer external input input directly signing parties goal capture external information forger may auxiliary input general protocols 
interaction proceeds follows 
initially forger encoded unary 
signing parties verifier trusted party input 
trusted party initializes set signed messages 
involved parties access common variable called time unit counter denoted 
supposed capture synchrony network 
initially set adversary increment wish 

adversary invokes signers choice arbitrary values values represent messages signed 
signer gets value adversary time unit hands request sign trusted party appends note asked sign time unit output 

trusted party receives sign requests signers requests agree adds set signed messages 
addition signer asked sign receives note signed appends note output 
note formalization forces requests sign message arrive time unit 

adversary may break signer time invoking break input 
effect note compromised appended output forger learns signer input 
point adversary leaves output control adversary 
adversary leave broken node time invoking recover input 
note saying recovered appended output resumes outputting values steps 
adversary may query verifier message responds verified appends similar note output 
responds verified add output 
see section discussion detail 

interaction ends adversary halts 
output interaction concatenation outputs adversary signers verifier 
notation 
vector id sig hid sig id sig id sig id sig denotes outputs execution system adversary randomness input forger signers threshold security parameter 
adversary output id sig output signer id sig verifier output id sig denote id sig distribution id sig uniformly distributed 
role security parameter ideal model bound running time ideal model forger forger polynomial time algorithm running time bounded polynomial structure operation pds schemes turn describe structure operation pds schemes ul model 
introduce syntax necessary definition security 
structure 
pds scheme components key generation protocol gen distributed signing protocol sign verification algorithm ver distributed refresh protocol rfr 
ffl key generation protocol gen run setup phase scheme 
node security parameter encoded unary outputs public key pk share sk secret key 
phase executed adversary free environment assume protocol nodes public key 
assume loss generality implicit keys generated gen 
ffl signing protocol sign signing node public verification key pk share sk private signing key sk known invoked interacts nodes eventually outputs value oe 
hopefully oe signature verifiable public key pk 
ffl verification algorithm ver public verification key pk message alleged signature oe 
outputs binary pass fail value 
say oe valid signature respect public key pk ver oe pk pass 
ffl refresh protocol rfr signing node share sk signing key public key pk potentially state information 
nodes interact eventually outputs sk new share signing key 
operation 
operation pds scheme proceeds follows ul models 
gen sign ver rfr node pds scheme forging adversary models 
execution consists process involving signing nodes adversary signature verifier nodes auxiliary input ignore 
set phase 
nodes execute key generation protocol 
phase adversary break node interrupt communication learn communication 
signatures 
adversary model send special message sign nodes 
receipt message outputs asked sign time unit current time unit runs protocol sign input 
protocol executed ul model 
execution sign obtains valid signature respect pk line signed added output 
verification 
adversary invoke signature verifier pair oe 
runs algorithm ver oe pk verification succeeds outputs verified 
verification fails outputs see section 
stress broken 
ideal model signature verifier captures public verifiability generated signatures 
role run public verification algorithm message signature pairs 
refreshment 
refreshment phase time unit nodes run protocol rfr ul model 
node invokes rfr input pk sk gamma fresh random input 
sk sk value sk set output rfr 
sk calculated erases sk gamma lets sk replace sk protocol sign 
execution terminates adversary halts 
output party concatenation intermediate outputs point adversary halts 
global output execution concatenation outputs adversary signers verifier notation 
vector sig af hal sig af sig af sig af sig af denotes outputs execution scheme model adversary af randomness inputs forger signers security parameter 
adversary output sig af output signer sig af verifier output sig af denote sig af distribution sig af uniformly distributed 
notations ul sig uf ul sig uf defined similarly respect uf scheme security pds scheme usual security defined emulation ideal signature process 
pds deemed secure adversarial behavior carried ideal model 
definition node pds scheme secure model limited forger af exists ideal forger inputs sig af id sig secure ul model limited ul forger uf exists ideal forger inputs ul sig uf id sig notice definitions set threshold pds schemes upper bound number nodes adversary compromise time unit 
principle may sense set threshold value gamma extra generality really needed purpose 
discussion case definition requirements incorporate conditions 
imply particular real life computation verifier accept message signed signers invoked sign request 
imply nodes invoke signature protocol input nodes obtain valid signature fact real need incorporate output adversary global output care information gathered adversary computation ability forge signatures 
kept consistent general framework constructions withstand stronger requirement 
note need explicitly limit number break ins ideal model order successfully imitate real life interaction ideal forger particular break nodes broken real life interaction 
definition requires order generate signature message adversary request signers sign single time unit 
particular granularity convenient application 
principle granularity changed appropriate 
motivate choice output case verification signature fails assume case outputs failure message models 
trivial harmless adversarial behavior emulated ideal model 
adversary hands pair oe message legally signed oe valid signature ideal model output ok database signed signatures ul models reject having output case failure allow ideal model forger decide query real life model forger queried correct signature 
level provision captures inevitable weakness digital signatures relative ideal process digital signatures verifier tell difference case document signed case document signed presenter document simply failed valid signature 
different approach defining distributed signature schemes taken 
starts particular centralized signature scheme case dss scheme regards key generation signing algorithms probabilistic functions 
sure distributed key generation signing protocols threshold scheme securely evaluate corresponding functions standard definition secure multi party function evaluation 
informally guaranteed threshold scheme mimics properties centralized scheme 
approach allows discussing schemes weaker properties existential security chosen ciphertext attacks 
important case dss scheme consequently construction known existentially secure chosen message attack standard assumptions 
approach somewhat indirect nature bases specific centralized scheme explicitly require unforgeability properties 
constructing pds schemes ul model basic result starting point theorem trapdoor permutations exist exist node secure pds schemes model 
theorem proven instance general techniques 
construct signature scheme way function 
show scheme threshold assuming secure channels broadcast channel 
show turn threshold scheme proactive 
show transform scheme model encryption links 
show implement broadcast channel centralized signature schemes 
furthermore show construct practical secure pds schemes model centralized signature schemes elgamal dss rsa 
order schemes construction assume underlying centralized signature schemes existentially unforgeable chosen message attacks 
section show conditions exist node secure pds schemes ul model 
specifically show node secure secure pds scheme model transformed node secure pds scheme ul model 
addition constructed scheme properties allow authenticator built top section maintain awareness 
ingredients 
construction uses algorithms protocols ffl node pds schemes model denoted als hagen aver secure sense definition 
ffl centralized signature scheme denoted cs existentially unforgeable adaptive chosen message attack 
schemes als cs construct node pds scheme ul model denote uls security als cs prove uls secure 
informally transformation als uls uses idea layered authenticator see section 
scheme uls thought having layers top layer als running unchanged 
bottom layer nodes follow protocol message als instructs send receive addition additional steps refreshment phase 
rest section organized follow section describe tools construction 
simple protocols obtain somewhat reliable communication unauthenticated links 
section scheme uls section prove security scheme ul model 
communicating faulty links describe communication protocols construction pds ul model 
section describe protocols give intuition prove basic properties 
section describe protocols fit construction proof security 
help intuition suggestive names accept receive description describe receipt messages intuitively node receives message message delivered accepts message believes message authentic 
connectivity 
start protocol guarantees adversary disrupt links prevent messages delivered 
protocol call disperse just protocol disperse sending string node node 
node sends message forward nodes 

receiving message forward allegedly node sends message forwarding 
node marks strings received message forwarding received code disperse protocol 
phase echo described fig 

stress disperse protocol guarantee authentic messages received ensure messages re transmitted 
guarantee offers nodes path network length consisting reliable links message sent nodes disperse protocol arrives destination 
conjunction definition operational nodes definition get lemma lemma number nodes network gamma operational nodes time interval time interval receives message sends disperse protocol 
proof definition operational reliable links gamma operational non broken nodes 
exists non broken node reliable links node forward messages sends disperse protocol 
authenticity 
disperse protocol offers connectivity advantages offer authenticity 
particular adversary easily forge message breaking modifying message direct link 
obtain authenticity guarantees combine disperse protocol digital signatures 
digital signatures require node keys pair signature verification keys centralized signature scheme cs 
denote keys respectively refer local keys 
public verification key pds scheme als denote cert refer global verification key 
signature assertion public key time unit verified global verification key 
call signature certificate time unit denote cert recall network model assume nodes share global verification key 
algorithm certify cert 
compute signature oe hm wi sk 
output msg hm oe cert algorithm ver cert msg cert 
check format parse msg hm oe certi 
wrong source wrong destination wrong time reject msg 

verify certificate execute aver public key time unit cert cert 
verification fails reject msg 

verify signature execute hm ui oe 
verification fails reject msg 

verifications succeed accept msg coming certify ver cert algorithms protocol auth send cert cert sending string communication round time unit local keys global verification key cert certificate cert 
node sets msg cert invokes protocol disperse msg 

message msg received node invokes ver cert msg cert accepts ver cert accepts 
value ver cert exactly communication rounds current supposed message sent 
code auth send protocol 
protocol partial agreement cert cert node starts input value communication round time unit uses local keys global key cert certificate cert 
node node invokes auth send cert cert 

collects input values accepted step 
node accepts messages step input value marked cheater 
exists set maj nodes marked cheaters nodes maj input value denote value set denote oe maj 

certified message msg accepted step node maj node invokes disperse msg distribute msg nodes 
applies verification procedure ver cert msg cert message msg received step allegedly contains input value node accepts messages step input value marked cheater 
denote maj set nodes maj step marked cheaters step 
maj contains nodes output value outputs oe 
code protocol partial agreement keys standard way authenticate messages 
order authenticate message node node communication round time unit node computes signature hm attaches local verification key certificate 
receiving checks message right form uses global verification key cert verify signatures certificate verify signature message 
precisely algorithms certify ver cert described fig 
protocol auth send described fig 

sequel term properly certified message describe message passes verification algorithm 
assume node values keys regardless values valid 
partial agreement 
construction needs nodes agree value signed 
standard partial agreement protocol 
intuitively goal protocol ensure single value node ends value value 
protocol described fig 

property protocol needed construction proved lemma 
lemma assume execution protocol partial agreement exists set non broken nodes size pair nodes receives message sends disperse protocol 
accepts authentic messages certifies 
execution holds 
nodes start execution input value output output value 

nodes outputs value oe nodes output oe 
proof 
node certifies single input value messages nodes accept execution certifies node marks node cheater 
send input value value majority value step maj true step jsj nodes output value 
assume contrary outputs oe outputs oe 
maj maj contain nodes exists node maj maj appears maj input value maj input value step send disperse different messages certified message states input value states input assume messages sent execution received mark cheater step 
contradiction 
pds scheme ul model fix 
construct node pds scheme uls ul model centralized signature scheme cs node pds scheme model als aver 
scheme uls runs scheme als message sent protocol auth send centralized signature scheme cs 
guarantees existence large clique nodes communication authenticated reliable 
show clique sufficient scheme als remain secure time unit 
time unit scheme als certify node new keys time unit 
precisely scheme uls proceeds follows 
key generation security parameter node executes key generation protocol als obtain public key cert secret share sh executes key generation algorithm cs obtain hv 
sends nodes execute distributed signature protocol generate certificate cert public key time unit sh sh node records cert read memory stores sh cert regular memory 
recall executed system set assume nodes broken execution messages arrive unmodified destination 
protocol time unit node local keys share sh certificate cert stored regular memory 
signature verification protocol similar signature protocol als message sent time unit sender invokes auth send current keys cert send centralized verification algorithm remains unchanged aver 
refreshment protocol refreshment protocol divided parts part node generates new local keys centralized scheme cs obtains certificate new verification key second part nodes execute refreshment protocol pds scheme als 
part 
part thought place previous time unit part node local keys previous time unit authentication 
remind reader technically speaking refreshment phase belongs time units 

node runs key generation algorithm cs obtain new pair local signature verification keys 

sends nodes message public key time unit 
message sent clear authentication 
reason may trying recover break may necessary keys authenticate communication 

node receives key allegedly invokes copy partial agreement input keys time unit gamma get partial agreement gamma gamma gamma cert cert gamma notice step participates copies partial agreement node copies executed parallel 
receives value allegedly runs partial agreement value 

oe invokes signature protocol keys time unit gamma obtain signature assertion public key time unit 
signature protocol obtains valid signature assertion sends signature 
receive node valid signature respect cert assertion public key time unit signature cert sets cert oe 
case outputs alert 
part node replaces local keys gamma gamma cert gamma cert respectively 
part ii 
part thought happening current time unit nodes new keys part authentication 
previous time unit done old secret keys scheme als erased 
part nodes execute share refreshment protocol 
signature protocol message sent sender invokes auth send new keys cert send stress protocol instructs node erase memory share global signature key sh gamma local output protocol sh refreshment protocol node cert oe failed refresh share part ii outputs alert 
remarks 

definition reliable links definition require messages injected links 
scheme uls remains secure allow adversary inject messages reliable links times step part refreshment phase 
words nodes valid keys recognize discard bogus messages time injecting bogus messages harmful round refreshment phase nodes trying get new keys nodes way 
note adversary break protocol injecting bogus messages step get awareness case nodes notice obtain certificates output alert 

step refreshment phase protocol partial agreement necessary proving uls secure 
purpose allow authenticator built top uls maintain awareness see section 
proof security theorem als node secure pds scheme model cs centralized signature scheme existentially unforgeable adaptive chosen message attack resulting scheme uls node secure pds scheme ul model 
proof overview 
presenting formal proof give high level overview main technical parts 
definition prove uls secure ul model need show limited ul forger interacts uls simulated ideal forger threshold 
assumption als secure model sufficient show limited ul forger interacts uls simulated limited forger interacts als know simulated ideal forger 
proof fix arbitrary limited ul forger uf describe limited forger af interacting als satisfies inputs sig als af ul sig uls uf fact show statistical distance sides negligible 
usual define af simulation uf prove eq 
define executions messages forged adversary uf operational parties valid certificates local keys 
show executions probability weight sig als af ul sig uls uf executions negligible probability weight 
assertion follows immediately way define simulator af second part proven sequence claims alert signal security proof section 
roughly sketched 
consider partial execution upto time unit gamma ffl properties partial agreement follows operational time unit refreshment phase time unit operational nodes participate signing local public key 
ffl follows security als scheme combined fact contain forged messages refreshment phase get valid certificate local public key refreshment phase negligible probability 
ffl similarly operational node participates signing certificate node follows obtains certificate local public key uf obtain certificate key negligible probability 
ffl certificate time unit key way forge message sign respect long broken uf know corresponding secret key sign messages respect negligible probability 
conclude execution upto time unit negligible probability 
details follow 
proof proceed induction uses af construct schemes als cs succeed breaking corresponding schemes probability related probability bad executions 
forger af uf limited ul forger 
describe limited forger af simulates uf high level af executes algorithm uf black box emulating ul model network uf expects interact 
carry emulation af uses access scheme als model implements parts uls als lower layer layers constitute uls 
operation af demonstrated pictorially fig 

notations 
description refer network af access real network ul network af emulates uf refer emulated network 
similarly distinguish real communication rounds real network emulated communication round emulated network typically need rounds emulated network round real network 
nodes real network called real nodes denoted emulated network called emulated nodes denoted 
initialization 
af started security parameter number nodes encoded unary input public key cert generated access real network nodes running protocol als secret keys corresponding cert af generates keys emulated node runs copy algorithm cs obtain hv 
asks nodes af simulator uf real network uf emulated ul network operation simulator af solid areas represent upper layer uls scheme als 
grey areas represent lower layer uls 
real network signature assertion public key time unit denotes resulting signature cert signature generated model nodes execute protocol receive message sign broken 
af initializes uf giving cert execution time unit af maintains emulated node local keys cert execution 
execution af interacts real nodes black box representing uf interaction af keeps track reliable links emulated network recording messages sends receives uf way af keep track emulated nodes operational time 
describe events occur interaction af uf real nodes af reacts events disconnected broken emulated nodes 
emulated node af keeps status variable operational operational current emulated communication round disconnected operational uf ask break broken uf asked break ask leave 
emulated node moves operational disconnected af breaks corresponding real node long remains disconnected af lets broken real node execute original protocol als may occasionally change memory contents reflect acceptance messages sent real network may send messages behalf nodes real network 
reflects intuition disconnected may appear broken eyes nodes uf asks break emulated node af marks broken 
breaks real node broken provides uf contents memory including input keys cert maintains emulated uf asks change contents memory broken emulated node af corresponding changes memory real node keys maintains uf leaves emulated node af change status broken disconnected leave real node 
af leave emulated node operational 
real communication rounds 
real communication round af records messages sent non broken nodes real network 
message non broken real node sends real node af emulates execution protocol auth send emulated nodes local keys cert maintains emulated global verification key cert notice emulation protocol involve communication real network 
consists messages sent back forth af blackbox uf af executes parts emulated nodes marked broken 
emulated node marked disconnected accepts message string emulated node af modifies memory real node broken reflect acceptance message real node emulated node accepts message string emulated node marked disconnected af sends real node behalf broken real node bad event emulated node marked operational accepts message string emulated node marked operational real node send message real node communication round af outputs failure halts 
emulated signatures 
emulated node broken accepts request uf sign message af asks real node sign message real nodes execute protocol af treating real communication rounds described 
emulated refreshment phases 
require emulated refreshment phases begins refreshment phases real network part ii refreshment protocol aligned refreshment protocol 
emulated refreshment phase time unit af emulates execution part refreshment phase 
done executing procedure emulated node marked broken 
execute copy key generation algorithm cs obtain hv 

send emulated nodes 
amounts giving uf message behalf emulated node ask message delivered nodes 
really broken 
means time units emulated network starts slightly time units real network 

emulated node marked broken invoke copy protocol partial agreement input value string uf delivered behalf course string may may equal 
note emulated execution involve communication real network involves messages sent back forth af black box uf bad event emulated invocation partial agreement exist emulated operational nodes different local output values different oe af outputs failure halts 

emulated node broken local output partial agreement oe af asks real node signature assertion public key time unit 
real nodes execute protocol af treating real communication rounds described 

signature protocol real node returns valid signature value af asks uf deliver value emulated node behalf emulated node 
uf delivers emulated node valid signature assertion public key time unit af sets signature cert af sets cert oe 
process af emulates part ii refreshment phase invoking refreshment protocol treating real communication rounds described 
bad event refreshment phase exists emulated operational node cert oe af outputs failure halts 
output 
uf halts output af outputs uf halts 
bad events happens output af transcript execution point followed word failure 
analyzing af start noting af legal model adversary modifies messages sent links real network 
time simulation number nodes af breaks equals number nodes operational emulated execution ul model network uf uf limited ul forger af limited forger 
observe long bad events happens output model forger af described syntactically valid output ul model forger uf formally fix input vector rest proof 
execution support set trans als af bad events happen support set ul trans uls uf 
identify execution transcript 
proceed show af simulates uf negligible deviation 
sig als af ul sig uls uf denotes having negligible statistical distance 
prove identify set executions demonstrate facts 
fact conditioned set distributions global outputs executions identical 
execution pr trans als af pr ul trans uls uf fact probability weight executions negligible distributions 
exists negligible function pr trans als af pr ul trans uls uf 
combination facts proves eq 
completes proof theorem 
start defining executions 
definition forged messages execution uls uf ul model msg hm oe certi message uf delivers node network time unit execution allegedly node outside part refreshment phase 
say msg forged msg properly certified 
ver cert msg cert accept cert global verification key execution 
send properly certified message msg hm oe cert values msg communication round time unit broken time unit including communication round part refreshment phase time unit cert different oe 
notice scheme cert oe implies cert valid certificate definition executions execution uf ul model network 
say execution time unit ffl contain forged messages time unit ffl node operational time unit holds cert different oe 
set executions 
note execution belongs support set trans als af ul trans als af 
efficient algorithm transcript execution decides execution 
proceed proving facts need prove technical lemmas executions protocol partial agreement refreshment phases 
messages sent part refreshment protocol verified keys time unit gamma considered time unit 
intuitively mean say send msg round 
different valid signatures message may possible obtain valid signature message complicated looking formal condition 
lemma execution uls upto time unit gamma execution partial agreement upto refreshment phases time unit denote set nodes operational execution execution exists single value local output node oe 
proof show set satisfies premise lemma 
uf limited size jsj gamma nodes operational message sent disperse protocol lemma node receives message node sends 
contain forged messages upto time unit gamma includes refreshment phase time unit properly certified messages nodes receive nodes ones accept ones nodes sent 
nodes valid local keys certificates round gamma message sent node properly certified accepted nodes lemma execution uls upto time unit gamma node operational refreshment phase time unit exists set gamma nodes nodes operational refreshment phase 
invocation partial agreement regarding public key local output nodes equal public key sent 
proof recall definition operational refreshment phase time unit reliable links set gamma nodes operational refreshment phase 
arguments lemma set satisfies premise lemma 
reliable links start partial agreement local input 
lemma implies execution partial agreement local output 
lemma fact execution pr trans als af pr ul trans uls uf proof show exists bijection sim randomness trans als af randomness ul trans uls uf security parameter randomness 
trans als af ul trans uls uf sim 

trans als af ul trans uls uf sim trans als af 
randomness define sim randomness uf emulated network execution af real network randomness construction clear sim 
clear trans als af execution ul trans uls uf sim 
show trans als af trans als af ul trans uls uf sim need show af output failure execution 
bad events definition af excluded definition executions bad event ruled lemma 
lemma follows 
remains show fact 
done follows define sets executions bad bad bad corresponding types failures uls execution bad bad bad 
show probability sets negligible security parameter definition execution said bad execution type exists time unit upto time unit gamma refreshment phase time unit exists operational node cert oe 
set bad executions type denoted bad 
definition execution said bad execution second type bad execution type exists time unit upto time unit gamma 
contains forged message msg hm oe certi 
forged message local public key msg local public key obtained certificate refreshment protocol 
set bad executions second type denoted bad 
definition execution said bad execution third type bad second type exists time unit upto time unit gamma 
contains forged message msg hm oe certi 
forged message local public key obtained certificate refreshment phase 
set bad executions third type denoted bad 
claim execution support set trans als af bad bad bad 
proof execution vacuously upto time unit execution exist time unit upto 
ways execution covered definitions execution bad bad bad 
lemma show bad executions type correspond failures als nodes generate certificate local key 
assume als secure implies executions negligible probability 
formally prove lemma ffl def pr trans als af bad 
sig als af distinguished output ideal model adversary advantage ffl 
proof bad consider global output refreshment phase time unit lemma follows execution partial agreement value oe output operational nodes bad event happen 
lemma set gamma operational nodes local output partial agreement 
af ask corresponding gamma real nodes signature real nodes output request sign know corresponding real nodes obtain signature 
af corresponding emulated nodes send signature reliable links cert oe 
follows execution bad exist set gamma real nodes log request signature log message confirming signed 
execution happen ideal model regardless ideal model adversary 
show bad executions second type correspond failure als adversary generate certificate bad local key 
als secure executions negligible probability 
lemma ffl def pr trans als af bad 
exists limited forger af sig als af distinguished output ideal model adversary advantage ffl 
proof capture intuition uf get certificate wrong key forging signatures underlying model pds signature verifier pds scheme 
recall signature verifier external node runs verification algorithm pds 
scheme started global verification key cert invoked pairs oe result outputs verified oe valid signature cert outputs 
output part global output protocol particular needs simulated ideal model protocol secure 
af behaves exactly af addition queries pairs 
specifically message msg hm oe certi uf delivers emulated node af invokes verify signature cert message public key time unit 
bad msg hm oe certi forged message argument proof lemma set gamma operational nodes local output oe corresponding invocation partial agreement 
follows lemma operational node local output particular operational node local output appears forged message msg 
real nodes asked sign assertion public key time unit 
hand msg forged cert valid signature assertion output verified 
conclude bad execution second type contains message nodes output request signature signature verifier confirms signed execution occur ideal model 
lemma show bad executions third type correspond failure centralized signature scheme cs 
cs secure follows occur negligible probability 
lemma ffl def pr trans als af bad polynomial upper bound number time units executions als security parameter exists forger cf centralized signature scheme cs obtains existential forgery adaptive chosen message attack probability ffl delta 
proof cf public key scheme cs access signer corresponding signature key goal achieve existential forgery adaptive chosen message attack 
cf picks uniformly random time unit node ng 
emulates entire execution af playing role real nodes af uf difference time unit picking local keys emulated node key generation algorithm sets public key public key cf got input 
node needs sign message relative cf uses access signer get signature 
execution turns contain forged message msg hm oe certi cf outputs message signature pair hm wi oe valid pair respect cf ask signature msg 
case say forgery successful 
straightforward see simulated af sees exactly view real interaction scheme als successful forgery occur probability ffl delta 
lemmas yield corollary fact bad execution second third type negligible probability weight sig als af 
pr trans als af pr ul trans uls uf 
delta negligible function 
concludes proof theorem 
extra property scheme uls 
concluding section highlight property constructed scheme 
recall limited ul adversary uf security parameter set executions probability weight gamma distribution ul sig uls uf negligible execution set satisfies requirement broken time unit cert different oe message accepts sent time unit 
note proof theorem suffices apply requirement nodes operational time unit 
fact requirement applies non operational nodes section show awareness authenticator uls 
emulating authenticated channels short section describe prove security proactive authenticator 
seen done section little remains said 
modular way construct proactive authenticator pds scheme ul model may proceed follows 
protocol designed model nodes run communication round node instructed send message node asks nodes invoke signing protocols extended message hm ji 
signature generated nodes forward extended message accompanied generated signature addition specified nodes sign message round rejects unsigned messages outputs alert obtain required signature 
approach modular inefficient requires invocation signing protocol pds scheme message 
avoid inefficiency price breaking modularity noticing construction pds scheme ul model section provides nodes signing keys centralized signature scheme certificates corresponding verification keys 
directly authenticate messages higher layer protocol authenticator denoted starts pds scheme als hagen aver model 
protocol designed model proceeds follows 
modify adding key generation algorithm setup phase executing refreshment protocol time unit 
resulting protocol denoted als 
transform als protocol ul model exactly als transformed construct scheme uls section 
messages handled way messages 
message sent received protocol auth send 

outputs alert outputs uls copied output constructed protocol 
outputs uls kept internal copied output 
denote resulting protocol theorem 
pds scheme secure model authenticator described emulating 
proof proof identical proof theorem small repeated 
proposition authenticator aware 
proof need show long adversary limited non broken node outputs alert time unit 
show recall node cert oe outputs alert 
furthermore follows extra property scheme uls see section non broken node cert oe negligible probability 
stronger adversaries concluding briefly recall point regarding properties scheme ul adversary limited 
general guarantee adversary strong type stronger adversaries prove weaker awareness property 
specifically consider adversary limited inject messages arbitrarily links 
call type limited adversary 
notice presence limited adversary longer ensure emulation adversary send bogus public keys step part refreshment phase see section preventing nodes obtaining certificates 
happens nodes output alert 
case happens nodes case emulation go happens nodes case detect adversary limited 
acknowledgments wish mihir bellare juan garay rosario gennaro oded goldreich hugo krawczyk tal rabin moti yung helpful discussions comments 
beaver 
foundation secure interactive computing 
proceedings crypto 
mihir bellare phil rogaway 
entity authentication key distribution 
proceedings crypto pages august 
mihir bellare phil rogaway 
provably secure session key distribution node case 
proceedings stoc pages 
bellare canetti krawczyk 
modular approach design analysis authentication key exchange protocols 
stoc appear 
available theory cryptography library theory lcs mit edu march 
diffie van oorschot weiner 
authentication authenticated key exchanges 
designs codes cryptography pages 
bird gopal herzberg janson kutten molva yung 
systematic design family attack resistant authentication protocols 
ieee journal selected areas communications june 
special issue secure communications 
preliminary version crypto 
ben goldwasser wigderson 
completeness theorems non cryptographic fault tolerant distributed computation 
proceedings th stoc pp 

blake wilson menezes entity authentication authenticated key transport protocols employing asymmetric techniques proceedings security protocols workshop 
blake wilson johnson menezes key exchange protocols security analysis proceedings sixth ima international conference cryptography coding 
canetti 
modular composition secure multiparty protocols 
manuscript 
canetti herzberg 
maintaining security presence transient faults 
proceedings crypto 
canetti feige goldreich naor adaptively secure computation th stoc 
fuller version mit lcs tr 
canetti gennaro herzberg naor proactive security long term protection break ins cryptobytes vol 

dolev strong authenticated algorithms byzantine agreement 
siam computing pp 
feldman micali 
optimal algorithms byzantine agreement 
proceedings th annual acm symposium theory computing pp 

frankel gemmell mackenzie yung 
optimal resilience proactive publickey cryptosystems 
th annual symposium foundations computer science pages 
ieee 
frankel gemmell mackenzie yung proactive rsa 
proceedings crypto 
gemmell 
threshold cryptography 
cryptobytes winter pages 
gennaro jarecki krawczyk rabin 
robust threshold dss signatures 
proceedings eurocrypt 
goldwasser micali rivest 
digital signature scheme secure adaptive chosen message attacks 
siam computing april 
goldreich micali wigderson 
play mental game 
proceedings th stoc new york city pages 
herzberg jarecki krawczyk yung 
proactive public key signature systems 
proceedings th acm conference computer communications security appear 
herzberg jarecki krawczyk yung 
proactive secret sharing cope perpetual leakage 
proceedings crypto 
krawczyk 
skeme versatile secure key exchange mechanism internet 
proceedings ieee symposium network distributed system security 
lamport shostak pease 
byzantine generals problems 
acm trans 
programming languages systems pp 

lynch 
distributed algorithms 
morgan kaufmann publishers 
micali rogaway 
secure computation 
proceedings crypto 
ostrovsky yung 
withstand mobile virus attacks 
proceedings th annual acm symposium principles distributed computing montreal quebec canada pages 
pease shostak lamport 
reaching agreements faults 
journal acm pp 
rabin proactive rsa easy 
manuscript 
rabin ben 
verifiable secret sharing multiparty protocols honest majority 
st stoc pp 


way functions necessary sufficient secure signatures 
nd stoc pages 

