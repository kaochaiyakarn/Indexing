metis unstructured graph partitioning sparse matrix ordering system version george karypis vipin kumar university minnesota department computer science minneapolis mn karypis kumar cs umn edu august metis tis metis wisdom 
metis 
zeus mother athena 
wisdom knowledge 
graph partitioning extensive applications areas including scientific computing vlsi design task scheduling 
problem partition vertices graph roughly equal parts number edges connecting vertices different parts minimized 
example solution sparse system linear equations ax iterative methods parallel computer gives rise graph partitioning problem 
key step iteration methods multiplication sparse matrix dense vector 
partitioning graph corresponding matrix significantly reduces amount communication required step 
parallel direct methods solve sparse system equations graph partitioning algorithm compute fill reducing ordering lead high degree concurrency factorization phase 
multiple minimum degree ordering exclusively serial direct methods suitable parallel direct methods provides little concurrency parallel factorization phase 
metis set programs implement various algorithms described :10.1.1.106.4101
advantages metis compared similar packages provides high quality partitions 
partitions produced metis consistently better produced spectral partitioning algorithms better produced chaco multilevel 
extremely fast 
experiments wide range graphs multilevel recursive bisection algorithms metis copyrighted university minnesota 
supported ist army research office contract da daah army high performance computing research center auspices department army army research laboratory cooperative agreement number daah contract number daah content necessarily reflect position policy government official endorsement inferred 
access computing facilities provided minnesota supercomputer institute cray research pittsburgh 
related papers available www url www cs umn edu karypis implemented metis times faster multilevel spectral bisection times faster chaco multilevel 
furthermore multilevel way partitioning algorithms implemented metis times faster multilevel spectral bisection times faster chaco multilevel 
graphs half vertices partitioned parts minute scientific workstations 
run time metis comparable smaller run time geometric partitioning algorithms produce worse partitions 
provides low fill orderings 
orderings produced metis significantly better produced multiple minimum degree particularly large finite element graphs 
furthermore multiple minimum degree elimination trees produced metis suited parallel direct factorization 
rest organized follows section briefly describes various ideas algorithms implemented metis 
section describes user interface metis graph partitioning sparse matrix ordering packages 
sections describe formats input output files metis 
section describes stand library implements various algorithms implemented metis 
section describes system requirements metis package 
appendix describes compares various graph partitioning algorithms extensively 
multilevel graph partition basic idea multilevel graph partition algorithms implemented metis simple 
graph coarsened vertices bisection smaller graph computed partition projected back original graph finer graph periodically refining partition 
finer graph degrees freedom refinements usually decrease edge cut 
process graphically illustrated 
rest section briefly describe various phases multilevel algorithm 
reader refer details 
coarsening phase coarsening phase sequence smaller graphs constructed original graph 
graph constructed finding maximal matching collapsing vertices incident edge matching 
process vertices collapsed matching graph set edges incident vertex 
vertices incident edge matching simply copied vertices collapsed form vertex weight vertex set equal sum weights vertices edges incident set equal union edges incident minus edge 
edge incident weight edge set equal sum weights edges 
successive coarsening levels weight vertices edges increases 
maximal matchings computed different ways 
method compute matching greatly affects quality bisection time required uncoarsening phase 
metis implements different matching schemes 
briefly describe matching schemes implemented metis 
information schemes 
scheme called random matching rm computes maximal matching randomized algorithm 
rm scheme works follows 
vertices graph visited random order 
vertex matched unmatched adjacent vertex randomly selected edge included matching 
unmatched adjacent vertex vertex remains unmatched 
second scheme call heavy edge matching hem computes matching weight edges high 
heavy edge matching computed randomized algorithm similar rm 
vertices visited random order 
randomly matching vertex adjacent unmatched vertices hem matches unmatched vertex connected heavier edge 
result hem scheme reduces sum weights edges coarser graph larger amount rm 
projected partition refined partition coarsening phase uncoarsening phase initial partitioning phase multilevel graph bisection various phases multilevel graph bisection 
coarsening phase size graph successively decreased initial partitioning phase bisection smaller graph computed uncoarsening phase bisection successively refined projected larger graphs 
uncoarsening phase light lines indicate projected partitions dark lines indicate partitions produced refinement 
experimentally evaluated rm hem matching schemes 
hem scheme produces consistently better results rm amount time spent refinement rm 
partitioning phase second phase multilevel algorithm compute minimum edge cut bisection coarse graph part contains roughly half vertex weight original graph 
coarsening weights vertices edges coarser graph set reflect weights vertices edges finer graph contains sufficient information intelligently enforce balanced partition minimum edge cut requirements 
partition obtained various algorithms spectral bisection geometric bisection coordinates available combinatorial methods 
size coarser graph small step takes small amount 
metis implements different schemes partitioning coarsest graph evaluated 
algorithms graph growing heuristics spectral bisection 
algorithms produce fairly similar partitions graph growing heuristics doing usually better 
uncoarsening phase uncoarsening phase partition coarsest graph projected back original graph going graphs 
vertex contains distinct subset vertices projecting partition done simply assigning vertices part vertex belongs 
furthermore partition local minima projected partition may local minima 
finer degrees freedom improve partition decrease edge cut 
may possible improve projected partition local refinement heuristics 
reason projecting partition partition refinement algorithm 
basic purpose partition refinement algorithm select subsets vertices part swapped resulting partition smaller edge cut 
specifically parts bisection refinement algorithm selects bisection smaller edge cut 
class algorithms tend produce results kernighan lin kl partition algorithm 
kl algorithm iterative nature 
starts initial partition iteration finds subsets properties 
subsets exist moves part partition iteration 
algorithm continues repeating entire process 
find subsets algorithm terminates partition local minima improvement kl algorithm 
kl algorithm effective finding locally optimal partitions starts fairly initial partition 
projected partition partition kl substantially decreases edge cut small number iterations 
kl algorithm implemented metis similar described 
kl algorithm computes vertex quantity called gain decrease increase edge cut moved part 
algorithm proceeds repeatedly selecting vertex largest gain larger part moves part 
moving marked considered iteration gains vertices adjacent updated reflect change partition 
algorithm terminates edge cut decrease number vertex moves 
vertex moves decrease edge cut may increase number moves undone 
kl algorithm described may require relatively large number iterations converges 
variant performs single iteration 
scheme called greedy refinement gr significantly faster kl produced partitions slightly worse kl 
furthermore implemented variation algorithm allows vertices boundary bisection swapped 
restrictive experiments show boundary refinement performs kl requiring significantly time 
nodes swapped kl algorithm boundary cut defined vertices edges cut partition 
refer algorithm boundary kernighan lin 
usage metis package metis provides different interfaces 
interface called simple interface users want metis partition order sparse matrix getting details underlying algorithms implemented metis 
second interface called advanced interface users want experiment different parameters algorithm 
simple interface provided programs pmetis 
programs pmetis implement way partitioning program performs ordering 
pmetis invoked providing arguments command line 
argument name file stores graph second argument number partitions desired number partitions allowed 
graph file stored format described section 
successful execution pmetis display statistics regarding number edges cut amount time taken perform partition stores computed partition file described section 
shows output pmetis shows output sample graph 
figures see pmetis initially print information graph name size number vertices edges default parameters multilevel algorithm 
print edge cut way partition 
power pmetis prints edge cuts intermediate partitions 
addition edge cut pmetis print partition balance 
way partition graph vertices size largest part produced way partitioning algorithm 
partition balance defined km essentially load imbalance induced non equal partitions 
pmetis produces partitions perfectly balanced bisection level small load imbalance may result due log levels recursive bisection 
general load imbalance 
produces partitions perfectly balanced algorithms limits load imbalance 
pmetis show time taken various phases algorithm 
times seconds 
particular example way partition took pmetis total seconds seconds taken partitioning algorithm took total seconds taken partitioning algorithm 
invoked providing single argument name file stores graph reordered 
successful execution displays statistics regarding fill produced reordering amount time taken perform partition 
stores computed permutation file described section 
shows output sample graph 
finding fill reducing ordering symbolically factors matrix determine number nonzeros required store symbolically factored matrix number operations opc required directly factor matrix cholesky factorization 
note advanced simple interfaces implemented simple executable 
program selects interface choose name executable invoke metis 
name executables modified user 
advanced interface advanced interface metis provided allow experienced user experiment different algorithms implemented various phases multilevel graph partitioning algorithm 
detailed information meaning various algorithms effect quality produced partitions 
advanced interface metis provided program metis requires command line arguments 
syntax metis follows metis mtype rtype options meaning various parameters follows name file stores graph format described section 
number parts graph needs partitioned 
greater value ignored metis order number vertices coarsened coarsening phase 
default value pmetis vertices value 
mtype type matching coarsening phase 
mtype integer values meaning table mtype value abbrev 
matching scheme pmetis rm random hem heavy edge lem light edge hcm heavy clique hem modified heavy edge srm sorted random sorted heavy edge sorted modified heavy edge schemes main matching schemes described detail :10.1.1.106.4101
matching schemes variations rm hem hem 
schemes proceeding find matching rm hem hem sort vertices non decreasing vertex degree order find matchings 
experiments shown sorting variants tend find larger matchings non sorting counterparts 
sorting matching schemes metis performs levels coarsening non sorting variants switches sorting variants 
save time sorting relatively expensive 
matching scheme table shows particular matching scheme applicable operations implemented metis 
prompt pmetis brack graph metis copyright university minnesota graph information graph brack graph size parts cto options rec partition recursive partitioning 
edge cuts way way way way way way way way balance timing information multilevel coarsening initial partition uncoarsening splitting total output pmetis graph brack graph way partition 
prompt brack graph metis copyright university minnesota graph information graph brack graph size parts cto options bgr partition way partitioning 
way edge cut balance timing information multilevel coarsening initial partition uncoarsening total output graph brack graph way partition 
prompt brack graph metis copyright university minnesota graph information graph brack graph size parts cto options gggp order ordering 
symbolic factorization 
nonzeros opc timing information multilevel coarsening initial partition uncoarsening splitting total output graph brack graph 
indicate matching scheme supported indicates particular matching scheme requires lot time produce results 
matching schemes hem hcm hem perform consistently better rm lem 
particular analysis shows hem significantly better rm especially finite element graphs 
hand lem matching scheme significantly increases average degree coarser graphs feature helps certain refinement algorithms perform quite 
lem coarsening time spent coarsening time spent uncoarsening fairly high 
matching scheme pmetis 
rtype type refinement policy uncoarsening phase 
rtype integer values meaning follows rtype value abbrev 
refinement policy pmetis gr greedy klr kernighan lin combination gr klr bgr boundary greedy boundary kernighan lin combination bgr nr refinement refinement scheme table shows particular refinement scheme applicable operations implemented metis 
indicate refinement scheme supported indicates particular refinement scheme requires lot time produce results 
indicates refinement scheme supported 
boundary refinement algorithms perform better non boundary counterparts 
furthermore boundary refinement algorithms require significantly time 
bgr fastest refinement algorithm tends perform worse 
provide refinement roughly require amount time 
refinement scheme pmetis 
experiments show performs better graph partitioned parts parts 
hand tends perform slightly better small number partitions 
difference quality small 
may want experiment see performs better graphs 
bgr refinement scheme 
experiments show graphs particularly correspond finite element meshes bgr performs significantly better require time 
type bisection algorithm coarsest graph 
integer values meaning follows value abbrev 
bisection algorithm ggp graph growing partition gggp greedy graph growing partition eig spectral bisection graph growing followed boundary kernighan lin ggp fastest partitioning algorithm tends perform worse gggp 
eig tends perform worse gggp requires time particularly coarsest graph quite large 
gggp require roughly amount time tend perform quite similarly 
may want experiment gggp see performs better graphs 
partitioning scheme pmetis gggp partitioning scheme 
parameter 
type operation performed metis 
integer values meaning follows value operation performed graph partitioning recursive bisection graph partitioning way partitioning matrix ordering options request metis perform certain additional operations write partition permutation files print timing information print debugging information 
value options computed sum codes associated option metis 
various options values code option requested pmetis write resulting partition permutation vectors file print timing statistics various phases algorithm show information coarsening phase show information initial partition phase show information refinement phase show size partitions show size vertex separators level show balance subtree subcube mapping elimination tree show information way refinement phase example want partition written file display timing information value options 
value addition shows size separators balance ordering 
options marked operations performed metis 
means information printed meaningful 
note options may generate lot output 
caution 
shows sample output advanced interface metis 
example metis obtain ordering graph brack graph hem coarsening refinement gggp bisecting coarsest graph requesting times degree balance resulting elimination tree displayed 
degree balance computed upper bound efficiency parallel algorithm uses subtree subcube mapping assuming communication cost zero 
instance balance factor processors indicates due load imbalance parallel cholesky factorization algorithm processors upper bound efficiency 
second example metis obtain way partition brack graph hcm coarsening bgr refinement ggp bisecting coarsest graph requesting timing information 
format graph input file primary input metis graph partitioned ordered 
graph stored file supplied metis command line parameters 
format graph file similar format chaco graph partitioning package 
graph vertices edges stored plain text file contains lines 
line contains information size type graph remaining lines contain information vertex line starts comment line skipped 
line contains integers 
integer number vertices second number edges third integer fmt contains information type graph 
particular depending value fmt graph weights edges vertices 
case unweighted vertices edges weight fmt omitted 
line remaining lines store adjacency lists vertex line vertex 
particular ith line excluding comment lines contains adjacency list st vertex 
note numbering starts done 
simplest format graph weight vertices weight edges 
format illustrated 
note optional fmt parameter required case 
cases edges different weights 
accommodated shown 
adjacency list vertex contains addition vertices connected weight edges 
vertices adjacent graph file contains numbers pair numbers stores vertex connected weight edge 
note edge weights integer quantities 
furthermore note fmt parameter equal indicating fact weights edges 
addition having weights edges weights vertices allowed illustrated 
case value fmt equal line graph file stores weight vertex weighted adjacency list 
case edge weights vertex weights integer quantities 
note format graph file accepted metis subset accepted chaco 
metis support graph files adjacency lists successive lines correspond adjacency lists successive vertices 
format output files output metis partition permutation file depending metis graph partitioning sparse matrix ordering 
partition file graph vertices consists lines single number line 
ith line file contains partition number ith vertex belongs 
partition numbers start partitions assigned hypercube fashion illustrated 
foo graph name file storing graph partition way partition stored file named foo graph part 
permutation file graph vertices consists lines single number line 
ith line permutation file contains new order ith vertex graph 
matrix nonzero elements correspond graph permutation vector produced metis 
row column mapped row column reordered matrix foo graph name file storing graph fill reducing permutation stored file named foo graph perm 
metis stand library interface various algorithms implemented metis directly accessed fortran program stand library 
provides routines user call invoke major algorithms prompt metis brack graph metis copyright university minnesota graph information graph brack graph size parts cto options hem gggp order ordering 
symbolic factorization 
nonzeros opc balance pe pe pe pe pe pe pe pe timing information multilevel coarsening initial partition uncoarsening refinement initialize iterate wrap projection splitting total prompt metis brack graph metis copyright university minnesota graph information graph brack graph size parts cto options hcm bgr ggp rec partition recursive partitioning 
way edge cut balance timing information multilevel coarsening initial partition uncoarsening refinement initialize iterate wrap projection balancing splitting total output metis graph brack graph ordering way partition graph file weighted graph graph file unweighted graph weights edges weights vertices edges weighted graph graph file storage format various type graphs 
number partitions way partition 
implemented metis pmetis 
input routines adjacency structure graph weights vertices edges 
particular graph vertices edges represented arrays 
arrays 
arrays store adjacency structure graph arrays store weights vertices edges respectively 
graph unweighted arrays null 
adjacency structure graph stored follows 
assuming vertex numbering starts style adjacency list vertex stored section array including 
graph weights edges weight edge stored graph weights vertices stores weight vertex allows vertex numbering start fortran style 
case assumed arrays passed fortran program 
allocates memory requires dynamically 
advantage user provide workspace memory routines abort 
note routines modify arrays store graph private copy 
calling sequence routines provides meaning various parameters follows pmetis int int int int int int int int options int numbering int int partition int int int int int int int int options int numbering int int partition int int int int options int numbering int perm int parameters number vertices graph adjacency structure graph 
information weights vertices edges 
indicate graph weighted 
take values weights null weights edges null weights vertices null weights vertices edges 
number parts partition graph 
options array integers pass parameters various phases algorithm 
options default parameters simple interface metis 
options remaining elements options interpreted follows see section allowable values 
options number vertices coarsen options matching type mtype options initial partitioning algorithm options refinement type rtype case options unused 
numbering numbering style numbering assumed starts numbering fortran style numbering assumed starts 
successful completion variable stores edge cut partition 
partition vector size successful completion stores partition vector graph 
perm vectors size successful completion store fill reducing permutation inverse permutation 
note inverse permutation vector vector described section 
depending value numbering permutation vectors start 
examples interface provided examples directory metis distribution 
system requirements contact information distribution metis contains number files total lines code 
written entirely ansi portable unix systems ansi compiler gnu compiler 
extensively tested aix sunos solaris irix 
instructions build install metis file install distribution 
metis minimizes amount memory requires dynamically allocating memory needs 
hard estimate exact amount memory required metis 
graphs edges amount memory required usually words 
instance finite element mesh vertices require mbytes memory similar mesh vertices require mbytes memory 
metis contains known bugs mean bugs fixed 
find problems please send email karypis cs umn edu brief description problem 
updates metis available www www cs umn edu karypis metis metis html 
stephen barnard horst simon 
fast multilevel implementation recursive spectral bisection partitioning unstructured problems 
proceedings sixth siam conference parallel processing scientific computing pages 
earl barnes 
algorithm partitioning nodes graph 
siam algebraic discrete methods december 
bui jones 
heuristic reducing fill sparse matrix factorization 
th siam conf 
parallel processing scientific computing pages 
bui chaudhuri leighton sipser 
graph bisection algorithms average case behavior 
combinatorica 
tony chan john gilbert shang hua teng 
geometric spectral partitioning draft 
technical report preparation 
chung cheng yen wei 
improved way partitioning algorithm stable performance 
ieee transactions computer aided design december 
fiduccia mattheyses 
linear time heuristic improving network partitions 
proc 
th ieee design automation conference pages 
steger 
finding clusters vlsi circuits 
proceedings ieee international conference computer aided design pages 
george 
nested dissection regular finite element mesh 
siam journal numerical 
george 
liu 
computer solution large sparse positive definite systems 
prentice hall englewood cliffs nj 
john gilbert gary miller shang hua teng 
geometric mesh partitioning implementation experiments 
proceedings international parallel processing symposium 
saad 
heuristic algorithms automatic graph partitioning 
technical report department computer science university minnesota minneapolis 
gupta george karypis vipin kumar 
highly scalable parallel algorithms sparse matrix factorization 
technical report department computer science university minnesota minneapolis mn 
submitted publication ieee transactions parallel distributed computing 
available www url www cs umn edu karypis papers sparse cholesky ps 
lars hagen andrew kahng 
fast spectral methods ratio cut partitioning clustering 
proceedings ieee international conference computer aided design pages 
lars hagen andrew kahng 
new approach effective circuit clustering 
proceedings ieee international conference computer aided design pages 
heath raghavan 
cartesian nested dissection algorithm 
technical report uiucdcs department computer science university illinois urbana il 
appear siam journal matrix analysis applications 
heath raghavan 
cartesian parallel nested dissection algorithm 
technical report department computer science university illinois urbana il 
appear siam journal matrix analysis applications 
bruce hendrickson leland 
improved spectral graph partitioning algorithm mapping parallel computations 
technical report sand sandia national laboratories 
bruce hendrickson leland 
chaco user guide version 
technical report sand sandia national laboratories 
bruce hendrickson leland 
multilevel algorithm partitioning graphs 
technical report sand sandia national laboratories 
karypis kumar 
analysis multilevel graph partitioning 
technical report tr department computer science university minnesota 
available www url www cs umn edu karypis papers analysis ps 
karypis kumar 
fast high quality multilevel scheme partitioning irregular graphs 
technical report tr department computer science university minnesota 
available www url www cs umn edu karypis papers serial ps 
short version appears intl 
conf 
parallel processing 
karypis kumar 
multilevel way partitioning scheme irregular graphs 
technical report tr xxx department computer science university minnesota 
available www url www cs umn edu karypis papers ps 
kernighan lin 
efficient heuristic procedure partitioning graphs 
bell system technical journal 
vipin kumar gupta george karypis 
parallel computing design analysis algorithms 
benjamin cummings publishing redwood city ca 

liu 
modification minimum degree algorithm multiple elimination 
acm transactions mathematical software 
gary miller shang hua teng thurston stephen vavasis 
automatic mesh partitioning 
george john gilbert 
liu editors sparse matrix computations graph theory issues algorithms 
ima workshop volume 
springer verlag new york ny 
gary miller shang hua teng stephen vavasis 
unified geometric approach graph separators 
proceedings st annual symposium foundations computer science pages 

solving finite element equations concurrent computers 
editor american soc 
mech 
eng pages 
mansour choudhary fox 
graph contraction physical optimization methods quality cost tradeoff mapping data parallel computers 
international conference supercomputing 
alex pothen simon lie wang stephen bernard 
fast implementation spectral nested dissection 
supercomputing proceedings pages 
alex pothen horst simon kang pu liou 
partitioning sparse matrices eigenvectors graphs 
siam journal matrix analysis applications 
raghavan 
plane separators 
technical report uiucdcs department computer science university illinois urbana il february 
characterization different graph partitioning schemes graph np complete 
algorithms developed find reasonably partition 
spectral partitioning methods known produce partitions wide class problems quite extensively 
methods expensive require computation eigenvector corresponding second smallest eigenvalue fiedler vector 
execution spectral methods speeded computation fiedler vector done multilevel algorithm 
multilevel spectral bisection algorithm msb usually manages speedup spectral partitioning methods order magnitude loss quality edge cut 
msb take large amount time 
particular parallel direct solvers time computing ordering msb orders magnitude higher time taken parallel factorization algorithm ordering time dominate time solve problem 
class graph partitioning techniques uses geometric information graph find partition 
geometric partitioning algorithms tend fast yield partitions worse obtained spectral methods 
prominent scheme algorithm described 
algorithm produces partitions provably bounds exist special classes graphs includes graphs arising finite element applications 
due randomized nature algorithms multiple trials required obtain solutions comparable quality spectral methods 
multiple trials increase time runtime substantially lower time required spectral methods 
geometric graph partitioning algorithms applicable coordinates available vertices graph 
problem areas linear programming vlsi geometry associated graph 
algorithm proposed compute coordinates graph vertices spectral methods 
methods expensive dominate time taken graph partitioning algorithm 
class graph partitioning algorithms reduce size graph coarsen graph collapsing vertices edges partition smaller graph construct partition original graph 
called multilevel graph 
researchers investigated multilevel schemes primarily decrease partitioning time cost somewhat worse partition quality 
number multilevel algorithms proposed refine partition uncoarsening phase 
schemes tend give partitions reasonable cost 
particular showed multilevel schemes provide better partitions spectral methods lower cost variety graphs arising various domains including finite element methods linear programming vlsi transportation 
investigated effectiveness different choices phases coarsening partition coarsest graph refinement 
particular new coarsening heuristic called heavy edge heuristic size partition coarse graph small factor size final partition obtained multilevel refinement 
new scheme refining uncoarsening faster kernighan lin refinement 
experiments show scheme consistently produces partitions better produced spectral partitioning schemes substantially smaller timer 
graph partitioning scheme compute fill reducing orderings sparse matrices 
surprisingly scheme substantially outperforms multiple minimum degree algorithm commonly method computing fill reducing orderings sparse matrix 
various graph partitioning schemes developed differ widely edge cut quality produced run time degree parallelism applicability certain kind graphs 
clear scheme better scenarios 
table show different variations spectral partitioning multilevel partitioning scheme described implemented metis nested dissection kernighan lin partition coordinate nested dissection cnd variations inertial partition variant geometric partitioning 
multilevel partitioning kernighan lin inertial inertial kl number trials needs coordinates geometric partitioning degree parallelism quality local view global view nested dissection coordinate nested dissection spectral bisection kl run time geometric partitioning kl multilevel spectral bisection spectral bisection table characteristics various graph partitioning algorithms 
table graph shows number characteristics 
column shows number trials performed partitioning algorithm 
example kernighan lin different trials performed starting random partition graph 
trial different run partitioning algorithm partition determined best multiple trials 
see table algorithms require single trial multiple trials give partition algorithm deterministic single trial gives results case multilevel graph partitioning 
schemes kernighan lin geometric partitioning different trials yield significantly different edge cuts schemes usually require multiple trials order produce quality partitions 
multiple trials show case trials quality saturates trials run time large 
second column shows partitioning algorithm requires coordinates vertices graph 
algorithms cnd inertial coordinate information available 
require set vertices edges connecting 
third column table shows relative quality partitions produced various schemes 
additional circle corresponds roughly improvement edge cut 
edge cut quality cnd serves base shown circle 
schemes circles quality find partitions roughly better cnd 
column shows quality partitions produced multilevel graph partitioning algorithm multilevel spectral bisection kernighan lin 
quality geometric partitioning kernighan lin refinement equally trials performed quality schemes worse various degrees 
note kernighan lin partitioning geometric partitioning quality improves number trials increases 
reason differences quality various schemes understood consider degree quality sum quantities refer local view global view 
graph partitioning algorithm local view graph able localized refinement 
definition graph partitioning algorithms various stages execution variations kernighan lin partitioning algorithm possess local view graph partitioning algorithms 
global view refers extent graph partitioning algorithm takes account structure graph 
instance spectral bisection algorithms take account global information graph minimizing edge cut continues approximation discrete problem 
hand schemes single trial kernighan lin utilize graph structural information starts random bisection 
schemes require multiple trials improve amount global graph structure exploit number trials increases 
note sum circles global local view columns equal number circles quality various algorithms 
global view multilevel graph partitioning highest schemes 
multilevel graph partitioning captures global graph structure different levels 
captures global structure coarsening second captures global structure initial graph partitioning performing multiple trials 
sixth column table shows relative time required different graph partitioning schemes 
cnd inertial geometric partitioning trial require relatively small amount time 
show run time schemes square 
additional square corresponds roughly factor increase run time 
see spectral graph partition schemes require orders magnitude time faster schemes 
quality partitions produced faster schemes relatively poor 
quality geometric partitioning scheme improved increasing number trials kernighan lin algorithm significantly increase run time scheme 
hand multilevel graph partitioning requires moderate amount time produces partitions high quality 
extrapolation results shown geometric partitioning trials default geometric produces partitions comparable multilevel spectral bisection kernighan lin refinement 

