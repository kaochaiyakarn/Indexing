casl semantics tools till mossakowski department computer science bremen institute safe systems university bremen 
email till informatik uni bremen de 
casl common algebraic specification language developed language subsumes previous algebraic specification frameworks provides tool interoperability 
casl complex language complete formal semantics 
challenge build tools casl 
discuss bremen hol casl system provides parsing static checking conversion latex theorem proving casl specifications 
tool construction manageable followed guidelines re existing tools interoperability tools developed different sites construction generic tools languages 
describe structure experiences tool discuss guidelines practice 
past decades large number algebraic specification languages developed 
unfortunately languages diversity basic algebraic specification concepts 
presence similar specification languages common framework hindered dissemination application research results algebraic specification 
particular difficult produce educational material re tools get algebraic methods adopted industry 
initiative cofi design common framework algebraic specification development started 
goal cofi get common agreement algebraic specification community basic concepts provide family specification languages different levels development methodology tool support 
family specification languages comprises central common language called casl various restrictions casl various extensions casl facilities particular programming paradigms 
definition casl sublanguages finished 
complete formal semantics casl developed parallel design language development semantics important feedback language design 
cofi pronounced coffee 
casl acronym cofi algebraic axiomatic specification language pronounced castle 
design semantics casl finished essential tool support 
tools essential goal cofi get casl accepted academic communities short run long run industry 
holds stronger casl language formal semantics people believe language practice best semantics win 
casl designed goal subsume previous frameworks powerful quite complex language 
complexity harder build tools covering language 
show possible build tools complex language strong semantics reasonable time 
order achieve followed guidelines possible re existing tools building new ones 
build tools way tools developed different sites integrated site develop tools 
tools generic possible 
casl central language family languages tedious re implement things language separately 
guidelines important non commercial environment cofi initiative limited wo man power available collaborative effort essential 
explicit goal design casl provide common language order achieve better interoperability existing tools 
discuss guidelines reporting practice difficulties arise 
organized follows section gives brief overview casl semantics 
section explains general architecture bremen hol casl tool 
section tool interoperability common interchange format discussed 
section describes problems parsing casl mixfix syntax 
section recalls encoding casl higher order logic section reports practical experiences encoding create interface casl isabelle hol 
section describes way static analysis casl structured specifications independent underlying logic gives generic tool re different logics 
section difficulties encoding casl structured specifications isabelle discussed 
section describes user interfaces hol casl 
section contains directions 
considerably extends begun 
casl semantics casl specification language formal development verification software 
covers level requirement specifications close informal requirements design specifications close implemented programs 
casl provides constructs writing basic specifications declarations definitions axioms structured specifications built smaller specifications modular way architectural specifications prescribing architecture implementation specification libraries distributed internet 
basic casl specifications consist declarations axioms representing theories order logic predicates total partial functions subsorts allowed 
predicate function symbols may overloaded 
datatype declarations allow shortly describe usual datatypes occurring programming languages 
structured specifications allow rename hide parts specifications unite extend name specifications 
generic specifications views allow particular parts specification specification reusable different context 
architectural specifications allow talk implementation units composition implementation larger specification vice versa decomposition implementation task smaller sub tasks 
structured architectural specifications libraries referred casl large basic specifications referred casl small 
number rules static semantics model semantics altogether basic specifications structured specifications architectural specifications libraries altogether fig 

complexity casl semantics terms number rules casl language summary clearly distinguishes mathematical concepts underlying language language constructs 
possible definition semantics closely follows language summary 
complexity semantics casl shown fig 

semantics follows natural semantics style rules static semantics implemented static semantic checker model semantics implemented theorem proving tools 
formatted casl text casl text latex system parser aterms aterms fol hol aterms isabelle hol prover fig 

architecture hol casl system tool architecture bremen hol casl system consists parts shown fig 

parser checks syntactic correctness specification casl text casl grammar produces syntax tree coded aterms 
static checker checks static semantic correctness static semantics produces global environment coded aterms associates specification names specification specific information signature 
formatter allows pretty print casl specifications input ascii format package peter mosses 
encoding bridge casl higher order logic fol hol 
throws subsorting partiality encoding allows re existing theorem proving tools term rewriting engines casl 
typical applications theorem prover context casl checking model semantic correctness model semantics discarding proof obligations generated static semantics 
validate intended consequences added specification annotation 
allows check consistency informal requirements 
prove correctness development step refinement tool interoperability quite number existing specifications languages tools 
casl designed goal providing common language better tool interoperability 
reflected having common interchange format casl tools aterm format 
aterms easy handle format libraries languages java ml available 
low level tool format data exchange casl tools 
format formats designed format syntax trees format global environment containing static semantic information 
providing conversions aterms intermediate points tool architecture bremen hol casl system front back combination tools 
combined back amsterdam casl parser front theorem proving tools elan pvs isabelle see section 
see cofi tools group home page 
parsing static semantic analysis apart having relatively complex grammar casl features cause difficulties parsing static analysis 
casl syntax allows user defined mixfix syntax 
casl allows mutually recursive subsort definitions causing loops naive subsorting analysis 
casl allows overloading formulas unique overload resolution semantical equivalence 
concerning mixfix syntax separate parsing steps pass parsing done standard technology grammar provided casl summary 
syntax tree produced formulas terms parts specifications may contain mixfix symbols remain unparsed textual form 
mixfix grouping analysis done phase static semantic analysis collected operation predicate symbols mixfix symbols 
casl grammar extended dynamically mixfix declarations formulas terms parsed generic isabelle parser uses known cocke younger kasami algorithm context free recognition 
grammar parameterised algorithm complexity quite acceptable formulas terms casl specifications long slow parse casl specifications approach 
having done parsing terms formulas resulting parse trees selected precedence correct respect user specified precedence relations 
parse tree remains corresponding term formula ambiguous possible output user 
obtain concise output pretty printed forms parse trees shown local places differ 
definition precedence correctness follows generalized casl pre order precedences uses number precedences 
concerning static semantic analysis treatment subsorts overload resolution needs careful algorithmic design order run exponential time trap 
details worked 
encoding casl hol section briefly recall encoding casl hol level casl basic specifications encoding higher order logic proceeds steps 
casl logic subsorted partial order logic sort generation constraints subpcfol translated subsorted order logic sort generation constraints encoding partiality error elements living supersort 

subsorted order logic sort generation constraints translated order logic sort generation constraints encoding subsorting injections built casl semantics 

order logic sort generation constraints translated higher order logic hol expressing sort generation constraints induction axioms 
encodings translations syntax modeltheoretic counterpart provides implicit soundness completeness proof re hol theorem provers theorem proving casl logic subpcfol 
known borrowing technique cerioli meseguer allows borrow theorem provers different logics 
interface isabelle hol encoding described previous section built interface casl isabelle hol 
chosen isabelle small core guaranteeing correctness 
furthermore years experience mathematical textbooks verified isabelle isabelle generic quite number logics possible define logic isabelle 
despite genericity isabelle refrained building casl logic directly isabelle violate guideline re existing tools possible set new proof rules instantiate isabelle simplifier rewriting engine tableau prover scratch 
reuse isabelle logic hol sophisticated support available help encoding described section 
formally institution representations sense encoding clear semantical basis due borrowing encodings isabelle hol explicit model theoretic counterpart semantic basis imply practical problems encoding casl isabelle hol described produces complex output 
fine tune output suppressing superfluous parts example trivial subsort injections retaining mathematical correctness 
problem borrowing hol casl user really works encoding casl specification casl specification 
particular goals subgoals displayed hol formulas proof rules course isabelle hol proof rules 
typical user tool probably familiar casl isabelle hol 
decided display goals subgoals casl syntax possible 
example injection term subsort supersort displayed casl inj encoding yield 
way get casl display syntax isabelle hol 
call display syntax isabelle hol 
note isabelle hol omits information information injection inj starts 
practical example proofs turned confusing longer form inj just tedious go back pure isabelle hol view subgoals isabelle hol 
plan user choose pretty printing views encoded casl specification 
related problem input goals 
goals course input casl syntax proof get isabelle hol syntax 
able input goals isabelle hol example needs prove lemma formulated isabelle hol 
solve providing isabelle hol theory interface parse goals input theory isabelle hol parser casl parser 
pure input syntaxes casl isabelle hol syntax sufficient 
example isabelle different kinds free variables object variables instantiated proof proofs universally quantified sentences 
variables needed example goal nat ffl automatically converted free form encoding free form better hol 
kind variables meta variables instantiated proof giving informative answer substitution proof existentially quantified sentence cf 
prolog narrowing 
example trying prove nat ffl sense input goal get instantiated proof goal provable nat ffl false 
provide facility input goals casl kinds variables 
working mixture casl hol 
study semantic relationships different input display syntaxes true combination casl hol higher order casl detail 
generic static analysis casl large number rules static semantics model semantics altogether basic specifications structured specifications architectural specifications libraries altogether fig 

logic independence casl semantics number counts rules second number logic independent rules 
logic dependent rules structured semantics due casl symbol maps 
semantics casl large structured architectural specifications libraries largely independent underlying logic 
instantiate casl large different logics order higherorder temporal provide new syntax semantics specifications small basic specifications syntax semantics specification large remains see fig 

achieved working called institutions symbols notion allows mathematically formalize essential aspects logic needed casl structured specifications 
possible logic independent semantics write logic independent static analysis casl structured specifications 
currently implementing generic program parameterized program doing analysis basic specifications performing certain operations signatures required semantics casl structured specifications 
note practically feasible parameterize static analysis directly institution symbols semantics casl structured specifications involves certain category theoretic constructions carried institution symbols practically feasible way 
limited number constructions semantics casl written way constructions treated datatype defining semantics way defined 
static analysis casl structured specifications parameterized structure containing apart static analysis basic specifications basically set operations implementing constructions 
described principle carried casl architectural specifications begun possible extra complications expected semantics casl architectural specifications defined complex notion logic arbitrary institution symbols sharing 
casl libraries completely different story semantics implementation entirely orthogonal rest language mainly deals collecting named entities files distributed internet 
general mechanism maintaining officially registered casl libraries needs implemented 
plan uniform workbench library management 
encoding casl structured specifications encoding casl structured specification isabelle problem arises structuring mechanism casl isabelle different 
particular isabelle mechanisms considerably weaker extensions unions specifications available isabelle union defined slightly different way casl renamings generic specifications similar available isabelle 
currently solve problem just flattening structured specifications basic specifications literally carry renamings unions treated renaming symbol shall hidden unique name input user 
satisfactory flattening destroys structural information specification theorem proving specification harder 
cases loss structural information practically infeasible proofs doable structuring kept 
asked isabelle implementors improve isabelle structuring mechanisms promised direction 
principle alternative way deep encoding casl means directly describe semantics casl higher order logic 
nice theorem proving deep encoding relatively far away proving encoded logic 
contrast shallow encoding proving encoding comes close proving encoded logic 
advantage deep encoding prove meta properties semantics casl view outweigh disadvantages 
exceptional case casl free specifications 
hardly expect implement logic independent way depend involved construction model categories logic 
expect simulate semantics free specifications particular logic higher order logic lines 
encoding architectural specifications scope dealt 
fig 

web interface hol casl system described previous section libraries orthogonal matter 
important incompatibility casl isabelle point casl text files may contain libraries consisting specifications isabelle text files consist exactly isabelle theory 
solve problem just splitting casl library small files containing specification feeding files isabelle 
course maintain information associating casl library split files 
user interface provide user interfaces bremen hol casl system 
turned contact tool important user interface web interface user just type specification parse perform static analysis conversion users want try easy interface effort download stand version effort small 
web interface front prototype translation pvs convenient stand version case 
small stand version tool provides full functionality shown fig 
isabelle theorem proving environment 
quite crucial exclude isabelle isabelle quite large users want tool front back want download isabelle system 
stand tool called unix command different entry points phases analysis encodings tool cf 
fig 
selected optional flags 
particular possible select encoding fol hol having isabelle useful combining tool theorem provers higher order logic 
plan different steps encoding see section separately available choose encode just partiality keep subsorting useful example connection maude supports subsorting 
unix interface works quite tool combination tools plan provide fully fledged applications programmer interface api 
full stand version tool provides isabelle theorem prover generic graphical user interface built top isabelle 
instantiated hol casl encoding casl isabelle hol 
fig 
see typical window 
icons labelled sigma casl specifications precisely encodings hol 
note hol available level 
icon labelled tree open proof goal 
double clicking perform proof steps goal 
done dragging proven theorems icons marked simplifier sets icons marked fl rg goal 
effect resolution goal theorem thrown rewriting goal chosen simplifier play www informatik uni bremen de cgi bin casl cgi 
available www informatik uni bremen de cofi casl parser parser html 
available www informatik uni bremen de cofi casl 
set 
proof goal finished turns theorem 
proof theorems form rewrite rule add simplifier set 
fig 

hol casl instantiation system users explicitly told feared install isabelle run tool full version including isabelle completely stand apart need install tcl tk installed sites 
shown possible write tools complex language strong semantical bias turns complex task 
reduce amount re existing tools possible 
common tool interchange format created tool connection tools front back 
currently tool connection theorem provers pvs isabelle rewriting engine elan 
discussed practical problems arise encoding existing tools creating new tool 
generic static analysis casl structured specifications allows re tool logics logic underlying casl example higher order casl reactive casl temporal logic just favourite logic 
hope tools integrated tools 
better integration achieved uniform workbench provides library management access generic transformation application system instantiated casl 
turn tool theorem proving environment practical problems 
way goal implement proof management dealing proof obligations intended consequences refinement 
special proof tactics casl developed tested 
case study verification proof obligations intended consequences libraries casl basic datatypes 
topic interesting study semantic relationships encoding casl hol true combination casl hol higher order casl 
direction research exploit possibility generic analysis casl large 
possible extend casl heterogeneous specification language combine specifications written different logics see ideas 
tool support language extend generic analysis casl large analysis structuring mechanisms moving specifications different logics 
intensive cooperation lasting years 
christoph luth burkhart wolff patiently helped kinds questions isabelle 
pascal schmidt implementation conversion aterms latex pretty printer 
markus wrote larger specifications casl extensively tested tools 
bernd krieg bruckner provided working environment discussions general directions 

aasa 
precedences specifications implementations programming languages 
theoretical computer science may 


proving theorems casl specifications 
talk th workshop algebraic development techniques bonas france september 

cerioli krieg bruckner mossakowski 
permissive subsorted partial logic casl 
johnson editor algebraic methodology software technology th international conference amast volume lecture notes computer science pages 
springer verlag 

cerioli meseguer 
may borrow logic 
transporting logical structures maps 
theoretical computer science 

clavel dur eker lincoln mart oliet meseguer quesada 
maude system 
narendran rusinowitch editors proceedings th international conference rewriting techniques applications rta pages trento italy july 
springer verlag lncs 
system description 

cofi 
common framework initiative algebraic specification development electronic archives 
notes documents accessible www ftp 
cofi language design task group 
casl cofi algebraic specification language summary 
documents casl summary oct 

cofi semantics task group 
casl cofi algebraic specification language semantics 
note version mar 

cofi task group tools 
cofi tools group home page 
www loria fr cofi tools index html 

krieg bruckner mossakowski 
subsorted partial higherorder logic extension casl 
note 
submitted publication oct 

hopcroft ullman 
automata theory language computation 
addison wesley reading ma 

krieg bruckner 
olderog balzer baer 
uniform workbench fur formale methoden 
technischer bericht universitat bremen 
english version bmbf 
krieg bruckner 
olderog balzer baer 
uniform workbench universal development environment formal methods 
fm world congress formal methods volume lecture notes computer science pages 
springer verlag 

larsen 
vdm proof rules underdetermined functions 
talk ifip wg meeting bonas france september 

luth krieg bruckner 
tas tools transformational program theorem proving 

finance editor fundamental approaches software engineering fase 
joint european conferences theory practice software etaps number lncs pages 
springer verlag 
www brics dk projects cofi ftp ftp brics dk projects cofi www informatik uni bremen de uniform 
luth wolff 
functional design implementation graphical user interfaces theorem provers 
journal functional programming mar 

meseguer 
general logics 
logic colloquium pages 
north holland 

mossakowski krieg bruckner 
static semantic analysis theorem proving casl 
parisi presicce editor trends algebraic development techniques 
proc 
th international workshop volume lecture notes computer science pages 
springer 

mossakowski tarlecki 
specification arbitrary institution symbols 
wadt 
submitted publication 

mosses 
cofi common framework initiative algebraic specification development 
tapsoft theory practice software development volume lncs pages 
springer verlag 
documents tentative mosses tapsoft 

mosses 
formatting casl specifications note june 

paulson 
isabelle generic theorem prover 
number lncs 
springer verlag 

ringeissen 
demonstration elan rewriting casl specifications 
talk th workshop algebraic development techniques bonas france september 

mossakowski 
basic datatypes casl 
note mar 


extensions initial models second order proof systems 
editor higher order algebra logic term rewriting volume lecture notes computer science pages 


second order proof systems algebraic specification languages 
ehrig orejas editors trends data type specification volume lecture notes computer science pages 

tarlecki 
moving logical systems 
haveraaen owe 
dahl editors trends data type specifications 
th workshop specification data types volume lecture notes computer science pages 
springer verlag 

tarlecki 
heterogeneous specifications 
gabbay van rijke editors frontiers combining systems nd international workshop 
research studies press 
appear 

van den brand 
mapping concrete casl syntax aterms format 
adam wins uva nl cofi casl html 

van den brand klint olivier 
aterms exchanging data heterogeneous tools casl 
note revised draft mar 

van den brand 
development parsing tools casl generic language technology 
talk th workshop algebraic development techniques bonas france september 

