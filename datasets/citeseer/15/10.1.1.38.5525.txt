structuring graphical paradigms tkgofer koen claessen ogi utrecht university koen cse ogi edu ton universitat ulm ton informatik uni ulm de erik meijer ogi utrecht university erik cse ogi edu describe implementation graphical programming paradigms model view controller fudgets functional animations gui library tkgofer 
library relies combination monads multiple parameter type classes provide type safe interface tcl tk 
show choosing right abstractions implementations surprisingly concise easy understand 
article functional programming matters john hughes explains important feature programming language way language provides glue combining building blocks form larger structures 
better glue modular programs 
argues functional languages offer powerful kinds glue higher order functions lazy evaluation 
research evolved new kind glue type constructor classes 
unfortunately separation imperative world useful bricks glue functional world powerful glue bricks 
things changed monads introduced functional programming :10.1.1.100.9674
monads possible seamlessly introduce imperative features purely functional language 
technique tkgofer library gofer interacts imperative graphical toolkit tk 
top new primitive functions system built offers programmer structural access widgets tk 
tk widgets tkgofer typed type classes group different kinds properties widgets 
provides functional programmer powerful tool performing gui programming 
criticism monads lead imperative style programming 
functional way coding guis monads example fudgets 
think monads general offer structure 
shown giving elegant implementation fudgets activex animation 
furthermore show tkgofer capable expressing known graphical paradigms model view controller 
systems try integrate graphical user interaction functional languages 
examples fudgets sml tk 
believe capture essence functional gui programming concise elegant powerful 
lack monads imperative actions combined type classes structure 
shall see constructor classes multiple parameter type classes play critical role system 
remainder organized follows 
section introduces tkgofer 
third section describes integration model view controller paradigm tkgofer 
fourth section shows implementation fudgets 
implementation functional animation toolkit discussed section 
section compares tkgofer graphical functional systems discusses results 
tkgofer section give short tkgofer 
detailed description tkgofer refer papers 
creating gui write guis tkgofer 
explain small example 
illustrates picture decimal counter code implements 
user interface shows widgets window label integer display field command buttons 
functions window entry button create widgets specific list configuration options 
effect performing actions tcl tk creates handle new widget 
handle may modify widget specify layout 
layout gui constructed layout combinators 
example combinator 
combines widgets horizontally 
com counter gui counter window title counter label text value background green entry background yellow button text command pred button text command succ pack 

decimal counter combines widgets vertically aligns 
function pack displays combined widgets screen 
user presses button function invoked 
function replaces value entry field incremented value see section 
likewise user presses button value decremented functions button entry signatures button conf button 
window 
gui button entry 
conf entry 
window 
gui entry signatures reveal interesting characteristics tkgofer 
provide widget objects unique identity created gui monad 
monad extension standard io monad 
remainder sufficient assume values type gui represent actions may side effect user interface close window return value type contents text editor 
second widgets handle user input typed contents 
type instance class defines parse methods 
third gui libraries information just coded strings tkgofer widgets typed configuration options 
configuration options specify external appearance behaviour widget 
differences widgets exist lot options shared function background applies entry button widget 
sect 
explain type classes express common characteristics different widgets 
aspect obvious signatures distinguish kinds widgets 
widget window item menu item canvas item toplevel item 
means widget may appear window menu canvas may act container widgets 
type classes may express property 
signatures window items generalized type synonym type wid conf 
window 
gui signature button entry may written wid button 
wid entry respectively 
tkgofer widget hierarchy constrain functions specific class widgets introduce hierarchy type classes fig 
root class widget contains methods apply widget function cset update configuration widget 
class widget cset 
conf 
gui 
classes widget hierarchy subclasses widget 
class example includes widgets may configured callback function 
class widget 
command gui 
conf saw fig 
buttons prototypical instance class 
instance button 
set command button function cmd write cset command cmd instance cset method 
example type class 
type class group widgets handle user input 
methods overloaded widget type input type 
class widget 
getvalue 
gui setvalue 

gui 


gui example instance class entry fields 
instance 
entry 
values displayed entry field restricted instances class string int 
widget tkgofer widget hierarchy extending tkgofer tkgofer primitives possible functionality offered tcl tk gofer programmer 
go higher order functions algebraic datatypes easily roll custom widgets 
making abstractions hard tcl tk gui libraries 
concrete example composed widget build spin button 
spin button control value incremented decremented 
spin button widget consists widgets spin button spin button see fig 

widget implement new widget 
define type new widget 
type button button predefined type constructor indicate widget placed window 
contains information graphical properties 
access buttons function 
data 
gofer type declaration create new type datatype restricted type 
presentation clearer type synonyms worked restricted types instance constructor classes 
exact layout widget specified construction function 
wid cs button bitmap bmp button bitmap dn bmp cs function takes care extra administrative information structure 
sure configuration options correctly distributed components composed widget 
overwrite default method cset 
instance widget cset cset fst const cset snd const instance classes define widget specific configuration options 
gui 
conf option cset fst command option cset snd command exactly way combination spin button entry field label hidden new widget 
call widget widget 
type entry label 
wid cs entry label succ pred 
cs label display text string 
widget controls values instance class 
class defines functions pred succ calculate predecessor successor values type instance classes widget overwrite methods getvalue setvalue 
instance 
getvalue getvalue fst setvalue setvalue fst widget command buttons reimplement example fig 

new implementation picture see fig 

counter gui counter window text value pack counter spin button composing widgets flexible way construct reusable building blocks 
composed widgets integrated widget hierarchy inheriting properties components 
mvc paradigm basic widget layer tkgofer ability extend layer allows write abstractions 
model view controller paradigm mvc 
mvc paradigm oldest object oriented design paradigms 
provides modular way represent information model display information view control interactions information control main idea support views data 
changes view reflected views 
example consider debugger offers functions display syntax tree 
tree represents model 
possible views textual graphical representation tree 
controller keeps views consistent see fig 

view view control node node node model tree mvc paradigm controller controller know model value observe 
certain view changes view send controller message containing new value 
subsequently controller send message dependent views tell change 
controller know views control 
represent ability send message function type type send 
gui apply function message type returns action type gui executed send message 
concept called self addressed envelope 
controller gets envelope type send view return messages type view 
define controller widget widget graphical representation 
type control state state send component control updatable state containing value model 
second state keeps list dependent update methods model 
states widgets 
new state created function state 
getvalue setvalue access state 
function control creates new controller object 
control conf control 
gui control control cs state state cs function addmethod adds new update method method list controller addmethod send 
control 
gui addmethod send send control instance classes widget instance widget control instance control getvalue getvalue fst setvalue setvalue fs getvalue seqs fs declaration getvalue read actual value model 
function setvalue updates model dependent views 
standard function seqs gui 
gui executes list actions order 
adding views different views represented different widgets 
view implement functions 
function specifies way controller send message update view 
function tell view send controller message changes view 
functions methods class view 
class takes parameters 
corresponds view second model want control 
class view 
send 
send 
gui functions introduce new configuration option 
configuring widget option mvc means controlled controller mvc view 
control 
conf mvc option getvalue setvalue addmethod widget created controlled controller read value set value value 
furthermore install invoke method send displayed value soon changed 
update method added method list example instance class view instance view setvalue cset command getvalue user presses spin controls read value send controller 
updates value performing setvalue new controller value 
example example mvc paradigm control integer value widget scale widget 
scale widget widget displays integer value allows users edit value dragging slider 
view instance scale written similar way instance 
widgets window 
window copy button 
user presses button copy window new views created 
mvc example views gui views control copy copy window title mvc text view mvc text view mvc button text copy view command copy pack 
function views creates initial controller calls function copy open window 
time button pressed function called creating copy window adding scaler widget controller 
example shows basic principles mvc paradigm 
benefits course better expressed larger applications 
mvc paradigm tries low level event programming hides communication widgets primitive functions 
section see fudgets approach communication widgets implicit 
implementing fudgets section explain fudgets discuss implement tkgofer 
gui framework main abstraction fudgets system called fudget functional widget 
fudget object consist ing parts 
graphical representation fudget functionality 
example button fudget user visible object window clicked 
programmer specify properties button button clicked 
fudget send receive messages particular types button fudget sends click user presses programmer send bool button change activity status 
fudget receives messages type sends messages type type types messages determine type fudget 
button fudget type bool click principle fudget type 
fudgets system offers programmer atomic fudgets buttons entry fields 
combined combinators build larger fudgets 
different combinators provide different ways plumbing message streams 
discuss combinators serial cross composition 


serial composition serial composition fig 
just plugs output stream right argument input stream left argument 
similar type functional composition 


cross composition cross composition fig 
puts parameters forming new fudget 
input messages sent fudgets output messages internal fudgets combined single stream 
fudgets tkgofer implement atomic fudgets combinators tkgofer 
question represent type main task fudget send receive messages 
implement fudget function 
user function fudget tells send message 
fudget returns function describes send message 
part called receive function fudget 
reuse type send described sect 

want graphical io wrap function monad 
call monad fudget monad fm define 
just consider fm bare gui monad 
type send 
fm send step define combinators 
serial composition passes function sending messages left fudget results function receiving messages 
function passed right fudget function sending messages results receive function resulting fudget 
just flipped monadic composition 




sendb senda sendb result senda cross composition defined similar way 
sending function passed fudgets 
final receive function combination receive functions combined fudgets 



sendb 
sendb sendb result 
notice worry graphical io fm monad take care 
thing concerned functionality fudgets 
atomic fudgets define atomic fudgets buttons slightly expand structure monadic type fm 
button needs know window supposed appear 
fm reader monad type window 
type fm window 
gui instance monad fm 
fm instance monad type class 
done standard way 
type button fudget bool click sends clicks receives 
send function parameter fudget set command button 
receive function result fudget modifies activity status button 
atomic fudgets defined similar way 
string 
bool click send win 
button text command send click win pack result cset active added extra window parameter need function puts fudget window 
fudgets library provides function 
implement function creating window passing parameter fudget 
string 

send win 
win window title send win pack widget soon create atomic fudget just put arbitrary place window 
course want manipulate layout graphical objects fudget 
fudgets system different ways doing 
provide layout modifiers called 
function takes placer fudget rearranges layout internal fudgets fudget placer 
implement need know atomic widgets contained fudget 
fm type extended writer monad list frames 
tkgofer frame widget graphical properties 
form superclass window items widget transformed frame 
final type fm type fm window 
gui frame standard define monadic functions type 
packing fudget soon create need add list frames 
creating atomic fudget pack widget necessary lifting function widget 

fm wid win 
fr frame wid result fr placer basically list frames transformer 
function applies transformer internal list frames obtaining new fudget 
type placer frame 
frame placer 

placer sendb win 
senda frames sendb win result senda placer frames placer functions defined tkgofer prelude 
reuse obtain 
frs horizontal frs frs vertical frs frs matrix frs stream processors plugging message streams fudget directly want 
messages compatible intermediate computation needed 
fudgets system introduces stream processors 
sp just fudgets functional behavior messages graphical representation 
reason called fudgets 
sp solely act message stream 
sp typed messages 
sp type sp receives messages type sends messages type sp defined continuation passing style 
primitives constructing sp 

sp 
sp 
sp 
sp sp function sends messages argument continues second argument 
sp waits message applies message argument defines continue 
terminates reception sending messages 
implement stream processors tkgofer 
type fudgets 
way defines reception messages sp redefine behavior incoming messages 
want outside world act time message sent sp type 
sp change behavior 
observation sp described purely functional structure need gui monad offers 
represent sp recursive datatype 
data sp sp 
sp sp send messages wait incoming message 
definitions straightforward 
sp fsp sp fsp fsp sp fsp 
structure need turn sp fudget 
fudgets library function 
sp create fudgets act state implementation creates state sp tkgofer 
state keeps sp waiting message having type 
sp 
sending message sp means apply waiting sp incoming message obtaining outgoing messages sent new waiting sp 
put new waiting sp back state send messages 
looping want output messages fudget produces fed back fudget 
combinators defined far 
explicit combinators introduced tying cyclic knot 
example function fig 
copies output messages feeds back input messages 

looping define function need fixpoint operator fm monad 
lifted version generalized fixpoint operator gui monad 
gui 
gui 
gui state getvalue setvalue result gui 
fm 
fm function empty state result function going read 
result computed put state 
careful read result produced 
reason traditional fixpoint monads type 

parameter wants computed value computation value case strict result unexpected behavior 
send 


self self send connect output input change send function 
sending message send message 
done function self result computation provided fixpoint combinator 
example implemented combinators build example sect 

define fudget displays spin buttons 
ignoring input message send functions succ pred functions type int 
int 
buttons placed top 
int 
int click 
succ 

click 
pred 

ignore input need processing core holds state applies functions sent buttons 
stream processor takes extra argument initial value state 
int 
sp int 
int int 
main fudget links integer entry fudget processor 
add loop provide connection output entry core want user able update state 
const mapf sp keep state intf int int intf 

mapf const 
extra feature implemented original fudgets library combinator 
gofer type classes generalizes notions fudget sp function fudget composition 
result explicitly turn function sp fudget 
interesting look differences defining new fudget new widget 
fudgets instances type new widget type safety new type 
second state fudgets stored separate stream processor tkgofer widget knows state 
third fudget exactly input output stream explicitly blocking combining streams 
executing fudgets step function executes fudget 
call function translates fudget gui type 

gui frs seqs pack frs 
result error window 
gives fudget dummy window supposed wrapped window dummy send function packs frames 
remarks section gave implementation fudgets 
believe implementation concise example easily experiment adding nonstandard features fudgets 
full implementation implements basic fudget functions runs examples fudgets tutorial unchanged 
writing aware unpublished technical report approach similar implement fudgets 
difficulties defining sp loops 
functional animations section discuss way expressing executing animations 
done context functional animation system heavily inspired conal elliot reactive behavior modelling haskell 
implementation hugs activex animation 
behaviors system main abstraction notion behavior 
value type beh represents dynamic value type change animation 
example image type static images value type beh image animation 
types combination behavior type 
view value type beh dependent value 
value dependent 
certainly time animation changes time 
behavior reactive component 
means action user clicking moving mouse influence behavior 
behavior dependent events 
represent time events types 
discuss events change behaviors 
type time float data event int int observation time flows forward 
jump back earlier points time 
behavior restructures time certain events want able throw away old information create fresh behavior 
adapt definition type beh 
recursive datatype 
data beh beh time 
event 
beh behavior function takes time events return value type plus new behavior time 
basic functions type time behavior time 
time inside animation example want animate clock 
time beh time time beh 
time exist lifting functions 
transform functions act normal values functions act behaviors 
gave definition lifting function 
defined similar way 
lift 
beh lift beh 
lift lift 

beh 
beh lift 


beh 
beh 
beh property focus animations specified functional way 
atomic building blocks animation modifiers combinators build complex animations intuitive concise way 
images type image static images 
images drawn canvas tkgofer drawing area display graphical objects 
parameter images take place canvas expressed coordinate 
having taken parameters image return gui action draw image 
type image int int 
canvas 
gui course add arbitrary number extra parameters color size keep things simple 
tkgofer functions draw text bitmaps canvas define primitive image behaviors 
string 
beh image file lift bitmap file string 
beh image string lift text string behaviors just lifted static images constant animations 
combinators act behaviors change 
move moves image behavior specifies coordinate 
combinator images takes images combines single 
move beh int int 
beh image 
beh image move lift dxy img 
xy 
img xy dxy beh image 
beh image 
beh image lift img img 
xy 
img xy img xy implementation combinators done lifting 
function discuss images draws static image canvas 
canvas 
image 
gui img img maxx maxy provides images parameters default coordinate middle canvas 
time structure chose behaviors admits interesting feature 
behavior gets time parameter global variable introduce local times 
give behavior different time actual time 
principle called time transformation 
example 
function puts behavior time 
means time changes events shift accordingly 
events behavior delayed order arrive right time 
function takes time store containing timed events 
function splits store events occur events occur 
type store time event time 
store 
event store es st es st st st function simple function function 
considers store queue delayed messages 
define function 
time 
beh 
beh dt delay delay store beh beh beh evs 
dt store store evs store beh beh delay beh local function delay keeps store delayed events 
computes new time extracts right events store 
gives time events behavior delayed 
animation defined function drawing static images canvas function execute dynamic images animations 
recall animations type beh image 
define function look animations dependent user actions 
case completely ignore events part behaviors 
canvas 
beh image 
gui beh loop beh loop beh beh img beh beh img loop succ beh create simple loop starts time 
extracts image behavior draws image calls new behavior point time 
important 
behaviors infinite loop goes forever 
careful program able react user actions 
solution chose concurrent version tkgofer 
changed definition gui monad little bit callback actions system automatically interleaved existing actions 
loop system notice user actions concurrently execute resulting callback functions 
adding concurrency adds lot additional standard problems version tkgofer experimental phase 
allow user interaction animation loop 
additionally collect events happened animation 
mouse clicks movements stored state 
pass time parameter behavior get right events state 
canvas 
beh image 
gui beh ste state click ste click ste mouse xy 
xy ste loop ste beh 
function creates state events going collected 
sets properties canvas response user actions put right events state 
loop ste beh beh evs getvalue ste setvalue ste img beh beh evs img loop ste succ beh loop function little bit extended 
reads empties event state time new image drawn 
example small example functions defined 
example finne called time flows river 
shows words mouse pointer word placed time little bit 
way words form string shows history fig 

time flows river river beh image river compose delay follow compose foldr delay zipwith 
follow map move words time flows river list images mouse created 
subsequently element list delayed 
step overlay images 
discussion sections seen ways defining graphical structures atomic building blocks modifiers combinators 
graphical reactive parts relied imperative monad gui monad 
imperative monads accused mimicking imperative code 
showed choosing right types combinators neatly hide exploit expressiveness functional programming 
shows real power monads 
treat class values allowing postpone modify combine computations 
extend monadic structure giving power adding extra features directly language 
monads appear ideal general functional object capture imperative actions 
intuition suggested john launchbury monads give contrast normal combinators ability compose objects name intermediate result 
monads general powerful 
years integration graphical functional languages popular research topic 
related tkgofer uses monads handle guis 
properties concurrent processes manage callbacks specifying button clicked new process created waits user clicks button 
confusing drawback uses different handlers widget graphical layout functionality widget 
saw earlier fudgets system takes completely different approach 
natural refreshing sight appears awkward time 
want send widget coded datatype fudget type restricted receive messages type 
furthermore combinators restricts creation planar graphs 
structure information gui complicated 
ad hoc methods solving kinds problems 
system uses tk gui basis sml tk 
provided nice toplevel partition concepts application graphical object window system lacks certain points elegance tkgofer 
implementation details creation unique identifiers widgets hidden programmer system type safe 
compared systems tkgofer disadvantages 
gofer interpreted implementation uses character strings communicate gofer tk programs tend run slower 
interactive applications noticable 
user slower system 
tkgofer programmers see big advantage able interpreted system 
furthermore tkgofer support real concurrency 
experimented changing definition gui monad deal coarse concurrency level primitive io actions 
added forking communication 
experienced standard concurrency problems application works fine see sect 

systems mentioned lack great feature tkgofer fairly unique structure 
hierarchy widgets systems 
widgets specify properties 
encoded monomorphic functions data constructors fudgets sml tk strings 
think approach unacceptable 
strong typing catch errors compile time generating run time error unexpected behaviour 
structure tkgofer primarily due heavy multiple parameter type classes 
resulted extendable hierarchy widgets functionality widgets 
similar structured gui libraries previously available object oriented languages java awt package 
widget hierarchies object oriented languages essence widget types intricate 
multiple parameter classes enabled relate datatypes components datatypes 
gave extra glue needed build tool 
general architecture tkgofer tightly coupled tcl tk reused provide type safe interface top weakly typed library activex shell scripting languages 
wish byron cook finne jay hollingsworth leijen wolfram schulte helpful suggestions 
thomas nordin joining implementing animation library 
carlsson th 

fudgets graphical user interface lazy functional language 
conference functional programming computer architecture 
acm press 
claessen 
fudgets implementation 
url www cse ogi edu fudgets 
elliot 
brief 
technical report msr tr microsoft research july 
elliot hudak 
functional reactive animation 
international conference functional programming 
acm press june 
finne peyton jones 
composing 
proceedings fifth eurographics workshop programming paradigms computer graphics 
springerverlag september 

microsoft visual basic step step 
microsoft press 
hughes 
functional programming matters 
computer journal 
jones 
gofer 
included part standard gofer distribution 
jones 
functional programming overloading higher order polymorphism 
jeuring meijer editors advanced functional programming volume lecture notes computer science pages 
springer verlag 
krasner pope 
cookbook model view controller user interface paradigm smalltalk 
journal object oriented programming 
luth wolff 
sml tk functional programming graphical user interfaces 
technical report universitat bremen 
ousterhout 
tcl tk toolkit 
addison wesley 
peyton jones ph 
wadler 
imperative functional programming 
proc 
th acm symposium principles programming languages charlotte north carolina january 
reid singh 
implementing fudgets standard widget sets 
glasgow functional programming workshop pages 
taylor 
embracing windows 
technical report tr university nottingham october 
schulte 
tkgofer 
technical report university ulm june 
schulte 
design functional gui library constructor classes 
bjorner broy editors perspectives system informatics volume lecture notes computer science december 
springer verlag 
ph 
wadler 
essence functional programming 
acm principles programming languages 
