appear operational properties lily polymorphic linear lambda calculus recursion bierman pitts russo department computer science warwick university coventry cv uk computer laboratory cambridge university cambridge cb qg uk plotkin advocated combination linear lambda calculus polymorphism xed point recursion expressive semantic metalanguage 
study expressive power operational point view 
show naturally call value operators linear lambda calculus call name semantics ecting termination exponential types ecting ground contextual equivalence 
result prove properties logical relation provides new extensional characterisation ground contextual equivalence relational parametricity properties polymorphic types 
giving denotational semantics programming languages domain theory metalanguages phrase semantic descriptions 
attraction approach allows semantically relevant constructs proof principles inherent domain theory abstracted quite complicated mathematical details 
restricting attention denotational semantics deterministic languages excluding various kinds powerdomain plotkin convincing case polymorphic linear lambda calculus recursion expressive denotational metalanguage 
particular powerful nature impredicative polymorphism permits plethora domain theoretic constructs de ned terms remarkably primitive type forming operations types linear function types exponential types see fig 
uses domain theoretic terminology 
plotkin chooses intuitionistic function types primitive exponential types prefer express terms research supported uk epsrc gr 
preliminary version 
nal version accessed url www elsevier nl locate entcs volume html bierman pitts russo lifting functions strict functions smash product coalesced sum product separated sum existential truth values 
flat naturals 

inductive inductive recursive rec fig 

lily denotational metalanguage girard famous decomposition de nitions fig 
weak properties works convertibility terms 
get stronger properties category theoretic universal properties suce notion equality terms types relationally parametric sense reynolds 
theory way generate notion equality suitable model plotkin sketches strict inductive partial equivalence relations domain model untyped lambda calculus 
practice far know details relationally parametric model polymorphic linear lambda calculus recursion worked detail 
take di erent computational approach polymorphic linear lambda calculus recursion programming language call lily endowing operational semantics choose particular notion contextual equivalence derived operational semantics prove notion term equality relationally parametric respect suitable notion binary relation 
strategy applied successfully second author combination polymorphism pcf call value pcf 
easy apply strategy noted lily exponential types give re ned treatment usage strictness properties lifting domain model happens extra contraction property assume types lily 
bierman pitts russo linear lambda calculus explain 
recall terms programming language contextually equivalent interchanging complete program ect observable results evaluating program 
operational semantics language may may get di erent notions contextual equivalence depending decide constitutes complete program observe evaluation 
consider classic example call name pcf 
programs closed terms ground type observing convergence ground values get notion ground contextual equivalence studied seminal plotkin observe termination evaluation closed terms type get di erent lazy contextual equivalence analogous lazy lambda calculus abramsky 
lazy contextual equivalence linear lambda calculi studied 
lily ground lazy contextual equivalence order de nitions fig 
correct example lazy contextual equivalence linear function type represent domain strict continuous functions lift 
little known properties ground contextual equivalence linear lambda calculus see sect 

example known di erent lazy contextual equivalence show see example 
roughly speaking lacking suciently powerful analysis properties linear functions codomains observable types ones ground contextual equivalence distinguishes divergent terms ones canonical form 
provide analysis 
contributions follows 
strictness theorem 
conventional wisdom operational semantics linear lambda calculus naturally call value parts call name 
show naturally call value operators call name semantics ecting termination exponential types theorem ecting ground contextual equivalence 
technical result turns key developing rich operational theory lily 
parametric logical relation 
strictness theorem show lily ground contextual equivalence coincides particular logical relation theorem involving parameters admissible similar previously second author 
corollary obtain new extensionality results linear lambda calculus corollary 
logical relation allows prove results validate de nitions fig 
indicate expressive power lily combination linear lambda calculus impredicative polymorphism xpoint recursion see example 
bierman pitts russo common intermediate language strict lazy 
programming language perspective lily potential common intermediate language strict lazy functional programming 
realise potential need intensional level cf 
:10.1.1.18.9255
indicate replace call name semantics terms involving exponential types lily subsumes xpoint recursion call need semantics ecting ground contextual equivalence see sect 

details appear exploration translations pure core ml haskell lily 
strictness theorem lily combines term calculus plotkin dual intuitionistic linear logic xpoint recursion impredicative polymorphism 
presence turns cut just linear function exponential types losing expressive power 
types terms lily language fig 
type assignment relation 
nd convenient employ syntactic distinction intuitionistic variables ivar may duplicated discarded linear variables lvar exactly 
variable binding constructs identify types terms renaming bound variables 
notations ftv denote sets free type variables free intuitionistic variables free linear variables expression 
notation indicate capture avoiding substitution 
recursively de ned thunks syntactic novelty lily absorption xpoint recursion terms exponential type 
recursively de ned thunk canonical form introducing recursively de ned non linear term suspended computation 
corresponding eliminator evaluates term recursive thunk substitutes unfolding thunk body intuitionistic variable evaluates body see fig 
see sect 
alternative call need semantics 
thunk body may duplicated evaluation construct potentially duplicating linear variables typing rules ensure thunks contain free linear variables 
get conventional xpoint terms de ning fix non recursive thunks type de ning bierman pitts russo types type variable tyvar linear function type type exponential type terms linear variable lvar intuitionistic variable ivar abstraction mm application generalisation specialisation recursively de ned thunk exponential eliminator type assignment relation 
inductively generated rules 
nite function intuitionistic variables types domain dom 
nite function linear variables types domain dom 
nite set type variables 
ftv dom ftv 
dom 


dom 
dom 



ftv 

ftv 
dom 

dom dom 
dom 


fig 

lily syntax type assignment bierman pitts russo conversely recursively de ned thunks expressed terms non recursive thunks xpoints fix see corollary 
choose formulations 
prefer compactness 
easily generalises mutually recursive thunks type equivalent ground contextual equivalence recall wish identify terms give evaluation behaviour contexts ground type types booleans natural numbers 
types lily de ned 
fact ground contextual equivalence contextual equivalence determined observing termination properties evaluation exponential types ground types de nable modulo ground contextual equivalence fig 

see consider adding lily type bool truth values conditionals true bool false bool 
bool dom 
dom 




closed term exponential type true closed term type bool evaluates true evaluates operational semantics described thunk 
conversely closed term type bool evaluates true closed term type evaluates thunk 
generic divergent term type 
macro equation xpoint expressions takes familiar form fix 
contextual equivalence observing convergence true type bool observing convergence canonical form exponential types 
di erent observing convergence types see example 
de ning contextual equivalence linear lambda calculi re ne traditional formulation holes contexts implicit parameters binding variables scope hole lies matters parameters linear 
rst author discusses re nement sect 
second order variables give explicit treatment holes see 
attractive alternative doesn require extra syntactic machinery avoid contexts completely de ne equivalence bierman pitts russo largest substitutive congruence relation typed open terms having required convergence property closed terms exponential type 
relational approach contextual equivalence taken full version 
order simplify exposition extended restrict attention ground contextual equivalence closed terms closed types side step issues contexts de nition 
depends notion closed term closed exponential type converging canonical write de ne see corollary 
de nition ground contextual equivalence closed terms typ denote set ftv closed types typ term denote set fm closed terms type term write gnd mean satisfying case satisfying case 
operational semantics gives possible evaluation relations closed lily terms differing treatment application linear function argument 
strict call value relation corresponds natural operational interpretation intuitionistic linear logic advocated abramsky relation linear lambda calculus crole gives constructs non strict call name semantics :10.1.1.18.9255:10.1.1.18.9255
relations give rise termination relations strict termination relation non strict termination relation di erent relations simple example shows 
example choose closed types typ 
de ne term 
generic divergent term de ned 
slightly surprising theorem shows termination relations coincide restrict attention terms exponential type 
theorem strictness theorem typ term open terms exponential type bierman pitts russo common rules strict evaluation inductively generated common rules plus non strict evaluation inductively generated common rules plus fig 

evaluating closed lily terms particular term proof sketch intuition theorem holds converges semantics canonical form thunk type thunk residual original thunks 
thunks mention linear variable typing rule thunks residual thunk suspend linear arguments linear argument evaluated reaching canonical form 
evaluating thunk di erence termination behaviour choose postpone force evaluation function arguments case arguments evaluated reaching canonical form 
intuition surprisingly hard give formal proof 
extended merely sketch structure proof 
terms having free linear variable single occurs position immediately evaluated non strict semantics 
structure evaluation contexts analysed nested stack 

frames form 
advantage frame stack formulation permits give direct inductive de nition non strict termination relation follows syntactical structure frame stack term arguing structural induction relation prove exponential type containing free linear variable case bierman pitts russo subcases proved simultaneously occurs course crucial restricting attention terms exponential type example base case induction empty frame stack canonical form exponential type necessarily involving rendering case trivial 
empty frame stack implication obtain left right half theorem 
half theorem deduce result independent interest version mason talcott ciu theorem lily ground contextual equivalence 
typ term de ne ciu equivalence ciu mean closed frame stacks mapping exponential type case ciu coincides gnd particular congruence 
number means establishing kind result prefer adaptation method proving congruence due howe 
congruence property ciu simple prove ciu induction derivation right left half theorem follows de nition ciu corollary take notion convergence exponential type de nition ground contextual equivalence de nition get equivalence relation lily terms 
computational types types apart exponentials enjoy strictness property theorem 
call type computational typ term open terms case theorem says computational typ 
de nitions fig 
conjecture closed types grammar 
rec computational 
parametric logical relation going show ground contextual equivalence lily terms gnd de nition coincides certain logical relation construction various extensionality parametricity properties wish establish gnd de nition gives operations binary relations lily terms need achieve 
bierman pitts russo de nition closed type typ test denote set closed linear function abstractions type typ 
typ de ne set term relations rel term term set test relations rel test test de ne operations term relations test relations rel de ne rel rel de ne rel rel rel de ne rel family rel typ rel term relations de ne rel typ rel rel de ne rel fix fix fixpoint terms fix de ned 
operation 
derived de nition closure operation term relations xed points turn properties respect gnd suitable syntactic version xpoint induction exploit get theorem 
omit proof extended quite involved structure proof similar sect 
details di erent 
theorem relational parametricity gnd lily type list distinct type variables containing free type variables de ne function tuples term relations term relations rel rel 
rel induction structure operations de nition follows 
thing strictness theorem needed places linear function abstractions evaluation contexts tests de nition means harder prove theorem reward richer collection closed relations better ability prove properties gnd bierman pitts russo 






closed take empty get 
rel 
term 
gnd part proof theorem needs establish technical property parametric logical relation state separately useful right 
lemma lily type free type variables say term relation satis es 

corollary kleene equivalences typ write val subset term consisting closed terms canonical form terms appear right hand side evaluation relations fig 
abstractions generalisations recursively de ned thunks cf 
fig 

term kleene equivalent satisfy val gnd 
similarly gnd gnd gnd fix term divergent say gnd proof 
follows lemma de nition 
respects kleene equivalence 
gnd re exive implies contains kleene equivalence 
corollary extensionality properties gnd gnd val gnd gnd typ gnd gnd fix gnd fix proof 
properties follow combining theorem lemma de nition 
strictness theorem 
example prove rst observe gnd term 
bierman pitts russo holds standard argument logical relations facts gnd coincides 


lemma 

right hand side equation equivalent term 
strictness theorem corollary similarly equivalent val 
val 
val replacing right hand side equation applying theorem get desired extensionality property terms linear function type 
corollary recursively de ned thunk val expressed non recursive thunk xpoint term ground contextual equivalence gnd fix particular element val ground contextually equivalent term 
proof 
extensionality property corollary equation holds fix fix gnd fix fix hold unfolding left hand side kleene equivalence corollary fix fix gnd fix fix fix fix example ground lazy contextual equivalences di er consider generic divergent term see equation generic family divergent terms fix fix closed terms type typ hard see gnd corollary 
extensionality property corollary gnd terms evidently equated lazy contextual equivalence observes convergence contexts types just exponential types canonical form diverges observe di erence identity context 
similar examples function types property types settling open problem sect 

bierman pitts russo relational parametricity types consequence theorem terms types enjoy relational parametricity properties modulo ground contextual equivalence 
term satis es gnd theorem 
de nition get typ rel satisfying case 

de nition 
infer properties course method needs rich source term relations satisfying source arises fact graph gnd linear function term term relation 
allows establish free theorems di naturality properties lily type constructors respect linear functions play role theory strict continuous functions domain theory 
de nitions types fig 
expected category theoretic properties types established ground contextual equivalence 
example shows coalesced sums categorical properties type constructors fig 
treated full version 
example categorical coproducts consider category objects closed lily types typ morphisms ground contextual equivalence classes closed lily terms type composition morphisms represented term term morphism represented term identity morphism represented id term id validity conversion ground contextual equivalence corollary extensionality property corollary needed see de nitions yield category 
closed types typ claim coproduct category coproduct injections represented inl term inr term inl inr establish claim rst note object typ bierman pitts russo morphisms represented term represents morphism satisfying inl gnd inr gnd corollaries 
just see unique morphism 
relational parametricity properties types mentioned 
show term term inl inr gnd inl inr notation non recursive thunks introduced equation 
postponing proof naturality property moment see yields required uniqueness property inl gnd inl inr gnd inr gnd term equation equations get inl inr gnd de nition validity conversion gnd inl inr gnd typ val corollary express suitable xpoint expressions deduce inl inr gnd corollary gnd inl inr term 
term val equations get gnd inl inr gnd inl inr satisfy antecedent equation get gnd equation holds corollary congruence properties gnd inherent de nition 
coproduct property consequence property 
prove consider term relation gm gnd rel applied particular type de nes bierman pitts russo term satis es 

hard see inl inl 


facts follows inl inl 
inl inl 
similarly inr inr 
get inl inr inl inr follows de nition de ning types ground contextual isomorphism making de nitional extension lily fig 
consider extending syntax semantics lily term formers typing evaluation rules tensor product sum product existential inductive inductive recursive types 
prove key theorems extended version lily doing sees term formers case strict non strict operational semantics equivalent gnd example tensor products evaluated strictly pairs 
relational parametricity property mentioned prove de nability result types 
say types ground contextually isomorphic functions term term compositions ground contextually equivalent identity functions respectively 
extended version lily new types de nable terms ground contextual isomorphism formulas right hand side fig 

details proof quite involved especially comes recursive types ideas due freyd plotkin needed appear full version 
lazy version lily sect 
investigated equivalence call value call name evaluation strategies arguments linear functions 
gained adopting call need lazy strategy linear function application linear argument suspended evaluated exactly 
operational semantics fig 
evaluating value eliminated substituting unfolding body occurrence restriction number occurrences duplicates computations shared 
lily merit serious consideration intermediate language strict lazy source languages provide call need operational semantics terms 
furthermore apply results lazy lily bierman pitts russo show ground contextual equivalence una ected switch call name call need semantics 
environments empty binding call need evaluation hm ai hv inductively generated rules ai ai ai ai ai ai hm hm hv hm hv hm hm hv hm hv hm hv hx hv hm fresh dom hm hv hv fig 

lazy evaluation closed lily terms fig 
de nes evaluation relation lazy lily style 
environment heap association list mapping distinct intuitionistic identi ers suspended terms similar explicit substitution 
notation denotes list concatenation lazy evaluation relation relates con gurations pairing term initial environment con gurations pairing canonical form nal environment 
variable evaluated looking suspended term initial environment evaluating term environment returning value nal environment updated record value environment threaded derivation result rst computation cached recalled subsequent computation shared 
evaluating term evaluates canonical form binds body thunk fresh renaming creating cycle environment continues evaluation renamed body 
assuming initial bierman pitts russo con guration closed respect domain environment property preserved evaluation choosing fresh dom avoids capture free variables 
formulating lazy semantics easy proving correct nonstrict semantics 
correctness results respect denotational model 
get direct operational proof hoped small step machine semantics formulated sestoft operational techniques 
turned big step style proved amenable 
iyer give operational proof correctness lazy pcf style operational semantics semantics shares evaluation function arguments recursive terms evaluations duplicated unfolding call name relation fig 

iyer report unable extend proof technique semantics shares evaluations recursive terms 
problem sharing computations creates cycles environment violating decreasing measure inductive proof 
fortunately identi ed robust measure allows extend proof technique setting lazy lily lazy pcf shared recursion 
linearity issue result lazy pcf wider interest result reported 
rules fig 
similar iyer lazy pcf cater cycles variable rule evaluates suspended term respect entire environment just remainder just alternative semantics xpoints proposed proved correct 
material establishes powerful techniques results exploring surprisingly great expressive power arises combination linear lambda calculus polymorphism recursion 
principal give semantics wide range programming languages compositional translations lily language versions standard constructs scott strachey denotational semantics fig 
results basis proofs correctness properties translations 
fact lily terms modulo ground contextual equivalence give re ned treatment strictness usage properties model domains strict continuous functions lifting contraction property built lily types 
accordingly remains done explore properties translations 
example interesting explore properties lily versions semantics idealised algol hearn lazy state threads peyton jones launchbury computational ects implicit translations lily consider combining bierman pitts russo calculus monads moggi 
abramsky 
lazy calculus 
turner editor research topics functional programming chapter pages 
addison wesley 
abramsky 
computational interpretations linear logic 
theoretical computer science 
barber 
linear type theories semantics action calculi 
phd thesis department computer science university edinburgh 
bierman 
program equivalence linear functional language 
functional programming 
crole 
linear howe 
mccusker edalat jourdan editors advances theory formal methods pages 
imperial college press 
fiore plotkin 
axiomatization computationally adequate domain theoretic models fpc 
th annual symposium logic computer science pages 
ieee computer society press washington 
freyd 
remarks algebraically compact categories 
fourman johnstone pitts editors applications categories computer science proceedings lms symposium durham uk volume lms lecture note series pages 
cambridge university press 
gunter scott 
semantic domains 
van leeuwen editor handbook theoretical computer science volume pages 
northholland 
howe 
proving congruence bisimulation functional programming languages 
information computation 
lassen 
relational reasoning contexts 
gordon pitts editors higher order operational techniques semantics publications newton institute pages 
cambridge university press 
launchbury 
natural semantics lazy evaluation 
th symp 
principles programming languages pages charleston south carolina 
acm 
mason talcott 
equivalence functional languages ects 
journal functional programming 
moggi 
notions computation monads 
information computation 
bierman pitts russo moggi 
metalanguages applications 
pitts dybjer editors semantics logics computation publications newton institute pages 
cambridge university press 
moran sands 
improvement lazy context operational theory call need 
proc 
th acm sigact sigplan symposium principles programming languages pages 
acm press 
mosses 
denotational semantics 
van leeuwen editor handbook theoretical computer science volume pages 
north holland 
hearn reynolds 
algol polymorphic linear lambdacalculus 
journal acm 
peyton jones launchbury 
state haskell 
lisp symbolic computation 
pitts 
notes inductive inductive techniques semantics functional programs 
notes series brics ns brics department computer science university aarhus 
pitts 
existential types logical relations operational equivalence 
larsen winskel editors automata languages programming th international colloquium icalp aalborg denmark july proceedings volume lecture notes computer science pages 
springer verlag berlin 
pitts 
parametric polymorphism operational equivalence 
mathematical structures computer science 
plotkin 
lcf considered programming language 
theoretical computer science 
plotkin 
second order type theory recursion 
notes talk scott february 
reynolds 
types abstraction parametric polymorphism 
mason editor information processing pages 
north holland amsterdam 
iyer 
operational semantics sharing lazy evaluation 
science computer programming 
sestoft 
deriving lazy machine 
journal functional programming 
turner wadler :10.1.1.18.9255
operational interpretations linear logic 
theoretical computer science 
wadler 
theorems free 
fourth international conference functional programming languages computer architecture london uk 

