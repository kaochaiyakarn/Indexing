may src research report block sorting lossless data compression algorithm burrows wheeler systems research center lytton avenue palo alto california systems research center charter src advance state knowledge state art computer systems 
establishment performed basic applied research support digital business objectives 
current includes exploring distributed personal computing multiple platforms networking programming technology system modelling management techniques selected applications 
strategy test technical practical value ideas building hardware software prototypes daily tools 
interesting systems complex evaluated solely extended allows investigate properties depth 
experience useful short term refining designs invaluable long term advancing knowledge 
major advances information systems come strategy including personal computing distributed systems internet 
perform complementary mathematical flavor 
established fields theoretical computer science analysis algorithms computational geometry logics programming 
explores new ground motivated problems arise systems research 
strong commitment communicating results exposing testing ideas research development communities leads improved understanding 
research report series supplements publication professional journals conferences 
seek users prototype systems common interests encourage collaboration university researchers 
robert taylor director block sorting lossless data compression algorithm burrows wheeler may david wheeler professor computer science university cambridge electronic mail address djw cl cam ac uk digital equipment 
may copied reproduced part commercial purpose 
permission copy part payment fee granted nonprofit educational research purposes provided partial copies include notice copying permission systems research center digital equipment palo alto california acknowledgment authors individual contributors applicable portions copyright notice 
copying reproducing republishing purpose shall require license payment fee systems research center 
rights reserved 
authors describe block sorting lossless data compression algorithm implementation algorithm 
compare performance implementation widely available data compressors running hardware 
algorithm works applying reversible transformation block input text 
transformation compress data reorders easy compress simple algorithms move front coding 
algorithm achieves speed comparable algorithms techniques lempel ziv obtains compression close best statistical modelling techniques 
size input block large kilobytes achieve compression 
contents reversible transformation transformed string compresses efficient implementation compression decompression algorithm variants performance implementation widely data compression algorithms sequential data compressors lempel ziv :10.1.1.118.8921:10.1.1.14.2892
statistical modelling techniques may produce superior compression significantly slower 
technique achieves compression percent achieved statistical modelling techniques speeds comparable algorithms lempel ziv 
algorithm process input sequentially processes block text single unit 
idea apply reversible transformation block text form new block contains characters easier compress simple compression algorithms 
transformation tends group characters probability finding character close instance character increased substantially 
text kind easily compressed fast locally adaptive algorithms move front coding combination huffman arithmetic coding 
briefly algorithm transforms string characters forming rotations cyclic shifts sorting lexicographically extracting character rotations 
string formed characters ith character character ith sorted rotation 
addition algorithm computes index original string sorted list rotations 
surprisingly efficient algorithm compute original string sorting operation brings rotations initial characters 
initial characters rotations adjacent final characters consecutive characters adjacent similar strings context character predictor character easy compress simple locally adaptive compression algorithm 
sections describe transformation detail show inverted 
explain carefully transformation tends group characters allow simple compression algorithm effectively 
describe efficient techniques implementing transformation inverse allowing algorithm competitive speed lempel ziv algorithms achieving better compression 
give performance implementation algorithm compare known compression programmes 
algorithm described discovered authors wheeler working bell laboratories previously published 
reversible transformation section describes sub algorithms 
algorithm performs reversible transformation apply block text compressing algorithm performs inverse operation 
section suggests method compressing transformed block text 
description treat strings vectors elements characters 
algorithm compression transformation algorithm takes input string characters selected ordered alphabet characters 
illustrate technique give running example string alphabet 
sort rotations form conceptual matrix elements characters rows rotations cyclic shifts sorted lexicographical order 
rows contains original string index row numbering zero 
example index matrix row 
find characters rotations string column characters equal 
output transformation pair 
example step 
algorithm decompression transformation example notation introduced algorithm algorithm uses output algorithm reconstruct input string length 
find characters rotations step calculates column matrix algorithm done sorting characters form observe column matrix permutation original string permutations 
furthermore rows sorted column characters sorted 
example 

build list predecessor characters assist explanation describe step terms contents matrix reader remember complete matrix available decompressor strings index input needed step 
consider rows matrix start character ch 
algorithm ensured rows matrix sorted lexicographically rows start ch ordered lexicographically 
define matrix formed rotating row character right mod example row row rotation row corresponding row constructed rows sorted lexicographically starting second character 
consider rows start character ch appear lexicographical order relative sorted lexicographically starting second characters characters affect sort order 
character ch rows ch appear order rows ch 
example rows 
rows rows correspond rows columns respectively calculate vector indicates correspondence rows matrices sense row corresponds row kth instance ch kth instance ch note represents correspondence elements elements 
example 

form output characters characters row row rotation character precedes character construction 
substituting precedes index defined algorithm row character 
vector give predecessors character 
ic 
yields original input compressor 
example 
defined string generated front back way 
description matches pseudo code section 
sequence necessarily permutation numbers 
original string form substring sequence form subsequence repetitions generated visiting elements repeatedly 
example sequence 
transformed string compresses algorithm sorts rotations input string generates string consisting character rotation 
see lead effective compression consider effect single letter common word block english text 
example letter word assume input string containing instances 
list rotations input sorted rotations starting sort large proportion 
region string contain disproportionately large number characters intermingled characters proceed english space 
argument applied characters words localized region string contain large number distinct characters 
effect probability character ch occur point high ch occurs near point low 
property exactly needed effective compression move coder encodes instance character ch count distinct characters seen previous occurrence ch 
applied string output move front coder dominated low numbers efficiently encoded huffman arithmetic coder 
shows example algorithm 
line characters final character rotation version document 
note grouping similar characters column final characters 
completeness give details possible way encode output algorithm corresponding inverse operation 
complete compression algorithm created combining encoding decoding operations algorithms final char sorted rotations decompress 
achieves compression perform comparisons depth transformation section describes transformation example treats right hand side tree kbyte input block enc tree output stream encodes turn set turn set unusual data 
algorithm man single set probabilities table positions suffixes value point vector modifications improve block size quite large 
ho codes seen ch appear em order ch 
exam huffman arithmetic coding 
bri figures bell cite bell 
example sorted rotations 
consecutive rotations sorted list rotations version shown final character rotation 
algorithm move front coding algorithm encodes output algorithm string length index 
encodes move front algorithm huffman arithmetic coder 
running example algorithm continued 

move front coding step encodes characters applying move technique individual characters 
define vector integers codes characters 
initialize list characters contain character alphabet exactly 
turn set number characters preceding character list move character front initially compute vector 

encode apply huffman arithmetic coding elements treating element separate token coded 
coding technique applied long decompressor perform inverse operation 
call output coding process 
output algorithm pair value computed step 
algorithm move front decoding algorithm inverse algorithm computes pair pair 
assume initial value list step available decompressor coding scheme step inverse operation 

decode decode coded stream inverse coding scheme step 
result vector integers 
example 

inverse move front coding goal step calculate string characters move front codes 
initialize list characters contain characters alphabet order step 
turn set character position list numbering move character front resulting string column matrix algorithm output algorithm pair input algorithm initially algorithm compute string 
efficient implementation efficient implementations move front huffman arithmetic coding known 
concentrate unusual steps algorithms compression important factor compression speed time taken sort rotations input block 
simple application quicksort requires little additional space word character works fairly input data 
worst case performance poor 
faster way implement algorithm reduce problem sorting rotations problem sorting suffixes related string 
compress string form string concatenation eof new character appear apply algorithm eof different characters suffixes sort order rotations sort rotations suffices sort suffixes done linear time space building suffix tree walked lexicographical order recover sorted suffixes 
mccreight suffix tree construction algorithm implementation algorithm performance fastest technique operating text files 
unfortunately suffix tree algorithms need space machine words input character 
manber myers give simple algorithm sorting suffixes string log time 
algorithm describe requires words input character 
algorithm works sorting suffixes characters positions suffixes sorted array sort key sort characters 
unfortunately performance algorithm significantly worse suffix tree approach 
fastest scheme tried far uses variant quicksort generate sorted list suffixes 
performance significantly better suffix tree operating text uses significantly space 
suffix tree performance degrade considerably operating types data 
algorithm manber myers algorithm uses words input character 
algorithm fast suffixes algorithm sorts suffixes string contains characters 
algorithm works applying modified version quicksort suffixes simple version algorithm 
modifications improve speed bad performance 

form extended string number characters fit machine word 
form string appending additional eof characters eof appear 
form array words initialize array words contains characters arranged integer comparisons words agree lexicographic comparisons character strings 
packing characters words benefits allows prefixes compared bytes time aligned memory accesses allows slow cases eliminated described step 

form array suffixes step initialize array integers 
element contains represents suffix character 
algorithm complete suffix ith suffix lexicographical order 
initialize array integers 
radix sort sort elements characters suffix sort key 
done efficiently radix sort 

iterate character alphabet character ch alphabet perform steps 
iteration complete represents sorted suffixes algorithm terminates 

quicksort suffixes starting ch character ch alphabet apply quicksort elements starting ch followed ch implementation quicksort compare elements comparing suffixes represent indexing array recursion step keep track number characters compared equal group need compared 
suffixes starting ch sorted final positions 
update sort keys element corresponding suffix starting ch ch set value ch high order bits low order bits step set characters initial ch 
new value sorts position old value desirable property distinct values speeds subsequent sorting operations comparisons new elements compare equal 
basic algorithm refined number ways 
obvious improvement pick character ch step starting common character proceeding common 
allows updates step greatest effect 
described algorithm performs poorly contains repeated substrings 
deal problem mechanisms 
mechanism handles strings single repeated character replacing step steps 

quicksort suffixes starting ch ch ch ch character ch ch alphabet apply quicksort elements starting ch followed ch implementation quicksort compare elements comparing suffixes represent indexing array recursion step keep track number characters compared equal group need compared 

sort low suffixes starting ch ch step sorts suffixes starting runs sort infinite string ch characters 
observe suffixes long initial runs character ch sort shorter initial runs runs equal length sort order characters ends run 
ordering obtained simple loop suffixes starting shortest 
represent lexicographically suffix starting ch 
lowest value suffix starts ch ch 
ch suffixes start ch ch lexicographically infinite sequence ch characters sorted 

sort high suffixes starting ch ch step sorts suffixes starting runs sort infinite string ch characters 
step step direction loop reversed 
represent lexicographically greatest suffix starting ch 
highest value suffix starts ch ch 
ch suffixes start ch ch lexicographically greater infinite sequence ch characters sorted 
second mechanism handles long strings repeated substring character 
strings doubling technique similar manber myers scheme 
limit quicksort implementation perform comparisons depth record suffixes left unsorted bit corresponding elements steps complete elements array indicate sorted positions characters comparison compares characters 
unsorted portions remain simply sort limiting comparison depth 
time comparison compares characters yield list suffixes sorted characters 
repeat process entire string sorted 
combination radix sort careful implementation quicksort mechanisms dealing repeated strings produce sorting algorithm extremely fast inputs quite perform badly real input data 
currently investigating variations quicksort 
approach promising 
applying technique overlapping repeated strings caching previously computed sort orders hash table produce algorithm sorts suffixes string approximately time modified algorithm bytes space input character bytes pointer byte input character byte amortized space hash table 
approach poor performance worst case bad cases rare practice 
decompression steps accomplished efficiently passes data pass alphabet shown pseudo code 
pass construct arrays alphabet 
ch total number instances characters preceding character ch alphabet 
number instances character prefix practice pass combined move front decoding step 
arrays array defined step second pass data starting position complete algorithm generate initially elements zero column matrix vector 
ch number instances character ch 
value number instances character prefix sum ch alphabet alphabet sum sum ch ch sum ch ch total number instances characters preceding ch alphabet 
downto decompressed result 
algorithm variants example step treated left hand side rotation significant sorting 
fact implementation treats right hand side significant decompressor generate output left right code section 
choice effect compression achieved 
algorithm modified different coding scheme move front step 
compression improve slightly move front replaced scheme codes seen long time moved part way front 
exploited implementations 
simple huffman arithmetic coders step complex coding scheme slightly better 
probability certain value point vector depends certain extent immediately preceding value 
practice important effect zeroes tend occur runs take advantage effect representing run zeroes code indicating length run 
second set huffman codes values immediately run zeroes value run zeroes 
size cpu time compressed bits file bytes compress decompress size bytes char bib book book geo news obj obj pic trans total table results compressing fourteen files calgary compression corpus 
block size bits character bytes book hector corpus table effect varying block size compression book calgary compression corpus entire hector corpus 
performance implementation table give results compressing fourteen commonly files calgary compression corpus algorithm 
comparison figures bell witten cleary indicate algorithm non text inputs text inputs 
implementation algorithm uses techniques described section simple move front coder 
case block size length file compressed 
compress output move front coder modified huffman coder uses technique described section 
coder calculates new huffman trees kbyte input block computing tree input 
table compression effectiveness expressed output bits input character 
cpu time measurements decstation mips processor clocked mhz kbyte cache 
cpu time elapsed time time spent performing excluded 
table show variation compression effectiveness input block size inputs 
input file book calgary compression corpus 
second entire hector corpus consists little mbytes modern english text 
table shows compression improves increasing block size block size quite large 
increasing block size tens millions characters small effect 
block size increased indefinitely expect algorithm approach theoretical optimum compression simple byte wise move front coder introduces loss 
better coding scheme achieve optimum compression asymptotically great practical importance 
comparison compression programmes table compares implementation algorithm compression programmes chosen wide availability 
fourteen files compressed individually algorithm results 
bits character values means values individual files 
metric chosen allow easy comparison figures bell 
total cpu time total compressed mean programme compress decompress size bytes bits char compress gzip alg comp compress version known lzw tool 
gzip version lz tool 
alg algorithms back huffman coder 
comp nelson comp coder limited fourth order model 
table comparison compression programmes 
described compression technique works applying reversible transformation block text redundancy input accessible simple coding schemes 
algorithm general purpose text non text inputs 
transformation uses sorting group characters contexts technique context side character 
achieve compression input blocks characters needed 
effectiveness algorithm continues improve increasing block size blocks characters 
algorithm achieves compression comparable statistical modellers closer speed coders algorithms lempel ziv 
lempel ziv algorithms algorithm decompresses faster compresses 
andrei broder cynthia hibbard greg nelson jim saxe suggestions algorithms 
ziv lempel 
universal algorithm sequential data compression 
ieee transactions information theory 
vol 
may pp 

ziv lempel 
compression individual sequences variable rate coding 
ieee transactions information theory 
vol 
september pp 

bell witten cleary 
modeling text compression 
acm computing surveys vol 
december pp 

bentley sleator tarjan wei 
locally adaptive data compression algorithm 
communications acm vol 
april pp 

mccreight 
space economical suffix tree construction algorithm 
journal acm vol 
april pp 

manber myers suffix arrays new method line string searches 
siam journal computing volume october pp 

witten bell 
calgary canterbury text compression corpus 
anonymous ftp ftp cpsc ucalgary ca pub text compression 
corpus text compression corpus tar glassman hibbard guarino reid 
van 
hector connecting words definitions 
proceedings th annual conference uw centre new oxford english dictionary text research waterloo canada october 
pp 

available research report digital equipment systems research center lytton ave palo alto ca 

welch 
technique high performance data compression 
ieee computer vol 
june pp 

peter compress version 
posted internet newsgroup comp sources reviewed th august 
anonymous ftp gatekeeper dec com pub misc gzip version 
anonymous ftp prep ai mit edu pub gnu gzip tar gz mark nelson 
arithmetic coding statistical modeling 
dr journal 
february 
anonymous ftp wustl edu mirrors zip 
