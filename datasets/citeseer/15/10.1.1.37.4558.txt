january expect uncontrollable fits interaction don libes national institute standards technology gaithersburg md libes cme nist gov unix programs designed connected pipes created shell 
paradigm insufficient dealing modern programs demand interactively 
expect program designed control interactive programs 
expect reads script resembles dialogue may include multiple paths 
scripts include send expect sequences expect patterns include regular expressions 
high level language control flow allows different actions different inputs procedure definition built expression evaluation execution arbitrary unix programs 
job control multiple programs controlled time 
user interaction control passed scripted interactive mode vice versa time 
user treated source sink 
expect successfully deals interactive programs 
solves large classes problems unix shells 
keywords expect interaction programmed dialogue shell tcl unix uucp reprinted proceedings summer usenix conference anaheim california june 
january unix programs designed connected pipes created shell 
paradigm insufficient dealing modern programs demand interactively 
example passwd program change passwords 
passwd prompts password 
provision passing information way 
means write shell script uses passwd letting prompting reading 
impossible write script say rejects passwords system dictionary 
illustrates type difficulty user interface provided shells sh csh ksh generically refer shell rest 
discuss difficulties 
shell inability communicate interactive programs 
solution called expect 
expect program talks interactive programs script 
script expect knows expected program correct responses 
interpreted language provides branching high level control structures direct dialogue 
addition user take control interact directly desired afterward returning control script 
name expect comes idea send expect sequences popularized uucp communications programs 
programs expect generalized run user level command program task mind 
expect talk programs time 
expect possible create script solves passwd problem 
things expect requiring small amount script computer dial back login paying call 
start game rogue optimal configuration appear restart hand control 
run fsck response questions answer give control back 
connect network bbs mci mail automatically retrieve mail appears originally sent local system 
problems conceptually simple solved shell 
wrong 
hard cases 

ironically original reason having passwd perform prompting security 
january solving problem am claiming expect solve problems shell start reviewing shell capable 
process created shell standard input stdin standard output stdout standard error stderr ignore 
shell connect processes files 
shell pipes redirection purely way 
ritchie described shell pipe notation linear 
shell notation create processes standard input output cross connected 
traditional notation proc proc indicates output flows proc proc 
data flow proc proc 
entity shell interact way basis user 
viewed opposite direction user capable way interaction programs 
shell construct connections participate talk interactive programs 
prevents program interacting specially designed 
problem 
second problem shell way prevent program bypassing standard input output conventions 
programs free open dev tty communicate directly user 
bypass shell redirection 
example crypt input redirected interactively demands encryption password 
problem easy solve 
program created shell internally spawns process controlled 
spawned process established standard input standard output remain connected original program 

done security reasons 
stdin stdin stdout stdout 
shell connect processes way 

parent creates child process read child standard input write standard output 
user left connected shell plays role 
stdin stdin stdout stdout parent child january parent reads command script 
finds send commands sends data child 
finds expect commands watches output child pattern 
pattern matched parent goes command script 
interact command parent simply copies characters user child vice versa 
control may returned script user convenience 
simple ideas heart expect 
refinements allow expect address problems 
pseudo terminals pipes support terminal semantics 
example programs rogue emacs require terminal size order run run pipes 
expect uses 
logical device drivers give look feel real terminal drivers despite fact connect processes 
addition solve dev tty problem noted 
programs open dev tty speaking pty 
support paths communication flow pairs pipes 
happens standard error 
overloaded path standard output 
rationale 
expect talks child process script 
interaction copied user terminal appears user typed 
expect interactive process parent child script 
interact mode user takes control types directly child process 
expect interactive process parent child script january user sitting terminal decisions common output stream standard output standard error script 
just user may redirect standard input standard output may script 
default redirected 
true expect shell 
job control script may interact number processes simultaneously 
shows processes controlled time 
control multiple processes user job control 
expect 
script job control easier programmed shell job control hand entered 
example suppose csh type proc depending proc telling 
happens times type fg sequences times expect simple loop suffices 
example try connect eliza chess processes 
remember output unix chess program directly usable input 
user manipulated process 
effect exactly shell script reading writing user 
words source user script underlying interactive process 
illustrated user appearing alongside processes 
desired user take control appearing left side enter commands just script 
script user take control return 
moved closer emphasize near equal relationship 

window system cut paste times 

expect communicating processes simultaneously 
script control disabled logging user 
user sees script says send essentially treated just process 
expect interactive processes script january high level language important feature expect language 
described section 
expect scripts look 
expect scripts written high level procedural language 
language interpreted resembles shell ways 
elements derived lisp 
despite mixed heritage excess baggage languages omitted leaving modest capable language 
language consists core features called tcl tool command language described ousterhout 
section give brief overview details describe sample expect scripts 
tcl core consists control flow statements case 
tcl supports procedure definition recursion scoping 
unix programs may called files manipulated 
expression evaluation provided small set primitives manipulate type strings 
conversion types performed automatically la snobol 
tcl fragment swaps values variables set tmp set set tmp command define recursive factorial procedure proc fac return return expr fac expr syntax semantics sufficiently close shell meaning examples intuitively obvious 
lack space describe tcl completely described ousterhout 
matter particularly germane theory expect 
ousterhout point syntax tcl language unimportant programming language provide similar features 
salient features tcl simple expected tcl programs short 
programmable tcl applications general purpose known advance 
efficiently interpreted tcl able execute commands quickly user interaction impeded 
internally tcl allow add new commands synergistically existing tcl commands 
january bullet says tcl designed allow addition new commands 
expect adds twelve commands tcl language 
interesting new commands 
interaction commands send args sends args current process 
strings interpreted tcl rules 
example command send hello world sends characters current process 
expect action action 
waits output current process matches pattern specified time period passed 
consists single pattern list patterns 
pattern matched corresponding action executed 
result action returned expect 
exact string matched read unmatched timeout occurred stored variable expect match 
eof timeout corresponding action executed file timeout respectively 
default timeout period seconds may example set command set timeout 
fragment script involves login 
abort procedure defined script actions tcl primitives similar 
expect welcome break busy print busy continue failed abort timeout abort patterns usual shell style regular expressions 
patterns match entire output current process previous expect interact reason surrounded wildcard 
bytes output force earlier bytes forgotten 
may changed setting variable match max 
interact escape character gives control user 
user keystrokes sent current process standard output standard error current process returned user 
valid script commands may entered pressing optional escape character 
control returned interact continue command entered 
return command entered interact immediately returns argument return empty string 
interact entering commands escape character job control disabled characters may passed current process 
january job control commands close closes connection current process 
interactive programs detect eof standard input exit close usually suffices kill process 
expect interact detect current process exits implicitly close 
spawn program args creates new process running program args 
standard input standard output standard error connected expect may read written expect commands 
connection broken close process closes file descriptors 
process started spawn variable spawn id set descriptor referring process 
process described spawn id considered current process 
spawn returns unix process id note equivalent descriptor spawn id 
internally spawn uses pty initialized way user tty 
possible expect controlling terminal spawn uses default pty settings 
appropriate user spawn shell set pty parameters directly send spawn original command shell 
select spawn id spawn id returns subset spawn ids input pending 
select waits spawn id read timeout see expect command expired 
explicit command switch jobs 
variable spawn id determines current process 
spawn sets side effect script interacting process need mention spawn id 
spawn id may read written tcl set command 
example showing job control chess processes interact 
spawning move sent hand get things started 
loop move sent process vice versa 
read move send move procedures left exercise reader 
easy write long include 
spawn chess set chess spawn id spawn chess set chess spawn id force go send read move set spawn id chess send move read move set spawn id chess send move january command analogous csh bg processes run interaction presumably input necessary part interaction supplied background 
processes enter lengthy phase input takes place free run default output eventually clog pty periodically flushed 
fortunately easy 
miscellaneous commands remaining commands described detail 
complete descriptions see libes 
miscellaneous commands fall classes tracing programs may traced assist debugging 
exiting expect return exit code allowing intelligently shell scripts 
logging logging files user terminal flexible 
allows interaction user hiding interaction place programs 
examples expect scripts similar style shell scripts 
look interaction supposed control 
just shell scripts primarily consist commands user type expect scripts consist primarily interaction user see 
examples 
runs bsd adventure game rogue repeatedly configuration unusually attributes strength appears control user 
rogue exp find game rogue set timeout spawn rogue expect str break timeout close interact comments order line comment naming file explaining 
second line sets short timeout 
appropriate dealing local program respond quickly 
introduces loop control arguments loop repeats forever 
rogue started look text interest output 
rogue graphics program uses 
guarantee screens created intuitive manner expect programmers understand 
problem 
january expect find looking dialogue terminated close cause rogue go away loop restarted 
desired string loop terminated user control dialogue interact line 
second example dials phone 
reverse charges long distance phone calls charged computer 
invoked expect callback exp script named callback exp phone number 
scripts may turned executables systems support 
magic 
give user time logout exec sleep spawn tip modem expect connected send expect ok send index argv modem takes connect set timeout expect connect second line illustrates unix command interaction called 
sleep cause program block seconds giving user chance logout modem presumably call back phone number user 
spawning tip modem dials number 
modem assumed hayes protocol easy expand script handle 
matter happens expect terminates 
call fails possible expect retry point 
call succeeds getty detect dtr line expect exits prompt user login 
actual scripts usually error checking 
script illustrates command line parameters available user list named argv 
commands may passed executed program 
special flag allows execution commands script 
example expect script traced invoking expect trace script exp ellipsis indicates tracing option 
classes problems expect address 
expect addresses surprisingly large class problems shell 
time expect attempt subsume functions handled utilities 
example built file transfer capability expect just call program 
categories meant disjoint sharpen focus examples may share multiple problems 
january programs demand interactivity programs demand interactivity passwd tip easy control expect impossible shell 
fact tip special code dialing conversation quite limited power 
expect eliminates need type special code programs 
programs cross machine program boundaries making shell script run machine boundaries possible limited ways 
example shell scripts involve host log continue shell script remote host 
expect see kinds machine program boundaries 
programs read write dev tty programs read write dev tty shell scripts shell script accessing dev tty 
passwd crypt su examples programs controlled shell expect 
programs flush input interactive programs believe doing user favor flushing input detecting error 
particularly clever programs rn flush input received continue flush input short time allow communications user delays 
redirecting standard input shell ineffective programs control lost input flushing occurs 
expect hand wait desired prompt proceeding send commands blindly 
intention expect provides foundation password cracking tool 
show remind system measure lock account small number incorrect passwords tried 
passing control user script programs rogue tip telnet frequently repeated defined set commands set defined 
example telnet started logging user 
expect pass control script user provide ability 
fact expect take control time execute sequences commonly repeated commands 
ostensibly non interactive programs programs ostensibly non interactive 
means run shell script greatly diminished functionality 
example fsck run shell script options 
manual defines option follows january assume response questions asked fsck extreme caution free license continue severe problems encountered 
option similarly worthless meaning 
kind interface bad programs style 
example ftp option disables interactive prompting run script 
provides way take alternative action error occur 
expect useful programs 
example programmed answer depending question fsck 
control turned user questionable cases 
programs poorly written interfaces ousterhout observation general purpose programmable command language amplifies power tool allowing users write programs command language order extend tool built facilities 
tools include language 
examples shells emacs 
simplistic facilities rc files mail vi dbx 
tools flexibility language 
tcl designed address problem 
expecting unix tools rewritten tcl noble proposition 
similar effect achieved expect 
example expect initialize tool set commands rc file 
tcl expect presents uniform language doing 
effect expect provides way giving power tcl tools effort spent rewriting 
desired expect run background completely user input 
expect capable returning status value script meaningfully original tool task 
realistically little reason program originally run interactively return status type 
multiple programs designed expect capable connecting programs originally designed connected 
contrast non interactive filters form pipelines interactive programs attempt driven program 
eliza chess mentioned earlier examples 
complex example communication network bulletin board system 
commercial systems mci mail forward mail expecting users dial read mail interactively 
expect script dial system check mail 
mail mail process started local system fed input remote system 
mail appear originally mailed local system 
expect run background done night hour convenient 
january dynamic complex pipes redirection number projects built step linearity pipes enforced shell 
notable examples gsh 
gsh bourne shell handles graphs processes sending output process processes building set process cycle 
expect designed purpose byproduct complete control dialogue 
course result fast expect necessarily interposes order control dialogue 
screen pipe manager 
solves set problems gsh interface mouse oriented keyboard oriented 
addition rearrange connections 
pty mechanism expect similar penalty throughput provide automated control dialogue 
summary expect emulate dynamic complex pipes redirection 
simple matter emulate processes pipes graph 
automatic rearrangement possible control user signalled data 
complex redirection arbitrary fan trivial easily capabilities tee 
expect shell 
compared shell expect 
repeat shell incapable interactive dialogue expect perform 
expect compare shell 
expect powerful shell 
base language expect tcl quite powerful certainly capable doing kinds programming shell 
programming language tcl functionally replacement sh csh ksh 
noticeably missing feature redirection tcl perform calling shell 
interactive tcl little support 
history job control 
understandable considering tcl designed interactively 
additional commands added expect change 
job control supported expect strictly command shell offers interrupt keys shorthand 
typing job control characters expect affects expect processes expect interacting 
exception interact job control characters sent current process 
expect interactively pressing escape character interact designed lacks pleasant features history interrupt key job control 
interactive mode seen primarily useful experimenting powerful results possible typing expect commands directly indirectly say programmable function keys software stream modules perform interactive line editing 
january expect call shell called 

obvious question subsumed 
adding expect commands shell probably easiest implementation see little technical difficulty doing 
implementation discussion section discusses areas implementation unusual way educational large percentage readers 
source code quite readable perusal encouraged 
command language list examples section apparent functions provided expect long desired 
began thinking years ago experimented various implementations 
biggest stumbling block language 
knew needed knew write wasn sure far go particularly interested task writing utility language 
tcl solution designed specifically embeddable language 
tcl comes core commands application writer add application dependent commands 
adding expect commands relatively painless number different command designs tried finalized 
environment sun running sun os tcl library version approximately lines including comments object code additional expect source version lines object code 
clearly tcl code dominates expect 
expect wrapper tcl probably different original tcl designers role 
tcl possible base expect functionality 
prior tcl looked send expect control uucp communication programs 
quite primitive provide adequate flexibility tasks 
example system administrators embed calls uucp shell scripts repeat dialing failure 
alternatives tcl chosen emacs perl 
specifically designed provide language tools systems embedded interpreters way 
unfortunately tradeoffs numerous deserve space devote 
probably worth doing implementation compare 
multisource asynchronous expect requires multisource asynchronous primarily interact command listens characters user process time 
feature requires different implementations different unix systems probably portable part software 
berkeley unix long supported select system call permits waiting activity set file descriptors 
virtually bsd derived unix systems support select 
hand system supported equivalent select 
release supports poll comparable select large percentage sv systems re january lease forces applications poll busy waiting 
posix provided means performing multisource asynchronous inevitable 
earlier systems poll 
typically programs uucp forked auxiliary process blocked waiting data direction original process blocked waiting data direction 
consider untenable expect applications spawn processes sequentially parallel 
style communication requires extra utility processes real process requested user 
example need processes current implementation 
lack sophisticated code clear possible implementation simultaneously interact multiple processes systems lacking select poll similar 
job control section discusses interaction bsd style job control expect 
expect way controlling jobs discussed extensively section 
sense expect problem job control 
sitting keyboard running expect user may perform job control pressing job control characters affect expect program just unix program 
example default expect 
exception interact command 
expect idea client programs interested seeing job control characters characters optional escape character passed current process 
programs run raw mode rogue programs handle job control csh run full functionality 
course users choosing interact directly understand programs handle job control signals unpleasant 
example sending program catch cause stopped kernel 
program catch control expect wait 
program resumed sending presumably inconvenient 
moral dealing programs understand job control send job control signals place shell 
switching jobs internal expect interact done needing back process shell 
technique escape expect interpreter pressing interact escape character set spawn id desired process return interact return 
user interacting desired process 
throughput throughput statistics de usenix implementation papers difficult quantify performance type program 
example compare expect impact system throughput introduced canonical input processing typical human typing 
thing clear expect uses fraction real time user 
january internally expect processing heavily dependent scripts 
example rogue script earlier examines games second fun watch 
real time spent waiting game 
cpu time spent pattern matching guide script open close ioctl fork timer calls 
large amount time spent open close ioctl due inefficient technique required bsd unix locate initialize 
rogue script biased short dialogues scripts spend larger percentages time pattern matching 
guiding dialogue primary function indicates area improvement 
current tcl supplied pattern matcher improved example compiling patterns 
expect demands 
regular expression pattern matching performed input time read completes 
characters arrive slowly pattern matcher scans data times 
system play big role larger scheduling quanta drive pattern matcher frequently characters time gathered pty 
performance pattern matcher need earlier data needs studied 
comments unix shell paradigms incapable intelligently managing interactive programs 
long standing problem traditionally solved avoidance 
number interactive programs grows daily shells changed address 
expect solves problems directly elegance 
expect scripts small simple problems small simple 
am naive believe expect scripts small apparent scripts scale 
comparable style shell scripts task oriented provide synergy shell scripts call shell scripts called 
worthwhile experiment marry features expect shell see little technical difficulty doing 
interesting open questions remain buffering combined expect select command 
expect built terminal emulator look regions character graphics 
lastly expect emulate interactions window systems dragging 
requires research 
long shells interactive programs controllable expect continue useful 
jointly funded nist automated manufacturing research facility project scientific technical research services project 
scott paisley writing program called smart telnet 
ran telnet performed simple send expect conversation login 
straight line control error processing pipes lacked pattern matching job control 
january proved useful got thinking generic tool 
john ousterhout responsible tcl expect written 
john expect 
am indebted 
people important observations wrote early scripts developing command semantics 
rob ken eric newton scott paisley steve ray sandy barry warsaw 
scott ted hopp sue read read corrected sentence right 
availability design implementation expect paid government public domain 
author nist credit program documentation portions 
expect may ftp pub expect expect shar ftp cme nist gov unix programmer manual section 
don libes expect programmatic dialogue interactive programs unpublished manual page national institute standards technology february 
chris mcdonald trevor dix support graphs processes command interpreter software practice experience volume number october 
uucp implementation description unix programmer manual bell laboratories october 
john ousterhout tcl embeddable command language proceedings winter usenix conference washington january 
john ousterhout tcl overview tool command language facilities unpublished manual page university california berkeley january 
dennis ritchie ken thompson unix time sharing system communications acm volume number 
stephen shell permits dynamic rearrangement process connections windows proceedings winter usenix conference washington january 
larry wall rn read news program unpublished manual page may 
january joseph weizenbaum eliza computer program study natural language communication man machine communications acm volume number january 
don libes national institute standards technology photo don libes received mathematics rutgers university computer science university rochester 
currently national institute standards technology don engaged research help industry measure standard hack 
unfortunately nist sense humor forced write book 
