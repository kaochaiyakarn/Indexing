synthesis kernel calton pu henry massalin john ioannidis department computer science columbia university new york ny synthesis distributed operating system combines efficient kernel calls high level orthogonal interface 
key idea code synthesizer kernel generate specialized short fast kernel routines specific situations 
methods synthesize code factoring invariants bypass redundant computations collapsing layers eliminate unnecessary procedure calls context switches executable data structures shorten data structure traversal time 
applying methods kernel call synthesized read dev mem takes microseconds machine 
simple model computation called synthetic machine supports parallel distributed processing 
interface synthetic machine consists operations kinds objects 
combination high level interface code synthesizer avoids traditional trade operating systems powerful interfaces efficient implementations 
trade powerful features efficient implementation exists operating systems 
systems high level interfaces powerful features argus eden require lot code implementation added overhead systems slow 
systems simple kernel calls kernel amoeba mach little overhead run fast 
application software complex slower extra code required missing kernel functions 
goal developing synthesis distributed operating system escape trade 
want provide simple high level operating system interface ease application development time offer fast execution 
achieve goal combine ideas synthesis 
important idea inclusion code synthesizer kernel 
code synthesizer provides efficiency generation specialized code frequently executed kernel calls 
instance programmer asks operating system open file special routines read write specific file returned 
generation frequently executed system calls synthesis reduces operating system overhead 
example typical synthesis read routines contain machine instructions 
contrast bsd read call contains order lines code appendix 
second idea orthogonal interface called synthetic machine 
programmer synthetic machine presents logical multi processor protected address space 
reasons motivated model computation take advantage general purpose sharedmemory multiprocessors support growing number concurrent programs 
synthetic machine consists basic components synthetic cpus run program synthetic memory store program data synthetic units move data synthetic machine 
synthetic machine interface kernel code synthesizer independent ideas synergistic effect 
code synthesizer sophisticated implementation synthetic machines inefficient 
high level kernel call require large amount code long execution time 
kernel code synthesizer generates specialized routines kernel calls short 
high level interface layers software needed provide adequate functionality 
synthetic machine supplies high level system calls reduce number layers associated overhead 
synthesis application programmers enjoy high level system interface efficiency lean mean kernel 
test ideas designed implemented prototype system simplified kernel code synthesizer implements subset synthetic machine interface 
encouraged positive results prototype confirmed expectations performance implementing full version synthesis 
section describe code synthesizer generates optimizes code kernel 
section summarize synthetic machine interface illustrate power interface emulation unix system synthetic machines 
outline current synthesis prototype section including measurements illustrate efficiency gained synthesized code 
section compares synthesis related section concludes summary progress 
kernel code synthesizer typical operating system kernel routines maintain system state data structures linked lists 
perform function kernel routine finds system state traversing appropriate data structures takes corresponding action 
current operating systems short cuts reach frequently visited system states may require lengthy data structure traversals 
fundamental idea kernel code synthesis capture frequently visited system states small chunks code 
traversing data structures branch synthesized code directly 
section describe methods synthesize code factoring invariants collapsing layers executable data structures 
factoring invariants factoring invariants method observation functional restriction usually easier calculate original function 
consider general function big pn factoring parameter process called currying obtain equivalent composite function create pn big pn unix trademark bell laboratories 
create second order function 
parameter create returns function small restriction big absorbed constant argument small pn ae big pn create independent global data create compute small regardless global state 
allows create evaluated resulting small 
small executed times generating pays cost create cost small pn cost big pn factoring invariants name suggests method resembles constant folding optimization compiler code generation 
analogy strong difference significant 
constant folding code generation eliminates static code 
contrast factoring invariants skips dynamic data structure traversals addition eliminating code 
example unix open create read small file name constant parameter 
constant global data process id address kernel buffers device file resides 
create consists small procedure templates knows generate code basic operation read disk block process tty input 
parameters passed create determine procedures called order 
final small created filling templates addresses process table device registers 
collapsing layers collapsing layers method observation layered design separation layers part specification implementation 
words procedure calls context switches functional layers bypassed execution time 
consider example layered osi model big pn applica session pn applica function application layer calls successive lower layers send message 
line code substitution applica obtain equivalent flat function eliminating procedure call application presentation layer flat applica session applica session process eliminate procedure call embedded second order functions 
create returns code equivalent suitable line insertion 
create applica incorporates code generate flat applica create applica create flat applica technique analogous line code substitution procedure calls compiler code generation 
addition elimination procedure calls context switches resulting code typically exhibit opportunities optimization factoring invariants elimination data copying 
induction create eliminate procedure call session layer layers 
execute create applica establish virtual circuit flat applica code send receive messages may consist sequential code 
performance gain analysis similar section 
executable data structures executable data structures method observation data structures traversed preferred order 
adding executable code data structures self traversing may decrease traversal overhead 
consider simplified example active job queue managed round robin scheduler 
element queue contains short sequences code 
saves registers branches job routine element queue 
restores registers installs address timer interrupt vector table resumes processing 
interrupt causing context switch trigger current program saves current state branches directly job 
note scheduler taken loop 
queue context switch critical path order machine instructions 
scheduler intervenes insert delete elements queue 
kernel programmability previous sections described innovative programming techniques gain performance code synthesis 
historically lambda functions lisp created expressions executable lisp environment 
new problems arose code synthesis bare machine 
summarize briefly problems encountered approaches taken solve ffl inflated kernel size due code redundancy 
ffl structuring kernel correctness algorithms 
ffl protection synthesized code 
important concern synthesis kernel size inflation due potential redundancy small flat programs generated create solve problem create generates line code subroutine calls mechanism similar threaded code 
frequently invoked functions expanded line user synthetic machine executed 
rarely executed functions stored common area shared synthetic machines running threaded code 
decision expand line programmer writing create size code synthesizer depends heavily kinds facilities supported kernel hope minimize cost paid code specialization 
example synthesis create calls correspond unix open system calls similar data structures algorithms 
main difference resides actions taken system calls open fills unix data structures create places machine op codes array 
expect cost create comparable unix open 
structure synthesis kernel superficially similar traditional operating system 
kernel calls create type invoked just normal system call 
synthesized kernel calls created create invoked kernel mode usually trap branch synthesized code 
construction synthesized kernel calls perform subset actions normal kernel calls 
subsets calculate results cause side effects specific case 
synthesized code protected memory management 
address space page table synthesized code placed protected pages inaccessible user program 
prevent user program kernel executing code outside protected pages synthesized routines accessed jump table protected area address space 
user program specify index table synthesized routines entered proper entry points 
protection mechanism similar lists prevent forgery capabilities 
synthesized routines run supervisor state 
transition user supervisor state trap instruction 
synthesized code perform privileged operations accessing protected buffer pages 
just returning control caller synthesized code reverts previous mode 
synthetic machines model computation synthetic machine unit protection 
data synthetic machine freely shared carefully protected access synthetic machines 
synthetic machine runs program kinds components ffl synthetic cpus run program ffl synthetic memory store program data ffl synthetic units sio move data synthetic machine 
synthetic machine may number 
thread control scheduled physical cpu 
segment memory accessible synthetic machine 
examples include program segments shared memory synthetic machines 
sio provides input output synthetic machine 
examples sio ordinary files devices network communications 
interesting example program running synthetic machine multiplexor supporting synthetic machines form hierarchical structure similar vm 
child synthetic machines scheduled may sub schedule different scheduling algorithms 
similarly allocated parent synthetic machine 
sio system calls child synthetic machine synthesized parent sio system calls 
careful application collapsing layers method decreases cost indirection hierarchy synthesis 
synthesis kernel implements root synthetic machine running real machine 
scheduler memory management file system part multiplexor program running root synthetic machine 
actual user programs run child synthetic machines 
conceptual nesting synthetic machines introduce run time overhead code synthesis particular collapsing layers 
existing operating systems entities corresponding synthetic machine 
examples virtual machine vm unix process similar synthetic machine mach tasks distributed teams similar multiple synthetic cpus 
systems share von neumann model computation kernel interfaces orthogonal synthetic machine interface describe 
synthetic machine interface synthetic machine create kernel call generative synthesizing code executive kernel calls terminate reconfigure query 
destroy synthetic machine call terminate 
synthetic machine lifetime reconfigure changes state query reads state 
synthetic machine kernel calls summarized second column table synthetic machine heading 
analogous synthetic machines component created 
generative create kernel call returns code synthesized executive kernel calls include read write addition terminate reconfigure query 
read kernel call moves data synthetic machine write moves data 
table contains partial summary interface synthetic components 
execution new situations require new code synthetic components may resynthesized create kernel call reuse option modified set parameters 
synthetic machine interface object oriented 
synthetic machines synthetic components encapsulated resources users ask perform kernel calls defined table 
pioneer object oriented systems hydra eden argus achieved performance adequate prototype mach comparable bsd unix 
believe synthesized code take performance synthesis step ahead current systems 
section justify expectations preliminary measurements 
resource sharing protection support shared memory model parallel processing synthetic machine share address space communication sharing 
semaphores control synchronization 
currently developing high level language support concurrent programming synthetic machines 
efficient sharing synthetic machines requires care enforce protection synthetic machine synthetic cpu synthetic memory synthetic create generative creates creates thread control allocates memory creates ports opens files allocates devices terminate executive kills components kills thread control frees memory kills ports closes files reconfigure executive resumes 
changes priority resumes 
changes priority wait event changes protection initiates sharing changes protection query executive gets priority gets id gets uid gets priority gets state gets id gets size starting address gets device type state device pointer read executive unused unused unused reads file rec 
messages input operation write executive unused unused unused writes file sends messages output operation table examples synthetic machine kernel calls illustrate calls give sio create example opens file 
file name read write option returns code executive calls 
call read read file write write 
find file length current seek position file attributes query 
reconfigure call changes attributes 
terminate closes file 
boundaries 
may shared cooperating synthetic machines 
original creator sends appropriate routines synthesized sharing peer synthetic machine protected sio channel 
peer uses routines map synthetic machine 
access routines peer determine access privileges 
support message passing model parallel distributed processing include network traffic 
sharing similar sharing creator sio port inter process communication passes access routines peer 
access routines passed protected sio channel forging possible 
protection mechanism flexible achieved capabilities constant number bits routines implement kind control example access control lists 
furthermore creator may reconfigure sio way invalidate earlier access routines revoking access rights conceded 
progress target hardware single cpu systems synthesis intended run von neumann style cpu memory management unit large physical memory 
synthesis prototype runs experimental machine processor mhz bit wide bus 
debugging measurements prototype hardware provides single step real time trace facilities 
addition rom monitor contains assembler disassembler process manager style interface 
commercially available machines sun macintosh ii similar products 
multiple address space send receive messages synthesis supports parallel machines shared memory model messagepassing model 
efficiency lack code synthesis support high level languages assembly language write full version synthesis kernel 
assembler supports recursive calls translating static templates code synthesized 
portability application software important due volume decentralized development 
believe small kernel code efficiency paramount importance concessions 
recognize writing synthesis kernel different processor say dec vax family may non trivial experience 
operating system defined interface model computation implementation 
optimizing compiler high level language supporting code synthesis lisp high run time overhead plan write different set programs implement synthesis type hardware 
implementation emphasize performance particular features hardware maintain rigorous compatibility synthetic machine interface 
version software version synthesis kernel written incrementally top small kernel 
moment factoring invariants method input output devices sio including terminal ram file system 
round robin scheduler executable data structures method provides fast context switch synthetic machines synthetic cpus 
designing message passing kernel primitives support distributed processing 
core high level message passing support optimization collapsing layers method 
program measured reads character memory special device file equivalent unix dev mem 
significant part program system call read byte program shows promise efficiency gained synthesized code 
single example prove approach shows far code synthesis go 
program include sio sio struct myfile char buf int myfile dev mem read myfile buf myfile trace generated code running prototype included appendix second program similar 
char int read myfile example common situation overhead system call amortized larger amount useful 
programs measured corrected hp sun progr 
sec sec sec sec sec progr 
sec sec sec sec sec table measured figures comparison numbers measured prototype system appear measured column table 
comparison purposes translated numbers measured prototype system corresponding ones machine running mhz bit data bus 
configuration similar sun hp workstations 
translation obtained hand counting cpu cycles machines results appear column titled corrected 
programs run hp workstation hp ux sun sun os mc model unix operating system 
results appear table columns hp sun 
prototype experience synthetic components sio benefit synthesized code 
improvement comes elimination code check parameters states remain call call 
concrete example read system call bsd included appendix current prototype includes unix hierarchical file system 
addition file systems exist synthesis 
file systems consist file servers running synthetic machines known sio ports local remote file service 
current hierarchical file system may incorporated kernel accessible special type sio 
file servers return synthesized code speed file access 
music synthesizer program written run application prototype system 
application consists stages 
note sequencer running feeds voice sampling synthesizer voice 
voices second stage go summing program sixth sends output analog converter port 
music synthesizer runs real time khz sampling rate demonstrated speed operations context switches 
developing variant language called lambda support code synthesis high level language 
lambda serve purposes 
plan build portable version synthesis written language 
second believe code generating programs efficient applications just operating systems 
high level language lambda methods available application programmers 
third type checking synthesized code non trivial need languages support 
comparison systems main difference synthesis operating systems combination synthetic machine interface kernel code synthesizer 
operating system offers high level interface potential generate efficient code 
unix evolved large system fourth berkeley distribution system interface remains approximately different variants unix synthetic machine interface orthogonal 
best knowledge unix system uses kernel code synthesizer 
kernel amoeba examples small distributed operating system kernels 
encourage layers software written top kernel 
synthesis differs high level synthetic machine interface code synthesizer 
mach offers object oriented interface isomorphic specialized synthetic machine 
mach task corresponds synthetic machine mach thread mach port network sio mach messages network sio read write mach virtual memory 
synthetic machine uses interface activities child synthetic machines may nested parent 
systems mach kernel code synthesizer 
emerald object oriented integrated language system 
synthesis lacks language support emerald particular sophisticated typing system 
compensation emerald objects may constructed run time way similar synthesized code kernel calls synthesized 
combined ideas synthesis 
kernel code synthesizer produces specialized extremely efficient code system calls 
second orthogonal object oriented highlevel interface derived simple model computation 
combination gives synthesis unique advantages 
kernel code synthesizer reduces high level interface inefficiency problem 
high level interface removes slowdown due multiple layers software built small kernels 
efficiency derived code synthesizer demonstrated prototype system 
example specialized read system call takes fifteen microseconds 
comparison hp ux systems running similar hardware need microseconds equivalent non specialized read call 
expect better full system efficient sio kernel calls including file systems network communications devices 
implementing full version synthesis sun workstations machine 
kernel design implement language support transaction processing real time support advantage synthesized code 
believe unique combination simplicity efficiency synthesis excellent system write execute programs 
acknowledgments perry metzger mike schwartz eric jul comments improved presentation 
gail kaiser chip maguire raj jonathan smith helped previous version 
equally important ed hee paul varied contributions project assistance laboratory facilities 
amd hitachi intel motorola contributed hardware parts project 
accetta baron bolosky golub rashid tevanian young 
mach new kernel foundation unix development 
proceedings usenix conference pages usenix association 
black lazowska noe 
eden system technical review 
ieee transactions software engineering se january 
james 
multiuser development system 
master thesis cooper union advancement science art new york city 
bell 
threaded code 
communications acm june 
black hutchinson jul levy 
object structure emerald system 
proceedings annual conference object oriented programming systems languages applications pages acm september 
black hutchinson jul levy carter 
distribution types emerald 
ieee transactions software engineering se january 
cheriton 
kernel software base distributed systems 
ieee software april 
cheriton zwaenepoel 
distributed kernel performance diskless workstations 
proceedings ninth symposium operating systems principles pages acm sigops october 
operating systems 
addison wesley publishing revised edition 
liskov scheifler 
guardians actions linguistic support robust distributed programs 
proceedings ninth annual symposium principles programming languages pages january 
henry massalin 
multitasking development system 
master thesis cooper union advancement science art new york city 
quarterman silberschatz peterson 
bsd bsd examples unix system 
acm computing surveys december 
ritchie thompson 
unix time sharing system 
communications acm july 
stoy 
denotational semantics scott strachey approach programming language theory 
mit press 
tanenbaum mullender 
design capability distributed operating system 
technical report ir department mathematics computer science vrije universiteit amsterdam november 
wulf cohen jones levin pierson pollack 
hydra kernel multiprocessing operating system 
communications acm june 
trace generated code show trace produced execution code synthesized program section 
instruction saves registers 
instruction gets address kernel data space instructions adds offset point file table 
file table contains address specialized read routine static data 
specialized read routine address placed register pieces static data extracted file seek position base memory address 
specialized routine called seek position added base memory address 
byte read seek position updated 
read ok status code signalled function returns 
registers restored status saved move trap ace sp ad move ad lsl ad fc ff lea adc move ae lea sys ae move call ae jsr add move addq fc move cc aea rts aec cdf sp 
af move sr af rte subq fa bne trap 
trace code measured clocks addr op codes instruction trap eb da jsr ff edc move ed ee ed addq fc move cc ff rts move sr sp da rte trace expected code system call exits 
describe optimized code synthesis expect produce full version 
explain happening versions read call help illustrate effect full code optimizer implemented 
places long code optimal 
seek position base address kept specialized read function file table 
doing eliminate need instructions save restore registers full optimizer implemented instructions collapsed memory indirect addressing modes 
need keep base address seek pointer 
trivial modification seek routine shown allows just pointer 
result applying optimizations 
execution trace vanilla unix read long included summarize actions section unix comparison comparison purposes analyzed bsd source available 
introduce terms 
file descriptor indirect index entry system open file table 
open file structure includes address inode contain actual data stored file file pointers set functions manipulate file type inode socket operations 
examine happens file opened 
copen checks permissions allocates open file structure 
namei interprets path name care special cases symbolic links mounted file systems 
file exists inode returned 
called create actual file 
open file structure filled file descriptor leading returned 
length source code order lines see read open file 
read arguments calls 
open file structure examined check permissions validity checks performed buffers 
ino rw generic function read write file called indirectly 
consistency checking calls function 
case regular block device file special processing done take advantage block interface block read bread function eventually invokes device driver actual operation 
character device files device driver invoked directly 
system call returns number characters read 
just going code counting secondary procedures called counted lines code 
great deal code consists multiple validity tests case statements large variety cases handled piece code 

