reconciling system requirements runtime behavior feather fickas van lamsweerde computing services support solutions los angeles computer science department university oregon informatique universit catholique de louvain 
considers problem runtime system deviations requirements specifications 
deviations may arise lack anticipation possible behaviors environment agents specification time evolving conditions environment 
discuss architecture fly monitoring customization requirements design reduce gap system requirements runtime behavior 
architecture deployed scenarios requirements execution reconciliation meeting scheduler system 
builds previous goal driven requirements engineering runtime requirements monitoring 
keywords self adapting systems requirements monitoring goal driven requirements engineering inconsistency management obstacles deviation analysis system customization 

requirements engineering re concerned elicitation high level goals achieved system envisioned refinement goals operationalization specifications services constraints assignment responsibilities resulting requirements agents humans devices software 
re process results specifications realistic specifications violated time time running system implements 
inconsistencies expected actual system behavior arise specification validated user system implemented correctly 
reasons agents environment may behave ways anticipated unfeasible model requirements time pot ii post deployment evolution environmental conditions initially valid assumptions environment longer valid fic 
complementary approaches followed manage runtime violations lam lam anticipating possible requirements time 
lam presents systematic technique 
runtime detection response violations 
response comprises making acceptable thefly changes requirements 
acceptable mean changes satisfy high level goals underpinning requirements violated 
dynamic approach naturally complements static 
static analysis remains highly cost effective means verifying validating specifications complete identification possible obstacles evolution life system may unachievable 
attempts mitigate completeness problem overly defensive specifications may rob system sufficient runtime performance brittle difficult maintain 
cases dynamic analysis comes play 
explores dynamic approach elaborating requirements monitoring paradigm suggested fic 
approach requires alternative system designs explicitly represented system parameters alternative refinement trees 
kinds parameters extracted requirements specification monitored parameters observing behavior control parameters changing behavior 
consider example meeting scheduler system assertion says participant receives invitation meeting email time constraints week 
monitored parameter derived assertion participant actual response time number weeks control parameter periodicity reminders sent participant 
fly reduction gap requirements runtime behavior achieved follows requirements time specifications event sequences monitored generated requirements specifications design time architecture cooperating software agents built alternative system designs explicitly represented system parameters alternative design trees runtime system observed generic monitor instances specified event sequences signalled generic requirements reasons parameter values design trees 
case value control parameter associated assertion violated changed send reminders frequently participant case shift alternative design give phone call participant send email participant secretary 
approach integrates kaos goal driven specification methodology dar lam flea runtime event monitoring system coh :10.1.1.56.8810:10.1.1.36.7311
section provides background material kaos flea 
section proposes architecture self adapting system requirements behavior reconciliation 
section illustrates ideas examples meeting scheduler system lam fea :10.1.1.56.8810
section concludes discussing current status related 

background kaos methodology kaos methodology aimed supporting requirements elaboration process high level goals achieved agents composite system operations objects constraints assigned software environmental agents 
questions addressed addition usual questions addressed standard specification techniques 
methodology comprises specification language elaboration method meta level knowledge local guidance method enactment 
introduce features see dar lam details :10.1.1.56.8810:10.1.1.36.7311
underlying ontology types concepts sequel 
object object thing interest composite system instances may evolve state state 
general specified specialized way entity relationship event object autonomous subordinate instantaneous object respectively 
objects characterized attributes invariant assertions 
action action input output relation objects action applications define state transitions 
actions characterized pre post trigger conditions 
agent agent kind object acts processor actions 
agent performs action effectively allocated agent object states object observable controllable 
agents humans devices programs goal goal objective composite system meet 
refinement links relate goal set subgoals called refinement means satisfying subgoals refinement sufficient condition satisfying goal 
refinement links relate goal alternative set refinements means satisfying refinements sufficient condition satisfying goal 
goal refinement structure system represented directed acyclic graph 
goals concern objects refer 
constraint constraint implementable goal goal formulated terms states controllable individual agent 
goals eventually refined constraints 
constraints turn operationalized actions objects strengthenings pre post trigger conditions invariants respectively 
alternative ways assigning responsible agents constraint captured responsibility links actual assignment agents actions operationalize constraint captured corresponding performance links 
assumption assumption fact taken granted agents environment 
goals assumptions need refined enforced 
appear auxiliary assertions needed prove correctness refinements 
assumptions tentatively true change 
note assertion may assumption constraint depending design may assumption design constraint require operationalization actions 
language constructs construct kaos language level generic structure outer semantic net layer declaring concept attributes various links concepts inner formal assertion layer formally defining concept 
generic structure instantiated specific types links assertion languages specific type concept instance 
example goal appears stage elaboration meeting scheduler system get participants constraints known scheduler 
concept type goal partially declared formally defined follows goal achieve instanceof concerns meeting participant scheduler 
informaldef meeting scheduler know constraints various participants invited meeting days appointment formaldef meeting participant scheduler invited scheduling cd knows constraints declaration part specification states goal concerned keeping agents informed object states ii refers objects participant scheduler iii refined subgoals 
turn constraints assignable single agents fact constraint assignable scheduler agent stated declaration constraint 
formal assertion defining goal written real time temporal logic borrowed koy 
classical operators temporal referencing man state 
previous state eventually time past past 
real time restrictions indicated subscripts koy cd denotes day time unit 
formal assertion predicate invited means current state instance invited relationship links variables sort participant meeting respectively 
invited relationship participant agent meeting entity declared sections specification agent participant 
constraints tuple timeinterval timeinterval relationship invited links participants card meeting card participant meeting invited requesting declarations constraints declared attribute participant attribute formal definition 
mentioned earlier operations specified formally pre postconditions example action input requesting meeting arg output meeting res dompre requesting scheduled feasible scheduled feasible deadend note invariant defining invited requirement domain description pre postcondition domain descriptions 
effective requirements constraints refining goals additional pre postconditions invariants strengthen corresponding domain assertions ensure constraints specified 
flea monitoring system flea language provides constructs expressing temporal combinations events 
runtime code monitor combinations automatically generated flea system 
runtime system comprises historical database management system equipped inference engine communication mechanism gather events distribute notifications occurrences event combinations 
rest section gives quick overview capabilities flea coh 
flea introduces events special relations parameter time event occurs 
parameters event attributes 
events external events called basic events 
typically represent applications actions autonomous agents 
events declared external string type events user identified string providing constraints 
events received flea automatically timestamps adding timestamp parameter parameter relation storing event underlying database 
example chp records user chp provided constraints time experiments far events exchanged flea autonomous agents bus currently implemented flat file log system history 
implementations may substitute socket connections reasons efficiency 
external events events may defined terms temporal patterns events specific event occurring time event inbetween 
table gives various temporal patterns currently definable flea 
table temporal patterns flea counts events computed events numerical parameter values summed computations yield state information represented relations database 
events turn defined terms changes relations values 
states events defined terms 
example counting reminders sent participant detecting reminders issued 
events built elementary events occurring system 
feature useful detecting violation complex assertions keeping track frequency violations deciding time react 
syntax meaning event followed event excluding event followed event event 
time event followed event time delay late dl event followed event time delay dl computed deadline time occurrence 
architecture self adapting systems shows levels involved requirements behavior reconciliation process 
development level goal specification elaborated kaos assertions violated identified translated flea event definitions kaos specification implemented system parameterized cooperating agents 
system execution level agent traces observed monitor instantiated event definitions generated development level violation file produced monitor analyzed appropriate response parameter tuning shift alternative design kaos graph corresponding implementation 
response specific agent instances sending reminders unresponsive participant axel 
identify deviations specified runtime behavior monitor observe system action 
approaches considered restricting observation automated part system ii observing possible including quantities environment appropriate interfaces 
possibilities correspond notions internal external monitor respectively pet 
second approach requires appropriate interfaces accessing state environmental agents designed 
architecture self adapting system various steps involved fig 
detailed 
development level 
elaborate goal refinement operationalization graph identify breakable assertions specification formalize 
formal refinement patterns may help discovering hidden assumptions goals dar 

check monitorability identify monitored parameters 
internal monitoring objects involved breakable assertion belong automated part system consistent image external monitoring additional interface objects need introduced 
breakable assertion monitored parameters identified 
general system adaptation manual agent development time runtime kaos spec implementation environment system monitor agent agent agent agent events violation file messages assertion compiler kaos assertions flea event definitions automated adaptation ok refinement graph ko adaptation take place single assertion violation specific agent deviation accidental occasional 
quick adaptations encourage human agents deviate easily 
recurring deviations trigger appropriate customization 
appropriate thresholds defined deviation statistics gathered test threshold reached 
easily done counting summing facilities provided flea 

identify reconciliation tactics 
breakable assertion choice enforcing restoration actions control parameters identified assertion ii finding alternative assertion achieve parent goal refinement graph 

translate breakable assertions flea 
definitions event sequences monitored generated real time temporal logic assertions 
section illustrate process various kaos assertion patterns 

elaborate traceable architecture implementation 
functional goals constraints assigned software agents need mapped modules agent architecture traceability links established monitored control parameters specification implementation respectively 
runtime level 
state information accessible monitor 
appropriate communication channel established monitor software agent architecture 
alternative tactics followed history monitored parameters available 
passive communication software agent provides interface questioned monitor 
poll agent appropriate sampling rate depending time granularity sure meaningful state transition missed 
requires huge amount historical data stored 
problem lack robustness missing single transition may result incorrect perception subsequent states 
active communication software agent notifies events monitor monitored parameters change instance predicate true relationship instance created entity created kaos event occurring event count increased change value object attribute problem lack modularity software agents need reprogrammed additionally signal relevant state transitions see section 
approaches combined transition monitoring regular checkpoints resynchronization 
note cases relevant events need watched notified corresponding state transitions monitored parameters derived breakable assertions identified 

update flea event definitions necessary 
event sequences monitored consistent breakable assertions current specification 
monitor reconfigured case customized shift alternative design new kaos flea assertion generation applied accordingly 

customize system 
violation file produced monitor analyzed reconciliation tactic chosen applied 
specification implementation modified accordingly monitor reconfigured necessary 

illustration meeting scheduler example shows refinement operationalization subtree goal achieve meeting scheduler specification 
alternative designs considered achieve goal getting participant constraints explicit requests access electronic agenda 
design relies different set assumptions 
consider alternative 
refined subgoals achieve achieve 
subgoal constraint assignable agent 
states request time constraints sent participant invited meeting meeting participant invited invited constraint operationalized action 
second subgoal refined milestone driven tactic dar request transmitted communication agent request answered time correct way participant response transmitted communication agent responses collected scheduler 
note assertions assumptions agents environment electronic mail communication assumption automated agent environment second assumption expected behavior human agents 
goal achieve breakable assertion 
formalized meeting participant refinement operationalization achieve reconciliation parameter tuning consider goal achieve replay various steps described previous section 
development level 
identify breakable assertions specification formalize 
assertion achieve identified breakable formalized shown 

check monitorability identify monitored parameters 
assertion internally monitorable relationships involved assertion accessed automated part system corresponding monitorable events 
note underlying assumptions internally monitorable knowing message transmission successful requires introducing acknowledgment 

identify reconciliation tactics 
consider participant responding time constraint request 
adaptations envisaged increasing frequency reminders email achieve achieve achieve achieve resp assumptions participant participant minimize assumptions participant participant trig ing request participant knows time constraints participant secretary switching alternative design participant electronic agenda 
tactic control parameter frequency reminders appear parameter action control agent 
second tactic control parameter participant send reminder appear parameter action 
tactic precise adaptation rule average number reminders meeting participant greater increase frequency reminders start sending reminders sooner second tactic precise rule average number reminders meeting participant greater reminder send reminders alternative contact participant see rules implemented flea 

translation flea 
monitor violations achieve step negate assertion meeting participant assertion expressed terms relationships case 
associated events defined transitions corresponding predicates true 
flea declaration produced event types constraints requested external string string constraints received external string string parameters type string represent meeting participant involved 
flea definition late event generated constraints requested event occurs followed corresponding participant meeting parameter values event days 
constraints received violation definition deadline participant meeting late constraints requested participant meeting constraints received participant meeting deadline 
elaborate traceable architecture implementation 
software agent derived kaos specification parameterized operations methods discussed 
runtime level 
state information accessible monitor 
time request constraints sent response received agent notifies event monitor 
event sent flea bus incorporated flea event database 
example simplicity timestamps converted dates constraints requested axel meeting constraints requested meeting constraints requested jeff meeting constraints received martin meeting constraints received jeff meeting 
update flea event definitions 
step necessary shift alternative design 

customize system 
assume time days participant axel returning constraints meeting time 
days event generated 
translated flea time units 
flea stored violation file constraint received violation axel meeting show information customization adaptation rules 
assume external events generated invitation sent reminder sent definitions invitation sent external string string reminder sent external string string average number reminders sent meeting generated definition participant reminder definition participant avg reminder sent participant invitation sent participant avg events generated adaptation rules 
definition single event type handle rule look constraint handler adaptation needed transition participant start participant reminder participant start reminders ahead participant frequency reminders participant constraint handler adaptation needed event generated participant reminder value starts exceed event parameters set current value assumed accessible relation start reminders ahead current value 
imagine previously axel rarely late respond time constraints changes behavior frequently late respond 
axel average climbs threshold system detect increase frequency reminders week week start sending sooner days deadline days 
due generation event constraint handler adaptation axel axel similar treatment adaptation rule change automatically redirecting reminders axel secretary continue unresponsive 
reconciliation shifting alternative design alternative refinement goal achieve get participant time constraints accessing electronic agenda 
assumptions participants give access agenda ii agenda date 
agent accessing personal agendas called 
monitored participant participant basis 
violations detected trigger switch explicitly asking participants constraints rely inaccessible outdated agendas 
space limits preclude complete exposition worth noting points customization tactics 
suppose default design electronic agendas 
case failure participant solution dynamically switch alternative design getting constraints explicit request participant participants continue dealt agendas accommodate refinement annotated invariant meeting participant invited participant participant system adaptation 
runtime software agents responsible various design alternatives need know exactly participants controlling 
sets assertion updated runtime adaptation events indicate alternative switch agent 
events derived failure event constraint handler notify message participant meeting agenda failure participant meeting add agenda handler notify message participant meeting agenda failure message participant meeting remove 
discussion novelty approach lies combination goal requirements time reasoning eventbased run time monitoring system adaptation tactics 
discussion focus combination skip mention alternatives individual elements combination alternative requirements approaches alternative treatments temporal database reasoning 
related similar efforts exist deriving real time monitors system requirements documentation scr framework pet 
similarity approach automated generation monitor 
difference pet simulates composite system finite state automata detect deviations state fsa represents equivalence class histories system 
approach suited testing 
focusing soft assertions detect deviations opposed strong requirements 
pet consider problem recovering detected deviations 
dynamic inconsistencies consider related concept deviation running process process model studied 
pet state machines modeling human environment process support system 
system gir tackled bridging design gap form interfaces 
approach design time assumptions say completion fields forms cast runtime expectation agents 
able detect mismatches assumptions report developers users 
kaos flea marriage takes idea step key kaos explicit treatment requirements process 
team worked design environment argo rob experiments underway try connect flea argo 
looked problem requirements adaptation 
identified set requirements strengthening weakening transformations scenarios generated static analysis dur 
see promise tying scenarios generated runtime monitoring 
current status currently implementing prototype self adapting system meeting scheduler system 
experimentation prototype needed show feasibility limitations approach 
plan build kaos flea generator top grail kaos environment dar making attributed grammar mechanisms supported syntax tree engine grail rep 
pre compiled library flea assertion patterns available frequent goal assumption patterns 
guidelines adapting specialized assertions provided 
fickas begun second example problem test architecture propose 
problem configuring enterprise network pushes area non functional requirements reliability issue monitored parameters availability connectivity specific resources subnets wan control parameters alternative enterprise internetworking designs security issue monitored parameters access patterns known attack signatures control parameters firewall settings access control lists performance issue monitored parameters lan routing cycle resources control parameters bandwidth reservation policies host priority scheduling 
early results suggest fit interacting agents model composite system design fic kaos goals represent enterprise networking requirements generation network monitoring flea runtime adaptation system enterprise network consideration alternative designs 
fickas enterprise networking problem explore tighter linkage static dynamic analysis 
particular test specific self adaptation architecture valid 
approach currently explored generation adaptation tests kaos specifications verifying correctness specification tests target adaptation strategy embodied runtime system 
early results point fit components attempting integrate 

coh cohen feather fickas automatic monitoring software requirements proc 
th international conference software engineering boston may 
cugola di fuggetta ghezzi framework formalizing inconsistencies deviations human centered systems acm transactions software engineering methodology vol 
july 
dar dardenne van lamsweerde fickas goal directed requirements acquisition science computer programming vol :10.1.1.36.7311
pp 

dar darimont van lamsweerde formal refinement patterns goal driven requirements elaboration proc 
fse fourth acm sigsoft symposium foundations software engineering san francisco october 
dar darimont massonet van lamsweerde grail kaos environment goal driven requirements engineering proc 
icse th intl 
conference software engineering boston may 
dur requirements transformations phd thesis computer science department university oregon fea feather 
implementation bounded obligations 
proc 
th knowledge software engineering conference chicago illinois usa 
fea feather fickas finkelstein van lamsweerde requirements specification exemplars automated software engineering vol 
october 
fic fickas helm automating design composite systems ieee transactions software engineering fic fickas feather requirements monitoring dynamic environments proc 
re nd international symposium requirements engineering york ieee 
gir redmiles shipman iii 
agent support communication developers users software design 
proc 
ninth knowledge software engineering conference monterey september 
koy specifying message passing time critical systems temporal logic lncs springer verlag 
lam van lamsweerde darimont massonet goal directed elaboration requirements meeting scheduler problems lessons learned proc :10.1.1.56.8810
re nd international symposium requirements engineering york ieee 
lam van lamsweerde divergent views goal driven requirements engineering proc 
viewpoints acm sigsoft workshop viewpoints software development october 
lam van lamsweerde letier 
leaving inconsistency proc 
icse workshop living inconsistency may lam van lamsweerde letier 
integrating obstacles goal driven requirements engineering ucl research report rr 

supported cooperation internet architecture lab intel 

fickas validation self adapting systems supported arpa part quorum group 
man manna pnueli temporal logic reactive concurrent systems springer verlag 
pet peters 
deriving real time monitors system requirements documentation proceedings third ieee international symposium requirements engineering re doctoral consortium january pot potts schematic scenarios understand user needs proc 
dis acm symposium designing interactive systems processes practices techniques university michigan august 
rep reps teitelbaum 
synthesizer generator system constructing language editors 
springer verlag 
rob robbins hilbert redmiles 
extending design environments software architecture design 
proc 
eleventh knowledge software engineering conference syracuse september 
