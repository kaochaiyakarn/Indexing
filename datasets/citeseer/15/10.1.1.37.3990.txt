coordinating java agents www ciancarini rossi dipartimento di scienze dell informazione zamboni university bologna bologna italy mail cs unibo introduce jada programming toolkit coordinating agents written java 
coordination concurrent threads distributed java objects achieved shared object spaces 
exchanging objects object spaces java agents applets exchange data synchronize actions internet lan single host inside java enabled browser 
access object space performed set methods objectspace object 
operations inspired linda language powerful solve coordination problems 
show jada coordination kernel complex coordination architectures 
ii www great potential supporting distributed multiuser applications especially java 
fact www seen programming platform integrate internet services multiuser applications proactive reactive processing required groupware workflow evans rogers chen cowie 
investigate www software architecture integrated java design distributed multiuser applications 
java quite effective kind applications offers uniform software platform implement software running heterogeneous architectures 
java multithreaded language distributed programming lea 
typically integrated libraries sockets support distributed processing 
unfortunately programming distributed systems sockets notoriously boring difficult error prone 
alternative strategy consists adding java high level coordination mechanisms ciancarini rossi 
mechanisms usually take account java application accessed browser 
hotjava www browser internet application java 
different browsers ability run java code embedded html documents 
way html documents active easy put animation html pages 
mechanism extend browser natural way implementing example editors spreadsheet groupware applications distributed objects 
important consequence having java enabled browsers hotjava java application spread network 
simplest way take advantage feature think java application just document 
watching java application means run host possibly integrated browser 
java way obtain build piece java code run browser applet 
currently standard jada distributed object model remote method invocation rmi object oriented rpc mechanism 
simple client server relationship allowed rmi flexible express kinds relationships distributed system activate components lewis 
rmi allows remote applets enact client server relationship things get difficult program complex cooperation protocols 
www infrastructure developing implementing business applications distributed collaborative environments need ability manage coordination remote java components 
topic structure sect introduce jada extends java coordination mechanisms sect discuss implemented jada sect show simple jada programs 
sect prove jada effective coordination kernel designing shade coordination language multiagent architectures sect discuss implemented shade jada sect show multiagent shade programs 
sect compare approach similar systems sect concludes 
toolkit programming distributed java applications jada toolkit java uses principles coordination languages manage cooperation concurrent distributed activities 
recall basic notions coordination languages carriero gelernter 
coordination concerns actions synchronization communications service invocation provision 
computation actions processes 
coordination languages focus separation coordination computation meaning independent dual concepts meaning orthogonal carriero gelernter 
coordination languages include small set operations shared data spaces linda gelernter focus communication issues laura tolksdorf focus service design issues 
jada introduces java principle coordination adding minimal set coordination primitives carriero gelernter particular add operations access multiple object spaces 
fact designed jada aiming simplicity performance 
jada linda minimalist coordination language 
differently linda implementations usually include preprocessor linda slightly modifies host language syntax jada set classes access object spaces allowing users keep standard java development tools 
read methods access object spaces concurrent local remote components establish complex relationship reflecting real inter dependencies 
show closely jada works classes introduced jada package 
jada implemented set classes allow java threads java applications access associatively shared coordination medium small set operations useful build distributed application 
coordination medium local application applet objectspace shared threads remote shared applications applets 
case object space server running host accessible network 
object spaces objectspace object container offering set methods accessing contents 
method put objects objectspace read methods get objects objectspace 
create object space write objectspace object space new objectspace put object object space write object space new string foo access objectspace associative mechanism method parameter object matching pattern 
object method return taken object space matches matching pattern applies read method difference read removes object object space 
matching operations distinguish formal actual objects formal object instance class class meta class java 
object actual object 
jada matching rules ffl actual actual actual items match implement interface method applied object object space passing parameter object returns true 
implement interface method equals applied object object space passing parameter object returns true 
ffl actual formal formal item matches object instance 
ffl formal formal formal items match represent class 
matching mechanism jada object oriented means inheritance applied matching objects 
type returned read operation subclass specified object inheritance applied formal formal matching 
instance object space new object non formal object stored object space 
jada matching rules simple powerful expressive 
actual actual matching customizable equals mechanism flexible write integer wrapper class ad hoc matching rules object matches object contents read call 
times needed way associate values integer string represent sense integer counter record name address phone number 
introduce tuple class object container class extended matching mechanism 
tuples jada tuple set objects items implemented jada tuple class 
example jada tuple tuple tuple new tuple new integer test tuple includes items say cardinality item integer object second string object 
define actual formal items tuple way defined jada 
tuples match cardinality item matches corresponding item usual jada mechanism check items match 
tuple tuple new tuple new integer test matches tuple tuple new tuple new integer new string getclass order exchange tuple generally object threads need perform pair read operations time jada need rendez vous communication 
fact suppose threads ta tb want exchange message ta put message inside object space tb read message object space 
ta performs operation tb performs read operation wait tb simply continues execution tuple stored object space 
tb performs read operation able read 
tb performs read operation ta performs operation tb blocked object satisfy read request available ta performs operation 
read methods blocking 
want thread blocked matching object read operations available nb read nb methods access object space way read matching object available simply return null sophisticated flavors read aborts time available 
allow remote access object space jada net jada net classes provided 
simple client server architecture manages object spaces fact object space shared remote resource accessed object space server 
object space server addressed ip address host runs usual socket connections specific port number specified 
way run object space servers network applications independently operate distributed object spaces 
multithreaded server class translates requests received class calls methods objectspace class 
fact objectspace communicate sockets 
uses objectspace perform requested operations 
class extends objectspace changing internals keeping interface behavior apart new constructor new methods 
object just objectspace provides access remote object space run host network 
interface remote object holds real object space requests perform read operations eventually return result 
serialization handle remote object space access need classes provide ffl method dump object contents byte stream order able send tuple network save state file 

ffl method restore tuple set bytes read byte stream 

tasks operations usually need dealing distributed objects referred serialization operations 
starting version java language integrated support kind operations course needed rmi 
historical reasons jada born long rmi provide added flexibility jada java build serialization mechanism allows serialization mechanism ffl serialization 
object want serialize implements defined code methods respectively dump object stream build object stream 
ffl serialization 
object want serialize implement object defined object type passed jada runtime system method class 
done client server side 
interface implemented classes serialize objects 
classes defined code dump restore methods serialize object 
jada system initialized default serializer integer float string classes provided system build java serialization support preliminary tests object faster 
tuple class extends offers support serialization relies serialization support tuples items order dump restore 
note tuple class implements interface tuple object field tuple 
details implementation objectspace objectspace object jada object container offers set thread safe access methods 
thread safe means accessing objectspace different threads time safe monitors handle requests avoiding problems critical regions 
methods usual read multiple non blocking time variants 
methods just wrappers methods real engines class 
synchronization repository management code part methods 
allows easily redefine objectspace behaviour extending class just 
example method objectspace takes care putting specified object object space reply pending read requests 
version sends tuples object server asks manage storing replying 
applies version 
need just change methods deal remote tuple manager object socket connections talk 
objectspace thread thread thread local threads accessing object space object objects access possibly remote object space 
includes objectspace object manage object space 
time performs request spawns new thread perform requested operation 
architectural point view stub skeleton system wrote version jada uses rmi access remote objectspace object implementation turned slower original code 
analyze behavior jada program distinguish main cases ffl objectspace shared concurrent threads belonging application situation symbolically depicted fig 
shape picture represents thread running application 
thread thread thread interacting object space objectspace methods 
objectspace object manages access takes care handling critical regions managing 
note thread may blocked calling method perform blocking read operation 
ffl objectspace shared concurrent threads belonging different applications 
case architecture access shared space show fig 
thread thread part application thread part different 
ones object access object space uses private object space 
thread performs request calling method object request forwarded object network connection runs thread thread thread thread proxy thread proxy thread proxy objectspace remote threads accessing object space thread handle 
thread run object server corresponds remote thread request true optimizations applied concept easier understand 
see situation automatically replicated inside application runs threads created handle remote requests behave just threads local objectspace giving evidence implicit scalability jada architecture 
programming jada jada allow threads exchange data quite easy task better 
jada coordinate threads easily solving known coordination problems ffl server client model server read requests form tuples tuple space 
client performs request putting tuple tuple space 
ffl master worker model master put jobs form tuples tuple space reads results tuple space 
workers read jobs tuple space execute task put result tuple space 
ffl producer consumer model decouple producer consumer tuple space temporary repository data exchanged 
ffl mutual exclusion tuple token enter critical section thread need get token enter section 
exiting section thread releases token token tuple put back tuple space ffl message passing synchronous asynchronous sender puts message tuple space synchronous case waits ack tuple 
receiver reads message tuple space synchronous case puts ack tuple tuple space 
simple coordination rule transactions jada especially useful www applications need support rule processes workflows logically distributed transactions 
situations jada singleton object transactions cases need test delete replace multisets objects 
multiset rewriting powerful coordination paradigm allows natural definition logically distributed system set concurrent agents andreoli 
singletons including single object multiset rewriting concept multiset set elements multiple copies 
basic multiset rewriting model number rewriting rules associated multiset 
rewriting rule simply pair multisets called head called body 
rule fires rule head matches target multiset result firing consists deleting target multiset elements corresponding head writing back target elements corresponding rule body 
language multiset rewriting model shade rule coordination language agents 
active objects agents react coming environment obeying coordination rules 
shade agent multiset representing state set rewriting rules associated multiset 
communication agents performed putting items receiver multiset 
java applets certainly active 
run different browsers need coordinate instance implement groupware applications 
introduce shade java extending jada concept logically distributed transaction call coordination rule 
shade shade program collection classes object shade application instance class 
think object shade application agent agent world 
class shade program contains set methods coordination rules defining behavior objects instances class 
class extended inheritance behavior modified adding new rules 
objects class instances state 
object state multiset case tuple space changes coordination rule fires rewriting state object receives message 
shade rule head body 
head guard trigger method gets items tuple space body puts items 
rule activated satisfying guard remove matching items tuple space simply check existence action performed 
action ffl writing items object tuple space ffl writing items objects tuple spaces sending message ffl create new object 
shade active objects coordination medium tuple space properties similar interaction machines andreoli 
means action writing objects tuple spaces performed special form multicast 
message address pattern messages delivered object name matches pattern 
way easily express basic mechanism point point multicast broadcast communications 
messages persistent new object created receives messages generated creation addresses match name 
object shade name class state 
name pattern deliver messages 
type defines object behavior shade program collection classes definitions class set rules 
state contents multiset associated object 
consider simple program class ping class ping send pong pong done terminate class pong class pong send ping ping done terminate example shows classes ping class pong class 
behavior described ping class composed methods separated 
method activated item ping appears object multiset 
method activated message sent object name matches pong message item pong 
message delivered item pong put pong multiset 
pong instance pong class class message triggers pong class method 
second method classes triggered item done causes termination object 
methods composed fields 
field trigger method action 
triggering fields ffl read items list method triggered items items list contained object multiset 
ffl items list method triggered items items list contained object multiset items removed multiset 
action fields ffl code written host language performs computations needed send create fields see 
ffl items list items em items list put object multiset 
ffl send destination items list message containing items list items generated sent object name matches destination pattern 
ffl create name class items list object name name behavior described class class created 
initial multiset object items list 
describes object located 
ffl terminate object terminated 
shade java shade java syntactic extension java coordination features shade rules fact translated methods executed concurrent threads 
object tuple space objectspace containing just tuple objects 
shade java program consists set classes class may include set rules operations ffl read list tuples read matching tuples local tuple space reporting substitution 
ffl list tuples fetch matching tuples local tuple space reporting substitution 
ffl method execute java method returns boolean value 
ffl list tuples put local tuple space tuples list tuples 
terminate terminates local tuple space 
ffl send dest list tuples send dest tuple space list tuples 
ffl create class object list tuples create new tuple space named object inheriting class class initial state list tuples 
shade java rule includes parts head including read 
head transaction local tuple space 
operations performed commit body executed 
body including send create 
communication represented send tuple operation flavors ffl broadcasting objects receive tuple 
ffl multicasting class name instance objects class receive tuple 
ffl unicasting object name object receives tuple 
receivers responsible receiving tuple look tuple space tuples matching names 
tuple space persistent new born object receives relevant tuples sent creation 
describe code fragment coordinates subscription participants auction 
define classes auctioneer participant time server signal timeout seconds 
class auctioneer send participant alarm time read subscribed part send participant timeout 
starts showing items class participant read name send subscribed name 
wait item class time sleep send timeout system started main 
create participant participant participant create participant participant participant create create auctioneer fig 
see possible trace second participant tries subscribe late forbidden join auction 
initially auctioneer fire method activates participants time time server auctioneer part part time start auction subscribed wait subscription time show item 
time wait subscription subscribe ok subscription subscription possible trace server 
local state auctioneer includes tuple start auctioneer firing includes wait subscription firing 
local state participant initially includes name auctioneer initialization contains tuple subscription time server contains tuple 
objects execute method participants subscribing seconds join auction 
example shows behavior shade java program items object space represent actual object state 
start auctioneer subscription 
state usually changed rules fire event occurs timeout raised programming style possible powerful multiset rewriting paradigm multiple object transaction performed shade java 
implementing coordination language coordination kernel implementation shade prolog tcl tk expect castellani ciancarini 
prolog host language clauses tcl tk programming user interfaces shade coordination implemented mixture expect scripting language tcl tk plus socket libraries 
intended shade www switched host language java uniform coupled html universal implementation platform abandoned prolog tcl tk expect 
current shade implementation completely written jada agent language clauses java 
means shade java extension jada primitives shade coordination model 
fact shade java compiler precompiler java compiler extended jada classes 
active objects created time stay host 
object communicates global object space private tuple space 
object includes code class code consists set methods parallel threads 
private tuple space represents object local state contains tuple multiset satisfying guard method method fires 
method fire object suspends waiting new tuples coming outside 
parallel threads synchronize java mechanisms monitor synchronization primitives linda operations tuples local state usually done jada ciancarini rossi 
object space meta tuple space ciancarini implements send create shade operations 
operations put object space special tuples interpreted runtime support 
object space implemented tables message table object table 
message table includes tuples dest msg created 
objects query message table associatively looking tuples 
table persistent meaning independent senders possible receivers tuples 
object table includes tuples class name object name tuple list created create 
current implementation objects created host running object space plan new implementation class declared rooted host new object created host 
summary behavior shade components ffl objects check rules fire run send create send requests remote tuple space read new messages remote message space ffl tuple space listens connection objects manages object creation message storing centralized approach storing messages useful coordinate applets browsers default security mechanism allows connect server applet code loaded 
agent programming shade java show shade java designing building coordinating www multiagent application 
example demonstrates www potential ruling workflows applications field electronic commerce 
build auction bidding system distributed internet order provide services users ffl auctioneer sells items best offer ffl participants buy items participating auction ffl observers passive auction 
distinguish phases phase auctioneer auction public newsgroups mailing lists www site 
auctioneer provides information package explaining modalities users interested auction 
users simply observe auction actively participate bidding 
case informed bids buy item 
second case actively participate bidding sending bids item produced credentials credit card number example 
phase auctioneer puts item auction 
auctioneer decides timeout waiting time reception participant messages timeout long likes 
auctioneer send notification messages users connected auction 
phase auctioneer sends communication registered participants observers connected 
communication contains time item 
phase participant receives communication containing item send answers participant wants send new bid higher unsubscribe participant wants give 
phase auctioneer receives answers participants timeout 
auctioneer react reception answers schema communication auctioneer compares 
greater new value auctioneer sends communication containing new value participants observers 
auctioneer resets time phase restarts 
communication unsubscribe auctioneer eliminates participant list participants 
timeout auctioneer informs participants item sold value higher value 
auctioneer proceeds putting sale items phase closing auction 
value equal value auctioneer archives item proceeds selling items closes auction 
participants observers see progress bidding www browsers 
interface interface designed shown fig 
html frames format interface page 
auction bidding www bidder interface page auction bidding customers includes frames 
top left shows item sold 
second top right form usable insert bid skip auction item see auctioneer falling item sold 
bottom page shows flowing string denoting current bid bidder name 
applets fig depicts applet agents animate interface page positions corresponding shown fig 
agent agent item cartoon bid display agent agent applets auction system agent bid interactive allows customer place bid 
applet active waiting user input 
customer interactive agent choose amount increment current bid displayed applet display 
customer insert username amount chosen choice button fig 
shows user press button send offer 
agent item button allows skip current item auction 
agent cartoon animates representing current auction progress finished falls 
animation sequence images 
agent display shows current bid owner 
agent especially critical show information bidders 
critical agent auctioneer logic coordinator system run host 
decides offer valid tells agent display current bid sells item agent displayed applet html page programmed shade 
fig 
show logic structure auction bidding system 
tuple space run server machine running auctioneer security constrains imposed java 
agents constrains 
describe discuss shade java code implementing behavior agents fig 

omit html code rendering page java methods invoked clauses 
applet auctioneer 
tuple space agent coordinating auction system agent auctioneer represents auctioneer show items sold receives accepts bids assigns sale 
shade code implements coordination bidding 
class auctioneer extends bid bid cartoon car display dis init item read bid bid display display item num send bid auctioneer item num display auctioneer timestamp auctioneer starts auction local state contains tuple fires method 
method initializes local state tuples agents activated fig 

item goes sale displayed agent class display named dis second item sale class display named dis 
second method shown coordinates bidding 
auction starts base price input price sent agents list bid participating current auction 
message sent unicast agents class bid listed bid list 
fact agent bid name bid html pages participating auction item 
tuple argument id form item denotes item sold demo picture car 
necessary synchronize participant page showing sold item 
item id auctioneer agent decide bid valid raised current item 
allows www browser free offer load html page outside auction system possibly coming back join auction 
integer read item integer timestamp timestamp read bid bid display display timestamp send bid display timestamp methods receive bid validate bid increases current bid new bid broadcast participants 
method reads bid tuple argument new bid current bid counter counts new bids check time period new bids arrive 
java method checks new bid valid 
valid counter increased value stored variable valid java method returns null 
tuple generated fire method 
second method sends display bid agents increments timestamp counter 
fact bid numeric id display bid agents keep time order bids 
methods implicitly sequential 
sleep sleep sleep time sleep time methods implement timeout function 
simulate auctioneer counting declaring sale item withdrawing item offers received 
timer sleep sends signal time 
example agents seconds bid bids arrive seconds 
difference justified order give time customer browser receive display interface page 
third method puts local state tuple check time activates method 
string tuple tuple tuple read cartoon cartoon send cartoon continue timeout java method checks new valid bids arrived 
string tuple assigned value continue timer reset value bid string sold multicast agents cartoon item interested current item auction starts 
init bid bid cartoon car display dis timestamp timestamp item bid bid cartoon car display dis init item init bid bid cartoon car display dis timestamp timestamp item bid bid cartoon car display dis finished item methods initialize auction items 
finished method handles termination 
applet bid agent bid functions ffl sends offers auctioneer ffl knows time updated current bid 
code simple 
class bid extends implements runnable integer read item num send num method user sends bid button submit 
current bid amount compute new bid sent auctioneer id current item avoid possible confusion 
timestamp timestamp integer timestamp timestamp timestamp timestamp methods manage tuple bid 
java method checks sequence incoming bids comparing timestamp private counter 
applet display agent display shows current bid broadcasted auctioneer 
code similar methods agent bid 
class display extends implements runnable integer timestamp timestamp integer timestamp timestamp timestamp timestamp methods activated tuples sent auctioneer 
applet cartoon agent cartoon waits auctioneer declaration item sold animate java method 
class cartoon extends implements runnable applet item agent item waits tuple sold activates button item load item page 
class extends implements runnable java method sets boolean variable activates button graphics 
related jada developed context pagespace project ciancarini 
main idea basis pagespace exploit coordination technology enhance www middleware 
projects pursue similar goal different approaches 
fact explicitly refers linda approach quite different described 
integration www browsers helper applications extremely possible activate external application deliver data displayed research team designed flexible modular www browser architecture linda programming language 
independent tools implementing different part www browser activated needs sharing screen space responses user interaction 
allows highly modular architecture new services tools added modifications homogeneous framework 
order allow cooperation helper modules shared tuple space 
tuples allow upgrade simple activate data paradigm browsers helper applications complete coordination protocol 
instance coordinate distributed digital orchestra browsers simulating musical instruments possibly running different machines extract shared tuple space tune played note note 
instrument aware instruments new ones added fly middle performance 
features define client side coordination toolkit easily implementable jada 
wu linda toolkit simple interface www browser www server implementing tuple space service 
access shared tuple space provided clients users fill html form appropriate linda command interact tuple space 
main application show disc load viewer allows glance check current disk usage computers cluster workstations 
workstation hosts wu linda client posts tuples shared tuple space describing current load disks controls 
tuples collected rendered user friendly way html browser querying application 
features wu linda define server side coordination toolkit easily implementable jada 
jada applets similar distributed active objects brown najork 
program written obliq executed browser 
high level primitives communicate running possibly remote browsers 
bauhaus web designed yale homeland linda similar spirit wu linda toolkit 
main idea consists standard browser access bauhaus server 
bauhaus coordination language nested multiple tuple spaces multisets case controlling hierarchical structure pages web site associating agents activities pages 
instance attribute page list users acting page displayed graphic icon interact ad hoc cooperation services 
javaspaces waldo provide mechanisms distributed persistence data exchange code written java 
basic coordination model flat multiple tuple spaces 
tuple called entry defined typed group objects 
entry written searched deleted lookup operations 
javaspaces support transaction mechanism build atomic multiple operations multiple javaspaces 
active objects ask notify entry written matches template 
actual implementation currently available difficult really compare system 
jada provides ffl coordination inside object oriented programming framework syntax extension java just set classes 
data type jada java object 
ffl dynamic tuple creation object tuple created new different constructors provided order build tuple string array object simply set arguments seen 
ffl multithreading support jada multithreading aware different threads access tuple space blocking request managed thread level 
ffl open systems support time threads applications perform operation tuple space 
ffl multiple tuple associative access provided modified flavors read requests order allow multiple matching tuples 
shown jada kernel building complex internet languages introducing shade java language extending usual linda mechanisms rewriting rules concept 
shade java coordination platform build distributed programs applets running different www browsers 
put simply shade methods specify coordination protocols java objects control graphic interface distributed application 
currently engaged developing shade java concept 
especially interested integrating concept coordination interoperable platforms corba 
similar approach explored andreoli 
jada shade available evaluation page www cs unibo rossi jada 

robert tolksdorf discussions suggestions 
support italian cnr murst 
andreoli ciancarini pareschi interaction machines trends object concurrent computing agha wegner yonezawa eds mit press cambridge ma pp 

andreoli freeman pareschi coordination language facility coordination distributed objects theory practice object systems 
brown najork distributed active objects computer networks isdn systems 
carriero gelernter coordination languages significance communications acm 
castellani ciancarini rossi shape shade coordination system technical report ublcs dipartimento di scienze dell informazione universit di bologna italy 
chen cowie java role distributed collaboration concurrency practice experience 
ciancarini 
distributed programming logic tuple spaces new generation computing 
ciancarini rossi multi agent process centered environment integrated www proc 
th ieee workshop enabling technology infrastructure collaborative enterprises ieee computer society press boston pp 

ciancarini tolksdorf pagespace architecture coordinate distributed applications web computer networks isdn systems 
ciancarini rossi jada coordination communication java agents mobile object systems programmable internet vitek tschudin eds volume lecture notes computer science springer verlag berlin pp 

evans rogers java applets corba multi user distributed applications ieee internet computing 
gelernter 
generative communication linda acm transactions programming languages systems 
nicol orchestration service www browsers accessories proc 
nd int 
world wide web conference chicago il 

integrated approach collaborative computing ph thesis dept computer science yale university new haven ct lea 
concurrent programming java 
design principles patterns addison wesley 
lewis 
client server software headed 
ieee computer 

www meets linda linda global www transaction world wide web journal 
tolksdorf 
laura coordination language open distributed systems technical report technische universitat berlin fachbereich informatik 
waldo 
specification revision technical report sun microsystems javasoft lab 
