adaptive forms interaction paradigm entering structured data martin frank pedro szekely university southern california information sciences institute admiralty way marina del rey california martin frank acm org szekely isi edu software applications solicit input user forms paradigm emulates equivalent 
exploits users familiarity suited input simple attribute value data name phone number 
forms paradigm starts breaking user input may may applicable depending previous user input 
forms manifests sections marked fill entered question simple electronic forms suffer problem space taken input fields applicable 
possible approach making relevant sections appear hand write program fragments hide show 
alternative developed form specification language context free grammar encodes data dependencies input accompanying run time interpreter uses novel layout techniques collapsing entered input fields blending input fields possibly come showing applicable sections form 
keywords data entry layout parsing user interfaces human computer interaction adaptive forms tool producing context sensitive form interfaces 
system initially displays overview main sections form initial set fields user fill 
depending values user enters adaptive forms progressively adds new fields form 
example form entering household information show user fields entering spouse name user entered married marital status field 
main design goal adaptive forms entering structured information rapidly errors 
target applications specification air campaign objectives structured objects consisting verb deny gain aspect deny gain actor country branch armed forces location country region time period 
parts structured object sub structure possible values depend values specified parts 
example aspects gained different aspects denied interface needs compute menus aspect field dynamically fillers fields 
similar requirements arise virtually application domain 
example adaptive form best explained example 
written grammar operational objectives fictional southern california emergency response center 
shows initial screen 
field labelled evacuate ensure currently active field highlighted thick border red brick background color hard see black white screenshot 
remaining fields computed looking ahead input grammar possible completions current sentence 
required fields indicated solid border optional fields dotted border 
captions beneath fields give indication goes 
row tells current field required may contain evacuate ensure field required possible contents determined filled current field third field optional 
second row required starts 
third fourth rows entirely optional 
shows interface user typed ev character character tab character 
adaptive form auto completes input disambiguating input entered similar auto completion personal finance program emacs editor 
response cursor advances field interface shows nesting level ahead evacuate clause field expanded fields evacuate 
lower pane shows possible choices current field 
shows state user typed dm 
marina del rey highlighted yellow possible choices character unfortunately nearly impossible distinguish background black white screenshot arrows point highlighted choices 
input grammar evacuation possible city county interface uses multi column format headers convey user 
order possible values current field defined forms designer may alphabetical martin frank pedro szekely 
adaptive forms interaction paradigm entering structured data 
proceedings acm international conference intelligent user interfaces pages san francisco california january 

emergency response center example initial screen 
emergency response center example screen 
emergency response center example screen der domain specific order cities shown line coast near los angeles listed north south 
shows interface user clicked selecting current choice mouse equivalent typing disambiguating prefix pressing tab key 
top level clause completed reverts single row layout conserve screen space see objective clause 
nesting level shown 
clause active clause department choice highlighted green choice matching user input meaning hitting tab key select 
addition auto completion department shown low contrast field 
shown example entry user defined text custom city 
possible cases input user defined text expected choices user convenience users strongly encouraged stay pre defined choices 
case interpreter accepts input question case users explicitly press type button deviate standard choices 
form specification specification language adaptive forms context free grammars 
notation similar backus naur form augmented labels attached non terminal left hand side production 
labels generate prompts fields headers menus 
grammar rules illustrate notation evacuate 
emergency response center example screen evacuate domestic animals civilians law enforcement personnel city county convention writing grammar specification symbols quotes represent non terminal symbols grammar symbols single quotes domestic animals represent terminals grammar symbols double quotes labels attached non terminals 
developers think grammar defining set sentences user enter language parsing view defining data users enter structured editor view 
encourage structured editor view non terminals represent object types terminals represent literal values type 
production shown illustrates specification structured object containing attributes 
terminal evacuate thought marker structured object distinguish objects having attributes types 
terminal thought marker attribute distinguish objects structure 
second production defines primitive type specifies values instances type 
third production illustrates definition sub types 
type defined having subtypes city county 
means attribute declared hold filled city county 
form example specification initially fields corresponding symbols expansion 
third fields filled literals evacuate behave labels tabbed automatically 
choices second field evacuate 
contain literals expansion non terminal domestic animals choices fourth field evacuate 
columns cities counties 
important aspect adaptive forms trivial extend specification include new data 
example suppose want extend form allow intersection streets building lincoln boulevard way 
modify rule include new element called define new rule city county location building road road adaptive forms interpreter constructs forms appropriate 
system set produce short forms initial form look described fields 
user selects building fourth field interpreter determines user entering location adds new fields form enter roads pre filled 
system set produce expanded forms initial form contain fields fields original example plus new fields required evacuation intersection 
new fields marked optional user fill enters building field location city county name entered 
happens system knows user entering converts fields optional required 
user enter building optional fields removed 
show complete grammar generate screen shots running example 
require grammar unambiguous precisely right hand sides non terminal sets intersect 
restrictions facilitates writing recursive descent parser requires backtracking 
section grammar provides user defined symbols 
particular grammar users input city names grammar contain 
definition consists name symbol regular expression allowed character sequence quoted string shown user 
regular expressions user input 
za za custom city cardinal positive number free form text note allow user defined symbols active time introduce ambiguity 
example active time tell selected input los angeles 
restriction somewhat situations tell apart cardinal practice currently disambiguate pre fixing user defined symbols symbols unique city county just 
section grammar contains actual rules 
southern california emergency response center objective city city pacific santa monica venice beach marina del rey del rey el segundo manhattan beach redondo beach county county los angeles county orange county ventura county objective objective evacuate evacuate domestic animals civilians law enforcement personnel evacuate clause evacuate city county ensure ensure ensure water supply roads performer performer performer fire department city police department city department county national guard coast guard red cross time time time time phase time time event occurence disaster day abandon search survivors day plus minus clause cardinal phase phase phase phase ii phase iii area area modifier area area city county run time interpretation layout adaptive forms interpreter stand windows application called client application unix pipe mechanism 
adaptive forms interpreter notifies client application data parse tree user submits form ok button submits data quits adaptive forms interpreter apply button just submits 
terminology section 
grammar consists regular expressions rules regular expressions rules example grammar 
rule name label expansions rule expansions city county 
expansion consists zero symbols 
individual symbol non terminal literal regular expression rule single expansion consisting literal followed non terminal performer expansion phase rule consists regular expression 
recursive descent parsing technique opposed shift reduce technique lalr parsing parse tree explicitly represented times 
convenient algorithm laying fields grammar current state implemented recursive function parse tree 
start user competes input field trivially expand parse tree 
done placing initial symbol top parse tree pushing rules single expansion parse tree left derivation encounter rule expansion need user input decision expansions follow 
running example start symbol right hand side expansion objective expanded 
rule objective non terminal expansion trivial expansion process stops non terminal trivially expanded reason doing clear shortly 
initial parse tree shown 
terminology objective active non terminal currently need user input decide expansions follow path root active non terminal called active path parse tree 
control screen layout look ahead factors 
forward look ahead determines far ahead active non terminal looking 
look ahead determines far ahead leaf non terminals active path looking 
see diagram 
example initial screen running example forward look ahead go forward active non terminal objective alternatives 
labels alternatives evacuate evacuate clause ensure ensure 
fields screen produced transparently overlaying alternatives 
screen look ahead applied procedure looking ahead 
shows effect setting look ahead zero shows effect setting look ahead setting forward look ahead zero 
illustrates trivially expand non terminal parse tree doing clause appear different clause effect force look ahead 
experience optimal forward look ahead optimal look ahead zero 
obvious trade overly shallow look ahead leaves users dark overly deep look ahead may confuse large number fields 
addition deeper look ahead demands computational resources encountered situation issue 
related system closely related texas instruments implements interactive parser grammar albeit aimed natural language understanding 
simple tiled columns layout presenting possible sentences collapse entered part sentence keeps showing choices past fields consume large amount screen space 
type grammars parsing algorithms systems different 
accepts ambiguous grammars uses parser push automata 
adaptive forms driven unambiguous grammar uses recursive descent parser 
research confused earlier syntax directed editors see overview focus forms simple languages general purpose programming languages 
tools building forms support dynamic hiding exposure fields 
system written tcl tk runs web browser written tcl tk 
allows developers write tcl scripts executed time user objective objective forward look ahead depth look ahead depth look ahead depth look ahead depth enters value field 
allows scripts modify form adding deleting fields 
achieve dynamic behavior developer needs attach script field create define layout new fields careful write scripts remove fields longer needed 
system done automatically 
nice aspect scripts purposes validating input dynamically calling application procedures generate menus plan extend adaptive forms application programming interface allow developers define procedures dynamically compute set terminals non terminal perform input validation cumbersome impossible encode grammar 
systems amulet constraints specify relationships fields values set choices field computed values fields 
amulet allows constraints create new graphical objects possible write constraints add delete fields form 
developers 
forward look ahead look ahead zero compare 
forward look ahead zero look ahead compare explicitly write programming language code purpose 
dynamic forms system provides capabilities hide expose fields form 
dynamic forms allows forms organized hierarchy forms interpreter provides facility users hide expose branches hierarchy 
feature allows users conveniently view large forms 
main difference adaptive forms fields exposed hidden user control data user entering 
systems complementary envision adding ability open close top level sections form 
dynamic forms provides capabilities validate propagate field values developers write java code implement features forms 
current variable input focus completely static form users change input focus tab key clicking field enter data subsequent field go back edit previous field losing values entered 
fully dynamic form allowed subsequent field may may applicable previous field users enter previous field users go back change previous field possibly losing data entered entered desired sail area go back decide power boat 
current solution allow editing previous fields resetting field losing data entered adaptive form interpreter determine dependencies fields allow users edit previous field preserve subsequent data value previous field impact structure current sentence 
recursion grammar currently prohibits form recursion possible specify non terminal appear variable number times 
limitation apparent database query application adaptive forms possible sentence select 
number clauses variable application 
current gap measure fixed number non terminals called expand epsilon null clause 
envisioned solution allow recursion grammar enhance run time interpreter detecting cycles 
upcoming variable number fields ellipsis optional fields clause 
clause 

database query application adaptive forms aid mission planning application programming interface api domain encountered need application programming interface lets controlling application adapt grammar user moves 
specific situation imagine tables database attributes query language allows arbitrary joins 
practically impossible compute static grammar encompassing possibilities front combinatorial explosion involved 
skeleton grammar read choices computed database user goes 
shows snapshot adaptive forms query interface international emergency relief operations driven static grammar developed conjunction sims project 
web version current implementation windows version amulet toolkit currently plan offer web implementations intended machines high network bandwidth high processing power desktop workstations intended lower bandwidth low latency network connections little processing power hand held personal digital assistant cellular modem implementation straight java re implementation current interface client machine downloads entire grammar interpreter locally interprets communication server 
implementation interpreter resides server side common gateway interface cgi program sends plain hypertext markup language html pages client time 
order minimize server round trips implementation plan making leaf non terminals current parse tree active non terminals user simultaneously initial choice objective clauses running example submit page server cutting round trips running example 
currently preliminary cgi interpreter adaptive form grammars usability lags far windows version 
experience adaptive forms limited encouraging 
system constructing editor allows air campaign planners specify objectives rules constructing database query interface rules 
objectives editor allows users enter different kinds objectives developed consultation domain experts 
simulated exercises deployed routine 
performed formal usability studies determine users fact enter objectives faster editor typing paraphrase english original design goals appears empirically 
grammar objectives editor built handed developers integrated software 
developers able documentation help enhance grammar construct new grammar different domain 
adaptive forms attractive developers produce apparently custom built high quality domain specific form user interfaces having deal user interface toolkit 

preliminary cgi web version stage enhanced capability accepting dynamically computed grammars adaptive forms double easy context sensitive query interfaces databases 
gratefully acknowledge darpa funding mastermind project part human computer interaction initiative 

aho ullman 
principles compiler design 
series computer science information processing 
addison wesley reading massachusetts 

arens knoblock 
shen 
query reformulation dynamic information integration 
journal intelligent information systems june 

zimmermann lee burns atwood 
dynamic forms enhanced interaction abstraction forms 
proceedings interact fifth ifip conference human computer interaction pages 
chapman hall london england 

jeffries rosenberg 
comparing form language user interface instructing mail program 
proceedings chi gi acm conference human factors computing systems graphics interface pages toronto canada april 

myers mcdaniel miller 
amulet environment new models effective user interface software development 
technical report cmu cs carnegie mellon university school computer science november 

stallman 
emacs extensible customizable self documenting display editor 
technical report artificial intelligence laboratory massachusetts institute technology august 

neal editors 
structure editors environments 
computers people series 
academic press san diego california 

ross thompson miller 
menu natural language understanding 
proceedings st annual meeting association computational logistics pages boston massachusetts june 

ross thompson 
usable natural language interfaces menu natural language understanding 
proceedings acm conference human factors computing systems pages boston massachusetts december 

thistlewaite ball 
active forms 
fifth world wide web conference 
www conf inria fr html papers overview 
html 
