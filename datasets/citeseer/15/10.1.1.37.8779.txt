relationships design patterns walter zimmer forschungszentrum informatik bereich und neu karlsruhe germany email zimmer fzi de catalogue design patterns contains design patterns mutual relationships 
organize relationships different categories revise design patterns relationships 
able arrange design patterns different layers 
results simplify understanding structure catalogue making easier classify design patterns apply design patterns software development 

couple years object orientation gained attention field software engineering 
initial experiences object orientation software engineers facing fundamental problems designing reusing applications libraries solved current methods tools 
growing number people consider design patterns promising approach system development addresses aforementioned problems especially object oriented systems cf 
beck beck coad shaw john pree :10.1.1.46.8603:10.1.1.136.2555
main idea design patterns support reuse design information allowing developers communicate effectively 
new design patterns discovered described applied research groups 
development tools supporting design pattern approach 
new field software engineering important questions arising different design patterns discovered related 
characteristics relationship 
patterns address similar problem area 
possible combine design patterns 
criteria classifying design patterns categories 
publications adequately addressed issues :10.1.1.136.2555:10.1.1.136.2555
similar pattern descriptions architecture alex pattern description contains see section possible relationships design patterns 
furthermore catalogue presents classification design patterns criteria jurisdiction class object compound characterization creational structural behavioural relationships described informally detail relationship appears little bit different ones 
propose classification relationships helps understanding similarities relationships 
motivates modify catalogue slightly organize design patterns layers 
gives new insights relationships existing design patterns 
major accomplishments follows classification relationships design patterns new design pattern resulting generalization design patterns structuring design patterns layers 
chapter graphic view design patterns relationships appear aforementioned catalogue 
section classifies relationships 
process raises problems gives insights relationships design patterns general 
modifying catalogue structure section show section possible ar 
refer preliminary version catalogue dated 
suppose reader knowledge design patterns catalogue 
introductory design patterns catalogue :10.1.1.136.2555
authors updated terminology cookie memento exemplar prototype manager mediator mimic state walker visitor wrapper decorator 
descriptions design patterns ofthe forthcoming catalogue st cs uiuc edu pub patterns 
relationships design patterns range design patterns layers representing different abstraction levels 

structure design pattern catalogue graphic presentation design patterns relationships 
information added 
annotations arrows taken literally catalogue 
variables placeholders source target respective arrows 
gives impression structure catalogue 
serves point rest contains detailed information relationships 
serves starting point classification revision relationships 

classification relationships issues addressed basis tried find categories containing similar kinds design pattern relationships 
process issues addressed 
relationships refer different aspects design patterns shows relationships addressing issues ranging problem definition creating objects decoupling objects solution definition command composite pattern solution specific implementation details similar level indirection 
wanted improve comprehensibility catalogue structure 
focused degenerated object aggregation organized factory factory method solitaire observer template method builder composite interpreter iterator strategy memento command decorator proxy adapter chain resp 
state bridge glue mediator prototype visitor uses manager object competing patterns implemented similar giving indirect access objects called template methods implement change manager similar passing state objects specialized object recursive structure defines simple instance applied combined maintain behavior node uses traverse structure uses implement managed capture state iteration considered compound incremental level indirection level indirection achieve flexibility similar decoupling objects mimic objects proxy change protocol enhance objects decorator change protocol builds object share leaf nodes typically applied common keep state command target adapts implementation protocol similar constructing object structures similar decorators recursively composable starting point structure design pattern catalogue relationships design patterns problem solution aspects 
relationships addressing implementation details played minor role 
reason removed figures 
directions relationships descriptions relationships catalogue contain direction relationships may unidirectional backwards forwards bidirectional 
category relationship belongs known direction determined quickly 
sure category direction remains unclear 
strength relationship relationship quite strong factory factory method design patterns loosely coupled observer solitaire 
design patterns stand sense combination certain design patterns 
assessment property subjective experience combining different design patterns 
categories relationships classified relationships pairs design patterns categories uses solution building solution problem addressed subproblem similar problem addressed design pattern uses design pattern solution 
solution class structures represents part solution similar address similar kind problem similar kind solution 
cases similarities expressed classification catalogue catalogue classifies prototype factory category object creational 
combined typical combination design patterns combination iterators traverse composite structures contrast uses solution vice versa 
classification shows classified relationships depicted categories 
justifying classifications relationships focus interesting ones 
interesting means find difficult assign particular relationship exactly categories sure meaning relationship think explanation useful 
uses solution cases assignment relationships category clear 
sense split relationships information indicates strength relationship 
similar factory prototype builder similar deal object creation 
builder visitor strategies 
glue mediator serve decouple objects 
contrast proxy decorator allow client attach additional properties dynamically object adapter primarily serves provide completely different interface object 
state strategy loosely coupled bridge strategy relationship addresses implementation detail level indirection passing state objects 
combined builder produces composite objects 
factory method typically called template method 
composite visitor iterator iterator traverses composite structures visitor operations object structures 
depending necessary degree flexibility typically combines design patterns instance interpreter 
composite decorator composite decorator applications example visual objects interviews wein app lint 
kinds relationships looking solution aspect decorator seen degenerated composite considering problem aspect support recursively structured objects decorator focuses attaching additional properties objects 
design patterns similar difficult state precisely 
insert relationship type combined neglect ones 
classification section gives possibilities classification working design patterns 
relationships design patterns factory factory method solitaire observer template method builder composite interpreter iterator strategy memento command decorator proxy adapter chain resp 
state bridge glue mediator prototype visitor classification relationships uses solution similar combined uses solution relationship clear part solution description refer back order shorter easier understand 
tools supporting design pattern approach profit information relationship checked existing designs design patterns visualized blocks internal implementation details order raise abstraction level 
similar design patterns related way address similar problems 
searching design pattern solves certain kind problem look family similar design patterns addressing kind problems secondly meets requirements best 
relationship supports retrieval design patterns 
combined applied design pattern system relationships kind help finding design patterns useful combine existing 
retrieval design patterns supported 
design patterns related relationship may larger building blocks design raising abstraction level 

modifying relationships design patterns section examines proposed classification relationships 
process results new design pattern modifications existing relationships 
new design pattern objectifier shows strategy similar design patterns builder visitor regarded special kinds strategies behaviour 
iterator command design patterns certain behaviours catalogue writes command command dependent behaviour iterator allows vary traversal object structures 
consider behaviour means additional classes central common factor design patterns 
usage design pattern allows vary objectified behaviour 
think behaviour basic design pattern call objectifier 
detailed description objectifier appendix 
uses description format :10.1.1.136.2555
implementation sample code parts left 
relationships design patterns modifications organization relationships different categories difficult partly depends subjective criteria 
difference may combined depends subjective assessment usage seen central part solution combination autonomous design patterns 
furthermore design patterns related different ways decorator composite factory prototype pairs design patterns combined similar 
relationship assigned adequate category 
factory method shows factory method template method called template method factory method plays role primitive template method 
factory uses factory method solution really uses design pattern template method 
consider factory method real design pattern relationship factory template method 
draws arrow design patterns annotates factory method 
adapter decorator proxy things catalogue says decorator different adapter decorator changes object properties interface adapter give object completely new interface 
think main difference adapter quite different decorator proxy 
relationship removed 
factory manager part intrinsic part design pattern remove relationship 
objectifier state relationships strategy design patterns transformed corresponding relationships objectifier 
neglect relationships addressing implementation details remove relationships objectifier state 
explained previous section objectifier state uses objectifier solution 
new relationship state objectifier added 
adapter bridge bridge may adapter solution 
example data structure set adapters view lists array tables sets 
adapters standardize interfaces different classes lists array tables common implementor interface bridge pattern 
objectifier template method explained description objectifier see appendix patterns serve similar purpose varying behaviour 
integration modifications addition objectifier pattern results 
layers design patterns arrangement layers classified relationships design patterns modified 
see uses frequent relationship 
try arrange patters predominant relationship 
graph defined uses relationship acyclic 
property allows arrange design patterns straightforwardly different layers shown 
identify semantically different layers basic design patterns techniques 
design patterns typical software problems 
design patterns specific application domain 
basic design patterns techniques layer contains design patterns heavily design patterns higher layers objectoriented systems general 
design patterns objectifier composite important ones respectively design patterns 
problems addressed design patterns occur developing object oriented systems 
design patterns general 
building system look basic design techniques patterns intentions design patterns see table general applicable broad range problems occurring design object oriented systems 
relationships design patterns factory solitaire observer template method builder composite interpreter iterator objectifier memento command decorator adapter chain resp 
state bridge glue mediator prototype visitor revised classification factory method proxy strategy regard problem addressed composite decorator proxy bit specific problems addressed patters layer 
thought moving composite higher layer 
composite basic design pattern purpose design pattern adapter adapting protocol class protocol class 
composite single multiple recursively composed objects accessed protocol 
decorator attaching additional properties objects 
glue encapsulating subsystem 
mediator managing collaboration objects 
memento encapsulating snapshot internal state object 
objectifier behaviour 
proxy controlling access object 
solitaire providing unique access services variables 
template method behaviour primitives varied subclasses 
table basic design patterns respective purposes tern sense addressed problem handling recursively structured objects basic problem contexts 
relationships composite express quite 
leave composite basic layer 
design patterns typical software problems middle layer comprises design patterns specific problems design software 
design patterns design patterns basic layer patterns application specific layer possibly layer 
problems addressed design patterns typical certain application domain 
builder prototype factory address problems creation objects iterator traverses object structures command operation 
design patterns specific application domain design patterns layer specific assigned application domains 
general problem parsing input occurs consider interpreter specific 
interpreter parse simple languages 
catalogue lists known uses interpreter parsing constraints matching regular expressions 
compiler construction major application domain 
current catalogue contains application specific design patterns 
patterns generic ap relationships design patterns factory solitaire observer template method builder composite interpreter iterator objectifier memento command decorator adapter chain resp 
state bridge glue prototype visitor arrangement design pattern layers design patterns specific application domain design patterns typical software problems basic design patterns techniques proxy mediator strategy factory method broad range problems 
authors support property existence known uses section design pattern description include examples different application domains 
arrangements arrangement design patterns layers possible separation design patterns 
see starting point 
design patterns described separation layers discussed adapted new requirements 
moment helps grasp understand structure catalogue relate new design patterns existing ones 
aid traversing learning design patterns user choose bottom top traversal 
possible arrangement group design patterns typical combinations design patterns 
combinations known see 
think play important role typical combinations building blocks design 
criteria jurisdiction characterization result clusters design patterns similar intent arrangement help retrieval adequate design pattern specific problem 

related notion design patterns introduced alex area architecture 
design pattern description contains section relationships patterns higher lower granularity level 
relationships influence construction process look related patterns builds apply patterns higher levels 
classification patterns mutual relationships 
large collection described design patterns :10.1.1.136.2555:10.1.1.136.2555
relationships design patterns described classified classification design patterns included 
clustering jurisdiction class object compound characterization creational structural behavioural orthogonal derived 
patterns certain cluster considered similar supporting selection appropriate design pattern certain problem 
frameworks wb john considered high level design patterns usually consisting interrelated design patterns lower levels 
beck authors write patterns levels derived level considered basic pattern level :10.1.1.46.8603
furthermore state probably typical architectures patterns generic specific application domain confirms organization depicted relationships design patterns 
mentions design patterns ranging idioms frameworks 
coad design patterns combined exemplary application relationships investigated 

classification relationships design patterns led new design pattern arrangement design patterns different layers 
results partially stem projects 
design pattern approach excellent catalogue proven effective project issues showed design important abstractions application domain requires combination interrelated design patterns 
applying design patterns requires fair knowledge single design patterns relationships 
tool support needed apply design patterns really large applications 
results address issues help understanding complex relationships design patterns organizing existing design patterns categorizing describing new design patterns comparing different collections design patterns building case tools support design patterns 
results step development pattern language 
think valuable development object oriented systems 
continuing design patterns formalizing semantics different kinds relationships different layers shown 
aiming greater precision better semantic definition 
prerequisite defining generally accepted usable classification scheme serve basis 
design patterns discovered described outside especially application specific design patterns 
organize relations classification scheme 
enable evaluate validity usefulness classification scheme improve accordingly 

alex alexander ishikawa silverstein 
pattern language 
oxford university press 
app apple computer cupertino california 
macintosh programmers workshop pascal 
beck beck 
patterns software development 
dr journal 
beck beck johnson :10.1.1.46.8603
patterns generate architecture 
proceedings ecoop 
appear 
booch 
patterns 
object magazine 
buschmann 
rational architectures object oriented software systems 
journal object oriented programming september 
casa eduardo michael bernhard dietmar theobald walter zimmer 
overview 
technical report forschungszentrum informatik fzi karlsruhe germany june 
fzi 
coad coad 
object oriented patterns 
communications acm september 
coad coad 
patterns workshop 
oopsla addendum proceedings volume oops messenger pages vancouver canada october 
oops messenger acm press 
coplien 
advanced programming styles idioms 
addison wesley 
coplien 
generative pattern languages emerging direction software design 
technical report 
gamma helm johnson vlissides :10.1.1.136.2555
design patterns abstraction reuse object oriented designs 
nierstrasz editor proceedings ecoop pages berlin 
springer verlag 
gamma helm johnson vlissides 
design pattern 
addison wesley appear 
john ralph johnson vincent russo 
reusing object oriented designs 
technical report technical report uiucdcs university illinois may 
john johnson 
documenting frameworks patterns 
proceedings oopsla volume acm sigplan notices pages vancouver canada october 
acm press 
lint linton john vlissides calder 
composing user interfaces interviews 
ieee computer february 
pree pree 
meta patterns means describing essentials reusable design 
proceedings ecoop 
appear 
rumbaugh blaha premerlani eddy relationships design patterns lorensen 
object oriented modeling design 
prentice hall englewood cliffs new jersey 
shaw shaw 
heterogenous design idioms software architecture 
proceeding sixth international workshop software specification design software engineering notes pages como italy october 
ieee computer society 
wb rebecca wirfs brock ralph johnson 
surveying current research object oriented design 
cacm september 
wein andr erich gamma rudolph marty 
object oriented application framework 
proceedings oopsla acm sigplan notices pages november 
published proceedings oopsla acm sigplan notices volume number 
walter zimmer 
experiences design patterns reorganize object oriented application july 
position pattern workshop ecoop 
description objectifier name objectifier intent similar behaviour additional classes clients vary behaviour independently behaviour supporting variation oriented design see :10.1.1.136.2555
instances classes represent behaviour properties concrete objects real world 
motivation objectifier general design pattern applied wide range problems 
idea behaviour lot design patterns 
usage objectifier shown example represents somewhat simpler variant design pattern bridge 
frequent problem design separation abstraction implementation interchange implementations 
example data type mapping provide different implementations different tasks due reasons efficiency 
common approach class data type mapping concrete subclasses representing different implementations 
allows interchange implementation compile time run time 
flexible approach varying behaviour independent implementation objects interchanged run time 
example mapping class mapping representing abstraction class superclass concrete implementation classes 
mapping maintains delegates requests current implementation object 
solution allows interchange implementation object run time 
applicability objectifier pattern behaviour decoupled classes order independent behaviour objects interchanged saved modified shared invoked 
run time configuration behaviour required 
identical classes differ methods 
different behaviour additional classes allows unify classes common class configured new additional classes 
large amount conditional code select behaviour 
participants client objectifier 
configured concrete objectifier run time 
objectifier 
omt notation diagram 
italic letters indicate classes methods 
method insert mapping represented pseudo code 
attribute impl mapping 
mapping impl insert object remove object insert object remove object insert object remove object insert object remove object impl insert object relationships design patterns defines common interface different concrete 
may contain data objects common concrete 
collaborations client may objectifier delegate parts behaviour 
objectifier receives information needed fulfil task initialization client passes information parameter calling objectifier 
client configured concrete objectifier adapt behaviour current situation 
class diagram consequences encapsulation modularity behaviour objectified encapsulated classes 
configurability clients objectifier change concrete objectifier run time 
extensibility single point evolution new behaviour implemented adding new class affecting existing classes 
efficiency loss time space additional level indirection 
client dynamically select class efficient current situation 
stateless attributes shared different objects 
known uses example data type mapping see motivation section taken data structure library object oriented database system casa 
type current implementation object mapping object depends current size number objects managed mapping object exceeds falls list implementation replaced client ref objectifier hash implementation vice versa 
replacement triggered mapping object user 
objectifier solution design patterns 
find real examples objectifier looking design patterns referenced see section 
see design patterns contain common idea behaviour solve problem purposes requirements specific objectifier 
objectifier generalization patterns totally new design pattern 
removes redundancies descriptions design patterns lot issues addressed applying related design patterns regard independent design patterns specialized variants objectifier 
table contains related design patterns corresponding behaviour objectified potentially varied 
strategy objectifier differs strategy behaviour broader sense restricted algorithms classic sense algorithms data structures 
objectifier general strategy 
template method similar intent objectifier variation behaviour 
template method represents principal structure algorithm behaviour parts varied subclasses re defining methods primitives 
contrast objectifier puts variable parts additional classes parts varied independently behaviour 
superclass defines common interface subclasses implement concrete behaviour different ways 
design pattern objectified behaviour bridge implementation abstraction builder creation representation objects command command dependent behaviour iterator traversal object structures observer context dependent behaviour state state dependent behaviour strategy complex algorithm visitor type dependent behaviour types single objects compound structure table design patterns objectified behaviour 
