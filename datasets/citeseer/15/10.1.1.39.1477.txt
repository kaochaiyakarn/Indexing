homology higher dimensional automata eric goubault thomas jensen liens ecole normale sup erieure rue ulm paris cedex france email goubault dmi ens fr dept computing imperial college queen gate london sw bz email doc ic ac uk 
higher dimensional automata model concurrent computations 
topological structure higher dimensional automata determines certain properties concurrent computation 
introduce algebraic tool describing automata develop simple homology theory higher dimensional automata 
show homology automata applications study branching time equivalences processes bisimulation 
geometry suggested tool modeling concurrency higher dimensional objects describe concurrent execution processes 
contrasts earlier models interleaving computation steps capture possible behaviours concurrent system 
interleaving models necessarily commit specific choice atomic action unable distinguish execution truly concurrent actions mutually exclusive actions modeled interleaving 
pratt glabbeek advocate model concurrency geometry particular notion higher dimensional automaton hda :10.1.1.38.1239
higher dimensional automata generalisations usual non deterministic finite automata described 
basic idea higher dimensions represent concurrent execution processes 
processes model mutually exclusive execution automaton gamma gamma gamma gamma gamma gamma gamma gamma concurrent execution modeled including dimensional surface delineated dimensional transitions transition automaton 
pictured partially supported esprit bra gamma gamma gamma gamma ab gamma gamma gamma gamma computation modeled path higher dimensional automaton 
properties computational relevance determined topology hda 
hda deterministic paths automaton transformed continuous fashion non determinism arises holes automaton prevent transformation path 
furthermore certain differences topologies hda imply computation possible hda information topology hda answer questions bisimulation hda 
field algebraic topology offers techniques giving algebraic description topological properties geometric objects 
develop theory homology hda 
hda associate sequence groups characterises essential branchings hda 
homology groups amenable automated computation fundamental groups associated homotopy theory 
introduce hda section 
section defines notion show hda described 
section give translation ccs process language 
section develops theory homology show process language translated homology groups 
section shows differences homology groups imply associated 
section concludes 
notation 
denote group field multiplication multiplication modulo 
set write free vector space generated vect 
function set set define linear extension write omega tensor product vector spaces phi direct sum vector spaces 
vector space generated cartesian product sets tensor product vector spaces generated sets 
write trivial structure group vector space vector space generated ker kernel function im image function id identity function 
vector space basis fe ffg define scalar product vectors hx yi sigma ff value sigma ff sigma ff full definition see higher dimensional automata example higher dimensional automaton viz 
automaton interior filled 
section define concept higher dimensional automaton hda precisely explain definition extends usual definition finite automaton 
furthermore define notion path hda describe concurrent computation 
description finite automaton alphabet sigma consists set states transition function theta sigma state reached reading symbol state addition initial state set final states framework clear distinction states automaton rests transitions automaton action 
call automaton dimensional automaton reasons clear shortly 
way viewing automaton inadequate automaton capable performing actions simultaneously 
automaton active actions performed 
picture automaton network dimensional automata automata rest action 
state network mixture resting states transitions actions automaton changes state initiating terminating actions 
number actions called dimension state 
shall call automaton higher dimensional automaton 
classical finite automaton described fashion 
new set states consists old set states elements dimension zero states dimension represent transitions 
note dimension state agrees standard way drawing finite automata state represented point zero dimensional object transition line object dimension 
glabbeek definition hda definition 
higher dimensional automaton tuple oe set states dimension state oe theta partial functions 
oe start state state action th dimension 
functions oe satisfy cubical laws cf 
oe gamma ii oe oe oe oe iii oe oe iv oe oe initial state set final states 
satisfy sigma labeling function assigns label state dimension defined 
furthermore require oe note specifying dimension function shall family sets fs set states dimension cubical law states dimension state increases action initiated decreases action terminated 
representing state list actions performed explain cubical laws 
example take law iv assume th element list representing th element list representing state just th action initiated state oe 
adjustment index 
rules ii iii explained similar way 
example example automaton performs actions concurrently 
drawn follows gamma gamma gamma gamma ab gamma gamma gamma gamma name dimensional states transitions label distinguish different transitions label primes 
example transitions label denoted respectively furthermore shall write oe oe 
labeling function extends function higher dimensional states stipulating string labels dimensional states constituting 
string concatenation 
sum states set summands 
definition 
path higher dimensional automaton oe sequence gamma oe length path word acceptable path path pn acceptable word word associated path acceptable 
language accepted oe set acceptable words 
primes appear drawing 
added sake clarity complexes section introduce concepts algebraic topology useful studying higher dimensional automata 
fundamental problems studied algebraic topology characterise geometric objects equal modulo continuous deformation 
objects considered equal deformed stretching bending tearing piercing 
connected objects essential problem define rigorously notion hole object algebraic topology offers possibilities 
done notion fundamental group group paths manifold generally homotopy groups 
notion close geometric intuition hole prevents path manifold passing side hole continuously deformed path passing side hole 
difficult compute homotopy groups general 
overcome problem poincar introduced notion homology defines holes algebraic constructive way 
manifold represented discrete way triangulating 
manifold represented union points edges triangles tetrahedrons discrete sets called simplicial sets 
objects oriented geometrically suffices give order points 
notion boundary object dimension defined formal sum keeping mind orientation problems objects dimension call boundary result boundary sum object 
boundary line segment endpoints boundary triangle edge triangle 
cycle formal sum objects boundary null 
boundaries cycles converse true 
false hole inside cycle 
characterization holes objects cycles boundaries 
precisely dimensional manifold represented collection dimensional objects fully described listing object dimension gamma dimensional boundaries 
manifold diagram gamma gamma collection dimensional objects boundary map 
definition boundaries cycles involve formal sums objects convenient study diagram replaced replaced linear extension 
boundary dimensional object described object lying image similarly cycle object zero boundary cycles dimension precisely objects kernel boundaries cycles im ker ffi shall define dimensional manifold precisely just denote topological space locally looks euclidean space just speak simplicial homology equation diagram complex 
im ker subgroups form quotient ker im called th homology group complex 
indication information homology groups note non zero homology dimension indicates cycle boundary dimensional object dimensional hole manifold 
transition systems computer science transition systems seen discrete formalizations continuous processes central semantic definitions programming languages 
paths traces execution imagine deformation path possible branchings equivalent holes preceding case 
sequential case just said trivial 
generalize transition systems represent concurrent processes case 
nice geometrical way doing semantic equivalence objects manner bisimulation expressed terms deformation paths homotopy :10.1.1.38.1239
natural consider algebraic equivalent computable form kind homology 
difficulty able take account irreversible flow time talk path 
think ways 
consider homology monoids 
proposed formalism categories :10.1.1.38.1239
suggest capture difference start states fit cubical laws easy understand compute 
definition 
ffi ffi sequence groups sequences group homomorphisms ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi ffi denote states dimension construct free vector space generated denoted elements formal sums appears 
addition elements defined usual coefficients appearing sums disappears 
straightforward forms abelian group empty sum coefficients neutral element 
mappings oe theta hda induce sequence mappings oe oe restrictions oe states dimension 
linear extension obtain group homomorphisms ffi oe ffi ffi oe ffi oe ffi oe ffi ffi ffi cubical laws show theorem theorem 
oe higher dimensional automaton 
ffi oe ffi ffi oe ffi ffi oe ffi 
proof show ffi oe ffi oe 
cubical law ii implies gamma oe oe gamma oe oe gamma oe oe oe oe gamma oe oe oe oe gamma oe oe gamma oe oe rest proof similar 
hda initial state set final states labeling operator written tuple 
translation process algebra develop truly concurrent semantics process algebra translating terms algebra 
quick review ccs syntax assume set actions sigma fg sigma contain action contains complementary action 
action called internal action 
furthermore idle process nil 
terms formed grammar nil choice parallel composition sequential composition 
expository reasons divided parallel operator operators kt parallel composition communication general translation defined structural induction terms 
construct specify resulting ft 
states dimension generators th vector space initial state set final states respectively 
introduce special dimensional state neutral omega represent idle action nil 
case sigma fig fflg ffig fl fl fi fl fi fl fresh state names 
case nil 

case 
assume translation 
fi phi phi labeling function case 
translation 
ff fmg theta fm theta theta fm theta phi id omega element 
case 
considering valid transitions see need paths isomorphic cartesian product paths 
natural form product cubical sets underlying corresponding automata theta gammai boundary operators omega id phi id omega gammai omega thetaf 
labeling operator phi omega sigma jq jq case 
possibility communication represented equations tensor products states interact 
define new bilinear product quotient tensor product equations follows omega omega omega omega omega interaction 
symbol distinguished element sigma see instance represent internal synchronisation action 
define equations case 
omega omega phi omega phi vect fx omega omega phi omega phi vect fx omega theta gammai boundary operators gammai omega omega phi omega gammai gamma omega omega gammai omega thetaf 
labeling operator states omega omega term denote result translation higher dimensional automaton described 
correctness result translation states paths describe fully concurrent execution inferred presentation ccs rules transition 
prefer article give examples fully treatment property 
examples inductive construction translate ccs term ajb equal 
ff fi represent respectively 
form tensor product ff omega fi gamma gamma ff omega gamma gamma omega fi ff omega fi gamma gamma gamma gamma paths ff ff omega ff omega fi fi omega fi ff omega fi omega ff omega ff omega fi omega ff omega ff omega fi omega omega fi ff omega fi omega omega fi ff omega fi paths considered 
give intuitive meaning 
associate action processor action processor path idle computing idle omega continues compute computing omega fi computes idle finished computation ff omega fi idle finished computations compute kc 
ff ff omega ff omega fl gamma gamma gamma gamma omega gamma gamma omega fl gamma gamma fl omega omega fl fi fi omega fi omega fl homology arising hda 
transitions dimension common start point sum belong kernel modulo ker potential branching 
nondeterministic choice boundaries higher dimensional transition exists dimensional transition branchings defined standard way particularly amenable generalisation higher dimensional transitions 
intuitively non deterministic choice dimension element kernel modulo boundaries dimensional objects element th homology group ker im branching 
similar relationship holds maps definition 
define sequences homology see instance groups homology vector spaces ker im ker im element ker cycle element im boundary 
element called branching dimension element called merging dimension element satisfying hx called branching choice dimension write giving intuition homology groups 
consider homology groups dimension 
lemma 
consider finite automaton cycle implies states reachable implies states reachable give examples groups 
consider examples section 
ff omega fi state initial state null branching merging deterministic 
study 
ff omega fi phi branchings dimension choice omega fi phi ff omega dimension null 
results homology theory list results concerning calculation homology groups direct sums tensor products complexes 
results needed interpret operators process algebra operators homology groups 
look sum manifolds 
complexes corresponding manifolds arising disjoint union phi phi analogous fairly obvious 
form phi phi phi compute homology groups follows lemma 
homology groups disjoint union phi generally relation homologies called mayer vietoris sequence see instance 
particular permits adapt preceding lemma case sum identify initial states section 
products compute homology cartesian product manifolds homology 
cartesian product concrete manifolds set pairs points respectively describe discrete equivalent operation simplicial sets complexes arising triangulation 
simplicial sets objects dimension associated manifolds simplicial sets associated product theta gammai generated simplicial complex omega gammai boundary operator omega id phi id omega gammai construction tensor product complexes associated see 
homology groups formula lemma 
gammai omega reader verify definition tensor product correct 
translation process algebra homology groups section demonstrate operators process algebra interpreted operators homology groups interpretation term gives homology groups corresponding term 
case sigma fg 
ff 
case nil 
fg 

case 
interpret choice connected sum complexes 
homology groups phi phi phi 
case 
homology groups omega phi omega case 
parallel composition communication interpreted tensor product complexes 
homology groups formula omega gammai omega case 
possibility communication represented equations tensor products states interact 
homology groups omega phi omega phi interaction term omega omega formula 

show mayer vietoris sequence soon restriction operator elements called deadlocks 
definition tools homological algebra study deadlocks processes failure pairs wishes study failure equivalence 
section concentrate bisimulation 
bisimulation equivalence glabbeek defined notion bisimulation hda 
section demonstrate homology groups hda show hda bisimulation equivalent 
definition 
bisimulation relation related vice versa path path path path bisimulation equivalent exists bisimulation 
notion bisimulation equivalence naturally generalizes usual notion observational equivalence bisimulation equivalence dimensional automata 
setting description bisimulation equivalence complex sequential case 
show branching sense time equivalence locally preserves geometric shapes 
introduce local invariants bisimulation equivalence 
smallest congruence containing relation defined ugv im hx zi hy zi induces map phi card 
hypothesis number states finite distance equal length minimal path reach state finite result proposition 
bisimulation equivalent subset provided states elements boundary states different labels 
states branchings branches distinct labels preserved possibly duplicated bisimulation equivalence 
examples compute homology groups omega omega phi phi ff omega ff omega distinct copy 
fb cg 
proposition bisimulation equivalent 
akc 
compute homology groups omega phi omega omega fl omega fl phi omega ffi omega ffi phi ff omega ff omega phi fi omega fi omega 
omega omega omega omega omega 
akc phi phi phi phi phi phi 
fg 
particular fa dg 
bisimulation equivalent 
technique modeling concurrency centered description higher dimensional automata 
derived notion homology hda demonstrated pertinence homology concepts non determinism bisimulation 
notion hda taken directly original definition intuitively clear find provide streamlined presentation hda purposes 
idea applying algebraic topology study concurrency largely inspired pratt article introduced notion monoidal homotopy hda model true non determinism :10.1.1.38.1239:10.1.1.38.1239
hope provided initial evidence usefulness related notion homology 
subject consider restriction recursion operators ccs 
restriction modeled projection vector spaces recursion limits suitable category 
invariance refinement action related independence choice triangulation calculating homology groups 

due vaughan pratt samson abramsky encouraging chris hankin patrick cousot support referees helpful comments 
diagrams drawn paul taylor tex macros 

rob van glabbeek 
bisimulation semantics higher dimensional automata 
technical report stanford university 

hopcroft ullman 
automata theory languages computation 
addison wesley 

yves lafont alain 
church rosser property homology monoids 
technical report ecole normale sup erieure 

serge lang 
algebra 
addison wesley second edition 

saunders mac lane 
categories working mathematician 
springer verlag 

william massey 
homology cohomology theory 
monographs textbooks pure applied mathematics number 
marcel dekker 

robin milner 
communication concurrency 
prentice hall 

henri poincar 
de analysis situ 
journal de ecole polytechnique 

vaughan pratt 
modeling concurrency geometry 
proc 
th acm symposium principles programming languages 
acm press 
