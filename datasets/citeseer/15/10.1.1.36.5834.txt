index 
optimizations basic tree file structure retrieval operation require little disk access may require depending caching strategy branching factor tree 
updates buffered main memory applied large batches 
postings may compressed ability delete operations sacrificed 
maintenance database consistency block pointer updates discussed 
burkowski discusses free space management postings file proposes organization groups postings subsets leaves free space appending new postings subset 
postings different index terms may combined single subset 
postings different index terms identified unique markers assigned build time 
append overflows available free space triggers complete rebuild postings file 
retrieval operations processed rebuild place 
rebuild free space usage rebuild predictive model free space allocation rebuilt postings file 
translating index term requires disk accesses dictionary postings file retrieve appropriate subset 
update operations append performed rebuild 
approach remainder data structures efficiently realize inverted index data abstraction permit continuous line application updates significantly disrupting retrieval performance 
accessing inverted index term requires single disk access 
update going background process re writing database going basis 
updates maintained main memory data structures applied disk 
update process occasionally checkpointed 
processor failure occurs update process may restarted checkpoint 
integration caching index compression straightforward 
described part waterloo multi user multi server large text database project multitext project 
primary goal project creation prototype distributed full text information retrieval system 
exposition simplified generality lost concrete data structures multitext project discourse 
interfaces index engine ignores document boundaries treating text database continuous sequence 
document boundaries treated structural element 
position database single positive integer 
granularity position refers character word entire document depends needs query language retrieval system 
text structure model multitext project allows multiple terms indexed particular location 
property crucial schema independent retrieval 
index engine responsible implementing classes operations retrieval operations update operations 
retrieval operation request solve query expressed query language 
inverted indexes easily implement boolean algebra languages commercial text retrieval systems 
inverted indexes appropriate implementing schema independent heterogeneous structured text query language multitext project 
query solution pair start indicating range database satisfies query 
retrieval operation may result solutions form 
update operation request add remove indexing 
add indexing operation form add position term indicates specified term occurs specified position database 
remove indexing operation take forms 
remove start term removes indexing specified occurrence term range specified start positions 

remove term removes indexing specified term 

remove start removes indexing specified range 
operation may remove entire document index engine 
add operation remove operations change postings list single index term referred local update operations 
third remove operation may affect postings lists referred global update operation 
worth noting update operations idempotent may applied times effect 
aside retrieval operation implemented text server lookup start returns text associated range 
resources primary concern management index engine memory resources disk storage main memory ram 
md quantity disk storage words quantity main memory words md size difference typically factor range 
quantity include memory required operating system internal data structures index engine application software 
permit control resources disable operating system paging swapping memory management 
operating system provide address translation physical disk network access multiprocessing 
disk storage may consist physical disks 
assume striping case 
word big hold ffl database position 
ffl index term ffl integer range md bit word size sufficient index approximately gb uncompressed english language text 
bit word sufficient currently conceivable applications 
index term represented term symbol 
mapping index terms term symbols global function implemented dispatcher 
ordering term symbols corresponds lexical ordering index terms 
data structures examining line update algorithm examine static organization index engine data structures appear cycles update process 
vast majority disk storage allocated index blocks 
index blocks index combines functions dictionary postings file 
index contains index terms postings 
index block fixed size size index total disk storage allocated index multiples index block contains index entries 
index entry consists term symbol followed occurrence count followed occurrence list indicating positions database term occurs see 
occurrence count bigger space remaining index block 
entry words words index block may unused 
occurrence counts relative pointers may treat index block linked list entries 
length linked list bb 
index ordered term symbol database position divided index blocks appropriate 
entry particular term symbol fit single index block divided multiple entries stored range index blocks 
disk space allocated index blocks treated circular array 
index may start point circular array completely fill 
dynamic update algorithm operates modifying index update list writing modified index unused portion array releasing storage unmodified index modified written back 
main memory purposes 
working storage retrieval operations 
storage largely cache index blocks solving queries includes memory queries partial results 

storage index map 
entry index map describes block index storage 

working storage update algorithm 
storage buffers updates applied disk 
index map contains word description block index giving index map size relation word index map entry contains term symbol indexed block second word contains posting term symbol indexed block 
binary search index map allows determination range index blocks containing postings list particular term 
postings list may read single disk access 
interested postings limited range values restrictions placed client earlier partial query results keeping posting index map assists applying restriction particularly indexing term divided multiple index blocks 
space allocated disk storage non volatile copy index map 
small amount additional space allocated configuration block containing parameters describing disk layout start locations updated updated segments index 
consistency file structures requires write configuration block atomic 
space allocated single physical block assumption write physical block correctly overwrite block change block 
update application updates buffered main memory applied disk 
background process continuously cycles index storage applying updates re writing index 
update throughput function size main memory buffer period update cycle 
organization index update application simple process 
modified index blocks written free portion index storage affecting consistency index 
free portion main memory index map modified parallel 
point time index blocks grouped segments updated segment tobe updated segment 
index map parallels structure 
retrieval operation appropriate segment selected performing binary search determine actual blocks retrieve 
rare case access term stretches segments accesses disk required 
available free space consumed updated index blocks time deemed appropriate index checkpointed range index blocks freed 
checkpointing consists steps 
update non volatile copy index map 
involves changes portions map currently free 

disable query access 

index terms occurrence counts database positions index block organization 

invalidate cached indexed blocks freed 

re write configuration block new file structure parameters 

enable query access 
steps performed query access disabled proceed quickly involve minor modifications main memory data structures single write disk 
failure step leaves index consistent state corresponding previous checkpoint 
failure step leaves index consistent state updates 
update management assume update operations external maintenance agent responsible maintaining state database 
maintenance agent may run dispatcher may multiplex sources updates single source 
purpose query operations updates take effect soon received maintenance agent latency applying updates disk acceptable 
maintenance agent acknowledged outstanding updates applied disk 
updates buffered main memory applied disk 
time collection updates auxiliary database modifying results retrieval accesses main index 
buffered memory assume information relating update occupy words words update parameters word encode operator type information necessary acknowledging update 
global operations local operations maintained separate data structures global update list local update list respectively 
require identical properties data structures ffl sequential access updates sorted order 
global list sorted start range scanned index term update cycle 
local list sorted index term database position scanned update cycle 
ffl insertion deletion 
circular disk array index update free space update cycle update cycle free space updated portion index un updated portion index update cycle updated index free space overview update cycle 
ffl search 
results querying main index modified searches local global update lists 
possible perform operations concurrently sequential scan going process updates continuously arriving maintenance agent retrieval requests constantly processed clients 
update process acknowledges deletes updates checkpoint 
possible failure checkpoint updates acknowledged result maintenance agent having incorrect view index engine file structures 
idempotency update operations ensures updates re applied harm 
skip lists provide simple nearly ideal implementation update lists 
purposes sequential access skip lists effectively linked lists 
insertion deletion search log operations average case 
concurrent access skip lists simple efficient 
overhead pointers range words buffered update depending implementation parameter 
total storage overhead buffered update words 
data structures skip lists may pugh discussion concurrent maintenance data structures provides strong argument skip lists 
global operations represent deletions ranges text local operations represent changes individual postings lists 
adding document requires local operations deleting document requires single global operation 
reasons global operations tend number local operations tend relatively number 
global operations buffered main memory requirement updates take immediate effect need buffer local updates main memory 
local updates may sorted maintenance agent batches index engine course update cycle 
technique disk access longer factor limiting maximum update throughput 
word size bits md gb mb gb gb mb kb kb mb mb retrieval system parameters 
implementation measurements update strategy described implemented part multitext project 
time experience strategy large scale production loads 
unusual aspect approach continuous re organizational cycle index 
order convince strategy feasible production environment performed experiments understand possible performance impact continuous update heavy retrieval load 
assumed worst case continuous random query accesses hits cache 
query access reads single index block 
varied update cycle time examined effects sustainable query access rate 
provide baselines measurements determined maximum sustainable access rate achieved concurrent update minimum possible update cycle time concurrent query access 
parameters retrieval system experiments 
parameters strictly relevant experiment values taken nominal 
experiments run dedicated dec alpha running osf gb seagate st scsi disk 
results experiment shown 
irregular spacing data points horizontal dimension result inability finely control update cycle period current implementation 
update cycle time little minutes query performance degrades 
update cycle time hours query performance degrades 
nominal value mb quantity mb merging updates index blocks read written update process groups mb size 
remaining mb buffering updates 
update requires words word bytes mb allows updates buffered 
applying updates hour update cycle gives update throughput updates sec applied minute update cycle update throughput updates sec 
comparison reader consider maximum query access rate consider throughput applying update individually tree file structure 
issues index compression index compression integrates smoothly scheme 
index block individually compressed variable length segment 
index map compressed blocks fixed size blocks 
add word entry index map indicates offset compressed block index 
blocks decompressed brought cache read update process 
blocks cyclically re written compression hamper update 
system considerations concentrated design index engine 
look briefly relevant aspects remainder system 
text server translates range database associated text 
details differ organize text server data structuring principles similar index engine 
data structures efficiently implement inverted index data abstraction efficiently implement queries dictionary 
generally queries consist identifying terms match specified patterns 
systems separate dictionary index type query satisfied dictionary search 
duties dispatcher responsible handling dictionary queries maintaining separate dictionary database words system 
addition dispatcher responsible implementing term thesaurus 
wider application exposition context distributed information retrieval system data structures update strategy wider applicability 
inverted indexes applications information retrieval 
file structures static update requirement case cd rom example data structures provide efficient realization inverted lists 
update strategy applicability databases similar update characteristics text server ready example 
data structures efficiently realize inverted index data abstraction 
retrieval operation requires single disk access rare cases 
update strategy provides high throughput little impact retrieval performance 
file structures may compressed increase size index stored available disk 
discussed context distributed full text information retrieval system results applicability inverted indexes database similar update characteristics 
multi user multi server large text database project funded government province ontario information technology research centre 
natural sciences engineering research council canada university waterloo provided additional financial support 
update cycle time min 
query access rate concurrent update maximum query access rate concurrent update minimum update cycle time queries performance impact continuous update cycles 
forbes burkowski 
retrieval performance distributed text database utilizing parallel processor document server 
proc 
nd inter 
symp 
databases parallel distributed systems pages 
forbes burkowski 
surrogate subsets free space management strategy index text retrieval system 
proc 
th acm sigir conference pages brussels 
charles clarke cormack burkowski 
algebra structured text search framework implementation 
technical report cs university waterloo computer science department waterloo ontario canada september 
available anonymous ftp cs archive cs cs archive uwaterloo ca 
doug cutting jan pedersen 
optimizations dynamic inverted index maintenance 
proc 
th acm sigir conference brussels 
christos faloutsos 
access methods text 
computing surveys march 
donna harmon edward fox baeza yates lee 
inverted files 
william frakes ricardo baeza yates editors information retrieval data structures algorithms chapter pages 
prentice hall englewood cliffs nj 
donald knuth 
art computer programming volume 
addison wesley reading massachusetts 
william pugh 
concurrent maintenance skip lists 
technical report tr cs dept computer science university maryland college park maryland april 
william pugh 
skip lists probabilistic alternative balanced trees 
cacm june 
gerard salton 
automatic text processing transformation analysis retrieval information computer 
addison wesley reading ma 
gerard salton michael mcgill 
modern information retrieval chapter pages 
mcgraw hill computer science series 
mcgraw hill new york 
anthony tomasic hector garcia molina 
performance inverted indices distributed text document information retrieval systems 
nd inter 
conf 
parallel distributed information systems pages san diego january 
steven 
boolean operations 
william frakes ricardo baeza yates editors information retrieval data structures algorithms chapter pages 
prentice hall englewood cliffs nj 
weiss 
size reduction inverted files data compression data structure reorganization 
phd thesis george washington university 

